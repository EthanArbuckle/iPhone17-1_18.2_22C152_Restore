uint64_t sub_100C6149C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v52;
  unint64_t v53;
  void (**v54)(void);
  void (*v55)(void);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  sqlite3_stmt **v69;
  void v70[2];
  void (*v71)(void);
  uint64_t v72;
  unint64_t v73;
  sqlite3_stmt **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, void, uint64_t, uint64_t);
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v82 = a3;
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  v78 = (uint64_t)v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(void **)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v74 = (sqlite3_stmt **)((char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v13);
  v77 = (uint64_t)v70 - v14;
  __chkstk_darwin(v15, v16);
  v75 = (uint64_t)v70 - v17;
  v18 = sub_1005057FC((uint64_t *)&unk_10168A0C0);
  v19 = v18 - 8;
  __chkstk_darwin(v18, v20);
  v22 = (char *)v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v23 - 8, v24);
  v76 = (uint64_t)v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v79 = (uint64_t)v70 - v28;
  __chkstk_darwin(v29, v30);
  v32 = (char *)v70 - v31;
  __chkstk_darwin(v33, v34);
  v36 = (char *)v70 - v35;
  v86 = a1;
  v37 = a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID;
  swift_beginAccess();
  v38 = (void (*)(uint64_t, uint64_t, uint64_t))v9[2];
  v84 = v9 + 2;
  v85 = a2;
  v81 = v38;
  v38((uint64_t)v36, a2, v8);
  v80 = (void (*)(char *, void, uint64_t, uint64_t))v9[7];
  v80(v36, 0, 1, v8);
  v39 = (uint64_t)&v22[*(int *)(v19 + 56)];
  sub_100522E9C(v37, (uint64_t)v22, (uint64_t *)&unk_101674520);
  sub_100522E9C((uint64_t)v36, v39, (uint64_t *)&unk_101674520);
  v83 = v9;
  v40 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v9[6];
  if (v40((uint64_t)v22, 1, v8) == 1)
  {
    sub_100522F00((uint64_t)v36, (uint64_t *)&unk_101674520);
    if (v40(v39, 1, v8) == 1) {
      return sub_100522F00((uint64_t)v22, (uint64_t *)&unk_101674520);
    }
  }
  else
  {
    sub_100522E9C((uint64_t)v22, (uint64_t)v32, (uint64_t *)&unk_101674520);
    if (v40(v39, 1, v8) != 1)
    {
      v45 = v83;
      v46 = v75;
      ((void (*)(uint64_t, uint64_t, uint64_t))v83[4])(v75, v39, v8);
      sub_100CDE0D8((unint64_t *)&qword_10167BDC0, (void (*)(uint64_t))&type metadata accessor for UUID);
      v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      v48 = (void (*)(uint64_t, uint64_t))v45[1];
      v48(v46, v8);
      sub_100522F00((uint64_t)v36, (uint64_t *)&unk_101674520);
      v48((uint64_t)v32, v8);
      result = sub_100522F00((uint64_t)v22, (uint64_t *)&unk_101674520);
      v42 = v87;
      v44 = v85;
      v43 = v86;
      if (v47) {
        return result;
      }
      goto LABEL_8;
    }
    sub_100522F00((uint64_t)v36, (uint64_t *)&unk_101674520);
    ((void (*)(char *, uint64_t))v83[1])(v32, v8);
  }
  sub_100522F00((uint64_t)v22, (uint64_t *)&unk_10168A0C0);
  v42 = v87;
  v44 = v85;
  v43 = v86;
LABEL_8:
  result = (uint64_t)sub_100CDAD88(v43);
  if (result)
  {
    v49 = result;
    v50 = v79;
    v81(v79, v44, v8);
    v51 = (void (*)(uint64_t, void, uint64_t, uint64_t))v80;
    v80((char *)v50, 0, 1, v8);
    (*(void (**)(uint64_t))(*(void *)v49 + 272))(v50);
    v52 = (*(uint64_t (**)(void, void))(*(void *)v49 + 456))(*(void *)(v82 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext), 0);
    if (!v42)
    {
      v86 = *(void *)(v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges) | 0x16;
      v54 = (void (**)(void))(*(void *)v49 + 256);
      v55 = *v54;
      v72 = v52;
      v73 = v53;
      v70[1] = v54;
      v71 = v55;
      v55();
      v56 = *(void *)(v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
      v57 = *(void *)(v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions + 16);
      v84 = *(void **)(v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions + 8);
      v85 = v56;
      v79 = v57;
      v75 = *(void *)(v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions);
      v58 = v76;
      v81(v76, v44, v8);
      v51(v58, 0, 1, v8);
      v80 = (void (*)(char *, void, uint64_t, uint64_t))(v43
                                                                  + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier);
      sub_100CE144C(v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier, v78, type metadata accessor for CRLBoardIdentifier);
      v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43
                                                             + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue);
      v60 = *(void *)(v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData);
      v59 = *(void *)(v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData + 8);
      v61 = v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData;
      v63 = *(void *)(v43 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
      v62 = *(void *)(v61 + 8);
      type metadata accessor for CRLBoardItemDatabaseRow();
      swift_allocObject();
      v87 = 0;
      v65 = v72;
      v64 = v73;
      sub_100510D4C(v72, v73);
      sub_1005FA2A0(v60, v59);
      sub_1005FA2A0(v63, v62);
      v66 = sub_100E19EB8(v77, v85, (uint64_t)v84, v79, v75, v76, v78, (uint64_t)v81, v65, v64, v60, v59, 1, v86, v63, v62);
      v67 = v87;
      v68 = sub_100C58808(v66);
      if (v67)
      {
        swift_release();
        sub_100510084(v65, v64);
      }
      else
      {
        v69 = v74;
        ((void (*)(uint64_t))v71)(v68);
        sub_100C5F3C0(v69, (uint64_t)v80);
        ((void (*)(sqlite3_stmt **, uint64_t))v83[1])(v69, v8);
        sub_100510084(v65, v64);
        swift_release();
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100C61CA8(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v42 = a3;
  uint64_t v39 = a2;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v12 = v13;
  v14 = *(void (**)(void))(v9 + 104);
  unsigned int v43 = enum case for DispatchPredicate.onQueue(_:);
  v44 = (void (*)(void *, void, uint64_t))v14;
  v14(v12);
  id v15 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  v45 = *(void (**)(void *, uint64_t))(v9 + 8);
  v45(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_19;
  }
  int v40 = a4;
  uint64_t v41 = a1;
  uint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_10079FC40(v16, 0xD00000000000005BLL, 0x800000010127C3F0);
  uint64_t result = swift_release();
  if (v5) {
    return result;
  }
  unint64_t v19 = v42;
  if (v42 >> 60 == 15)
  {
    v23 = *(void **)(*(void *)(v17 + 16) + 32);
    void *v12 = v23;
    v44(v12, v43, v8);
    id v24 = v23;
    LOBYTE(v23) = _dispatchPreconditionTest(_:)();
    v45(v12, v8);
    if (v23)
    {
      swift_beginAccess();
      sqlite3_bind_null(*(sqlite3_stmt **)(v17 + 24), 1);
      goto LABEL_7;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v20 = v17;
  uint64_t v21 = v39;
  sub_100510D4C(v39, v42);
  sub_10079DCE4(v21, v19, 1);
  uint64_t v22 = v21;
  uint64_t v17 = v20;
  sub_100514260(v22, v19);
LABEL_7:
  sub_10079D6E8((v19 >> 60 != 15) & v40, 2);
  uint64_t v25 = sub_100753FC0();
  uint64_t v27 = v25;
  unint64_t v28 = v26;
  sub_10079DCE4(v25, v26, 3);
  sub_100510084(v27, v28);
  v29 = *(void **)(*(void *)(v17 + 16) + 32);
  void *v12 = v29;
  v44(v12, v43, v8);
  id v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)();
  v45(v12, v8);
  if ((v29 & 1) == 0) {
    goto LABEL_20;
  }
  v31 = (sqlite3_stmt **)(v17 + 24);
  swift_beginAccess();
  int v32 = sqlite3_step(*(sqlite3_stmt **)(v17 + 24));
  if (v32 != 101) {
    goto LABEL_15;
  }
  v33 = *(void **)(*(void *)(v17 + 16) + 32);
  void *v12 = v33;
  v44(v12, v43, v8);
  id v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)();
  int v32 = ((uint64_t (*)(void *, uint64_t))v45)(v12, v8);
  if ((v33 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    int v35 = v32;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v36 = v35;
    *(void *)(v36 + 8) = 0xD000000000000023;
    *(void *)(v36 + 16) = 0x800000010127C450;
    swift_willThrow();
    v37 = *(void **)(*(void *)(v17 + 16) + 32);
    void *v12 = v37;
    v44(v12, v43, v8);
    id v38 = v37;
    LOBYTE(v37) = _dispatchPreconditionTest(_:)();
    v45(v12, v8);
    if (v37) {
      goto LABEL_16;
    }
LABEL_21:
    __break(1u);
  }
LABEL_16:
  if (*v31)
  {
    sqlite3_finalize(*v31);
    *v31 = 0;
  }
  return swift_release();
}

uint64_t sub_100C621C4(void *a1, int a2, uint64_t a3, unint64_t a4, int a5, int a6)
{
  LODWORD(v306) = a6;
  LODWORD(v314) = a5;
  unint64_t v305 = a4;
  uint64_t v301 = a3;
  LODWORD(v313) = a2;
  v320 = a1;
  uint64_t v289 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  uint64_t v10 = __chkstk_darwin(v289, v9);
  uint64_t v287 = (uint64_t)&v277 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v290 = (uint64_t)&v277 - v13;
  uint64_t v292 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  uint64_t v15 = __chkstk_darwin(v292, v14);
  v285 = (sqlite3_stmt **)((char *)&v277 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v288 = (uint64_t)&v277 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v277 - v21;
  uint64_t v307 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  uint64_t v24 = __chkstk_darwin(v307, v23);
  uint64_t v297 = (uint64_t)&v277 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v26);
  uint64_t v296 = (uint64_t)&v277 - v27;
  uint64_t v28 = sub_1005057FC(&qword_101699628);
  __chkstk_darwin(v28 - 8, v29);
  *(void *)&long long v309 = (char *)&v277 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = (int *)type metadata accessor for CRLBoardCRDTData(0);
  v308 = (uint64_t (*)(uint64_t))*((void *)v315 - 1);
  uint64_t v32 = __chkstk_darwin(v315, v31);
  uint64_t v295 = (uint64_t)&v277 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v32, v34);
  uint64_t v294 = (uint64_t)&v277 - v36;
  uint64_t v38 = __chkstk_darwin(v35, v37);
  v304 = (uint64_t (*)(uint64_t))((char *)&v277 - v39);
  uint64_t v41 = __chkstk_darwin(v38, v40);
  uint64_t v312 = (uint64_t)&v277 - v42;
  uint64_t v44 = __chkstk_darwin(v41, v43);
  uint64_t v300 = (uint64_t)&v277 - v45;
  uint64_t v47 = __chkstk_darwin(v44, v46);
  uint64_t v299 = (uint64_t)&v277 - v48;
  uint64_t v50 = __chkstk_darwin(v47, v49);
  uint64_t v298 = (uint64_t)&v277 - v51;
  __chkstk_darwin(v50, v52);
  uint64_t v319 = (uint64_t)&v277 - v53;
  uint64_t v311 = type metadata accessor for UUID();
  uint64_t v310 = *(void *)(v311 - 8);
  uint64_t v55 = __chkstk_darwin(v311, v54);
  v57 = (char *)&v277 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __chkstk_darwin(v55, v58);
  v303 = (uint64_t *)((char *)&v277 - v60);
  __chkstk_darwin(v59, v61);
  v317 = (char *)&v277 - v62;
  uint64_t v63 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v282 = *(void *)(v63 - 8);
  uint64_t v65 = __chkstk_darwin(v63 - 8, v64);
  uint64_t v284 = (uint64_t)&v277 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __chkstk_darwin(v65, v67);
  uint64_t v283 = (uint64_t)&v277 - v69;
  uint64_t v71 = __chkstk_darwin(v68, v70);
  uint64_t v286 = (uint64_t)&v277 - v72;
  uint64_t v74 = __chkstk_darwin(v71, v73);
  unint64_t v302 = (unint64_t)&v277 - v75;
  __chkstk_darwin(v74, v76);
  v78 = (double *)((char *)&v277 - v77);
  uint64_t v79 = type metadata accessor for DispatchPredicate();
  uint64_t v80 = *(void *)(v79 - 8);
  __chkstk_darwin(v79, v81);
  v83 = (uint64_t *)((char *)&v277 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v84 = v6;
  v85 = *(void **)(v6 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v83 = v85;
  (*(void (**)(void *, void, uint64_t))(v80 + 104))(v83, enum case for DispatchPredicate.onQueue(_:), v79);
  id v86 = v85;
  LOBYTE(v85) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v80 + 8))(v83, v79);
  if ((v85 & 1) == 0)
  {
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v293 = (uint64_t)v57;
  v291 = v22;
  v87 = v320;
  v88 = (char *)v320 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  uint64_t v89 = v319;
  sub_100CE144C((uint64_t)v88, v319, type metadata accessor for CRLBoardCRDTData);
  uint64_t v90 = sub_1005057FC(&qword_101674550);
  uint64_t v91 = (uint64_t)v317;
  CRRegister.wrappedValue.getter();
  sub_100CE14B4(v89, type metadata accessor for CRLBoardCRDTData);
  uint64_t v93 = *(void *)((char *)v87 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  unint64_t v92 = *(void *)((char *)v87 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8);
  swift_bridgeObjectRetain();
  sub_100753370(v91, v93, v92, (uint64_t)v78);
  unint64_t v94 = v316;
  uint64_t v95 = sub_100C51248((uint64_t)v78);
  uint64_t v318 = v84;
  if (v94)
  {
    sub_100CE14B4((uint64_t)v78, type metadata accessor for CRLBoardIdentifier);
    uint64_t v96 = v318;
    v97 = v87;
LABEL_4:
    sub_100C64D18(v96, (uint64_t)v97);
    return (uint64_t)v78;
  }
  unint64_t v99 = v95;
  uint64_t v281 = v90;
  v280 = v88;
  v278 = (void *)v93;
  v279 = (char *)v92;
  sub_100CE14B4((uint64_t)v78, type metadata accessor for CRLBoardIdentifier);
  v100 = (uint64_t (*)(uint64_t))v87;
  if (!v99)
  {
    if (v314 & 1) != 0 || (v306)
    {
      BOOL v133 = (_BYTE)v313 == 0;
      v134 = *(uint64_t (**)(uint64_t))(v318 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
      uint64_t v135 = (uint64_t)v304;
      sub_100CE144C((uint64_t)v280, (uint64_t)v304, type metadata accessor for CRLBoardCRDTData);
      if (qword_10166EE10 != -1) {
        swift_once();
      }
      uint64_t v136 = type metadata accessor for CRCodableVersion();
      sub_100556B74(v136, (uint64_t)qword_10171A2D8);
      sub_100CDE0D8((unint64_t *)&unk_10169A0D0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
      uint64_t v176 = CRDT.serializedData(_:version:)();
      unint64_t v178 = v177;
      v308 = v134;
      uint64_t v312 = v133;
      sub_100CE14B4(v135, type metadata accessor for CRLBoardCRDTData);
      v78 = (double *)type metadata accessor for CRLBoardCRDTData;
      uint64_t v313 = v176;
      uint64_t v179 = (uint64_t)v280;
      uint64_t v180 = v319;
      sub_100CE144C((uint64_t)v280, v319, type metadata accessor for CRLBoardCRDTData);
      uint64_t v181 = (uint64_t)v317;
      unint64_t v316 = v178;
      v314 = 0;
      CRRegister.wrappedValue.getter();
      sub_100CE14B4(v180, type metadata accessor for CRLBoardCRDTData);
      unint64_t v182 = (unint64_t)v279;
      swift_bridgeObjectRetain();
      sub_100753370(v181, (uint64_t)v278, v182, v302);
      uint64_t v311 = v87[3];
      uint64_t v310 = v87[4];
      *(void *)&long long v309 = v87[5];
      uint64_t v183 = v294;
      sub_100CE144C(v179, v294, type metadata accessor for CRLBoardCRDTData);
      CRRegister.wrappedValue.getter();
      sub_100CE14B4(v183, type metadata accessor for CRLBoardCRDTData);
      uint64_t v184 = v295;
      sub_100CE144C(v179, v295, type metadata accessor for CRLBoardCRDTData);
      type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
      uint64_t v185 = v293;
      CRRegister.wrappedValue.getter();
      sub_100CE14B4(v184, type metadata accessor for CRLBoardCRDTData);
      uint64_t v186 = v301;
      unint64_t v187 = v305;
      sub_1005FA2A0(v301, v305);
      sub_100510D4C(v313, v316);
      static Date.timeIntervalSinceReferenceDate.getter();
      double v189 = v188;
      sub_100CE144C(v179, v180, type metadata accessor for CRLBoardCRDTData);
      sub_1005057FC(&qword_101691F28);
      CRMaxRegister.wrappedValue.getter();
      double v190 = v322;
      sub_100CE14B4(v180, type metadata accessor for CRLBoardCRDTData);
      sub_100CE144C(v179, v180, type metadata accessor for CRLBoardCRDTData);
      sub_1005057FC((uint64_t *)&unk_101689310);
      CRRegister.wrappedValue.getter();
      LOBYTE(v179) = LOBYTE(v322);
      uint64_t v191 = v180;
      uint64_t v96 = v318;
      sub_100CE14B4(v191, type metadata accessor for CRLBoardCRDTData);
      type metadata accessor for CRLBoardDatabaseRow();
      swift_allocObject();
      char v276 = v179;
      uint64_t v192 = v313;
      uint64_t v275 = v187;
      unint64_t v193 = v316;
      uint64_t v194 = sub_100BA40A8(v302, v311, v310, v309, (uint64_t)v303, v185, v313, v316, v189, v190, 0, v312, 0, v186, v275, 0, 0, 0xF000000000000000, v276);
      v195 = v314;
      sub_100C65F58(v194);
      if (v195)
      {
        swift_release();
        sub_100510084(v192, v193);
LABEL_55:
        v97 = v320;
        goto LABEL_4;
      }
      uint64_t v200 = v290;
      *(void *)(v290 + *(int *)(v289 + 36)) = &_swiftEmptyDictionarySingleton;
      LOBYTE(v322) = 0;
      CRRegister.init(wrappedValue:)();
      LOBYTE(v322) = 1;
      CRRegister.init(wrappedValue:)();
      LOBYTE(v322) = 1;
      CRRegister.init(wrappedValue:)();
      LOBYTE(v322) = 0;
      CRRegister.init(wrappedValue:)();
      LOBYTE(v322) = 0;
      CRRegister.init(wrappedValue:)();
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      double v322 = 1.0;
      uint64_t v323 = 0;
      uint64_t v324 = 0;
      uint64_t v325 = 0;
      char v326 = 1;
      long long v327 = xmmword_101190880;
      long long v328 = xmmword_101190880;
      char v329 = 0;
      sub_100CE6174();
      uint64_t v241 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v243 = v242;
      swift_release();
      uint64_t v244 = v286;
      sub_100CE144C(v194 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier, v286, type metadata accessor for CRLBoardIdentifier);
      uint64_t v245 = v287;
      sub_100CE144C(v200, v287, type metadata accessor for CRLUserBoardMetadataCRDTData);
      v246 = v308;
      sub_100510D4C(v241, v243);
      uint64_t v249 = sub_1008445BC(v244, v245, (uint64_t)v246, v241, v243, 0, 1, 1uLL, 0, 0xF000000000000000, 0x1000000000000);

      sub_100C66D70(v249);
      v314 = 0;
      v255 = (int *)sub_100A394EC((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v256 = v319;
      sub_100CE144C((uint64_t)v280, v319, type metadata accessor for CRLBoardCRDTData);
      uint64_t v257 = (uint64_t)v317;
      CRRegister.wrappedValue.getter();
      sub_100CE14B4(v256, type metadata accessor for CRLBoardCRDTData);
      unint64_t v258 = (unint64_t)v279;
      swift_bridgeObjectRetain();
      sub_100753370(v257, (uint64_t)v278, v258, (uint64_t)v285);
      swift_storeEnumTagMultiPayload();
      unint64_t v259 = sub_100A394EC((uint64_t)_swiftEmptyArrayStorage);
      if (*(void *)(v259 + 16) || *((void *)v255 + 2))
      {
        v315 = v255;
        uint64_t v260 = sub_100C5B784(v259, (uint64_t)v255, 0);
        uint64_t v262 = v261;
        swift_bridgeObjectRetain();
        v78 = sub_1006BA36C(v262);
        swift_bridgeObjectRelease();
        v263 = v314;
        sub_100C5D1DC(v285, (uint64_t)v78);
        if (v263)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100510084(v241, v243);
          sub_100510084(v313, v316);
          sub_100CE14B4((uint64_t)v285, type metadata accessor for CRLAssetReferrerIdentifier);
          sub_100CE14B4(v290, type metadata accessor for CRLUserBoardMetadataCRDTData);
          goto LABEL_53;
        }
        swift_release();
        sub_100C5DA80((uint64_t)v285, v260, v312);
        v314 = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v200 = v290;
      }
      sub_100CE14B4((uint64_t)v285, type metadata accessor for CRLAssetReferrerIdentifier);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v272 = (double *)v320;
      unint64_t v273 = v320[3];
      swift_retain_n();
      unint64_t v274 = sub_1002094A4();
      swift_release();
      swift_release();
      sub_100510084(v241, v243);
      sub_100510084(v313, v316);
      swift_release();
      sub_100CE14B4(v200, type metadata accessor for CRLUserBoardMetadataCRDTData);
      if (v274 >= v273)
      {
        double v250 = COERCE_DOUBLE(&_swiftEmptySetSingleton);
        v78 = v272;
        uint64_t v137 = v318;
        goto LABEL_86;
      }
      v78 = v272;
      uint64_t v137 = v318;
      uint64_t v251 = (uint64_t)v317;
      uint64_t v22 = v279;
      v83 = v278;
      goto LABEL_85;
    }
    goto LABEL_25;
  }
  unint64_t v101 = v99;
  uint64_t v102 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone;
  LODWORD(v306) = *(unsigned __int8 *)(v99 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone);
  uint64_t v103 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges;
  unint64_t v104 = *(void *)(v101 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges);
  unint64_t v105 = *(void *)(v101 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
  v106 = v315;
  v303 = (uint64_t *)(v101 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  if (v105 >> 60 == 15)
  {
    if (v314)
    {
      unint64_t v109 = v104;
      uint64_t v295 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges;
      v110 = v100;
      swift_retain();
      unint64_t v111 = sub_100A394EC((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      double v322 = COERCE_DOUBLE(&_swiftEmptyDictionarySingleton);
      sub_100CD60E0(v111, (uint64_t)sub_100CD6060, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v322);
      v304 = 0;
      uint64_t v294 = v102;
      uint64_t v113 = v109 | 2;
      if (v306) {
        uint64_t v113 = 4;
      }
      if ((_BYTE)v313) {
        uint64_t v113 = 0;
      }
      uint64_t v293 = v113;
      *(double *)&long long v309 = v322;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LODWORD(v297) = 0;
      LODWORD(v299) = 0;
      LODWORD(v298) = 0;
      LODWORD(v290) = 1;
      unint64_t v302 = (unint64_t)&_swiftEmptyDictionarySingleton;
      goto LABEL_15;
    }
    swift_bridgeObjectRelease_n();
    swift_release();
LABEL_25:
    uint64_t v137 = v318;
    v78 = 0;
LABEL_26:
    sub_100C64D18(v137, (uint64_t)v320);
    return (uint64_t)v78;
  }
  uint64_t v107 = *(void *)(v101 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  sub_1005FA2A0(v107, v105);
  sub_1005FA2A0(v107, v105);
  sub_100CDE0D8((unint64_t *)&unk_10169A0D0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
  swift_retain();
  uint64_t v108 = v309;
  CRDT.init(serializedData:)();
  unint64_t v302 = v104;
  v304 = 0;
  uint64_t v295 = v103;
  uint64_t v294 = v102;
  (*((void (**)(uint64_t, void, uint64_t, void *))v308 + 7))(v108, 0, 1, v106);
  uint64_t v161 = v108;
  uint64_t v162 = v298;
  sub_100CE12D8(v161, v298, type metadata accessor for CRLBoardCRDTData);
  long long v309 = *(_OWORD *)(v101 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
  uint64_t v163 = *(void *)(v101 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
  uint64_t v164 = v319;
  sub_100CE144C(v162, v319, type metadata accessor for CRLBoardCRDTData);
  uint64_t v165 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
  v166 = (uint64_t *)(v101 + v165 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  uint64_t v168 = *v166;
  uint64_t v167 = v166[1];
  type metadata accessor for CRLBoardData(0);
  uint64_t v169 = swift_allocObject();
  *(void *)(v169 + 16) = 7;
  *(_OWORD *)(v169 + 24) = v309;
  *(void *)(v169 + 40) = v163;
  v170 = (uint64_t (*)(uint64_t))v169;
  sub_100CE12D8(v164, v169 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
  swift_bridgeObjectRetain();
  swift_release();
  sub_100514260(v107, v105);
  v171 = (void *)((char *)v170 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  void *v171 = v168;
  v171[1] = v167;
  sub_100CE14B4(v162, type metadata accessor for CRLBoardCRDTData);
  unint64_t v316 = v101;
  if ((_BYTE)v313)
  {
    int v172 = v306;
    if (v313 == 1)
    {
      unint64_t v173 = (v302 >> 2) & 1;
      uint64_t v174 = sub_100C64F14(v320);
      uint64_t v175 = v174;
      if ((v172 & v173) == 1)
      {
        uint64_t v293 = v174 | 4;
LABEL_48:
        LODWORD(v290) = 1;
        *(void *)&long long v309 = &_swiftEmptyDictionarySingleton;
        unint64_t v302 = (unint64_t)&_swiftEmptyDictionarySingleton;
        LODWORD(v298) = 1;
        goto LABEL_63;
      }
      if (v172)
      {
        uint64_t v293 = v174;
        LODWORD(v298) = v314 ^ 1;
LABEL_58:
        LODWORD(v290) = 1;
        *(void *)&long long v309 = &_swiftEmptyDictionarySingleton;
        unint64_t v302 = (unint64_t)&_swiftEmptyDictionarySingleton;
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v175 = 0;
      if (v306)
      {
        uint64_t v293 = 0;
        goto LABEL_48;
      }
    }
  }
  else
  {
    uint64_t v199 = sub_100C64F14(v170);
    uint64_t v175 = v199 | v302;
    if (v306)
    {
      LODWORD(v298) = v314 ^ 1;
      if (v314) {
        v175 |= 4uLL;
      }
      uint64_t v293 = v175;
      goto LABEL_58;
    }
  }
  uint64_t v209 = v319;
  sub_100CE144C((uint64_t)v280, v319, type metadata accessor for CRLBoardCRDTData);
  swift_beginAccess();
  sub_100CDE0D8(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
  char v210 = CRStruct_6.hasDelta(from:)();
  sub_100CE14B4(v209, type metadata accessor for CRLBoardCRDTData);
  uint64_t v293 = v175;
  if (v210)
  {
    unint64_t v211 = sub_100A394EC((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain();
    char v212 = swift_isUniquelyReferenced_nonNull_native();
    double v322 = COERCE_DOUBLE(&_swiftEmptyDictionarySingleton);
    uint64_t v213 = (uint64_t)v304;
    sub_100CD60E0(v211, (uint64_t)sub_100CD6060, 0, v212, (uint64_t *)&v322);
    if (v213) {
      goto LABEL_102;
    }
    uint64_t v214 = *(void *)&v322;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v215 = sub_100A394EC((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain();
    char v216 = swift_isUniquelyReferenced_nonNull_native();
    double v322 = COERCE_DOUBLE(&_swiftEmptyDictionarySingleton);
    sub_100CD60E0(v215, (uint64_t)sub_100CD6060, 0, v216, (uint64_t *)&v322);
    v304 = 0;
    unint64_t v302 = v214;
    *(double *)&long long v309 = v322;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v290) = 0;
    LODWORD(v298) = 0;
  }
  else
  {
    LODWORD(v290) = 0;
    LODWORD(v298) = 0;
    *(void *)&long long v309 = &_swiftEmptyDictionarySingleton;
    unint64_t v302 = (unint64_t)&_swiftEmptyDictionarySingleton;
  }
LABEL_63:
  v314 = v170;
  uint64_t v217 = (uint64_t)v170 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  uint64_t v218 = v299;
  sub_100CE144C(v217, v299, type metadata accessor for CRLBoardCRDTData);
  sub_1005057FC(&qword_101674450);
  CRRegister.wrappedValue.getter();
  uint64_t v220 = *(void *)&v322;
  uint64_t v219 = v323;
  sub_100CE14B4(v218, type metadata accessor for CRLBoardCRDTData);
  uint64_t v221 = v300;
  sub_100CE144C((uint64_t)v280, v300, type metadata accessor for CRLBoardCRDTData);
  CRRegister.wrappedValue.getter();
  uint64_t v223 = *(void *)&v322;
  uint64_t v222 = v323;
  sub_100CE14B4(v221, type metadata accessor for CRLBoardCRDTData);
  if (v220 == v223 && v219 == v222)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v224 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v224 & 1) == 0)
    {
      int v231 = 1;
      goto LABEL_69;
    }
  }
  v225 = v315;
  uint64_t v226 = v296;
  sub_100CE144C(v217 + v315[8], v296, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.getter();
  int v227 = LOBYTE(v322);
  sub_100CE14B4(v226, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  uint64_t v228 = (uint64_t)&v280[v225[8]];
  uint64_t v229 = v297;
  sub_100CE144C(v228, v297, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  CRRegister.wrappedValue.getter();
  int v230 = LOBYTE(v322);
  sub_100CE14B4(v229, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  int v231 = v227 ^ v230;
LABEL_69:
  LODWORD(v297) = v231;
  v232 = v320;
  unint64_t v101 = v316;
  v233 = v314;
  unint64_t v234 = *((void *)v314 + 3);
  LODWORD(v299) = sub_1002094A4() < v234;
  if (v313 == 2)
  {
    swift_retain();
    v110 = (uint64_t (*)(uint64_t))v232;
  }
  else
  {
    uint64_t v235 = v319;
    sub_100CE144C((uint64_t)v280, v319, type metadata accessor for CRLBoardCRDTData);
    swift_beginAccess();
    sub_100CDE0D8(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
    swift_retain_n();
    CRStruct_6.merge(_:)();
    sub_100CE14B4(v235, type metadata accessor for CRLBoardCRDTData);
    swift_endAccess();
    uint64_t v236 = v232[5];
    *(_OWORD *)((char *)v233 + 24) = *(_OWORD *)(v232 + 3);
    *((void *)v233 + 5) = v236;
    sub_101048A8C();
    swift_release();
    v110 = v233;
  }
  if (!v306)
  {
    swift_release();
    goto LABEL_15;
  }
  if (v298)
  {
    swift_release();
    LODWORD(v298) = 1;
LABEL_15:
    unint64_t v316 = v101;
    uint64_t v306 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_lastActivityTime;
    double v7 = *(double *)(v101 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_lastActivityTime);
    uint64_t v114 = (uint64_t)v110 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess();
    uint64_t v115 = v319;
    sub_100CE144C(v114, v319, type metadata accessor for CRLBoardCRDTData);
    swift_retain();
    uint64_t v300 = sub_1005057FC(&qword_101691F28);
    CRMaxRegister.wrappedValue.getter();
    double v8 = v321;
    v314 = type metadata accessor for CRLBoardCRDTData;
    sub_100CE14B4(v115, type metadata accessor for CRLBoardCRDTData);
    uint64_t v116 = *((void *)v110 + 5);
    unint64_t v117 = v316 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions;
    v308 = v110;
    *(_OWORD *)unint64_t v117 = *(_OWORD *)((char *)v110 + 24);
    *(void *)(v117 + 16) = v116;
    sub_100CE144C(v114, v115, type metadata accessor for CRLBoardCRDTData);
    v118 = v317;
    CRRegister.wrappedValue.getter();
    sub_100CE14B4(v115, type metadata accessor for CRLBoardCRDTData);
    unint64_t v119 = v316 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
    swift_beginAccess();
    v120 = *(void (**)(unint64_t, char *, uint64_t))(v310 + 40);
    uint64_t v121 = v311;
    v120(v119, v118, v311);
    swift_endAccess();
    sub_100CE144C(v114, v115, type metadata accessor for CRLBoardCRDTData);
    type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
    CRRegister.wrappedValue.getter();
    uint64_t v122 = v115;
    unint64_t v123 = v316;
    sub_100CE14B4(v122, v314);
    unint64_t v124 = v123 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
    swift_beginAccess();
    v125 = v118;
    uint64_t v126 = v114;
    v120(v124, v125, v121);
    swift_endAccess();
    uint64_t v127 = v312;
    sub_100CE144C(v114, v312, type metadata accessor for CRLBoardCRDTData);
    if (qword_10166EE10 != -1) {
      swift_once();
    }
    uint64_t v128 = type metadata accessor for CRCodableVersion();
    sub_100556B74(v128, (uint64_t)qword_10171A2D8);
    sub_100CDE0D8((unint64_t *)&unk_10169A0D0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
    v78 = (double *)v315;
    v129 = v304;
    uint64_t v130 = CRDT.serializedData(_:version:)();
    v314 = v129;
    uint64_t v132 = v295;
    if (v129)
    {
      sub_100CE14B4(v127, type metadata accessor for CRLBoardCRDTData);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      uint64_t v96 = v318;
      v97 = v320;
      goto LABEL_4;
    }
    uint64_t v138 = v130;
    uint64_t v139 = v131;
    sub_100CE14B4(v127, type metadata accessor for CRLBoardCRDTData);
    v140 = v303;
    uint64_t v141 = *v303;
    unint64_t v142 = v303[1];
    uint64_t *v303 = v138;
    v140[1] = v139;
    sub_100514260(v141, v142);
    uint64_t v143 = v319;
    sub_100CE144C(v114, v319, type metadata accessor for CRLBoardCRDTData);
    CRMaxRegister.wrappedValue.getter();
    double v144 = v321;
    sub_100CE14B4(v143, type metadata accessor for CRLBoardCRDTData);
    *(double *)(v316 + v306) = v144;
    *(void *)(v316 + v132) = v293;
    *(unsigned char *)(v316 + v294) = v298 & 1;
    uint64_t v145 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isDiscardable;
    char v146 = *(unsigned char *)(v316 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isDiscardable);
    sub_100CE144C(v126, v143, type metadata accessor for CRLBoardCRDTData);
    sub_1005057FC((uint64_t *)&unk_101689310);
    CRRegister.wrappedValue.getter();
    int v147 = LOBYTE(v321);
    v78 = (double *)v316;
    sub_100CE14B4(v143, type metadata accessor for CRLBoardCRDTData);
    *((unsigned char *)v78 + v145) = v147;
    if ((v146 & 1) == 0 && v147)
    {
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      uint64_t v149 = UUID.uuidString.getter();
      uint64_t v151 = v150;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v149;
      *(void *)(inited + 40) = v151;
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_mergeBoardData(_:syncChangeTrackingType:syncDataToOverwrite:canSaveNewBoardOrUndeleteTombstone:incomingDataIsServerData:)", 122, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 3685, (uint64_t)"Non-discardable board became discardable for %{public}@. This can cause data loss.", 82, 2u, inited);
      sub_1005598CC(inited, (uint64_t)"_mergeBoardData(_:syncChangeTrackingType:syncDataToOverwrite:canSaveNewBoardOrUndeleteTombstone:incomingDataIsServerData:)", 122, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 3685);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();
    }
    unint64_t v152 = v305;
    unint64_t v153 = (unint64_t)v279;
    if (v305 >> 60 != 15)
    {
      v154 = (void *)((char *)v78 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
      uint64_t v155 = *(void *)((char *)v78 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
      unint64_t v156 = *(void *)((char *)v78 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8);
      uint64_t v157 = v301;
      void *v154 = v301;
      v154[1] = v152;
      sub_100510D4C(v157, v152);
      sub_100514260(v155, v156);
    }
    uint64_t v96 = v318;
    v158 = v314;
    sub_100C650F0((uint64_t)v78);
    v159 = v320;
    uint64_t v160 = v309;
    if (v158)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      v97 = v159;
      goto LABEL_4;
    }
    v314 = 0;
    if ((_BYTE)v313)
    {
      unint64_t v196 = sub_100A394EC((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v197 = sub_100C32634(v196);
      uint64_t v198 = swift_bridgeObjectRetain();
      v315 = (int *)sub_10102D978(v198, v197);
      swift_bridgeObjectRelease();
    }
    else
    {
      v315 = (int *)&_swiftEmptySetSingleton;
    }
    v78 = (double *)v308;
    uint64_t v201 = v319;
    sub_100CE144C((uint64_t)v280, v319, type metadata accessor for CRLBoardCRDTData);
    uint64_t v202 = (uint64_t)v317;
    CRRegister.wrappedValue.getter();
    sub_100CE14B4(v201, type metadata accessor for CRLBoardCRDTData);
    swift_bridgeObjectRetain();
    uint64_t v203 = (uint64_t)v291;
    sub_100753370(v202, (uint64_t)v278, v153, (uint64_t)v291);
    swift_storeEnumTagMultiPayload();
    v204 = v314;
    sub_100C594D0(v203, v302, v160, v290, 1);
    if (v204)
    {
      sub_100CE14B4(v203, type metadata accessor for CRLAssetReferrerIdentifier);
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_53:
      uint64_t v96 = v318;
      goto LABEL_55;
    }
    sub_100CE14B4(v203, type metadata accessor for CRLAssetReferrerIdentifier);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100CE144C((uint64_t)v280, v201, type metadata accessor for CRLBoardCRDTData);
    CRRegister.wrappedValue.getter();
    sub_100CE14B4(v201, type metadata accessor for CRLBoardCRDTData);
    unint64_t v205 = (unint64_t)v279;
    swift_bridgeObjectRetain();
    uint64_t v206 = v288;
    uint64_t v207 = v202;
    v83 = v278;
    sub_100753370(v207, (uint64_t)v278, v205, v288);
    swift_storeEnumTagMultiPayload();
    v208 = sub_1006BA384((uint64_t)v315);
    swift_bridgeObjectRelease();
    uint64_t v137 = v318;
    sub_100C595DC(v206, (uint64_t)v208, 0);
    uint64_t v22 = (char *)v205;
    v314 = 0;
    sub_100CE14B4(v206, type metadata accessor for CRLAssetReferrerIdentifier);
    swift_release();
    unint64_t v247 = *((void *)v78 + 3);
    swift_retain();
    unint64_t v248 = sub_1002094A4();
    swift_release_n();
    swift_release();
    if (v299)
    {
      if (v297) {
        goto LABEL_83;
      }
      goto LABEL_92;
    }
    if (v248 >= v247)
    {
      if (v297)
      {
LABEL_83:
        double v250 = COERCE_DOUBLE(&_swiftEmptySetSingleton);
LABEL_86:
        sub_100C43B54((uint64_t)&_swiftEmptySetSingleton, *(uint64_t *)&v250, 0);
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
LABEL_92:
      if (v7 == v8)
      {
        uint64_t v137 = v318;
      }
      else
      {
        sub_1005057FC(&qword_10167ADD0);
        unint64_t v264 = (*(unsigned __int8 *)(v282 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v282 + 80);
        uint64_t v265 = swift_allocObject();
        *(_OWORD *)(v265 + 16) = xmmword_10117E810;
        uint64_t v266 = v265 + v264;
        uint64_t v267 = v319;
        sub_100CE144C((uint64_t)v280, v319, type metadata accessor for CRLBoardCRDTData);
        uint64_t v268 = (uint64_t)v83;
        uint64_t v269 = (uint64_t)v317;
        CRRegister.wrappedValue.getter();
        sub_100CE14B4(v267, type metadata accessor for CRLBoardCRDTData);
        swift_bridgeObjectRetain();
        sub_100753370(v269, v268, (unint64_t)v22, v266);
        if (*(void *)(v265 + 16)) {
          v270 = sub_1005087BC(v265);
        }
        else {
          v270 = &_swiftEmptySetSingleton;
        }
        uint64_t v137 = v318;
        swift_bridgeObjectRelease();
        unint64_t v271 = sub_100A3C910((uint64_t)_swiftEmptyArrayStorage);
        sub_100C44024((uint64_t)v270, 0, 0, v271);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_26;
    }
    uint64_t v251 = (uint64_t)v317;
LABEL_85:
    double v321 = COERCE_DOUBLE(&_swiftEmptySetSingleton);
    uint64_t v252 = v319;
    sub_100CE144C((uint64_t)v280, v319, type metadata accessor for CRLBoardCRDTData);
    CRRegister.wrappedValue.getter();
    sub_100CE14B4(v252, type metadata accessor for CRLBoardCRDTData);
    swift_bridgeObjectRetain();
    uint64_t v253 = v284;
    sub_100753370(v251, (uint64_t)v83, (unint64_t)v22, v284);
    uint64_t v254 = v283;
    sub_100CB7090(v283, v253);
    sub_100CE14B4(v254, type metadata accessor for CRLBoardIdentifier);
    double v250 = v321;
    goto LABEL_86;
  }
  swift_retain();
  unint64_t v237 = sub_100A394EC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  uint64_t v238 = *(uint64_t *)&v309;
  char v239 = swift_isUniquelyReferenced_nonNull_native();
  double v322 = *(double *)&v238;
  uint64_t v240 = (uint64_t)v304;
  sub_100CD60E0(v237, (uint64_t)sub_100CD6060, 0, v239, (uint64_t *)&v322);
  v304 = (uint64_t (*)(uint64_t))v240;
  if (!v240)
  {
    *(double *)&long long v309 = v322;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    LODWORD(v298) = 0;
    LODWORD(v290) = 1;
    goto LABEL_15;
  }
LABEL_102:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_100C64D18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UUID();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = a2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_100CE144C(v15, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  sub_1005057FC(&qword_101674550);
  CRRegister.wrappedValue.getter();
  sub_100CE14B4((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  unint64_t v17 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8);
  swift_bridgeObjectRetain();
  sub_100753370((uint64_t)v10, v16, v17, (uint64_t)v14);
  swift_beginAccess();
  sub_100FB9350((unint64_t)v14, 1);
  swift_endAccess();
  return sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100C64F14(void *a1)
{
  v2 = v1;
  uint64_t v4 = type metadata accessor for CRLBoardCRDTData(0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6, v9);
  uint64_t v11 = &v17[-v10];
  uint64_t v12 = (uint64_t)v1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_100CE144C(v12, (uint64_t)v11, type metadata accessor for CRLBoardCRDTData);
  uint64_t v13 = (uint64_t)a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_100CE144C(v13, (uint64_t)v8, type metadata accessor for CRLBoardCRDTData);
  sub_100CDE0D8(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
  char v14 = CRStruct_6.hasDelta(from:)();
  sub_100CE14B4((uint64_t)v8, type metadata accessor for CRLBoardCRDTData);
  sub_100CE14B4((uint64_t)v11, type metadata accessor for CRLBoardCRDTData);
  uint64_t v15 = 2;
  if ((v14 & 1) == 0) {
    uint64_t v15 = 0;
  }
  if (v2[3] != a1[3]) {
    v15 |= 8uLL;
  }
  if (v2[4] != a1[4]) {
    v15 |= 0x20uLL;
  }
  if (v2[5] == a1[5]) {
    return v15;
  }
  else {
    return v15 | 0x40;
  }
}

uint64_t sub_100C650F0(uint64_t a1)
{
  uint64_t v137 = (sqlite3_stmt **)type metadata accessor for UUID();
  uint64_t v4 = (uint64_t)*(v137 - 1);
  __chkstk_darwin(v137, v5);
  uint64_t v7 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v12 = v13;
  char v14 = *(void (**)(void))(v9 + 104);
  unsigned int v140 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v142 = v9 + 104;
  uint64_t v141 = (void (*)(void *, void, uint64_t))v14;
  v14(v12);
  id v15 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  unint64_t v17 = *(void (**)(void *, uint64_t))(v9 + 8);
  uint64_t v16 = v9 + 8;
  uint64_t v135 = v12;
  uint64_t v136 = v8;
  uint64_t v139 = v17;
  v17(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v143 = 0;
  unint64_t v144 = 0xE000000000000000;
  _StringGuts.grow(_:)(146);
  v18._countAndFlagsBits = 0x20455441445055;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x736472616F62;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x2054455320;
  v20._object = (void *)0xE500000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x656E6961746E6F63;
  v21._object = (void *)0xEE00646975755F72;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x202C3F203D20;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._object = (void *)0x800000010127B9A0;
  v23._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x202C3F203D20;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 1635017060;
  v25._object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x202C3F203D20;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x6E6F7473626D6F74;
  v27._object = (void *)0xEA00000000006465;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x202C3F203D20;
  v28._object = (void *)0xE600000000000000;
  String.append(_:)(v28);
  v29._object = (void *)0x800000010127B8B0;
  v29._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x202C3F203D20;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._object = (void *)0x800000010127BD90;
  v31._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x202C3F203D20;
  v32._object = (void *)0xE600000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x7461645F636E7973;
  v33._object = (void *)0xE900000000000061;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x202C3F203D20;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x6E6F7473626D6F74;
  v35._object = (void *)0xEE00657461645F65;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x202C3F203D20;
  v36._object = (void *)0xE600000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD00000000000001ALL;
  v37._object = (void *)0x800000010127BDB0;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x202C3F203D20;
  v38._object = (void *)0xE600000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x5F65726168736B63;
  v39._object = (void *)0xEC00000061746164;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0x202C3F203D20;
  v40._object = (void *)0xE600000000000000;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0xD000000000000014;
  v41._object = (void *)0x800000010127BB50;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x202C3F203D20;
  v42._object = (void *)0xE600000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0xD000000000000012;
  v43._object = (void *)0x800000010127BDD0;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0x202C3F203D20;
  v44._object = (void *)0xE600000000000000;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0x61637369645F7369;
  v45._object = (void *)0xEE00656C62616472;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0x202C3F203D20;
  v46._object = (void *)0xE600000000000000;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0xD00000000000002DLL;
  v47._object = (void *)0x800000010127BD60;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0x202C3F203D20;
  v48._object = (void *)0xE600000000000000;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 0xD000000000000026;
  v49._object = (void *)0x800000010127B8D0;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 0x48570A203F203D20;
  v50._object = (void *)0xEC00000020455245;
  String.append(_:)(v50);
  v51._object = (void *)0x8000000101262BA0;
  v51._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v51);
  v52._countAndFlagsBits = 1059077408;
  v52._object = (void *)0xE400000000000000;
  String.append(_:)(v52);
  uint64_t v53 = v143;
  uint64_t v54 = v144;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v55 = swift_retain();
  uint64_t v56 = sub_10079FC40(v55, v53, v54);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v132 = 0;
  uint64_t v134 = v16;
  uint64_t v58 = a1 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
  swift_beginAccess();
  uint64_t v138 = a1;
  uint64_t v59 = v56;
  uint64_t v60 = v4;
  uint64_t v61 = *(void (**)(char *, uint64_t, sqlite3_stmt **))(v4 + 16);
  uint64_t v62 = v137;
  v61(v7, v58, v137);
  uint64_t v63 = UUID.crl_data()();
  unint64_t v65 = v64;
  sub_10079DCE4(v63, v64, 1);
  sub_100510084(v63, v65);
  BOOL v133 = *(void (**)(char *, sqlite3_stmt **))(v60 + 8);
  v133(v7, v62);
  uint64_t v66 = v138 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
  swift_beginAccess();
  v61(v7, v66, v62);
  uint64_t v67 = v138;
  uint64_t v68 = UUID.crl_data()();
  unint64_t v70 = v69;
  uint64_t v71 = v59;
  sub_10079DCE4(v68, v69, 2);
  sub_100510084(v68, v70);
  v133(v7, v62);
  uint64_t v72 = v67;
  uint64_t v73 = (uint64_t *)(v67 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  unint64_t v74 = *(void *)(v67 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
  if (v74 >> 60 == 15)
  {
    uint64_t v75 = *(void **)(*(void *)(v59 + 16) + 32);
    uint64_t v76 = v135;
    *uint64_t v135 = v75;
    uint64_t v77 = v136;
    v141(v76, v140, v136);
    id v78 = v75;
    char v79 = _dispatchPreconditionTest(_:)();
    uint64_t v80 = v77;
    uint64_t v81 = v139;
    v139(v76, v77);
    if ((v79 & 1) == 0)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    uint64_t v82 = v71;
    swift_beginAccess();
    sqlite3_bind_null(*(sqlite3_stmt **)(v71 + 24), 3);
  }
  else
  {
    uint64_t v83 = *v73;
    sub_100510D4C(*v73, *(void *)(v67 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8));
    sub_10079DCE4(v83, v74, 3);
    sub_100514260(v83, v74);
    uint64_t v80 = v136;
    uint64_t v81 = v139;
    uint64_t v82 = v59;
    uint64_t v76 = v135;
  }
  uint64_t v84 = v72;
  sub_10079D6E8(*(unsigned __int8 *)(v72 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone), 4);
  sub_10079D8A8(*(void *)(v72 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges), 5);
  sub_10079D6E8(*(unsigned __int8 *)(v72 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareUnsyncedChanges), 6);
  v85 = (uint64_t *)(v72 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
  unint64_t v86 = *(void *)(v72 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8);
  if (v86 >> 60 == 15)
  {
    v87 = *(void **)(*(void *)(v82 + 16) + 32);
    *uint64_t v76 = v87;
    uint64_t v88 = v80;
    v141(v76, v140, v80);
    id v89 = v87;
    char v90 = _dispatchPreconditionTest(_:)();
    v81(v76, v80);
    if ((v90 & 1) == 0)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    swift_beginAccess();
    sqlite3_bind_null(*(sqlite3_stmt **)(v82 + 24), 7);
  }
  else
  {
    uint64_t v91 = *v85;
    sub_100510D4C(*v85, *(void *)(v72 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8));
    sub_10079DCE4(v91, v86, 7);
    uint64_t v92 = v91;
    uint64_t v81 = v139;
    sub_100514260(v92, v86);
    uint64_t v88 = v80;
  }
  double v93 = *(double *)(v84 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_tombstoneDate);
  unint64_t v94 = *(void **)(*(void *)(v82 + 16) + 32);
  *uint64_t v76 = v94;
  v141(v76, v140, v88);
  id v95 = v94;
  char v96 = _dispatchPreconditionTest(_:)();
  v81(v76, v88);
  if ((v96 & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v137 = (sqlite3_stmt **)(v82 + 24);
  swift_beginAccess();
  sqlite3_bind_double(*(sqlite3_stmt **)(v82 + 24), 8, v93);
  sub_10079D6E8(*(unsigned __int8 *)(v84 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_hideFromRecentlyDeleted), 9);
  v97 = (uint64_t *)(v84 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData);
  unint64_t v98 = *(void *)(v84 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8);
  if (v98 >> 60 == 15)
  {
    unint64_t v99 = *(void **)(*(void *)(v82 + 16) + 32);
    *uint64_t v76 = v99;
    v141(v76, v140, v88);
    id v100 = v99;
    char v101 = _dispatchPreconditionTest(_:)();
    v81(v76, v88);
    if ((v101 & 1) == 0)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    sqlite3_bind_null(*v137, 10);
  }
  else
  {
    uint64_t v102 = *v97;
    sub_100510D4C(*v97, *(void *)(v84 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8));
    sub_10079DCE4(v102, v98, 10);
    uint64_t v103 = v102;
    uint64_t v81 = v139;
    sub_100514260(v103, v98);
  }
  uint64_t v104 = v138;
  uint64_t v105 = v138 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions;
  sub_10079D8A8(*(void *)(v138 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions), 11);
  double v106 = *(double *)(v104 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_lastActivityTime);
  uint64_t v107 = *(void **)(*(void *)(v82 + 16) + 32);
  *uint64_t v76 = v107;
  v141(v76, v140, v88);
  id v108 = v107;
  char v109 = _dispatchPreconditionTest(_:)();
  v81(v76, v88);
  if ((v109 & 1) == 0) {
    goto LABEL_33;
  }
  sqlite3_bind_double(*(sqlite3_stmt **)(v82 + 24), 12, v106);
  sub_10079D6E8(*(unsigned __int8 *)(v104 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isDiscardable), 13);
  sub_10079D8A8(*(void *)(v105 + 8), 14);
  sub_10079D8A8(*(void *)(v105 + 16), 15);
  uint64_t v110 = v132;
  uint64_t v111 = sub_100753FC0();
  if (v110)
  {
    uint64_t v113 = *(void **)(*(void *)(v82 + 16) + 32);
    *uint64_t v76 = v113;
    v141(v76, v140, v88);
    id v114 = v113;
    char v115 = _dispatchPreconditionTest(_:)();
    v81(v76, v88);
    if (v115)
    {
      uint64_t v116 = v137;
      unint64_t v117 = *v137;
      if (!*v137) {
        return swift_release();
      }
      goto LABEL_28;
    }
    goto LABEL_34;
  }
  uint64_t v118 = v111;
  unint64_t v119 = v112;
  sub_10079DCE4(v111, v112, 16);
  sub_100510084(v118, v119);
  v120 = *(void **)(*(void *)(v82 + 16) + 32);
  *uint64_t v76 = v120;
  v141(v76, v140, v88);
  id v121 = v120;
  char v122 = _dispatchPreconditionTest(_:)();
  v81(v76, v88);
  if ((v122 & 1) == 0)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
  }
  unint64_t v123 = v137;
  int v124 = sqlite3_step(*v137);
  if (v124 == 101)
  {
    v125 = *(void **)(*(void *)(v82 + 16) + 32);
    *uint64_t v76 = v125;
    v141(v76, v140, v88);
    id v126 = v125;
    char v127 = _dispatchPreconditionTest(_:)();
    v81(v76, v88);
    if (v127)
    {
      if (*v123)
      {
        sqlite3_finalize(*v123);
        *unint64_t v123 = 0;
      }
      return swift_release();
    }
    goto LABEL_39;
  }
  int v128 = v124;
  sub_10079FF00();
  swift_allocError();
  *(_DWORD *)uint64_t v129 = v128;
  *(void *)(v129 + 8) = 0xD000000000000016;
  *(void *)(v129 + 16) = 0x800000010127CB50;
  swift_willThrow();
  uint64_t v130 = *(void **)(*(void *)(v82 + 16) + 32);
  *uint64_t v76 = v130;
  v141(v76, v140, v88);
  id v131 = v130;
  LOBYTE(v128) = _dispatchPreconditionTest(_:)();
  v81(v76, v88);
  if ((v128 & 1) == 0) {
    goto LABEL_40;
  }
  uint64_t v116 = v137;
  unint64_t v117 = *v137;
  if (*v137)
  {
LABEL_28:
    sqlite3_finalize(v117);
    *uint64_t v116 = 0;
  }
  return swift_release();
}

uint64_t sub_100C65F58(uint64_t a1)
{
  uint64_t v132 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v126 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  v125 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void (**)(char *, uint64_t, sqlite3_stmt **))((char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v10 = v11;
  uint64_t v12 = *(void (**)(void *))(v7 + 104);
  unsigned int v131 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v130 = v7 + 104;
  v12(v10);
  id v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t v16 = *(void (**)(void *, uint64_t))(v7 + 8);
  uint64_t v14 = v7 + 8;
  id v15 = v16;
  v16(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v128 = v14;
  char v127 = (sqlite3_stmt **)v3;
  uint64_t v129 = (void (*)(void *, void, uint64_t))v12;
  uint64_t v133 = 0;
  unint64_t v134 = 0xE000000000000000;
  _StringGuts.grow(_:)(135);
  v17._countAndFlagsBits = 0x4920545245534E49;
  v17._object = (void *)0xEC000000204F544ELL;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x736472616F62;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 10272;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  v20._object = (void *)0x8000000101262BA0;
  v20._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 8236;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  v22._object = (void *)0xEA0000000000656DLL;
  v22._countAndFlagsBits = 0x616E5F72656E776FLL;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x656E6961746E6F63;
  v24._object = (void *)0xEE00646975755F72;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xD000000000000018;
  v26._object = (void *)0x800000010127B9A0;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 1635017060;
  v28._object = (void *)0xE400000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x6E6F7473626D6F74;
  v30._object = (void *)0xEA00000000006465;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 8236;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  v32._object = (void *)0x800000010127B8B0;
  v32._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 8236;
  v33._object = (void *)0xE200000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x7461645F636E7973;
  v34._object = (void *)0xE900000000000061;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x6E6F7473626D6F74;
  v36._object = (void *)0xEE00657461645F65;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 8236;
  v37._object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0xD00000000000001ALL;
  v38._object = (void *)0x800000010127BDB0;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 8236;
  v39._object = (void *)0xE200000000000000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0x5F65726168736B63;
  v40._object = (void *)0xEC00000061746164;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 8236;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0xD000000000000014;
  v42._object = (void *)0x800000010127BB50;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 8236;
  v43._object = (void *)0xE200000000000000;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0xD000000000000012;
  v44._object = (void *)0x800000010127BDD0;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 8236;
  v45._object = (void *)0xE200000000000000;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0x61637369645F7369;
  v46._object = (void *)0xEE00656C62616472;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 8236;
  v47._object = (void *)0xE200000000000000;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0xD00000000000002DLL;
  v48._object = (void *)0x800000010127BD60;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 8236;
  v49._object = (void *)0xE200000000000000;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 0xD000000000000026;
  v50._object = (void *)0x800000010127B8D0;
  String.append(_:)(v50);
  v51._countAndFlagsBits = 0xD000000000000039;
  v51._object = (void *)0x800000010127CFE0;
  String.append(_:)(v51);
  uint64_t v52 = v133;
  uint64_t v53 = v134;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v54 = swift_retain();
  uint64_t v55 = sub_10079FC40(v54, v52, v53);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v57 = v132;
  uint64_t v58 = sub_100753FC0();
  uint64_t v123 = 0;
  uint64_t v59 = v58;
  unint64_t v61 = v60;
  int v124 = v15;
  uint64_t v121 = v6;
  sub_10079DCE4(v58, v60, 1);
  sub_100510084(v59, v61);
  sub_10079DA60(*(void *)(v57 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ownerName), *(void *)(v57 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ownerName + 8), 2);
  uint64_t v62 = v57 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
  swift_beginAccess();
  uint64_t v63 = v126;
  v120 = *(void (**)(char *, uint64_t, sqlite3_stmt **))(v126 + 16);
  uint64_t v122 = v55;
  unint64_t v64 = v125;
  v120(v125, v62, v127);
  uint64_t v65 = UUID.crl_data()();
  unint64_t v67 = v66;
  sub_10079DCE4(v65, v66, 3);
  sub_100510084(v65, v67);
  uint64_t v68 = *(void (**)(char *, sqlite3_stmt **))(v63 + 8);
  unint64_t v69 = v127;
  v68(v64, v127);
  uint64_t v70 = v57 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
  swift_beginAccess();
  uint64_t v71 = v69;
  v120(v64, v70, v69);
  uint64_t v72 = UUID.crl_data()();
  unint64_t v74 = v73;
  sub_10079DCE4(v72, v73, 4);
  sub_100510084(v72, v74);
  v68(v64, v71);
  uint64_t v75 = v132 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data;
  unint64_t v76 = *(void *)(v132 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
  if (v76 >> 60 == 15)
  {
    uint64_t v77 = v122;
    id v78 = *(void **)(*(void *)(v122 + 16) + 32);
    *uint64_t v10 = v78;
    uint64_t v79 = v121;
    uint64_t v80 = v129;
    v129(v10, v131, v121);
    id v81 = v78;
    LOBYTE(v78) = _dispatchPreconditionTest(_:)();
    v124(v10, v79);
    if ((v78 & 1) == 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    swift_beginAccess();
    sqlite3_bind_null(*(sqlite3_stmt **)(v77 + 24), 5);
  }
  else
  {
    uint64_t v82 = *(void *)v75;
    sub_100510D4C(*(void *)v75, *(void *)(v75 + 8));
    uint64_t v77 = v122;
    sub_10079DCE4(v82, v76, 5);
    sub_100514260(v82, v76);
    uint64_t v79 = v121;
    uint64_t v80 = v129;
  }
  uint64_t v83 = v132;
  sub_10079D6E8(*(unsigned __int8 *)(v132 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone), 6);
  sub_10079D8A8(*(void *)(v83 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges), 7);
  uint64_t v84 = (uint64_t *)(v83 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
  unint64_t v85 = *(void *)(v83 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8);
  if (v85 >> 60 == 15)
  {
    unint64_t v86 = *(void **)(*(void *)(v77 + 16) + 32);
    *uint64_t v10 = v86;
    v80(v10, v131, v79);
    id v87 = v86;
    LOBYTE(v86) = _dispatchPreconditionTest(_:)();
    uint64_t v88 = v124;
    v124(v10, v79);
    if ((v86 & 1) == 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    swift_beginAccess();
    sqlite3_bind_null(*(sqlite3_stmt **)(v77 + 24), 8);
  }
  else
  {
    uint64_t v89 = *v84;
    sub_100510D4C(*v84, *(void *)(v83 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8));
    sub_10079DCE4(v89, v85, 8);
    uint64_t v90 = v89;
    uint64_t v80 = v129;
    sub_100514260(v90, v85);
    uint64_t v88 = v124;
  }
  uint64_t v91 = v132;
  double v92 = *(double *)(v132 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_tombstoneDate);
  double v93 = *(void **)(*(void *)(v77 + 16) + 32);
  *uint64_t v10 = v93;
  v80(v10, v131, v79);
  id v94 = v93;
  LOBYTE(v93) = _dispatchPreconditionTest(_:)();
  v88(v10, v79);
  if ((v93 & 1) == 0) {
    goto LABEL_28;
  }
  swift_beginAccess();
  sqlite3_bind_double(*(sqlite3_stmt **)(v77 + 24), 9, v92);
  sub_10079D6E8(*(unsigned __int8 *)(v91 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_hideFromRecentlyDeleted), 10);
  id v95 = (uint64_t *)(v91 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData);
  unint64_t v96 = *(void *)(v91 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8);
  char v127 = (sqlite3_stmt **)(v77 + 24);
  if (v96 >> 60 == 15)
  {
    v97 = *(void **)(*(void *)(v77 + 16) + 32);
    *uint64_t v10 = v97;
    uint64_t v98 = v121;
    v80(v10, v131, v121);
    id v99 = v97;
    LOBYTE(v97) = _dispatchPreconditionTest(_:)();
    v124(v10, v98);
    if ((v97 & 1) == 0)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    sqlite3_bind_null(*(sqlite3_stmt **)(v77 + 24), 11);
    uint64_t v100 = v98;
  }
  else
  {
    uint64_t v101 = *v95;
    sub_100510D4C(*v95, v96);
    sub_10079DCE4(v101, v96, 11);
    sub_100514260(v101, v96);
    uint64_t v100 = v121;
  }
  uint64_t v102 = v91 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions;
  sub_10079D8A8(*(void *)(v91 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions), 12);
  double v103 = *(double *)(v91 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_lastActivityTime);
  uint64_t v104 = *(void **)(*(void *)(v77 + 16) + 32);
  *uint64_t v10 = v104;
  uint64_t v105 = v131;
  double v106 = v129;
  v129(v10, v131, v100);
  id v107 = v104;
  LOBYTE(v104) = _dispatchPreconditionTest(_:)();
  v124(v10, v100);
  if ((v104 & 1) == 0) {
    goto LABEL_29;
  }
  sqlite3_bind_double(*(sqlite3_stmt **)(v77 + 24), 13, v103);
  sub_10079D6E8(*(unsigned __int8 *)(v132 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isDiscardable), 14);
  sub_10079D8A8(*(void *)(v102 + 8), 15);
  sub_10079D8A8(*(void *)(v102 + 16), 16);
  id v108 = *(void **)(*(void *)(v77 + 16) + 32);
  *uint64_t v10 = v108;
  v106(v10, v105, v100);
  id v109 = v108;
  LOBYTE(v108) = _dispatchPreconditionTest(_:)();
  uint64_t v110 = v100;
  v124(v10, v100);
  if ((v108 & 1) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v111 = v127;
  int v112 = sqlite3_step(*v127);
  if (v112 != 101)
  {
    int v116 = v112;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v117 = v116;
    *(void *)(v117 + 8) = 0xD000000000000016;
    *(void *)(v117 + 16) = 0x800000010127D020;
    swift_willThrow();
    uint64_t v118 = *(void **)(*(void *)(v77 + 16) + 32);
    *uint64_t v10 = v118;
    v106(v10, v105, v110);
    id v119 = v118;
    LOBYTE(v118) = _dispatchPreconditionTest(_:)();
    v124(v10, v110);
    if (v118)
    {
      char v115 = *v111;
      if (!*v111) {
        return swift_release();
      }
      goto LABEL_21;
    }
LABEL_35:
    __break(1u);
  }
  uint64_t v113 = *(void **)(*(void *)(v77 + 16) + 32);
  *uint64_t v10 = v113;
  v106(v10, v105, v110);
  id v114 = v113;
  LOBYTE(v113) = _dispatchPreconditionTest(_:)();
  v124(v10, v110);
  if ((v113 & 1) == 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  char v115 = *v111;
  if (*v111)
  {
LABEL_21:
    sqlite3_finalize(v115);
    *uint64_t v111 = 0;
  }
  return swift_release();
}

uint64_t sub_100C66D70(uint64_t a1)
{
  uint64_t v57 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v7 = v8;
  uint64_t v9 = *(void (**)(void))(v4 + 104);
  unsigned int v58 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v59 = (void (*)(void *, void, uint64_t))v9;
  v9(v7);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t v11 = *(void (**)(void *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v56 = v11;
  uint64_t v60 = 0;
  unint64_t v61 = 0xE000000000000000;
  _StringGuts.grow(_:)(79);
  v12._countAndFlagsBits = 0x4920545245534E49;
  v12._object = (void *)0xEC000000204F544ELL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x6D5F736472616F62;
  v13._object = (void *)0xEF61746164617465;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 10272;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._object = (void *)0x8000000101262BA0;
  v15._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x7461645F74647263;
  v17._object = (void *)0xE900000000000061;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 8236;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x726F7661665F7369;
  v19._object = (void *)0xEB00000000657469;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD00000000000001BLL;
  v21._object = (void *)0x800000010127B870;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x6174735F77656976;
  v23._object = (void *)0xEF617461645F6574;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD000000000000019;
  v25._object = (void *)0x800000010127B890;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._object = (void *)0x800000010127B8B0;
  v27._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 8236;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD000000000000026;
  v29._object = (void *)0x800000010127B8D0;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0xD000000000000021;
  v30._object = (void *)0x800000010127CF90;
  String.append(_:)(v30);
  uint64_t v31 = v60;
  uint64_t v32 = v61;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v33 = swift_retain();
  uint64_t v34 = sub_10079FC40(v33, v31, v32);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v55 = v4 + 104;
  uint64_t v36 = v57;
  uint64_t v37 = sub_100753FC0();
  unint64_t v39 = v38;
  sub_10079DCE4(v37, v38, 1);
  sub_100510084(v37, v39);
  sub_10079DCE4(*(void *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData), *(void *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData + 8), 2);
  sub_10079D6E8(*(unsigned __int8 *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_isFavorite), 3);
  sub_10079D6E8(*(unsigned __int8 *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_enableCollaboratorCursors), 4);
  sub_10079DCE4(*(void *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData), *(void *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData + 8), 5);
  if (*(unsigned char *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion + 8))
  {
    Swift::String v40 = *(void **)(*(void *)(v34 + 16) + 32);
    *uint64_t v7 = v40;
    v59(v7, v58, v3);
    id v41 = v40;
    LOBYTE(v40) = _dispatchPreconditionTest(_:)();
    Swift::String v42 = v56;
    v56(v7, v3);
    if ((v40 & 1) == 0)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    swift_beginAccess();
    sqlite3_bind_null(*(sqlite3_stmt **)(v34 + 24), 6);
  }
  else
  {
    sub_10079D8A8(*(void *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion), 6);
    Swift::String v42 = v56;
  }
  sub_10079D8A8(*(void *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges), 7);
  sub_10079D8A8(*(void *)(v36 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_minRequiredVersionForFullFidelity), 8);
  Swift::String v43 = *(void **)(*(void *)(v34 + 16) + 32);
  *uint64_t v7 = v43;
  v59(v7, v58, v3);
  id v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)();
  v42(v7, v3);
  if ((v43 & 1) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  Swift::String v45 = (sqlite3_stmt **)(v34 + 24);
  swift_beginAccess();
  int v46 = sqlite3_step(*(sqlite3_stmt **)(v34 + 24));
  if (v46 != 101) {
    goto LABEL_15;
  }
  Swift::String v47 = *(void **)(*(void *)(v34 + 16) + 32);
  *uint64_t v7 = v47;
  v59(v7, v58, v3);
  id v48 = v47;
  char v49 = _dispatchPreconditionTest(_:)();
  int v46 = ((uint64_t (*)(void *, uint64_t))v42)(v7, v3);
  if ((v49 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    int v50 = v46;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v51 = v50;
    *(void *)(v51 + 8) = 0xD00000000000001FLL;
    *(void *)(v51 + 16) = 0x800000010127CFC0;
    swift_willThrow();
    uint64_t v52 = *(void **)(*(void *)(v34 + 16) + 32);
    *uint64_t v7 = v52;
    v59(v7, v58, v3);
    id v53 = v52;
    char v54 = _dispatchPreconditionTest(_:)();
    v42(v7, v3);
    if (v54) {
      goto LABEL_16;
    }
LABEL_21:
    __break(1u);
  }
LABEL_16:
  if (*v45)
  {
    sqlite3_finalize(*v45);
    *Swift::String v45 = 0;
  }
  return swift_release();
}

uint64_t sub_100C67498(uint64_t a1, int a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v7 = v5;
  LODWORD(v88) = a5;
  unint64_t v98 = a4;
  uint64_t v89 = a3;
  LODWORD(v85) = a2;
  unint64_t v83 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  __chkstk_darwin(v83, v9);
  uint64_t v87 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  Swift::String v14 = (char *)&v75 - v13;
  __chkstk_darwin(v15, v16);
  uint64_t v84 = (uint64_t)&v75 - v17;
  uint64_t v18 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v86 = (uint64_t)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  Swift::String v24 = (char *)&v75 - v23;
  uint64_t v25 = type metadata accessor for DispatchPredicate();
  uint64_t v26 = *(void *)(v25 - 8);
  __n128 v28 = __chkstk_darwin(v25, v27);
  Swift::String v30 = (uint64_t *)((char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = *(void **)&v7[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *Swift::String v30 = v31;
  (*(void (**)(void *, void, uint64_t, __n128))(v26 + 104))(v30, enum case for DispatchPredicate.onQueue(_:), v25, v28);
  id v32 = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v26 + 8))(v30, v25);
  if (v31)
  {
    sub_100CE144C(a1 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_boardIdentifier, (uint64_t)v24, type metadata accessor for CRLBoardIdentifier);
    uint64_t v34 = sub_100C68104((uint64_t)v24);
    if (v6)
    {
      sub_100CE14B4((uint64_t)v24, type metadata accessor for CRLBoardIdentifier);
      return (uint64_t)v7;
    }
    uint64_t v35 = v34;
    uint64_t v36 = a1;
    if (v34)
    {
      uint64_t v37 = swift_retain_n();
      uint64_t v38 = sub_100CD94C8(v37);
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v82 = (char *)v38;
        unint64_t v76 = v7;
        uint64_t v40 = (uint64_t)v24;
        if ((_BYTE)v85)
        {
          if (v85 != 1)
          {
            unint64_t v80 = 0;
            goto LABEL_27;
          }
          uint64_t v41 = a1;
          uint64_t v42 = v38 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData;
          swift_beginAccess();
          uint64_t v43 = v84;
          sub_100CE144C(v42, v84, type metadata accessor for CRLUserBoardMetadataCRDTData);
          uint64_t v36 = v41;
          uint64_t v44 = v41 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData;
          swift_beginAccess();
          sub_100CE144C(v44, (uint64_t)v14, type metadata accessor for CRLUserBoardMetadataCRDTData);
          sub_100CDE0D8((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
          LOBYTE(v44) = CRStruct_5.hasDelta(from:)();
          sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLUserBoardMetadataCRDTData);
          uint64_t v39 = (uint64_t)v82;
          sub_100CE14B4(v43, type metadata accessor for CRLUserBoardMetadataCRDTData);
          unint64_t v45 = 2;
          if ((v44 & 1) == 0) {
            unint64_t v45 = 0;
          }
          if (*(void *)(v39 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity) != *(void *)(v41 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity)) {
            v45 |= 4uLL;
          }
        }
        else
        {
          unint64_t v88 = *(void *)(v35 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges);
          uint64_t v49 = a1;
          uint64_t v50 = a1 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData;
          swift_beginAccess();
          uint64_t v51 = v84;
          sub_100CE144C(v50, v84, type metadata accessor for CRLUserBoardMetadataCRDTData);
          uint64_t v36 = v49;
          uint64_t v52 = (uint64_t)&v82[OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData];
          swift_beginAccess();
          sub_100CE144C(v52, (uint64_t)v14, type metadata accessor for CRLUserBoardMetadataCRDTData);
          sub_100CDE0D8((unint64_t *)&qword_1016966B8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
          LOBYTE(v52) = CRStruct_5.hasDelta(from:)();
          sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLUserBoardMetadataCRDTData);
          uint64_t v39 = (uint64_t)v82;
          sub_100CE14B4(v51, type metadata accessor for CRLUserBoardMetadataCRDTData);
          uint64_t v53 = 2;
          if ((v52 & 1) == 0) {
            uint64_t v53 = 0;
          }
          if (*(void *)(v49 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity) != *(void *)(v39 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity)) {
            v53 |= 4uLL;
          }
          unint64_t v45 = v53 | v88;
        }
        unint64_t v80 = v45;
LABEL_27:
        swift_retain();
        sub_100BC82EC(v36);
        swift_release();
        swift_release();
        uint64_t v36 = v39;
        goto LABEL_28;
      }
      swift_release();
      if (v88)
      {
        unint64_t v76 = v7;
        uint64_t v40 = (uint64_t)v24;
        unint64_t v80 = (_BYTE)v85 == 0;
        swift_retain();
        uint64_t v82 = (char *)a1;
LABEL_28:
        uint64_t v54 = *(void *)(v35 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData);
        unint64_t v55 = *(void *)(v35 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData + 8);
        unint64_t v83 = *(void *)(v35 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion);
        int v79 = *(unsigned __int8 *)(v35
                                 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion
                                 + 8);
        swift_retain();
        unint64_t v48 = v55;
        sub_100510D4C(v54, v55);
        if (v98 >= 0xF000000000000000) {
          unint64_t v56 = 0xF000000000000000;
        }
        else {
          unint64_t v56 = v98;
        }
        uint64_t v57 = v89;
        if (v98 >> 60 == 15) {
          uint64_t v57 = 0;
        }
        uint64_t v81 = 0;
        uint64_t v84 = v54;
        uint64_t v75 = v35;
        if (v98 >> 60 == 15)
        {
          unint64_t v58 = *(void *)(v35 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData + 8);
          uint64_t v85 = *(void *)(v35 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData);
          unint64_t v88 = v58;
          sub_1005FA2A0(v85, v58);
        }
        else
        {
          unint64_t v88 = v56;
          uint64_t v85 = v57;
        }
LABEL_41:
        uint64_t v78 = v40;
        uint64_t v61 = v86;
        sub_100CE144C(v40, v86, type metadata accessor for CRLBoardIdentifier);
        uint64_t v62 = v36 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData;
        swift_beginAccess();
        uint64_t v63 = v87;
        sub_100CE144C(v62, v87, type metadata accessor for CRLUserBoardMetadataCRDTData);
        unint64_t v64 = *(void **)&v76[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext];
        uint64_t v77 = v36;
        uint64_t v65 = *(void *)(v36 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity);
        sub_1005FA2A0(v89, v98);
        uint64_t v7 = v64;
        uint64_t v66 = v84;
        sub_100510D4C(v84, v48);
        uint64_t v67 = v85;
        unint64_t v68 = v88;
        sub_1005FA2A0(v85, v88);
        uint64_t v69 = v81;
        uint64_t v70 = sub_1008445BC(v61, v63, (uint64_t)v7, v66, v48, v83, v79, v80, v67, v68, v65);
        if (v69)
        {

          sub_100CE14B4(v78, type metadata accessor for CRLBoardIdentifier);
          swift_release();
          sub_100510084(v66, v48);
          sub_100514260(v85, v88);
          swift_release();
          swift_release();
          return (uint64_t)v7;
        }
        uint64_t v71 = v70;
        uint64_t v72 = v78;

        if (v75)
        {
          sub_100C687A0(v71);
          uint64_t v7 = v82;
          swift_retain();
          swift_retain();
          char v74 = sub_1008442A8(v71);
          swift_release();
          if ((v74 & 1) == 0)
          {
            sub_100CE14B4(v72, type metadata accessor for CRLBoardIdentifier);
            swift_release();
            sub_100510084(v84, v48);
            sub_100514260(v85, v88);
            swift_release();
            swift_release();
            goto LABEL_19;
          }
        }
        else
        {
          char v73 = sub_100C54B24(v72, 1);
          if ((v73 & 1) == 0)
          {
            sub_100CE14B4(v72, type metadata accessor for CRLBoardIdentifier);
            swift_release();
            sub_100514260(v85, v88);
            sub_100510084(v84, v48);
            swift_release();
            uint64_t v7 = 0;
            goto LABEL_19;
          }
          sub_100C66D70(v71);
          swift_retain();
        }
        sub_100C445A0(v72, (uint64_t)&unk_1015283A8, (uint64_t)sub_100CB31B8, (uint64_t)&unk_1015283C0);
        uint64_t v7 = v82;
        swift_release();
        swift_release();
        sub_100514260(v85, v88);
        sub_100510084(v84, v48);
        swift_release();
        sub_100CE14B4(v72, type metadata accessor for CRLBoardIdentifier);
LABEL_19:
        swift_release();
        return (uint64_t)v7;
      }
    }
    else if (v88)
    {
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      swift_retain_n();
      JSONEncoder.init()();
      uint64_t v90 = 0x3FF0000000000000;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      char v94 = 1;
      long long v95 = xmmword_101190880;
      long long v96 = xmmword_101190880;
      char v97 = 0;
      sub_100CE6174();
      uint64_t v46 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v48 = v47;
      swift_release();
      uint64_t v75 = 0;
      uint64_t v84 = v46;
      uint64_t v81 = 0;
      unint64_t v76 = v7;
      uint64_t v40 = (uint64_t)v24;
      unint64_t v83 = 0;
      unint64_t v80 = (_BYTE)v85 == 0;
      uint64_t v59 = v89;
      if (v98 >> 60 == 15) {
        uint64_t v59 = 0;
      }
      uint64_t v85 = v59;
      unint64_t v60 = 0xF000000000000000;
      if (v98 < 0xF000000000000000) {
        unint64_t v60 = v98;
      }
      unint64_t v88 = v60;
      int v79 = 1;
      uint64_t v82 = (char *)v36;
      goto LABEL_41;
    }
    sub_100CE14B4((uint64_t)v24, type metadata accessor for CRLBoardIdentifier);
    uint64_t v7 = 0;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_100C68104(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v8 = v9;
  uint64_t v10 = *(void (**)(void))(v5 + 104);
  unsigned int v49 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v50 = (void (*)(void *, void, uint64_t))v10;
  v10(v8);
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once();
    goto LABEL_5;
  }
  v47[1] = a1;
  unint64_t v48 = v12;
  uint64_t v51 = 0;
  unint64_t v52 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v51 = 0x205443454C4553;
  unint64_t v52 = 0xE700000000000000;
  v13._countAndFlagsBits = sub_100CE0BA0(0, (void *)0xE000000000000000);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x204D4F524620;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x6D5F736472616F62;
  v15._object = (void *)0xEF61746164617465;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x2820455245485720;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000101262BA0;
  v17._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x293F203D20;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  uint64_t v19 = v51;
  uint64_t v20 = v52;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v21 = swift_retain();
  uint64_t v22 = sub_10079FC40(v21, v19, v20);
  if (!v2)
  {
    uint64_t v23 = v22;
    swift_release();
    uint64_t v24 = sub_100753FC0();
    uint64_t v34 = v24;
    unint64_t v35 = v25;
    sub_10079DCE4(v24, v25, 1);
    sub_100510084(v34, v35);
    uint64_t v36 = *(void **)(*(void *)(v23 + 16) + 32);
    *uint64_t v8 = v36;
    v50(v8, v49, v4);
    id v37 = v36;
    LOBYTE(v36) = _dispatchPreconditionTest(_:)();
    uint64_t v38 = v48;
    v48(v8, v4);
    if (v36)
    {
      type metadata accessor for SQLiteRowIterator();
      uint64_t inited = (void *)swift_initStackObject();
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v23;
      inited[3] = 0;
      swift_retain();
      uint64_t v40 = sub_10079ECE0();
      if (!v40)
      {
        swift_release();
        swift_setDeallocating();
        sub_1007A0344(inited[3], inited[4], inited[5]);
        unint64_t v45 = *(void **)(*(void *)(v23 + 16) + 32);
        *uint64_t v8 = v45;
        v50(v8, v49, v4);
        id v46 = v45;
        LOBYTE(v45) = _dispatchPreconditionTest(_:)();
        v38(v8, v4);
        if (v45)
        {
          uint64_t v43 = (void *)(v23 + 24);
          swift_beginAccess();
          uint64_t v29 = 0;
          uint64_t v44 = *(sqlite3_stmt **)(v23 + 24);
          if (!v44) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
LABEL_20:
        __break(1u);
      }
      uint64_t v29 = sub_100CE0E74(v40, 0);
      swift_release();
      swift_setDeallocating();
      sub_1007A0344(inited[3], inited[4], inited[5]);
      uint64_t v41 = *(void **)(*(void *)(v23 + 16) + 32);
      *uint64_t v8 = v41;
      v50(v8, v49, v4);
      id v42 = v41;
      LOBYTE(v41) = _dispatchPreconditionTest(_:)();
      v38(v8, v4);
      if (v41)
      {
        uint64_t v43 = (void *)(v23 + 24);
        swift_beginAccess();
        uint64_t v44 = *(sqlite3_stmt **)(v23 + 24);
        if (!v44)
        {
LABEL_12:
          swift_release();
          return v29;
        }
LABEL_11:
        sqlite3_finalize(v44);
        *uint64_t v43 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
  swift_release();
  if (qword_10166FB70 != -1) {
    goto LABEL_17;
  }
LABEL_5:
  swift_beginAccess();
  uint64_t v26 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_10117E810;
  swift_getErrorValue();
  id v28 = v26;
  uint64_t v29 = Error.localizedDescription.getter();
  uint64_t v31 = v30;
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 64) = sub_100528BE4();
  *(void *)(v27 + 32) = v29;
  *(void *)(v27 + 40) = v31;
  uint64_t v32 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v28, (uint64_t)&_mh_execute_header, v32, (uint64_t)"Failed to fetch board metadata record with error %@", 51, 2, v27);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  swift_willThrow();
  return v29;
}

uint64_t sub_100C687A0(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v77[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v11 = __chkstk_darwin(v8, v10);
  Swift::String v13 = &v77[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Swift::String v14 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v13 = v14;
  Swift::String v15 = *(void (**)(void, __n128))(v9 + 104);
  unsigned int v81 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v82 = (void (*)(void *, void, uint64_t))v15;
  uint64_t v83 = v9 + 104;
  v15(v13, v11);
  id v16 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  Swift::String v17 = *(void (**)(void *, uint64_t))(v9 + 8);
  v17(v13, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_29;
  }
  int v79 = v7;
  unint64_t v80 = v17;
  uint64_t v86 = 0;
  unint64_t v87 = 0xE000000000000000;
  _StringGuts.grow(_:)(89);
  v18._countAndFlagsBits = 0x20455441445055;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x6D5F736472616F62;
  v19._object = (void *)0xEF61746164617465;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x2054455320;
  v20._object = (void *)0xE500000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x7461645F74647263;
  v21._object = (void *)0xE900000000000061;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x202C3F203D20;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x726F7661665F7369;
  v23._object = (void *)0xEB00000000657469;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x202C3F203D20;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD00000000000001BLL;
  v25._object = (void *)0x800000010127B870;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x202C3F203D20;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x6174735F77656976;
  v27._object = (void *)0xEF617461645F6574;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x202C3F203D20;
  v28._object = (void *)0xE600000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD000000000000019;
  v29._object = (void *)0x800000010127B890;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x202C3F203D20;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._object = (void *)0x800000010127B8B0;
  v31._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x202C3F203D20;
  v32._object = (void *)0xE600000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x7461645F636E7973;
  v33._object = (void *)0xE900000000000061;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x202C3F203D20;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0xD000000000000026;
  v35._object = (void *)0x800000010127B8D0;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x454857203F203D20;
  v36._object = (void *)0xEB00000000204552;
  String.append(_:)(v36);
  v37._object = (void *)0x8000000101262BA0;
  v37._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 1059077408;
  v38._object = (void *)0xE400000000000000;
  String.append(_:)(v38);
  uint64_t v39 = v86;
  uint64_t v40 = v87;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v41 = swift_retain();
  uint64_t v42 = sub_10079FC40(v41, v39, v40);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  sub_10079DCE4(*(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData), *(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData + 8), 1);
  int v44 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_isFavorite);
  sub_10079D6E8(v44, 2);
  sub_10079D6E8(*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_enableCollaboratorCursors), 3);
  sub_10079DCE4(*(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData), *(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData + 8), 4);
  char v45 = *(unsigned char *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion + 8);
  int v78 = v44;
  if (v45)
  {
    id v46 = *(void **)(*(void *)(v42 + 16) + 32);
    void *v13 = v46;
    v82(v13, v81, v8);
    id v47 = v46;
    LOBYTE(v46) = _dispatchPreconditionTest(_:)();
    unint64_t v48 = v80;
    v80(v13, v8);
    if (v46)
    {
      swift_beginAccess();
      sqlite3_bind_null(*(sqlite3_stmt **)(v42 + 24), 5);
      goto LABEL_7;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  sub_10079D8A8(*(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion), 5);
  unint64_t v48 = v80;
LABEL_7:
  sub_10079D8A8(*(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges), 6);
  unsigned int v49 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData);
  unint64_t v50 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData + 8);
  if (v50 >> 60 != 15)
  {
    uint64_t v53 = *v49;
    sub_100510D4C(*v49, *(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData + 8));
    sub_10079DCE4(v53, v50, 7);
    uint64_t v54 = v53;
    unint64_t v48 = v80;
    sub_100514260(v54, v50);
    goto LABEL_11;
  }
  uint64_t v51 = *(void **)(*(void *)(v42 + 16) + 32);
  void *v13 = v51;
  v82(v13, v81, v8);
  id v52 = v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)();
  v48(v13, v8);
  if ((v51 & 1) == 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_beginAccess();
  sqlite3_bind_null(*(sqlite3_stmt **)(v42 + 24), 7);
LABEL_11:
  uint64_t v55 = (uint64_t)v79;
  sub_10079D8A8(*(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_minRequiredVersionForFullFidelity), 8);
  sub_100CE144C(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_boardIdentifier, v55, type metadata accessor for CRLBoardIdentifier);
  uint64_t v56 = sub_100753FC0();
  uint64_t v58 = v56;
  unint64_t v59 = v57;
  sub_10079DCE4(v56, v57, 9);
  sub_100510084(v58, v59);
  unint64_t v60 = *(void **)(*(void *)(v42 + 16) + 32);
  void *v13 = v60;
  v82(v13, v81, v8);
  id v61 = v60;
  LOBYTE(v60) = _dispatchPreconditionTest(_:)();
  v48(v13, v8);
  if ((v60 & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v62 = (sqlite3_stmt **)(v42 + 24);
  swift_beginAccess();
  int v63 = sqlite3_step(*(sqlite3_stmt **)(v42 + 24));
  if (v63 != 101) {
    goto LABEL_19;
  }
  sub_100CE14B4((uint64_t)v79, type metadata accessor for CRLBoardIdentifier);
  unint64_t v64 = *(void **)(*(void *)(v42 + 16) + 32);
  void *v13 = v64;
  v82(v13, v81, v8);
  id v65 = v64;
  LOBYTE(v64) = _dispatchPreconditionTest(_:)();
  int v63 = ((uint64_t (*)(void *, uint64_t))v48)(v13, v8);
  if ((v64 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    int v66 = v63;
    unint64_t v84 = 0;
    unint64_t v85 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    unint64_t v84 = 0xD000000000000019;
    unint64_t v85 = 0x800000010127DDF0;
    if (v78) {
      uint64_t v67 = 1702195828;
    }
    else {
      uint64_t v67 = 0x65736C6166;
    }
    if (v78) {
      unint64_t v68 = 0xE400000000000000;
    }
    else {
      unint64_t v68 = 0xE500000000000000;
    }
    unint64_t v69 = v68;
    String.append(_:)(*(Swift::String *)&v67);
    swift_bridgeObjectRelease();
    v70._countAndFlagsBits = 0x616F6220726F6620;
    v70._object = (void *)0xEB00000000206472;
    String.append(_:)(v70);
    v71._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
    unint64_t v72 = v84;
    unint64_t v73 = v85;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v74 = v66;
    *(void *)(v74 + 8) = v72;
    *(void *)(v74 + 16) = v73;
    swift_willThrow();
    sub_100CE14B4((uint64_t)v79, type metadata accessor for CRLBoardIdentifier);
    uint64_t v75 = *(void **)(*(void *)(v42 + 16) + 32);
    void *v13 = v75;
    v82(v13, v81, v8);
    id v76 = v75;
    LOBYTE(v75) = _dispatchPreconditionTest(_:)();
    v80(v13, v8);
    if (v75) {
      goto LABEL_26;
    }
LABEL_32:
    __break(1u);
  }
LABEL_26:
  if (*v62)
  {
    sqlite3_finalize(*v62);
    *uint64_t v62 = 0;
  }
  return swift_release();
}

uint64_t sub_100C6915C(unint64_t a1, sqlite3_int64 a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  __n128 v11 = (unint64_t *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *__n128 v11 = v12;
  Swift::String v13 = *(void (**)(void, __n128))(v7 + 104);
  unsigned int v37 = enum case for DispatchPredicate.onQueue(_:);
  Swift::String v38 = (void (*)(void *, void, uint64_t))v13;
  v13(v11, v9);
  id v14 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t v39 = *(void (**)(void *, uint64_t))(v7 + 8);
  v39(v11, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v36 = a1;
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD00000000000004BLL, 0x8000000101282720);
  uint64_t result = swift_release();
  if (v3) {
    return result;
  }
  sub_10079D8A8(a2, 1);
  uint64_t v18 = sub_100753FC0();
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  sub_10079DCE4(v18, v19, 2);
  sub_100510084(v20, v21);
  Swift::String v22 = *(void **)(*(void *)(v16 + 16) + 32);
  *__n128 v11 = v22;
  v38(v11, v37, v6);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  v39(v11, v6);
  if ((v22 & 1) == 0) {
    goto LABEL_15;
  }
  Swift::String v24 = (sqlite3_stmt **)(v16 + 24);
  swift_beginAccess();
  int v25 = sqlite3_step(*(sqlite3_stmt **)(v16 + 24));
  if (v25 != 101) {
    goto LABEL_11;
  }
  Swift::String v26 = *(void **)(*(void *)(v16 + 16) + 32);
  *__n128 v11 = v26;
  v38(v11, v37, v6);
  id v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)();
  int v25 = ((uint64_t (*)(void *, uint64_t))v39)(v11, v6);
  if ((v26 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    int v28 = v25;
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(86);
    v29._countAndFlagsBits = 0xD000000000000054;
    v29._object = (void *)0x8000000101282770;
    String.append(_:)(v29);
    v30._countAndFlagsBits = sub_100753038();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = v40;
    unint64_t v36 = v41;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v32 = v28;
    unint64_t v33 = v36;
    *(void *)(v32 + 8) = v31;
    *(void *)(v32 + 16) = v33;
    swift_willThrow();
    Swift::String v34 = *(void **)(*(void *)(v16 + 16) + 32);
    *__n128 v11 = v34;
    v38(v11, v37, v6);
    id v35 = v34;
    LOBYTE(v34) = _dispatchPreconditionTest(_:)();
    v39(v11, v6);
    if (v34) {
      goto LABEL_12;
    }
LABEL_16:
    __break(1u);
  }
LABEL_12:
  if (*v24)
  {
    sqlite3_finalize(*v24);
    *Swift::String v24 = 0;
  }
  return swift_release();
}

uint64_t sub_100C695E8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  Swift::String v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v15);
  Swift::String v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(void *)&v4[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  *(void *)(v18 + 24) = a1;
  *(void *)(v18 + 32) = a3;
  *(void *)(v18 + 40) = a4;
  *(unsigned char *)(v18 + 48) = a2;
  aBlock[4] = sub_100CE73D4;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528E10;
  unint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = v4;
  swift_bridgeObjectRetain();
  sub_1005173A0(a3);
  static DispatchQoS.unspecified.getter();
  Swift::String v24 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v23);
  return swift_release();
}

uint64_t sub_100C698D4(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, char a5)
{
  uint64_t v9 = type metadata accessor for CRLBoardIdentifier(0);
  v18[7] = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8, v10);
  v18[6] = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v18[5] = (char *)v18 - v14;
  swift_bridgeObjectRetain();
  uint64_t v15 = a1;
  sub_100546894(v15, a2, (uint64_t)v15);
  swift_bridgeObjectRelease();

  if (a3) {
    a3(0);
  }
  unint64_t v16 = sub_100A3C910((uint64_t)_swiftEmptyArrayStorage);
  sub_100C44024(a2, 1, 0, v16);
  swift_bridgeObjectRelease();
  return sub_100C43B54(a2, (uint64_t)&_swiftEmptySetSingleton, a5 & 1);
}

uint64_t sub_100C69E58(uint64_t a1, uint64_t a2)
{
  return sub_100C6CAC0(a1, a2, (void (*)(char *))sub_100C69E88) & 1;
}

uint64_t sub_100C69E88(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v8 = v9;
  uint64_t v10 = *(void (**)(void *))(v5 + 104);
  unsigned int v58 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v56 = v5 + 104;
  v10(v8);
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
  uint64_t v57 = v4;
  v12(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t result = sub_100C709EC(a1);
  if (v2) {
    return result;
  }
  uint64_t v53 = a1;
  uint64_t v54 = (void (*)(void *, void, uint64_t))v10;
  uint64_t v55 = v12;
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v14._countAndFlagsBits = 0x20455441445055;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x736472616F62;
  v15._object = (void *)0xE600000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x2054455320;
  v16._object = (void *)0xE500000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6E6F7473626D6F74;
  v17._object = (void *)0xEA00000000006465;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x202C31203D20;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD000000000000010;
  v19._object = (void *)0x800000010127B8B0;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 2112800;
  v20._object = (void *)0xE300000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD000000000000010;
  v21._object = (void *)0x800000010127B8B0;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x202C3F207C20;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x6E6F7473626D6F74;
  v23._object = (void *)0xEE00657461645F65;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x454857203F203D20;
  v24._object = (void *)0xEB00000000204552;
  String.append(_:)(v24);
  v25._object = (void *)0x8000000101262BA0;
  v25._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 1059077408;
  v26._object = (void *)0xE400000000000000;
  String.append(_:)(v26);
  uint64_t v27 = v59;
  uint64_t v28 = v60;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v29 = swift_retain();
  uint64_t v30 = sub_10079FC40(v29, v27, v28);
  swift_release();
  sub_10079D8A8(4, 1);
  static Date.timeIntervalSinceReferenceDate.getter();
  double v32 = v31;
  unint64_t v33 = *(void **)(*(void *)(v30 + 16) + 32);
  *uint64_t v8 = v33;
  uint64_t v34 = v57;
  v54(v8, v58, v57);
  id v35 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)();
  v55(v8, v34);
  if ((v33 & 1) == 0) {
    goto LABEL_15;
  }
  id v52 = (sqlite3_stmt **)(v30 + 24);
  swift_beginAccess();
  sqlite3_bind_double(*(sqlite3_stmt **)(v30 + 24), 2, v32);
  uint64_t v36 = sub_100753FC0();
  unint64_t v38 = v37;
  sub_10079DCE4(v36, v37, 3);
  sub_100510084(v36, v38);
  uint64_t v39 = *(void **)(*(void *)(v30 + 16) + 32);
  *uint64_t v8 = v39;
  uint64_t v40 = v54;
  v54(v8, v58, v34);
  id v41 = v39;
  LOBYTE(v39) = _dispatchPreconditionTest(_:)();
  uint64_t v42 = v55;
  v55(v8, v34);
  if ((v39 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int v43 = sqlite3_step(*v52);
  if (v43 != 101)
  {
    int v47 = v43;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v48 = v47;
    *(void *)(v48 + 8) = 0xD00000000000001FLL;
    *(void *)(v48 + 16) = 0x800000010127D990;
    swift_willThrow();
    unsigned int v49 = *(void **)(*(void *)(v30 + 16) + 32);
    *uint64_t v8 = v49;
    v40(v8, v58, v34);
    id v50 = v49;
    LOBYTE(v49) = _dispatchPreconditionTest(_:)();
    v42(v8, v34);
    if (v49)
    {
      if (*v52)
      {
        sqlite3_finalize(*v52);
        *(void *)(v30 + 24) = 0;
      }
      return swift_release();
    }
LABEL_18:
    __break(1u);
  }
  int v44 = *(void **)(*(void *)(v30 + 16) + 32);
  *uint64_t v8 = v44;
  v40(v8, v58, v34);
  id v45 = v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)();
  v42(v8, v34);
  if ((v44 & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v46 = v52;
  if (*v52)
  {
    sqlite3_finalize(*v52);
    *id v46 = 0;
  }
  return swift_release();
}

uint64_t sub_100C6A478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  Swift::String v18 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_100CE144C(a1, (uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v3;
  sub_100CE12D8((uint64_t)v18, v21 + v19, type metadata accessor for CRLBoardIdentifier);
  Swift::String v22 = (uint64_t *)(v21 + v20);
  uint64_t v23 = v28;
  *Swift::String v22 = a2;
  v22[1] = v23;
  aBlock[4] = sub_100CE6794;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528A28;
  Swift::String v24 = _Block_copy(aBlock);
  Swift::String v25 = v3;
  sub_1005173A0(a2);
  static DispatchQoS.unspecified.getter();
  double v32 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v30);
  return swift_release();
}

uint64_t sub_100C6A82C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = sub_100C4770C();
  char v6 = sub_1006E5EA4(a2, v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    __chkstk_darwin(result, v8);
    sub_1009400C8((uint64_t (*)(uint64_t))sub_100CE67C0);
    if (a3) {
      a3(0);
    }
    sub_1005057FC(&qword_10167ADD0);
    uint64_t v9 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
    unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_10117E810;
    sub_100CE144C(a2, v11 + v10, type metadata accessor for CRLBoardIdentifier);
    uint64_t v12 = sub_1005087BC(v11);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    unint64_t v13 = sub_100A3C910((uint64_t)_swiftEmptyArrayStorage);
    sub_100C44024((uint64_t)v12, 1, 0, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_10117E810;
    sub_100CE144C(a2, v14 + v10, type metadata accessor for CRLBoardIdentifier);
    uint64_t v15 = sub_1005087BC(v14);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_100C43B54((uint64_t)v15, (uint64_t)&_swiftEmptySetSingleton, 0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100C6AC70(uint64_t a1)
{
  if (qword_10166FB70 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  id v5 = v3;
  uint64_t v6 = UUID.uuidString.getter();
  uint64_t v8 = v7;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v8;
  uint64_t v9 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v5, (uint64_t)&_mh_execute_header, v9, (uint64_t)"Deleting discardable board %{public}@", 37, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  sub_100C69E88(a1);
  if (!v1)
  {
    sub_1005057FC(&qword_10167ADD0);
    uint64_t v10 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
    unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_10117E810;
    sub_100CE144C(a1, v12 + v11, type metadata accessor for CRLBoardIdentifier);
    unint64_t v13 = sub_1005087BC(v12);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_100C6AEDC(0, (uint64_t)v13);
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t sub_100C6AEDC(int a1, uint64_t a2)
{
  unint64_t v4 = v3;
  uint64_t v173 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v173 - 8);
  __chkstk_darwin(v173, v8);
  int v172 = (char *)&v163 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v184 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v181 = (uint64_t)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v174 = (uint64_t)&v163 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v183 = (uint64_t)&v163 - v19;
  __chkstk_darwin(v18, v20);
  unint64_t v182 = (void (**)(char *, uint64_t))((char *)&v163 - v21);
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  unint64_t v26 = (unint64_t)&v163 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *(void *)unint64_t v26 = v27;
  uint64_t v28 = *(void (**)(void))(v23 + 104);
  unsigned int v175 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v177 = v23 + 104;
  uint64_t v176 = (void (*)(void *, void, unint64_t))v28;
  v28(v26);
  id v29 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  uint64_t v30 = *(void (**)(void *, unint64_t))(v23 + 8);
  uint64_t v179 = (void *)v26;
  uint64_t v180 = v23 + 8;
  unint64_t v178 = v30;
  uint64_t result = ((uint64_t (*)(unint64_t, uint64_t))v30)(v26, v22);
  if (v27)
  {
    int v170 = a1;
    int64_t v32 = *(void *)(a2 + 16);
    if (!v32) {
      return result;
    }
    uint64_t v165 = v7;
    uint64_t v168 = v2;
    v171 = (void *)v22;
    unint64_t v169 = v3;
    uint64_t v194 = _swiftEmptyArrayStorage;
    sub_1006BB504(0, v32, 0);
    uint64_t v33 = sub_100F27B7C(a2);
    uint64_t v35 = v34;
    unint64_t v26 = v36 & 1;
    uint64_t v185 = a2 + 56;
    uint64_t v167 = v32;
    uint64_t v187 = a2;
    do
    {
      if (v33 < 0 || v33 >= 1 << *(unsigned char *)(a2 + 32))
      {
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
      if (((*(void *)(v185 + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
        goto LABEL_101;
      }
      if (*(_DWORD *)(a2 + 36) != v35) {
        goto LABEL_102;
      }
      uint64_t v37 = *(void *)(a2 + 48);
      uint64_t v186 = *(void *)(v184 + 72);
      unint64_t v38 = v182;
      sub_100CE144C(v37 + v186 * v33, (uint64_t)v182, type metadata accessor for CRLBoardIdentifier);
      uint64_t v39 = (uint64_t)v38;
      uint64_t v40 = v183;
      sub_100CE12D8(v39, v183, type metadata accessor for CRLBoardIdentifier);
      uint64_t v188 = UUID.uuidString.getter();
      uint64_t v42 = v41;
      sub_100CE14B4(v40, type metadata accessor for CRLBoardIdentifier);
      int v43 = v194;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1006BB504(0, *((void *)v43 + 2) + 1, 1);
        int v43 = v194;
      }
      unint64_t v4 = *((void *)v43 + 2);
      unint64_t v44 = *((void *)v43 + 3);
      if (v4 >= v44 >> 1)
      {
        sub_1006BB504(v44 > 1, v4 + 1, 1);
        int v43 = v194;
      }
      *((void *)v43 + 2) = v4 + 1;
      id v45 = &v43[2 * v4];
      *((void *)v45 + 4) = v188;
      *((void *)v45 + 5) = v42;
      a2 = v187;
      uint64_t v46 = sub_100666C8C(v33, v35, v26 & 1, v187);
      uint64_t v33 = v46;
      uint64_t v35 = v47;
      unint64_t v26 = v48 & 1;
      --v32;
    }
    while (v32);
    sub_10056A4C4(v46, v47, v48 & 1);
    uint64_t v194 = v43;
    uint64_t v49 = sub_1005057FC((uint64_t *)&unk_1016773F0);
    sub_100523288((unint64_t *)&qword_101672620, (uint64_t *)&unk_1016773F0);
    uint64_t v188 = v49;
    unint64_t v4 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v26 = (unint64_t)v50;
    swift_release();
    if (qword_10166FB70 != -1) {
      goto LABEL_118;
    }
  }
  else
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    swift_once();
  }
  swift_beginAccess();
  uint64_t v51 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  uint64_t v164 = v4;
  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = v26;
  id v53 = v51;
  v166 = (void *)v26;
  swift_bridgeObjectRetain();
  uint64_t v54 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v53, (uint64_t)&_mh_execute_header, v54, (uint64_t)"Hiding boards from recently deleted: %{public}@", 47, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  unint64_t v55 = v169;
  uint64_t v192 = 0;
  unint64_t v193 = 0xE000000000000000;
  if ((_BYTE)v170)
  {
    _StringGuts.grow(_:)(52);
    v56._countAndFlagsBits = 0x20455441445055;
    v56._object = (void *)0xE700000000000000;
    String.append(_:)(v56);
    v57._countAndFlagsBits = 0x736472616F62;
    v57._object = (void *)0xE600000000000000;
    String.append(_:)(v57);
    v58._countAndFlagsBits = 0x2054455320;
    v58._object = (void *)0xE500000000000000;
    String.append(_:)(v58);
    v59._countAndFlagsBits = 0xD00000000000001ALL;
    v59._object = (void *)0x800000010127BDB0;
    String.append(_:)(v59);
    v60._countAndFlagsBits = 0x202C31203D20;
    v60._object = (void *)0xE600000000000000;
    String.append(_:)(v60);
    v61._countAndFlagsBits = 0xD000000000000010;
    v61._object = (void *)0x800000010127B8B0;
    String.append(_:)(v61);
    v62._countAndFlagsBits = 2112800;
    v62._object = (void *)0xE300000000000000;
    String.append(_:)(v62);
    v63._countAndFlagsBits = 0xD000000000000010;
    v63._object = (void *)0x800000010127B8B0;
    String.append(_:)(v63);
    v64._countAndFlagsBits = 0x454857203F202620;
    v64._object = (void *)0xEC00000028204552;
    String.append(_:)(v64);
    v65._object = (void *)0x8000000101262BA0;
    v65._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v65);
    v66._countAndFlagsBits = 0x28204E4920;
    v66._object = (void *)0xE500000000000000;
    String.append(_:)(v66);
    *(void *)&long long v191 = sub_100C37E4C(63, 0xE100000000000000, v167);
    uint64_t v67 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v69 = v68;
    swift_bridgeObjectRelease();
    v70._countAndFlagsBits = v67;
    v70._object = v69;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    v71._countAndFlagsBits = 10537;
    v71._object = (void *)0xE200000000000000;
    String.append(_:)(v71);
    uint64_t v72 = v192;
    uint64_t v73 = v193;
    sqlite3_int64 v74 = -17;
  }
  else
  {
    _StringGuts.grow(_:)(52);
    v75._countAndFlagsBits = 0x20455441445055;
    v75._object = (void *)0xE700000000000000;
    String.append(_:)(v75);
    v76._countAndFlagsBits = 0x736472616F62;
    v76._object = (void *)0xE600000000000000;
    String.append(_:)(v76);
    v77._countAndFlagsBits = 0x2054455320;
    v77._object = (void *)0xE500000000000000;
    String.append(_:)(v77);
    v78._countAndFlagsBits = 0xD00000000000001ALL;
    v78._object = (void *)0x800000010127BDB0;
    String.append(_:)(v78);
    v79._countAndFlagsBits = 0x202C31203D20;
    v79._object = (void *)0xE600000000000000;
    String.append(_:)(v79);
    v80._countAndFlagsBits = 0xD000000000000010;
    v80._object = (void *)0x800000010127B8B0;
    String.append(_:)(v80);
    v81._countAndFlagsBits = 2112800;
    v81._object = (void *)0xE300000000000000;
    String.append(_:)(v81);
    v82._countAndFlagsBits = 0xD000000000000010;
    v82._object = (void *)0x800000010127B8B0;
    String.append(_:)(v82);
    v83._countAndFlagsBits = 0x454857203F207C20;
    v83._object = (void *)0xEC00000028204552;
    String.append(_:)(v83);
    v84._object = (void *)0x8000000101262BA0;
    v84._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v84);
    v85._countAndFlagsBits = 0x28204E4920;
    v85._object = (void *)0xE500000000000000;
    String.append(_:)(v85);
    *(void *)&long long v191 = sub_100C37E4C(63, 0xE100000000000000, v167);
    uint64_t v86 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v88 = v87;
    swift_bridgeObjectRelease();
    v89._countAndFlagsBits = v86;
    v89._object = v88;
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    v90._countAndFlagsBits = 10537;
    v90._object = (void *)0xE200000000000000;
    String.append(_:)(v90);
    uint64_t v72 = v192;
    uint64_t v73 = v193;
    sqlite3_int64 v74 = 16;
  }
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v91 = swift_retain();
  uint64_t v92 = sub_10079FC40(v91, v72, v73);
  if (v55)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v93 = v92;
  unint64_t v169 = 0;
  swift_release();
  sub_10079D8A8(v74, 1);
  uint64_t v94 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v95 = -1;
  if (v94 < 64) {
    uint64_t v95 = ~(-1 << v94);
  }
  unint64_t v4 = v95 & *(void *)(a2 + 56);
  uint64_t v188 = v93;
  swift_bridgeObjectRetain();
  uint64_t v184 = v93 + 24;
  swift_beginAccess();
  uint64_t v96 = 0;
  uint64_t v183 = (unint64_t)(v94 + 63) >> 6;
  unint64_t v182 = (void (**)(char *, uint64_t))(v165 + 8);
  unint64_t v97 = 2;
  unint64_t v26 = (unint64_t)v171;
  while (1)
  {
    if (v4)
    {
      unint64_t v102 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v103 = v102 | (v96 << 6);
      goto LABEL_42;
    }
    uint64_t v104 = v96 + 1;
    if (__OFADD__(v96, 1)) {
      goto LABEL_104;
    }
    if (v104 >= v183) {
      break;
    }
    unint64_t v105 = *(void *)(v185 + 8 * v104);
    ++v96;
    if (!v105)
    {
      uint64_t v96 = v104 + 1;
      if (v104 + 1 >= v183) {
        break;
      }
      unint64_t v105 = *(void *)(v185 + 8 * v96);
      if (!v105)
      {
        uint64_t v96 = v104 + 2;
        if (v104 + 2 >= v183) {
          break;
        }
        unint64_t v105 = *(void *)(v185 + 8 * v96);
        if (!v105)
        {
          uint64_t v106 = v104 + 3;
          if (v106 >= v183) {
            break;
          }
          unint64_t v105 = *(void *)(v185 + 8 * v106);
          if (!v105)
          {
            while (1)
            {
              uint64_t v96 = v106 + 1;
              if (__OFADD__(v106, 1)) {
                break;
              }
              if (v96 >= v183) {
                goto LABEL_86;
              }
              unint64_t v105 = *(void *)(v185 + 8 * v96);
              ++v106;
              if (v105) {
                goto LABEL_41;
              }
            }
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
          }
          uint64_t v96 = v106;
        }
      }
    }
LABEL_41:
    unint64_t v4 = (v105 - 1) & v105;
    unint64_t v103 = __clz(__rbit64(v105)) + (v96 << 6);
LABEL_42:
    uint64_t v107 = v174;
    sub_100CE144C(*(void *)(a2 + 48) + v103 * v186, v174, type metadata accessor for CRLBoardIdentifier);
    sub_100CE12D8(v107, v181, type metadata accessor for CRLBoardIdentifier);
    uint64_t v189 = UUID.uuid.getter();
    LOWORD(v190) = v108;
    BYTE2(v190) = v109;
    BYTE3(v190) = v110;
    BYTE4(v190) = v111;
    BYTE5(v190) = v112;
    BYTE6(v190) = v113;
    HIBYTE(v190) = v114;
    UUID.uuid.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    unint64_t v115 = __DataStorage.init(bytes:length:)() | 0x4000000000000000;
    a2 = 0x1000000000;
    *(void *)&long long v191 = 0x1000000000;
    *((void *)&v191 + 1) = v115;
    type metadata accessor for CRLBoardIdentifierStorage(0);
    if (String.count.getter() >= 1)
    {
      int v116 = v172;
      static String.Encoding.utf8.getter();
      uint64_t v117 = String.data(using:allowLossyConversion:)();
      unint64_t v119 = v118;
      (*v182)(v116, v173);
      if (v119 >> 60 == 15)
      {
        sub_1007566F4();
        swift_allocError();
        *uint64_t v149 = 2;
        swift_willThrow();
        sub_100510084(v191, *((unint64_t *)&v191 + 1));
        swift_bridgeObjectRelease();
        sub_100CE14B4(v181, type metadata accessor for CRLBoardIdentifier);
        swift_release();
        uint64_t v150 = v188;
        uint64_t v151 = *(void **)(*(void *)(v188 + 16) + 32);
        unint64_t v152 = v179;
        *uint64_t v179 = v151;
        v176(v152, v175, v26);
        id v153 = v151;
        LOBYTE(v151) = _dispatchPreconditionTest(_:)();
        v178(v152, v26);
        if ((v151 & 1) == 0) {
          goto LABEL_121;
        }
        v154 = (sqlite3_stmt **)v184;
        swift_beginAccess();
        if (*v154)
        {
          sqlite3_finalize(*v154);
          *(void *)(v150 + 24) = 0;
        }
        return swift_release();
      }
      Data.append(_:)();
      sub_100514260(v117, v119);
      unint64_t v115 = *((void *)&v191 + 1);
      a2 = v191;
    }
    v120 = *(void **)(*(void *)(v188 + 16) + 32);
    uint64_t v121 = v179;
    *uint64_t v179 = v120;
    v176(v121, v175, v26);
    id v122 = v120;
    LOBYTE(v120) = _dispatchPreconditionTest(_:)();
    v178(v121, v26);
    if ((v120 & 1) == 0) {
      goto LABEL_103;
    }
    switch(v115 >> 62)
    {
      case 1uLL:
        unint64_t v26 = (int)a2;
        if (a2 >> 32 < (int)a2) {
          goto LABEL_106;
        }
        sub_100510D4C(a2, v115);
        int v124 = (char *)__DataStorage._bytes.getter();
        if (!v124) {
          goto LABEL_55;
        }
        uint64_t v125 = __DataStorage._offset.getter();
        if (__OFSUB__((int)a2, v125)) {
          goto LABEL_117;
        }
        v124 += (int)a2 - v125;
LABEL_55:
        uint64_t v126 = __DataStorage._length.getter();
        unint64_t v26 = (unint64_t)v171;
        if (v97 >> 31) {
          goto LABEL_109;
        }
        if (v126 >= (a2 >> 32) - (int)a2) {
          uint64_t v127 = (a2 >> 32) - (int)a2;
        }
        else {
          uint64_t v127 = v126;
        }
        if (v124) {
          uint64_t v128 = v127;
        }
        else {
          uint64_t v128 = 0;
        }
        if (v128 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_111;
        }
        if (v128 > 0x7FFFFFFF) {
          goto LABEL_113;
        }
        uint64_t v129 = *(sqlite3_stmt **)v184;
        if (qword_10166F130 != -1) {
          swift_once();
        }
        sqlite3_bind_blob(v129, v97, v124, v128, (void (__cdecl *)(void *))qword_10171A940);
        sub_100510084(a2, v115);
LABEL_24:
        sub_100510084(a2, v115);
        break;
      case 2uLL:
        uint64_t v130 = *(void *)(a2 + 16);
        unint64_t v26 = *(void *)(a2 + 24);
        swift_retain();
        swift_retain();
        unsigned int v131 = (char *)__DataStorage._bytes.getter();
        if (!v131) {
          goto LABEL_70;
        }
        uint64_t v132 = __DataStorage._offset.getter();
        if (__OFSUB__(v130, v132)) {
          goto LABEL_116;
        }
        v131 += v130 - v132;
LABEL_70:
        BOOL v133 = __OFSUB__(v26, v130);
        unint64_t v134 = (char *)(v26 - v130);
        if (v133) {
          goto LABEL_108;
        }
        uint64_t v135 = __DataStorage._length.getter();
        if (v97 >> 31) {
          goto LABEL_110;
        }
        if (v135 >= (uint64_t)v134) {
          uint64_t v136 = (uint64_t)v134;
        }
        else {
          uint64_t v136 = v135;
        }
        if (v131) {
          uint64_t v137 = v136;
        }
        else {
          uint64_t v137 = 0;
        }
        if (v137 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_112;
        }
        if (v137 > 0x7FFFFFFF) {
          goto LABEL_114;
        }
        uint64_t v138 = *(sqlite3_stmt **)v184;
        if (qword_10166F130 != -1) {
          swift_once();
        }
        sqlite3_bind_blob(v138, v97, v131, v137, (void (__cdecl *)(void *))qword_10171A940);
        swift_release();
        swift_release();
        sub_100510084(a2, v115);
        unint64_t v26 = (unint64_t)v171;
        break;
      case 3uLL:
        *(void *)((char *)&v191 + 6) = 0;
        *(void *)&long long v191 = 0;
        if (v97 >> 31) {
          goto LABEL_107;
        }
        uint64_t v139 = *(sqlite3_stmt **)v184;
        if (qword_10166F130 != -1) {
          swift_once();
        }
        unint64_t v98 = (void (__cdecl *)(void *))qword_10171A940;
        id v99 = v139;
        int v100 = v97;
        int v101 = 0;
        goto LABEL_23;
      default:
        *(void *)&long long v191 = a2;
        WORD4(v191) = v115;
        BYTE10(v191) = BYTE2(v115);
        BYTE11(v191) = BYTE3(v115);
        BYTE12(v191) = BYTE4(v115);
        BYTE13(v191) = BYTE5(v115);
        if (v97 >> 31) {
          goto LABEL_105;
        }
        uint64_t v123 = *(sqlite3_stmt **)v184;
        if (qword_10166F130 != -1) {
          swift_once();
        }
        int v101 = BYTE6(v115);
        unint64_t v98 = (void (__cdecl *)(void *))qword_10171A940;
        id v99 = v123;
        int v100 = v97;
LABEL_23:
        sqlite3_bind_blob(v99, v100, &v191, v101, v98);
        goto LABEL_24;
    }
    sub_100CE14B4(v181, type metadata accessor for CRLBoardIdentifier);
    ++v97;
    a2 = v187;
  }
LABEL_86:
  swift_release();
  uint64_t v140 = v188;
  uint64_t v141 = *(void **)(*(void *)(v188 + 16) + 32);
  uint64_t v142 = v179;
  *uint64_t v179 = v141;
  v176(v142, v175, v26);
  id v143 = v141;
  LOBYTE(v141) = _dispatchPreconditionTest(_:)();
  v178(v142, v26);
  if ((v141 & 1) == 0) {
    goto LABEL_120;
  }
  unint64_t v144 = (sqlite3_stmt **)v184;
  swift_beginAccess();
  int v145 = sqlite3_step(*v144);
  if (v145 == 101)
  {
    swift_bridgeObjectRelease();
    sub_100C43B54(a2, (uint64_t)&_swiftEmptySetSingleton, 0);
    char v146 = *(void **)(*(void *)(v140 + 16) + 32);
    int v147 = v179;
    *uint64_t v179 = v146;
    v176(v147, v175, v26);
    id v148 = v146;
    LOBYTE(v146) = _dispatchPreconditionTest(_:)();
    v178(v147, v26);
    if ((v146 & 1) == 0) {
      goto LABEL_122;
    }
    if (*v144)
    {
      sqlite3_finalize(*v144);
      *unint64_t v144 = 0;
    }
  }
  else
  {
    int v155 = v145;
    uint64_t v189 = 0;
    unint64_t v190 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    uint64_t v189 = 0xD00000000000002DLL;
    unint64_t v190 = 0x800000010127D960;
    v156._countAndFlagsBits = v164;
    v156._object = v166;
    String.append(_:)(v156);
    swift_bridgeObjectRelease();
    uint64_t v157 = v189;
    unint64_t v158 = v190;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v159 = v155;
    *(void *)(v159 + 8) = v157;
    *(void *)(v159 + 16) = v158;
    swift_willThrow();
    uint64_t v160 = *(void **)(*(void *)(v140 + 16) + 32);
    uint64_t v161 = v179;
    *uint64_t v179 = v160;
    v176(v161, v175, v26);
    id v162 = v160;
    LOBYTE(v160) = _dispatchPreconditionTest(_:)();
    v178(v161, v26);
    if ((v160 & 1) == 0) {
      goto LABEL_123;
    }
    if (*v144)
    {
      sqlite3_finalize(*v144);
      *(void *)(v140 + 24) = 0;
    }
  }
  return swift_release();
}

uint64_t sub_100C6C514(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  v15[7] = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v7);
  v15[6] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v15[5] = (char *)v15 - v11;
  swift_bridgeObjectRetain();
  uint64_t v12 = a1;
  sub_1005468C0(v12, a2, (uint64_t)v12);
  swift_bridgeObjectRelease();

  if (a3) {
    a3(0);
  }
  unint64_t v13 = sub_100A3C910((uint64_t)_swiftEmptyArrayStorage);
  sub_100C44024(a2, 1, 0, v13);
  swift_bridgeObjectRelease();
  return sub_100C43B54((uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton, 0);
}

uint64_t sub_100C6CA90(uint64_t a1, uint64_t a2)
{
  return sub_100C6CAC0(a1, a2, (void (*)(char *))sub_100C6CD50) & 1;
}

uint64_t sub_100C6CAC0(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v27 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  while (v18)
  {
    unint64_t v21 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    unint64_t v22 = v21 | (v20 << 6);
LABEL_5:
    sub_100CE144C(*(void *)(a1 + 48) + *(void *)(v7 + 72) * v22, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    sub_100CE12D8((uint64_t)v14, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    a3(v10);
    uint64_t result = sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    if (v3) {
      goto LABEL_22;
    }
  }
  if (__OFADD__(v20++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v20 >= v28) {
    goto LABEL_22;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v20);
  if (v24)
  {
LABEL_17:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
    goto LABEL_5;
  }
  int64_t v25 = v20 + 1;
  if (v20 + 1 >= v28) {
    goto LABEL_22;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v20 + 2;
  if (v20 + 2 >= v28) {
    goto LABEL_22;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v20 + 3;
  if (v20 + 3 >= v28)
  {
LABEL_22:
    swift_release();
    return 1;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
LABEL_16:
    int64_t v20 = v25;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v20 >= v28) {
      goto LABEL_22;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_17;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_100C6CD50(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (uint64_t (**)(void *, uint64_t))((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v9 = v10;
  uint64_t v11 = *(void (**)(void, __n128))(v5 + 104);
  unsigned int v36 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v37 = (void (*)(void *, void, uint64_t))v11;
  v11(v9, v7);
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v5 + 8);
  v13(v9, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = sub_100C51248(a1);
  if (v2 || !result) {
    return result;
  }
  uint64_t v34 = (uint64_t (*)(void *, uint64_t))v13;
  uint64_t v35 = result;
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD000000000000051, 0x800000010127E430);
  swift_release();
  sub_10079D8A8(*(void *)(v35 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges) | 4, 1);
  uint64_t v17 = sub_100753FC0();
  uint64_t v19 = v17;
  unint64_t v20 = v18;
  sub_10079DCE4(v17, v18, 2);
  sub_100510084(v19, v20);
  unint64_t v21 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v9 = v21;
  v37(v9, v36, v4);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t v23 = v34;
  v34(v9, v4);
  if ((v21 & 1) == 0) {
    goto LABEL_16;
  }
  unint64_t v24 = (sqlite3_stmt **)(v16 + 24);
  swift_beginAccess();
  int v25 = sqlite3_step(*(sqlite3_stmt **)(v16 + 24));
  if (v25 != 101) {
    goto LABEL_12;
  }
  uint64_t v26 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v9 = v26;
  v37(v9, v36, v4);
  id v27 = v26;
  char v28 = _dispatchPreconditionTest(_:)();
  int v25 = v23(v9, v4);
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    int v29 = v25;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v30 = v29;
    *(void *)(v30 + 8) = 0xD00000000000001ELL;
    *(void *)(v30 + 16) = 0x800000010127E490;
    swift_willThrow();
    uint64_t v31 = *(void **)(*(void *)(v16 + 16) + 32);
    *uint64_t v9 = v31;
    v37(v9, v36, v4);
    id v32 = v31;
    char v33 = _dispatchPreconditionTest(_:)();
    v23(v9, v4);
    if (v33) {
      goto LABEL_13;
    }
LABEL_17:
    __break(1u);
  }
LABEL_13:
  if (*v24)
  {
    sqlite3_finalize(*v24);
    *unint64_t v24 = 0;
  }
  swift_release();
  return swift_release();
}

uint64_t sub_100C6D1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v12);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = sub_100CE8BA4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101529608;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  sub_1005173A0(a1);
  static DispatchQoS.unspecified.getter();
  unint64_t v21 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v20);
  swift_release();
  return swift_release();
}

void sub_100C6D4CC(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = Strong;
    sub_1005468EC(v6, (uint64_t)v6);

    if (a2) {
      a2(0);
    }
    sub_100C43B54((uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton, 0);
    sub_100C6E410((uint64_t)a2, a3, *(double *)&v6[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__deletedBoardsCleanupTolerance]);
  }
}

uint64_t sub_100C6D64C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v124 = (uint64_t)v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v123 = (uint64_t)v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v122 = (uint64_t)v116 - v11;
  __chkstk_darwin(v12, v13);
  uint64_t v121 = (uint64_t)v116 - v14;
  __chkstk_darwin(v15, v16);
  uint64_t v120 = (uint64_t)v116 - v17;
  __chkstk_darwin(v18, v19);
  uint64_t v119 = (uint64_t)v116 - v20;
  uint64_t v130 = type metadata accessor for Date();
  unint64_t v118 = *(void *)(v130 - 8);
  __chkstk_darwin(v130, v21);
  uint64_t v23 = (char *)v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchPredicate();
  uint64_t v25 = *(void *)(v24 - 8);
  __n128 v27 = __chkstk_darwin(v24, v26);
  int v29 = (void *)((char *)v116 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v29 = v30;
  uint64_t v31 = *(void (**)(void *, __n128))(v25 + 104);
  unsigned int v132 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v126 = v25 + 104;
  v31(v29, v27);
  id v32 = v30;
  LOBYTE(v30) = _dispatchPreconditionTest(_:)();
  uint64_t v34 = *(void (**)(void *, uint64_t))(v25 + 8);
  uint64_t v33 = v25 + 8;
  uint64_t v125 = v34;
  v34(v29, v24);
  if ((v30 & 1) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  BOOL v133 = (void (*)(void *, uint64_t, uint64_t))v31;
  uint64_t v131 = v33;
  unint64_t v134 = 0;
  unint64_t v135 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v35._countAndFlagsBits = 0x205443454C4553;
  v35._object = (void *)0xE700000000000000;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x736472616F62;
  v36._object = (void *)0xE600000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 46;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38._object = (void *)0x8000000101262BA0;
  uint64_t v39 = v2;
  v38._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v38);
  v40._countAndFlagsBits = 0x204D4F524620;
  v40._object = (void *)0xE600000000000000;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0x736472616F62;
  v41._object = (void *)0xE600000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x20455245485720;
  v42._object = (void *)0xE700000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0x6E6F7473626D6F74;
  v43._object = (void *)0xEE00657461645F65;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0xD000000000000011;
  v44._object = (void *)0x800000010127C0C0;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0x6E6F7473626D6F74;
  v45._object = (void *)0xEA00000000006465;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0x444E412031203D20;
  v46._object = (void *)0xE900000000000020;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0x6E6F7473626D6F74;
  v47._object = (void *)0xEE00657461645F65;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0x3F203D3C20;
  v48._object = (void *)0xE500000000000000;
  String.append(_:)(v48);
  uint64_t v49 = (uint64_t)v134;
  uint64_t v50 = v135;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v51 = swift_retain();
  uint64_t v52 = sub_10079FC40(v51, v49, v50);
  uint64_t v129 = v1;
  if (v1) {
    goto LABEL_30;
  }
  uint64_t v53 = v52;
  swift_release();
  static Date.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  double v55 = v54;
  (*(void (**)(char *, uint64_t))(v118 + 8))(v23, v130);
  v116[1] = v39;
  double v56 = *(double *)(v39 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__deletedBoardTTL);
  Swift::String v57 = *(void **)(*(void *)(v53 + 16) + 32);
  void *v29 = v57;
  uint64_t v58 = v132;
  v133(v29, v132, v24);
  id v59 = v57;
  LOBYTE(v57) = _dispatchPreconditionTest(_:)();
  Swift::String v60 = v125;
  v125(v29, v24);
  if ((v57 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v130 = v53 + 24;
  swift_beginAccess();
  sqlite3_bind_double(*(sqlite3_stmt **)(v53 + 24), 1, v55 - v56);
  unint64_t v134 = &_swiftEmptySetSingleton;
  Swift::String v61 = *(void **)(*(void *)(v53 + 16) + 32);
  void *v29 = v61;
  v133(v29, v58, v24);
  id v62 = v61;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)();
  v60(v29, v24);
  if ((v61 & 1) == 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  Swift::String v63 = *(void **)(*(void *)(v53 + 16) + 32);
  void *v29 = v63;
  swift_retain();
  v133(v29, v58, v24);
  id v64 = v63;
  LOBYTE(v63) = _dispatchPreconditionTest(_:)();
  v60(v29, v24);
  Swift::String v65 = (sqlite3_stmt **)v130;
  if ((v63 & 1) == 0)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  long long v117 = xmmword_10117E810;
  uint64_t v127 = v24;
  uint64_t v128 = v53;
  while (1)
  {
    sub_1007A0344(0, 0, 1);
    swift_beginAccess();
    unsigned int v70 = sqlite3_step(*v65);
    if (v70 != 100) {
      break;
    }
    Swift::String v71 = *(void **)(*(void *)(v53 + 16) + 32);
    void *v29 = v71;
    uint64_t v72 = v133;
    v133(v29, v58, v24);
    swift_retain();
    id v73 = v71;
    LOBYTE(v71) = _dispatchPreconditionTest(_:)();
    v60(v29, v24);
    if ((v71 & 1) == 0) {
      goto LABEL_37;
    }
    sqlite3_int64 v74 = *(void **)(*(void *)(v53 + 16) + 32);
    void *v29 = v74;
    v72(v29, v132, v24);
    id v75 = v74;
    LOBYTE(v74) = _dispatchPreconditionTest(_:)();
    uint64_t v76 = v24;
    Swift::String v77 = v60;
    v60(v29, v76);
    if ((v74 & 1) == 0) {
      goto LABEL_38;
    }
    Swift::String v65 = (sqlite3_stmt **)v130;
    if (sqlite3_column_type(*(sqlite3_stmt **)v130, 0) == 5)
    {
      uint64_t v58 = v132;
    }
    else
    {
      Swift::String v78 = sqlite3_column_blob(*v65, 0);
      uint64_t v58 = v132;
      if (v78)
      {
        Swift::String v79 = v78;
        Swift::String v80 = v65;
        int v81 = sqlite3_column_bytes(*v65, 0);
        uint64_t v82 = sub_100670608(v79, v81);
        unint64_t v84 = v83;
        sub_100510D4C(v82, v83);
        uint64_t v85 = v124;
        uint64_t v86 = v129;
        sub_100753724(v82, v84, v124);
        if (!v86)
        {
          unint64_t v118 = v84;
          uint64_t v129 = 0;
          uint64_t v87 = v121;
          sub_100CE12D8(v85, v121, type metadata accessor for CRLBoardIdentifierStorage);
          uint64_t v88 = v87;
          uint64_t v89 = v120;
          sub_100CE12D8(v88, v120, type metadata accessor for CRLBoardIdentifier);
          uint64_t v90 = v119;
          sub_100CE12D8(v89, v119, type metadata accessor for CRLBoardIdentifier);
          if (qword_10166FB70 != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v91 = (void *)static OS_os_log.boardStore;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v117;
          id v93 = v91;
          uint64_t v94 = UUID.description.getter();
          uint64_t v96 = v95;
          *(void *)(inited + 56) = &type metadata for String;
          *(void *)(inited + 64) = sub_100528BE4();
          *(void *)(inited + 32) = v94;
          *(void *)(inited + 40) = v96;
          uint64_t v97 = static os_log_type_t.default.getter();
          sub_100BAC898((uint64_t)v93, (uint64_t)&_mh_execute_header, v97, (uint64_t)"Setting hideFromRecentlyDeleted to true after TTL expiration. Board ID:%{public}@)", 82, 2, inited);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          uint64_t v98 = v123;
          sub_100CE144C(v90, v123, type metadata accessor for CRLBoardIdentifier);
          uint64_t v99 = v122;
          sub_100CB7090(v122, v98);
          uint64_t v53 = v128;
          swift_release();
          sub_100510084(v82, v118);
          sub_100CE14B4(v99, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4(v90, type metadata accessor for CRLBoardIdentifier);
          Swift::String v60 = v125;
          uint64_t v58 = v132;
          Swift::String v65 = (sqlite3_stmt **)v130;
          goto LABEL_11;
        }
        swift_errorRelease();
        sub_100510084(v82, v84);
        uint64_t v129 = 0;
        Swift::String v65 = v80;
      }
    }
    Swift::String v60 = v77;
    if (qword_10166FB70 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v66 = (id)static OS_os_log.boardStore;
    uint64_t v67 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v66, (uint64_t)&_mh_execute_header, v67, (uint64_t)"Failure reading board identifier data.", 38, 2, (uint64_t)_swiftEmptyArrayStorage);

    uint64_t v53 = v128;
    swift_release();
LABEL_11:
    uint64_t v24 = v127;
    unint64_t v68 = *(void **)(*(void *)(v53 + 16) + 32);
    void *v29 = v68;
    v133(v29, v58, v24);
    id v69 = v68;
    LOBYTE(v68) = _dispatchPreconditionTest(_:)();
    v60(v29, v24);
    if ((v68 & 1) == 0) {
      goto LABEL_36;
    }
  }
  uint64_t v100 = v53;
  if (v70 && v70 != 101)
  {
    int v101 = v65;
    uint64_t v130 = v70;
    sub_1007A0344(0, 0, 1);
    uint64_t v102 = 0;
  }
  else
  {
    int v101 = v65;
    uint64_t v130 = 0;
    uint64_t v102 = 1;
  }
  uint64_t v103 = v129;
  sub_100C6AEDC(0, (uint64_t)v134);
  if (v103)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_1007A0344(v130, 0, v102);
    uint64_t v104 = *(void **)(*(void *)(v100 + 16) + 32);
    void *v29 = v104;
    v133(v29, v132, v24);
    id v105 = v104;
    LOBYTE(v104) = _dispatchPreconditionTest(_:)();
    v125(v29, v24);
    if (v104)
    {
      if (*v101)
      {
        sqlite3_finalize(*v101);
        *(void *)(v100 + 24) = 0;
      }
LABEL_30:
      swift_release();
      if (qword_10166FB70 == -1)
      {
LABEL_31:
        swift_beginAccess();
        uint64_t v106 = (void *)static OS_os_log.boardStore;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t v107 = swift_initStackObject();
        *(_OWORD *)(v107 + 16) = xmmword_10117E810;
        swift_getErrorValue();
        id v108 = v106;
        uint64_t v109 = Error.localizedDescription.getter();
        uint64_t v111 = v110;
        *(void *)(v107 + 56) = &type metadata for String;
        *(void *)(v107 + 64) = sub_100528BE4();
        *(void *)(v107 + 32) = v109;
        *(void *)(v107 + 40) = v111;
        uint64_t v112 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v108, (uint64_t)&_mh_execute_header, v112, (uint64_t)"Failed to hide TTL'd boards from recently deleted, with error %@", 64, 2, v107);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        swift_arrayDestroy();

        return swift_willThrow();
      }
LABEL_40:
      swift_once();
      goto LABEL_31;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_1007A0344(v130, 0, v102);
  char v114 = *(void **)(*(void *)(v100 + 16) + 32);
  void *v29 = v114;
  v133(v29, v132, v24);
  id v115 = v114;
  LOBYTE(v114) = _dispatchPreconditionTest(_:)();
  v125(v29, v24);
  if ((v114 & 1) == 0) {
    goto LABEL_44;
  }
  if (*v101)
  {
    sqlite3_finalize(*v101);
    *int v101 = 0;
  }
  return swift_release();
}

void sub_100C6E410(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  Swift::String v36 = (char *)v35 - v14;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v15, v16);
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __n128 v20 = __chkstk_darwin(v17, v19);
  uint64_t v22 = (void *)((char *)v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t, __n128))(v18 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v17, v20);
  v35[1] = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v22, v17);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v24 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_deletedBoardsCleanupWorkItem;
  if (!*(void *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_deletedBoardsCleanupWorkItem)
    || (swift_retain(), char v25 = dispatch thunk of DispatchWorkItem.isCancelled.getter(), swift_release(), (v25 & 1) != 0))
  {
    uint64_t v26 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v26;
    *(void *)(v27 + 24) = a1;
    *(void *)(v27 + 32) = a2;
    *(double *)(v27 + 40) = a3;
    aBlock[4] = sub_100CE8C0C;
    aBlock[5] = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(void *)"";
    aBlock[2] = sub_100679958;
    aBlock[3] = &unk_101529658;
    _Block_copy(aBlock);
    uint64_t v39 = _swiftEmptyArrayStorage;
    swift_retain();
    sub_1005173A0(a1);
    sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1005057FC((uint64_t *)&unk_1016725D0);
    sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    uint64_t v28 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    *(void *)(v4 + v24) = v28;
    swift_retain();
    swift_release();
    static DispatchTime.now()();
    int v29 = v36;
    + infix(_:_:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v37 + 8);
    uint64_t v31 = v11;
    uint64_t v32 = v38;
    v30(v31, v38);
    OS_dispatch_queue.asyncAfter(deadline:execute:)();
    swift_release();
    v30(v29, v32);
    return;
  }
  if (qword_10166FB70 != -1) {
    goto LABEL_8;
  }
LABEL_6:
  swift_beginAccess();
  id v33 = (id)static OS_os_log.boardStore;
  uint64_t v34 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v33, (uint64_t)&_mh_execute_header, v34, (uint64_t)"Failed to schedule cleanup for boards past TTL. Found existing cleanup task", 75, 2, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100C6E9BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __n128 v11 = __chkstk_darwin(v7, v10);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7, v11);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  sub_100C695E8(a3, a4, (uint64_t)sub_10084588C, v13);
  return swift_release();
}

uint64_t sub_100C6EB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __n128 v9 = __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100C75D68(a3, (uint64_t)sub_10084588C, v11, (uint64_t)&unk_101528D08, (uint64_t)sub_100CE7394, (uint64_t)&unk_101528D20);
  return swift_release();
}

uint64_t sub_100C6EC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __n128 v9 = __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100C75D68(a3, (uint64_t)sub_10084588C, v11, (uint64_t)&unk_101528D80, (uint64_t)sub_100CE73B4, (uint64_t)&unk_101528D98);
  return swift_release();
}

void sub_100C6EDEC(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  v13[7] = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v7);
  v13[6] = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v13[5] = (char *)v13 - v11;
  swift_bridgeObjectRetain();
  unint64_t v12 = a1;
  sub_100546918(v12, a2, (uint64_t)v12);
  swift_bridgeObjectRelease();

  if (a3) {
    a3(0);
  }
}

uint64_t sub_100C6F324(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8, v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (v15)
  {
    unint64_t v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v19 = v18 | (v17 << 6);
LABEL_5:
    sub_100CE144C(*(void *)(a1 + 48) + *(void *)(v4 + 72) * v19, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    sub_100CE12D8((uint64_t)v11, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
    sub_100C6F5CC((uint64_t)v7, 0xD00000000000001BLL, 0x800000010127E500, 1);
    uint64_t result = sub_100CE14B4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
    if (v1) {
      goto LABEL_22;
    }
  }
  if (__OFADD__(v17++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v17 >= v25) {
    goto LABEL_22;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v17);
  if (v21)
  {
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_5;
  }
  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v25) {
    goto LABEL_22;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v25) {
    goto LABEL_22;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v25)
  {
LABEL_22:
    swift_release();
    return 1;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v17 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v25) {
      goto LABEL_22;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_100C6F5CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v87 = a2;
  uint64_t v89 = a1;
  uint64_t v82 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v82, v7);
  uint64_t v9 = &v72[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v86 = type metadata accessor for UUID();
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86, v10);
  unint64_t v83 = (sqlite3_stmt **)&v72[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12, v13);
  unint64_t v84 = (sqlite3_stmt **)&v72[-v14];
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v18 = __chkstk_darwin(v15, v17);
  __n128 v20 = &v72[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = v4;
  int64_t v22 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *__n128 v20 = v22;
  uint64_t v23 = *(void (**)(void, __n128))(v16 + 104);
  unsigned int v76 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v78 = v16 + 104;
  Swift::String v77 = (void (*)(void *, void, uint64_t))v23;
  v23(v20, v18);
  id v24 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  int64_t v25 = *(uint64_t (**)(void *, uint64_t))(v16 + 8);
  Swift::String v80 = v20;
  uint64_t v75 = v16 + 8;
  Swift::String v79 = v25;
  v25(v20, v15);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  int v81 = v9;
  int v73 = a4;
  uint64_t v74 = v15;
  if (qword_10166FB70 != -1) {
LABEL_18:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v26 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
  id v28 = v26;
  uint64_t v29 = v89;
  uint64_t v30 = UUID.uuidString.getter();
  uint64_t v32 = v31;
  *(void *)(inited + 56) = &type metadata for String;
  unint64_t v33 = sub_100528BE4();
  *(void *)(inited + 32) = v30;
  *(void *)(inited + 40) = v32;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = v33;
  uint64_t v34 = v87;
  *(void *)(inited + 64) = v33;
  *(void *)(inited + 72) = v34;
  *(void *)(inited + 80) = a3;
  swift_bridgeObjectRetain();
  uint64_t v35 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v28, (uint64_t)&_mh_execute_header, v35, (uint64_t)"Board %{public}@ purged with reason: %{public}@", 47, 2, inited);
  uint64_t v36 = v29;
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  uint64_t v37 = v88;
  uint64_t result = sub_100C51248(v29);
  if (!v37 && result)
  {
    uint64_t v88 = result;
    swift_beginAccess();
    uint64_t v39 = v85;
    Swift::String v40 = *(void (**)(void))(v85 + 16);
    Swift::String v41 = v84;
    uint64_t v42 = v86;
    v40();
    sub_100C60988(v41, v36);
    uint64_t v43 = v36;
    Swift::String v44 = *(void (**)(sqlite3_stmt **, uint64_t))(v39 + 8);
    v44(v41, v42);
    swift_beginAccess();
    Swift::String v45 = v83;
    v40();
    sub_100C60988(v45, v43);
    v44(v45, v42);
    uint64_t v46 = (uint64_t)v81;
    sub_100CE144C(v43, (uint64_t)v81, type metadata accessor for CRLBoardIdentifier);
    swift_storeEnumTagMultiPayload();
    sub_100C5C97C(v46);
    sub_100CE14B4(v46, type metadata accessor for CRLAssetReferrerIdentifier);
    uint64_t v90 = 0;
    unint64_t v91 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    type metadata accessor for SQLiteStatement();
    swift_initStackObject();
    uint64_t v47 = swift_retain();
    uint64_t v48 = sub_10079FC40(v47, 0xD00000000000002FLL, 0x800000010127E550);
    swift_release();
    uint64_t v49 = sub_100753FC0();
    unint64_t v51 = v50;
    sub_10079DCE4(v49, v50, 1);
    sub_100510084(v49, v51);
    uint64_t v52 = *(void **)(*(void *)(v48 + 16) + 32);
    uint64_t v53 = v80;
    *Swift::String v80 = v52;
    uint64_t v54 = v74;
    v77(v53, v76, v74);
    id v55 = v52;
    char v56 = _dispatchPreconditionTest(_:)();
    uint64_t result = v79(v53, v54);
    if (v56)
    {
      Swift::String v57 = (sqlite3_stmt **)(v48 + 24);
      swift_beginAccess();
      int v58 = sqlite3_step(*(sqlite3_stmt **)(v48 + 24));
      if (v58 != 101)
      {
        int v67 = v58;
        sub_10079FF00();
        swift_allocError();
        *(_DWORD *)uint64_t v68 = v67;
        *(void *)(v68 + 8) = 0xD000000000000018;
        *(void *)(v68 + 16) = 0x800000010127E580;
        swift_willThrow();
        id v69 = *(void **)(*(void *)(v48 + 16) + 32);
        unsigned int v70 = v80;
        *Swift::String v80 = v69;
        v77(v70, v76, v54);
        id v71 = v69;
        LOBYTE(v69) = _dispatchPreconditionTest(_:)();
        uint64_t result = v79(v70, v54);
        if (v69)
        {
          if (*v57)
          {
            sqlite3_finalize(*v57);
            void *v57 = 0;
          }
          goto LABEL_16;
        }
        goto LABEL_21;
      }
      sub_1005057FC(&qword_10167ADD0);
      uint64_t v59 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
      uint64_t v87 = v21;
      uint64_t v60 = (v59 + 32) & ~v59;
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_10117E810;
      sub_100CE144C(v89, v61 + v60, type metadata accessor for CRLBoardIdentifier);
      uint64_t v62 = v48;
      Swift::String v63 = sub_1005087BC(v61);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      sub_100C43B54((uint64_t)v63, (uint64_t)&_swiftEmptySetSingleton, v73 & 1);
      swift_bridgeObjectRelease();
      id v64 = *(void **)(*(void *)(v62 + 16) + 32);
      Swift::String v65 = v80;
      *Swift::String v80 = v64;
      v77(v65, v76, v54);
      id v66 = v64;
      LOBYTE(v64) = _dispatchPreconditionTest(_:)();
      uint64_t result = v79(v65, v54);
      if (v64)
      {
        if (*v57)
        {
          sqlite3_finalize(*v57);
          void *v57 = 0;
        }
LABEL_16:
        swift_release();
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t sub_100C70064(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  v15[7] = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v7);
  v15[6] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v15[5] = (char *)v15 - v11;
  uint64_t v12 = a1;
  swift_bridgeObjectRetain();
  sub_100546944(v12, (uint64_t)v12, a2);

  swift_bridgeObjectRelease();
  if (a3) {
    a3(0);
  }
  unint64_t v13 = sub_100A3C910((uint64_t)_swiftEmptyArrayStorage);
  sub_100C44024(a2, 1, 0, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100C705F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __n128 v9 = __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100C75D68(a3, (uint64_t)sub_10084588C, v11, (uint64_t)&unk_101529000, (uint64_t)sub_100CE767C, (uint64_t)&unk_101529018);
  return swift_release();
}

void sub_100C70764(double a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v13 = (char *)Strong;
    uint64_t v14 = *(void **)(Strong + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
    *uint64_t v11 = v14;
    (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
    id v15 = v14;
    LOBYTE(v14) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
    if (v14)
    {
      uint64_t v13 = v13;
      sub_1005468EC(v13, (uint64_t)v13);

      if (a3) {
        a3(0);
      }
    }
    else
    {
      __break(1u);
      swift_once();
      swift_beginAccess();
      id v16 = (id)static OS_os_log.boardStore;
      uint64_t v17 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v16, (uint64_t)&_mh_execute_header, v17, (uint64_t)"Failed to tombstone expired boards", 34, 2, (uint64_t)_swiftEmptyArrayStorage);

      if (a3)
      {
        swift_errorRetain();
        a3(v11);
        swift_errorRelease();
      }
      swift_errorRelease();
    }
    sub_100C43B54((uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton, 0);
    *(void *)&v13[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_deletedBoardsCleanupWorkItem] = 0;
    swift_release();
    sub_100C6E410(a3, a4, a1);
  }
}

uint64_t sub_100C709EC(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v8 = v9;
  uint64_t v10 = *(void (**)(void))(v5 + 104);
  unsigned int v33 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v34 = (void (*)(void *, void, uint64_t))v10;
  v10(v8);
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v31 = a1;
  uint64_t v32 = (uint64_t (*)(void *, uint64_t))v12;
  uint64_t v35 = 0;
  unint64_t v36 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10079FC40(v13, 0xD00000000000003ELL, 0x800000010127D9B0);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v16 = sub_100753FC0();
  unint64_t v18 = v17;
  sub_10079DCE4(v16, v17, 1);
  sub_100510084(v16, v18);
  uint64_t v19 = *(void **)(*(void *)(v14 + 16) + 32);
  *uint64_t v8 = v19;
  v34(v8, v33, v4);
  id v20 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  int64_t v22 = v32;
  v32(v8, v4);
  if ((v21 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v23 = (sqlite3_stmt **)(v14 + 24);
  swift_beginAccess();
  int v24 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
  if (v24 != 101) {
    goto LABEL_11;
  }
  int64_t v25 = *(void **)(*(void *)(v14 + 16) + 32);
  *uint64_t v8 = v25;
  v34(v8, v33, v4);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  int v24 = v22(v8, v4);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    int v27 = v24;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v28 = v27;
    *(void *)(v28 + 8) = 0xD000000000000032;
    *(void *)(v28 + 16) = 0x800000010127D9F0;
    swift_willThrow();
    uint64_t v29 = *(void **)(*(void *)(v14 + 16) + 32);
    *uint64_t v8 = v29;
    v34(v8, v33, v4);
    id v30 = v29;
    LOBYTE(v29) = _dispatchPreconditionTest(_:)();
    v22(v8, v4);
    if (v29) {
      goto LABEL_12;
    }
LABEL_16:
    __break(1u);
  }
LABEL_12:
  if (*v23)
  {
    sqlite3_finalize(*v23);
    void *v23 = 0;
  }
  return swift_release();
}

uint64_t sub_100C70E28(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C76A6C(a1, a2, a3, &qword_101699680, (uint64_t)&unk_1015290A0, (uint64_t)sub_100CE77D0, (uint64_t)&unk_1015290B8);
}

uint64_t sub_100C70E58(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C76A6C(a1, a2, a3, &qword_101699680, (uint64_t)&unk_1015287B8, (uint64_t)sub_100CE5C20, (uint64_t)&unk_1015287D0);
}

uint64_t sub_100C70E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C70F18(uint64_t a1, char *a2)
{
  return sub_100C71AF0(a1, a2, &qword_101699668, (uint64_t)&unk_101528560, (uint64_t)sub_100CE56B0, (uint64_t)&unk_101528578);
}

uint64_t sub_100C70F48()
{
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v63 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  id v64 = &v58[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v58[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v9 = v10;
  id v11 = *(void (**)(void))(v6 + 104);
  unsigned int v67 = enum case for DispatchPredicate.onQueue(_:);
  id v66 = (void (*)(void *, uint64_t, uint64_t))v11;
  v11(v9);
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  Swift::String v65 = *(void (**)(void *, uint64_t))(v6 + 8);
  v65(v9, v5);
  if ((v10 & 1) == 0) {
    goto LABEL_34;
  }
  uint64_t v62 = v2;
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  uint64_t v69 = 0x454C455320202020;
  unint64_t v70 = 0xEB00000000205443;
  v13._countAndFlagsBits = sub_100CE0BA0(0, (void *)0xE000000000000000);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x4F52462020202020;
  v14._object = (void *)0xEA0000000000204DLL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x6D5F736472616F62;
  v15._object = (void *)0xEF61746164617465;
  String.append(_:)(v15);
  uint64_t v16 = v69;
  uint64_t v17 = v70;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v18 = swift_retain();
  uint64_t v19 = sub_10079FC40(v18, v16, v17);
  if (v1)
  {
    swift_release();
    if (qword_10166FB70 == -1)
    {
LABEL_4:
      swift_beginAccess();
      id v20 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v22 = v20;
      uint64_t v23 = (void *)Error.localizedDescription.getter();
      uint64_t v25 = v24;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v23;
      *(void *)(inited + 40) = v25;
      uint64_t v26 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v22, (uint64_t)&_mh_execute_header, v26, (uint64_t)"Failed to fetch board metadata records with error %@", 52, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      swift_willThrow();
      return (uint64_t)v23;
    }
LABEL_35:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v27 = v19;
  uint64_t v61 = 0;
  swift_release();
  uint64_t v28 = *(void **)(*(void *)(v27 + 16) + 32);
  *uint64_t v9 = v28;
  uint64_t v29 = v67;
  id v30 = v66;
  v66(v9, v67, v5);
  id v31 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  uint64_t v32 = v65;
  v65(v9, v5);
  if ((v28 & 1) == 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  unsigned int v33 = *(void **)(*(void *)(v27 + 16) + 32);
  *uint64_t v9 = v33;
  swift_retain();
  v30(v9, v29, v5);
  id v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)();
  v32(v9, v5);
  if ((v33 & 1) == 0)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v35 = (sqlite3_stmt **)(v27 + 24);
  uint64_t v23 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    sub_1007A0344(0, 0, 1);
    swift_beginAccess();
    unsigned int v36 = sqlite3_step(*v35);
    if (v36 != 100)
    {
      if (v36 && v36 != 101)
      {
        uint64_t v53 = v36;
        sub_1007A0344(0, 0, 1);
        uint64_t v54 = 0;
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v54 = 1;
      }
      swift_release();
      sub_1007A0344(v53, 0, v54);
      id v55 = *(void **)(*(void *)(v27 + 16) + 32);
      *uint64_t v9 = v55;
      v66(v9, v67, v5);
      id v56 = v55;
      LOBYTE(v55) = _dispatchPreconditionTest(_:)();
      v65(v9, v5);
      if (v55)
      {
        swift_beginAccess();
        if (*v35)
        {
          sqlite3_finalize(*v35);
          *uint64_t v35 = 0;
        }
        swift_release();
        return (uint64_t)v23;
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
    }
    uint64_t v37 = swift_retain_n();
    uint64_t v38 = sub_100CE0E74(v37, 0);
    if (v38) {
      break;
    }
LABEL_10:
    swift_release();
    uint64_t v39 = *(void **)(*(void *)(v27 + 16) + 32);
    *uint64_t v9 = v39;
    v66(v9, v67, v5);
    id v40 = v39;
    LOBYTE(v39) = _dispatchPreconditionTest(_:)();
    v65(v9, v5);
    if ((v39 & 1) == 0) {
      goto LABEL_33;
    }
  }
  uint64_t v41 = v38;
  uint64_t v42 = v64;
  sub_100CE144C(v38 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_boardIdentifier, (uint64_t)v64, type metadata accessor for CRLBoardIdentifier);
  swift_retain();
  LODWORD(v60) = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v68 = v23;
  unint64_t v44 = sub_1009563EC((uint64_t)v42);
  uint64_t v45 = v23[2];
  BOOL v46 = (v43 & 1) == 0;
  uint64_t v47 = v45 + v46;
  if (__OFADD__(v45, v46)) {
    goto LABEL_38;
  }
  if (v23[3] >= v47)
  {
    if (v60)
    {
      uint64_t v23 = v68;
      if ((v43 & 1) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      int v59 = v43;
      sub_10098470C();
      uint64_t v23 = v68;
      if ((v59 & 1) == 0) {
        goto LABEL_21;
      }
    }
    goto LABEL_19;
  }
  int v59 = v43;
  sub_10096E6E8(v47, v60);
  unint64_t v48 = sub_1009563EC((uint64_t)v64);
  if ((v59 & 1) == (v49 & 1))
  {
    unint64_t v44 = v48;
    uint64_t v23 = v68;
    if ((v59 & 1) == 0)
    {
LABEL_21:
      v23[(v44 >> 6) + 8] |= 1 << v44;
      sub_100CE144C((uint64_t)v64, v23[6] + *(void *)(v63 + 72) * v44, type metadata accessor for CRLBoardIdentifier);
      *(void *)(v23[7] + 8 * v44) = v41;
      uint64_t v50 = v23[2];
      BOOL v51 = __OFADD__(v50, 1);
      uint64_t v52 = v50 + 1;
      if (v51) {
        goto LABEL_39;
      }
      v23[2] = v52;
      goto LABEL_23;
    }
LABEL_19:
    uint64_t v60 = v23[7];
    swift_release();
    *(void *)(v60 + 8 * v44) = v41;
LABEL_23:
    swift_bridgeObjectRelease();
    sub_100CE14B4((uint64_t)v64, type metadata accessor for CRLBoardIdentifier);
    swift_release();
    goto LABEL_10;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100C717C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100C4ED78();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100C717F0(uint64_t a1, char *a2)
{
  return sub_100C71AF0(a1, a2, &qword_101699658, (uint64_t)&unk_1015284C0, (uint64_t)sub_100CE55E4, (uint64_t)&unk_1015284D8);
}

uint64_t sub_100C71820(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C76A6C(a1, a2, a3, &qword_101699978, (uint64_t)&unk_101529A78, (uint64_t)sub_100CE9550, (uint64_t)&unk_101529A90);
}

uint64_t sub_100C71850(uint64_t a1, uint64_t a2)
{
  sub_100C4F8E8(a2, (uint64_t)v4);
  sub_10051B3EC((uint64_t)v4, (uint64_t)v3, (uint64_t *)&unk_10169A2A0);
  sub_1005057FC(&qword_101699978);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C718EC(uint64_t a1, char *a2)
{
  return sub_100C71AF0(a1, a2, &qword_101699660, (uint64_t)&unk_101528510, (uint64_t)sub_100CE5610, (uint64_t)&unk_101528528);
}

uint64_t sub_100C7191C(uint64_t a1, char *a2)
{
  return sub_100C71AF0(a1, a2, &qword_101699660, (uint64_t)&unk_1015285B0, (uint64_t)sub_100CE56DC, (uint64_t)&unk_1015285C8);
}

uint64_t sub_100C7194C@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100C489C4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100C71AC0(uint64_t a1, char *a2)
{
  return sub_100C71AF0(a1, a2, &qword_101699660, (uint64_t)&unk_101529A28, (uint64_t)sub_100CE9374, (uint64_t)&unk_101529A40);
}

uint64_t sub_100C71AF0(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a6;
  v27[1] = a4;
  uint64_t v28 = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  id v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v14);
  uint64_t v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1005057FC(a3);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17, v20);
  char v21 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a1, v17);
  unint64_t v22 = (*(unsigned __int8 *)(v18 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v23 + v22, v21, v17);
  aBlock[4] = v28;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = v30;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = a2;
  static DispatchQoS.unspecified.getter();
  unsigned int v33 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v31);
  return swift_release();
}

uint64_t sub_100C71E78(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t *a4)
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C72074(uint64_t a1, void *aBlock, void *a3)
{
  v3[3] = a1;
  v3[4] = a3;
  v3[5] = _Block_copy(aBlock);
  id v5 = a3;
  return _swift_task_switch(sub_100C720F0, 0, 0);
}

uint64_t sub_100C720F0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  uint64_t v5 = sub_1005057FC(&qword_101672BF8);
  *uint64_t v4 = v0;
  v4[1] = sub_100C721F4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001ELL, 0x800000010127F410, sub_100CE8980, v3, v5);
}

uint64_t sub_100C721F4()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100C7240C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100C72310;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100C72310()
{
  sub_10050BF48(0, (unint64_t *)&qword_101674210);
  sub_10062E0F4((unint64_t *)&qword_101674218, (unint64_t *)&qword_101674210);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100C7240C()
{
  swift_task_dealloc();
  uint64_t v1 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, void, void *))v2)[2](v2, 0, v1);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100C724B8(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C724E8(a1, a2, a3, &qword_101699650, (uint64_t)&unk_101528470, (uint64_t)sub_100CE55B8, (uint64_t)&unk_101528488);
}

uint64_t sub_100C724E8(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = a7;
  uint64_t v29 = a3;
  uint64_t v30 = a6;
  v28[1] = a5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v14 - 8);
  uint64_t v34 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1005057FC(a4);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  __chkstk_darwin(v18, v21);
  uint64_t v31 = *(void *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v18);
  unint64_t v22 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v29;
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v23 + v22, (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  aBlock[4] = v30;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = v32;
  uint64_t v25 = _Block_copy(aBlock);
  uint64_t v26 = a2;
  static DispatchQoS.unspecified.getter();
  unsigned int v36 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v34);
  return swift_release();
}

uint64_t sub_100C72874(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t *a5)
{
  return CheckedContinuation.resume(returning:)();
}

double *sub_100C728FC@<X0>(double **a1@<X8>)
{
  uint64_t result = sub_100C4A7C4();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100C7292C(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_101699670);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_100C74AEC((uint64_t)sub_100CE5708, v7, (uint64_t)&OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue, (uint64_t)&unk_101528628, (uint64_t)sub_100CE5794, (uint64_t)&unk_101528640);
  return swift_release();
}

uint64_t sub_100C72A98(uint64_t a1, void (*a2)(double *, void))
{
  uint64_t v3 = sub_100C4A7C4();
  a2(v3, 0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100C72B5C(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5 = v4;
  int v119 = a3;
  unint64_t v124 = a2;
  uint64_t v144 = a1;
  uint64_t v140 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v140, v6);
  uint64_t v139 = &v118[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v138 = &v118[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v122 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = &v118[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v129 = &v118[-v18];
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v149 = &v118[-v21];
  __chkstk_darwin(v20, v22);
  uint64_t v137 = &v118[-v23];
  uint64_t v24 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v123 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24 - 8, v25);
  uint64_t v136 = &v118[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = __chkstk_darwin(v26, v28);
  unint64_t v135 = &v118[-v30];
  __chkstk_darwin(v29, v31);
  unint64_t v134 = &v118[-v32];
  uint64_t v33 = type metadata accessor for DispatchPredicate();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  uint64_t v37 = &v118[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v38 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  void *v37 = v38;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v37, enum case for DispatchPredicate.onQueue(_:), v33);
  id v39 = v38;
  LOBYTE(v38) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v34 + 8))(v37, v33);
  if ((v38 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  type metadata accessor for CRLBoardDatabaseFetchResult();
  uint64_t v41 = (void *)swift_allocObject();
  v41[2] = &_swiftEmptyDictionarySingleton;
  uint64_t v141 = v41 + 2;
  v41[3] = &_swiftEmptyDictionarySingleton;
  uint64_t v121 = v41 + 3;
  v41[4] = &_swiftEmptyDictionarySingleton;
  uint64_t v120 = v41 + 4;
  uint64_t v125 = v15;
  uint64_t v126 = v41;
  v41[5] = &_swiftEmptyDictionarySingleton;
  uint64_t v128 = v3;
  uint64_t v150 = v11;
  if (v144)
  {
    uint64_t v42 = *(void *)(v144 + 16);
    unint64_t v43 = (unint64_t)v129;
    if (v42)
    {
      unint64_t v44 = (char *)(v144
                   + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80)));
      uint64_t v146 = *(void *)(v123 + 72);
      swift_bridgeObjectRetain();
      uint64_t v45 = _swiftEmptyArrayStorage;
      long long v145 = xmmword_10117E810;
      do
      {
        sub_100C4CA30(v44, v154);
        if (v5) {
          goto LABEL_40;
        }
        sub_10051B3EC((uint64_t)v154, (uint64_t)v155, &qword_10169A200);
        uint64_t v47 = v155[0];
        if (v155[0])
        {
          uint64_t v142 = 0;
          uint64_t v48 = v155[1];
          uint64_t v49 = v155[2];
          id v50 = v156;
          LODWORD(v148) = v157;
          int v147 = (void (*)(unint64_t, uint64_t))v156;
          swift_retain();
          swift_retain();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v45 = sub_100F64CF8(0, *((void *)v45 + 2) + 1, 1, v45);
          }
          unint64_t v52 = *((void *)v45 + 2);
          unint64_t v51 = *((void *)v45 + 3);
          uint64_t v53 = v45;
          if (v52 >= v51 >> 1) {
            uint64_t v53 = sub_100F64CF8((double *)(v51 > 1), v52 + 1, 1, v45);
          }
          *((void *)v53 + 2) = v52 + 1;
          uint64_t v45 = v53;
          BOOL v46 = &v53[5 * v52];
          *((void *)v46 + 4) = v47;
          *((void *)v46 + 5) = v48;
          *((void *)v46 + 6) = v49;
          *((void *)v46 + 7) = v50;
          *((unsigned char *)v46 + 64) = (_BYTE)v148;

          swift_release();
          swift_release();
          swift_release();
          uint64_t v5 = v142;
        }
        else
        {
          uint64_t v127 = v45;
          if (qword_10166FB70 != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v54 = (void *)static OS_os_log.boardStore;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v145;
          id v56 = v54;
          uint64_t v57 = UUID.uuidString.getter();
          uint64_t v59 = v58;
          *(void *)(inited + 56) = &type metadata for String;
          *(void *)(inited + 64) = sub_100528BE4();
          *(void *)(inited + 32) = v57;
          *(void *)(inited + 40) = v59;
          uint64_t v60 = static os_log_type_t.error.getter();
          sub_100BAC898((uint64_t)v56, (uint64_t)&_mh_execute_header, v60, (uint64_t)"Failed to fetch boardAndContainerData for board %{public}@", 58, 2, inited);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          uint64_t v45 = v127;
        }
        v44 += v146;
        --v42;
        uint64_t v3 = v128;
        unint64_t v43 = (unint64_t)v129;
      }
      while (v42);
      uint64_t v142 = v5;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v142 = v4;
      uint64_t v45 = _swiftEmptyArrayStorage;
    }
    uint64_t v11 = v150;
  }
  else
  {
    uint64_t v61 = sub_100C4B56C();
    unint64_t v43 = (unint64_t)v129;
    if (v4) {
      goto LABEL_62;
    }
    uint64_t v45 = v61;
    uint64_t v142 = 0;
  }
  uint64_t v62 = (void (**)(unint64_t, uint64_t))*((void *)v45 + 2);
  uint64_t v127 = v45;
  if (v62)
  {
    BOOL v133 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v122 + 16);
    uint64_t v131 = (void (**)(unsigned char *, uint64_t))(v122 + 8);
    unsigned int v132 = CKCurrentUserDefaultName;
    uint64_t v130 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v122 + 32);
    swift_bridgeObjectRetain();
    uint64_t v63 = (unsigned __int8 *)(v45 + 8);
    do
    {
      id v148 = v62;
      Swift::String v79 = (void (*)(unint64_t, uint64_t))*((void *)v63 - 4);
      uint64_t v146 = *((void *)v63 - 3);
      *(void *)&long long v145 = *((void *)v63 - 2);
      id v143 = (id)*((void *)v63 - 1);
      int v80 = *v63;
      int v81 = (char *)v79 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess();
      uint64_t v82 = (uint64_t)v81;
      unint64_t v83 = v138;
      sub_100CE144C(v82, (uint64_t)v138, type metadata accessor for CRLBoardCRDTData);
      sub_1005057FC(&qword_101674550);
      unint64_t v84 = v137;
      CRRegister.wrappedValue.getter();
      sub_100CE14B4((uint64_t)v83, type metadata accessor for CRLBoardCRDTData);
      int v147 = v79;
      uint64_t v64 = *(void *)((char *)v79 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      unint64_t v65 = *(void *)((char *)v79 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8);
      (*v133)(v149, v84, v11);
      BOOL v86 = v64 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v85;
      LODWORD(v144) = v80;
      if (v86
        || (char v87 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            swift_bridgeObjectRetain(),
            swift_bridgeObjectRelease(),
            (v87 & 1) != 0))
      {
        swift_bridgeObjectRelease();
        uint64_t v64 = 0;
        unint64_t v65 = 0xE000000000000000;
      }
      uint64_t v66 = v150;
      (*v131)(v84, v150);
      uint64_t v67 = (uint64_t)v139;
      (*v130)(v139, v149, v66);
      uint64_t v68 = (void *)(v67 + *(int *)(v140 + 20));
      *uint64_t v68 = v64;
      v68[1] = v65;
      uint64_t v69 = v135;
      sub_100CE12D8(v67, (uint64_t)v135, type metadata accessor for CRLBoardIdentifierStorage);
      unint64_t v70 = v134;
      sub_100CE12D8((uint64_t)v69, (uint64_t)v134, type metadata accessor for CRLBoardIdentifier);
      id v71 = v136;
      sub_100CE144C((uint64_t)v70, (uint64_t)v136, type metadata accessor for CRLBoardIdentifier);
      uint64_t v72 = v141;
      swift_beginAccess();
      uint64_t v73 = (uint64_t)v143;
      id v74 = v143;
      uint64_t v75 = (uint64_t)v147;
      swift_retain();
      uint64_t v76 = v146;
      swift_retain();
      uint64_t v77 = v145;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v151 = *v72;
      *uint64_t v72 = 0x8000000000000000;
      v152[0] = v75;
      v152[1] = v76;
      uint64_t v11 = v150;
      v152[2] = v77;
      v152[3] = v73;
      char v153 = v144;
      sub_10097494C(v152, (uint64_t)v71, isUniquelyReferenced_nonNull_native);
      *uint64_t v72 = v151;
      swift_bridgeObjectRelease();
      sub_100CE14B4((uint64_t)v71, type metadata accessor for CRLBoardIdentifier);
      swift_endAccess();
      sub_100CE14B4((uint64_t)v70, type metadata accessor for CRLBoardIdentifier);
      v63 += 40;
      uint64_t v62 = (void (**)(unint64_t, uint64_t))((char *)v148 - 1);
    }
    while (v148 != (void (**)(unint64_t, uint64_t))1);
    swift_bridgeObjectRelease();
    uint64_t v3 = v128;
    unint64_t v43 = (unint64_t)v129;
  }
  uint64_t v88 = v142;
  if (!v124)
  {
    if (v119) {
      goto LABEL_39;
    }
    goto LABEL_57;
  }
  if (v124 == 1)
  {
    uint64_t v89 = swift_beginAccess();
    __chkstk_darwin(v89, v90);
    *(void *)&v118[-16] = v3;
    *(void *)&v118[-8] = v91;
    uint64_t v92 = swift_bridgeObjectRetain();
    sub_100CDEDE0(v92, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100CE1514, (uint64_t)&v118[-32]);
    if (v88) {
      goto LABEL_40;
    }
    swift_bridgeObjectRelease();
    if ((v119 & 1) == 0) {
      goto LABEL_57;
    }
LABEL_39:
    uint64_t v93 = swift_beginAccess();
    __chkstk_darwin(v93, v94);
    *(void *)&v118[-16] = v3;
    *(void *)&v118[-8] = v95;
    uint64_t v96 = v95;
    uint64_t v97 = swift_bridgeObjectRetain();
    sub_100CDEDE0(v97, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100CE1530, (uint64_t)&v118[-32]);
    if (!v88)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v96;
    }
LABEL_40:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  uint64_t v98 = *(void *)(v124 + 16);
  if (!v98)
  {
LABEL_56:
    uint64_t v88 = v142;
    if (v119) {
      goto LABEL_39;
    }
LABEL_57:
    swift_bridgeObjectRelease();
    return (uint64_t)v126;
  }
  uint64_t v99 = v124 + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
  uint64_t v146 = *(void *)(v123 + 72);
  id v148 = (void (**)(unint64_t, uint64_t))(v122 + 8);
  uint64_t v149 = (unsigned char *)(v122 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v100 = v142;
    uint64_t v101 = sub_100C51248(v99);
    uint64_t v142 = v100;
    if (v100)
    {
      sub_100CE154C(v124);
      goto LABEL_61;
    }
    uint64_t v102 = v101;
    if (v101) {
      break;
    }
LABEL_44:
    v99 += v146;
    if (!--v98)
    {
      sub_100CE154C(v124);
      goto LABEL_56;
    }
  }
  uint64_t v103 = v101 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
  swift_beginAccess();
  uint64_t v104 = *(void (**)(unsigned char *, uint64_t, uint64_t))v149;
  (*(void (**)(unint64_t, uint64_t, uint64_t))v149)(v43, v103, v11);
  uint64_t v105 = v142;
  uint64_t v106 = sub_100C518D4(v43, v99);
  uint64_t v142 = v105;
  if (v105)
  {
    (*v148)(v43, v11);
    goto LABEL_60;
  }
  uint64_t v107 = v106;
  int v147 = *v148;
  v147(v43, v11);
  if (v107)
  {
    id v108 = v121;
    swift_beginAccess();
    swift_retain();
    char v109 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v158 = *v108;
    *id v108 = 0x8000000000000000;
    sub_1009746A8(v107, v99, v109);
    *id v108 = v158;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  uint64_t v110 = v102 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
  swift_beginAccess();
  unint64_t v111 = (unint64_t)v125;
  uint64_t v112 = v150;
  v104(v125, v110, v150);
  uint64_t v113 = v142;
  uint64_t v114 = sub_100C518D4(v111, v99);
  uint64_t v142 = v113;
  if (!v113)
  {
    uint64_t v115 = v114;
    v147(v111, v112);
    if (v115)
    {
      int v116 = v120;
      swift_beginAccess();
      swift_retain();
      char v117 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v158 = *v116;
      *int v116 = 0x8000000000000000;
      sub_1009746A8(v115, v99, v117);
      *int v116 = v158;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
    }
    uint64_t v3 = v128;
    unint64_t v43 = (unint64_t)v129;
    swift_release();
    uint64_t v11 = v150;
    goto LABEL_44;
  }
  v147(v111, v112);
LABEL_60:
  swift_release();
  sub_100CE154C(v124);
LABEL_61:
  swift_bridgeObjectRelease();
LABEL_62:
  swift_willThrow();
  uint64_t v96 = v126;
  swift_release();
  return (uint64_t)v96;
}

uint64_t sub_100C73960(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v16);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v5;
  *(void *)(v19 + 24) = a1;
  *(void *)(v19 + 32) = a2;
  *(unsigned char *)(v19 + 40) = a3;
  *(void *)(v19 + 48) = a4;
  *(void *)(v19 + 56) = a5;
  aBlock[4] = sub_100CE1428;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528438;
  uint64_t v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  uint64_t v21 = v5;
  sub_100CE143C(a2);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v24);
  return swift_release();
}

uint64_t sub_100C73C5C(uint64_t a1, uint64_t a2, unint64_t a3, int a4, void (*a5)(uint64_t, void))
{
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100C72B5C(a2, a3, a4);
  uint64_t v15 = swift_retain();
  a5(v15, 0);
  swift_release();
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  uint64_t v17 = v16;
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  *(void *)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_lastFetchResultsTime) = v17;
  return result;
}

uint64_t sub_100C73E10(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v9 = sub_1005057FC(&qword_101699620);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_100C73960(a3, a4, a5, (uint64_t)sub_100CE134C, v14);
  return swift_release();
}

uint64_t sub_100C73F70(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_1005057FC(&qword_101699620);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_retain();
    sub_1005057FC(&qword_101699620);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100C73FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = a7;
  uint64_t v48 = a8;
  uint64_t v49 = a4;
  uint64_t v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v47 = (uint64_t)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005057FC((uint64_t *)&unk_101683E10);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v22 = (char *)v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)v45 - v24;
  uint64_t v26 = a3 + *(void *)(*(void *)a3 + 632);
  swift_beginAccess();
  sub_100522E9C(v26, (uint64_t)v16, (uint64_t *)&unk_101683E10);
  uint64_t v27 = sub_1005057FC(&qword_101674550);
  CRRegister.wrappedValue.getter();
  sub_100522F00((uint64_t)v16, (uint64_t *)&unk_101683E10);
  uint64_t v28 = a1;
  uint64_t v29 = v51;
  uint64_t v30 = sub_100C518D4((unint64_t)v25, a1);
  if (v29) {
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, v17);
  }
  v45[2] = v27;
  uint64_t v46 = 0;
  unint64_t v51 = v22;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v33 = v30;
  v45[1] = v18 + 8;
  v32(v25, v17);
  if (v33)
  {
    uint64_t v34 = v47;
    sub_100CE144C(v28, v47, type metadata accessor for CRLBoardIdentifier);
    uint64_t v35 = v48;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = *(void *)(v35 + 24);
    *(void *)(v35 + 24) = 0x8000000000000000;
    sub_1009746A8(v33, v34, isUniquelyReferenced_nonNull_native);
    *(void *)(v35 + 24) = v52;
    swift_bridgeObjectRelease();
    sub_100CE14B4(v34, type metadata accessor for CRLBoardIdentifier);
    swift_endAccess();
    swift_release();
  }
  uint64_t v37 = v49 + *(void *)(*(void *)v49 + 632);
  swift_beginAccess();
  sub_100522E9C(v37, (uint64_t)v16, (uint64_t *)&unk_101683E10);
  unint64_t v38 = (unint64_t)v51;
  CRRegister.wrappedValue.getter();
  sub_100522F00((uint64_t)v16, (uint64_t *)&unk_101683E10);
  uint64_t v39 = v46;
  uint64_t v40 = sub_100C518D4(v38, v28);
  if (v39) {
    return ((uint64_t (*)(unint64_t, uint64_t))v32)(v38, v17);
  }
  uint64_t v41 = v40;
  uint64_t result = ((uint64_t (*)(unint64_t, uint64_t))v32)(v38, v17);
  if (v41)
  {
    uint64_t v42 = v47;
    sub_100CE144C(v28, v47, type metadata accessor for CRLBoardIdentifier);
    uint64_t v43 = v48;
    swift_beginAccess();
    swift_retain();
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v53 = *(void *)(v43 + 32);
    *(void *)(v43 + 32) = 0x8000000000000000;
    sub_1009746A8(v41, v42, v44);
    *(void *)(v43 + 32) = v53;
    swift_bridgeObjectRelease();
    sub_100CE14B4(v42, type metadata accessor for CRLBoardIdentifier);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

unint64_t sub_100C7445C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t isUniquelyReferenced_nonNull_native = v8;
  uint64_t v12 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = sub_100C747B8(a1);
  if (!v8)
  {
    uint64_t v17 = result;
    if (result >> 62)
    {
LABEL_27:
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v38 = a1;
    uint64_t v39 = v15;
    unint64_t v41 = a8;
    uint64_t v19 = &_swiftEmptyDictionarySingleton;
    uint64_t v40 = isUniquelyReferenced_nonNull_native;
    if (v18)
    {
      uint64_t v42 = v17;
      unint64_t v43 = v17 & 0xC000000000000001;
      uint64_t v20 = 4;
      do
      {
        uint64_t isUniquelyReferenced_nonNull_native = v20 - 4;
        if (v43)
        {
          uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v15 = (char *)(v20 - 3);
          if (__OFADD__(isUniquelyReferenced_nonNull_native, 1)) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v22 = *(void *)(v17 + 8 * v20);
          swift_retain();
          uint64_t v15 = (char *)(v20 - 3);
          if (__OFADD__(isUniquelyReferenced_nonNull_native, 1))
          {
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        uint64_t v17 = v18;
        uint64_t v23 = *(void *)(v22 + 16);
        swift_retain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v44 = v19;
        a8 = sub_100955F14(v23);
        uint64_t v25 = v19[2];
        BOOL v26 = (v24 & 1) == 0;
        uint64_t v27 = v25 + v26;
        if (__OFADD__(v25, v26)) {
          goto LABEL_25;
        }
        a1 = v24;
        if (v19[3] >= v27)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10097C6EC();
          }
        }
        else
        {
          sub_10095FB88(v27, isUniquelyReferenced_nonNull_native);
          unint64_t v28 = sub_100955F14(v23);
          if ((a1 & 1) != (v29 & 1))
          {
            unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          a8 = v28;
        }
        uint64_t v19 = v44;
        uint64_t isUniquelyReferenced_nonNull_native = 8 * a8;
        if (a1)
        {
          a8 = v44[7];
          swift_release();
          *(void *)(a8 + isUniquelyReferenced_nonNull_native) = v22;
        }
        else
        {
          v44[(a8 >> 6) + 8] |= 1 << a8;
          *(void *)(v19[6] + 8 * a8) = v23;
          *(void *)(v19[7] + 8 * a8) = v22;
          uint64_t v30 = v19[2];
          BOOL v31 = __OFADD__(v30, 1);
          uint64_t v32 = v30 + 1;
          if (v31) {
            goto LABEL_26;
          }
          void v19[2] = v32;
        }
        swift_release();
        swift_bridgeObjectRelease();
        ++v20;
        uint64_t v18 = v17;
        BOOL v21 = v15 == (char *)v17;
        uint64_t v17 = v42;
      }
      while (!v21);
    }
    swift_bridgeObjectRelease();
    sub_1005057FC((uint64_t *)&unk_10169A010);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v19;
    *(void *)(v33 + 24) = &_swiftEmptyDictionarySingleton;
    uint64_t v34 = (uint64_t)v39;
    sub_100CE144C(v38, (uint64_t)v39, type metadata accessor for CRLBoardIdentifier);
    unint64_t v35 = v41;
    swift_beginAccess();
    swift_retain();
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v45 = *(void *)(v35 + 40);
    *(void *)(v35 + 40) = 0x8000000000000000;
    sub_100978994(v33, v34, v36);
    *(void *)(v35 + 40) = v45;
    swift_bridgeObjectRelease();
    sub_100CE14B4(v34, type metadata accessor for CRLBoardIdentifier);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_100C747B8(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)((char *)v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    unint64_t v11 = sub_100C83FF8(a1);
    if (v2) {
      return (uint64_t)v1;
    }
    uint64_t v8 = (void *)v11;
    if (!(v11 >> 62))
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_5:
  unint64_t v23 = sub_100A465DC(_swiftEmptyArrayStorage);
  type metadata accessor for CRLUnfairLock();
  uint64_t inited = swift_initStackObject();
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  *uint64_t v14 = 0;
  *(void *)(inited + 16) = v14;
  atomic_thread_fence(memory_order_acq_rel);
  uint64_t v15 = sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
  __chkstk_darwin(v15, v16);
  *(&v21 - 4) = (uint64_t)v8;
  *(&v21 - 3) = inited;
  *(&v21 - 2) = (uint64_t)&v23;
  static OS_dispatch_queue.concurrentPerform(iterations:execute:)();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v22 = _swiftEmptyArrayStorage;
  if ((v12 & 0x8000000000000000) == 0)
  {
    if (v12)
    {
      uint64_t v18 = 0;
      unint64_t v19 = v23;
      do
      {
        if (*(void *)(v19 + 16))
        {
          sub_100955F14(v18);
          if (v20)
          {
            swift_retain_n();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v22 & 0xFFFFFFFFFFFFFF8)
                                                                                                + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_release();
          }
        }
        ++v18;
      }
      while (v12 != v18);
      swift_release();
      uint64_t v1 = v22;
    }
    else
    {
      swift_release();
      uint64_t v1 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100C74ABC(uint64_t a1, uint64_t a2)
{
  return sub_100C74AEC(a1, a2, (uint64_t)&OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue, (uint64_t)&unk_101529050, (uint64_t)sub_100CE76D0, (uint64_t)&unk_101529068);
}

uint64_t sub_100C74AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a6;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v15);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = v6;
  v18[3] = a1;
  v18[4] = a2;
  aBlock[4] = a5;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = v22;
  unint64_t v19 = _Block_copy(aBlock);
  id v20 = v6;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v23);
  return swift_release();
}

uint64_t sub_100C74DB4(uint64_t a1, void (*a2)(double *, void))
{
  uint64_t v3 = sub_100C4B56C();
  a2(v3, 0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100C74E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  v32[0] = a1;
  uint64_t v36 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v6);
  unint64_t v35 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  uint64_t v16 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  id v20 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[1] = *(void *)&v4[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_100CE144C(v32[0], (uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v12);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v18 + *(unsigned __int8 *)(v13 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v4;
  sub_100CE12D8((uint64_t)v20, v23 + v21, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v23 + v22, (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  uint64_t v24 = (uint64_t *)(v23 + ((v14 + v22 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v26 = v33;
  uint64_t v25 = v34;
  *uint64_t v24 = v33;
  v24[1] = v25;
  aBlock[4] = sub_100CE6044;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_1015288C0;
  uint64_t v27 = _Block_copy(aBlock);
  unint64_t v28 = v4;
  sub_1005173A0(v26);
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  uint64_t v30 = v35;
  uint64_t v29 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v29);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v38);
  return swift_release();
}

void sub_100C752FC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a4) {
    a4(0);
  }
}

void sub_100C7550C(unint64_t a1, uint64_t a2)
{
  unint64_t v59 = a1;
  uint64_t v3 = v2;
  uint64_t v54 = a2;
  uint64_t v4 = sub_1005057FC(&qword_101699628);
  __chkstk_darwin(v4 - 8, v5);
  id v56 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for CRLBoardCRDTData(0);
  *(void *)&long long v55 = *(void *)(v57 - 8);
  uint64_t v8 = __chkstk_darwin(v57, v7);
  uint64_t v52 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v53 = (uint64_t)&v51 - v11;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v16 = v17;
  uint64_t v18 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v19 = *(void (**)(void *, uint64_t, uint64_t))(v13 + 104);
  v19(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v20 = v17;
  char v21 = _dispatchPreconditionTest(_:)();
  unint64_t v22 = *(void (**)(void *, uint64_t))(v13 + 8);
  v22(v16, v12);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v23 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v16 = v23;
  v19(v16, v18, v12);
  id v24 = v23;
  char v25 = _dispatchPreconditionTest(_:)();
  v22(v16, v12);
  if ((v25 & 1) == 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_9;
  }
  uint64_t v26 = v58;
  uint64_t v27 = sub_100C51248(v59);
  if (v26) {
    return;
  }
  uint64_t v28 = v27;
  if (v27)
  {
    uint64_t v29 = (uint64_t *)(v27 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
    unint64_t v30 = *(void *)(v27 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
    if (v30 >> 60 != 15)
    {
      uint64_t v31 = *v29;
      sub_100510D4C(*v29, *(void *)(v27 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8));
      sub_100510D4C(v31, v30);
      sub_100CDE0D8((unint64_t *)&unk_10169A0D0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
      uint64_t v33 = (uint64_t)v56;
      uint64_t v32 = v57;
      CRDT.init(serializedData:)();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v33, 0, 1, v32);
      unint64_t v59 = v30;
      uint64_t v41 = v53;
      sub_100CE12D8(v33, v53, type metadata accessor for CRLBoardCRDTData);
      long long v55 = *(_OWORD *)(v28 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
      uint64_t v42 = *(void *)(v28 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
      uint64_t v58 = v31;
      uint64_t v43 = v52;
      sub_100CE144C(v41, v52, type metadata accessor for CRLBoardCRDTData);
      uint64_t v44 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
      uint64_t v45 = (char **)(v28 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20) + v44);
      uint64_t v46 = v45[1];
      id v56 = *v45;
      type metadata accessor for CRLBoardData(0);
      uint64_t v47 = swift_allocObject();
      *(void *)(v47 + 16) = 7;
      *(_OWORD *)(v47 + 24) = v55;
      *(void *)(v47 + 40) = v42;
      sub_100CE12D8(v43, v47 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
      swift_bridgeObjectRetain();
      swift_release();
      sub_100514260(v58, v59);
      uint64_t v48 = (void *)(v47 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      *uint64_t v48 = v56;
      v48[1] = v46;
      sub_100CE14B4(v41, type metadata accessor for CRLBoardCRDTData);
      Date.timeIntervalSinceReferenceDate.getter();
      uint64_t v50 = v49;
      swift_beginAccess();
      uint64_t v60 = v50;
      sub_1005057FC(&qword_101691F28);
      CRMaxRegister.wrappedValue.setter();
      swift_endAccess();
      sub_100C621C4((void *)v47, 0, 0, 0xF000000000000000, 0, 0);
      swift_release();
      swift_setDeallocating();
      sub_100CE14B4(v47 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
      swift_bridgeObjectRelease();
      swift_deallocClassInstance();
      return;
    }
    swift_release();
  }
  if (qword_10166FB70 != -1) {
    goto LABEL_13;
  }
LABEL_9:
  swift_beginAccess();
  uint64_t v34 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  id v36 = v34;
  uint64_t v37 = sub_100753038();
  uint64_t v39 = v38;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  *(void *)(inited + 32) = v37;
  *(void *)(inited + 40) = v39;
  uint64_t v40 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v36, (uint64_t)&_mh_execute_header, v40, (uint64_t)"Attempted to update the last activity time but the board does not exist. Board identifier %@", 92, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();
}

uint64_t sub_100C75BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __n128 v9 = __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100C75D68(a3, (uint64_t)sub_10084588C, v11, (uint64_t)&unk_101528F88, (uint64_t)sub_100CE7600, (uint64_t)&unk_101528FA0);
  return swift_release();
}

uint64_t sub_100C75D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v16 - 8);
  uint64_t v26 = v16;
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(void *)&v6[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  id v20 = (void *)swift_allocObject();
  v20[2] = v6;
  v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  aBlock[4] = a5;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = a6;
  char v21 = _Block_copy(aBlock);
  unint64_t v22 = v6;
  swift_bridgeObjectRetain();
  sub_1005173A0(a2);
  static DispatchQoS.unspecified.getter();
  uint64_t v28 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v26);
  return swift_release();
}

void sub_100C7603C(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v6 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v13[7] = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v7);
  v13[6] = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v13[5] = (char *)v13 - v11;
  swift_bridgeObjectRetain();
  uint64_t v12 = a1;
  sub_100546C54(v12, a2, (uint64_t)v12);
  swift_bridgeObjectRelease();

  if (a3) {
    a3(0);
  }
}

uint64_t sub_100C76574(uint64_t a1, uint64_t a2)
{
  return sub_100C7A9A0(a1, a2, (void (*)(uint64_t, char *))sub_100C765A4) & 1;
}

void sub_100C765A4(int a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = a2;
  int v42 = a1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (uint64_t *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v9 = v10;
  uint64_t v11 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v12 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  ((void (*)(void *, void, uint64_t, __n128))v12)(v9, enum case for DispatchPredicate.onQueue(_:), v4, v7);
  id v13 = v10;
  char v14 = _dispatchPreconditionTest(_:)();
  uint64_t v15 = *(void (**)(void *, uint64_t))(v5 + 8);
  v15(v9, v4);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v16 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v9 = v16;
  v12(v9, v11, v4);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  v15(v9, v4);
  if ((v18 & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v19 = v40;
  uint64_t v20 = sub_100C68104(v41);
  if (v19) {
    return;
  }
  if (!v20 || (uint64_t v21 = sub_100CD94C8(v20)) == 0)
  {
    if (qword_10166FB70 == -1)
    {
LABEL_14:
      swift_beginAccess();
      uint64_t v33 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v35 = v33;
      uint64_t v36 = UUID.uuidString.getter();
      uint64_t v38 = v37;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v36;
      *(void *)(inited + 40) = v38;
      uint64_t v39 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v35, (uint64_t)&_mh_execute_header, v39, (uint64_t)"Attempted to set the favorite state on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 133, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return;
    }
LABEL_18:
    swift_once();
    goto LABEL_14;
  }
  uint64_t v22 = v21;
  if (qword_10166FB70 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v23 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v24 = swift_initStackObject();
  *(_OWORD *)(v24 + 16) = xmmword_10117D8C0;
  unint64_t v25 = sub_100528BE4();
  unint64_t v26 = v25;
  LODWORD(v40) = v42 & 1;
  uint64_t v27 = 1702195828;
  if ((v42 & 1) == 0) {
    uint64_t v27 = 0x65736C6166;
  }
  unint64_t v28 = 0xE500000000000000;
  if (v42) {
    unint64_t v28 = 0xE400000000000000;
  }
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = v25;
  *(void *)(v24 + 32) = v27;
  *(void *)(v24 + 40) = v28;
  id v29 = v23;
  uint64_t v30 = UUID.uuidString.getter();
  *(void *)(v24 + 96) = &type metadata for String;
  *(void *)(v24 + 104) = v26;
  *(void *)(v24 + 72) = v30;
  *(void *)(v24 + 80) = v31;
  uint64_t v32 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v29, (uint64_t)&_mh_execute_header, v32, (uint64_t)"Set favorite status to [%{public}@] for board identifier: %{public}@", 68, 2, v24);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  swift_beginAccess();
  char v43 = v40;
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.setter();
  swift_endAccess();
  sub_100C67498(v22, 0, 0, 0xF000000000000000, 0);
  swift_release();
  swift_release();
}

uint64_t sub_100C76A3C(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C76A6C(a1, a2, a3, &qword_101699968, (uint64_t)&unk_1015299D8, (uint64_t)sub_100CE926C, (uint64_t)&unk_1015299F0);
}

uint64_t sub_100C76A6C(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v35 = a1;
  uint64_t v36 = a5;
  uint64_t v34 = a3;
  uint64_t v40 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v42 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1005057FC(a4);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16, v19);
  uint64_t v20 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  __chkstk_darwin(v21 - 8, v24);
  unint64_t v25 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  sub_100CE144C(v34, (uint64_t)v25, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v35, v16);
  unint64_t v26 = (*(unsigned __int8 *)(v22 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v27 = (v23 + *(unsigned __int8 *)(v17 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a2;
  sub_100CE12D8((uint64_t)v25, v28 + v26, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v28 + v27, v20, v16);
  aBlock[4] = v38;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = v39;
  id v29 = _Block_copy(aBlock);
  uint64_t v30 = a2;
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  uint64_t v31 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v42);
  return swift_release();
}

uint64_t sub_100C76EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100C68104(a2))
  {
    sub_10084401C((uint64_t)v6);
    sub_1005057FC((uint64_t *)&unk_101689310);
    CRRegister.wrappedValue.getter();
    sub_1005057FC(&qword_101699968);
    CheckedContinuation.resume(returning:)();
    swift_release();
    return sub_100CE14B4((uint64_t)v6, type metadata accessor for CRLUserBoardMetadataCRDTData);
  }
  else
  {
    LOBYTE(v8) = 2;
    sub_1005057FC(&qword_101699968);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100C7702C(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C8D0CC(a1, a2, a3, (uint64_t)&unk_101528F10, (uint64_t)sub_100CE75D4, (uint64_t)&unk_101528F28);
}

uint64_t sub_100C77054(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v12[7] = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8, v5);
  v12[6] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v12[5] = (char *)v12 - v9;
  swift_bridgeObjectRetain();
  uint64_t v10 = a1;
  sub_100546C80(v10, a2, (uint64_t)v10);
  swift_bridgeObjectRelease();

  sub_1005057FC(&qword_10167F0F0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C77524(uint64_t a1, uint64_t a2)
{
  return sub_100C7A9A0(a1, a2, (void (*)(uint64_t, char *))sub_100C77554) & 1;
}

void sub_100C77554(char a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7, v10);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v12, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v15 = sub_100C68104(a2);
  if (v3) {
    return;
  }
  if (!v15 || (uint64_t v16 = sub_100CD94C8(v15)) == 0)
  {
    if (qword_10166FB70 == -1)
    {
LABEL_13:
      swift_beginAccess();
      uint64_t v28 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v30 = v28;
      uint64_t v31 = UUID.uuidString.getter();
      uint64_t v33 = v32;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v31;
      *(void *)(inited + 40) = v33;
      uint64_t v34 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v30, (uint64_t)&_mh_execute_header, v34, (uint64_t)"Attempted to enable collaborator cursors on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 138, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_13;
  }
  uint64_t v36 = v16;
  if (qword_10166FB70 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v17 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_10117D8C0;
  unint64_t v19 = sub_100528BE4();
  unint64_t v20 = v19;
  int v37 = a1 & 1;
  uint64_t v21 = 1702195828;
  if ((a1 & 1) == 0) {
    uint64_t v21 = 0x65736C6166;
  }
  unint64_t v22 = 0xE500000000000000;
  if (a1) {
    unint64_t v22 = 0xE400000000000000;
  }
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = v19;
  *(void *)(v18 + 32) = v21;
  *(void *)(v18 + 40) = v22;
  id v23 = v17;
  uint64_t v24 = UUID.uuidString.getter();
  *(void *)(v18 + 96) = &type metadata for String;
  *(void *)(v18 + 104) = v20;
  *(void *)(v18 + 72) = v24;
  *(void *)(v18 + 80) = v25;
  uint64_t v26 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v23, (uint64_t)&_mh_execute_header, v26, (uint64_t)"Set enable collaborator cursors to [%{public}@] for board identifier: %{public}@", 80, 2, v18);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  uint64_t v27 = v36;
  swift_beginAccess();
  char v38 = v37;
  type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.setter();
  swift_endAccess();
  sub_100C67498(v27, 0, 0, 0xF000000000000000, 0);
  swift_release();
  swift_release();
}

uint64_t sub_100C77988(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  uint64_t v39 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v6);
  char v38 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v36 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  uint64_t v15 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  unint64_t v20 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_100CE144C(v34, (uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v35, v11);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (*(unsigned __int8 *)(v12 + 80) + v22 + 73) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a2;
  sub_100CE12D8((uint64_t)v20, v24 + v21, type metadata accessor for CRLBoardIdentifier);
  uint64_t v25 = (_OWORD *)(v24 + v22);
  long long v26 = *(_OWORD *)(a4 + 48);
  v25[2] = *(_OWORD *)(a4 + 32);
  v25[3] = v26;
  *(_OWORD *)((char *)v25 + 57) = *(_OWORD *)(a4 + 57);
  long long v27 = *(_OWORD *)(a4 + 16);
  *uint64_t v25 = *(_OWORD *)a4;
  v25[1] = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v24 + v23, v15, v11);
  aBlock[4] = sub_100CE7128;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528C08;
  uint64_t v28 = _Block_copy(aBlock);
  id v29 = a2;
  sub_100CE720C((void *)a4);
  id v30 = v36;
  static DispatchQoS.unspecified.getter();
  uint64_t v43 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  uint64_t v31 = v38;
  uint64_t v32 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v41);
  return swift_release();
}

uint64_t sub_100C77E24()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C78028(uint64_t a1, long long *a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (void *)((char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v11 = v12;
  uint64_t v13 = *(void (**)(void, __n128))(v7 + 104);
  unsigned int v44 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v45 = (void (*)(void *, void, uint64_t))v13;
  v13(v11, v9);
  id v14 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t v46 = *(void (**)(void *, uint64_t))(v7 + 8);
  v46(v11, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  uint64_t v43 = v6;
  v42[1] = a1;
  *(void *)&long long v49 = 0;
  *((void *)&v49 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD000000000000049, 0x800000010127E050);
  if (v3) {
    return swift_release();
  }
  uint64_t v17 = v16;
  swift_release();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v18 = a2[3];
  long long v51 = a2[2];
  v52[0] = v18;
  *(_OWORD *)((char *)v52 + 9) = *(long long *)((char *)a2 + 57);
  long long v19 = a2[1];
  long long v49 = *a2;
  long long v50 = v19;
  sub_100CE6174();
  uint64_t v20 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v22 = v21;
  swift_release();
  sub_10079DCE4(v20, v22, 1);
  sub_100510084(v20, v22);
  uint64_t v23 = sub_100753FC0();
  uint64_t v25 = v43;
  uint64_t v27 = v23;
  unint64_t v28 = v24;
  sub_10079DCE4(v23, v24, 2);
  sub_100510084(v27, v28);
  id v29 = *(void **)(*(void *)(v17 + 16) + 32);
  *uint64_t v11 = v29;
  v45(v11, v44, v25);
  id v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)();
  v46(v11, v25);
  if ((v29 & 1) == 0) {
    goto LABEL_15;
  }
  v42[0] = v17 + 24;
  swift_beginAccess();
  int v31 = sqlite3_step(*(sqlite3_stmt **)(v17 + 24));
  if (v31 == 101)
  {
    uint64_t v32 = *(void **)(*(void *)(v17 + 16) + 32);
    *uint64_t v11 = v32;
    v45(v11, v44, v25);
    id v33 = v32;
    LOBYTE(v32) = _dispatchPreconditionTest(_:)();
    v46(v11, v25);
    if (v32)
    {
      uint64_t v34 = (void *)v42[0];
      if (*(void *)v42[0])
      {
        sqlite3_finalize(*(sqlite3_stmt **)v42[0]);
        *uint64_t v34 = 0;
      }
      return swift_release();
    }
    goto LABEL_16;
  }
  int v35 = v31;
  unint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  unint64_t v47 = 0xD000000000000026;
  unint64_t v48 = 0x800000010127E0A0;
  v36._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  unint64_t v37 = v47;
  unint64_t v38 = v48;
  sub_10079FF00();
  swift_allocError();
  *(_DWORD *)uint64_t v39 = v35;
  *(void *)(v39 + 8) = v37;
  *(void *)(v39 + 16) = v38;
  swift_willThrow();
  uint64_t v40 = *(void **)(*(void *)(v17 + 16) + 32);
  *uint64_t v11 = v40;
  v45(v11, v44, v25);
  id v41 = v40;
  LOBYTE(v40) = _dispatchPreconditionTest(_:)();
  v46(v11, v25);
  if ((v40 & 1) == 0) {
    goto LABEL_17;
  }
  if (*(void *)v42[0])
  {
    sqlite3_finalize(*(sqlite3_stmt **)v42[0]);
    *(void *)(v17 + 24) = 0;
  }
  return swift_release();
}

uint64_t sub_100C785CC(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v29 = a1;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v4);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  uint64_t v15 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_100CE144C(v28, (uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v29, v11);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v18 + *(unsigned __int8 *)(v12 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a2;
  sub_100CE12D8((uint64_t)v20, v23 + v21, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v23 + v22, v15, v11);
  aBlock[4] = sub_100CB3168;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528370;
  unint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = a2;
  static DispatchQoS.unspecified.getter();
  int v35 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  uint64_t v26 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  return swift_release();
}

uint64_t sub_100C78A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100C68104(a2);
  if (v3)
  {
    if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion + 8) & 1) == 0)
    {
      if (qword_10166FB70 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v4 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v6 = v4;
      uint64_t v7 = UUID.uuidString.getter();
      uint64_t v9 = v8;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v7;
      *(void *)(inited + 40) = v9;
      uint64_t v10 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v6, (uint64_t)&_mh_execute_header, v10, (uint64_t)"Actually setting BoardDidNotCrash for board %{public}@", 54, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      sub_100C78C40(a2, 0, 1);
      sub_100C445A0(a2, (uint64_t)&unk_1015283A8, (uint64_t)sub_100CB31B8, (uint64_t)&unk_1015283C0);
    }
    swift_release();
  }
  sub_1005057FC(&qword_10167F0F0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C78C40(uint64_t a1, sqlite3_int64 a2, int a3)
{
  int v42 = a3;
  sqlite3_int64 v40 = a2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v11 = v12;
  uint64_t v13 = *(void (**)(void, __n128))(v7 + 104);
  unsigned int v43 = enum case for DispatchPredicate.onQueue(_:);
  unsigned int v44 = (void (*)(void *, void, uint64_t))v13;
  v13(v11, v9);
  id v14 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t v45 = *(void (**)(void *, uint64_t))(v7 + 8);
  v45(v11, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v41 = a1;
  uint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD000000000000053, 0x800000010127B7A0);
  uint64_t result = swift_release();
  if (v4) {
    return result;
  }
  if ((v42 & 1) == 0)
  {
    sub_10079D8A8(v40, 1);
    goto LABEL_7;
  }
  uint64_t v18 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v11 = v18;
  v44(v11, v43, v6);
  id v19 = v18;
  char v20 = _dispatchPreconditionTest(_:)();
  v45(v11, v6);
  if ((v20 & 1) == 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  swift_beginAccess();
  sqlite3_bind_null(*(sqlite3_stmt **)(v16 + 24), 1);
LABEL_7:
  uint64_t v21 = sub_100753FC0();
  uint64_t v23 = v21;
  unint64_t v24 = v22;
  sub_10079DCE4(v21, v22, 2);
  sub_100510084(v23, v24);
  uint64_t v25 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v11 = v25;
  v44(v11, v43, v6);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  v45(v11, v6);
  if ((v25 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v27 = (sqlite3_stmt **)(v16 + 24);
  swift_beginAccess();
  int v28 = sqlite3_step(*(sqlite3_stmt **)(v16 + 24));
  if (v28 != 101) {
    goto LABEL_15;
  }
  uint64_t v29 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v11 = v29;
  v44(v11, v43, v6);
  id v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)();
  int v28 = ((uint64_t (*)(void *, uint64_t))v45)(v11, v6);
  if ((v29 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    uint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
    HIDWORD(v39) = v28;
    _StringGuts.grow(_:)(52);
    v31._object = (void *)0x800000010127B800;
    v31._countAndFlagsBits = 0xD000000000000025;
    String.append(_:)(v31);
    sqlite3_int64 v48 = v40;
    char v49 = v42 & 1;
    sub_1005057FC(&qword_101676CF0);
    _print_unlocked<A, B>(_:_:)();
    v32._countAndFlagsBits = 0x616F6220726F6620;
    v32._object = (void *)0xEB00000000206472;
    String.append(_:)(v32);
    v33._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    uint64_t v34 = v46;
    unint64_t v35 = v47;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v36 = HIDWORD(v39);
    *(void *)(v36 + 8) = v34;
    *(void *)(v36 + 16) = v35;
    swift_willThrow();
    unint64_t v37 = *(void **)(*(void *)(v16 + 16) + 32);
    *uint64_t v11 = v37;
    v44(v11, v43, v6);
    id v38 = v37;
    LOBYTE(v37) = _dispatchPreconditionTest(_:)();
    v45(v11, v6);
    if (v37) {
      goto LABEL_16;
    }
LABEL_21:
    __break(1u);
  }
LABEL_16:
  if (*v27)
  {
    sqlite3_finalize(*v27);
    *uint64_t v27 = 0;
  }
  return swift_release();
}

uint64_t sub_100C791B4(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C8D0CC(a1, a2, a3, (uint64_t)&unk_101528BA0, (uint64_t)sub_100CE6F48, (uint64_t)&unk_101528BB8);
}

uint64_t sub_100C791DC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v12[7] = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8, v5);
  v12[6] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v12[5] = (char *)v12 - v9;
  swift_bridgeObjectRetain();
  uint64_t v10 = a1;
  sub_100546CAC(v10, a2, (uint64_t)v10);
  swift_bridgeObjectRelease();

  sub_1005057FC(&qword_10167F0F0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C796AC(uint64_t a1, uint64_t a2)
{
  return sub_100C7A9A0(a1, a2, (void (*)(uint64_t, char *))sub_100C796DC) & 1;
}

void sub_100C796DC(char a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7, v10);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v12, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v15 = sub_100C68104(a2);
  if (v3) {
    return;
  }
  if (!v15 || (uint64_t v16 = sub_100CD94C8(v15)) == 0)
  {
    if (qword_10166FB70 == -1)
    {
LABEL_13:
      swift_beginAccess();
      int v28 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v30 = v28;
      uint64_t v31 = UUID.uuidString.getter();
      uint64_t v33 = v32;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v31;
      *(void *)(inited + 40) = v33;
      uint64_t v34 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v30, (uint64_t)&_mh_execute_header, v34, (uint64_t)"Attempted to set the canvas dot grid enabled state on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 148, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_13;
  }
  uint64_t v36 = v16;
  if (qword_10166FB70 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v17 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_10117D8C0;
  unint64_t v19 = sub_100528BE4();
  unint64_t v20 = v19;
  int v37 = a1 & 1;
  uint64_t v21 = 1702195828;
  if ((a1 & 1) == 0) {
    uint64_t v21 = 0x65736C6166;
  }
  unint64_t v22 = 0xE500000000000000;
  if (a1) {
    unint64_t v22 = 0xE400000000000000;
  }
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = v19;
  *(void *)(v18 + 32) = v21;
  *(void *)(v18 + 40) = v22;
  id v23 = v17;
  uint64_t v24 = UUID.uuidString.getter();
  *(void *)(v18 + 96) = &type metadata for String;
  *(void *)(v18 + 104) = v20;
  *(void *)(v18 + 72) = v24;
  *(void *)(v18 + 80) = v25;
  uint64_t v26 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v23, (uint64_t)&_mh_execute_header, v26, (uint64_t)"Set canvas dot grid visible to [%{public}@] for board identifier: %{public}@", 76, 2, v18);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  uint64_t v27 = v36;
  swift_beginAccess();
  char v38 = v37;
  type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.setter();
  swift_endAccess();
  sub_100C67498(v27, 0, 0, 0xF000000000000000, 0);
  swift_release();
  swift_release();
}

uint64_t sub_100C79B10(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C8D0CC(a1, a2, a3, (uint64_t)&unk_101528B50, (uint64_t)sub_100CE6EB0, (uint64_t)&unk_101528B68);
}

uint64_t sub_100C79B38(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v12[7] = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8, v5);
  v12[6] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v12[5] = (char *)v12 - v9;
  swift_bridgeObjectRetain();
  __n128 v10 = a1;
  sub_100546CD8(v10, a2, (uint64_t)v10);
  swift_bridgeObjectRelease();

  sub_1005057FC(&qword_10167F0F0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C7A008(uint64_t a1, uint64_t a2)
{
  return sub_100C7A9A0(a1, a2, (void (*)(uint64_t, char *))sub_100C7A038) & 1;
}

void sub_100C7A038(char a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7, v10);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v12, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v15 = sub_100C68104(a2);
  if (v3) {
    return;
  }
  if (!v15 || (uint64_t v16 = sub_100CD94C8(v15)) == 0)
  {
    if (qword_10166FB70 == -1)
    {
LABEL_15:
      swift_beginAccess();
      int v28 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v30 = v28;
      uint64_t v31 = UUID.uuidString.getter();
      uint64_t v33 = v32;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v31;
      *(void *)(inited + 40) = v33;
      uint64_t v34 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v30, (uint64_t)&_mh_execute_header, v34, (uint64_t)"Attempted to set the connector mode enabled state on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 147, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return;
    }
LABEL_18:
    swift_once();
    goto LABEL_15;
  }
  uint64_t v36 = v16;
  if (qword_10166FB70 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v17 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v18 = swift_initStackObject();
  unint64_t v19 = (void *)v18;
  *(_OWORD *)(v18 + 16) = xmmword_10117D8C0;
  int v37 = a1 & 1;
  if (a1) {
    uint64_t v20 = 1702195828;
  }
  else {
    uint64_t v20 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v21 = 0xE400000000000000;
  }
  else {
    unint64_t v21 = 0xE500000000000000;
  }
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t v22 = sub_100528BE4();
  v19[8] = v22;
  v19[4] = v20;
  v19[5] = v21;
  id v23 = v17;
  uint64_t v24 = UUID.uuidString.getter();
  v19[12] = &type metadata for String;
  v19[13] = v22;
  v19[9] = v24;
  v19[10] = v25;
  uint64_t v26 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v23, (uint64_t)&_mh_execute_header, v26, (uint64_t)"Set connector mode enabled to [%{public}@] for board identifier: %{public}@", 75, 2, (uint64_t)v19);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  uint64_t v27 = v36;
  swift_beginAccess();
  char v38 = v37;
  type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.setter();
  swift_endAccess();
  sub_100C67498(v27, 0, 0, 0xF000000000000000, 0);
  swift_release();
  swift_release();
}

uint64_t sub_100C7A478(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C8D0CC(a1, a2, a3, (uint64_t)&unk_101528C40, (uint64_t)sub_100CE7288, (uint64_t)&unk_101528C58);
}

uint64_t sub_100C7A4A0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v12[7] = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8, v5);
  v12[6] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v12[5] = (char *)v12 - v9;
  swift_bridgeObjectRetain();
  __n128 v10 = a1;
  sub_100546D04(v10, a2, (uint64_t)v10);
  swift_bridgeObjectRelease();

  sub_1005057FC(&qword_10167F0F0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C7A970(uint64_t a1, uint64_t a2)
{
  return sub_100C7A9A0(a1, a2, (void (*)(uint64_t, char *))sub_100C7AC90) & 1;
}

uint64_t sub_100C7A9A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *))
{
  id v30 = a3;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  uint64_t v29 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v27 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (v16)
  {
    unint64_t v20 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v21 = v20 | (v19 << 6);
LABEL_5:
    sub_100CE144C(*(void *)(v17 + 48) + *(void *)(v29 + 72) * v21, (uint64_t)v12, type metadata accessor for CRLBoardIdentifierAndValue);
    uint64_t v22 = v12[*(int *)(v9 + 20)];
    sub_100CE144C((uint64_t)v12, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLBoardIdentifierAndValue);
    v30(v22, v8);
    uint64_t result = sub_100CE14B4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    if (v3) {
      goto LABEL_22;
    }
  }
  if (__OFADD__(v19++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v19 >= v28) {
    goto LABEL_22;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v19);
  if (v24)
  {
LABEL_17:
    unint64_t v16 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v19 << 6);
    goto LABEL_5;
  }
  int64_t v25 = v19 + 1;
  if (v19 + 1 >= v28) {
    goto LABEL_22;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v19 + 2;
  if (v19 + 2 >= v28) {
    goto LABEL_22;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v19 + 3;
  if (v19 + 3 >= v28)
  {
LABEL_22:
    swift_release();
    return 1;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
LABEL_16:
    int64_t v19 = v25;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v19 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v19 >= v28) {
      goto LABEL_22;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v19);
    ++v25;
    if (v24) {
      goto LABEL_17;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

void sub_100C7AC90(char a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7, v10);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v12, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v15 = sub_100C68104(a2);
  if (v3) {
    return;
  }
  if (!v15 || (uint64_t v16 = sub_100CD94C8(v15)) == 0)
  {
    if (qword_10166FB70 == -1)
    {
LABEL_15:
      swift_beginAccess();
      int64_t v28 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v30 = v28;
      uint64_t v31 = UUID.uuidString.getter();
      uint64_t v33 = v32;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v31;
      *(void *)(inited + 40) = v33;
      uint64_t v34 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v30, (uint64_t)&_mh_execute_header, v34, (uint64_t)"Attempted to set the scenes navigator open state on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 146, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return;
    }
LABEL_18:
    swift_once();
    goto LABEL_15;
  }
  uint64_t v36 = v16;
  if (qword_10166FB70 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v17 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v18 = swift_initStackObject();
  int64_t v19 = (void *)v18;
  *(_OWORD *)(v18 + 16) = xmmword_10117D8C0;
  int v37 = a1 & 1;
  if (a1) {
    uint64_t v20 = 1702195828;
  }
  else {
    uint64_t v20 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v21 = 0xE400000000000000;
  }
  else {
    unint64_t v21 = 0xE500000000000000;
  }
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t v22 = sub_100528BE4();
  v19[8] = v22;
  v19[4] = v20;
  v19[5] = v21;
  id v23 = v17;
  uint64_t v24 = UUID.uuidString.getter();
  v19[12] = &type metadata for String;
  v19[13] = v22;
  v19[9] = v24;
  v19[10] = v25;
  uint64_t v26 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v23, (uint64_t)&_mh_execute_header, v26, (uint64_t)"Set scenes navigator open to [%{public}@] for board identifier: %{public}@", 74, 2, (uint64_t)v19);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  uint64_t v27 = v36;
  swift_beginAccess();
  char v38 = v37;
  type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  sub_1005057FC((uint64_t *)&unk_101689310);
  CRRegister.wrappedValue.setter();
  swift_endAccess();
  sub_100C67498(v27, 0, 0, 0xF000000000000000, 0);
  swift_release();
  swift_release();
}

uint64_t sub_100C7B0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  __chkstk_darwin(v11, v12);
  id v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15 - 8, v18);
  int64_t v19 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = *(void *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  sub_100CE144C(a1, (uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v21 = (v17 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v3;
  sub_100CE12D8((uint64_t)v19, v22 + v20, type metadata accessor for CRLBoardIdentifier);
  id v23 = (void *)(v22 + v21);
  void *v23 = a2;
  v23[1] = a3;
  aBlock[4] = sub_100CE5BE8;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528780;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v29);
  return swift_release();
}

void sub_100C7B478(uint64_t a1, uint64_t a2, void (*a3)(void *, void))
{
  uint64_t v4 = (void *)sub_100C7B664();
  id v5 = v4;
  a3(v4, 0);
}

uint64_t sub_100C7B664()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (id *)((char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v6 = v7;
  uint64_t v8 = *(void (**)(void))(v3 + 104);
  unsigned int v48 = enum case for DispatchPredicate.onQueue(_:);
  char v49 = (void (*)(void *, void, uint64_t))v8;
  v8(v6);
  id v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  __n128 v10 = *(void (**)(void *, uint64_t))(v3 + 8);
  v10(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v47 = v10;
  uint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v11 = swift_retain();
  uint64_t v12 = sub_10079FC40(v11, 0xD00000000000003CLL, 0x800000010127C480);
  if (v1)
  {
    swift_release();
    if (qword_10166FB70 == -1)
    {
LABEL_5:
      swift_beginAccess();
      uint64_t v16 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v18 = v16;
      uint64_t v19 = Error.localizedDescription.getter();
      uint64_t v21 = v20;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v19;
      *(void *)(inited + 40) = v21;
      uint64_t v22 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v18, (uint64_t)&_mh_execute_header, v22, (uint64_t)"Failed to fetch a ckShareData from board record with error %@", 61, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      swift_willThrow();
      return v19;
    }
LABEL_25:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v13 = v12;
  swift_release();
  uint64_t v14 = sub_100753FC0();
  uint64_t v24 = v14;
  unint64_t v25 = v15;
  sub_10079DCE4(v14, v15, 1);
  sub_100510084(v24, v25);
  uint64_t v26 = *(void **)(*(void *)(v13 + 16) + 32);
  *uint64_t v6 = v26;
  v49(v6, v48, v2);
  id v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)();
  uint64_t v28 = v47;
  v47(v6, v2);
  if ((v26 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t v29 = (void *)swift_initStackObject();
  v29[4] = 0;
  v29[5] = 1;
  v29[2] = v13;
  v29[3] = 0;
  swift_retain();
  uint64_t v30 = sub_10079ECE0();
  if (v30)
  {
    uint64_t v46 = v30;
    uint64_t v31 = sub_10079BD64(0, v30);
    if (v32 >> 60 == 15)
    {
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v45 = v32;
      uint64_t v36 = (uint64_t)v31;
      unsigned int v44 = v31;
      id v43 = (id)sub_10050BF48(0, &qword_101693260);
      sub_10050BF48(0, &qword_101672C00);
      sub_100510D4C(v36, v45);
      int v37 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      uint64_t v19 = (uint64_t)v37;
      if (v37)
      {
        id v43 = v37;
        id v38 = [v43 containerID];

        if (!v38)
        {
          sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165, (uint64_t)"The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165);
          [self logFullBacktrace];
        }
        sub_100514260((uint64_t)v44, v45);
      }
      else
      {
        sub_100514260((uint64_t)v44, v45);
      }
      uint64_t v28 = v47;
      sub_100514260((uint64_t)v44, v45);
    }
    swift_release();
    swift_release();
    uint64_t v39 = *(void **)(*(void *)(v13 + 16) + 32);
    *uint64_t v6 = v39;
    v49(v6, v48, v2);
    id v40 = v39;
    char v41 = _dispatchPreconditionTest(_:)();
    v28(v6, v2);
    if (v41)
    {
      uint64_t v35 = (void *)(v13 + 24);
      swift_beginAccess();
      goto LABEL_21;
    }
    goto LABEL_27;
  }
  swift_release();
  swift_setDeallocating();
  sub_1007A0344(v29[3], v29[4], v29[5]);
  uint64_t v33 = *(void **)(*(void *)(v13 + 16) + 32);
  *uint64_t v6 = v33;
  v49(v6, v48, v2);
  id v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)();
  v28(v6, v2);
  if ((v33 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v35 = (void *)(v13 + 24);
  swift_beginAccess();
  uint64_t v19 = 0;
LABEL_21:
  int v42 = *(sqlite3_stmt **)(v13 + 24);
  if (v42)
  {
    sqlite3_finalize(v42);
    *uint64_t v35 = 0;
  }
  swift_release();
  return v19;
}

uint64_t sub_100C7BEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100C9B314(a1, a2, a3, &qword_101699678, (uint64_t)&unk_101528740, (uint64_t)sub_100CE57AC, (void (*)(uint64_t, uint64_t, uint64_t))sub_100C7B0D0);
}

uint64_t sub_100C7BF2C(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  int v34 = a3;
  uint64_t v33 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v39 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15 - 8, v18);
  uint64_t v19 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_100CE144C(a1, (uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v21 = v20 + v17;
  unint64_t v22 = ((v21 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  unint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + v23;
  *(void *)(v23 + 16) = v5;
  sub_100CE12D8((uint64_t)v19, v23 + v20, type metadata accessor for CRLBoardIdentifier);
  *(unsigned char *)(v23 + v21) = v34;
  unint64_t v25 = v33;
  *(void *)(v24 + 8) = v33;
  uint64_t v26 = (void *)(v23 + v22);
  uint64_t v27 = v36;
  *uint64_t v26 = v35;
  v26[1] = v27;
  aBlock[4] = sub_100CE5950;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_1015286B8;
  uint64_t v28 = _Block_copy(aBlock);
  id v29 = v25;
  swift_retain();
  uint64_t v30 = v5;
  static DispatchQoS.unspecified.getter();
  char v41 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
  return swift_release();
}

uint64_t sub_100C7C2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void))
{
  return a5(a4, 0);
}

uint64_t sub_100C7C53C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8 = sub_100C7B664();
  if (!v4)
  {
    uint64_t v9 = (void *)v8;
    char v10 = 0;
    if ((a3 & 1) != 0 && a4)
    {
      if (v8)
      {
        sub_10050BF48(0, &qword_101672C00);
        id v11 = a4;
        id v12 = v9;
        char v13 = static NSObject.== infix(_:_:)();

        char v10 = v13 ^ 1;
      }
      else
      {
        char v10 = 1;
      }
    }
    sub_100C7C61C(a2, a4, v10 & 1);
  }
  return 1;
}

uint64_t sub_100C7C61C(uint64_t a1, void *a2, char a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  char v13 = (uint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if (v14)
  {
    if (a2)
    {
      id v17 = a2;
      id v18 = [v17 containerID];

      if (!v18)
      {
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165, (uint64_t)"The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165);
        [self logFullBacktrace];
      }
      uint64_t v19 = sub_100D2B010();
      unint64_t v21 = v20;
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v21 = 0xF000000000000000;
    }
    sub_100C61CA8(a1, v19, v21, a3 & 1);
    if (!v4)
    {
      unint64_t v22 = (uint64_t *)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions);
      swift_beginAccess();
      uint64_t v23 = *v22;
      if (*(void *)(v23 + 16))
      {
        unint64_t v24 = sub_1009563EC(a1);
        if (v25) {
          *(unsigned char *)(*(void *)(*(void *)(v23 + 56) + 8 * v24) + 17) = 0;
        }
      }
      swift_endAccess();
    }
    return sub_100514260(v19, v21);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100C7C8D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v9 = sub_1005057FC(&qword_101699678);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_100C7BF2C(a3, a4, a5, (uint64_t)sub_100CE57AC, v14);
  return swift_release();
}

uint64_t sub_100C7CA34(void *a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_1005057FC(&qword_101699678);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v2 = a1;
    sub_1005057FC(&qword_101699678);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100C7CAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CRLBoardDataStoreChangeSet(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15 - 8, v18);
  uint64_t v19 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = *(void *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_100CE144C(a1, (uint64_t)v19, type metadata accessor for CRLBoardDataStoreChangeSet);
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v21 = (v17 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v3;
  sub_100CE12D8((uint64_t)v19, v22 + v20, type metadata accessor for CRLBoardDataStoreChangeSet);
  uint64_t v23 = (void *)(v22 + v21);
  void *v23 = a2;
  v23[1] = a3;
  aBlock[4] = sub_100CE63EC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528960;
  unint64_t v24 = _Block_copy(aBlock);
  char v25 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v29);
  return swift_release();
}

uint64_t sub_100C7CE4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0);
}

uint64_t sub_100C7D074(unsigned char *a1)
{
  uint64_t v3 = v2;
  char v153 = a1;
  uint64_t v145 = sub_1005057FC(&qword_101699738);
  __chkstk_darwin(v145, v4);
  uint64_t v146 = &v138[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v168 = type metadata accessor for UUID();
  uint64_t v164 = *(void *)(v168 - 8);
  uint64_t v7 = __chkstk_darwin(v168, v6);
  unint64_t v152 = &v138[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v158 = &v138[-v11];
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v159 = &v138[-v14];
  uint64_t v16 = __chkstk_darwin(v13, v15);
  *(void *)&long long v167 = &v138[-v17];
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v163 = (uint64_t)&v138[-v20];
  __chkstk_darwin(v19, v21);
  uint64_t v23 = &v138[-v22];
  uint64_t v24 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v142 = *(void *)(v24 - 8);
  uint64_t v143 = v24;
  __chkstk_darwin(v24, v25);
  uint64_t v27 = &v138[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v28 = type metadata accessor for DispatchPredicate();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  uint64_t v32 = &v138[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v166 = v1;
  uint64_t v33 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *(void *)uint64_t v32 = v33;
  (*(void (**)(unsigned char *, void, unint64_t))(v29 + 104))(v32, enum case for DispatchPredicate.onQueue(_:), v28);
  id v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)();
  uint64_t v36 = *(void (**)(unsigned char *, unint64_t))(v29 + 8);
  uint64_t v35 = (unsigned char *)(v29 + 8);
  v36(v32, v28);
  if ((v33 & 1) == 0) {
    goto LABEL_75;
  }
  uint64_t v37 = (int *)type metadata accessor for CRLBoardDataStoreChangeSet(0);
  uint64_t v38 = v153;
  sub_100CE144C((uint64_t)&v153[v37[5]], (uint64_t)v27, type metadata accessor for CRLBoardIdentifier);
  uint64_t v39 = &v38[v37[6]];
  uint64_t v40 = (unsigned char *)v164;
  char v41 = *(void (**)(unsigned char *, unsigned char *))(v164 + 16);
  uint64_t v35 = (unsigned char *)v168;
  uint64_t v157 = v164 + 16;
  *(void *)&long long v156 = v41;
  v41(v23, v39);
  uint64_t v151 = v37;
  uint64_t v42 = *(void *)&v38[v37[7]];
  uint64_t v32 = v40;
  uint64_t v43 = (uint64_t)v27;
  if (v42)
  {
    unsigned int v44 = (void *)swift_retain();
    sub_100C621C4(v44, 0, 0, 0xF000000000000000, 1, 0);
    uint64_t v27 = (void *)v163;
    if (v2)
    {
      swift_release();
      (*(void (**)(unsigned char *, unsigned char *))(v164 + 8))(v23, v35);
      return sub_100CE14B4(v43, type metadata accessor for CRLBoardIdentifier);
    }
    unsigned int v47 = v45;
    swift_release();
    int v139 = (v47 >> 8) & 1;
    swift_release();
    uint64_t v32 = (unsigned char *)v164;
  }
  else
  {
    int v139 = 0;
    uint64_t v27 = (void *)v163;
  }
  unint64_t v173 = *(void *)&v153[v151[8]];
  if (*(void *)&v153[v151[13]])
  {
    swift_bridgeObjectRetain();
    unint64_t v48 = swift_bridgeObjectRetain();
    sub_1006E33E8(v48);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  int v155 = v23;
  unint64_t v165 = v43;
  unint64_t v28 = *(void *)&v153[v151[14]];
  if (v28 >> 62) {
    goto LABEL_76;
  }
  uint64_t v49 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v50 = v35;
    uint64_t v161 = v3;
    if (v49)
    {
      v171 = _swiftEmptyArrayStorage;
      sub_1006BB544(0, v49 & ~(v49 >> 63), 0);
      if (v49 < 0) {
        goto LABEL_124;
      }
      uint64_t v163 = v49;
      uint64_t v51 = 0;
      uint64_t v52 = v171;
      unint64_t v162 = v28 & 0xC000000000000001;
      uint64_t v35 = v32 + 32;
      unint64_t v53 = v28;
      do
      {
        if (v162)
        {
          uint64_t v54 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v54 = *(void *)(v28 + 8 * v51 + 32);
          swift_retain();
        }
        (*(void (**)(void))(*(void *)v54 + 256))();
        swift_release();
        v171 = v52;
        long long v55 = v27;
        unint64_t v57 = *((void *)v52 + 2);
        unint64_t v56 = *((void *)v52 + 3);
        if (v57 >= v56 >> 1)
        {
          sub_1006BB544(v56 > 1, v57 + 1, 1);
          uint64_t v52 = v171;
        }
        ++v51;
        *((void *)v52 + 2) = v57 + 1;
        uint64_t v32 = (unsigned char *)v164;
        (*(void (**)(unint64_t, void *, uint64_t))(v164 + 32))((unint64_t)v52+ ((v32[80] + 32) & ~(unint64_t)v32[80])+ *(void *)(v164 + 72) * v57, v55, v168);
        uint64_t v27 = v55;
        unint64_t v28 = v53;
      }
      while (v163 != v51);
      swift_bridgeObjectRelease();
      uint64_t v50 = (unsigned char *)v168;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v52 = _swiftEmptyArrayStorage;
    }
    unint64_t v162 = sub_100CDCB64((uint64_t)v52);
    swift_bridgeObjectRelease();
    unint64_t v58 = swift_bridgeObjectRetain();
    sub_1006E33E8(v58);
    int v172 = &_swiftEmptySetSingleton;
    unint64_t v59 = sub_100C34A0C(v173, (void (*)(char **__return_ptr, uint64_t *))sub_10073C5C0, 0, (void (*)(char **))sub_100C7ECDC, 0, (void (*)(uint64_t *))sub_100C7ECE0, 0);
    swift_bridgeObjectRelease();
    if (!(v59 >> 62))
    {
      uint64_t v49 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v3 = v161;
      if (!v49) {
        goto LABEL_78;
      }
      goto LABEL_25;
    }
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v3 = v161;
    if (!v49)
    {
LABEL_78:
      BOOL v160 = 0;
LABEL_79:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v87 = swift_bridgeObjectRetain();
      uint64_t v49 = sub_100C34A0C(v87, (void (*)(char **__return_ptr, uint64_t *))sub_100CEA9C0, 0, (void (*)(char **))sub_100C7ECDC, 0, (void (*)(uint64_t *))sub_100C7ECE0, 0);
      swift_bridgeObjectRelease();
      if ((unint64_t)v49 >> 62) {
        goto LABEL_125;
      }
      uint64_t v88 = *(unsigned char **)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t v162 = v49;
      if (!v88)
      {
LABEL_126:
        swift_bridgeObjectRelease();
        unint64_t v90 = *(void *)&v153[v151[10]];
        if (v90 >> 62) {
          goto LABEL_149;
        }
        uint64_t v101 = *(unsigned char **)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        for (; v101; uint64_t v101 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter())
        {
          uint64_t v163 = v151[11];
          *(void *)&long long v167 = v90 & 0xC000000000000001;
          uint64_t v161 = (void (**)(void, void))(v32 + 8);
          uint64_t v102 = 4;
          long long v156 = xmmword_10117D8C0;
          uint64_t v159 = v101;
          unint64_t v162 = v90;
          while (1)
          {
            if ((void)v167)
            {
              uint64_t v103 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v103 = *(void **)(v90 + 8 * v102);
              swift_retain();
            }
            uint64_t v32 = v153;
            uint64_t v104 = (unsigned char *)(v102 - 3);
            if (__OFADD__(v102 - 4, 1)) {
              break;
            }
            uint64_t v105 = v152;
            uint64_t v106 = (*(uint64_t (**)(void))(*v103 + 256))();
            uint64_t v107 = *(void *)&v32[v163];
            __chkstk_darwin(v106, v108);
            *(void *)&v138[-16] = v105;
            swift_bridgeObjectRetain();
            BOOL v109 = sub_10102212C((uint64_t (*)(char *))sub_1008538B8, (uint64_t)&v138[-32], v107);
            swift_bridgeObjectRelease();
            if (v109)
            {
              uint64_t v110 = v146;
              sqlite3_int64 v111 = sub_100C55914((uint64_t)v146, (uint64_t)v105, v165);
              uint64_t v50 = (unsigned char *)v168;
              if (v3) {
                goto LABEL_144;
              }
              uint64_t v113 = *(int *)(v145 + 64);
              *(void *)&v110[*(int *)(v145 + 48)] = v111;
              v110[v113] = v112 & 1;
              if ((v112 & 1) == 0)
              {
                if (qword_10166FB70 != -1) {
                  swift_once();
                }
                swift_beginAccess();
                uint64_t v114 = (void *)static OS_os_log.boardStore;
                sub_1005057FC((uint64_t *)&unk_101672B40);
                uint64_t inited = swift_initStackObject();
                *(_OWORD *)(inited + 16) = v156;
                uint64_t v158 = v114;
                uint64_t v116 = UUID.uuidString.getter();
                uint64_t v157 = v117;
                *(void *)(inited + 56) = &type metadata for String;
                unint64_t v118 = sub_100528BE4();
                *(void *)(inited + 64) = v118;
                *(void *)(inited + 32) = v116;
                *(void *)(inited + 40) = v157;
                uint64_t v119 = v165;
                uint64_t v120 = UUID.uuidString.getter();
                *(void *)(inited + 96) = &type metadata for String;
                *(void *)(inited + 104) = v118;
                *(void *)(inited + 72) = v120;
                *(void *)(inited + 80) = v121;
                uint64_t v122 = static os_log_type_t.default.getter();
                uint64_t v123 = v158;
                sub_100BAC898((uint64_t)v158, (uint64_t)&_mh_execute_header, v122, (uint64_t)"Create record for item %{public}@ we want to force writing a delete for. For Board: %{public}@", 94, 2, inited);
                swift_setDeallocating();
                sub_1005057FC(&qword_101672B50);
                swift_arrayDestroy();

                sub_100C56118(v103, v119, 0, 0, 0xF000000000000000, 1, 2);
                swift_release();
                uint64_t v50 = (unsigned char *)v168;
                uint64_t v110 = v146;
              }
              sub_100522F00((uint64_t)v110, &qword_101699738);
            }
            else
            {
              uint64_t v50 = (unsigned char *)v168;
            }
            uint64_t v32 = (unsigned char *)v164;
            uint64_t v105 = v152;
            sub_100C6026C((uint64_t)v152, v165);
            if (v3)
            {
LABEL_144:
              swift_release();
              unint64_t v124 = *v161;
              (*v161)(v105, v50);
              swift_bridgeObjectRelease();
              v124(v155, v50);
              goto LABEL_145;
            }
            (*v161)(v105, v50);
            swift_release();
            ++v102;
            unint64_t v90 = v162;
            if (v104 == v159) {
              goto LABEL_150;
            }
          }
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          swift_bridgeObjectRetain();
        }
LABEL_150:
        swift_bridgeObjectRelease();
        uint64_t v126 = *(void *)&v153[v151[12]];
        if (*(void *)(v126 + 16) && (unint64_t v127 = v165, sub_100C7ED7C(v126, v165, 0), v3))
        {
          (*((void (**)(unsigned char *, unsigned char *))v32 + 1))(v155, v50);
          uint64_t v125 = v127;
        }
        else
        {
          sub_1005057FC(&qword_10167ADD0);
          unint64_t v128 = (*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
          uint64_t v129 = swift_allocObject();
          long long v167 = xmmword_10117E810;
          *(_OWORD *)(v129 + 16) = xmmword_10117E810;
          uint64_t v130 = v165;
          sub_100CE144C(v165, v129 + v128, type metadata accessor for CRLBoardIdentifier);
          uint64_t v131 = sub_1005087BC(v129);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          sub_1005057FC(&qword_101699740);
          unsigned int v132 = (int *)(sub_1005057FC(&qword_10168CF68) - 8);
          unint64_t v133 = (*(unsigned __int8 *)(*(void *)v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v132 + 80);
          uint64_t v134 = swift_allocObject();
          *(_OWORD *)(v134 + 16) = v167;
          uint64_t v135 = v134 + v133;
          uint64_t v136 = v132[14];
          sub_100CE144C(v130, v135, type metadata accessor for CRLBoardIdentifier);
          *(void *)(v135 + v136) = v172;
          swift_bridgeObjectRetain();
          unint64_t v137 = sub_100A3C910(v134);
          sub_100C44024((uint64_t)v131, v139, v160, v137);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(unsigned char *, uint64_t))(v164 + 8))(v155, v168);
          uint64_t v125 = v130;
        }
        goto LABEL_146;
      }
LABEL_81:
      uint64_t v89 = 0;
      uint64_t v161 = (void (**)(void, void))(v49 & 0xC000000000000001);
      uint64_t v157 = v49 & 0xFFFFFFFFFFFFFF8;
      uint64_t v158 = v88;
      *(void *)&long long v156 = v49 + 32;
      unint64_t v90 = (unint64_t)(v32 + 8);
      while (1)
      {
        if (v161)
        {
          uint64_t v32 = v89;
          uint64_t v91 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((unint64_t)v89 >= *(void *)(v157 + 16)) {
            goto LABEL_148;
          }
          uint64_t v91 = swift_retain();
        }
        BOOL v62 = __OFADD__(v89, 1);
        uint64_t v92 = v89 + 1;
        if (v62) {
          goto LABEL_122;
        }
        uint64_t v163 = (uint64_t)v92;
        *(void *)&long long v167 = v91;
        unint64_t v169 = (unint64_t)_swiftEmptyArrayStorage;
        swift_retain_n();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v93 = v169;
        if (!(v169 >> 62))
        {
          uint64_t v32 = *(unsigned char **)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v32) {
            goto LABEL_92;
          }
          goto LABEL_82;
        }
        swift_bridgeObjectRetain();
        uint64_t v32 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v32) {
          break;
        }
LABEL_82:
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v89 = (unsigned char *)v163;
        uint64_t v32 = (unsigned char *)v164;
        uint64_t v50 = (unsigned char *)v168;
        if ((unsigned char *)v163 == v158) {
          goto LABEL_126;
        }
      }
      while (1)
      {
LABEL_92:
        uint64_t v49 = (unint64_t)v93 >> 62;
        if ((unint64_t)v93 >> 62)
        {
          if (v93 < 0) {
            uint64_t v32 = (unsigned char *)v93;
          }
          else {
            uint64_t v32 = (unsigned char *)(v93 & 0xFFFFFFFFFFFFFF8);
          }
          swift_bridgeObjectRetain();
          uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v100)
          {
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            swift_bridgeObjectRetain();
            uint64_t v88 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            unint64_t v162 = v49;
            if (!v88) {
              goto LABEL_126;
            }
            goto LABEL_81;
          }
          swift_bridgeObjectRetain();
          uint64_t v32 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v32) {
            goto LABEL_120;
          }
        }
        else if (!*(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_118;
        }
        if ((v93 & 0xC000000000000001) != 0)
        {
          uint64_t v94 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          if (!v49) {
            goto LABEL_97;
          }
        }
        else
        {
          if (!*(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_119;
          }
          uint64_t v94 = *(void *)(v93 + 32);
          swift_retain();
          if (!v49)
          {
LABEL_97:
            uint64_t v32 = *(unsigned char **)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (!v32) {
              goto LABEL_121;
            }
            goto LABEL_98;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v32 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v32) {
          goto LABEL_121;
        }
LABEL_98:
        sub_100F4D474(0, 1);
        uint64_t v49 = *(void *)(v94 + *(void *)(*(void *)v94 + 112));
        if (v49)
        {
          uint64_t v95 = *(void (**)(uint64_t))(*(void *)v49 + 256);
          uint64_t v96 = swift_retain();
          uint64_t v50 = v159;
          v95(v96);
          char v97 = static UUID.== infix(_:_:)();
          uint64_t v98 = *(void (**)(unsigned char *, uint64_t))v90;
          (*(void (**)(unsigned char *, uint64_t))v90)(v50, v168);
          sub_100C56118((void *)v49, v165, 0, 0, 0xF000000000000000, v97 & 1, 2);
          if (v3)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            v98(v155, v168);
            goto LABEL_145;
          }
          swift_release();
          swift_release();
        }
        swift_beginAccess();
        unint64_t v99 = swift_bridgeObjectRetain();
        sub_1006E3400(v99);
        swift_release();
        uint64_t v93 = v169;
        if (v169 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v32 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v32) {
            goto LABEL_82;
          }
        }
        else
        {
          uint64_t v32 = *(unsigned char **)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v32) {
            goto LABEL_82;
          }
        }
      }
    }
LABEL_25:
    uint64_t v60 = 0;
    BOOL v160 = 0;
    unint64_t v148 = v59 & 0xC000000000000001;
    unint64_t v140 = v59 + 32;
    uint64_t v141 = v59 & 0xFFFFFFFFFFFFFF8;
    uint64_t v163 = (uint64_t)(v32 + 8);
    long long v154 = xmmword_10117E810;
    uint64_t v144 = v49;
    unint64_t v147 = v59;
LABEL_27:
    if (v148)
    {
      uint64_t v32 = v60;
      uint64_t v61 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((unint64_t)v60 >= *(void *)(v141 + 16)) {
        goto LABEL_123;
      }
      uint64_t v61 = swift_retain();
    }
    BOOL v62 = __OFADD__(v60, 1);
    uint64_t v63 = v60 + 1;
    if (!v62) {
      break;
    }
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
  }
  uint64_t v149 = v63;
  uint64_t v150 = v61;
  unint64_t v170 = (unint64_t)_swiftEmptyArrayStorage;
  swift_retain_n();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v64 = v170;
  if (!(v170 >> 62))
  {
    uint64_t v32 = *(unsigned char **)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v32) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v32)
  {
LABEL_26:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v60 = v149;
    uint64_t v32 = (unsigned char *)v164;
    uint64_t v50 = (unsigned char *)v168;
    if (v149 == (unsigned char *)v144) {
      goto LABEL_79;
    }
    goto LABEL_27;
  }
  while (1)
  {
LABEL_36:
    uint64_t v35 = (unsigned char *)((unint64_t)v64 >> 62);
    if ((unint64_t)v64 >> 62)
    {
      if (v64 < 0) {
        uint64_t v32 = (unsigned char *)v64;
      }
      else {
        uint64_t v32 = (unsigned char *)(v64 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain();
      uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v49)
      {
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      swift_bridgeObjectRetain();
      uint64_t v32 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v32) {
        goto LABEL_71;
      }
    }
    else if (!*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_70;
    }
    if ((v64 & 0xC000000000000001) != 0)
    {
      unint64_t v28 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      if (!v35) {
        goto LABEL_41;
      }
    }
    else
    {
      if (!*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_72;
      }
      unint64_t v28 = *(void *)(v64 + 32);
      swift_retain();
      if (!v35)
      {
LABEL_41:
        uint64_t v32 = *(unsigned char **)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v32) {
          goto LABEL_73;
        }
        goto LABEL_42;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v32 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v32) {
      goto LABEL_73;
    }
LABEL_42:
    sub_100F4D474(0, 1);
    uint64_t v27 = *(void **)(v28 + *(void *)(*(void *)v28 + 112));
    if (v27) {
      break;
    }
LABEL_53:
    swift_beginAccess();
    unint64_t v84 = swift_bridgeObjectRetain();
    sub_1006E3400(v84);
    swift_release();
    uint64_t v64 = v170;
    if (v170 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v32) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = *(unsigned char **)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v32) {
        goto LABEL_26;
      }
    }
  }
  unint64_t v65 = *(void (**)(uint64_t))(*v27 + 256);
  uint64_t v66 = swift_retain();
  uint64_t v67 = v167;
  v65(v66);
  if (sub_1006E3E24(v67, v162))
  {
    uint64_t v161 = v3;
    if (qword_10166FB70 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v68 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v69 = swift_initStackObject();
    *(_OWORD *)(v69 + 16) = v154;
    uint64_t v49 = v68;
    uint64_t v70 = UUID.uuidString.getter();
    uint64_t v72 = v71;
    *(void *)(v69 + 56) = &type metadata for String;
    *(void *)(v69 + 64) = sub_100528BE4();
    *(void *)(v69 + 32) = v70;
    uint64_t v35 = (unsigned char *)(v69 + 32);
    *(void *)(v69 + 40) = v72;
    uint64_t v73 = static os_log_type_t.default.getter();
    sub_100BAC898(v49, (uint64_t)&_mh_execute_header, v73, (uint64_t)"Saving a peer server synced added item %{public}@", 49, 2, v69);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    int v74 = 1;
    swift_arrayDestroy();

    uint64_t v3 = v161;
  }
  else
  {
    if (v160)
    {
      BOOL v75 = 1;
    }
    else
    {
      uint64_t v76 = (*(uint64_t (**)(void))(*v27 + 568))();
      uint64_t v77 = (*(uint64_t (**)(void))(*v27 + 576))();
      uint64_t v78 = sub_100C2F40C(v76);
      swift_bridgeObjectRelease();
      uint64_t v79 = sub_100CDCB64((uint64_t)v78);
      swift_bridgeObjectRelease();
      int v80 = sub_100C2F40C(v77);
      swift_bridgeObjectRelease();
      uint64_t v81 = sub_100CDCB64((uint64_t)v80);
      swift_bridgeObjectRelease();
      uint64_t v82 = *(void *)(sub_100ED8C0C(v81, v79) + 16);
      swift_bridgeObjectRelease();
      BOOL v75 = v82 != 0;
    }
    BOOL v160 = v75;
    uint64_t v49 = (uint64_t)v158;
    uint64_t v35 = (unsigned char *)v168;
    ((void (*)(unsigned char *, void, uint64_t))v156)(v158, v167, v168);
    unint64_t v83 = v159;
    sub_100CB4BC8((uint64_t)v159, (char *)v49);
    (*(void (**)(unsigned char *, unsigned char *))v163)(v83, v35);
    int v74 = 0;
  }
  sub_100C56118(v27, v165, v74, 0, 0xF000000000000000, 1, 2);
  if (!v3)
  {
    swift_release();
    swift_release();
    (*(void (**)(void, uint64_t))v163)(v167, v168);
    goto LABEL_53;
  }
  uint64_t v85 = *(void (**)(unsigned char *, uint64_t))v163;
  uint64_t v86 = v168;
  (*(void (**)(void, uint64_t))v163)(v167, v168);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v85(v155, v86);
LABEL_145:
  uint64_t v125 = v165;
LABEL_146:
  sub_100CE14B4(v125, type metadata accessor for CRLBoardIdentifier);
  return swift_bridgeObjectRelease();
}

void sub_100C7E93C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t v9 = *(void (**)(void *, uint64_t))(v2 + 8);
  uint64_t v8 = v2 + 8;
  v9(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(unsigned char *)(*(void *)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database) + 24) == 1)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_performIncrementalVacuumIfNeeded()", 35, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 5504, (uint64_t)"Vacuum cannot be performed when there is an open transaction on the database", 76, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_performIncrementalVacuumIfNeeded()", 35, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 5504);
  }
  uint64_t v8 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_hasAttemptedVacuum;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_hasAttemptedVacuum) & 1) == 0)
  {
    if (qword_10166FB70 == -1)
    {
LABEL_6:
      swift_beginAccess();
      id v10 = (id)static OS_os_log.boardStore;
      uint64_t v11 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v10, (uint64_t)&_mh_execute_header, v11, (uint64_t)"Attempting to perform an incremental vacuum if needed", 53, 2, (uint64_t)_swiftEmptyArrayStorage);

      *(unsigned char *)(v0 + v8) = 1;
      sub_10079C468((sqlite3_stmt **)0x200000, 0x100000);
      return;
    }
LABEL_9:
    swift_once();
    goto LABEL_6;
  }
}

uint64_t sub_100C7ECE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 256))();
}

uint64_t sub_100C7ED30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 264))();
}

uint64_t sub_100C7ED7C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v16 = a1 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  uint64_t v19 = v18 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v17 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  while (v19)
  {
    v19 &= v19 - 1;
LABEL_6:
    unint64_t v21 = swift_retain();
    sub_100C7EFF8(v21, a2, a3, 0, 0xF000000000000000, 0);
    uint64_t result = swift_release();
    if (v4) {
      return swift_release();
    }
  }
  if (__OFADD__(v20++, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v20 >= v26) {
    return swift_release();
  }
  uint64_t v23 = *(void *)(v16 + 8 * v20);
  if (v23)
  {
LABEL_18:
    uint64_t v19 = (v23 - 1) & v23;
    goto LABEL_6;
  }
  int64_t v24 = v20 + 1;
  if (v20 + 1 >= v26) {
    return swift_release();
  }
  uint64_t v23 = *(void *)(v16 + 8 * v24);
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v20 + 2;
  if (v20 + 2 >= v26) {
    return swift_release();
  }
  uint64_t v23 = *(void *)(v16 + 8 * v24);
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v20 + 3;
  if (v20 + 3 >= v26) {
    return swift_release();
  }
  uint64_t v23 = *(void *)(v16 + 8 * v24);
  if (v23)
  {
LABEL_17:
    int64_t v20 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v20 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v20 >= v26) {
      return swift_release();
    }
    uint64_t v23 = *(void *)(v16 + 8 * v20);
    ++v24;
    if (v23) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100C7EFF8(unint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  *(void *)&long long v151 = a6;
  unint64_t v149 = a5;
  uint64_t v146 = a4;
  LODWORD(v148) = a3;
  uint64_t v12 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v143 = (uint64_t)&v141 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v144 = (uint64_t)&v141 - v17;
  *(void *)&long long v152 = sub_1005057FC(&qword_10169A1D0);
  uint64_t v153 = *(void *)(v152 - 8);
  uint64_t v19 = __chkstk_darwin(v152, v18);
  uint64_t v145 = (char *)&v141 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  unint64_t v150 = (unint64_t)&v141 - v23;
  __chkstk_darwin(v22, v24);
  int64_t v26 = (char *)&v141 - v25;
  uint64_t v27 = type metadata accessor for DispatchPredicate();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (uint64_t *)((char *)&v141 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = *(void **)(v9 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v31 = v32;
  (*(void (**)(void *, void, uint64_t))(v28 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v27);
  id v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)();
  uint64_t v35 = *(void (**)(void *, uint64_t))(v28 + 8);
  uint64_t v34 = v28 + 8;
  v35(v31, v27);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v36 = *(void *)(a1 + 16);
  uint64_t v37 = sub_100C822AC(a2, v36);
  uint64_t v34 = v9;
  if (!v7)
  {
    uint64_t v38 = v37;
    unint64_t v147 = a1;
    uint64_t v141 = a2;
    if (!v37)
    {
      unint64_t v150 = (_BYTE)v148 == 0;
      if ((void)v151)
      {
        id v44 = (id)v151;
        uint64_t v45 = sub_100D3F0F4((uint64_t)v44);
        unint64_t v47 = v46;
      }
      else
      {
        uint64_t v45 = 0;
        unint64_t v47 = 0xF000000000000000;
      }
      long long v55 = v145;
      unint64_t v56 = v147 + *(void *)(*(void *)v147 + 120);
      swift_beginAccess();
      uint64_t v57 = v152;
      (*(void (**)(char *, unint64_t, void))(v153 + 16))(v55, v56, v152);
      if (qword_10166EE10 != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for CRCodableVersion();
      sub_100556B74(v58, (uint64_t)qword_10171A2D8);
      sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
      unint64_t v59 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
      uint64_t v60 = v55;
      unint64_t v62 = v61;
      (*(void (**)(char *, uint64_t))(v153 + 8))(v60, v57);
      uint64_t v63 = v143;
      sub_100CE144C(v141, v143, type metadata accessor for CRLBoardIdentifier);
      unint64_t v64 = v147 + *(void *)(*(void *)v147 + 128);
      long long v152 = *(_OWORD *)v64;
      long long v151 = *(_OWORD *)(v64 + 16);
      uint64_t v153 = v34;
      unint64_t v148 = *(void *)(v64 + 32);
      type metadata accessor for CRLFreehandDrawingBucketDatabaseRow();
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData) = xmmword_101190880;
      *(_OWORD *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = xmmword_101190880;
      sub_100CE12D8(v63, v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      *(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v36;
      uint64_t v66 = (unint64_t *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
      *uint64_t v66 = v59;
      v66[1] = v62;
      *(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = v150;
      uint64_t v67 = (void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      uint64_t v68 = *(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      unint64_t v69 = *(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      uint64_t v70 = v146;
      unint64_t v71 = v149;
      *uint64_t v67 = v146;
      v67[1] = v71;
      sub_1005FA2A0(v70, v71);
      unint64_t v149 = v59;
      unint64_t v150 = v62;
      sub_100510D4C(v59, v62);
      sub_1005FA2A0(v45, v47);
      sub_100514260(v68, v69);
      uint64_t v72 = (uint64_t *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      uint64_t v73 = *(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      unint64_t v74 = *(void *)(v65
                      + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                      + 8);
      *uint64_t v72 = v45;
      v72[1] = v47;
      sub_100514260(v73, v74);
      uint64_t v75 = v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
      long long v76 = v151;
      *(_OWORD *)uint64_t v75 = v152;
      *(_OWORD *)(v75 + 16) = v76;
      *(void *)(v75 + 32) = v148;
      uint64_t v77 = v153;
      sub_100C835B0(v65);
      sub_100514260(v45, v47);
      swift_setDeallocating();
      sub_100CE14B4(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      sub_100510084(*(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
      sub_100514260(*(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
      sub_100514260(*(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(void *)(v65 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8));
      swift_deallocClassInstance();
      sub_100510084(v149, v150);
      goto LABEL_39;
    }
    uint64_t v145 = (char *)OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges;
    uint64_t v39 = *(void *)(v37 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges);
    uint64_t v40 = swift_retain();
    char v41 = sub_100CE2610(v40);
    uint64_t v142 = v38;
    if (v41)
    {
      uint64_t v9 = (uint64_t)v41;
      if ((_BYTE)v148)
      {
        if (v148 == 1)
        {
          uint64_t v42 = v147;
          uint64_t v43 = sub_100C82A20(v147);
        }
        else
        {
          uint64_t v43 = 0;
          uint64_t v42 = v147;
        }
      }
      else
      {
        uint64_t v42 = v147;
        uint64_t v43 = sub_100C82A20((uint64_t)v41) | v39;
      }
      uint64_t v78 = v42 + *(void *)(*(void *)v42 + 120);
      swift_beginAccess();
      uint64_t v79 = v153;
      int v80 = (char *)v152;
      (*(void (**)(char *, uint64_t, void))(v153 + 16))(v26, v78, v152);
      sub_100CE2978();
      uint64_t v81 = v26;
      int64_t v26 = v80;
      (*(void (**)(char *, char *))(v79 + 8))(v81, v80);
    }
    else
    {
      if (qword_10166FB70 != -1) {
        swift_once();
      }
      swift_beginAccess();
      unint64_t v48 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v50 = v48;
      uint64_t v51 = UUID.uuidString.getter();
      uint64_t v53 = v52;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v51;
      *(void *)(inited + 40) = v53;
      uint64_t v54 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v50, (uint64_t)&_mh_execute_header, v54, (uint64_t)"An existing drawing bucket in the database could not be deserialized for merging. Replacing the bucket with the incoming bucket. Board identifier %{public}@", 156, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      uint64_t v9 = v147;
      swift_retain();
      uint64_t v43 = 0;
      int64_t v26 = (char *)v152;
    }
    uint64_t v82 = v142;
    *(void *)&v145[v142] = v43;
    unint64_t v83 = v149;
    a1 = v150;
    if (v149 >> 60 != 15)
    {
      unint64_t v84 = (void *)(v82 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      uint64_t v85 = *(void *)(v82 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      unint64_t v86 = *(void *)(v82 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      uint64_t v87 = v146;
      *unint64_t v84 = v146;
      v84[1] = v83;
      sub_100510D4C(v87, v83);
      unint64_t v88 = v86;
      uint64_t v82 = v142;
      sub_100514260(v85, v88);
    }
    uint64_t v89 = (void *)v151;
    if ((void)v151)
    {
      unint64_t v90 = (uint64_t *)(v82 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      unint64_t v91 = *(void *)(v82
                      + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                      + 8);
      if (v91 >> 60 == 15)
      {
        id v92 = (id)v151;
LABEL_27:
        uint64_t v95 = sub_100D3F0F4((uint64_t)v89);
        unint64_t v97 = v96;

LABEL_28:
        a1 = v150;
        uint64_t v98 = *v90;
        unint64_t v99 = v90[1];
        *unint64_t v90 = v95;
        v90[1] = v97;
        sub_100514260(v98, v99);
        int64_t v26 = (char *)v152;
        goto LABEL_29;
      }
      uint64_t v93 = *v90;
      sub_10050BF48(0, &qword_101693260);
      sub_10050BF48(0, (unint64_t *)&unk_10169A7A0);
      sub_1005FA2A0(v93, v91);
      sub_1005FA2A0(v93, v91);
      id v94 = v89;
      unint64_t v133 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      sub_100514260(v93, v91);
      sub_100514260(v93, v91);
      if (!v133)
      {
        uint64_t v89 = (void *)v151;
        goto LABEL_27;
      }
      v154[0] = 0;
      if ([v133 mergeRecordValue:v94 error:v154])
      {
        id v134 = v154[0];

        id v135 = v133;
        uint64_t v95 = sub_100D3F0F4((uint64_t)v135);
        unint64_t v97 = v136;

        if (v97 >> 60 != 15) {
          goto LABEL_28;
        }
      }
      else
      {
        id v137 = v154[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_10166FB88 != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v138 = (id)static OS_os_log.dataSync;
        uint64_t v139 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v138, (uint64_t)&_mh_execute_header, v139, (uint64_t)"Failed to merge serialized ckMergeableRecordValueDatas, keep existing data", 74, 2, (uint64_t)_swiftEmptyArrayStorage);

        uint64_t v95 = sub_100D3F0F4((uint64_t)v133);
        unint64_t v97 = v140;

        swift_errorRelease();
        if (v97 >> 60 != 15)
        {
          uint64_t v8 = 0;
          goto LABEL_28;
        }
        uint64_t v8 = 0;
      }
      int64_t v26 = (char *)v152;
      a1 = v150;
    }
LABEL_29:
    uint64_t v100 = v9 + *(void *)(*(void *)v9 + 120);
    swift_beginAccess();
    (*(void (**)(unint64_t, uint64_t, char *))(v153 + 16))(a1, v100, v26);
    if (qword_10166EE10 == -1)
    {
LABEL_30:
      uint64_t v101 = type metadata accessor for CRCodableVersion();
      sub_100556B74(v101, (uint64_t)qword_10171A2D8);
      sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
      uint64_t v102 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
      if (v8)
      {
        (*(void (**)(unint64_t, char *))(v153 + 8))(a1, v26);
        swift_release();
        swift_release();
        a2 = v141;
        a1 = v147;
        goto LABEL_33;
      }
      uint64_t v104 = v102;
      unint64_t v105 = v103;
      (*(void (**)(unint64_t, char *))(v153 + 8))(a1, v26);
      uint64_t v106 = v142;
      uint64_t v107 = v144;
      sub_100CE144C(v142 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, v144, type metadata accessor for CRLBoardIdentifier);
      uint64_t v143 = *(void *)(v106 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
      uint64_t v146 = *(void *)&v145[v106];
      uint64_t v108 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData;
      uint64_t v109 = *(void *)(v106 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      uint64_t v145 = *(char **)(v106 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      uint64_t v153 = v34;
      uint64_t v110 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData;
      unint64_t v111 = *(void *)(v106
                       + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                       + 8);
      unint64_t v149 = *(void *)(v106 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      unint64_t v148 = v111;
      uint64_t v112 = v9 + *(void *)(*(void *)v9 + 128);
      long long v152 = *(_OWORD *)v112;
      long long v151 = *(_OWORD *)(v112 + 16);
      unint64_t v150 = *(void *)(v112 + 32);
      type metadata accessor for CRLFreehandDrawingBucketDatabaseRow();
      uint64_t v113 = swift_allocObject();
      *(_OWORD *)(v113 + v108) = xmmword_101190880;
      *(_OWORD *)(v113 + v110) = xmmword_101190880;
      sub_100CE12D8(v107, v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      *(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v143;
      uint64_t v114 = (uint64_t *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
      *uint64_t v114 = v104;
      v114[1] = v105;
      *(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = v146;
      uint64_t v115 = (uint64_t *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      uint64_t v116 = *(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      unint64_t v117 = *(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      unint64_t v118 = (unint64_t)v145;
      *uint64_t v115 = v109;
      v115[1] = v118;
      uint64_t v146 = v104;
      uint64_t v119 = v104;
      unint64_t v120 = v105;
      sub_100510D4C(v119, v105);
      sub_1005FA2A0(v109, v118);
      unint64_t v121 = v149;
      unint64_t v122 = v148;
      sub_1005FA2A0(v149, v148);
      unint64_t v123 = v117;
      uint64_t v77 = v153;
      sub_100514260(v116, v123);
      unint64_t v124 = (unint64_t *)(v113
                                + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      uint64_t v125 = *(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      unint64_t v126 = *(void *)(v113
                       + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                       + 8);
      *unint64_t v124 = v121;
      v124[1] = v122;
      sub_100514260(v125, v126);
      uint64_t v127 = v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
      long long v128 = v151;
      *(_OWORD *)uint64_t v127 = v152;
      *(_OWORD *)(v127 + 16) = v128;
      *(void *)(v127 + 32) = v150;
      sub_100C82C64(v113);
      swift_release();
      sub_100510084(v146, v120);
      swift_setDeallocating();
      sub_100CE14B4(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      sub_100510084(*(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
      sub_100514260(*(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
      sub_100514260(*(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(void *)(v113 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8));
      swift_deallocClassInstance();
      swift_release();
LABEL_39:
      uint64_t v131 = v141;
      uint64_t v130 = v147;
      uint64_t v129 = v77;
      return sub_100C83F44(v129, v130, v131);
    }
LABEL_47:
    swift_once();
    goto LABEL_30;
  }
LABEL_33:
  uint64_t v129 = v34;
  uint64_t v130 = a1;
  uint64_t v131 = a2;
  return sub_100C83F44(v129, v130, v131);
}

void sub_100C80288(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  unint64_t v245 = a5;
  uint64_t v242 = a4;
  *(void *)&long long v255 = a2;
  uint64_t v257 = a1;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v240 = (char *)&v232 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v236 = (uint64_t)&v232 - v13;
  uint64_t v244 = sub_1005057FC((uint64_t *)&unk_1016A8B60);
  __chkstk_darwin(v244, v14);
  unint64_t v243 = (char *)&v232 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v254 = sub_1005057FC(&qword_10169A1D0);
  *(void *)&long long v256 = *(void *)(v254 - 8);
  __chkstk_darwin(v254, v16);
  unint64_t v248 = (char *)&v232 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v241 = (char *)&v232 - v20;
  __chkstk_darwin(v21, v22);
  uint64_t v238 = (uint64_t)&v232 - v23;
  __chkstk_darwin(v24, v25);
  uint64_t v249 = (char *)&v232 - v26;
  __chkstk_darwin(v27, v28);
  uint64_t v235 = (uint64_t)&v232 - v29;
  uint64_t v30 = sub_1005057FC((uint64_t *)&unk_10169A770);
  __chkstk_darwin(v30 - 8, v31);
  unint64_t v247 = (char *)&v232 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  uint64_t v237 = (uint64_t)&v232 - v35;
  __chkstk_darwin(v36, v37);
  uint64_t v252 = (char *)&v232 - v38;
  uint64_t v39 = sub_1005057FC(&qword_101699938);
  uint64_t v251 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v40);
  uint64_t v253 = (char *)&v232 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v43);
  uint64_t v250 = (uint64_t)&v232 - v44;
  uint64_t v45 = type metadata accessor for DispatchPredicate();
  uint64_t v46 = *(void *)(v45 - 8);
  __n128 v48 = __chkstk_darwin(v45, v47);
  id v50 = (void **)((char *)&v232 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v51 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *id v50 = v51;
  (*(void (**)(void *, void, uint64_t, __n128))(v46 + 104))(v50, enum case for DispatchPredicate.onQueue(_:), v45, v48);
  id v52 = v51;
  uint64_t v53 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v46 + 8))(v50, v45);
  if ((v53 & 1) == 0)
  {
    __break(1u);
    goto LABEL_66;
  }
  LODWORD(v239) = a3;
  if (a3 == 2)
  {
    uint64_t v66 = v256;
    uint64_t v56 = v6;
    uint64_t v53 = v257;
    goto LABEL_13;
  }
  if (!(_BYTE)a3)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_mergeFreehandDrawingRemoteRecord(_:boardIdentifier:syncChangeTrackingType:syncDataToOverwrite:)", 96, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 5651, (uint64_t)"CKMergeable path for mergeFreehandDrawing should never be called with .trackAsUnsyncedChanges", 93, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_mergeFreehandDrawingRemoteRecord(_:boardIdentifier:syncChangeTrackingType:syncDataToOverwrite:)", 96, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 5651);
  }
  uint64_t v53 = v257;
  uint64_t v54 = *(char **)(v257 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
  uint64_t v55 = sub_100C822AC(v255, (uint64_t)v54);
  uint64_t v56 = v6;
  if (!v6)
  {
    uint64_t v57 = v55;
    if (v55)
    {
      uint64_t v240 = v54;
      uint64_t v233 = v39;
      uint64_t v58 = (uint64_t *)(v53 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions);
      if (*(unsigned char *)(v53 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions + 40) == 1) {
        uint64_t v58 = (uint64_t *)(v55 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
      }
      unint64_t v59 = (char *)v58[3];
      uint64_t v60 = (char *)v58[4];
      unint64_t v247 = (char *)v58[2];
      unint64_t v248 = v59;
      unint64_t v61 = *(void **)(v53 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_ckMergeableRecordValue);
      uint64_t v63 = v58;
      uint64_t v62 = *v58;
      uint64_t v241 = (char *)v63[1];
      uint64_t v257 = v62;
      unint64_t v64 = *(void *)(v55
                      + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                      + 8);
      uint64_t v253 = v60;
      if (v64 >> 60 == 15)
      {
        id v65 = v61;
        uint64_t v234 = 0;
      }
      else
      {
        v232 = (void *)v55;
        uint64_t v246 = v5;
        uint64_t v115 = *(void *)(v55
                         + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
        sub_10050BF48(0, &qword_101693260);
        sub_10050BF48(0, (unint64_t *)&unk_10169A7A0);
        id v116 = v61;
        sub_1005FA2A0(v115, v64);
        id v117 = v116;
        sub_1005FA2A0(v115, v64);
        uint64_t v146 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
        sub_100514260(v115, v64);
        sub_100514260(v115, v64);
        if (v146)
        {
          v259[0] = 0;
          unsigned __int8 v147 = [v146 mergeRecordValue:v117 error:v259];

          uint64_t v57 = (uint64_t)v232;
          if ((v147 & 1) == 0)
          {
            id v239 = v117;
            id v153 = v259[0];
            _convertNSErrorToError(_:)();

            swift_willThrow();
            if (qword_10166FB88 != -1) {
              swift_once();
            }
            swift_beginAccess();
            long long v154 = (void *)static OS_os_log.dataSync;
            sub_1005057FC((uint64_t *)&unk_101672B40);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_10117E810;
            swift_getErrorValue();
            id v156 = v154;
            uint64_t v157 = Error.localizedDescription.getter();
            uint64_t v159 = v158;
            *(void *)(inited + 56) = &type metadata for String;
            *(void *)(inited + 64) = sub_100528BE4();
            *(void *)(inited + 32) = v157;
            *(void *)(inited + 40) = v159;
            uint64_t v160 = static os_log_type_t.default.getter();
            sub_100BAC898((uint64_t)v156, (uint64_t)&_mh_execute_header, v160, (uint64_t)"Merge failed, this can happen if a record was deleted and replaced with something else and we're merging two distinctly different records. Super edge casey. %@", 159, 2, inited);

            swift_setDeallocating();
            sub_1005057FC(&qword_101672B50);
            swift_arrayDestroy();

            swift_errorRelease();
            uint64_t v234 = 0;
            id v65 = v146;
            uint64_t v5 = v246;
            uint64_t v57 = (uint64_t)v232;
            goto LABEL_46;
          }
          id v148 = v259[0];

          id v65 = v146;
          uint64_t v5 = v246;
        }
        else
        {

          uint64_t v5 = v246;
          uint64_t v57 = (uint64_t)v232;
          id v65 = v117;
        }
        uint64_t v234 = 0;
      }
LABEL_46:
      (*(void (**)(char *, uint64_t, uint64_t, void))(v256 + 56))(v252, 1, 1, v254);
      uint64_t v161 = v5;
      unint64_t v162 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
      sub_100CE9068();
      uint64_t v163 = v162;
      uint64_t v164 = v250;
      unint64_t v165 = v163;
      CRCKMergeable.init(crdt:context:)();
      sub_100523288((unint64_t *)&unk_10169A790, &qword_101699938);
      uint64_t v167 = v233;
      uint64_t v166 = v234;
      CKMergeable.merge(_:)();
      if (v166)
      {
        (*(void (**)(uint64_t, uint64_t))(v251 + 8))(v164, v167);
        swift_release();

        return;
      }
      uint64_t v252 = v165;
      uint64_t v246 = v161;
      uint64_t v168 = v237;
      CRCKMergeable.crdt.getter();
      uint64_t v169 = v254;
      int v170 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v256 + 48))(v168, 1, v254);
      id v239 = v65;
      if (v170 == 1)
      {
        sub_100522F00(v168, (uint64_t *)&unk_10169A770);
        v171 = v240;
        v259[0] = v240;
        uint64_t v237 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v235 = v172;
        type metadata accessor for UUID();
        sub_1005057FC(&qword_10169A220);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        sub_100523288(&qword_1016973B0, &qword_10169A220);
        sub_100523288((unint64_t *)&unk_10169A7B0, &qword_10169A220);
        CRDictionary.init()();
        sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
        unint64_t v173 = (unint64_t)v249;
        Capsule<>.init(_:id:)();
        sub_1005057FC((uint64_t *)&unk_1016A8B70);
        uint64_t v174 = (void *)swift_allocObject();
        *((unsigned char *)v174 + *(void *)(*v174 + 136)) = 0;
        v174[2] = v171;
        (*(void (**)(char *, unint64_t, void))(v256 + 32))((char *)v174 + *(void *)(*v174 + 120), v173, v254);
        char v175 = 0;
      }
      else
      {
        uint64_t v176 = *(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 32);
        uint64_t v177 = v235;
        v176(v235, v168, v169);
        uint64_t v178 = v169;
        unint64_t v179 = (unint64_t)v249;
        v176((uint64_t)v249, v177, v178);
        sub_1005057FC((uint64_t *)&unk_1016A8B70);
        uint64_t v174 = (void *)swift_allocObject();
        *((unsigned char *)v174 + *(void *)(*v174 + 136)) = 0;
        v174[2] = v240;
        v176((uint64_t)v174 + *(void *)(*v174 + 120), v179, v178);
        char v175 = 1;
      }
      unint64_t v180 = v245;
      unint64_t v182 = v247;
      uint64_t v181 = v248;
      uint64_t v183 = v241;
      *((unsigned char *)v174 + *(void *)(*v174 + 136)) = v175;
      uint64_t v184 = (void *)((char *)v174 + *(void *)(*v174 + 128));
      *uint64_t v184 = v257;
      v184[1] = v183;
      v184[2] = v182;
      v184[3] = v181;
      v184[4] = v253;
      uint64_t v185 = swift_retain();
      uint64_t v186 = sub_100CE2610(v185);
      v232 = (void *)v57;
      if (v186)
      {
        uint64_t v187 = v186;
        uint64_t v188 = sub_100C82A20((uint64_t)v174);
        swift_beginAccess();
        sub_100CE2978();
      }
      else
      {
        if (qword_10166FB70 != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v189 = (void *)static OS_os_log.boardStore;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t v190 = swift_initStackObject();
        *(_OWORD *)(v190 + 16) = xmmword_10117E810;
        id v191 = v189;
        uint64_t v192 = UUID.uuidString.getter();
        uint64_t v194 = v193;
        *(void *)(v190 + 56) = &type metadata for String;
        *(void *)(v190 + 64) = sub_100528BE4();
        *(void *)(v190 + 32) = v192;
        *(void *)(v190 + 40) = v194;
        uint64_t v195 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v191, (uint64_t)&_mh_execute_header, v195, (uint64_t)"An existing drawing bucket in the database failed to deserialize for merging. Replacing the bucket with the incoming bucket. Board identifier %{public}@", 152, 2, v190);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        swift_arrayDestroy();

        swift_retain();
        uint64_t v188 = 0;
        uint64_t v187 = v174;
      }
      uint64_t v196 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges;
      *(void *)((char *)v232 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = v188;
      if (v180 >> 60 != 15)
      {
        uint64_t v197 = (void *)((char *)v232 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
        uint64_t v198 = *(void *)((char *)v232 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
        unint64_t v199 = *(void *)((char *)v232 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
        uint64_t v200 = v242;
        *uint64_t v197 = v242;
        v197[1] = v180;
        sub_100510D4C(v200, v180);
        sub_100514260(v198, v199);
      }
      uint64_t v201 = (char *)v187 + *(void *)(*v187 + 120);
      swift_beginAccess();
      uint64_t v202 = v238;
      uint64_t v203 = v254;
      (*(void (**)(uint64_t, char *, void))(v256 + 16))(v238, v201, v254);
      if (qword_10166EE10 != -1) {
        swift_once();
      }
      uint64_t v204 = type metadata accessor for CRCodableVersion();
      sub_100556B74(v204, (uint64_t)qword_10171A2D8);
      sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
      uint64_t v205 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
      unint64_t v207 = v206;
      v208 = *(void (**)(uint64_t, uint64_t))(v256 + 8);
      uint64_t v257 = v205;
      v208(v202, v203);
      uint64_t v209 = (char *)sub_100D3F0F4((uint64_t)v239);
      *(void *)&long long v256 = v210;
      unint64_t v211 = v232;
      sub_100CE144C((uint64_t)v232 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, v236, type metadata accessor for CRLBoardIdentifier);
      uint64_t v249 = *(char **)((char *)v211 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
      uint64_t v252 = *(char **)((char *)v211 + v196);
      uint64_t v212 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData;
      uint64_t v213 = (uint64_t)v211 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData;
      uint64_t v234 = 0;
      uint64_t v214 = *(void *)((char *)v211 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      unint64_t v215 = *(void *)(v213 + 8);
      char v216 = (char *)v187 + *(void *)(*v187 + 128);
      long long v217 = *(_OWORD *)v216;
      long long v254 = *((_OWORD *)v216 + 1);
      long long v255 = v217;
      uint64_t v253 = (char *)*((void *)v216 + 4);
      type metadata accessor for CRLFreehandDrawingBucketDatabaseRow();
      uint64_t v218 = swift_allocObject();
      *(_OWORD *)(v218 + v212) = xmmword_101190880;
      *(_OWORD *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = xmmword_101190880;
      sub_100CE12D8(v236, v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v249;
      uint64_t v219 = (void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
      uint64_t v220 = v257;
      *uint64_t v219 = v257;
      v219[1] = v207;
      unint64_t v221 = v207;
      *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = v252;
      uint64_t v222 = (uint64_t *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      uint64_t v224 = *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      unint64_t v223 = *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      *uint64_t v222 = v214;
      v222[1] = v215;
      uint64_t v249 = (char *)v221;
      sub_100510D4C(v220, v221);
      sub_1005FA2A0(v214, v215);
      unint64_t v225 = v256;
      sub_1005FA2A0((uint64_t)v209, v256);
      sub_100514260(v224, v223);
      uint64_t v226 = (char **)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      uint64_t v227 = *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      unint64_t v228 = *(void *)(v218
                       + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                       + 8);
      uint64_t v252 = v209;
      *uint64_t v226 = v209;
      v226[1] = (char *)v225;
      sub_100514260(v227, v228);
      uint64_t v229 = v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
      long long v230 = v254;
      *(_OWORD *)uint64_t v229 = v255;
      *(_OWORD *)(v229 + 16) = v230;
      *(void *)(v229 + 32) = v253;
      uint64_t v231 = v234;
      sub_100C82C64(v218);
      if (v231)
      {
        swift_setDeallocating();
        sub_100CE14B4(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
        sub_100510084(*(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
        sub_100514260(*(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
        sub_100514260(*(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(void *)(v218+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
        swift_deallocClassInstance();
        sub_100514260((uint64_t)v252, v225);
        sub_100510084(v257, (unint64_t)v249);
        swift_release();
        swift_release();

        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v251 + 8))(v250, v233);
        return;
      }
      swift_setDeallocating();
      sub_100CE14B4(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      sub_100510084(*(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
      sub_100514260(*(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
      sub_100514260(*(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(void *)(v218 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8));
      swift_deallocClassInstance();
      sub_100514260((uint64_t)v252, v225);
      sub_100510084(v257, (unint64_t)v249);
      swift_release();
      swift_release();

      uint64_t v151 = v251;
      uint64_t v253 = (char *)v250;
      uint64_t v152 = v233;
LABEL_40:
      swift_release();
      (*(void (**)(char *, uint64_t))(v151 + 8))(v253, v152);
      return;
    }
    uint64_t v66 = v256;
LABEL_13:
    uint64_t v67 = (uint64_t *)(v53 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions);
    int v68 = *(unsigned __int8 *)(v53
                             + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions
                             + 40);
    uint64_t v246 = v5;
    if (v68 != 1)
    {
      uint64_t v250 = *v67;
      uint64_t v85 = v67[2];
      uint64_t v237 = v67[1];
      uint64_t v238 = v85;
      uint64_t v86 = v67[3];
      uint64_t v235 = v67[4];
      uint64_t v236 = v86;
      uint64_t v84 = v56;
      goto LABEL_17;
    }
    uint64_t v234 = v56;
    if (qword_10166FB88 == -1)
    {
LABEL_15:
      swift_beginAccess();
      unint64_t v69 = (void *)static OS_os_log.dataSync;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v70 = swift_initStackObject();
      *(_OWORD *)(v70 + 16) = xmmword_10117E810;
      uint64_t v71 = v53 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier;
      uint64_t v72 = *(void *)(v257 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
      uint64_t v250 = v69;
      Class v73 = sub_100D3EC2C(v71);
      uint64_t v74 = sub_10050BF48(0, &qword_10167BED0);
      uint64_t v75 = qword_10169A5F0;
      long long v76 = off_10169A5F8;
      v258._countAndFlagsBits = v72;
      swift_bridgeObjectRetain();
      uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v79 = v78;
      v258._countAndFlagsBits = v75;
      v258._object = v76;
      swift_bridgeObjectRetain();
      v80._countAndFlagsBits = v77;
      v80._object = v79;
      String.append(_:)(v80);
      swift_bridgeObjectRelease();
      uint64_t v53 = v257;
      swift_bridgeObjectRelease();
      Class isa = CKRecordID.init(recordName:zoneID:)(v258, (CKRecordZoneID)v73).super.isa;
      *(void *)(v70 + 56) = v74;
      *(void *)(v70 + 64) = sub_10062E0F4((unint64_t *)&qword_101685CC8, &qword_10167BED0);
      *(void *)(v70 + 32) = isa;
      uint64_t v82 = static os_log_type_t.error.getter();
      unint64_t v83 = (void *)v250;
      sub_100BAC898(v250, (uint64_t)&_mh_execute_header, v82, (uint64_t)"Incorrectly received missing values (partial record?) when saving a new freehandDrawingRemoteRecord, using default value to proceed. Incoming recordIDforCKRecord: %{public}@", 173, 2, v70);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      uint64_t v237 = 0x1000000000000;
      uint64_t v238 = 0x2000400000000;
      uint64_t v235 = 0x1000000000000;
      uint64_t v236 = 0x2000400000000;
      uint64_t v250 = 0x1000000000000;
      uint64_t v84 = v234;
      uint64_t v66 = v256;
LABEL_17:
      uint64_t v87 = *(void **)(v53 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_ckMergeableRecordValue);
      uint64_t v88 = v254;
      (*(void (**)(char *, uint64_t, uint64_t, void))(v66 + 56))(v252, 1, 1, v254);
      uint64_t v89 = *(void **)(v246 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
      sub_100CE9068();
      unint64_t v90 = v87;
      id v91 = v89;
      id v92 = v253;
      CRCKMergeable.init(crdt:context:)();
      sub_100523288((unint64_t *)&unk_10169A790, &qword_101699938);
      CKMergeable.merge(_:)();
      if (v84)
      {
        (*(void (**)(char *, uint64_t))(v251 + 8))(v92, v39);

        return;
      }
      uint64_t v252 = v90;
      uint64_t v93 = (uint64_t)v247;
      CRCKMergeable.crdt.getter();
      uint64_t v94 = v256;
      int v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v256 + 48))(v93, 1, v88);
      uint64_t v233 = v39;
      if (v95 == 1)
      {
        sub_100522F00(v93, (uint64_t *)&unk_10169A770);
        uint64_t v257 = *(void *)(v257 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
        v258._countAndFlagsBits = v257;
        unint64_t v247 = (char *)dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v241 = v96;
        type metadata accessor for UUID();
        sub_1005057FC(&qword_10169A220);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        sub_100523288(&qword_1016973B0, &qword_10169A220);
        sub_100523288((unint64_t *)&unk_10169A7B0, &qword_10169A220);
        CRDictionary.init()();
        sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
        unint64_t v97 = (unint64_t)v249;
        uint64_t v98 = v256;
        Capsule<>.init(_:id:)();
        sub_1005057FC((uint64_t *)&unk_1016A8B70);
        unint64_t v99 = (void *)swift_allocObject();
        *((unsigned char *)v99 + *(void *)(*v99 + 136)) = 0;
        v99[2] = v257;
        (*(void (**)(char *, unint64_t, uint64_t))(v98 + 32))((char *)v99 + *(void *)(*v99 + 120), v97, v88);
        char v100 = 0;
      }
      else
      {
        uint64_t v101 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 32);
        uint64_t v102 = v241;
        v101(v241, v93, v88);
        uint64_t v257 = *(void *)(v257 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
        unint64_t v103 = (unint64_t)v249;
        v101(v249, (uint64_t)v102, v88);
        sub_1005057FC((uint64_t *)&unk_1016A8B70);
        uint64_t v104 = (void *)swift_allocObject();
        *((unsigned char *)v104 + *(void *)(*v104 + 136)) = 0;
        v104[2] = v257;
        v101((char *)v104 + *(void *)(*v104 + 120), v103, v88);
        unint64_t v99 = v104;
        uint64_t v98 = v256;
        char v100 = 1;
      }
      uint64_t v105 = v88;
      *((unsigned char *)v99 + *(void *)(*v99 + 136)) = v100;
      uint64_t v106 = (void *)((char *)v99 + *(void *)(*v99 + 128));
      uint64_t v107 = v237;
      void *v106 = v250;
      v106[1] = v107;
      uint64_t v108 = v236;
      v106[2] = v238;
      v106[3] = v108;
      v106[4] = v235;
      uint64_t v109 = (char *)v99 + *(void *)(*v99 + 120);
      swift_beginAccess();
      uint64_t v110 = v248;
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v248, v109, v105);
      if (qword_10166EE10 != -1) {
        swift_once();
      }
      uint64_t v111 = type metadata accessor for CRCodableVersion();
      sub_100556B74(v111, (uint64_t)qword_10171A2D8);
      sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
      uint64_t v112 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
      uint64_t v114 = v105;
      uint64_t v118 = v112;
      unint64_t v119 = v113;
      uint64_t v234 = 0;
      (*(void (**)(char *, uint64_t))(v256 + 8))(v110, v114);
      uint64_t v120 = sub_100D3F0F4((uint64_t)v252);
      uint64_t v257 = v118;
      unint64_t v121 = v119;
      unint64_t v123 = v122;
      uint64_t v124 = (uint64_t)v240;
      sub_100CE144C(v255, (uint64_t)v240, type metadata accessor for CRLBoardIdentifier);
      uint64_t v125 = v99[2];
      uint64_t v126 = *(void *)(*v99 + 128);
      v232 = v99;
      uint64_t v127 = (char *)v99 + v126;
      long long v128 = *(_OWORD *)v127;
      long long v255 = *((_OWORD *)v127 + 1);
      long long v256 = v128;
      *(void *)&long long v254 = *((void *)v127 + 4);
      type metadata accessor for CRLFreehandDrawingBucketDatabaseRow();
      uint64_t v129 = swift_allocObject();
      *(_OWORD *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData) = xmmword_101190880;
      *(_OWORD *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = xmmword_101190880;
      uint64_t v130 = v124;
      unint64_t v131 = v123;
      unint64_t v132 = v121;
      uint64_t v133 = v257;
      sub_100CE12D8(v130, v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v125;
      id v134 = (uint64_t *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
      *id v134 = v133;
      v134[1] = v132;
      *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = 0;
      id v135 = (uint64_t *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      uint64_t v136 = *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      unint64_t v137 = *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      uint64_t v138 = v242;
      unint64_t v139 = v245;
      *id v135 = v242;
      v135[1] = v139;
      sub_1005FA2A0(v138, v139);
      sub_100510D4C(v133, v132);
      sub_1005FA2A0(v120, v131);
      sub_100514260(v136, v137);
      unint64_t v140 = (uint64_t *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      uint64_t v141 = *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      unint64_t v142 = *(void *)(v129
                       + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                       + 8);
      uint64_t v250 = v120;
      uint64_t *v140 = v120;
      v140[1] = v131;
      sub_100514260(v141, v142);
      uint64_t v143 = v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
      long long v144 = v255;
      *(_OWORD *)uint64_t v143 = v256;
      *(_OWORD *)(v143 + 16) = v144;
      *(void *)(v143 + 32) = v254;
      if ((_BYTE)v239)
      {
        uint64_t v145 = v234;
        if (v239 == 1) {
          sub_100C835B0(v129);
        }
        else {
          sub_100C82C64(v129);
        }
        if (v145)
        {
          swift_setDeallocating();
          sub_100CE14B4(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
          sub_100510084(*(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
          sub_100514260(*(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
          sub_100514260(*(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(void *)(v129+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
          swift_deallocClassInstance();

          sub_100514260(v250, v131);
          sub_100510084(v133, v132);
          swift_release();
          (*(void (**)(char *, uint64_t))(v251 + 8))(v253, v233);
          return;
        }
        swift_setDeallocating();
        sub_100CE14B4(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
        sub_100510084(*(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
        sub_100514260(*(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
        sub_100514260(*(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(void *)(v129+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
        swift_deallocClassInstance();
      }
      else
      {
        if (qword_10166FB88 != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v149 = (id)static OS_os_log.dataSync;
        uint64_t v150 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v149, (uint64_t)&_mh_execute_header, v150, (uint64_t)"CKMergeable path for mergeFreehandDrawing should never be called with .trackAsUnsyncedChanges", 93, 2, (uint64_t)_swiftEmptyArrayStorage);
        swift_setDeallocating();
        sub_100CE14B4(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
        sub_100510084(*(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
        sub_100514260(*(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
        sub_100514260(*(void *)(v129 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(void *)(v129+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
        swift_deallocClassInstance();
      }
      sub_100514260(v250, v131);
      sub_100510084(v133, v132);
      uint64_t v151 = v251;
      uint64_t v152 = v233;
      goto LABEL_40;
    }
LABEL_66:
    swift_once();
    goto LABEL_15;
  }
}

uint64_t sub_100C822AC(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v55 = a1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v8 = v9;
  uint64_t v10 = *(void (**)(void *))(v5 + 104);
  unsigned int v58 = enum case for DispatchPredicate.onQueue(_:);
  v10(v8);
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v57 = (void (*)(void *, uint64_t, uint64_t))v10;
  uint64_t v56 = v12;
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  uint64_t v59 = 0x205443454C4553;
  unint64_t v60 = 0xE700000000000000;
  v13._countAndFlagsBits = sub_100CE1DE4(0, 0xE000000000000000);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x204D4F524620;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000018;
  v15._object = (void *)0x800000010127BF60;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x2820455245485720;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._object = (void *)0x800000010127BF80;
  v17._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x444E41203F203D20;
  v18._object = (void *)0xE900000000000020;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x695F74656B637562;
  v19._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x29203F203D20;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  uint64_t v21 = v59;
  uint64_t v22 = v60;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v23 = swift_retain();
  uint64_t v24 = sub_10079FC40(v23, v21, v22);
  if (v3)
  {
    swift_release();
    if (qword_10166FB70 == -1)
    {
LABEL_5:
      swift_beginAccess();
      uint64_t v28 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v30 = v28;
      uint64_t v31 = Error.localizedDescription.getter();
      uint64_t v33 = v32;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v31;
      *(void *)(inited + 40) = v33;
      uint64_t v34 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v30, (uint64_t)&_mh_execute_header, v34, (uint64_t)"Failed to fetch a board drawing row with error %@", 49, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      swift_willThrow();
      return v31;
    }
LABEL_20:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v25 = v24;
  swift_release();
  uint64_t v26 = sub_100753FC0();
  uint64_t v36 = v26;
  unint64_t v37 = v27;
  sub_10079DCE4(v26, v27, 1);
  sub_100510084(v36, v37);
  if (v54 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v38 = v57;
  uint64_t v39 = v58;
  if (v54 > 0x7FFFFFFF)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v40 = *(void **)(*(void *)(v25 + 16) + 32);
  *uint64_t v8 = v40;
  v38(v8, v39, v4);
  id v41 = v40;
  LOBYTE(v40) = _dispatchPreconditionTest(_:)();
  uint64_t v42 = v56;
  v56(v8, v4);
  if ((v40 & 1) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v55 = 0;
  uint64_t v53 = (sqlite3_stmt **)(v25 + 24);
  swift_beginAccess();
  sqlite3_bind_int(*(sqlite3_stmt **)(v25 + 24), 2, v54);
  uint64_t v43 = *(void **)(*(void *)(v25 + 16) + 32);
  *uint64_t v8 = v43;
  v38(v8, v58, v4);
  id v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)();
  v42(v8, v4);
  if ((v43 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t v45 = swift_initStackObject();
  *(void *)(v45 + 32) = 0;
  *(void *)(v45 + 40) = 1;
  *(void *)(v45 + 16) = v25;
  *(void *)(v45 + 24) = 0;
  swift_retain();
  uint64_t v46 = sub_10079ECE0();
  if (!v46) {
    goto LABEL_14;
  }
  uint64_t v31 = sub_100CE2120(v46, 0);
  swift_release();
  swift_setDeallocating();
  sub_1007A0344(*(void *)(v45 + 24), *(void *)(v45 + 32), *(void *)(v45 + 40));
  uint64_t v47 = *(void **)(*(void *)(v25 + 16) + 32);
  *uint64_t v8 = v47;
  v57(v8, v58, v4);
  id v48 = v47;
  uint64_t v45 = _dispatchPreconditionTest(_:)();
  v56(v8, v4);
  if ((v45 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_release();
    swift_setDeallocating();
    sub_1007A0344(*(void *)(v45 + 24), *(void *)(v45 + 32), *(void *)(v45 + 40));
    uint64_t v49 = *(void **)(*(void *)(v25 + 16) + 32);
    *uint64_t v8 = v49;
    v57(v8, v58, v4);
    id v50 = v49;
    LOBYTE(v49) = _dispatchPreconditionTest(_:)();
    v56(v8, v4);
    if (v49)
    {
      uint64_t v31 = 0;
      goto LABEL_16;
    }
LABEL_25:
    __break(1u);
  }
LABEL_16:
  uint64_t v51 = v53;
  if (*v53)
  {
    sqlite3_finalize(*v53);
    *uint64_t v51 = 0;
  }
  swift_release();
  return v31;
}

uint64_t sub_100C82A20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1005057FC(&qword_10169A1D0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7, v10);
  uint64_t v12 = &v23[-v11];
  uint64_t v13 = v2 + *(void *)(*(void *)v2 + 120);
  swift_beginAccess();
  Swift::String v14 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v14(v12, v13, v4);
  uint64_t v15 = a1 + *(void *)(*(void *)a1 + 120);
  swift_beginAccess();
  v14(v9, v15, v4);
  LOBYTE(v15) = Capsule.hasDelta(from:)();
  Swift::String v16 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v16(v9, v4);
  v16(v12, v4);
  uint64_t v17 = 2;
  if ((v15 & 1) == 0) {
    uint64_t v17 = 0;
  }
  Swift::String v18 = (void *)(v2 + *(void *)(*(void *)v2 + 128));
  Swift::String v19 = (void *)(a1 + *(void *)(*(void *)a1 + 128));
  if (*v18 != *v19) {
    v17 |= 4uLL;
  }
  if (v18[1] != v19[1]) {
    v17 |= 8uLL;
  }
  if (v18[2] != v19[2]) {
    v17 |= 0x10uLL;
  }
  uint64_t v21 = v18[3];
  uint64_t v20 = v18[4];
  if (v21 != v19[3]) {
    v17 |= 0x20uLL;
  }
  if (v20 == v19[4]) {
    return v17;
  }
  else {
    return v17 | 0x40;
  }
}

uint64_t sub_100C82C64(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v8 = v9;
  uint64_t v10 = *(void (**)(void))(v5 + 104);
  unsigned int v76 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v75 = (void (*)(void *, uint64_t, uint64_t))v10;
  v10(v8);
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_26;
  }
  v74[0] = v12;
  v74[1] = v5 + 104;
  uint64_t v77 = 0;
  unint64_t v78 = 0xE000000000000000;
  _StringGuts.grow(_:)(108);
  v13._countAndFlagsBits = 0x20455441445055;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xD000000000000018;
  v14._object = (void *)0x800000010127BF60;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x2054455320;
  v15._object = (void *)0xE500000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x645F74656B637562;
  v16._object = (void *)0xEB00000000617461;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x202C3F203D20;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD000000000000010;
  v18._object = (void *)0x800000010127B8B0;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x202C3F203D20;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._object = (void *)0xE900000000000061;
  v20._countAndFlagsBits = 0x7461645F636E7973;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x202C3F203D20;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._object = (void *)0x800000010127BFE0;
  v22._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x202C3F203D20;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD00000000000001FLL;
  v24._object = (void *)0x800000010127C000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x202C3F203D20;
  v25._object = (void *)0xE600000000000000;
  String.append(_:)(v25);
  v26._object = (void *)0x800000010127C020;
  v26._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x202C3F203D20;
  v27._object = (void *)0xE600000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xD000000000000038;
  v28._object = (void *)0x800000010127C040;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x202C3F203D20;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0xD000000000000037;
  v30._object = (void *)0x800000010127C080;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x202C3F203D20;
  v31._object = (void *)0xE600000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0xD000000000000026;
  v32._object = (void *)0x800000010127B8D0;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x454857203F203D20;
  v33._object = (void *)0xEB00000000204552;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0xD000000000000011;
  v34._object = (void *)0x800000010127BF80;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x444E41203F203D20;
  v35._object = (void *)0xE900000000000020;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x695F74656B637562;
  v36._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 1059077408;
  v37._object = (void *)0xE400000000000000;
  String.append(_:)(v37);
  uint64_t v38 = v77;
  uint64_t v39 = v78;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v40 = swift_retain();
  uint64_t v41 = sub_10079FC40(v40, v38, v39);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  sub_10079DCE4(*(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8), 1);
  sub_10079D8A8(*(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges), 2);
  uint64_t v43 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
  unint64_t v44 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
  if (v44 >> 60 == 15)
  {
    uint64_t v45 = *(void **)(*(void *)(v41 + 16) + 32);
    *uint64_t v8 = v45;
    v75(v8, v76, v4);
    id v46 = v45;
    LOBYTE(v45) = _dispatchPreconditionTest(_:)();
    ((void (*)(void *, uint64_t))v74[0])(v8, v4);
    if (v45)
    {
      swift_beginAccess();
      sqlite3_bind_null(*(sqlite3_stmt **)(v41 + 24), 3);
      goto LABEL_7;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v47 = *v43;
  sub_100510D4C(*v43, *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
  sub_10079DCE4(v47, v44, 3);
  sub_100514260(v47, v44);
LABEL_7:
  id v48 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
  unint64_t v49 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8);
  if (v49 >> 60 != 15)
  {
    uint64_t v52 = *v48;
    sub_100510D4C(*v48, *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8));
    sub_10079DCE4(v52, v49, 4);
    sub_100514260(v52, v49);
    goto LABEL_11;
  }
  id v50 = *(void **)(*(void *)(v41 + 16) + 32);
  *uint64_t v8 = v50;
  v75(v8, v76, v4);
  id v51 = v50;
  LOBYTE(v50) = _dispatchPreconditionTest(_:)();
  ((void (*)(void *, uint64_t))v74[0])(v8, v4);
  if ((v50 & 1) == 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  swift_beginAccess();
  sqlite3_bind_null(*(sqlite3_stmt **)(v41 + 24), 4);
LABEL_11:
  uint64_t v53 = (sqlite3_int64 *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
  sub_10079D8A8(*(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions), 5);
  sub_10079D8A8(v53[1], 6);
  sub_10079D8A8(v53[2], 7);
  sub_10079D8A8(v53[3], 8);
  sub_10079D8A8(v53[4], 9);
  uint64_t v54 = sub_100753FC0();
  uint64_t v56 = v54;
  unint64_t v57 = v55;
  sub_10079DCE4(v54, v55, 10);
  sub_100510084(v56, v57);
  uint64_t v58 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
  if (v58 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_28;
  }
  uint64_t v59 = v75;
  uint64_t v60 = v76;
  if (v58 > 0x7FFFFFFF)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v61 = *(void **)(*(void *)(v41 + 16) + 32);
  *uint64_t v8 = v61;
  v59(v8, v60, v4);
  id v62 = v61;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)();
  ((void (*)(void *, uint64_t))v74[0])(v8, v4);
  if ((v61 & 1) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v63 = (sqlite3_stmt **)(v41 + 24);
  swift_beginAccess();
  sqlite3_bind_int(*(sqlite3_stmt **)(v41 + 24), 11, v58);
  unint64_t v64 = *(void **)(*(void *)(v41 + 16) + 32);
  *uint64_t v8 = v64;
  v59(v8, v76, v4);
  id v65 = v64;
  LOBYTE(v64) = _dispatchPreconditionTest(_:)();
  uint64_t v66 = (uint64_t (*)(void *, uint64_t))v74[0];
  ((void (*)(void *, uint64_t))v74[0])(v8, v4);
  if ((v64 & 1) == 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int v67 = sqlite3_step(*v63);
  if (v67 != 101) {
    goto LABEL_22;
  }
  int v68 = *(void **)(*(void *)(v41 + 16) + 32);
  *uint64_t v8 = v68;
  v75(v8, v76, v4);
  id v69 = v68;
  LOBYTE(v68) = _dispatchPreconditionTest(_:)();
  int v67 = v66(v8, v4);
  if ((v68 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    int v70 = v67;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v71 = v70;
    *(void *)(v71 + 8) = 0xD000000000000029;
    *(void *)(v71 + 16) = 0x800000010127D6F0;
    swift_willThrow();
    uint64_t v72 = *(void **)(*(void *)(v41 + 16) + 32);
    *uint64_t v8 = v72;
    v75(v8, v76, v4);
    id v73 = v72;
    LOBYTE(v72) = _dispatchPreconditionTest(_:)();
    v66(v8, v4);
    if (v72) {
      goto LABEL_23;
    }
LABEL_32:
    __break(1u);
  }
LABEL_23:
  if (*v63)
  {
    sqlite3_finalize(*v63);
    *uint64_t v63 = 0;
  }
  return swift_release();
}

uint64_t sub_100C835B0(uint64_t a1)
{
  uint64_t v84 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (void (**)(void *, uint64_t))((char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v7 = v8;
  uint64_t v9 = *(void (**)(void))(v4 + 104);
  unsigned int v85 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v86 = (void (*)(void *, void, uint64_t))v9;
  uint64_t v87 = v4 + 104;
  v9(v7);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  id v11 = *(void (**)(void *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v83 = v11;
  uint64_t v88 = v2;
  uint64_t v89 = 0;
  unint64_t v90 = 0xE000000000000000;
  _StringGuts.grow(_:)(152);
  v12._countAndFlagsBits = 0x4920545245534E49;
  v12._object = (void *)0xEC000000204F544ELL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0xD000000000000018;
  v13._object = (void *)0x800000010127BF60;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 10272;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000011;
  v15._object = (void *)0x800000010127BF80;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x695F74656B637562;
  v17._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 8236;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x645F74656B637562;
  v19._object = (void *)0xEB00000000617461;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._object = (void *)0x800000010127B8B0;
  v21._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x7461645F636E7973;
  v23._object = (void *)0xE900000000000061;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25._object = (void *)0x800000010127BFE0;
  v25._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD00000000000001FLL;
  v27._object = (void *)0x800000010127C000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 8236;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  v29._object = (void *)0x800000010127C020;
  v29._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 8236;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  v31._object = (void *)0x800000010127C040;
  v31._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 8236;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0xD000000000000037;
  v33._object = (void *)0x800000010127C080;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 8236;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0xD000000000000026;
  v35._object = (void *)0x800000010127B8D0;
  String.append(_:)(v35);
  v36._object = (void *)0x800000010127D720;
  v36._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD000000000000011;
  v37._object = (void *)0x800000010127BF80;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 8236;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x695F74656B637562;
  v39._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v39);
  v40._object = (void *)0x800000010127CBD0;
  v40._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0x645F74656B637562;
  v41._object = (void *)0xEB00000000617461;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x756C637865203D20;
  v42._object = (void *)0xEC0000002E646564;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0x645F74656B637562;
  v43._object = (void *)0xEB00000000617461;
  String.append(_:)(v43);
  uint64_t v44 = v89;
  uint64_t v45 = v90;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v46 = swift_retain();
  uint64_t v47 = v88;
  uint64_t v48 = sub_10079FC40(v46, v44, v45);
  uint64_t result = swift_release();
  if (v47) {
    return result;
  }
  uint64_t v50 = v84;
  uint64_t v51 = sub_100753FC0();
  unint64_t v53 = v52;
  sub_10079DCE4(v51, v52, 1);
  sub_100510084(v51, v53);
  uint64_t v54 = *(void *)(v50 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
  if (v54 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_26;
  }
  unint64_t v55 = v83;
  if (v54 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v56 = *(void **)(*(void *)(v48 + 16) + 32);
  *uint64_t v7 = v56;
  v86(v7, v85, v3);
  id v57 = v56;
  LOBYTE(v56) = _dispatchPreconditionTest(_:)();
  v55(v7, v3);
  if ((v56 & 1) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v58 = (sqlite3_stmt **)(v48 + 24);
  swift_beginAccess();
  sqlite3_bind_int(*(sqlite3_stmt **)(v48 + 24), 2, v54);
  uint64_t v59 = v84;
  sub_10079DCE4(*(void *)(v84 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v84 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8), 3);
  sub_10079D8A8(*(void *)(v59 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges), 4);
  uint64_t v60 = (uint64_t *)(v59 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
  unint64_t v61 = *(void *)(v59 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
  if (v61 >> 60 == 15)
  {
    id v62 = *(void **)(*(void *)(v48 + 16) + 32);
    *uint64_t v7 = v62;
    v86(v7, v85, v3);
    id v63 = v62;
    LOBYTE(v62) = _dispatchPreconditionTest(_:)();
    v83(v7, v3);
    if ((v62 & 1) == 0)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    sqlite3_bind_null(*v58, 5);
  }
  else
  {
    uint64_t v64 = *v60;
    sub_100510D4C(*v60, v61);
    sub_10079DCE4(v64, v61, 5);
    uint64_t v65 = v64;
    uint64_t v59 = v84;
    sub_100514260(v65, v61);
  }
  uint64_t v66 = (uint64_t *)(v59 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
  unint64_t v67 = *(void *)(v59 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8);
  if (v67 >> 60 == 15)
  {
    int v68 = *(void **)(*(void *)(v48 + 16) + 32);
    *uint64_t v7 = v68;
    v86(v7, v85, v3);
    id v69 = v68;
    LOBYTE(v68) = _dispatchPreconditionTest(_:)();
    int v70 = v83;
    v83(v7, v3);
    if ((v68 & 1) == 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    sqlite3_bind_null(*v58, 6);
  }
  else
  {
    uint64_t v71 = *v66;
    sub_100510D4C(*v66, v67);
    sub_10079DCE4(v71, v67, 6);
    uint64_t v72 = v71;
    uint64_t v59 = v84;
    sub_100514260(v72, v67);
    int v70 = v83;
  }
  id v73 = (sqlite3_int64 *)(v59 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
  sub_10079D8A8(*v73, 7);
  sub_10079D8A8(v73[1], 8);
  sub_10079D8A8(v73[2], 9);
  sub_10079D8A8(v73[3], 10);
  sub_10079D8A8(v73[4], 11);
  uint64_t v74 = *(void **)(*(void *)(v48 + 16) + 32);
  *uint64_t v7 = v74;
  v86(v7, v85, v3);
  id v75 = v74;
  LOBYTE(v74) = _dispatchPreconditionTest(_:)();
  v70(v7, v3);
  if ((v74 & 1) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int v76 = sqlite3_step(*v58);
  if (v76 != 101) {
    goto LABEL_22;
  }
  uint64_t v77 = *(void **)(*(void *)(v48 + 16) + 32);
  *uint64_t v7 = v77;
  v86(v7, v85, v3);
  id v78 = v77;
  LOBYTE(v77) = _dispatchPreconditionTest(_:)();
  int v76 = ((uint64_t (*)(void *, uint64_t))v70)(v7, v3);
  if ((v77 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    int v79 = v76;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v80 = v79;
    *(void *)(v80 + 8) = 0xD00000000000002ELL;
    *(void *)(v80 + 16) = 0x800000010127D760;
    swift_willThrow();
    uint64_t v81 = *(void **)(*(void *)(v48 + 16) + 32);
    *uint64_t v7 = v81;
    v86(v7, v85, v3);
    id v82 = v81;
    LOBYTE(v81) = _dispatchPreconditionTest(_:)();
    v70(v7, v3);
    if (v81) {
      goto LABEL_23;
    }
LABEL_32:
    __break(1u);
  }
LABEL_23:
  if (*v58)
  {
    sqlite3_finalize(*v58);
    *uint64_t v58 = 0;
  }
  return swift_release();
}

uint64_t sub_100C83F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions;
  swift_beginAccess();
  if (*(void *)(*(void *)v5 + 16))
  {
    sub_1009563EC(a3);
    if (v6)
    {
      swift_beginAccess();
      swift_retain();
      sub_100D189F4(v4);
      swift_endAccess();
      swift_release();
    }
  }
  return swift_endAccess();
}

uint64_t sub_100C83FF8(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v8 = v9;
  id v10 = *(void (**)(void))(v5 + 104);
  unsigned int v55 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v56 = (void (*)(void *, uint64_t, uint64_t))v10;
  v10(v8);
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  Swift::String v12 = *(void (**)(void *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if ((v9 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v53 = a1;
  uint64_t v54 = v12;
  uint64_t v58 = 0;
  unint64_t v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v58 = 0x205443454C4553;
  unint64_t v59 = 0xE700000000000000;
  v13._countAndFlagsBits = sub_100CE1DE4(0, 0xE000000000000000);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x204D4F524620;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000018;
  v15._object = (void *)0x800000010127BF60;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x2820455245485720;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._object = (void *)0x800000010127BF80;
  v17._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x293F203D20;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  uint64_t v19 = v58;
  uint64_t v20 = v59;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v21 = swift_retain();
  uint64_t v22 = sub_10079FC40(v21, v19, v20);
  if (v2)
  {
    swift_release();
    if (qword_10166FB70 == -1)
    {
LABEL_5:
      swift_beginAccess();
      Swift::String v26 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v28 = v26;
      uint64_t v29 = Error.localizedDescription.getter();
      uint64_t v31 = v30;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v29;
      *(void *)(inited + 40) = v31;
      uint64_t v32 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v28, (uint64_t)&_mh_execute_header, v32, (uint64_t)"Failed to fetch board drawing rows with error %@", 48, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      swift_willThrow();
      return v29;
    }
LABEL_26:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v23 = v22;
  swift_release();
  uint64_t v24 = sub_100753FC0();
  uint64_t v53 = 0;
  uint64_t v34 = v24;
  unint64_t v35 = v25;
  sub_10079DCE4(v24, v25, 1);
  sub_100510084(v34, v35);
  uint64_t v57 = (uint64_t)_swiftEmptyArrayStorage;
  Swift::String v36 = *(void **)(*(void *)(v23 + 16) + 32);
  *uint64_t v8 = v36;
  uint64_t v37 = v55;
  Swift::String v38 = v56;
  v56(v8, v55, v4);
  id v39 = v36;
  LOBYTE(v36) = _dispatchPreconditionTest(_:)();
  Swift::String v40 = v54;
  v54(v8, v4);
  if ((v36 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  Swift::String v41 = *(void **)(*(void *)(v23 + 16) + 32);
  *uint64_t v8 = v41;
  swift_retain();
  v38(v8, v37, v4);
  id v42 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)();
  v40(v8, v4);
  if ((v41 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  Swift::String v43 = (sqlite3_stmt **)(v23 + 24);
  while (1)
  {
    sub_1007A0344(0, 0, 1);
    swift_beginAccess();
    unsigned int v46 = sqlite3_step(*v43);
    if (v46 != 100) {
      break;
    }
    uint64_t v47 = swift_retain_n();
    if (sub_100CE2120(v47, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      Swift::String v40 = v54;
    }
    swift_release();
    uint64_t v44 = *(void **)(*(void *)(v23 + 16) + 32);
    *uint64_t v8 = v44;
    v56(v8, v55, v4);
    id v45 = v44;
    LOBYTE(v44) = _dispatchPreconditionTest(_:)();
    v40(v8, v4);
    if ((v44 & 1) == 0) {
      goto LABEL_24;
    }
  }
  if (v46 && v46 != 101)
  {
    uint64_t v48 = v46;
    sub_1007A0344(0, 0, 1);
    uint64_t v49 = 0;
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t v49 = 1;
  }
  uint64_t v29 = v57;
  swift_release();
  sub_1007A0344(v48, 0, v49);
  uint64_t v50 = *(void **)(*(void *)(v23 + 16) + 32);
  *uint64_t v8 = v50;
  v56(v8, v55, v4);
  id v51 = v50;
  LOBYTE(v50) = _dispatchPreconditionTest(_:)();
  v54(v8, v4);
  if ((v50 & 1) == 0) {
LABEL_28:
  }
    __break(1u);
  swift_beginAccess();
  if (*v43)
  {
    sqlite3_finalize(*v43);
    *Swift::String v43 = 0;
  }
  swift_release();
  return v29;
}

uint64_t sub_100C84770(char a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  id v10 = (uint64_t *)((char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v11 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *id v10 = v11;
  unsigned int v12 = enum case for DispatchPredicate.onQueue(_:);
  Swift::String v13 = *(void (**)(void *, uint64_t, uint64_t))(v6 + 104);
  uint64_t v86 = v6 + 104;
  uint64_t v88 = v13;
  ((void (*)(void *, void, uint64_t, __n128))v13)(v10, enum case for DispatchPredicate.onQueue(_:), v5, v8);
  id v14 = v11;
  char v15 = _dispatchPreconditionTest(_:)();
  Swift::String v16 = *(void (**)(void *, uint64_t))(v6 + 8);
  v16(v10, v5);
  if ((v15 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v89 = v16;
  unsigned int v87 = v12;
  if (a1) {
    uint64_t v17 = 15649;
  }
  else {
    uint64_t v17 = 15677;
  }
  uint64_t v91 = 0;
  unint64_t v92 = 0xE000000000000000;
  _StringGuts.grow(_:)(79);
  v18._countAndFlagsBits = 0x205443454C4553;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = sub_100CE1DE4(0xD000000000000018, 0x800000010127BF60);
  uint64_t v85 = v2;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x204D4F524620;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD000000000000018;
  v21._object = (void *)0x800000010127BF60;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x4A2052454E4E4920;
  v22._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x736472616F62;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 542002976;
  v24._object = (void *)0xE400000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD000000000000018;
  v25._object = (void *)0x800000010127BF60;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 46;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000011;
  v27._object = (void *)0x800000010127BF80;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 2112800;
  v28._object = (void *)0xE300000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x736472616F62;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 46;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31._object = (void *)0x8000000101262BA0;
  v31._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x20455245485720;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0xD000000000000018;
  v33._object = (void *)0x800000010127BF60;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 46;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._object = (void *)0x800000010127B8B0;
  v35._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x444E412030203E20;
  v36._object = (void *)0xE900000000000020;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x736472616F62;
  v37._object = (void *)0xE600000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 46;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x616E5F72656E776FLL;
  v39._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 32;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  v41._countAndFlagsBits = v17;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 16160;
  v42._object = (void *)0xE200000000000000;
  String.append(_:)(v42);
  uint64_t v43 = v91;
  uint64_t v44 = v92;
  unint64_t v90 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v45 = swift_retain();
  uint64_t v46 = v85;
  uint64_t v47 = sub_10079FC40(v45, v43, v44);
  if (v46)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1)
    {
LABEL_7:
      swift_beginAccess();
      uint64_t v48 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v50 = v48;
      uint64_t v51 = Error.localizedDescription.getter();
      uint64_t v53 = v52;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v51;
      *(void *)(inited + 40) = v53;
      uint64_t v54 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v50, (uint64_t)&_mh_execute_header, v54, (uint64_t)"Failed to fetch a board record with error %@", 44, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return swift_willThrow();
    }
LABEL_26:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v56 = v47;
  uint64_t v84 = 0;
  swift_release();
  sub_10079DA60(0, 0xE000000000000000, 1);
  uint64_t v57 = *(void **)(*(void *)(v56 + 16) + 32);
  *id v10 = v57;
  uint64_t v58 = v87;
  unint64_t v59 = v88;
  v88(v10, v87, v5);
  id v60 = v57;
  LOBYTE(v57) = _dispatchPreconditionTest(_:)();
  v89(v10, v5);
  if ((v57 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  type metadata accessor for SQLiteRowIterator();
  unint64_t v61 = v59;
  id v62 = (void *)swift_initStackObject();
  v62[3] = 0;
  v62[4] = 0;
  unint64_t v83 = v62 + 4;
  v62[5] = 1;
  v62[2] = v56;
  id v63 = *(void **)(*(void *)(v56 + 16) + 32);
  *id v10 = v63;
  uint64_t v85 = v56;
  swift_retain();
  v61(v10, v58, v5);
  id v64 = v63;
  LOBYTE(v63) = _dispatchPreconditionTest(_:)();
  v89(v10, v5);
  if ((v63 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v65 = v85;
  while (1)
  {
    uint64_t v68 = v62[3];
    uint64_t v69 = v62[4];
    uint64_t v70 = v62[5];
    v62[3] = 0;
    v62[4] = 0;
    v62[5] = 1;
    sub_1007A0344(v68, v69, v70);
    swift_beginAccess();
    unsigned int v71 = sqlite3_step(*(sqlite3_stmt **)(v65 + 24));
    if (v71 != 100) {
      break;
    }
    uint64_t v72 = swift_retain_n();
    if (sub_100CE2120(v72, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
    uint64_t v65 = v62[2];
    uint64_t v66 = *(void **)(*(void *)(v65 + 16) + 32);
    *id v10 = v66;
    uint64_t v58 = v87;
    v88(v10, v87, v5);
    id v67 = v66;
    LOBYTE(v66) = _dispatchPreconditionTest(_:)();
    v89(v10, v5);
    if ((v66 & 1) == 0) {
      goto LABEL_24;
    }
  }
  if (v71 && v71 != 101)
  {
    uint64_t v73 = v71;
    uint64_t v74 = v62[3];
    uint64_t v75 = v62[4];
    uint64_t v76 = v62[5];
    v62[3] = v73;
    uint64_t v77 = v83;
    void *v83 = 0;
    v77[1] = 0;
    sub_1007A0344(v74, v75, v76);
  }
  swift_release();
  uint64_t v78 = v85;
  int v79 = *(void **)(*(void *)(v85 + 16) + 32);
  *id v10 = v79;
  v88(v10, v58, v5);
  id v80 = v79;
  LOBYTE(v79) = _dispatchPreconditionTest(_:)();
  v89(v10, v5);
  if ((v79 & 1) == 0) {
LABEL_28:
  }
    __break(1u);
  swift_beginAccess();
  uint64_t v81 = *(sqlite3_stmt **)(v78 + 24);
  if (v81)
  {
    sqlite3_finalize(v81);
    *(void *)(v78 + 24) = 0;
  }
  swift_release();
  return v90;
}

unint64_t sub_100C8501C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = result;
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t result = (unint64_t)sub_100CE2610(v11);
    if (!result) {
      return result;
    }
    goto LABEL_5;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v7 = swift_retain();
  uint64_t result = (unint64_t)sub_100CE2610(v7);
  if (!result) {
    return result;
  }
LABEL_5:
  uint64_t v8 = result;
  uint64_t v9 = *(os_unfair_lock_s **)(a3 + 16);
  os_unfair_lock_lock(v9);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *a4;
  *a4 = 0x8000000000000000;
  sub_100972960(v8, v6, isUniquelyReferenced_nonNull_native);
  *a4 = v12;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v9);

  return swift_release();
}

unint64_t sub_100C8512C()
{
  uint64_t v1 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (void **)((char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100CE144C(v0, (uint64_t)v8, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  unint64_t v9 = 0xD000000000000012;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      id v10 = *v8;
      unint64_t v52 = 0xD000000000000017;
      unint64_t v53 = 0x800000010127E300;
      id v24 = [v10 zoneName];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v27 = v26;

      v28._uint64_t countAndFlagsBits = v25;
      v28._object = v27;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = 95;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      id v30 = [v10 ownerName];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34) {
        goto LABEL_17;
      }
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v36) {
        goto LABEL_18;
      }
      goto LABEL_13;
    case 2u:
      sub_100CE12D8((uint64_t)v8, (uint64_t)v4, type metadata accessor for CRLBoardIdentifier);
      unint64_t v52 = 0xD00000000000001ELL;
      unint64_t v53 = 0x800000010127E2E0;
      v51._uint64_t countAndFlagsBits = UUID.uuidString.getter();
      v51._object = v41;
      swift_bridgeObjectRetain();
      v42._uint64_t countAndFlagsBits = 58;
      v42._object = (void *)0xE100000000000000;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v51._countAndFlagsBits;
      object = v51._object;
      uint64_t v45 = (uint64_t *)&v4[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
      uint64_t v46 = *v45;
      uint64_t v47 = (void *)v45[1];
      v51._uint64_t countAndFlagsBits = countAndFlagsBits;
      v51._object = object;
      swift_bridgeObjectRetain();
      v48._uint64_t countAndFlagsBits = v46;
      v48._object = v47;
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      unint64_t v9 = v52;
      sub_100CE14B4((uint64_t)v4, type metadata accessor for CRLBoardIdentifier);
      return v9;
    case 3u:
      return v9;
    case 4u:
      return 0xD00000000000002DLL;
    case 5u:
      return 0xD000000000000011;
    case 6u:
      return 0xD000000000000017;
    case 7u:
      return 0xD000000000000024;
    default:
      id v10 = *v8;
      unint64_t v52 = 0x6F7A5F6863746566;
      unint64_t v53 = 0xEB000000005F656ELL;
      id v11 = [v10 zoneName];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v14 = v13;

      v15._uint64_t countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._uint64_t countAndFlagsBits = 95;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      id v17 = [v10 ownerName];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
      {
LABEL_17:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
        {
LABEL_13:
          id v37 = [v10 ownerName];
          uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::String v40 = v39;

          goto LABEL_19;
        }
      }
LABEL_18:
      uint64_t v38 = 0;
      Swift::String v40 = (void *)0xE000000000000000;
LABEL_19:
      v49._uint64_t countAndFlagsBits = v38;
      v49._object = v40;
      String.append(_:)(v49);
      swift_bridgeObjectRelease();

      return v52;
  }
}

void sub_100C85600()
{
  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"init(rawValue:)", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 6093, (uint64_t)"Unexpected call to KeyValueTableKey initializer.", 48, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unexpected call to KeyValueTableKey initializer.");
  sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(rawValue:)", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 6093);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v0, v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t sub_100C856F0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100C8512C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100C85718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v44 = a5;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v11 = __chkstk_darwin(v8, v10);
  Swift::String v13 = (void *)((char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  void *v13 = v14;
  Swift::String v15 = *(void (**)(void, __n128))(v9 + 104);
  unsigned int v46 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v45 = (void (*)(void *, uint64_t, uint64_t))v15;
  v15(v13, v11);
  id v16 = v14;
  uint64_t v17 = _dispatchPreconditionTest(_:)();
  uint64_t v47 = *(void (**)(void *, uint64_t))(v9 + 8);
  v47(v13, v8);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v42[1] = a3;
  uint64_t v43 = (void (*)(uint64_t, uint64_t))a2;
  uint64_t v17 = sub_100C8512C();
  a2 = v18;
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_allocObject();
  uint64_t v19 = swift_retain();
  uint64_t v20 = v50;
  uint64_t v21 = sub_10079FC40(v19, 0xD00000000000003ALL, 0x800000010127EC90);
  uint64_t v50 = v20;
  if (v20)
  {
    swift_release();
    if (qword_10166FB70 == -1)
    {
LABEL_4:
      swift_beginAccess();
      Swift::String v22 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v17;
      *(void *)(inited + 40) = a2;
      id v24 = v22;
      uint64_t v25 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v24, (uint64_t)&_mh_execute_header, v25, (uint64_t)"Failed to fetch value for key %@", 32, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return swift_willThrow();
    }
LABEL_15:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v27 = v21;
  swift_release();
  sub_10079DA60(v17, a2, 1);
  swift_bridgeObjectRelease();
  Swift::String v28 = *(void **)(*(void *)(v27 + 16) + 32);
  void *v13 = v28;
  uint64_t v29 = v46;
  id v30 = v45;
  v45(v13, v46, v8);
  id v31 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v47)(v13, v8);
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t v32 = (void *)swift_initStackObject();
  v32[4] = 0;
  v32[5] = 1;
  uint64_t v32[2] = v27;
  v32[3] = 0;
  uint64_t v33 = sub_10079ECE0();
  swift_setDeallocating();
  sub_1007A0344(v32[3], v32[4], v32[5]);
  if (v33)
  {
    swift_retain();
    uint64_t v34 = sub_10079E7F4(0, v33);
    Swift::String v35 = v44;
    *uint64_t v44 = v34;
    v35[1] = v36;
    swift_release();
    swift_bridgeObjectRelease();
    id v37 = v43;
    if (v43)
    {
      uint64_t v38 = swift_retain();
      v37(v38, 1);
      swift_release();
    }
    swift_release();
  }
  Swift::String v39 = *(void **)(*(void *)(v27 + 16) + 32);
  void *v13 = v39;
  v30(v13, v29, v8);
  id v40 = v39;
  LOBYTE(v39) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v47)(v13, v8);
  if ((v39 & 1) == 0) {
    goto LABEL_17;
  }
  swift_beginAccess();
  Swift::String v41 = *(sqlite3_stmt **)(v27 + 24);
  if (v41)
  {
    sqlite3_finalize(v41);
    *(void *)(v27 + 24) = 0;
  }
  return swift_release();
}

uint64_t sub_100C85BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v46 = a5;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v11 = __chkstk_darwin(v8, v10);
  Swift::String v13 = (void *)((char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  void *v13 = v14;
  Swift::String v15 = *(void (**)(void, __n128))(v9 + 104);
  unsigned int v48 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v47 = (void (*)(void *, uint64_t, uint64_t))v15;
  v15(v13, v11);
  id v16 = v14;
  uint64_t v17 = _dispatchPreconditionTest(_:)();
  unint64_t v49 = *(void (**)(void *, uint64_t))(v9 + 8);
  v49(v13, v8);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v44[1] = a3;
  uint64_t v45 = (void (*)(uint64_t, uint64_t))a2;
  uint64_t v17 = sub_100C8512C();
  a2 = v18;
  uint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_allocObject();
  uint64_t v19 = swift_retain();
  uint64_t v20 = v52;
  uint64_t v21 = sub_10079FC40(v19, 0xD00000000000003ALL, 0x800000010127EC90);
  uint64_t v52 = v20;
  if (v20)
  {
    swift_release();
    if (qword_10166FB70 == -1)
    {
LABEL_4:
      swift_beginAccess();
      Swift::String v22 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v17;
      *(void *)(inited + 40) = a2;
      id v24 = v22;
      uint64_t v25 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v24, (uint64_t)&_mh_execute_header, v25, (uint64_t)"Failed to fetch value for key %@", 32, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return swift_willThrow();
    }
LABEL_15:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v27 = v21;
  swift_release();
  sub_10079DA60(v17, a2, 1);
  swift_bridgeObjectRelease();
  Swift::String v28 = *(void **)(*(void *)(v27 + 16) + 32);
  void *v13 = v28;
  uint64_t v29 = v48;
  id v30 = v47;
  v47(v13, v48, v8);
  id v31 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v49)(v13, v8);
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t v32 = (void *)swift_initStackObject();
  v32[4] = 0;
  v32[5] = 1;
  uint64_t v32[2] = v27;
  v32[3] = 0;
  uint64_t v33 = sub_10079ECE0();
  swift_setDeallocating();
  sub_1007A0344(v32[3], v32[4], v32[5]);
  if (v33)
  {
    swift_retain();
    uint64_t v34 = sub_10079BD64(0, v33);
    Swift::String v35 = v46;
    uint64_t v36 = *v46;
    unint64_t v37 = v46[1];
    *unsigned int v46 = (uint64_t)v34;
    v35[1] = v38;
    sub_100514260(v36, v37);
    swift_release();
    Swift::String v39 = v45;
    if (v45)
    {
      uint64_t v40 = swift_retain();
      v39(v40, 1);
      swift_release();
    }
    swift_release();
  }
  Swift::String v41 = *(void **)(*(void *)(v27 + 16) + 32);
  void *v13 = v41;
  v30(v13, v29, v8);
  id v42 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v49)(v13, v8);
  if ((v41 & 1) == 0) {
    goto LABEL_17;
  }
  swift_beginAccess();
  uint64_t v43 = *(sqlite3_stmt **)(v27 + 24);
  if (v43)
  {
    sqlite3_finalize(v43);
    *(void *)(v27 + 24) = 0;
  }
  return swift_release();
}

uint64_t sub_100C86044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, sqlite3_int64 *a5)
{
  uint64_t v44 = a5;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v11 = __chkstk_darwin(v8, v10);
  Swift::String v13 = (void *)((char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  void *v13 = v14;
  Swift::String v15 = *(void (**)(void, __n128))(v9 + 104);
  unsigned int v46 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v45 = (void (*)(void *, uint64_t, uint64_t))v15;
  v15(v13, v11);
  id v16 = v14;
  uint64_t v17 = _dispatchPreconditionTest(_:)();
  uint64_t v47 = *(void (**)(void *, uint64_t))(v9 + 8);
  v47(v13, v8);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v42[1] = a3;
  uint64_t v43 = (void (*)(uint64_t, uint64_t))a2;
  uint64_t v17 = sub_100C8512C();
  a2 = v18;
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_allocObject();
  uint64_t v19 = swift_retain();
  uint64_t v20 = v50;
  uint64_t v21 = sub_10079FC40(v19, 0xD00000000000003ALL, 0x800000010127EC90);
  uint64_t v50 = v20;
  if (v20)
  {
    swift_release();
    if (qword_10166FB70 == -1)
    {
LABEL_4:
      swift_beginAccess();
      Swift::String v22 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v17;
      *(void *)(inited + 40) = a2;
      id v24 = v22;
      uint64_t v25 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v24, (uint64_t)&_mh_execute_header, v25, (uint64_t)"Failed to fetch value for key %@", 32, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return swift_willThrow();
    }
LABEL_15:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v27 = v21;
  swift_release();
  sub_10079DA60(v17, a2, 1);
  swift_bridgeObjectRelease();
  Swift::String v28 = *(void **)(*(void *)(v27 + 16) + 32);
  void *v13 = v28;
  uint64_t v29 = v46;
  id v30 = v45;
  v45(v13, v46, v8);
  id v31 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v47)(v13, v8);
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t v32 = (void *)swift_initStackObject();
  v32[4] = 0;
  v32[5] = 1;
  uint64_t v32[2] = v27;
  v32[3] = 0;
  uint64_t v33 = sub_10079ECE0();
  swift_setDeallocating();
  sub_1007A0344(v32[3], v32[4], v32[5]);
  if (v33)
  {
    swift_retain();
    sqlite3_int64 v34 = sub_10079E4E8(0, v33);
    Swift::String v35 = v44;
    *uint64_t v44 = v34;
    *((unsigned char *)v35 + 8) = v36 & 1;
    swift_release();
    unint64_t v37 = v43;
    if (v43)
    {
      uint64_t v38 = swift_retain();
      v37(v38, 1);
      swift_release();
    }
    swift_release();
  }
  Swift::String v39 = *(void **)(*(void *)(v27 + 16) + 32);
  void *v13 = v39;
  v30(v13, v29, v8);
  id v40 = v39;
  LOBYTE(v39) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v47)(v13, v8);
  if ((v39 & 1) == 0) {
    goto LABEL_17;
  }
  swift_beginAccess();
  Swift::String v41 = *(sqlite3_stmt **)(v27 + 24);
  if (v41)
  {
    sqlite3_finalize(v41);
    *(void *)(v27 + 24) = 0;
  }
  return swift_release();
}

uint64_t sub_100C864D4(uint64_t a1, sqlite3_stmt **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v68 = a6;
  unint64_t v59 = a2;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v13 = __chkstk_darwin(v10, v12);
  Swift::String v15 = (uint64_t *)((char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v16 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *Swift::String v15 = v16;
  uint64_t v17 = *(void (**)(void, __n128))(v11 + 104);
  unsigned int v61 = enum case for DispatchPredicate.onQueue(_:);
  id v62 = (void (*)(void *, void, uint64_t))v17;
  uint64_t v60 = v11 + 104;
  v17(v15, v13);
  id v18 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  id v63 = *(uint64_t (**)(void *, uint64_t))(v11 + 8);
  uint64_t result = v63(v15, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v58 = a5;
  uint64_t v56 = a3;
  unint64_t v57 = sub_100C8512C();
  uint64_t v21 = v20;
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v22._uint64_t countAndFlagsBits = 0xD000000000000017;
  v22._object = (void *)0x800000010127E7E0;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0x756C61765F79656BLL;
  v23._object = (void *)0xEE00617461645F65;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 10272;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 7955819;
  v25._object = (void *)0xE300000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 0x65756C6176;
  v27._object = (void *)0xE500000000000000;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 8236;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 0x6E695F6172747865;
  v29._object = (void *)0xEA00000000006F66;
  String.append(_:)(v29);
  v30._object = (void *)0x800000010127E800;
  v30._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v30);
  uint64_t v31 = v66;
  uint64_t v32 = v67;
  type metadata accessor for SQLiteStatement();
  swift_allocObject();
  uint64_t v33 = swift_retain();
  uint64_t v34 = sub_10079FC40(v33, v31, v32);
  if (v6)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v35 = v34;
  swift_release();
  unint64_t v36 = v57;
  sub_10079DA60(v57, v21, 1);
  sub_10079DA60(v58, v68, 2);
  unint64_t v37 = (void *)v21;
  uint64_t v38 = v36;
  Swift::String v39 = v59;
  if (v59)
  {
    swift_retain();
    ((void (*)(uint64_t, uint64_t))v39)(v35, 3);
    sub_1005174AC((uint64_t)v39);
    goto LABEL_8;
  }
  id v40 = *(void **)(*(void *)(v35 + 16) + 32);
  *Swift::String v15 = v40;
  v62(v15, v61, v10);
  id v41 = v40;
  LOBYTE(v40) = _dispatchPreconditionTest(_:)();
  uint64_t result = v63(v15, v10);
  if (v40)
  {
    swift_beginAccess();
    sqlite3_bind_null(*(sqlite3_stmt **)(v35 + 24), 3);
LABEL_8:
    id v42 = *(void **)(*(void *)(v35 + 16) + 32);
    *Swift::String v15 = v42;
    v62(v15, v61, v10);
    id v43 = v42;
    LOBYTE(v42) = _dispatchPreconditionTest(_:)();
    uint64_t result = v63(v15, v10);
    if (v42)
    {
      uint64_t v44 = v37;
      unint64_t v59 = (sqlite3_stmt **)(v35 + 24);
      swift_beginAccess();
      int v45 = sqlite3_step(*(sqlite3_stmt **)(v35 + 24));
      if (v45 != 101)
      {
        int v49 = v45;
        unint64_t v64 = 0;
        unint64_t v65 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease();
        unint64_t v64 = 0xD00000000000002CLL;
        unint64_t v65 = 0x800000010127E820;
        v50._uint64_t countAndFlagsBits = v38;
        v50._object = v44;
        String.append(_:)(v50);
        swift_bridgeObjectRelease();
        unint64_t v52 = v64;
        unint64_t v51 = v65;
        sub_10079FF00();
        swift_allocError();
        *(_DWORD *)uint64_t v53 = v49;
        *(void *)(v53 + 8) = v52;
        *(void *)(v53 + 16) = v51;
        swift_willThrow();
        uint64_t v54 = *(void **)(*(void *)(v35 + 16) + 32);
        *Swift::String v15 = v54;
        v62(v15, v61, v10);
        id v55 = v54;
        LOBYTE(v52) = _dispatchPreconditionTest(_:)();
        uint64_t result = v63(v15, v10);
        if (v52)
        {
          if (*v59)
          {
            sqlite3_finalize(*v59);
            *(void *)(v35 + 24) = 0;
          }
          goto LABEL_16;
        }
        goto LABEL_21;
      }
      swift_bridgeObjectRelease();
      unsigned int v46 = *(void **)(*(void *)(v35 + 16) + 32);
      *Swift::String v15 = v46;
      v62(v15, v61, v10);
      id v47 = v46;
      LOBYTE(v46) = _dispatchPreconditionTest(_:)();
      uint64_t result = v63(v15, v10);
      if (v46)
      {
        uint64_t v48 = v59;
        if (*v59)
        {
          sqlite3_finalize(*v59);
          *uint64_t v48 = 0;
        }
LABEL_16:
        swift_release();
        return swift_bridgeObjectRelease();
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_100C86A78(uint64_t a1, sqlite3_stmt **a2, uint64_t a3, uint64_t a4, sqlite3_int64 a5)
{
  unint64_t v57 = a2;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (void *)((char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v15 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v14 = v15;
  id v16 = *(void (**)(void, __n128))(v10 + 104);
  unsigned int v58 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v59 = (void (*)(void *, void, uint64_t))v16;
  uint64_t v60 = v10 + 104;
  v16(v14, v12);
  id v17 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  unint64_t v65 = *(uint64_t (**)(void *, uint64_t))(v10 + 8);
  uint64_t result = v65(v14, v9);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  sqlite3_int64 v56 = a5;
  v54[1] = a3;
  unint64_t v55 = sub_100C8512C();
  uint64_t v20 = v19;
  uint64_t v63 = 0;
  unint64_t v64 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v21._uint64_t countAndFlagsBits = 0xD000000000000017;
  v21._object = (void *)0x800000010127E7E0;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x756C61765F79656BLL;
  v22._object = (void *)0xEE00617461645F65;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 10272;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 7955819;
  v24._object = (void *)0xE300000000000000;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 0x65756C6176;
  v26._object = (void *)0xE500000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 0x6E695F6172747865;
  v28._object = (void *)0xEA00000000006F66;
  String.append(_:)(v28);
  v29._object = (void *)0x800000010127E800;
  v29._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v29);
  uint64_t v30 = v63;
  uint64_t v31 = v64;
  type metadata accessor for SQLiteStatement();
  swift_allocObject();
  uint64_t v32 = swift_retain();
  uint64_t v33 = sub_10079FC40(v32, v30, v31);
  if (v5)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v34 = v33;
  swift_release();
  unint64_t v35 = v55;
  sub_10079DA60(v55, v20, 1);
  sub_10079D8A8(v56, 2);
  unint64_t v36 = v57;
  if (v57)
  {
    swift_retain();
    ((void (*)(uint64_t, uint64_t))v36)(v34, 3);
    sub_1005174AC((uint64_t)v36);
    goto LABEL_8;
  }
  unint64_t v37 = *(void **)(*(void *)(v34 + 16) + 32);
  *uint64_t v14 = v37;
  v59(v14, v58, v9);
  id v38 = v37;
  LOBYTE(v37) = _dispatchPreconditionTest(_:)();
  uint64_t result = v65(v14, v9);
  if (v37)
  {
    swift_beginAccess();
    sqlite3_bind_null(*(sqlite3_stmt **)(v34 + 24), 3);
LABEL_8:
    Swift::String v39 = *(void **)(*(void *)(v34 + 16) + 32);
    *uint64_t v14 = v39;
    v59(v14, v58, v9);
    id v40 = v39;
    LOBYTE(v39) = _dispatchPreconditionTest(_:)();
    uint64_t result = v65(v14, v9);
    if (v39)
    {
      id v41 = (void *)v20;
      uint64_t v42 = v35;
      unint64_t v57 = (sqlite3_stmt **)(v34 + 24);
      swift_beginAccess();
      int v43 = sqlite3_step(*(sqlite3_stmt **)(v34 + 24));
      if (v43 != 101)
      {
        int v47 = v43;
        unint64_t v61 = 0;
        unint64_t v62 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease();
        unint64_t v61 = 0xD00000000000002CLL;
        unint64_t v62 = 0x800000010127E820;
        v48._uint64_t countAndFlagsBits = v42;
        v48._object = v41;
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        unint64_t v49 = v61;
        unint64_t v50 = v62;
        sub_10079FF00();
        swift_allocError();
        *(_DWORD *)uint64_t v51 = v47;
        *(void *)(v51 + 8) = v49;
        *(void *)(v51 + 16) = v50;
        swift_willThrow();
        unint64_t v52 = *(void **)(*(void *)(v34 + 16) + 32);
        *uint64_t v14 = v52;
        v59(v14, v58, v9);
        id v53 = v52;
        LOBYTE(v52) = _dispatchPreconditionTest(_:)();
        uint64_t result = v65(v14, v9);
        if (v52)
        {
          if (*v57)
          {
            sqlite3_finalize(*v57);
            *(void *)(v34 + 24) = 0;
          }
          return swift_release();
        }
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      uint64_t v44 = *(void **)(*(void *)(v34 + 16) + 32);
      *uint64_t v14 = v44;
      v59(v14, v58, v9);
      id v45 = v44;
      LOBYTE(v44) = _dispatchPreconditionTest(_:)();
      uint64_t result = v65(v14, v9);
      if (v44)
      {
        unsigned int v46 = v57;
        if (*v57)
        {
          sqlite3_finalize(*v57);
          *unsigned int v46 = 0;
        }
        return swift_release();
      }
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_100C86FF0(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v64 = a6;
  uint64_t v59 = a5;
  uint64_t v54 = a2;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (void *)((char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v15 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v14 = v15;
  id v16 = *(void (**)(void, __n128))(v10 + 104);
  unsigned int v57 = enum case for DispatchPredicate.onQueue(_:);
  unsigned int v58 = (void (*)(void *, void, uint64_t))v16;
  v16(v14, v12);
  id v17 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  unint64_t v55 = *(uint64_t (**)(void *, uint64_t))(v10 + 8);
  uint64_t result = v55(v14, v9);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v53[2] = a3;
  v53[3] = v10 + 104;
  unint64_t v56 = sub_100C8512C();
  uint64_t v20 = v19;
  uint64_t v62 = 0;
  unint64_t v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v21._uint64_t countAndFlagsBits = 0xD000000000000017;
  v21._object = (void *)0x800000010127E7E0;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x756C61765F79656BLL;
  v22._object = (void *)0xEE00617461645F65;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 10272;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 7955819;
  v24._object = (void *)0xE300000000000000;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 0x65756C6176;
  v26._object = (void *)0xE500000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 0x6E695F6172747865;
  v28._object = (void *)0xEA00000000006F66;
  String.append(_:)(v28);
  v29._object = (void *)0x800000010127E800;
  v29._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v29);
  uint64_t v30 = v62;
  uint64_t v31 = v63;
  type metadata accessor for SQLiteStatement();
  swift_allocObject();
  uint64_t v32 = swift_retain();
  uint64_t v33 = sub_10079FC40(v32, v30, v31);
  if (v6)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    swift_release();
    return sub_100510084(v59, v64);
  }
  uint64_t v34 = v33;
  v53[1] = 0;
  swift_release();
  sub_10079DA60(v56, (uint64_t)v20, 1);
  sub_10079DCE4(v59, v64, 2);
  unint64_t v35 = v54;
  if (v54)
  {
    swift_retain();
    v35(v34, 3);
    sub_1005174AC((uint64_t)v35);
    unint64_t v36 = v55;
    goto LABEL_8;
  }
  unint64_t v37 = *(void **)(*(void *)(v34 + 16) + 32);
  *uint64_t v14 = v37;
  v58(v14, v57, v9);
  id v38 = v37;
  LOBYTE(v37) = _dispatchPreconditionTest(_:)();
  unint64_t v36 = v55;
  uint64_t result = v55(v14, v9);
  if (v37)
  {
    swift_beginAccess();
    sqlite3_bind_null(*(sqlite3_stmt **)(v34 + 24), 3);
LABEL_8:
    Swift::String v39 = *(void **)(*(void *)(v34 + 16) + 32);
    *uint64_t v14 = v39;
    v58(v14, v57, v9);
    id v40 = v39;
    LOBYTE(v39) = _dispatchPreconditionTest(_:)();
    uint64_t result = v36(v14, v9);
    if (v39)
    {
      unint64_t v55 = (uint64_t (*)(void *, uint64_t))(v34 + 24);
      swift_beginAccess();
      int v41 = sqlite3_step(*(sqlite3_stmt **)(v34 + 24));
      if (v41 != 101)
      {
        int v45 = v41;
        unint64_t v60 = 0;
        unint64_t v61 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease();
        unint64_t v60 = 0xD00000000000002CLL;
        unint64_t v61 = 0x800000010127E820;
        v46._uint64_t countAndFlagsBits = v56;
        v46._object = v20;
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        int v47 = v36;
        unint64_t v48 = v60;
        unint64_t v49 = v61;
        sub_10079FF00();
        swift_allocError();
        *(_DWORD *)uint64_t v50 = v45;
        *(void *)(v50 + 8) = v48;
        *(void *)(v50 + 16) = v49;
        swift_willThrow();
        uint64_t v51 = *(void **)(*(void *)(v34 + 16) + 32);
        *uint64_t v14 = v51;
        v58(v14, v57, v9);
        id v52 = v51;
        LOBYTE(v51) = _dispatchPreconditionTest(_:)();
        uint64_t result = v47(v14, v9);
        if (v51)
        {
          if (*(void *)v55)
          {
            sqlite3_finalize(*(sqlite3_stmt **)v55);
            *(void *)(v34 + 24) = 0;
          }
          goto LABEL_16;
        }
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void **)(*(void *)(v34 + 16) + 32);
      *uint64_t v14 = v42;
      v58(v14, v57, v9);
      id v43 = v42;
      LOBYTE(v42) = _dispatchPreconditionTest(_:)();
      uint64_t result = v36(v14, v9);
      if (v42)
      {
        uint64_t v44 = v55;
        if (*(void *)v55)
        {
          sqlite3_finalize(*(sqlite3_stmt **)v55);
          *uint64_t v44 = 0;
        }
        goto LABEL_16;
      }
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_100C8757C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (void *)((char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v13 = v14;
  Swift::String v15 = *(void (**)(void, __n128))(v9 + 104);
  unsigned int v39 = enum case for DispatchPredicate.onQueue(_:);
  id v40 = (void (*)(void *, void, uint64_t))v15;
  v15(v13, v11);
  id v16 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  int v41 = *(void (**)(void *, uint64_t))(v9 + 8);
  v41(v13, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  sub_100CE144C(a1, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload();
  unint64_t v17 = sub_100C8512C();
  uint64_t v19 = v18;
  sub_100CE14B4((uint64_t)v7, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v20 = swift_retain();
  Swift::String v21 = v42;
  uint64_t v22 = sub_10079FC40(v20, 0xD00000000000003ELL, 0x800000010127E270);
  if (v21)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v24 = v22;
  v38[1] = 0;
  swift_release();
  sub_10079DA60(v17, (uint64_t)v19, 1);
  Swift::String v25 = *(void **)(*(void *)(v24 + 16) + 32);
  void *v13 = v25;
  v40(v13, v39, v8);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  v41(v13, v8);
  if ((v25 & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v42 = (sqlite3_stmt **)(v24 + 24);
  swift_beginAccess();
  int v27 = sqlite3_step(*(sqlite3_stmt **)(v24 + 24));
  if (v27 == 101)
  {
    swift_bridgeObjectRelease();
    Swift::String v28 = *(void **)(*(void *)(v24 + 16) + 32);
    void *v13 = v28;
    v40(v13, v39, v8);
    id v29 = v28;
    LOBYTE(v28) = _dispatchPreconditionTest(_:)();
    v41(v13, v8);
    if (v28)
    {
      uint64_t v30 = v42;
      if (*v42)
      {
        sqlite3_finalize(*v42);
        *uint64_t v30 = 0;
      }
      return swift_release();
    }
    goto LABEL_17;
  }
  int v31 = v27;
  unint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  unint64_t v43 = 0xD000000000000021;
  unint64_t v44 = 0x800000010127E2B0;
  v32._uint64_t countAndFlagsBits = v17;
  v32._object = v19;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  unint64_t v33 = v43;
  unint64_t v34 = v44;
  sub_10079FF00();
  swift_allocError();
  *(_DWORD *)uint64_t v35 = v31;
  *(void *)(v35 + 8) = v33;
  *(void *)(v35 + 16) = v34;
  swift_willThrow();
  unint64_t v36 = *(void **)(*(void *)(v24 + 16) + 32);
  void *v13 = v36;
  v40(v13, v39, v8);
  id v37 = v36;
  LOBYTE(v36) = _dispatchPreconditionTest(_:)();
  v41(v13, v8);
  if ((v36 & 1) == 0) {
    goto LABEL_18;
  }
  if (*v42)
  {
    sqlite3_finalize(*v42);
    *(void *)(v24 + 24) = 0;
  }
  return swift_release();
}

uint64_t sub_100C87A34()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (void *)((char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v7 = v8;
  uint64_t v9 = *(void (**)(void, __n128))(v3 + 104);
  unsigned int v39 = enum case for DispatchPredicate.onQueue(_:);
  id v40 = (void (*)(void *, void, uint64_t))v9;
  v9(v7, v5);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  __n128 v11 = *(void (**)(void *, uint64_t))(v3 + 8);
  uint64_t v38 = v2;
  int v41 = v11;
  v11(v7, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v37 = sub_100C8512C();
  uint64_t v13 = v12;
  uint64_t v44 = 0;
  unint64_t v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v14 = swift_retain();
  uint64_t v15 = sub_10079FC40(v14, 0xD00000000000002ALL, 0x800000010127E760);
  if (v1)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = v15;
  v35[1] = 0;
  swift_release();
  uint64_t v18 = v37;
  sub_10079DA60(v37, (uint64_t)v13, 1);
  uint64_t v19 = *(void **)(*(void *)(v17 + 16) + 32);
  *uint64_t v7 = v19;
  uint64_t v20 = v38;
  v40(v7, v39, v38);
  id v21 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  v41(v7, v20);
  if ((v19 & 1) == 0) {
    goto LABEL_15;
  }
  unint64_t v36 = (sqlite3_stmt **)(v17 + 24);
  swift_beginAccess();
  int v22 = sqlite3_step(*(sqlite3_stmt **)(v17 + 24));
  if (v22 != 101)
  {
    int v27 = v22;
    unint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v42 = 0xD000000000000021;
    unint64_t v43 = 0x800000010127E2B0;
    v28._uint64_t countAndFlagsBits = v18;
    v28._object = v13;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    unint64_t v29 = v42;
    unint64_t v30 = v43;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v31 = v27;
    *(void *)(v31 + 8) = v29;
    *(void *)(v31 + 16) = v30;
    swift_willThrow();
    Swift::String v32 = *(void **)(*(void *)(v17 + 16) + 32);
    *uint64_t v7 = v32;
    uint64_t v33 = v38;
    v40(v7, v39, v38);
    id v34 = v32;
    LOBYTE(v32) = _dispatchPreconditionTest(_:)();
    v41(v7, v33);
    if (v32)
    {
      if (*v36)
      {
        sqlite3_finalize(*v36);
        *(void *)(v17 + 24) = 0;
      }
      return swift_release();
    }
LABEL_17:
    __break(1u);
  }
  swift_bridgeObjectRelease();
  Swift::String v23 = *(void **)(*(void *)(v17 + 16) + 32);
  *uint64_t v7 = v23;
  uint64_t v24 = v38;
  v40(v7, v39, v38);
  id v25 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  v41(v7, v24);
  if ((v23 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v26 = v36;
  if (*v36)
  {
    sqlite3_finalize(*v36);
    *id v26 = 0;
  }
  return swift_release();
}

uint64_t sub_100C87E68(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (uint64_t *)((char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v4, v7);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v9, v4);
  if (v10)
  {
    v13[0] = 0;
    v13[1] = 0;
    sub_100C85718(a1, 0, 0, v1, v13);
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    else {
      return v13[0];
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100C87FC0()
{
}

uint64_t sub_100C88014(sqlite3_int64 a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (uint64_t *)((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    sub_100C87A34();
    return 1;
  }
  uint64_t v14 = *(void **)(a3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t, __n128))(v9 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v8, v11);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v13, v8);
  if (v14)
  {
    sub_100C86A78(a4, 0, 0, a3, a1);
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100C88174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (sqlite3_int64 *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7, v10);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v12, v7);
  if (v13)
  {
    sqlite3_int64 v17 = 0;
    char v18 = 1;
    uint64_t result = sub_100C86044(a2, 0, 0, a1, &v17);
    if (!v3)
    {
      char v16 = v18;
      *(void *)a3 = v17;
      *(unsigned char *)(a3 + 8) = v16;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100C882DC()
{
}

uint64_t sub_100C88328(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (uint64_t *)((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2 >> 60 == 15)
  {
    sub_100C87A34();
    return 1;
  }
  id v14 = *(void **)(a3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t, __n128))(v9 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v8, v11);
  sub_1005FA2A0(a1, a2);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v13, v8);
  if (v14)
  {
    sub_1005FA2A0(a1, a2);
    sub_100C86FF0(a4, 0, 0, a3, a1, a2);
    sub_100514260(a1, a2);
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100C884D0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100C542E4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100C88504(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100C8D0CC(a1, a2, a3, (uint64_t)&unk_101528E98, (uint64_t)sub_100CE7448, (uint64_t)&unk_101528EB0);
}

uint64_t sub_100C8852C(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  swift_bridgeObjectRetain();
  sub_100546D30(v3, (uint64_t)v3, a2);

  swift_bridgeObjectRelease();
  sub_1005057FC(&qword_10167F0F0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C886FC(uint64_t a1)
{
  uint64_t v76 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v76, v3);
  id v80 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v6);
  unsigned int v71 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v82 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v74 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  id v14 = (char *)&v69 - v13;
  uint64_t v75 = v15;
  __chkstk_darwin(v16, v17);
  uint64_t v81 = (uint64_t)&v69 - v18;
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __n128 v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (uint64_t *)((char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v77 = v1;
  id v25 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t, __n128))(v20 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v19, v22);
  id v26 = v25;
  char v27 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v24, v19);
  if ((v27 & 1) == 0) {
    goto LABEL_36;
  }
  uint64_t v28 = *(void *)(a1 + 56);
  uint64_t v73 = a1 + 56;
  uint64_t v29 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v31 = v30 & v28;
  int64_t v78 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v70 = (void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  int64_t v32 = 0;
  long long v79 = xmmword_10117E810;
  int64_t v33 = v84;
  uint64_t v34 = (uint64_t)v80;
  while (1)
  {
    if (v31)
    {
      uint64_t v83 = (v31 - 1) & v31;
      unint64_t v35 = __clz(__rbit64(v31)) | (v32 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v32++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v32 >= v78) {
      return swift_release();
    }
    unint64_t v37 = *(void *)(v73 + 8 * v32);
    if (!v37) {
      break;
    }
LABEL_19:
    uint64_t v83 = (v37 - 1) & v37;
    unint64_t v35 = __clz(__rbit64(v37)) + (v32 << 6);
LABEL_20:
    uint64_t v39 = v81;
    sub_100CE144C(*(void *)(a1 + 48) + *(void *)(v82 + 72) * v35, v81, type metadata accessor for CRLBoardIdentifier);
    sub_100CE12D8(v39, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    uint64_t __src = UUID.uuid.getter();
    char v86 = v40;
    char v87 = v41;
    char v88 = v42;
    char v89 = v43;
    char v90 = v44;
    char v91 = v45;
    char v92 = v46;
    char v93 = v47;
    UUID.uuid.getter();
    uint64_t v48 = sub_100670608(&__src, 16);
    unint64_t v50 = v49;
    uint64_t v94 = v48;
    unint64_t v95 = v49;
    type metadata accessor for CRLBoardIdentifierStorage(0);
    uint64_t v51 = String.count.getter();
    int64_t v84 = v32;
    if (v51 >= 1)
    {
      id v52 = v71;
      static String.Encoding.utf8.getter();
      uint64_t v53 = String.data(using:allowLossyConversion:)();
      unint64_t v55 = v54;
      (*v70)(v52, v72);
      if (v55 >> 60 == 15)
      {
        sub_1007566F4();
        swift_allocError();
        *unint64_t v56 = 2;
        swift_willThrow();
        sub_100510084(v94, v95);
        goto LABEL_26;
      }
      Data.append(_:)();
      sub_100514260(v53, v55);
      uint64_t v48 = v94;
      unint64_t v50 = v95;
    }
    sub_100CE144C((uint64_t)v14, v34, type metadata accessor for CRLBoardIdentifier);
    swift_storeEnumTagMultiPayload();
    uint64_t v57 = v74;
    sub_100CE144C((uint64_t)v14, v74, type metadata accessor for CRLBoardIdentifier);
    unint64_t v58 = (*(unsigned __int8 *)(v82 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
    uint64_t v59 = swift_allocObject();
    sub_100CE12D8(v57, v59 + v58, type metadata accessor for CRLBoardIdentifier);
    sub_100510D4C(v48, v50);
    sub_100C86FF0(v34, (void (*)(uint64_t, uint64_t))sub_100CE7550, v59, v77, v48, v50);
    if (!v33)
    {
      swift_release();
      sub_100CE14B4(v34, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
      sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      sub_100510084(v48, v50);
      goto LABEL_6;
    }
    sub_100CE14B4(v34, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    swift_release();
    sub_100510084(v48, v50);
LABEL_26:
    uint64_t v60 = a1;
    if (qword_10166FB70 != -1) {
      swift_once();
    }
    swift_beginAccess();
    unint64_t v61 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v79;
    swift_getErrorValue();
    id v63 = v61;
    uint64_t v64 = Error.localizedDescription.getter();
    uint64_t v66 = v65;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = sub_100528BE4();
    *(void *)(inited + 32) = v64;
    *(void *)(inited + 40) = v66;
    uint64_t v67 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v63, (uint64_t)&_mh_execute_header, v67, (uint64_t)"Failed to add shared boards deleted offline to the database with error %@", 73, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    swift_errorRelease();
    sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    a1 = v60;
    int64_t v33 = 0;
    uint64_t v34 = (uint64_t)v80;
LABEL_6:
    int64_t v32 = v84;
    unint64_t v31 = v83;
  }
  int64_t v38 = v32 + 1;
  if (v32 + 1 >= v78) {
    return swift_release();
  }
  unint64_t v37 = *(void *)(v73 + 8 * v38);
  if (v37) {
    goto LABEL_18;
  }
  int64_t v38 = v32 + 2;
  if (v32 + 2 >= v78) {
    return swift_release();
  }
  unint64_t v37 = *(void *)(v73 + 8 * v38);
  if (v37)
  {
LABEL_18:
    int64_t v32 = v38;
    goto LABEL_19;
  }
  int64_t v38 = v32 + 3;
  if (v32 + 3 < v78)
  {
    unint64_t v37 = *(void *)(v73 + 8 * v38);
    if (!v37)
    {
      while (1)
      {
        int64_t v32 = v38 + 1;
        if (__OFADD__(v38, 1)) {
          break;
        }
        if (v32 >= v78) {
          return swift_release();
        }
        unint64_t v37 = *(void *)(v73 + 8 * v32);
        ++v38;
        if (v37) {
          goto LABEL_19;
        }
      }
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
    }
    goto LABEL_18;
  }
  return swift_release();
}

uint64_t sub_100C89054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a3 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  if (*v4) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4[1] == 0xE000000000000000;
  }
  if (v5)
  {
    uint64_t v6 = 49;
  }
  else if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    uint64_t v6 = 49;
  }
  else
  {
    uint64_t v6 = 48;
  }
  sub_10079DA60(v6, 0xE100000000000000, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100C890EC(uint64_t a1, uint64_t a2, char *a3)
{
  return sub_100C893D4(a1, a2, a3, (uint64_t)&unk_101528E48, (uint64_t)sub_100CE73F0, (uint64_t)&unk_101528E60);
}

void sub_100C89114()
{
}

uint64_t sub_100C892BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100CE144C(a2, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload();
  sub_100C87A34();
  sub_100CE14B4((uint64_t)v6, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  return 1;
}

uint64_t sub_100C893AC(uint64_t a1, uint64_t a2, char *a3)
{
  return sub_100C893D4(a1, a2, a3, (uint64_t)&unk_101528C90, (uint64_t)sub_100CE7300, (uint64_t)&unk_101528CA8);
}

uint64_t sub_100C893D4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v70 = a5;
  uint64_t v71 = a6;
  uint64_t v68 = a3;
  uint64_t v69 = a4;
  uint64_t v74 = a1;
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v67 - 8);
  __chkstk_darwin(v67, v8);
  uint64_t v66 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v65 - 8);
  __chkstk_darwin(v65, v11);
  uint64_t v64 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v13 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v14);
  uint64_t v63 = v15;
  uint64_t v62 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v60 = *(void *)(v16 - 8);
  __chkstk_darwin(v16 - 8, v17);
  unint64_t v58 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v18;
  __chkstk_darwin(v19, v20);
  uint64_t v57 = (uint64_t)&v49 - v21;
  uint64_t v22 = *(void *)(a2 + 56);
  uint64_t v49 = a2 + 56;
  uint64_t v23 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  uint64_t v56 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue;
  int64_t v50 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v55 = v13 + 16;
  uint64_t v61 = v13;
  uint64_t v54 = v13 + 32;
  uint64_t v53 = v79;
  id v52 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v51 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v73 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v27 = 0;
  uint64_t v28 = (uint64_t)v58;
  uint64_t v29 = v62;
  while (1)
  {
    if (v25)
    {
      unint64_t v30 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      int64_t v76 = v27;
      unint64_t v31 = v30 | (v27 << 6);
      goto LABEL_5;
    }
    int64_t v45 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v45 >= v50) {
      goto LABEL_21;
    }
    unint64_t v46 = *(void *)(v49 + 8 * v45);
    int64_t v47 = v27 + 1;
    if (!v46)
    {
      int64_t v47 = v27 + 2;
      if (v27 + 2 >= v50) {
        goto LABEL_21;
      }
      unint64_t v46 = *(void *)(v49 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v27 + 3;
        if (v27 + 3 >= v50) {
          goto LABEL_21;
        }
        unint64_t v46 = *(void *)(v49 + 8 * v47);
        if (!v46) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v25 = (v46 - 1) & v46;
    int64_t v76 = v47;
    unint64_t v31 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_5:
    uint64_t v32 = v60;
    uint64_t v33 = v57;
    sub_100CE144C(*(void *)(v73 + 48) + *(void *)(v60 + 72) * v31, v57, type metadata accessor for CRLBoardIdentifier);
    uint64_t v34 = v68;
    uint64_t v75 = *(void *)&v68[v56];
    sub_100CE12D8(v33, v28, type metadata accessor for CRLBoardIdentifier);
    uint64_t v35 = v61;
    uint64_t v36 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v29, v74, v72);
    unint64_t v37 = (*(unsigned __int8 *)(v32 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    unint64_t v38 = (v59 + *(unsigned __int8 *)(v35 + 80) + v37) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v34;
    sub_100CE12D8(v28, v39 + v37, type metadata accessor for CRLBoardIdentifier);
    (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v39 + v38, v29, v36);
    v79[2] = v70;
    v79[3] = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(void *)"";
    v79[0] = sub_100679958;
    v79[1] = v71;
    char v40 = _Block_copy(aBlock);
    id v41 = v34;
    char v42 = v64;
    static DispatchQoS.unspecified.getter();
    uint64_t v77 = _swiftEmptyArrayStorage;
    sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1005057FC((uint64_t *)&unk_1016725D0);
    sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
    char v44 = v66;
    uint64_t v43 = v67;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v40);
    (*v52)(v44, v43);
    (*v51)(v42, v65);
    uint64_t result = swift_release();
    int64_t v27 = v76;
  }
  uint64_t v48 = v27 + 4;
  if (v27 + 4 >= v50)
  {
LABEL_21:
    swift_release();
    return CheckedContinuation.resume(returning:)();
  }
  unint64_t v46 = *(void *)(v49 + 8 * v48);
  if (v46)
  {
    int64_t v47 = v27 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v47 >= v50) {
      goto LABEL_21;
    }
    unint64_t v46 = *(void *)(v49 + 8 * v47);
    ++v48;
    if (v46) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

void sub_100C89AD8()
{
}

uint64_t sub_100C89C80(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  v26[0] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v11 - 8);
  uint64_t v28 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __n128 v19 = __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[1] = *(void *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v20, a1, v15, v19);
  unint64_t v21 = (*(unsigned __int8 *)(v16 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = a3;
  *((void *)v22 + 3) = a2;
  *((void *)v22 + 4) = v26[0];
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v22[v21], v20, v15);
  aBlock[4] = sub_100CE8818;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = &unk_1015294C8;
  uint64_t v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  uint64_t v24 = a2;
  static DispatchQoS.unspecified.getter();
  unint64_t v30 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v28);
  return swift_release();
}

uint64_t sub_100C8A028(unint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v50 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v5 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t v58 = _swiftEmptyArrayStorage;
    sub_1006BB504(0, v5 & ~(v5 >> 63), 0);
    if (v50)
    {
      uint64_t v7 = __CocoaSet.startIndex.getter();
      unsigned __int8 v9 = 1;
    }
    else
    {
      uint64_t v7 = sub_1006678A4(a1);
      unsigned __int8 v9 = v10 & 1;
    }
    uint64_t v55 = v7;
    uint64_t v56 = v8;
    unsigned __int8 v57 = v9;
    if (v5 < 0)
    {
      __break(1u);
      swift_once();
      swift_beginAccess();
      uint64_t v35 = (void *)static OS_os_log.crlZoneRefetch;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E800;
      *(void *)(inited + 56) = &type metadata for UInt64;
      *(void *)(inited + 64) = &protocol witness table for UInt64;
      *(void *)(inited + 32) = a3;
      *(void *)(inited + 96) = &type metadata for String;
      unint64_t v37 = sub_100528BE4();
      *(void *)(inited + 104) = v37;
      *(void *)(inited + 72) = v5;
      *(void *)(inited + 80) = &v58;
      swift_getErrorValue();
      id v38 = v35;
      uint64_t v39 = Error.publicDescription.getter(v52, v53);
      *(void *)(inited + 136) = &type metadata for String;
      *(void *)(inited + 144) = v37;
      *(void *)(inited + 112) = v39;
      *(void *)(inited + 120) = v40;
      swift_getErrorValue();
      uint64_t v41 = Error.fullDescription.getter(v51);
      *(void *)(inited + 176) = &type metadata for String;
      *(void *)(inited + 184) = v37;
      *(void *)(inited + 152) = v41;
      *(void *)(inited + 160) = v42;
      uint64_t v43 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v38, (uint64_t)&_mh_execute_header, v43, (uint64_t)"Failed to addZonesToRefetch to the database with version: %d, zones: %@, error: %{public}@ <%@>", 95, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      uint64_t v55 = v3;
      sub_1005057FC(&qword_10167F0F0);
      return CheckedContinuation.resume(throwing:)();
    }
    else
    {
      while (1)
      {
        while (1)
        {
          uint64_t v17 = v55;
          uint64_t v16 = v56;
          uint64_t v18 = v57;
          sub_10066753C(v55, v56, v57, a1);
          uint64_t v20 = v19;
          id v21 = [v19 zoneName];
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;

          unint64_t v25 = v58;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1006BB504(0, *((void *)v25 + 2) + 1, 1);
            unint64_t v25 = v58;
          }
          unint64_t v28 = *((void *)v25 + 2);
          unint64_t v27 = *((void *)v25 + 3);
          if (v28 >= v27 >> 1)
          {
            uint64_t result = sub_1006BB504(v27 > 1, v28 + 1, 1);
            unint64_t v25 = v58;
          }
          *((void *)v25 + 2) = v28 + 1;
          uint64_t v29 = &v25[2 * v28];
          *((void *)v29 + 4) = v22;
          *((void *)v29 + 5) = v24;
          if (v50) {
            break;
          }
          uint64_t v11 = sub_100666C8C(v17, v16, v18, a1);
          uint64_t v13 = v12;
          char v15 = v14;
          sub_10056A4C4(v17, v16, v18);
          uint64_t v55 = v11;
          uint64_t v56 = v13;
          unsigned __int8 v57 = v15 & 1;
          if (!--v5) {
            goto LABEL_20;
          }
        }
        if ((v18 & 1) == 0) {
          break;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_1005057FC(&qword_101699868);
        unint64_t v30 = (void (*)(double **, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v30(&v54, 0);
        if (!--v5)
        {
LABEL_20:
          sub_10056A4C4(v55, v56, v57);
          uint64_t v6 = v58;
          goto LABEL_21;
        }
      }
      __break(1u);
    }
  }
  else
  {
LABEL_21:
    uint64_t v54 = v6;
    sub_1005057FC((uint64_t *)&unk_1016773F0);
    sub_100523288((unint64_t *)&qword_101672620, (uint64_t *)&unk_1016773F0);
    uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v34 = a2;
    swift_bridgeObjectRetain();
    sub_100546D5C(v34, (uint64_t)v34, a1, a3);

    swift_bridgeObjectRelease();
    if (qword_10166FA88 != -1) {
      swift_once();
    }
    swift_beginAccess();
    char v44 = (void *)static OS_os_log.crlZoneRefetch;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v45 = swift_initStackObject();
    *(_OWORD *)(v45 + 16) = xmmword_10117D8C0;
    *(void *)(v45 + 56) = &type metadata for UInt64;
    *(void *)(v45 + 64) = &protocol witness table for UInt64;
    *(void *)(v45 + 32) = a3;
    *(void *)(v45 + 96) = &type metadata for String;
    *(void *)(v45 + 104) = sub_100528BE4();
    *(void *)(v45 + 72) = v31;
    *(void *)(v45 + 80) = v33;
    id v46 = v44;
    uint64_t v47 = static os_log_type_t.default.getter();
    sub_100BAC898((uint64_t)v46, (uint64_t)&_mh_execute_header, v47, (uint64_t)"Succeeded addZonesToRefetch to the database with version: %d, zones: %@", 71, 2, v45);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    sub_1005057FC(&qword_10167F0F0);
    return CheckedContinuation.resume(returning:)();
  }
  return result;
}

uint64_t sub_100C8A5E0(unint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2;
  uint64_t v48 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v48, v4);
  uint64_t v49 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (void *)((char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = v2;
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t, __n128))(v7 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v6, v9);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
  if ((v12 & 1) == 0) {
LABEL_38:
  }
    __break(1u);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10050BF48(0, (unint64_t *)&qword_101674210);
    sub_10062E0F4((unint64_t *)&qword_101674218, (unint64_t *)&qword_101674210);
    Set.Iterator.init(_cocoa:)();
    a1 = (unint64_t)v52[1];
    char v44 = v52[2];
    uint64_t v14 = (uint64_t)v52[3];
    int64_t v15 = (int64_t)v52[4];
    unint64_t v16 = (unint64_t)v52[5];
  }
  else
  {
    uint64_t v17 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 56);
    char v44 = (void *)(a1 + 56);
    uint64_t v14 = ~v17;
    uint64_t v19 = -v17;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v16 = v20 & v18;
    swift_bridgeObjectRetain();
    int64_t v15 = 0;
  }
  v42[1] = v14;
  v42[3] = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v43 = (unint64_t)(v14 + 64) >> 6;
  void v42[2] = (char *)&type metadata for Swift.AnyObject + 8;
  if ((a1 & 0x8000000000000000) == 0) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v21 = __CocoaSet.Iterator.next()();
  uint64_t v22 = v49;
  if (!v21) {
    return sub_10052E1EC();
  }
  uint64_t v51 = v21;
  sub_10050BF48(0, (unint64_t *)&qword_101674210);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v23 = v52[0];
  swift_unknownObjectRelease();
  int64_t v24 = v15;
  uint64_t v25 = v16;
  if (!v23) {
    return sub_10052E1EC();
  }
  while (1)
  {
    unint64_t v45 = v16;
    *uint64_t v22 = v23;
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = self;
    v52[0] = 0;
    id v30 = v23;
    id v31 = [v29 archivedDataWithRootObject:v30 requiringSecureCoding:1 error:v52];
    id v32 = v52[0];
    if (!v31)
    {
      uint64_t v40 = v32;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100CE14B4((uint64_t)v22, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
      return sub_10052E1EC();
    }
    unint64_t v33 = a1;
    uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v46;
    sub_100510D4C(v34, v36);
    uint64_t v38 = v50;
    sub_100C86FF0((uint64_t)v22, (void (*)(uint64_t, uint64_t))sub_100CE85F8, v37, v47, v34, v36);
    uint64_t v50 = v38;
    if (v38) {
      break;
    }
    sub_100CE14B4((uint64_t)v22, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    swift_release();

    sub_100510084(v34, v36);
    int64_t v15 = v24;
    unint64_t v16 = v25;
    a1 = v33;
    if ((v33 & 0x8000000000000000) != 0) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v22 = v49;
    if (v16)
    {
      uint64_t v25 = (v16 - 1) & v16;
      unint64_t v26 = __clz(__rbit64(v16)) | (v15 << 6);
      int64_t v24 = v15;
    }
    else
    {
      int64_t v24 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        goto LABEL_38;
      }
      if (v24 >= v43) {
        return sub_10052E1EC();
      }
      unint64_t v27 = v44[v24];
      if (!v27)
      {
        int64_t v28 = v15 + 2;
        if (v15 + 2 >= v43) {
          return sub_10052E1EC();
        }
        unint64_t v27 = v44[v28];
        if (v27) {
          goto LABEL_21;
        }
        int64_t v28 = v15 + 3;
        if (v15 + 3 >= v43) {
          return sub_10052E1EC();
        }
        unint64_t v27 = v44[v28];
        if (v27)
        {
LABEL_21:
          int64_t v24 = v28;
        }
        else
        {
          int64_t v24 = v15 + 4;
          if (v15 + 4 >= v43) {
            return sub_10052E1EC();
          }
          unint64_t v27 = v44[v24];
          if (!v27)
          {
            uint64_t v39 = (char *)(v15 + 5);
            do
            {
              if ((char *)v43 == v39) {
                return sub_10052E1EC();
              }
              unint64_t v27 = v44[(void)v39++];
            }
            while (!v27);
            int64_t v24 = (int64_t)(v39 - 1);
          }
        }
      }
      uint64_t v25 = (v27 - 1) & v27;
      unint64_t v26 = __clz(__rbit64(v27)) + (v24 << 6);
    }
    id v23 = *(id *)(*(void *)(a1 + 48) + 8 * v26);
    if (!v23) {
      return sub_10052E1EC();
    }
  }

  swift_release();
  sub_100CE14B4((uint64_t)v22, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_10052E1EC();
  return sub_100510084(v34, v36);
}

uint64_t sub_100C8AD60(int a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  sub_10050BF48(0, (unint64_t *)&qword_101674210);
  sub_10062E0F4((unint64_t *)&qword_101674218, (unint64_t *)&qword_101674210);
  v4[5] = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = a4;
  return _swift_task_switch(sub_100C8AE50, 0, 0);
}

uint64_t sub_100C8AE50()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = v2;
  v4[3] = v1;
  v4[4] = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100C8AF4C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD00000000000001DLL, 0x800000010127F340, sub_100CE8734, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_100C8AF4C()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100C8B0F0;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100C8B068;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100C8B068()
{
  uint64_t v1 = *(void *)(v0 + 32);

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100C8B0F0()
{
  uint64_t v1 = *(void *)(v0 + 32);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 32));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100C8B2B0(uint64_t a1, void *a2, char *a3)
{
  unint64_t v35 = a2;
  uint64_t v36 = a1;
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v41 - 8);
  __chkstk_darwin(v41, v5);
  uint64_t v40 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v39 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  uint64_t v14 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14, v14);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  *(uint64_t *)((char *)&v34 - v20) = (uint64_t)a2;
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v38 = (uint64_t)&v34 - v20;
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = *(void *)&a3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_100CE144C((uint64_t)v21, (uint64_t)v17, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v10);
  unint64_t v22 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v23 = (v16 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (*(unsigned __int8 *)(v11 + 80) + v23 + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a3;
  sub_100CE12D8((uint64_t)v17, v25 + v22, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  unint64_t v26 = v35;
  *(void *)(v25 + v23) = v35;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v25 + v24, (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_100CE84D8;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = &unk_1015293D8;
  unint64_t v27 = _Block_copy(aBlock);
  id v28 = v26;
  uint64_t v29 = a3;
  id v30 = v39;
  static DispatchQoS.unspecified.getter();
  unint64_t v45 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  id v32 = v40;
  uint64_t v31 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v31);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v43);
  sub_100CE14B4(v38, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  return swift_release();
}

uint64_t sub_100C8B78C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1009400C8((uint64_t (*)(uint64_t))sub_100CE85BC);
  if (qword_10166FA88 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = (void *)static OS_os_log.crlZoneRefetch;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  id v6 = v4;
  id v7 = [a3 zoneName];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  *(void *)(inited + 32) = v8;
  *(void *)(inited + 40) = v10;
  uint64_t v11 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v6, (uint64_t)&_mh_execute_header, v11, (uint64_t)"Succeeded removeZoneToRefetch to the database with zone: %@", 59, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  sub_1005057FC(&qword_10167F0F0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C8BC34(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_100C8BCC0, 0, 0);
}

uint64_t sub_100C8BCC0()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100C8BDAC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000017, 0x800000010127F280, sub_100CE82F8, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100C8BDAC()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100CEA9C4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100CEAA98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100C8BEC8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v49 = a1;
  uint64_t v55 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v58 = *(void *)(v55 - 8);
  __chkstk_darwin(v55, v5);
  uint64_t v54 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v56 = *(void *)(v7 - 8);
  uint64_t v57 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v53 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v10 = *(void *)(v48 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v48, v12);
  uint64_t v47 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  uint64_t v46 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v46 + 64);
  __chkstk_darwin(v13, v15);
  uint64_t v43 = (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v43 - v18;
  __chkstk_darwin(v20, v21);
  unint64_t v23 = (uint64_t *)((char *)&v43 - v22);
  __chkstk_darwin(v24, v25);
  unint64_t v27 = (char *)&v43 - v26;
  uint64_t v44 = (void *)a2;
  *(uint64_t *)((char *)&v43 - v26) = a2;
  uint64_t v52 = (uint64_t)&v43 - v26;
  swift_storeEnumTagMultiPayload();
  uint64_t *v23 = a2;
  uint64_t v50 = v23;
  swift_storeEnumTagMultiPayload();
  id v45 = a3;
  uint64_t v51 = *(void *)&a3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_100CE144C((uint64_t)v27, (uint64_t)v19, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_100CE144C((uint64_t)v23, (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  id v28 = v47;
  uint64_t v29 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v47, v49, v48);
  uint64_t v30 = *(unsigned __int8 *)(v46 + 80);
  uint64_t v31 = (v30 + 32) & ~v30;
  uint64_t v32 = (v14 + v30 + v31) & ~v30;
  unint64_t v33 = (v14 + *(unsigned __int8 *)(v10 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a3;
  unint64_t v35 = v44;
  *(void *)(v34 + 24) = v44;
  sub_100CE12D8((uint64_t)v19, v34 + v31, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_100CE12D8(v43, v34 + v32, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v34 + v33, v28, v29);
  aBlock[4] = sub_100CE80E8;
  aBlock[5] = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101529310;
  uint64_t v36 = _Block_copy(aBlock);
  id v37 = v35;
  id v38 = v45;
  uint64_t v39 = v53;
  static DispatchQoS.unspecified.getter();
  uint64_t v59 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  uint64_t v40 = v54;
  uint64_t v41 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v36);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v39, v57);
  sub_100CE14B4((uint64_t)v50, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_100CE14B4(v52, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  return swift_release();
}

uint64_t sub_100C8C46C()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C8C634(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)sub_1002094A4();
  uint64_t v5 = sub_100C489C4(v4);
  if (!v2)
  {
    char v6 = sub_1006E5068(a2, v5);
    swift_bridgeObjectRelease();
    if (v6)
    {
      if (qword_10166FA88 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v7 = (void *)static OS_os_log.crlZoneRefetch;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v9 = v7;
      id v10 = [a2 zoneName];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v11;
      *(void *)(inited + 40) = v13;
      uint64_t v14 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v9, (uint64_t)&_mh_execute_header, v14, (uint64_t)"Removing zone to refetch after successful refetch: %@", 53, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      sub_100C87A34();
    }
    else
    {
      if (qword_10166FA88 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v15 = (void *)static OS_os_log.crlZoneRefetch;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v16 = swift_initStackObject();
      *(_OWORD *)(v16 + 16) = xmmword_10117E810;
      id v17 = v15;
      id v18 = [a2 zoneName];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      *(void *)(v16 + 56) = &type metadata for String;
      *(void *)(v16 + 64) = sub_100528BE4();
      *(void *)(v16 + 32) = v19;
      *(void *)(v16 + 40) = v21;
      uint64_t v22 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v17, (uint64_t)&_mh_execute_header, v22, (uint64_t)"Not removing zone to refetch, since it still needs to be refetched: %@", 70, 2, v16);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();
    }
    uint64_t v23 = sub_100C49494();
    char v24 = sub_1006E5068(a2, v23);
    swift_bridgeObjectRelease();
    if (v24)
    {
      if (qword_10166FA88 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v25 = (void *)static OS_os_log.crlZoneRefetch;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v26 = swift_initStackObject();
      *(_OWORD *)(v26 + 16) = xmmword_10117E810;
      id v27 = v25;
      id v28 = [a2 zoneName];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      *(void *)(v26 + 56) = &type metadata for String;
      *(void *)(v26 + 64) = sub_100528BE4();
      *(void *)(v26 + 32) = v29;
      *(void *)(v26 + 40) = v31;
      uint64_t v32 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v27, (uint64_t)&_mh_execute_header, v32, (uint64_t)"Removing unsupported zone to refetch after successful refetch: %@", 65, 2, v26);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      sub_100C87A34();
    }
    else
    {
      if (qword_10166FA88 != -1) {
        swift_once();
      }
      swift_beginAccess();
      unint64_t v33 = (void *)static OS_os_log.crlZoneRefetch;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v34 = swift_initStackObject();
      *(_OWORD *)(v34 + 16) = xmmword_10117E810;
      id v35 = v33;
      id v36 = [a2 zoneName];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;

      *(void *)(v34 + 56) = &type metadata for String;
      *(void *)(v34 + 64) = sub_100528BE4();
      *(void *)(v34 + 32) = v37;
      *(void *)(v34 + 40) = v39;
      uint64_t v40 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v35, (uint64_t)&_mh_execute_header, v40, (uint64_t)"Not removing unsupported zone to refetch (it may not exist, or maybe it still needs to be refetched): %@", 104, 2, v34);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();
    }
  }
  return 1;
}

uint64_t sub_100C8CD04(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_100C8CD90, 0, 0);
}

uint64_t sub_100C8CD90()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100C8CE7C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD00000000000002FLL, 0x800000010126BBF0, sub_100A64720, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100C8CE7C()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100C8D01C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100C8CF98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100C8CF98()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);

  (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100C8D01C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 24);

  swift_task_dealloc();
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

  _Block_release(*(const void **)(v0 + 32));
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100C8D0CC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a6;
  uint64_t v29 = a3;
  uint64_t v30 = a5;
  v28[1] = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v12 - 8);
  uint64_t v34 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __n128 v20 = __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v21, a1, v16, v20);
  unint64_t v22 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v29;
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v23 + v22, v21, v16);
  aBlock[4] = v30;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = v32;
  uint64_t v25 = _Block_copy(aBlock);
  uint64_t v26 = a2;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  id v36 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v34);
  return swift_release();
}

uint64_t sub_100C8D460(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  swift_bridgeObjectRetain();
  sub_100547070(v3, (uint64_t)v3, a2);

  swift_bridgeObjectRelease();
  sub_1005057FC(&qword_10167F0F0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C8D630(unint64_t a1)
{
  uint64_t v46 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v46, v3);
  uint64_t v5 = (void *)((char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (void *)((char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v45 = v1;
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t, __n128))(v7 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v6, v9);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
  if ((v12 & 1) == 0) {
LABEL_40:
  }
    __break(1u);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10050BF48(0, (unint64_t *)&qword_101674210);
    sub_10062E0F4((unint64_t *)&qword_101674218, (unint64_t *)&qword_101674210);
    Set.Iterator.init(_cocoa:)();
    a1 = (unint64_t)v50[1];
    uint64_t v44 = v50[2];
    id v14 = v50[3];
    int64_t v15 = (int64_t)v50[4];
    unint64_t v16 = (unint64_t)v50[5];
  }
  else
  {
    uint64_t v17 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v44 = (void *)(a1 + 56);
    uint64_t v19 = ~v17;
    uint64_t v20 = -v17;
    if (v20 < 64) {
      uint64_t v21 = ~(-1 << v20);
    }
    else {
      uint64_t v21 = -1;
    }
    unint64_t v16 = v21 & v18;
    swift_bridgeObjectRetain();
    id v14 = (id)v19;
    int64_t v15 = 0;
  }
  v42[1] = v14;
  v42[3] = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v43 = ((unint64_t)v14 + 64) >> 6;
  void v42[2] = (char *)&type metadata for Swift.AnyObject + 8;
  unint64_t v47 = v16;
  if ((a1 & 0x8000000000000000) == 0) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v22 = __CocoaSet.Iterator.next()();
  if (!v22) {
    return sub_10052E1EC();
  }
  uint64_t v49 = v22;
  sub_10050BF48(0, (unint64_t *)&qword_101674210);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v23 = v50[0];
  swift_unknownObjectRelease();
  if (!v23) {
    return sub_10052E1EC();
  }
  while (1)
  {
    unint64_t v30 = a1;
    *uint64_t v5 = v23;
    swift_storeEnumTagMultiPayload();
    uint64_t v31 = self;
    v50[0] = 0;
    id v32 = v23;
    id v33 = [v31 archivedDataWithRootObject:v32 requiringSecureCoding:1 error:v50];
    id v34 = v50[0];
    if (!v33)
    {
      uint64_t v40 = v34;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
      return sub_10052E1EC();
    }
    uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v37 = v36;

    sub_100510D4C(v35, v37);
    uint64_t v38 = v48;
    sub_100C86FF0((uint64_t)v5, (void (*)(uint64_t, uint64_t))sub_100C8E1D0, 0, v45, v35, v37);
    uint64_t v48 = v38;
    if (v38) {
      break;
    }
    sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);

    sub_100510084(v35, v37);
    a1 = v30;
    unint64_t v47 = v16;
    if ((v30 & 0x8000000000000000) != 0) {
      goto LABEL_9;
    }
LABEL_12:
    if (v16)
    {
      unint64_t v24 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v25 = v24 | (v15 << 6);
    }
    else
    {
      int64_t v26 = v15;
      if (__OFADD__(v15++, 1))
      {
        __break(1u);
        goto LABEL_40;
      }
      if (v15 >= v43) {
        return sub_10052E1EC();
      }
      unint64_t v28 = v44[v15];
      if (!v28)
      {
        int64_t v29 = v15 + 1;
        if (v15 + 1 >= v43) {
          return sub_10052E1EC();
        }
        unint64_t v28 = v44[v29];
        if (v28) {
          goto LABEL_21;
        }
        int64_t v29 = v15 + 2;
        if (v15 + 2 >= v43) {
          return sub_10052E1EC();
        }
        unint64_t v28 = v44[v29];
        if (v28)
        {
LABEL_21:
          int64_t v15 = v29;
        }
        else
        {
          v15 += 3;
          if (v15 >= v43) {
            return sub_10052E1EC();
          }
          unint64_t v28 = v44[v15];
          if (!v28)
          {
            int64_t v39 = v26 + 5;
            do
            {
              if (v43 == v39) {
                return sub_10052E1EC();
              }
              unint64_t v28 = v44[v39++];
            }
            while (!v28);
            int64_t v15 = v39 - 1;
          }
        }
      }
      unint64_t v16 = (v28 - 1) & v28;
      unint64_t v25 = __clz(__rbit64(v28)) + (v15 << 6);
    }
    id v23 = *(id *)(*(void *)(a1 + 48) + 8 * v25);
    if (!v23) {
      return sub_10052E1EC();
    }
  }

  sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_10052E1EC();
  return sub_100510084(v35, v37);
}

uint64_t sub_100C8DD90(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  sub_10050BF48(0, (unint64_t *)&qword_101674210);
  sub_10062E0F4((unint64_t *)&qword_101674218, (unint64_t *)&qword_101674210);
  v3[4] = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = a3;
  return _swift_task_switch(sub_100C8DE80, 0, 0);
}

uint64_t sub_100C8DE80()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100C8DF78;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000020, 0x800000010127F040, sub_100CE7C9C, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100C8DF78()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100C8E11C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100C8E094;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100C8E094()
{
  uint64_t v1 = *(void *)(v0 + 24);

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 24));
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100C8E11C()
{
  uint64_t v1 = *(void *)(v0 + 24);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 24));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100C8E1D0(uint64_t a1, uint64_t a2)
{
  sqlite3_int64 v3 = sub_1002094A4();
  return sub_10079D8A8(v3, a2);
}

uint64_t sub_100C8E2F8(uint64_t a1, void *a2, char *a3)
{
  id v32 = a2;
  uint64_t v33 = a1;
  uint64_t v37 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v5);
  unint64_t v36 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v35 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  uint64_t v14 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14, v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v32 - v20;
  *(id *)((char *)&v32 - v20) = a2;
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = *(void *)&a3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_100CE144C((uint64_t)v21, (uint64_t)v17, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v33, v10);
  unint64_t v22 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v23 = (v16 + *(unsigned __int8 *)(v11 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a3;
  sub_100CE12D8((uint64_t)v17, v24 + v22, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v24 + v23, (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_100CE7BA8;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101529180;
  unint64_t v25 = _Block_copy(aBlock);
  id v26 = v32;
  id v27 = a3;
  unint64_t v28 = v35;
  static DispatchQoS.unspecified.getter();
  uint64_t v41 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  unint64_t v30 = v36;
  uint64_t v29 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v29);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v39);
  sub_100CE14B4((uint64_t)v21, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  return swift_release();
}

uint64_t sub_100C8E7BC()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C8EAFC(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_100C8EB88, 0, 0);
}

uint64_t sub_100C8EB88()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  void *v2 = v0;
  v2[1] = sub_100C8BDAC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000022, 0x800000010127EFC0, sub_100CE79DC, v1, (char *)&type metadata for () + 8);
}

void sub_100C8EC74()
{
}

uint64_t sub_100C8ECC0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v62 = a2;
  uint64_t v63 = a1;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char **)((char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  void *v12 = v13;
  uint64_t v14 = *(void (**)(void, __n128))(v8 + 104);
  unsigned int v64 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v65 = (void (*)(void *, void, uint64_t))v14;
  v14(v12, v10);
  id v15 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t v66 = *(void (**)(void *, uint64_t))(v8 + 8);
  v66(v12, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v61 = a3;
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v16._uint64_t countAndFlagsBits = 0xD000000000000016;
  v16._object = (void *)0x800000010127DB70;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 0x737465737361;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 10272;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0x75755F7465737361;
  v19._object = (void *)0xEA00000000006469;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = 0x6F69736E65747865;
  v21._object = (void *)0xE90000000000006ELL;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v23._object = (void *)0xEE00657461645F65;
  String.append(_:)(v23);
  v24._object = (void *)0x800000010127DB90;
  v24._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v24);
  uint64_t v25 = v69;
  uint64_t v26 = v70;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v27 = swift_retain();
  uint64_t v28 = sub_10079FC40(v27, v25, v26);
  uint64_t v29 = v5;
  uint64_t v30 = v28;
  uint64_t result = swift_release();
  if (v4) {
    return result;
  }
  uint64_t v59 = v29;
  uint64_t v32 = UUID.crl_data()();
  unint64_t v34 = v33;
  sub_10079DCE4(v32, v33, 1);
  sub_100510084(v32, v34);
  if (!v61) {
    goto LABEL_8;
  }
  unint64_t v35 = HIBYTE(v61) & 0xF;
  if ((v61 & 0x2000000000000000) == 0) {
    unint64_t v35 = v62 & 0xFFFFFFFFFFFFLL;
  }
  if (v35)
  {
    sub_10079DA60(v62, v61, 2);
  }
  else
  {
LABEL_8:
    unint64_t v36 = *(void **)(*(void *)(v30 + 16) + 32);
    void *v12 = v36;
    v65(v12, v64, v7);
    id v37 = v36;
    LOBYTE(v36) = _dispatchPreconditionTest(_:)();
    v66(v12, v7);
    if ((v36 & 1) == 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    swift_beginAccess();
    sqlite3_bind_null(*(sqlite3_stmt **)(v30 + 24), 2);
  }
  uint64_t v38 = *(void **)(*(void *)(v30 + 16) + 32);
  void *v12 = v38;
  v65(v12, v64, v7);
  id v39 = v38;
  LOBYTE(v38) = _dispatchPreconditionTest(_:)();
  v66(v12, v7);
  if ((v38 & 1) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  swift_beginAccess();
  uint64_t v40 = sqlite3_step(*(sqlite3_stmt **)(v30 + 24));
  uint64_t v60 = (sqlite3_stmt **)(v30 + 24);
  if (v40 == 101)
  {
    uint64_t v41 = v59;
    uint64_t v58 = *(void *)&v59[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v58 + 16));
    uint64_t v42 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
    int64_t v43 = *(void **)&v41[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
    if (v43)
    {
      id v44 = *(id *)&v41[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
      goto LABEL_17;
    }
LABEL_16:
    id v50 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
    uint64_t v57 = v41;
    id v51 = sub_100EAFDE4((uint64_t)v57);

    uint64_t v57 = *(char **)&v41[v42];
    *(void *)&v41[v42] = v51;
    id v44 = v51;

    int64_t v43 = 0;
LABEL_17:
    uint64_t v52 = *(os_unfair_lock_s **)(v58 + 16);
    id v53 = v43;
    os_unfair_lock_unlock(v52);
    sub_100EA6A00(v63, v62, v61);

    uint64_t v54 = *(void **)(*(void *)(v30 + 16) + 32);
    void *v12 = v54;
    v65(v12, v64, v7);
    id v55 = v54;
    LOBYTE(v54) = _dispatchPreconditionTest(_:)();
    v66(v12, v7);
    if (v54) {
      goto LABEL_18;
    }
LABEL_25:
    __break(1u);
  }
  uint64_t v42 = v40;
  unint64_t v67 = 0;
  unint64_t v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  unint64_t v67 = 0xD00000000000002ALL;
  unint64_t v68 = 0x800000010127DBB0;
  type metadata accessor for UUID();
  sub_100CDE0D8(&qword_101677460, (void (*)(uint64_t))&type metadata accessor for UUID);
  v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  unint64_t v46 = v67;
  uint64_t v41 = (char *)v68;
  sub_10079FF00();
  swift_allocError();
  *(_DWORD *)uint64_t v47 = v42;
  *(void *)(v47 + 8) = v46;
  *(void *)(v47 + 16) = v41;
  swift_willThrow();
  uint64_t v48 = *(void **)(*(void *)(v30 + 16) + 32);
  void *v12 = v48;
  v65(v12, v64, v7);
  id v49 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)();
  v66(v12, v7);
  if ((v48 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
LABEL_18:
  uint64_t v56 = v60;
  if (*v60)
  {
    sqlite3_finalize(*v60);
    *uint64_t v56 = 0;
  }
  return swift_release();
}

uint64_t sub_100C8F520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v36 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v38 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __n128 v18 = __chkstk_darwin(v14, v17);
  Swift::String v19 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v19, a1, v14, v18);
  unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v22 + v20, v19, v14);
  Swift::String v23 = (void *)(v22 + v21);
  uint64_t v24 = v32;
  void *v23 = v31;
  v23[1] = v24;
  uint64_t v25 = (void *)(v22 + ((v21 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v26 = v34;
  *uint64_t v25 = v33;
  v25[1] = v26;
  aBlock[4] = sub_100CE6B3C;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528AC8;
  uint64_t v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v28 = v5;
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  uint64_t v29 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v29);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v38);
  return swift_release();
}

uint64_t sub_100C8F8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  return a5(0, 0);
}

uint64_t sub_100C8FACC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100C8FB00(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100C8FB00(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v8 = v9;
  uint64_t v10 = *(void (**)(void))(v5 + 104);
  unsigned int v49 = enum case for DispatchPredicate.onQueue(_:);
  id v50 = (void (*)(void *, void, uint64_t))v10;
  v10(v8);
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v47 = a1;
  uint64_t v48 = v12;
  uint64_t v51 = 0;
  unint64_t v52 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v51 = 0x205443454C4553;
  unint64_t v52 = 0xE700000000000000;
  v13._uint64_t countAndFlagsBits = sub_100CDFDDC(0, 0xE000000000000000);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x204D4F524620;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0x737465737361;
  v15._object = (void *)0xE600000000000000;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0x2820455245485720;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 0x75755F7465737361;
  v17._object = (void *)0xEA00000000006469;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0x293F203D20;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  uint64_t v19 = v51;
  uint64_t v20 = v52;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v21 = swift_retain();
  uint64_t v22 = sub_10079FC40(v21, v19, v20);
  if (!v2)
  {
    uint64_t v30 = v22;
    swift_release();
    uint64_t v31 = UUID.crl_data()();
    unint64_t v33 = v32;
    sub_10079DCE4(v31, v32, 1);
    sub_100510084(v31, v33);
    uint64_t v34 = *(void **)(*(void *)(v30 + 16) + 32);
    *uint64_t v8 = v34;
    v50(v8, v49, v4);
    id v35 = v34;
    LOBYTE(v34) = _dispatchPreconditionTest(_:)();
    uint64_t v36 = v48;
    v48(v8, v4);
    if (v34)
    {
      type metadata accessor for SQLiteRowIterator();
      uint64_t inited = (void *)swift_initStackObject();
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v30;
      inited[3] = 0;
      swift_retain();
      uint64_t v38 = sub_10079ECE0();
      if (!v38)
      {
        swift_release();
        swift_setDeallocating();
        sub_1007A0344(inited[3], inited[4], inited[5]);
        Swift::String v45 = *(void **)(*(void *)(v30 + 16) + 32);
        *uint64_t v8 = v45;
        v50(v8, v49, v4);
        id v46 = v45;
        LOBYTE(v45) = _dispatchPreconditionTest(_:)();
        v36(v8, v4);
        if (v45)
        {
          uint64_t v42 = (void *)(v30 + 24);
          swift_beginAccess();
          uint64_t v26 = 0;
          int64_t v43 = *(sqlite3_stmt **)(v30 + 24);
          if (!v43) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }
LABEL_19:
        __break(1u);
      }
      uint64_t v26 = sub_100CDFF28(v38, 0);
      swift_release();
      swift_setDeallocating();
      sub_1007A0344(inited[3], inited[4], inited[5]);
      uint64_t v39 = *(void **)(*(void *)(v30 + 16) + 32);
      *uint64_t v8 = v39;
      v50(v8, v49, v4);
      id v40 = v39;
      char v41 = _dispatchPreconditionTest(_:)();
      v36(v8, v4);
      if (v41)
      {
        uint64_t v42 = (void *)(v30 + 24);
        swift_beginAccess();
        int64_t v43 = *(sqlite3_stmt **)(v30 + 24);
        if (!v43)
        {
LABEL_10:
          swift_release();
          return v26;
        }
LABEL_9:
        sqlite3_finalize(v43);
        *uint64_t v42 = 0;
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_release();
  if (qword_10166FB70 != -1) {
LABEL_16:
  }
    swift_once();
  swift_beginAccess();
  Swift::String v23 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v24 = swift_initStackObject();
  *(_OWORD *)(v24 + 16) = xmmword_10117E810;
  swift_getErrorValue();
  id v25 = v23;
  uint64_t v26 = Error.localizedDescription.getter();
  uint64_t v28 = v27;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_100528BE4();
  *(void *)(v24 + 32) = v26;
  *(void *)(v24 + 40) = v28;
  uint64_t v29 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v25, (uint64_t)&_mh_execute_header, v29, (uint64_t)"Failed to fetch an asset with error %@", 38, 2, v24);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  swift_willThrow();
  return v26;
}

uint64_t sub_100C900F4(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v29 = a1;
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v4);
  unint64_t v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v30 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005057FC(&qword_101699770);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  Swift::String v13 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  Swift::String v18 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v28, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v29, v9);
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v20 = (v16 + *(unsigned __int8 *)(v10 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v21 + v19, v18, v14);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v21 + v20, v13, v9);
  aBlock[4] = sub_100CE6D88;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528B18;
  uint64_t v22 = _Block_copy(aBlock);
  Swift::String v23 = a2;
  uint64_t v24 = v30;
  static DispatchQoS.unspecified.getter();
  uint64_t v37 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  uint64_t v26 = v32;
  uint64_t v25 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v35);
  return swift_release();
}

uint64_t sub_100C9055C(uint64_t a1, uint64_t a2)
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C905E4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v35 = a3;
  uint64_t v36 = a1;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v6);
  char v41 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v37 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005057FC(&qword_101699770);
  uint64_t v34 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  uint64_t v15 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __n128 v20 = __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v21, v35, v16, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v36, v11);
  unint64_t v22 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v23 = (v18 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (*(unsigned __int8 *)(v12 + 80) + v23 + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v25 + v22, v21, v16);
  uint64_t v26 = (void *)(v25 + v23);
  uint64_t v27 = v40;
  *uint64_t v26 = v39;
  v26[1] = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v25 + v24, v15, v34);
  aBlock[4] = sub_100CE6954;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101528A78;
  uint64_t v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  uint64_t v29 = a2;
  uint64_t v30 = v37;
  static DispatchQoS.unspecified.getter();
  id v46 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  unint64_t v32 = v41;
  uint64_t v31 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v31);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v44);
  return swift_release();
}

uint64_t sub_100C90A74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100C90B04(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v8 = sub_100C8FB00(a1);
  if (v3) {
    return v4;
  }
  uint64_t v4 = v8;
  if (v8)
  {
    uint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension + 8);
    if (!v10)
    {
      if (!a3) {
        return v4;
      }
LABEL_22:
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_ensureAssetDatabaseRowExists(assetUUID:fileExtension:)", 55, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 6850, (uint64_t)"Mismatching file extensions for asset inside of ensureAssetDatabaseRowExists!", 77, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_ensureAssetDatabaseRowExists(assetUUID:fileExtension:)", 55, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 6850);
      return v4;
    }
    if (!a3) {
      goto LABEL_22;
    }
    BOOL v11 = *(void *)(v8 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension) == a2 && v10 == a3;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_22;
    }
  }
  else
  {
    sub_100C8ECC0(a1, a2, a3);
    uint64_t v12 = sub_100C8FB00(a1);
    uint64_t v4 = v12;
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension + 8);
      if (v13)
      {
        if (a3)
        {
          BOOL v14 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension) == a2 && v13 == a3;
          if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return v4;
          }
        }
      }
      else if (!a3)
      {
        return v4;
      }
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_ensureAssetDatabaseRowExists(assetUUID:fileExtension:)", 55, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 6857, (uint64_t)"Mismatching file extensions for asset inside of ensureAssetDatabaseRowExists (even after just creating it)!", 107, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_ensureAssetDatabaseRowExists(assetUUID:fileExtension:)", 55, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 6857);
      return v4;
    }
    if (qword_10166FB70 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v15 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    id v17 = v15;
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v20 = v19;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = sub_100528BE4();
    *(void *)(inited + 32) = v18;
    *(void *)(inited + 40) = v20;
    uint64_t v21 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v17, (uint64_t)&_mh_execute_header, v21, (uint64_t)"Failed to _ensureAssetDatabaseRowExists for asset: %{public}@", 61, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    return 0;
  }
  return v4;
}

BOOL sub_100C90E50(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v162 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v148 = (uint64_t)&v143 - v9;
  __chkstk_darwin(v10, v11);
  unsigned __int8 v147 = (char *)&v143 - v12;
  __chkstk_darwin(v13, v14);
  uint64_t v167 = (sqlite3_stmt **)((char *)&v143 - v15);
  uint64_t v16 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v151 = (char *)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  unint64_t v22 = (char *)&v143 - v21;
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  __n128 v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (uint64_t *)((char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v163 = v1;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v1
                                                                  + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v28 = v29;
  uint64_t v30 = *(void (**)(void, __n128))(v24 + 104);
  unsigned int v170 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v166 = v24 + 104;
  uint64_t v169 = (void (*)(void *, uint64_t, uint64_t))v30;
  v30(v28, v26);
  id v31 = v29;
  char v32 = _dispatchPreconditionTest(_:)();
  uint64_t v33 = *(void (**)(void *, uint64_t))(v24 + 8);
  uint64_t v165 = v23;
  uint64_t v168 = v24 + 8;
  v33(v28, v23);
  if ((v32 & 1) == 0)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v34 = *(void *)(a1 + 16);
  if (!v34) {
    return 1;
  }
  uint64_t v159 = v33;
  uint64_t v145 = v6;
  uint64_t v164 = v3;
  uint64_t v161 = a1;
  uint64_t v181 = sub_100C37E4C(63, 0xE100000000000000, v34);
  sub_1005057FC((uint64_t *)&unk_1016773F0);
  sub_100523288((unint64_t *)&qword_101672620, (uint64_t *)&unk_1016773F0);
  uint64_t v35 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  uint64_t v181 = 0;
  unint64_t v182 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  uint64_t v181 = (double *)0xD000000000000034;
  unint64_t v182 = 0x80000001012814D0;
  v38._uint64_t countAndFlagsBits = v35;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = 10537;
  v39._object = (void *)0xE200000000000000;
  String.append(_:)(v39);
  uint64_t v40 = (uint64_t)v181;
  uint64_t v41 = v182;
  v171 = &_swiftEmptySetSingleton;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v42 = swift_retain();
  uint64_t v43 = v152;
  uint64_t v44 = sub_10079FC40(v42, v40, v41);
  if (v43)
  {
    swift_release();
    if (qword_10166FB70 == -1)
    {
LABEL_5:
      swift_beginAccess();
      uint64_t v45 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v47 = v45;
      uint64_t v48 = Error.localizedDescription.getter();
      uint64_t v50 = v49;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v48;
      *(void *)(inited + 40) = v50;
      uint64_t v51 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v47, (uint64_t)&_mh_execute_header, v51, (uint64_t)"Failed to check asset UUIDs exist with error %@", 47, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      swift_willThrow();
      return v52;
    }
LABEL_80:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v53 = v44;
  id v156 = v22;
  uint64_t v152 = 0;
  swift_release();
  uint64_t v54 = v161;
  uint64_t v55 = *(void *)(v161 + 56);
  id v149 = (void *)(v161 + 56);
  uint64_t v56 = 1 << *(unsigned char *)(v161 + 32);
  uint64_t v57 = -1;
  if (v56 < 64) {
    uint64_t v57 = ~(-1 << v56);
  }
  unint64_t v58 = v57 & v55;
  uint64_t v160 = v53 + 16;
  uint64_t v146 = v53;
  swift_bridgeObjectRetain();
  int v155 = (sqlite3_stmt **)(v53 + 24);
  swift_beginAccess();
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v150 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((unint64_t)(v56 + 63) >> 6);
  uint64_t v157 = (void (**)(char *, char *, uint64_t))(v162 + 16);
  uint64_t v163 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v162 + 56);
  uint64_t v158 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v162 + 48);
  long long v154 = (void (**)(sqlite3_stmt **, uint64_t, uint64_t))(v162 + 32);
  id v153 = (void (**)(sqlite3_stmt **, uint64_t))(v162 + 8);
  uint64_t v61 = v164;
  if (!v58) {
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v62 = __clz(__rbit64(v58));
  v58 &= v58 - 1;
  for (unint64_t i = v62 | (v60 << 6); ; unint64_t i = __clz(__rbit64(v65)) + (v60 << 6))
  {
    uint64_t v67 = v162;
    unint64_t v68 = v156;
    (*(void (**)(void *, unint64_t, uint64_t))(v162 + 16))(v156, *(void *)(v54 + 48) + *(void *)(v162 + 72) * i, v61);
    uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56);
    v69((uint64_t)v68, 0, 1, v61);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v67 + 48))(v68, 1, v61) == 1) {
      goto LABEL_43;
    }
    (*v154)(v167, (uint64_t)v68, v61);
    uint64_t v172 = UUID.uuid.getter();
    char v173 = v70;
    char v174 = v71;
    char v175 = v72;
    char v176 = v73;
    char v177 = v74;
    char v178 = v75;
    char v179 = v76;
    char v180 = v77;
    UUID.uuid.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    __DataStorage.init(bytes:length:)();
    int64_t v78 = *(void **)(*(void *)v160 + 32);
    *uint64_t v28 = v78;
    uint64_t v79 = v165;
    v169(v28, v170, v165);
    id v80 = v78;
    LOBYTE(v78) = _dispatchPreconditionTest(_:)();
    v159(v28, v79);
    if ((v78 & 1) == 0)
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    swift_retain();
    uint64_t v81 = __DataStorage._bytes.getter();
    if (v81)
    {
      uint64_t v82 = v81;
      uint64_t v83 = __DataStorage._offset.getter();
      if (__OFSUB__(0, v83)) {
        goto LABEL_72;
      }
      int64_t v84 = (const void *)(v82 - v83);
    }
    else
    {
      int64_t v84 = 0;
    }
    uint64_t v85 = __DataStorage._length.getter();
    if (v59 == 0x7FFFFFFF) {
      goto LABEL_70;
    }
    uint64_t v86 = 16;
    if (v85 < 16) {
      uint64_t v86 = v85;
    }
    if (v84) {
      int64_t v87 = v86;
    }
    else {
      int64_t v87 = 0;
    }
    if (v87 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_71;
    }
    char v88 = *v155;
    if (qword_10166F130 != -1) {
      swift_once();
    }
    sqlite3_bind_blob(v88, ++v59, v84, v87, (void (__cdecl *)(void *))qword_10171A940);
    swift_release_n();
    uint64_t v61 = v164;
    (*v153)(v167, v164);
    uint64_t v54 = v161;
    if (v58) {
      goto LABEL_10;
    }
LABEL_11:
    uint64_t v64 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      goto LABEL_77;
    }
    if (v64 >= (uint64_t)v150) {
      break;
    }
    unint64_t v65 = v149[v64];
    ++v60;
    if (!v65)
    {
      uint64_t v60 = v64 + 1;
      if (v64 + 1 >= (uint64_t)v150) {
        break;
      }
      unint64_t v65 = v149[v60];
      if (!v65)
      {
        uint64_t v60 = v64 + 2;
        if (v64 + 2 >= (uint64_t)v150) {
          break;
        }
        unint64_t v65 = v149[v60];
        if (!v65)
        {
          uint64_t v66 = v64 + 3;
          if (v66 >= (uint64_t)v150) {
            break;
          }
          unint64_t v65 = v149[v66];
          if (v65)
          {
            uint64_t v60 = v66;
            goto LABEL_24;
          }
          while (1)
          {
            uint64_t v60 = v66 + 1;
            if (__OFADD__(v66, 1)) {
              break;
            }
            if (v60 >= (uint64_t)v150) {
              goto LABEL_42;
            }
            unint64_t v65 = v149[v60];
            ++v66;
            if (v65) {
              goto LABEL_24;
            }
          }
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
      }
    }
LABEL_24:
    unint64_t v58 = (v65 - 1) & v65;
  }
LABEL_42:
  uint64_t v69 = *v163;
  (*v163)((uint64_t)v156, 1, 1, v61);
LABEL_43:
  swift_release();
  uint64_t v150 = v69;
  char v89 = *(void **)(*(void *)v160 + 32);
  *uint64_t v28 = v89;
  uint64_t v90 = v170;
  uint64_t v91 = v165;
  char v92 = v169;
  v169(v28, v170, v165);
  id v93 = v89;
  LOBYTE(v89) = _dispatchPreconditionTest(_:)();
  uint64_t v94 = v159;
  v159(v28, v91);
  if ((v89 & 1) == 0)
  {
    __break(1u);
    goto LABEL_82;
  }
  type metadata accessor for SQLiteRowIterator();
  unint64_t v95 = (void *)swift_initStackObject();
  v95[3] = 0;
  id v156 = v95 + 3;
  v95[4] = 0;
  long long v144 = v95 + 4;
  v95[5] = 1;
  uint64_t v96 = v146;
  v95[2] = v146;
  unint64_t v97 = *(void **)(*(void *)(v96 + 16) + 32);
  *uint64_t v28 = v97;
  swift_retain();
  v92(v28, v90, v91);
  id v98 = v97;
  LOBYTE(v97) = _dispatchPreconditionTest(_:)();
  v94(v28, v91);
  if ((v97 & 1) == 0) {
    goto LABEL_73;
  }
  unint64_t v99 = v94;
  uint64_t v100 = v160;
  uint64_t v101 = v146;
  id v149 = v95;
  while (1)
  {
    uint64_t v102 = v95[3];
    uint64_t v103 = v95[4];
    uint64_t v104 = v95[5];
    uint64_t v105 = v156;
    *id v156 = 0;
    v105[1] = 0;
    v95[5] = 1;
    sub_1007A0344(v102, v103, v104);
    uint64_t v167 = (sqlite3_stmt **)(v101 + 24);
    swift_beginAccess();
    unsigned int v106 = sqlite3_step(*(sqlite3_stmt **)(v101 + 24));
    if (v106 != 100) {
      break;
    }
    uint64_t v107 = *(void **)(*(void *)v100 + 32);
    *uint64_t v28 = v107;
    uint64_t v108 = v101;
    uint64_t v109 = v170;
    uint64_t v110 = v99;
    uint64_t v111 = v169;
    v169(v28, v170, v91);
    uint64_t v162 = v108;
    swift_retain();
    id v112 = v107;
    LOBYTE(v107) = _dispatchPreconditionTest(_:)();
    v110(v28, v91);
    if ((v107 & 1) == 0) {
      goto LABEL_74;
    }
    unint64_t v113 = *(void **)(*(void *)v100 + 32);
    *uint64_t v28 = v113;
    v111(v28, v109, v91);
    id v114 = v113;
    LOBYTE(v113) = _dispatchPreconditionTest(_:)();
    v110(v28, v91);
    if ((v113 & 1) == 0) {
      goto LABEL_75;
    }
    uint64_t v115 = *(void **)(*(void *)v100 + 32);
    *uint64_t v28 = v115;
    v111(v28, v109, v91);
    id v116 = v115;
    LOBYTE(v115) = _dispatchPreconditionTest(_:)();
    v110(v28, v91);
    if ((v115 & 1) == 0) {
      goto LABEL_76;
    }
    unint64_t v99 = v110;
    if (sqlite3_column_type(*v167, 0) == 5)
    {
      uint64_t v117 = (uint64_t)v151;
LABEL_55:
      v150(v117, 1, 1, v164);
      goto LABEL_56;
    }
    uint64_t v118 = sqlite3_column_blob(*v167, 0);
    uint64_t v117 = (uint64_t)v151;
    if (!v118) {
      goto LABEL_55;
    }
    unint64_t v119 = v118;
    int v120 = sqlite3_column_bytes(*v167, 0);
    uint64_t v121 = sub_100670608(v119, v120);
    uint64_t v122 = v152;
    UUID.init(crl_data:)(v121, v123);
    if (v122)
    {
      swift_errorRelease();
      uint64_t v152 = 0;
      goto LABEL_55;
    }
    uint64_t v126 = v164;
    v150(v117, 0, 1, v164);
    int v127 = (*v158)(v117, 1, v126);
    uint64_t v152 = 0;
    if (v127 != 1)
    {
      long long v128 = v147;
      (*v154)((sqlite3_stmt **)v147, v117, v126);
      uint64_t v129 = v145;
      (*v157)(v145, v128, v126);
      uint64_t v130 = v148;
      sub_100CB4BC8(v148, v129);
      swift_release();
      unint64_t v131 = *v153;
      (*v153)((sqlite3_stmt **)v130, v126);
      v131((sqlite3_stmt **)v128, v126);
      uint64_t v91 = v165;
      goto LABEL_57;
    }
LABEL_56:
    uint64_t v91 = v165;
    swift_release();
    sub_100522F00(v117, (uint64_t *)&unk_101674520);
LABEL_57:
    unint64_t v95 = v149;
    uint64_t v101 = v149[2];
    uint64_t v100 = v101 + 16;
    uint64_t v124 = *(void **)(*(void *)(v101 + 16) + 32);
    *uint64_t v28 = v124;
    v169(v28, v170, v91);
    id v125 = v124;
    LOBYTE(v124) = _dispatchPreconditionTest(_:)();
    v99(v28, v91);
    if ((v124 & 1) == 0) {
      goto LABEL_73;
    }
  }
  if (v106 && v106 != 101)
  {
    uint64_t v132 = v106;
    uint64_t v133 = v95[3];
    uint64_t v134 = v95[4];
    uint64_t v135 = v95[5];
    v95[3] = v132;
    uint64_t v136 = v144;
    *long long v144 = 0;
    v136[1] = 0;
    sub_1007A0344(v133, v134, v135);
  }
  swift_release();
  unint64_t v137 = *(void **)(*(void *)v160 + 32);
  *uint64_t v28 = v137;
  v169(v28, v170, v91);
  id v138 = v137;
  LOBYTE(v137) = _dispatchPreconditionTest(_:)();
  v99(v28, v91);
  uint64_t v139 = v161;
  if ((v137 & 1) == 0) {
LABEL_82:
  }
    __break(1u);
  unint64_t v140 = v155;
  if (*v155)
  {
    sqlite3_finalize(*v155);
    uint64_t *v140 = 0;
  }
  swift_release();
  uint64_t v141 = v171[2];
  swift_bridgeObjectRelease();
  return v141 == *(void *)(v139 + 16);
}

double *sub_100C91FB4(uint64_t a1)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v162 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v159 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v157 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v158 = (char *)&v149 - v12;
  __chkstk_darwin(v13, v14);
  unsigned int v170 = (sqlite3_stmt **)((char *)&v149 - v15);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (uint64_t *)((char *)&v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v22 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v21 = v22;
  uint64_t v23 = *(void (**)(void, __n128))(v17 + 104);
  unsigned int v174 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v175 = v17 + 104;
  char v173 = (void (*)(void *, uint64_t, uint64_t))v23;
  v23(v21, v19);
  id v24 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  char v176 = *(void (**)(void *, uint64_t))(v17 + 8);
  uint64_t v177 = v17 + 8;
  v176(v21, v16);
  if ((v22 & 1) == 0)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v25 = *(void *)(a1 + 16);
  __n128 v26 = _swiftEmptyArrayStorage;
  if (!v25) {
    return v26;
  }
  uint64_t v168 = v21;
  uint64_t v171 = v7;
  uint64_t v172 = v16;
  uint64_t v27 = 0;
  v179._uint64_t countAndFlagsBits = 0;
  v179._object = (void *)0xE000000000000000;
  uint64_t v28 = v25;
  uint64_t v29 = v25 - 1;
  do
  {
    v30._uint64_t countAndFlagsBits = 63;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    if (v27 < v29)
    {
      v31._uint64_t countAndFlagsBits = 8236;
      v31._object = (void *)0xE200000000000000;
      String.append(_:)(v31);
    }
    ++v27;
  }
  while (v28 != v27);
  uint64_t v189 = 0;
  unint64_t v190 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  uint64_t v189 = 0x205443454C4553;
  unint64_t v190 = 0xE700000000000000;
  v32._uint64_t countAndFlagsBits = sub_100CDFDDC(0, 0xE000000000000000);
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0x204D4F524620;
  v33._object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 0x737465737361;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 0x2820455245485720;
  v35._object = (void *)0xE800000000000000;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = 0x75755F7465737361;
  v36._object = (void *)0xEA00000000006469;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = 0x28204E4920;
  v37._object = (void *)0xE500000000000000;
  String.append(_:)(v37);
  String.append(_:)(v179);
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = 10537;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  uint64_t v39 = v189;
  uint64_t v40 = v190;
  unint64_t v178 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v41 = swift_retain();
  uint64_t v42 = sub_10079FC40(v41, v39, v40);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1)
    {
LABEL_9:
      swift_beginAccess();
      uint64_t v43 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v45 = v43;
      uint64_t v46 = Error.localizedDescription.getter();
      __n128 v26 = v47;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v46;
      *(void *)(inited + 40) = v26;
      uint64_t v48 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v45, (uint64_t)&_mh_execute_header, v48, (uint64_t)"Failed to fetch assets with error %@", 36, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      swift_willThrow();
      return v26;
    }
LABEL_74:
    swift_once();
    goto LABEL_9;
  }
  uint64_t v49 = v42;
  uint64_t v160 = 0;
  swift_release();
  uint64_t v169 = v49 + 16;
  uint64_t v156 = v49;
  uint64_t v50 = (sqlite3_stmt **)(v49 + 24);
  uint64_t v51 = v159;
  uint64_t v52 = a1 + ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80));
  uint64_t v167 = v50;
  swift_beginAccess();
  uint64_t v53 = 0;
  uint64_t v54 = *(void (**)(sqlite3_stmt **, uint64_t, uint64_t))(v51 + 16);
  v51 += 16;
  uint64_t v163 = *(void **)(v51 + 56);
  uint64_t v164 = v54;
  uint64_t v165 = v51;
  uint64_t v166 = (void (**)(sqlite3_stmt **, uint64_t))(v51 - 8);
  uint64_t v55 = v170;
  uint64_t v56 = v171;
  do
  {
    v164(v55, v52, v56);
    uint64_t v180 = UUID.uuid.getter();
    char v181 = v57;
    char v182 = v58;
    char v183 = v59;
    char v184 = v60;
    char v185 = v61;
    char v186 = v62;
    char v187 = v63;
    char v188 = v64;
    UUID.uuid.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v65 = __DataStorage.init(bytes:length:)();
    uint64_t v66 = v168;
    uint64_t v67 = *(void **)(*(void *)v169 + 32);
    *uint64_t v168 = v67;
    uint64_t v68 = v172;
    v173(v66, v174, v172);
    id v69 = v67;
    LOBYTE(v67) = _dispatchPreconditionTest(_:)();
    v176(v66, v68);
    if ((v67 & 1) == 0)
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    sub_100510D4C(0x1000000000, v65 | 0x4000000000000000);
    uint64_t v70 = __DataStorage._bytes.getter();
    if (v70)
    {
      uint64_t v71 = v70;
      uint64_t v72 = __DataStorage._offset.getter();
      if (__OFSUB__(0, v72)) {
        goto LABEL_68;
      }
      char v73 = (const void *)(v71 - v72);
    }
    else
    {
      char v73 = 0;
    }
    uint64_t v74 = __DataStorage._length.getter();
    if (v53 == 0x7FFFFFFF) {
      goto LABEL_66;
    }
    uint64_t v75 = 16;
    if (v74 < 16) {
      uint64_t v75 = v74;
    }
    if (v73) {
      int64_t v76 = v75;
    }
    else {
      int64_t v76 = 0;
    }
    if (v76 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_67;
    }
    char v77 = *v167;
    if (qword_10166F130 != -1) {
      swift_once();
    }
    sqlite3_bind_blob(v77, v53 + 1, v73, v76, (void (__cdecl *)(void *))qword_10171A940);
    swift_release_n();
    int64_t v78 = *v166;
    uint64_t v55 = v170;
    uint64_t v56 = v171;
    (*v166)(v170, v171);
    v52 += (uint64_t)v163;
    ++v53;
  }
  while (v28 != v53);
  id v153 = (void (*)(char *, uint64_t))v78;
  uint64_t v79 = v168;
  id v80 = *(void **)(*(void *)v169 + 32);
  *uint64_t v168 = v80;
  uint64_t v81 = v174;
  uint64_t v83 = v172;
  uint64_t v82 = v173;
  v173(v79, v174, v172);
  id v84 = v80;
  LOBYTE(v80) = _dispatchPreconditionTest(_:)();
  v176(v79, v83);
  if ((v80 & 1) == 0)
  {
    __break(1u);
    goto LABEL_76;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t v85 = (void *)swift_initStackObject();
  v85[3] = 0;
  uint64_t v164 = (void (*)(sqlite3_stmt **, uint64_t, uint64_t))(v85 + 3);
  v85[4] = 0;
  long long v154 = v85 + 4;
  v85[5] = 1;
  uint64_t v86 = v156;
  v85[2] = v156;
  int64_t v87 = *(void **)(*(void *)(v86 + 16) + 32);
  *uint64_t v79 = v87;
  swift_retain();
  char v88 = v82;
  v82(v79, v81, v83);
  id v89 = v87;
  LOBYTE(v87) = _dispatchPreconditionTest(_:)();
  v176(v79, v83);
  if ((v87 & 1) == 0) {
    goto LABEL_69;
  }
  uint64_t v161 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v159 + 56);
  int v155 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48);
  v159 += 32;
  uint64_t v165 = v169;
  uint64_t v90 = v156;
  uint64_t v163 = v85;
  while (1)
  {
    uint64_t v91 = v85[3];
    uint64_t v92 = v85[4];
    uint64_t v93 = v85[5];
    uint64_t v94 = v164;
    *(void *)uint64_t v164 = 0;
    *((void *)v94 + 1) = 0;
    v85[5] = 1;
    sub_1007A0344(v91, v92, v93);
    unsigned int v170 = (sqlite3_stmt **)(v90 + 24);
    swift_beginAccess();
    unsigned int v95 = sqlite3_step(*(sqlite3_stmt **)(v90 + 24));
    if (v95 != 100) {
      break;
    }
    uint64_t v96 = (void *)v90;
    uint64_t v97 = v165;
    id v98 = v88;
    unint64_t v99 = *(void **)(*(void *)v165 + 32);
    *uint64_t v79 = v99;
    v98(v79, v81, v83);
    uint64_t v168 = v96;
    swift_retain_n();
    id v100 = v99;
    LOBYTE(v99) = _dispatchPreconditionTest(_:)();
    uint64_t v101 = v176;
    v176(v79, v83);
    if ((v99 & 1) == 0) {
      goto LABEL_70;
    }
    uint64_t v102 = *(void **)(*(void *)v97 + 32);
    *uint64_t v79 = v102;
    v98(v79, v81, v83);
    id v103 = v102;
    LOBYTE(v102) = _dispatchPreconditionTest(_:)();
    v101(v79, v83);
    if ((v102 & 1) == 0) {
      goto LABEL_71;
    }
    uint64_t v104 = *(void **)(*(void *)v97 + 32);
    *uint64_t v79 = v104;
    v98(v79, v81, v83);
    id v105 = v104;
    LOBYTE(v104) = _dispatchPreconditionTest(_:)();
    v101(v79, v83);
    if ((v104 & 1) == 0) {
      goto LABEL_72;
    }
    unsigned int v106 = v170;
    if (sqlite3_column_type(*v170, 0) == 5)
    {
      uint64_t v83 = v172;
      uint64_t v107 = v173;
      uint64_t v81 = v174;
      uint64_t v108 = (uint64_t)v162;
      uint64_t v85 = v163;
      goto LABEL_39;
    }
    uint64_t v109 = sqlite3_column_blob(*v106, 0);
    uint64_t v110 = v106;
    uint64_t v108 = (uint64_t)v162;
    uint64_t v81 = v174;
    uint64_t v107 = v173;
    if (!v109)
    {
      uint64_t v83 = v172;
      uint64_t v85 = v163;
LABEL_39:
      char v88 = v107;
      (*v161)(v108, 1, 1, v171);
LABEL_40:
      swift_release();
      sub_100522F00(v108, (uint64_t *)&unk_101674520);
      swift_release();
      goto LABEL_41;
    }
    uint64_t v111 = v109;
    int v112 = sqlite3_column_bytes(*v110, 0);
    uint64_t v113 = sub_100670608(v111, v112);
    uint64_t v114 = v160;
    UUID.init(crl_data:)(v113, v115);
    uint64_t v85 = v163;
    if (v114)
    {
      swift_errorRelease();
      uint64_t v160 = 0;
      uint64_t v83 = v172;
      goto LABEL_39;
    }
    uint64_t v160 = 0;
    uint64_t v119 = v171;
    (*v161)(v108, 0, 1, v171);
    if ((*v155)(v108, 1, v119) == 1)
    {
      char v88 = v107;
      uint64_t v83 = v172;
      goto LABEL_40;
    }
    uint64_t v151 = *(void (**)(char *, uint64_t, uint64_t))v159;
    v151(v158, v108, v119);
    uint64_t v120 = v165;
    uint64_t v121 = *(void **)(*(void *)v165 + 32);
    *uint64_t v79 = v121;
    uint64_t v122 = v172;
    v107(v79, v81, v172);
    id v123 = v121;
    LOBYTE(v121) = _dispatchPreconditionTest(_:)();
    v101(v79, v122);
    if ((v121 & 1) == 0) {
      goto LABEL_77;
    }
    uint64_t v124 = v170;
    if (sqlite3_column_type(*v170, 1) == 5)
    {
      uint64_t v150 = 0;
      uint64_t v152 = 0;
      uint64_t v125 = v172;
    }
    else
    {
      uint64_t v126 = sqlite3_column_text(*v124, 1);
      uint64_t v125 = v172;
      if (v126)
      {
        uint64_t v150 = String.init(cString:)();
        uint64_t v152 = v127;
      }
      else
      {
        uint64_t v150 = 0;
        uint64_t v152 = 0;
      }
    }
    long long v128 = *(void **)(*(void *)v120 + 32);
    *uint64_t v79 = v128;
    v107(v79, v81, v125);
    id v129 = v128;
    char v130 = _dispatchPreconditionTest(_:)();
    uint64_t v131 = v125;
    char v132 = v130;
    v101(v79, v131);
    if ((v132 & 1) == 0) {
      goto LABEL_78;
    }
    int v133 = sqlite3_column_type(*v170, 2);
    uint64_t v85 = v163;
    char v88 = v107;
    if (v133 == 5)
    {
      swift_release();
      v153(v158, v171);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v83 = v172;
    }
    else
    {
      double v134 = sqlite3_column_double((sqlite3_stmt *)v168[3], 2);
      swift_release();
      uint64_t v135 = v171;
      uint64_t v136 = (void (*)(uint64_t, char *, uint64_t))v151;
      v151(v157, (uint64_t)v158, v171);
      type metadata accessor for CRLAssetDatabaseRow();
      uint64_t v137 = swift_allocObject();
      v136(v137 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID, v157, v135);
      id v138 = (uint64_t *)(v137 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
      uint64_t v139 = v152;
      *id v138 = v150;
      v138[1] = v139;
      *(double *)(v137 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_tombstoneDate) = v134;
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v178 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v178 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      swift_release();
      uint64_t v83 = v172;
    }
LABEL_41:
    uint64_t v90 = v85[2];
    uint64_t v116 = *(void *)(v90 + 16);
    uint64_t v165 = v90 + 16;
    uint64_t v117 = *(void **)(v116 + 32);
    *uint64_t v79 = v117;
    v88(v79, v81, v83);
    id v118 = v117;
    LOBYTE(v117) = _dispatchPreconditionTest(_:)();
    v176(v79, v83);
    if ((v117 & 1) == 0) {
      goto LABEL_69;
    }
  }
  if (v95 && v95 != 101)
  {
    uint64_t v140 = v95;
    uint64_t v141 = v85[3];
    uint64_t v142 = v85[4];
    uint64_t v143 = v85[5];
    v85[3] = v140;
    long long v144 = v154;
    void *v154 = 0;
    v144[1] = 0;
    sub_1007A0344(v141, v142, v143);
  }
  swift_release();
  uint64_t v145 = *(void **)(*(void *)v169 + 32);
  *uint64_t v79 = v145;
  v88(v79, v81, v83);
  id v146 = v145;
  LOBYTE(v145) = _dispatchPreconditionTest(_:)();
  v176(v79, v83);
  if ((v145 & 1) == 0)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
  }
  unsigned __int8 v147 = v167;
  swift_beginAccess();
  if (*v147)
  {
    sqlite3_finalize(*v147);
    *unsigned __int8 v147 = 0;
  }
  swift_release();
  return (double *)v178;
}

void *sub_100C92F40(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v171 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v158 = (char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v157 = (char *)&v154 - v9;
  __chkstk_darwin(v8, v10);
  char v176 = (uint64_t *)((char *)&v154 - v11);
  uint64_t v12 = sub_1005057FC((uint64_t *)&unk_101674520);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v159 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v169 = (uint64_t *)((char *)&v154 - v17);
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  unint64_t v22 = (sqlite3_stmt **)((char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = *(sqlite3_stmt **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *unint64_t v22 = v23;
  id v24 = *(void (**)(sqlite3_stmt **, uint64_t, uint64_t))(v19 + 104);
  unsigned int v181 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v180 = v24;
  ((void (*)(sqlite3_stmt **))v24)(v22);
  uint64_t v25 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  __n128 v26 = *(void (**)(sqlite3_stmt **, uint64_t))(v19 + 8);
  unsigned int v170 = v22;
  uint64_t v179 = v18;
  uint64_t v177 = v19 + 8;
  uint64_t v172 = v26;
  v26(v22, v18);
  if ((v23 & 1) == 0)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (!*(void *)(a1 + 16)) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v178 = v19 + 104;
  uint64_t v174 = v3;
  uint64_t v183 = 0;
  unint64_t v184 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  uint64_t v183 = 0xD00000000000003DLL;
  unint64_t v184 = 0x800000010127CCD0;
  char v182 = sub_100C37E4C(63, 0xE100000000000000, *(void *)(a1 + 16));
  sub_1005057FC((uint64_t *)&unk_1016773F0);
  sub_100523288((unint64_t *)&qword_101672620, (uint64_t *)&unk_1016773F0);
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 41;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  uint64_t v32 = v183;
  uint64_t v33 = v184;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v34 = swift_retain();
  uint64_t v35 = v162;
  uint64_t v36 = sub_10079FC40(v34, v32, v33);
  if (v35) {
    goto LABEL_4;
  }
  uint64_t v44 = v36;
  uint64_t v162 = 0;
  swift_release();
  uint64_t v45 = *(void *)(a1 + 56);
  uint64_t v160 = (double *)(a1 + 56);
  uint64_t v46 = 1;
  uint64_t v47 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v48 = -1;
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  unint64_t v49 = v48 & v45;
  uint64_t v167 = v44 + 16;
  uint64_t v156 = v44;
  swift_bridgeObjectRetain();
  uint64_t v166 = (sqlite3_stmt **)(v44 + 24);
  swift_beginAccess();
  uint64_t v50 = 0;
  uint64_t v161 = (void (*)(void *, uint64_t, uint64_t, uint64_t))((unint64_t)(v47 + 63) >> 6);
  char v173 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(v171 + 56);
  uint64_t v168 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48);
  uint64_t v164 = (void (**)(unint64_t, char *, uint64_t))(v171 + 32);
  uint64_t v165 = (void (**)(char *, char *, uint64_t))(v171 + 16);
  uint64_t v163 = (void (**)(uint64_t *, uint64_t))(v171 + 8);
  uint64_t v51 = v174;
  uint64_t v52 = a1;
  uint64_t v53 = v181;
  if (!v49) {
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v54 = __clz(__rbit64(v49));
  v49 &= v49 - 1;
  uint64_t v175 = v50;
  for (unint64_t i = v54 | (v50 << 6); ; unint64_t i = __clz(__rbit64(v57)) + (v58 << 6))
  {
    uint64_t v60 = v52;
    uint64_t v61 = *(void *)(v52 + 48);
    uint64_t v62 = v171;
    char v63 = (char *)v169;
    (*(void (**)(char *, unint64_t, uint64_t))(v171 + 16))((char *)v169, v61 + *(void *)(v171 + 72) * i, v51);
    char v64 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v62 + 56);
    v64(v63, 0, 1, v51);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v63, 1, v51) == 1)
    {
      uint64_t v161 = v64;
      goto LABEL_44;
    }
    (*v164)((unint64_t)v176, v63, v51);
    uint64_t v183 = UUID.uuid.getter();
    LOWORD(v184) = v65;
    BYTE2(v184) = v66;
    BYTE3(v184) = v67;
    BYTE4(v184) = v68;
    BYTE5(v184) = v69;
    BYTE6(v184) = v70;
    HIBYTE(v184) = v71;
    UUID.uuid.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    __DataStorage.init(bytes:length:)();
    uint64_t v72 = *(sqlite3_stmt **)(*(void *)v167 + 32);
    char v73 = v170;
    *unsigned int v170 = v72;
    uint64_t v74 = v179;
    v180(v73, v53, v179);
    uint64_t v75 = v72;
    LOBYTE(v72) = _dispatchPreconditionTest(_:)();
    v172(v73, v74);
    if ((v72 & 1) == 0)
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    swift_retain();
    uint64_t v76 = __DataStorage._bytes.getter();
    if (v76)
    {
      uint64_t v77 = v76;
      uint64_t v78 = __DataStorage._offset.getter();
      if (__OFSUB__(0, v78)) {
        goto LABEL_80;
      }
      uint64_t v79 = (const void *)(v77 - v78);
    }
    else
    {
      uint64_t v79 = 0;
    }
    uint64_t v80 = __DataStorage._length.getter();
    if (v46 == 0x80000000) {
      goto LABEL_78;
    }
    uint64_t v81 = 16;
    if (v80 < 16) {
      uint64_t v81 = v80;
    }
    if (v79) {
      int64_t v82 = v81;
    }
    else {
      int64_t v82 = 0;
    }
    if (v82 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_79;
    }
    uint64_t v83 = *v166;
    if (qword_10166F130 != -1) {
      swift_once();
    }
    sqlite3_bind_blob(v83, v46, v79, v82, (void (__cdecl *)(void *))qword_10171A940);
    swift_release_n();
    uint64_t v51 = v174;
    (*v163)(v176, v174);
    ++v46;
    uint64_t v52 = v60;
    uint64_t v50 = v175;
    if (v49) {
      goto LABEL_10;
    }
LABEL_11:
    uint64_t v56 = v50 + 1;
    if (__OFADD__(v50, 1)) {
      goto LABEL_85;
    }
    if (v56 >= (uint64_t)v161) {
      break;
    }
    unint64_t v57 = *(void *)&v160[v56];
    uint64_t v58 = v50 + 1;
    if (!v57)
    {
      uint64_t v58 = v50 + 2;
      if (v50 + 2 >= (uint64_t)v161) {
        break;
      }
      unint64_t v57 = *(void *)&v160[v58];
      if (!v57)
      {
        uint64_t v58 = v50 + 3;
        if (v50 + 3 >= (uint64_t)v161) {
          break;
        }
        unint64_t v57 = *(void *)&v160[v58];
        if (!v57)
        {
          uint64_t v59 = v50 + 4;
          if (v50 + 4 >= (uint64_t)v161) {
            break;
          }
          unint64_t v57 = *(void *)&v160[v59];
          if (v57)
          {
            uint64_t v58 = v50 + 4;
            goto LABEL_24;
          }
          while (1)
          {
            uint64_t v58 = v59 + 1;
            if (__OFADD__(v59, 1)) {
              break;
            }
            if (v58 >= (uint64_t)v161) {
              goto LABEL_43;
            }
            unint64_t v57 = *(void *)&v160[v58];
            ++v59;
            if (v57) {
              goto LABEL_24;
            }
          }
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
      }
    }
LABEL_24:
    unint64_t v49 = (v57 - 1) & v57;
    uint64_t v175 = v58;
  }
LABEL_43:
  uint64_t v161 = *v173;
  v161((char *)v169, 1, 1, v51);
LABEL_44:
  swift_release();
  id v84 = *(sqlite3_stmt **)(*(void *)v167 + 32);
  uint64_t v85 = v170;
  *unsigned int v170 = v84;
  uint64_t v86 = v179;
  int64_t v87 = v180;
  char v88 = v85;
  ((void (*)(void))v180)();
  id v89 = v84;
  LOBYTE(v84) = _dispatchPreconditionTest(_:)();
  uint64_t v90 = v172;
  v172(v88, v86);
  if ((v84 & 1) == 0)
  {
    __break(1u);
    goto LABEL_90;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t inited = (uint64_t *)swift_initStackObject();
  inited[3] = 0;
  uint64_t v169 = inited + 3;
  inited[4] = 0;
  int v155 = inited + 4;
  inited[5] = 1;
  char v176 = inited;
  uint64_t v92 = v156;
  inited[2] = v156;
  uint64_t v93 = *(sqlite3_stmt **)(*(void *)(v92 + 16) + 32);
  sqlite3_stmt *v88 = v93;
  swift_retain();
  uint64_t v94 = v181;
  v87(v88, v181, v86);
  unsigned int v95 = v93;
  LOBYTE(v93) = _dispatchPreconditionTest(_:)();
  v90(v88, v86);
  if ((v93 & 1) == 0) {
    goto LABEL_81;
  }
  uint64_t v96 = v90;
  uint64_t v97 = v88;
  uint64_t v160 = _swiftEmptyArrayStorage;
  uint64_t v98 = v167;
  uint64_t v99 = v156;
  while (1)
  {
    id v100 = v176;
    uint64_t v101 = v176[3];
    uint64_t v102 = v176[4];
    uint64_t v103 = v176[5];
    uint64_t v104 = v169;
    *uint64_t v169 = 0;
    v104[1] = 0;
    v100[5] = 1;
    sub_1007A0344(v101, v102, v103);
    swift_beginAccess();
    unsigned int v105 = sqlite3_step(*(sqlite3_stmt **)(v99 + 24));
    if (v105 != 100) {
      break;
    }
    unsigned int v170 = (sqlite3_stmt **)(v99 + 24);
    unsigned int v106 = *(sqlite3_stmt **)(*(void *)v98 + 32);
    void *v97 = v106;
    uint64_t v108 = v179;
    uint64_t v107 = v180;
    v180(v97, v94, v179);
    uint64_t v175 = v99;
    swift_retain();
    uint64_t v109 = v106;
    LOBYTE(v106) = _dispatchPreconditionTest(_:)();
    v96(v97, v108);
    if ((v106 & 1) == 0) {
      goto LABEL_82;
    }
    uint64_t v110 = *(sqlite3_stmt **)(*(void *)v98 + 32);
    void *v97 = v110;
    v107(v97, v181, v108);
    uint64_t v111 = v110;
    LOBYTE(v110) = _dispatchPreconditionTest(_:)();
    v96(v97, v108);
    if ((v110 & 1) == 0) {
      goto LABEL_83;
    }
    int v112 = *(sqlite3_stmt **)(*(void *)v98 + 32);
    void *v97 = v112;
    v107(v97, v181, v108);
    uint64_t v113 = v112;
    LOBYTE(v112) = _dispatchPreconditionTest(_:)();
    v96(v97, v108);
    if ((v112 & 1) == 0) {
      goto LABEL_84;
    }
    uint64_t v114 = v170;
    if (sqlite3_column_type(*v170, 0) == 5 || (unint64_t v115 = sqlite3_column_blob(*v114, 0)) == 0)
    {
      uint64_t v119 = (uint64_t)v159;
      v161(v159, 1, 1, v174);
      uint64_t v94 = v181;
      goto LABEL_57;
    }
    uint64_t v116 = v115;
    int v117 = sqlite3_column_bytes(*v114, 0);
    uint64_t v118 = sub_100670608(v116, v117);
    uint64_t v119 = (uint64_t)v159;
    uint64_t v120 = v162;
    UUID.init(crl_data:)(v118, v121);
    uint64_t v162 = v120;
    uint64_t v94 = v181;
    if (v120)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v150 = v176;
      swift_setDeallocating();
      swift_release();
      sub_1007A0344(v150[3], v150[4], v150[5]);
      uint64_t v151 = *(sqlite3_stmt **)(*(void *)v167 + 32);
      void *v97 = v151;
      v180(v97, v94, v108);
      uint64_t v152 = v151;
      LOBYTE(v151) = _dispatchPreconditionTest(_:)();
      v172(v97, v108);
      if (v151)
      {
        uint64_t v153 = v156;
        if (*v166)
        {
          sqlite3_finalize(*v166);
          *(void *)(v153 + 24) = 0;
        }
LABEL_4:
        swift_release();
        if (qword_10166FB70 == -1)
        {
LABEL_5:
          swift_beginAccess();
          Swift::String v37 = (void *)static OS_os_log.boardStore;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t v38 = swift_initStackObject();
          *(_OWORD *)(v38 + 16) = xmmword_10117E810;
          swift_getErrorValue();
          id v39 = v37;
          uint64_t v40 = Error.localizedDescription.getter();
          uint64_t v42 = v41;
          *(void *)(v38 + 56) = &type metadata for String;
          *(void *)(v38 + 64) = sub_100528BE4();
          *(void *)(v38 + 32) = v40;
          *(void *)(v38 + 40) = v42;
          uint64_t v43 = static os_log_type_t.error.getter();
          sub_100BAC898((uint64_t)v39, (uint64_t)&_mh_execute_header, v43, (uint64_t)"Failed to fetch an asset reference with error %@", 48, 2, v38);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          swift_willThrow();
          return (void *)v40;
        }
LABEL_88:
        swift_once();
        goto LABEL_5;
      }
LABEL_91:
      __break(1u);
    }
    uint64_t v122 = v174;
    v161((void *)v119, 0, 1, v174);
    if ((*v168)(v119, 1, v122) == 1)
    {
      uint64_t v96 = v172;
LABEL_57:
      swift_release();
      sub_100522F00(v119, (uint64_t *)&unk_101674520);
      uint64_t v99 = v176[2];
      uint64_t v98 = v99 + 16;
      id v123 = *(sqlite3_stmt **)(*(void *)(v99 + 16) + 32);
      void *v97 = v123;
      uint64_t v124 = v179;
      v180(v97, v94, v179);
      uint64_t v125 = v123;
      LOBYTE(v123) = _dispatchPreconditionTest(_:)();
      v96(v97, v124);
      if ((v123 & 1) == 0) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t v126 = *v164;
      uint64_t v127 = v119;
      long long v128 = v157;
      uint64_t v129 = v174;
      (*v164)((unint64_t)v157, (char *)v127, v174);
      (*v165)(v158, v128, v129);
      unint64_t v130 = (unint64_t)v160;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v130 = sub_100F617D8(0, *(void *)(v130 + 16) + 1, 1, v130);
      }
      unint64_t v132 = *(void *)(v130 + 16);
      unint64_t v131 = *(void *)(v130 + 24);
      if (v132 >= v131 >> 1) {
        unint64_t v130 = sub_100F617D8(v131 > 1, v132 + 1, 1, v130);
      }
      *(void *)(v130 + 16) = v132 + 1;
      uint64_t v133 = v171;
      unint64_t v134 = (*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
      uint64_t v160 = (double *)v130;
      unint64_t v135 = v130 + v134 + *(void *)(v171 + 72) * v132;
      uint64_t v136 = v174;
      v126(v135, v158, v174);
      swift_release();
      (*(void (**)(char *, uint64_t))(v133 + 8))(v157, v136);
      uint64_t v99 = v176[2];
      uint64_t v98 = v99 + 16;
      uint64_t v137 = *(sqlite3_stmt **)(*(void *)(v99 + 16) + 32);
      void *v97 = v137;
      uint64_t v138 = v179;
      v180(v97, v94, v179);
      uint64_t v139 = v137;
      LOBYTE(v137) = _dispatchPreconditionTest(_:)();
      uint64_t v96 = v172;
      v172(v97, v138);
      if ((v137 & 1) == 0) {
        goto LABEL_81;
      }
    }
  }
  if (v105 && v105 != 101)
  {
    uint64_t v140 = v105;
    uint64_t v141 = v176[3];
    uint64_t v142 = v176[4];
    uint64_t v143 = v176[5];
    v176[3] = v140;
    long long v144 = v155;
    *int v155 = 0;
    v144[1] = 0;
    sub_1007A0344(v141, v142, v143);
  }
  swift_release();
  uint64_t v145 = *(sqlite3_stmt **)(*(void *)v167 + 32);
  void *v97 = v145;
  uint64_t v146 = v179;
  v180(v97, v94, v179);
  unsigned __int8 v147 = v145;
  LOBYTE(v145) = _dispatchPreconditionTest(_:)();
  v172(v97, v146);
  if ((v145 & 1) == 0)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  uint64_t v148 = v166;
  if (*v166)
  {
    sqlite3_finalize(*v166);
    *uint64_t v148 = 0;
  }
  swift_release();
  uint64_t v40 = sub_100CDCB64((uint64_t)v160);
  swift_bridgeObjectRelease();
  return (void *)v40;
}

uint64_t sub_100C93FDC(uint64_t a1)
{
  uint64_t v66 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (uint64_t *)((char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v8 = v9;
  unsigned int v10 = enum case for DispatchPredicate.onQueue(_:);
  char v70 = *(void (**)(void *, void, uint64_t, __n128))(v4 + 104);
  v70(v8, enum case for DispatchPredicate.onQueue(_:), v3, v6);
  id v11 = v9;
  char v12 = _dispatchPreconditionTest(_:)();
  char v67 = *(void (**)(void *, uint64_t))(v4 + 8);
  v67(v8, v3);
  if ((v12 & 1) == 0) {
    goto LABEL_24;
  }
  unsigned int v69 = v10;
  uint64_t v68 = v4 + 104;
  uint64_t v72 = 0;
  unint64_t v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  uint64_t v72 = 0x205443454C4553;
  unint64_t v73 = 0xE700000000000000;
  v13._uint64_t countAndFlagsBits = sub_100CD8420(0, 0xE000000000000000);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x204D4F524620;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._object = (void *)0x800000010127C660;
  v15._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0x2820455245485720;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 0xD000000000000013;
  v17._object = (void *)0x800000010127CB90;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0x444E41203F203D20;
  v18._object = (void *)0xE900000000000020;
  String.append(_:)(v18);
  v19._object = (void *)0x800000010127B8B0;
  v19._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x2930203E20;
  v20._object = (void *)0xE500000000000000;
  String.append(_:)(v20);
  uint64_t v21 = v72;
  uint64_t v22 = v73;
  unint64_t v71 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v23 = swift_retain();
  uint64_t v24 = sub_10079FC40(v23, v21, v22);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
  uint64_t v25 = v24;
  swift_release();
  uint64_t v26 = sub_100511430();
  uint64_t v66 = 0;
  uint64_t v36 = v26;
  unint64_t v37 = v27;
  sub_10079DCE4(v26, v27, 1);
  sub_100510084(v36, v37);
  uint64_t v38 = *(void **)(*(void *)(v25 + 16) + 32);
  *uint64_t v8 = v38;
  ((void (*)(void *, void, uint64_t))v70)(v8, v69, v3);
  id v39 = v38;
  char v40 = _dispatchPreconditionTest(_:)();
  uint64_t v41 = v67;
  v67(v8, v3);
  if ((v40 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t inited = (void *)swift_initStackObject();
  inited[3] = 0;
  inited[4] = 0;
  char v64 = inited + 4;
  inited[5] = 1;
  inited[2] = v25;
  uint64_t v43 = *(void **)(*(void *)(v25 + 16) + 32);
  *uint64_t v8 = v43;
  uint64_t v65 = v25;
  swift_retain();
  ((void (*)(void *, void, uint64_t))v70)(v8, v69, v3);
  id v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)();
  v41(v8, v3);
  if ((v43 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once();
LABEL_6:
    swift_beginAccess();
    uint64_t v28 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = xmmword_10117E810;
    swift_getErrorValue();
    id v30 = v28;
    uint64_t v31 = Error.localizedDescription.getter();
    uint64_t v33 = v32;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_100528BE4();
    *(void *)(v29 + 32) = v31;
    *(void *)(v29 + 40) = v33;
    uint64_t v34 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v30, (uint64_t)&_mh_execute_header, v34, (uint64_t)"Failed to fetch an asset reference with error %@", 48, 2, v29);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    return swift_willThrow();
  }
  uint64_t v45 = v65;
  while (1)
  {
    uint64_t v48 = inited[3];
    uint64_t v49 = inited[4];
    uint64_t v50 = inited[5];
    inited[3] = 0;
    inited[4] = 0;
    inited[5] = 1;
    sub_1007A0344(v48, v49, v50);
    swift_beginAccess();
    unsigned int v51 = sqlite3_step(*(sqlite3_stmt **)(v45 + 24));
    if (v51 != 100) {
      break;
    }
    uint64_t v52 = swift_retain_n();
    if (sub_100CD8630(v52, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      uint64_t v41 = v67;
    }
    swift_release();
    uint64_t v45 = inited[2];
    uint64_t v46 = *(void **)(*(void *)(v45 + 16) + 32);
    *uint64_t v8 = v46;
    ((void (*)(void *, void, uint64_t))v70)(v8, v69, v3);
    id v47 = v46;
    LOBYTE(v46) = _dispatchPreconditionTest(_:)();
    v41(v8, v3);
    if ((v46 & 1) == 0) {
      goto LABEL_23;
    }
  }
  if (v51 && v51 != 101)
  {
    uint64_t v53 = v51;
    uint64_t v54 = inited[3];
    uint64_t v55 = inited[4];
    uint64_t v56 = inited[5];
    inited[3] = v53;
    unint64_t v57 = v64;
    *char v64 = 0;
    v57[1] = 0;
    sub_1007A0344(v54, v55, v56);
  }
  swift_release();
  uint64_t v58 = v65;
  uint64_t v59 = *(void **)(*(void *)(v65 + 16) + 32);
  *uint64_t v8 = v59;
  ((void (*)(void *, void, uint64_t))v70)(v8, v69, v3);
  id v60 = v59;
  char v61 = _dispatchPreconditionTest(_:)();
  v41(v8, v3);
  if ((v61 & 1) == 0) {
LABEL_27:
  }
    __break(1u);
  swift_beginAccess();
  uint64_t v62 = *(sqlite3_stmt **)(v58 + 24);
  if (v62)
  {
    sqlite3_finalize(v62);
    *(void *)(v58 + 24) = 0;
  }
  swift_release();
  return v71;
}

void *sub_100C94820(sqlite3_stmt **a1, uint64_t a2)
{
  uint64_t v154 = a1;
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v150 = (char *)v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for UUID();
  uint64_t v149 = *(void *)(v151 - 8);
  uint64_t v8 = __chkstk_darwin(v151, v7);
  unsigned __int8 v147 = (char *)v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v146 = (char *)v138 - v11;
  uint64_t v157 = (sqlite3_stmt **)type metadata accessor for String.Encoding();
  uint64_t v148 = *(v157 - 1);
  __chkstk_darwin(v157, v12);
  uint64_t v156 = (char *)v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  Swift::String v18 = (sqlite3_stmt **)((char *)v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v155 = v2;
  Swift::String v19 = *(sqlite3_stmt **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *Swift::String v18 = v19;
  unsigned int v20 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v21 = v15 + 104;
  uint64_t v162 = *(void (**)(sqlite3_stmt **, uint64_t, uint64_t))(v15 + 104);
  v162(v18, enum case for DispatchPredicate.onQueue(_:), v14);
  uint64_t v22 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t v23 = *(void (**)(sqlite3_stmt **, uint64_t))(v15 + 8);
  uint64_t v163 = v15 + 8;
  v23(v18, v14);
  if ((v19 & 1) == 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v24 = *(void *)(a2 + 16);
  if (!v24) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v145 = (void (**)(void, void, void, void))a2;
  unsigned int v161 = v20;
  uint64_t v159 = v23;
  uint64_t v160 = v21;
  uint64_t v158 = v14;
  unint64_t v165 = 0;
  unint64_t v166 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  unint64_t v165 = 0xD000000000000063;
  unint64_t v166 = 0x800000010127CEA0;
  uint64_t v25 = (void *)v24;
  uint64_t v164 = sub_100C37E4C(63, 0xE100000000000000, v24);
  sub_1005057FC((uint64_t *)&unk_1016773F0);
  sub_100523288((unint64_t *)&qword_101672620, (uint64_t *)&unk_1016773F0);
  uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 10537;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  uint64_t v31 = v165;
  uint64_t v32 = v166;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v33 = swift_retain();
  uint64_t v34 = v152;
  uint64_t v35 = sub_10079FC40(v33, v31, v32);
  uint64_t v36 = v34;
  if (v34) {
    goto LABEL_7;
  }
  uint64_t v38 = v35;
  swift_release();
  uint64_t v46 = sub_100511430();
  unint64_t v48 = v47;
  uint64_t v152 = 0;
  uint64_t v153 = v25;
  sub_10079DCE4(v46, v47, 1);
  sub_100510084(v46, v48);
  long long v144 = (sqlite3_stmt **)v38;
  uint64_t v154 = (sqlite3_stmt **)(v38 + 24);
  uint64_t v155 = v38 + 16;
  swift_beginAccess();
  uint64_t v49 = (void (**)(char *, sqlite3_stmt **))(v148 + 1);
  uint64_t v50 = (unint64_t *)(v145 + 5);
  do
  {
    unint64_t v51 = *(v50 - 1);
    unint64_t v52 = *v50;
    uint64_t v53 = *(sqlite3_stmt **)(*(void *)v155 + 32);
    *Swift::String v18 = v53;
    uint64_t v54 = v158;
    v162(v18, v161, v158);
    swift_bridgeObjectRetain();
    uint64_t v55 = v53;
    LOBYTE(v53) = _dispatchPreconditionTest(_:)();
    v159(v18, v54);
    if ((v53 & 1) == 0)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    unint64_t v165 = v51;
    unint64_t v166 = v52;
    uint64_t v56 = v156;
    static String.Encoding.utf8.getter();
    sub_10052E310();
    uint64_t v57 = StringProtocol.cString(using:)();
    (*v49)(v56, v157);
    if (v36 == 2147483646) {
      goto LABEL_49;
    }
    uint64_t v58 = *v154;
    if (qword_10166F130 != -1) {
      swift_once();
    }
    uint64_t v59 = (void *)(v36 + 1);
    v50 += 2;
    if (v57) {
      id v60 = (const char *)(v57 + 32);
    }
    else {
      id v60 = 0;
    }
    sqlite3_bind_text(v58, v36 + 2, v60, -1, (void (__cdecl *)(void *))qword_10171A940);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v36;
  }
  while (v153 != v59);
  char v61 = *(sqlite3_stmt **)(*(void *)v155 + 32);
  *Swift::String v18 = v61;
  uint64_t v62 = v161;
  uint64_t v63 = v158;
  char v64 = v162;
  v162(v18, v161, v158);
  uint64_t v65 = v61;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)();
  uint64_t v66 = v159;
  v159(v18, v63);
  if ((v61 & 1) == 0)
  {
    __break(1u);
    goto LABEL_57;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t inited = (void *)swift_initStackObject();
  inited[3] = 0;
  uint64_t v153 = inited + 3;
  inited[4] = 0;
  uint64_t v141 = inited + 4;
  inited[5] = 1;
  uint64_t v68 = v144;
  inited[2] = v144;
  unsigned int v69 = (sqlite3_stmt *)*((void *)v68[2] + 4);
  *Swift::String v18 = v69;
  swift_retain();
  v64(v18, v62, v63);
  char v70 = v69;
  LOBYTE(v69) = _dispatchPreconditionTest(_:)();
  v66(v18, v63);
  if ((v69 & 1) == 0)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v145 = (void (**)(void, void, void, void))(v149 + 56);
  uint64_t v143 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
  uint64_t v139 = (void (**)(char *, char *, uint64_t))(v149 + 16);
  uint64_t v140 = (void (**)(char *, uint64_t, uint64_t))(v149 + 32);
  uint64_t v142 = _swiftEmptyArrayStorage;
  v138[1] = v149 + 8;
  unint64_t v71 = (char *)v155;
  uint64_t v72 = v144;
  uint64_t v148 = inited;
  while (1)
  {
    uint64_t v80 = inited[3];
    uint64_t v81 = inited[4];
    uint64_t v82 = inited[5];
    uint64_t v83 = v153;
    *uint64_t v153 = 0;
    v83[1] = 0;
    inited[5] = 1;
    sub_1007A0344(v80, v81, v82);
    swift_beginAccess();
    unsigned int v84 = sqlite3_step(v72[3]);
    if (v84 != 100) {
      break;
    }
    uint64_t v157 = v72 + 3;
    uint64_t v85 = *(sqlite3_stmt **)(*(void *)v71 + 32);
    *Swift::String v18 = v85;
    uint64_t v86 = v161;
    uint64_t v87 = v158;
    char v88 = v162;
    v162(v18, v161, v158);
    uint64_t v156 = (char *)v72;
    swift_retain();
    id v89 = v85;
    char v90 = _dispatchPreconditionTest(_:)();
    uint64_t v91 = v159;
    LOBYTE(v85) = v90;
    v159(v18, v87);
    if ((v85 & 1) == 0) {
      goto LABEL_52;
    }
    uint64_t v92 = *(sqlite3_stmt **)(*(void *)v71 + 32);
    *Swift::String v18 = v92;
    v88(v18, v86, v87);
    uint64_t v93 = v92;
    LOBYTE(v92) = _dispatchPreconditionTest(_:)();
    v91(v18, v87);
    if ((v92 & 1) == 0) {
      goto LABEL_53;
    }
    uint64_t v94 = *(sqlite3_stmt **)(*(void *)v71 + 32);
    *Swift::String v18 = v94;
    v88(v18, v86, v87);
    unsigned int v95 = v94;
    char v96 = _dispatchPreconditionTest(_:)();
    v91(v18, v87);
    if ((v96 & 1) == 0) {
      goto LABEL_54;
    }
    uint64_t v97 = v157;
    if (sqlite3_column_type(*v157, 0) == 5 || (uint64_t v98 = sqlite3_column_blob(*v97, 0)) == 0)
    {
      uint64_t v73 = (uint64_t)v150;
      (*v145)(v150, 1, 1, v151);
      uint64_t v74 = v159;
      goto LABEL_22;
    }
    uint64_t v99 = v98;
    int v100 = sqlite3_column_bytes(*v97, 0);
    uint64_t v101 = sub_100670608(v99, v100);
    uint64_t v73 = (uint64_t)v150;
    uint64_t v102 = v152;
    UUID.init(crl_data:)(v101, v103);
    uint64_t v104 = v161;
    if (v102)
    {
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v131 = v148;
      swift_setDeallocating();
      swift_release();
      sub_1007A0344(v131[3], v131[4], v131[5]);
      unint64_t v132 = *(sqlite3_stmt **)(*(void *)v155 + 32);
      *Swift::String v18 = v132;
      uint64_t v133 = v158;
      v162(v18, v104, v158);
      unint64_t v134 = v132;
      LOBYTE(v132) = _dispatchPreconditionTest(_:)();
      v159(v18, v133);
      if (v132)
      {
        unint64_t v135 = v154;
        swift_beginAccess();
        uint64_t v136 = *v135;
        uint64_t v137 = v144;
        if (v136)
        {
          sqlite3_finalize(v136);
          v137[3] = 0;
        }
LABEL_7:
        swift_release();
        if (qword_10166FB70 == -1)
        {
LABEL_8:
          swift_beginAccess();
          id v39 = (void *)static OS_os_log.boardStore;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t v40 = swift_initStackObject();
          *(_OWORD *)(v40 + 16) = xmmword_10117E810;
          swift_getErrorValue();
          id v41 = v39;
          uint64_t v37 = Error.localizedDescription.getter();
          uint64_t v43 = v42;
          *(void *)(v40 + 56) = &type metadata for String;
          *(void *)(v40 + 64) = sub_100528BE4();
          *(void *)(v40 + 32) = v37;
          *(void *)(v40 + 40) = v43;
          uint64_t v44 = static os_log_type_t.error.getter();
          sub_100BAC898((uint64_t)v41, (uint64_t)&_mh_execute_header, v44, (uint64_t)"Failed to fetch an asset reference with error %@", 48, 2, v40);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          swift_willThrow();
          return (void *)v37;
        }
LABEL_55:
        swift_once();
        goto LABEL_8;
      }
LABEL_58:
      __break(1u);
    }
    uint64_t v105 = v151;
    (*v145)(v73, 0, 1, v151);
    int v106 = (*v143)(v73, 1, v105);
    uint64_t v74 = v159;
    uint64_t v152 = 0;
    if (v106 == 1)
    {
LABEL_22:
      uint64_t v75 = v161;
      swift_release();
      sub_100522F00(v73, (uint64_t *)&unk_101674520);
      uint64_t inited = v148;
      uint64_t v72 = (sqlite3_stmt **)v148[2];
      unint64_t v71 = (char *)(v72 + 2);
      uint64_t v76 = (sqlite3_stmt *)*((void *)v72[2] + 4);
      *Swift::String v18 = v76;
      uint64_t v77 = v75;
      uint64_t v78 = v158;
      v162(v18, v77, v158);
      uint64_t v79 = v76;
      LOBYTE(v76) = _dispatchPreconditionTest(_:)();
      v74(v18, v78);
      if ((v76 & 1) == 0) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v107 = *v140;
      uint64_t v108 = v146;
      uint64_t v109 = v73;
      uint64_t v110 = v151;
      (*v140)(v146, v109, v151);
      (*v139)(v147, v108, v110);
      unint64_t v111 = (unint64_t)v142;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v111 = sub_100F617D8(0, *(void *)(v111 + 16) + 1, 1, v111);
      }
      uint64_t v157 = v18;
      unint64_t v113 = *(void *)(v111 + 16);
      unint64_t v112 = *(void *)(v111 + 24);
      uint64_t v114 = v158;
      if (v113 >= v112 >> 1) {
        unint64_t v111 = sub_100F617D8(v112 > 1, v113 + 1, 1, v111);
      }
      *(void *)(v111 + 16) = v113 + 1;
      uint64_t v115 = v149;
      unint64_t v116 = (*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
      uint64_t v142 = (double *)v111;
      uint64_t v117 = v151;
      v107((char *)(v111 + v116 + *(void *)(v149 + 72) * v113), (uint64_t)v147, v151);
      swift_release();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v146, v117);
      uint64_t inited = v148;
      uint64_t v72 = (sqlite3_stmt **)v148[2];
      unint64_t v71 = (char *)(v72 + 2);
      uint64_t v118 = (sqlite3_stmt *)*((void *)v72[2] + 4);
      uint64_t v119 = v157;
      *uint64_t v157 = v118;
      uint64_t v120 = v114;
      Swift::String v18 = v119;
      ((void (*)(void))v162)();
      unint64_t v121 = v118;
      LOBYTE(v118) = _dispatchPreconditionTest(_:)();
      v159(v18, v120);
      if ((v118 & 1) == 0) {
        goto LABEL_51;
      }
    }
  }
  if (v84 && v84 != 101)
  {
    uint64_t v122 = v84;
    uint64_t v123 = inited[3];
    uint64_t v124 = inited[4];
    uint64_t v125 = inited[5];
    inited[3] = v122;
    uint64_t v126 = v141;
    *uint64_t v141 = 0;
    v126[1] = 0;
    sub_1007A0344(v123, v124, v125);
  }
  swift_release();
  uint64_t v127 = *(sqlite3_stmt **)(*(void *)v155 + 32);
  *Swift::String v18 = v127;
  uint64_t v128 = v158;
  v162(v18, v161, v158);
  uint64_t v129 = v127;
  LOBYTE(v127) = _dispatchPreconditionTest(_:)();
  v159(v18, v128);
  if ((v127 & 1) == 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  unint64_t v130 = v154;
  swift_beginAccess();
  if (*v130)
  {
    sqlite3_finalize(*v130);
    *unint64_t v130 = 0;
  }
  swift_release();
  uint64_t v37 = sub_100CDCB64((uint64_t)v142);
  swift_bridgeObjectRelease();
  return (void *)v37;
}

void sub_100C95724(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101674170);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v108 = (uint64_t)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v109 - 8);
  uint64_t v9 = __chkstk_darwin(v109, v8);
  uint64_t v107 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  int v106 = (char *)&v97 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v119 = v13;
  uint64_t v120 = v14;
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v118 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  uint64_t v25 = (uint64_t *)((char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *uint64_t v25 = v26;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v21);
  id v27 = v26;
  char v28 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v22 + 8))(v25, v21);
  if (v28)
  {
    uint64_t v29 = v7;
    uint64_t v30 = v123;
    uint64_t v31 = sub_100C92F40(a1);
    if (!v30)
    {
      uint64_t v32 = (uint64_t)v31;
      uint64_t v33 = v2;
      if (v31[2] <= *(void *)(a1 + 16) >> 3)
      {
        uint64_t v122 = (void *)a1;
        swift_bridgeObjectRetain();
        sub_1010295C8(v32);
        swift_bridgeObjectRelease();
        uint64_t v34 = v122;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v34 = sub_10102AA0C(v32, a1);
        swift_bridgeObjectRelease();
      }
      uint64_t v36 = v118;
      uint64_t v35 = v119;
      if (v34[2])
      {
        int64_t v37 = 0;
        uint64_t v38 = v34[7];
        uint64_t v104 = (char *)(v34 + 7);
        uint64_t v39 = 1 << *((unsigned char *)v34 + 32);
        uint64_t v40 = -1;
        if (v39 < 64) {
          uint64_t v40 = ~(-1 << v39);
        }
        unint64_t v41 = v40 & v38;
        uint64_t v103 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock;
        uint64_t v42 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
        int64_t v105 = (unint64_t)(v39 + 63) >> 6;
        uint64_t v114 = v120 + 16;
        uint64_t v117 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v120 + 56);
        uint64_t v113 = v120 + 48;
        unint64_t v112 = (void (**)(char *, char *, uint64_t))(v120 + 32);
        uint64_t v99 = (void (**)(uint64_t, uint64_t))(v29 + 8);
        uint64_t v110 = (void (**)(uint64_t, uint64_t))(v120 + 8);
        long long v101 = xmmword_10117E810;
        uint64_t v102 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
        int v100 = v33;
        unint64_t v111 = v34;
        while (1)
        {
          if (v41)
          {
            uint64_t v123 = (v41 - 1) & v41;
            unint64_t v43 = __clz(__rbit64(v41)) | (v37 << 6);
          }
          else
          {
            if (__OFADD__(v37++, 1)) {
              goto LABEL_51;
            }
            if (v37 >= v105)
            {
LABEL_39:
              (*v117)(v36, 1, 1, v35);
LABEL_40:
              swift_release();
              uint64_t v78 = *(void *)&v33[v103];
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v78 + 16));
              uint64_t v79 = *(void **)&v33[v42];
              if (v79)
              {
                id v80 = *(id *)&v33[v42];
              }
              else
              {
                id v81 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
                uint64_t v82 = v33;
                id v83 = sub_100EAFDE4((uint64_t)v82);

                unsigned int v84 = *(void **)&v33[v42];
                *(void *)&v33[v42] = v83;
                id v80 = v83;

                uint64_t v79 = 0;
              }
              uint64_t v85 = *(os_unfair_lock_s **)(v78 + 16);
LABEL_48:
              id v96 = v79;
              os_unfair_lock_unlock(v85);
              sub_100EAE120();

              return;
            }
            unint64_t v45 = *(void *)&v104[8 * v37];
            if (!v45)
            {
              int64_t v46 = v37 + 1;
              if (v37 + 1 >= v105) {
                goto LABEL_39;
              }
              unint64_t v45 = *(void *)&v104[8 * v46];
              if (!v45)
              {
                int64_t v46 = v37 + 2;
                if (v37 + 2 >= v105) {
                  goto LABEL_39;
                }
                unint64_t v45 = *(void *)&v104[8 * v46];
                if (!v45)
                {
                  int64_t v46 = v37 + 3;
                  if (v37 + 3 >= v105) {
                    goto LABEL_39;
                  }
                  unint64_t v45 = *(void *)&v104[8 * v46];
                  if (!v45)
                  {
                    while (1)
                    {
                      int64_t v37 = v46 + 1;
                      if (__OFADD__(v46, 1)) {
                        goto LABEL_52;
                      }
                      if (v37 >= v105) {
                        goto LABEL_39;
                      }
                      unint64_t v45 = *(void *)&v104[8 * v37];
                      ++v46;
                      if (v45) {
                        goto LABEL_24;
                      }
                    }
                  }
                }
              }
              int64_t v37 = v46;
            }
LABEL_24:
            uint64_t v123 = (v45 - 1) & v45;
            unint64_t v43 = __clz(__rbit64(v45)) + (v37 << 6);
          }
          uint64_t v47 = v120;
          (*(void (**)(char *, unint64_t, uint64_t))(v120 + 16))(v36, v34[6] + *(void *)(v120 + 72) * v43, v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v36, 0, 1, v35);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v36, 1, v35) == 1) {
            goto LABEL_40;
          }
          int64_t v121 = v37;
          (*v112)(v17, v36, v35);
          uint64_t v48 = sub_100C9B4CC((uint64_t)v17);
          if (v48)
          {
            uint64_t v49 = *(void *)&v33[v103];
            unint64_t v51 = *(os_unfair_lock_s **)(v49 + 16);
            uint64_t v50 = (os_unfair_lock_s **)(v49 + 16);
            os_unfair_lock_lock(v51);
            unint64_t v52 = *(void **)&v33[v42];
            if (v52)
            {
              uint64_t v53 = *(char **)&v33[v42];
            }
            else
            {
              id v54 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
              uint64_t v55 = v33;
              id v56 = sub_100EAFDE4((uint64_t)v55);

              uint64_t v57 = *(void **)&v33[v42];
              *(void *)&v33[v42] = v56;
              uint64_t v53 = (char *)v56;

              unint64_t v52 = 0;
            }
            uint64_t v98 = v50;
            uint64_t v58 = *v50;
            id v59 = v52;
            os_unfair_lock_unlock(v58);
            uint64_t v60 = *(void *)(v48 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
            unint64_t v61 = *(void *)(v48 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension + 8);
            sub_100EA56DC();
            uint64_t v115 = v48;
            uint64_t v116 = 0;
            sub_100EB02FC((uint64_t)v17, v60, v61);
            uint64_t v62 = v106;
            URL.appendingPathComponent(_:)();
            swift_bridgeObjectRelease();
            sub_100EA5F9C((uint64_t)v17, v62, 1);
            UUID.uuidString.getter();
            uint64_t v63 = (uint64_t)v17;
            uint64_t v64 = (uint64_t)v107;
            URL.appendingPathComponent(_:)();
            swift_bridgeObjectRelease();
            if (qword_10166FBD8 != -1) {
              swift_once();
            }
            swift_beginAccess();
            uint64_t v65 = (void *)static OS_os_log.assetManagement;
            sub_1005057FC((uint64_t *)&unk_101672B40);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v101;
            id v67 = v65;
            uint64_t v68 = UUID.uuidString.getter();
            uint64_t v70 = v69;
            *(void *)(inited + 56) = &type metadata for String;
            *(void *)(inited + 64) = sub_100528BE4();
            *(void *)(inited + 32) = v68;
            *(void *)(inited + 40) = v70;
            uint64_t v71 = static os_log_type_t.default.getter();
            sub_100BAC898((uint64_t)v67, (uint64_t)&_mh_execute_header, v71, (uint64_t)"CRLAssetFileManager moveAssetFileToDeletedDirectory() assetUUID: %@", 67, 2, inited);
            swift_setDeallocating();
            sub_1005057FC(&qword_101672B50);
            swift_arrayDestroy();

            uint64_t v72 = *(void *)&v53[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_lock];
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v72 + 16));
            swift_beginAccess();
            uint64_t v73 = v108;
            sub_10095B150(v63, v108);
            sub_100522F00(v73, (uint64_t *)&unk_101674170);
            swift_endAccess();
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v72 + 16));
            id v74 = [self defaultManager];
            uint64_t v75 = v116;
            sub_100EAC8DC((uint64_t)v62, v64, 1, 1);
            if (v75)
            {

              uint64_t v86 = *v99;
              uint64_t v87 = v109;
              (*v99)(v64, v109);
              v86((uint64_t)v62, v87);
              char v88 = v100;
              uint64_t v89 = v119;
              uint64_t v90 = v102;

              (*v110)(v63, v89);
              swift_release();
              swift_release();
              uint64_t v91 = v98;
              os_unfair_lock_lock(*v98);
              uint64_t v79 = *(void **)&v88[v90];
              if (v79)
              {
                id v80 = *(id *)&v88[v90];
              }
              else
              {
                id v92 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
                uint64_t v93 = v88;
                id v94 = sub_100EAFDE4((uint64_t)v93);

                unsigned int v95 = *(void **)&v88[v90];
                *(void *)&v88[v90] = v94;
                id v80 = v94;

                uint64_t v79 = 0;
              }
              uint64_t v85 = *v91;
              goto LABEL_48;
            }

            uint64_t v76 = *v99;
            uint64_t v77 = v109;
            (*v99)(v64, v109);
            v76((uint64_t)v62, v77);
            uint64_t v35 = v119;
            (*v110)(v63, v119);
            swift_release();

            uint64_t v33 = v100;
            uint64_t v42 = v102;
            uint64_t v17 = (char *)v63;
            uint64_t v36 = v118;
          }
          else
          {
            (*v110)((uint64_t)v17, v35);
          }
          uint64_t v34 = v111;
          int64_t v37 = v121;
          unint64_t v41 = v123;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
  }
}

uint64_t sub_100C96320(uint64_t a1)
{
  uint64_t v63 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v7 = v8;
  unsigned int v9 = enum case for DispatchPredicate.onQueue(_:);
  id v67 = *(void (**)(void *, void, uint64_t))(v4 + 104);
  v67(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v8;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v64 = *(void (**)(void *, uint64_t))(v4 + 8);
  v64(v7, v3);
  if ((v11 & 1) == 0) {
    goto LABEL_24;
  }
  unsigned int v66 = v9;
  uint64_t v65 = v4 + 104;
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v69 = 0x205443454C4553;
  unint64_t v70 = 0xE700000000000000;
  v12._uint64_t countAndFlagsBits = sub_100CD8420(0, 0xE000000000000000);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x204D4F524620;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  v14._object = (void *)0x800000010127C660;
  v14._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0x2820455245485720;
  v15._object = (void *)0xE800000000000000;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0xD000000000000013;
  v16._object = (void *)0x800000010127CB90;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 0x293F203D20;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  uint64_t v18 = v69;
  uint64_t v19 = v70;
  unint64_t v68 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v20 = swift_retain();
  uint64_t v21 = sub_10079FC40(v20, v18, v19);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
  uint64_t v22 = v21;
  swift_release();
  uint64_t v23 = sub_100511430();
  uint64_t v63 = 0;
  uint64_t v33 = v23;
  unint64_t v34 = v24;
  sub_10079DCE4(v23, v24, 1);
  sub_100510084(v33, v34);
  uint64_t v35 = *(void **)(*(void *)(v22 + 16) + 32);
  *uint64_t v7 = v35;
  v67(v7, v66, v3);
  id v36 = v35;
  char v37 = _dispatchPreconditionTest(_:)();
  uint64_t v38 = v64;
  v64(v7, v3);
  if ((v37 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t inited = (void *)swift_initStackObject();
  inited[3] = 0;
  inited[4] = 0;
  unint64_t v61 = inited + 4;
  inited[5] = 1;
  inited[2] = v22;
  uint64_t v40 = *(void **)(*(void *)(v22 + 16) + 32);
  *uint64_t v7 = v40;
  uint64_t v62 = v22;
  swift_retain();
  v67(v7, v66, v3);
  id v41 = v40;
  LOBYTE(v40) = _dispatchPreconditionTest(_:)();
  v38(v7, v3);
  if ((v40 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once();
LABEL_6:
    swift_beginAccess();
    uint64_t v25 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v26 = swift_initStackObject();
    *(_OWORD *)(v26 + 16) = xmmword_10117E810;
    swift_getErrorValue();
    id v27 = v25;
    uint64_t v28 = Error.localizedDescription.getter();
    uint64_t v30 = v29;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_100528BE4();
    *(void *)(v26 + 32) = v28;
    *(void *)(v26 + 40) = v30;
    uint64_t v31 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v27, (uint64_t)&_mh_execute_header, v31, (uint64_t)"Failed to fetch an asset reference with error %@", 48, 2, v26);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    return swift_willThrow();
  }
  uint64_t v42 = v62;
  while (1)
  {
    uint64_t v45 = inited[3];
    uint64_t v46 = inited[4];
    uint64_t v47 = inited[5];
    inited[3] = 0;
    inited[4] = 0;
    inited[5] = 1;
    sub_1007A0344(v45, v46, v47);
    swift_beginAccess();
    unsigned int v48 = sqlite3_step(*(sqlite3_stmt **)(v42 + 24));
    if (v48 != 100) {
      break;
    }
    uint64_t v49 = swift_retain_n();
    if (sub_100CD8630(v49, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      uint64_t v38 = v64;
    }
    swift_release();
    uint64_t v42 = inited[2];
    unint64_t v43 = *(void **)(*(void *)(v42 + 16) + 32);
    *uint64_t v7 = v43;
    v67(v7, v66, v3);
    id v44 = v43;
    LOBYTE(v43) = _dispatchPreconditionTest(_:)();
    v38(v7, v3);
    if ((v43 & 1) == 0) {
      goto LABEL_23;
    }
  }
  if (v48 && v48 != 101)
  {
    uint64_t v50 = v48;
    uint64_t v51 = inited[3];
    uint64_t v52 = inited[4];
    uint64_t v53 = inited[5];
    inited[3] = v50;
    id v54 = v61;
    *unint64_t v61 = 0;
    v54[1] = 0;
    sub_1007A0344(v51, v52, v53);
  }
  swift_release();
  uint64_t v55 = v62;
  id v56 = *(void **)(*(void *)(v62 + 16) + 32);
  *uint64_t v7 = v56;
  v67(v7, v66, v3);
  id v57 = v56;
  char v58 = _dispatchPreconditionTest(_:)();
  v38(v7, v3);
  if ((v58 & 1) == 0) {
LABEL_27:
  }
    __break(1u);
  swift_beginAccess();
  id v59 = *(sqlite3_stmt **)(v55 + 24);
  if (v59)
  {
    sqlite3_finalize(v59);
    *(void *)(v55 + 24) = 0;
  }
  swift_release();
  return v68;
}

double *sub_100C96B2C(sqlite3_stmt **a1, uint64_t a2)
{
  uint64_t v156 = a2;
  uint64_t v152 = a1;
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v154 = (char *)v133 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = type metadata accessor for UUID();
  uint64_t v153 = *(void *)(v157 - 8);
  __chkstk_darwin(v157, v7);
  uint64_t v150 = (char *)v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v149 = (char *)v133 - v11;
  uint64_t v12 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v12, v13);
  Swift::String v15 = (char *)v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (void *)((char *)v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v21 = v22;
  uint64_t v23 = *(void (**)(void, __n128))(v17 + 104);
  unsigned int v161 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v160 = v17 + 104;
  uint64_t v158 = (void (*)(void *, void, uint64_t))v23;
  v23(v21, v19);
  id v24 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t v26 = *(void (**)(void *, uint64_t))(v17 + 8);
  uint64_t v25 = (sqlite3_stmt **)(v17 + 8);
  uint64_t v159 = v26;
  v26(v21, v16);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v155 = v15;
  unint64_t v162 = 0;
  unint64_t v163 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  unint64_t v162 = 0xD00000000000005ALL;
  unint64_t v163 = 0x800000010127E6B0;
  v27._uint64_t countAndFlagsBits = sub_100CDF3CC((uint64_t)&off_101502790, 0);
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 41;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  uint64_t v29 = v162;
  uint64_t v30 = v163;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v31 = swift_retain();
  uint64_t v32 = sub_10079FC40(v31, v29, v30);
  if (v3) {
    goto LABEL_4;
  }
  uint64_t v147 = v32;
  uint64_t v151 = v16;
  swift_release();
  uint64_t v33 = sub_1005057FC(&qword_101674240);
  uint64_t v34 = (uint64_t)&v155[*(int *)(v33 + 48)];
  uint64_t v36 = v153 + 16;
  uint64_t v35 = *(void (**)(char *, sqlite3_stmt **, uint64_t))(v153 + 16);
  v35(v155, v152, v157);
  sub_100CE144C(v156, v34, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = sub_100511430();
  unint64_t v39 = v38;
  uint64_t v139 = (void (*)(char *, char *, uint64_t))v35;
  uint64_t v140 = v36;
  uint64_t v40 = v147;
  sub_10079DCE4(v37, v38, 1);
  sub_100510084(v37, v39);
  uint64_t v41 = sub_100753FC0();
  uint64_t v156 = 0;
  uint64_t v136 = v41;
  unint64_t v137 = v42;
  sub_10079DCE4(v41, v42, 2);
  uint64_t v51 = *(void *)(v40 + 16);
  uint64_t v141 = v40 + 16;
  uint64_t v52 = *(void **)(v51 + 32);
  *uint64_t v21 = v52;
  uint64_t v53 = v151;
  id v54 = v158;
  v158(v21, v161, v151);
  id v55 = v52;
  LOBYTE(v52) = _dispatchPreconditionTest(_:)();
  id v56 = v159;
  uint64_t v152 = v25;
  v159(v21, v53);
  if ((v52 & 1) == 0) {
    goto LABEL_43;
  }
  id v57 = v56;
  uint64_t v58 = v40;
  type metadata accessor for SQLiteRowIterator();
  uint64_t inited = (void *)swift_initStackObject();
  inited[3] = 0;
  uint64_t v146 = inited + 3;
  inited[4] = 0;
  unint64_t v135 = inited + 4;
  inited[5] = 1;
  inited[2] = v58;
  uint64_t v60 = *(void **)(*(void *)(v58 + 16) + 32);
  *uint64_t v21 = v60;
  swift_retain();
  v54(v21, v161, v53);
  id v61 = v60;
  char v62 = _dispatchPreconditionTest(_:)();
  uint64_t v63 = v152;
  v57(v21, v53);
  uint64_t v64 = v156;
  if ((v62 & 1) == 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    __break(1u);
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  long long v144 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v153 + 56);
  uint64_t v142 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48);
  unint64_t v134 = (void (**)(char *, uint64_t, uint64_t))(v153 + 32);
  uint64_t v138 = _swiftEmptyArrayStorage;
  v133[1] = v153 + 8;
  uint64_t v65 = v141;
  uint64_t v66 = v147;
  uint64_t v145 = inited;
  uint64_t v143 = v21;
  while (1)
  {
    uint64_t v73 = inited[3];
    uint64_t v74 = inited[4];
    uint64_t v75 = inited[5];
    uint64_t v76 = v146;
    *uint64_t v146 = 0;
    v76[1] = 0;
    inited[5] = 1;
    sub_1007A0344(v73, v74, v75);
    swift_beginAccess();
    unsigned int v77 = sqlite3_step(*(sqlite3_stmt **)(v66 + 24));
    if (v77 != 100) {
      break;
    }
    uint64_t v78 = v66;
    uint64_t v152 = (sqlite3_stmt **)(v66 + 24);
    uint64_t v79 = v63;
    uint64_t v80 = v151;
    uint64_t v156 = v64;
    id v81 = *(void **)(*(void *)v65 + 32);
    *uint64_t v21 = v81;
    uint64_t v82 = v78;
    id v83 = v158;
    v158(v21, v161, v80);
    uint64_t v148 = v82;
    swift_retain();
    id v84 = v81;
    LOBYTE(v81) = _dispatchPreconditionTest(_:)();
    uint64_t v85 = v159;
    v159(v21, v80);
    if ((v81 & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v86 = *(void **)(*(void *)v65 + 32);
    *uint64_t v21 = v86;
    v83(v21, v161, v80);
    id v87 = v86;
    LOBYTE(v86) = _dispatchPreconditionTest(_:)();
    v85(v21, v80);
    if ((v86 & 1) == 0) {
      goto LABEL_41;
    }
    char v88 = *(void **)(*(void *)v65 + 32);
    *uint64_t v21 = v88;
    v83(v21, v161, v80);
    id v89 = v88;
    char v90 = _dispatchPreconditionTest(_:)();
    uint64_t v91 = v80;
    v85(v21, v80);
    if ((v90 & 1) == 0) {
      goto LABEL_42;
    }
    id v92 = v152;
    if (sqlite3_column_type(*v152, 0) == 5 || (uint64_t v93 = sqlite3_column_blob(*v92, 0)) == 0)
    {
      uint64_t v67 = (uint64_t)v154;
      (*v144)(v154, 1, 1, v157);
      unint64_t v68 = v79;
LABEL_10:
      swift_release();
      sub_100522F00(v67, (uint64_t *)&unk_101674520);
      uint64_t inited = v145;
      uint64_t v66 = v145[2];
      uint64_t v65 = v66 + 16;
      uint64_t v69 = *(void **)(*(void *)(v66 + 16) + 32);
      unint64_t v70 = v143;
      *uint64_t v143 = v69;
      uint64_t v21 = v70;
      ((void (*)(void))v158)();
      id v71 = v69;
      LOBYTE(v69) = _dispatchPreconditionTest(_:)();
      uint64_t v72 = v91;
      uint64_t v63 = v68;
      v159(v21, v72);
      uint64_t v64 = v156;
      if ((v69 & 1) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      id v94 = v93;
      int v95 = sqlite3_column_bytes(*v92, 0);
      uint64_t v96 = sub_100670608(v94, v95);
      uint64_t v67 = (uint64_t)v154;
      uint64_t v97 = v156;
      UUID.init(crl_data:)(v96, v98);
      uint64_t v64 = v97;
      if (v97)
      {
        swift_release();
        swift_release();
        sub_100510084(v136, v137);
        sub_100CE14B4((uint64_t)v155, type metadata accessor for CRLAssetReferrerIdentifier);
        swift_bridgeObjectRelease();
        uint64_t v128 = *(void **)(*(void *)v141 + 32);
        *uint64_t v21 = v128;
        v158(v21, v161, v80);
        id v129 = v128;
        char v130 = _dispatchPreconditionTest(_:)();
        v159(v21, v80);
        uint64_t v131 = v147;
        if (v130)
        {
          swift_beginAccess();
          unint64_t v132 = *(sqlite3_stmt **)(v131 + 24);
          if (v132)
          {
            sqlite3_finalize(v132);
            *(void *)(v131 + 24) = 0;
          }
LABEL_4:
          swift_release();
          if (qword_10166FB70 == -1)
          {
LABEL_5:
            swift_beginAccess();
            unint64_t v43 = (void *)static OS_os_log.boardStore;
            sub_1005057FC((uint64_t *)&unk_101672B40);
            uint64_t v44 = swift_initStackObject();
            *(_OWORD *)(v44 + 16) = xmmword_10117E810;
            swift_getErrorValue();
            id v45 = v43;
            uint64_t v46 = Error.localizedDescription.getter();
            uint64_t v48 = v47;
            *(void *)(v44 + 56) = &type metadata for String;
            *(void *)(v44 + 64) = sub_100528BE4();
            *(void *)(v44 + 32) = v46;
            *(void *)(v44 + 40) = v48;
            uint64_t v49 = static os_log_type_t.error.getter();
            sub_100BAC898((uint64_t)v45, (uint64_t)&_mh_execute_header, v49, (uint64_t)"Failed to fetch an asset reference with error %@", 48, 2, v44);
            swift_setDeallocating();
            sub_1005057FC(&qword_101672B50);
            swift_arrayDestroy();

            return (double *)swift_willThrow();
          }
LABEL_38:
          swift_once();
          goto LABEL_5;
        }
LABEL_45:
        __break(1u);
      }
      uint64_t v99 = v157;
      (*v144)((char *)v67, 0, 1, v157);
      if ((*v142)(v67, 1, v99) == 1)
      {
        uint64_t v156 = 0;
        unint64_t v68 = v79;
        goto LABEL_10;
      }
      int v100 = *v134;
      long long v101 = v149;
      uint64_t v102 = v157;
      (*v134)(v149, v67, v157);
      v139(v150, v101, v102);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v104 = v161;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v138 = (double *)sub_100F617D8(0, *((void *)v138 + 2) + 1, 1, (unint64_t)v138);
      }
      uint64_t v105 = v153;
      int v106 = v138;
      unint64_t v108 = *((void *)v138 + 2);
      unint64_t v107 = *((void *)v138 + 3);
      uint64_t v63 = v79;
      if (v108 >= v107 >> 1)
      {
        uint64_t v117 = sub_100F617D8(v107 > 1, v108 + 1, 1, (unint64_t)v138);
        uint64_t v105 = v153;
        int v106 = (double *)v117;
      }
      *((void *)v106 + 2) = v108 + 1;
      unint64_t v109 = (*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
      uint64_t v138 = v106;
      uint64_t v110 = (char *)v106 + v109 + *(void *)(v105 + 72) * v108;
      uint64_t v111 = v157;
      uint64_t v112 = v105;
      v100(v110, (uint64_t)v150, v157);
      swift_release();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v149, v111);
      uint64_t inited = v145;
      uint64_t v66 = v145[2];
      uint64_t v65 = v66 + 16;
      uint64_t v113 = *(void **)(*(void *)(v66 + 16) + 32);
      *uint64_t v21 = v113;
      uint64_t v114 = v104;
      uint64_t v115 = v151;
      v158(v21, v114, v151);
      id v116 = v113;
      LOBYTE(v113) = _dispatchPreconditionTest(_:)();
      v159(v21, v115);
      if ((v113 & 1) == 0) {
        goto LABEL_39;
      }
    }
  }
  if (v77 && v77 != 101)
  {
    uint64_t v118 = v77;
    uint64_t v119 = inited[3];
    uint64_t v120 = inited[4];
    uint64_t v121 = inited[5];
    inited[3] = v118;
    uint64_t v122 = v135;
    *unint64_t v135 = 0;
    v122[1] = 0;
    sub_1007A0344(v119, v120, v121);
  }
  sub_100CE14B4((uint64_t)v155, type metadata accessor for CRLAssetReferrerIdentifier);
  swift_setDeallocating();
  swift_release();
  sub_1007A0344(inited[3], inited[4], inited[5]);
  sub_100510084(v136, v137);
  uint64_t v123 = *(void **)(*(void *)v141 + 32);
  *uint64_t v21 = v123;
  uint64_t v124 = v151;
  v158(v21, v161, v151);
  id v125 = v123;
  LOBYTE(v123) = _dispatchPreconditionTest(_:)();
  v159(v21, v124);
  if ((v123 & 1) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v126 = v147;
  swift_beginAccess();
  uint64_t v127 = *(sqlite3_stmt **)(v126 + 24);
  if (v127)
  {
    sqlite3_finalize(v127);
    *(void *)(v126 + 24) = 0;
  }
  swift_release();
  return v138;
}

uint64_t sub_100C9797C(sqlite3_int64 a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (void (**)(void *, uint64_t, uint64_t))((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v9 = v10;
  uint64_t v11 = enum case for DispatchPredicate.onQueue(_:);
  Swift::String v27 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  ((void (*)(void *, void, uint64_t, __n128))v27)(v9, enum case for DispatchPredicate.onQueue(_:), v4, v7);
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  Swift::String v28 = *(void (**)(void *, uint64_t))(v5 + 8);
  v28(v9, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10079FC40(v13, 0xD000000000000026, 0x800000010127EF00);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  sub_10079D8A8(a1, 1);
  uint64_t v16 = *(void **)(*(void *)(v14 + 16) + 32);
  *uint64_t v9 = v16;
  v27(v9, v11, v4);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  v28(v9, v4);
  if ((v16 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v18 = (sqlite3_stmt **)(v14 + 24);
  swift_beginAccess();
  int v19 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
  if (v19 != 101) {
    goto LABEL_7;
  }
  uint64_t v20 = *(void **)(*(void *)(v14 + 16) + 32);
  *uint64_t v9 = v20;
  v27(v9, v11, v4);
  id v21 = v20;
  uint64_t v11 = _dispatchPreconditionTest(_:)();
  int v19 = ((uint64_t (*)(void *, uint64_t))v28)(v9, v4);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    int v22 = v19;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v23 = v22;
    *(void *)(v23 + 8) = 0xD000000000000027;
    *(void *)(v23 + 16) = 0x800000010127EF30;
    swift_willThrow();
    id v24 = *(void **)(*(void *)(v14 + 16) + 32);
    *uint64_t v9 = v24;
    v27(v9, v11, v4);
    id v25 = v24;
    char v26 = _dispatchPreconditionTest(_:)();
    v28(v9, v4);
    if (v26) {
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
  }
LABEL_8:
  if (*v18)
  {
    sqlite3_finalize(*v18);
    *uint64_t v18 = 0;
  }
  return swift_release();
}

uint64_t sub_100C97D04()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  __n128 v7 = (void *)((char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *__n128 v7 = v8;
  uint64_t v9 = *(void (**)(void, __n128))(v3 + 104);
  unsigned int v41 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v42 = (void (*)(void *, void, uint64_t))v9;
  v9(v7, v5);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  id v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  uint64_t v11 = v3 + 8;
  unint64_t v43 = v12;
  v12(v7, v2);
  if ((v8 & 1) == 0) {
    goto LABEL_23;
  }
  v40[1] = v11;
  uint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10079FC40(v13, 0xD000000000000027, 0x800000010127EE40);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v16 = *(void **)(*(void *)(v14 + 16) + 32);
    *__n128 v7 = v16;
    v42(v7, v41, v2);
    id v17 = v16;
    LOBYTE(v16) = _dispatchPreconditionTest(_:)();
    v43(v7, v2);
    if ((v16 & 1) == 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v40[0] = v14 + 24;
    swift_beginAccess();
    int v18 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
    if (v18 == 101)
    {
      uint64_t v44 = 0;
      unint64_t v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      swift_initStackObject();
      uint64_t v19 = swift_retain();
      uint64_t v25 = sub_10079FC40(v19, 0xD000000000000022, 0x800000010127EEA0);
      swift_release();
      char v26 = *(void **)(*(void *)(v25 + 16) + 32);
      *__n128 v7 = v26;
      v42(v7, v41, v2);
      id v27 = v26;
      LOBYTE(v26) = _dispatchPreconditionTest(_:)();
      v43(v7, v2);
      if ((v26 & 1) == 0) {
        goto LABEL_26;
      }
      Swift::String v28 = (sqlite3_stmt **)(v25 + 24);
      swift_beginAccess();
      int v29 = sqlite3_step(*(sqlite3_stmt **)(v25 + 24));
      if (v29 != 101)
      {
LABEL_18:
        int v34 = v29;
        sub_10079FF00();
        swift_allocError();
        *(_DWORD *)uint64_t v35 = v34;
        *(void *)(v35 + 8) = 0xD000000000000020;
        *(void *)(v35 + 16) = 0x800000010127EED0;
        swift_willThrow();
        uint64_t v36 = *(void **)(*(void *)(v25 + 16) + 32);
        *__n128 v7 = v36;
        v42(v7, v41, v2);
        id v37 = v36;
        LOBYTE(v36) = _dispatchPreconditionTest(_:)();
        v43(v7, v2);
        if ((v36 & 1) == 0) {
          goto LABEL_28;
        }
        if (*v28)
        {
          sqlite3_finalize(*v28);
          *Swift::String v28 = 0;
        }
        swift_release();
        unint64_t v38 = *(void **)(*(void *)(v14 + 16) + 32);
        *__n128 v7 = v38;
        v42(v7, v41, v2);
        id v39 = v38;
        LOBYTE(v38) = _dispatchPreconditionTest(_:)();
        v43(v7, v2);
        if ((v38 & 1) == 0)
        {
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        goto LABEL_7;
      }
      unint64_t v30 = *(void **)(*(void *)(v25 + 16) + 32);
      *__n128 v7 = v30;
      v42(v7, v41, v2);
      id v31 = v30;
      LOBYTE(v30) = _dispatchPreconditionTest(_:)();
      v43(v7, v2);
      if ((v30 & 1) == 0)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      if (*v28)
      {
        sqlite3_finalize(*v28);
        *Swift::String v28 = 0;
      }
      swift_release();
      uint64_t v32 = *(void **)(*(void *)(v14 + 16) + 32);
      *__n128 v7 = v32;
      v42(v7, v41, v2);
      id v33 = v32;
      uint64_t v25 = _dispatchPreconditionTest(_:)();
      int v29 = ((uint64_t (*)(void *, uint64_t))v43)(v7, v2);
      if ((v25 & 1) == 0)
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      int v20 = v18;
      sub_10079FF00();
      swift_allocError();
      *(_DWORD *)uint64_t v21 = v20;
      *(void *)(v21 + 8) = 0xD000000000000025;
      *(void *)(v21 + 16) = 0x800000010127EE70;
      swift_willThrow();
      int v22 = *(void **)(*(void *)(v14 + 16) + 32);
      *__n128 v7 = v22;
      v42(v7, v41, v2);
      id v23 = v22;
      LOBYTE(v22) = _dispatchPreconditionTest(_:)();
      v43(v7, v2);
      if ((v22 & 1) == 0)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
LABEL_7:
    id v24 = (void *)v40[0];
    if (*(void *)v40[0])
    {
      sqlite3_finalize(*(sqlite3_stmt **)v40[0]);
      *id v24 = 0;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100C98368(sqlite3_int64 a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (void (**)(void *, uint64_t, uint64_t))((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v9 = v10;
  uint64_t v11 = enum case for DispatchPredicate.onQueue(_:);
  id v27 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  ((void (*)(void *, void, uint64_t, __n128))v27)(v9, enum case for DispatchPredicate.onQueue(_:), v4, v7);
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  Swift::String v28 = *(void (**)(void *, uint64_t))(v5 + 8);
  v28(v9, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10079FC40(v13, 0xD00000000000002BLL, 0x800000010127EF60);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  sub_10079D8A8(a1, 1);
  uint64_t v16 = *(void **)(*(void *)(v14 + 16) + 32);
  *uint64_t v9 = v16;
  v27(v9, v11, v4);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  v28(v9, v4);
  if ((v16 & 1) == 0) {
    goto LABEL_13;
  }
  int v18 = (sqlite3_stmt **)(v14 + 24);
  swift_beginAccess();
  int v19 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
  if (v19 != 101) {
    goto LABEL_7;
  }
  int v20 = *(void **)(*(void *)(v14 + 16) + 32);
  *uint64_t v9 = v20;
  v27(v9, v11, v4);
  id v21 = v20;
  uint64_t v11 = _dispatchPreconditionTest(_:)();
  int v19 = ((uint64_t (*)(void *, uint64_t))v28)(v9, v4);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    int v22 = v19;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v23 = v22;
    *(void *)(v23 + 8) = 0xD00000000000002DLL;
    *(void *)(v23 + 16) = 0x800000010127EF90;
    swift_willThrow();
    id v24 = *(void **)(*(void *)(v14 + 16) + 32);
    *uint64_t v9 = v24;
    v27(v9, v11, v4);
    id v25 = v24;
    char v26 = _dispatchPreconditionTest(_:)();
    v28(v9, v4);
    if (v26) {
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
  }
LABEL_8:
  if (*v18)
  {
    sqlite3_finalize(*v18);
    *int v18 = 0;
  }
  return swift_release();
}

uint64_t sub_100C986F0()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  __n128 v7 = (void *)((char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *__n128 v7 = v8;
  uint64_t v9 = *(void (**)(void, __n128))(v3 + 104);
  unsigned int v41 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v42 = (void (*)(void *, void, uint64_t))v9;
  v9(v7, v5);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  id v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  uint64_t v11 = v3 + 8;
  unint64_t v43 = v12;
  v12(v7, v2);
  if ((v8 & 1) == 0) {
    goto LABEL_23;
  }
  v40[1] = v11;
  uint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10079FC40(v13, 0xD00000000000002CLL, 0x800000010127ED80);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v16 = *(void **)(*(void *)(v14 + 16) + 32);
    *__n128 v7 = v16;
    v42(v7, v41, v2);
    id v17 = v16;
    LOBYTE(v16) = _dispatchPreconditionTest(_:)();
    v43(v7, v2);
    if ((v16 & 1) == 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v40[0] = v14 + 24;
    swift_beginAccess();
    int v18 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
    if (v18 == 101)
    {
      uint64_t v44 = 0;
      unint64_t v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      swift_initStackObject();
      uint64_t v19 = swift_retain();
      uint64_t v25 = sub_10079FC40(v19, 0xD000000000000027, 0x800000010127EDE0);
      swift_release();
      char v26 = *(void **)(*(void *)(v25 + 16) + 32);
      *__n128 v7 = v26;
      v42(v7, v41, v2);
      id v27 = v26;
      LOBYTE(v26) = _dispatchPreconditionTest(_:)();
      v43(v7, v2);
      if ((v26 & 1) == 0) {
        goto LABEL_26;
      }
      Swift::String v28 = (sqlite3_stmt **)(v25 + 24);
      swift_beginAccess();
      int v29 = sqlite3_step(*(sqlite3_stmt **)(v25 + 24));
      if (v29 != 101)
      {
LABEL_18:
        int v34 = v29;
        sub_10079FF00();
        swift_allocError();
        *(_DWORD *)uint64_t v35 = v34;
        *(void *)(v35 + 8) = 0xD000000000000025;
        *(void *)(v35 + 16) = 0x800000010127EE10;
        swift_willThrow();
        uint64_t v36 = *(void **)(*(void *)(v25 + 16) + 32);
        *__n128 v7 = v36;
        v42(v7, v41, v2);
        id v37 = v36;
        LOBYTE(v36) = _dispatchPreconditionTest(_:)();
        v43(v7, v2);
        if ((v36 & 1) == 0) {
          goto LABEL_28;
        }
        if (*v28)
        {
          sqlite3_finalize(*v28);
          *Swift::String v28 = 0;
        }
        swift_release();
        unint64_t v38 = *(void **)(*(void *)(v14 + 16) + 32);
        *__n128 v7 = v38;
        v42(v7, v41, v2);
        id v39 = v38;
        LOBYTE(v38) = _dispatchPreconditionTest(_:)();
        v43(v7, v2);
        if ((v38 & 1) == 0)
        {
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        goto LABEL_7;
      }
      unint64_t v30 = *(void **)(*(void *)(v25 + 16) + 32);
      *__n128 v7 = v30;
      v42(v7, v41, v2);
      id v31 = v30;
      LOBYTE(v30) = _dispatchPreconditionTest(_:)();
      v43(v7, v2);
      if ((v30 & 1) == 0)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      if (*v28)
      {
        sqlite3_finalize(*v28);
        *Swift::String v28 = 0;
      }
      swift_release();
      uint64_t v32 = *(void **)(*(void *)(v14 + 16) + 32);
      *__n128 v7 = v32;
      v42(v7, v41, v2);
      id v33 = v32;
      uint64_t v25 = _dispatchPreconditionTest(_:)();
      int v29 = ((uint64_t (*)(void *, uint64_t))v43)(v7, v2);
      if ((v25 & 1) == 0)
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      int v20 = v18;
      sub_10079FF00();
      swift_allocError();
      *(_DWORD *)uint64_t v21 = v20;
      *(void *)(v21 + 8) = 0xD00000000000002ALL;
      *(void *)(v21 + 16) = 0x800000010127EDB0;
      swift_willThrow();
      int v22 = *(void **)(*(void *)(v14 + 16) + 32);
      *__n128 v7 = v22;
      v42(v7, v41, v2);
      id v23 = v22;
      LOBYTE(v22) = _dispatchPreconditionTest(_:)();
      v43(v7, v2);
      if ((v22 & 1) == 0)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
LABEL_7:
    id v24 = (void *)v40[0];
    if (*(void *)v40[0])
    {
      sqlite3_finalize(*(sqlite3_stmt **)v40[0]);
      *id v24 = 0;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100C98D54()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  __n128 v7 = (void *)((char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *__n128 v7 = v8;
  uint64_t v9 = *(void (**)(void, __n128))(v3 + 104);
  unsigned int v41 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v42 = (void (*)(void *, void, uint64_t))v9;
  v9(v7, v5);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  id v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  uint64_t v11 = v3 + 8;
  unint64_t v43 = v12;
  v12(v7, v2);
  if ((v8 & 1) == 0) {
    goto LABEL_23;
  }
  v40[1] = v11;
  uint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10079FC40(v13, 0xD000000000000045, 0x8000000101282940);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v16 = *(void **)(*(void *)(v14 + 16) + 32);
    *__n128 v7 = v16;
    v42(v7, v41, v2);
    id v17 = v16;
    LOBYTE(v16) = _dispatchPreconditionTest(_:)();
    v43(v7, v2);
    if ((v16 & 1) == 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v40[0] = v14 + 24;
    swift_beginAccess();
    int v18 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
    if (v18 == 101)
    {
      uint64_t v44 = 0;
      unint64_t v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      swift_initStackObject();
      uint64_t v19 = swift_retain();
      uint64_t v25 = sub_10079FC40(v19, 0xD000000000000040, 0x80000001012829D0);
      swift_release();
      char v26 = *(void **)(*(void *)(v25 + 16) + 32);
      *__n128 v7 = v26;
      v42(v7, v41, v2);
      id v27 = v26;
      LOBYTE(v26) = _dispatchPreconditionTest(_:)();
      v43(v7, v2);
      if ((v26 & 1) == 0) {
        goto LABEL_26;
      }
      Swift::String v28 = (sqlite3_stmt **)(v25 + 24);
      swift_beginAccess();
      int v29 = sqlite3_step(*(sqlite3_stmt **)(v25 + 24));
      if (v29 != 101)
      {
LABEL_18:
        int v34 = v29;
        sub_10079FF00();
        swift_allocError();
        *(_DWORD *)uint64_t v35 = v34;
        *(void *)(v35 + 8) = 0xD00000000000002CLL;
        *(void *)(v35 + 16) = 0x8000000101282A20;
        swift_willThrow();
        uint64_t v36 = *(void **)(*(void *)(v25 + 16) + 32);
        *__n128 v7 = v36;
        v42(v7, v41, v2);
        id v37 = v36;
        LOBYTE(v36) = _dispatchPreconditionTest(_:)();
        v43(v7, v2);
        if ((v36 & 1) == 0) {
          goto LABEL_28;
        }
        if (*v28)
        {
          sqlite3_finalize(*v28);
          *Swift::String v28 = 0;
        }
        swift_release();
        unint64_t v38 = *(void **)(*(void *)(v14 + 16) + 32);
        *__n128 v7 = v38;
        v42(v7, v41, v2);
        id v39 = v38;
        LOBYTE(v38) = _dispatchPreconditionTest(_:)();
        v43(v7, v2);
        if ((v38 & 1) == 0)
        {
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        goto LABEL_7;
      }
      unint64_t v30 = *(void **)(*(void *)(v25 + 16) + 32);
      *__n128 v7 = v30;
      v42(v7, v41, v2);
      id v31 = v30;
      LOBYTE(v30) = _dispatchPreconditionTest(_:)();
      v43(v7, v2);
      if ((v30 & 1) == 0)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      if (*v28)
      {
        sqlite3_finalize(*v28);
        *Swift::String v28 = 0;
      }
      swift_release();
      uint64_t v32 = *(void **)(*(void *)(v14 + 16) + 32);
      *__n128 v7 = v32;
      v42(v7, v41, v2);
      id v33 = v32;
      uint64_t v25 = _dispatchPreconditionTest(_:)();
      int v29 = ((uint64_t (*)(void *, uint64_t))v43)(v7, v2);
      if ((v25 & 1) == 0)
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      int v20 = v18;
      sub_10079FF00();
      swift_allocError();
      *(_DWORD *)uint64_t v21 = v20;
      *(void *)(v21 + 8) = 0xD000000000000031;
      *(void *)(v21 + 16) = 0x8000000101282990;
      swift_willThrow();
      int v22 = *(void **)(*(void *)(v14 + 16) + 32);
      *__n128 v7 = v22;
      v42(v7, v41, v2);
      id v23 = v22;
      LOBYTE(v22) = _dispatchPreconditionTest(_:)();
      v43(v7, v2);
      if ((v22 & 1) == 0)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
LABEL_7:
    id v24 = (void *)v40[0];
    if (*(void *)v40[0])
    {
      sqlite3_finalize(*(sqlite3_stmt **)v40[0]);
      *id v24 = 0;
    }
    return swift_release();
  }
  return result;
}

unint64_t sub_100C993D0()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v117 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for UUID();
  uint64_t v6 = *(void (***)(char *, uint64_t))(v116 - 8);
  uint64_t v8 = __chkstk_darwin(v116, v7);
  unint64_t v108 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v110 = (char *)&v105 - v11;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v17 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v16 = v17;
  uint64_t v18 = v13 + 104;
  uint64_t v19 = *(void (**)(void *))(v13 + 104);
  LODWORD(v111) = enum case for DispatchPredicate.onQueue(_:);
  v19(v16);
  id v20 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  int v22 = *(void (**)(void *, uint64_t))(v13 + 8);
  uint64_t v21 = v13 + 8;
  uint64_t v118 = v12;
  uint64_t v121 = v22;
  v22(v16, v12);
  if ((v17 & 1) == 0)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  unint64_t v109 = v6;
  uint64_t v120 = (void (*)(void *, void, uint64_t))v19;
  uint64_t v123 = 0;
  unint64_t v124 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  uint64_t v123 = 0x205443454C4553;
  unint64_t v124 = 0xE700000000000000;
  v23._uint64_t countAndFlagsBits = sub_100CDFDDC(0, 0xE000000000000000);
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0x204D4F524620;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0x737465737361;
  v25._object = (void *)0xE600000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 0x20455245485720;
  v26._object = (void *)0xE700000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v27._object = (void *)0xEE00657461645F65;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 0x44524F2030203E20;
  v28._object = (void *)0xEE00205942205245;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v29._object = (void *)0xEE00657461645F65;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = 0x4353454420;
  v30._object = (void *)0xE500000000000000;
  String.append(_:)(v30);
  uint64_t v31 = v123;
  uint64_t v32 = v124;
  unint64_t v122 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v33 = *(void *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v34 = swift_retain();
  uint64_t v35 = sub_10079FC40(v34, v31, v32);
  swift_release();
  if (v1)
  {
    swift_bridgeObjectRelease();
    return v33;
  }
  uint64_t v113 = 0;
  uint64_t v36 = *(void **)(*(void *)(v35 + 16) + 32);
  *uint64_t v16 = v36;
  uint64_t v37 = v118;
  unint64_t v38 = v120;
  uint64_t v39 = v18;
  v120(v16, v111, v118);
  id v40 = v36;
  LOBYTE(v36) = _dispatchPreconditionTest(_:)();
  unsigned int v41 = v121;
  v121(v16, v37);
  if ((v36 & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v42 = v35;
  unint64_t v43 = *(void **)(*(void *)(v35 + 16) + 32);
  *uint64_t v16 = v43;
  swift_retain();
  uint64_t v44 = v111;
  v38(v16, v111, v37);
  id v45 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)();
  v41(v16, v37);
  if ((v43 & 1) == 0)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v46 = v44;
  uint64_t v47 = v39;
  uint64_t v119 = (sqlite3_stmt **)(v42 + 24);
  uint64_t v114 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 7);
  unint64_t v107 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v109 + 6);
  int v106 = (void (**)(char *, uint64_t, uint64_t))(v109 + 4);
  ++v109;
  uint64_t v115 = v42;
  uint64_t v112 = v39;
  while (1)
  {
    sub_1007A0344(0, 0, 1);
    uint64_t v48 = v119;
    swift_beginAccess();
    unsigned int v49 = sqlite3_step(*v48);
    if (v49 != 100) {
      break;
    }
    uint64_t v50 = *(void **)(*(void *)(v42 + 16) + 32);
    *uint64_t v16 = v50;
    uint64_t v51 = v120;
    v120(v16, v46, v37);
    swift_retain_n();
    id v52 = v50;
    LOBYTE(v50) = _dispatchPreconditionTest(_:)();
    uint64_t v53 = v47;
    uint64_t v54 = v46;
    uint64_t v55 = v53;
    uint64_t v56 = v42;
    id v57 = v121;
    v121(v16, v37);
    if ((v50 & 1) == 0) {
      goto LABEL_44;
    }
    uint64_t v58 = *(void **)(*(void *)(v56 + 16) + 32);
    *uint64_t v16 = v58;
    v51(v16, v54, v37);
    id v59 = v58;
    LOBYTE(v58) = _dispatchPreconditionTest(_:)();
    v57(v16, v37);
    if ((v58 & 1) == 0) {
      goto LABEL_45;
    }
    uint64_t v60 = *(void **)(*(void *)(v56 + 16) + 32);
    *uint64_t v16 = v60;
    uint64_t v61 = v21;
    uint64_t v62 = v54;
    uint64_t v63 = v54;
    uint64_t v64 = v37;
    uint64_t v65 = v37;
    uint64_t v66 = v55;
    v51(v16, v63, v64);
    id v67 = v60;
    LOBYTE(v60) = _dispatchPreconditionTest(_:)();
    unint64_t v68 = v16;
    uint64_t v69 = v65;
    uint64_t v70 = v61;
    v57(v16, v69);
    if ((v60 & 1) == 0) {
      goto LABEL_46;
    }
    id v71 = v119;
    if (sqlite3_column_type(*v119, 0) == 5)
    {
      uint64_t v73 = v116;
      uint64_t v72 = (uint64_t)v117;
      uint64_t v46 = v62;
      uint64_t v21 = v70;
      uint64_t v47 = v66;
      uint64_t v37 = v118;
      uint64_t v42 = v115;
      uint64_t v16 = v68;
LABEL_18:
      (*v114)(v72, 1, 1, v73);
LABEL_19:
      swift_release();
      sub_100522F00(v72, (uint64_t *)&unk_101674520);
      swift_release();
      goto LABEL_20;
    }
    uint64_t v74 = sqlite3_column_blob(*v71, 0);
    uint64_t v42 = v115;
    uint64_t v73 = v116;
    uint64_t v46 = v62;
    if (!v74)
    {
      uint64_t v72 = (uint64_t)v117;
      uint64_t v37 = v118;
      uint64_t v21 = v70;
      uint64_t v16 = v68;
      goto LABEL_17;
    }
    uint64_t v75 = v74;
    int v76 = sqlite3_column_bytes(*v71, 0);
    uint64_t v77 = sub_100670608(v75, v76);
    uint64_t v72 = (uint64_t)v117;
    uint64_t v78 = v113;
    UUID.init(crl_data:)(v77, v79);
    uint64_t v21 = v70;
    uint64_t v37 = v118;
    uint64_t v16 = v68;
    if (v78)
    {
      swift_errorRelease();
      uint64_t v113 = 0;
LABEL_17:
      uint64_t v47 = v112;
      goto LABEL_18;
    }
    uint64_t v113 = 0;
    (*v114)(v72, 0, 1, v73);
    int v82 = (*v107)(v72, 1, v73);
    uint64_t v47 = v112;
    if (v82 == 1) {
      goto LABEL_19;
    }
    id v83 = *v106;
    (*v106)(v110, v72, v73);
    id v84 = *(void **)(*(void *)(v42 + 16) + 32);
    *uint64_t v16 = v84;
    v120(v16, v46, v37);
    id v85 = v84;
    LOBYTE(v84) = _dispatchPreconditionTest(_:)();
    v121(v16, v37);
    if ((v84 & 1) == 0) {
      goto LABEL_50;
    }
    uint64_t v86 = v119;
    if (sqlite3_column_type(*v119, 1) == 5 || !sqlite3_column_text(*v86, 1))
    {
      uint64_t v105 = 0;
      uint64_t v111 = 0;
    }
    else
    {
      uint64_t v105 = String.init(cString:)();
      uint64_t v111 = v87;
    }
    char v88 = *(void **)(*(void *)(v42 + 16) + 32);
    *uint64_t v16 = v88;
    v120(v16, v46, v37);
    id v89 = v88;
    LOBYTE(v88) = _dispatchPreconditionTest(_:)();
    v121(v16, v37);
    if ((v88 & 1) == 0) {
      goto LABEL_51;
    }
    if (sqlite3_column_type(*v119, 2) == 5)
    {
      swift_release();
      (*v109)(v110, v73);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      double v90 = sqlite3_column_double(*(sqlite3_stmt **)(v42 + 24), 2);
      swift_release();
      uint64_t v91 = v42;
      id v92 = v108;
      v83(v108, (uint64_t)v110, v73);
      type metadata accessor for CRLAssetDatabaseRow();
      uint64_t v93 = swift_allocObject();
      id v94 = v92;
      uint64_t v95 = v93;
      v83((char *)(v93 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID), (uint64_t)v94, v73);
      uint64_t v96 = (uint64_t *)(v95 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
      uint64_t v97 = v111;
      *uint64_t v96 = v105;
      v96[1] = v97;
      *(double *)(v95 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_tombstoneDate) = v90;
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      swift_release();
      uint64_t v42 = v91;
      uint64_t v47 = v112;
    }
LABEL_20:
    uint64_t v80 = *(void **)(*(void *)(v42 + 16) + 32);
    *uint64_t v16 = v80;
    v120(v16, v46, v37);
    id v81 = v80;
    LOBYTE(v80) = _dispatchPreconditionTest(_:)();
    v121(v16, v37);
    if ((v80 & 1) == 0) {
      goto LABEL_43;
    }
  }
  if (v49 && v49 != 101)
  {
    uint64_t v98 = v49;
    sub_1007A0344(0, 0, 1);
    uint64_t v99 = 0;
  }
  else
  {
    uint64_t v98 = 0;
    uint64_t v99 = 1;
  }
  unint64_t v33 = v122;
  swift_release();
  sub_1007A0344(v98, 0, v99);
  int v100 = *(void **)(*(void *)(v42 + 16) + 32);
  *uint64_t v16 = v100;
  v120(v16, v46, v37);
  id v101 = v100;
  char v102 = _dispatchPreconditionTest(_:)();
  v121(v16, v37);
  if ((v102 & 1) == 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  uint64_t v103 = v119;
  swift_beginAccess();
  if (*v103)
  {
    sqlite3_finalize(*v103);
    *uint64_t v103 = 0;
  }
  swift_release();
  return v33;
}

uint64_t sub_100C99F70(uint64_t a1)
{
  uint64_t v63 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (uint64_t *)((char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v8 = v9;
  unsigned int v10 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  uint64_t v64 = v4 + 104;
  ((void (*)(void *, void, uint64_t, __n128))v11)(v8, enum case for DispatchPredicate.onQueue(_:), v3, v6);
  id v12 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v4 + 8);
  v13(v8, v3);
  if ((v9 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v66 = v13;
  id v67 = v11;
  unsigned int v65 = v10;
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v69 = 0x205443454C4553;
  unint64_t v70 = 0xE700000000000000;
  v14._uint64_t countAndFlagsBits = sub_100CD8420(0, 0xE000000000000000);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x204D4F524620;
  v15._object = (void *)0xE600000000000000;
  String.append(_:)(v15);
  v16._object = (void *)0x800000010127C660;
  v16._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 0x2820455245485720;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0x75755F7465737361;
  v18._object = (void *)0xEA00000000006469;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0x293F203D20;
  v19._object = (void *)0xE500000000000000;
  String.append(_:)(v19);
  uint64_t v20 = v69;
  uint64_t v21 = v70;
  unint64_t v68 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v22 = swift_retain();
  uint64_t v23 = sub_10079FC40(v22, v20, v21);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1)
    {
LABEL_4:
      swift_beginAccess();
      Swift::String v24 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v26 = v24;
      uint64_t v27 = Error.localizedDescription.getter();
      uint64_t v29 = v28;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v27;
      *(void *)(inited + 40) = v29;
      uint64_t v30 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v26, (uint64_t)&_mh_execute_header, v30, (uint64_t)"Failed to fetch an asset reference with error %@", 48, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return swift_willThrow();
    }
LABEL_23:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v32 = v23;
  swift_release();
  uint64_t v33 = UUID.crl_data()();
  unint64_t v35 = v34;
  sub_10079DCE4(v33, v34, 1);
  sub_100510084(v33, v35);
  uint64_t v36 = *(void **)(*(void *)(v32 + 16) + 32);
  *uint64_t v8 = v36;
  uint64_t v37 = v32;
  uint64_t v38 = v65;
  v67(v8, v65, v3);
  id v39 = v36;
  LOBYTE(v36) = _dispatchPreconditionTest(_:)();
  v66(v8, v3);
  if ((v36 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v62 = 0;
  type metadata accessor for SQLiteRowIterator();
  id v40 = (void *)swift_initStackObject();
  v40[3] = 0;
  v40[4] = 0;
  uint64_t v61 = v40 + 4;
  v40[5] = 1;
  void v40[2] = v37;
  unsigned int v41 = *(void **)(*(void *)(v37 + 16) + 32);
  *uint64_t v8 = v41;
  uint64_t v63 = v37;
  swift_retain();
  v67(v8, v38, v3);
  id v42 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)();
  v66(v8, v3);
  if ((v41 & 1) == 0)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v43 = v63;
  while (1)
  {
    uint64_t v46 = v40[3];
    uint64_t v47 = v40[4];
    uint64_t v48 = v40[5];
    v40[3] = 0;
    v40[4] = 0;
    v40[5] = 1;
    sub_1007A0344(v46, v47, v48);
    swift_beginAccess();
    unsigned int v49 = sqlite3_step(*(sqlite3_stmt **)(v43 + 24));
    if (v49 != 100) {
      break;
    }
    uint64_t v50 = swift_retain_n();
    if (sub_100CD8630(v50, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
    uint64_t v43 = v40[2];
    uint64_t v44 = *(void **)(*(void *)(v43 + 16) + 32);
    *uint64_t v8 = v44;
    uint64_t v38 = v65;
    v67(v8, v65, v3);
    id v45 = v44;
    LOBYTE(v44) = _dispatchPreconditionTest(_:)();
    v66(v8, v3);
    if ((v44 & 1) == 0) {
      goto LABEL_21;
    }
  }
  if (v49 && v49 != 101)
  {
    uint64_t v51 = v49;
    uint64_t v52 = v40[3];
    uint64_t v53 = v40[4];
    uint64_t v54 = v40[5];
    v40[3] = v51;
    uint64_t v55 = v61;
    *uint64_t v61 = 0;
    v55[1] = 0;
    sub_1007A0344(v52, v53, v54);
  }
  swift_release();
  uint64_t v56 = v63;
  id v57 = *(void **)(*(void *)(v63 + 16) + 32);
  *uint64_t v8 = v57;
  v67(v8, v38, v3);
  id v58 = v57;
  LOBYTE(v57) = _dispatchPreconditionTest(_:)();
  v66(v8, v3);
  if ((v57 & 1) == 0) {
LABEL_25:
  }
    __break(1u);
  swift_beginAccess();
  id v59 = *(sqlite3_stmt **)(v56 + 24);
  if (v59)
  {
    sqlite3_finalize(v59);
    *(void *)(v56 + 24) = 0;
  }
  swift_release();
  return v68;
}

uint64_t sub_100C9A6D4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v72 = a3;
  uint64_t v64 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v64, v5);
  uint64_t v69 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v65 = (uint64_t)&v63 - v9;
  uint64_t v10 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v11 = *(void **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v68 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v63 = (uint64_t)&v63 - v16;
  uint64_t v17 = sub_1005057FC(&qword_101672C30);
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v66 = (uint64_t)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  id v71 = (char *)&v63 - v22;
  __chkstk_darwin(v23, v24);
  id v26 = (char *)&v63 - v25;
  __n128 v29 = __chkstk_darwin(v27, v28);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v32 = *a1;
  uint64_t v33 = 1;
  unint64_t v34 = (void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v11[7];
  v34((char *)&v63 - v30, 1, 1, v10, v29);
  uint64_t v67 = v32;
  uint64_t v35 = v32 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_referrerIdentifier;
  unint64_t v70 = a2;
  uint64_t v36 = *a2;
  if (*(void *)(v36 + 16))
  {
    unint64_t v37 = sub_1009576C8(v35);
    if (v38)
    {
      sub_100CE144C(*(void *)(v36 + 56) + v11[9] * v37, (uint64_t)v26, type metadata accessor for CRLBoardIdentifier);
      uint64_t v33 = 0;
    }
  }
  id v39 = v34;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v34)(v26, v33, 1, v10);
  sub_100522F00((uint64_t)v31, &qword_101672C30);
  id v40 = (unsigned int (*)(char *, uint64_t, uint64_t))v11[6];
  if (v40(v26, 1, v10) == 1)
  {
    sub_100522F00((uint64_t)v26, &qword_101672C30);
    uint64_t v41 = v65;
    sub_100CE144C(v35, v65, type metadata accessor for CRLAssetReferrerIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v43 = (uint64_t)v71;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v44 = sub_1005057FC(&qword_101674240);
      sub_100CE12D8(v41 + *(int *)(v44 + 48), (uint64_t)v31, type metadata accessor for CRLBoardIdentifier);
      ((void (*)(char *, void, uint64_t, uint64_t))v39)(v31, 0, 1, v10);
      uint64_t v45 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v41, v45);
    }
    else
    {
      sub_100CE12D8(v41, (uint64_t)v31, type metadata accessor for CRLBoardIdentifier);
      ((void (*)(char *, void, uint64_t, uint64_t))v39)(v31, 0, 1, v10);
    }
  }
  else
  {
    uint64_t v46 = (uint64_t)v26;
    uint64_t v47 = v63;
    sub_100CE12D8(v46, v63, type metadata accessor for CRLBoardIdentifier);
    id v39 = v34;
    sub_100CE12D8(v47, (uint64_t)v31, type metadata accessor for CRLBoardIdentifier);
    ((void (*)(char *, void, uint64_t, uint64_t))v34)(v31, 0, 1, v10);
    uint64_t v43 = (uint64_t)v71;
  }
  sub_100522E9C((uint64_t)v31, v43, &qword_101672C30);
  if (v40((char *)v43, 1, v10) == 1)
  {
    sub_100522F00((uint64_t)v31, &qword_101672C30);
    sub_100522F00(v43, &qword_101672C30);
    uint64_t v48 = type metadata accessor for CRLAssetAddress();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v72, 1, 1, v48);
  }
  else
  {
    uint64_t v50 = v43;
    uint64_t v51 = v68;
    sub_100CE12D8(v50, v68, type metadata accessor for CRLBoardIdentifier);
    uint64_t v52 = v39;
    uint64_t v53 = v69;
    sub_100CE144C(v35, v69, type metadata accessor for CRLAssetReferrerIdentifier);
    uint64_t v54 = v66;
    sub_100CE144C(v51, v66, type metadata accessor for CRLBoardIdentifier);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v52)(v54, 0, 1, v10);
    sub_10057F0A0(v54, v53);
    sub_100CE14B4(v51, type metadata accessor for CRLBoardIdentifier);
    sub_100522F00((uint64_t)v31, &qword_101672C30);
    uint64_t v55 = v67;
    uint64_t v56 = v67 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID;
    uint64_t v57 = type metadata accessor for UUID();
    uint64_t v58 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16))(v72, v56, v57);
    uint64_t v60 = *(void *)(v55 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_referrerAssetName);
    uint64_t v59 = *(void *)(v55 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_referrerAssetName + 8);
    uint64_t v61 = type metadata accessor for CRLAssetAddress();
    sub_100CE144C(v35, v58 + *(int *)(v61 + 24), type metadata accessor for CRLAssetReferrerIdentifier);
    uint64_t v62 = (void *)(v58 + *(int *)(v61 + 20));
    *uint64_t v62 = v60;
    v62[1] = v59;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v58, 0, 1, v61);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100C9AD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __n128 v17 = __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v18, a1, v13, v17);
  unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v20 = (v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v21 + v19, v18, v13);
  uint64_t v22 = (void *)(v21 + v20);
  uint64_t v23 = v29;
  *uint64_t v22 = v28;
  v22[1] = v23;
  aBlock[4] = sub_100CE96DC;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101529B08;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v34 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
  return swift_release();
}

uint64_t sub_100C9B124(uint64_t a1, uint64_t a2, void (*a3)(double *, void))
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (void *)((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t, __n128))(v7 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v6, v9);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v11, v6);
  if (v12)
  {
    unint64_t v15 = sub_100C99F70(a2);
    v17[0] = _swiftEmptyDictionarySingleton;
    uint64_t v16 = sub_100C30AAC(v15, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3(v16, 0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100C9B2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100C9B314(a1, a2, a3, &qword_101699988, (uint64_t)&unk_101529AC8, (uint64_t)sub_100CE95E4, (void (*)(uint64_t, uint64_t, uint64_t))sub_100C9AD78);
}

uint64_t sub_100C9B314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = sub_1005057FC(a4);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  a7(a3, a6, v16);
  return swift_release();
}

uint64_t sub_100C9B460(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  if (a2)
  {
    swift_errorRetain();
    sub_1005057FC(a4);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1005057FC(a4);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100C9B4CC(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (sqlite3_stmt ***)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v8 = v9;
  unsigned int v10 = enum case for DispatchPredicate.onQueue(_:);
  unsigned int v49 = *(void (**)(void *, void, uint64_t))(v5 + 104);
  uint64_t v51 = v5 + 104;
  v49(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
  uint64_t v48 = v4;
  v12(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  unsigned int v50 = v10;
  uint64_t v13 = sub_100C8FB00(a1);
  uint64_t v14 = v13;
  if (!v2)
  {
    uint64_t v47 = a1;
    if (v13)
    {
      uint64_t v46 = v12;
      uint64_t v54 = 0;
      unint64_t v55 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      type metadata accessor for SQLiteStatement();
      swift_initStackObject();
      uint64_t v15 = swift_retain();
      uint64_t v16 = sub_10079FC40(v15, 0xD000000000000039, 0x800000010127CE30);
      swift_release();
      static Date.timeIntervalSinceReferenceDate.getter();
      double v18 = v17;
      unint64_t v19 = *(void **)(*(void *)(v16 + 16) + 32);
      *uint64_t v8 = v19;
      uint64_t v20 = v48;
      v49(v8, v50, v48);
      id v21 = v19;
      LOBYTE(v19) = _dispatchPreconditionTest(_:)();
      v46(v8, v20);
      if (v19)
      {
        uint64_t v22 = (sqlite3_stmt **)(v16 + 24);
        swift_beginAccess();
        sqlite3_bind_double(*(sqlite3_stmt **)(v16 + 24), 1, v18);
        uint64_t v23 = UUID.crl_data()();
        uint64_t v24 = v16;
        unint64_t v26 = v25;
        sub_10079DCE4(v23, v25, 2);
        sub_100510084(v23, v26);
        uint64_t v45 = v24;
        uint64_t v27 = *(void **)(*(void *)(v24 + 16) + 32);
        *uint64_t v8 = v27;
        uint64_t v28 = v49;
        v49(v8, v50, v20);
        id v29 = v27;
        LOBYTE(v27) = _dispatchPreconditionTest(_:)();
        v46(v8, v20);
        if (v27)
        {
          uint64_t v44 = v22;
          int v30 = sqlite3_step(*v22);
          if (v30 != 101)
          {
            int v34 = v30;
            unint64_t v52 = 0;
            unint64_t v53 = 0xE000000000000000;
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease();
            unint64_t v52 = 0xD000000000000026;
            unint64_t v53 = 0x800000010127CE70;
            type metadata accessor for UUID();
            sub_100CDE0D8(&qword_101677460, (void (*)(uint64_t))&type metadata accessor for UUID);
            v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v35);
            swift_bridgeObjectRelease();
            uint64_t v36 = v28;
            unint64_t v37 = v52;
            unint64_t v38 = v53;
            sub_10079FF00();
            swift_allocError();
            *(_DWORD *)uint64_t v39 = v34;
            *(void *)(v39 + 8) = v37;
            *(void *)(v39 + 16) = v38;
            swift_willThrow();
            id v40 = *(void **)(*(void *)(v45 + 16) + 32);
            *uint64_t v8 = v40;
            v36(v8, v50, v20);
            id v41 = v40;
            LOBYTE(v40) = _dispatchPreconditionTest(_:)();
            v46(v8, v20);
            if (v40)
            {
              id v42 = v44;
              if (*v44)
              {
                sqlite3_finalize(*v44);
                *id v42 = 0;
              }
              goto LABEL_15;
            }
LABEL_22:
            __break(1u);
          }
          uint64_t v31 = *(void **)(*(void *)(v45 + 16) + 32);
          *uint64_t v8 = v31;
          v28(v8, v50, v20);
          id v32 = v31;
          swift_retain();
          LOBYTE(v31) = _dispatchPreconditionTest(_:)();
          v46(v8, v20);
          if (v31)
          {
            uint64_t v33 = v44;
            if (*v44)
            {
              sqlite3_finalize(*v44);
              char *v33 = 0;
            }
LABEL_15:
            swift_release();
            swift_release();
            return v14;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
  }
  return v14;
}

uint64_t sub_100C9B9F0(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (sqlite3_stmt ***)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v8 = v9;
  unsigned int v10 = *(void (**)(void))(v5 + 104);
  unsigned int v41 = enum case for DispatchPredicate.onQueue(_:);
  id v42 = (void (*)(void *, void, uint64_t))v10;
  v10(v8);
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v13 = sub_100C8FB00(a1);
  uint64_t v14 = v13;
  if (v2) {
    return v14;
  }
  uint64_t v40 = a1;
  if (!v13) {
    return v14;
  }
  uint64_t v39 = v12;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD000000000000039, 0x800000010127CC30);
  swift_release();
  uint64_t v17 = UUID.crl_data()();
  uint64_t v38 = v16;
  unint64_t v19 = v18;
  sub_10079DCE4(v17, v18, 1);
  unint64_t v20 = v19;
  uint64_t v21 = v38;
  sub_100510084(v17, v20);
  uint64_t v22 = *(void **)(*(void *)(v21 + 16) + 32);
  *uint64_t v8 = v22;
  v42(v8, v41, v4);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  v39(v8, v4);
  if ((v22 & 1) == 0) {
    goto LABEL_16;
  }
  unint64_t v37 = (sqlite3_stmt **)(v21 + 24);
  swift_beginAccess();
  int v24 = sqlite3_step(*(sqlite3_stmt **)(v21 + 24));
  if (v24 != 101) {
    goto LABEL_9;
  }
  unint64_t v25 = *(void **)(*(void *)(v21 + 16) + 32);
  *uint64_t v8 = v25;
  v42(v8, v41, v4);
  id v26 = v25;
  swift_retain();
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  int v24 = ((uint64_t (*)(void *, uint64_t))v39)(v8, v4);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    int v27 = v24;
    unint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    unint64_t v43 = 0xD000000000000026;
    unint64_t v44 = 0x800000010127CC70;
    type metadata accessor for UUID();
    sub_100CDE0D8(&qword_101677460, (void (*)(uint64_t))&type metadata accessor for UUID);
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    unint64_t v29 = v43;
    unint64_t v30 = v44;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v31 = v27;
    *(void *)(v31 + 8) = v29;
    *(void *)(v31 + 16) = v30;
    uint64_t v32 = v38;
    swift_willThrow();
    uint64_t v33 = *(void **)(*(void *)(v32 + 16) + 32);
    *uint64_t v8 = v33;
    v42(v8, v41, v4);
    id v34 = v33;
    LOBYTE(v33) = _dispatchPreconditionTest(_:)();
    v39(v8, v4);
    if (v33) {
      goto LABEL_10;
    }
LABEL_17:
    __break(1u);
  }
LABEL_10:
  Swift::String v35 = v37;
  if (*v37)
  {
    sqlite3_finalize(*v37);
    *Swift::String v35 = 0;
  }
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_100C9BE68(uint64_t a1)
{
  uint64_t v35 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v7 = v8;
  __n128 v9 = *(void (**)(void))(v4 + 104);
  unsigned int v36 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v37 = (void (*)(void *, void, uint64_t))v9;
  v9(v7);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t v38 = *(void (**)(void *, uint64_t))(v4 + 8);
  v38(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v11 = swift_retain();
  uint64_t v12 = sub_10079FC40(v11, 0xD000000000000027, 0x800000010127DC20);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v14 = UUID.crl_data()();
  uint64_t v15 = v12;
  unint64_t v17 = v16;
  sub_10079DCE4(v14, v16, 1);
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  sub_100510084(v18, v17);
  unint64_t v20 = *(void **)(*(void *)(v15 + 16) + 32);
  *uint64_t v7 = v20;
  v37(v7, v36, v3);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  v38(v7, v3);
  if ((v20 & 1) == 0) {
    goto LABEL_13;
  }
  id v34 = (sqlite3_stmt **)(v19 + 24);
  swift_beginAccess();
  int v22 = sqlite3_step(*(sqlite3_stmt **)(v19 + 24));
  if (v22 != 101) {
    goto LABEL_7;
  }
  id v23 = *(void **)(*(void *)(v19 + 16) + 32);
  *uint64_t v7 = v23;
  v37(v7, v36, v3);
  id v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  int v22 = ((uint64_t (*)(void *, uint64_t))v38)(v7, v3);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    int v25 = v22;
    unint64_t v39 = 0;
    unint64_t v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    unint64_t v39 = 0xD000000000000018;
    unint64_t v40 = 0x800000010127DC50;
    type metadata accessor for UUID();
    sub_100CDE0D8(&qword_101677460, (void (*)(uint64_t))&type metadata accessor for UUID);
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    unint64_t v27 = v39;
    unint64_t v28 = v40;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v29 = v25;
    *(void *)(v29 + 8) = v27;
    *(void *)(v29 + 16) = v28;
    swift_willThrow();
    unint64_t v30 = *(void **)(*(void *)(v19 + 16) + 32);
    *uint64_t v7 = v30;
    v37(v7, v36, v3);
    id v31 = v30;
    LOBYTE(v30) = _dispatchPreconditionTest(_:)();
    v38(v7, v3);
    if (v30) {
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
  }
LABEL_8:
  uint64_t v32 = v34;
  if (*v34)
  {
    sqlite3_finalize(*v34);
    *uint64_t v32 = 0;
  }
  return swift_release();
}

uint64_t sub_100C9C294@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>, double a3@<D0>)
{
  unint64_t v68 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v69 = *(void (***)(uint64_t, uint64_t))(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  id v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  uint64_t v14 = (char *)&v61 - v13;
  __chkstk_darwin(v12, v15);
  unint64_t v17 = (char *)&v61 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  id v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  uint64_t v73 = (char *)&v61 - v25;
  Date.init()();
  uint64_t v77 = &_swiftEmptySetSingleton;
  static Date.distantFuture.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  double v27 = v26;
  unint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  uint64_t v63 = v23;
  uint64_t v67 = v19 + 8;
  uint64_t v66 = v28;
  v28(v23, v18);
  unint64_t v29 = sub_100C993D0();
  if (v3)
  {
    uint64_t v74 = 0;
    unint64_t v30 = v68;
LABEL_3:
    if (qword_10166FB70 != -1) {
LABEL_34:
    }
      swift_once();
    swift_beginAccess();
    id v31 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    swift_getErrorValue();
    id v33 = v31;
    uint64_t v34 = Error.localizedDescription.getter();
    uint64_t v36 = v35;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = sub_100528BE4();
    *(void *)(inited + 32) = v34;
    *(void *)(inited + 40) = v36;
    uint64_t v37 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v33, (uint64_t)&_mh_execute_header, v37, (uint64_t)"Failed to purge expired deleted asset files, error %@", 53, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    uint64_t v38 = v63;
    static Date.distantFuture.getter();
    Date.timeIntervalSinceReferenceDate.getter();
    double v40 = v39;
    swift_errorRelease();
    uint64_t v41 = v38;
    unint64_t v42 = v66;
    v66(v41, v18);
    uint64_t result = v42(v73, v18);
    if (v27 == v40) {
      double v27 = a3;
    }
  }
  else
  {
    unint64_t v44 = v69;
    uint64_t v65 = v14;
    int v76 = v17;
    uint64_t v74 = 0;
    unint64_t v30 = v29;
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v45 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v62 = v18;
    if (v45)
    {
      uint64_t v71 = v6;
      unint64_t v75 = v30 & 0xC000000000000001;
      uint64_t v72 = v44 + 2;
      uint64_t v69 = v44 + 1;
      uint64_t v46 = 4;
      unint64_t v70 = v30;
      uint64_t v64 = a1;
      uint64_t v18 = (uint64_t)v76;
      do
      {
        uint64_t v47 = v45;
        uint64_t v48 = v46 - 4;
        if (v75)
        {
          uint64_t v49 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v50 = v46 - 3;
          if (__OFADD__(v48, 1)) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v49 = *(void *)(v30 + 8 * v46);
          swift_retain();
          uint64_t v50 = v46 - 3;
          if (__OFADD__(v48, 1))
          {
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
        }
        double v51 = *(double *)(v49 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_tombstoneDate);
        if (v51 <= 0.0)
        {
          swift_release();
        }
        else
        {
          unint64_t v52 = v10;
          unint64_t v53 = *v72;
          uint64_t v54 = v71;
          (*v72)(v18, v49 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID);
          Date.timeIntervalSinceReferenceDate.getter();
          double v56 = v55 - v51;
          if (v56 <= a3)
          {
            swift_release();
            if (v56 >= 0.0)
            {
              if (v27 >= a3 - v56) {
                double v27 = a3 - v56;
              }
            }
            else if (v27 >= a3)
            {
              double v27 = a3;
            }
            (*v69)((uint64_t)v76, v54);
          }
          else
          {
            uint64_t v57 = v74;
            sub_100C9BE68(v18);
            uint64_t v74 = v57;
            if (v57)
            {
              swift_release();
              (*v69)(v18, v54);
              swift_bridgeObjectRelease();
              uint64_t v74 = 0;
              unint64_t v30 = v68;
              uint64_t v18 = v62;
              goto LABEL_3;
            }
            ((void (*)(char *, uint64_t, uint64_t))v53)(v52, v18, v54);
            uint64_t v58 = v54;
            uint64_t v59 = (uint64_t)v65;
            sub_100CB4BC8((uint64_t)v65, v52);
            swift_release();
            uint64_t v60 = *v69;
            (*v69)(v59, v58);
            v60(v18, v58);
          }
          id v10 = v52;
          unint64_t v30 = v70;
        }
        uint64_t v45 = v47;
        ++v46;
      }
      while (v50 != v47);
    }
    swift_bridgeObjectRelease();
    uint64_t result = v66(v73, v62);
    unint64_t v30 = v68;
  }
  *(void *)unint64_t v30 = v77;
  *(double *)(v30 + 8) = v27;
  return result;
}

uint64_t sub_100C9C964@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100C5443C(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

void *sub_100C9C99C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100C54064();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

void sub_100C9C9CC(char a1@<W1>, void *a2@<X8>)
{
  sub_100C9CA00(a1 & 1);
  if (!v2) {
    *a2 = v4;
  }
}

void sub_100C9CA00(int a1)
{
  LODWORD(v61) = a1;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char **)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v63 = v1;
  uint64_t v8 = *(char **)((char *)v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v7 = v8;
  unint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v11 = v3 + 104;
  id v10 = *(void (**)(char **, void, uint64_t, __n128))(v3 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v2, v5);
  uint64_t v12 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t v15 = *(void (**)(void, void))(v3 + 8);
  uint64_t v13 = (void (*)(void, void))(v3 + 8);
  uint64_t v14 = (uint64_t (*)(char **, uint64_t))v15;
  uint64_t v16 = ((uint64_t (*)(char **, uint64_t))v15)(v7, v2);
  if (v8)
  {
    *uint64_t v7 = v12;
    unsigned int v60 = v9;
    uint64_t v59 = (void (*)(char **, void, uint64_t))v10;
    ((void (*)(char **, unint64_t, uint64_t))v10)(v7, v9, v2);
    uint64_t v18 = v12;
    char v19 = _dispatchPreconditionTest(_:)();
    uint64_t v16 = v14(v7, v2);
    if (v19)
    {
      uint64_t v58 = v11;
      char v20 = v61 & 1;
      uint64_t v21 = v62;
      uint64_t v22 = sub_100C9EF00(v61 & 1);
      uint64_t v13 = v21;
      if (v21) {
        return;
      }
      unint64_t v23 = v22;
      uint64_t v61 = v7;
      uint64_t v62 = (void (*)(void, void))v14;
      uint64_t v24 = v63;
      uint64_t v25 = sub_100CD8D98(v23, v24);
      swift_bridgeObjectRelease();

      double v26 = v61;
      *uint64_t v61 = v18;
      v59(v26, v60, v2);
      double v27 = v18;
      char v28 = _dispatchPreconditionTest(_:)();
      v62(v26, v2);
      if (v28)
      {
        unint64_t v29 = sub_100C9F6A4(v20);
        unint64_t v30 = v24;
        uint64_t v63 = sub_100CD8F48(v29, (uint64_t)v30);
        swift_bridgeObjectRelease();

        id v31 = v61;
        *uint64_t v61 = v27;
        v59(v31, v60, v2);
        uint64_t v32 = v27;
        char v33 = _dispatchPreconditionTest(_:)();
        v62(v31, v2);
        if (v33)
        {
          unint64_t v34 = (unint64_t)sub_100C9FE48(v20);
          uint64_t v35 = v30;
          uint64_t v57 = sub_100CD97FC(v34, v35);
          swift_bridgeObjectRelease();

          uint64_t v36 = v61;
          *uint64_t v61 = v32;
          v59(v36, v60, v2);
          uint64_t v37 = v32;
          LOBYTE(v34) = _dispatchPreconditionTest(_:)();
          v62(v36, v2);
          if (v34)
          {
            unint64_t v38 = sub_100C9E61C(v20);
            uint64_t v64 = (double *)_swiftEmptyDictionarySingleton;
            uint64_t v12 = v35;
            double v39 = sub_100CDC4EC(v38, (uint64_t)v12, (uint64_t)&v64, (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_100CA16C0);
            swift_bridgeObjectRelease();

            double v55 = v39;
            double v56 = v25;
            swift_bridgeObjectRelease();
            double v40 = v61;
            *uint64_t v61 = v37;
            v59(v40, v60, v2);
            uint64_t v41 = v37;
            LOBYTE(v38) = _dispatchPreconditionTest(_:)();
            v62(v40, v2);
            if (v38)
            {
              uint64_t v16 = sub_100C84770(v20);
              unint64_t v9 = (unint64_t)v55;
              unint64_t v17 = (double *)_swiftEmptyDictionarySingleton;
              goto LABEL_13;
            }
LABEL_19:
            __break(1u);
            return;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_13:
  unint64_t v42 = v16;
  uint64_t v64 = v17;
  unint64_t v43 = v12;
  unint64_t v44 = sub_100CDC4EC(v42, (uint64_t)v43, (uint64_t)&v64, (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_100CA1124);
  if (v13)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v45 = (unint64_t)v44;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v46 = sub_100590EC0((unint64_t)v56);
    swift_bridgeObjectRelease();
    uint64_t v47 = sub_100590ECC((unint64_t)v63);
    swift_bridgeObjectRelease();
    uint64_t v64 = v46;
    sub_1006E3418((uint64_t)v47);
    uint64_t v48 = v64;
    uint64_t v49 = sub_100590ED8((unint64_t)v57);
    swift_bridgeObjectRelease();
    uint64_t v64 = v48;
    sub_1006E3418((uint64_t)v49);
    uint64_t v50 = v64;
    double v51 = sub_100590EE4(v9);
    swift_bridgeObjectRelease();
    uint64_t v64 = v50;
    sub_1006E3418((uint64_t)v51);
    unint64_t v52 = v64;
    unint64_t v53 = sub_100590EF0(v45);
    swift_bridgeObjectRelease();
    uint64_t v64 = v52;
    sub_1006E3418((uint64_t)v53);
  }
}

uint64_t sub_100C9D050@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100C51248(a2);
  if (!v3)
  {
    uint64_t v7 = result;
    if (result)
    {
      id v8 = a1;
      uint64_t v9 = sub_100CE4FD8(v8, v7);

      uint64_t result = swift_release();
    }
    else
    {
      uint64_t v9 = 0;
    }
    *a3 = v9;
  }
  return result;
}

uint64_t sub_100C9D0D0()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016997B8);
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v11 = v45;
  if (v45 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_6;
    }
LABEL_48:
    swift_bridgeObjectRelease();
    int v15 = 0;
    int v9 = 0;
    return v9 | v15;
  }
  uint64_t v12 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12) {
    goto LABEL_48;
  }
LABEL_6:
  unint64_t v13 = 0;
  LOBYTE(v14) = 0;
  LOBYTE(v15) = 0;
  double v39 = v1;
  uint64_t v40 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock;
  uint64_t v16 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  unint64_t v17 = v45 & 0xC000000000000001;
  uint64_t v42 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v17)
        {
          uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v19 = v13 + 1;
          if (__OFADD__(v13, 1)) {
            goto LABEL_45;
          }
        }
        else
        {
          if (v13 >= *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_46;
          }
          uint64_t v18 = *(void *)(v11 + 8 * v13 + 32);
          swift_retain();
          unint64_t v19 = v13 + 1;
          if (__OFADD__(v13, 1))
          {
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
            swift_once();
            swift_beginAccess();
            uint64_t v2 = (void *)static OS_os_log.boardStore;
            sub_1005057FC((uint64_t *)&unk_101672B40);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_10117E810;
            swift_getErrorValue();
            id v4 = v2;
            uint64_t v5 = Error.publicDescription.getter(v43, v44);
            uint64_t v7 = v6;
            *(void *)(inited + 56) = &type metadata for String;
            *(void *)(inited + 64) = sub_100528BE4();
            *(void *)(inited + 32) = v5;
            *(void *)(inited + 40) = v7;
            uint64_t v8 = static os_log_type_t.default.getter();
            sub_100BAC898((uint64_t)v4, (uint64_t)&_mh_execute_header, v8, (uint64_t)"Caught error in checkIfBoardHasUnmaterializedAssetsAndUnsupportedBoardItems() %{public}@", 88, 2, inited);
            swift_errorRelease();
            swift_setDeallocating();
            sub_1005057FC(&qword_101672B50);
            int v15 = 1;
            swift_arrayDestroy();

            goto LABEL_2;
          }
        }
        if (v15) {
          break;
        }
        char v41 = (char)v14;
        unint64_t v20 = v11;
        uint64_t v21 = v12;
        uint64_t v22 = *(void *)&v39[v40];
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v22 + 16));
        unint64_t v23 = *(void **)&v39[v16];
        if (v23)
        {
          id v24 = *(id *)&v39[v16];
        }
        else
        {
          uint64_t v25 = v16;
          id v26 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
          double v27 = v39;
          id v28 = sub_100EAFDE4((uint64_t)v27);

          unint64_t v29 = *(void **)&v39[v25];
          *(void *)&v39[v25] = v28;
          id v24 = v28;

          unint64_t v23 = 0;
        }
        uint64_t v12 = v21;
        unint64_t v30 = *(os_unfair_lock_s **)(v22 + 16);
        id v31 = v23;
        os_unfair_lock_unlock(v30);
        LOBYTE(v30) = sub_100EA58A4(v18);

        unint64_t v11 = v20;
        if (v30)
        {
          unint64_t v17 = v45 & 0xC000000000000001;
          if ((v41 & 1) == 0)
          {
            int v15 = 1;
LABEL_30:
            uint64_t v16 = v42;
            goto LABEL_31;
          }
          swift_release();
          uint64_t v16 = v42;
          if (v19 == v12) {
            goto LABEL_42;
          }
          LOBYTE(v14) = 1;
          LOBYTE(v15) = 1;
          ++v13;
        }
        else
        {
          unint64_t v17 = v45 & 0xC000000000000001;
          if ((v41 & 1) == 0)
          {
            int v15 = 0;
            goto LABEL_30;
          }
          swift_release();
          uint64_t v16 = v42;
          if (v19 == v12)
          {
            swift_bridgeObjectRelease();
            int v15 = 0;
            goto LABEL_2;
          }
          LOBYTE(v15) = 0;
          LOBYTE(v14) = 1;
          ++v13;
        }
      }
      if (v14)
      {
        swift_release();
LABEL_42:
        swift_bridgeObjectRelease();
        int v15 = 1;
LABEL_2:
        int v9 = 256;
        return v9 | v15;
      }
      int v15 = 1;
LABEL_31:
      uint64_t v14 = *(void **)(v18 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData);
      if (v14) {
        break;
      }
      swift_release();
      if (v19 == v12) {
        goto LABEL_39;
      }
LABEL_8:
      ++v13;
    }
    uint64_t v32 = (*(uint64_t (**)(void))(*v14 + 408))();
    if ((v33 & 1) == 0 || v32 != 3) {
      break;
    }
    unint64_t v34 = self;
    swift_retain();
    id v35 = [v34 standardUserDefaults];
    unsigned int v36 = [v35 BOOLForKey:@"CRLImageItemsAreUnsupportedWhenDownloadingSendACopyUserDefault"];

    if (!v36) {
      goto LABEL_38;
    }
    swift_release();
    swift_release();
    if (v19 == v12)
    {
      swift_bridgeObjectRelease();
      goto LABEL_2;
    }
    LOBYTE(v14) = 1;
    uint64_t v16 = v42;
    ++v13;
  }
  swift_retain();
LABEL_38:
  unint64_t v37 = v14[3];
  swift_retain();
  unint64_t v38 = sub_1002094A4();
  swift_release_n();
  swift_release();
  LODWORD(v14) = v38 < v37;
  uint64_t v16 = v42;
  if (v19 != v12) {
    goto LABEL_8;
  }
LABEL_39:
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_2;
  }
  int v9 = 0;
  return v9 | v15;
}

void sub_100C9D5FC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t sub_100C9D63C()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (uint64_t *)((char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v7 = v8;
  int v9 = *(void (**)(void, __n128))(v3 + 104);
  unsigned int v74 = enum case for DispatchPredicate.onQueue(_:);
  int v76 = (void (*)(void *, uint64_t, uint64_t))v9;
  v9(v7, v5);
  id v10 = v8;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  v12(v7, v2);
  if ((v11 & 1) == 0) {
    goto LABEL_24;
  }
  unint64_t v75 = v12;
  uint64_t v73 = v3 + 104;
  uint64_t v78 = 0;
  unint64_t v79 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v13._uint64_t countAndFlagsBits = 0x2A205443454C4553;
  v13._object = (void *)0xEE00204D4F524620;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v14._object = (void *)0xEB00000000736D65;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0x20455245485720;
  v15._object = (void *)0xE700000000000000;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v16._object = (void *)0xEB00000000736D65;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 46;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._object = (void *)0x8000000101262BA0;
  v18._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0x444E410A3F203D20;
  v19._object = (void *)0xE900000000000020;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v20._object = (void *)0xEA00000000006465;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = 0x444E410A30203D20;
  v21._object = (void *)0xE900000000000020;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0xD000000000000014;
  v22._object = (void *)0x800000010127BB50;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0x3F203D3C20;
  v23._object = (void *)0xE500000000000000;
  String.append(_:)(v23);
  uint64_t v24 = v78;
  uint64_t v25 = v79;
  unint64_t v77 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v26 = swift_retain();
  uint64_t v27 = sub_10079FC40(v26, v24, v25);
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
  uint64_t v28 = v27;
  swift_release();
  uint64_t v37 = sub_100753FC0();
  unint64_t v39 = v38;
  uint64_t v71 = 0;
  sqlite3_int64 v40 = sub_1002094A4();
  uint64_t v70 = v37;
  unint64_t v69 = v39;
  sub_10079DCE4(v37, v39, 1);
  sub_10079D8A8(v40, 2);
  char v41 = *(void **)(*(void *)(v28 + 16) + 32);
  *uint64_t v7 = v41;
  uint64_t v42 = v74;
  v76(v7, v74, v2);
  id v43 = v41;
  LOBYTE(v39) = _dispatchPreconditionTest(_:)();
  v75(v7, v2);
  if ((v39 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v44 = v28;
  type metadata accessor for SQLiteRowIterator();
  uint64_t inited = (void *)swift_initStackObject();
  inited[3] = 0;
  inited[4] = 0;
  unint64_t v68 = inited + 4;
  inited[5] = 1;
  inited[2] = v44;
  uint64_t v46 = *(void **)(*(void *)(v44 + 16) + 32);
  *uint64_t v7 = v46;
  uint64_t v72 = v44;
  swift_retain();
  v76(v7, v42, v2);
  id v47 = v46;
  LOBYTE(v46) = _dispatchPreconditionTest(_:)();
  v75(v7, v2);
  if ((v46 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once();
LABEL_6:
    swift_beginAccess();
    unint64_t v29 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v30 = swift_initStackObject();
    *(_OWORD *)(v30 + 16) = xmmword_10117E810;
    swift_getErrorValue();
    id v31 = v29;
    uint64_t v32 = Error.localizedDescription.getter();
    uint64_t v34 = v33;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = sub_100528BE4();
    *(void *)(v30 + 32) = v32;
    *(void *)(v30 + 40) = v34;
    uint64_t v35 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v31, (uint64_t)&_mh_execute_header, v35, (uint64_t)"Failed to fetch a board item record with error %@", 49, 2, v30);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    return swift_willThrow();
  }
  uint64_t v48 = v72;
  while (1)
  {
    uint64_t v51 = inited[3];
    uint64_t v52 = inited[4];
    uint64_t v53 = inited[5];
    inited[3] = 0;
    inited[4] = 0;
    inited[5] = 1;
    sub_1007A0344(v51, v52, v53);
    swift_beginAccess();
    unsigned int v54 = sqlite3_step(*(sqlite3_stmt **)(v48 + 24));
    if (v54 != 100) {
      break;
    }
    uint64_t v55 = swift_retain_n();
    if (sub_100CE01E8(v55, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
    uint64_t v48 = inited[2];
    uint64_t v49 = *(void **)(*(void *)(v48 + 16) + 32);
    *uint64_t v7 = v49;
    uint64_t v42 = v74;
    v76(v7, v74, v2);
    id v50 = v49;
    LOBYTE(v49) = _dispatchPreconditionTest(_:)();
    v75(v7, v2);
    if ((v49 & 1) == 0) {
      goto LABEL_23;
    }
  }
  if (v54 && v54 != 101)
  {
    uint64_t v56 = v54;
    uint64_t v57 = inited[3];
    uint64_t v58 = inited[4];
    uint64_t v59 = inited[5];
    inited[3] = v56;
    unsigned int v60 = v68;
    *unint64_t v68 = 0;
    v60[1] = 0;
    sub_1007A0344(v57, v58, v59);
  }
  swift_release();
  uint64_t v61 = v72;
  uint64_t v62 = *(void **)(*(void *)(v72 + 16) + 32);
  *uint64_t v7 = v62;
  v76(v7, v42, v2);
  id v63 = v62;
  char v64 = _dispatchPreconditionTest(_:)();
  v75(v7, v2);
  if ((v64 & 1) == 0) {
LABEL_27:
  }
    __break(1u);
  swift_beginAccess();
  uint64_t v65 = *(sqlite3_stmt **)(v61 + 24);
  uint64_t v66 = v70;
  if (v65)
  {
    sqlite3_finalize(v65);
    *(void *)(v61 + 24) = 0;
  }
  sub_100510084(v66, v69);
  swift_release();
  return v77;
}

uint64_t sub_100C9DE68()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (uint64_t *)((char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v7 = v8;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  id v10 = *(void (**)(void *, void, uint64_t, __n128))(v3 + 104);
  uint64_t v58 = v3 + 104;
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v2, v5);
  id v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  unsigned int v60 = *(void (**)(void *, uint64_t))(v3 + 8);
  v60(v7, v2);
  if ((v8 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v59 = (void (*)(void *, void, uint64_t))v10;
  uint64_t v62 = 0;
  unint64_t v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  unint64_t v61 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v12 = swift_retain();
  uint64_t v13 = sub_10079FC40(v12, 0xD000000000000053, 0x800000010127EBA0);
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
  uint64_t v14 = v13;
  swift_release();
  uint64_t v23 = sub_100753FC0();
  unint64_t v25 = v24;
  uint64_t v55 = 0;
  sub_1002094A4();
  uint64_t v54 = v23;
  unint64_t v53 = v25;
  sub_10079DCE4(v23, v25, 1);
  uint64_t v26 = v14;
  uint64_t v27 = *(void **)(*(void *)(v14 + 16) + 32);
  *uint64_t v7 = v27;
  uint64_t v28 = v59;
  v59(v7, v9, v2);
  id v29 = v27;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  v60(v7, v2);
  unsigned int v57 = v9;
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t inited = (void *)swift_initStackObject();
  inited[3] = 0;
  inited[4] = 0;
  uint64_t v52 = inited + 4;
  inited[5] = 1;
  inited[2] = v26;
  id v31 = *(void **)(*(void *)(v26 + 16) + 32);
  *uint64_t v7 = v31;
  uint64_t v56 = v26;
  swift_retain();
  v28(v7, v57, v2);
  id v32 = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)();
  v60(v7, v2);
  if ((v31 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once();
LABEL_6:
    swift_beginAccess();
    Swift::String v15 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v16 = swift_initStackObject();
    *(_OWORD *)(v16 + 16) = xmmword_10117E810;
    swift_getErrorValue();
    id v17 = v15;
    uint64_t v18 = Error.localizedDescription.getter();
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_100528BE4();
    *(void *)(v16 + 32) = v18;
    *(void *)(v16 + 40) = v20;
    uint64_t v21 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v17, (uint64_t)&_mh_execute_header, v21, (uint64_t)"Failed to fetch a board item record with error %@", 49, 2, v16);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    return swift_willThrow();
  }
  uint64_t v33 = v56;
  while (1)
  {
    uint64_t v36 = inited[3];
    uint64_t v37 = inited[4];
    uint64_t v38 = inited[5];
    inited[3] = 0;
    inited[4] = 0;
    inited[5] = 1;
    sub_1007A0344(v36, v37, v38);
    swift_beginAccess();
    unsigned int v39 = sqlite3_step(*(sqlite3_stmt **)(v33 + 24));
    if (v39 != 100) {
      break;
    }
    uint64_t v40 = swift_retain_n();
    if (sub_100CE01E8(v40, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
    uint64_t v33 = inited[2];
    uint64_t v34 = *(void **)(*(void *)(v33 + 16) + 32);
    *uint64_t v7 = v34;
    uint64_t v28 = v59;
    v59(v7, v57, v2);
    id v35 = v34;
    LOBYTE(v34) = _dispatchPreconditionTest(_:)();
    v60(v7, v2);
    if ((v34 & 1) == 0) {
      goto LABEL_23;
    }
  }
  if (v39 && v39 != 101)
  {
    uint64_t v41 = v39;
    uint64_t v42 = inited[3];
    uint64_t v43 = inited[4];
    uint64_t v44 = inited[5];
    inited[3] = v41;
    unint64_t v45 = v52;
    *uint64_t v52 = 0;
    v45[1] = 0;
    sub_1007A0344(v42, v43, v44);
  }
  swift_release();
  uint64_t v46 = v56;
  id v47 = *(void **)(*(void *)(v56 + 16) + 32);
  *uint64_t v7 = v47;
  v28(v7, v57, v2);
  id v48 = v47;
  char v49 = _dispatchPreconditionTest(_:)();
  v60(v7, v2);
  if ((v49 & 1) == 0) {
LABEL_27:
  }
    __break(1u);
  swift_beginAccess();
  id v50 = *(sqlite3_stmt **)(v46 + 24);
  if (v50)
  {
    sqlite3_finalize(v50);
    *(void *)(v46 + 24) = 0;
  }
  sub_100510084(v54, v53);
  swift_release();
  return v61;
}

void sub_100C9E550(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_100C9E590(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(uint64_t, id)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = a3(a2);
  if (!v5)
  {
    uint64_t v10 = v9;
    id v11 = a1;
    uint64_t v12 = a4(v10, v11);
    swift_bridgeObjectRelease();

    *a5 = v12;
  }
}

uint64_t sub_100C9E61C(char a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (void *)((char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v11 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v10 = v11;
  uint64_t v12 = *(void (**)(void *, __n128))(v6 + 104);
  unsigned int v85 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v83 = v6 + 104;
  v12(v10, v8);
  id v13 = v11;
  char v14 = _dispatchPreconditionTest(_:)();
  id v17 = *(void (**)(void *, uint64_t))(v6 + 8);
  uint64_t v15 = v6 + 8;
  uint64_t v16 = v17;
  v17(v10, v5);
  if ((v14 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v82 = v15;
  uint64_t v86 = (void (*)(void *, uint64_t, uint64_t))v12;
  if (a1) {
    uint64_t v18 = 15649;
  }
  else {
    uint64_t v18 = 15677;
  }
  uint64_t v88 = 0;
  unint64_t v89 = 0xE000000000000000;
  _StringGuts.grow(_:)(79);
  v19._uint64_t countAndFlagsBits = 0x205443454C4553;
  v19._object = (void *)0xE700000000000000;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = sub_100CE19F8(0x74695F6472616F62, (void *)0xEB00000000736D65);
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x204D4F524620;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v22._object = (void *)0xEB00000000736D65;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0x4A2052454E4E490ALL;
  v23._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 0x736472616F62;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 542002976;
  v25._object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v26._object = (void *)0xEB00000000736D65;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 46;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 0xD000000000000010;
  v28._object = (void *)0x8000000101262BA0;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 2112800;
  v29._object = (void *)0xE300000000000000;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = 0x736472616F62;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 46;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = 0xD000000000000010;
  v32._object = (void *)0x8000000101262BA0;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = 0x20455245485720;
  v33._object = (void *)0xE700000000000000;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v34._object = (void *)0xEB00000000736D65;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 46;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  v36._object = (void *)0x800000010127B8B0;
  v36._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = 0x444E412030203E20;
  v37._object = (void *)0xE900000000000020;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = 0x736472616F62;
  v38._object = (void *)0xE600000000000000;
  String.append(_:)(v38);
  v39._uint64_t countAndFlagsBits = 46;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = 0x616E5F72656E776FLL;
  v40._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v40);
  v41._uint64_t countAndFlagsBits = 32;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  v42._uint64_t countAndFlagsBits = v18;
  v42._object = (void *)0xE200000000000000;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 16160;
  v43._object = (void *)0xE200000000000000;
  String.append(_:)(v43);
  uint64_t v44 = v88;
  uint64_t v45 = v89;
  unint64_t v87 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v46 = swift_retain();
  uint64_t v47 = sub_10079FC40(v46, v44, v45);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1)
    {
LABEL_7:
      swift_beginAccess();
      id v48 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v50 = v48;
      uint64_t v51 = Error.localizedDescription.getter();
      uint64_t v53 = v52;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v51;
      *(void *)(inited + 40) = v53;
      uint64_t v54 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v50, (uint64_t)&_mh_execute_header, v54, (uint64_t)"Failed to fetch a board item record with error %@", 49, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return swift_willThrow();
    }
LABEL_26:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v56 = v47;
  swift_release();
  sub_10079DA60(0, 0xE000000000000000, 1);
  unsigned int v57 = *(void **)(*(void *)(v56 + 16) + 32);
  *uint64_t v10 = v57;
  uint64_t v58 = v85;
  v86(v10, v85, v5);
  id v59 = v57;
  LOBYTE(v57) = _dispatchPreconditionTest(_:)();
  v16(v10, v5);
  if ((v57 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v80[1] = 0;
  type metadata accessor for SQLiteRowIterator();
  unsigned int v60 = (void *)swift_initStackObject();
  v60[3] = 0;
  v60[4] = 0;
  v80[0] = v60 + 4;
  v60[5] = 1;
  v60[2] = v56;
  unint64_t v61 = *(void **)(*(void *)(v56 + 16) + 32);
  *uint64_t v10 = v61;
  uint64_t v81 = v56;
  swift_retain();
  v86(v10, v58, v5);
  id v62 = v61;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)();
  id v84 = v16;
  v16(v10, v5);
  if ((v61 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v63 = v81;
  while (1)
  {
    uint64_t v66 = v60[3];
    uint64_t v67 = v60[4];
    uint64_t v68 = v60[5];
    v60[3] = 0;
    v60[4] = 0;
    v60[5] = 1;
    sub_1007A0344(v66, v67, v68);
    swift_beginAccess();
    unsigned int v69 = sqlite3_step(*(sqlite3_stmt **)(v63 + 24));
    if (v69 != 100) {
      break;
    }
    uint64_t v70 = swift_retain_n();
    if (sub_100CE01E8(v70, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
    uint64_t v63 = v60[2];
    char v64 = *(void **)(*(void *)(v63 + 16) + 32);
    *uint64_t v10 = v64;
    uint64_t v58 = v85;
    v86(v10, v85, v5);
    id v65 = v64;
    LOBYTE(v64) = _dispatchPreconditionTest(_:)();
    v84(v10, v5);
    if ((v64 & 1) == 0) {
      goto LABEL_24;
    }
  }
  if (v69 && v69 != 101)
  {
    uint64_t v71 = v69;
    uint64_t v72 = v60[3];
    uint64_t v73 = v60[4];
    uint64_t v74 = v60[5];
    v60[3] = v71;
    uint64_t v75 = v80[0];
    *(void *)v80[0] = 0;
    *(void *)(v75 + 8) = 0;
    sub_1007A0344(v72, v73, v74);
  }
  swift_release();
  uint64_t v76 = v81;
  unint64_t v77 = *(void **)(*(void *)(v81 + 16) + 32);
  *uint64_t v10 = v77;
  v86(v10, v58, v5);
  id v78 = v77;
  LOBYTE(v77) = _dispatchPreconditionTest(_:)();
  v84(v10, v5);
  if ((v77 & 1) == 0) {
LABEL_28:
  }
    __break(1u);
  swift_beginAccess();
  unint64_t v79 = *(sqlite3_stmt **)(v76 + 24);
  if (v79)
  {
    sqlite3_finalize(v79);
    *(void *)(v76 + 24) = 0;
  }
  swift_release();
  return v87;
}

uint64_t sub_100C9EF00(char a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (void *)((char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v11 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v10 = v11;
  uint64_t v12 = *(void (**)(void *, __n128))(v6 + 104);
  unsigned int v72 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v70 = v6 + 104;
  v12(v10, v8);
  id v13 = v11;
  char v14 = _dispatchPreconditionTest(_:)();
  id v17 = *(void (**)(void *, uint64_t))(v6 + 8);
  uint64_t v16 = v6 + 8;
  uint64_t v15 = v17;
  v17(v10, v5);
  if ((v14 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v69 = v16;
  uint64_t v73 = (void (*)(void *, uint64_t, uint64_t))v12;
  if (a1) {
    uint64_t v18 = 15649;
  }
  else {
    uint64_t v18 = 15677;
  }
  uint64_t v75 = 0;
  unint64_t v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  uint64_t v75 = 0x205443454C4553;
  unint64_t v76 = 0xE700000000000000;
  v19._uint64_t countAndFlagsBits = sub_100CD9E14(0, (void *)0xE000000000000000);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x204D4F524620;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = 0x736472616F62;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x20455245485720;
  v22._object = (void *)0xE700000000000000;
  String.append(_:)(v22);
  v23._object = (void *)0x800000010127B8B0;
  v23._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 0x444E412030203E20;
  v24._object = (void *)0xE900000000000020;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0x616E5F72656E776FLL;
  v25._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 32;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = v18;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 16160;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  uint64_t v29 = v75;
  uint64_t v30 = v76;
  unint64_t v74 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v31 = swift_retain();
  uint64_t v32 = sub_10079FC40(v31, v29, v30);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1)
    {
LABEL_7:
      swift_beginAccess();
      Swift::String v33 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v35 = v33;
      uint64_t v36 = Error.localizedDescription.getter();
      uint64_t v38 = v37;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v36;
      *(void *)(inited + 40) = v38;
      uint64_t v39 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v35, (uint64_t)&_mh_execute_header, v39, (uint64_t)"Failed to fetch a board record with error %@", 44, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return swift_willThrow();
    }
LABEL_26:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v41 = v32;
  swift_release();
  sub_10079DA60(0, 0xE000000000000000, 1);
  Swift::String v42 = *(void **)(*(void *)(v41 + 16) + 32);
  *uint64_t v10 = v42;
  uint64_t v43 = v72;
  uint64_t v44 = v73;
  v73(v10, v72, v5);
  id v45 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)();
  v15(v10, v5);
  if ((v42 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v67[1] = 0;
  type metadata accessor for SQLiteRowIterator();
  uint64_t v46 = v44;
  uint64_t v47 = (void *)swift_initStackObject();
  v47[3] = 0;
  v47[4] = 0;
  v67[0] = v47 + 4;
  v47[5] = 1;
  void v47[2] = v41;
  id v48 = *(void **)(*(void *)(v41 + 16) + 32);
  *uint64_t v10 = v48;
  uint64_t v68 = v41;
  swift_retain();
  v46(v10, v43, v5);
  id v49 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)();
  uint64_t v71 = v15;
  v15(v10, v5);
  if ((v48 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v50 = v68;
  while (1)
  {
    uint64_t v53 = v47[3];
    uint64_t v54 = v47[4];
    uint64_t v55 = v47[5];
    v47[3] = 0;
    v47[4] = 0;
    v47[5] = 1;
    sub_1007A0344(v53, v54, v55);
    swift_beginAccess();
    unsigned int v56 = sqlite3_step(*(sqlite3_stmt **)(v50 + 24));
    if (v56 != 100) {
      break;
    }
    uint64_t v57 = swift_retain_n();
    if (sub_100CDA2EC(v57, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
    uint64_t v50 = v47[2];
    uint64_t v51 = *(void **)(*(void *)(v50 + 16) + 32);
    *uint64_t v10 = v51;
    uint64_t v43 = v72;
    v73(v10, v72, v5);
    id v52 = v51;
    LOBYTE(v51) = _dispatchPreconditionTest(_:)();
    v71(v10, v5);
    if ((v51 & 1) == 0) {
      goto LABEL_24;
    }
  }
  if (v56 && v56 != 101)
  {
    uint64_t v58 = v56;
    uint64_t v59 = v47[3];
    uint64_t v60 = v47[4];
    uint64_t v61 = v47[5];
    v47[3] = v58;
    uint64_t v62 = v67[0];
    *(void *)v67[0] = 0;
    *(void *)(v62 + 8) = 0;
    sub_1007A0344(v59, v60, v61);
  }
  swift_release();
  uint64_t v63 = v68;
  char v64 = *(void **)(*(void *)(v68 + 16) + 32);
  *uint64_t v10 = v64;
  v73(v10, v43, v5);
  id v65 = v64;
  LOBYTE(v64) = _dispatchPreconditionTest(_:)();
  v71(v10, v5);
  if ((v64 & 1) == 0) {
LABEL_28:
  }
    __break(1u);
  swift_beginAccess();
  uint64_t v66 = *(sqlite3_stmt **)(v63 + 24);
  if (v66)
  {
    sqlite3_finalize(v66);
    *(void *)(v63 + 24) = 0;
  }
  swift_release();
  return v74;
}

uint64_t sub_100C9F6A4(char a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (void *)((char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v11 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v10 = v11;
  uint64_t v12 = *(void (**)(void *, __n128))(v6 + 104);
  unsigned int v72 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v70 = v6 + 104;
  v12(v10, v8);
  id v13 = v11;
  char v14 = _dispatchPreconditionTest(_:)();
  id v17 = *(void (**)(void *, uint64_t))(v6 + 8);
  uint64_t v16 = v6 + 8;
  uint64_t v15 = v17;
  v17(v10, v5);
  if ((v14 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v69 = v16;
  uint64_t v73 = (void (*)(void *, uint64_t, uint64_t))v12;
  if (a1) {
    uint64_t v18 = 15649;
  }
  else {
    uint64_t v18 = 15677;
  }
  uint64_t v75 = 0;
  unint64_t v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  uint64_t v75 = 0x205443454C4553;
  unint64_t v76 = 0xE700000000000000;
  v19._uint64_t countAndFlagsBits = sub_100CD9E14(0, (void *)0xE000000000000000);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x204D4F524620;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = 0x736472616F62;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x20455245485720;
  v22._object = (void *)0xE700000000000000;
  String.append(_:)(v22);
  v23._object = (void *)0x800000010127BD90;
  v23._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 0x444E412031203D20;
  v24._object = (void *)0xE900000000000020;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0x616E5F72656E776FLL;
  v25._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 32;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = v18;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 16160;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  uint64_t v29 = v75;
  uint64_t v30 = v76;
  unint64_t v74 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v31 = swift_retain();
  uint64_t v32 = sub_10079FC40(v31, v29, v30);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1)
    {
LABEL_7:
      swift_beginAccess();
      Swift::String v33 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v35 = v33;
      uint64_t v36 = Error.localizedDescription.getter();
      uint64_t v38 = v37;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v36;
      *(void *)(inited + 40) = v38;
      uint64_t v39 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v35, (uint64_t)&_mh_execute_header, v39, (uint64_t)"Failed to fetch a board record with error %@", 44, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return swift_willThrow();
    }
LABEL_26:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v41 = v32;
  swift_release();
  sub_10079DA60(0, 0xE000000000000000, 1);
  Swift::String v42 = *(void **)(*(void *)(v41 + 16) + 32);
  *uint64_t v10 = v42;
  uint64_t v43 = v72;
  uint64_t v44 = v73;
  v73(v10, v72, v5);
  id v45 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)();
  v15(v10, v5);
  if ((v42 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v67[1] = 0;
  type metadata accessor for SQLiteRowIterator();
  uint64_t v46 = v44;
  uint64_t v47 = (void *)swift_initStackObject();
  v47[3] = 0;
  v47[4] = 0;
  v67[0] = v47 + 4;
  v47[5] = 1;
  void v47[2] = v41;
  id v48 = *(void **)(*(void *)(v41 + 16) + 32);
  *uint64_t v10 = v48;
  uint64_t v68 = v41;
  swift_retain();
  v46(v10, v43, v5);
  id v49 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)();
  uint64_t v71 = v15;
  v15(v10, v5);
  if ((v48 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v50 = v68;
  while (1)
  {
    uint64_t v53 = v47[3];
    uint64_t v54 = v47[4];
    uint64_t v55 = v47[5];
    v47[3] = 0;
    v47[4] = 0;
    v47[5] = 1;
    sub_1007A0344(v53, v54, v55);
    swift_beginAccess();
    unsigned int v56 = sqlite3_step(*(sqlite3_stmt **)(v50 + 24));
    if (v56 != 100) {
      break;
    }
    uint64_t v57 = swift_retain_n();
    if (sub_100CDA2EC(v57, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
    uint64_t v50 = v47[2];
    uint64_t v51 = *(void **)(*(void *)(v50 + 16) + 32);
    *uint64_t v10 = v51;
    uint64_t v43 = v72;
    v73(v10, v72, v5);
    id v52 = v51;
    LOBYTE(v51) = _dispatchPreconditionTest(_:)();
    v71(v10, v5);
    if ((v51 & 1) == 0) {
      goto LABEL_24;
    }
  }
  if (v56 && v56 != 101)
  {
    uint64_t v58 = v56;
    uint64_t v59 = v47[3];
    uint64_t v60 = v47[4];
    uint64_t v61 = v47[5];
    v47[3] = v58;
    uint64_t v62 = v67[0];
    *(void *)v67[0] = 0;
    *(void *)(v62 + 8) = 0;
    sub_1007A0344(v59, v60, v61);
  }
  swift_release();
  uint64_t v63 = v68;
  char v64 = *(void **)(*(void *)(v68 + 16) + 32);
  *uint64_t v10 = v64;
  v73(v10, v43, v5);
  id v65 = v64;
  LOBYTE(v64) = _dispatchPreconditionTest(_:)();
  v71(v10, v5);
  if ((v64 & 1) == 0) {
LABEL_28:
  }
    __break(1u);
  swift_beginAccess();
  uint64_t v66 = *(sqlite3_stmt **)(v63 + 24);
  if (v66)
  {
    sqlite3_finalize(v66);
    *(void *)(v63 + 24) = 0;
  }
  swift_release();
  return v74;
}

double *sub_100C9FE48(char a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (uint64_t *)((char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v11 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v10 = v11;
  uint64_t v12 = enum case for DispatchPredicate.onQueue(_:);
  id v13 = *(void (**)(void *, uint64_t, uint64_t))(v6 + 104);
  uint64_t v80 = v6 + 104;
  uint64_t v83 = v13;
  ((void (*)(void *, void, uint64_t, __n128))v13)(v10, enum case for DispatchPredicate.onQueue(_:), v5, v8);
  id v14 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  id v17 = *(double **)(v6 + 8);
  uint64_t v15 = v6 + 8;
  uint64_t v16 = v17;
  uint64_t v81 = v5;
  ((void (*)(void *, uint64_t))v17)(v10, v5);
  if ((v11 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v82 = v16;
  uint64_t v16 = _swiftEmptyArrayStorage;
  if (a1) {
    return v16;
  }
  uint64_t v85 = 0;
  unint64_t v86 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v18._uint64_t countAndFlagsBits = 0x205443454C4553;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = sub_100CE0BA0(0x6D5F736472616F62, (void *)0xEF61746164617465);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x204D4F524620;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = 0x6D5F736472616F62;
  v21._object = (void *)0xEF61746164617465;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x4A2052454E4E4920;
  v22._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0x736472616F62;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 542002976;
  v24._object = (void *)0xE400000000000000;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0x736472616F62;
  v25._object = (void *)0xE600000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 46;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 0xD000000000000010;
  v27._object = (void *)0x8000000101262BA0;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 2112800;
  v28._object = (void *)0xE300000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 0x6D5F736472616F62;
  v29._object = (void *)0xEF61746164617465;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = 46;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 0xD000000000000010;
  v31._object = (void *)0x8000000101262BA0;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = 0x20455245485720;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = 0x6D5F736472616F62;
  v33._object = (void *)0xEF61746164617465;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 46;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._object = (void *)0x800000010127B8B0;
  v35._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = 807419424;
  v36._object = (void *)0xE400000000000000;
  String.append(_:)(v36);
  uint64_t v37 = v85;
  uint64_t v38 = v86;
  unint64_t v84 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v16 = *(double **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v39 = swift_retain();
  uint64_t v40 = sub_10079FC40(v39, v37, v38);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_10166FB70 == -1)
    {
LABEL_5:
      swift_beginAccess();
      uint64_t v41 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v43 = v41;
      uint64_t v44 = Error.localizedDescription.getter();
      uint64_t v46 = v45;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v44;
      *(void *)(inited + 40) = v46;
      uint64_t v47 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v43, (uint64_t)&_mh_execute_header, v47, (uint64_t)"Failed to fetch a board record with error %@", 44, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      swift_willThrow();
      return v16;
    }
LABEL_25:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v48 = v40;
  uint64_t v78 = 0;
  swift_release();
  id v49 = *(void **)(*(void *)(v48 + 16) + 32);
  *uint64_t v10 = v49;
  uint64_t v50 = v81;
  v83(v10, v12, v81);
  id v51 = v49;
  LOBYTE(v49) = _dispatchPreconditionTest(_:)();
  ((void (*)(void *, uint64_t))v82)(v10, v50);
  if ((v49 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  type metadata accessor for SQLiteRowIterator();
  uint64_t v16 = (double *)swift_initStackObject();
  v16[3] = 0.0;
  v16[4] = 0.0;
  unint64_t v77 = v16 + 4;
  *((void *)v16 + 5) = 1;
  *((void *)v16 + 2) = v48;
  id v52 = *(void **)(*(void *)(v48 + 16) + 32);
  *uint64_t v10 = v52;
  uint64_t v79 = v48;
  swift_retain();
  v83(v10, v12, v50);
  id v53 = v52;
  LOBYTE(v52) = _dispatchPreconditionTest(_:)();
  ((void (*)(void *, uint64_t))v82)(v10, v50);
  if ((v52 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v54 = v79;
  while (1)
  {
    uint64_t v59 = *((void *)v16 + 3);
    uint64_t v60 = *((void *)v16 + 4);
    uint64_t v61 = *((void *)v16 + 5);
    v16[3] = 0.0;
    v16[4] = 0.0;
    *((void *)v16 + 5) = 1;
    sub_1007A0344(v59, v60, v61);
    swift_beginAccess();
    unsigned int v62 = sqlite3_step(*(sqlite3_stmt **)(v54 + 24));
    if (v62 != 100) {
      break;
    }
    uint64_t v63 = v15;
    uint64_t v64 = swift_retain_n();
    if (sub_100CE0E74(v64, 0))
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
    uint64_t v54 = *((void *)v16 + 2);
    uint64_t v55 = *(void **)(*(void *)(v54 + 16) + 32);
    *uint64_t v10 = v55;
    uint64_t v56 = v81;
    v83(v10, v12, v81);
    id v57 = v55;
    LOBYTE(v55) = _dispatchPreconditionTest(_:)();
    uint64_t v58 = v56;
    uint64_t v15 = v63;
    ((void (*)(void *, uint64_t))v82)(v10, v58);
    if ((v55 & 1) == 0) {
      goto LABEL_23;
    }
  }
  if (v62 && v62 != 101)
  {
    uint64_t v65 = v62;
    uint64_t v66 = *((void *)v16 + 3);
    uint64_t v67 = *((void *)v16 + 4);
    uint64_t v68 = *((void *)v16 + 5);
    *((void *)v16 + 3) = v65;
    uint64_t v69 = v77;
    *unint64_t v77 = 0;
    v69[1] = 0;
    sub_1007A0344(v66, v67, v68);
  }
  swift_release();
  uint64_t v70 = v79;
  uint64_t v71 = *(void **)(*(void *)(v79 + 16) + 32);
  *uint64_t v10 = v71;
  uint64_t v72 = v81;
  v83(v10, v12, v81);
  id v73 = v71;
  LOBYTE(v71) = _dispatchPreconditionTest(_:)();
  ((void (*)(void *, uint64_t))v82)(v10, v72);
  if ((v71 & 1) == 0) {
LABEL_27:
  }
    __break(1u);
  swift_beginAccess();
  unint64_t v74 = *(sqlite3_stmt **)(v70 + 24);
  if (v74)
  {
    sqlite3_finalize(v74);
    *(void *)(v70 + 24) = 0;
  }
  swift_release();
  return (double *)v84;
}

void sub_100CA06B4(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v85 = a3;
  uint64_t v93 = type metadata accessor for UUID();
  uint64_t v86 = *(void *)(v93 - 8);
  __chkstk_darwin(v93, v7);
  uint64_t v95 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  id v94 = (char *)&v80 - v11;
  uint64_t v12 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v87 = (uint64_t)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v92 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v92, v15);
  id v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1005057FC(&qword_101699628);
  __chkstk_darwin(v18 - 8, v19);
  Swift::String v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for CRLBoardCRDTData(0);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  uint64_t v84 = (uint64_t)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  unint64_t v91 = (unint64_t)&v80 - v28;
  uint64_t v29 = *a1;
  Swift::String v30 = &a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
  swift_beginAccess();
  uint64_t v31 = *(void *)v30;
  uint64_t v90 = v29;
  uint64_t v32 = v29 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
  if (*(void *)(v31 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v33 = sub_1009563EC(v32);
    if (v34)
    {
      char v35 = *(unsigned char *)(*(void *)(*(void *)(v31 + 56) + 8 * v33) + 16);
      swift_bridgeObjectRelease();
      if (v35)
      {
        if (qword_10166FB70 == -1)
        {
LABEL_5:
          swift_beginAccess();
          Swift::String v36 = (void *)static OS_os_log.boardStore;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_10117E810;
          id v38 = v36;
          uint64_t v39 = sub_100753038();
          uint64_t v41 = v40;
          *(void *)(inited + 56) = &type metadata for String;
          *(void *)(inited + 64) = sub_100528BE4();
          *(void *)(inited + 32) = v39;
          *(void *)(inited + 40) = v41;
          uint64_t v42 = static os_log_type_t.default.getter();
          sub_100BAC898((uint64_t)v38, (uint64_t)&_mh_execute_header, v42, (uint64_t)"Excluding board from unsynced changes. Board identifier: %{public}@", 67, 2, inited);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          uint64_t *v85 = 0;
          return;
        }
LABEL_27:
        swift_once();
        goto LABEL_5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  id v89 = a2;
  uint64_t v43 = v90;
  uint64_t v44 = (uint64_t *)(v90 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  unint64_t v45 = *(void *)(v90 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
  if (v45 >> 60 == 15)
  {
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v88 = v32;
    uint64_t v47 = *v44;
    sub_1005FA2A0(*v44, v45);
    sub_1005FA2A0(v47, v45);
    sub_100CDE0D8((unint64_t *)&unk_10169A0D0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
    swift_retain();
    uint64_t v48 = v47;
    CRDT.init(serializedData:)();
    if (v4)
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
      swift_release();
      sub_100514260(v47, v45);
      sub_100522F00((uint64_t)v21, &qword_101699628);
      uint64_t v46 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
      uint64_t v49 = (uint64_t)v21;
      uint64_t v50 = v91;
      sub_100CE12D8(v49, v91, type metadata accessor for CRLBoardCRDTData);
      long long v82 = *(_OWORD *)(v43 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
      uint64_t v81 = *(void *)(v43 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
      uint64_t v51 = v84;
      sub_100CE144C(v50, v84, type metadata accessor for CRLBoardCRDTData);
      id v52 = (uint64_t *)(v88 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
      uint64_t v53 = v52[1];
      uint64_t v83 = *v52;
      type metadata accessor for CRLBoardData(0);
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = 7;
      *(_OWORD *)(v46 + 24) = v82;
      *(void *)(v46 + 40) = v81;
      sub_100CE12D8(v51, v46 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
      swift_bridgeObjectRetain();
      swift_release();
      sub_100514260(v48, v45);
      uint64_t v54 = (void *)(v46 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      *uint64_t v54 = v83;
      v54[1] = v53;
      sub_100CE14B4(v50, type metadata accessor for CRLBoardCRDTData);
    }
    uint64_t v32 = v88;
  }
  sub_100CE144C(v32, (uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload();
  unint64_t v55 = sub_100C93FDC((uint64_t)v17);
  sub_100CE14B4((uint64_t)v17, type metadata accessor for CRLAssetReferrerIdentifier);
  if (v4)
  {
    swift_release();
  }
  else
  {
    uint64_t v88 = v32;
    uint64_t v96 = &_swiftEmptySetSingleton;
    if (v55 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v56 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v83 = v46;
    uint64_t v84 = 0;
    if (v56)
    {
      if (v56 < 1)
      {
        __break(1u);
        goto LABEL_27;
      }
      uint64_t v57 = 0;
      unint64_t v91 = v55 & 0xC000000000000001;
      uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v86 + 16);
      uint64_t v59 = (void (**)(uint64_t, uint64_t))(v86 + 8);
      unint64_t v92 = v55;
      uint64_t v60 = (uint64_t)v94;
      uint64_t v61 = v95;
      uint64_t v62 = v93;
      do
      {
        if (v91)
        {
          uint64_t v63 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v63 = *(void *)(v55 + 8 * v57 + 32);
          swift_retain();
        }
        ++v57;
        (*v58)(v61, v63 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID, v62);
        sub_100CB4BC8(v60, v61);
        (*v59)(v60, v62);
        swift_release();
        unint64_t v55 = v92;
      }
      while (v56 != v57);
    }
    swift_bridgeObjectRelease_n();
    sub_100CE144C(v88, v87, type metadata accessor for CRLBoardIdentifier);
    uint64_t v64 = v90;
    unint64_t v92 = *(void *)(v90 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
    uint64_t v65 = *(void *)(v90 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
    unint64_t v91 = *(void *)(v90 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 8);
    uint64_t v88 = v65;
    uint64_t v66 = v90 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
    swift_beginAccess();
    uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
    uint64_t v68 = v93;
    uint64_t v69 = (uint64_t)v94;
    v67(v94, v66, v93);
    uint64_t v70 = v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
    swift_beginAccess();
    uint64_t v71 = (uint64_t)v95;
    v67(v95, v70, v68);
    LODWORD(v93) = *(unsigned __int8 *)(v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone);
    LOBYTE(v70) = *(unsigned char *)(v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_hideFromRecentlyDeleted);
    uint64_t v72 = *(void *)(v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges);
    uint64_t v73 = v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData;
    uint64_t v74 = *(void *)(v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
    unint64_t v75 = *(void *)(v73 + 8);
    uint64_t v76 = (uint64_t)v96;
    type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
    uint64_t v77 = swift_allocObject();
    id v78 = v89;
    sub_1005FA2A0(v74, v75);
    uint64_t v79 = sub_100CD8B04((uint64_t)v78, v87, v92, v91, v88, v69, v71, v93, v70, v83, v72, v74, v75, v76, v77);
    swift_release();
    uint64_t *v85 = v79;
  }
}

void sub_100CA1124(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v13 = &a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
  swift_beginAccess();
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex;
  uint64_t v16 = v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier;
  if (!*(void *)(*(void *)v13 + 16)) {
    goto LABEL_8;
  }
  uint64_t v17 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1009563EC(v16);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v20 = *(void *)(v14 + 56);
  uint64_t v60 = a3;
  uint64_t v21 = v16;
  uint64_t v22 = a4;
  uint64_t v23 = v15;
  uint64_t v24 = a2;
  uint64_t v25 = v11;
  uint64_t v26 = *(void *)(v20 + 8 * v18);
  swift_beginAccess();
  uint64_t v27 = *(void *)(v26 + 32);
  uint64_t v11 = v25;
  a2 = v24;
  uint64_t v15 = v23;
  a4 = v22;
  uint64_t v16 = v21;
  a3 = v60;
  BOOL v28 = sub_1006E7A70(v17, v27);
  swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_8:
    uint64_t v37 = *(void *)a3;
    if (*(void *)(*(void *)a3 + 16) && (unint64_t v38 = sub_1009563EC(v16), (v39 & 1) != 0))
    {
      id v57 = a2;
      uint64_t v58 = a4;
      uint64_t v56 = *(void *)(*(void *)(v37 + 56) + 8 * v38);
      swift_retain();
    }
    else
    {
      uint64_t v40 = v64;
      uint64_t v41 = sub_100C51248(v16);
      uint64_t v64 = v40;
      if (v40) {
        return;
      }
      uint64_t v42 = v41;
      if (!v41)
      {
        if (qword_10166FB88 != -1) {
          swift_once();
        }
        swift_beginAccess();
        id v32 = (id)static OS_os_log.dataSync;
        uint64_t v55 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v32, (uint64_t)&_mh_execute_header, v55, (uint64_t)"Found a freehandDrawingBucket database row that has no corresponding board database row", 87, 2, (uint64_t)_swiftEmptyArrayStorage);
        goto LABEL_18;
      }
      id v57 = a2;
      uint64_t v58 = a4;
      sub_100CE144C(v41 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      swift_retain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v61 = *(void *)a3;
      *(void *)a3 = 0x8000000000000000;
      sub_100978B9C(v42, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
      *(void *)a3 = v61;
      swift_bridgeObjectRelease();
      sub_100CE14B4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      uint64_t v56 = v42;
      swift_release();
    }
    uint64_t v60 = *(void *)(v12 + v15);
    sub_100CE144C(v16, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    uint64_t v44 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
    unint64_t v45 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8);
    uint64_t v46 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
    unint64_t v47 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
    uint64_t v59 = v11;
    uint64_t v49 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
    unint64_t v48 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8);
    long long v50 = *(_OWORD *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 16);
    v62[0] = *(_OWORD *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
    v62[1] = v50;
    uint64_t v63 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 32);
    uint64_t v51 = *(void *)(v12 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges);
    type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
    uint64_t v52 = swift_allocObject();
    id v53 = v57;
    sub_100510D4C(v44, v45);
    sub_1005FA2A0(v46, v47);
    sub_1005FA2A0(v49, v48);
    uint64_t v54 = sub_100CDC31C((uint64_t)v53, v60, (uint64_t)v59, v44, v45, v46, v47, v49, v48, (uint64_t)v62, v51, v52);
    sub_100514260(v49, v48);
    sub_100510084(v44, v45);
    swift_release();
    *uint64_t v58 = v54;
    return;
  }
  if (qword_10166FB70 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v29 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
  uint64_t v31 = *(void *)(v12 + v15);
  *(void *)(inited + 56) = &type metadata for Int;
  *(void *)(inited + 64) = &protocol witness table for Int;
  *(void *)(inited + 32) = v31;
  id v32 = v29;
  uint64_t v33 = sub_100753038();
  uint64_t v35 = v34;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = sub_100528BE4();
  *(void *)(inited + 72) = v33;
  *(void *)(inited + 80) = v35;
  uint64_t v36 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v32, (uint64_t)&_mh_execute_header, v36, (uint64_t)"Excluding freehand drawing bucket from unsynced changes. Bucket Index: %d, board identifier: %{public}@", 103, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();
LABEL_18:

  *a4 = 0;
}

void sub_100CA16C0(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v118 = a4;
  uint64_t v9 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v114 = (uint64_t)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v12 - 8, v13);
  unint64_t v122 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v119, v15);
  uint64_t v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v115 = (uint64_t)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  uint64_t v121 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v26);
  BOOL v28 = (char *)&v106 - v27;
  uint64_t v29 = *a1;
  id v125 = a2;
  Swift::String v30 = (uint64_t *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
  swift_beginAccess();
  uint64_t v31 = *v30;
  id v32 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v120 = v29 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemUUID;
  uint64_t v127 = v22 + 16;
  uint64_t v126 = v32;
  ((void (*)(char *))v32)(v28);
  uint64_t v116 = v29;
  uint64_t v33 = v29 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier;
  swift_bridgeObjectRetain();
  uint64_t v123 = v33;
  LOBYTE(v29) = sub_100FB8E74((uint64_t)v28, v33, v31);
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v124 = v22 + 8;
  v34(v28, v21);
  if (v29)
  {
    if (qword_10166FB70 != -1) {
LABEL_49:
    }
      swift_once();
    swift_beginAccess();
    uint64_t v35 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
    v126(v28, v120, v21);
    id v37 = v35;
    uint64_t v38 = UUID.uuidString.getter();
    uint64_t v40 = v39;
    v34(v28, v21);
    *(void *)(inited + 56) = &type metadata for String;
    unint64_t v41 = sub_100528BE4();
    *(void *)(inited + 64) = v41;
    *(void *)(inited + 32) = v38;
    *(void *)(inited + 40) = v40;
    uint64_t v42 = sub_100753038();
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 104) = v41;
    *(void *)(inited + 72) = v42;
    *(void *)(inited + 80) = v43;
    uint64_t v44 = static os_log_type_t.default.getter();
    sub_100BAC898((uint64_t)v37, (uint64_t)&_mh_execute_header, v44, (uint64_t)"Excluding board item from unsynced changes item UUID: %{public}@, board identifier: %{public}@", 94, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    goto LABEL_4;
  }
  uint64_t v117 = v34;
  uint64_t v45 = *a3;
  uint64_t v46 = v123;
  if (*(void *)(*a3 + 16) && (unint64_t v47 = sub_1009563EC(v123), (v48 & 1) != 0))
  {
    uint64_t v49 = *(void *)(*(void *)(v45 + 56) + 8 * v47);
    swift_retain();
  }
  else
  {
    uint64_t v50 = sub_100C51248(v46);
    if (v5) {
      return;
    }
    if (!v50)
    {
      if (qword_10166FB88 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v77 = (id)static OS_os_log.dataSync;
      uint64_t v78 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v77, (uint64_t)&_mh_execute_header, v78, (uint64_t)"Found a boardItem database row that has no corresponding board database row", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

      uint64_t *v118 = 0;
      return;
    }
    uint64_t v49 = v50;
    uint64_t v51 = v115;
    sub_100CE144C(v50 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier, v115, type metadata accessor for CRLBoardIdentifier);
    swift_retain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v128 = *a3;
    *a3 = 0x8000000000000000;
    sub_100978B9C(v49, v51, isUniquelyReferenced_nonNull_native);
    *a3 = v128;
    swift_bridgeObjectRelease();
    sub_100CE14B4(v51, type metadata accessor for CRLBoardIdentifier);
    swift_release();
  }
  unint64_t v108 = sub_100CDAD88(v116);
  uint64_t v53 = (uint64_t)&v17[*(int *)(sub_1005057FC(&qword_101674240) + 48)];
  v126(v17, v120, v21);
  sub_100CE144C(v49 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier, v53, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload();
  unint64_t v54 = sub_100C93FDC((uint64_t)v17);
  sub_100CE14B4((uint64_t)v17, type metadata accessor for CRLAssetReferrerIdentifier);
  if (v5)
  {
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v106 = v49;
    id v129 = &_swiftEmptySetSingleton;
    if (v54 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v56 = v120;
    uint64_t v107 = 0;
    if (v55)
    {
      uint64_t v57 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
      uint64_t v119 = *(void *)&v125[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
      unint64_t v113 = v54 & 0xC000000000000001;
      uint64_t v58 = 4;
      uint64_t v111 = v21;
      uint64_t v109 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
      uint64_t v110 = (void (*)(char *, uint64_t))v55;
      unint64_t v112 = v54;
      while (1)
      {
        if (v113)
        {
          uint64_t v59 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v59 = *(void *)(v54 + 8 * v58);
          swift_retain();
        }
        uint64_t v34 = (void (*)(char *, uint64_t))(v58 - 3);
        if (__OFADD__(v58 - 4, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v60 = v59 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID;
        uint64_t v61 = v57;
        uint64_t v62 = v121;
        v126(v121, v59 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID, v21);
        sub_100CB4BC8((uint64_t)v28, v62);
        v117(v28, v21);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v119 + 16));
        uint64_t v63 = v125;
        uint64_t v64 = *(void **)&v125[v61];
        if (v64)
        {
          id v65 = *(id *)&v125[v61];
        }
        else
        {
          id v66 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
          uint64_t v67 = v63;
          id v68 = sub_100EAFDE4((uint64_t)v67);

          uint64_t v69 = *(void **)&v63[v61];
          *(void *)&v63[v61] = v68;
          id v65 = v68;

          uint64_t v64 = 0;
        }
        uint64_t v70 = *(os_unfair_lock_s **)(v119 + 16);
        id v71 = v64;
        os_unfair_lock_unlock(v70);
        uint64_t v72 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v73 = swift_allocObject();
        *(void *)(v73 + 16) = v72;
        *(void *)(v73 + 24) = v59;
        swift_retain();
        uint64_t v74 = v122;
        sub_100EA7CA0(v60, 0, 3, sub_100CE8FAC, v73, v122);

        swift_release();
        uint64_t v75 = type metadata accessor for URL();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v75 - 8) + 48))(v74, 1, v75) == 1) {
          break;
        }
        swift_release();
        sub_100522F00((uint64_t)v74, &qword_101672E90);
        ++v58;
        uint64_t v21 = v111;
        unint64_t v54 = v112;
        uint64_t v57 = v109;
        if (v34 == v110)
        {
          swift_bridgeObjectRelease();
          uint64_t v76 = v129;
          uint64_t v56 = v120;
          goto LABEL_31;
        }
      }
      sub_100522F00((uint64_t)v74, &qword_101672E90);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_10166FB88 != -1) {
        swift_once();
      }
      swift_beginAccess();
      long long v82 = (void *)static OS_os_log.dataSync;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v83 = swift_initStackObject();
      *(_OWORD *)(v83 + 16) = xmmword_10117E810;
      if (v108)
      {
        uint64_t v84 = *(void (**)(uint64_t))(*v108 + 256);
        id v85 = v82;
        uint64_t v86 = swift_retain();
        v84(v86);
        swift_release();
        uint64_t v87 = UUID.uuidString.getter();
        unint64_t v89 = v88;
        v117(v28, v111);
      }
      else
      {
        id v102 = v82;
        uint64_t v87 = 0;
        unint64_t v89 = 0;
      }
      *(void *)(v83 + 56) = &type metadata for String;
      *(void *)(v83 + 64) = sub_100528BE4();
      if (v89) {
        uint64_t v103 = v87;
      }
      else {
        uint64_t v103 = 0;
      }
      unint64_t v104 = 0xE000000000000000;
      if (v89) {
        unint64_t v104 = v89;
      }
      *(void *)(v83 + 32) = v103;
      *(void *)(v83 + 40) = v104;
      uint64_t v105 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v82, (uint64_t)&_mh_execute_header, v105, (uint64_t)"Skipping item with id %{public}@ when fetching unsynced changes because file for the item's asset doesn't exists", 112, 2, v83);
      swift_release();
      swift_release();
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();
      swift_release();

      uint64_t *v118 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v76 = &_swiftEmptySetSingleton;
LABEL_31:
      uint64_t v79 = swift_bridgeObjectRetain();
      uint64_t v80 = v107;
      BOOL v81 = sub_100C90E50(v79);
      if (v80)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release();
      }
      else
      {
        BOOL v90 = v81;
        swift_bridgeObjectRelease();
        if (!v90)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_4:
          uint64_t *v118 = 0;
          return;
        }
        v126(v28, v56, v21);
        uint64_t v91 = v116;
        uint64_t v127 = *(void *)(v116 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
        uint64_t v92 = *(void *)(v116 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions + 16);
        uint64_t v126 = *(void (**)(char *, uint64_t, uint64_t))(v116
                                                               + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions
                                                               + 8);
        uint64_t v124 = v92;
        unint64_t v122 = *(char **)(v116 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions);
        uint64_t v121 = *(char **)(v116 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue);
        uint64_t v93 = v116 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID;
        swift_beginAccess();
        sub_100522E9C(v93, v114, (uint64_t *)&unk_101674520);
        uint64_t v94 = v115;
        sub_100CE144C(v123, v115, type metadata accessor for CRLBoardIdentifier);
        LODWORD(v123) = *(unsigned __int8 *)(v91 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_isLocalTombstone);
        uint64_t v120 = *(void *)(v91 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges);
        uint64_t v96 = *(void *)(v91 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
        unint64_t v95 = *(void *)(v91 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData + 8);
        type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
        uint64_t v97 = swift_allocObject();
        uint64_t v98 = v125;
        uint64_t v99 = (uint64_t)v108;
        uint64_t v100 = (uint64_t)v98;
        sub_1005FA2A0(v96, v95);
        uint64_t v101 = sub_100CDB044(v100, (uint64_t)v28, v127, (uint64_t)v126, v124, (uint64_t)v122, (uint64_t)v121, v114, v94, v123, v99, v120, v96, v95, (uint64_t)v76, v97);
        swift_release();
        swift_release();
        uint64_t *v118 = v101;
      }
    }
  }
}

uint64_t sub_100CA2580(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v3 = (void *)Strong;
  uint64_t v4 = sub_100C8FB00(a1);
  if (qword_10166FB88 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = (void *)static OS_os_log.dataSync;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  id v7 = v5;
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  *(void *)(inited + 32) = v8;
  *(void *)(inited + 40) = v10;
  uint64_t v11 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v7, (uint64_t)&_mh_execute_header, v11, (uint64_t)"Failed to fetch asset row for assetUUID id %{public}@ when fetching unsynced changes", 84, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  return v4;
}

uint64_t sub_100CA2734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  int v40 = a7;
  unint64_t v38 = a6;
  uint64_t v39 = a5;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v41 = a2;
  uint64_t v34 = a1;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v37 = (uint64_t)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = (uint64_t *)((char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = v7;
  uint64_t v26 = *(void **)(v7 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v25 = v26;
  (*(void (**)(void *, void, uint64_t, __n128))(v21 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v20, v23);
  id v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v21 + 8))(v25, v20);
  if (v26)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v34, v15);
    sub_100522E9C(v35, (uint64_t)v14, (uint64_t *)&unk_101674520);
    uint64_t v29 = v37;
    sub_100CE144C(v36, v37, type metadata accessor for CRLBoardIdentifier);
    type metadata accessor for CRLBoardItemDatabaseRow();
    swift_allocObject();
    uint64_t v31 = v38;
    uint64_t v30 = v39;
    sub_1005FA2A0(v39, v38);
    uint64_t v32 = sub_100E19EB8((uint64_t)v19, 0x1000000000000, 0x2000400000000, 0x1000000000000, 0, (uint64_t)v14, v29, v41, 0, 0xF000000000000000, 0, 0xF000000000000000, v40 & 1, 0, v30, v31);
    sub_100C5A69C(v32);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CA2A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v39 = a4;
  unint64_t v40 = a5;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v35 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v38 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __n128 v21 = __chkstk_darwin(v18, v20);
  __n128 v23 = (uint64_t *)((char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = v5;
  uint64_t v24 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v23 = v24;
  (*(void (**)(void *, void, uint64_t, __n128))(v19 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v18, v21);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v19 + 8))(v23, v18);
  if (v24)
  {
    static Date.timeIntervalSinceReferenceDate.getter();
    double v28 = v27;
    sub_100CE144C(v35, (uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
    uint64_t v35 = 0x2000400000000;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v30 = (uint64_t)v13;
    v29(v13, v36, v6);
    uint64_t v31 = (uint64_t)v38;
    v29(v38, v37, v6);
    type metadata accessor for CRLBoardDatabaseRow();
    swift_allocObject();
    uint64_t v33 = v39;
    uint64_t v32 = v40;
    sub_1005FA2A0(v39, v40);
    uint64_t v34 = sub_100BA40A8((uint64_t)v17, 0x1000000000000, v35, 0x1000000000000, v30, v31, 0, 0xF000000000000000, v28, v28, 1, 0, 0, v33, v32, 0, 0, 0xF000000000000000, 0);
    sub_100C65F58(v34);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

sqlite3_int64 sub_100CA2DBC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v122 = a3;
  unint64_t v123 = a6;
  uint64_t v121 = a5;
  uint64_t v119 = a2;
  uint64_t v120 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v120, v10);
  uint64_t v12 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_1005057FC(&qword_101699738);
  __chkstk_darwin(v124, v13);
  uint64_t v117 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v118 = (uint64_t)&v103 - v17;
  __chkstk_darwin(v18, v19);
  __n128 v21 = (char *)&v103 - v20;
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  uint64_t v23 = *(void *)(v22 - 8);
  __n128 v25 = __chkstk_darwin(v22, v24);
  double v27 = (uint64_t *)((char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v28 = *(void **)(v6 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *double v27 = v28;
  uint64_t v29 = *(void (**)(void, __n128))(v23 + 104);
  unsigned int v112 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v113 = (void (*)(void *, void, uint64_t))v29;
  uint64_t v114 = v23 + 104;
  v29(v27, v25);
  id v30 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  uint64_t v31 = *(void (**)(void *, uint64_t))(v23 + 8);
  uint64_t v115 = v27;
  uint64_t v116 = v22;
  uint64_t v111 = v31;
  uint64_t v110 = v23 + 8;
  v31(v27, v22);
  if ((v28 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v32 = (uint64_t)v125;
  sqlite3_int64 result = sub_100C55914((uint64_t)v21, a1, a4);
  if (v32) {
    return result;
  }
  uint64_t v35 = a4;
  uint64_t v109 = v7;
  uint64_t v108 = a1;
  uint64_t v36 = *(int *)(v124 + 48);
  uint64_t v37 = *(int *)(v124 + 64);
  *(void *)&v21[v36] = result;
  id v125 = v21;
  v21[v37] = v34 & 1;
  if ((v34 & 1) == 0)
  {
    sub_100CA2734(v108, v119, v122, v35, v121, v123, 1);
    return sub_100522F00((uint64_t)v125, &qword_101699738);
  }
  uint64_t v38 = (uint64_t)&v12[*(int *)(sub_1005057FC(&qword_101674240) + 48)];
  uint64_t v39 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v12, v108, v39);
  sub_100CE144C(v35, v38, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload();
  sub_100C5C97C((uint64_t)v12);
  sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLAssetReferrerIdentifier);
  uint64_t v120 = 0;
  unint64_t v105 = v123 >> 60;
  uint64_t v40 = 0x645F636E79732C20;
  if (v123 >> 60 == 15) {
    uint64_t v40 = 0;
  }
  uint64_t v119 = v40;
  unint64_t v41 = 0xEF3F203D20617461;
  if (v123 >> 60 == 15) {
    unint64_t v41 = 0xE000000000000000;
  }
  uint64_t v107 = (void *)v41;
  uint64_t v43 = v124;
  uint64_t v42 = (uint64_t)v125;
  uint64_t v44 = *(int *)(v124 + 48);
  uint64_t v45 = *(int *)(v124 + 64);
  uint64_t v46 = v118;
  sub_100522E9C((uint64_t)v125, v118, (uint64_t *)&unk_101674520);
  uint64_t v104 = v36;
  uint64_t v47 = *(void *)(v42 + v36);
  *(void *)(v46 + v44) = v47;
  LOBYTE(v44) = *(unsigned char *)(v42 + v37);
  *(unsigned char *)(v46 + v45) = v44;
  uint64_t v48 = *(int *)(v43 + 48);
  uint64_t v49 = *(int *)(v43 + 64);
  uint64_t v50 = v42;
  uint64_t v51 = v117;
  sub_100522E9C(v50, v117, (uint64_t *)&unk_101674520);
  *(void *)(v51 + v48) = v47;
  *(unsigned char *)(v51 + v49) = v44;
  uint64_t v106 = v35;
  if (v47)
  {
    sub_100522F00(v51, &qword_101699738);
    sub_100522F00(v46, (uint64_t *)&unk_101674520);
    if (v47 != 16)
    {
      uint64_t v52 = 0;
      uint64_t v53 = (void *)0xE000000000000000;
      goto LABEL_16;
    }
  }
  else
  {
    sub_100522F00(v51, &qword_101699738);
    sub_100522F00(v46, (uint64_t *)&unk_101674520);
  }
  uint64_t v126 = 0;
  unint64_t v127 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v52 = 0xD000000000000029;
  uint64_t v53 = (void *)0x8000000101281C20;
LABEL_16:
  uint64_t v126 = 0;
  unint64_t v127 = 0xE000000000000000;
  _StringGuts.grow(_:)(67);
  v54._uint64_t countAndFlagsBits = 0x20455441445055;
  v54._object = (void *)0xE700000000000000;
  String.append(_:)(v54);
  v55._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v55._object = (void *)0xEB00000000736D65;
  String.append(_:)(v55);
  v56._uint64_t countAndFlagsBits = 0x2054455320;
  v56._object = (void *)0xE500000000000000;
  String.append(_:)(v56);
  v57._uint64_t countAndFlagsBits = 0x755F746E65726170;
  v57._object = (void *)0xEB00000000646975;
  String.append(_:)(v57);
  v58._uint64_t countAndFlagsBits = 0x202C3F203D20;
  v58._object = (void *)0xE600000000000000;
  String.append(_:)(v58);
  v59._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v59._object = (void *)0xEA00000000006465;
  String.append(_:)(v59);
  v60._uint64_t countAndFlagsBits = 0x202C31203D20;
  v60._object = (void *)0xE600000000000000;
  String.append(_:)(v60);
  v61._uint64_t countAndFlagsBits = v52;
  v61._object = v53;
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v62._uint64_t countAndFlagsBits = 32;
  v62._object = (void *)0xE100000000000000;
  String.append(_:)(v62);
  v63._object = (void *)0x800000010127B8B0;
  v63._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v63);
  v64._uint64_t countAndFlagsBits = 1059077408;
  v64._object = (void *)0xE400000000000000;
  String.append(_:)(v64);
  v65._uint64_t countAndFlagsBits = v119;
  v65._object = v107;
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  v66._uint64_t countAndFlagsBits = 0x2820455245485720;
  v66._object = (void *)0xE800000000000000;
  String.append(_:)(v66);
  v67._object = (void *)0xE900000000000064;
  v67._uint64_t countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v67);
  v68._uint64_t countAndFlagsBits = 0x444E41203F203D20;
  v68._object = (void *)0xE900000000000020;
  String.append(_:)(v68);
  v69._object = (void *)0x8000000101262BA0;
  v69._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v69);
  v70._uint64_t countAndFlagsBits = 0x293F203D20;
  v70._object = (void *)0xE500000000000000;
  String.append(_:)(v70);
  uint64_t v71 = v126;
  uint64_t v72 = v127;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v73 = swift_retain();
  uint64_t v74 = v120;
  uint64_t v75 = sub_10079FC40(v73, v71, v72);
  swift_release();
  if (!v74)
  {
    sub_10079E0E8(v122, 1);
    sub_10079D8A8(*(void *)&v125[v104] & 0xFFFFFFFFFFFFFFEFLL, 2);
    if (v105 <= 0xE)
    {
      uint64_t v77 = v121;
      unint64_t v78 = v123;
      sub_100510D4C(v121, v123);
      sub_10079DCE4(v77, v78, 3);
      sub_100514260(v77, v78);
      uint64_t v76 = 4;
    }
    else
    {
      uint64_t v76 = 3;
    }
    uint64_t v79 = UUID.crl_data()();
    unint64_t v81 = v80;
    sub_10079DCE4(v79, v80, v76);
    sub_100510084(v79, v81);
    uint64_t v82 = sub_100753FC0();
    uint64_t v84 = v82;
    unint64_t v85 = v83;
    sub_10079DCE4(v82, v83, v76 + 1);
    uint64_t v86 = *(void **)(*(void *)(v75 + 16) + 32);
    unint64_t v88 = v115;
    uint64_t v87 = v116;
    *uint64_t v115 = v86;
    v113(v88, v112, v87);
    id v89 = v86;
    LOBYTE(v86) = _dispatchPreconditionTest(_:)();
    v111(v88, v87);
    if (v86)
    {
      BOOL v90 = (sqlite3_stmt **)(v75 + 24);
      swift_beginAccess();
      int v91 = sqlite3_step(*(sqlite3_stmt **)(v75 + 24));
      if (v91 != 101)
      {
        int v97 = v91;
        sub_10079FF00();
        swift_allocError();
        *(_DWORD *)uint64_t v98 = v97;
        *(void *)(v98 + 8) = 0xD000000000000024;
        *(void *)(v98 + 16) = 0x800000010127D7D0;
        swift_willThrow();
        sub_100510084(v84, v85);
        uint64_t v99 = *(void **)(*(void *)(v75 + 16) + 32);
        uint64_t v101 = v115;
        uint64_t v100 = v116;
        *uint64_t v115 = v99;
        v113(v101, v112, v100);
        id v102 = v99;
        LOBYTE(v99) = _dispatchPreconditionTest(_:)();
        v111(v101, v100);
        if (v99)
        {
          uint64_t v96 = *v90;
          if (!*v90) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
LABEL_34:
        __break(1u);
      }
      sub_100510084(v84, v85);
      uint64_t v92 = *(void **)(*(void *)(v75 + 16) + 32);
      uint64_t v94 = v115;
      uint64_t v93 = v116;
      *uint64_t v115 = v92;
      v113(v94, v112, v93);
      id v95 = v92;
      LOBYTE(v92) = _dispatchPreconditionTest(_:)();
      v111(v94, v93);
      if (v92)
      {
        uint64_t v96 = *v90;
        if (!*v90)
        {
LABEL_27:
          swift_release();
          return sub_100522F00((uint64_t)v125, &qword_101699738);
        }
LABEL_26:
        sqlite3_finalize(v96);
        *BOOL v90 = 0;
        goto LABEL_27;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  return sub_100522F00((uint64_t)v125, &qword_101699738);
}

uint64_t sub_100CA385C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v74 = a3;
  uint64_t v75 = a4;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (uint64_t *)((char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v16 = v17;
  uint64_t v18 = *(void (**)(void, __n128))(v12 + 104);
  unsigned int v77 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v78 = (void (*)(void *, void, sqlite3_stmt **))v18;
  uint64_t v76 = v12 + 104;
  v18(v16, v14);
  id v19 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t v20 = *(void (**)(void *, sqlite3_stmt **))(v12 + 8);
  uint64_t v73 = (sqlite3_stmt **)v11;
  uint64_t v21 = v11;
  uint64_t v79 = v20;
  uint64_t v22 = v12 + 8;
  v20(v16, (sqlite3_stmt **)v21);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = sub_100C51248(a1);
  if (v6) {
    return result;
  }
  uint64_t v71 = a1;
  uint64_t v72 = v7;
  if (!result) {
    return sub_100CA2A7C(v71, a2, v74, v75, a5);
  }
  uint64_t v74 = result;
  unint64_t v24 = a5;
  unint64_t v25 = a5 >> 60;
  if (v25 <= 0xE) {
    uint64_t v26 = 0x7461645F636E7973;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v25 <= 0xE) {
    double v27 = (void *)0xEE002C3F203D2061;
  }
  else {
    double v27 = (void *)0xE000000000000000;
  }
  uint64_t v80 = 0;
  unint64_t v81 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v28._uint64_t countAndFlagsBits = 0x20455441445055;
  v28._object = (void *)0xE700000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 0x736472616F62;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = 0x2054455320;
  v30._object = (void *)0xE500000000000000;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v31._object = (void *)0xEA00000000006465;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = 0x202C31203D20;
  v32._object = (void *)0xE600000000000000;
  String.append(_:)(v32);
  v33._object = (void *)0x800000010127B8B0;
  v33._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 0x202C3F203D20;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = v26;
  v35._object = v27;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 10;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v37._object = (void *)0xEE00657461645F65;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = 0x4548570A3F203D20;
  v38._object = (void *)0xEB00000000204552;
  String.append(_:)(v38);
  v39._object = (void *)0x8000000101262BA0;
  v39._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = 1059077408;
  v40._object = (void *)0xE400000000000000;
  String.append(_:)(v40);
  uint64_t v41 = v80;
  uint64_t v42 = v81;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v43 = swift_retain();
  uint64_t v44 = sub_10079FC40(v43, v41, v42);
  swift_release();
  sub_10079D8A8(*(void *)(v74 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges) & 0xFFFFFFFFFFFFFFFBLL, 1);
  if (v25 <= 0xE)
  {
    uint64_t v46 = v75;
    sub_100510D4C(v75, v24);
    sub_10079DCE4(v46, v24, 2);
    sub_100514260(v46, v24);
    uint64_t v45 = 3;
  }
  else
  {
    uint64_t v45 = 2;
  }
  uint64_t v47 = v73;
  double v48 = *(double *)(v74 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_tombstoneDate);
  uint64_t v49 = *(void **)(*(void *)(v44 + 16) + 32);
  *uint64_t v16 = v49;
  v78(v16, v77, v47);
  id v50 = v49;
  LOBYTE(v49) = _dispatchPreconditionTest(_:)();
  uint64_t v75 = v22;
  v79(v16, v47);
  if ((v49 & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v73 = (sqlite3_stmt **)(v44 + 24);
  swift_beginAccess();
  sqlite3_bind_double(*(sqlite3_stmt **)(v44 + 24), v45, v48);
  uint64_t v51 = v44;
  uint64_t v52 = sub_100753FC0();
  unint64_t v54 = v53;
  sub_10079DCE4(v52, v53, v45 + 1);
  sub_100510084(v52, v54);
  Swift::String v55 = *(void **)(*(void *)(v51 + 16) + 32);
  *uint64_t v16 = v55;
  v78(v16, v77, v47);
  id v56 = v55;
  LOBYTE(v55) = _dispatchPreconditionTest(_:)();
  v79(v16, v47);
  if ((v55 & 1) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  Swift::String v57 = v73;
  int v58 = sqlite3_step(*v73);
  if (v58 != 101)
  {
    int v66 = v58;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v67 = v66;
    *(void *)(v67 + 8) = 0xD000000000000024;
    *(void *)(v67 + 16) = 0x800000010127D7D0;
    swift_willThrow();
    Swift::String v68 = *(void **)(*(void *)(v51 + 16) + 32);
    *uint64_t v16 = v68;
    v78(v16, v77, v47);
    id v69 = v68;
    LOBYTE(v68) = _dispatchPreconditionTest(_:)();
    v79(v16, v47);
    if (v68)
    {
      if (*v57)
      {
        sqlite3_finalize(*v57);
        *(void *)(v51 + 24) = 0;
      }
      goto LABEL_24;
    }
LABEL_30:
    __break(1u);
  }
  sub_1005057FC(&qword_10167ADD0);
  uint64_t v59 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  unint64_t v60 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_10117E810;
  sub_100CE144C(v71, v61 + v60, type metadata accessor for CRLBoardIdentifier);
  Swift::String v62 = sub_1005087BC(v61);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_100C43B54((uint64_t)v62, (uint64_t)&_swiftEmptySetSingleton, 0);
  swift_bridgeObjectRelease();
  Swift::String v63 = *(void **)(*(void *)(v51 + 16) + 32);
  *uint64_t v16 = v63;
  v78(v16, v77, v47);
  id v64 = v63;
  LOBYTE(v63) = _dispatchPreconditionTest(_:)();
  v79(v16, v47);
  if ((v63 & 1) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  Swift::String v65 = v73;
  if (*v73)
  {
    sqlite3_finalize(*v73);
    *Swift::String v65 = 0;
  }
LABEL_24:
  swift_release();
  return swift_release();
}

void sub_100CA4078(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v8 = v6;
  int v45 = a6;
  unint64_t v49 = a4;
  uint64_t v47 = a3;
  uint64_t v46 = a2;
  uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11 - 8, v12);
  __n128 v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (void *)((char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)(v8 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t, __n128))(v16 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v15, v18);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  unint64_t v24 = *(void (**)(void *, uint64_t))(v16 + 8);
  char v23 = v16 + 8;
  v24(v20, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_12;
  }
  uint64_t v25 = *a5;
  if (*(void *)(*a5 + 16) && (unint64_t v26 = sub_1009563EC(a1), (v27 & 1) != 0))
  {
    if ((*(unsigned char *)(*(void *)(v25 + 56) + v26) & 1) == 0) {
      return;
    }
  }
  else
  {
    char v28 = sub_100C54B24(a1, 1);
    if (v7) {
      return;
    }
    char v29 = v28;
    sub_100CE144C(a1, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v48 = *a5;
    *a5 = 0x8000000000000000;
    sub_100978BA8(v29 & 1, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    *a5 = v48;
    swift_bridgeObjectRelease();
    sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    if ((v29 & 1) == 0) {
      return;
    }
  }
  char v23 = v45;
  if (v45) {
    int v31 = 2;
  }
  else {
    int v31 = 1;
  }
  int v44 = v31;
  if (qword_10166FB88 != -1) {
    goto LABEL_19;
  }
LABEL_12:
  swift_beginAccess();
  Swift::String v32 = (void *)static OS_os_log.dataSync;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117DF40;
  unint64_t v34 = sub_100528BE4();
  unint64_t v35 = v34;
  uint64_t v36 = 0x676E696772654DLL;
  if (v23) {
    uint64_t v36 = 0x746972777265764FLL;
  }
  unint64_t v37 = 0xE700000000000000;
  if (v23) {
    unint64_t v37 = 0xEB00000000676E69;
  }
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = v34;
  *(void *)(inited + 32) = v36;
  *(void *)(inited + 40) = v37;
  uint64_t v38 = v46;
  uint64_t v39 = *(void *)(v46 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 104) = &protocol witness table for Int;
  *(void *)(inited + 72) = v39;
  id v40 = v32;
  uint64_t v41 = UUID.uuidString.getter();
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = v35;
  *(void *)(inited + 112) = v41;
  *(void *)(inited + 120) = v42;
  uint64_t v43 = static os_log_type_t.info.getter();
  sub_100BAC898((uint64_t)v40, (uint64_t)&_mh_execute_header, v43, (uint64_t)"%{public}@ freehand bucket with index %{public}d, boardID: %{public}@", 69, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  sub_100C80288(v38, a1, v44, v47, v49);
}

uint64_t sub_100CA449C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = v6;
  unint64_t v30 = a4;
  uint64_t v31 = a5;
  unint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11 - 8, v12);
  __n128 v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (unint64_t *)((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)(v8 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t, __n128))(v16 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v15, v18);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v20, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v24 = *a6;
  if (*(void *)(*a6 + 16))
  {
    uint64_t result = sub_1009563EC(a1);
    if (v25)
    {
      if ((*(unsigned char *)(*(void *)(v24 + 56) + result) & 1) == 0) {
        return result;
      }
      return sub_100C7EFF8(v28, a1, 1, v29, v30, v31);
    }
  }
  uint64_t result = sub_100C54B24(a1, 1);
  if (!v7)
  {
    char v26 = result;
    sub_100CE144C(a1, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *a6;
    *a6 = 0x8000000000000000;
    sub_100978BA8(v26 & 1, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    *a6 = v32;
    swift_bridgeObjectRelease();
    uint64_t result = sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    if (v26) {
      return sub_100C7EFF8(v28, a1, 1, v29, v30, v31);
    }
  }
  return result;
}

char *sub_100CA4704(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7, uint64_t a8, unint64_t a9, uint64_t *a10, unsigned __int8 a11)
{
  uint64_t v142 = a8;
  int v143 = a7;
  unint64_t v154 = a6;
  uint64_t v140 = a5;
  uint64_t v150 = a4;
  uint64_t v145 = a3;
  uint64_t v135 = a2;
  uint64_t v147 = a1;
  uint64_t v136 = sub_1005057FC((uint64_t *)&unk_10168A0C0);
  __chkstk_darwin(v136, v13);
  uint64_t v138 = (uint64_t)v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v133 = (char *)v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v149 = (uint64_t)v130 - v20;
  __chkstk_darwin(v21, v22);
  uint64_t v139 = (char *)v130 - v23;
  __chkstk_darwin(v24, v25);
  uint64_t v134 = (uint64_t)v130 - v26;
  __chkstk_darwin(v27, v28);
  unint64_t v137 = (char *)v130 - v29;
  __chkstk_darwin(v30, v31);
  uint64_t v141 = (uint64_t)v130 - v32;
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)v130 - v35;
  uint64_t v148 = type metadata accessor for UUID();
  unint64_t v151 = *(void *)(v148 - 8);
  __chkstk_darwin(v148, v37);
  unint64_t v132 = (char *)v130 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39, v40);
  long long v144 = (char *)v130 - v41;
  __chkstk_darwin(v42, v43);
  uint64_t v146 = (char *)v130 - v44;
  uint64_t v45 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v45 - 8, v46);
  uint64_t v48 = (char *)v130 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for DispatchPredicate();
  uint64_t v50 = *(void *)(v49 - 8);
  __n128 v52 = __chkstk_darwin(v49, v51);
  unint64_t v54 = (char *)v130 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = v11;
  Swift::String v55 = *(void **)(v11 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *(void *)unint64_t v54 = v55;
  (*(void (**)(char *, void, uint64_t, __n128))(v50 + 104))(v54, enum case for DispatchPredicate.onQueue(_:), v49, v52);
  id v56 = v55;
  LOBYTE(v55) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v49);
  if ((v55 & 1) == 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v57 = *a10;
  uint64_t v58 = v154;
  if (*(void *)(*a10 + 16))
  {
    unint64_t v59 = sub_1009563EC(v154);
    if (v60)
    {
      uint64_t v61 = v12;
      if (*(unsigned char *)(*(void *)(v57 + 56) + v59)) {
        goto LABEL_5;
      }
      return 0;
    }
  }
  char v69 = sub_100C54B24(v58, 1);
  uint64_t v61 = v12;
  if (!v12)
  {
    char v70 = v69;
    sub_100CE144C(v58, (uint64_t)v48, type metadata accessor for CRLBoardIdentifier);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v153 = *a10;
    *a10 = 0x8000000000000000;
    sub_100978BA8(v70 & 1, (uint64_t)v48, isUniquelyReferenced_nonNull_native);
    *a10 = v153;
    swift_bridgeObjectRelease();
    sub_100CE14B4((uint64_t)v48, type metadata accessor for CRLBoardIdentifier);
    if (v70)
    {
LABEL_5:
      sub_100522E9C(v150, (uint64_t)v36, (uint64_t *)&unk_101674520);
      unint64_t v62 = v151;
      Swift::String v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v151 + 48);
      uint64_t v64 = v148;
      int v65 = v63(v36, 1, v148);
      int v66 = v146;
      if (v65 == 1)
      {
        sub_100522F00((uint64_t)v36, (uint64_t *)&unk_101674520);
        uint64_t v67 = v149;
        Swift::String v68 = v145;
        goto LABEL_28;
      }
      uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
      v130[1] = v62 + 32;
      uint64_t v131 = v61;
      v130[0] = v72;
      v72(v146, v36, v64);
      uint64_t v73 = v140;
      unint64_t v74 = v62;
      int v75 = v63((char *)v140, 1, v64);
      uint64_t v76 = v66;
      unsigned int v77 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
      v77(v144, v76, v64);
      uint64_t v78 = v73;
      uint64_t v79 = v141;
      sub_100522E9C(v78, v141, (uint64_t *)&unk_101674520);
      if (v75 == 1)
      {
        sub_100522F00(v79, (uint64_t *)&unk_101674520);
        uint64_t v80 = *(void (**)(char *, uint64_t))(v151 + 8);
        v80(v144, v64);
        uint64_t v67 = v149;
        Swift::String v68 = v145;
        unint64_t v54 = v146;
        uint64_t v81 = (uint64_t)v139;
        uint64_t v61 = v131;
LABEL_19:
        char v88 = sub_100C551B8((uint64_t)v54, v58);
        if (v61)
        {
          v80(v54, v148);
          return v54;
        }
        if ((v88 & 1) == 0)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56))(v81, 1, 1, v148);
          sub_100CA2734((uint64_t)v54, 2, v81, v58, 0, 0xF000000000000000, 0);
          sub_100522F00(v81, (uint64_t *)&unk_101674520);
        }
        v80(v54, v148);
LABEL_28:
        unint64_t v151 = a9;
        sub_100522E9C(v150, v67, (uint64_t *)&unk_101674520);
        if (!v68)
        {
          unint64_t v54 = 0;
          if ((v143 & 1) == 0) {
            goto LABEL_52;
          }
          goto LABEL_46;
        }
        uint64_t v131 = v61;
        LODWORD(v150) = a11;
        uint64_t v91 = qword_10166FB88;
        swift_retain();
        if (v91 == -1)
        {
LABEL_30:
          swift_beginAccess();
          uint64_t v92 = (void *)static OS_os_log.dataSync;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_10117E810;
          id v94 = v92;
          uint64_t v95 = UUID.uuidString.getter();
          uint64_t v97 = v96;
          *(void *)(inited + 56) = &type metadata for String;
          unint64_t v98 = sub_100528BE4();
          *(void *)(inited + 64) = v98;
          *(void *)(inited + 32) = v95;
          *(void *)(inited + 40) = v97;
          uint64_t v99 = static os_log_type_t.info.getter();
          sub_100BAC898((uint64_t)v94, (uint64_t)&_mh_execute_header, v99, (uint64_t)"Merging board item data with id %{public}@", 42, 2, inited);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          uint64_t v100 = (void *)static OS_os_log.dataSync;
          uint64_t v101 = swift_initStackObject();
          id v102 = (void *)v101;
          *(_OWORD *)(v101 + 16) = xmmword_10117DF40;
          BOOL v103 = (v150 & 1) == 0;
          uint64_t v104 = 0x676E696772654DLL;
          if (v150) {
            uint64_t v104 = 0x746972777265764FLL;
          }
          unint64_t v105 = 0xE700000000000000;
          if (v150) {
            unint64_t v105 = 0xEB00000000676E69;
          }
          *(void *)(v101 + 56) = &type metadata for String;
          *(void *)(v101 + 64) = v98;
          *(void *)(v101 + 32) = v104;
          *(void *)(v101 + 40) = v105;
          if (v103) {
            int v106 = 1;
          }
          else {
            int v106 = 2;
          }
          LODWORD(v150) = v106;
          id v107 = v100;
          uint64_t v108 = UUID.uuidString.getter();
          v102[12] = &type metadata for String;
          v102[13] = v98;
          v102[9] = v108;
          v102[10] = v109;
          unint64_t v54 = (char *)v154;
          uint64_t v110 = UUID.uuidString.getter();
          v102[17] = &type metadata for String;
          v102[18] = v98;
          v102[14] = v110;
          v102[15] = v111;
          uint64_t v112 = static os_log_type_t.info.getter();
          sub_100BAC898((uint64_t)v107, (uint64_t)&_mh_execute_header, v112, (uint64_t)"%{public}@ board item with id: %{public}@, boardID: %{public}@", 62, 2, (uint64_t)v102);
          swift_setDeallocating();
          swift_arrayDestroy();
          char v113 = v143;

          uint64_t v114 = v131;
          uint64_t v115 = sub_100C56118(v145, (uint64_t)v54, v150, v142, v151, (v113 & 1) == 0, v113 & 1);
          uint64_t v61 = v114;
          if (v114)
          {
            swift_release();
            uint64_t v117 = v149;
LABEL_50:
            sub_100522F00(v117, (uint64_t *)&unk_101674520);
            return v54;
          }
          unint64_t v54 = (char *)v115;
          char v118 = v116;
          if (v115)
          {
            uint64_t v119 = *(void (**)(uint64_t))(*(void *)v115 + 264);
            uint64_t v120 = swift_retain();
            uint64_t v121 = (uint64_t)v133;
            v119(v120);
            swift_release();
            swift_release();
            uint64_t v67 = v149;
            sub_100522F00(v149, (uint64_t *)&unk_101674520);
            sub_10051B3EC(v121, v67, (uint64_t *)&unk_101674520);
            if ((v143 & 1) == 0) {
              goto LABEL_52;
            }
          }
          else
          {
            swift_release();
            uint64_t v67 = v149;
            if ((v143 & 1) == 0) {
              goto LABEL_52;
            }
          }
          if ((v118 & 0x10) != 0) {
            goto LABEL_52;
          }
LABEL_46:
          if (qword_10166FB88 != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v122 = (void *)static OS_os_log.dataSync;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t v123 = swift_initStackObject();
          *(_OWORD *)(v123 + 16) = xmmword_10117E810;
          id v124 = v122;
          uint64_t v125 = UUID.uuidString.getter();
          uint64_t v127 = v126;
          *(void *)(v123 + 56) = &type metadata for String;
          *(void *)(v123 + 64) = sub_100528BE4();
          *(void *)(v123 + 32) = v125;
          *(void *)(v123 + 40) = v127;
          uint64_t v128 = static os_log_type_t.default.getter();
          sub_100BAC898((uint64_t)v124, (uint64_t)&_mh_execute_header, v128, (uint64_t)"Merging a tombstoned BoardItem record with id %{public}@", 56, 2, v123);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          uint64_t v67 = v149;
          sub_100CA2DBC(v147, v135, v149, v154, v142, v151);
          if (v61)
          {
            swift_release();
            uint64_t v117 = v67;
            goto LABEL_50;
          }
LABEL_52:
          sub_100522F00(v67, (uint64_t *)&unk_101674520);
          return v54;
        }
LABEL_54:
        swift_once();
        goto LABEL_30;
      }
      uint64_t v82 = (uint64_t)v137;
      v77(v137, v144, v64);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v151 + 56))(v82, 0, 1, v64);
      uint64_t v83 = v138;
      uint64_t v84 = v138 + *(int *)(v136 + 48);
      sub_100522E9C(v82, v138, (uint64_t *)&unk_101674520);
      uint64_t v140 = v84;
      sub_100522E9C(v79, v84, (uint64_t *)&unk_101674520);
      if (v63((char *)v83, 1, v64) == 1)
      {
        sub_100522F00(v82, (uint64_t *)&unk_101674520);
        sub_100522F00(v79, (uint64_t *)&unk_101674520);
        uint64_t v80 = *(void (**)(char *, uint64_t))(v151 + 8);
        v80(v144, v64);
        if (v63((char *)v140, 1, v64) == 1)
        {
          sub_100522F00(v138, (uint64_t *)&unk_101674520);
          uint64_t v67 = v149;
          Swift::String v68 = v145;
          uint64_t v61 = v131;
          goto LABEL_25;
        }
        uint64_t v67 = v149;
        Swift::String v68 = v145;
        unint64_t v54 = v146;
        uint64_t v81 = (uint64_t)v139;
        uint64_t v61 = v131;
      }
      else
      {
        uint64_t v85 = v134;
        sub_100522E9C(v83, v134, (uint64_t *)&unk_101674520);
        int v86 = v63((char *)v140, 1, v64);
        uint64_t v61 = v131;
        if (v86 != 1)
        {
          id v89 = v132;
          ((void (*)(char *, uint64_t, uint64_t))v130[0])(v132, v140, v64);
          sub_100CDE0D8((unint64_t *)&qword_10167BDC0, (void (*)(uint64_t))&type metadata accessor for UUID);
          LODWORD(v140) = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v90 = v85;
          uint64_t v80 = *(void (**)(char *, uint64_t))(v151 + 8);
          v80(v89, v64);
          sub_100522F00((uint64_t)v137, (uint64_t *)&unk_101674520);
          sub_100522F00(v141, (uint64_t *)&unk_101674520);
          v80(v144, v64);
          v80((char *)v90, v64);
          sub_100522F00(v83, (uint64_t *)&unk_101674520);
          Swift::String v68 = v145;
          uint64_t v81 = (uint64_t)v139;
          if ((v140 & 1) == 0)
          {
            uint64_t v67 = v149;
            unint64_t v54 = v146;
            goto LABEL_19;
          }
          uint64_t v67 = v149;
LABEL_25:
          v80(v146, v148);
          goto LABEL_28;
        }
        sub_100522F00((uint64_t)v137, (uint64_t *)&unk_101674520);
        sub_100522F00(v141, (uint64_t *)&unk_101674520);
        uint64_t v87 = v85;
        uint64_t v80 = *(void (**)(char *, uint64_t))(v151 + 8);
        v80(v144, v64);
        v80((char *)v87, v64);
        uint64_t v67 = v149;
        Swift::String v68 = v145;
        unint64_t v54 = v146;
        uint64_t v81 = (uint64_t)v139;
      }
      sub_100522F00(v138, (uint64_t *)&unk_10168A0C0);
      goto LABEL_19;
    }
    return 0;
  }
  return v54;
}

void *sub_100CA5570(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)&long long v70 = a2;
  LODWORD(v68) = a3;
  uint64_t v5 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v66 - v11;
  unint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char **)((char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(char **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v18 = v19;
  (*(void (**)(char **, void, unint64_t, __n128))(v14 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v13, v16);
  uint64_t v20 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  uint64_t v23 = *(void (**)(char **, unint64_t))(v14 + 8);
  Class v22 = (Class)(v14 + 8);
  v23(v18, v13);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v24 = v3;
  uint64_t v71 = sub_100CE155C(a1);
  uint64_t v25 = a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id;
  uint64_t v67 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_itemTypeValue);
  uint64_t v26 = a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID;
  swift_beginAccess();
  sub_100522E9C(v26, (uint64_t)v12, (uint64_t *)&unk_101674520);
  uint64_t v27 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v8, 1, 1, v27);
  uint64_t v28 = (uint64_t)v8;
  uint64_t v29 = (uint64_t)v12;
  uint64_t v30 = (void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier);
  int v31 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_tombstoned);
  uint64_t v32 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData);
  unint64_t v33 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData + 8);
  sub_1005FA2A0(v32, v33);
  int v65 = (uint64_t *)v70;
  *(void *)&long long v70 = v29;
  uint64_t v34 = v69;
  char v69 = sub_100CA4704(v25, v67, v71, v29, v28, (unint64_t)v30, v31, v32, v33, v65, v68 & 1);
  sub_100514260(v32, v33);
  if (!v34)
  {
    uint64_t v67 = (uint64_t)v30;
    uint64_t v66 = v24;
    Swift::String v68 = 0;
    sub_100522F00(v28, (uint64_t *)&unk_101674520);
    sub_100522F00(v70, (uint64_t *)&unk_101674520);
    uint64_t v35 = v69;
    if (v69 && (v31 & 1) == 0)
    {
      uint64_t v36 = *(uint64_t (**)(uint64_t))(*(void *)v69 + 568);
      uint64_t v37 = swift_retain();
      uint64_t v38 = v36(v37);
      uint64_t v39 = v68;
      uint64_t v40 = sub_100C2F40C(v38);
      swift_bridgeObjectRelease();
      uint64_t v41 = sub_100CDCB64((uint64_t)v40);
      uint64_t v42 = swift_bridgeObjectRelease();
      uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 576))(v42);
      uint64_t v44 = sub_100C2F40C(v43);
      uint64_t v30 = v39;
      swift_bridgeObjectRelease();
      uint64_t v45 = sub_100CDCB64((uint64_t)v44);
      swift_bridgeObjectRelease();
      sub_100ED8C0C(v45, v41);
      uint64_t v46 = swift_beginAccess();
      __chkstk_darwin(v46, v47);
      uint64_t v48 = swift_bridgeObjectRetain();
      sub_100CDF10C(v48, (void (*)(char *, uint64_t))sub_100CE9004);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      if (v39)
      {
        swift_release();
        swift_release();
        return v30;
      }
      Swift::String v68 = 0;
    }
    Class v22 = sub_100D3EC2C(v67);
    uint64_t v19 = *(char **)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardItemSyncRemoteRecord_minRequiredVersionForSync);
    unint64_t v49 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_minRequiredVersions + 16);
    unint64_t v50 = sub_1002094A4();
    uint64_t v8 = (char *)v50;
    if (v50 >= (unint64_t)v19 && v50 >= v49)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
      {
        if (_CocoaArrayWrapper.endIndex.getter())
        {
          sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);
          uint64_t v30 = v63;
        }
        else
        {
          uint64_t v30 = &_swiftEmptySetSingleton;
        }
      }
      else
      {
        uint64_t v30 = &_swiftEmptySetSingleton;
      }
      goto LABEL_29;
    }
    sub_1005057FC((uint64_t *)&unk_101676C10);
    uint64_t inited = swift_initStackObject();
    long long v70 = xmmword_101177E70;
    *(_OWORD *)(inited + 16) = xmmword_101177E70;
    *(void *)(inited + 32) = v22;
    unint64_t v72 = inited;
    specialized Array._endMutation()();
    unint64_t v13 = v72;
    if (!(v72 >> 62))
    {
      uint64_t v52 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v53 = v22;
      if (v52)
      {
LABEL_14:
        sub_100508C0C(v13);
        uint64_t v30 = v54;
        goto LABEL_20;
      }
LABEL_19:
      uint64_t v30 = &_swiftEmptySetSingleton;
LABEL_20:
      swift_bridgeObjectRelease();
      if (v8 < v19)
      {
        uint64_t v57 = swift_initStackObject();
        *(_OWORD *)(v57 + 16) = v70;
        *(void *)(v57 + 32) = v22;
        unint64_t v72 = v57;
        specialized Array._endMutation()();
        unint64_t v58 = v72;
        if (v72 >> 62)
        {
          uint64_t v61 = v22;
          swift_bridgeObjectRetain();
          uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v62) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v59 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
          char v60 = v22;
          if (v59)
          {
LABEL_23:
            sub_100508C0C(v58);
            swift_bridgeObjectRelease();
LABEL_30:

            swift_release();
            swift_release();
            return v30;
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
LABEL_29:
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter())
      {
        sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);
      }
      goto LABEL_30;
    }
LABEL_18:
    Swift::String v55 = v22;
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v56) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  swift_release();
  sub_100522F00(v28, (uint64_t *)&unk_101674520);
  sub_100522F00(v70, (uint64_t *)&unk_101674520);
  return v30;
}

uint64_t sub_100CA5CEC(uint64_t a1)
{
  uint64_t v63 = a1;
  uint64_t v2 = v1;
  uint64_t v3 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  __chkstk_darwin(v7, v8);
  unint64_t v58 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v59 = (uint64_t)&v58 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __n128 v21 = __chkstk_darwin(v18, v20);
  uint64_t v23 = (char **)((char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  void *v23 = v24;
  (*(void (**)(void *, void, uint64_t, __n128))(v19 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v18, v21);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v19 + 8))(v23, v18);
  if (v24)
  {
    uint64_t v26 = v63 + OBJC_IVAR____TtC8Freeform24CRLAssetSyncRemoteRecord_metadata;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v63 + OBJC_IVAR____TtC8Freeform24CRLAssetSyncRemoteRecord_metadata, v13);
    uint64_t v27 = (uint64_t *)(v26 + *(int *)(type metadata accessor for CRLAssetSyncMetadata() + 20));
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    uint64_t v30 = (uint64_t)v62;
    sub_100C8ECC0((uint64_t)v17, *v27, v29);
    if (v30)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    }
    else
    {
      uint64_t v62 = v17;
      sub_100522E9C(v63 + OBJC_IVAR____TtC8Freeform24CRLAssetSyncRemoteRecord_downloadedFileURL, (uint64_t)v6, &qword_101672E90);
      uint64_t v33 = v60;
      uint64_t v32 = v61;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v6, 1, v61) == 1)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v62, v13);
        return sub_100522F00((uint64_t)v6, &qword_101672E90);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v59, v6, v32);
        uint64_t v34 = *(void *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v34 + 16));
        uint64_t v35 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
        uint64_t v36 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
        if (v36)
        {
          id v37 = *(id *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
        }
        else
        {
          id v38 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
          uint64_t v39 = v2;
          uint64_t v63 = v34;
          uint64_t v40 = v39;
          id v41 = sub_100EAFDE4((uint64_t)v39);

          uint64_t v42 = *(void **)&v2[v35];
          *(void *)&v2[v35] = v41;
          id v37 = v41;

          uint64_t v34 = v63;
          uint64_t v36 = 0;
        }
        uint64_t v43 = *(os_unfair_lock_s **)(v34 + 16);
        id v44 = v36;
        os_unfair_lock_unlock(v43);
        uint64_t v45 = v58;
        uint64_t v46 = (uint64_t)v62;
        uint64_t v47 = (void (*)(char *, uint64_t, uint64_t))v29;
        uint64_t v48 = v59;
        sub_100EAEA3C((uint64_t)v62, v28, v47, v59, 1, v58);

        uint64_t v56 = v61;
        uint64_t v57 = *(void (**)(char *, uint64_t))(v60 + 8);
        v57(v45, v61);
        v57((char *)v48, v56);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v46, v13);
      }
    }
  }
  else
  {
    __break(1u);
    swift_once();
    swift_beginAccess();
    unint64_t v49 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    swift_getErrorValue();
    id v51 = v49;
    uint64_t v52 = Error.localizedDescription.getter();
    uint64_t v54 = v53;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = sub_100528BE4();
    *(void *)(inited + 32) = v52;
    *(void *)(inited + 40) = v54;
    uint64_t v55 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v51, (uint64_t)&_mh_execute_header, v55, (uint64_t)"Failed to create an asset from data with error: %@", 50, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
    return (*(uint64_t (**)(char *, char *))(v14 + 8))(v62, v6);
  }
}

void sub_100CA62F4(uint64_t a1, void *a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t, __n128))(v7 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v6, v9);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
  if (v12)
  {
    uint64_t v14 = sub_100C51248(a1);
    if (!v3)
    {
      uint64_t v15 = v14;
      swift_release();
      if (v15)
      {
        sub_100CA6560(a2, a1);
      }
      else
      {
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10117E810;
        uint64_t v17 = UUID.uuidString.getter();
        uint64_t v19 = v18;
        *(void *)(inited + 56) = &type metadata for String;
        *(void *)(inited + 64) = sub_100528BE4();
        *(void *)(inited + 32) = v17;
        *(void *)(inited + 40) = v19;
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_sync_mergeServerSyncedBoardShare(boardIdentifier:ckShare:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9077, (uint64_t)"Trying to apply merge of a CKShare from server when we don't have a corresponding local board database row. {public}%@", 118, 2u, inited);
        sub_1005598CC(inited, (uint64_t)"_sync_mergeServerSyncedBoardShare(boardIdentifier:ckShare:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9077);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        swift_arrayDestroy();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100CA6560(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v13 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7, v10);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v12, v7);
  if (v13)
  {
    if (qword_10166FB70 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  uint64_t v15 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  uint64_t v28 = a1;
  id v17 = v15;
  sub_1005057FC(&qword_101699928);
  uint64_t v18 = Optional.debugDescription.getter();
  uint64_t v20 = v19;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  *(void *)(inited + 32) = v18;
  *(void *)(inited + 40) = v20;
  uint64_t v21 = static os_log_type_t.debug.getter();
  sub_100BAC898((uint64_t)v17, (uint64_t)&_mh_execute_header, v21, (uint64_t)"sync overwrite local CKShare with remote CKShare %@", 51, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  uint64_t v22 = sub_100C7B664();
  if (v3) {
    return;
  }
  uint64_t v23 = (void *)v22;
  sub_100C7C61C(a2, a1, 0);
  if (a1)
  {
    if (v23)
    {
      sub_10050BF48(0, &qword_101672C00);
      id v24 = v23;
      id v25 = a1;
      char v26 = static NSObject.== infix(_:_:)();

      if (v26) {
        goto LABEL_10;
      }
    }
  }
  else if (!v23)
  {
    return;
  }
  sub_100C445A0(a2, (uint64_t)&unk_1015298E8, (uint64_t)sub_100CE8FE0, (uint64_t)&unk_101529900);
  id v24 = v23;
LABEL_10:
}

uint64_t sub_100CA6878(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6, uint64_t a7, unint64_t a8, char a9)
{
  uint64_t v61 = a7;
  unint64_t v62 = a8;
  int v60 = a6;
  int v63 = a5;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v65 = a1;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (uint64_t *)((char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v17 = *(void **)(v9 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t, __n128))(v12 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v11, v14);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)();
  uint64_t v21 = *(void (**)(void *, uint64_t))(v12 + 8);
  char v20 = v12 + 8;
  v21(v16, v11);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_7;
  }
  if (!a4)
  {
    int v40 = 0;
    uint64_t v36 = 0;
    uint64_t v39 = v64;
    char v34 = v63;
    goto LABEL_16;
  }
  char v20 = a9;
  if (a9) {
    int v22 = 2;
  }
  else {
    int v22 = 1;
  }
  HIDWORD(v57) = v22;
  uint64_t v23 = qword_10166FB88;
  swift_retain();
  if (v23 != -1) {
    goto LABEL_27;
  }
LABEL_7:
  swift_beginAccess();
  id v24 = (void *)static OS_os_log.dataSync;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
  unint64_t v26 = sub_100528BE4();
  unint64_t v27 = v26;
  uint64_t v28 = 0x676E696772654DLL;
  if (v20) {
    uint64_t v28 = 0x746972777265764FLL;
  }
  unint64_t v29 = 0xE700000000000000;
  if (v20) {
    unint64_t v29 = 0xEB00000000676E69;
  }
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = v26;
  *(void *)(inited + 32) = v28;
  *(void *)(inited + 40) = v29;
  id v30 = v24;
  uint64_t v31 = UUID.uuidString.getter();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = v27;
  *(void *)(inited + 72) = v31;
  *(void *)(inited + 80) = v32;
  uint64_t v33 = static os_log_type_t.info.getter();
  sub_100BAC898((uint64_t)v30, (uint64_t)&_mh_execute_header, v33, (uint64_t)"%{public}@ board data with id %{public}@", 40, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  char v34 = v63;
  uint64_t v35 = v64;
  uint64_t v36 = sub_100C621C4(a4, SHIDWORD(v57), v61, v62, (v63 & 1) == 0, 1);
  int v38 = v37;
  uint64_t v39 = v35;
  swift_release();
  if (!v35)
  {
    if (v36) {
      int v40 = v38;
    }
    else {
      int v40 = 0;
    }
LABEL_16:
    LODWORD(v64) = v40;
    if (v34)
    {
      if (qword_10166FB88 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v41 = (void *)static OS_os_log.dataSync;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v42 = swift_initStackObject();
      *(_OWORD *)(v42 + 16) = xmmword_10117E810;
      id v43 = v41;
      uint64_t v44 = UUID.uuidString.getter();
      uint64_t v46 = v45;
      *(void *)(v42 + 56) = &type metadata for String;
      *(void *)(v42 + 64) = sub_100528BE4();
      *(void *)(v42 + 32) = v44;
      *(void *)(v42 + 40) = v46;
      uint64_t v47 = v65;
      uint64_t v48 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v43, (uint64_t)&_mh_execute_header, v48, (uint64_t)"Merging a tombstoned Board record with id %{public}@", 52, 2, v42);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      sub_100CA385C(v47, v58, v59, v61, v62);
      if (v39) {
        goto LABEL_24;
      }
    }
    if (v60)
    {
      if (qword_10166FB88 != -1) {
        swift_once();
      }
      swift_beginAccess();
      unint64_t v49 = (void *)static OS_os_log.dataSync;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v50 = swift_initStackObject();
      *(_OWORD *)(v50 + 16) = xmmword_10117E810;
      id v51 = v49;
      uint64_t v52 = UUID.uuidString.getter();
      uint64_t v54 = v53;
      *(void *)(v50 + 56) = &type metadata for String;
      *(void *)(v50 + 64) = sub_100528BE4();
      *(void *)(v50 + 32) = v52;
      *(void *)(v50 + 40) = v54;
      uint64_t v55 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v51, (uint64_t)&_mh_execute_header, v55, (uint64_t)"Purging board with id %{public}@ after syncing hideFromRecentlyDeleted state", 76, 2, v50);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      sub_100C6F5CC(v65, 0xD000000000000025, 0x8000000101281CA0, 0);
      if (v39) {
LABEL_24:
      }
        swift_release();
    }
  }
  return v36;
}

uint64_t sub_100CA6E04(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  unint64_t v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v15 = __chkstk_darwin(v12, v14);
  id v17 = (uint64_t *)((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v18 = *(void **)(v6 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *id v17 = v18;
  (*(void (**)(void *, void, uint64_t, __n128))(v13 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v12, v15);
  id v19 = v18;
  char v20 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v17, v12);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  if (!a1) {
    return result;
  }
  sub_100CE144C(a1 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_boardIdentifier, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  uint64_t v22 = qword_10166FB88;
  swift_retain();
  if (v22 != -1) {
    goto LABEL_9;
  }
LABEL_4:
  swift_beginAccess();
  uint64_t v23 = (void *)static OS_os_log.dataSync;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  id v25 = v23;
  uint64_t v26 = UUID.uuidString.getter();
  uint64_t v28 = v27;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = sub_100528BE4();
  *(void *)(inited + 32) = v26;
  *(void *)(inited + 40) = v28;
  uint64_t v29 = static os_log_type_t.info.getter();
  sub_100BAC898((uint64_t)v25, (uint64_t)&_mh_execute_header, v29, (uint64_t)"Merging board metadata data with id %{public}@", 46, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  sub_100C67498(a1, 1, v31, v32, 1);
  if (v5)
  {
    sub_100CE14B4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    return swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    return sub_100CE14B4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  }
}

unsigned char *sub_100CA713C(unsigned char *a1, uint64_t *a2, char a3)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (void *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t, __n128))(v9 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v8, v11);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v13, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v16 = (uint64_t)&a1[OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier];
  uint64_t v17 = *(void *)&a1[OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_syncData];
  unint64_t v18 = *(void *)&a1[OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_syncData + 8];
  sub_1005FA2A0(v17, v18);
  sub_100CA4078(v16, (uint64_t)a1, v17, v18, a2, a3 & 1);
  sub_100514260(v17, v18);
  if (!v4)
  {
    a2 = (uint64_t *)sub_100D3EC2C(v16);
    if ((a1[OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersionForSync + 8] & 1) != 0
      || (a1[OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions + 40] & 1) != 0
      || ((unint64_t v19 = *(void *)&a1[OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersionForSync],
           unint64_t v20 = *(void *)&a1[OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions
                              + 32],
           unint64_t v21 = sub_1002094A4(),
           v21 >= v19)
        ? (BOOL v22 = v21 >= v20)
        : (BOOL v22 = 0),
          v22))
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter())
      {
        sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);
        a1 = v30;
      }
      else
      {
        a1 = &_swiftEmptySetSingleton;
      }
LABEL_14:
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      {
LABEL_15:

        return a1;
      }
LABEL_18:
      if (_CocoaArrayWrapper.endIndex.getter()) {
        sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);
      }
      goto LABEL_15;
    }
    unint64_t v23 = v21;
    sub_1005057FC((uint64_t *)&unk_101676C10);
    uint64_t inited = swift_initStackObject();
    long long v39 = xmmword_101177E70;
    *(_OWORD *)(inited + 16) = xmmword_101177E70;
    *(void *)(inited + 32) = a2;
    unint64_t v40 = inited;
    specialized Array._endMutation()();
    unint64_t v25 = v40;
    if (v40 >> 62)
    {
      uint64_t v31 = a2;
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v32) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v26 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v27 = a2;
      if (v26)
      {
LABEL_11:
        sub_100508C0C(v25);
        a1 = v28;
        goto LABEL_24;
      }
    }
    a1 = &_swiftEmptySetSingleton;
LABEL_24:
    swift_bridgeObjectRelease();
    if (v23 < v19)
    {
      uint64_t v33 = swift_initStackObject();
      *(_OWORD *)(v33 + 16) = v39;
      *(void *)(v33 + 32) = a2;
      unint64_t v40 = v33;
      specialized Array._endMutation()();
      unint64_t v34 = v40;
      if (v40 >> 62)
      {
        int v37 = a2;
        swift_bridgeObjectRetain();
        uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v38) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v35 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v36 = a2;
        if (v35)
        {
LABEL_27:
          sub_100508C0C(v34);
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  return a1;
}

char *sub_100CA74F0(char *a1, int a2)
{
  LODWORD(v85) = a2;
  uint64_t v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v83 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1005057FC(&qword_101699628);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRLBoardCRDTData(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v82 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v84 = (uint64_t)&v79 - v17;
  unint64_t v18 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(v18 - 1);
  __n128 v21 = __chkstk_darwin(v18, v20);
  unint64_t v23 = (uint64_t *)((char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v86 = v2;
  id v24 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  void *v23 = v24;
  (*(void (**)(void *, void, void *, __n128))(v19 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v18, v21);
  id v25 = v24;
  unint64_t v26 = _dispatchPreconditionTest(_:)();
  uint64_t v28 = *(void (**)(void *, void *))(v19 + 8);
  unint64_t v27 = v19 + 8;
  v28(v23, v18);
  if ((v26 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v29 = (uint64_t *)&a1[OBJC_IVAR____TtC8Freeform24CRLBoardSyncRemoteRecord_boardCRDTData];
  unint64_t v30 = *(void *)&a1[OBJC_IVAR____TtC8Freeform24CRLBoardSyncRemoteRecord_boardCRDTData + 8];
  if (v30 >> 60 == 15)
  {
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v32 = *v29;
    sub_1005FA2A0(*v29, *(void *)&a1[OBJC_IVAR____TtC8Freeform24CRLBoardSyncRemoteRecord_boardCRDTData + 8]);
    sub_1005FA2A0(v32, v30);
    sub_100CDE0D8((unint64_t *)&unk_10169A0D0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
    swift_retain();
    uint64_t v33 = v87;
    CRDT.init(serializedData:)();
    if (v33)
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
      swift_release();
      sub_100514260(v32, v30);
      sub_100522F00((uint64_t)v10, &qword_101699628);
      uint64_t v31 = 0;
      uint64_t v87 = 0;
    }
    else
    {
      uint64_t v87 = 0;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
      uint64_t v34 = (uint64_t)v10;
      uint64_t v35 = v84;
      sub_100CE12D8(v34, v84, type metadata accessor for CRLBoardCRDTData);
      long long v81 = *(_OWORD *)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_minRequiredVersions];
      uint64_t v80 = *(void *)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_minRequiredVersions + 16];
      uint64_t v36 = v82;
      sub_100CE144C(v35, v82, type metadata accessor for CRLBoardCRDTData);
      uint64_t v37 = v83;
      sub_100CE144C((uint64_t)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier], v83, type metadata accessor for CRLBoardIdentifier);
      uint64_t v38 = (uint64_t *)(v37 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
      uint64_t v39 = *v38;
      uint64_t v40 = v38[1];
      swift_bridgeObjectRetain();
      sub_100CE14B4(v37, type metadata accessor for CRLBoardIdentifier);
      type metadata accessor for CRLBoardData(0);
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = 7;
      *(_OWORD *)(v31 + 24) = v81;
      *(void *)(v31 + 40) = v80;
      sub_100CE12D8(v36, v31 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
      swift_release();
      sub_100514260(v32, v30);
      id v41 = (void *)(v31 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      *id v41 = v39;
      v41[1] = v40;
      sub_100CE14B4(v35, type metadata accessor for CRLBoardCRDTData);
    }
  }
  uint64_t v42 = (uint64_t)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier];
  uint64_t v43 = (uint64_t)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_rootContainerUUID];
  int v44 = a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_tombstoned];
  uint64_t v45 = (uint64_t)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_alternateRootContainerUUID];
  int v46 = a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_hideFromRecentlyDeleted];
  uint64_t v48 = *(void *)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_syncData];
  unint64_t v47 = *(void *)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_syncData + 8];
  sub_1005FA2A0(v48, v47);
  char v78 = v85 & 1;
  uint64_t v85 = v42;
  uint64_t v49 = v87;
  uint64_t v50 = sub_100CA6878(v42, v43, v45, (void *)v31, v44, v46, v48, v47, v78);
  sub_100514260(v48, v47);
  uint64_t v51 = v31;
  if (!v49)
  {
    uint64_t v52 = a1;
    uint64_t v53 = v85;
    if (v50) {
      char v54 = v46;
    }
    else {
      char v54 = 1;
    }
    uint64_t v84 = v51;
    uint64_t v87 = v50;
    if (v54)
    {
      uint64_t v55 = v85;
    }
    else
    {
      swift_retain();
      unint64_t v56 = sub_100A394EC((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v57 = sub_100C2F40C(v56);
      swift_bridgeObjectRelease();
      sub_100CDCB64((uint64_t)v57);
      swift_bridgeObjectRelease();
      uint64_t v58 = swift_beginAccess();
      __chkstk_darwin(v58, v59);
      uint64_t v60 = swift_bridgeObjectRetain();
      sub_100CDF10C(v60, (void (*)(char *, uint64_t))sub_100CE9004);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v55 = v53;
    }
    Class v61 = sub_100D3EC2C(v55);
    unint64_t v27 = *(void *)&v52[OBJC_IVAR____TtC8Freeform24CRLBoardSyncRemoteRecord_minRequiredVersionForSync];
    unint64_t v62 = *(void *)&v52[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_minRequiredVersions + 16];
    unint64_t v63 = sub_1002094A4();
    unint64_t v26 = v63;
    if (v63 >= v27 && v63 >= v62)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter())
      {
        sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);
        a1 = v77;
      }
      else
      {
        a1 = (char *)&_swiftEmptySetSingleton;
      }
      unint64_t v18 = v61;
      goto LABEL_30;
    }
    sub_1005057FC((uint64_t *)&unk_101676C10);
    uint64_t inited = swift_initStackObject();
    long long v86 = xmmword_101177E70;
    *(_OWORD *)(inited + 16) = xmmword_101177E70;
    unint64_t v18 = v61;
    *(void *)(inited + 32) = v61;
    unint64_t v88 = inited;
    specialized Array._endMutation()();
    unint64_t v2 = v88;
    if (!(v88 >> 62))
    {
      uint64_t v65 = *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v66 = v18;
      if (v65)
      {
LABEL_19:
        sub_100508C0C(v2);
        a1 = v67;
        goto LABEL_26;
      }
LABEL_25:
      a1 = (char *)&_swiftEmptySetSingleton;
LABEL_26:
      swift_bridgeObjectRelease();
      if (v26 < v27)
      {
        uint64_t v70 = swift_initStackObject();
        *(_OWORD *)(v70 + 16) = v86;
        *(void *)(v70 + 32) = v18;
        unint64_t v88 = v70;
        specialized Array._endMutation()();
        unint64_t v71 = v88;
        if (v88 >> 62)
        {
          unint64_t v74 = v18;
          swift_bridgeObjectRetain();
          uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v75) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v72 = *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v73 = v18;
          if (v72)
          {
LABEL_29:
            sub_100508C0C(v71);
            swift_bridgeObjectRelease();
LABEL_36:

            swift_release();
            swift_release();
            return a1;
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
LABEL_30:
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter())
      {
        sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);
      }
      goto LABEL_36;
    }
LABEL_24:
    Swift::String v68 = v18;
    swift_bridgeObjectRetain();
    uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v69) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
  swift_release();
  return a1;
}

char *sub_100CA7E44(char *a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (void *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v4, v7);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v9, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v12 = swift_retain();
  uint64_t v13 = sub_100CE2A7C(v12);
  if (v13)
  {
    sub_100CA6E04(v13, *(void *)&a1[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_syncData], *(void *)&a1[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_syncData + 8]);
    if (v2)
    {
      swift_release();
      return a1;
    }
    sub_10050BF48(0, (unint64_t *)&qword_101674210);
    v21._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21._object = v22;
    v23._uint64_t countAndFlagsBits = 0x74654D6472616F42;
    v23._object = (void *)0xED00006174616461;
    v24.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v23, v21).super.isa;
    Class v25 = sub_100D3EC2C((uint64_t)&a1[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier]);
    unint64_t v26 = *(void *)&a1[OBJC_IVAR____TtC8Freeform36CRLUserBoardMetadataSyncRemoteRecord_minRequiredVersionForSync];
    unint64_t v27 = *(void *)&a1[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_minRequiredVersionForFullFidelity];
    unint64_t v28 = sub_1002094A4();
    if (v28 >= v26 && v28 >= v27)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter())
      {
        sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);
        a1 = v44;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        a1 = (char *)&_swiftEmptySetSingleton;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
          goto LABEL_32;
        }
      }
      goto LABEL_36;
    }
    unint64_t v30 = v28;
    sub_1005057FC((uint64_t *)&unk_101676C10);
    uint64_t inited = swift_initStackObject();
    long long v47 = xmmword_101177E70;
    *(_OWORD *)(inited + 16) = xmmword_101177E70;
    *(CKRecordZoneID *)(inited + 32) = v24;
    unint64_t v48 = inited;
    specialized Array._endMutation()();
    unint64_t v32 = v48;
    if (v48 >> 62)
    {
      uint64_t v37 = v24.super.isa;
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v38) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v33 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v34 = v24.super.isa;
      if (v33)
      {
LABEL_14:
        sub_100508C0C(v32);
        a1 = v35;
        goto LABEL_27;
      }
    }
    a1 = (char *)&_swiftEmptySetSingleton;
LABEL_27:
    swift_bridgeObjectRelease();
    if (v30 < v26)
    {
      uint64_t v39 = swift_initStackObject();
      *(_OWORD *)(v39 + 16) = v47;
      *(void *)(v39 + 32) = v25;
      unint64_t v48 = v39;
      specialized Array._endMutation()();
      unint64_t v40 = v48;
      if (v48 >> 62)
      {
        uint64_t v45 = v25;
        swift_bridgeObjectRetain();
        uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v46) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v41 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v42 = v25;
        if (v41)
        {
LABEL_30:
          sub_100508C0C(v40);
          swift_bridgeObjectRelease();

          swift_release();
          return a1;
        }
      }
      swift_bridgeObjectRelease();

      swift_release();
      return a1;
    }
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
    {
LABEL_32:

      swift_release();
      return a1;
    }
LABEL_36:
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);

      swift_release();
      return a1;
    }
    goto LABEL_32;
  }
  if (qword_10166FB70 != -1) {
    goto LABEL_19;
  }
LABEL_6:
  swift_beginAccess();
  uint64_t v14 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_10117E810;
  id v16 = v14;
  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_100528BE4();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  uint64_t v20 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v16, (uint64_t)&_mh_execute_header, v20, (uint64_t)"Unable to create CRLUserBoardMetadataData from CRLUserBoardMetadataSyncRemoteRecord remoteRecord: %{public}@.", 109, 2, v15);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
    return (char *)&_swiftEmptySetSingleton;
  }
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);
    a1 = v36;
  }
  else
  {
    a1 = (char *)&_swiftEmptySetSingleton;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
      return a1;
    }
  }
  if (_CocoaArrayWrapper.endIndex.getter()) {
    sub_100508C0C((unint64_t)_swiftEmptyArrayStorage);
  }
  return a1;
}

uint64_t sub_100CA8424(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1;
  swift_retain();
  sub_1005470C8(v5, (uint64_t)v5, a2, a3);

  return swift_release();
}

uint64_t sub_100CA8490(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v52 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v48 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (void *)((char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t, __n128))(v14 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v13, v16);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v18, v13);
  if (v19)
  {
    uint64_t v59 = _swiftEmptyDictionarySingleton;
    uint64_t v57 = &_swiftEmptySetSingleton;
    uint64_t v58 = &_swiftEmptySetSingleton;
    unint64_t v56 = &_swiftEmptySetSingleton;
    char v55 = 0;
    char v54 = &_swiftEmptySetSingleton;
    uint64_t v22 = v2;
    Swift::String v23 = v51;
    sub_1006D584C(a1, (uint64_t)v22, a2 == 1, (uint64_t *)&v59, (uint64_t)&v58, (uint64_t)&v57, (uint64_t)&v56, &v55);
    if (!v23)
    {

      unint64_t v24 = (unint64_t)v58;
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_1002094A4();
      sub_100C8A5E0(v24, v25);
      swift_bridgeObjectRelease();
      unint64_t v26 = v57;
      unint64_t v27 = swift_bridgeObjectRetain();
      sub_100C8D630(v27);
      swift_bridgeObjectRelease();
      v48[1] = v26;
      v48[2] = v22;
      v48[3] = v24;
      v48[4] = 0;
      uint64_t v28 = v54[7];
      uint64_t v49 = (char *)(v54 + 7);
      uint64_t v29 = 1 << *((unsigned char *)v54 + 32);
      uint64_t v30 = -1;
      if (v29 < 64) {
        uint64_t v30 = ~(-1 << v29);
      }
      unint64_t v31 = v30 & v28;
      unint64_t v32 = (uint64_t *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
      int64_t v50 = (unint64_t)(v29 + 63) >> 6;
      uint64_t v51 = v54;
      uint64_t result = swift_bridgeObjectRetain();
      int64_t v33 = 0;
      while (1)
      {
        if (v31)
        {
          unint64_t v34 = __clz(__rbit64(v31));
          v31 &= v31 - 1;
          unint64_t v35 = v34 | (v33 << 6);
        }
        else
        {
          int64_t v36 = v33 + 1;
          if (__OFADD__(v33, 1)) {
            goto LABEL_38;
          }
          if (v36 >= v50)
          {
LABEL_30:
            uint64_t v45 = (uint64_t)v51;
            swift_release();
            if (*(void *)(v45 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v46 = sub_100A3C910((uint64_t)_swiftEmptyArrayStorage);
              sub_100C44024(v45, 0, 0, v46);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            uint64_t v47 = (uint64_t)v56;
            if ((v55 & 1) != 0 || v56[2])
            {
              swift_bridgeObjectRetain();
              sub_100C43B54((uint64_t)&_swiftEmptySetSingleton, v47, 0);
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_5;
          }
          unint64_t v37 = *(void *)&v49[8 * v36];
          ++v33;
          if (!v37)
          {
            int64_t v33 = v36 + 1;
            if (v36 + 1 >= v50) {
              goto LABEL_30;
            }
            unint64_t v37 = *(void *)&v49[8 * v33];
            if (!v37)
            {
              int64_t v33 = v36 + 2;
              if (v36 + 2 >= v50) {
                goto LABEL_30;
              }
              unint64_t v37 = *(void *)&v49[8 * v33];
              if (!v37)
              {
                int64_t v38 = v36 + 3;
                if (v38 >= v50) {
                  goto LABEL_30;
                }
                unint64_t v37 = *(void *)&v49[8 * v38];
                if (!v37)
                {
                  while (1)
                  {
                    int64_t v33 = v38 + 1;
                    if (__OFADD__(v38, 1)) {
                      goto LABEL_39;
                    }
                    if (v33 >= v50) {
                      goto LABEL_30;
                    }
                    unint64_t v37 = *(void *)&v49[8 * v33];
                    ++v38;
                    if (v37) {
                      goto LABEL_26;
                    }
                  }
                }
                int64_t v33 = v38;
              }
            }
          }
LABEL_26:
          unint64_t v31 = (v37 - 1) & v37;
          unint64_t v35 = __clz(__rbit64(v37)) + (v33 << 6);
        }
        uint64_t v39 = *(void *)(v52 + 72);
        sub_100CE144C(v51[6] + v39 * v35, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
        sub_100CE12D8((uint64_t)v12, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v40 = sub_1009563EC((uint64_t)v8);
        char v42 = v41;
        swift_bridgeObjectRelease();
        if (v42)
        {
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v44 = *v32;
          uint64_t v53 = *v32;
          *unint64_t v32 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_100984CEC();
            uint64_t v44 = v53;
          }
          sub_100CE14B4(*(void *)(v44 + 48) + v40 * v39, type metadata accessor for CRLBoardIdentifier);
          sub_100589A9C(v40, v44);
          *unint64_t v32 = v44;
          swift_release();
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        uint64_t result = sub_100CE14B4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  return result;
}

void sub_100CA8AA4(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  uint64_t v9 = v8;
  if (*(void *)(a1 + 32))
  {
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = swift_unknownObjectRetain();
    char v17 = sub_100CA8EC8(v16, v15, a3 & 1, 0, a4, a5, a6, a7, a8);
    if (v9 || (v17 & 1) != 0)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      type metadata accessor for CRLUnknownSyncRemoteRecord();
      uint64_t v20 = swift_dynamicCastClass();
      if (v20)
      {
        Swift::String v21 = *(void **)(v20 + 16);
        swift_unknownObjectRetain();
        id v22 = v21;
        id v39 = [v22 zoneID];
        if (qword_10166FB88 != -1) {
          swift_once();
        }
        swift_beginAccess();
        Swift::String v23 = (void *)static OS_os_log.dataSync;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
        id v38 = v23;
        id v25 = [v22 recordName];
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;

        *(void *)(inited + 56) = &type metadata for String;
        unint64_t v29 = sub_100528BE4();
        *(void *)(inited + 64) = v29;
        *(void *)(inited + 32) = v26;
        *(void *)(inited + 40) = v28;
        id v30 = [v39 zoneName];
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v32;

        *(void *)(inited + 96) = &type metadata for String;
        *(void *)(inited + 104) = v29;
        *(void *)(inited + 72) = v31;
        *(void *)(inited + 80) = v33;
        uint64_t v34 = static os_log_type_t.default.getter();
        sub_100BAC898((uint64_t)v38, (uint64_t)&_mh_execute_header, v34, (uint64_t)"Adding unknown remote record to zonesNeedingRefetch, recordID: %@, zoneID: %@", 77, 2, inited);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        swift_arrayDestroy();

        id v35 = v39;
        sub_100CBAB1C(&v41, v35, (unint64_t *)&qword_101674210, (uint64_t)CKRecordZoneID_ptr, (uint64_t *)&unk_101671280);

        swift_unknownObjectRelease_n();
      }
      else
      {
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_sync_mergeRemoteSyncRecords(_:context:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9271, (uint64_t)"Unknown record type", 19, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unknown record type");
        sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_sync_mergeRemoteSyncRecords(_:context:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9271);
        SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v36, v37);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
  }
  else
  {
    if (qword_10166FB70 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v18 = (id)static OS_os_log.boardStore;
    uint64_t v19 = static os_log_type_t.info.getter();
    sub_100BAC898((uint64_t)v18, (uint64_t)&_mh_execute_header, v19, (uint64_t)"Skipping a change with no data", 30, 2, (uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100CA8EC8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  uint64_t v82 = a6;
  uint64_t v83 = a7;
  uint64_t v84 = a5;
  int v81 = a4;
  int v86 = a3;
  uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v87 = (uint64_t)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v85 = (uint64_t)&v76 - v16;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __n128 v20 = __chkstk_darwin(v17, v19);
  id v22 = (uint64_t *)((char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v89 = v9;
  Swift::String v23 = *(void **)(v9 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *id v22 = v23;
  uint64_t v24 = enum case for DispatchPredicate.onQueue(_:);
  id v25 = *(void (**)(void *, uint64_t, uint64_t))(v18 + 104);
  ((void (*)(void *, void, uint64_t, __n128))v25)(v22, enum case for DispatchPredicate.onQueue(_:), v17, v20);
  id v77 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  char v78 = *(void (**)(void *, uint64_t))(v18 + 8);
  v78(v22, v17);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v79 = a9;
  uint64_t v80 = a8;
  type metadata accessor for CRLBoardItemSyncRemoteRecord(0);
  uint64_t v26 = swift_dynamicCastClass();
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = v26 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier;
    uint64_t v29 = v87;
    sub_100CE144C(v26 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier, v87, type metadata accessor for CRLBoardIdentifier);
    swift_unknownObjectRetain();
    uint64_t v30 = v85;
    sub_100CB7090(v85, v29);
    sub_100CE14B4(v30, type metadata accessor for CRLBoardIdentifier);
    uint64_t v31 = v88;
    sub_100CA5570(v27, (uint64_t)v84, v86 & 1);
    if (!v31)
    {
      char v33 = v32;
      unint64_t v34 = swift_bridgeObjectRetain();
      sub_10057D248(v34);
      unint64_t v35 = swift_bridgeObjectRetain();
      sub_10057D248(v35);
      if (v33)
      {
        if (v33 == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *uint64_t v79 = 1;
          if ((v81 & 1) == 0) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v53 = v28;
          uint64_t v54 = v87;
          sub_100CE144C(v53, v87, type metadata accessor for CRLBoardIdentifier);
          sub_100CB7090(v30, v54);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100CE14B4(v30, type metadata accessor for CRLBoardIdentifier);
          if ((v81 & 1) == 0)
          {
LABEL_27:
            swift_unknownObjectRelease();
LABEL_28:
            char v43 = 1;
            return v43 & 1;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v81 & 1) == 0) {
          goto LABEL_27;
        }
      }
      sub_1005E3BEC(v27);
      goto LABEL_27;
    }
LABEL_10:
    swift_unknownObjectRelease();
    return v43 & 1;
  }
  type metadata accessor for CRLBoardSyncRemoteRecord(0);
  uint64_t v36 = swift_dynamicCastClass();
  if (!v36)
  {
    type metadata accessor for CRLBoardShareSyncRemoteRecord(0);
    uint64_t v44 = swift_dynamicCastClass();
    if (!v44)
    {
      type metadata accessor for CRLFreehandDrawingBucketSyncRemoteRecord(0);
      uint64_t v55 = swift_dynamicCastClass();
      if (v55)
      {
        unint64_t v56 = (unsigned char *)v55;
        swift_unknownObjectRetain();
        uint64_t v57 = v56;
        uint64_t v58 = v88;
        uint64_t v59 = sub_100CA713C(v57, v84, v86 & 1);
        if (!v58)
        {
          unint64_t v61 = v60;
          sub_10057D248((unint64_t)v59);
          sub_10057D248(v61);
          goto LABEL_27;
        }
        goto LABEL_10;
      }
      type metadata accessor for CRLUserBoardMetadataSyncRemoteRecord(0);
      uint64_t v65 = swift_dynamicCastClass();
      uint64_t v66 = v88;
      if (!v65)
      {
        char v43 = 0;
        return v43 & 1;
      }
      if ((v86 & 1) == 0)
      {
        uint64_t v70 = (char *)v65;
        swift_unknownObjectRetain();
        sub_100CA7E44(v70);
        uint64_t v40 = v85;
        if (v66) {
          goto LABEL_10;
        }
        char v72 = v71;
        unint64_t v73 = swift_bridgeObjectRetain();
        sub_10057D248(v73);
        unint64_t v74 = swift_bridgeObjectRetain();
        sub_10057D248(v74);
        if (v72)
        {
          if (v72 != 1)
          {
            uint64_t v75 = v87;
            sub_100CE144C((uint64_t)&v70[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier], v87, type metadata accessor for CRLBoardIdentifier);
            sub_100CB7090(v40, v75);
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_31;
          }
          sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_sync_applySyncRemoteRecord(record:shouldOverwrite:isResultOfSave:cachedBoardIdentifiers:zonesToRefetch:unsupportedZonesToRefetch:unsupportedBoardIdentifiers:needsHierarchyChangeNotification:modifiedBoardIdentifiers:)", 217, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9363, (uint64_t)"Merging a CRLUserBoardMetadataSyncRemoteRecord shouldn't result in us becoming supported again.", 95, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_sync_applySyncRemoteRecord(record:shouldOverwrite:isResultOfSave:cachedBoardIdentifiers:zonesToRefetch:unsupportedZonesToRefetch:unsupportedBoardIdentifiers:needsHierarchyChangeNotification:modifiedBoardIdentifiers:)", 217, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9363);
        }
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      uint64_t v67 = qword_10166FB88;
      swift_unknownObjectRetain();
      if (v67 == -1)
      {
LABEL_35:
        swift_beginAccess();
        id v68 = (id)static OS_os_log.dataSync;
        uint64_t v69 = static os_log_type_t.error.getter();
        sub_100BAC898((uint64_t)v68, (uint64_t)&_mh_execute_header, v69, (uint64_t)"Unexpected call to overwrite a boardMetadataRecord.", 51, 2, (uint64_t)_swiftEmptyArrayStorage);
        swift_unknownObjectRelease();

        goto LABEL_28;
      }
LABEL_45:
      swift_once();
      goto LABEL_35;
    }
    uint64_t v45 = v44;
    unint64_t v46 = v77;
    *id v22 = v77;
    v25(v22, v24, v17);
    id v47 = v46;
    swift_unknownObjectRetain();
    char v48 = _dispatchPreconditionTest(_:)();
    v78(v22, v17);
    if (v48)
    {
      uint64_t v49 = v88;
      sub_100CA6560(*(void **)(v45 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_ckShare), v45 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier);
      swift_unknownObjectRelease();
      if (v49) {
        return v43 & 1;
      }
      goto LABEL_28;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  Swift::String v37 = (char *)v36;
  uint64_t v38 = v36 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
  uint64_t v39 = v87;
  sub_100CE144C(v36 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier, v87, type metadata accessor for CRLBoardIdentifier);
  swift_unknownObjectRetain();
  uint64_t v40 = v85;
  sub_100CB7090(v85, v39);
  sub_100CE14B4(v40, type metadata accessor for CRLBoardIdentifier);
  uint64_t v41 = v88;
  sub_100CA74F0(v37, v86 & 1);
  if (v41) {
    goto LABEL_10;
  }
  char v50 = v42;
  unint64_t v51 = swift_bridgeObjectRetain();
  sub_10057D248(v51);
  unint64_t v52 = swift_bridgeObjectRetain();
  sub_10057D248(v52);
  if (!v50) {
    goto LABEL_26;
  }
  if (v50 != 1)
  {
    uint64_t v63 = v38;
    uint64_t v64 = v87;
    sub_100CE144C(v63, v87, type metadata accessor for CRLBoardIdentifier);
    sub_100CB7090(v40, v64);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
LABEL_31:
    swift_bridgeObjectRelease();
    sub_100CE14B4(v40, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  char v43 = 1;
  *uint64_t v79 = 1;
  return v43 & 1;
}

uint64_t sub_100CA971C(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_recordIDsToOverwrite);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if ((v2 & 0xC000000000000001) == 0)
  {
    if (!*(void *)(v2 + 16)) {
      return sub_1005E38C4();
    }
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = __CocoaSet.count.getter();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_3:
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"sync_willApplySyncSaveResults(syncScope:)", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9376, (uint64_t)"Expected recordIDsToOverwrite to be empty before saving new changes.", 68, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"sync_willApplySyncSaveResults(syncScope:)", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9376);
  }
  return sub_1005E38C4();
}

uint64_t sub_100CA9858(uint64_t a1, char a2)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_recordIDsToOverwrite;
  swift_beginAccess();
  if ((*(void *)v4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (!v5) {
      goto LABEL_10;
    }
  }
  else if (!*(void *)(*(void *)v4 + 16))
  {
    goto LABEL_10;
  }
  if (*(void *)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_syncHelper))
  {
    swift_retain();
    uint64_t v6 = swift_bridgeObjectRetain();
    sub_100F514E8(v6, 1, a2 & 1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_10166FB88 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v7 = (id)static OS_os_log.dataSync;
    uint64_t v8 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v7, (uint64_t)&_mh_execute_header, v8, (uint64_t)"Refetching readOnly changes was cancelled because there is no syncHelper set on the dataStore", 93, 2, (uint64_t)_swiftEmptyArrayStorage);
  }
LABEL_10:
  *(void *)uint64_t v4 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  return sub_1005E4030();
}

uint64_t sub_100CA99F4(void *a1, uint64_t a2, char a3)
{
  char v4 = a3 & 1;
  uint64_t v5 = a1;
  swift_retain();
  sub_1005473DC(v5, (uint64_t)v5, a2, v4);

  return swift_release();
}

uint64_t sub_100CA9A60(uint64_t a1, int a2)
{
  LODWORD(v97) = a2;
  uint64_t v98 = a1;
  uint64_t v4 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v100 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v90 = (uint64_t)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v88 = (uint64_t)&v87 - v9;
  __chkstk_darwin(v10, v11);
  uint64_t v99 = (uint64_t)&v87 - v12;
  __chkstk_darwin(v13, v14);
  unint64_t v94 = (unint64_t)&v87 - v15;
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v87 - v18;
  __chkstk_darwin(v20, v21);
  uint64_t v95 = (uint64_t)&v87 - v22;
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  __n128 v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (uint64_t *)((char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *uint64_t v28 = v29;
  (*(void (**)(void *, void, uint64_t, __n128))(v24 + 104))(v28, enum case for DispatchPredicate.onQueue(_:), v23, v26);
  id v30 = v29;
  char v31 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v24 + 8))(v28, v23);
  if ((v31 & 1) == 0) {
    goto LABEL_87;
  }
  char v33 = v97 & 1;
  uint64_t v109 = _swiftEmptyDictionarySingleton;
  id v107 = (char *)&_swiftEmptySetSingleton;
  uint64_t v108 = &_swiftEmptySetSingleton;
  unint64_t v105 = &_swiftEmptySetSingleton;
  int v106 = &_swiftEmptySetSingleton;
  uint64_t v104 = &_swiftEmptySetSingleton;
  char v103 = 0;
  id v102 = &_swiftEmptySetSingleton;
  unint64_t v34 = v2;
  sub_1006D5B10(v98, v34, (uint64_t)&v109, (uint64_t)&v106, (void (*)(char *, uint64_t))&v105, (uint64_t)&v104, (uint64_t)&v103, (uint64_t)&v102, v33, (char *)&v107);
  if (v3)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_51:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v35 = v108[7];
  uint64_t v91 = (char *)(v108 + 7);
  uint64_t v36 = 1 << *((unsigned char *)v108 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & v35;
  int64_t v92 = (unint64_t)(v36 + 63) >> 6;
  uint64_t v96 = v108;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v39 = 0;
  uint64_t v89 = 0x80000001012816F0;
  long long v97 = xmmword_10117E810;
  uint64_t v98 = (uint64_t)v34;
  int64_t v93 = (int64_t)v19;
  while (1)
  {
    if (v38)
    {
      unint64_t v40 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v41 = v40 | (v39 << 6);
      goto LABEL_21;
    }
    BOOL v42 = __OFADD__(v39++, 1);
    if (v42)
    {
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (v39 >= v92) {
      goto LABEL_29;
    }
    unint64_t v43 = *(void *)&v91[8 * v39];
    if (!v43) {
      break;
    }
LABEL_20:
    unint64_t v38 = (v43 - 1) & v43;
    unint64_t v41 = __clz(__rbit64(v43)) + (v39 << 6);
LABEL_21:
    uint64_t v45 = v95;
    sub_100CE144C(v96[6] + *(void *)(v100 + 72) * v41, v95, type metadata accessor for CRLBoardIdentifier);
    sub_100CE12D8(v45, (uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
    if (sub_100C5443C((uint64_t)v19))
    {
      if (qword_10166FB70 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v46 = (id)static OS_os_log.boardStore;
      uint64_t v47 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v46, (uint64_t)&_mh_execute_header, v47, (uint64_t)"User deleted zone was synced at least once. Purging it in response to userDeleteZone error", 90, 2, (uint64_t)_swiftEmptyArrayStorage);

      sub_100C6F5CC((uint64_t)v19, 0xD00000000000001FLL, v89, 0);
    }
    uint64_t result = sub_100CE14B4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
  }
  int64_t v44 = v39 + 1;
  if (v39 + 1 >= v92) {
    goto LABEL_29;
  }
  unint64_t v43 = *(void *)&v91[8 * v44];
  if (v43) {
    goto LABEL_19;
  }
  int64_t v44 = v39 + 2;
  if (v39 + 2 >= v92) {
    goto LABEL_29;
  }
  unint64_t v43 = *(void *)&v91[8 * v44];
  if (v43)
  {
LABEL_19:
    int64_t v39 = v44;
    goto LABEL_20;
  }
  int64_t v44 = v39 + 3;
  if (v39 + 3 < v92)
  {
    unint64_t v43 = *(void *)&v91[8 * v44];
    if (!v43)
    {
      while (1)
      {
        int64_t v39 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          break;
        }
        if (v39 >= v92) {
          goto LABEL_29;
        }
        unint64_t v43 = *(void *)&v91[8 * v39];
        ++v44;
        if (v43) {
          goto LABEL_20;
        }
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    goto LABEL_19;
  }
LABEL_29:
  swift_release();
  char v48 = v107;
  uint64_t v49 = *((void *)v107 + 7);
  int64_t v92 = (int64_t)(v107 + 56);
  uint64_t v50 = 1 << v107[32];
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & v49;
  int64_t v93 = (unint64_t)(v50 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v53 = 0;
  uint64_t v95 = 0x8000000101281710;
  uint64_t v91 = v48;
  while (2)
  {
    if (v52)
    {
      unint64_t v54 = __clz(__rbit64(v52));
      v52 &= v52 - 1;
      unint64_t v55 = v54 | (v53 << 6);
LABEL_45:
      uint64_t v58 = v94;
      sub_100CE144C(*((void *)v48 + 6) + *(void *)(v100 + 72) * v55, v94, type metadata accessor for CRLBoardIdentifier);
      uint64_t v59 = v58;
      uint64_t v60 = v99;
      sub_100CE12D8(v59, v99, type metadata accessor for CRLBoardIdentifier);
      sub_100C6F5CC(v60, 0xD00000000000001DLL, v95, 0);
      uint64_t result = sub_100CE14B4(v99, type metadata accessor for CRLBoardIdentifier);
      continue;
    }
    break;
  }
  BOOL v42 = __OFADD__(v53++, 1);
  if (v42) {
    goto LABEL_84;
  }
  if (v53 >= v93)
  {
LABEL_50:
    swift_release();
    unint64_t v61 = (unint64_t)v106;
    swift_bridgeObjectRetain();
    uint64_t v62 = sub_1002094A4();
    sub_100C8A5E0(v61, v62);
    swift_bridgeObjectRelease();
    int64_t v63 = (int64_t)v105;
    unint64_t v64 = swift_bridgeObjectRetain();
    sub_100C8D630(v64);
    swift_bridgeObjectRelease();
    uint64_t v65 = (uint64_t)v102;
    int64_t v93 = v63;
    unint64_t v94 = v61;
    uint64_t v95 = 0;
    uint64_t v66 = v102[7];
    *(void *)&long long v97 = v102 + 7;
    uint64_t v67 = 1 << *((unsigned char *)v102 + 32);
    uint64_t v68 = -1;
    if (v67 < 64) {
      uint64_t v68 = ~(-1 << v67);
    }
    unint64_t v69 = v68 & v66;
    uint64_t v70 = (uint64_t *)&v34[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
    uint64_t v99 = (unint64_t)(v67 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v71 = 0;
    while (1)
    {
      if (v69)
      {
        unint64_t v72 = __clz(__rbit64(v69));
        v69 &= v69 - 1;
        unint64_t v73 = v72 | (v71 << 6);
      }
      else
      {
        uint64_t v74 = v71 + 1;
        if (__OFADD__(v71, 1)) {
          goto LABEL_88;
        }
        if (v74 >= v99)
        {
LABEL_76:
          swift_release();
          if (*(void *)(v65 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v85 = sub_100A3C910((uint64_t)_swiftEmptyArrayStorage);
            sub_100C44024(v65, 0, 0, v85);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v86 = (uint64_t)v104;
          if ((v103 & 1) != 0 || v104[2])
          {
            swift_bridgeObjectRetain();
            sub_100C43B54((uint64_t)&_swiftEmptySetSingleton, v86, 0);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
        unint64_t v75 = *(void *)(v97 + 8 * v74);
        ++v71;
        if (!v75)
        {
          uint64_t v71 = v74 + 1;
          if (v74 + 1 >= v99) {
            goto LABEL_76;
          }
          unint64_t v75 = *(void *)(v97 + 8 * v71);
          if (!v75)
          {
            uint64_t v71 = v74 + 2;
            if (v74 + 2 >= v99) {
              goto LABEL_76;
            }
            unint64_t v75 = *(void *)(v97 + 8 * v71);
            if (!v75)
            {
              uint64_t v76 = v74 + 3;
              if (v76 >= v99) {
                goto LABEL_76;
              }
              unint64_t v75 = *(void *)(v97 + 8 * v76);
              if (!v75)
              {
                while (1)
                {
                  uint64_t v71 = v76 + 1;
                  if (__OFADD__(v76, 1)) {
                    goto LABEL_89;
                  }
                  if (v71 >= v99) {
                    goto LABEL_76;
                  }
                  unint64_t v75 = *(void *)(v97 + 8 * v71);
                  ++v76;
                  if (v75) {
                    goto LABEL_72;
                  }
                }
              }
              uint64_t v71 = v76;
            }
          }
        }
LABEL_72:
        unint64_t v69 = (v75 - 1) & v75;
        unint64_t v73 = __clz(__rbit64(v75)) + (v71 << 6);
      }
      uint64_t v77 = v65;
      uint64_t v78 = *(void *)(v100 + 72);
      uint64_t v79 = v88;
      sub_100CE144C(*(void *)(v65 + 48) + v78 * v73, v88, type metadata accessor for CRLBoardIdentifier);
      uint64_t v80 = v90;
      sub_100CE12D8(v79, v90, type metadata accessor for CRLBoardIdentifier);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v81 = sub_1009563EC(v80);
      LOBYTE(v80) = v82;
      swift_bridgeObjectRelease();
      if (v80)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v84 = *v70;
        uint64_t v101 = *v70;
        *uint64_t v70 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_100984CEC();
          uint64_t v84 = v101;
        }
        sub_100CE14B4(*(void *)(v84 + 48) + v81 * v78, type metadata accessor for CRLBoardIdentifier);
        sub_100589A9C(v81, v84);
        *uint64_t v70 = v84;
        swift_release();
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      uint64_t result = sub_100CE14B4(v90, type metadata accessor for CRLBoardIdentifier);
      uint64_t v65 = v77;
    }
  }
  unint64_t v56 = *(void *)(v92 + 8 * v53);
  if (v56)
  {
LABEL_44:
    unint64_t v52 = (v56 - 1) & v56;
    unint64_t v55 = __clz(__rbit64(v56)) + (v53 << 6);
    goto LABEL_45;
  }
  int64_t v57 = v53 + 1;
  if (v53 + 1 >= v93) {
    goto LABEL_50;
  }
  unint64_t v56 = *(void *)(v92 + 8 * v57);
  if (v56) {
    goto LABEL_43;
  }
  int64_t v57 = v53 + 2;
  if (v53 + 2 >= v93) {
    goto LABEL_50;
  }
  unint64_t v56 = *(void *)(v92 + 8 * v57);
  if (v56) {
    goto LABEL_43;
  }
  int64_t v57 = v53 + 3;
  if (v53 + 3 >= v93) {
    goto LABEL_50;
  }
  unint64_t v56 = *(void *)(v92 + 8 * v57);
  if (v56)
  {
LABEL_43:
    int64_t v53 = v57;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v53 = v57 + 1;
    if (__OFADD__(v57, 1)) {
      break;
    }
    if (v53 >= v93) {
      goto LABEL_50;
    }
    unint64_t v56 = *(void *)(v92 + 8 * v53);
    ++v57;
    if (v56) {
      goto LABEL_44;
    }
  }
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
  return result;
}

void sub_100CAA824(void *a1, uint64_t a2)
{
}

uint64_t sub_100CAA850(uint64_t a1, char *a2)
{
  uint64_t v56 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v56 - 8);
  __chkstk_darwin(v56, v6);
  unint64_t v55 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v9);
  int64_t v53 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v52 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v50 = (uint64_t)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v13;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)v40 - v16;
  uint64_t v58 = type metadata accessor for DispatchPredicate();
  __chkstk_darwin(v58, v18);
  int64_t v57 = (void *)((char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void *)(a1 + 16);
  if (!v21) {
    return 1;
  }
  uint64_t v49 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue;
  uint64_t v22 = a1 + 32;
  unsigned int v48 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v47 = (void (**)(void *, void, uint64_t))(v19 + 104);
  id v46 = (uint64_t (**)(void *, uint64_t))(v19 + 8);
  unint64_t v43 = v63;
  BOOL v42 = (void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v41 = (void (**)(char *, uint64_t))(v8 + 8);
  v40[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v61 = 0x8000000101282A50;
  uint64_t v45 = a2;
  int64_t v44 = v17;
  while (1)
  {
    sub_1005498A4(v22, (uint64_t)v65);
    sub_1005498A4((uint64_t)v65, (uint64_t)aBlock);
    sub_1005057FC(&qword_101699958);
    type metadata accessor for CRLBoardSyncRemoteRecordIdentifier(0);
    if (swift_dynamicCast())
    {
      sub_100C6F5CC(v64 + OBJC_IVAR____TtC8Freeform34CRLBoardSyncRemoteRecordIdentifier_boardIdentifier, 0xD000000000000020, v61, 0);
      if (v2) {
        goto LABEL_17;
      }
LABEL_8:
      swift_release();
LABEL_9:
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v65);
      goto LABEL_10;
    }
    sub_1005498A4((uint64_t)v65, (uint64_t)aBlock);
    type metadata accessor for CRLBoardItemSyncRemoteRecordIdentifier(0);
    if (swift_dynamicCast())
    {
      sub_100C60988((sqlite3_stmt **)(v64 + OBJC_IVAR____TtC8Freeform38CRLBoardItemSyncRemoteRecordIdentifier_itemUUID), v64 + OBJC_IVAR____TtC8Freeform38CRLBoardItemSyncRemoteRecordIdentifier_boardIdentifier);
      if (v2) {
        goto LABEL_17;
      }
      goto LABEL_8;
    }
    sub_1005498A4((uint64_t)v65, (uint64_t)aBlock);
    type metadata accessor for CRLBoardShareSyncRemoteRecordIdentifier(0);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_9;
    }
    uint64_t v23 = v64;
    uint64_t v24 = *(void **)&a2[v49];
    __n128 v26 = v57;
    uint64_t v25 = v58;
    void *v57 = v24;
    (*v47)(v26, v48, v25);
    id v27 = v24;
    LOBYTE(v24) = _dispatchPreconditionTest(_:)();
    uint64_t result = (*v46)(v26, v25);
    if ((v24 & 1) == 0) {
      break;
    }
    sub_100CE144C(v23 + OBJC_IVAR____TtC8Freeform39CRLBoardShareSyncRemoteRecordIdentifier_boardIdentifier, (uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
    sub_100C61CA8((uint64_t)v17, 0, 0xF000000000000000, 0);
    if (v2)
    {
      sub_100CE14B4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
LABEL_17:
      swift_release();
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v65);
LABEL_18:
      swift_bridgeObjectRelease();
      return 1;
    }
    sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
    uint64_t v60 = static OS_dispatch_queue.main.getter();
    uint64_t v29 = v50;
    sub_100CE144C((uint64_t)v17, v50, type metadata accessor for CRLBoardIdentifier);
    unint64_t v30 = (*(unsigned __int8 *)(v52 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = a2;
    sub_100CE12D8(v29, v31 + v30, type metadata accessor for CRLBoardIdentifier);
    v63[2] = sub_100CE923C;
    v63[3] = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(void *)"";
    v63[0] = sub_100679958;
    v63[1] = &unk_1015299A0;
    uint64_t v59 = _Block_copy(aBlock);
    char v32 = a2;
    swift_release();
    char v33 = v53;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1005057FC((uint64_t *)&unk_1016725D0);
    sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
    uint64_t v35 = v55;
    uint64_t v34 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v37 = v59;
    uint64_t v36 = (void *)v60;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v37);

    unint64_t v38 = v35;
    uint64_t v39 = (uint64_t)v44;
    a2 = v45;
    (*v42)(v38, v34);
    (*v41)(v33, v54);
    uint64_t v17 = (char *)v39;
    sub_100CE14B4(v39, type metadata accessor for CRLBoardIdentifier);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v65);
    swift_release();
LABEL_10:
    v22 += 40;
    if (!--v21) {
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

void sub_100CAB040(void *a1, uint64_t a2)
{
}

void sub_100CAB06C(void *a1, uint64_t a2, void (*a3)(id, uint64_t, id))
{
  swift_bridgeObjectRetain();
  id v6 = a1;
  a3(v6, a2, v6);
  swift_bridgeObjectRelease();
}

uint64_t sub_100CAB0D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v24 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v23 - v9;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v23 - v13;
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v23 - v17;
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return 1;
  }
  uint64_t v20 = a1 + 32;
  uint64_t v23 = a1;
  swift_bridgeObjectRetain();
  while (1)
  {
    id v27 = &_swiftEmptySetSingleton;
    sub_1005498A4(v20, (uint64_t)v26);
    sub_1005057FC(&qword_101699958);
    type metadata accessor for CRLBoardSyncRemoteRecordIdentifier(0);
    if (swift_dynamicCast()) {
      break;
    }
LABEL_7:
    if (v27[2])
    {
      sub_100CADD78();
      if (v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    v20 += 40;
    if (!--v19) {
      goto LABEL_11;
    }
  }
  sub_100CE144C(v25 + OBJC_IVAR____TtC8Freeform34CRLBoardSyncRemoteRecordIdentifier_boardIdentifier, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
  swift_release();
  sub_100CE12D8((uint64_t)v14, (uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
  sub_100C98D54();
  if (!v2)
  {
    sub_100CAB44C(1, (uint64_t)v18);
    sub_100CAB824(1, (uint64_t)v18);
    sub_100CABBFC((uint64_t)v18);
    sub_100C6915C((unint64_t)v18, 1);
    sub_100CABFC0(1, (uint64_t)v18);
    sub_100CAC398(1, (uint64_t)v18);
    sub_100CAC770((uint64_t)v18);
    uint64_t v2 = 0;
    uint64_t v21 = v24;
    sub_100CE144C((uint64_t)v18, v24, type metadata accessor for CRLBoardIdentifier);
    sub_100CB7090((uint64_t)v10, v21);
    sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4((uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_7;
  }
  sub_100CE14B4((uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
  swift_bridgeObjectRelease();
LABEL_11:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_100CAB44C(sqlite3_int64 a1, uint64_t a2)
{
  sqlite3_int64 v40 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v10 = v11;
  uint64_t v12 = *(void (**)(void, __n128))(v6 + 104);
  unsigned int v37 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v38 = (void (*)(void *, void, uint64_t))v12;
  v12(v10, v8);
  id v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
  v14(v10, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v39 = a2;
  uint64_t v36 = v14;
  uint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD00000000000005ALL, 0x80000001012828E0);
  uint64_t result = swift_release();
  if (v3) {
    return result;
  }
  sub_10079D8A8(v40, 1);
  uint64_t v18 = sub_100753FC0();
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  sub_10079DCE4(v18, v19, 2);
  sub_100510084(v20, v21);
  uint64_t v22 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v10 = v22;
  v38(v10, v37, v5);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t v24 = v36;
  v36(v10, v5);
  if ((v22 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v25 = (sqlite3_stmt **)(v16 + 24);
  swift_beginAccess();
  int v26 = sqlite3_step(*(sqlite3_stmt **)(v16 + 24));
  if (v26 != 101)
  {
    int v30 = v26;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v31 = v30;
    *(void *)(v31 + 8) = 0xD00000000000002DLL;
    *(void *)(v31 + 16) = 0x800000010127EF90;
    swift_willThrow();
    char v32 = *(void **)(*(void *)(v16 + 16) + 32);
    *uint64_t v10 = v32;
    v38(v10, v37, v5);
    id v33 = v32;
    char v34 = _dispatchPreconditionTest(_:)();
    v24(v10, v5);
    if (v34)
    {
      if (*v25)
      {
        sqlite3_finalize(*v25);
        *(void *)(v16 + 24) = 0;
      }
      return swift_release();
    }
LABEL_17:
    __break(1u);
  }
  id v27 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v10 = v27;
  v38(v10, v37, v5);
  id v28 = v27;
  char v29 = _dispatchPreconditionTest(_:)();
  v24(v10, v5);
  if ((v29 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v25)
  {
    sqlite3_finalize(*v25);
    *uint64_t v25 = 0;
  }
  return swift_release();
}

uint64_t sub_100CAB824(sqlite3_int64 a1, uint64_t a2)
{
  sqlite3_int64 v40 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v10 = v11;
  uint64_t v12 = *(void (**)(void, __n128))(v6 + 104);
  unsigned int v37 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v38 = (void (*)(void *, void, uint64_t))v12;
  v12(v10, v8);
  id v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
  v14(v10, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v39 = a2;
  uint64_t v36 = v14;
  uint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD000000000000054, 0x8000000101282880);
  uint64_t result = swift_release();
  if (v3) {
    return result;
  }
  sub_10079D8A8(v40, 1);
  uint64_t v18 = sub_100753FC0();
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  sub_10079DCE4(v18, v19, 2);
  sub_100510084(v20, v21);
  uint64_t v22 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v10 = v22;
  v38(v10, v37, v5);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t v24 = v36;
  v36(v10, v5);
  if ((v22 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v25 = (sqlite3_stmt **)(v16 + 24);
  swift_beginAccess();
  int v26 = sqlite3_step(*(sqlite3_stmt **)(v16 + 24));
  if (v26 != 101)
  {
    int v30 = v26;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v31 = v30;
    *(void *)(v31 + 8) = 0xD000000000000027;
    *(void *)(v31 + 16) = 0x800000010127EF30;
    swift_willThrow();
    char v32 = *(void **)(*(void *)(v16 + 16) + 32);
    *uint64_t v10 = v32;
    v38(v10, v37, v5);
    id v33 = v32;
    char v34 = _dispatchPreconditionTest(_:)();
    v24(v10, v5);
    if (v34)
    {
      if (*v25)
      {
        sqlite3_finalize(*v25);
        *(void *)(v16 + 24) = 0;
      }
      return swift_release();
    }
LABEL_17:
    __break(1u);
  }
  id v27 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v10 = v27;
  v38(v10, v37, v5);
  id v28 = v27;
  char v29 = _dispatchPreconditionTest(_:)();
  v24(v10, v5);
  if ((v29 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v25)
  {
    sqlite3_finalize(*v25);
    *uint64_t v25 = 0;
  }
  return swift_release();
}

uint64_t sub_100CABBFC(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (void (**)(void *, uint64_t))((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v9 = v10;
  uint64_t v11 = *(void (**)(void, __n128))(v5 + 104);
  unsigned int v35 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v36 = (void (*)(void *, void, uint64_t))v11;
  v11(v9, v7);
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  id v13 = *(void (**)(void *, uint64_t))(v5 + 8);
  v13(v9, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v37 = a1;
  uint64_t v38 = 0;
  char v34 = v13;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v14 = swift_retain();
  uint64_t v15 = sub_10079FC40(v14, 0xD00000000000005ELL, 0x80000001012827D0);
  uint64_t result = swift_release();
  if (v2) {
    return result;
  }
  uint64_t v17 = sub_100753FC0();
  unint64_t v19 = v18;
  sub_10079DCE4(v17, v18, 1);
  sub_100510084(v17, v19);
  uint64_t v20 = *(void **)(*(void *)(v15 + 16) + 32);
  *uint64_t v9 = v20;
  v36(v9, v35, v4);
  id v21 = v20;
  char v22 = _dispatchPreconditionTest(_:)();
  id v23 = v34;
  v34(v9, v4);
  if ((v22 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v24 = (sqlite3_stmt **)(v15 + 24);
  swift_beginAccess();
  int v25 = sqlite3_step(*(sqlite3_stmt **)(v15 + 24));
  if (v25 != 101)
  {
    int v29 = v25;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v30 = v29;
    *(void *)(v30 + 8) = 0xD000000000000043;
    *(void *)(v30 + 16) = 0x8000000101282830;
    swift_willThrow();
    uint64_t v31 = *(void **)(*(void *)(v15 + 16) + 32);
    *uint64_t v9 = v31;
    v36(v9, v35, v4);
    id v32 = v31;
    char v33 = _dispatchPreconditionTest(_:)();
    v23(v9, v4);
    if (v33)
    {
      if (*v24)
      {
        sqlite3_finalize(*v24);
        *(void *)(v15 + 24) = 0;
      }
      return swift_release();
    }
LABEL_17:
    __break(1u);
  }
  int v26 = *(void **)(*(void *)(v15 + 16) + 32);
  *uint64_t v9 = v26;
  v36(v9, v35, v4);
  id v27 = v26;
  char v28 = _dispatchPreconditionTest(_:)();
  v23(v9, v4);
  if ((v28 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v24)
  {
    sqlite3_finalize(*v24);
    *uint64_t v24 = 0;
  }
  return swift_release();
}

uint64_t sub_100CABFC0(sqlite3_int64 a1, uint64_t a2)
{
  sqlite3_int64 v40 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v10 = v11;
  id v12 = *(void (**)(void, __n128))(v6 + 104);
  unsigned int v37 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v38 = (void (*)(void *, void, uint64_t))v12;
  v12(v10, v8);
  id v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
  v14(v10, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v39 = a2;
  uint64_t v36 = v14;
  uint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD000000000000054, 0x8000000101282680);
  uint64_t result = swift_release();
  if (v3) {
    return result;
  }
  sub_10079D8A8(v40, 1);
  uint64_t v18 = sub_100753FC0();
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  sub_10079DCE4(v18, v19, 2);
  sub_100510084(v20, v21);
  char v22 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v10 = v22;
  v38(v10, v37, v5);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t v24 = v36;
  v36(v10, v5);
  if ((v22 & 1) == 0) {
    goto LABEL_15;
  }
  int v25 = (sqlite3_stmt **)(v16 + 24);
  swift_beginAccess();
  int v26 = sqlite3_step(*(sqlite3_stmt **)(v16 + 24));
  if (v26 != 101)
  {
    int v30 = v26;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v31 = v30;
    *(void *)(v31 + 8) = 0xD000000000000032;
    *(void *)(v31 + 16) = 0x80000001012826E0;
    swift_willThrow();
    id v32 = *(void **)(*(void *)(v16 + 16) + 32);
    *uint64_t v10 = v32;
    v38(v10, v37, v5);
    id v33 = v32;
    char v34 = _dispatchPreconditionTest(_:)();
    v24(v10, v5);
    if (v34)
    {
      if (*v25)
      {
        sqlite3_finalize(*v25);
        *(void *)(v16 + 24) = 0;
      }
      return swift_release();
    }
LABEL_17:
    __break(1u);
  }
  id v27 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v10 = v27;
  v38(v10, v37, v5);
  id v28 = v27;
  char v29 = _dispatchPreconditionTest(_:)();
  v24(v10, v5);
  if ((v29 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v25)
  {
    sqlite3_finalize(*v25);
    *int v25 = 0;
  }
  return swift_release();
}

uint64_t sub_100CAC398(sqlite3_int64 a1, uint64_t a2)
{
  sqlite3_int64 v40 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v10 = v11;
  id v12 = *(void (**)(void, __n128))(v6 + 104);
  unsigned int v37 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v38 = (void (*)(void *, void, uint64_t))v12;
  v12(v10, v8);
  id v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
  v14(v10, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v39 = a2;
  uint64_t v36 = v14;
  uint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10079FC40(v15, 0xD00000000000004ALL, 0x80000001012825F0);
  uint64_t result = swift_release();
  if (v3) {
    return result;
  }
  sub_10079D8A8(v40, 1);
  uint64_t v18 = sub_100753FC0();
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  sub_10079DCE4(v18, v19, 2);
  sub_100510084(v20, v21);
  char v22 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v10 = v22;
  v38(v10, v37, v5);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t v24 = v36;
  v36(v10, v5);
  if ((v22 & 1) == 0) {
    goto LABEL_15;
  }
  int v25 = (sqlite3_stmt **)(v16 + 24);
  swift_beginAccess();
  int v26 = sqlite3_step(*(sqlite3_stmt **)(v16 + 24));
  if (v26 != 101)
  {
    int v30 = v26;
    sub_10079FF00();
    swift_allocError();
    *(_DWORD *)uint64_t v31 = v30;
    *(void *)(v31 + 8) = 0xD000000000000030;
    *(void *)(v31 + 16) = 0x8000000101282640;
    swift_willThrow();
    id v32 = *(void **)(*(void *)(v16 + 16) + 32);
    *uint64_t v10 = v32;
    v38(v10, v37, v5);
    id v33 = v32;
    char v34 = _dispatchPreconditionTest(_:)();
    v24(v10, v5);
    if (v34)
    {
      if (*v25)
      {
        sqlite3_finalize(*v25);
        *(void *)(v16 + 24) = 0;
      }
      return swift_release();
    }
LABEL_17:
    __break(1u);
  }
  id v27 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v10 = v27;
  v38(v10, v37, v5);
  id v28 = v27;
  char v29 = _dispatchPreconditionTest(_:)();
  v24(v10, v5);
  if ((v29 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v25)
  {
    sqlite3_finalize(*v25);
    *int v25 = 0;
  }
  return swift_release();
}

uint64_t sub_100CAC770(uint64_t a1)
{
  uint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (uint64_t *)((char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v11 = v12;
  id v13 = *(void (**)(void, __n128))(v7 + 104);
  unsigned int v140 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v141 = (void (*)(void *, void, uint64_t))v13;
  v13(v11, v9);
  id v14 = v12;
  uint64_t v15 = _dispatchPreconditionTest(_:)();
  uint64_t v142 = *(void (**)(void *, uint64_t))(v7 + 8);
  v142(v11, v6);
  if ((v15 & 1) == 0) {
    goto LABEL_37;
  }
  uint64_t v143 = a1;
  uint64_t v150 = 0;
  unint64_t v151 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v17 = swift_retain();
  uint64_t v18 = sub_10079FC40(v17, 0xD000000000000042, 0x8000000101282430);
  if (v2) {
    return swift_release();
  }
  uint64_t v138 = v6;
  unint64_t v139 = v18;
  swift_release();
  uint64_t v19 = sub_100753FC0();
  uint64_t v21 = v19;
  unint64_t v22 = v20;
  unint64_t v23 = v139;
  sub_10079DCE4(v19, v20, 1);
  uint64_t v24 = v21;
  unint64_t v4 = v23;
  sub_100510084(v24, v22);
  int v25 = *(void **)(*(void *)(v23 + 16) + 32);
  *uint64_t v11 = v25;
  uint64_t v26 = v138;
  v141(v11, v140, v138);
  id v27 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  uint64_t v28 = ((uint64_t (*)(void *, uint64_t))v142)(v11, v26);
  if (v25)
  {
    unint64_t v137 = (sqlite3_stmt **)(v4 + 24);
    swift_beginAccess();
    int v30 = sqlite3_step(*(sqlite3_stmt **)(v4 + 24));
    if (v30 != 101)
    {
      int v32 = v30;
      sub_10079FF00();
      swift_allocError();
      *(_DWORD *)uint64_t v33 = v32;
      *(void *)(v33 + 8) = 0xD000000000000025;
      *(void *)(v33 + 16) = 0x800000010127EE70;
      swift_willThrow();
      char v34 = *(void **)(*(void *)(v4 + 16) + 32);
      *uint64_t v11 = v34;
      v141(v11, v140, v26);
      id v35 = v34;
      uint64_t v36 = _dispatchPreconditionTest(_:)();
      v142(v11, v26);
      if ((v36 & 1) == 0)
      {
        __break(1u);
        goto LABEL_71;
      }
      goto LABEL_9;
    }
    uint64_t v148 = 0;
    unint64_t v149 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    swift_initStackObject();
    uint64_t v31 = swift_retain();
    uint64_t v136 = sub_10079FC40(v31, 0xD00000000000003DLL, 0x8000000101282480);
    swift_release();
    uint64_t v38 = sub_100753FC0();
    uint64_t v40 = v38;
    unint64_t v41 = v39;
    uint64_t v42 = v136;
    sub_10079DCE4(v38, v39, 1);
    sub_100510084(v40, v41);
    uint64_t v43 = v42;
    int64_t v44 = *(void **)(*(void *)(v42 + 16) + 32);
    *uint64_t v11 = v44;
    uint64_t v45 = v138;
    v141(v11, v140, v138);
    id v46 = v44;
    LOBYTE(v44) = _dispatchPreconditionTest(_:)();
    v142(v11, v45);
    if (v44)
    {
      uint64_t v135 = (sqlite3_stmt **)(v43 + 24);
      swift_beginAccess();
      int v47 = sqlite3_step(*(sqlite3_stmt **)(v43 + 24));
      if (v47 == 101)
      {
        uint64_t v146 = 0;
        unint64_t v147 = 0xE000000000000000;
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease();
        swift_initStackObject();
        uint64_t v48 = swift_retain();
        uint64_t v49 = sub_10079FC40(v48, 0xD000000000000050, 0x80000001012824E0);
        goto LABEL_20;
      }
      int v50 = v47;
      sub_10079FF00();
      uint64_t v3 = swift_allocError();
      *(_DWORD *)uint64_t v51 = v50;
      *(void *)(v51 + 8) = 0xD00000000000001FLL;
      *(void *)(v51 + 16) = 0x80000001012824C0;
      swift_willThrow();
      uint64_t v52 = *(void **)(*(void *)(v43 + 16) + 32);
      *uint64_t v11 = v52;
      v141(v11, v140, v45);
      id v53 = v52;
      LOBYTE(v52) = _dispatchPreconditionTest(_:)();
      v142(v11, v45);
      if (v52)
      {
        uint64_t v54 = v135;
        unint64_t v4 = v139;
        if (*v135)
        {
          sqlite3_finalize(*v135);
          *uint64_t v54 = 0;
        }
        swift_release();
        unint64_t v55 = *(void **)(*(void *)(v4 + 16) + 32);
        *uint64_t v11 = v55;
        v141(v11, v140, v45);
        id v56 = v55;
        LOBYTE(v55) = _dispatchPreconditionTest(_:)();
        uint64_t v49 = ((uint64_t (*)(void *, uint64_t))v142)(v11, v45);
        if (v55) {
          goto LABEL_9;
        }
        __break(1u);
LABEL_20:
        uint64_t v134 = v49;
        swift_release();
        uint64_t v57 = sub_100753FC0();
        if (v3)
        {
          swift_release();
          uint64_t v59 = *(void **)(*(void *)(v136 + 16) + 32);
          *uint64_t v11 = v59;
          uint64_t v60 = v138;
          v141(v11, v140, v138);
          id v61 = v59;
          LOBYTE(v59) = _dispatchPreconditionTest(_:)();
          uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v60);
          if ((v59 & 1) == 0)
          {
            __break(1u);
            goto LABEL_86;
          }
          uint64_t v62 = v135;
          unint64_t v4 = v139;
          if (*v135)
          {
            sqlite3_finalize(*v135);
            *uint64_t v62 = 0;
          }
          swift_release();
          int64_t v63 = *(void **)(*(void *)(v4 + 16) + 32);
          *uint64_t v11 = v63;
          v141(v11, v140, v60);
          id v64 = v63;
          LOBYTE(v63) = _dispatchPreconditionTest(_:)();
          uint64_t v57 = ((uint64_t (*)(void *, uint64_t))v142)(v11, v60);
          if (v63) {
            goto LABEL_9;
          }
          __break(1u);
        }
        uint64_t v65 = v57;
        unint64_t v66 = v58;
        uint64_t v67 = v134;
        sub_10079DCE4(v57, v58, 1);
        sub_100510084(v65, v66);
        uint64_t v68 = v67;
        unint64_t v69 = *(void **)(*(void *)(v67 + 16) + 32);
        *uint64_t v11 = v69;
        uint64_t v6 = v138;
        v141(v11, v140, v138);
        id v70 = v69;
        LOBYTE(v69) = _dispatchPreconditionTest(_:)();
        uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v6);
        if (v69)
        {
          uint64_t v15 = v68;
          uint64_t v133 = (sqlite3_stmt **)(v68 + 24);
          swift_beginAccess();
          int v71 = sqlite3_step(*(sqlite3_stmt **)(v68 + 24));
          unint64_t v4 = 0xD00000000000001FLL;
          if (v71 != 101) {
            goto LABEL_38;
          }
          uint64_t v144 = 0;
          unint64_t v145 = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          swift_initStackObject();
          uint64_t v72 = swift_retain();
          uint64_t v73 = sub_10079FC40(v72, 0xD000000000000046, 0x8000000101282570);
          if (!v3) {
            goto LABEL_46;
          }
          swift_release();
          uint64_t v74 = *(void **)(*(void *)(v134 + 16) + 32);
          *uint64_t v11 = v74;
          v141(v11, v140, v6);
          id v75 = v74;
          LOBYTE(v74) = _dispatchPreconditionTest(_:)();
          uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v6);
          unint64_t v4 = v139;
          if ((v74 & 1) == 0) {
            goto LABEL_89;
          }
          uint64_t v76 = v133;
          if (*v133)
          {
            sqlite3_finalize(*v133);
            *uint64_t v76 = 0;
          }
          swift_release();
          uint64_t v77 = *(void **)(*(void *)(v136 + 16) + 32);
          *uint64_t v11 = v77;
          v141(v11, v140, v6);
          id v78 = v77;
          LOBYTE(v77) = _dispatchPreconditionTest(_:)();
          uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v6);
          if ((v77 & 1) == 0) {
            goto LABEL_90;
          }
          uint64_t v79 = v135;
          if (*v135)
          {
            sqlite3_finalize(*v135);
            *uint64_t v79 = 0;
          }
          swift_release();
          uint64_t v80 = *(void **)(*(void *)(v4 + 16) + 32);
          *uint64_t v11 = v80;
          v141(v11, v140, v6);
          id v81 = v80;
          uint64_t v15 = _dispatchPreconditionTest(_:)();
          v142(v11, v6);
          if (v15) {
            goto LABEL_9;
          }
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          sub_10079FF00();
          uint64_t v3 = swift_allocError();
          *(_DWORD *)uint64_t v82 = 101;
          *(void *)(v82 + 8) = v4 + 11;
          *(void *)(v82 + 16) = 0x8000000101282540;
          swift_willThrow();
          uint64_t v83 = *(void **)(*(void *)(v15 + 16) + 32);
          *uint64_t v11 = v83;
          v141(v11, v140, v6);
          id v84 = v83;
          LOBYTE(v83) = _dispatchPreconditionTest(_:)();
          uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v6);
          unint64_t v4 = v139;
          if (v83)
          {
            unint64_t v85 = v133;
            if (*v133)
            {
              sqlite3_finalize(*v133);
              uint64_t *v85 = 0;
            }
            swift_release();
            uint64_t v86 = *(void **)(*(void *)(v136 + 16) + 32);
            *uint64_t v11 = v86;
            v141(v11, v140, v6);
            id v87 = v86;
            LOBYTE(v86) = _dispatchPreconditionTest(_:)();
            uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v6);
            if (v86)
            {
              uint64_t v88 = v135;
              if (*v135)
              {
                sqlite3_finalize(*v135);
                void *v88 = 0;
              }
              swift_release();
              uint64_t v89 = *(void **)(*(void *)(v4 + 16) + 32);
              *uint64_t v11 = v89;
              v141(v11, v140, v6);
              id v90 = v89;
              LOBYTE(v89) = _dispatchPreconditionTest(_:)();
              uint64_t v73 = ((uint64_t (*)(void *, uint64_t))v142)(v11, v6);
              if ((v89 & 1) == 0)
              {
                __break(1u);
LABEL_46:
                uint64_t v16 = v73;
                swift_release();
                uint64_t v28 = sub_100753FC0();
                if (!v3) {
                  goto LABEL_56;
                }
                swift_release();
                uint64_t v91 = *(void **)(*(void *)(v134 + 16) + 32);
                *uint64_t v11 = v91;
                uint64_t v92 = v138;
                v141(v11, v140, v138);
                id v93 = v91;
                LOBYTE(v91) = _dispatchPreconditionTest(_:)();
                uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v92);
                if (v91)
                {
                  unint64_t v94 = v133;
                  if (*v133)
                  {
                    sqlite3_finalize(*v133);
                    *unint64_t v94 = 0;
                  }
                  swift_release();
                  uint64_t v95 = *(void **)(*(void *)(v136 + 16) + 32);
                  *uint64_t v11 = v95;
                  uint64_t v96 = v138;
                  v141(v11, v140, v138);
                  id v97 = v95;
                  LOBYTE(v95) = _dispatchPreconditionTest(_:)();
                  uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v96);
                  if (v95)
                  {
                    uint64_t v98 = v135;
                    if (*v135)
                    {
                      sqlite3_finalize(*v135);
                      *uint64_t v98 = 0;
                    }
                    swift_release();
                    uint64_t v99 = *(void **)(*(void *)(v139 + 16) + 32);
                    *uint64_t v11 = v99;
                    uint64_t v100 = v138;
                    v141(v11, v140, v138);
                    id v101 = v99;
                    LOBYTE(v99) = _dispatchPreconditionTest(_:)();
                    uint64_t v28 = ((uint64_t (*)(void *, uint64_t))v142)(v11, v100);
                    if (v99) {
                      goto LABEL_81;
                    }
                    __break(1u);
                    goto LABEL_55;
                  }
LABEL_92:
                  __break(1u);
                  goto LABEL_93;
                }
LABEL_91:
                __break(1u);
                goto LABEL_92;
              }
LABEL_9:
              if (*v137)
              {
                sqlite3_finalize(*v137);
                *(void *)(v4 + 24) = 0;
              }
              return swift_release();
            }
            goto LABEL_88;
          }
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    __break(1u);
  }
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t v102 = v28;
  unint64_t v103 = v29;
  sub_10079DCE4(v28, v29, 1);
  sub_100510084(v102, v103);
  uint64_t v104 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v11 = v104;
  uint64_t v105 = v138;
  v141(v11, v140, v138);
  id v106 = v104;
  LOBYTE(v104) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v105);
  if ((v104 & 1) == 0)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t v36 = v16 + 24;
  swift_beginAccess();
  if (sqlite3_step(*(sqlite3_stmt **)(v16 + 24)) == 101)
  {
    id v107 = *(void **)(*(void *)(v16 + 16) + 32);
    *uint64_t v11 = v107;
    uint64_t v108 = v138;
    v141(v11, v140, v138);
    id v109 = v107;
    LOBYTE(v107) = _dispatchPreconditionTest(_:)();
    uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v108);
    if (v107)
    {
      if (*(void *)v36)
      {
        sqlite3_finalize(*(sqlite3_stmt **)v36);
        *(void *)uint64_t v36 = 0;
      }
      swift_release();
      uint64_t v110 = *(void **)(*(void *)(v134 + 16) + 32);
      *uint64_t v11 = v110;
      uint64_t v111 = v138;
      v141(v11, v140, v138);
      id v112 = v110;
      LOBYTE(v110) = _dispatchPreconditionTest(_:)();
      uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v111);
      if (v110)
      {
        if (*v133)
        {
          sqlite3_finalize(*v133);
          *uint64_t v133 = 0;
        }
        swift_release();
        char v113 = *(void **)(*(void *)(v136 + 16) + 32);
        *uint64_t v11 = v113;
        uint64_t v114 = v138;
        v141(v11, v140, v138);
        id v115 = v113;
        LOBYTE(v113) = _dispatchPreconditionTest(_:)();
        uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v114);
        if (v113)
        {
          if (*v135)
          {
            sqlite3_finalize(*v135);
            *uint64_t v135 = 0;
          }
          swift_release();
          char v116 = *(void **)(*(void *)(v139 + 16) + 32);
          *uint64_t v11 = v116;
          uint64_t v117 = v138;
          v141(v11, v140, v138);
          id v118 = v116;
          LOBYTE(v116) = _dispatchPreconditionTest(_:)();
          uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v117);
          if (v116)
          {
            if (*v137)
            {
              sqlite3_finalize(*v137);
              *unint64_t v137 = 0;
            }
            return swift_release();
          }
          goto LABEL_97;
        }
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
LABEL_71:
  sub_10079FF00();
  swift_allocError();
  *(_DWORD *)uint64_t v119 = 101;
  *(void *)(v119 + 8) = 0xD000000000000028;
  *(void *)(v119 + 16) = 0x80000001012825C0;
  swift_willThrow();
  uint64_t v120 = *(void **)(*(void *)(v16 + 16) + 32);
  *uint64_t v11 = v120;
  uint64_t v121 = v138;
  v141(v11, v140, v138);
  id v122 = v120;
  LOBYTE(v120) = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v121);
  if (v120)
  {
    if (*(void *)v36)
    {
      sqlite3_finalize(*(sqlite3_stmt **)v36);
      *(void *)uint64_t v36 = 0;
    }
    swift_release();
    uint64_t v123 = *(void **)(*(void *)(v134 + 16) + 32);
    *uint64_t v11 = v123;
    uint64_t v124 = v138;
    v141(v11, v140, v138);
    id v125 = v123;
    LOBYTE(v123) = _dispatchPreconditionTest(_:)();
    uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v124);
    if ((v123 & 1) == 0) {
      goto LABEL_99;
    }
    if (*v133)
    {
      sqlite3_finalize(*v133);
      *uint64_t v133 = 0;
    }
    swift_release();
    uint64_t v126 = *(void **)(*(void *)(v136 + 16) + 32);
    *uint64_t v11 = v126;
    uint64_t v127 = v138;
    v141(v11, v140, v138);
    id v128 = v126;
    LOBYTE(v126) = _dispatchPreconditionTest(_:)();
    uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v127);
    if ((v126 & 1) == 0) {
      goto LABEL_100;
    }
    if (*v135)
    {
      sqlite3_finalize(*v135);
      *uint64_t v135 = 0;
    }
    swift_release();
    id v129 = *(void **)(*(void *)(v139 + 16) + 32);
    *uint64_t v11 = v129;
    uint64_t v130 = v138;
    v141(v11, v140, v138);
    id v131 = v129;
    LOBYTE(v129) = _dispatchPreconditionTest(_:)();
    uint64_t result = ((uint64_t (*)(void *, uint64_t))v142)(v11, v130);
    if ((v129 & 1) == 0) {
      goto LABEL_101;
    }
LABEL_81:
    if (*v137)
    {
      sqlite3_finalize(*v137);
      *(void *)(v139 + 24) = 0;
    }
    return swift_release();
  }
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
  return result;
}

uint64_t sub_100CADD78()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (void *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v7, v7);
  __n128 v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = sub_100C542E4((uint64_t)v9);
  if (v1)
  {
    swift_errorRelease();
LABEL_4:
    uint64_t v26 = &_swiftEmptySetSingleton;
    goto LABEL_5;
  }
  unint64_t v12 = v11;
  if (v11 >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v21 = v10;
  v23[0] = v0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v22 = JSONDecoder.init()();
  sub_1005057FC(&qword_101677400);
  sub_100CE7730(&qword_1016997C8, (unint64_t *)&unk_101677290);
  v23[1] = v22;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_100514260(v21, v12);
  swift_release();
  uint64_t v26 = v25;
  uint64_t v2 = v23[0];
LABEL_5:
  uint64_t v13 = swift_bridgeObjectRetain();
  sub_10057C8B4(v13);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  int v25 = v26;
  sub_1005057FC(&qword_101677400);
  sub_100CE7730(&qword_1016998F8, (unint64_t *)&unk_1016772E0);
  uint64_t v14 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v16 = v15;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *uint64_t v6 = v17;
  uint64_t v18 = v24;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v19 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v6, v3);
  if (v17)
  {
    sub_100510D4C(v14, v16);
    sub_100C86FF0((uint64_t)v9, 0, 0, v2, v14, v16);
    sub_100CE14B4((uint64_t)v9, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    return sub_100510084(v14, v16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CAE188(char a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = (unsigned char *)sub_100FB90F0(a3);
  v5[40] = 1;
  v5[16] = 1;
  v5[41] = a1;
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100CAE208(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  swift_bridgeObjectRetain();
  sub_100547AB8(v3, (uint64_t)v3, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100CAE26C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v3, v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = sub_100C542E4((uint64_t)v5);
  if (v1)
  {
    swift_errorRelease();
LABEL_4:
    if (qword_10166FB70 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v9 = (id)static OS_os_log.boardStore;
    uint64_t v10 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v9, (uint64_t)&_mh_execute_header, v10, (uint64_t)"Attempted to remove board identifiers from sync reset boards but data not found", 79, 2, (uint64_t)_swiftEmptyArrayStorage);

    return sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  }
  unint64_t v8 = v7;
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v12 = v6;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1005057FC(&qword_101677400);
  sub_100CE7730(&qword_1016997C8, (unint64_t *)&unk_101677290);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  if (*(void *)(a1 + 16) <= *(void *)(v14 + 16) >> 3) {
    sub_101029A98(a1);
  }
  else {
    sub_10102BCC8(a1, v14);
  }
  sub_100CADD78();
  sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  swift_bridgeObjectRelease();
  return sub_100514260(v12, v8);
}

void sub_100CAE534(void *a1, char *a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, char a9, char *a10)
{
  v390 = a2;
  uint64_t v383 = a8;
  *(void *)&long long v384 = a7;
  v386 = a5;
  *(void *)&long long v387 = a6;
  *(void *)&long long v385 = a4;
  *(void *)&long long v389 = a3;
  uint64_t v375 = sub_1005057FC((uint64_t *)&unk_1016A8B60);
  __chkstk_darwin(v375, v11);
  v368 = (char *)&v362 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005057FC(&qword_101672C30);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v376 = (uint64_t)&v362 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v372 = (uint64_t)&v362 - v18;
  uint64_t v380 = type metadata accessor for UUID();
  uint64_t v378 = *(void *)(v380 - 8);
  __chkstk_darwin(v380, v19);
  uint64_t v21 = (char *)&v362 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  int v25 = (char *)&v362 - v24;
  __chkstk_darwin(v26, v27);
  v379 = (char *)&v362 - v28;
  uint64_t v29 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v377 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v30);
  int v32 = (char *)&v362 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  uint64_t v366 = (uint64_t)&v362 - v35;
  __chkstk_darwin(v36, v37);
  uint64_t v374 = (uint64_t)&v362 - v38;
  __chkstk_darwin(v39, v40);
  uint64_t v370 = (uint64_t)&v362 - v41;
  __chkstk_darwin(v42, v43);
  uint64_t v381 = (uint64_t)&v362 - v44;
  uint64_t v373 = sub_1005057FC(&qword_10169A1D0);
  uint64_t v371 = *(void *)(v373 - 8);
  __chkstk_darwin(v373, v45);
  v369 = (char *)&v362 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47, v48);
  v367 = (char *)&v362 - v49;
  __chkstk_darwin(v50, v51);
  id v53 = (char *)&v362 - v52;
  uint64_t v54 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v54 - 8, v55);
  uint64_t v57 = (char *)&v362 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58, v59);
  id v61 = (char *)&v362 - v60;
  unint64_t v62 = a1[5];
  if ((~v62 & 0xF000000000000007) == 0) {
    return;
  }
  uint64_t v388 = a1[4];
  unint64_t v63 = a1[7];
  v382 = (void *)a1[6];
  id v64 = (void *)a1[8];
  if (!(v62 >> 62))
  {
    v364 = v64;
    unint64_t v365 = v62;
    unint64_t v363 = v63;
    type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
    uint64_t v78 = v388;
    uint64_t v79 = swift_dynamicCastClass();
    if (v79)
    {
      uint64_t v80 = v79;
      *(void *)&long long v387 = v79 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id;
      v386 = *(void (**)(char *, uint64_t))(v79
                                                    + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_itemTypeValue);
      id v81 = *(void **)(v79 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData);
      uint64_t v82 = v79 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID;
      swift_beginAccess();
      sub_100522E9C(v82, (uint64_t)v61, (uint64_t *)&unk_101674520);
      sub_100522E9C(v82, (uint64_t)v57, (uint64_t *)&unk_101674520);
      *(void *)&long long v385 = v80 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier;
      int v83 = *(unsigned __int8 *)(v80 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_tombstoned);
      uint64_t v84 = swift_unknownObjectRetain_n();
      unint64_t v85 = v364;
      uint64_t v86 = v382;
      unint64_t v87 = v363;
      sub_100CE8FB4(v84, v365, v382, v363, v364);
      sub_1005FA2A0((uint64_t)v86, v87);
      swift_retain();
      *(void *)&long long v384 = v85;
      uint64_t v88 = v391;
      sub_100CA4704(v387, (uint64_t)v386, v81, (uint64_t)v61, (uint64_t)v57, v385, v83, (uint64_t)v86, v87, (uint64_t *)v389, 0);
      uint64_t v391 = v88;
      if (v88)
      {
        swift_release();
        sub_100514260((uint64_t)v86, v87);
        uint64_t v89 = v388;
        swift_unknownObjectRelease();
        sub_100CE8FC8(v89, v365, v86, v87, v364);

        swift_unknownObjectRelease();
        sub_100522F00((uint64_t)v57, (uint64_t *)&unk_101674520);
        uint64_t v90 = (uint64_t)v61;
        uint64_t v91 = (uint64_t *)&unk_101674520;
LABEL_12:
        sub_100522F00(v90, v91);
      }
      else
      {
        swift_release();
        swift_release();
        sub_100522F00((uint64_t)v57, (uint64_t *)&unk_101674520);
        sub_100522F00((uint64_t)v61, (uint64_t *)&unk_101674520);
        sub_1005E3A60(v80);

        sub_100514260((uint64_t)v86, v87);
        uint64_t v140 = v388;
        swift_unknownObjectRelease();
        sub_100CE8FC8(v140, v365, v86, v87, v364);
        swift_unknownObjectRelease();
      }
      return;
    }
    type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
    uint64_t v108 = swift_dynamicCastClass();
    if (v108)
    {
      *(void *)&long long v387 = v108 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
      v386 = (void (*)(char *, uint64_t))(v108
                                                  + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_rootContainerUUID);
      id v109 = *(void **)(v108 + OBJC_IVAR____TtC8Freeform29CRLBoardSyncLocalChangeRecord_boardData);
      int v110 = *(unsigned __int8 *)(v108 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_tombstoned);
      uint64_t v111 = v108 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_alternateRootContainerUUID;
      int v112 = *(unsigned __int8 *)(v108 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_hideFromRecentlyDeleted);
      uint64_t v113 = swift_unknownObjectRetain();
      uint64_t v114 = v364;
      id v115 = v382;
      unint64_t v116 = v363;
      sub_100CE8FB4(v113, v365, v382, v363, v364);
      sub_1005FA2A0((uint64_t)v115, v116);
      swift_retain();
      *(void *)&long long v389 = v114;
      uint64_t v117 = v391;
      sub_100CA6878(v387, (uint64_t)v386, v111, v109, v110, v112, (uint64_t)v115, v116, 0);
      sub_100514260((uint64_t)v115, v116);
      swift_release();
      sub_100CE8FC8(v78, v365, v115, v116, v114);

      swift_unknownObjectRelease();
      if (v117) {
        return;
      }
    }
    else
    {
      type metadata accessor for CRLUserBoardMetadataSyncLocalChangeRecord(0);
      uint64_t v141 = swift_dynamicCastClass();
      unint64_t v66 = v382;
      if (!v141)
      {
        type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
        uint64_t v155 = swift_dynamicCastClass();
        if (!v155)
        {
          type metadata accessor for CRLBoardShareSyncLocalChangeRecord(0);
          uint64_t v215 = swift_dynamicCastClass();
          if (!v215)
          {
            uint64_t v355 = swift_unknownObjectRetain();
            v356 = v364;
            unint64_t v357 = v363;
            sub_100CE8FB4(v355, v365, v66, v363, v364);
            sub_1005FA2A0((uint64_t)v66, v357);
            id v358 = v356;
            sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9529, (uint64_t)"Unknown record type", 19, 2u, (uint64_t)_swiftEmptyArrayStorage);
            sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unknown record type");
            uint64_t v359 = 9529;
            goto LABEL_127;
          }
          uint64_t v216 = v215;
          self;
          uint64_t v68 = v364;
          long long v217 = (void *)swift_dynamicCastObjCClass();
          if (v217) {
            id v218 = v68;
          }
          uint64_t v219 = v216 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier;
          uint64_t v220 = swift_unknownObjectRetain();
          unint64_t v69 = v365;
          unint64_t v67 = v363;
          sub_100CE8FB4(v220, v365, v66, v363, v68);
          sub_1005FA2A0((uint64_t)v66, v67);
          id v221 = v68;
          sub_100CA62F4(v219, v217);

          sub_100514260((uint64_t)v66, v67);
          swift_unknownObjectRelease();

          uint64_t v73 = v78;
          goto LABEL_7;
        }
        uint64_t v156 = v155;
        uint64_t v157 = swift_unknownObjectRetain_n();
        uint64_t v158 = v364;
        unint64_t v159 = v363;
        sub_100CE8FB4(v157, v365, v66, v363, v364);
        sub_1005FA2A0((uint64_t)v66, v159);
        uint64_t v160 = v158;
        uint64_t v161 = sub_100D2B6CC(0x6C6261656772654DLL, 0xEF74656B63754265, 1);
        if (v161)
        {
          unint64_t v162 = (void *)v161;
          uint64_t v163 = *(void *)(v156 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
          uint64_t v164 = *(void *)(v156 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_bucketData);
          unint64_t v165 = *(void *)(v156
                           + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_bucketData
                           + 8);
          uint64_t v167 = *(void *)(v156
                           + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions);
          uint64_t v166 = *(void *)(v156
                           + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                           + 8);
          v386 = *(void (**)(char *, uint64_t))(v156
                                                        + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                                                        + 16);
          *(void *)&long long v387 = v166;
          uint64_t v168 = *(void *)(v156
                           + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                           + 32);
          *(void *)&long long v385 = *(void *)(v156
                                       + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                                       + 24);
          *(void *)&long long v384 = v168;
          sub_100510D4C(v164, v165);
          sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
          uint64_t v169 = v391;
          Capsule<>.init(serializedData:allowedAppFormats:)();
          if (v169)
          {

            uint64_t v170 = v388;
            swift_unknownObjectRelease();

            uint64_t v171 = v382;
            unint64_t v172 = v363;
            sub_100514260((uint64_t)v382, v363);
            swift_unknownObjectRelease();
            uint64_t v173 = v170;
            unint64_t v174 = v365;
            uint64_t v175 = v171;
            unint64_t v176 = v172;
          }
          else
          {
            sub_1005057FC((uint64_t *)&unk_1016A8B70);
            long long v256 = (void *)swift_allocObject();
            uint64_t v391 = v167;
            unint64_t v257 = (unint64_t)v256;
            *((unsigned char *)v256 + *(void *)(*v256 + 136)) = 0;
            v256[2] = v163;
            uint64_t v258 = v371;
            (*(void (**)(char *, char *, uint64_t))(v371 + 32))((char *)v256 + *(void *)(*v256 + 120), v53, v373);
            *(unsigned char *)(v257 + *(void *)(*(void *)v257 + 136)) = 0;
            unint64_t v259 = (void *)(v257 + *(void *)(*(void *)v257 + 128));
            uint64_t v260 = v387;
            *unint64_t v259 = v391;
            v259[1] = v260;
            uint64_t v261 = v385;
            v259[2] = v386;
            id v259[3] = v261;
            v259[4] = v384;
            uint64_t v262 = v156 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier;
            id v263 = v162;
            uint64_t v264 = v262;
            uint64_t v265 = v382;
            unint64_t v266 = v363;
            sub_100CA449C(v264, v257, (uint64_t)v382, v363, (uint64_t)v162, (uint64_t *)v389);

            sub_100514260((uint64_t)v265, v266);
            swift_setDeallocating();
            (*(void (**)(unint64_t, uint64_t))(v258 + 8))(v257 + *(void *)(*(void *)v257 + 120), v373);
            swift_deallocClassInstance();
            uint64_t v267 = v388;
            swift_unknownObjectRelease_n();
            uint64_t v173 = v267;
            unint64_t v174 = v365;
            uint64_t v175 = v265;
            unint64_t v176 = v266;
          }
        }
        else
        {
          v390 = v160;
          if (qword_10166FB88 != -1) {
            swift_once();
          }
          swift_beginAccess();
          *(void *)&long long v389 = static OS_os_log.dataSync;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
          uint64_t v225 = *(void *)(v156 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
          *(void *)(inited + 56) = &type metadata for Int;
          *(void *)(inited + 64) = &protocol witness table for Int;
          *(void *)(inited + 32) = v225;
          uint64_t v226 = v381;
          sub_100CE144C(v156 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier, v381, type metadata accessor for CRLBoardIdentifier);
          uint64_t v228 = v378;
          uint64_t v227 = v379;
          uint64_t v229 = v380;
          (*(void (**)(char *, uint64_t, uint64_t))(v378 + 16))(v379, v226, v380);
          *(void *)&long long v389 = (id)v389;
          sub_100CE14B4(v226, type metadata accessor for CRLBoardIdentifier);
          uint64_t v230 = UUID.uuidString.getter();
          uint64_t v232 = v231;
          (*(void (**)(char *, uint64_t))(v228 + 8))(v227, v229);
          *(void *)(inited + 96) = &type metadata for String;
          *(void *)(inited + 104) = sub_100528BE4();
          *(void *)(inited + 72) = v230;
          *(void *)(inited + 80) = v232;
          uint64_t v233 = static os_log_type_t.error.getter();
          uint64_t v234 = (void *)v389;
          sub_100BAC898(v389, (uint64_t)&_mh_execute_header, v233, (uint64_t)"_sync_applySyncSaveResults unable to get ckMergeableRecordValue for bucket %{public}d, probably a partial record. Board: %{public}@", 131, 2, inited);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          uint64_t v235 = v388;
          swift_unknownObjectRelease();

          unint64_t v236 = v363;
          sub_100514260((uint64_t)v66, v363);
          swift_unknownObjectRelease();
          uint64_t v173 = v235;
          unint64_t v174 = v365;
          uint64_t v175 = v66;
          unint64_t v176 = v236;
        }
LABEL_84:
        sub_100CE8FC8(v173, v174, v175, v176, v364);
        return;
      }
      uint64_t v142 = *(void *)(v141 + OBJC_IVAR____TtC8Freeform41CRLUserBoardMetadataSyncLocalChangeRecord_boardMetadataData);
      uint64_t v143 = swift_unknownObjectRetain();
      uint64_t v144 = v364;
      unint64_t v145 = v365;
      unint64_t v146 = v363;
      sub_100CE8FB4(v143, v365, v66, v363, v364);
      sub_1005FA2A0((uint64_t)v66, v146);
      swift_retain();
      id v147 = v144;
      uint64_t v148 = v391;
      sub_100CA6E04(v142, (uint64_t)v66, v146);
      if (v148)
      {

        swift_release();
        sub_100514260((uint64_t)v66, v146);
        swift_unknownObjectRelease();
        uint64_t v73 = v78;
        unint64_t v74 = v145;
        id v75 = v66;
        unint64_t v76 = v146;
        uint64_t v77 = v144;
        goto LABEL_8;
      }

      sub_100514260((uint64_t)v66, v146);
      sub_100CE8FC8(v78, v145, v66, v146, v144);
      swift_unknownObjectRelease();
    }
    goto LABEL_32;
  }
  if (v62 >> 62 != 1)
  {
    uint64_t v92 = v382;
    if ((_BYTE)v63)
    {
      if (v63 == 1)
      {
        unint64_t v363 = v63;
        v364 = v64;
        unint64_t v93 = v63;
        unint64_t v94 = v62;
        unint64_t v365 = v62;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t v95 = swift_initStackObject();
        *(_OWORD *)(v95 + 16) = xmmword_10117E810;
        uint64_t v393 = 0x203A65707954;
        unint64_t v394 = 0xE600000000000000;
        uint64_t v96 = v388;
        sub_100CE8FB4(v388, v94, v92, v93, v64);
        sub_10081EB30(v92, 1u);
        swift_unknownObjectRetain();
        v97._uint64_t countAndFlagsBits = CKRecord.recordType.getter();
        String.append(_:)(v97);
        swift_bridgeObjectRelease();
        v98._uint64_t countAndFlagsBits = 0x203A444920;
        v98._object = (void *)0xE500000000000000;
        String.append(_:)(v98);
        id v99 = [v92 recordID];
        id v100 = [v99 recordName];

        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v103 = v102;

        v104._uint64_t countAndFlagsBits = v101;
        v104._object = v103;
        String.append(_:)(v104);
        swift_bridgeObjectRelease();
        uint64_t v105 = v393;
        unint64_t v106 = v394;
        *(void *)(v95 + 56) = &type metadata for String;
        *(void *)(v95 + 64) = sub_100528BE4();
        *(void *)(v95 + 32) = v105;
        *(void *)(v95 + 40) = v106;
        sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9658, (uint64_t)"Logic error. Failed to convert record to remote record object %{public}@", 72, 2u, v95);
        sub_1005598CC(v95, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9658);
        swift_unknownObjectRelease();
        id v107 = v382;
        sub_100CE8FC8(v96, v365, v382, v363, v364);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        swift_arrayDestroy();
        sub_10081EB44(v107, 1u);
      }
      return;
    }
    uint64_t v393 = (uint64_t)v382;
    id v118 = v64;
    unint64_t v119 = v63;
    unint64_t v120 = v62;
    unint64_t v365 = v62;
    sub_10081EB30(v382, 0);
    unint64_t v363 = v119;
    v364 = v118;
    sub_100CE8FB4(v388, v120, v92, v119, v118);
    uint64_t v121 = v92;
    sub_10081EB30(v92, 0);
    type metadata accessor for CKError(0);
    uint64_t v123 = v122;
    uint64_t v124 = sub_100CDE0D8((unint64_t *)&qword_101670DF8, type metadata accessor for CKError);
    swift_unknownObjectRetain();
    _BridgedStoredNSError.code.getter();
    unint64_t v125 = v365 & 0x3FFFFFFFFFFFFFFFLL;
    switch((unint64_t)v392)
    {
      case 0xAuLL:
        unint64_t v198 = v365;
        uint64_t v199 = v388;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v393 = v199;
        uint64_t v201 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v125 + 8) + 8))(ObjectType);
        swift_beginAccess();
        sub_100CBAB1C(&v395, v201, &qword_10167BED0, (uint64_t)CKRecordID_ptr, &qword_101699948);
        swift_endAccess();

        type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
        uint64_t v202 = swift_dynamicCastClass();
        if (!v202)
        {
          type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
          uint64_t v247 = swift_dynamicCastClass();
          unint64_t v248 = v121;
          if (v247)
          {
            if (*(unsigned char *)(v247 + OBJC_IVAR____TtC8Freeform29CRLBoardSyncLocalChangeRecord_unsyncedChanges))
            {
              uint64_t v249 = v247 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
              swift_unknownObjectRetain();
              uint64_t v250 = 0xD00000000000001ALL;
              uint64_t v251 = 0x80000001012818A0;
              uint64_t v252 = v249;
              goto LABEL_82;
            }
          }
          else
          {
            type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
            uint64_t v282 = swift_dynamicCastClass();
            if (!v282)
            {
              if (qword_10166FB88 != -1) {
                swift_once();
              }
              swift_beginAccess();
              id v289 = (id)static OS_os_log.dataSync;
              uint64_t v290 = static os_log_type_t.default.getter();
              sub_100BAC898((uint64_t)v289, (uint64_t)&_mh_execute_header, v290, (uint64_t)"Failed to apply sync save permission failure, unknown local record type", 71, 2, (uint64_t)_swiftEmptyArrayStorage);
              sub_10081EB44(v121, 0);
              sub_10081EB44(v121, 0);
              sub_100CE8FC8(v199, v198, v121, v363, v364);
              swift_unknownObjectRelease();

              return;
            }
            uint64_t v283 = v282;
            if ((*(unsigned char *)(v282
                           + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_unsyncedChanges) & 1) != 0)
            {
              *(void *)&long long v384 = *(void *)(v282
                                           + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
              long long v389 = *(_OWORD *)(v282
                               + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions);
              long long v387 = *(_OWORD *)(v282
                               + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                               + 16);
              v386 = *(void (**)(char *, uint64_t))(v282
                                                            + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                                                            + 32);
              uint64_t v393 = v384;
              swift_unknownObjectRetain();
              dispatch thunk of CustomStringConvertible.description.getter();
              sub_1005057FC(&qword_10169A220);
              sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
              sub_100523288(&qword_1016973B0, &qword_10169A220);
              sub_100523288((unint64_t *)&unk_10169A7B0, &qword_10169A220);
              CRDictionary.init()();
              uint64_t v295 = sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
              uint64_t v296 = v367;
              *(void *)&long long v385 = v295;
              Capsule<>.init(_:id:)();
              sub_1005057FC((uint64_t *)&unk_1016A8B70);
              uint64_t v297 = (void *)swift_allocObject();
              *((unsigned char *)v297 + *(void *)(*v297 + 136)) = 0;
              v297[2] = v384;
              uint64_t v298 = (char *)v297 + *(void *)(*v297 + 120);
              uint64_t v299 = v371;
              uint64_t v300 = v373;
              (*(void (**)(char *, char *, uint64_t))(v371 + 32))(v298, v296, v373);
              *((unsigned char *)v297 + *(void *)(*v297 + 136)) = 0;
              uint64_t v301 = (char *)v297 + *(void *)(*v297 + 128);
              long long v302 = v387;
              *(_OWORD *)uint64_t v301 = v389;
              *((_OWORD *)v301 + 1) = v302;
              *((void *)v301 + 4) = v386;
              swift_beginAccess();
              v303 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
              v304 = v369;
              v303(v369, v298, v300);
              if (qword_10166EE10 != -1) {
                swift_once();
              }
              uint64_t v305 = type metadata accessor for CRCodableVersion();
              sub_100556B74(v305, (uint64_t)qword_10171A2D8);
              uint64_t v306 = v391;
              *(void *)&long long v389 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
              if (v306)
              {
                v308 = *(void (**)(char *, uint64_t))(v371 + 8);
                v308(v304, v300);
                uint64_t v309 = v300;
                uint64_t v310 = v382;
                sub_10081EB44(v382, 0);
                sub_10081EB44(v310, 0);
                sub_100CE8FC8(v388, v198, v310, v363, v364);
                swift_setDeallocating();
                v308((char *)v297 + *(void *)(*v297 + 120), v309);
                swift_deallocClassInstance();
              }
              else
              {
                unint64_t v328 = v307;
                char v329 = *(void (**)(char *, uint64_t))(v371 + 8);
                v371 += 8;
                v386 = v329;
                v329(v304, v300);
                uint64_t v330 = v366;
                sub_100CE144C(v283 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier, v366, type metadata accessor for CRLBoardIdentifier);
                uint64_t v331 = v297[2];
                long long v332 = *(_OWORD *)v301;
                long long v384 = *((_OWORD *)v301 + 1);
                long long v385 = v332;
                uint64_t v383 = *((void *)v301 + 4);
                type metadata accessor for CRLFreehandDrawingBucketDatabaseRow();
                uint64_t v333 = swift_allocObject();
                uint64_t v391 = 0;
                long long v387 = xmmword_101190880;
                *(_OWORD *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData) = xmmword_101190880;
                *(_OWORD *)(v333
                          + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = xmmword_101190880;
                sub_100CE12D8(v330, v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
                *(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v331;
                v334 = (void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
                uint64_t v335 = v389;
                void *v334 = v389;
                v334[1] = v328;
                unint64_t v336 = v328;
                *(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = 0;
                uint64_t v337 = *(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
                unint64_t v338 = *(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
                *(_OWORD *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData) = v387;
                sub_100510D4C(v335, v336);
                sub_100514260(v337, v338);
                uint64_t v339 = *(void *)(v333
                                 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
                unint64_t v340 = *(void *)(v333
                                 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                                 + 8);
                *(_OWORD *)(v333
                          + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = v387;
                sub_100514260(v339, v340);
                uint64_t v341 = v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
                long long v342 = v384;
                *(_OWORD *)uint64_t v341 = v385;
                *(_OWORD *)(v341 + 16) = v342;
                *(void *)(v341 + 32) = v383;
                uint64_t v343 = v391;
                sub_100C82C64(v333);
                if (!v343)
                {
                  v349 = v382;
                  sub_10081EB44(v382, 0);
                  sub_10081EB44(v349, 0);
                  uint64_t v350 = v388;
                  swift_unknownObjectRelease_n();
                  sub_100CE8FC8(v350, v198, v349, v363, v364);
                  swift_setDeallocating();
                  sub_100CE14B4(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
                  sub_100510084(*(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
                  sub_100514260(*(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
                  sub_100514260(*(void *)(v333+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(void *)(v333+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
                  swift_deallocClassInstance();
                  sub_100510084(v335, v336);
                  swift_setDeallocating();
                  v386((char *)v297 + *(void *)(*v297 + 120), v373);
                  swift_deallocClassInstance();
                  return;
                }
                v344 = v382;
                sub_10081EB44(v382, 0);
                sub_10081EB44(v344, 0);
                sub_100CE8FC8(v388, v198, v344, v363, v364);
                swift_setDeallocating();
                sub_100CE14B4(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
                sub_100510084(*(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
                sub_100514260(*(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(void *)(v333 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
                sub_100514260(*(void *)(v333+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(void *)(v333+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
                swift_deallocClassInstance();
                sub_100510084(v335, v336);
                swift_setDeallocating();
                v386((char *)v297 + *(void *)(*v297 + 120), v373);
                swift_deallocClassInstance();
              }
              swift_unknownObjectRelease_n();
              return;
            }
          }
          swift_unknownObjectRetain();
          sub_10081EB44(v248, 0);
          sub_10081EB44(v248, 0);
          swift_unknownObjectRelease_n();
          uint64_t v203 = v199;
          unint64_t v204 = v198;
          uint64_t v205 = v248;
          goto LABEL_96;
        }
        if ((*(unsigned char *)(v202 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_unsyncedChanges) & 1) == 0)
        {
          swift_unknownObjectRetain();
          sub_10081EB44(v121, 0);
          sub_10081EB44(v121, 0);
          swift_unknownObjectRelease_n();
          uint64_t v203 = v199;
          unint64_t v204 = v198;
          uint64_t v205 = v121;
          goto LABEL_96;
        }
LABEL_85:
        uint64_t v268 = (sqlite3_stmt **)(v202 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id);
        uint64_t v269 = v202 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier;
        swift_unknownObjectRetain();
        sub_100C60988(v268, v269);
        swift_unknownObjectRelease();
        sub_100CE8FC8(v199, v198, v121, v363, v364);
        swift_unknownObjectRelease();
        sub_10081EB44(v121, 0);
        sub_10081EB44(v121, 0);
        return;
      case 0xBuLL:
        unint64_t v198 = v365;
        type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
        uint64_t v199 = v388;
        uint64_t v202 = swift_dynamicCastClass();
        if (v202) {
          goto LABEL_85;
        }
        type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
        uint64_t v253 = swift_dynamicCastClass();
        uint64_t v254 = v391;
        unint64_t v248 = v121;
        if (v253)
        {
          uint64_t v255 = v253 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
          swift_unknownObjectRetain();
          uint64_t v251 = 0x8000000101281A40;
          uint64_t v252 = v255;
          uint64_t v250 = 0xD000000000000014;
LABEL_82:
          sub_100C6F5CC(v252, v250, v251, 0);
          sub_10081EB44(v248, 0);
          sub_10081EB44(v248, 0);
          swift_unknownObjectRelease_n();
          uint64_t v73 = v199;
          unint64_t v74 = v198;
          id v75 = v248;
          unint64_t v76 = v363;
          uint64_t v77 = v364;
          goto LABEL_8;
        }
        type metadata accessor for CRLUserBoardMetadataSyncLocalChangeRecord(0);
        uint64_t v284 = swift_dynamicCastClass();
        if (!v284)
        {
          type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
          uint64_t v291 = swift_dynamicCastClass();
          if (!v291)
          {
            type metadata accessor for CRLBoardShareSyncLocalChangeRecord(0);
            uint64_t v311 = swift_dynamicCastClass();
            if (!v311)
            {
              while (1)
              {
                sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9581, (uint64_t)"Unknown record type", 19, 2u, (uint64_t)_swiftEmptyArrayStorage);
                sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unknown record type");
                uint64_t v359 = 9581;
LABEL_127:
                sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, v359);
                SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v360, v361);
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
            }
            uint64_t v312 = v311;
            uint64_t v313 = qword_10166FB88;
            swift_unknownObjectRetain();
            if (v313 != -1) {
              swift_once();
            }
            swift_beginAccess();
            v314 = (void *)static OS_os_log.dataSync;
            sub_1005057FC((uint64_t *)&unk_101672B40);
            uint64_t v315 = swift_initStackObject();
            *(_OWORD *)(v315 + 16) = xmmword_10117E810;
            uint64_t v316 = v312 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier;
            *(void *)&long long v389 = v312 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier;
            uint64_t v317 = v381;
            sub_100CE144C(v316, v381, type metadata accessor for CRLBoardIdentifier);
            uint64_t v319 = v378;
            uint64_t v318 = v379;
            uint64_t v320 = v380;
            (*(void (**)(char *, uint64_t, uint64_t))(v378 + 16))(v379, v317, v380);
            id v321 = v314;
            sub_100CE14B4(v317, type metadata accessor for CRLBoardIdentifier);
            uint64_t v322 = UUID.uuidString.getter();
            uint64_t v324 = v323;
            (*(void (**)(char *, uint64_t))(v319 + 8))(v318, v320);
            *(void *)(v315 + 56) = &type metadata for String;
            *(void *)(v315 + 64) = sub_100528BE4();
            *(void *)(v315 + 32) = v322;
            *(void *)(v315 + 40) = v324;
            uint64_t v325 = static os_log_type_t.default.getter();
            sub_100BAC898((uint64_t)v321, (uint64_t)&_mh_execute_header, v325, (uint64_t)"Board %{public}@ set ckShare to nil with reason: CKError Unknown Item.", 70, 2, v315);
            swift_setDeallocating();
            sub_1005057FC(&qword_101672B50);
            swift_arrayDestroy();

            sub_100C7C61C(v389, 0, 0);
            char v326 = v382;
            sub_10081EB44(v382, 0);
            sub_10081EB44(v326, 0);
            uint64_t v327 = v388;
            swift_unknownObjectRelease_n();
            uint64_t v73 = v327;
            unint64_t v74 = v198;
            id v75 = v326;
LABEL_48:
            unint64_t v76 = v363;
            uint64_t v77 = v364;
            goto LABEL_8;
          }
          uint64_t v292 = v291 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier;
          uint64_t v293 = *(void *)(v291 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
          swift_unknownObjectRetain();
          uint64_t v294 = sub_100C822AC(v292, v293);
          if (v254)
          {
            sub_10081EB44(v121, 0);
            sub_10081EB44(v121, 0);
            swift_unknownObjectRelease_n();
            uint64_t v203 = v199;
            unint64_t v204 = v198;
            uint64_t v205 = v121;
          }
          else
          {
            uint64_t v345 = v294;
            if (v294)
            {
              v346 = (_OWORD *)(v294 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
              uint64_t v347 = *(void *)(v294 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
              unint64_t v348 = *(void *)(v345 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
              _OWORD *v346 = xmmword_101190880;
              sub_100514260(v347, v348);
              sub_100C82C64(v345);
              v353 = v382;
              sub_10081EB44(v382, 0);
              sub_10081EB44(v353, 0);
              uint64_t v354 = v388;
              swift_unknownObjectRelease_n();
              sub_100CE8FC8(v354, v198, v353, v363, v364);
              break;
            }
            v351 = v382;
            sub_10081EB44(v382, 0);
            sub_10081EB44(v351, 0);
            uint64_t v352 = v388;
            swift_unknownObjectRelease_n();
            uint64_t v203 = v352;
            unint64_t v204 = v198;
            uint64_t v205 = v351;
          }
LABEL_96:
          sub_100CE8FC8(v203, v204, v205, v363, v364);
          return;
        }
        uint64_t v285 = v284 + OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier;
        swift_unknownObjectRetain();
        uint64_t v286 = sub_100C68104(v285);
        if (v254 || !v286)
        {
          sub_10081EB44(v121, 0);
          sub_10081EB44(v121, 0);
          swift_unknownObjectRelease_n();
          sub_100CE8FC8(v199, v198, v121, v363, v364);
          return;
        }
        *(void *)(v286 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges) = 0;
        sub_100C687A0(v286);
        sub_10081EB44(v121, 0);
        sub_10081EB44(v121, 0);
        swift_unknownObjectRelease_n();
        sub_100CE8FC8(v199, v198, v121, v363, v364);
        break;
      case 0xCuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x13uLL:
      case 0x19uLL:
      case 0x1BuLL:
      case 0x1FuLL:
      case 0x22uLL:
      case 0x23uLL:
        *(void *)&long long v389 = v124;
        type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
        uint64_t v126 = v388;
        uint64_t v127 = swift_dynamicCastClass();
        if (!v127)
        {
          type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
          uint64_t v149 = swift_dynamicCastClass();
          uint64_t v150 = v126;
          if (v149)
          {
            uint64_t v151 = v149;
            v392 = v121;
            swift_unknownObjectRetain();
            _BridgedStoredNSError.code.getter();
            if (v393 == 34 || (v392 = v121, _BridgedStoredNSError.code.getter(), v393 == 25))
            {
              uint64_t v152 = v151 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
              uint64_t v153 = v381;
              sub_100CE144C(v152, v381, type metadata accessor for CRLBoardIdentifier);
              swift_beginAccess();
              uint64_t v154 = sub_100FB90F0(v153);
              *(unsigned char *)(v154 + 16) = 1;
              *(unsigned char *)(v154 + 42) = 1;
            }
            else
            {
              uint64_t v222 = v151 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
              uint64_t v153 = v381;
              sub_100CE144C(v222, v381, type metadata accessor for CRLBoardIdentifier);
              swift_beginAccess();
              *(unsigned char *)(sub_100FB90F0(v153) + 16) = 1;
            }
            swift_endAccess();
            swift_unknownObjectRelease();
            swift_release();
            sub_100CE8FC8(v126, v365, v121, v363, v364);
            swift_unknownObjectRelease();
            sub_10081EB44(v121, 0);
            unint64_t v223 = v121;
          }
          else
          {
            type metadata accessor for CRLUserBoardMetadataSyncLocalChangeRecord(0);
            uint64_t v178 = swift_dynamicCastClass();
            uint64_t v179 = v391;
            if (v178)
            {
              uint64_t v180 = v178;
              v392 = v121;
              swift_unknownObjectRetain();
              _BridgedStoredNSError.code.getter();
              if (v393 == 31)
              {
                sub_1005057FC((uint64_t *)&unk_101672B40);
                uint64_t v181 = swift_initStackObject();
                *(_OWORD *)(v181 + 16) = xmmword_10117E810;
                uint64_t v182 = v381;
                sub_100CE144C(v180 + OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier, v381, type metadata accessor for CRLBoardIdentifier);
                uint64_t v183 = v378;
                unint64_t v184 = v379;
                uint64_t v185 = v380;
                (*(void (**)(char *, uint64_t, uint64_t))(v378 + 16))(v379, v182, v380);
                sub_100CE14B4(v182, type metadata accessor for CRLBoardIdentifier);
                uint64_t v186 = UUID.uuidString.getter();
                uint64_t v188 = v187;
                (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v185);
                *(void *)(v181 + 56) = &type metadata for String;
                *(void *)(v181 + 64) = sub_100528BE4();
                *(void *)(v181 + 32) = v186;
                *(void *)(v181 + 40) = v188;
                sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9603, (uint64_t)"Logic error. A reference violation for UserBoardMetadata should never happen because the record does not save any references. Metadata boardIdentifier %{public}@", 161, 2u, v181);
                uint64_t v189 = v391;
                uint64_t v121 = v382;
                uint64_t v150 = v388;
                sub_1005598CC(v181, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9603);
                swift_setDeallocating();
                sub_1005057FC(&qword_101672B50);
                uint64_t v179 = v189;
                swift_arrayDestroy();
              }
              uint64_t v190 = sub_100C68104(v180 + OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier);
              if (v179 || !v190)
              {
                sub_10081EB44(v121, 0);
                sub_10081EB44(v121, 0);
                swift_unknownObjectRelease_n();
                uint64_t v73 = v150;
                unint64_t v74 = v365;
                id v75 = v121;
                goto LABEL_48;
              }
              *(void *)(v190 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges) = 0;
              sub_100C687A0(v190);
              sub_10081EB44(v121, 0);
              sub_10081EB44(v121, 0);
              swift_unknownObjectRelease_n();
              sub_100CE8FC8(v150, v365, v121, v363, v364);
              swift_release();
              return;
            }
            type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
            uint64_t v244 = swift_dynamicCastClass();
            if (v244)
            {
              uint64_t v245 = *(void *)(v244 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
              uint64_t v246 = v381;
              sub_100CE144C(v244 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier, v381, type metadata accessor for CRLBoardIdentifier);
              swift_beginAccess();
              swift_unknownObjectRetain();
              sub_100FB90F0(v246);
              swift_beginAccess();
              sub_100CBBFC4((uint64_t *)&v395, v245);
              swift_endAccess();
              swift_release();
              swift_endAccess();
              swift_unknownObjectRelease();
              sub_100CE8FC8(v126, v365, v121, v363, v364);
              swift_unknownObjectRelease();
              sub_10081EB44(v121, 0);
              sub_10081EB44(v121, 0);
              sub_100CE14B4(v246, type metadata accessor for CRLBoardIdentifier);
              return;
            }
            type metadata accessor for CRLBoardShareSyncLocalChangeRecord(0);
            uint64_t v281 = swift_dynamicCastClass();
            if (!v281)
            {
              if (qword_10166FB88 != -1) {
                swift_once();
              }
              swift_beginAccess();
              id v287 = (id)static OS_os_log.dataSync;
              uint64_t v288 = static os_log_type_t.default.getter();
              sub_100BAC898((uint64_t)v287, (uint64_t)&_mh_execute_header, v288, (uint64_t)"Failed to apply sync save causing transient sync exclusion, unknown local record type", 85, 2, (uint64_t)_swiftEmptyArrayStorage);
              sub_10081EB44(v121, 0);
              sub_10081EB44(v121, 0);
              sub_100CE8FC8(v126, v365, v121, v363, v364);
              swift_unknownObjectRelease();

              return;
            }
            uint64_t v153 = v381;
            sub_100CE144C(v281 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier, v381, type metadata accessor for CRLBoardIdentifier);
            swift_beginAccess();
            swift_unknownObjectRetain();
            *(unsigned char *)(sub_100FB90F0(v153) + 17) = 1;
            swift_endAccess();
            swift_unknownObjectRelease();
            swift_release();
            sub_100CE8FC8(v126, v365, v121, v363, v364);
            swift_unknownObjectRelease();
            sub_10081EB44(v121, 0);
            unint64_t v223 = v121;
          }
          sub_10081EB44(v223, 0);
          sub_100CE14B4(v153, type metadata accessor for CRLBoardIdentifier);
          return;
        }
        uint64_t v128 = v127;
        *(void *)&long long v387 = v123;
        uint64_t v129 = v378;
        uint64_t v130 = v379;
        v386 = *(void (**)(char *, uint64_t))(v378 + 16);
        ((void (*)(char *, uint64_t, uint64_t))v386)(v379, v127 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id, v380);
        *(void *)&long long v385 = v128 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier;
        uint64_t v131 = v381;
        sub_100CE144C(v128 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier, v381, type metadata accessor for CRLBoardIdentifier);
        uint64_t v132 = &v390[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
        swift_beginAccess();
        swift_unknownObjectRetain();
        v390 = v132;
        sub_100FB90F0(v131);
        uint64_t v133 = v380;
        ((void (*)(char *, char *, uint64_t))v386)(v21, v130, v380);
        uint64_t v134 = v382;
        swift_beginAccess();
        sub_100CB4BC8((uint64_t)v25, v21);
        uint64_t v135 = *(void (**)(char *, uint64_t))(v129 + 8);
        v135(v25, v133);
        swift_endAccess();
        swift_release();
        swift_endAccess();
        sub_100CE14B4(v381, type metadata accessor for CRLBoardIdentifier);
        v135(v379, v133);
        v392 = v134;
        _BridgedStoredNSError.code.getter();
        if (v393 == 34 || (v392 = v134, _BridgedStoredNSError.code.getter(), v393 == 25))
        {
          uint64_t v136 = v381;
          sub_100CE144C(v385, v381, type metadata accessor for CRLBoardIdentifier);
          swift_beginAccess();
          uint64_t v137 = sub_100FB90F0(v136);
          *(unsigned char *)(v137 + 16) = 1;
          *(unsigned char *)(v137 + 42) = 1;
          swift_endAccess();
          uint64_t v138 = v388;
          swift_unknownObjectRelease();
          swift_release();
          sub_100CE8FC8(v138, v365, v134, v363, v364);
          swift_unknownObjectRelease();
          sub_10081EB44(v134, 0);
          sub_10081EB44(v134, 0);
          uint64_t v139 = v136;
          goto LABEL_27;
        }
        sub_10081EB44(v134, 0);
        sub_10081EB44(v134, 0);
        uint64_t v177 = v388;
        swift_unknownObjectRelease_n();
        uint64_t v173 = v177;
        unint64_t v174 = v365;
        uint64_t v175 = v134;
LABEL_53:
        unint64_t v176 = v363;
        goto LABEL_84;
      case 0x1AuLL:
        if ((a9 & 1) == 0)
        {
          sub_10081EB44(v121, 0);
          sub_10081EB44(v121, 0);
          uint64_t v197 = v388;
          swift_unknownObjectRelease();
          uint64_t v173 = v197;
          unint64_t v174 = v365;
          uint64_t v175 = v121;
          goto LABEL_53;
        }
        uint64_t v239 = v388;
        uint64_t v240 = swift_getObjectType();
        uint64_t v393 = v239;
        uint64_t v241 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v125 + 8) + 8))(v240);
        id v242 = [v241 zoneID];

        uint64_t v243 = v372;
        sub_100D29C10(v372);

        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v377 + 48))(v243, 1, v29) == 1)
        {
          sub_10081EB44(v121, 0);
          sub_10081EB44(v121, 0);
          swift_unknownObjectRelease();
          sub_100CE8FC8(v239, v365, v121, v363, v364);
          sub_100522F00(v243, &qword_101672C30);
        }
        else
        {
          v390 = a10;
          uint64_t v270 = v370;
          sub_100CE12D8(v243, v370, type metadata accessor for CRLBoardIdentifier);
          if (qword_10166FB88 != -1) {
            swift_once();
          }
          swift_beginAccess();
          unint64_t v271 = (void *)static OS_os_log.dataSync;
          sub_1005057FC((uint64_t *)&unk_101672B40);
          uint64_t v272 = swift_initStackObject();
          *(_OWORD *)(v272 + 16) = xmmword_10117E810;
          id v273 = v271;
          uint64_t v274 = UUID.uuidString.getter();
          uint64_t v276 = v275;
          *(void *)(v272 + 56) = &type metadata for String;
          *(void *)(v272 + 64) = sub_100528BE4();
          *(void *)(v272 + 32) = v274;
          *(void *)(v272 + 40) = v276;
          uint64_t v277 = static os_log_type_t.default.getter();
          sub_100BAC898((uint64_t)v273, (uint64_t)&_mh_execute_header, v277, (uint64_t)"Adding board identifier to be purged in response to zoneNotFound for shared zone %{public}@ .", 93, 2, v272);
          swift_setDeallocating();
          sub_1005057FC(&qword_101672B50);
          swift_arrayDestroy();

          uint64_t v278 = v374;
          sub_100CE144C(v270, v374, type metadata accessor for CRLBoardIdentifier);
          uint64_t v279 = v381;
          sub_100CB7090(v381, v278);
          uint64_t v280 = v388;
          swift_unknownObjectRelease();
          sub_100CE8FC8(v280, v365, v121, v363, v364);
          sub_10081EB44(v121, 0);
          sub_10081EB44(v121, 0);
          sub_100CE14B4(v279, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4(v270, type metadata accessor for CRLBoardIdentifier);
        }
        return;
      case 0x1CuLL:
        unint64_t v191 = v365;
        uint64_t v192 = v388;
        uint64_t v193 = swift_getObjectType();
        uint64_t v393 = v192;
        uint64_t v194 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v125 + 8) + 8))(v193);
        id v195 = [v194 zoneID];

        uint64_t v196 = v376;
        sub_100D29C10(v376);

        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v377 + 48))(v196, 1, v29) == 1)
        {
          sub_10081EB44(v121, 0);
          sub_10081EB44(v121, 0);
          swift_unknownObjectRelease();
          sub_100CE8FC8(v192, v191, v121, v363, v364);
          uint64_t v91 = &qword_101672C30;
          uint64_t v90 = v196;
          goto LABEL_12;
        }
        sub_100CE12D8(v196, (uint64_t)v32, type metadata accessor for CRLBoardIdentifier);
        uint64_t v237 = v374;
        sub_100CE144C((uint64_t)v32, v374, type metadata accessor for CRLBoardIdentifier);
        uint64_t v238 = v381;
        sub_100CB7090(v381, v237);
        swift_unknownObjectRelease();
        sub_100CE8FC8(v192, v191, v121, v363, v364);
        sub_10081EB44(v121, 0);
        sub_10081EB44(v121, 0);
        sub_100CE14B4(v238, type metadata accessor for CRLBoardIdentifier);
        uint64_t v139 = (uint64_t)v32;
LABEL_27:
        sub_100CE14B4(v139, type metadata accessor for CRLBoardIdentifier);
        return;
      default:
        unint64_t v206 = v365;
        if (qword_10166FB88 != -1) {
          swift_once();
        }
        swift_beginAccess();
        unint64_t v207 = (void *)static OS_os_log.dataSync;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t v208 = swift_initStackObject();
        *(_OWORD *)(v208 + 16) = xmmword_10117E810;
        id v395 = v121;
        sub_100CDE0D8(&qword_101670DB8, type metadata accessor for CKError);
        id v209 = v207;
        uint64_t v210 = Error.localizedDescription.getter();
        uint64_t v212 = v211;
        *(void *)(v208 + 56) = &type metadata for String;
        *(void *)(v208 + 64) = sub_100528BE4();
        *(void *)(v208 + 32) = v210;
        *(void *)(v208 + 40) = v212;
        uint64_t v213 = static os_log_type_t.default.getter();
        sub_100BAC898((uint64_t)v209, (uint64_t)&_mh_execute_header, v213, (uint64_t)"Failed to apply sync save result because of an unhandled CKError %@", 67, 2, v208);
        sub_10081EB44(v121, 0);
        sub_10081EB44(v121, 0);
        uint64_t v214 = v388;
        swift_unknownObjectRelease();
        sub_100CE8FC8(v214, v206, v121, v363, v364);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        swift_arrayDestroy();

        return;
    }
LABEL_32:
    swift_release();
    return;
  }
  uint64_t v65 = v388;
  unint64_t v66 = v382;
  unint64_t v67 = v63;
  uint64_t v68 = v64;
  unint64_t v69 = v62;
  sub_100CE8FB4(v388, v62, v382, v63, v64);
  uint64_t v70 = swift_unknownObjectRetain();
  uint64_t v71 = v391;
  char v72 = sub_100CA8EC8(v70, v67, 0, 1, (uint64_t *)v389, v385, (uint64_t)v386, v387, (unsigned char *)v384);
  if (v71)
  {
    swift_unknownObjectRelease();
    uint64_t v73 = v65;
LABEL_7:
    unint64_t v74 = v69;
    id v75 = v66;
    unint64_t v76 = v67;
    uint64_t v77 = v68;
LABEL_8:
    sub_100CE8FC8(v73, v74, v75, v76, v77);
    return;
  }
  if ((v72 & 1) == 0)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9533, (uint64_t)"Failed to handle remote record!", 31, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9533);
  }
  sub_100CE8FC8(v65, v69, v66, v67, v64);
  swift_unknownObjectRelease();
}

uint64_t sub_100CB1C14(sqlite3_stmt **a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v7 = __chkstk_darwin(v4, v6);
  id v9 = (sqlite3_stmt ***)((char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *id v9 = v10;
  uint64_t v11 = *(void (**)(void, __n128))(v5 + 104);
  unsigned int v44 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v45 = (void (*)(void *, void, uint64_t))v11;
  v11(v9, v7);
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t v46 = *(void (**)(void *, uint64_t))(v5 + 8);
  v46(v9, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  strcpy((char *)v49, "DELETE FROM ");
  BYTE5(v49[1]) = 0;
  HIWORD(v49[1]) = -5120;
  unint64_t v13 = 0xE600000000000000;
  uint64_t v43 = a1;
  unint64_t v14 = 0x736472616F62;
  switch((char)a1)
  {
    case 1:
      unint64_t v14 = 0x74695F6472616F62;
      unint64_t v13 = 0xEB00000000736D65;
      break;
    case 2:
      unint64_t v14 = 0x756C61765F79656BLL;
      unint64_t v13 = 0xEE00617461645F65;
      break;
    case 3:
      unint64_t v14 = 0x737465737361;
      break;
    case 4:
      unint64_t v13 = 0x800000010127C660;
      unint64_t v14 = 0xD000000000000010;
      break;
    case 5:
      unint64_t v14 = 0xD000000000000015;
      uint64_t v15 = "command_history_items";
      goto LABEL_11;
    case 6:
      unint64_t v14 = 0xD000000000000020;
      uint64_t v15 = "command_history_asset_references";
      goto LABEL_11;
    case 7:
      unint64_t v14 = 0x6D5F736472616F62;
      unint64_t v13 = 0xEF61746164617465;
      break;
    case 8:
      unint64_t v14 = 0xD000000000000018;
      uint64_t v15 = "freehand_drawing_buckets";
LABEL_11:
      unint64_t v13 = (unint64_t)(v15 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v16 = v13;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 59;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  uint64_t v18 = v49[0];
  uint64_t v19 = v49[1];
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v20 = swift_retain();
  uint64_t v21 = sub_10079FC40(v20, v18, v19);
  uint64_t result = swift_release();
  if (!v2)
  {
    uint64_t v23 = *(void **)(*(void *)(v21 + 16) + 32);
    *id v9 = v23;
    v45(v9, v44, v4);
    id v24 = v23;
    LOBYTE(v23) = _dispatchPreconditionTest(_:)();
    v46(v9, v4);
    if (v23)
    {
      int v25 = (sqlite3_stmt **)(v21 + 24);
      swift_beginAccess();
      int v26 = sqlite3_step(*(sqlite3_stmt **)(v21 + 24));
      if (v26 != 101)
      {
        int v30 = v26;
        unint64_t v47 = 0;
        unint64_t v48 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        unint64_t v47 = 0xD000000000000021;
        unint64_t v48 = 0x800000010127C6A0;
        unint64_t v31 = 0xE600000000000000;
        uint64_t v32 = v43;
        uint64_t v43 = (sqlite3_stmt **)(v21 + 24);
        unint64_t v33 = 0x736472616F62;
        switch(v32)
        {
          case 1:
            unint64_t v33 = 0x74695F6472616F62;
            unint64_t v31 = 0xEB00000000736D65;
            break;
          case 2:
            unint64_t v33 = 0x756C61765F79656BLL;
            unint64_t v31 = 0xEE00617461645F65;
            break;
          case 3:
            unint64_t v33 = 0x737465737361;
            break;
          case 4:
            unint64_t v31 = 0x800000010127C660;
            unint64_t v33 = 0xD000000000000010;
            break;
          case 5:
            unint64_t v33 = 0xD000000000000015;
            uint64_t v34 = "command_history_items";
            goto LABEL_27;
          case 6:
            unint64_t v33 = 0xD000000000000020;
            uint64_t v34 = "command_history_asset_references";
            goto LABEL_27;
          case 7:
            unint64_t v33 = 0x6D5F736472616F62;
            unint64_t v31 = 0xEF61746164617465;
            break;
          case 8:
            unint64_t v33 = 0xD000000000000018;
            uint64_t v34 = "freehand_drawing_buckets";
LABEL_27:
            unint64_t v31 = (unint64_t)(v34 - 32) | 0x8000000000000000;
            break;
          default:
            break;
        }
        unint64_t v35 = v31;
        String.append(_:)(*(Swift::String *)&v33);
        swift_bridgeObjectRelease();
        unint64_t v36 = v47;
        unint64_t v37 = v48;
        sub_10079FF00();
        swift_allocError();
        *(_DWORD *)uint64_t v38 = v30;
        *(void *)(v38 + 8) = v36;
        *(void *)(v38 + 16) = v37;
        swift_willThrow();
        uint64_t v39 = *(void **)(*(void *)(v21 + 16) + 32);
        *id v9 = v39;
        v45(v9, v44, v4);
        id v40 = v39;
        char v41 = _dispatchPreconditionTest(_:)();
        v46(v9, v4);
        if (v41)
        {
          uint64_t v42 = v43;
          if (*v43)
          {
            sqlite3_finalize(*v43);
            *uint64_t v42 = 0;
          }
          return swift_release();
        }
LABEL_36:
        __break(1u);
      }
      uint64_t v27 = *(void **)(*(void *)(v21 + 16) + 32);
      *id v9 = v27;
      v45(v9, v44, v4);
      id v28 = v27;
      char v29 = _dispatchPreconditionTest(_:)();
      v46(v9, v4);
      if (v29)
      {
        if (*v25)
        {
          sqlite3_finalize(*v25);
          *int v25 = 0;
        }
        return swift_release();
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  return result;
}

void sub_100CB2260(void *a1)
{
  uint64_t v1 = a1;
  sub_10054813C(v1, (uint64_t)v1);
}

uint64_t sub_100CB22B8(void *a1)
{
  id v1 = a1;
  OS_dispatch_queue.sync<A>(execute:)();

  return 1;
}

uint64_t sub_100CB235C(uint64_t a1)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101674170);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v102 = (uint64_t)v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_1005057FC((uint64_t *)&unk_101684F90);
  uint64_t v85 = *(void *)(v101 - 8);
  __chkstk_darwin(v101, v7);
  unint64_t v87 = (char *)v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v86 = (char *)v84 - v11;
  uint64_t v100 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v100 - 8);
  __chkstk_darwin(v100, v13);
  unint64_t v106 = (char *)v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1005057FC((uint64_t *)&unk_10169A730);
  uint64_t v98 = *(void *)(v15 - 8);
  uint64_t v99 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v110 = (uint64_t)v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v111 = (void *)((char *)v84 - v20);
  uint64_t v103 = type metadata accessor for UUID();
  uint64_t v88 = *(void *)(v103 - 8);
  __chkstk_darwin(v103, v21);
  uint64_t v104 = (uint64_t)v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  __n128 v26 = __chkstk_darwin(v23, v25);
  id v28 = (void *)((char *)v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v29 = *(void **)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *id v28 = v29;
  (*(void (**)(void *, void, unint64_t, __n128))(v24 + 104))(v28, enum case for DispatchPredicate.onQueue(_:), v23, v26);
  id v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, unint64_t))(v24 + 8))(v28, v23);
  if ((v29 & 1) == 0) {
    goto LABEL_43;
  }
  unint64_t v31 = (unint64_t)sub_100C91FB4(a1);
  if (v2) {
    return (uint64_t)v28;
  }
  unint64_t v23 = v31;
  Swift::String v97 = v1;
  v84[1] = 0;
  if (v31 >> 62) {
    goto LABEL_44;
  }
  uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v33 = v104;
  if (!v32)
  {
LABEL_45:
    id v28 = _swiftEmptyDictionarySingleton;
LABEL_46:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v28;
  }
  while (v32 >= 1)
  {
    uint64_t v34 = 0;
    uint64_t v35 = *(void *)&v97[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
    unint64_t v96 = v23 & 0xC000000000000001;
    uint64_t v108 = (void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16);
    unint64_t v94 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56);
    uint64_t v95 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
    id v28 = _swiftEmptyDictionarySingleton;
    uint64_t v109 = v12 + 32;
    uint64_t v36 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
    uint64_t v89 = (void (**)(uint64_t, uint64_t))(v88 + 8);
    uint64_t v12 = v103;
    uint64_t v90 = v32;
    uint64_t v93 = v35;
    uint64_t v92 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
    unint64_t v91 = v23;
    while (1)
    {
      if (v96)
      {
        uint64_t v37 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v37 = *(void *)(v23 + 8 * v34 + 32);
        swift_retain();
      }
      uint64_t v38 = v37 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID;
      id v107 = *v108;
      v107(v33, v37 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID, v12);
      *uint64_t v111 = v37;
      uint64_t v39 = *(os_unfair_lock_s **)(v35 + 16);
      uint64_t v112 = v37;
      swift_retain();
      os_unfair_lock_lock(v39);
      id v40 = v97;
      char v41 = *(void **)&v97[v36];
      if (v41)
      {
        uint64_t v42 = *(char **)&v97[v36];
      }
      else
      {
        id v43 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager());
        unsigned int v44 = v40;
        id v45 = sub_100EAFDE4((uint64_t)v44);

        uint64_t v46 = *(void **)&v40[v36];
        *(void *)&v40[v36] = v45;
        uint64_t v42 = (char *)v45;

        char v41 = 0;
      }
      unint64_t v47 = *(os_unfair_lock_s **)(v35 + 16);
      id v48 = v41;
      os_unfair_lock_unlock(v47);
      unint64_t v49 = *(void *)(v112 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension + 8);
      uint64_t v105 = *(void *)(v112 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
      uint64_t v50 = *(void *)&v42[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_lock];
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v50 + 16));
      uint64_t v51 = &v42[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_assetFileURLCache];
      swift_beginAccess();
      uint64_t v52 = *(void *)v51;
      if (*(void *)(v52 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v53 = sub_100955FC8(v38);
        if (v54)
        {
          uint64_t v55 = v85;
          uint64_t v56 = v102;
          sub_100522E9C(*(void *)(v52 + 56) + *(void *)(v85 + 72) * v53, v102, (uint64_t *)&unk_101684F90);
          uint64_t v57 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56);
          uint64_t v58 = v101;
          v57(v56, 0, 1, v101);
        }
        else
        {
          uint64_t v58 = v101;
          uint64_t v56 = v102;
          (*v94)(v102, 1, 1, v101);
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v58 = v101;
        uint64_t v56 = v102;
        (*v94)(v102, 1, 1, v101);
      }
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v50 + 16));
      int v59 = (*v95)(v56, 1, v58);
      uint64_t v12 = v109 & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      if (v59 == 1)
      {
        sub_100522F00(v56, (uint64_t *)&unk_101674170);
        UUID.uuidString.getter();
        uint64_t v60 = v106;
        if (v49)
        {
          uint64_t v61 = HIBYTE(v49) & 0xF;
          if ((v49 & 0x2000000000000000) == 0) {
            uint64_t v61 = v105 & 0xFFFFFFFFFFFFLL;
          }
          if (v61)
          {
            NSString v62 = String._bridgeToObjectiveC()();
            NSString v63 = String._bridgeToObjectiveC()();
            id v64 = [v62 stringByAppendingPathExtension:v63];

            if (v64)
            {
              swift_bridgeObjectRelease();
              static String._unconditionallyBridgeFromObjectiveC(_:)();
            }
            uint64_t v60 = v106;
          }
        }
        URL.appendingPathComponent(_:)();
        swift_bridgeObjectRelease();
        uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))v109;
        uint64_t v66 = v100;
      }
      else
      {
        uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))v109;
        unint64_t v67 = v86;
        uint64_t v68 = v100;
        (*(void (**)(char *, uint64_t, uint64_t))v109)(v86, v56, v100);
        unint64_t v69 = v87;
        uint64_t v70 = v67;
        uint64_t v66 = v68;
        v65(v87, (uint64_t)v70, v68);
        uint64_t v60 = v106;
        v65(v106, (uint64_t)v69, v66);
      }
      uint64_t v71 = (uint64_t)v111;
      v65((char *)v111 + *(int *)(v99 + 48), (uint64_t)v60, v66);

      sub_10051B3EC(v71, v110, (uint64_t *)&unk_10169A730);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v113 = v28;
      uint64_t v33 = v104;
      unint64_t v23 = sub_100955FC8(v104);
      uint64_t v74 = v28[2];
      BOOL v75 = (v73 & 1) == 0;
      uint64_t v76 = v74 + v75;
      if (__OFADD__(v74, v75)) {
        break;
      }
      char v77 = v73;
      if (v28[3] >= v76)
      {
        uint64_t v12 = v103;
        uint64_t v36 = v92;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100984D34();
        }
        uint64_t v35 = v93;
        id v28 = v113;
        if (v77) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_10096F380(v76, isUniquelyReferenced_nonNull_native);
        unint64_t v78 = sub_100955FC8(v33);
        uint64_t v12 = v103;
        uint64_t v36 = v92;
        if ((v77 & 1) != (v79 & 1)) {
          goto LABEL_49;
        }
        unint64_t v23 = v78;
        uint64_t v35 = v93;
        id v28 = v113;
        if (v77)
        {
LABEL_7:
          sub_1006063BC(v110, v28[7] + *(void *)(v98 + 72) * v23, (uint64_t *)&unk_10169A730);
          goto LABEL_8;
        }
      }
      v28[(v23 >> 6) + 8] |= 1 << v23;
      v107(v28[6] + *(void *)(v88 + 72) * v23, v33, v12);
      sub_10051B3EC(v110, v28[7] + *(void *)(v98 + 72) * v23, (uint64_t *)&unk_10169A730);
      uint64_t v80 = v28[2];
      BOOL v81 = __OFADD__(v80, 1);
      uint64_t v82 = v80 + 1;
      if (v81) {
        goto LABEL_42;
      }
      void v28[2] = v82;
      id v28 = v113;
LABEL_8:
      swift_bridgeObjectRelease();
      ++v34;
      (*v89)(v33, v12);
      swift_release();
      unint64_t v23 = v91;
      if (v90 == v34) {
        goto LABEL_46;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain_n();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v33 = v104;
    if (!v32) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_49:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100CB2DE4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100CB235C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

id sub_100CB2E18()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
}

unint64_t sub_100CB2E30()
{
  unint64_t result = qword_101699580;
  if (!qword_101699580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101699580);
  }
  return result;
}

unint64_t sub_100CB2E88()
{
  unint64_t result = qword_101699588;
  if (!qword_101699588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101699588);
  }
  return result;
}

unint64_t sub_100CB2EDC(uint64_t a1)
{
  unint64_t result = sub_100CB2F04();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100CB2F04()
{
  unint64_t result = qword_1016995D8;
  if (!qword_1016995D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016995D8);
  }
  return result;
}

uint64_t sub_100CB2F58()
{
  return sub_100523288(&qword_1016995E0, &qword_1016995E8);
}

unint64_t sub_100CB2F94(void *a1)
{
  a1[1] = sub_100CB2FCC();
  a1[2] = sub_100CB3020();
  unint64_t result = sub_100CB3074();
  a1[3] = result;
  return result;
}

unint64_t sub_100CB2FCC()
{
  unint64_t result = qword_1016995F0;
  if (!qword_1016995F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016995F0);
  }
  return result;
}

unint64_t sub_100CB3020()
{
  unint64_t result = qword_1016995F8;
  if (!qword_1016995F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016995F8);
  }
  return result;
}

unint64_t sub_100CB3074()
{
  unint64_t result = qword_101699600;
  if (!qword_101699600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101699600);
  }
  return result;
}

unint64_t sub_100CB30CC()
{
  unint64_t result = qword_101699608;
  if (!qword_101699608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101699608);
  }
  return result;
}

uint64_t sub_100CB3120()
{
  return sub_100523288(&qword_101699610, &qword_101699618);
}

uint64_t sub_100CB315C()
{
  return sub_100CE93C8(&qword_10167F0F0);
}

uint64_t sub_100CB3168()
{
  return sub_100CE6DBC(type metadata accessor for CRLBoardIdentifier, &qword_10167F0F0, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_100C78A24);
}

uint64_t sub_100CB319C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100CB31AC()
{
  return swift_release();
}

void sub_100CB31B8()
{
}

uint64_t sub_100CB31DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100C64F14(v1);
  uint64_t v9 = a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess();
  sub_100CE144C(v9, (uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  swift_beginAccess();
  sub_100CDE0D8(&qword_101699700, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
  CRStruct_6.merge(_:)();
  sub_100CE14B4((uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  swift_endAccess();
  uint64_t v10 = *(void *)(a1 + 40);
  *(_OWORD *)(v2 + 3) = *(_OWORD *)(a1 + 24);
  v2[5] = v10;
  sub_101048A8C();
  return v8;
}

uint64_t sub_100CB3360@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t, __n128))(v6 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v5, v8);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v10, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  char v13 = sub_100CB36B4();
  if (v2)
  {
    if (qword_10166FB70 == -1)
    {
LABEL_4:
      swift_beginAccess();
      uint64_t v14 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getErrorValue();
      id v16 = v14;
      uint64_t v17 = Error.localizedDescription.getter();
      uint64_t v19 = v18;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v17;
      *(void *)(inited + 40) = v19;
      uint64_t v20 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v16, (uint64_t)&_mh_execute_header, v20, (uint64_t)"Failed to fetch data store metadata with error: %@", 50, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();

      return swift_willThrow();
    }
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  char v22 = v13;
  if (v13) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = sub_100CB3F28();
  }
  *a2 = v22 & 1;
  a2[1] = result & 1;
  return result;
}

uint64_t sub_100CB35F4()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100CB36B4()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (uint64_t *)((char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v7 = v8;
  uint64_t v9 = *(void (**)(void, __n128))(v3 + 104);
  unsigned int v77 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v79 = v3 + 104;
  unint64_t v78 = (void (*)(void *, void, uint64_t))v9;
  v9(v7, v5);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  id v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  uint64_t v11 = v3 + 8;
  uint64_t v80 = v12;
  v12(v7, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v75 = v11;
  uint64_t v76 = v2;
  uint64_t v81 = 0;
  unint64_t v82 = 0xE000000000000000;
  _StringGuts.grow(_:)(234);
  v13._object = (void *)0x800000010127C540;
  v13._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v14._object = (void *)0xEB00000000736D65;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0x20455245485720;
  v15._object = (void *)0xE700000000000000;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v16._object = (void *)0xEB00000000736D65;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 46;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0xD000000000000010;
  v18._object = (void *)0x800000010127B8B0;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v19._object = (void *)0x800000010127C810;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x736472616F62;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = 0x20455245485720;
  v21._object = (void *)0xE700000000000000;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x736472616F62;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 46;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 0xD000000000000010;
  v24._object = (void *)0x800000010127B8B0;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0x20524F2030203E20;
  v25._object = (void *)0xE800000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 0x736472616F62;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 46;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._object = (void *)0x800000010127BD90;
  v28._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v29._object = (void *)0x800000010127C810;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = 0x6D5F736472616F62;
  v30._object = (void *)0xEF61746164617465;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 0x20455245485720;
  v31._object = (void *)0xE700000000000000;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = 0x6D5F736472616F62;
  v32._object = (void *)0xEF61746164617465;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = 46;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 0xD000000000000010;
  v34._object = (void *)0x800000010127B8B0;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v35._object = (void *)0x800000010127C810;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = 0xD000000000000010;
  v36._object = (void *)0x800000010127C660;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = 0x20455245485720;
  v37._object = (void *)0xE700000000000000;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = 0xD000000000000010;
  v38._object = (void *)0x800000010127C660;
  String.append(_:)(v38);
  v39._uint64_t countAndFlagsBits = 46;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = 0xD000000000000010;
  v40._object = (void *)0x800000010127B8B0;
  String.append(_:)(v40);
  v41._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v41._object = (void *)0x800000010127C810;
  String.append(_:)(v41);
  v42._uint64_t countAndFlagsBits = 0xD000000000000018;
  v42._object = (void *)0x800000010127BF60;
  String.append(_:)(v42);
  v43._uint64_t countAndFlagsBits = 0x20455245485720;
  v43._object = (void *)0xE700000000000000;
  String.append(_:)(v43);
  v44._uint64_t countAndFlagsBits = 0xD000000000000018;
  v44._object = (void *)0x800000010127BF60;
  String.append(_:)(v44);
  v45._uint64_t countAndFlagsBits = 46;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v46._uint64_t countAndFlagsBits = 0xD000000000000010;
  v46._object = (void *)0x800000010127B8B0;
  String.append(_:)(v46);
  v47._uint64_t countAndFlagsBits = 0x292030203E20;
  v47._object = (void *)0xE600000000000000;
  String.append(_:)(v47);
  uint64_t v48 = v81;
  uint64_t v49 = v82;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v50 = swift_retain();
  uint64_t v51 = sub_10079FC40(v50, v48, v49);
  if (!v1)
  {
    uint64_t v59 = v51;
    swift_release();
    uint64_t v60 = *(void **)(*(void *)(v59 + 16) + 32);
    *uint64_t v7 = v60;
    uint64_t v61 = v76;
    v78(v7, v77, v76);
    id v62 = v60;
    LOBYTE(v60) = _dispatchPreconditionTest(_:)();
    v80(v7, v61);
    if (v60)
    {
      type metadata accessor for SQLiteRowIterator();
      uint64_t inited = (void *)swift_initStackObject();
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v59;
      inited[3] = 0;
      swift_retain();
      uint64_t v64 = sub_10079ECE0();
      if (v64)
      {
        uint64_t v65 = sub_10079BE94(0, v64);
        char v67 = v66;
        swift_release();
        swift_release();
        swift_setDeallocating();
        sub_1007A0344(inited[3], inited[4], inited[5]);
        if ((v67 & 1) == 0)
        {
          uint64_t v68 = *(void **)(*(void *)(v59 + 16) + 32);
          *uint64_t v7 = v68;
          v78(v7, v77, v61);
          id v69 = v68;
          LOBYTE(v68) = _dispatchPreconditionTest(_:)();
          v80(v7, v61);
          if (v68)
          {
            LOBYTE(v55) = v65 > 0;
            uint64_t v70 = (void *)(v59 + 24);
            swift_beginAccess();
            uint64_t v71 = *(sqlite3_stmt **)(v59 + 24);
            if (!v71) {
              goto LABEL_15;
            }
            goto LABEL_14;
          }
LABEL_21:
          __break(1u);
        }
      }
      else
      {
        swift_release();
        swift_setDeallocating();
        sub_1007A0344(inited[3], inited[4], inited[5]);
      }
      char v72 = *(void **)(*(void *)(v59 + 16) + 32);
      *uint64_t v7 = v72;
      v78(v7, v77, v61);
      id v73 = v72;
      LOBYTE(v72) = _dispatchPreconditionTest(_:)();
      v80(v7, v61);
      if (v72)
      {
        uint64_t v70 = (void *)(v59 + 24);
        swift_beginAccess();
        LOBYTE(v55) = 0;
        uint64_t v71 = *(sqlite3_stmt **)(v59 + 24);
        if (!v71)
        {
LABEL_15:
          swift_release();
          return v55 & 1;
        }
LABEL_14:
        sqlite3_finalize(v71);
        *uint64_t v70 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
  swift_release();
  if (qword_10166FB70 != -1) {
LABEL_18:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v52 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v53 = swift_initStackObject();
  *(_OWORD *)(v53 + 16) = xmmword_10117E810;
  swift_getErrorValue();
  id v54 = v52;
  uint64_t v55 = Error.localizedDescription.getter();
  uint64_t v57 = v56;
  *(void *)(v53 + 56) = &type metadata for String;
  *(void *)(v53 + 64) = sub_100528BE4();
  *(void *)(v53 + 32) = v55;
  *(void *)(v53 + 40) = v57;
  uint64_t v58 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v54, (uint64_t)&_mh_execute_header, v58, (uint64_t)"Failed to check if database has unsynced changes with error: %@", 63, 2, v53);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  swift_willThrow();
  return v55 & 1;
}

uint64_t sub_100CB3F28()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (void *)((char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *uint64_t v7 = v8;
  uint64_t v9 = *(void (**)(void, __n128))(v3 + 104);
  unsigned int v69 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v71 = v3 + 104;
  uint64_t v70 = (void (*)(void *, void, uint64_t))v9;
  v9(v7, v5);
  id v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  id v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  uint64_t v11 = v3 + 8;
  id v73 = v7;
  char v72 = v12;
  v12(v7, v2);
  if ((v8 & 1) == 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v74 = v0;
  v67[1] = v11;
  uint64_t v68 = v2;
  uint64_t v13 = 9;
  uint64_t v75 = v1;
  uint64_t countAndFlagsBits = _swiftEmptyArrayStorage;
  Swift::String v15 = &byte_101502858;
  do
  {
    unsigned int v19 = *v15++;
    char v18 = v19;
    int v20 = (1 << v19) & 0x19B;
    if (v19 <= 8 && v20 != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v82._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1006BBB64(0, *((void *)countAndFlagsBits + 2) + 1, 1);
        uint64_t countAndFlagsBits = (double *)v82._countAndFlagsBits;
      }
      unint64_t v17 = *((void *)countAndFlagsBits + 2);
      unint64_t v16 = *((void *)countAndFlagsBits + 3);
      if (v17 >= v16 >> 1)
      {
        sub_1006BBB64(v16 > 1, v17 + 1, 1);
        uint64_t countAndFlagsBits = (double *)v82._countAndFlagsBits;
      }
      *((void *)countAndFlagsBits + 2) = v17 + 1;
      *((unsigned char *)countAndFlagsBits + v17 + 32) = v18;
    }
    --v13;
  }
  while (v13);
  unint64_t v80 = 0xD000000000000011;
  unint64_t v81 = 0x800000010127C7B0;
  unint64_t v23 = *((void *)countAndFlagsBits + 2);
  if (v23)
  {
    swift_retain();
    uint64_t v24 = 0;
    unint64_t v79 = (unint64_t)"command_history_items";
    unint64_t v78 = "Clearing sync metadata.";
    unsigned int v77 = "Removing data for table: %@";
    uint64_t v76 = "bucket with error %@";
    while (1)
    {
      uint64_t v25 = *((unsigned __int8 *)countAndFlagsBits + v24++ + 32);
      v82._uint64_t countAndFlagsBits = 0;
      v82._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)&v82, "SELECT 1 FROM ");
      HIBYTE(v82._object) = -18;
      unint64_t v26 = 0xE600000000000000;
      unint64_t v27 = 0x736472616F62;
      switch(v25)
      {
        case 1:
          unint64_t v26 = 0xEB00000000736D65;
          unint64_t v27 = 0x74695F6472616F62;
          break;
        case 2:
          unint64_t v26 = 0xEE00617461645F65;
          unint64_t v27 = 0x756C61765F79656BLL;
          break;
        case 3:
          unint64_t v27 = 0x737465737361;
          break;
        case 4:
          unint64_t v26 = v79 | 0x8000000000000000;
          unint64_t v27 = 0xD000000000000010;
          break;
        case 5:
          unint64_t v27 = 0xD000000000000015;
          Swift::String v28 = &v85;
          goto LABEL_25;
        case 6:
          unint64_t v27 = 0xD000000000000020;
          Swift::String v28 = (uint64_t *)&v84;
          goto LABEL_25;
        case 7:
          unint64_t v26 = 0xEF61746164617465;
          unint64_t v27 = 0x6D5F736472616F62;
          break;
        case 8:
          unint64_t v27 = 0xD000000000000018;
          Swift::String v28 = &v83;
LABEL_25:
          unint64_t v26 = *(v28 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      unint64_t v29 = v26;
      String.append(_:)(*(Swift::String *)&v27);
      swift_bridgeObjectRelease();
      v30._uint64_t countAndFlagsBits = 32;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      if (v23 > *((void *)countAndFlagsBits + 2)) {
        break;
      }
      if (v25 != *((unsigned __int8 *)countAndFlagsBits + v23 + 31))
      {
        v31._uint64_t countAndFlagsBits = 0x4C41204E4F494E55;
        v31._object = (void *)0xEA0000000000204CLL;
        String.append(_:)(v31);
      }
      if (v23 == v24)
      {
        swift_release();
        goto LABEL_30;
      }
    }
    __break(1u);
    goto LABEL_46;
  }
LABEL_30:
  swift_release();
  v32._uint64_t countAndFlagsBits = 41;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  uint64_t v33 = v80;
  uint64_t v34 = v81;
  type metadata accessor for SQLiteStatement();
  swift_initStackObject();
  uint64_t v35 = swift_retain();
  uint64_t v36 = v75;
  uint64_t v37 = sub_10079FC40(v35, v33, v34);
  if (!v36)
  {
    uint64_t v45 = v37;
    swift_release();
    Swift::String v46 = *(void **)(*(void *)(v45 + 16) + 32);
    Swift::String v47 = v73;
    *id v73 = v46;
    uint64_t v48 = v68;
    v70(v47, v69, v68);
    id v49 = v46;
    char v50 = _dispatchPreconditionTest(_:)();
    v72(v47, v48);
    if (v50)
    {
      type metadata accessor for SQLiteRowIterator();
      uint64_t inited = (void *)swift_initStackObject();
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v45;
      inited[3] = 0;
      swift_retain();
      uint64_t v52 = sub_10079ECE0();
      if (v52)
      {
        uint64_t v53 = sub_10079BE94(0, v52);
        char v55 = v54;
        swift_release();
        swift_release();
        swift_setDeallocating();
        sub_1007A0344(inited[3], inited[4], inited[5]);
        if ((v55 & 1) == 0)
        {
          uint64_t v56 = *(void **)(*(void *)(v45 + 16) + 32);
          uint64_t v57 = v73;
          *id v73 = v56;
          v70(v57, v69, v48);
          id v58 = v56;
          char v59 = _dispatchPreconditionTest(_:)();
          v72(v57, v48);
          if (v59)
          {
            LOBYTE(v41) = v53 > 0;
            uint64_t v60 = (void *)(v45 + 24);
            swift_beginAccess();
            uint64_t v61 = *(sqlite3_stmt **)(v45 + 24);
            if (!v61) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
LABEL_50:
          __break(1u);
        }
      }
      else
      {
        swift_release();
        swift_setDeallocating();
        sub_1007A0344(inited[3], inited[4], inited[5]);
      }
      id v62 = *(void **)(*(void *)(v45 + 16) + 32);
      NSString v63 = v73;
      *id v73 = v62;
      v70(v63, v69, v48);
      id v64 = v62;
      char v65 = _dispatchPreconditionTest(_:)();
      v72(v63, v48);
      if (v65)
      {
        uint64_t v60 = (void *)(v45 + 24);
        swift_beginAccess();
        LOBYTE(v41) = 0;
        uint64_t v61 = *(sqlite3_stmt **)(v45 + 24);
        if (!v61)
        {
LABEL_43:
          swift_release();
          return v41 & 1;
        }
LABEL_42:
        sqlite3_finalize(v61);
        *uint64_t v60 = 0;
        goto LABEL_43;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_50;
  }
  swift_release();
  if (qword_10166FB70 != -1) {
LABEL_47:
  }
    swift_once();
  swift_beginAccess();
  Swift::String v38 = (void *)static OS_os_log.boardStore;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v39 = swift_initStackObject();
  *(_OWORD *)(v39 + 16) = xmmword_10117E810;
  swift_getErrorValue();
  id v40 = v38;
  uint64_t v41 = Error.localizedDescription.getter();
  uint64_t v43 = v42;
  *(void *)(v39 + 56) = &type metadata for String;
  *(void *)(v39 + 64) = sub_100528BE4();
  *(void *)(v39 + 32) = v41;
  *(void *)(v39 + 40) = v43;
  uint64_t v44 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v40, (uint64_t)&_mh_execute_header, v44, (uint64_t)"Failed to check if database has data with error: %@", 51, 2, v39);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  swift_willThrow();
  return v41 & 1;
}

unint64_t sub_100CB4830()
{
  unint64_t result = sub_1002094A4();
  unint64_t v2 = result;
  uint64_t v3 = (unint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
  if (result >= *v3)
  {
    *uint64_t v3 = 0x1000000000000;
    if (result >= v3[2]) {
      v3[2] = 0x2000400000000;
    }
    if (result >= v3[4])
    {
      unint64_t result = sub_100CB48F0();
      v3[4] = result;
    }
  }
  if (v2 >= v3[1])
  {
    v3[1] = 0x1000000000000;
    if (v2 >= v3[3]) {
      v3[3] = 0x2000400000000;
    }
  }
  return result;
}

unint64_t sub_100CB48F0()
{
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  unint64_t v2 = (unint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
  unint64_t v3 = *v2;
  *(void *)(inited + 56) = &type metadata for UInt64;
  *(void *)(inited + 64) = &protocol witness table for UInt64;
  *(void *)(inited + 32) = v3;
  if (sub_1002094A4() < v3)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2, 396, (uint64_t)"Call to computedMinRequiredVersionForFullFidelity while current minRequiredVersionForBucket is higher than current: %{public}d", 126, 2u, inited);
    sub_1005598CC(inited, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2, 396);
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_10117E810;
  unint64_t v5 = v2[4];
  *(void *)(v4 + 56) = &type metadata for UInt64;
  *(void *)(v4 + 64) = &protocol witness table for UInt64;
  *(void *)(v4 + 32) = v5;
  if (sub_1002094A4() < v5)
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2, 397, (uint64_t)"Call to computedMinRequiredVersionForFullFidelity while current minRequiredVersionForFullFidelity is higher than current: %{public}d", 132, 2u, v4);
    sub_1005598CC(v4, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2, 397);
  }
  swift_bridgeObjectRelease();
  unint64_t v6 = v2[4];
  if ((v2[2] != 0x2000400000000 || v2[3] != 0x2000400000000) && v6 < 0x2000400000000) {
    unint64_t v6 = 0x2000400000000;
  }
  uint64_t v7 = swift_initStackObject();
  uint64_t v8 = v7;
  *(_OWORD *)(v7 + 16) = xmmword_10117E810;
  *(void *)(v7 + 56) = &type metadata for UInt64;
  *(void *)(v7 + 64) = &protocol witness table for UInt64;
  *(void *)(v7 + 32) = v6;
  if (v6 < v2[4])
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2, 406, (uint64_t)"Call to board computedMinRequiredVersionForFullFidelity resulted in decremented version: %{public}d", 99, 2u, v7);
    sub_1005598CC(v8, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2, 406);
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100CB4BC8(uint64_t a1, char *a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    unint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    unint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    Swift::String v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    char v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      Swift::String v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_100CDE0D8((unint64_t *)&qword_10167BDC0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      Swift::String v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::String v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CC5688((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_100CB4EEC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v14 < 0) {
      uint64_t v15 = *v2;
    }
    else {
      uint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v16 = __CocoaSet.member(for:)();
    swift_release();
    if (v16)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v55 = v16;
      type metadata accessor for CRLTransactableHashableWrapper();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v54;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v43 = sub_100CBC850(v15, result + 1);
    Swift::Int v54 = v43;
    if (*(void *)(v43 + 24) <= *(void *)(v43 + 16))
    {
      swift_retain();
      sub_100CBD9B4();
      uint64_t v44 = v54;
    }
    else
    {
      uint64_t v44 = v43;
      swift_retain();
    }
    sub_100CC4F7C(a2, v44);
    *unint64_t v3 = v44;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v45 = v2;
  Swift::String v46 = a1;
  char v18 = (char *)&v45 - v13;
  Hasher.init(_seed:)();
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v52 = v14;
  Swift::String v21 = *(void (**)(uint64_t, uint64_t))(v19 + 32);
  swift_bridgeObjectRetain();
  v21(ObjectType, v19);
  uint64_t v22 = v52;
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v23 = v7 + 8;
  char v50 = v24;
  uint64_t v51 = v18;
  v24(v18, v6);
  Swift::Int v25 = Hasher._finalize()();
  uint64_t v26 = -1 << *(unsigned char *)(v22 + 32);
  unint64_t v27 = v25 & ~v26;
  uint64_t v49 = v22 + 56;
  if (((*(void *)(v22 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    id v40 = v45;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v54 = *v40;
    *id v40 = 0x8000000000000000;
    uint64_t v42 = swift_retain();
    sub_100CC5944(v42, v27, isUniquelyReferenced_nonNull_native);
    *id v40 = v54;
    swift_bridgeObjectRelease();
    *Swift::String v46 = a2;
    return 1;
  }
  uint64_t v47 = ~v26;
  uint64_t v48 = v11;
  uint64_t v28 = v51;
  while (1)
  {
    unint64_t v53 = v27;
    uint64_t v29 = *(void *)(*(void *)(*(void *)(v22 + 48) + 8 * v27) + 24);
    uint64_t v30 = a2;
    uint64_t v31 = swift_getObjectType();
    uint64_t v32 = v23;
    uint64_t v33 = v6;
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v29 + 32);
    swift_retain();
    uint64_t v35 = v31;
    a2 = v30;
    v34(v35, v29);
    uint64_t v6 = v33;
    uint64_t v23 = v32;
    uint64_t v36 = v48;
    uint64_t v37 = *(void *)(v30 + 24);
    uint64_t v38 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v37 + 32))(v38, v37);
    LOBYTE(v37) = static UUID.== infix(_:_:)();
    uint64_t v39 = v50;
    v50(v36, v6);
    v39(v28, v6);
    swift_release();
    if (v37) {
      break;
    }
    uint64_t v22 = v52;
    unint64_t v27 = (v53 + 1) & v47;
    if (((*(void *)(v49 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *Swift::String v46 = *(void *)(*(void *)(*v45 + 48) + 8 * v53);
  swift_retain();
  return 0;
}

uint64_t sub_100CB5370(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  int v8 = a3 & 1;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_12:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_100CC5C88(a2, v8, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_13;
  }
  uint64_t v13 = ~v11;
  while (1)
  {
    uint64_t v14 = *(void *)(v9 + 48) + 16 * v12;
    if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
      break;
    }
    if (v8) {
      goto LABEL_11;
    }
LABEL_7:
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (v8 || *(void *)v14 != a2) {
    goto LABEL_7;
  }
LABEL_11:
  uint64_t result = 0;
  uint64_t v16 = *(void *)(*v4 + 48) + 16 * v12;
  a2 = *(void *)v16;
  LOBYTE(v8) = *(unsigned char *)(v16 + 8);
LABEL_13:
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = v8;
  return result;
}

uint64_t sub_100CB54E0(uint64_t a1, Swift::Int a2, unsigned __int8 a3)
{
  uint64_t v4 = v3;
  unsigned __int8 v5 = a3;
  int v8 = ~a3;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_1005057FC(&qword_10167BDC8);
    CRExtensible.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_100CC5E14(a2, v5, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v17;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_13;
  }
  uint64_t v13 = ~v11;
  while (*(unsigned __int8 *)(*(void *)(v9 + 48) + 16 * v12 + 8) == 255)
  {
    if (v5 == 0xFF) {
      goto LABEL_11;
    }
LABEL_7:
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (v5 == 0xFF) {
    goto LABEL_7;
  }
  sub_1006F2354();
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  uint64_t v15 = *(void *)(*v4 + 48) + 16 * v12;
  a2 = *(void *)v15;
  unsigned __int8 v5 = *(unsigned char *)(v15 + 8);
LABEL_13:
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_100CB56F0(uint64_t a1, Swift::Int a2, unsigned __int8 a3)
{
  uint64_t v4 = v3;
  unsigned __int8 v5 = a3;
  int v8 = ~a3;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  uint64_t v17 = a1;
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_1005057FC(&qword_10167BE18);
    CRExtensible.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_100CC6054(a2, v5, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_13;
  }
  uint64_t v13 = ~v11;
  while (*(unsigned __int8 *)(*(void *)(v9 + 48) + 16 * v12 + 8) == 255)
  {
    if (v5 == 0xFF) {
      goto LABEL_11;
    }
LABEL_7:
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (v5 == 0xFF) {
    goto LABEL_7;
  }
  type metadata accessor for CRLWPWritingDirection(0);
  sub_100CDE0D8((unint64_t *)&unk_10167BE20, type metadata accessor for CRLWPWritingDirection);
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  uint64_t v15 = *(void *)(*v4 + 48) + 16 * v12;
  a2 = *(void *)v15;
  unsigned __int8 v5 = *(unsigned char *)(v15 + 8);
LABEL_13:
  *(void *)uint64_t v17 = a2;
  *(unsigned char *)(v17 + 8) = v5;
  return result;
}

uint64_t sub_100CB5934(uint64_t a1, Swift::Int a2, unsigned __int8 a3)
{
  uint64_t v4 = v3;
  unsigned __int8 v5 = a3;
  int v8 = ~a3;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  uint64_t v17 = a1;
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_1005057FC(&qword_101687860);
    CRExtensible.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_100CC62C8(a2, v5, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_13;
  }
  uint64_t v13 = ~v11;
  while (*(unsigned __int8 *)(*(void *)(v9 + 48) + 16 * v12 + 8) == 255)
  {
    if (v5 == 0xFF) {
      goto LABEL_11;
    }
LABEL_7:
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (v5 == 0xFF) {
    goto LABEL_7;
  }
  type metadata accessor for CRLWPParagraphAlignment(0);
  sub_100CDE0D8((unint64_t *)&unk_10167BDE0, type metadata accessor for CRLWPParagraphAlignment);
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  uint64_t v15 = *(void *)(*v4 + 48) + 16 * v12;
  a2 = *(void *)v15;
  unsigned __int8 v5 = *(unsigned char *)(v15 + 8);
LABEL_13:
  *(void *)uint64_t v17 = a2;
  *(unsigned char *)(v17 + 8) = v5;
  return result;
}

uint64_t sub_100CB5B78(uint64_t *a1, void *a2)
{
  sub_10051B3EC((uint64_t)a2, (uint64_t)v112, &qword_101686E98);
  uint64_t v71 = v112[0];
  uint64_t v4 = v112[1];
  uint64_t v5 = v112[2];
  uint64_t v6 = v112[3];
  uint64_t v7 = v112[4];
  uint64_t v8 = v112[6];
  uint64_t v62 = v112[7];
  uint64_t v63 = v112[5];
  uint64_t v9 = v112[9];
  uint64_t v60 = v112[10];
  uint64_t v61 = v112[8];
  uint64_t v10 = v112[11];
  uint64_t v59 = v112[12];
  uint64_t v55 = v112[13];
  unint64_t v53 = v2;
  uint64_t v11 = *v2;
  Hasher.init(_seed:)();
  sub_10051B3EC((uint64_t)a2, (uint64_t)v118, &qword_101686E98);
  uint64_t v65 = v8;
  uint64_t v66 = v5;
  uint64_t v70 = v4;
  uint64_t v57 = v9;
  uint64_t v58 = v6;
  uint64_t v64 = v7;
  uint64_t v56 = v10;
  if (v119)
  {
    Hasher._combine(_:)(1u);
    int v120 = v5;
    char v121 = BYTE4(v5) & 1;
    uint64_t v122 = v6;
    uint64_t v123 = v7;
    uint64_t v12 = v63;
    uint64_t v124 = v63;
    uint64_t v125 = v8;
    float v13 = *(float *)&v60;
    uint64_t v14 = v61;
    uint64_t v126 = v62;
    uint64_t v127 = v61;
    uint64_t v128 = v9;
    uint64_t v129 = v60;
    uint64_t v130 = v10;
    uint64_t v131 = v59;
    uint64_t v115 = v71;
    char v116 = v4 & 1;
    swift_bridgeObjectRetain();
    sub_10091A53C(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051B2E8);
    sub_1005057FC(&qword_101687C08);
    CRExtensible.hash(into:)();
    sub_1007B037C();
    sub_10091A53C(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
    uint64_t v15 = v62;
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    uint64_t v14 = v61;
    uint64_t v15 = v62;
    float v13 = *(float *)&v60;
    uint64_t v12 = v63;
  }
  id v73 = a2;
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v18 = v16 & ~v17;
  uint64_t v69 = v11 + 56;
  if (((*(void *)(v11 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
  {
LABEL_56:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = *v53;
    *unint64_t v53 = 0x8000000000000000;
    sub_10091A53C(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051B2E8);
    sub_100CC653C(v73, v18, isUniquelyReferenced_nonNull_native);
    *unint64_t v53 = v84;
    swift_bridgeObjectRelease();
    sub_10051B3EC((uint64_t)v73, (uint64_t)a1, &qword_101686E98);
    return 1;
  }
  uint64_t v67 = ~v17;
  uint64_t v68 = v11;
  uint64_t v19 = v12;
  float v20 = *(float *)&v15;
  uint64_t v21 = v14;
  float v22 = *((float *)&v15 + 1);
  float v52 = v13;
  while (1)
  {
    uint64_t v23 = (uint64_t *)(*(void *)(v11 + 48) + 112 * v18);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v26 = v23[2];
    uint64_t v27 = v23[3];
    uint64_t v29 = v23[4];
    uint64_t v28 = v23[5];
    uint64_t v30 = v23[6];
    uint64_t v31 = v23[8];
    uint64_t v75 = v23[7];
    uint64_t v76 = v23[9];
    uint64_t v82 = v23[10];
    uint64_t v83 = v23[11];
    uint64_t v80 = v23[12];
    uint64_t v81 = v23[13];
    uint64_t v74 = v30;
    if (!v80) {
      break;
    }
    uint64_t v32 = v73;
    sub_10051B3EC((uint64_t)v73, (uint64_t)v113, &qword_101686E98);
    if (!v114) {
      goto LABEL_16;
    }
    uint64_t v84 = v24;
    LOBYTE(v85) = v25 & 1;
    sub_10091A53C(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051B2E8);
    sub_10051B2E8(v24, v25, v26, v27, v29, v28, v30, v75, v31, v76, v82, v83, v80);
    sub_1008EE6D8();
    if (static CRExtensible.== infix(_:_:)())
    {
      if ((v26 & 0x100000000) != 0)
      {
        uint64_t v33 = v65;
        if ((v66 & 0x100000000) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        if ((v66 & 0x100000000) != 0) {
          goto LABEL_18;
        }
        uint64_t v33 = v65;
        if (*(float *)&v26 != *(float *)&v66) {
          goto LABEL_18;
        }
      }
      uint64_t v34 = v76;
      if (v74)
      {
        if (!v33) {
          goto LABEL_28;
        }
        uint64_t v84 = v27;
        LOBYTE(v85) = v29 & 1;
        sub_1007B1504();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((static CRExtensible.== infix(_:_:)() & 1) == 0 || *((float *)&v29 + 1) != *((float *)&v64 + 1))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10091A53C(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
          sub_10051ABBC(v24, v25, v26, v27, v29, v28, v74, v75, v31, v76, v82, v83, v80);
          goto LABEL_29;
        }
        if (*(float *)&v28 != *(float *)&v19)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_18:
          sub_10091A53C(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
          sub_10051ABBC(v24, v25, v26, v27, v29, v28, v74, v75, v31, v76, v82, v83, v80);
LABEL_29:
          uint64_t v11 = v68;
          goto LABEL_7;
        }
        uint64_t v34 = v76;
        if (*((float *)&v28 + 1) != *((float *)&v19 + 1))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_28:
          sub_10091A53C(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
          sub_10051ABBC(v24, v25, v26, v27, v29, v28, v74, v75, v31, v34, v82, v83, v80);
          goto LABEL_29;
        }
        char v72 = sub_100ED60AC(v74, v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v72 & 1) == 0) {
          goto LABEL_28;
        }
      }
      else if (v33)
      {
        goto LABEL_28;
      }
      if (v34)
      {
        if (!v57) {
          goto LABEL_28;
        }
        if (*(float *)&v75 != v20) {
          goto LABEL_28;
        }
        if (*((float *)&v75 + 1) != v22) {
          goto LABEL_28;
        }
        if (*(float *)&v31 != *(float *)&v21) {
          goto LABEL_28;
        }
        if (*((float *)&v31 + 1) != *((float *)&v21 + 1)) {
          goto LABEL_28;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v77 = sub_100ED60AC(v34, v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0) {
          goto LABEL_28;
        }
      }
      else if (v57)
      {
        goto LABEL_28;
      }
      if (v83)
      {
        if (!v56) {
          goto LABEL_28;
        }
        if (*(float *)&v82 != v52) {
          goto LABEL_28;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v78 = sub_100ED60AC(v83, v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v78 & 1) == 0) {
          goto LABEL_28;
        }
      }
      else if (v56)
      {
        sub_10091A53C(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
        sub_10051ABBC(v24, v25, v26, v27, v29, v28, v74, v75, v31, v34, v82, 0, v80);
        goto LABEL_29;
      }
      if ((sub_100ED60AC(v80, v59) & 1) == 0) {
        goto LABEL_28;
      }
      char v79 = sub_100ED60AC(v81, v55);
      sub_10091A53C(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
      sub_10051ABBC(v24, v25, v26, v27, v29, v28, v74, v75, v31, v34, v82, v83, v80);
      uint64_t v11 = v68;
      if (v79)
      {
        swift_bridgeObjectRelease();
        sub_10091A53C(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
        goto LABEL_58;
      }
    }
    else
    {
      sub_10091A53C(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
      sub_10051ABBC(v24, v25, v26, v27, v29, v28, v30, v75, v31, v76, v82, v83, v80);
      uint64_t v11 = v68;
    }
LABEL_7:
    unint64_t v18 = (v18 + 1) & v67;
    if (((*(void *)(v69 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      goto LABEL_56;
    }
  }
  uint64_t v32 = v73;
  sub_10051B3EC((uint64_t)v73, (uint64_t)&v115, &qword_101686E98);
  if (v117)
  {
LABEL_16:
    uint64_t v84 = v24;
    uint64_t v85 = v25;
    uint64_t v86 = v26;
    uint64_t v87 = v27;
    uint64_t v88 = v29;
    uint64_t v89 = v28;
    uint64_t v90 = v30;
    uint64_t v91 = v75;
    uint64_t v92 = v31;
    uint64_t v93 = v76;
    uint64_t v94 = v82;
    uint64_t v95 = v83;
    uint64_t v96 = v80;
    uint64_t v97 = v81;
    uint64_t v98 = v71;
    uint64_t v99 = v70;
    uint64_t v100 = v66;
    uint64_t v101 = v58;
    uint64_t v102 = v64;
    uint64_t v103 = v63;
    uint64_t v104 = v65;
    uint64_t v105 = v62;
    uint64_t v106 = v61;
    uint64_t v107 = v57;
    uint64_t v108 = v60;
    uint64_t v109 = v56;
    uint64_t v110 = v59;
    uint64_t v111 = v55;
    sub_10091A53C(v32, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051B2E8);
    sub_10051B2E8(v24, v25, v26, v27, v29, v28, v30, v75, v31, v76, v82, v83, v80);
    sub_1008EE60C((uint64_t)&v84);
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
LABEL_58:
  uint64_t v37 = (uint64_t *)(*(void *)(*v53 + 48) + 112 * v18);
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  uint64_t v40 = v37[2];
  uint64_t v41 = v37[3];
  uint64_t v42 = v37[4];
  uint64_t v43 = v37[5];
  uint64_t v44 = v37[6];
  uint64_t v45 = v37[7];
  uint64_t v46 = v37[8];
  uint64_t v47 = v37[9];
  uint64_t v48 = v37[10];
  uint64_t v49 = v37[11];
  uint64_t v51 = v37[12];
  uint64_t v50 = v37[13];
  *a1 = v38;
  a1[1] = v39;
  a1[2] = v40;
  a1[3] = v41;
  a1[4] = v42;
  a1[5] = v43;
  a1[6] = v44;
  a1[7] = v45;
  a1[8] = v46;
  a1[9] = v47;
  a1[10] = v48;
  a1[11] = v49;
  a1[12] = v51;
  a1[13] = v50;
  sub_10051B2E8(v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v51);
  return 0;
}

uint64_t sub_100CB6688(uint64_t a1, Swift::Int a2, unsigned __int8 a3)
{
  uint64_t v4 = v3;
  unsigned __int8 v5 = a3;
  int v8 = ~a3;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  uint64_t v17 = a1;
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_1005057FC(&qword_101687550);
    CRExtensible.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_100CC6F64(a2, v5, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_13;
  }
  uint64_t v13 = ~v11;
  while (*(unsigned __int8 *)(*(void *)(v9 + 48) + 16 * v12 + 8) == 255)
  {
    if (v5 == 0xFF) {
      goto LABEL_11;
    }
LABEL_7:
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (v5 == 0xFF) {
    goto LABEL_7;
  }
  type metadata accessor for CRLWPStrikethru(0);
  sub_100CDE0D8(&qword_10167BDF0, type metadata accessor for CRLWPStrikethru);
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  uint64_t v15 = *(void *)(*v4 + 48) + 16 * v12;
  a2 = *(void *)v15;
  unsigned __int8 v5 = *(unsigned char *)(v15 + 8);
LABEL_13:
  *(void *)uint64_t v17 = a2;
  *(unsigned char *)(v17 + 8) = v5;
  return result;
}

uint64_t sub_100CB68CC(uint64_t a1, Swift::Int a2, unsigned __int8 a3)
{
  uint64_t v4 = v3;
  unsigned __int8 v5 = a3;
  int v8 = ~a3;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  uint64_t v17 = a1;
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_1005057FC(&qword_10167BDF8);
    CRExtensible.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_100CC71D8(a2, v5, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_13;
  }
  uint64_t v13 = ~v11;
  while (*(unsigned __int8 *)(*(void *)(v9 + 48) + 16 * v12 + 8) == 255)
  {
    if (v5 == 0xFF) {
      goto LABEL_11;
    }
LABEL_7:
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (v5 == 0xFF) {
    goto LABEL_7;
  }
  type metadata accessor for CRLWPUnderline(0);
  sub_100CDE0D8((unint64_t *)&unk_10167BE00, type metadata accessor for CRLWPUnderline);
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  uint64_t v15 = *(void *)(*v4 + 48) + 16 * v12;
  a2 = *(void *)v15;
  unsigned __int8 v5 = *(unsigned char *)(v15 + 8);
LABEL_13:
  *(void *)uint64_t v17 = a2;
  *(unsigned char *)(v17 + 8) = v5;
  return result;
}

uint64_t sub_100CB6B10(unsigned char *a1, Swift::Int a2)
{
  unint64_t v3 = v2;
  Swift::Int v4 = a2;
  int v6 = a2;
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  if (v6 == 2)
  {
    Swift::UInt8 v8 = 0;
  }
  else
  {
    Swift::UInt8 v8 = v4 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v8);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v7 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_12:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CC744C(v4, v11, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v16;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_13;
  }
  uint64_t v12 = ~v10;
  while (1)
  {
    int v13 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v11);
    if (v13 != 2) {
      break;
    }
    if (v4 == 2) {
      goto LABEL_11;
    }
LABEL_7:
    unint64_t v11 = (v11 + 1) & v12;
    if (((*(void *)(v7 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (v4 == 2 || ((((v4 & 1) == 0) ^ v13) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  uint64_t result = 0;
  LOBYTE(v4) = *(unsigned char *)(*(void *)(*v3 + 48) + v11);
LABEL_13:
  *a1 = v4;
  return result;
}

uint64_t sub_100CB6C74(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  if ((a2 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a2 & 0x7FFFFF) == 0 && (a2 & 0x7F800000) == 0) {
      Swift::UInt32 v7 = 0;
    }
    else {
      Swift::UInt32 v7 = a2;
    }
    Hasher._combine(_:)(v7);
  }
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_18:
    uint64_t v15 = HIDWORD(a2) & 1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_100CC75E4(a2 | (unint64_t)(v15 << 32), v10, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v17;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_19;
  }
  uint64_t v11 = ~v9;
  while (1)
  {
    uint64_t v12 = *(void *)(v5 + 48) + 8 * v10;
    if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
      break;
    }
    if ((a2 & 0x100000000) != 0) {
      goto LABEL_17;
    }
LABEL_13:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_18;
    }
  }
  if ((a2 & 0x100000000) != 0 || *(float *)v12 != *(float *)&a2) {
    goto LABEL_13;
  }
LABEL_17:
  uint64_t result = 0;
  uint64_t v14 = *(void *)(*v2 + 48) + 8 * v10;
  LODWORD(a2) = *(_DWORD *)v14;
  LOBYTE(v15) = *(unsigned char *)(v14 + 4);
LABEL_19:
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 4) = v15;
  return result;
}

uint64_t sub_100CB6DE8(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v5 = v4;
  int v10 = ~a4;
  uint64_t v11 = *v5;
  Hasher.init(_seed:)();
  uint64_t v22 = a1;
  if (v10)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_1005057FC(&qword_1016875E0);
    CRExtensible.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    sub_10051B3B0(a2, a3, a4);
    sub_100CC777C(a2, a3, a4, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v5 = v23;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v22 = a2;
    *(void *)(v22 + 8) = a3;
    uint64_t result = 1;
    *(unsigned char *)(v22 + 16) = a4;
    return result;
  }
  uint64_t v15 = ~v13;
  while (*(unsigned __int8 *)(*(void *)(v11 + 48) + 24 * v14 + 16) != 255)
  {
    if (a4 != 0xFF)
    {
      sub_1006F23A8();
      if (static CRExtensible.== infix(_:_:)())
      {
        swift_bridgeObjectRelease();
        sub_10051AC88(a2, a3, a4);
        goto LABEL_14;
      }
    }
LABEL_7:
    unint64_t v14 = (v14 + 1) & v15;
    if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (a4 != 0xFF) {
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v18 = *(void *)(*v5 + 48) + 24 * v14;
  uint64_t v19 = *(void *)v18;
  unint64_t v20 = *(void *)(v18 + 8);
  *(void *)uint64_t v22 = *(void *)v18;
  *(void *)(v22 + 8) = v20;
  unsigned __int8 v21 = *(unsigned char *)(v18 + 16);
  *(unsigned char *)(v22 + 16) = v21;
  sub_10051B3B0(v19, v20, v21);
  return 0;
}

uint64_t sub_100CB7040(void *a1, void *a2)
{
  return sub_100CBC418(a1, a2, (void (*)(void))type metadata accessor for CRLBoardItem, &qword_101671328, (void (*)(void))type metadata accessor for CRLBoardItem);
}

uint64_t sub_100CB7074(void *a1, void *a2)
{
  return sub_100CBAB1C(a1, a2, (unint64_t *)&qword_101678790, (uint64_t)off_1014C0D98, (uint64_t *)&unk_1016710F0);
}

uint64_t sub_100CB7090(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6 - 8, v7);
  int v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  unint64_t v14 = (char *)&v40 - v13;
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v40 - v17;
  __chkstk_darwin(v16, v19);
  unsigned __int8 v21 = (char *)&v40 - v20;
  uint64_t v22 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v45 = type metadata accessor for CRLBoardIdentifierStorage(0);
  uint64_t v48 = a2;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v23 = Hasher._finalize()();
  uint64_t v24 = -1 << *(unsigned char *)(v22 + 32);
  unint64_t v25 = v23 & ~v24;
  uint64_t v26 = v22;
  uint64_t v47 = v22 + 56;
  if (((*(void *)(v22 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v38 = v48;
    sub_100CE144C(v48, (uint64_t)v21, type metadata accessor for CRLBoardIdentifier);
    uint64_t v49 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CC7CC8((uint64_t)v21, v25, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v49;
    swift_bridgeObjectRelease();
    sub_100CE12D8(v38, a1, type metadata accessor for CRLBoardIdentifier);
    return 1;
  }
  uint64_t v41 = v21;
  uint64_t v42 = v3;
  uint64_t v43 = a1;
  uint64_t v46 = ~v24;
  uint64_t v27 = *(void *)(v44 + 72);
  uint64_t v28 = v48;
  while (1)
  {
    uint64_t v29 = v26;
    sub_100CE144C(*(void *)(v26 + 48) + v27 * v25, (uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
    char v30 = static UUID.== infix(_:_:)();
    sub_100CE144C((uint64_t)v18, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    sub_100CE144C(v28, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    if ((v30 & 1) == 0)
    {
      sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      sub_100CE14B4((uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
      goto LABEL_4;
    }
    uint64_t v31 = *(int *)(v45 + 20);
    uint64_t v32 = *(void *)&v14[v31];
    uint64_t v33 = *(void *)&v14[v31 + 8];
    uint64_t v34 = &v10[v31];
    if (v32 == *(void *)v34 && v33 == *((void *)v34 + 1)) {
      break;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4((uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
    if (v36) {
      goto LABEL_16;
    }
LABEL_4:
    unint64_t v25 = (v25 + 1) & v46;
    uint64_t v26 = v29;
    if (((*(void *)(v47 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      unint64_t v3 = v42;
      a1 = v43;
      unsigned __int8 v21 = v41;
      goto LABEL_14;
    }
  }
  sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
  sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
  sub_100CE14B4((uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
LABEL_16:
  swift_bridgeObjectRelease();
  sub_100CE14B4(v48, type metadata accessor for CRLBoardIdentifier);
  sub_100CE144C(*(void *)(*v42 + 48) + v27 * v25, v43, type metadata accessor for CRLBoardIdentifier);
  return 0;
}

uint64_t sub_100CB750C(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100B8174C((int)&v50, (unint64_t)a2, a3, a4, a5);
  unint64_t v11 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v10 + 32));
  uint64_t v45 = v5;
  uint64_t v46 = v10 + 56;
  id v49 = (id)a3;
  if (((*(void *)(v10 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
    uint64_t v47 = a2;
    unsigned __int8 v48 = a5;
    goto LABEL_10;
  }
  uint64_t v43 = -1 << *(unsigned char *)(v10 + 32);
  uint64_t v12 = 32 * v11;
  uint64_t v13 = *(void *)(v10 + 48) + 32 * v11;
  uint64_t v14 = a4;
  id v15 = *(id *)v13;
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v17 = *(void *)(v13 + 16);
  unsigned __int8 v18 = *(unsigned char *)(v13 + 24);
  sub_10053BB6C(*(id *)v13, v16, v17, v18);
  char v19 = sub_100B834D0((unint64_t)v15, (unint64_t)v16, v17, v18, (unint64_t)a2, (unint64_t)v49, v14, a5);
  unsigned __int8 v20 = a5;
  char v21 = v19;
  uint64_t v22 = v15;
  uint64_t v23 = v14;
  uint64_t v24 = v49;
  uint64_t v25 = v17;
  uint64_t v26 = v45;
  unsigned __int8 v27 = v18;
  unsigned __int8 v28 = v20;
  sub_10053BBA0(v22, v16, v25, v27);
  if ((v21 & 1) == 0)
  {
    uint64_t v47 = a2;
    uint64_t v29 = v23;
    unsigned __int8 v48 = v28;
    unint64_t v11 = (v11 + 1) & ~v43;
    if ((*(void *)(v46 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
    {
      a4 = v23;
      while (1)
      {
        uint64_t v12 = 32 * v11;
        uint64_t v30 = *(void *)(v10 + 48) + 32 * v11;
        id v31 = *(id *)v30;
        uint64_t v32 = *(void **)(v30 + 8);
        uint64_t v33 = *(void *)(v30 + 16);
        unsigned __int8 v34 = *(unsigned char *)(v30 + 24);
        sub_10053BB6C(*(id *)v30, v32, v33, v34);
        char v35 = sub_100B834D0((unint64_t)v31, (unint64_t)v32, v33, v34, (unint64_t)a2, (unint64_t)v49, a4, v48);
        sub_10053BBA0(v31, v32, v33, v34);
        if (v35) {
          break;
        }
        unint64_t v11 = (v11 + 1) & ~v43;
        a4 = v29;
        if (((*(void *)(v46 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          goto LABEL_10;
        }
      }
      unsigned __int8 v28 = v48;
      uint64_t v23 = v29;
      uint64_t v26 = v45;
      uint64_t v24 = v49;
      goto LABEL_12;
    }
    a4 = v23;
LABEL_10:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = *v45;
    *uint64_t v45 = 0x8000000000000000;
    sub_10053BB6C(v47, v49, a4, v48);
    sub_100CC80FC((unint64_t)v47, (unint64_t)v49, a4, v48, v11, isUniquelyReferenced_nonNull_native);
    *uint64_t v45 = v50;
    swift_bridgeObjectRelease();
    *(void *)a1 = v47;
    *(void *)(a1 + 8) = v49;
    *(void *)(a1 + 16) = a4;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = v48;
    return result;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  sub_10053BBA0(a2, v24, v23, v28);
  uint64_t v38 = *(void *)(*v26 + 48) + v12;
  uint64_t v39 = *(void **)v38;
  uint64_t v40 = *(void **)(v38 + 8);
  uint64_t v41 = *(void *)(v38 + 16);
  *(void *)a1 = *(void *)v38;
  *(void *)(a1 + 8) = v40;
  *(void *)(a1 + 16) = v41;
  unsigned __int8 v42 = *(unsigned char *)(v38 + 24);
  *(unsigned char *)(a1 + 24) = v42;
  sub_10053BB6C(v39, v40, v41, v42);
  return 0;
}

uint64_t sub_100CB7824(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v75 = a1;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v81 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v74 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v80 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_1005057FC((uint64_t *)&unk_10167BEA0);
  __chkstk_darwin(v79, v11);
  uint64_t v82 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  char v77 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))*((void *)v13 - 1);
  __chkstk_darwin(v13, v14);
  uint64_t v83 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_1005057FC((uint64_t *)&unk_101687B00);
  __chkstk_darwin(v89, v16);
  unsigned __int8 v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1005057FC((uint64_t *)&unk_10167BE90);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19 - 8, v21);
  uint64_t v85 = (uint64_t)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  unsigned __int8 v27 = (char *)&v69 - v26;
  __chkstk_darwin(v25, v28);
  id v73 = (char *)&v69 - v29;
  uint64_t v30 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  uint64_t v90 = a2;
  sub_100CD7B94(&v93);
  Swift::Int v31 = Hasher._finalize()();
  uint64_t v32 = -1 << *(unsigned char *)(v30 + 32);
  unint64_t v33 = v31 & ~v32;
  uint64_t v34 = v30;
  uint64_t v35 = v30 + 56;
  if (((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v65 = (uint64_t)v73;
    uint64_t v64 = v75;
LABEL_26:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v67 = v90;
    sub_100522E9C(v90, v65, (uint64_t *)&unk_10167BE90);
    *(void *)&long long v93 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CC83A8(v65, v33, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v93;
    swift_bridgeObjectRelease();
    sub_10051B3EC(v67, v64, (uint64_t *)&unk_10167BE90);
    return 1;
  }
  uint64_t v78 = v5;
  uint64_t v71 = v3;
  uint64_t v86 = ~v32;
  uint64_t v88 = *(void *)(v20 + 72);
  char v36 = (unsigned int (**)(char *, uint64_t, int *))(v77 + 6);
  char v77 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  uint64_t v70 = (void (**)(char *, uint64_t, uint64_t))(v81 + 32);
  char v72 = (void (**)(uint64_t, uint64_t))(v81 + 8);
  uint64_t v76 = v13;
  uint64_t v87 = v30;
  uint64_t v84 = v30 + 56;
  while (1)
  {
    unint64_t v37 = v88 * v33;
    sub_100522E9C(*(void *)(v34 + 48) + v88 * v33, (uint64_t)v27, (uint64_t *)&unk_10167BE90);
    uint64_t v38 = (uint64_t)&v18[*(int *)(v89 + 48)];
    sub_100522E9C((uint64_t)v27, (uint64_t)v18, (uint64_t *)&unk_10167BE90);
    sub_100522E9C(v90, v38, (uint64_t *)&unk_10167BE90);
    uint64_t v39 = *v36;
    if ((*v36)(v18, 1, v13) == 1) {
      break;
    }
    uint64_t v42 = v85;
    sub_100522E9C((uint64_t)v18, v85, (uint64_t *)&unk_10167BE90);
    unsigned int v43 = v39((char *)v38, 1, v13);
    uint64_t v41 = (uint64_t *)&unk_101687B00;
    if (v43 == 1) {
      goto LABEL_15;
    }
    uint64_t v44 = v38;
    uint64_t v45 = v83;
    sub_100CE12D8(v44, v83, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    char v46 = *(unsigned char *)(v42 + 8);
    *(void *)&long long v93 = *(void *)v42;
    BYTE8(v93) = v46;
    char v47 = *(unsigned char *)(v45 + 8);
    uint64_t v91 = *(void *)v45;
    char v92 = v47;
    sub_1006F2468();
    if ((static CRExtensible.== infix(_:_:)() & 1) == 0) {
      goto LABEL_14;
    }
    uint64_t v48 = v13[5];
    uint64_t v49 = v42 + v48;
    uint64_t v50 = v45 + v48;
    uint64_t v51 = v82;
    uint64_t v52 = v82 + *(int *)(v79 + 48);
    sub_100522E9C(v49, v82, &qword_101672E90);
    uint64_t v81 = v52;
    sub_100522E9C(v50, v52, &qword_101672E90);
    unint64_t v53 = *v77;
    uint64_t v54 = v78;
    if ((*v77)(v51, 1, v78) == 1)
    {
      int v55 = v53(v81, 1, v54);
      uint64_t v42 = v85;
      if (v55 != 1) {
        goto LABEL_13;
      }
      sub_100522F00(v82, &qword_101672E90);
      uint64_t v13 = v76;
      uint64_t v45 = v83;
    }
    else
    {
      sub_100522E9C(v51, v80, &qword_101672E90);
      if (v53(v81, 1, v54) == 1)
      {
        (*v72)(v80, v54);
        uint64_t v42 = v85;
LABEL_13:
        sub_100522F00(v82, (uint64_t *)&unk_10167BEA0);
        uint64_t v13 = v76;
        uint64_t v45 = v83;
LABEL_14:
        sub_100CE14B4(v45, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        uint64_t v41 = (uint64_t *)&unk_10167BE90;
LABEL_15:
        sub_100CE14B4(v42, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        uint64_t v35 = v84;
LABEL_16:
        sub_100522F00((uint64_t)v18, v41);
        sub_100522F00((uint64_t)v27, (uint64_t *)&unk_10167BE90);
        uint64_t v34 = v87;
        goto LABEL_17;
      }
      (*v70)(v74, v81, v54);
      sub_100CDE0D8((unint64_t *)&qword_10167BEB8, (void (*)(uint64_t))&type metadata accessor for URL);
      LODWORD(v81) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v56 = *v72;
      (*v72)((uint64_t)v74, v54);
      v56(v80, v54);
      sub_100522F00(v51, &qword_101672E90);
      uint64_t v13 = v76;
      uint64_t v45 = v83;
      uint64_t v42 = v85;
      if ((v81 & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v57 = v13[6];
    uint64_t v58 = *(void *)(v42 + v57);
    uint64_t v59 = *(void *)(v42 + v57 + 8);
    uint64_t v60 = (void *)(v45 + v57);
    if ((v58 != *v60 || v59 != v60[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_14;
    }
    char v61 = sub_100ED60AC(*(void *)(v42 + v13[7]), *(void *)(v45 + v13[7]));
    uint64_t v62 = v45;
    char v63 = v61;
    sub_100CE14B4(v62, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    sub_100CE14B4(v42, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    sub_100522F00((uint64_t)v18, (uint64_t *)&unk_10167BE90);
    sub_100522F00((uint64_t)v27, (uint64_t *)&unk_10167BE90);
    uint64_t v34 = v87;
    uint64_t v35 = v84;
    if (v63) {
      goto LABEL_27;
    }
LABEL_17:
    unint64_t v33 = (v33 + 1) & v86;
    if (((*(void *)(v35 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v64 = v75;
      unint64_t v3 = v71;
      uint64_t v65 = (uint64_t)v73;
      goto LABEL_26;
    }
  }
  unsigned int v40 = v39((char *)v38, 1, v13);
  uint64_t v41 = (uint64_t *)&unk_101687B00;
  if (v40 != 1) {
    goto LABEL_16;
  }
  sub_100522F00((uint64_t)v18, (uint64_t *)&unk_10167BE90);
  sub_100522F00((uint64_t)v27, (uint64_t *)&unk_10167BE90);
LABEL_27:
  swift_bridgeObjectRelease();
  sub_100522F00(v90, (uint64_t *)&unk_10167BE90);
  sub_100522E9C(*(void *)(*v71 + 48) + v37, v75, (uint64_t *)&unk_10167BE90);
  return 0;
}

uint64_t sub_100CB8180(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100CC8CA0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *unint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100CB8330(void *a1, void *a2)
{
  return sub_100CBC418(a1, a2, (void (*)(void))type metadata accessor for CRLCollaborationParticipant, &qword_101672908, (void (*)(void))type metadata accessor for CRLCollaborationParticipant);
}

uint64_t sub_100CB8364(unsigned char *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_100CC8FC8(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100CB8484(uint64_t a1, uint64_t a2)
{
  uint64_t v112 = a1;
  uint64_t v4 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  unint64_t v8 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v115 = (uint64_t)&v102 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v118 = (uint64_t)&v102 - v14;
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v102 - v16;
  uint64_t v109 = type metadata accessor for UUID();
  unint64_t v130 = *(void *)(v109 - 8);
  __chkstk_darwin(v109, v18);
  uint64_t v20 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_1005057FC(&qword_10167BE58);
  __chkstk_darwin(v114, v21);
  uint64_t v126 = (uint64_t)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  uint64_t v25 = __chkstk_darwin(v23 - 8, v24);
  uint64_t v113 = (uint64_t)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v124 = (uint64_t)&v102 - v29;
  __chkstk_darwin(v28, v30);
  uint64_t v123 = (uint64_t)&v102 - v31;
  uint64_t v129 = sub_1005057FC((uint64_t *)&unk_10167BE60);
  __chkstk_darwin(v129, v32);
  uint64_t v34 = (char *)&v102 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  uint64_t v132 = *(void *)(v35 - 8);
  uint64_t v133 = v35;
  uint64_t v37 = __chkstk_darwin(v35, v36);
  uint64_t v39 = (char *)&v102 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v37, v40);
  uint64_t v125 = (uint64_t)&v102 - v42;
  uint64_t v44 = __chkstk_darwin(v41, v43);
  uint64_t v128 = (unsigned __int8 *)&v102 - v45;
  uint64_t v47 = __chkstk_darwin(v44, v46);
  uint64_t v49 = (char *)&v102 - v48;
  __chkstk_darwin(v47, v50);
  uint64_t v110 = (char *)&v102 - v51;
  uint64_t v111 = v2;
  uint64_t v52 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  uint64_t v53 = a2;
  sub_100DD93E0();
  Swift::Int v54 = Hasher._finalize()();
  uint64_t v55 = -1 << *(unsigned char *)(v52 + 32);
  unint64_t v56 = v54 & ~v55;
  uint64_t v127 = v52 + 56;
  if (((*(void *)(v52 + 56 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v98 = v111;
    uint64_t v99 = (uint64_t)v110;
    uint64_t v59 = v53;
    uint64_t v97 = v112;
    goto LABEL_41;
  }
  char v116 = v17;
  uint64_t v131 = ~v55;
  uint64_t v122 = v39;
  char v121 = v39 + 8;
  uint64_t v132 = *(void *)(v132 + 72);
  uint64_t v108 = (void (**)(uint64_t, uint64_t))(v130 + 8);
  uint64_t v106 = (void (**)(char *, uint64_t, uint64_t))(v130 + 32);
  uint64_t v117 = v8;
  uint64_t v57 = v52;
  uint64_t v119 = v52;
  uint64_t v58 = v129;
  uint64_t v59 = v53;
  uint64_t v60 = v127;
  uint64_t v120 = v59;
  while (1)
  {
    char v61 = v20;
    uint64_t v62 = *(void *)(v57 + 48);
    unint64_t v130 = v132 * v56;
    sub_100CE144C(v62 + v132 * v56, (uint64_t)v49, type metadata accessor for CRLBoardLibraryViewModel.Item);
    char v63 = &v34[*(int *)(v58 + 48)];
    sub_100CE144C((uint64_t)v49, (uint64_t)v34, type metadata accessor for CRLBoardLibraryViewModel.Item);
    sub_100CE144C(v59, (uint64_t)v63, type metadata accessor for CRLBoardLibraryViewModel.Item);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      sub_100CE144C((uint64_t)v34, (uint64_t)v128, type metadata accessor for CRLBoardLibraryViewModel.Item);
      if (!swift_getEnumCaseMultiPayload())
      {
        int v75 = *v128;
        int v76 = *v63;
        sub_100CE14B4((uint64_t)v34, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_100CE14B4((uint64_t)v49, type metadata accessor for CRLBoardLibraryViewModel.Item);
        BOOL v90 = v75 == v76;
        uint64_t v58 = v129;
        uint64_t v20 = v61;
        if (v90) {
          goto LABEL_47;
        }
        goto LABEL_6;
      }
      goto LABEL_4;
    }
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v77 = v59;
      uint64_t v78 = (uint64_t)v122;
      sub_100CE144C((uint64_t)v34, (uint64_t)v122, type metadata accessor for CRLBoardLibraryViewModel.Item);
      sub_1005057FC(&qword_101677100);
      swift_bridgeObjectRelease();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        swift_bridgeObjectRelease();
        uint64_t v79 = v78;
        uint64_t v80 = (uint64_t)v116;
        sub_100CE12D8(v79, (uint64_t)v116, type metadata accessor for CRLBoardIdentifier);
        uint64_t v81 = v118;
        sub_100CE12D8((uint64_t)v63, v118, type metadata accessor for CRLBoardIdentifier);
        char v82 = static UUID.== infix(_:_:)();
        uint64_t v83 = v115;
        sub_100CE144C(v80, v115, type metadata accessor for CRLBoardIdentifier);
        uint64_t v84 = (uint64_t)v117;
        sub_100CE144C(v81, (uint64_t)v117, type metadata accessor for CRLBoardIdentifier);
        if (v82)
        {
          uint64_t v85 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
          uint64_t v86 = *(void *)(v83 + v85);
          uint64_t v87 = *(void *)(v83 + v85 + 8);
          uint64_t v88 = (void *)(v84 + v85);
          uint64_t v58 = v129;
          uint64_t v60 = v127;
          if (v86 == *v88 && v87 == v88[1])
          {
            sub_100CE14B4((uint64_t)v117, type metadata accessor for CRLBoardIdentifier);
            sub_100CE14B4(v83, type metadata accessor for CRLBoardIdentifier);
            sub_100CE14B4(v118, type metadata accessor for CRLBoardIdentifier);
            sub_100CE14B4((uint64_t)v116, type metadata accessor for CRLBoardIdentifier);
            uint64_t v59 = v120;
            goto LABEL_46;
          }
          char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100CE14B4((uint64_t)v117, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4(v83, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4(v118, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v116, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v34, type metadata accessor for CRLBoardLibraryViewModel.Item);
          sub_100CE14B4((uint64_t)v49, type metadata accessor for CRLBoardLibraryViewModel.Item);
          uint64_t v59 = v120;
          uint64_t v57 = v119;
          if (v89) {
            goto LABEL_47;
          }
          goto LABEL_6;
        }
        sub_100CE14B4(v84, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4(v83, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4(v81, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4(v80, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4((uint64_t)v34, type metadata accessor for CRLBoardLibraryViewModel.Item);
        uint64_t v59 = v120;
        uint64_t v57 = v119;
        uint64_t v58 = v129;
        uint64_t v60 = v127;
        goto LABEL_5;
      }
      sub_100CE14B4(v78, type metadata accessor for CRLBoardIdentifier);
      uint64_t v59 = v77;
      uint64_t v60 = v127;
      goto LABEL_4;
    }
    uint64_t v65 = v125;
    sub_100CE144C((uint64_t)v34, v125, type metadata accessor for CRLBoardLibraryViewModel.Item);
    if (swift_getEnumCaseMultiPayload() == 1) {
      break;
    }
    sub_100CE14B4(v65, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    uint64_t v20 = v61;
LABEL_4:
    sub_100522F00((uint64_t)v34, (uint64_t *)&unk_10167BE60);
LABEL_5:
    sub_100CE14B4((uint64_t)v49, type metadata accessor for CRLBoardLibraryViewModel.Item);
LABEL_6:
    unint64_t v56 = (v56 + 1) & v131;
    if (((*(void *)(v60 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v97 = v112;
      uint64_t v98 = v111;
      uint64_t v99 = (uint64_t)v110;
LABEL_41:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_100CE144C(v59, v99, type metadata accessor for CRLBoardLibraryViewModel.Item);
      uint64_t v134 = *v98;
      *uint64_t v98 = 0x8000000000000000;
      sub_100CC9118(v99, v56, isUniquelyReferenced_nonNull_native);
      *uint64_t v98 = v134;
      swift_bridgeObjectRelease();
      sub_100CE12D8(v59, v97, type metadata accessor for CRLBoardLibraryViewModel.Item);
      return 1;
    }
  }
  uint64_t v66 = v123;
  sub_100CE12D8(v65, v123, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  uint64_t v67 = v124;
  sub_100CE12D8((uint64_t)v63, v124, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  uint64_t v68 = v126;
  uint64_t v69 = v126 + *(int *)(v114 + 48);
  sub_100CE144C(v66, v126, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  sub_100CE144C(v67, v69, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  uint64_t v70 = sub_1005057FC(&qword_101670F30);
  uint64_t v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48);
  int v72 = v71(v68, 5, v70);
  uint64_t v73 = v113;
  switch(v72)
  {
    case 1:
      BOOL v90 = v71(v69, 5, v70) == 1;
      goto LABEL_30;
    case 2:
      BOOL v90 = v71(v69, 5, v70) == 2;
      goto LABEL_30;
    case 3:
      BOOL v90 = v71(v69, 5, v70) == 3;
      goto LABEL_30;
    case 4:
      BOOL v90 = v71(v69, 5, v70) == 4;
      goto LABEL_30;
    case 5:
      BOOL v90 = v71(v69, 5, v70) == 5;
LABEL_30:
      uint64_t v59 = v120;
      uint64_t v20 = v61;
      uint64_t v57 = v119;
      if (!v90) {
        goto LABEL_31;
      }
      goto LABEL_45;
    default:
      sub_100CE144C(v126, v113, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v105 = *(int *)(v70 + 48);
      uint64_t v74 = *(void *)(v73 + v105 + 8);
      uint64_t v104 = *(void *)(v73 + v105);
      uint64_t v107 = v74;
      if (v71(v69, 5, v70))
      {
        swift_bridgeObjectRelease();
        (*v108)(v73, v109);
        uint64_t v59 = v120;
        uint64_t v20 = v61;
        uint64_t v57 = v119;
LABEL_31:
        sub_100522F00(v126, &qword_10167BE58);
        goto LABEL_32;
      }
      uint64_t v91 = *(void *)(v69 + v105 + 8);
      uint64_t v102 = *(void *)(v69 + v105);
      uint64_t v105 = v91;
      uint64_t v92 = v109;
      (*v106)(v61, v69, v109);
      uint64_t v103 = v61;
      char v93 = static UUID.== infix(_:_:)();
      uint64_t v94 = *v108;
      (*v108)(v73, v92);
      uint64_t v59 = v120;
      if ((v93 & 1) == 0)
      {
        uint64_t v96 = v103;
        v94((uint64_t)v103, v92);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100CE14B4(v126, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        uint64_t v20 = v96;
        uint64_t v57 = v119;
LABEL_32:
        sub_100CE14B4(v124, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        sub_100CE14B4(v123, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        sub_100CE14B4((uint64_t)v34, type metadata accessor for CRLBoardLibraryViewModel.Item);
        uint64_t v58 = v129;
        goto LABEL_5;
      }
      uint64_t v103 = (char *)v94;
      uint64_t v57 = v119;
      if (v104 != v102 || v107 != v105)
      {
        char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v20 = v61;
        ((void (*)(char *, uint64_t))v103)(v61, v109);
        if (v95) {
          goto LABEL_45;
        }
        sub_100CE14B4(v126, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        goto LABEL_32;
      }
      swift_bridgeObjectRelease_n();
      ((void (*)(char *, uint64_t))v103)(v61, v109);
LABEL_45:
      sub_100CE14B4(v126, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      sub_100CE14B4(v124, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      sub_100CE14B4(v123, type metadata accessor for CRLBoardLibraryViewModel.Folder);
LABEL_46:
      sub_100CE14B4((uint64_t)v34, type metadata accessor for CRLBoardLibraryViewModel.Item);
      sub_100CE14B4((uint64_t)v49, type metadata accessor for CRLBoardLibraryViewModel.Item);
LABEL_47:
      swift_bridgeObjectRelease();
      sub_100CE14B4(v59, type metadata accessor for CRLBoardLibraryViewModel.Item);
      sub_100CE144C(*(void *)(*v111 + 48) + v130, v112, type metadata accessor for CRLBoardLibraryViewModel.Item);
      return 0;
  }
}

uint64_t sub_100CB93E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_10060FFE8();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v20 = a1;
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v7 + 72);
    while (1)
    {
      sub_100CE144C(*(void *)(v11 + 48) + v16 * v14, (uint64_t)v10, type metadata accessor for CRLBoardPreviewImageCache.Item);
      char v17 = sub_100627FFC((uint64_t)v10, a2);
      sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardPreviewImageCache.Item);
      if (v17) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v20;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100CE14B4(a2, type metadata accessor for CRLBoardPreviewImageCache.Item);
    sub_100CE144C(*(void *)(*v3 + 48) + v16 * v14, v20, type metadata accessor for CRLBoardPreviewImageCache.Item);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100CE144C(a2, (uint64_t)v10, type metadata accessor for CRLBoardPreviewImageCache.Item);
    uint64_t v21 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CC9F8C((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v21;
    swift_bridgeObjectRelease();
    sub_100CE12D8(a2, a1, type metadata accessor for CRLBoardPreviewImageCache.Item);
    return 1;
  }
}

uint64_t sub_100CB9668(uint64_t a1, Swift::Int a2, uint64_t a3, char a4, double a5)
{
  uint64_t v11 = *v5;
  Hasher.init(_seed:)();
  Swift::UInt64 v12 = a2;
  Swift::UInt64 v13 = a3;
  if (a4)
  {
    Swift::UInt64 v12 = qword_1011B1DD8[a2];
    Swift::UInt64 v13 = v12;
  }
  if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v12;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v13;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = *(void *)&a5;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  Swift::Int v17 = Hasher._finalize()();
  uint64_t v18 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v19 = v17 & ~v18;
  if ((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
  {
    uint64_t v20 = ~v18;
    while (1)
    {
      uint64_t v21 = *(void *)(v11 + 48) + 32 * v19;
      if (*(unsigned char *)(v21 + 16) == 1)
      {
        uint64_t v22 = &dbl_1011B1E00[*(void *)v21];
        double v23 = *v22;
      }
      else
      {
        uint64_t v22 = (double *)(v21 + 8);
        double v23 = *(double *)v21;
      }
      double v24 = *(double *)&a2;
      double v25 = *(double *)&a3;
      if (a4)
      {
        double v24 = dbl_1011B1E00[a2];
        double v25 = v24;
      }
      BOOL v26 = v23 == v24 && *v22 == v25;
      if (v26 && *(double *)(v21 + 24) == a5) {
        break;
      }
      unint64_t v19 = (v19 + 1) & v20;
      if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        goto LABEL_27;
      }
    }
    uint64_t result = 0;
    uint64_t v31 = *(void *)(*v5 + 48) + 32 * v19;
    a2 = *(void *)v31;
    a3 = *(void *)(v31 + 8);
    char v28 = *(unsigned char *)(v31 + 16);
    a5 = *(double *)(v31 + 24);
  }
  else
  {
LABEL_27:
    char v28 = a4 & 1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    sub_100CCA220(a2, a3, a4 & 1, v19, isUniquelyReferenced_nonNull_native, a5);
    *uint64_t v5 = v32;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 16) = v28;
  *(double *)(a1 + 24) = a5;
  return result;
}

uint64_t sub_100CB9858(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v39 = a1;
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  Swift::UInt64 v12 = (char *)&v36 - v11;
  uint64_t v13 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  uint64_t v37 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  Swift::UInt64 v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  uint64_t v38 = (char *)&v36 - v19;
  uint64_t v20 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v42 = type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v40 = *(int *)(v13 + 20);
  uint64_t v41 = v13;
  Hasher._combine(_:)(*(unsigned char *)(a2 + v40));
  Swift::Int v21 = Hasher._finalize()();
  uint64_t v22 = -1 << *(unsigned char *)(v20 + 32);
  unint64_t v23 = v21 & ~v22;
  uint64_t v44 = v20 + 56;
  if (((*(void *)(v20 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = v39;
    goto LABEL_17;
  }
  uint64_t v36 = v2;
  uint64_t v43 = ~v22;
  uint64_t v24 = *(void *)(v37 + 72);
  do
  {
    sub_100CE144C(*(void *)(v20 + 48) + v24 * v23, (uint64_t)v16, type metadata accessor for CRLBoardIdentifierAndValue);
    char v25 = static UUID.== infix(_:_:)();
    sub_100CE144C((uint64_t)v16, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
    sub_100CE144C(a2, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    if ((v25 & 1) == 0)
    {
      sub_100CE14B4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
      goto LABEL_4;
    }
    uint64_t v26 = *(int *)(v42 + 20);
    uint64_t v27 = *(void *)&v12[v26];
    uint64_t v28 = *(void *)&v12[v26 + 8];
    uint64_t v29 = &v8[v26];
    if (v27 == *(void *)v29 && v28 == *((void *)v29 + 1))
    {
      sub_100CE14B4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
    }
    else
    {
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_100CE14B4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
      if ((v31 & 1) == 0) {
        goto LABEL_4;
      }
    }
    if (v16[*(int *)(v41 + 20)] == *(unsigned char *)(a2 + v40))
    {
      sub_100CE14B4((uint64_t)v16, type metadata accessor for CRLBoardIdentifierAndValue);
      swift_bridgeObjectRelease();
      sub_100CE14B4(a2, type metadata accessor for CRLBoardIdentifierAndValue);
      sub_100CE144C(*(void *)(*v36 + 48) + v24 * v23, v39, type metadata accessor for CRLBoardIdentifierAndValue);
      return 0;
    }
LABEL_4:
    sub_100CE14B4((uint64_t)v16, type metadata accessor for CRLBoardIdentifierAndValue);
    unint64_t v23 = (v23 + 1) & v43;
  }
  while (((*(void *)(v44 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) != 0);
  swift_bridgeObjectRelease();
  uint64_t v33 = v39;
  unint64_t v3 = v36;
LABEL_17:
  uint64_t v34 = (uint64_t)v38;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_100CE144C(a2, v34, type metadata accessor for CRLBoardIdentifierAndValue);
  uint64_t v45 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  sub_100CCA42C(v34, v23, isUniquelyReferenced_nonNull_native);
  *unint64_t v3 = v45;
  swift_bridgeObjectRelease();
  sub_100CE12D8(a2, v33, type metadata accessor for CRLBoardIdentifierAndValue);
  return 1;
}

uint64_t sub_100CB9D50(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a1;
  uint64_t v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest();
  uint64_t v38 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v39 = (uint64_t)&v38 - v18;
  uint64_t v40 = v2;
  uint64_t v19 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v44 = type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v43 = a2 + *(int *)(v12 + 20);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v45 = v12;
  uint64_t v42 = a2 + *(int *)(v12 + 24);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v20 = Hasher._finalize()();
  uint64_t v21 = -1 << *(unsigned char *)(v19 + 32);
  unint64_t v22 = v20 & ~v21;
  uint64_t v23 = v19;
  uint64_t v47 = v19 + 56;
  if ((*(void *)(v19 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22))
  {
    uint64_t v46 = ~v21;
    uint64_t v24 = *(void *)(v38 + 72);
    do
    {
      uint64_t v25 = v23;
      sub_100CE144C(*(void *)(v23 + 48) + v24 * v22, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      char v26 = static UUID.== infix(_:_:)();
      sub_100CE144C((uint64_t)v15, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      sub_100CE144C(a2, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
      if (v26)
      {
        uint64_t v27 = *(int *)(v44 + 20);
        uint64_t v28 = *(void *)&v11[v27];
        uint64_t v29 = *(void *)&v11[v27 + 8];
        uint64_t v30 = &v7[v27];
        if (v28 == *(void *)v30 && v29 == *((void *)v30 + 1))
        {
          sub_100CE14B4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
        }
        else
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100CE14B4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
          if ((v32 & 1) == 0) {
            goto LABEL_4;
          }
        }
        if (static UUID.== infix(_:_:)() & 1) != 0 && (static UUID.== infix(_:_:)())
        {
          sub_100CE14B4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
          swift_bridgeObjectRelease();
          sub_100CE14B4(a2, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
          sub_100CE144C(*(void *)(*v40 + 48) + v24 * v22, v41, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
          return 0;
        }
      }
      else
      {
        sub_100CE14B4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      }
LABEL_4:
      sub_100CE14B4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      unint64_t v22 = (v22 + 1) & v46;
      uint64_t v23 = v25;
    }
    while (((*(void *)(v47 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = v40;
  uint64_t v34 = v41;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = v39;
  sub_100CE144C(a2, v39, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
  uint64_t v48 = *v35;
  *uint64_t v35 = 0x8000000000000000;
  sub_100CCA8D8(v37, v22, isUniquelyReferenced_nonNull_native);
  *uint64_t v35 = v48;
  swift_bridgeObjectRelease();
  sub_100CE12D8(a2, v34, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
  return 1;
}

uint64_t sub_100CBA264(void *a1, void *a2)
{
  return sub_100CBC418(a1, a2, (void (*)(void))type metadata accessor for CRLBoardPreviewImageCache.LookupKey, &qword_101671310, (void (*)(void))type metadata accessor for CRLBoardPreviewImageCache.LookupKey);
}

uint64_t sub_100CBA298(void *a1, void *a2)
{
  return sub_100CBC418(a1, a2, (void (*)(void))type metadata accessor for CRLiOSMiniFormatterBuilder, &qword_101699998, (void (*)(void))type metadata accessor for CRLiOSMiniFormatterBuilder);
}

uint64_t sub_100CBA2CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = _s17CategoryViewModelVMa();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100FC08A4();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v20 = a1;
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v7 + 72);
    while (1)
    {
      sub_100CE144C(*(void *)(v11 + 48) + v16 * v14, (uint64_t)v10, (uint64_t (*)(void))_s17CategoryViewModelVMa);
      BOOL v17 = sub_100FC0B00((uint64_t)v10, a2);
      sub_100CE14B4((uint64_t)v10, (uint64_t (*)(void))_s17CategoryViewModelVMa);
      if (v17) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v20;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100CE14B4(a2, (uint64_t (*)(void))_s17CategoryViewModelVMa);
    sub_100CE144C(*(void *)(*v3 + 48) + v16 * v14, v20, (uint64_t (*)(void))_s17CategoryViewModelVMa);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100CE144C(a2, (uint64_t)v10, (uint64_t (*)(void))_s17CategoryViewModelVMa);
    uint64_t v21 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CCADC0((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v21;
    swift_bridgeObjectRelease();
    sub_100CE12D8(a2, a1, (uint64_t (*)(void))_s17CategoryViewModelVMa);
    return 1;
  }
}

uint64_t sub_100CBA550(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for CalculateExpression();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_100CBCF70(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_100CC29A4();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_100CC5238(a2, v17);
    *unint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for CalculateExpression();
  sub_100CDE0D8((unint64_t *)&unk_10167BEE0, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    sub_100CCB054(v15, v12, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100CDE0D8(&qword_101671300, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_100CBA84C(Swift::UInt *a1, Swift::UInt a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for CRLCloudAccountChangeObserverWrapper();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v17 = sub_100CBD1AC(v7, result + 1);
    Swift::Int v22 = v17;
    if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
    {
      swift_retain();
      sub_100CC2CCC();
      uint64_t v18 = v22;
    }
    else
    {
      uint64_t v18 = v17;
      swift_retain();
    }
    sub_100CC5320(a2, v18);
    *unint64_t v3 = v18;
  }
  else
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a2);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      uint64_t v13 = ~v11;
      swift_bridgeObjectRetain();
      do
      {
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          uint64_t v15 = Strong;
          uint64_t v16 = swift_unknownObjectWeakLoadStrong();
          swift_unknownObjectRelease();
          if (v16)
          {
            swift_unknownObjectRelease();
            if (v15 == v16)
            {
              swift_release();
              swift_bridgeObjectRelease();
              *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
              swift_retain();
              return 0;
            }
          }
        }
        unint64_t v12 = (v12 + 1) & v13;
      }
      while (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
      swift_bridgeObjectRelease();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    Swift::Int v20 = swift_retain();
    sub_100CCB240(v20, v12, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v23;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_100CBAAE4(void *a1, void *a2)
{
  return sub_100CBAB1C(a1, a2, (unint64_t *)&qword_101674210, (uint64_t)CKRecordZoneID_ptr, (uint64_t *)&unk_101671280);
}

uint64_t sub_100CBAB00(void *a1, void *a2)
{
  return sub_100CBAB1C(a1, a2, &qword_10167BED0, (uint64_t)CKRecordID_ptr, &qword_101699948);
}

uint64_t sub_100CBAB1C(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = v5;
  uint64_t v11 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v12 = *v5;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v13 = a2;
    uint64_t v14 = __CocoaSet.member(for:)();

    if (v14)
    {
      swift_bridgeObjectRelease();

      sub_10050BF48(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v37;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v27 = sub_100CBCB50(v12, result + 1, a5, a3);
    uint64_t v38 = (void *)v27;
    unint64_t v28 = *(void *)(v27 + 16);
    if (*(void *)(v27 + 24) <= v28)
    {
      uint64_t v33 = v28 + 1;
      id v34 = v13;
      sub_100CC4A14(v33, a5);
      uint64_t v29 = v38;
    }
    else
    {
      uint64_t v29 = (void *)v27;
      id v30 = v13;
    }
    sub_100CC5604((uint64_t)v13, v29);
    *uint64_t v8 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    *a1 = v13;
  }
  else
  {
    Swift::Int v16 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
    uint64_t v18 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v19 = v17 & ~v18;
    if ((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
    {
      sub_10050BF48(0, a3);
      id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
      char v21 = static NSObject.== infix(_:_:)();

      if (v21)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v25 = *(void **)(*(void *)(*v8 + 48) + 8 * v19);
        *a1 = v25;
        id v26 = v25;
        return 0;
      }
      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    id v32 = a2;
    sub_100CC7990((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a5, a3);
    *uint64_t v8 = v39;
    swift_bridgeObjectRelease();
    *a1 = v32;
  }
  return 1;
}

uint64_t sub_100CBADE8(void *a1, void *a2)
{
  return sub_100CBAB1C(a1, a2, (unint64_t *)&qword_101674200, (uint64_t)NSLayoutConstraint_ptr, &qword_101672928);
}

uint64_t sub_100CBAE04(uint64_t a1, char *a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  Swift::Int v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_100CDE0D8(&qword_101699918, (void (*)(uint64_t))&type metadata accessor for UTType);
  swift_bridgeObjectRetain();
  id v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    Swift::Int v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    uint64_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      char v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_100CDE0D8((unint64_t *)&qword_101693BF0, (void (*)(uint64_t))&type metadata accessor for UTType);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      uint64_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CCB3E4((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_100CBB128(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CRLSELibraryViewModel.Item(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v8);
  Swift::Int v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100720168();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v20 = a1;
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v7 + 72);
    while (1)
    {
      sub_100CE144C(*(void *)(v11 + 48) + v16 * v14, (uint64_t)v10, type metadata accessor for CRLSELibraryViewModel.Item);
      char v17 = sub_100723608((uint64_t)v10, a2);
      sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLSELibraryViewModel.Item);
      if (v17) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v20;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100CE14B4(a2, type metadata accessor for CRLSELibraryViewModel.Item);
    sub_100CE144C(*(void *)(*v3 + 48) + v16 * v14, v20, type metadata accessor for CRLSELibraryViewModel.Item);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100CE144C(a2, (uint64_t)v10, type metadata accessor for CRLSELibraryViewModel.Item);
    uint64_t v21 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CCB6A0((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v21;
    swift_bridgeObjectRelease();
    sub_100CE12D8(a2, a1, type metadata accessor for CRLSELibraryViewModel.Item);
    return 1;
  }
}

uint64_t sub_100CBB3AC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v26 = v8;
      _s8ItemDataCMa();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = *(void *)&v25[0];
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    char v22 = sub_100CBD3EC(v7, result + 1);
    *(void *)&v25[0] = v22;
    if (v22[3] <= v22[2])
    {
      swift_retain();
      sub_100CC3C14();
      uint64_t v23 = *(void *)&v25[0];
    }
    else
    {
      uint64_t v23 = (uint64_t)v22;
      swift_retain();
    }
    sub_100CC5548(a2, v23);
    *unint64_t v3 = v23;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)();
    uint64_t v10 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    sub_100A450A4((uint64_t)v25, v10);
    uint64_t v11 = a2 + OBJC_IVAR____TtCC8Freeform17CRLStencilLibrary8ItemData_metadata;
    sub_100BD26EC(v25);
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      uint64_t v15 = ~v13;
      do
      {
        uint64_t v16 = *(void *)(*(void *)(v6 + 48) + 8 * v14);
        uint64_t v17 = *(void *)(v16 + 16);
        uint64_t v18 = *(void *)(a2 + 16);
        swift_retain();
        if (sub_100A3D424(v17, v18))
        {
          char v19 = sub_100BD2A3C(v16 + OBJC_IVAR____TtCC8Freeform17CRLStencilLibrary8ItemData_metadata, v11);
          swift_release();
          if (v19)
          {
            swift_release();
            swift_bridgeObjectRelease();
            *a1 = *(void *)(*(void *)(*v3 + 48) + 8 * v14);
            swift_retain();
            return 0;
          }
        }
        else
        {
          swift_release();
        }
        unint64_t v14 = (v14 + 1) & v15;
      }
      while (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v25[0] = *v3;
    *unint64_t v3 = 0x8000000000000000;
    Swift::Int v21 = swift_retain();
    sub_100CCB934(v21, v14, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = *(void *)&v25[0];
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_100CBB68C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v96 = (uint64_t)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v94 = (uint64_t)&v88 - v10;
  __chkstk_darwin(v11, v12);
  unint64_t v14 = (char *)&v88 - v13;
  __chkstk_darwin(v15, v16);
  uint64_t v95 = (uint64_t)&v88 - v17;
  __chkstk_darwin(v18, v19);
  Swift::Int v21 = (char *)&v88 - v20;
  __chkstk_darwin(v22, v23);
  uint64_t v99 = (uint64_t)&v88 - v24;
  uint64_t v105 = sub_1005057FC(&qword_101691F00);
  __chkstk_darwin(v105, v25);
  Swift::Int v27 = (char *)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  uint64_t v32 = (char *)&v88 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  uint64_t v101 = (uint64_t)&v88 - v35;
  __chkstk_darwin(v36, v37);
  uint64_t v106 = (uint64_t)&v88 - v38;
  __chkstk_darwin(v39, v40);
  uint64_t v89 = (uint64_t)&v88 - v41;
  BOOL v90 = v2;
  uint64_t v42 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  uint64_t v107 = a2;
  uint64_t v43 = v42;
  sub_100AF7288();
  Swift::Int v44 = Hasher._finalize()();
  uint64_t v45 = -1 << *(unsigned char *)(v42 + 32);
  unint64_t v46 = v44 & ~v45;
  uint64_t v97 = v43 + 56;
  if (((*(void *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_27:
    uint64_t v80 = v90;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v82 = v107;
    uint64_t v83 = v89;
    sub_100CE144C(v107, v89, type metadata accessor for CRLSpotlightManager.ChangeType);
    uint64_t v108 = *v80;
    *uint64_t v80 = 0x8000000000000000;
    sub_100CCBB08(v83, v46, isUniquelyReferenced_nonNull_native);
    *uint64_t v80 = v108;
    swift_bridgeObjectRelease();
    sub_100CE12D8(v82, a1, type metadata accessor for CRLSpotlightManager.ChangeType);
    return 1;
  }
  uint64_t v88 = a1;
  uint64_t v103 = ~v45;
  uint64_t v104 = *(void *)(v29 + 72);
  uint64_t v98 = v14;
  uint64_t v100 = v32;
  uint64_t v47 = v97;
  uint64_t v48 = v106;
  uint64_t v92 = v21;
  uint64_t v93 = v43;
  uint64_t v91 = v28;
  while (1)
  {
    uint64_t v49 = *(void *)(v43 + 48);
    unint64_t v102 = v104 * v46;
    sub_100CE144C(v49 + v104 * v46, v48, type metadata accessor for CRLSpotlightManager.ChangeType);
    uint64_t v50 = v48;
    uint64_t v51 = (uint64_t)&v27[*(int *)(v105 + 48)];
    sub_100CE144C(v50, (uint64_t)v27, type metadata accessor for CRLSpotlightManager.ChangeType);
    sub_100CE144C(v107, v51, type metadata accessor for CRLSpotlightManager.ChangeType);
    if (swift_getEnumCaseMultiPayload() != 1) {
      break;
    }
    sub_100CE144C((uint64_t)v27, (uint64_t)v32, type metadata accessor for CRLSpotlightManager.ChangeType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v53 = (uint64_t)v32;
    if (EnumCaseMultiPayload == 1)
    {
      sub_100CE12D8(v51, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      char v54 = static UUID.== infix(_:_:)();
      uint64_t v55 = (uint64_t)v32;
      uint64_t v56 = (uint64_t)v32;
      uint64_t v57 = v94;
      sub_100CE144C(v55, v94, type metadata accessor for CRLBoardIdentifier);
      uint64_t v58 = (uint64_t)v14;
      uint64_t v59 = (uint64_t)v14;
      uint64_t v60 = v96;
      sub_100CE144C(v58, v96, type metadata accessor for CRLBoardIdentifier);
      if (v54)
      {
        uint64_t v61 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
        uint64_t v62 = *(void *)(v57 + v61);
        uint64_t v63 = *(void *)(v57 + v61 + 8);
        uint64_t v64 = (void *)(v60 + v61);
        if (v62 == *v64 && v63 == v64[1])
        {
          uint64_t v85 = v60;
          uint64_t v72 = v57;
          uint64_t v86 = (uint64_t)v98;
          uint64_t v87 = (uint64_t)v100;
          goto LABEL_30;
        }
        char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_100CE14B4(v60, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4(v57, type metadata accessor for CRLBoardIdentifier);
        unint64_t v14 = v98;
        sub_100CE14B4((uint64_t)v98, type metadata accessor for CRLBoardIdentifier);
        uint64_t v32 = v100;
        sub_100CE14B4((uint64_t)v100, type metadata accessor for CRLBoardIdentifier);
        Swift::Int v21 = v92;
        uint64_t v43 = v93;
        if (v66) {
          goto LABEL_31;
        }
      }
      else
      {
        sub_100CE14B4(v60, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4(v57, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4(v59, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4(v56, type metadata accessor for CRLBoardIdentifier);
        unint64_t v14 = (char *)v59;
        Swift::Int v21 = v92;
        uint64_t v43 = v93;
        uint64_t v32 = (char *)v56;
      }
      goto LABEL_24;
    }
LABEL_3:
    sub_100CE14B4(v53, type metadata accessor for CRLBoardIdentifier);
    sub_100522F00((uint64_t)v27, &qword_101691F00);
LABEL_4:
    uint64_t v48 = v106;
    sub_100CE14B4(v106, type metadata accessor for CRLSpotlightManager.ChangeType);
    unint64_t v46 = (v46 + 1) & v103;
    if (((*(void *)(v47 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      a1 = v88;
      goto LABEL_27;
    }
  }
  uint64_t v67 = v101;
  sub_100CE144C((uint64_t)v27, v101, type metadata accessor for CRLSpotlightManager.ChangeType);
  int v68 = swift_getEnumCaseMultiPayload();
  uint64_t v53 = v67;
  uint64_t v32 = v100;
  if (v68 == 1) {
    goto LABEL_3;
  }
  uint64_t v69 = v99;
  sub_100CE12D8(v51, v99, type metadata accessor for CRLBoardIdentifier);
  uint64_t v70 = v101;
  char v71 = static UUID.== infix(_:_:)();
  sub_100CE144C(v70, (uint64_t)v21, type metadata accessor for CRLBoardIdentifier);
  uint64_t v72 = (uint64_t)v21;
  uint64_t v73 = v95;
  sub_100CE144C(v69, v95, type metadata accessor for CRLBoardIdentifier);
  if ((v71 & 1) == 0)
  {
    sub_100CE14B4(v73, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4(v72, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4(v69, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4(v70, type metadata accessor for CRLBoardIdentifier);
    uint64_t v32 = v100;
    Swift::Int v21 = (char *)v72;
    uint64_t v47 = v97;
    unint64_t v14 = v98;
LABEL_24:
    sub_100CE14B4((uint64_t)v27, type metadata accessor for CRLSpotlightManager.ChangeType);
    goto LABEL_4;
  }
  uint64_t v74 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  uint64_t v75 = *(void *)(v72 + v74);
  uint64_t v76 = *(void *)(v72 + v74 + 8);
  uint64_t v77 = (void *)(v73 + v74);
  if (v75 != *v77 || v76 != v77[1])
  {
    char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_100CE14B4(v73, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4(v72, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4(v99, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4(v101, type metadata accessor for CRLBoardIdentifier);
    uint64_t v32 = v100;
    Swift::Int v21 = (char *)v72;
    uint64_t v47 = v97;
    unint64_t v14 = v98;
    if (v79) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  uint64_t v85 = v73;
  uint64_t v86 = v99;
  uint64_t v87 = v101;
LABEL_30:
  sub_100CE14B4(v85, type metadata accessor for CRLBoardIdentifier);
  sub_100CE14B4(v72, type metadata accessor for CRLBoardIdentifier);
  sub_100CE14B4(v86, type metadata accessor for CRLBoardIdentifier);
  sub_100CE14B4(v87, type metadata accessor for CRLBoardIdentifier);
LABEL_31:
  sub_100CE14B4((uint64_t)v27, type metadata accessor for CRLSpotlightManager.ChangeType);
  sub_100CE14B4(v106, type metadata accessor for CRLSpotlightManager.ChangeType);
  swift_bridgeObjectRelease();
  sub_100CE14B4(v107, type metadata accessor for CRLSpotlightManager.ChangeType);
  sub_100CE144C(*(void *)(*v90 + 48) + v102, v88, type metadata accessor for CRLSpotlightManager.ChangeType);
  return 0;
}

uint64_t sub_100CBBFC4(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CCC388(a2, v9, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100CBC0C0(uint64_t a1, char *a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_100CDE0D8(&qword_101672918, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    uint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    uint64_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      Swift::Int v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_100CDE0D8(&qword_10169A040, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      uint64_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CCC4AC((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_100CBC3E4(void *a1, void *a2)
{
  return sub_100CBC418(a1, a2, (void (*)(void))type metadata accessor for CRLSceneInfo, &qword_101671068, (void (*)(void))type metadata accessor for CRLSceneInfo);
}

uint64_t sub_100CBC418(void *a1, void *a2, void (*a3)(void), uint64_t *a4, void (*a5)(void))
{
  uint64_t v9 = v5;
  uint64_t v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v5;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v14 = a2;
    uint64_t v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease();

      a3(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v38;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v28 = sub_100CBCD74(v13, result + 1, a4, a5);
    uint64_t v39 = (void *)v28;
    unint64_t v29 = *(void *)(v28 + 16);
    if (*(void *)(v28 + 24) <= v29)
    {
      uint64_t v34 = v29 + 1;
      id v35 = v14;
      sub_100CC4A14(v34, a4);
      uint64_t v30 = v39;
    }
    else
    {
      uint64_t v30 = (void *)v28;
      id v31 = v14;
    }
    sub_100CC5604((uint64_t)v14, v30);
    *uint64_t v9 = (uint64_t)v30;
    swift_bridgeObjectRelease();
    *a1 = v14;
  }
  else
  {
    Swift::Int v17 = *(void *)(v12 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v18 = NSObject._rawHashValue(seed:)(v17);
    uint64_t v19 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v20 = v18 & ~v19;
    if ((*(void *)(v12 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
    {
      a3(0);
      id v21 = *(id *)(*(void *)(v12 + 48) + 8 * v20);
      char v22 = static NSObject.== infix(_:_:)();

      if (v22)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v26 = *(void **)(*(void *)(*v9 + 48) + 8 * v20);
        *a1 = v26;
        id v27 = v26;
        return 0;
      }
      uint64_t v23 = ~v19;
      while (1)
      {
        unint64_t v20 = (v20 + 1) & v23;
        if (((*(void *)(v12 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
          break;
        }
        id v24 = *(id *)(*(void *)(v12 + 48) + 8 * v20);
        char v25 = static NSObject.== infix(_:_:)();

        if (v25) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v40 = *v9;
    *uint64_t v9 = 0x8000000000000000;
    id v33 = a2;
    sub_100CC8E3C((uint64_t)v33, v20, isUniquelyReferenced_nonNull_native, a4, a5);
    *uint64_t v9 = v40;
    swift_bridgeObjectRelease();
    *a1 = v33;
  }
  return 1;
}

uint64_t sub_100CBC6D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_10050BF84(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      char v12 = static AnyHashable.== infix(_:_:)();
      sub_10050BFE0((uint64_t)v17);
      if (v12) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_10050BFE0(a2);
    sub_10050BF84(*(void *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10050BF84(a2, (uint64_t)v17);
    uint64_t v16 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    sub_100CCC768((Swift::Int)v17, v10, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v16;
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

Swift::Int sub_100CBC850(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  Swift::Int v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_1005057FC(&qword_101672900);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)();
    uint64_t v25 = v8;
    __CocoaSet.makeIterator()();
    uint64_t v9 = __CocoaSet.Iterator.next()();
    if (v9)
    {
      uint64_t v10 = v9;
      v24[0] = type metadata accessor for CRLTransactableHashableWrapper();
      do
      {
        v24[1] = v10;
        swift_dynamicCast();
        uint64_t v8 = v25;
        if (*(void *)(v25 + 24) <= *(void *)(v25 + 16))
        {
          sub_100CBD9B4();
          uint64_t v8 = v25;
        }
        uint64_t v11 = v24[10];
        Hasher.init(_seed:)();
        uint64_t v12 = *(void *)(v11 + 24);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v12 + 32))(ObjectType, v12);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        Swift::Int result = Hasher._finalize()();
        uint64_t v15 = v8 + 56;
        uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
        unint64_t v17 = result & ~v16;
        unint64_t v18 = v17 >> 6;
        if (((-1 << v17) & ~*(void *)(v8 + 56 + 8 * (v17 >> 6))) != 0)
        {
          unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v8 + 56 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v20 = 0;
          unint64_t v21 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v21 && (v20 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v22 = v18 == v21;
            if (v18 == v21) {
              unint64_t v18 = 0;
            }
            v20 |= v22;
            uint64_t v23 = *(void *)(v15 + 8 * v18);
          }
          while (v23 == -1);
          unint64_t v19 = __clz(__rbit64(~v23)) + (v18 << 6);
        }
        *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        *(void *)(*(void *)(v8 + 48) + 8 * v19) = v11;
        ++*(void *)(v8 + 16);
        uint64_t v10 = __CocoaSet.Iterator.next()();
      }
      while (v10);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v8;
}

Swift::Int sub_100CBCB50(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    sub_1005057FC(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10050BF48(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_100CC4A14(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

Swift::Int sub_100CBCD54(uint64_t a1, uint64_t a2)
{
  return sub_100CBCD74(a1, a2, &qword_101672908, (void (*)(void))type metadata accessor for CRLCollaborationParticipant);
}

Swift::Int sub_100CBCD74(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  if (a2)
  {
    sub_1005057FC(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_100CC4A14(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

uint64_t sub_100CBCF70(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1005057FC((uint64_t *)&unk_1016712F0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for CalculateExpression();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_100CC29A4();
          uint64_t v2 = v14;
        }
        sub_100CDE0D8((unint64_t *)&unk_10167BEE0, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_100CBD1AC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1005057FC(&qword_1016997D0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for CRLCloudAccountChangeObserverWrapper();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_100CC2CCC();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v13);
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_100CBD3B4(uint64_t a1, uint64_t a2)
{
  return sub_100CBCB50(a1, a2, (uint64_t *)&unk_101671280, (unint64_t *)&qword_101674210);
}

Swift::Int sub_100CBD3D0(uint64_t a1, uint64_t a2)
{
  return sub_100CBCB50(a1, a2, &qword_101672928, (unint64_t *)&qword_101674200);
}

void *sub_100CBD3EC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1005057FC(&qword_1016998E8);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v10 = v2;
    __CocoaSet.makeIterator()();
    uint64_t v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      _s8ItemDataCMa();
      do
      {
        *(void *)&v8[0] = v4;
        swift_dynamicCast();
        uint64_t v2 = v10;
        if (*(void *)(v10 + 24) <= *(void *)(v10 + 16))
        {
          sub_100CC3C14();
          uint64_t v2 = v10;
        }
        uint64_t v5 = v9;
        Hasher.init(_seed:)();
        sub_100A450A4((uint64_t)v8, *(void *)(v5 + 16));
        sub_100BD26EC(v8);
        Hasher._finalize()();
        unint64_t v6 = _HashTable.nextHole(atOrAfter:)();
        *(void *)(v2 + 56 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
        *(void *)(*(void *)(v2 + 48) + 8 * v6) = v5;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return &_swiftEmptySetSingleton;
  }
  return (void *)v2;
}

Swift::Int sub_100CBD598(uint64_t a1, uint64_t a2)
{
  return sub_100CBCD74(a1, a2, &qword_101671068, (void (*)(void))type metadata accessor for CRLSceneInfo);
}

uint64_t sub_100CBD5B8()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_1005057FC(&qword_1016728F8);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v14;
        unint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v37) {
          goto LABEL_33;
        }
        unint64_t v21 = v38[v20];
        int64_t v22 = v14 + 1;
        if (!v21)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v21 = v38[v22];
          if (!v21)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              uint64_t v23 = v14 + 4;
              if (v14 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v36;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v38[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v38[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v21 - 1) & v21;
        int64_t v41 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      id v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      uint64_t v7 = v39;
      sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v24;
      int64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v7;
  return result;
}

uint64_t sub_100CBD9B4()
{
  uint64_t v1 = v0;
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v3);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1005057FC(&qword_101672900);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v39 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    int64_t v37 = v0;
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    Swift::UInt v13 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v14 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v16 << 6);
      }
      else
      {
        int64_t v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v38) {
          goto LABEL_33;
        }
        unint64_t v21 = v39[v20];
        ++v16;
        if (!v21)
        {
          int64_t v16 = v20 + 1;
          if (v20 + 1 >= v38) {
            goto LABEL_33;
          }
          unint64_t v21 = v39[v16];
          if (!v21)
          {
            int64_t v16 = v20 + 2;
            if (v20 + 2 >= v38) {
              goto LABEL_33;
            }
            unint64_t v21 = v39[v16];
            if (!v21)
            {
              int64_t v22 = v20 + 3;
              if (v22 >= v38)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v37;
                uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
                if (v35 > 63) {
                  bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v35;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v21 = v39[v22];
              if (!v21)
              {
                while (1)
                {
                  int64_t v16 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v16 >= v38) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v39[v16];
                  ++v22;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v16 = v22;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      uint64_t v23 = v6;
      uint64_t v24 = *(void *)(*(void *)(v6 + 48) + 8 * v19);
      Hasher.init(_seed:)();
      uint64_t v25 = *(void *)(v24 + 24);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v25 + 32))(ObjectType, v25);
      sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = v40;
      dispatch thunk of Hashable.hash(into:)();
      (*v13)(v5, v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v6 = v23;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        uint64_t v6 = v23;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v8 + 48) + 8 * v17) = v24;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v8;
  return result;
}

uint64_t sub_100CBDDB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101699690);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    unint64_t v29 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v9) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v9) {
            goto LABEL_36;
          }
          unint64_t v16 = v29[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v9) {
              goto LABEL_36;
            }
            unint64_t v16 = v29[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_36:
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v29 = -1 << v28;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_42;
                  }
                  if (v5 >= v9) {
                    goto LABEL_36;
                  }
                  unint64_t v16 = v29[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(v2 + 48) + 16 * v14;
      Swift::UInt v19 = *(void *)v18;
      int v20 = *(unsigned __int8 *)(v18 + 8);
      Hasher.init(_seed:)();
      if (v20 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v19);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 16 * v11;
      *(void *)uint64_t v12 = v19;
      *(unsigned char *)(v12 + 8) = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CBE0A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016996A8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v51 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v49 = v1;
    int64_t v50 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    uint64_t v52 = v2;
    uint64_t v53 = v4;
    while (1)
    {
      if (v7)
      {
        uint64_t v55 = (v7 - 1) & v7;
        int64_t v56 = v10;
        unint64_t v17 = __clz(__rbit64(v7)) | (v10 << 6);
      }
      else
      {
        int64_t v18 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v50) {
          goto LABEL_36;
        }
        unint64_t v19 = v51[v18];
        int64_t v20 = v10 + 1;
        if (!v19)
        {
          int64_t v20 = v10 + 2;
          if (v10 + 2 >= v50) {
            goto LABEL_36;
          }
          unint64_t v19 = v51[v20];
          if (!v19)
          {
            int64_t v20 = v10 + 3;
            if (v10 + 3 >= v50) {
              goto LABEL_36;
            }
            unint64_t v19 = v51[v20];
            if (!v19)
            {
              uint64_t v21 = v10 + 4;
              if (v10 + 4 >= v50)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v49;
                uint64_t v45 = 1 << *(unsigned char *)(v2 + 32);
                if (v45 > 63) {
                  bzero(v51, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v51 = -1 << v45;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v19 = v51[v21];
              if (!v19)
              {
                while (1)
                {
                  int64_t v20 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_42;
                  }
                  if (v20 >= v50) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v51[v20];
                  ++v21;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v20 = v10 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v55 = (v19 - 1) & v19;
        int64_t v56 = v20;
        unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
      }
      unint64_t v22 = (uint64_t *)(*(void *)(v2 + 48) + 112 * v17);
      uint64_t v23 = v22[2];
      uint64_t v24 = v22[3];
      uint64_t v65 = v22[4];
      uint64_t v66 = v22[1];
      uint64_t v62 = v22[5];
      uint64_t v25 = v22[7];
      uint64_t v57 = v22[6];
      uint64_t v58 = *v22;
      uint64_t v27 = v22[8];
      uint64_t v26 = v22[9];
      uint64_t v29 = v22[10];
      uint64_t v28 = v22[11];
      uint64_t v30 = v22[12];
      uint64_t v64 = v22[13];
      Hasher.init(_seed:)();
      uint64_t v60 = v25;
      uint64_t v61 = v24;
      uint64_t v54 = v28;
      uint64_t v59 = v30;
      uint64_t v63 = v29;
      if (v30)
      {
        Hasher._combine(_:)(1u);
        uint64_t v31 = v23;
        uint64_t v32 = v57;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1005057FC(&qword_101687C08);
        CRExtensible.hash(into:)();
        sub_1007B037C();
        uint64_t v48 = v30;
        uint64_t v47 = v28;
        uint64_t v33 = v26;
        uint64_t v46 = v26;
        uint64_t v34 = v27;
        uint64_t v35 = v58;
        uint64_t v36 = v62;
        sub_10051ABBC(v58, v66, v31, v24, v65, v62, v57, v60, v27, v46, v63, v47, v48);
        uint64_t v37 = v31;
      }
      else
      {
        uint64_t v33 = v26;
        uint64_t v34 = v27;
        uint64_t v35 = v58;
        Hasher._combine(_:)(0);
        uint64_t v37 = v23;
        uint64_t v36 = v62;
        uint64_t v32 = v57;
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v4 = v53;
      uint64_t v38 = -1 << *(unsigned char *)(v53 + 32);
      unint64_t v39 = result & ~v38;
      unint64_t v40 = v39 >> 6;
      if (((-1 << v39) & ~*(void *)(v8 + 8 * (v39 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v39) & ~*(void *)(v8 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v12 = v59;
        uint64_t v13 = v33;
        uint64_t v15 = v63;
        uint64_t v14 = v64;
      }
      else
      {
        char v41 = 0;
        unint64_t v42 = (unint64_t)(63 - v38) >> 6;
        uint64_t v12 = v59;
        uint64_t v13 = v33;
        uint64_t v15 = v63;
        uint64_t v14 = v64;
        do
        {
          if (++v40 == v42 && (v41 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v43 = v40 == v42;
          if (v40 == v42) {
            unint64_t v40 = 0;
          }
          v41 |= v43;
          uint64_t v44 = *(void *)(v8 + 8 * v40);
        }
        while (v44 == -1);
        unint64_t v11 = __clz(__rbit64(~v44)) + (v40 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v16 = (uint64_t *)(*(void *)(v53 + 48) + 112 * v11);
      *unint64_t v16 = v35;
      v16[1] = v66;
      v16[2] = v37;
      v16[3] = v61;
      v16[4] = v65;
      v16[5] = v36;
      v16[6] = v32;
      v16[7] = v60;
      v16[8] = v34;
      v16[9] = v13;
      unint64_t v7 = v55;
      v16[10] = v15;
      v16[11] = v54;
      v16[12] = v12;
      v16[13] = v14;
      ++*(void *)(v53 + 16);
      uint64_t v2 = v52;
      int64_t v10 = v56;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CBE540(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *v3;
  sub_1005057FC(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 56);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }
      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v11) {
          goto LABEL_36;
        }
        unint64_t v20 = v34[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v20 = v34[v14];
          if (!v20)
          {
            int64_t v14 = v19 + 2;
            if (v19 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v20 = v34[v14];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v11)
              {
LABEL_36:
                swift_release();
                uint64_t v4 = v3;
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 > 63) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v20 = v34[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v14 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v34[v14];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      uint64_t v22 = *(void *)(v5 + 48) + 16 * v18;
      uint64_t v23 = *(void *)v22;
      int v24 = *(unsigned __int8 *)(v22 + 8);
      Hasher.init(_seed:)();
      if (v24 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        sub_1005057FC(a3);
        CRExtensible.hash(into:)();
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = *(void *)(v7 + 48) + 16 * v15;
      *(void *)uint64_t v16 = v23;
      *(unsigned char *)(v16 + 8) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v7;
  return result;
}

uint64_t sub_100CBE860()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016996C0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    unint64_t v27 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        int64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v14 >= v9) {
          goto LABEL_36;
        }
        unint64_t v15 = v27[v14];
        ++v5;
        if (!v15)
        {
          int64_t v5 = v14 + 1;
          if (v14 + 1 >= v9) {
            goto LABEL_36;
          }
          unint64_t v15 = v27[v5];
          if (!v15)
          {
            int64_t v5 = v14 + 2;
            if (v14 + 2 >= v9) {
              goto LABEL_36;
            }
            unint64_t v15 = v27[v5];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v9)
              {
LABEL_36:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v27 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v5 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_42;
                  }
                  if (v5 >= v9) {
                    goto LABEL_36;
                  }
                  unint64_t v15 = v27[v5];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
      }
      int v17 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v13);
      Hasher.init(_seed:)();
      if (v17 == 2)
      {
        Swift::UInt8 v18 = 0;
      }
      else
      {
        Swift::UInt8 v18 = v17 & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v10 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(unsigned char *)(*(void *)(v4 + 48) + v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CBEB48()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016999B0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    BOOL v30 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v15 >= v9) {
          goto LABEL_39;
        }
        unint64_t v16 = v30[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v9) {
            goto LABEL_39;
          }
          unint64_t v16 = v30[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v9) {
              goto LABEL_39;
            }
            unint64_t v16 = v30[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_39:
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v30 = -1 << v29;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v30[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_45;
                  }
                  if (v5 >= v9) {
                    goto LABEL_39;
                  }
                  unint64_t v16 = v30[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(v2 + 48) + 8 * v14;
      Swift::UInt32 v19 = *(_DWORD *)v18;
      int v20 = *(unsigned __int8 *)(v18 + 4);
      Hasher.init(_seed:)();
      if (v20 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v19 & 0x7FFFFFFF) != 0) {
          Swift::UInt32 v21 = v19;
        }
        else {
          Swift::UInt32 v21 = 0;
        }
        Hasher._combine(_:)(v21);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v10 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v11 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 8 * v11;
      *(_DWORD *)uint64_t v12 = v19;
      *(unsigned char *)(v12 + 4) = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CBEE44()
{
  uint64_t v1 = *v0;
  sub_1005057FC(&qword_1016996C8);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v31 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v30 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v7 = v2 + 56;
    uint64_t result = swift_retain();
    int64_t v9 = 0;
    while (1)
    {
      if (v6)
      {
        unint64_t v12 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v13 = v12 | (v9 << 6);
      }
      else
      {
        int64_t v14 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v14 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = v31[v14];
        ++v9;
        if (!v15)
        {
          int64_t v9 = v14 + 1;
          if (v14 + 1 >= v30) {
            goto LABEL_36;
          }
          unint64_t v15 = v31[v9];
          if (!v15)
          {
            int64_t v9 = v14 + 2;
            if (v14 + 2 >= v30) {
              goto LABEL_36;
            }
            unint64_t v15 = v31[v9];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v30)
              {
LABEL_36:
                swift_release();
                uint64_t v29 = 1 << *(unsigned char *)(v1 + 32);
                if (v29 > 63) {
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v31 = -1 << v29;
                }
                *(void *)(v1 + 16) = 0;
                break;
              }
              unint64_t v15 = v31[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v9 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_42;
                  }
                  if (v9 >= v30) {
                    goto LABEL_36;
                  }
                  unint64_t v15 = v31[v9];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v9 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v6 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
      }
      uint64_t v17 = v1;
      uint64_t v18 = *(void *)(v1 + 48) + 24 * v13;
      uint64_t v20 = *(void *)v18;
      uint64_t v19 = *(void *)(v18 + 8);
      int v21 = *(unsigned __int8 *)(v18 + 16);
      Hasher.init(_seed:)();
      if (v21 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        sub_1005057FC(&qword_1016875E0);
        CRExtensible.hash(into:)();
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v7 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v10 = __clz(__rbit64((-1 << v23) & ~*(void *)(v7 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v7 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v10 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      uint64_t v11 = *(void *)(v3 + 48) + 24 * v10;
      *(void *)uint64_t v11 = v20;
      *(void *)(v11 + 8) = v19;
      *(unsigned char *)(v11 + 16) = v21;
      ++*(void *)(v3 + 16);
      uint64_t v1 = v17;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v0 = v3;
  return result;
}

uint64_t sub_100CBF18C(uint64_t a1)
{
  return sub_100CC4A14(a1, &qword_101671328);
}

uint64_t sub_100CBF198(uint64_t a1)
{
  return sub_100CC4A14(a1, (uint64_t *)&unk_1016710F0);
}

uint64_t sub_100CBF1A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101670F40);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CBF484()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101672930);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = (long long *)(*(void *)(v2 + 48) + 48 * v16);
      long long v29 = *v20;
      long long v30 = v20[1];
      *(_OWORD *)uint64_t v31 = v20[2];
      Hasher.init(_seed:)();
      AnyHashable.hash(into:)();
      Hasher._combine(_:)(v31[1]);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = (_OWORD *)(*(void *)(v4 + 48) + 48 * v13);
      *unint64_t v14 = v29;
      v14[1] = v30;
      v14[2] = *(_OWORD *)v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CBF770()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v35 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1005057FC((uint64_t *)&unk_101670EB0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v32 = v0;
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v34 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v33) {
          goto LABEL_33;
        }
        unint64_t v20 = v34[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v20 = v34[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v33) {
              goto LABEL_33;
            }
            unint64_t v20 = v34[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v33)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v32;
                uint64_t v30 = 1 << *(unsigned char *)(v6 + 32);
                if (v30 > 63) {
                  bzero(v34, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v30;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v20 = v34[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v34[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      uint64_t v22 = *(void *)(v35 + 72);
      sub_100CE12D8(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for CRLBoardIdentifierStorage(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = sub_100CE12D8((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22, type metadata accessor for CRLBoardIdentifier);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v8;
  return result;
}

uint64_t sub_100CBFB90()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016997A8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v33 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v32 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32) {
          goto LABEL_33;
        }
        unint64_t v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v16 = v33[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v32) {
              goto LABEL_33;
            }
            unint64_t v16 = v33[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v33 = -1 << v31;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v33[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = v2;
      uint64_t v19 = *(void *)(v2 + 48) + 32 * v14;
      unint64_t v20 = *(void *)v19;
      unint64_t v21 = *(void *)(v19 + 8);
      uint64_t v22 = *(void *)(v19 + 16);
      unsigned __int8 v23 = *(unsigned char *)(v19 + 24);
      Hasher.init(_seed:)();
      sub_100B8174C((int)&v34, v20, v21, v22, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 32 * v11;
      *(void *)uint64_t v12 = v20;
      *(void *)(v12 + 8) = v21;
      *(void *)(v12 + 16) = v22;
      *(unsigned char *)(v12 + 24) = v23;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CBFEAC()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v64 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v70 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v74 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1005057FC((uint64_t *)&unk_10167BE90);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12 - 8, v14);
  int64_t v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v60 - v19;
  uint64_t v61 = v0;
  uint64_t v21 = *v0;
  sub_1005057FC(&qword_101699920);
  uint64_t v22 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v23 = v22;
  if (*(void *)(v21 + 16))
  {
    uint64_t v69 = v1;
    uint64_t v24 = 1 << *(unsigned char *)(v21 + 32);
    uint64_t v25 = *(void *)(v21 + 56);
    uint64_t v72 = (void *)(v21 + 56);
    if (v24 < 64) {
      uint64_t v26 = ~(-1 << v24);
    }
    else {
      uint64_t v26 = -1;
    }
    uint64_t v27 = v9;
    unint64_t v28 = v26 & v25;
    int64_t v71 = (unint64_t)(v24 + 63) >> 6;
    uint64_t v73 = (unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    uint64_t v67 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    uint64_t v63 = (void (**)(char *, uint64_t, uint64_t))(v2 + 32);
    uint64_t v62 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v29 = v22 + 56;
    uint64_t result = swift_retain();
    int64_t v31 = 0;
    uint64_t v65 = v21;
    int v68 = v17;
    uint64_t v66 = v20;
    while (1)
    {
      if (v28)
      {
        unint64_t v33 = __clz(__rbit64(v28));
        v28 &= v28 - 1;
        int64_t v75 = v31;
        unint64_t v34 = v33 | (v31 << 6);
      }
      else
      {
        int64_t v35 = v31 + 1;
        if (__OFADD__(v31, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v35 >= v71) {
          goto LABEL_39;
        }
        unint64_t v36 = v72[v35];
        int64_t v37 = v31 + 1;
        if (!v36)
        {
          int64_t v37 = v31 + 2;
          if (v31 + 2 >= v71) {
            goto LABEL_39;
          }
          unint64_t v36 = v72[v37];
          if (!v36)
          {
            int64_t v37 = v31 + 3;
            if (v31 + 3 >= v71) {
              goto LABEL_39;
            }
            unint64_t v36 = v72[v37];
            if (!v36)
            {
              uint64_t v38 = v31 + 4;
              if (v31 + 4 >= v71)
              {
LABEL_39:
                swift_release();
                uint64_t v58 = v61;
                uint64_t v59 = 1 << *(unsigned char *)(v21 + 32);
                if (v59 > 63) {
                  bzero(v72, ((unint64_t)(v59 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v72 = -1 << v59;
                }
                *(void *)(v65 + 16) = 0;
                uint64_t result = swift_release();
                goto LABEL_44;
              }
              unint64_t v36 = v72[v38];
              if (!v36)
              {
                while (1)
                {
                  int64_t v37 = v38 + 1;
                  if (__OFADD__(v38, 1)) {
                    goto LABEL_46;
                  }
                  if (v37 >= v71) {
                    goto LABEL_39;
                  }
                  unint64_t v36 = v72[v37];
                  ++v38;
                  if (v36) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v37 = v31 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v28 = (v36 - 1) & v36;
        int64_t v75 = v37;
        unint64_t v34 = __clz(__rbit64(v36)) + (v37 << 6);
      }
      uint64_t v39 = v21;
      uint64_t v40 = *(void *)(v21 + 48);
      uint64_t v41 = *(void *)(v13 + 72);
      sub_10051B3EC(v40 + v41 * v34, (uint64_t)v20, (uint64_t *)&unk_10167BE90);
      Hasher.init(_seed:)();
      sub_100522E9C((uint64_t)v20, (uint64_t)v17, (uint64_t *)&unk_10167BE90);
      if ((*v73)(v17, 1, v8) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v42 = v13;
        uint64_t v43 = (uint64_t)v17;
        uint64_t v44 = v74;
        sub_100CE12D8(v43, v74, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        Hasher._combine(_:)(1u);
        char v45 = *(unsigned char *)(v44 + 8);
        uint64_t v76 = *(void *)v44;
        char v77 = v45;
        sub_1005057FC(&qword_101687A18);
        CRExtensible.hash(into:)();
        uint64_t v46 = v8;
        uint64_t v47 = v70;
        sub_100522E9C(v44 + *(int *)(v8 + 20), v70, &qword_101672E90);
        uint64_t v48 = v69;
        if ((*v67)(v47, 1, v69) == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          uint64_t v49 = v64;
          (*v63)(v64, v47, v48);
          Hasher._combine(_:)(1u);
          sub_100CDE0D8((unint64_t *)&unk_101687A20, (void (*)(uint64_t))&type metadata accessor for URL);
          dispatch thunk of Hashable.hash(into:)();
          uint64_t v39 = v65;
          (*v62)(v49, v48);
        }
        uint64_t v8 = v46;
        uint64_t v13 = v42;
        unint64_t v20 = v66;
        uint64_t v50 = v74;
        String.hash(into:)();
        sub_100AD82A0(v78, *(void *)(v50 + *(int *)(v8 + 28)));
        sub_100CE14B4(v50, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        int64_t v17 = v68;
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v51 = -1 << *(unsigned char *)(v23 + 32);
      unint64_t v52 = result & ~v51;
      unint64_t v53 = v52 >> 6;
      if (((-1 << v52) & ~*(void *)(v29 + 8 * (v52 >> 6))) != 0)
      {
        unint64_t v32 = __clz(__rbit64((-1 << v52) & ~*(void *)(v29 + 8 * (v52 >> 6)))) | v52 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v54 = 0;
        unint64_t v55 = (unint64_t)(63 - v51) >> 6;
        do
        {
          if (++v53 == v55 && (v54 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          BOOL v56 = v53 == v55;
          if (v53 == v55) {
            unint64_t v53 = 0;
          }
          v54 |= v56;
          uint64_t v57 = *(void *)(v29 + 8 * v53);
        }
        while (v57 == -1);
        unint64_t v32 = __clz(__rbit64(~v57)) + (v53 << 6);
      }
      *(void *)(v29 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
      uint64_t result = sub_10051B3EC((uint64_t)v20, *(void *)(v23 + 48) + v32 * v41, (uint64_t *)&unk_10167BE90);
      ++*(void *)(v23 + 16);
      uint64_t v21 = v39;
      int64_t v31 = v75;
    }
  }
  uint64_t result = swift_release();
  uint64_t v58 = v61;
LABEL_44:
  *uint64_t v58 = v23;
  return result;
}

uint64_t sub_100CC061C(uint64_t a1)
{
  return sub_100CC4A14(a1, &qword_101672908);
}

uint64_t sub_100CC0628()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101670F38);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CC08D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v70 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v6);
  uint64_t v66 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v71 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v74 = (uint64_t)&v63 - v13;
  uint64_t v14 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  uint64_t v77 = *(void *)(v14 - 8);
  uint64_t v78 = v14;
  uint64_t v16 = __chkstk_darwin(v14, v15);
  Swift::UInt v18 = (unsigned __int8 *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  unint64_t v21 = (char *)&v63 - v20;
  uint64_t v22 = *v0;
  sub_1005057FC(&qword_1016997B0);
  uint64_t v23 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v24 = v23;
  if (!*(void *)(v22 + 16)) {
    goto LABEL_52;
  }
  uint64_t v63 = v0;
  char v25 = *(unsigned char *)(v22 + 32);
  uint64_t v26 = *(void *)(v22 + 56);
  uint64_t v76 = (void *)(v22 + 56);
  uint64_t v27 = 1 << v25;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  else {
    uint64_t v28 = -1;
  }
  unint64_t v29 = v28 & v26;
  uint64_t v69 = v18 + 8;
  int64_t v75 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v65 = (void (**)(char *))(v5 + 32);
  uint64_t v64 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v30 = v23 + 56;
  swift_retain();
  int64_t v31 = 0;
  uint64_t v32 = v22;
  uint64_t v73 = v22;
  while (1)
  {
    if (v29)
    {
      unint64_t v34 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      unint64_t v35 = v34 | (v31 << 6);
      goto LABEL_24;
    }
    int64_t v36 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_53;
    }
    if (v36 >= v75) {
      break;
    }
    unint64_t v37 = v76[v36];
    ++v31;
    if (!v37)
    {
      int64_t v31 = v36 + 1;
      if (v36 + 1 >= v75) {
        break;
      }
      unint64_t v37 = v76[v31];
      if (!v37)
      {
        int64_t v31 = v36 + 2;
        if (v36 + 2 >= v75) {
          break;
        }
        unint64_t v37 = v76[v31];
        if (!v37)
        {
          int64_t v38 = v36 + 3;
          if (v38 >= v75) {
            break;
          }
          unint64_t v37 = v76[v38];
          if (!v37)
          {
            while (1)
            {
              int64_t v31 = v38 + 1;
              if (__OFADD__(v38, 1)) {
                goto LABEL_54;
              }
              if (v31 >= v75) {
                goto LABEL_47;
              }
              unint64_t v37 = v76[v31];
              ++v38;
              if (v37) {
                goto LABEL_23;
              }
            }
          }
          int64_t v31 = v38;
        }
      }
    }
LABEL_23:
    unint64_t v29 = (v37 - 1) & v37;
    unint64_t v35 = __clz(__rbit64(v37)) + (v31 << 6);
LABEL_24:
    uint64_t v39 = *(void *)(v77 + 72);
    sub_100CE12D8(*(void *)(v32 + 48) + v39 * v35, (uint64_t)v21, type metadata accessor for CRLBoardLibraryViewModel.Item);
    Hasher.init(_seed:)();
    sub_100CE144C((uint64_t)v21, (uint64_t)v18, type metadata accessor for CRLBoardLibraryViewModel.Item);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v41 = v74;
        sub_100CE12D8((uint64_t)v18, v74, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        uint64_t v42 = v71;
        sub_100CE144C(v41, v71, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        uint64_t v43 = sub_1005057FC(&qword_101670F30);
        switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v42, 5, v43))
        {
          case 1u:
            Swift::UInt v51 = 0;
            goto LABEL_35;
          case 2u:
            Swift::UInt v51 = 1;
            goto LABEL_35;
          case 3u:
            Swift::UInt v51 = 2;
            goto LABEL_35;
          case 4u:
            Swift::UInt v51 = 3;
            goto LABEL_35;
          case 5u:
            Swift::UInt v51 = 4;
LABEL_35:
            Hasher._combine(_:)(v51);
            break;
          default:
            uint64_t v44 = v72;
            char v45 = (uint64_t *)(v71 + *(int *)(v43 + 48));
            uint64_t v46 = *v45;
            uint64_t v67 = v45[1];
            uint64_t v68 = v46;
            uint64_t v47 = v66;
            (*v65)(v66);
            Hasher._combine(_:)(5uLL);
            sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
            dispatch thunk of Hashable.hash(into:)();
            String.hash(into:)();
            (*v64)(v47, v44);
            uint64_t v32 = v73;
            swift_bridgeObjectRelease();
            break;
        }
        uint64_t v49 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
        uint64_t v50 = v74;
      }
      else
      {
        sub_1005057FC(&qword_101677100);
        swift_bridgeObjectRelease();
        uint64_t v48 = v70;
        sub_100CE12D8((uint64_t)v18, v70, type metadata accessor for CRLBoardIdentifier);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        uint64_t v32 = v73;
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v49 = type metadata accessor for CRLBoardIdentifier;
        uint64_t v50 = v48;
      }
      sub_100CE14B4(v50, v49);
    }
    else
    {
      Hasher._combine(_:)(*v18);
    }
    Swift::Int v52 = Hasher._finalize()();
    uint64_t v53 = -1 << *(unsigned char *)(v24 + 32);
    unint64_t v54 = v52 & ~v53;
    unint64_t v55 = v54 >> 6;
    if (((-1 << v54) & ~*(void *)(v30 + 8 * (v54 >> 6))) != 0)
    {
      unint64_t v33 = __clz(__rbit64((-1 << v54) & ~*(void *)(v30 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v56 = 0;
    unint64_t v57 = (unint64_t)(63 - v53) >> 6;
    do
    {
      if (++v55 == v57 && (v56 & 1) != 0)
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
        JUMPOUT(0x100CC1100);
      }
      BOOL v58 = v55 == v57;
      if (v55 == v57) {
        unint64_t v55 = 0;
      }
      v56 |= v58;
      uint64_t v59 = *(void *)(v30 + 8 * v55);
    }
    while (v59 == -1);
    unint64_t v33 = __clz(__rbit64(~v59)) + (v55 << 6);
LABEL_7:
    *(void *)(v30 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    sub_100CE12D8((uint64_t)v21, *(void *)(v24 + 48) + v33 * v39, type metadata accessor for CRLBoardLibraryViewModel.Item);
    ++*(void *)(v24 + 16);
  }
LABEL_47:
  swift_release();
  uint64_t v60 = v32;
  uint64_t v1 = v63;
  uint64_t v61 = 1 << *(unsigned char *)(v60 + 32);
  if (v61 > 63) {
    bzero(v76, ((unint64_t)(v61 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v76 = -1 << v61;
  }
  *(void *)(v73 + 16) = 0;
LABEL_52:
  uint64_t result = swift_release();
  uint64_t *v1 = v24;
  return result;
}

uint64_t sub_100CC1118()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v73 = (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v77 - 8);
  __chkstk_darwin(v77, v6);
  uint64_t v71 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v70 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v72 = (uint64_t)&v64 - v13;
  uint64_t v65 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  uint64_t v14 = *(void *)(v65 - 8);
  __chkstk_darwin(v65, v15);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  unint64_t v21 = (char *)&v64 - v20;
  uint64_t v22 = *v0;
  sub_1005057FC((uint64_t *)&unk_101670F20);
  uint64_t v23 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v24 = v23;
  if (!*(void *)(v22 + 16)) {
    goto LABEL_51;
  }
  uint64_t v64 = v0;
  uint64_t v25 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v26 = *(void *)(v22 + 56);
  int64_t v75 = (void *)(v22 + 56);
  if (v25 < 64) {
    uint64_t v27 = ~(-1 << v25);
  }
  else {
    uint64_t v27 = -1;
  }
  unint64_t v28 = v27 & v26;
  int64_t v74 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v67 = (void (**)(char *))(v5 + 32);
  uint64_t v66 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v29 = v23 + 56;
  swift_retain();
  int64_t v30 = 0;
  uint64_t v68 = v17;
  uint64_t v69 = v14;
  uint64_t v76 = v21;
  while (1)
  {
    if (v28)
    {
      unint64_t v32 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      int64_t v79 = v30;
      unint64_t v33 = v32 | (v30 << 6);
      goto LABEL_24;
    }
    int64_t v34 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      goto LABEL_52;
    }
    if (v34 >= v74) {
      break;
    }
    unint64_t v35 = v75[v34];
    int64_t v36 = v30 + 1;
    if (!v35)
    {
      int64_t v36 = v30 + 2;
      if (v30 + 2 >= v74) {
        break;
      }
      unint64_t v35 = v75[v36];
      if (!v35)
      {
        int64_t v36 = v30 + 3;
        if (v30 + 3 >= v74) {
          break;
        }
        unint64_t v35 = v75[v36];
        if (!v35)
        {
          uint64_t v37 = v30 + 4;
          if (v30 + 4 >= v74) {
            break;
          }
          unint64_t v35 = v75[v37];
          if (!v35)
          {
            while (1)
            {
              int64_t v36 = v37 + 1;
              if (__OFADD__(v37, 1)) {
                goto LABEL_53;
              }
              if (v36 >= v74) {
                goto LABEL_47;
              }
              unint64_t v35 = v75[v36];
              ++v37;
              if (v35) {
                goto LABEL_23;
              }
            }
          }
          int64_t v36 = v30 + 4;
        }
      }
    }
LABEL_23:
    unint64_t v28 = (v35 - 1) & v35;
    int64_t v79 = v36;
    unint64_t v33 = __clz(__rbit64(v35)) + (v36 << 6);
LABEL_24:
    uint64_t v38 = *(void *)(v22 + 48);
    uint64_t v78 = *(void *)(v14 + 72);
    sub_100CE12D8(v38 + v78 * v33, (uint64_t)v21, type metadata accessor for CRLBoardPreviewImageCache.Item);
    Hasher.init(_seed:)();
    sub_100CE144C((uint64_t)v21, (uint64_t)v17, type metadata accessor for CRLBoardPreviewImageCache.Item);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v40 = v73;
        sub_100CE12D8((uint64_t)v17, v73, type metadata accessor for CRLBoardIdentifier);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v48 = &v17[*(int *)(sub_1005057FC(&qword_10169FA80) + 48)];
        uint64_t v40 = v73;
        sub_100CE12D8((uint64_t)v17, v73, type metadata accessor for CRLBoardIdentifier);
        uint64_t v49 = v71;
        uint64_t v50 = v22;
        uint64_t v51 = v77;
        ((void (*)(char *, char *, uint64_t))*v67)(v71, v48, v77);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v17 = v68;
        swift_bridgeObjectRelease();
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v52 = v51;
        uint64_t v22 = v50;
        uint64_t v14 = v69;
        (*v66)(v49, v52);
      }
      sub_100CE14B4(v40, type metadata accessor for CRLBoardIdentifier);
      unint64_t v21 = v76;
    }
    else
    {
      uint64_t v41 = v72;
      sub_100CE12D8((uint64_t)v17, v72, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v42 = v41;
      uint64_t v43 = v70;
      sub_100CE144C(v42, v70, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v44 = sub_1005057FC(&qword_101670F30);
      switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 5, v44))
      {
        case 1u:
          Swift::UInt v53 = 0;
          goto LABEL_36;
        case 2u:
          Swift::UInt v53 = 1;
          goto LABEL_36;
        case 3u:
          Swift::UInt v53 = 2;
          goto LABEL_36;
        case 4u:
          Swift::UInt v53 = 3;
          goto LABEL_36;
        case 5u:
          Swift::UInt v53 = 4;
LABEL_36:
          Hasher._combine(_:)(v53);
          break;
        default:
          char v45 = v71;
          uint64_t v46 = v77;
          (*v67)(v71);
          Hasher._combine(_:)(5uLL);
          sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
          dispatch thunk of Hashable.hash(into:)();
          unint64_t v21 = v76;
          String.hash(into:)();
          uint64_t v47 = v45;
          uint64_t v14 = v69;
          (*v66)(v47, v46);
          uint64_t v17 = v68;
          swift_bridgeObjectRelease();
          break;
      }
      sub_100CE14B4(v72, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    }
    Swift::Int v54 = Hasher._finalize()();
    uint64_t v55 = -1 << *(unsigned char *)(v24 + 32);
    unint64_t v56 = v54 & ~v55;
    unint64_t v57 = v56 >> 6;
    if (((-1 << v56) & ~*(void *)(v29 + 8 * (v56 >> 6))) != 0)
    {
      unint64_t v31 = __clz(__rbit64((-1 << v56) & ~*(void *)(v29 + 8 * (v56 >> 6)))) | v56 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v58 = 0;
    unint64_t v59 = (unint64_t)(63 - v55) >> 6;
    do
    {
      if (++v57 == v59 && (v58 & 1) != 0)
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        JUMPOUT(0x100CC1A58);
      }
      BOOL v60 = v57 == v59;
      if (v57 == v59) {
        unint64_t v57 = 0;
      }
      v58 |= v60;
      uint64_t v61 = *(void *)(v29 + 8 * v57);
    }
    while (v61 == -1);
    unint64_t v31 = __clz(__rbit64(~v61)) + (v57 << 6);
LABEL_7:
    *(void *)(v29 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    sub_100CE12D8((uint64_t)v21, *(void *)(v24 + 48) + v31 * v78, type metadata accessor for CRLBoardPreviewImageCache.Item);
    ++*(void *)(v24 + 16);
    int64_t v30 = v79;
  }
LABEL_47:
  swift_release();
  uint64_t v1 = v64;
  uint64_t v62 = 1 << *(unsigned char *)(v22 + 32);
  if (v62 > 63) {
    bzero(v75, ((unint64_t)(v62 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v75 = -1 << v62;
  }
  *(void *)(v22 + 16) = 0;
LABEL_51:
  uint64_t result = swift_release();
  uint64_t *v1 = v24;
  return result;
}

unint64_t sub_100CC1A70()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101699648);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v5 = (void *)(v2 + 56);
    uint64_t v6 = -1;
    if (v4 < 64) {
      uint64_t v6 = ~(-1 << v4);
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v11 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        if (v13 >= v8) {
          goto LABEL_22;
        }
        unint64_t v14 = v5[v13];
        ++v10;
        if (!v14)
        {
          int64_t v10 = v13 + 1;
          if (v13 + 1 >= v8) {
            goto LABEL_22;
          }
          unint64_t v14 = v5[v10];
          if (!v14)
          {
            int64_t v10 = v13 + 2;
            if (v13 + 2 >= v8) {
              goto LABEL_22;
            }
            unint64_t v14 = v5[v10];
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v8)
              {
LABEL_22:
                swift_release();
                uint64_t v16 = 1 << *(unsigned char *)(v2 + 32);
                if (v16 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v5 = -1 << v16;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v14 = v5[v15];
              if (!v14)
              {
                while (1)
                {
                  int64_t v10 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_28;
                  }
                  if (v10 >= v8) {
                    goto LABEL_22;
                  }
                  unint64_t v14 = v5[v10];
                  ++v15;
                  if (v14) {
                    goto LABEL_21;
                  }
                }
              }
              int64_t v10 = v15;
            }
          }
        }
LABEL_21:
        unint64_t v7 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      unint64_t result = sub_100CC5124(*(void *)(*(void *)(v2 + 48) + 32 * v12), *(void *)(*(void *)(v2 + 48) + 32 * v12 + 8), *(unsigned char *)(*(void *)(v2 + 48) + 32 * v12 + 16), v3, *(double *)(*(void *)(v2 + 48) + 32 * v12 + 24));
    }
  }
  unint64_t result = swift_release();
  uint64_t *v1 = v3;
  return result;
}

uint64_t sub_100CC1C50()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1005057FC(&qword_101671060);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    unint64_t v31 = v0;
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    unint64_t v33 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v32) {
          goto LABEL_33;
        }
        unint64_t v20 = v33[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v20 = v33[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v32) {
              goto LABEL_33;
            }
            unint64_t v20 = v33[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v31;
                uint64_t v30 = 1 << *(unsigned char *)(v6 + 32);
                if (v30 > 63) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v33 = -1 << v30;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v20 = v33[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v33[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      uint64_t v22 = *(void *)(v34 + 72);
      sub_100CE12D8(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5, type metadata accessor for CRLBoardIdentifierAndValue);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for CRLBoardIdentifierStorage(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v5[*(int *)(v35 + 20)]);
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = sub_100CE12D8((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22, type metadata accessor for CRLBoardIdentifierAndValue);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v8;
  return result;
}

uint64_t sub_100CC2084()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest();
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1005057FC(&qword_1016999A0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v35 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    unint64_t v33 = v0;
    int64_t v34 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v34) {
          goto LABEL_33;
        }
        unint64_t v20 = v35[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v20 = v35[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v34) {
              goto LABEL_33;
            }
            unint64_t v20 = v35[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v34)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v33;
                uint64_t v31 = 1 << *(unsigned char *)(v6 + 32);
                if (v31 > 63) {
                  bzero(v35, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v35 = -1 << v31;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v20 = v35[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v34) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v35[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      uint64_t v22 = *(void *)(v6 + 48);
      uint64_t v23 = *(void *)(v37 + 72);
      sub_100CE12D8(v22 + v23 * v18, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for CRLBoardIdentifierStorage(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      dispatch thunk of Hashable.hash(into:)();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = sub_100CE12D8((uint64_t)v5, *(void *)(v8 + 48) + v16 * v23, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v8;
  return result;
}

uint64_t sub_100CC24E8(uint64_t a1)
{
  return sub_100CC4A14(a1, (uint64_t *)&unk_101671280);
}

uint64_t sub_100CC24F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = _s17CategoryViewModelVMa();
  uint64_t v36 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1005057FC(&qword_1016998E0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    int64_t v34 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    uint64_t v32 = v0;
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v33) {
          goto LABEL_36;
        }
        unint64_t v20 = v34[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v33) {
            goto LABEL_36;
          }
          unint64_t v20 = v34[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v33) {
              goto LABEL_36;
            }
            unint64_t v20 = v34[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v33)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v32;
                uint64_t v31 = 1 << *(unsigned char *)(v6 + 32);
                if (v31 > 63) {
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v34 = -1 << v31;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v20 = v34[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_42;
                  }
                  if (v15 >= v33) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v34[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      uint64_t v22 = *(void *)(v6 + 48);
      uint64_t v23 = *(void *)(v36 + 72);
      sub_100CE12D8(v22 + v23 * v18, (uint64_t)v5, (uint64_t (*)(void))_s17CategoryViewModelVMa);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (*(void *)&v5[*(int *)(v2 + 24) + 8])
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(void *)&v5[*(int *)(v2 + 32)]);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = sub_100CE12D8((uint64_t)v5, *(void *)(v8 + 48) + v16 * v23, (uint64_t (*)(void))_s17CategoryViewModelVMa);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v8;
  return result;
}

uint64_t sub_100CC29A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC((uint64_t *)&unk_1016712F0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          unint64_t v15 = v27[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            unint64_t v15 = v27[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for CalculateExpression();
      sub_100CDE0D8((unint64_t *)&unk_10167BEE0, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CC2CCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016997D0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CC2F78()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_1005057FC(&qword_101699910);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    int64_t v15 = v42;
    uint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v14;
        unint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v37) {
          goto LABEL_33;
        }
        unint64_t v21 = v38[v20];
        int64_t v22 = v14 + 1;
        if (!v21)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v21 = v38[v22];
          if (!v21)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              uint64_t v23 = v14 + 4;
              if (v14 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v36;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v38[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v38[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v21 - 1) & v21;
        int64_t v41 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      char v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      uint64_t v7 = v39;
      sub_100CDE0D8(&qword_101699918, (void (*)(uint64_t))&type metadata accessor for UTType);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v24;
      int64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v7;
  return result;
}

uint64_t sub_100CC3374()
{
  uint64_t v1 = v0;
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v3);
  unint64_t v56 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CRLSEBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v55 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLSELibraryViewModel.Item(0);
  uint64_t v63 = *(void *)(v8 - 8);
  uint64_t v64 = v8;
  __chkstk_darwin(v8, v9);
  unint64_t v11 = (unsigned __int8 *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  int64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = *v0;
  sub_1005057FC(&qword_101699900);
  uint64_t v17 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v18 = v17;
  if (!*(void *)(v16 + 16)) {
    goto LABEL_42;
  }
  uint64_t v52 = v0;
  char v19 = *(unsigned char *)(v16 + 32);
  uint64_t v20 = *(void *)(v16 + 56);
  uint64_t v62 = (void *)(v16 + 56);
  uint64_t v21 = 1 << v19;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & v20;
  char v58 = v11 + 8;
  int64_t v61 = (unint64_t)(v21 + 63) >> 6;
  Swift::UInt v53 = (void (**)(char *, uint64_t))(v2 + 8);
  Swift::Int v54 = (void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32);
  uint64_t v24 = v17 + 56;
  swift_retain();
  int64_t v25 = 0;
  uint64_t v59 = v16;
  while (1)
  {
    if (v23)
    {
      unint64_t v27 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v28 = v27 | (v25 << 6);
      goto LABEL_24;
    }
    int64_t v29 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      goto LABEL_43;
    }
    if (v29 >= v61) {
      break;
    }
    unint64_t v30 = v62[v29];
    ++v25;
    if (!v30)
    {
      int64_t v25 = v29 + 1;
      if (v29 + 1 >= v61) {
        break;
      }
      unint64_t v30 = v62[v25];
      if (!v30)
      {
        int64_t v25 = v29 + 2;
        if (v29 + 2 >= v61) {
          break;
        }
        unint64_t v30 = v62[v25];
        if (!v30)
        {
          int64_t v31 = v29 + 3;
          if (v31 >= v61) {
            break;
          }
          unint64_t v30 = v62[v31];
          if (!v30)
          {
            while (1)
            {
              int64_t v25 = v31 + 1;
              if (__OFADD__(v31, 1)) {
                goto LABEL_44;
              }
              if (v25 >= v61) {
                goto LABEL_38;
              }
              unint64_t v30 = v62[v25];
              ++v31;
              if (v30) {
                goto LABEL_23;
              }
            }
          }
          int64_t v25 = v31;
        }
      }
    }
LABEL_23:
    unint64_t v23 = (v30 - 1) & v30;
    unint64_t v28 = __clz(__rbit64(v30)) + (v25 << 6);
LABEL_24:
    uint64_t v32 = *(void *)(v63 + 72);
    sub_100CE12D8(*(void *)(v16 + 48) + v32 * v28, (uint64_t)v15, type metadata accessor for CRLSELibraryViewModel.Item);
    Hasher.init(_seed:)();
    sub_100CE144C((uint64_t)v15, (uint64_t)v11, type metadata accessor for CRLSELibraryViewModel.Item);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v33 = sub_1005057FC((uint64_t *)&unk_10169B720);
        swift_bridgeObjectRelease();
        unint64_t v57 = &v11[*(int *)(v33 + 80)];
        uint64_t v34 = v55;
        sub_100CE12D8((uint64_t)v11, v55, type metadata accessor for CRLSEBoardIdentifier);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLSEBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        sub_100CE14B4(v34, type metadata accessor for CRLSEBoardIdentifier);
        uint64_t v35 = (uint64_t)v57;
        uint64_t v16 = v59;
        goto LABEL_28;
      case 3u:
        uint64_t v36 = sub_1005057FC((uint64_t *)&unk_10168D400);
        swift_bridgeObjectRelease();
        int64_t v37 = &v11[*(int *)(v36 + 64)];
        uint64_t v38 = v56;
        uint64_t v39 = v60;
        (*v54)(v56, v11, v60);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v40 = v39;
        uint64_t v16 = v59;
        (*v53)(v38, v40);
        uint64_t v35 = (uint64_t)v37;
LABEL_28:
        sub_100522F00(v35, &qword_101672EB0);
        break;
      default:
        Hasher._combine(_:)(*v11);
        break;
    }
    Swift::Int v41 = Hasher._finalize()();
    uint64_t v42 = -1 << *(unsigned char *)(v18 + 32);
    unint64_t v43 = v41 & ~v42;
    unint64_t v44 = v43 >> 6;
    if (((-1 << v43) & ~*(void *)(v24 + 8 * (v43 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v43) & ~*(void *)(v24 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v45 = 0;
    unint64_t v46 = (unint64_t)(63 - v42) >> 6;
    do
    {
      if (++v44 == v46 && (v45 & 1) != 0)
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        JUMPOUT(0x100CC3A30);
      }
      BOOL v47 = v44 == v46;
      if (v44 == v46) {
        unint64_t v44 = 0;
      }
      v45 |= v47;
      uint64_t v48 = *(void *)(v24 + 8 * v44);
    }
    while (v48 == -1);
    unint64_t v26 = __clz(__rbit64(~v48)) + (v44 << 6);
LABEL_7:
    *(void *)(v24 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    sub_100CE12D8((uint64_t)v15, *(void *)(v18 + 48) + v26 * v32, type metadata accessor for CRLSELibraryViewModel.Item);
    ++*(void *)(v18 + 16);
  }
LABEL_38:
  swift_release();
  uint64_t v1 = v52;
  uint64_t v49 = 1 << *(unsigned char *)(v16 + 32);
  if (v49 > 63) {
    bzero(v62, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v62 = -1 << v49;
  }
  *(void *)(v16 + 16) = 0;
LABEL_42:
  uint64_t result = swift_release();
  uint64_t *v1 = v18;
  return result;
}

unint64_t sub_100CC3A40()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101699688);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v5 = (void *)(v2 + 56);
    uint64_t v6 = -1;
    if (v4 < 64) {
      uint64_t v6 = ~(-1 << v4);
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v11 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        if (v13 >= v8) {
          goto LABEL_22;
        }
        unint64_t v14 = v5[v13];
        ++v10;
        if (!v14)
        {
          int64_t v10 = v13 + 1;
          if (v13 + 1 >= v8) {
            goto LABEL_22;
          }
          unint64_t v14 = v5[v10];
          if (!v14)
          {
            int64_t v10 = v13 + 2;
            if (v13 + 2 >= v8) {
              goto LABEL_22;
            }
            unint64_t v14 = v5[v10];
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v8)
              {
LABEL_22:
                swift_release();
                uint64_t v16 = 1 << *(unsigned char *)(v2 + 32);
                if (v16 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v5 = -1 << v16;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v14 = v5[v15];
              if (!v14)
              {
                while (1)
                {
                  int64_t v10 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_28;
                  }
                  if (v10 >= v8) {
                    goto LABEL_22;
                  }
                  unint64_t v14 = v5[v10];
                  ++v15;
                  if (v14) {
                    goto LABEL_21;
                  }
                }
              }
              int64_t v10 = v15;
            }
          }
        }
LABEL_21:
        unint64_t v7 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      unint64_t result = sub_100CC53C4(*(void **)(*(void *)(v2 + 48) + 16 * v12), *(unsigned char *)(*(void *)(v2 + 48) + 16 * v12 + 8), v3);
    }
  }
  unint64_t result = swift_release();
  uint64_t *v1 = v3;
  return result;
}

unint64_t sub_100CC3C14()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016998E8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    unint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_23;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_23;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_23;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_23:
                swift_release();
                uint64_t v19 = 1 << *(unsigned char *)(v2 + 32);
                if (v19 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v19 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v19;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_29;
                  }
                  if (v12 >= v9) {
                    goto LABEL_23;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_22:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v14 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      sub_100A450A4((uint64_t)v20, *(void *)(v15 + 16));
      sub_100BD26EC(v20);
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(void *)(*(void *)(v4 + 48) + 8 * result) = v15;
      ++*(void *)(v4 + 16);
    }
  }
  unint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CC3E78()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6, v7);
  int64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  unint64_t v13 = (char *)&v41 - v12;
  uint64_t v14 = *v0;
  sub_1005057FC(&qword_101672920);
  uint64_t v15 = v14;
  uint64_t v16 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v17 = v16;
  if (*(void *)(v15 + 16))
  {
    uint64_t v18 = 1 << *(unsigned char *)(v15 + 32);
    uint64_t v19 = *(void *)(v15 + 56);
    unint64_t v44 = (void *)(v15 + 56);
    if (v18 < 64) {
      uint64_t v20 = ~(-1 << v18);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v21 = v20 & v19;
    uint64_t v42 = v0;
    int64_t v43 = (unint64_t)(v18 + 63) >> 6;
    uint64_t v22 = v16 + 56;
    uint64_t result = swift_retain();
    int64_t v24 = 0;
    uint64_t v45 = v15;
    while (1)
    {
      if (v21)
      {
        unint64_t v26 = __clz(__rbit64(v21));
        v21 &= v21 - 1;
        unint64_t v27 = v26 | (v24 << 6);
      }
      else
      {
        int64_t v28 = v24 + 1;
        if (__OFADD__(v24, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v28 >= v43) {
          goto LABEL_33;
        }
        unint64_t v29 = v44[v28];
        ++v24;
        if (!v29)
        {
          int64_t v24 = v28 + 1;
          if (v28 + 1 >= v43) {
            goto LABEL_33;
          }
          unint64_t v29 = v44[v24];
          if (!v29)
          {
            int64_t v24 = v28 + 2;
            if (v28 + 2 >= v43) {
              goto LABEL_33;
            }
            unint64_t v29 = v44[v24];
            if (!v29)
            {
              int64_t v30 = v28 + 3;
              if (v30 >= v43)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v42;
                uint64_t v40 = 1 << *(unsigned char *)(v15 + 32);
                if (v40 > 63) {
                  bzero(v44, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v44 = -1 << v40;
                }
                *(void *)(v15 + 16) = 0;
                break;
              }
              unint64_t v29 = v44[v30];
              if (!v29)
              {
                while (1)
                {
                  int64_t v24 = v30 + 1;
                  if (__OFADD__(v30, 1)) {
                    goto LABEL_39;
                  }
                  if (v24 >= v43) {
                    goto LABEL_33;
                  }
                  unint64_t v29 = v44[v24];
                  ++v30;
                  if (v29) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v24 = v30;
            }
          }
        }
LABEL_23:
        unint64_t v21 = (v29 - 1) & v29;
        unint64_t v27 = __clz(__rbit64(v29)) + (v24 << 6);
      }
      uint64_t v31 = *(void *)(v46 + 72);
      sub_100CE12D8(*(void *)(v15 + 48) + v31 * v27, (uint64_t)v13, type metadata accessor for CRLSpotlightManager.ChangeType);
      Hasher.init(_seed:)();
      sub_100CE144C((uint64_t)v13, (uint64_t)v9, type metadata accessor for CRLSpotlightManager.ChangeType);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_100CE12D8((uint64_t)v9, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
      Hasher._combine(_:)(EnumCaseMultiPayload == 1);
      type metadata accessor for UUID();
      sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for CRLBoardIdentifierStorage(0);
      swift_bridgeObjectRetain();
      uint64_t v15 = v45;
      String.hash(into:)();
      swift_bridgeObjectRelease();
      sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
      uint64_t result = Hasher._finalize()();
      uint64_t v33 = -1 << *(unsigned char *)(v17 + 32);
      unint64_t v34 = result & ~v33;
      unint64_t v35 = v34 >> 6;
      if (((-1 << v34) & ~*(void *)(v22 + 8 * (v34 >> 6))) != 0)
      {
        unint64_t v25 = __clz(__rbit64((-1 << v34) & ~*(void *)(v22 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v36 = 0;
        unint64_t v37 = (unint64_t)(63 - v33) >> 6;
        do
        {
          if (++v35 == v37 && (v36 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v38 = v35 == v37;
          if (v35 == v37) {
            unint64_t v35 = 0;
          }
          v36 |= v38;
          uint64_t v39 = *(void *)(v22 + 8 * v35);
        }
        while (v39 == -1);
        unint64_t v25 = __clz(__rbit64(~v39)) + (v35 << 6);
      }
      *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      uint64_t result = sub_100CE12D8((uint64_t)v13, *(void *)(v17 + 48) + v25 * v31, type metadata accessor for CRLSpotlightManager.ChangeType);
      ++*(void *)(v17 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v17;
  return result;
}

uint64_t sub_100CC4394()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101699750);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    unint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100CC4618()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_1005057FC(&qword_101672910);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    BOOL v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    char v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    int64_t v15 = v42;
    uint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v14;
        unint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v37) {
          goto LABEL_33;
        }
        unint64_t v21 = v38[v20];
        int64_t v22 = v14 + 1;
        if (!v21)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v21 = v38[v22];
          if (!v21)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              uint64_t v23 = v14 + 4;
              if (v14 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v36;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v38 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v38[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v38[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v21 - 1) & v21;
        int64_t v41 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      unint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      uint64_t v7 = v39;
      sub_100CDE0D8(&qword_101672918, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v24;
      int64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v7;
  return result;
}

uint64_t sub_100CC4A14(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_1005057FC(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_100CC4CB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101671308);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      long long v29 = *(_OWORD *)v20;
      long long v30 = *(_OWORD *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 32);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)uint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t sub_100CC4F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(ObjectType, v9);
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_100CC5124(Swift::UInt64 a1, Swift::UInt64 a2, char a3, uint64_t a4, double a5)
{
  Hasher.init(_seed:)();
  Swift::UInt64 v10 = a1;
  Swift::UInt64 v11 = a2;
  if (a3)
  {
    Swift::UInt64 v10 = qword_1011B1DD8[a1];
    Swift::UInt64 v11 = v10;
  }
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v10;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v11;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = *(void *)&a5;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a4 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v16 = *(void *)(a4 + 48) + 32 * result;
  *(void *)uint64_t v16 = a1;
  *(void *)(v16 + 8) = a2;
  *(unsigned char *)(v16 + 16) = a3 & 1;
  *(double *)(v16 + 24) = a5;
  ++*(void *)(a4 + 16);
  return result;
}

unint64_t sub_100CC5238(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CalculateExpression();
  sub_100CDE0D8((unint64_t *)&unk_10167BEE0, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_100CC5320(Swift::UInt a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_100CC53C4(void *a1, char a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  switch(a2)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      id v7 = a1;
      NSObject.hash(into:)();
      sub_1007A0938(a1, 1u);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      id v8 = a1;
      NSObject.hash(into:)();
      sub_1007A0938(a1, 2u);
      break;
    case 3:
      if (a1)
      {
        if (a1 == (void *)1) {
          Swift::UInt v9 = 4;
        }
        else {
          Swift::UInt v9 = 5;
        }
      }
      else
      {
        Swift::UInt v9 = 3;
      }
      Hasher._combine(_:)(v9);
      break;
    default:
      Hasher._combine(_:)(0);
      id v6 = a1;
      NSObject.hash(into:)();
      sub_1007A0938(a1, 0);
      break;
  }
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a3 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v11 = *(void *)(a3 + 48) + 16 * result;
  *(void *)uint64_t v11 = a1;
  *(unsigned char *)(v11 + 8) = a2;
  ++*(void *)(a3 + 16);
  return result;
}

unint64_t sub_100CC5548(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  sub_100A450A4((uint64_t)v5, *(void *)(a1 + 16));
  sub_100BD26EC(v5);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_100CC5604(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t sub_100CC5688(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  Swift::UInt64 v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  long long v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100CBD5B8();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100CCE6F4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1016728F8);
      goto LABEL_12;
    }
    sub_100CCED24();
  }
  uint64_t v13 = *v3;
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    unint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_100CDE0D8((unint64_t *)&qword_10167BDC0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100CC5944(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v41 = a1;
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v40 - 8);
  uint64_t v8 = __chkstk_darwin(v40, v7);
  Swift::UInt64 v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8, v11);
  uint64_t v14 = (char *)v34 - v13;
  unint64_t v15 = *(void *)(*v3 + 16);
  unint64_t v16 = *(void *)(*v3 + 24);
  uint64_t v35 = v3;
  if (v16 > v15 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100CBD9B4();
  }
  else
  {
    if (v16 > v15)
    {
      uint64_t result = (uint64_t)sub_100CCE0D8(&qword_101672900);
      goto LABEL_12;
    }
    sub_100CCF0D4();
  }
  uint64_t v17 = *v3;
  Hasher.init(_seed:)();
  uint64_t v18 = *(void *)(v41 + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v18 + 32))(ObjectType, v18);
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v20 = v40;
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v39 = v6 + 8;
  v21(v14, v20);
  uint64_t result = Hasher._finalize()();
  uint64_t v22 = -1 << *(unsigned char *)(v17 + 32);
  a2 = result & ~v22;
  uint64_t v37 = v17 + 56;
  uint64_t v38 = v17;
  if ((*(void *)(v17 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v36 = ~v22;
    v34[1] = type metadata accessor for CRLTransactableHashableWrapper();
    do
    {
      uint64_t v23 = *(void *)(*(void *)(*(void *)(v38 + 48) + 8 * a2) + 24);
      uint64_t v24 = swift_getObjectType();
      unint64_t v25 = *(void (**)(uint64_t, uint64_t))(v23 + 32);
      swift_retain();
      v25(v24, v23);
      uint64_t v26 = *(void *)(v41 + 24);
      uint64_t v27 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v26 + 32))(v27, v26);
      char v28 = static UUID.== infix(_:_:)();
      uint64_t v29 = v40;
      v21(v10, v40);
      v21(v14, v29);
      uint64_t result = swift_release();
      if (v28) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v36;
    }
    while (((*(void *)(v37 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v30 = *v35;
  *(void *)(v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v30 + 48) + 8 * a2) = v41;
  uint64_t v31 = *(void *)(v30 + 16);
  BOOL v32 = __OFADD__(v31, 1);
  uint64_t v33 = v31 + 1;
  if (!v32)
  {
    *(void *)(v30 + 16) = v33;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100CC5C88(Swift::Int result, char a2, unint64_t a3, char a4)
{
  Swift::UInt v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_19;
  }
  if (a4)
  {
    sub_100CBDDB0();
  }
  else
  {
    if (v9 > v8)
    {
      uint64_t result = (Swift::Int)sub_100CCC900();
      goto LABEL_19;
    }
    sub_100CCF4C0();
  }
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a3 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v12 = ~v11;
    do
    {
      uint64_t v13 = *(void *)(v10 + 48) + 16 * a3;
      if (*(unsigned char *)(v13 + 8))
      {
        if (a2) {
          goto LABEL_18;
        }
      }
      else if ((a2 & 1) == 0 && *(void *)v13 == v7)
      {
LABEL_18:
        sub_1005057FC(&qword_10167A3B0);
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        break;
      }
      a3 = (a3 + 1) & v12;
    }
    while (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v15 = *(void *)(v14 + 48) + 16 * a3;
  *(void *)uint64_t v15 = v7;
  *(unsigned char *)(v15 + 8) = a2 & 1;
  uint64_t v16 = *(void *)(v14 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v18;
  }
  return result;
}

Swift::Int sub_100CC5E14(Swift::Int result, unsigned __int8 a2, unint64_t a3, char a4)
{
  Swift::Int v6 = result;
  int v7 = a2;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_19;
  }
  uint64_t v10 = v8 + 1;
  if (a4)
  {
    sub_100CBE540(v10, &qword_101699698, &qword_10167BDC8);
  }
  else
  {
    if (v9 > v8)
    {
      uint64_t result = (Swift::Int)sub_100CCCCA4(&qword_101699698);
      goto LABEL_19;
    }
    sub_100CCFBEC(v10, &qword_101699698, &qword_10167BDC8);
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  if (v7 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1005057FC(&qword_10167BDC8);
    CRExtensible.hash(into:)();
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v13 = ~v12;
    do
    {
      if (*(unsigned __int8 *)(*(void *)(v11 + 48) + 16 * a3 + 8) == 255)
      {
        if (v7 == 255) {
          goto LABEL_18;
        }
      }
      else if (v7 != 255)
      {
        sub_1006F2354();
        uint64_t result = static CRExtensible.== infix(_:_:)();
        if (result)
        {
LABEL_18:
          sub_1005057FC(&qword_101687C00);
          uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v13;
    }
    while (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v15 = *(void *)(v14 + 48) + 16 * a3;
  *(void *)uint64_t v15 = v6;
  *(unsigned char *)(v15 + 8) = v7;
  uint64_t v16 = *(void *)(v14 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v18;
  }
  return result;
}

Swift::Int sub_100CC6054(Swift::Int result, unsigned __int8 a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v7 = result;
  int v8 = a2;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_19;
  }
  uint64_t v11 = v9 + 1;
  if (a4)
  {
    sub_100CBE540(v11, &qword_1016996D0, &qword_10167BE18);
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100CCCCA4(&qword_1016996D0);
      goto LABEL_19;
    }
    sub_100CCFBEC(v11, &qword_1016996D0, &qword_10167BE18);
  }
  uint64_t v12 = *v4;
  Hasher.init(_seed:)();
  if (v8 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1005057FC(&qword_10167BE18);
    CRExtensible.hash(into:)();
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a3 = result & ~v13;
  if ((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = ~v13;
    do
    {
      if (*(unsigned __int8 *)(*(void *)(v12 + 48) + 16 * a3 + 8) == 255)
      {
        if (v8 == 255) {
          goto LABEL_18;
        }
      }
      else if (v8 != 255)
      {
        type metadata accessor for CRLWPWritingDirection(0);
        sub_100CDE0D8((unint64_t *)&unk_10167BE20, type metadata accessor for CRLWPWritingDirection);
        uint64_t result = static CRExtensible.== infix(_:_:)();
        if (result)
        {
LABEL_18:
          sub_1005057FC(&qword_101686E20);
          uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  uint64_t v15 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v16 = *(void *)(v15 + 48) + 16 * a3;
  *(void *)uint64_t v16 = v7;
  *(unsigned char *)(v16 + 8) = v8;
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v19;
  }
  return result;
}

Swift::Int sub_100CC62C8(Swift::Int result, unsigned __int8 a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v7 = result;
  int v8 = a2;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_19;
  }
  uint64_t v11 = v9 + 1;
  if (a4)
  {
    sub_100CBE540(v11, &qword_1016996A0, &qword_101687860);
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100CCCCA4(&qword_1016996A0);
      goto LABEL_19;
    }
    sub_100CCFBEC(v11, &qword_1016996A0, &qword_101687860);
  }
  uint64_t v12 = *v4;
  Hasher.init(_seed:)();
  if (v8 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1005057FC(&qword_101687860);
    CRExtensible.hash(into:)();
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a3 = result & ~v13;
  if ((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = ~v13;
    do
    {
      if (*(unsigned __int8 *)(*(void *)(v12 + 48) + 16 * a3 + 8) == 255)
      {
        if (v8 == 255) {
          goto LABEL_18;
        }
      }
      else if (v8 != 255)
      {
        type metadata accessor for CRLWPParagraphAlignment(0);
        sub_100CDE0D8((unint64_t *)&unk_10167BDE0, type metadata accessor for CRLWPParagraphAlignment);
        uint64_t result = static CRExtensible.== infix(_:_:)();
        if (result)
        {
LABEL_18:
          sub_1005057FC(&qword_101686E18);
          uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  uint64_t v15 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v16 = *(void *)(v15 + 48) + 16 * a3;
  *(void *)uint64_t v16 = v7;
  *(unsigned char *)(v16 + 8) = v8;
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v19;
  }
  return result;
}

uint64_t sub_100CC653C(void *a1, unint64_t a2, char a3)
{
  sub_10051B3EC((uint64_t)a1, (uint64_t)v92, &qword_101686E98);
  uint64_t v50 = v92[1];
  uint64_t v51 = v92[0];
  uint64_t v46 = v92[4];
  uint64_t v47 = v92[2];
  uint64_t v7 = v92[6];
  uint64_t v44 = v92[7];
  uint64_t v45 = v92[5];
  uint64_t v40 = v92[9];
  uint64_t v41 = v92[3];
  uint64_t v42 = v92[10];
  uint64_t v43 = v92[8];
  uint64_t v38 = v92[12];
  uint64_t v39 = v92[11];
  uint64_t v37 = v92[13];
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  uint64_t v52 = a1;
  uint64_t v34 = v3;
  if (v9 > v8 && (a3 & 1) != 0) {
    goto LABEL_59;
  }
  if (a3)
  {
    sub_100CBE0A8();
  }
  else
  {
    if (v9 > v8)
    {
      sub_100CCCAA8();
      goto LABEL_59;
    }
    sub_100CCF784();
  }
  uint64_t v49 = *v3;
  Hasher.init(_seed:)();
  sub_10051B3EC((uint64_t)a1, (uint64_t)v98, &qword_101686E98);
  if (v99)
  {
    Hasher._combine(_:)(1u);
    int v100 = v47;
    char v101 = BYTE4(v47) & 1;
    uint64_t v102 = v41;
    uint64_t v103 = v46;
    uint64_t v104 = v45;
    uint64_t v105 = v7;
    uint64_t v106 = v44;
    uint64_t v107 = v43;
    uint64_t v108 = v40;
    uint64_t v109 = v42;
    uint64_t v110 = v39;
    uint64_t v111 = v38;
    uint64_t v95 = v51;
    char v96 = v50 & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1005057FC(&qword_101687C08);
    CRExtensible.hash(into:)();
    sub_1007B037C();
    sub_10091A53C(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v49 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v49 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v36 = v7;
    uint64_t v48 = ~v11;
    while (1)
    {
      uint64_t v13 = (uint64_t *)(*(void *)(v49 + 48) + 112 * a2);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      uint64_t v16 = v13[2];
      uint64_t v17 = v13[3];
      uint64_t v58 = v13[5];
      uint64_t v63 = v13[4];
      uint64_t v18 = v13[8];
      uint64_t v55 = v13[7];
      uint64_t v56 = v13[6];
      uint64_t v54 = v13[9];
      uint64_t v19 = v13[11];
      uint64_t v57 = v13[10];
      uint64_t v20 = v13[12];
      uint64_t v21 = v13[13];
      uint64_t v53 = v16;
      if (!v20) {
        break;
      }
      uint64_t v12 = v52;
      sub_10051B3EC((uint64_t)v52, (uint64_t)v93, &qword_101686E98);
      if (!v94) {
        goto LABEL_14;
      }
      uint64_t v64 = v14;
      LOBYTE(v65) = v15 & 1;
      sub_10091A53C(v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051B2E8);
      sub_10051B2E8(v14, v15, v16, v17, v63, v58, v56, v55, v18, v54, v57, v19, v20);
      sub_1008EE6D8();
      if (static CRExtensible.== infix(_:_:)())
      {
        uint64_t v35 = v20;
        uint64_t v22 = v17;
        uint64_t v23 = v58;
        if ((v53 & 0x100000000) != 0)
        {
          uint64_t v24 = v55;
          if ((v47 & 0x100000000) == 0) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v24 = v55;
          if ((v47 & 0x100000000) != 0 || *(float *)&v53 != *(float *)&v47) {
            goto LABEL_25;
          }
        }
        uint64_t v25 = v54;
        if (v56)
        {
          if (!v36) {
            goto LABEL_42;
          }
          uint64_t v64 = v22;
          LOBYTE(v65) = v63 & 1;
          sub_1007B1504();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((static CRExtensible.== infix(_:_:)() & 1) == 0 || *((float *)&v63 + 1) != *((float *)&v46 + 1))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10091A53C(v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
            sub_10051ABBC(v14, v15, v53, v22, v63, v58, v56, v55, v18, v54, v57, v19, v35);
            goto LABEL_15;
          }
          uint64_t v24 = v55;
          if (*(float *)&v58 != *(float *)&v45)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_25:
            sub_10091A53C(v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
            sub_10051ABBC(v14, v15, v53, v22, v63, v58, v56, v24, v18, v54, v57, v19, v35);
            goto LABEL_15;
          }
          uint64_t v25 = v54;
          if (*((float *)&v58 + 1) != *((float *)&v45 + 1))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_52:
            sub_10091A53C(v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
            uint64_t v33 = v35;
            uint64_t v32 = v19;
LABEL_53:
            sub_10051ABBC(v14, v15, v53, v22, v63, v23, v56, v24, v18, v25, v57, v32, v33);
            goto LABEL_15;
          }
          char v59 = sub_100ED60AC(v56, v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v59 & 1) == 0)
          {
LABEL_42:
            sub_10091A53C(v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
            sub_10051ABBC(v14, v15, v53, v22, v63, v23, v56, v55, v18, v25, v57, v19, v35);
            goto LABEL_15;
          }
        }
        else if (v36)
        {
          goto LABEL_42;
        }
        if (v25)
        {
          uint64_t v24 = v55;
          if (!v40) {
            goto LABEL_52;
          }
          if (*(float *)&v55 != *(float *)&v44) {
            goto LABEL_52;
          }
          if (*((float *)&v55 + 1) != *((float *)&v44 + 1)) {
            goto LABEL_52;
          }
          if (*(float *)&v18 != *(float *)&v43) {
            goto LABEL_52;
          }
          if (*((float *)&v18 + 1) != *((float *)&v43 + 1)) {
            goto LABEL_52;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v60 = sub_100ED60AC(v25, v40);
          swift_bridgeObjectRelease();
          uint64_t v24 = v55;
          swift_bridgeObjectRelease();
          if ((v60 & 1) == 0) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v24 = v55;
          if (v40) {
            goto LABEL_52;
          }
        }
        if (v19)
        {
          if (!v39) {
            goto LABEL_52;
          }
          if (*(float *)&v57 != *(float *)&v42) {
            goto LABEL_52;
          }
          swift_bridgeObjectRetain();
          uint64_t v26 = swift_bridgeObjectRetain();
          char v61 = sub_100ED60AC(v26, v39);
          swift_bridgeObjectRelease();
          uint64_t v24 = v55;
          swift_bridgeObjectRelease();
          if ((v61 & 1) == 0) {
            goto LABEL_52;
          }
        }
        else if (v39)
        {
          sub_10091A53C(v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
          uint64_t v33 = v35;
          uint64_t v32 = 0;
          goto LABEL_53;
        }
        if ((sub_100ED60AC(v35, v38) & 1) == 0) {
          goto LABEL_52;
        }
        char v62 = sub_100ED60AC(v21, v37);
        sub_10091A53C(v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
        sub_10051ABBC(v14, v15, v53, v22, v63, v23, v56, v24, v18, v25, v57, v19, v35);
        if (v62)
        {
LABEL_58:
          sub_1005057FC(&qword_101686E98);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          goto LABEL_59;
        }
      }
      else
      {
        sub_10091A53C(v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051ABBC);
        sub_10051ABBC(v14, v15, v16, v17, v63, v58, v56, v55, v18, v54, v57, v19, v20);
      }
LABEL_15:
      a2 = (a2 + 1) & v48;
      if (((*(void *)(v49 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_59;
      }
    }
    uint64_t v12 = v52;
    sub_10051B3EC((uint64_t)v52, (uint64_t)&v95, &qword_101686E98);
    if (!v97) {
      goto LABEL_58;
    }
LABEL_14:
    uint64_t v64 = v14;
    uint64_t v65 = v15;
    uint64_t v66 = v16;
    uint64_t v67 = v17;
    uint64_t v68 = v63;
    uint64_t v69 = v58;
    uint64_t v70 = v56;
    uint64_t v71 = v55;
    uint64_t v72 = v18;
    uint64_t v73 = v54;
    uint64_t v74 = v57;
    uint64_t v75 = v19;
    uint64_t v76 = v20;
    uint64_t v77 = v21;
    uint64_t v78 = v51;
    uint64_t v79 = v50;
    uint64_t v80 = v47;
    uint64_t v81 = v41;
    uint64_t v82 = v46;
    uint64_t v83 = v45;
    uint64_t v84 = v36;
    uint64_t v85 = v44;
    uint64_t v86 = v43;
    uint64_t v87 = v40;
    uint64_t v88 = v42;
    uint64_t v89 = v39;
    uint64_t v90 = v38;
    uint64_t v91 = v37;
    sub_10091A53C(v12, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051B2E8);
    sub_10051B2E8(v14, v15, v16, v17, v63, v58, v56, v55, v18, v54, v57, v19, v20);
    sub_1008EE60C((uint64_t)&v64);
    goto LABEL_15;
  }
LABEL_59:
  uint64_t v27 = *v34;
  *(void *)(*v34 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10051B3EC((uint64_t)v52, *(void *)(v27 + 48) + 112 * a2, &qword_101686E98);
  uint64_t v29 = *(void *)(v27 + 16);
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30) {
    __break(1u);
  }
  else {
    *(void *)(v27 + 16) = v31;
  }
  return result;
}

Swift::Int sub_100CC6F64(Swift::Int result, unsigned __int8 a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v7 = result;
  int v8 = a2;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_19;
  }
  uint64_t v11 = v9 + 1;
  if (a4)
  {
    sub_100CBE540(v11, &qword_1016996B0, &qword_101687550);
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100CCCCA4(&qword_1016996B0);
      goto LABEL_19;
    }
    sub_100CCFBEC(v11, &qword_1016996B0, &qword_101687550);
  }
  uint64_t v12 = *v4;
  Hasher.init(_seed:)();
  if (v8 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1005057FC(&qword_101687550);
    CRExtensible.hash(into:)();
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a3 = result & ~v13;
  if ((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = ~v13;
    do
    {
      if (*(unsigned __int8 *)(*(void *)(v12 + 48) + 16 * a3 + 8) == 255)
      {
        if (v8 == 255) {
          goto LABEL_18;
        }
      }
      else if (v8 != 255)
      {
        type metadata accessor for CRLWPStrikethru(0);
        sub_100CDE0D8(&qword_10167BDF0, type metadata accessor for CRLWPStrikethru);
        uint64_t result = static CRExtensible.== infix(_:_:)();
        if (result)
        {
LABEL_18:
          sub_1005057FC((uint64_t *)&unk_101687BE0);
          uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  uint64_t v15 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v16 = *(void *)(v15 + 48) + 16 * a3;
  *(void *)uint64_t v16 = v7;
  *(unsigned char *)(v16 + 8) = v8;
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v19;
  }
  return result;
}

Swift::Int sub_100CC71D8(Swift::Int result, unsigned __int8 a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v7 = result;
  int v8 = a2;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_19;
  }
  uint64_t v11 = v9 + 1;
  if (a4)
  {
    sub_100CBE540(v11, &qword_1016996B8, &qword_10167BDF8);
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100CCCCA4(&qword_1016996B8);
      goto LABEL_19;
    }
    sub_100CCFBEC(v11, &qword_1016996B8, &qword_10167BDF8);
  }
  uint64_t v12 = *v4;
  Hasher.init(_seed:)();
  if (v8 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1005057FC(&qword_10167BDF8);
    CRExtensible.hash(into:)();
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a3 = result & ~v13;
  if ((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = ~v13;
    do
    {
      if (*(unsigned __int8 *)(*(void *)(v12 + 48) + 16 * a3 + 8) == 255)
      {
        if (v8 == 255) {
          goto LABEL_18;
        }
      }
      else if (v8 != 255)
      {
        type metadata accessor for CRLWPUnderline(0);
        sub_100CDE0D8((unint64_t *)&unk_10167BE00, type metadata accessor for CRLWPUnderline);
        uint64_t result = static CRExtensible.== infix(_:_:)();
        if (result)
        {
LABEL_18:
          sub_1005057FC(&qword_101686E10);
          uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  uint64_t v15 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v16 = *(void *)(v15 + 48) + 16 * a3;
  *(void *)uint64_t v16 = v7;
  *(unsigned char *)(v16 + 8) = v8;
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v19;
  }
  return result;
}

Swift::Int sub_100CC744C(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_19;
  }
  if (a3)
  {
    sub_100CBE860();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100CCCE44();
      goto LABEL_19;
    }
    sub_100CCFED4();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  if (v5 == 2)
  {
    Swift::UInt8 v9 = 0;
  }
  else
  {
    Swift::UInt8 v9 = v5 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      int v12 = *(unsigned __int8 *)(*(void *)(v8 + 48) + a2);
      if (v12 == 2)
      {
        if (v5 == 2) {
          goto LABEL_18;
        }
      }
      else if (v5 != 2 && ((((v5 & 1) == 0) ^ v12) & 1) != 0)
      {
LABEL_18:
        sub_1005057FC(&qword_101683780);
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        break;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v13 + 48) + a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

Swift::Int sub_100CC75E4(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_25;
  }
  if (a3)
  {
    sub_100CBEB48();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100CCCFD8();
      goto LABEL_25;
    }
    sub_100CD0188();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  if ((v5 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFF) == 0 && (v5 & 0x7F800000) == 0) {
      Swift::UInt32 v10 = 0;
    }
    else {
      Swift::UInt32 v10 = v5;
    }
    Hasher._combine(_:)(v10);
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = ~v11;
    do
    {
      uint64_t v13 = *(void *)(v8 + 48) + 8 * a2;
      if (*(unsigned char *)(v13 + 4))
      {
        if ((v5 & 0x100000000) != 0) {
          goto LABEL_24;
        }
      }
      else if ((v5 & 0x100000000) == 0 && *(float *)v13 == *(float *)&v5)
      {
LABEL_24:
        sub_1005057FC(&qword_101673520);
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        break;
      }
      a2 = (a2 + 1) & v12;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_25:
  uint64_t v14 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v15 = *(void *)(v14 + 48) + 8 * a2;
  *(_DWORD *)uint64_t v15 = v5;
  *(unsigned char *)(v15 + 4) = BYTE4(v5) & 1;
  uint64_t v16 = *(void *)(v14 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v18;
  }
  return result;
}

Swift::Int sub_100CC777C(Swift::Int result, uint64_t a2, unsigned __int8 a3, unint64_t a4, char a5)
{
  unint64_t v6 = v5;
  Swift::Int v9 = result;
  int v10 = a3;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_19;
  }
  if (a5)
  {
    sub_100CBEE44();
  }
  else
  {
    if (v12 > v11)
    {
      uint64_t result = (Swift::Int)sub_100CCD180();
      goto LABEL_19;
    }
    sub_100CD0450();
  }
  uint64_t v13 = *v5;
  Hasher.init(_seed:)();
  if (v10 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_1005057FC(&qword_1016875E0);
    CRExtensible.hash(into:)();
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v13 + 32);
  a4 = result & ~v14;
  if ((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v15 = ~v14;
    do
    {
      if (*(unsigned __int8 *)(*(void *)(v13 + 48) + 24 * a4 + 16) == 255)
      {
        if (v10 == 255) {
          goto LABEL_18;
        }
      }
      else if (v10 != 255)
      {
        sub_1006F23A8();
        uint64_t result = static CRExtensible.== infix(_:_:)();
        if (result)
        {
LABEL_18:
          sub_1005057FC((uint64_t *)&unk_101687BD0);
          uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      a4 = (a4 + 1) & v15;
    }
    while (((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_19:
  uint64_t v16 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v17 = *(void *)(v16 + 48) + 24 * a4;
  *(void *)uint64_t v17 = v9;
  *(void *)(v17 + 8) = a2;
  *(unsigned char *)(v17 + 16) = v10;
  uint64_t v18 = *(void *)(v16 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v20;
  }
  return result;
}

void sub_100CC7990(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_100CC4A14(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100CCE9B0(a4);
      goto LABEL_14;
    }
    sub_100CD5B54(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10050BF48(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

Swift::Int sub_100CC7B24(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100CBF484();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100CCD4F4();
      goto LABEL_14;
    }
    sub_100CD0A20();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v5 + 40));
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    while (1)
    {
      sub_10052E538(*(void *)(v8 + 48) + 48 * a2, (uint64_t)v17);
      if ((static AnyHashable.== infix(_:_:)() & 1) != 0 && v18 == *(void *)(v5 + 40)) {
        break;
      }
      uint64_t result = sub_10058EF74((uint64_t)v17);
      a2 = (a2 + 1) & v10;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_14;
      }
    }
    sub_10058EF74((uint64_t)v17);
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_14:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v12 = (_OWORD *)(*(void *)(v11 + 48) + 48 * a2);
  long long v13 = *(_OWORD *)(v5 + 16);
  _OWORD *v12 = *(_OWORD *)v5;
  v12[1] = v13;
  v12[2] = *(_OWORD *)(v5 + 32);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v11 + 16) = v16;
  }
  return result;
}

uint64_t sub_100CC7CC8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)&v40 - v15;
  __chkstk_darwin(v14, v17);
  char v19 = (char *)&v40 - v18;
  unint64_t v20 = *(void *)(*v3 + 16);
  unint64_t v21 = *(void *)(*v3 + 24);
  uint64_t v41 = v8;
  uint64_t v42 = v3;
  if (v21 <= v20 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100CBF770();
    }
    else
    {
      if (v21 > v20)
      {
        sub_100CCE2C4(type metadata accessor for CRLBoardIdentifier, (uint64_t *)&unk_101670EB0, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
        goto LABEL_19;
      }
      sub_100CD0CD0();
    }
    uint64_t v22 = *v3;
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v43 = type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v23 = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v22 + 32);
    a2 = v23 & ~v24;
    uint64_t v44 = v22;
    uint64_t v25 = v22 + 56;
    if ((*(void *)(v25 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v40 = v7;
      uint64_t v26 = ~v24;
      uint64_t v27 = *(void *)(v8 + 72);
      do
      {
        sub_100CE144C(*(void *)(v44 + 48) + v27 * a2, (uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
        char v28 = static UUID.== infix(_:_:)();
        sub_100CE144C((uint64_t)v19, (uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
        sub_100CE144C(a1, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
        if (v28)
        {
          uint64_t v29 = *(int *)(v43 + 20);
          uint64_t v30 = *(void *)&v16[v29];
          uint64_t v31 = *(void *)&v16[v29 + 8];
          uint64_t v32 = &v12[v29];
          if (v30 == *(void *)v32 && v31 == *((void *)v32 + 1)) {
            goto LABEL_22;
          }
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
          if (v34) {
            goto LABEL_23;
          }
        }
        else
        {
          sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
        }
        a2 = (a2 + 1) & v26;
      }
      while (((*(void *)(v25 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_19:
  uint64_t v35 = *v42;
  *(void *)(*v42 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100CE12D8(a1, *(void *)(v35 + 48) + *(void *)(v41 + 72) * a2, type metadata accessor for CRLBoardIdentifier);
  uint64_t v37 = *(void *)(v35 + 16);
  BOOL v38 = __OFADD__(v37, 1);
  uint64_t v39 = v37 + 1;
  if (v38)
  {
    __break(1u);
LABEL_22:
    sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
LABEL_23:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v35 + 16) = v39;
  }
  return result;
}

void sub_100CC80FC(unint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 a4, unint64_t i, char a6)
{
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0) {
    goto LABEL_14;
  }
  if (a6)
  {
    sub_100CBFB90();
  }
  else
  {
    if (v13 > v12)
    {
      unint64_t v14 = a1;
      unint64_t v15 = a2;
      uint64_t v16 = a3;
      sub_100CCD708();
      goto LABEL_15;
    }
    sub_100CD10B4();
  }
  uint64_t v17 = *v6;
  Hasher.init(_seed:)();
  sub_100B8174C((int)&v42, a1, a2, a3, a4);
  uint64_t i = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v17 + 32));
  uint64_t v41 = v17 + 56;
  if (((*(void *)(v17 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) == 0)
  {
LABEL_14:
    unint64_t v14 = a1;
    unint64_t v15 = a2;
    uint64_t v16 = a3;
    goto LABEL_15;
  }
  uint64_t v37 = -1 << *(unsigned char *)(v17 + 32);
  uint64_t v39 = v17;
  uint64_t v18 = *(void *)(v17 + 48) + 32 * i;
  id v19 = *(id *)v18;
  unint64_t v20 = *(void **)(v18 + 8);
  uint64_t v21 = *(void *)(v18 + 16);
  unsigned __int8 v22 = *(unsigned char *)(v18 + 24);
  sub_10053BB6C(*(id *)v18, v20, v21, v22);
  unint64_t v14 = a1;
  unint64_t v23 = a1;
  unint64_t v15 = a2;
  unint64_t v24 = a2;
  uint64_t v16 = a3;
  unsigned __int8 v40 = a4;
  char v25 = sub_100B834D0((unint64_t)v19, (unint64_t)v20, v21, v22, v23, v24, a3, a4);
  sub_10053BBA0(v19, v20, v21, v22);
  if (v25) {
    goto LABEL_19;
  }
  for (uint64_t i = (i + 1) & ~v37; ((*(void *)(v41 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; a4 = v40)
  {
    uint64_t v26 = *(void *)(v39 + 48) + 32 * i;
    id v27 = *(id *)v26;
    char v28 = *(void **)(v26 + 8);
    uint64_t v29 = *(void *)(v26 + 16);
    unsigned __int8 v30 = *(unsigned char *)(v26 + 24);
    sub_10053BB6C(*(id *)v26, v28, v29, v30);
    char v31 = sub_100B834D0((unint64_t)v27, (unint64_t)v28, v29, v30, v14, v15, v16, a4);
    sub_10053BBA0(v27, v28, v29, v30);
    if (v31) {
      goto LABEL_19;
    }
    uint64_t i = (i + 1) & ~v37;
  }
LABEL_15:
  uint64_t v32 = *v38;
  *(void *)(*v38 + 8 * (i >> 6) + 56) |= 1 << i;
  uint64_t v33 = *(void *)(v32 + 48) + 32 * i;
  *(void *)uint64_t v33 = v14;
  *(void *)(v33 + 8) = v15;
  *(void *)(v33 + 16) = v16;
  *(unsigned char *)(v33 + 24) = a4;
  uint64_t v34 = *(void *)(v32 + 16);
  BOOL v35 = __OFADD__(v34, 1);
  uint64_t v36 = v34 + 1;
  if (!v35)
  {
    *(void *)(v32 + 16) = v36;
    return;
  }
  __break(1u);
LABEL_19:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_100CC83A8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v86 = a1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v73 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v75 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v9 - 8, v10);
  unint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_1005057FC((uint64_t *)&unk_10167BEA0);
  __chkstk_darwin(v76, v13);
  uint64_t v79 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = (int *)type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  uint64_t v16 = *((void *)v15 - 1);
  __chkstk_darwin(v15, v17);
  id v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_1005057FC((uint64_t *)&unk_101687B00);
  __chkstk_darwin(v85, v20);
  unsigned __int8 v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1005057FC((uint64_t *)&unk_10167BE90);
  uint64_t v78 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v81 = (uint64_t)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  unsigned __int8 v30 = (char *)&v65 - v29;
  unint64_t v31 = *(void *)(*v3 + 16);
  unint64_t v32 = *(void *)(*v3 + 24);
  uint64_t v77 = v3;
  if (v32 <= v31 || (a3 & 1) == 0)
  {
    if (a3)
    {
      uint64_t v74 = v12;
      uint64_t v66 = v28;
      sub_100CBFEAC();
    }
    else
    {
      if (v32 > v31)
      {
        sub_100CCD8CC();
        goto LABEL_32;
      }
      uint64_t v74 = v12;
      uint64_t v66 = v28;
      sub_100CD13A4();
    }
    uint64_t v33 = *v3;
    Hasher.init(_seed:)();
    sub_100CD7B94(&v89);
    Swift::Int v34 = Hasher._finalize()();
    uint64_t v35 = -1 << *(unsigned char *)(v33 + 32);
    a2 = v34 & ~v35;
    uint64_t v84 = v33 + 56;
    if ((*(void *)(v33 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v72 = v6;
      uint64_t v83 = ~v35;
      uint64_t v82 = *(void *)(v78 + 72);
      uint64_t v36 = (unsigned int (**)(char *, uint64_t, int *))(v16 + 48);
      uint64_t v70 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 6);
      uint64_t v68 = (void (**)(char *, uint64_t, uint64_t))(v73 + 4);
      ++v73;
      uint64_t v71 = v19;
      uint64_t v80 = v33;
      uint64_t v69 = v15;
      while (1)
      {
        sub_100522E9C(*(void *)(v33 + 48) + v82 * a2, (uint64_t)v30, (uint64_t *)&unk_10167BE90);
        uint64_t v37 = (uint64_t)&v22[*(int *)(v85 + 48)];
        sub_100522E9C((uint64_t)v30, (uint64_t)v22, (uint64_t *)&unk_10167BE90);
        sub_100522E9C(v86, v37, (uint64_t *)&unk_10167BE90);
        BOOL v38 = *v36;
        if ((*v36)(v22, 1, v15) == 1) {
          break;
        }
        uint64_t v41 = v81;
        sub_100522E9C((uint64_t)v22, v81, (uint64_t *)&unk_10167BE90);
        unsigned int v42 = v38((char *)v37, 1, v15);
        unsigned __int8 v40 = (uint64_t *)&unk_101687B00;
        if (v42 == 1) {
          goto LABEL_22;
        }
        sub_100CE12D8(v37, (uint64_t)v19, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        char v43 = *(unsigned char *)(v41 + 8);
        *(void *)&long long v89 = *(void *)v41;
        BYTE8(v89) = v43;
        char v44 = v19[8];
        uint64_t v87 = *(void *)v19;
        char v88 = v44;
        sub_1006F2468();
        if ((static CRExtensible.== infix(_:_:)() & 1) == 0) {
          goto LABEL_21;
        }
        uint64_t v45 = v15[5];
        uint64_t v46 = v41 + v45;
        uint64_t v47 = (uint64_t)&v19[v45];
        uint64_t v48 = v79;
        uint64_t v49 = v79 + *(int *)(v76 + 48);
        sub_100522E9C(v46, v79, &qword_101672E90);
        sub_100522E9C(v47, v49, &qword_101672E90);
        uint64_t v50 = *v70;
        uint64_t v51 = v72;
        if ((*v70)(v48, 1, v72) == 1)
        {
          int v52 = v50(v49, 1, v51);
          unint64_t v15 = v69;
          if (v52 != 1) {
            goto LABEL_20;
          }
          sub_100522F00(v79, &qword_101672E90);
          id v19 = v71;
          uint64_t v41 = v81;
        }
        else
        {
          sub_100522E9C(v48, (uint64_t)v74, &qword_101672E90);
          if (v50(v49, 1, v51) == 1)
          {
            (*v73)(v74, v51);
            unint64_t v15 = v69;
LABEL_20:
            sub_100522F00(v79, (uint64_t *)&unk_10167BEA0);
            id v19 = v71;
            uint64_t v41 = v81;
LABEL_21:
            sub_100CE14B4((uint64_t)v19, type metadata accessor for CRLWPHyperlinkSmartFieldData);
            unsigned __int8 v40 = (uint64_t *)&unk_10167BE90;
LABEL_22:
            sub_100CE14B4(v41, type metadata accessor for CRLWPHyperlinkSmartFieldData);
            uint64_t v33 = v80;
LABEL_23:
            sub_100522F00((uint64_t)v22, v40);
            sub_100522F00((uint64_t)v30, (uint64_t *)&unk_10167BE90);
            goto LABEL_24;
          }
          (*v68)(v75, v49, v51);
          sub_100CDE0D8((unint64_t *)&qword_10167BEB8, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v53 = (uint64_t)v74;
          int v67 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v54 = *v73;
          (*v73)(v75, v51);
          v54((char *)v53, v51);
          sub_100522F00(v48, &qword_101672E90);
          id v19 = v71;
          uint64_t v41 = v81;
          unint64_t v15 = v69;
          if ((v67 & 1) == 0) {
            goto LABEL_21;
          }
        }
        uint64_t v55 = v15[6];
        uint64_t v56 = *(void *)(v41 + v55);
        uint64_t v57 = *(void *)(v41 + v55 + 8);
        uint64_t v58 = &v19[v55];
        if ((v56 != *(void *)v58 || v57 != *((void *)v58 + 1))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_21;
        }
        char v59 = sub_100ED60AC(*(void *)(v41 + v15[7]), *(void *)&v19[v15[7]]);
        sub_100CE14B4((uint64_t)v19, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        sub_100CE14B4(v41, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        sub_100522F00((uint64_t)v22, (uint64_t *)&unk_10167BE90);
        sub_100522F00((uint64_t)v30, (uint64_t *)&unk_10167BE90);
        uint64_t v33 = v80;
        if (v59) {
          goto LABEL_36;
        }
LABEL_24:
        a2 = (a2 + 1) & v83;
        if (((*(void *)(v84 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_32;
        }
      }
      unsigned int v39 = v38((char *)v37, 1, v15);
      unsigned __int8 v40 = (uint64_t *)&unk_101687B00;
      if (v39 == 1) {
        goto LABEL_35;
      }
      goto LABEL_23;
    }
  }
LABEL_32:
  uint64_t v60 = *v77;
  *(void *)(*v77 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10051B3EC(v86, *(void *)(v60 + 48) + *(void *)(v78 + 72) * a2, (uint64_t *)&unk_10167BE90);
  uint64_t v62 = *(void *)(v60 + 16);
  BOOL v63 = __OFADD__(v62, 1);
  uint64_t v64 = v62 + 1;
  if (v63)
  {
    __break(1u);
LABEL_35:
    sub_100522F00((uint64_t)v22, (uint64_t *)&unk_10167BE90);
    sub_100522F00((uint64_t)v30, (uint64_t *)&unk_10167BE90);
LABEL_36:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v60 + 16) = v64;
  }
  return result;
}

Swift::Int sub_100CC8CA0(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100CBF1A4();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100CCD340();
      goto LABEL_22;
    }
    sub_100CD0770();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void sub_100CC8E3C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, void (*a5)(void))
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_100CC4A14(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100CCE9B0(a4);
      goto LABEL_14;
    }
    sub_100CD5B54(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    a5(0);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

Swift::Int sub_100CC8FC8(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100CC0628();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100CCDB40();
      goto LABEL_14;
    }
    sub_100CD1A90();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_100CC9118(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t v106 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v107 = (uint64_t)&v93 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v113 = (char *)&v93 - v16;
  __chkstk_darwin(v15, v17);
  char v19 = (char *)&v93 - v18;
  uint64_t v105 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v105 - 8);
  __chkstk_darwin(v105, v21);
  uint64_t v23 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_1005057FC(&qword_10167BE58);
  __chkstk_darwin(v104, v24);
  uint64_t v114 = (uint64_t)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  uint64_t v28 = __chkstk_darwin(v26 - 8, v27);
  unsigned __int8 v30 = (char *)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v28, v31);
  uint64_t v111 = (uint64_t)&v93 - v33;
  __chkstk_darwin(v32, v34);
  uint64_t v110 = (uint64_t)&v93 - v35;
  uint64_t v121 = sub_1005057FC((uint64_t *)&unk_10167BE60);
  __chkstk_darwin(v121, v36);
  BOOL v38 = (char *)&v93 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  uint64_t v103 = *(void *)(v122 - 8);
  uint64_t v40 = __chkstk_darwin(v122, v39);
  uint64_t v115 = (uint64_t)&v93 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __chkstk_darwin(v40, v42);
  uint64_t v112 = (uint64_t)&v93 - v44;
  uint64_t v46 = __chkstk_darwin(v43, v45);
  char v116 = (unsigned __int8 *)&v93 - v47;
  __chkstk_darwin(v46, v48);
  uint64_t v50 = (char *)&v93 - v49;
  unint64_t v51 = *(void *)(*v3 + 16);
  unint64_t v52 = *(void *)(*v3 + 24);
  uint64_t v102 = v3;
  if (v52 <= v51 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_100CC08D4();
    }
    else
    {
      if (v52 > v51)
      {
        sub_100CCE2C4(type metadata accessor for CRLBoardLibraryViewModel.Item, &qword_1016997B0, type metadata accessor for CRLBoardLibraryViewModel.Item, type metadata accessor for CRLBoardLibraryViewModel.Item);
        goto LABEL_48;
      }
      sub_100CD1D0C();
    }
    uint64_t v53 = *v3;
    Hasher.init(_seed:)();
    sub_100DD93E0();
    Swift::Int v54 = Hasher._finalize()();
    uint64_t v55 = -1 << *(unsigned char *)(v53 + 32);
    a2 = v54 & ~v55;
    uint64_t v119 = v53 + 56;
    uint64_t v120 = v53;
    uint64_t v56 = *(void *)(v53 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2;
    uint64_t v57 = (uint64_t)v113;
    if (v56)
    {
      uint64_t v118 = ~v55;
      uint64_t v108 = v115 + 8;
      uint64_t v117 = *(void *)(v103 + 72);
      char v101 = (void (**)(uint64_t, uint64_t))(v20 + 8);
      uint64_t v97 = (void (**)(char *, uint64_t, uint64_t))(v20 + 32);
      uint64_t v109 = a1;
      int v100 = v30;
      uint64_t v98 = v23;
      do
      {
        uint64_t v20 = (uint64_t)v19;
        sub_100CE144C(*(void *)(v120 + 48) + v117 * a2, (uint64_t)v50, type metadata accessor for CRLBoardLibraryViewModel.Item);
        char v59 = &v38[*(int *)(v121 + 48)];
        sub_100CE144C((uint64_t)v50, (uint64_t)v38, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_100CE144C(a1, (uint64_t)v59, type metadata accessor for CRLBoardLibraryViewModel.Item);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v61 = v112;
            sub_100CE144C((uint64_t)v38, v112, type metadata accessor for CRLBoardLibraryViewModel.Item);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              uint64_t v62 = v110;
              sub_100CE12D8(v61, v110, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              uint64_t v63 = v111;
              sub_100CE12D8((uint64_t)v59, v111, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              uint64_t v64 = v114;
              uint64_t v65 = v114 + *(int *)(v104 + 48);
              sub_100CE144C(v62, v114, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              sub_100CE144C(v63, v65, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              uint64_t v66 = sub_1005057FC(&qword_101670F30);
              int v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48);
              int v68 = v67(v64, 5, v66);
              uint64_t v69 = v105;
              switch(v68)
              {
                case 1:
                  BOOL v80 = v67(v65, 5, v66) == 1;
                  goto LABEL_38;
                case 2:
                  BOOL v80 = v67(v65, 5, v66) == 2;
                  goto LABEL_38;
                case 3:
                  BOOL v80 = v67(v65, 5, v66) == 3;
                  goto LABEL_38;
                case 4:
                  BOOL v80 = v67(v65, 5, v66) == 4;
                  goto LABEL_38;
                case 5:
                  BOOL v80 = v67(v65, 5, v66) == 5;
LABEL_38:
                  a1 = v109;
                  if (!v80) {
                    goto LABEL_39;
                  }
                  goto LABEL_53;
                default:
                  uint64_t v70 = (uint64_t)v100;
                  sub_100CE144C(v114, (uint64_t)v100, type metadata accessor for CRLBoardLibraryViewModel.Folder);
                  uint64_t v96 = *(int *)(v66 + 48);
                  uint64_t v71 = *(void *)(v70 + v96 + 8);
                  uint64_t v95 = *(void *)(v70 + v96);
                  uint64_t v99 = v71;
                  if (v67(v65, 5, v66))
                  {
                    swift_bridgeObjectRelease();
                    (*v101)(v70, v69);
                    a1 = v109;
LABEL_39:
                    sub_100522F00(v114, &qword_10167BE58);
                    uint64_t v57 = (uint64_t)v113;
                    char v19 = (char *)v20;
                  }
                  else
                  {
                    uint64_t v81 = *(void *)(v65 + v96 + 8);
                    uint64_t v94 = *(void *)(v65 + v96);
                    uint64_t v96 = v81;
                    uint64_t v82 = v98;
                    (*v97)(v98, v65, v69);
                    char v83 = static UUID.== infix(_:_:)();
                    uint64_t v84 = v69;
                    uint64_t v85 = *v101;
                    (*v101)(v70, v69);
                    if (v83)
                    {
                      uint64_t v86 = v85;
                      if (v95 == v94 && v99 == v96)
                      {
                        swift_bridgeObjectRelease_n();
                        v85((uint64_t)v98, v84);
LABEL_53:
                        uint64_t v92 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
                        goto LABEL_54;
                      }
                      char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v86((uint64_t)v98, v84);
                      if (v87) {
                        goto LABEL_53;
                      }
                    }
                    else
                    {
                      v85((uint64_t)v82, v69);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    sub_100CE14B4(v114, type metadata accessor for CRLBoardLibraryViewModel.Folder);
                    uint64_t v57 = (uint64_t)v113;
                    char v19 = (char *)v20;
                    a1 = v109;
                  }
                  sub_100CE14B4(v111, type metadata accessor for CRLBoardLibraryViewModel.Folder);
                  sub_100CE14B4(v110, type metadata accessor for CRLBoardLibraryViewModel.Folder);
                  sub_100CE14B4((uint64_t)v38, type metadata accessor for CRLBoardLibraryViewModel.Item);
                  break;
              }
              goto LABEL_13;
            }
            uint64_t v58 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
            goto LABEL_11;
          }
          uint64_t v61 = v115;
          sub_100CE144C((uint64_t)v38, v115, type metadata accessor for CRLBoardLibraryViewModel.Item);
          sub_1005057FC(&qword_101677100);
          swift_bridgeObjectRelease();
          if (swift_getEnumCaseMultiPayload() != 2)
          {
            uint64_t v58 = type metadata accessor for CRLBoardIdentifier;
LABEL_11:
            sub_100CE14B4(v61, v58);
            char v19 = (char *)v20;
LABEL_12:
            sub_100522F00((uint64_t)v38, (uint64_t *)&unk_10167BE60);
LABEL_13:
            sub_100CE14B4((uint64_t)v50, type metadata accessor for CRLBoardLibraryViewModel.Item);
            goto LABEL_14;
          }
          swift_bridgeObjectRelease();
          sub_100CE12D8(v61, v20, type metadata accessor for CRLBoardIdentifier);
          sub_100CE12D8((uint64_t)v59, v57, type metadata accessor for CRLBoardIdentifier);
          char v74 = static UUID.== infix(_:_:)();
          a1 = v107;
          sub_100CE144C(v20, v107, type metadata accessor for CRLBoardIdentifier);
          char v19 = v106;
          sub_100CE144C(v57, (uint64_t)v106, type metadata accessor for CRLBoardIdentifier);
          if ((v74 & 1) == 0)
          {
            sub_100CE14B4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
            sub_100CE14B4(a1, type metadata accessor for CRLBoardIdentifier);
            sub_100CE14B4(v57, type metadata accessor for CRLBoardIdentifier);
            sub_100CE14B4(v20, type metadata accessor for CRLBoardIdentifier);
            sub_100CE14B4((uint64_t)v38, type metadata accessor for CRLBoardLibraryViewModel.Item);
            char v19 = (char *)v20;
            a1 = v109;
            goto LABEL_13;
          }
          uint64_t v75 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
          uint64_t v76 = *(void *)(a1 + v75);
          uint64_t v77 = *(void *)(a1 + v75 + 8);
          uint64_t v78 = &v19[v75];
          if (v76 == *(void *)v78 && v77 == *((void *)v78 + 1)) {
            goto LABEL_51;
          }
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100CE14B4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4(a1, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4(v57, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4(v20, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v38, type metadata accessor for CRLBoardLibraryViewModel.Item);
          char v19 = (char *)v20;
          sub_100CE14B4((uint64_t)v50, type metadata accessor for CRLBoardLibraryViewModel.Item);
          a1 = v109;
          if (v79) {
            goto LABEL_55;
          }
        }
        else
        {
          sub_100CE144C((uint64_t)v38, (uint64_t)v116, type metadata accessor for CRLBoardLibraryViewModel.Item);
          if (swift_getEnumCaseMultiPayload()) {
            goto LABEL_12;
          }
          int v72 = *v116;
          int v73 = *v59;
          sub_100CE14B4((uint64_t)v38, type metadata accessor for CRLBoardLibraryViewModel.Item);
          sub_100CE14B4((uint64_t)v50, type metadata accessor for CRLBoardLibraryViewModel.Item);
          BOOL v80 = v72 == v73;
          uint64_t v57 = (uint64_t)v113;
          if (v80) {
            goto LABEL_55;
          }
        }
LABEL_14:
        a2 = (a2 + 1) & v118;
      }
      while (((*(void *)(v119 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_48:
  uint64_t v57 = *v102;
  *(void *)(*v102 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100CE12D8(a1, *(void *)(v57 + 48) + *(void *)(v103 + 72) * a2, type metadata accessor for CRLBoardLibraryViewModel.Item);
  uint64_t v89 = *(void *)(v57 + 16);
  BOOL v90 = __OFADD__(v89, 1);
  uint64_t v91 = v89 + 1;
  if (v90)
  {
    __break(1u);
LABEL_51:
    uint64_t v92 = type metadata accessor for CRLBoardIdentifier;
    sub_100CE14B4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
    uint64_t v114 = a1;
    uint64_t v111 = v57;
    uint64_t v110 = v20;
LABEL_54:
    sub_100CE14B4(v114, v92);
    sub_100CE14B4(v111, v92);
    sub_100CE14B4(v110, v92);
    sub_100CE14B4((uint64_t)v38, type metadata accessor for CRLBoardLibraryViewModel.Item);
    sub_100CE14B4((uint64_t)v50, type metadata accessor for CRLBoardLibraryViewModel.Item);
LABEL_55:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x100CC9F74);
  }
  *(void *)(v57 + 16) = v91;
  return result;
}

uint64_t sub_100CC9F8C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void *)(*v4 + 16);
  unint64_t v14 = *(void *)(*v4 + 24);
  if (v14 > v13 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v15 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100CC1118();
    goto LABEL_8;
  }
  if (v14 <= v13)
  {
    sub_100CD250C();
LABEL_8:
    uint64_t v16 = *v4;
    Hasher.init(_seed:)();
    sub_10060FFE8();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v16 + 32);
    a2 = v17 & ~v18;
    if ((*(void *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v27 = v8;
      uint64_t v19 = ~v18;
      uint64_t v15 = v9;
      uint64_t v20 = *(void *)(v9 + 72);
      while (1)
      {
        sub_100CE144C(*(void *)(v16 + 48) + v20 * a2, (uint64_t)v12, type metadata accessor for CRLBoardPreviewImageCache.Item);
        char v21 = sub_100627FFC((uint64_t)v12, a1);
        sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLBoardPreviewImageCache.Item);
        if (v21) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v15 = v9;
  sub_100CCE2C4(type metadata accessor for CRLBoardPreviewImageCache.Item, (uint64_t *)&unk_101670F20, type metadata accessor for CRLBoardPreviewImageCache.Item, type metadata accessor for CRLBoardPreviewImageCache.Item);
LABEL_14:
  uint64_t v22 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100CE12D8(a1, *(void *)(v22 + 48) + *(void *)(v15 + 72) * a2, type metadata accessor for CRLBoardPreviewImageCache.Item);
  uint64_t v24 = *(void *)(v22 + 16);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    *(void *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100CCA220(Swift::Int result, uint64_t a2, char a3, unint64_t a4, char a5, double a6)
{
  double v11 = *(double *)&result;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a5 & 1) != 0) {
    goto LABEL_34;
  }
  if (a5)
  {
    sub_100CC1A70();
  }
  else
  {
    if (v13 > v12)
    {
      uint64_t result = (Swift::Int)sub_100CCDCD4();
      goto LABEL_34;
    }
    sub_100CD2E3C();
  }
  uint64_t v14 = *v6;
  Hasher.init(_seed:)();
  Swift::UInt64 v15 = *(void *)&v11;
  Swift::UInt64 v16 = a2;
  if (a3)
  {
    Swift::UInt64 v15 = qword_1011B1DD8[*(void *)&v11];
    Swift::UInt64 v16 = v15;
  }
  if ((v15 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = v15;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = v16;
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = *(void *)&a6;
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  uint64_t result = Hasher._finalize()();
  uint64_t v20 = -1 << *(unsigned char *)(v14 + 32);
  a4 = result & ~v20;
  if ((*(void *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v21 = ~v20;
    do
    {
      uint64_t v22 = *(void *)(v14 + 48) + 32 * a4;
      if (*(unsigned char *)(v22 + 16) == 1)
      {
        uint64_t v23 = &dbl_1011B1E00[*(void *)v22];
        double v24 = *v23;
      }
      else
      {
        uint64_t v23 = (double *)(v22 + 8);
        double v24 = *(double *)v22;
      }
      double v25 = v11;
      double v26 = *(double *)&a2;
      if (a3)
      {
        double v25 = dbl_1011B1E00[*(void *)&v11];
        double v26 = v25;
      }
      BOOL v27 = v24 == v25 && *v23 == v26;
      if (v27 && *(double *)(v22 + 24) == a6) {
        goto LABEL_37;
      }
      a4 = (a4 + 1) & v21;
    }
    while (((*(void *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_34:
  uint64_t v29 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v30 = *(void *)(v29 + 48) + 32 * a4;
  *(double *)uint64_t v30 = v11;
  *(double *)(v30 + 8) = *(double *)&a2;
  *(unsigned char *)(v30 + 16) = a3 & 1;
  *(double *)(v30 + 24) = a6;
  uint64_t v31 = *(void *)(v29 + 16);
  BOOL v32 = __OFADD__(v31, 1);
  uint64_t v33 = v31 + 1;
  if (!v32)
  {
    *(void *)(v29 + 16) = v33;
    return result;
  }
  __break(1u);
LABEL_37:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100CCA42C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v43 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  uint64_t v40 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v15);
  Swift::UInt64 v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = *(void *)(*v3 + 16);
  unint64_t v19 = *(void *)(*v3 + 24);
  uint64_t v39 = v3;
  if (v19 > v18 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_100CC1C50();
  }
  else
  {
    if (v19 > v18)
    {
      sub_100CCE2C4(type metadata accessor for CRLBoardIdentifierAndValue, &qword_101671060, type metadata accessor for CRLBoardIdentifierAndValue, type metadata accessor for CRLBoardIdentifierAndValue);
      goto LABEL_22;
    }
    sub_100CD2FE0();
  }
  uint64_t v20 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v42 = type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v41 = *(int *)(v43 + 20);
  Hasher._combine(_:)(*(unsigned char *)(a1 + v41));
  Swift::Int v21 = Hasher._finalize()();
  uint64_t v22 = -1 << *(unsigned char *)(v20 + 32);
  a2 = v21 & ~v22;
  uint64_t v44 = v20;
  uint64_t v23 = v20 + 56;
  if ((*(void *)(v20 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v24 = ~v22;
    uint64_t v25 = *(void *)(v40 + 72);
    do
    {
      sub_100CE144C(*(void *)(v44 + 48) + v25 * a2, (uint64_t)v17, type metadata accessor for CRLBoardIdentifierAndValue);
      char v26 = static UUID.== infix(_:_:)();
      sub_100CE144C((uint64_t)v17, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      sub_100CE144C(a1, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      if (v26)
      {
        uint64_t v27 = *(int *)(v42 + 20);
        uint64_t v28 = *(void *)&v14[v27];
        uint64_t v29 = *(void *)&v14[v27 + 8];
        uint64_t v30 = &v10[v27];
        if (v28 == *(void *)v30 && v29 == *((void *)v30 + 1))
        {
          sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
        }
        else
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
          if ((v32 & 1) == 0) {
            goto LABEL_11;
          }
        }
        if (v17[*(int *)(v43 + 20)] == *(unsigned char *)(a1 + v41))
        {
          sub_100CE14B4((uint64_t)v17, type metadata accessor for CRLBoardIdentifierAndValue);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      else
      {
        sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      }
LABEL_11:
      sub_100CE14B4((uint64_t)v17, type metadata accessor for CRLBoardIdentifierAndValue);
      a2 = (a2 + 1) & v24;
    }
    while (((*(void *)(v23 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_22:
  uint64_t v33 = *v39;
  *(void *)(*v39 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100CE12D8(a1, *(void *)(v33 + 48) + *(void *)(v40 + 72) * a2, type metadata accessor for CRLBoardIdentifierAndValue);
  uint64_t v35 = *(void *)(v33 + 16);
  BOOL v36 = __OFADD__(v35, 1);
  uint64_t v37 = v35 + 1;
  if (v36) {
    __break(1u);
  }
  else {
    *(void *)(v33 + 16) = v37;
  }
  return result;
}

uint64_t sub_100CCA8D8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v45 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest();
  uint64_t v15 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v16);
  unint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v19 = *(void *)(*v3 + 16);
  unint64_t v20 = *(void *)(*v3 + 24);
  uint64_t v41 = v15;
  uint64_t v42 = v3;
  if (v20 > v19 && (a3 & 1) != 0) {
    goto LABEL_23;
  }
  if (a3)
  {
    sub_100CC2084();
  }
  else
  {
    if (v20 > v19)
    {
      sub_100CCE2C4((uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest, &qword_1016999A0, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      goto LABEL_23;
    }
    sub_100CD33D8();
  }
  uint64_t v21 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v44 = type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = v45;
  uint64_t v43 = a1 + *(int *)(v45 + 20);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v40 = a1 + *(int *)(v22 + 24);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v23 = Hasher._finalize()();
  uint64_t v24 = -1 << *(unsigned char *)(v21 + 32);
  a2 = v23 & ~v24;
  uint64_t v46 = v21;
  uint64_t v25 = v21 + 56;
  if ((*(void *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v26 = ~v24;
    uint64_t v27 = *(void *)(v15 + 72);
    do
    {
      sub_100CE144C(*(void *)(v46 + 48) + v27 * a2, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      char v28 = static UUID.== infix(_:_:)();
      sub_100CE144C((uint64_t)v18, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      sub_100CE144C(a1, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      if (v28)
      {
        uint64_t v29 = *(int *)(v44 + 20);
        uint64_t v30 = *(void *)&v14[v29];
        uint64_t v31 = *(void *)&v14[v29 + 8];
        char v32 = &v10[v29];
        if (v30 == *(void *)v32 && v31 == *((void *)v32 + 1))
        {
          sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
        }
        else
        {
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
          if ((v34 & 1) == 0) {
            goto LABEL_11;
          }
        }
        if (static UUID.== infix(_:_:)() & 1) != 0 && (static UUID.== infix(_:_:)())
        {
          sub_100CE14B4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      else
      {
        sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      }
LABEL_11:
      sub_100CE14B4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      a2 = (a2 + 1) & v26;
    }
    while (((*(void *)(v25 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_23:
  uint64_t v35 = *v42;
  *(void *)(*v42 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100CE12D8(a1, *(void *)(v35 + 48) + *(void *)(v41 + 72) * a2, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
  uint64_t v37 = *(void *)(v35 + 16);
  BOOL v38 = __OFADD__(v37, 1);
  uint64_t v39 = v37 + 1;
  if (v38) {
    __break(1u);
  }
  else {
    *(void *)(v35 + 16) = v39;
  }
  return result;
}

uint64_t sub_100CCADC0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = _s17CategoryViewModelVMa();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void *)(*v4 + 16);
  unint64_t v14 = *(void *)(*v4 + 24);
  if (v14 > v13 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v15 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100CC24F4();
    goto LABEL_8;
  }
  if (v14 <= v13)
  {
    sub_100CD3804();
LABEL_8:
    uint64_t v16 = *v4;
    Hasher.init(_seed:)();
    sub_100FC08A4();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v16 + 32);
    a2 = v17 & ~v18;
    if ((*(void *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v27 = v8;
      uint64_t v19 = ~v18;
      uint64_t v15 = v9;
      uint64_t v20 = *(void *)(v9 + 72);
      while (1)
      {
        sub_100CE144C(*(void *)(v16 + 48) + v20 * a2, (uint64_t)v12, (uint64_t (*)(void))_s17CategoryViewModelVMa);
        BOOL v21 = sub_100FC0B00((uint64_t)v12, a1);
        sub_100CE14B4((uint64_t)v12, (uint64_t (*)(void))_s17CategoryViewModelVMa);
        if (v21) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v15 = v9;
  sub_100CCE2C4((uint64_t (*)(void))_s17CategoryViewModelVMa, &qword_1016998E0, (uint64_t (*)(void))_s17CategoryViewModelVMa, (uint64_t (*)(void))_s17CategoryViewModelVMa);
LABEL_14:
  uint64_t v22 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100CE12D8(a1, *(void *)(v22 + 48) + *(void *)(v15 + 72) * a2, (uint64_t (*)(void))_s17CategoryViewModelVMa);
  uint64_t v24 = *(void *)(v22 + 16);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    *(void *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100CCB054(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100CC29A4();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100CCE0D8((uint64_t *)&unk_1016712F0);
      goto LABEL_12;
    }
    sub_100CD3CB0();
  }
  uint64_t v8 = *v3;
  type metadata accessor for CalculateExpression();
  sub_100CDE0D8((unint64_t *)&unk_10167BEE0, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_100CDE0D8(&qword_101671300, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100CCB240(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_15;
  }
  if (a3)
  {
    sub_100CC2CCC();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100CCE0D8(&qword_1016997D0);
      goto LABEL_15;
    }
    sub_100CD3FB0();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    type metadata accessor for CRLCloudAccountChangeObserverWrapper();
    while (1)
    {
      uint64_t result = swift_unknownObjectWeakLoadStrong();
      if (result)
      {
        Swift::Int v11 = result;
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        uint64_t result = swift_unknownObjectRelease();
        if (Strong)
        {
          uint64_t result = swift_unknownObjectRelease();
          if (v11 == Strong) {
            break;
          }
        }
      }
      a2 = (a2 + 1) & v10;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_15;
      }
    }
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_15:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

uint64_t sub_100CCB3E4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v33 = a1;
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v9 = __chkstk_darwin(v6, v8);
  Swift::Int v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(void *)(*v3 + 16);
  unint64_t v13 = *(void *)(*v3 + 24);
  uint64_t v30 = v3;
  uint64_t v31 = v7;
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100CC2F78();
  }
  else
  {
    if (v13 > v12)
    {
      sub_100CCE6F4((uint64_t (*)(void))&type metadata accessor for UTType, &qword_101699910);
      goto LABEL_12;
    }
    sub_100CD4234();
  }
  uint64_t v14 = *v3;
  sub_100CDE0D8(&qword_101699918, (void (*)(uint64_t))&type metadata accessor for UTType);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  a2 = v15 & ~v16;
  uint64_t v32 = v14;
  uint64_t v17 = v14 + 56;
  if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v18 = ~v16;
    BOOL v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v20 = v7 + 16;
    uint64_t v19 = v21;
    uint64_t v22 = *(void *)(v20 + 56);
    do
    {
      v19(v11, *(void *)(v32 + 48) + v22 * a2, v6);
      sub_100CDE0D8((unint64_t *)&qword_101693BF0, (void (*)(uint64_t))&type metadata accessor for UTType);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v20 - 8))(v11, v6);
      if (v23) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }
    while (((*(void *)(v17 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v24 = v31;
  uint64_t v25 = *v30;
  *(void *)(v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v24 + 32))(*(void *)(v25 + 48) + *(void *)(v24 + 72) * a2, v33, v6, v9);
  uint64_t v27 = *(void *)(v25 + 16);
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (!v28)
  {
    *(void *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100CCB6A0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CRLSELibraryViewModel.Item(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void *)(*v4 + 16);
  unint64_t v14 = *(void *)(*v4 + 24);
  if (v14 > v13 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v15 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100CC3374();
    goto LABEL_8;
  }
  if (v14 <= v13)
  {
    sub_100CD45E4();
LABEL_8:
    uint64_t v16 = *v4;
    Hasher.init(_seed:)();
    sub_100720168();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v16 + 32);
    a2 = v17 & ~v18;
    if ((*(void *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v27 = v8;
      uint64_t v19 = ~v18;
      uint64_t v15 = v9;
      uint64_t v20 = *(void *)(v9 + 72);
      while (1)
      {
        sub_100CE144C(*(void *)(v16 + 48) + v20 * a2, (uint64_t)v12, type metadata accessor for CRLSELibraryViewModel.Item);
        char v21 = sub_100723608((uint64_t)v12, a1);
        sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLSELibraryViewModel.Item);
        if (v21) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v15 = v9;
  sub_100CCE2C4(type metadata accessor for CRLSELibraryViewModel.Item, &qword_101699900, type metadata accessor for CRLSELibraryViewModel.Item, type metadata accessor for CRLSELibraryViewModel.Item);
LABEL_14:
  uint64_t v22 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100CE12D8(a1, *(void *)(v22 + 48) + *(void *)(v15 + 72) * a2, type metadata accessor for CRLSELibraryViewModel.Item);
  uint64_t v24 = *(void *)(v22 + 16);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    *(void *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100CCB934(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_15;
  }
  if (a3)
  {
    sub_100CC3C14();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100CCE0D8(&qword_1016998E8);
      goto LABEL_15;
    }
    sub_100CD4E2C();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  sub_100A450A4((uint64_t)v20, *(void *)(v5 + 16));
  uint64_t v9 = v5 + OBJC_IVAR____TtCC8Freeform17CRLStencilLibrary8ItemData_metadata;
  sub_100BD26EC(v20);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    _s8ItemDataCMa();
    do
    {
      uint64_t v12 = *(void *)(*(void *)(v8 + 48) + 8 * a2);
      uint64_t v13 = *(void *)(v12 + 16);
      uint64_t v14 = *(void *)(v5 + 16);
      swift_retain();
      if (sub_100A3D424(v13, v14))
      {
        char v15 = sub_100BD2A3C(v12 + OBJC_IVAR____TtCC8Freeform17CRLStencilLibrary8ItemData_metadata, v9);
        uint64_t result = swift_release();
        if (v15)
        {
          uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      else
      {
        uint64_t result = swift_release();
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = v5;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
  return result;
}

uint64_t sub_100CCBB08(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v89 = a1;
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v72 - v12;
  __chkstk_darwin(v14, v15);
  uint64_t v82 = (char *)&v72 - v16;
  __chkstk_darwin(v17, v18);
  BOOL v80 = (char *)&v72 - v19;
  __chkstk_darwin(v20, v21);
  char v79 = (char *)&v72 - v22;
  __chkstk_darwin(v23, v24);
  uint64_t v84 = (char *)&v72 - v25;
  uint64_t v81 = sub_1005057FC(&qword_101691F00);
  __chkstk_darwin(v81, v26);
  BOOL v28 = (char *)&v72 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  uint64_t v33 = (char *)&v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v35);
  __chkstk_darwin(v36, v37);
  uint64_t v40 = (char *)&v72 - v39;
  unint64_t v41 = *(void *)(*v3 + 16);
  unint64_t v42 = *(void *)(*v3 + 24);
  char v74 = v3;
  uint64_t v73 = v30;
  if (v42 <= v41 || (a3 & 1) == 0)
  {
    uint64_t v85 = (char *)v38;
    uint64_t v78 = v9;
    uint64_t v77 = v13;
    if (a3)
    {
      sub_100CC3E78();
    }
    else
    {
      if (v42 > v41)
      {
        sub_100CCE2C4(type metadata accessor for CRLSpotlightManager.ChangeType, &qword_101672920, type metadata accessor for CRLSpotlightManager.ChangeType, type metadata accessor for CRLSpotlightManager.ChangeType);
        goto LABEL_32;
      }
      sub_100CD5060();
    }
    uint64_t v13 = (char *)*v3;
    Hasher.init(_seed:)();
    sub_100AF7288();
    Swift::Int v43 = Hasher._finalize()();
    uint64_t v44 = -1 << v13[32];
    a2 = v43 & ~v44;
    char v88 = v13 + 56;
    if ((*(void *)&v13[((a2 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> a2))
    {
      uint64_t v87 = ~v44;
      uint64_t v86 = *(void *)(v30 + 72);
      uint64_t v45 = v81;
      char v83 = v13;
      uint64_t v76 = v29;
      uint64_t v75 = v33;
      do
      {
        sub_100CE144C(*((void *)v13 + 6) + v86 * a2, (uint64_t)v40, type metadata accessor for CRLSpotlightManager.ChangeType);
        uint64_t v46 = (uint64_t)&v28[*(int *)(v45 + 48)];
        sub_100CE144C((uint64_t)v40, (uint64_t)v28, type metadata accessor for CRLSpotlightManager.ChangeType);
        sub_100CE144C(v89, v46, type metadata accessor for CRLSpotlightManager.ChangeType);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          sub_100CE144C((uint64_t)v28, (uint64_t)v33, type metadata accessor for CRLSpotlightManager.ChangeType);
          uint64_t v47 = (uint64_t)v33;
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v48 = (uint64_t)v82;
            sub_100CE12D8(v46, (uint64_t)v82, type metadata accessor for CRLBoardIdentifier);
            char v49 = static UUID.== infix(_:_:)();
            uint64_t v13 = v77;
            sub_100CE144C((uint64_t)v33, (uint64_t)v77, type metadata accessor for CRLBoardIdentifier);
            uint64_t v9 = v78;
            sub_100CE144C(v48, (uint64_t)v78, type metadata accessor for CRLBoardIdentifier);
            if (v49)
            {
              uint64_t v50 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
              uint64_t v51 = *(void *)&v13[v50];
              uint64_t v52 = *(void *)&v13[v50 + 8];
              uint64_t v53 = &v9[v50];
              if (v51 == *(void *)v53 && v52 == *((void *)v53 + 1)) {
                goto LABEL_35;
              }
              char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
              sub_100CE14B4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4((uint64_t)v82, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4((uint64_t)v33, type metadata accessor for CRLBoardIdentifier);
              uint64_t v45 = v81;
              uint64_t v13 = v83;
              if (v55) {
                goto LABEL_37;
              }
            }
            else
            {
              sub_100CE14B4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4(v48, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4((uint64_t)v33, type metadata accessor for CRLBoardIdentifier);
              uint64_t v45 = v81;
              uint64_t v13 = v83;
            }
LABEL_31:
            sub_100CE14B4((uint64_t)v28, type metadata accessor for CRLSpotlightManager.ChangeType);
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v47 = (uint64_t)v85;
          sub_100CE144C((uint64_t)v28, (uint64_t)v85, type metadata accessor for CRLSpotlightManager.ChangeType);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v9 = v84;
          if (EnumCaseMultiPayload != 1)
          {
            sub_100CE12D8(v46, (uint64_t)v84, type metadata accessor for CRLBoardIdentifier);
            uint64_t v57 = (uint64_t)v85;
            char v58 = static UUID.== infix(_:_:)();
            uint64_t v59 = (uint64_t)v79;
            sub_100CE144C(v57, (uint64_t)v79, type metadata accessor for CRLBoardIdentifier);
            uint64_t v60 = (uint64_t)v80;
            sub_100CE144C((uint64_t)v9, (uint64_t)v80, type metadata accessor for CRLBoardIdentifier);
            if (v58)
            {
              uint64_t v61 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
              uint64_t v62 = *(void *)(v59 + v61);
              uint64_t v63 = *(void *)(v59 + v61 + 8);
              uint64_t v64 = (void *)(v60 + v61);
              if (v62 == *v64 && v63 == v64[1]) {
                goto LABEL_36;
              }
              char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
              sub_100CE14B4(v60, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4(v59, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4((uint64_t)v84, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4((uint64_t)v85, type metadata accessor for CRLBoardIdentifier);
              uint64_t v13 = v83;
              uint64_t v33 = v75;
              if (v66) {
                goto LABEL_37;
              }
            }
            else
            {
              sub_100CE14B4(v60, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4(v59, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
              sub_100CE14B4(v57, type metadata accessor for CRLBoardIdentifier);
              uint64_t v13 = v83;
              uint64_t v33 = v75;
            }
            goto LABEL_31;
          }
        }
        sub_100CE14B4(v47, type metadata accessor for CRLBoardIdentifier);
        sub_100522F00((uint64_t)v28, &qword_101691F00);
LABEL_11:
        sub_100CE14B4((uint64_t)v40, type metadata accessor for CRLSpotlightManager.ChangeType);
        a2 = (a2 + 1) & v87;
      }
      while (((*(void *)&v88[(a2 >> 3) & 0xFFFFFFFFFFFFFF8] >> a2) & 1) != 0);
    }
  }
LABEL_32:
  uint64_t v67 = *v74;
  *(void *)(*v74 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100CE12D8(v89, *(void *)(v67 + 48) + *(void *)(v73 + 72) * a2, type metadata accessor for CRLSpotlightManager.ChangeType);
  uint64_t v69 = *(void *)(v67 + 16);
  BOOL v70 = __OFADD__(v69, 1);
  uint64_t v71 = v69 + 1;
  if (v70)
  {
    __break(1u);
LABEL_35:
    char v79 = v13;
    BOOL v80 = v9;
    uint64_t v84 = v82;
    uint64_t v85 = v33;
LABEL_36:
    sub_100CE14B4((uint64_t)v80, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4((uint64_t)v79, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4((uint64_t)v84, type metadata accessor for CRLBoardIdentifier);
    sub_100CE14B4((uint64_t)v85, type metadata accessor for CRLBoardIdentifier);
LABEL_37:
    sub_100CE14B4((uint64_t)v28, type metadata accessor for CRLSpotlightManager.ChangeType);
    sub_100CE14B4((uint64_t)v40, type metadata accessor for CRLSpotlightManager.ChangeType);
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v67 + 16) = v71;
  }
  return result;
}

uint64_t sub_100CCC388(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100CC4394();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100CCE53C();
      goto LABEL_14;
    }
    sub_100CD5540();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_100CCC4AC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100CC4618();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100CCE6F4((uint64_t (*)(void))&type metadata accessor for IndexPath, &qword_101672910);
      goto LABEL_12;
    }
    sub_100CD57A4();
  }
  uint64_t v13 = *v3;
  sub_100CDE0D8(&qword_101672918, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_100CDE0D8(&qword_10169A040, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100CCC768(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100CC4CB0();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_100CCEB54();
      goto LABEL_12;
    }
    sub_100CD5DCC();
  }
  uint64_t v9 = *v3;
  uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      sub_10050BF84(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = static AnyHashable.== infix(_:_:)();
      uint64_t result = sub_10050BFE0((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100CCC8D4()
{
  return sub_100CCE6F4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1016728F8);
}

void *sub_100CCC8F4()
{
  return sub_100CCE0D8(&qword_101672900);
}

void *sub_100CCC900()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101699690);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v19 = v18;
    *(unsigned char *)(v19 + 8) = v17;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCCAA8()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016996A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v33 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v33 >= v13) {
      goto LABEL_28;
    }
    unint64_t v34 = *(void *)(v6 + 8 * v33);
    ++v9;
    if (!v34)
    {
      int64_t v9 = v33 + 1;
      if (v33 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v34 = *(void *)(v6 + 8 * v9);
      if (!v34)
      {
        int64_t v9 = v33 + 2;
        if (v33 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v34 = *(void *)(v6 + 8 * v9);
        if (!v34) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v34 - 1) & v34;
    unint64_t v15 = __clz(__rbit64(v34)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 112 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v22 = v17[4];
    uint64_t v23 = v17[5];
    uint64_t v24 = v17[6];
    uint64_t v25 = v17[7];
    uint64_t v26 = v17[8];
    uint64_t v27 = v17[9];
    uint64_t v28 = v17[10];
    uint64_t v29 = v17[11];
    uint64_t v31 = v17[12];
    uint64_t v30 = v17[13];
    uint64_t v32 = (uint64_t *)(*(void *)(v4 + 48) + v16);
    *uint64_t v32 = v18;
    v32[1] = v19;
    uint64_t v32[2] = v20;
    v32[3] = v21;
    v32[4] = v22;
    v32[5] = v23;
    v32[6] = v24;
    v32[7] = v25;
    v32[8] = v26;
    v32[9] = v27;
    v32[10] = v28;
    v32[11] = v29;
    v32[12] = v31;
    v32[13] = v30;
    uint64_t result = (void *)sub_10051B2E8(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v31);
  }
  int64_t v35 = v33 + 3;
  if (v35 >= v13) {
    goto LABEL_28;
  }
  unint64_t v34 = *(void *)(v6 + 8 * v35);
  if (v34)
  {
    int64_t v9 = v35;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v34 = *(void *)(v6 + 8 * v9);
    ++v35;
    if (v34) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCCCA4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v14) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22)
      {
        int64_t v10 = v21 + 2;
        if (v21 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v7 + 8 * v10);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = *(void *)(v3 + 48) + v17;
    uint64_t v19 = *(void *)v18;
    LOBYTE(v18) = *(unsigned char *)(v18 + 8);
    uint64_t v20 = *(void *)(v5 + 48) + v17;
    *(void *)uint64_t v20 = v19;
    *(unsigned char *)(v20 + 8) = v18;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v14) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCCE44()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016996C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCCFD8()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016999B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    int v18 = *(_DWORD *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 4);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v19 = v18;
    *(unsigned char *)(v19 + 4) = v17;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCD180()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016996C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    unint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    unsigned __int8 v21 = *(unsigned char *)(v17 + 16);
    *(void *)uint64_t v20 = *(void *)v17;
    *(void *)(v20 + 8) = v19;
    *(unsigned char *)(v20 + 16) = v21;
    uint64_t result = (void *)sub_10051B3B0(v18, v19, v21);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCD340()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101670F40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCD4F4()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101672930);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t result = (void *)sub_10052E538(*(void *)(v2 + 48) + 48 * v15, (uint64_t)v23);
    uint64_t v17 = (_OWORD *)(*(void *)(v4 + 48) + v16);
    long long v18 = v23[0];
    long long v19 = v23[2];
    v17[1] = v23[1];
    void v17[2] = v19;
    *uint64_t v17 = v18;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCD6C0()
{
  return sub_100CCE2C4(type metadata accessor for CRLBoardIdentifier, (uint64_t *)&unk_101670EB0, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardIdentifier);
}

void *sub_100CCD708()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_1016997A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24)
      {
        int64_t v9 = v23 + 2;
        if (v23 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v24 = *(void *)(v6 + 8 * v9);
        if (!v24) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    long long v18 = *(void **)v17;
    long long v19 = *(void **)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    unsigned __int8 v22 = *(unsigned char *)(v17 + 24);
    *(void *)uint64_t v21 = *(void *)v17;
    *(void *)(v21 + 8) = v19;
    *(void *)(v21 + 16) = v20;
    *(unsigned char *)(v21 + 24) = v22;
    uint64_t result = sub_10053BB6C(v18, v19, v20, v22);
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v13) {
    goto LABEL_28;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCD8CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1005057FC((uint64_t *)&unk_10167BE90);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005057FC(&qword_101699920);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    uint64_t *v1 = v9;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v8 + 56);
  uint64_t v11 = v7 + 56;
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v11 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v17) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v11 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v11 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v11 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v3 + 72) * v19;
    sub_100522E9C(*(void *)(v7 + 48) + v20, (uint64_t)v6, (uint64_t *)&unk_10167BE90);
    uint64_t result = (void *)sub_10051B3EC((uint64_t)v6, *(void *)(v9 + 48) + v20, (uint64_t *)&unk_10167BE90);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v11 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v11 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

id sub_100CCDB34()
{
  return sub_100CCE9B0(&qword_101672908);
}

void *sub_100CCDB40()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101670F38);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCDCD4()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101699648);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    char v18 = *(unsigned char *)(v17 + 16);
    uint64_t v19 = *(void *)(v17 + 24);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v17;
    *(unsigned char *)(v20 + 16) = v18;
    *(void *)(v20 + 24) = v19;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCDE84()
{
  return sub_100CCE0D8((uint64_t *)&unk_1016712F0);
}

void *sub_100CCDE90()
{
  return sub_100CCE0D8(&qword_1016997D0);
}

id sub_100CCDE9C()
{
  return sub_100CCE9B0((uint64_t *)&unk_101671280);
}

id sub_100CCDEA8()
{
  return sub_100CCE9B0(&qword_101672928);
}

void *sub_100CCDEB4()
{
  return sub_100CCE6F4((uint64_t (*)(void))&type metadata accessor for UTType, &qword_101699910);
}

void *sub_100CCDED4()
{
  return sub_100CCE2C4(type metadata accessor for CRLSELibraryViewModel.Item, &qword_101699900, type metadata accessor for CRLSELibraryViewModel.Item, type metadata accessor for CRLSELibraryViewModel.Item);
}

void *sub_100CCDF1C()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101699688);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    char v18 = *(void **)v17;
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    unsigned __int8 v20 = *(unsigned char *)(v17 + 8);
    *(void *)uint64_t v19 = *(void *)v17;
    *(unsigned char *)(v19 + 8) = v20;
    uint64_t result = sub_1007A0914(v18, v20);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCE0D8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCE27C()
{
  return sub_100CCE2C4(type metadata accessor for CRLSpotlightManager.ChangeType, &qword_101672920, type metadata accessor for CRLSpotlightManager.ChangeType, type metadata accessor for CRLSpotlightManager.ChangeType);
}

void *sub_100CCE2C4(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  unint64_t v8 = v4;
  uint64_t v9 = a1(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8, v11);
  unint64_t v13 = (char *)&v31 - v12;
  sub_1005057FC(a2);
  uint64_t v14 = *v4;
  uint64_t v15 = static _SetStorage.copy(original:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *unint64_t v8 = v16;
    return result;
  }
  uint64_t result = (void *)(v15 + 56);
  unint64_t v18 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v31 = v8;
  uint64_t v32 = (const void *)(v14 + 56);
  if (v16 != v14 || (unint64_t)result >= v14 + 56 + 8 * v18) {
    uint64_t result = memmove(result, v32, 8 * v18);
  }
  int64_t v20 = 0;
  *(void *)(v16 + 16) = *(void *)(v14 + 16);
  uint64_t v21 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & *(void *)(v14 + 56);
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  while (1)
  {
    if (v23)
    {
      unint64_t v25 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v26 = v25 | (v20 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v28 >= v24) {
      goto LABEL_28;
    }
    unint64_t v29 = *((void *)v32 + v28);
    ++v20;
    if (!v29)
    {
      int64_t v20 = v28 + 1;
      if (v28 + 1 >= v24) {
        goto LABEL_28;
      }
      unint64_t v29 = *((void *)v32 + v20);
      if (!v29)
      {
        int64_t v20 = v28 + 2;
        if (v28 + 2 >= v24) {
          goto LABEL_28;
        }
        unint64_t v29 = *((void *)v32 + v20);
        if (!v29) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v23 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v20 << 6);
LABEL_12:
    unint64_t v27 = *(void *)(v10 + 72) * v26;
    sub_100CE144C(*(void *)(v14 + 48) + v27, (uint64_t)v13, a3);
    uint64_t result = (void *)sub_100CE12D8((uint64_t)v13, *(void *)(v16 + 48) + v27, a4);
  }
  int64_t v30 = v28 + 3;
  if (v30 >= v24)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    unint64_t v8 = v31;
    goto LABEL_30;
  }
  unint64_t v29 = *((void *)v32 + v30);
  if (v29)
  {
    int64_t v20 = v30;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v20 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v20 >= v24) {
      goto LABEL_28;
    }
    unint64_t v29 = *((void *)v32 + v20);
    ++v30;
    if (v29) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100CCE53C()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101699750);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCE6D4()
{
  return sub_100CCE6F4((uint64_t (*)(void))&type metadata accessor for IndexPath, &qword_101672910);
}

void *sub_100CCE6F4(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  int64_t v9 = (char *)&v26 - v8;
  sub_1005057FC(a2);
  uint64_t v10 = *v2;
  uint64_t v11 = static _SetStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v12;
    return result;
  }
  uint64_t result = (void *)(v11 + 56);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  unint64_t v27 = v4;
  int64_t v28 = (const void *)(v10 + 56);
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v14) {
    uint64_t result = memmove(result, v28, 8 * v14);
  }
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 56);
  int64_t v29 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v16 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 >= v29) {
      goto LABEL_28;
    }
    unint64_t v24 = *((void *)v28 + v23);
    ++v16;
    if (!v24)
    {
      int64_t v16 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_28;
      }
      unint64_t v24 = *((void *)v28 + v16);
      if (!v24)
      {
        int64_t v16 = v23 + 2;
        if (v23 + 2 >= v29) {
          goto LABEL_28;
        }
        unint64_t v24 = *((void *)v28 + v16);
        if (!v24) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v19 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v16 << 6);
LABEL_12:
    unint64_t v22 = *(void *)(v6 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(void *)(v10 + 48) + v22, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v12 + 48) + v22, v9, v5);
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v29)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v27;
    goto LABEL_30;
  }
  unint64_t v24 = *((void *)v28 + v25);
  if (v24)
  {
    int64_t v16 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v16 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_28;
    }
    unint64_t v24 = *((void *)v28 + v16);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

id sub_100CCE9A4()
{
  return sub_100CCE9B0(&qword_101671068);
}

id sub_100CCE9B0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1005057FC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100CCEB54()
{
  uint64_t v1 = v0;
  sub_1005057FC(&qword_101671308);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    id result = (void *)sub_10050BF84(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    long long v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100CCED24()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_1005057FC(&qword_1016728F8);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  int64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  unint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CCF0D4()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v3);
  unint64_t v41 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_1005057FC(&qword_101672900);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v36 = v0;
  uint64_t v37 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v39 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  uint64_t v40 = v5;
  unint64_t v15 = v41;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v43 = v14;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v38) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v37 + 8 * v19);
    int64_t v21 = v14 + 1;
    if (!v20)
    {
      int64_t v21 = v14 + 2;
      if (v14 + 2 >= v38) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v37 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v14 + 3;
        if (v14 + 3 >= v38) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v37 + 8 * v21);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v20 - 1) & v20;
    int64_t v43 = v21;
    unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_24:
    uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
    Hasher.init(_seed:)();
    uint64_t v24 = *(void *)(v23 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v24 + 32);
    swift_retain();
    v26(ObjectType, v24);
    sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = v42;
    dispatch thunk of Hashable.hash(into:)();
    (*v39)(v15, v27);
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v5 = v40;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      uint64_t v5 = v40;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v16 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(void *)(*(void *)(v7 + 48) + 8 * v16) = v23;
    ++*(void *)(v7 + 16);
    int64_t v14 = v43;
  }
  uint64_t v22 = v14 + 4;
  if (v14 + 4 >= v38)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v36;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v37 + 8 * v22);
  if (v20)
  {
    int64_t v21 = v14 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v21 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v21 >= v38) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v37 + 8 * v21);
    ++v22;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CCF4C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101699690);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v28) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_36;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 16 * v14;
    Swift::UInt v19 = *(void *)v18;
    int v20 = *(unsigned __int8 *)(v18 + 8);
    Hasher.init(_seed:)();
    if (v20 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v19);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 16 * v11;
    *(void *)uint64_t v12 = v19;
    *(unsigned char *)(v12 + 8) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_36:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_38;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100CCF784()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016996A8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v46 = v1;
  uint64_t v47 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v48 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  uint64_t v49 = v2;
  uint64_t v50 = v4;
  while (1)
  {
    if (v7)
    {
      uint64_t v53 = (v7 - 1) & v7;
      int64_t v54 = v10;
      unint64_t v17 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v48) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v47 + 8 * v18);
    int64_t v20 = v10 + 1;
    if (!v19)
    {
      int64_t v20 = v10 + 2;
      if (v10 + 2 >= v48) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v47 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = v10 + 3;
        if (v10 + 3 >= v48) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v47 + 8 * v20);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v53 = (v19 - 1) & v19;
    int64_t v54 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_24:
    unint64_t v22 = (uint64_t *)(*(void *)(v2 + 48) + 112 * v17);
    uint64_t v23 = v22[2];
    uint64_t v25 = v22[3];
    uint64_t v24 = v22[4];
    uint64_t v61 = v22[5];
    uint64_t v55 = v22[6];
    uint64_t v56 = *v22;
    uint64_t v26 = v22[8];
    uint64_t v62 = v22[7];
    uint64_t v63 = v22[1];
    uint64_t v27 = v22[9];
    uint64_t v28 = v22[10];
    uint64_t v29 = v22[11];
    uint64_t v30 = v22[12];
    uint64_t v60 = v22[13];
    Hasher.init(_seed:)();
    uint64_t v57 = v30;
    uint64_t v58 = v25;
    uint64_t v52 = v29;
    uint64_t v59 = v28;
    if (v30)
    {
      Hasher._combine(_:)(1u);
      uint64_t v51 = v24;
      uint64_t v31 = v55;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_1005057FC(&qword_101687C08);
      CRExtensible.hash(into:)();
      sub_1007B037C();
      uint64_t v45 = v30;
      uint64_t v44 = v29;
      uint64_t v32 = v27;
      uint64_t v43 = v27;
      uint64_t v33 = v26;
      uint64_t v34 = v56;
      uint64_t v35 = v51;
      sub_10051ABBC(v56, v63, v23, v25, v51, v61, v55, v62, v26, v43, v59, v44, v45);
    }
    else
    {
      uint64_t v32 = v27;
      uint64_t v33 = v26;
      uint64_t v34 = v56;
      Hasher._combine(_:)(0);
      uint64_t v35 = v24;
      uint64_t v31 = v55;
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v4 = v50;
    uint64_t v36 = -1 << *(unsigned char *)(v50 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v8 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v37) & ~*(void *)(v8 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v12 = v57;
      uint64_t v13 = v32;
      uint64_t v15 = v59;
      uint64_t v14 = v60;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      uint64_t v12 = v57;
      uint64_t v13 = v32;
      uint64_t v15 = v59;
      uint64_t v14 = v60;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v8 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v11 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v16 = (uint64_t *)(*(void *)(v50 + 48) + 112 * v11);
    *unint64_t v16 = v34;
    v16[1] = v63;
    v16[2] = v23;
    v16[3] = v58;
    v16[4] = v35;
    v16[5] = v61;
    v16[6] = v31;
    v16[7] = v62;
    v16[8] = v33;
    v16[9] = v13;
    v16[10] = v15;
    v16[11] = v52;
    v16[12] = v12;
    v16[13] = v14;
    ++*(void *)(v50 + 16);
    uint64_t v2 = v49;
    unint64_t v7 = v53;
    int64_t v10 = v54;
  }
  uint64_t v21 = v10 + 4;
  if (v10 + 4 >= v48)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v46;
    goto LABEL_38;
  }
  unint64_t v19 = *(void *)(v47 + 8 * v21);
  if (v19)
  {
    int64_t v20 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v20 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v20 >= v48) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v47 + 8 * v20);
    ++v21;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100CCFBEC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *v3;
  sub_1005057FC(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v4 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 56);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v33) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v19);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v33) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v9 + 8 * v14);
      if (!v20)
      {
        int64_t v14 = v19 + 2;
        if (v19 + 2 >= v33) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v9 + 8 * v14);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(v5 + 48) + 16 * v18;
    uint64_t v23 = *(void *)v22;
    int v24 = *(unsigned __int8 *)(v22 + 8);
    Hasher.init(_seed:)();
    if (v24 == 255)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      sub_1005057FC(a3);
      CRExtensible.hash(into:)();
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 16 * v15;
    *(void *)uint64_t v16 = v23;
    *(unsigned char *)(v16 + 8) = v24;
    ++*(void *)(v7 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v4 = v3;
    goto LABEL_38;
  }
  unint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    int64_t v14 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v14 >= v33) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v14);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100CCFED4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016996C0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v14 >= v26) {
      goto LABEL_36;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_36;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_36;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_24:
    int v17 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v13);
    Hasher.init(_seed:)();
    if (v17 == 2)
    {
      Swift::UInt8 v18 = 0;
    }
    else
    {
      Swift::UInt8 v18 = v17 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v10 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(unsigned char *)(*(void *)(v4 + 48) + v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_36:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_38;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v26) {
      goto LABEL_36;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100CD0188()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016999B0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_41:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v15 >= v29) {
      goto LABEL_39;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v29) {
        goto LABEL_39;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_39;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 8 * v14;
    Swift::UInt32 v19 = *(_DWORD *)v18;
    int v20 = *(unsigned __int8 *)(v18 + 4);
    Hasher.init(_seed:)();
    if (v20 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      if ((v19 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v21 = v19;
      }
      else {
        Swift::UInt32 v21 = 0;
      }
      Hasher._combine(_:)(v21);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v11 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 8 * v11;
    *(_DWORD *)uint64_t v12 = v19;
    *(unsigned char *)(v12 + 4) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v29)
  {
LABEL_39:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_41;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v29) {
      goto LABEL_39;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100CD0450()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016996C8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v29 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v30 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v30) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v29 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v29 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v16 = *(void *)(v29 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 24 * v14;
    uint64_t v19 = *(void *)v18;
    unint64_t v20 = *(void *)(v18 + 8);
    int v21 = *(unsigned __int8 *)(v18 + 16);
    Hasher.init(_seed:)();
    if (v21 == 255)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      sub_10051B3C8(v19, v20, v21 & 1);
      sub_1005057FC(&qword_1016875E0);
      CRExtensible.hash(into:)();
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v8 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v11 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
    *(void *)uint64_t v12 = v19;
    *(void *)(v12 + 8) = v20;
    *(unsigned char *)(v12 + 16) = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v30)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_38;
  }
  unint64_t v16 = *(void *)(v29 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v29 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100CD0770()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101670F40);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD0A20()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101672930);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_10052E538(*(void *)(v2 + 48) + 48 * v18, (uint64_t)v29);
    Hasher.init(_seed:)();
    AnyHashable.hash(into:)();
    Hasher._combine(_:)(v30[1]);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    unint64_t v14 = (_OWORD *)(*(void *)(v4 + 48) + 48 * v13);
    long long v15 = v29[0];
    long long v16 = *(_OWORD *)v30;
    v14[1] = v29[1];
    v14[2] = v16;
    *unint64_t v14 = v15;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD0CD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v34 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1005057FC((uint64_t *)&unk_101670EB0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v31 = v0;
  uint64_t v32 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v33 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v33) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v32 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v33) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v32 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(v34 + 72);
    sub_100CE144C(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    uint64_t result = sub_100CE12D8((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22, type metadata accessor for CRLBoardIdentifier);
    ++*(void *)(v8 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v31;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v33) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v32 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD10B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016997A8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v30 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v31) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v30 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v30 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 32 * v14;
    int64_t v19 = *(void **)v18;
    unint64_t v20 = *(void **)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    unsigned __int8 v22 = *(unsigned char *)(v18 + 24);
    Hasher.init(_seed:)();
    sub_10053BB6C(v19, v20, v21, v22);
    sub_100B8174C((int)&v32, (unint64_t)v19, (unint64_t)v20, v21, v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 32 * v11;
    *(void *)uint64_t v12 = v19;
    *(void *)(v12 + 8) = v20;
    *(void *)(v12 + 16) = v21;
    *(unsigned char *)(v12 + 24) = v22;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v30 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD13A4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v55 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v60 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005057FC((uint64_t *)&unk_10167BE90);
  uint64_t v63 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13 - 8, v14);
  uint64_t v64 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  uint64_t v65 = (uint64_t)&v50 - v18;
  uint64_t v51 = v0;
  uint64_t v19 = *v0;
  sub_1005057FC(&qword_101699920);
  uint64_t v20 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v21 = v20;
  if (!*(void *)(v19 + 16))
  {
    uint64_t result = swift_release();
LABEL_41:
    *uint64_t v51 = v21;
    return result;
  }
  uint64_t v22 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v23 = *(void *)(v19 + 56);
  uint64_t v57 = v1;
  uint64_t v58 = v19 + 56;
  if (v22 < 64) {
    uint64_t v24 = ~(-1 << v22);
  }
  else {
    uint64_t v24 = -1;
  }
  unint64_t v25 = v24 & v23;
  int64_t v59 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v62 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v56 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v2 + 32);
  uint64_t v52 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v26 = v20 + 56;
  uint64_t result = swift_retain();
  int64_t v28 = 0;
  uint64_t v29 = (uint64_t)v64;
  int64_t v54 = v12;
  for (i = v19; ; uint64_t v19 = i)
  {
    if (v25)
    {
      unint64_t v31 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v32 = v31 | (v28 << 6);
      goto LABEL_24;
    }
    int64_t v33 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v33 >= v59) {
      goto LABEL_39;
    }
    unint64_t v34 = *(void *)(v58 + 8 * v33);
    ++v28;
    if (!v34)
    {
      int64_t v28 = v33 + 1;
      if (v33 + 1 >= v59) {
        goto LABEL_39;
      }
      unint64_t v34 = *(void *)(v58 + 8 * v28);
      if (!v34)
      {
        int64_t v28 = v33 + 2;
        if (v33 + 2 >= v59) {
          goto LABEL_39;
        }
        unint64_t v34 = *(void *)(v58 + 8 * v28);
        if (!v34) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v25 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v28 << 6);
LABEL_24:
    uint64_t v36 = *(void *)(v19 + 48);
    uint64_t v37 = *(void *)(v63 + 72);
    uint64_t v38 = v65;
    sub_100522E9C(v36 + v37 * v32, v65, (uint64_t *)&unk_10167BE90);
    Hasher.init(_seed:)();
    sub_100522E9C(v38, v29, (uint64_t *)&unk_10167BE90);
    if ((*v62)(v29, 1, v8) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      sub_100CE12D8(v29, (uint64_t)v12, type metadata accessor for CRLWPHyperlinkSmartFieldData);
      Hasher._combine(_:)(1u);
      char v39 = v12[8];
      uint64_t v66 = *(void *)v12;
      char v67 = v39;
      sub_1005057FC(&qword_101687A18);
      CRExtensible.hash(into:)();
      uint64_t v40 = v60;
      sub_100522E9C((uint64_t)&v12[*(int *)(v8 + 20)], v60, &qword_101672E90);
      uint64_t v41 = v57;
      if ((*v56)(v40, 1, v57) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v42 = v55;
        (*v53)(v55, v60, v41);
        Hasher._combine(_:)(1u);
        sub_100CDE0D8((unint64_t *)&unk_101687A20, (void (*)(uint64_t))&type metadata accessor for URL);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v12 = v54;
        (*v52)(v42, v41);
      }
      String.hash(into:)();
      sub_100AD82A0(v68, *(void *)&v12[*(int *)(v8 + 28)]);
      sub_100CE14B4((uint64_t)v12, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v43 = -1 << *(unsigned char *)(v21 + 32);
    unint64_t v44 = result & ~v43;
    unint64_t v45 = v44 >> 6;
    if (((-1 << v44) & ~*(void *)(v26 + 8 * (v44 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v44) & ~*(void *)(v26 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v29 = (uint64_t)v64;
    }
    else
    {
      char v46 = 0;
      unint64_t v47 = (unint64_t)(63 - v43) >> 6;
      uint64_t v29 = (uint64_t)v64;
      do
      {
        if (++v45 == v47 && (v46 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v48 = v45 == v47;
        if (v45 == v47) {
          unint64_t v45 = 0;
        }
        v46 |= v48;
        uint64_t v49 = *(void *)(v26 + 8 * v45);
      }
      while (v49 == -1);
      unint64_t v30 = __clz(__rbit64(~v49)) + (v45 << 6);
    }
    *(void *)(v26 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    uint64_t result = sub_10051B3EC(v65, *(void *)(v21 + 48) + v30 * v37, (uint64_t *)&unk_10167BE90);
    ++*(void *)(v21 + 16);
  }
  int64_t v35 = v33 + 3;
  if (v35 >= v59)
  {
LABEL_39:
    uint64_t result = swift_release_n();
    goto LABEL_41;
  }
  unint64_t v34 = *(void *)(v58 + 8 * v35);
  if (v34)
  {
    int64_t v28 = v35;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v28 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v28 >= v59) {
      goto LABEL_39;
    }
    unint64_t v34 = *(void *)(v58 + 8 * v28);
    ++v35;
    if (v34) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100CD1A90()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101670F38);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD1D0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v65 = (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v67 - 8);
  __chkstk_darwin(v67, v6);
  uint64_t v61 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v66 = (uint64_t)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v70 = (uint64_t)&v58 - v13;
  uint64_t v14 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  uint64_t v72 = *(void *)(v14 - 8);
  uint64_t v73 = v14;
  uint64_t v16 = __chkstk_darwin(v14, v15);
  Swift::UInt v18 = (unsigned __int8 *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  unint64_t v21 = (char *)&v58 - v20;
  uint64_t v22 = *v0;
  sub_1005057FC(&qword_1016997B0);
  uint64_t v23 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v24 = v23;
  if (!*(void *)(v22 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_48;
  }
  uint64_t v58 = v0;
  char v25 = *(unsigned char *)(v22 + 32);
  uint64_t v26 = *(void *)(v22 + 56);
  uint64_t v69 = v22 + 56;
  uint64_t v27 = 1 << v25;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  else {
    uint64_t v28 = -1;
  }
  unint64_t v29 = v28 & v26;
  uint64_t v64 = v18 + 8;
  int64_t v71 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v60 = (void (**)(char *))(v5 + 32);
  int64_t v59 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v30 = v23 + 56;
  swift_retain();
  int64_t v31 = 0;
  uint64_t v68 = v22;
  while (1)
  {
    if (v29)
    {
      unint64_t v33 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      unint64_t v34 = v33 | (v31 << 6);
      goto LABEL_24;
    }
    int64_t v35 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_49;
    }
    if (v35 >= v71) {
      break;
    }
    unint64_t v36 = *(void *)(v69 + 8 * v35);
    ++v31;
    if (!v36)
    {
      int64_t v31 = v35 + 1;
      if (v35 + 1 >= v71) {
        break;
      }
      unint64_t v36 = *(void *)(v69 + 8 * v31);
      if (!v36)
      {
        int64_t v31 = v35 + 2;
        if (v35 + 2 >= v71) {
          break;
        }
        unint64_t v36 = *(void *)(v69 + 8 * v31);
        if (!v36)
        {
          int64_t v37 = v35 + 3;
          if (v37 >= v71) {
            break;
          }
          unint64_t v36 = *(void *)(v69 + 8 * v37);
          if (!v36)
          {
            while (1)
            {
              int64_t v31 = v37 + 1;
              if (__OFADD__(v37, 1)) {
                goto LABEL_50;
              }
              if (v31 >= v71) {
                goto LABEL_46;
              }
              unint64_t v36 = *(void *)(v69 + 8 * v31);
              ++v37;
              if (v36) {
                goto LABEL_23;
              }
            }
          }
          int64_t v31 = v37;
        }
      }
    }
LABEL_23:
    unint64_t v29 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v31 << 6);
LABEL_24:
    uint64_t v38 = *(void *)(v72 + 72);
    sub_100CE144C(*(void *)(v22 + 48) + v38 * v34, (uint64_t)v21, type metadata accessor for CRLBoardLibraryViewModel.Item);
    Hasher.init(_seed:)();
    sub_100CE144C((uint64_t)v21, (uint64_t)v18, type metadata accessor for CRLBoardLibraryViewModel.Item);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v40 = v70;
        sub_100CE12D8((uint64_t)v18, v70, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        uint64_t v41 = v66;
        sub_100CE144C(v40, v66, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        uint64_t v42 = sub_1005057FC(&qword_101670F30);
        switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v41, 5, v42))
        {
          case 1u:
            Swift::UInt v48 = 0;
            goto LABEL_35;
          case 2u:
            Swift::UInt v48 = 1;
            goto LABEL_35;
          case 3u:
            Swift::UInt v48 = 2;
            goto LABEL_35;
          case 4u:
            Swift::UInt v48 = 3;
            goto LABEL_35;
          case 5u:
            Swift::UInt v48 = 4;
LABEL_35:
            Hasher._combine(_:)(v48);
            break;
          default:
            uint64_t v43 = v67;
            unint64_t v44 = (uint64_t *)(v66 + *(int *)(v42 + 48));
            uint64_t v45 = *v44;
            uint64_t v62 = v44[1];
            uint64_t v63 = v45;
            char v46 = v61;
            (*v60)(v61);
            Hasher._combine(_:)(5uLL);
            sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
            dispatch thunk of Hashable.hash(into:)();
            String.hash(into:)();
            (*v59)(v46, v43);
            swift_bridgeObjectRelease();
            break;
        }
        uint64_t v22 = v68;
        sub_100CE14B4(v70, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      }
      else
      {
        sub_1005057FC(&qword_101677100);
        swift_bridgeObjectRelease();
        uint64_t v47 = v65;
        sub_100CE12D8((uint64_t)v18, v65, type metadata accessor for CRLBoardIdentifier);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        sub_100CE14B4(v47, type metadata accessor for CRLBoardIdentifier);
        uint64_t v22 = v68;
      }
    }
    else
    {
      Hasher._combine(_:)(*v18);
    }
    Swift::Int v49 = Hasher._finalize()();
    uint64_t v50 = -1 << *(unsigned char *)(v24 + 32);
    unint64_t v51 = v49 & ~v50;
    unint64_t v52 = v51 >> 6;
    if (((-1 << v51) & ~*(void *)(v30 + 8 * (v51 >> 6))) != 0)
    {
      unint64_t v32 = __clz(__rbit64((-1 << v51) & ~*(void *)(v30 + 8 * (v51 >> 6)))) | v51 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v53 = 0;
    unint64_t v54 = (unint64_t)(63 - v50) >> 6;
    do
    {
      if (++v52 == v54 && (v53 & 1) != 0)
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        JUMPOUT(0x100CD24F4);
      }
      BOOL v55 = v52 == v54;
      if (v52 == v54) {
        unint64_t v52 = 0;
      }
      v53 |= v55;
      uint64_t v56 = *(void *)(v30 + 8 * v52);
    }
    while (v56 == -1);
    unint64_t v32 = __clz(__rbit64(~v56)) + (v52 << 6);
LABEL_7:
    *(void *)(v30 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    sub_100CE12D8((uint64_t)v21, *(void *)(v24 + 48) + v32 * v38, type metadata accessor for CRLBoardLibraryViewModel.Item);
    ++*(void *)(v24 + 16);
  }
LABEL_46:
  uint64_t result = swift_release_n();
  uint64_t v1 = v58;
LABEL_48:
  uint64_t *v1 = v24;
  return result;
}

uint64_t sub_100CD250C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v76 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v79 - 8);
  __chkstk_darwin(v79, v6);
  uint64_t v72 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v71 = (uint64_t)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v75 = (uint64_t)&v66 - v13;
  uint64_t v14 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  Swift::UInt v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v66 - v21;
  uint64_t v23 = *v0;
  sub_1005057FC((uint64_t *)&unk_101670F20);
  uint64_t v24 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v25 = v24;
  if (!*(void *)(v23 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_49;
  }
  uint64_t v66 = v0;
  uint64_t v26 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v27 = *(void *)(v23 + 56);
  uint64_t v74 = v23 + 56;
  if (v26 < 64) {
    uint64_t v28 = ~(-1 << v26);
  }
  else {
    uint64_t v28 = -1;
  }
  unint64_t v29 = v28 & v27;
  int64_t v77 = (unint64_t)(v26 + 63) >> 6;
  uint64_t v68 = (void (**)(char *))(v5 + 32);
  uint64_t v67 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v30 = v24 + 56;
  swift_retain();
  int64_t v31 = 0;
  uint64_t v70 = v14;
  uint64_t v69 = v15;
  uint64_t v32 = v23;
  uint64_t v73 = v23;
  BOOL v80 = v18;
  uint64_t v78 = v22;
  while (1)
  {
    if (v29)
    {
      unint64_t v34 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      int64_t v81 = v31;
      unint64_t v35 = v34 | (v31 << 6);
      goto LABEL_24;
    }
    int64_t v36 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_50;
    }
    if (v36 >= v77) {
      break;
    }
    unint64_t v37 = *(void *)(v74 + 8 * v36);
    int64_t v38 = v31 + 1;
    if (!v37)
    {
      int64_t v38 = v31 + 2;
      if (v31 + 2 >= v77) {
        break;
      }
      unint64_t v37 = *(void *)(v74 + 8 * v38);
      if (!v37)
      {
        int64_t v38 = v31 + 3;
        if (v31 + 3 >= v77) {
          break;
        }
        unint64_t v37 = *(void *)(v74 + 8 * v38);
        if (!v37)
        {
          uint64_t v39 = v31 + 4;
          if (v31 + 4 >= v77) {
            break;
          }
          unint64_t v37 = *(void *)(v74 + 8 * v39);
          if (!v37)
          {
            while (1)
            {
              int64_t v38 = v39 + 1;
              if (__OFADD__(v39, 1)) {
                goto LABEL_51;
              }
              if (v38 >= v77) {
                goto LABEL_47;
              }
              unint64_t v37 = *(void *)(v74 + 8 * v38);
              ++v39;
              if (v37) {
                goto LABEL_23;
              }
            }
          }
          int64_t v38 = v31 + 4;
        }
      }
    }
LABEL_23:
    unint64_t v29 = (v37 - 1) & v37;
    int64_t v81 = v38;
    unint64_t v35 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_24:
    uint64_t v40 = *(void *)(v15 + 72);
    sub_100CE144C(*(void *)(v32 + 48) + v40 * v35, (uint64_t)v22, type metadata accessor for CRLBoardPreviewImageCache.Item);
    Hasher.init(_seed:)();
    sub_100CE144C((uint64_t)v22, (uint64_t)v18, type metadata accessor for CRLBoardPreviewImageCache.Item);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v42 = v76;
        sub_100CE12D8((uint64_t)v18, v76, type metadata accessor for CRLBoardIdentifier);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v43 = v42;
      }
      else
      {
        unint64_t v51 = &v18[*(int *)(sub_1005057FC(&qword_10169FA80) + 48)];
        uint64_t v52 = v76;
        sub_100CE12D8((uint64_t)v18, v76, type metadata accessor for CRLBoardIdentifier);
        char v53 = v72;
        uint64_t v54 = v79;
        ((void (*)(char *, char *, uint64_t))*v68)(v72, v51, v79);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        dispatch thunk of Hashable.hash(into:)();
        BOOL v55 = v53;
        uint64_t v32 = v73;
        (*v67)(v55, v54);
        uint64_t v43 = v52;
        uint64_t v15 = v69;
      }
      sub_100CE14B4(v43, type metadata accessor for CRLBoardIdentifier);
      uint64_t v22 = v78;
    }
    else
    {
      uint64_t v44 = v75;
      sub_100CE12D8((uint64_t)v18, v75, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v45 = v44;
      uint64_t v46 = v71;
      sub_100CE144C(v45, v71, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      uint64_t v47 = sub_1005057FC(&qword_101670F30);
      switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v46, 5, v47))
      {
        case 1u:
          Swift::UInt v56 = 0;
          goto LABEL_36;
        case 2u:
          Swift::UInt v56 = 1;
          goto LABEL_36;
        case 3u:
          Swift::UInt v56 = 2;
          goto LABEL_36;
        case 4u:
          Swift::UInt v56 = 3;
          goto LABEL_36;
        case 5u:
          Swift::UInt v56 = 4;
LABEL_36:
          Hasher._combine(_:)(v56);
          break;
        default:
          Swift::UInt v48 = v72;
          uint64_t v49 = v79;
          (*v68)(v72);
          Hasher._combine(_:)(5uLL);
          sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
          dispatch thunk of Hashable.hash(into:)();
          String.hash(into:)();
          uint64_t v50 = v49;
          uint64_t v15 = v69;
          (*v67)(v48, v50);
          uint64_t v22 = v78;
          swift_bridgeObjectRelease();
          break;
      }
      uint64_t v32 = v73;
      sub_100CE14B4(v75, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    }
    Swift::Int v57 = Hasher._finalize()();
    uint64_t v58 = -1 << *(unsigned char *)(v25 + 32);
    unint64_t v59 = v57 & ~v58;
    unint64_t v60 = v59 >> 6;
    Swift::UInt v18 = v80;
    if (((-1 << v59) & ~*(void *)(v30 + 8 * (v59 >> 6))) != 0)
    {
      unint64_t v33 = __clz(__rbit64((-1 << v59) & ~*(void *)(v30 + 8 * (v59 >> 6)))) | v59 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v61 = 0;
    unint64_t v62 = (unint64_t)(63 - v58) >> 6;
    do
    {
      if (++v60 == v62 && (v61 & 1) != 0)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        JUMPOUT(0x100CD2E24);
      }
      BOOL v63 = v60 == v62;
      if (v60 == v62) {
        unint64_t v60 = 0;
      }
      v61 |= v63;
      uint64_t v64 = *(void *)(v30 + 8 * v60);
    }
    while (v64 == -1);
    unint64_t v33 = __clz(__rbit64(~v64)) + (v60 << 6);
LABEL_7:
    *(void *)(v30 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    sub_100CE12D8((uint64_t)v22, *(void *)(v25 + 48) + v33 * v40, type metadata accessor for CRLBoardPreviewImageCache.Item);
    ++*(void *)(v25 + 16);
    int64_t v31 = v81;
  }
LABEL_47:
  uint64_t result = swift_release_n();
  uint64_t v1 = v66;
LABEL_49:
  uint64_t *v1 = v25;
  return result;
}

unint64_t sub_100CD2E3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101699648);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    unint64_t result = swift_release();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_6;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_22;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_22;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_6:
    unint64_t result = sub_100CC5124(*(void *)(*(void *)(v2 + 48) + 32 * v12), *(void *)(*(void *)(v2 + 48) + 32 * v12 + 8), *(unsigned char *)(*(void *)(v2 + 48) + 32 * v12 + 16), v3, *(double *)(*(void *)(v2 + 48) + 32 * v12 + 24));
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100CD2FE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1005057FC(&qword_101671060);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v30 = v0;
  uint64_t v31 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v32 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v32) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v31 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v32) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v31 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v32) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v31 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(v33 + 72);
    sub_100CE144C(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5, type metadata accessor for CRLBoardIdentifierAndValue);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v5[*(int *)(v34 + 20)]);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    uint64_t result = sub_100CE12D8((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22, type metadata accessor for CRLBoardIdentifierAndValue);
    ++*(void *)(v8 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v32) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v31 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD33D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1005057FC(&qword_1016999A0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  int64_t v32 = v0;
  uint64_t v33 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v34 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v34) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v34) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(v6 + 48);
    uint64_t v23 = *(void *)(v36 + 72);
    sub_100CE144C(v22 + v23 * v18, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    uint64_t result = sub_100CE12D8((uint64_t)v5, *(void *)(v8 + 48) + v16 * v23, (uint64_t (*)(void))type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
    ++*(void *)(v8 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v34)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v32;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v33 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v34) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD3804()
{
  uint64_t v1 = v0;
  uint64_t v2 = _s17CategoryViewModelVMa();
  uint64_t v34 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1005057FC(&qword_1016998E0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v30 = v0;
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v32 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v33 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  uint64_t v31 = v5;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v33) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v33) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v32 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v33) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v32 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(v34 + 72);
    sub_100CE144C(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5, (uint64_t (*)(void))_s17CategoryViewModelVMa);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (*(void *)&v5[*(int *)(v2 + 24) + 8])
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      uint64_t v5 = v31;
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*(void *)&v5[*(int *)(v2 + 32)]);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    uint64_t result = sub_100CE12D8((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22, (uint64_t (*)(void))_s17CategoryViewModelVMa);
    ++*(void *)(v8 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_38;
  }
  unint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v33) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v32 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100CD3CB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC((uint64_t *)&unk_1016712F0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for CalculateExpression();
    sub_100CDE0D8((unint64_t *)&unk_10167BEE0, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD3FB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016997D0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_retain();
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD4234()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_1005057FC(&qword_101699910);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  unint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  int64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_100CDE0D8(&qword_101699918, (void (*)(uint64_t))&type metadata accessor for UTType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD45E4()
{
  uint64_t v1 = v0;
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v3);
  BOOL v55 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CRLSEBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v54 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLSELibraryViewModel.Item(0);
  uint64_t v63 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (unsigned __int8 *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  int64_t v15 = (char *)&v50 - v14;
  uint64_t v16 = *v0;
  sub_1005057FC(&qword_101699900);
  uint64_t v17 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v18 = v17;
  if (!*(void *)(v16 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_40;
  }
  unint64_t v51 = v0;
  char v19 = *(unsigned char *)(v16 + 32);
  uint64_t v20 = *(void *)(v16 + 56);
  uint64_t v61 = v16 + 56;
  uint64_t v21 = 1 << v19;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & v20;
  Swift::Int v57 = v11 + 8;
  int64_t v62 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v52 = (void (**)(char *, uint64_t))(v2 + 8);
  char v53 = (void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32);
  uint64_t v24 = v17 + 56;
  swift_retain();
  int64_t v25 = 0;
  uint64_t v58 = v16;
  uint64_t v59 = v8;
  uint64_t v26 = v16;
  while (1)
  {
    if (v23)
    {
      unint64_t v28 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v29 = v28 | (v25 << 6);
      goto LABEL_24;
    }
    int64_t v30 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      goto LABEL_41;
    }
    if (v30 >= v62) {
      break;
    }
    unint64_t v31 = *(void *)(v61 + 8 * v30);
    ++v25;
    if (!v31)
    {
      int64_t v25 = v30 + 1;
      if (v30 + 1 >= v62) {
        break;
      }
      unint64_t v31 = *(void *)(v61 + 8 * v25);
      if (!v31)
      {
        int64_t v25 = v30 + 2;
        if (v30 + 2 >= v62) {
          break;
        }
        unint64_t v31 = *(void *)(v61 + 8 * v25);
        if (!v31)
        {
          int64_t v32 = v30 + 3;
          if (v32 >= v62) {
            break;
          }
          unint64_t v31 = *(void *)(v61 + 8 * v32);
          if (!v31)
          {
            while (1)
            {
              int64_t v25 = v32 + 1;
              if (__OFADD__(v32, 1)) {
                goto LABEL_42;
              }
              if (v25 >= v62) {
                goto LABEL_38;
              }
              unint64_t v31 = *(void *)(v61 + 8 * v25);
              ++v32;
              if (v31) {
                goto LABEL_23;
              }
            }
          }
          int64_t v25 = v32;
        }
      }
    }
LABEL_23:
    unint64_t v23 = (v31 - 1) & v31;
    unint64_t v29 = __clz(__rbit64(v31)) + (v25 << 6);
LABEL_24:
    uint64_t v33 = *(void *)(v63 + 72);
    sub_100CE144C(*(void *)(v26 + 48) + v33 * v29, (uint64_t)v15, type metadata accessor for CRLSELibraryViewModel.Item);
    Hasher.init(_seed:)();
    sub_100CE144C((uint64_t)v15, (uint64_t)v11, type metadata accessor for CRLSELibraryViewModel.Item);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v34 = sub_1005057FC((uint64_t *)&unk_10169B720);
        swift_bridgeObjectRelease();
        Swift::UInt v56 = &v11[*(int *)(v34 + 80)];
        uint64_t v35 = v54;
        sub_100CE12D8((uint64_t)v11, v54, type metadata accessor for CRLSEBoardIdentifier);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for CRLSEBoardIdentifierStorage(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v26 = v58;
        swift_bridgeObjectRelease();
        sub_100CE14B4(v35, type metadata accessor for CRLSEBoardIdentifier);
        uint64_t v36 = (uint64_t)v56;
        goto LABEL_28;
      case 3u:
        uint64_t v37 = sub_1005057FC((uint64_t *)&unk_10168D400);
        swift_bridgeObjectRelease();
        uint64_t v38 = &v11[*(int *)(v37 + 64)];
        uint64_t v39 = v55;
        uint64_t v40 = v60;
        (*v53)(v55, v11, v60);
        sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        (*v52)(v39, v40);
        uint64_t v36 = (uint64_t)v38;
        uint64_t v26 = v58;
LABEL_28:
        sub_100522F00(v36, &qword_101672EB0);
        break;
      default:
        Hasher._combine(_:)(*v11);
        break;
    }
    Swift::Int v41 = Hasher._finalize()();
    uint64_t v42 = -1 << *(unsigned char *)(v18 + 32);
    unint64_t v43 = v41 & ~v42;
    unint64_t v44 = v43 >> 6;
    if (((-1 << v43) & ~*(void *)(v24 + 8 * (v43 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v43) & ~*(void *)(v24 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v45 = 0;
    unint64_t v46 = (unint64_t)(63 - v42) >> 6;
    do
    {
      if (++v44 == v46 && (v45 & 1) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x100CD4C68);
      }
      BOOL v47 = v44 == v46;
      if (v44 == v46) {
        unint64_t v44 = 0;
      }
      v45 |= v47;
      uint64_t v48 = *(void *)(v24 + 8 * v44);
    }
    while (v48 == -1);
    unint64_t v27 = __clz(__rbit64(~v48)) + (v44 << 6);
LABEL_7:
    *(void *)(v24 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    sub_100CE12D8((uint64_t)v15, *(void *)(v18 + 48) + v27 * v33, type metadata accessor for CRLSELibraryViewModel.Item);
    ++*(void *)(v18 + 16);
  }
LABEL_38:
  uint64_t result = swift_release_n();
  uint64_t v1 = v51;
LABEL_40:
  uint64_t *v1 = v18;
  return result;
}

unint64_t sub_100CD4C78()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101699688);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    unint64_t result = swift_release();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_6;
    }
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v8) {
      goto LABEL_22;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    ++v10;
    if (!v17)
    {
      int64_t v10 = v16 + 1;
      if (v16 + 1 >= v8) {
        goto LABEL_22;
      }
      unint64_t v17 = *(void *)(v5 + 8 * v10);
      if (!v17)
      {
        int64_t v10 = v16 + 2;
        if (v16 + 2 >= v8) {
          goto LABEL_22;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v10);
        if (!v17) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v10 << 6);
LABEL_6:
    uint64_t v13 = *(void *)(v2 + 48) + 16 * v12;
    id v14 = *(id *)v13;
    char v15 = *(unsigned char *)(v13 + 8);
    sub_1007A0914(*(id *)v13, v15);
    unint64_t result = sub_100CC53C4(v14, v15, v3);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  unint64_t v17 = *(void *)(v5 + 8 * v18);
  if (v17)
  {
    int64_t v10 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_22;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v10);
    ++v18;
    if (v17) {
      goto LABEL_21;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_100CD4E2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_1016998E8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    unint64_t result = swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  unint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_7;
    }
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v9) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v12;
    if (!v18)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v12);
      if (!v18)
      {
        int64_t v12 = v17 + 2;
        if (v17 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (!v18) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_7:
    uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    uint64_t v16 = *(void *)(v15 + 16);
    swift_retain();
    sub_100A450A4((uint64_t)v20, v16);
    sub_100BD26EC(v20);
    Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(*(void *)(v4 + 48) + 8 * result) = v15;
    ++*(void *)(v4 + 16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v9)
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v12 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100CD5060()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v45 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  int64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = *v0;
  sub_1005057FC(&qword_101672920);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v15;
    return result;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 56);
  uint64_t v42 = v0;
  uint64_t v43 = v13 + 56;
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 56;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v26 >= v44) {
      goto LABEL_33;
    }
    unint64_t v27 = *(void *)(v43 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v44) {
        goto LABEL_33;
      }
      unint64_t v27 = *(void *)(v43 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v44) {
          goto LABEL_33;
        }
        unint64_t v27 = *(void *)(v43 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v19 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_24:
    uint64_t v29 = v13;
    uint64_t v30 = *(void *)(v13 + 48);
    uint64_t v31 = *(void *)(v46 + 72);
    sub_100CE144C(v30 + v31 * v25, (uint64_t)v12, type metadata accessor for CRLSpotlightManager.ChangeType);
    Hasher.init(_seed:)();
    uint64_t v32 = v45;
    sub_100CE144C((uint64_t)v12, v45, type metadata accessor for CRLSpotlightManager.ChangeType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_100CE12D8(v32, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    Hasher._combine(_:)(EnumCaseMultiPayload == 1);
    type metadata accessor for UUID();
    sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    uint64_t result = Hasher._finalize()();
    uint64_t v34 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v35) & ~*(void *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v20 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = sub_100CE12D8((uint64_t)v12, *(void *)(v15 + 48) + v23 * v31, type metadata accessor for CRLSpotlightManager.ChangeType);
    ++*(void *)(v15 + 16);
    uint64_t v13 = v29;
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v44)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v42;
    goto LABEL_35;
  }
  unint64_t v27 = *(void *)(v43 + 8 * v28);
  if (v27)
  {
    int64_t v22 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v22 >= v44) {
      goto LABEL_33;
    }
    unint64_t v27 = *(void *)(v43 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD5540()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101699750);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD57A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_1005057FC(&qword_101672910);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  unint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  int64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_100CDE0D8(&qword_101672918, (void (*)(uint64_t))&type metadata accessor for IndexPath);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD5B54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_1005057FC(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  char v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD5DCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1005057FC(&qword_101671308);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_10050BF84(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    long long v15 = v29[0];
    long long v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)uint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100CD6060@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(sub_1005057FC((uint64_t *)&unk_101684FB0) + 48);
  uint64_t v5 = sub_1005057FC(&qword_10169A0F0);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  sub_100522E9C(v4, (uint64_t)a2 + *(int *)(v5 + 48), (uint64_t *)&unk_101674520);
  *a2 = v7;
  a2[1] = v6;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100CD60E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = sub_1005057FC((uint64_t *)&unk_101674520);
  uint64_t v49 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v48 = (uint64_t)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v57 = (uint64_t)v47 - v15;
  uint64_t v16 = sub_1005057FC((uint64_t *)&unk_101684F70);
  __chkstk_darwin(v16 - 8, v17);
  int64_t v19 = (void *)((char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = ~v20;
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = -v20;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  else {
    uint64_t v24 = -1;
  }
  uint64_t v52 = v21;
  uint64_t v53 = 0;
  uint64_t v54 = v24 & v22;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  v47[1] = a1;
  swift_bridgeObjectRetain();
  v47[0] = a3;
  swift_retain();
  sub_100F27C3C((uint64_t)v19);
  uint64_t v25 = sub_1005057FC(&qword_10169A0F0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v19, 1, v25) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10052E1EC();
    return swift_release();
  }
  BOOL v27 = (uint64_t *)&unk_101674520;
  while (1)
  {
    uint64_t v31 = *v19;
    uint64_t v30 = v19[1];
    BOOL v32 = v27;
    sub_10051B3EC((uint64_t)v19 + *(int *)(v25 + 48), v57, v27);
    uint64_t v33 = *a5;
    unint64_t v35 = sub_100955F50(v31, v30);
    uint64_t v36 = *(void *)(v33 + 16);
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (*(void *)(v33 + 24) >= v38)
    {
      if (a4)
      {
        if (v34) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_10097CD24();
        if (v39) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_1009609B8(v38, a4 & 1);
      unint64_t v40 = sub_100955F50(v31, v30);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_22;
      }
      unint64_t v35 = v40;
      if (v39)
      {
LABEL_7:
        uint64_t v28 = v57;
        uint64_t v29 = v48;
        BOOL v27 = v32;
        sub_100522E9C(v57, v48, v32);
        sub_100522F00(v28, v32);
        swift_bridgeObjectRelease();
        sub_1006063BC(v29, *(void *)(*a5 + 56) + *(void *)(v49 + 72) * v35, v32);
        goto LABEL_8;
      }
    }
    uint64_t v42 = (void *)*a5;
    *(void *)(*a5 + 8 * (v35 >> 6) + 64) |= 1 << v35;
    uint64_t v43 = (uint64_t *)(v42[6] + 16 * v35);
    *uint64_t v43 = v31;
    v43[1] = v30;
    BOOL v27 = v32;
    sub_10051B3EC(v57, v42[7] + *(void *)(v49 + 72) * v35, v32);
    uint64_t v44 = v42[2];
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_21;
    }
    void v42[2] = v46;
LABEL_8:
    sub_100F27C3C((uint64_t)v19);
    uint64_t v25 = sub_1005057FC(&qword_10169A0F0);
    a4 = 1;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v19, 1, v25) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100CD64CC(unint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_100F69F3C(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100CD6574(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_100CD6574(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v140 = (char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v155 = (char *)&v135 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v150 = (char *)&v135 - v14;
  __chkstk_darwin(v13, v15);
  uint64_t v151 = (char *)&v135 - v16;
  Swift::Int v17 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v17);
  if (result >= v17)
  {
    if (v17 < 0) {
      goto LABEL_140;
    }
    if (v17) {
      return sub_100CD7134(0, v17, 1, a1);
    }
    return result;
  }
  if (v17 >= 0) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  if (v17 < -1) {
    goto LABEL_148;
  }
  uint64_t v153 = v4;
  uint64_t v154 = a1;
  Swift::Int v137 = result;
  if (v17 < 2)
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
    unint64_t v142 = (unint64_t)_swiftEmptyArrayStorage
         + ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80));
    uint64_t v136 = _swiftEmptyArrayStorage;
    if (v17 != 1)
    {
      unint64_t v25 = *(void *)&_swiftEmptyArrayStorage[2];
LABEL_106:
      if (v25 >= 2)
      {
        uint64_t v129 = *v154;
        do
        {
          unint64_t v130 = v25 - 2;
          if (v25 < 2) {
            goto LABEL_135;
          }
          if (!v129) {
            goto LABEL_147;
          }
          double v131 = v23[2 * v130 + 4];
          double v132 = v23[2 * v25 + 3];
          sub_100CD7454(v129 + v5[9] * *(void *)&v131, v129 + v5[9] * *(void *)&v23[2 * v25 + 2], v129 + v5[9] * *(void *)&v132, v142);
          if (v2) {
            break;
          }
          if (*(uint64_t *)&v132 < *(uint64_t *)&v131) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v23 = sub_100F69F28((uint64_t)v23);
          }
          if (v130 >= *((void *)v23 + 2)) {
            goto LABEL_137;
          }
          uint64_t v133 = &v23[2 * v130 + 4];
          *uint64_t v133 = v131;
          v133[1] = v132;
          unint64_t v134 = *((void *)v23 + 2);
          if (v25 > v134) {
            goto LABEL_138;
          }
          memmove(&v23[2 * v25 + 2], &v23[2 * v25 + 4], 16 * (v134 - v25));
          *((void *)v23 + 2) = v134 - 1;
          unint64_t v25 = v134 - 1;
        }
        while (v134 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v136[2] = 0.0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v20 = v19 >> 1;
    uint64_t v21 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v21 + 16) = v20;
    unint64_t v22 = (*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80);
    uint64_t v136 = (double *)v21;
    unint64_t v142 = v21 + v22;
  }
  Swift::Int v24 = 0;
  uint64_t v148 = (void (**)(char *, uint64_t))(v5 + 1);
  uint64_t v149 = v5 + 2;
  uint64_t v158 = (void (**)(char *, uint64_t, uint64_t))(v5 + 4);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v143 = v5;
  while (1)
  {
    Swift::Int v26 = v24;
    Swift::Int v27 = v24 + 1;
    Swift::Int v141 = v24;
    if (v24 + 1 >= v17) {
      goto LABEL_37;
    }
    uint64_t v28 = v153;
    uint64_t v29 = *v154;
    uint64_t v145 = v29;
    Swift::Int v146 = v24 + 1;
    Swift::Int v157 = v143[9];
    Swift::Int v30 = v157;
    uint64_t v31 = (void (*)(char *, uint64_t, uint64_t))v143[2];
    v31(v151, v29 + v157 * v27, v153);
    uint64_t v32 = v29 + v30 * v26;
    uint64_t v33 = v150;
    v31(v150, v32, v28);
    uint64_t v34 = sub_100CDE0D8(&qword_101683E78, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t v35 = v151;
    Swift::Int v152 = v34;
    LODWORD(v156) = dispatch thunk of static Comparable.< infix(_:_:)();
    Swift::Int v36 = v17;
    BOOL v37 = (void (*)(char *, uint64_t))v143[1];
    uint64_t v38 = v33;
    Swift::Int v26 = v141;
    v37(v38, v28);
    v37(v35, v28);
    Swift::Int v39 = v157;
    Swift::Int v27 = v26 + 2;
    Swift::Int v147 = v36;
    if (v26 + 2 >= v36)
    {
      Swift::Int v17 = v147;
      if ((v156 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v138 = v23;
      uint64_t v135 = v2;
      v146 *= v157;
      uint64_t v40 = v145;
      Swift::Int v41 = v157 * v27;
      while (1)
      {
        Swift::Int v42 = v27;
        uint64_t v43 = v151;
        uint64_t v44 = v153;
        v31(v151, v40 + v41, v153);
        BOOL v45 = v150;
        v31(v150, v40 + v146, v44);
        int v46 = dispatch thunk of static Comparable.< infix(_:_:)();
        v37(v45, v44);
        v37(v43, v44);
        if ((v156 ^ v46)) {
          break;
        }
        Swift::Int v27 = v42 + 1;
        Swift::Int v39 = v157;
        v40 += v157;
        if (v147 == v42 + 1)
        {
          Swift::Int v17 = v147;
          Swift::Int v27 = v147;
          uint64_t v2 = v135;
          uint64_t v23 = v138;
          Swift::Int v26 = v141;
          if (v156) {
            goto LABEL_25;
          }
          goto LABEL_37;
        }
      }
      uint64_t v2 = v135;
      uint64_t v23 = v138;
      Swift::Int v27 = v42;
      Swift::Int v26 = v141;
      Swift::Int v17 = v147;
      Swift::Int v39 = v157;
      if ((v156 & 1) == 0) {
        goto LABEL_37;
      }
    }
LABEL_25:
    if (v27 < v26) {
      goto LABEL_141;
    }
    if (v26 >= v27)
    {
LABEL_37:
      uint64_t v51 = v154;
      goto LABEL_38;
    }
    uint64_t v138 = v23;
    uint64_t v47 = 0;
    uint64_t v48 = v39 * (v27 - 1);
    Swift::Int v49 = v27 * v39;
    uint64_t v50 = v26 * v39;
    uint64_t v51 = v154;
    Swift::Int v152 = v27;
    do
    {
      if (v26 != v27 + v47 - 1)
      {
        uint64_t v53 = v145;
        if (!v145) {
          goto LABEL_146;
        }
        uint64_t v54 = v2;
        unint64_t v55 = v145 + v50;
        uint64_t v56 = (char *)(v145 + v48);
        uint64_t v156 = *v158;
        v156(v140, v145 + v50, v153);
        if (v50 < v48 || v55 >= v53 + v49)
        {
          uint64_t v52 = v153;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v52 = v153;
          if (v50 != v48) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v156(v56, (uint64_t)v140, v52);
        uint64_t v2 = v54;
        uint64_t v51 = v154;
        Swift::Int v27 = v152;
        Swift::Int v39 = v157;
      }
      ++v26;
      --v47;
      v48 -= v39;
      v49 -= v39;
      v50 += v39;
    }
    while (v26 < v27 + v47);
    uint64_t v23 = v138;
    Swift::Int v26 = v141;
    Swift::Int v17 = v147;
LABEL_38:
    uint64_t v57 = v153;
    if (v27 >= v17) {
      goto LABEL_57;
    }
    if (__OFSUB__(v27, v26)) {
      goto LABEL_139;
    }
    if (v27 - v26 >= v137) {
      goto LABEL_57;
    }
    if (__OFADD__(v26, v137)) {
      goto LABEL_142;
    }
    Swift::Int v58 = v26 + v137 >= v17 ? v17 : v26 + v137;
    if (v58 < v26) {
      break;
    }
    if (v27 != v58)
    {
      uint64_t v138 = v23;
      uint64_t v135 = v2;
      uint64_t v59 = v143[9];
      uint64_t v144 = (void (*)(char *, uint64_t, uint64_t))v143[2];
      uint64_t v145 = v59;
      uint64_t v60 = v59 * (v27 - 1);
      Swift::Int v61 = v27 * v59;
      Swift::Int v139 = v58;
      do
      {
        uint64_t v63 = 0;
        Swift::Int v152 = v27;
        Swift::Int v146 = v61;
        Swift::Int v147 = v60;
        while (1)
        {
          uint64_t v64 = *v51;
          uint64_t v156 = (void (*)(char *, uint64_t, uint64_t))(v61 + v63);
          Swift::Int v157 = v26;
          Swift::Int v65 = v61 + v63 + v64;
          uint64_t v66 = v151;
          uint64_t v67 = v51;
          uint64_t v68 = v144;
          v144(v151, v65, v57);
          uint64_t v69 = v60 + v63 + v64;
          uint64_t v70 = v150;
          v68(v150, v69, v57);
          sub_100CDE0D8(&qword_101683E78, (void (*)(uint64_t))&type metadata accessor for UUID);
          LOBYTE(v64) = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v71 = *v148;
          (*v148)(v70, v57);
          v71(v66, v57);
          if ((v64 & 1) == 0) {
            break;
          }
          uint64_t v72 = *v67;
          if (!*v67) {
            goto LABEL_144;
          }
          Swift::Int v61 = v146;
          uint64_t v60 = v147;
          uint64_t v73 = (char *)(v72 + v147 + v63);
          uint64_t v74 = *v158;
          uint64_t v75 = v153;
          (*v158)(v155, v72 + v146 + v63, v153);
          uint64_t v57 = v75;
          swift_arrayInitWithTakeFrontToBack();
          v74(v73, (uint64_t)v155, v75);
          v63 -= v145;
          Swift::Int v26 = v157 + 1;
          Swift::Int v62 = v152;
          uint64_t v51 = v154;
          if (v152 == v157 + 1) {
            goto LABEL_49;
          }
        }
        Swift::Int v62 = v152;
        uint64_t v57 = v153;
        uint64_t v51 = v67;
        Swift::Int v61 = v146;
        uint64_t v60 = v147;
LABEL_49:
        Swift::Int v27 = v62 + 1;
        v60 += v145;
        v61 += v145;
        Swift::Int v26 = v141;
      }
      while (v27 != v139);
      Swift::Int v27 = v139;
      uint64_t v2 = v135;
      uint64_t v23 = v138;
    }
LABEL_57:
    if (v27 < v26) {
      goto LABEL_134;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v152 = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v23 = sub_100F697E0(0, *((void *)v23 + 2) + 1, 1, (uint64_t)v23);
    }
    unint64_t v78 = *((void *)v23 + 2);
    unint64_t v77 = *((void *)v23 + 3);
    unint64_t v25 = v78 + 1;
    if (v78 >= v77 >> 1) {
      uint64_t v23 = sub_100F697E0((double *)(v77 > 1), v78 + 1, 1, (uint64_t)v23);
    }
    *((void *)v23 + 2) = v25;
    uint64_t v79 = v23 + 4;
    BOOL v80 = &v23[2 * v78 + 4];
    Swift::Int v81 = v152;
    *(void *)BOOL v80 = v26;
    *((void *)v80 + 1) = v81;
    if (v78)
    {
      while (1)
      {
        unint64_t v82 = v25 - 1;
        if (v25 >= 4)
        {
          uint64_t v87 = &v79[2 * v25];
          uint64_t v88 = *((void *)v87 - 8);
          uint64_t v89 = *((void *)v87 - 7);
          BOOL v93 = __OFSUB__(v89, v88);
          uint64_t v90 = v89 - v88;
          if (v93) {
            goto LABEL_123;
          }
          uint64_t v92 = *((void *)v87 - 6);
          uint64_t v91 = *((void *)v87 - 5);
          BOOL v93 = __OFSUB__(v91, v92);
          uint64_t v85 = v91 - v92;
          char v86 = v93;
          if (v93) {
            goto LABEL_124;
          }
          unint64_t v94 = v25 - 2;
          uint64_t v95 = &v79[2 * v25 - 4];
          uint64_t v97 = *(void *)v95;
          uint64_t v96 = *((void *)v95 + 1);
          BOOL v93 = __OFSUB__(v96, v97);
          uint64_t v98 = v96 - v97;
          if (v93) {
            goto LABEL_126;
          }
          BOOL v93 = __OFADD__(v85, v98);
          uint64_t v99 = v85 + v98;
          if (v93) {
            goto LABEL_129;
          }
          if (v99 >= v90)
          {
            uint64_t v117 = &v79[2 * v82];
            uint64_t v119 = *(void *)v117;
            uint64_t v118 = *((void *)v117 + 1);
            BOOL v93 = __OFSUB__(v118, v119);
            uint64_t v120 = v118 - v119;
            if (v93) {
              goto LABEL_133;
            }
            BOOL v110 = v85 < v120;
            goto LABEL_94;
          }
        }
        else
        {
          if (v25 != 3)
          {
            uint64_t v111 = *((void *)v23 + 4);
            uint64_t v112 = *((void *)v23 + 5);
            BOOL v93 = __OFSUB__(v112, v111);
            uint64_t v104 = v112 - v111;
            char v105 = v93;
            goto LABEL_88;
          }
          uint64_t v84 = *((void *)v23 + 4);
          uint64_t v83 = *((void *)v23 + 5);
          BOOL v93 = __OFSUB__(v83, v84);
          uint64_t v85 = v83 - v84;
          char v86 = v93;
        }
        if (v86) {
          goto LABEL_125;
        }
        unint64_t v94 = v25 - 2;
        int v100 = &v79[2 * v25 - 4];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v103 = __OFSUB__(v101, v102);
        uint64_t v104 = v101 - v102;
        char v105 = v103;
        if (v103) {
          goto LABEL_128;
        }
        uint64_t v106 = &v79[2 * v82];
        uint64_t v108 = *(void *)v106;
        uint64_t v107 = *((void *)v106 + 1);
        BOOL v93 = __OFSUB__(v107, v108);
        uint64_t v109 = v107 - v108;
        if (v93) {
          goto LABEL_131;
        }
        if (__OFADD__(v104, v109)) {
          goto LABEL_132;
        }
        if (v104 + v109 >= v85)
        {
          BOOL v110 = v85 < v109;
LABEL_94:
          if (v110) {
            unint64_t v82 = v94;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v105) {
          goto LABEL_127;
        }
        uint64_t v113 = &v79[2 * v82];
        uint64_t v115 = *(void *)v113;
        uint64_t v114 = *((void *)v113 + 1);
        BOOL v93 = __OFSUB__(v114, v115);
        uint64_t v116 = v114 - v115;
        if (v93) {
          goto LABEL_130;
        }
        if (v116 < v104) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v121 = v82 - 1;
        if (v82 - 1 >= v25)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        if (!*v154) {
          goto LABEL_145;
        }
        uint64_t v122 = v23;
        uint64_t v123 = &v79[2 * v121];
        uint64_t v124 = *(void *)v123;
        uint64_t v125 = &v79[2 * v82];
        double v126 = v125[1];
        sub_100CD7454(*v154 + v143[9] * *(void *)v123, *v154 + v143[9] * *(void *)v125, *v154 + v143[9] * *(void *)&v126, v142);
        if (v2) {
          goto LABEL_117;
        }
        if (*(uint64_t *)&v126 < v124) {
          goto LABEL_120;
        }
        if (v82 > *((void *)v122 + 2)) {
          goto LABEL_121;
        }
        uint64_t v127 = v122;
        *(void *)uint64_t v123 = v124;
        v79[2 * v121 + 1] = v126;
        unint64_t v128 = *((void *)v122 + 2);
        if (v82 >= v128) {
          goto LABEL_122;
        }
        uint64_t v23 = v127;
        unint64_t v25 = v128 - 1;
        memmove(&v79[2 * v82], v125 + 2, 16 * (v128 - 1 - v82));
        *((void *)v23 + 2) = v128 - 1;
        if (v128 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v25 = 1;
LABEL_14:
    Swift::Int v17 = v154[1];
    Swift::Int v24 = v152;
    uint64_t v5 = v143;
    if (v152 >= v17) {
      goto LABEL_106;
    }
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100CD7134(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v44 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v40 = (char *)&v32 - v13;
  uint64_t result = __chkstk_darwin(v12, v14);
  Swift::Int v39 = (char *)&v32 - v17;
  uint64_t v42 = a3;
  uint64_t v33 = a2;
  if (a3 != a2)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v18 = v16 + 16;
    uint64_t v20 = *(void *)(v18 + 56);
    unint64_t v35 = (uint64_t (**)(char *, uint64_t))(v18 - 8);
    Swift::Int v36 = v19;
    BOOL v37 = a4;
    uint64_t v38 = v18;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    uint64_t v47 = v20 * (v42 - 1);
    uint64_t v41 = v20;
    uint64_t v46 = v20 * v42;
LABEL_5:
    uint64_t v21 = 0;
    uint64_t v45 = v34;
    while (1)
    {
      uint64_t v22 = *a4;
      uint64_t v23 = v46 + v21 + *a4;
      Swift::Int v24 = v39;
      unint64_t v25 = v36;
      v36(v39, v23, v7);
      Swift::Int v26 = v40;
      v25(v40, v47 + v21 + v22, v7);
      sub_100CDE0D8(&qword_101683E78, (void (*)(uint64_t))&type metadata accessor for UUID);
      LOBYTE(v25) = dispatch thunk of static Comparable.< infix(_:_:)();
      Swift::Int v27 = *v35;
      (*v35)(v26, v7);
      uint64_t v28 = v24;
      a4 = v37;
      uint64_t result = v27(v28, v7);
      if ((v25 & 1) == 0)
      {
LABEL_4:
        v47 += v41;
        v46 += v41;
        if (++v42 == v33) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v29 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v30 = v29 + v47 + v21;
      uint64_t v31 = *v43;
      (*v43)(v44, v29 + v46 + v21, v7);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(v30, v44, v7);
      v21 -= v41;
      if (v42 == ++v45) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100CD7454(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  Swift::Int v58 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v57 = (char *)v51 - v14;
  uint64_t v59 = *(void *)(v15 + 72);
  if (!v59)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v59 == -1) {
    goto LABEL_68;
  }
  int64_t v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v59 == -1) {
    goto LABEL_69;
  }
  uint64_t v17 = (uint64_t)(a2 - a1) / v59;
  unint64_t v62 = a1;
  unint64_t v61 = a4;
  uint64_t v18 = v16 / v59;
  if (v17 >= v16 / v59)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = v18 * v59;
      if (a4 < a2 || a2 + v20 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
        uint64_t v21 = v9;
      }
      else
      {
        uint64_t v21 = v9;
        if (a4 != a2) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v36 = a4 + v20;
      unint64_t v60 = a4 + v20;
      unint64_t v62 = a2;
      unint64_t v54 = a1;
      if (v20 >= 1 && a1 < a2)
      {
        unint64_t v38 = -v59;
        uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
        uint64_t v39 = v21 + 16;
        v51[1] = v39 - 8;
        uint64_t v52 = v40;
        unint64_t v55 = -v59;
        uint64_t v56 = v39;
        unint64_t v53 = a4;
        uint64_t v41 = v57;
        uint64_t v42 = (void (**)(char *, uint64_t))(v39 - 8);
        do
        {
          uint64_t v59 = a3 + v38;
          uint64_t v43 = v52;
          v52(v41, v36 + v38, v8);
          unint64_t v44 = a2 + v38;
          unint64_t v45 = a3;
          uint64_t v46 = v58;
          v43(v58, v44, v8);
          sub_100CDE0D8(&qword_101683E78, (void (*)(uint64_t))&type metadata accessor for UUID);
          LOBYTE(v43) = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v47 = *v42;
          (*v42)(v46, v8);
          v47(v41, v8);
          if (v43)
          {
            a3 = v59;
            if (v45 < a2 || v59 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v48 = v53;
            }
            else
            {
              unint64_t v48 = v53;
              if (v45 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            unint64_t v38 = v55;
            v62 += v55;
          }
          else
          {
            a3 = v59;
            unint64_t v49 = v60;
            v60 += v55;
            if (v45 < v49 || v59 >= v49)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v44 = a2;
              unint64_t v38 = v55;
              unint64_t v48 = v53;
            }
            else
            {
              unint64_t v48 = v53;
              if (v45 != v49) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v44 = a2;
              unint64_t v38 = v55;
            }
          }
          unint64_t v36 = v60;
          if (v60 <= v48) {
            break;
          }
          a2 = v44;
        }
        while (v44 > v54);
      }
      goto LABEL_66;
    }
  }
  else if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = v17 * v59;
    if (a4 < a1 || a1 + v19 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v55 = a4 + v19;
    unint64_t v60 = a4 + v19;
    if (v19 >= 1 && a2 < a3)
    {
      uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v56 = v9 + 16;
      Swift::Int v24 = (void (**)(char *, uint64_t))(v9 + 8);
      do
      {
        unint64_t v25 = a3;
        Swift::Int v26 = v57;
        v23(v57, a2, v8);
        unint64_t v27 = a4;
        uint64_t v28 = v58;
        v23(v58, v27, v8);
        sub_100CDE0D8(&qword_101683E78, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v29 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v30 = *v24;
        (*v24)(v28, v8);
        v30(v26, v8);
        unint64_t v31 = v62;
        if (v29)
        {
          unint64_t v32 = a2 + v59;
          if (v62 < a2 || v62 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v25;
          }
          else
          {
            a3 = v25;
            if (v62 == a2) {
              unint64_t v31 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          unint64_t v34 = v61 + v59;
          if (v62 < v61 || v62 >= v34)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v25;
          }
          else
          {
            a3 = v25;
            if (v62 != v61) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v61 = v34;
          unint64_t v32 = a2;
        }
        unint64_t v62 = v31 + v59;
        a4 = v61;
        if (v61 >= v55) {
          break;
        }
        a2 = v32;
      }
      while (v32 < a3);
    }
LABEL_66:
    sub_100F698DC(&v62, &v61, (uint64_t *)&v60);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100CD7A88(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

void sub_100CD7B94(long long *a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v7 - 8, v8);
  char v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1005057FC((uint64_t *)&unk_10167BE90);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100522E9C(v1, (uint64_t)v19, (uint64_t *)&unk_10167BE90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 1, v11) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_100CE12D8((uint64_t)v19, (uint64_t)v15, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    Hasher._combine(_:)(1u);
    char v20 = v15[8];
    uint64_t v24 = *(void *)v15;
    char v25 = v20;
    sub_1005057FC(&qword_101687A18);
    CRExtensible.hash(into:)();
    sub_100522E9C((uint64_t)&v15[*(int *)(v11 + 20)], (uint64_t)v10, &qword_101672E90);
    uint64_t v21 = v23;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v3) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v6, v10, v3);
      Hasher._combine(_:)(1u);
      sub_100CDE0D8((unint64_t *)&unk_101687A20, (void (*)(uint64_t))&type metadata accessor for URL);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v3);
    }
    String.hash(into:)();
    sub_100AD82A0(a1, *(void *)&v15[*(int *)(v11 + 28)]);
    sub_100CE14B4((uint64_t)v15, type metadata accessor for CRLWPHyperlinkSmartFieldData);
  }
}

uint64_t sub_100CD7F1C(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

void sub_100CD7F74(uint64_t a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v2 = sub_1005057FC(&qword_1016920F8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1[2];
  while (1)
  {
    if ((~v6 & 0xF000000000000007) == 0) {
      goto LABEL_27;
    }
    uint64_t v7 = v1[3];
    uint64_t v8 = v1[4];
    int64_t v10 = v1[5];
    unint64_t v9 = v1[6];
    if (!v9)
    {
      int64_t v19 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_37;
      }
      int64_t v20 = (unint64_t)(v8 + 64) >> 6;
      int64_t v18 = v1[5];
      if (v19 >= v20) {
        goto LABEL_24;
      }
      unint64_t v21 = *(void *)(v7 + 8 * v19);
      if (v21) {
        goto LABEL_9;
      }
      int64_t v22 = v10 + 2;
      int64_t v18 = v10 + 1;
      if (v10 + 2 >= v20) {
        goto LABEL_24;
      }
      unint64_t v21 = *(void *)(v7 + 8 * v22);
      if (!v21)
      {
        int64_t v18 = v10 + 2;
        if (v10 + 3 >= v20) {
          goto LABEL_24;
        }
        unint64_t v21 = *(void *)(v7 + 8 * (v10 + 3));
        if (v21)
        {
          int64_t v19 = v10 + 3;
          goto LABEL_9;
        }
        int64_t v22 = v10 + 4;
        int64_t v18 = v10 + 3;
        if (v10 + 4 >= v20) {
          goto LABEL_24;
        }
        unint64_t v21 = *(void *)(v7 + 8 * v22);
        if (!v21)
        {
          int64_t v19 = v10 + 5;
          int64_t v18 = v10 + 4;
          if (v10 + 5 >= v20) {
            goto LABEL_24;
          }
          unint64_t v21 = *(void *)(v7 + 8 * v19);
          if (!v21)
          {
            int64_t v18 = v20 - 1;
            int64_t v23 = v10 + 6;
            while (v20 != v23)
            {
              unint64_t v21 = *(void *)(v7 + 8 * v23++);
              if (v21)
              {
                int64_t v19 = v23 - 1;
                goto LABEL_9;
              }
            }
LABEL_24:
            uint64_t v15 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 1, 1, v15);
            uint64_t v11 = 0;
            goto LABEL_25;
          }
          goto LABEL_9;
        }
      }
      int64_t v19 = v22;
LABEL_9:
      uint64_t v36 = v1[4];
      uint64_t v37 = v7;
      uint64_t v11 = (v21 - 1) & v21;
      unint64_t v12 = __clz(__rbit64(v21)) + (v19 << 6);
      int64_t v10 = v19;
      goto LABEL_5;
    }
    uint64_t v36 = v1[4];
    uint64_t v37 = v7;
    uint64_t v11 = (v9 - 1) & v9;
    unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_5:
    uint64_t v13 = v6;
    uint64_t v14 = *(void *)(v6 + 48);
    uint64_t v15 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = v14 + *(void *)(v16 + 72) * v12;
    uint64_t v6 = v13;
    sub_100CE144C(v17, (uint64_t)v5, type metadata accessor for CRLSpotlightManager.ChangeType);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v5, 0, 1, v15);
    int64_t v18 = v10;
    uint64_t v8 = v36;
    uint64_t v7 = v37;
LABEL_25:
    v1[2] = v6;
    v1[3] = v7;
    v1[4] = v8;
    v1[5] = v18;
    v1[6] = v11;
    type metadata accessor for CRLSpotlightManager.ChangeType(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v5, 1, v15) != 1)
    {
      sub_10051B3EC((uint64_t)v5, v35, &qword_1016920F8);
      return;
    }
    sub_100522F00((uint64_t)v5, &qword_1016920F8);
LABEL_27:
    unint64_t v24 = v1[1];
    unint64_t v25 = *(void *)(*v1 + 16);
    if (v24 == v25)
    {
      uint64_t v33 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v35, 1, 1, v33);
      return;
    }
    if (v24 >= v25) {
      break;
    }
    uint64_t v26 = *(void *)(*v1 + 8 * v24 + 32);
    v1[1] = v24 + 1;
    uint64_t v27 = -1 << *(unsigned char *)(v26 + 32);
    uint64_t v37 = ~v27;
    uint64_t v28 = -v27;
    if (v28 < 64) {
      uint64_t v29 = ~(-1 << v28);
    }
    else {
      uint64_t v29 = -1;
    }
    uint64_t v30 = v5;
    uint64_t v31 = v29 & *(void *)(v26 + 56);
    uint64_t v32 = v1[2];
    swift_bridgeObjectRetain();
    uint64_t v6 = v26;
    sub_100CE8F58(v32);
    v1[2] = v26;
    v1[3] = v26 + 56;
    v1[4] = v37;
    v1[5] = 0;
    v1[6] = v31;
    uint64_t v5 = v30;
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_100CD835C(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_100CD8420(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3._uint64_t countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    uint64_t v5 = a1;
    uint64_t v4 = (void *)a2;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = (void *)0xE000000000000000;
  }
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6._object = (void *)0x800000010127CB90;
  v6._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 8236;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v4;
  String.append(_:)(v8);
  v9._object = (void *)0x8000000101262BA0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = v5;
  v11._object = v4;
  String.append(_:)(v11);
  v12._object = (void *)0x800000010127CBB0;
  v12._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = 8236;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v5;
  v14._object = v4;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0x75755F7465737361;
  v15._object = (void *)0xEA00000000006469;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = v5;
  v17._object = v4;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0x7265727265666572;
  v18._object = (void *)0xED0000657079745FLL;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 8236;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = v5;
  v20._object = v4;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x800000010127B8B0;
  v21._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v21);
  return v5;
}

uint64_t sub_100CD8630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101699730);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v52 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  Swift::String v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v51 = (uint64_t)&v46 - v14;
  uint64_t v15 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v15 - 8, v16);
  Swift::String v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  __chkstk_darwin(v22, v23);
  uint64_t v26 = (char *)&v46 - v25;
  uint64_t result = a2 + 2;
  if (__OFADD__(a2, 2))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v50 = v24;
  uint64_t v28 = sub_10079E7F4(result, a1);
  if (!v29)
  {
    swift_release();
    return 0;
  }
  uint64_t v30 = v28;
  uint64_t result = a2 + 3;
  if (__OFADD__(a2, 3)) {
    goto LABEL_18;
  }
  uint64_t v31 = v29;
  uint64_t v48 = v30;
  unint64_t v49 = v12;
  sub_10079EB18(result, a1, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t *)&unk_101674520;
LABEL_8:
    sub_100522F00((uint64_t)v18, v32);
    return 0;
  }
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v47(v26, v18, v19);
  uint64_t v34 = swift_retain();
  Swift::String v18 = v52;
  sub_100510DEC(v34, a2, (uint64_t)v52);
  int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v18, 1, v7);
  uint64_t v36 = v19;
  if (v35 == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
    uint64_t v32 = &qword_101699730;
    goto LABEL_8;
  }
  uint64_t v37 = v51;
  sub_100CE12D8((uint64_t)v18, v51, type metadata accessor for CRLAssetReferrerIdentifier);
  uint64_t result = a2 + 5;
  if (!__OFADD__(a2, 5))
  {
    sqlite3_int64 v38 = sub_10079E4E8(result, a1);
    char v40 = v39;
    swift_release();
    if ((v40 & 1) == 0)
    {
      uint64_t v41 = v37;
      uint64_t v42 = (uint64_t)v49;
      sub_100CE12D8(v41, (uint64_t)v49, type metadata accessor for CRLAssetReferrerIdentifier);
      uint64_t v43 = v50;
      unint64_t v44 = (void (*)(uint64_t, uint64_t, uint64_t))v47;
      v47(v50, v26, v36);
      type metadata accessor for CRLAssetReferenceDatabaseRow(0);
      uint64_t v33 = swift_allocObject();
      sub_100CE12D8(v42, v33 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_referrerIdentifier, type metadata accessor for CRLAssetReferrerIdentifier);
      unint64_t v45 = (uint64_t *)(v33 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_referrerAssetName);
      *unint64_t v45 = v48;
      v45[1] = v31;
      v44(v33 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID, (uint64_t)v43, v36);
      *(void *)(v33 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_unsyncedChanges) = v38;
      return v33;
    }
    swift_bridgeObjectRelease();
    sub_100CE14B4(v37, type metadata accessor for CRLAssetReferrerIdentifier);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v36);
    return 0;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_100CD8B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v34[3] = type metadata accessor for CRLBoardDataStore(0);
  v34[4] = &off_1015282E8;
  v34[0] = a1;
  uint64_t v20 = OBJC_IVAR____TtC8Freeform29CRLBoardSyncLocalChangeRecord_boardData;
  *(void *)(a15 + OBJC_IVAR____TtC8Freeform29CRLBoardSyncLocalChangeRecord_boardData) = 0;
  sub_1005498A4((uint64_t)v34, a15 + OBJC_IVAR____TtC8Freeform29CRLBoardSyncLocalChangeRecord_persistenceContext);
  *(void *)(a15 + v20) = a10;
  swift_retain();
  swift_retain();
  swift_release();
  *(void *)(a15 + OBJC_IVAR____TtC8Freeform29CRLBoardSyncLocalChangeRecord_unsyncedChanges) = a11;
  *(void *)(a15 + OBJC_IVAR____TtC8Freeform29CRLBoardSyncLocalChangeRecord_unsyncedAssetUUIDs) = a14;
  swift_release();
  sub_100CE144C(a2, a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
  uint64_t v21 = a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_rootContainerUUID;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  unint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  v24(v21, a6, v22);
  v24(a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_alternateRootContainerUUID, a7, v22);
  *(_OWORD *)(a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_syncData) = xmmword_101190880;
  uint64_t v25 = (void *)(a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_minRequiredVersions);
  *uint64_t v25 = a3;
  v25[1] = a4;
  v25[2] = a5;
  *(unsigned char *)(a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_tombstoned) = a8;
  *(unsigned char *)(a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_hideFromRecentlyDeleted) = a9;
  uint64_t v26 = (void *)(a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_syncData);
  uint64_t v27 = *(void *)(a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_syncData);
  unint64_t v28 = *(void *)(a15 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_syncData + 8);
  *uint64_t v26 = a12;
  v26[1] = a13;
  sub_100514260(v27, v28);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v29(a7, v22);
  v29(a6, v22);
  sub_100CE14B4(a2, type metadata accessor for CRLBoardIdentifier);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v34);
  return a15;
}

double *sub_100CD8D98(unint64_t a1, char *a2)
{
  unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v6 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v8 = i - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 8 * i);
          swift_retain();
          uint64_t v8 = i - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        uint64_t v12 = v7;
        sub_100CA06B4(&v12, a2, &v11);
        if (v2)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return (double *)swift_bridgeObjectRelease();
        }
        swift_release();
        if (v11)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v8 == v4)
        {
          swift_bridgeObjectRelease();
          return (double *)v13;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

double *sub_100CD8F48(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v47 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      uint64_t v50 = a2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions;
      unint64_t v51 = a1 & 0xC000000000000001;
      swift_beginAccess();
      uint64_t v10 = 4;
      long long v43 = xmmword_10117E810;
      unint64_t v42 = (unint64_t)"rrentFocusedBoard %{public}@";
      unint64_t v48 = a1;
      uint64_t v49 = v9;
      while (1)
      {
        a2 = v10 - 4;
        if (v51)
        {
          uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v12 = v10 - 3;
          if (__OFADD__(a2, 1)) {
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v11 = *(void *)(a1 + 8 * v10);
          swift_retain();
          uint64_t v12 = v10 - 3;
          if (__OFADD__(a2, 1))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
        }
        uint64_t v13 = *(void *)v50;
        uint64_t v14 = v11 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
        if (*(void *)(*(void *)v50 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_1009563EC(v14);
          if (v16)
          {
            char v17 = *(unsigned char *)(*(void *)(*(void *)(v13 + 56) + 8 * v15) + 17);
            swift_bridgeObjectRelease();
            if (v17)
            {
              uint64_t v46 = v3;
              if (qword_10166FB70 != -1) {
                swift_once();
              }
              swift_beginAccess();
              id v44 = (id)static OS_os_log.boardStore;
              sub_1005057FC((uint64_t *)&unk_101672B40);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = v43;
              uint64_t v19 = (uint64_t *)(v14 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
              uint64_t v20 = *v19;
              uint64_t v21 = (void *)v19[1];
              uint64_t v22 = (void *)(v42 | 0x8000000000000000);
              if (*v19) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v21 == (void *)0xE000000000000000;
              }
              uint64_t v24 = 0xD000000000000012;
              if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                swift_bridgeObjectRetain();
                uint64_t v24 = v20;
                uint64_t v22 = v21;
              }
              uint64_t v45 = inited + 32;
              id v25 = v44;
              uint64_t v52 = UUID.uuidString.getter();
              uint64_t v53 = v26;
              v27._uint64_t countAndFlagsBits = 15418;
              v27._object = (void *)0xE200000000000000;
              String.append(_:)(v27);
              v28._uint64_t countAndFlagsBits = v24;
              v28._object = v22;
              String.append(_:)(v28);
              swift_bridgeObjectRelease();
              v29._uint64_t countAndFlagsBits = 62;
              v29._object = (void *)0xE100000000000000;
              String.append(_:)(v29);
              uint64_t v30 = v52;
              uint64_t v31 = v53;
              *(void *)(inited + 56) = &type metadata for String;
              *(void *)(inited + 64) = sub_100528BE4();
              *(void *)(inited + 32) = v30;
              *(void *)(inited + 40) = v31;
              uint64_t v32 = static os_log_type_t.default.getter();
              sub_100BAC898((uint64_t)v25, (uint64_t)&_mh_execute_header, v32, (uint64_t)"Excluding CKShare from unsynced changes. Board identifier: %{public}@", 69, 2, inited);
              swift_setDeallocating();
              sub_1005057FC(&qword_101672B50);
              swift_arrayDestroy();
              swift_release();

              uint64_t v3 = v46;
              a1 = v48;
              goto LABEL_5;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        unint64_t v33 = *(void *)(v11 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8);
        if (v33 >> 60 == 15) {
          goto LABEL_4;
        }
        uint64_t v34 = *(void *)(v11 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData);
        sub_10050BF48(0, &qword_101693260);
        sub_10050BF48(0, &qword_101672C00);
        sub_100510D4C(v34, v33);
        uint64_t v35 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
        sub_100514260(v34, v33);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return (double *)swift_bridgeObjectRelease();
        }
        a1 = v48;
        if (!v35)
        {
LABEL_4:
          swift_release();
        }
        else
        {
          uint64_t v36 = v14;
          uint64_t v37 = v47;
          sub_100CE144C(v36, v47, type metadata accessor for CRLBoardIdentifier);
          char v38 = *(unsigned char *)(v11 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareUnsyncedChanges);
          type metadata accessor for CRLBoardShareSyncLocalChangeRecord(0);
          uint64_t v39 = swift_allocObject();
          *(unsigned char *)(v39 + OBJC_IVAR____TtC8Freeform34CRLBoardShareSyncLocalChangeRecord_unsyncedChanges) = v38;
          sub_100CE12D8(v37, v39 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
          *(void *)(v39 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_ckShare) = v35;
          swift_release();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
LABEL_5:
        ++v10;
        if (v12 == v49)
        {
          swift_bridgeObjectRelease();
          return (double *)v54;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100CD94C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_1005057FC(&qword_10169A7C0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15, v16);
  Swift::String v18 = &v22[-v17];
  sub_100510D4C(*(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData), *(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData + 8));
  sub_100CDE0D8(&qword_101683BA8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
  CRDT.init(serializedData:)();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  sub_100CE12D8((uint64_t)v9, (uint64_t)v18, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_100CE144C(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_boardIdentifier, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
  sub_100CE12D8((uint64_t)v18, (uint64_t)v14, type metadata accessor for CRLUserBoardMetadataCRDTData);
  uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_minRequiredVersionForFullFidelity);
  swift_release();
  type metadata accessor for CRLUserBoardMetadataData();
  uint64_t v20 = swift_allocObject();
  sub_100CE12D8((uint64_t)v5, v20 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
  sub_100CE12D8((uint64_t)v14, v20 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, type metadata accessor for CRLUserBoardMetadataCRDTData);
  *(void *)(v20 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity) = v19;
  return v20;
}

double *sub_100CD97FC(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  unint64_t v48 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005057FC(&qword_10169A7C0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v40 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  uint64_t v39 = (uint64_t)&v38 - v19;
  unint64_t v57 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20)
    {
LABEL_3:
      unint64_t v46 = a1 & 0xC000000000000001;
      uint64_t v41 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      uint64_t v42 = v20;
      uint64_t v21 = 4;
      id v44 = v12;
      unint64_t v45 = a1;
      uint64_t v43 = v13;
      while (1)
      {
        uint64_t v14 = v21 - 4;
        if (v46)
        {
          uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v23 = v21 - 3;
          if (__OFADD__(v14, 1)) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 8 * v21);
          swift_retain();
          uint64_t v23 = v21 - 3;
          if (__OFADD__(v14, 1))
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        uint64_t v52 = v23;
        uint64_t v24 = *(void *)(v22 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData);
        unint64_t v25 = *(void *)(v22 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData + 8);
        swift_retain();
        sub_100510D4C(v24, v25);
        sub_100CDE0D8(&qword_101683BA8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
        CRDT.init(serializedData:)();
        uint64_t v53 = v21;
        if (v3)
        {
          swift_errorRelease();
          (*v41)(v12, 1, 1, v13);
          swift_release();
          sub_100522F00((uint64_t)v12, &qword_10169A7C0);
          uint64_t v26 = 0;
          uint64_t v49 = 0;
        }
        else
        {
          uint64_t v49 = 0;
          (*v41)(v12, 0, 1, v13);
          uint64_t v27 = v39;
          sub_100CE12D8((uint64_t)v12, v39, type metadata accessor for CRLUserBoardMetadataCRDTData);
          sub_100CE144C(v22 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_boardIdentifier, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
          uint64_t v28 = v40;
          sub_100CE12D8(v27, v40, type metadata accessor for CRLUserBoardMetadataCRDTData);
          uint64_t v29 = *(void *)(v22
                          + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_minRequiredVersionForFullFidelity);
          swift_release();
          type metadata accessor for CRLUserBoardMetadataData();
          uint64_t v26 = swift_allocObject();
          sub_100CE12D8((uint64_t)v8, v26 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
          sub_100CE12D8(v28, v26 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, type metadata accessor for CRLUserBoardMetadataCRDTData);
          *(void *)(v26 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity) = v29;
        }
        sub_100CE144C(v22 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_boardIdentifier, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
        uint64_t v50 = *(void *)(v22 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges);
        uint64_t v31 = *(void *)(v22 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData);
        unint64_t v30 = *(void *)(v22 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData + 8);
        uint64_t v51 = *(void *)(v22
                        + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_minRequiredVersionForFullFidelity);
        uint64_t v32 = v48;
        uint64_t v55 = ObjectType;
        uint64_t v56 = &off_1015282E8;
        *(void *)&long long v54 = v48;
        type metadata accessor for CRLUserBoardMetadataSyncLocalChangeRecord(0);
        uint64_t v33 = swift_allocObject();
        uint64_t v34 = OBJC_IVAR____TtC8Freeform41CRLUserBoardMetadataSyncLocalChangeRecord_boardMetadataData;
        *(void *)(v33 + OBJC_IVAR____TtC8Freeform41CRLUserBoardMetadataSyncLocalChangeRecord_boardMetadataData) = 0;
        sub_10053974C(&v54, v33 + OBJC_IVAR____TtC8Freeform41CRLUserBoardMetadataSyncLocalChangeRecord_persistenceContext);
        *(void *)(v33 + v34) = v26;
        id v35 = v32;
        sub_1005FA2A0(v31, v30);
        swift_retain();
        swift_release();
        *(void *)(v33 + OBJC_IVAR____TtC8Freeform41CRLUserBoardMetadataSyncLocalChangeRecord_unsyncedChanges) = v50;
        swift_release();
        sub_100CE12D8((uint64_t)v8, v33 + OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
        uint64_t v36 = (uint64_t *)(v33 + OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_syncData);
        *uint64_t v36 = v31;
        v36[1] = v30;
        *(void *)(v33 + OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_minRequiredVersionForFullFidelity) = v51;
        swift_release();

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v21 = v53 + 1;
        uint64_t v13 = v43;
        uint64_t v12 = v44;
        a1 = v45;
        uint64_t v3 = v49;
        if (v52 == v42)
        {
          swift_bridgeObjectRelease();
          return (double *)v57;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100CD9E14(uint64_t a1, void *a2)
{
  if (String.count.getter() < 1)
  {
    uint64_t v5 = 0;
    a2 = (void *)0xE000000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
    v4._uint64_t countAndFlagsBits = 46;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    uint64_t v5 = a1;
  }
  _StringGuts.grow(_:)(100);
  v6._uint64_t countAndFlagsBits = v5;
  v6._object = a2;
  String.append(_:)(v6);
  v7._object = (void *)0x8000000101262BA0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = v5;
  v9._object = a2;
  String.append(_:)(v9);
  v10._object = (void *)0xEA0000000000656DLL;
  v10._uint64_t countAndFlagsBits = 0x616E5F72656E776FLL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = v5;
  v12._object = a2;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = 0x656E6961746E6F63;
  v13._object = (void *)0xEE00646975755F72;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 8236;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = v5;
  v15._object = a2;
  String.append(_:)(v15);
  v16._object = (void *)0x800000010127B9A0;
  v16._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = v5;
  v18._object = a2;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 1635017060;
  v19._object = (void *)0xE400000000000000;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = v5;
  v21._object = a2;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v22._object = (void *)0xEA00000000006465;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = v5;
  v24._object = a2;
  String.append(_:)(v24);
  v25._object = (void *)0x800000010127B8B0;
  v25._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = v5;
  v27._object = a2;
  String.append(_:)(v27);
  v28._object = (void *)0x800000010127BD90;
  v28._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = v5;
  v30._object = a2;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 0x7461645F636E7973;
  v31._object = (void *)0xE900000000000061;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = 8236;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = v5;
  v33._object = a2;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v34._object = (void *)0xEE00657461645F65;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = v5;
  v36._object = a2;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v37._object = (void *)0x800000010127BDB0;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = 8236;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  v39._uint64_t countAndFlagsBits = v5;
  v39._object = a2;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = 0x5F65726168736B63;
  v40._object = (void *)0xEC00000061746164;
  String.append(_:)(v40);
  v41._uint64_t countAndFlagsBits = 8236;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  v42._uint64_t countAndFlagsBits = v5;
  v42._object = a2;
  String.append(_:)(v42);
  v43._uint64_t countAndFlagsBits = 0xD000000000000014;
  v43._object = (void *)0x800000010127BB50;
  String.append(_:)(v43);
  v44._uint64_t countAndFlagsBits = 8236;
  v44._object = (void *)0xE200000000000000;
  String.append(_:)(v44);
  v45._uint64_t countAndFlagsBits = v5;
  v45._object = a2;
  String.append(_:)(v45);
  v46._uint64_t countAndFlagsBits = 0xD000000000000012;
  v46._object = (void *)0x800000010127BDD0;
  String.append(_:)(v46);
  v47._uint64_t countAndFlagsBits = 8236;
  v47._object = (void *)0xE200000000000000;
  String.append(_:)(v47);
  v48._uint64_t countAndFlagsBits = v5;
  v48._object = a2;
  String.append(_:)(v48);
  v49._uint64_t countAndFlagsBits = 0x61637369645F7369;
  v49._object = (void *)0xEE00656C62616472;
  String.append(_:)(v49);
  v50._uint64_t countAndFlagsBits = 8236;
  v50._object = (void *)0xE200000000000000;
  String.append(_:)(v50);
  v51._uint64_t countAndFlagsBits = v5;
  v51._object = a2;
  String.append(_:)(v51);
  v52._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v52._object = (void *)0x800000010127BD60;
  String.append(_:)(v52);
  v53._uint64_t countAndFlagsBits = 8236;
  v53._object = (void *)0xE200000000000000;
  String.append(_:)(v53);
  v54._uint64_t countAndFlagsBits = v5;
  v54._object = a2;
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._uint64_t countAndFlagsBits = 0xD000000000000026;
  v55._object = (void *)0x800000010127B8D0;
  String.append(_:)(v55);
  return 0;
}

uint64_t sub_100CDA2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101674520);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  Swift::String v8 = &v109[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6, v9);
  Swift::String v11 = &v109[-v10];
  uint64_t v133 = type metadata accessor for UUID();
  Swift::String v12 = *(void **)(v133 - 8);
  uint64_t v14 = __chkstk_darwin(v133, v13);
  Swift::String v16 = &v109[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __chkstk_darwin(v14, v17);
  double v126 = &v109[-v19];
  uint64_t v21 = __chkstk_darwin(v18, v20);
  unint64_t v130 = &v109[-v22];
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v129 = &v109[-v25];
  uint64_t v27 = __chkstk_darwin(v24, v26);
  double v131 = &v109[-v28];
  __chkstk_darwin(v27, v29);
  double v132 = &v109[-v30];
  uint64_t v31 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v31 - 8, v32);
  Swift::String v34 = &v109[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v35 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v37 = __chkstk_darwin(v35 - 8, v36);
  uint64_t v127 = &v109[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v40 = __chkstk_darwin(v37, v39);
  unint64_t v128 = &v109[-v41];
  uint64_t v43 = __chkstk_darwin(v40, v42);
  Swift::String v45 = &v109[-v44];
  uint64_t v47 = __chkstk_darwin(v43, v46);
  Swift::String v49 = &v109[-v48];
  __chkstk_darwin(v47, v50);
  unint64_t v134 = &v109[-v51];
  Swift::String v52 = sub_10079BD64(a2, a1);
  if (v53 >> 60 == 15)
  {
    swift_release();
    return 0;
  }
  unint64_t v54 = v53;
  uint64_t v124 = v16;
  uint64_t v125 = v12;
  uint64_t v55 = (uint64_t)v52;
  sub_100510D4C((uint64_t)v52, v53);
  sub_100753724(v55, v54, (uint64_t)v34);
  uint64_t v123 = v55;
  sub_100CE12D8((uint64_t)v34, (uint64_t)v45, type metadata accessor for CRLBoardIdentifierStorage);
  sub_100CE12D8((uint64_t)v45, (uint64_t)v49, type metadata accessor for CRLBoardIdentifier);
  sub_100CE12D8((uint64_t)v49, (uint64_t)v134, type metadata accessor for CRLBoardIdentifier);
  uint64_t result = a2 + 12;
  if (__OFADD__(a2, 12))
  {
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sqlite3_int64 v57 = sub_10079E4E8(result, a1);
  if (v58)
  {
    sub_100514260(v123, v54);
    swift_release();
LABEL_7:
    sub_100CE14B4((uint64_t)v134, type metadata accessor for CRLBoardIdentifier);
    return 0;
  }
  uint64_t v59 = v57;
  sub_100C37AB4(0, v57, (uint64_t)&_mh_execute_header, (uint64_t)"init(row:columnOffsetIndex:)", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 10766, (uint64_t)&type metadata for UInt64, &qword_101699630);
  sub_10079EB18(a2 + 2, a1, (uint64_t)v11);
  unint64_t v60 = v125;
  uint64_t v61 = v133;
  uint64_t v122 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t))v125[6];
  int v62 = v122(v11, 1, v133);
  if (v62 == 1)
  {
    swift_release();
    sub_100514260(v123, v54);
    sub_100CE14B4((uint64_t)v134, type metadata accessor for CRLBoardIdentifier);
    uint64_t v63 = (uint64_t)v11;
LABEL_10:
    sub_100522F00(v63, (uint64_t *)&unk_101674520);
    return 0;
  }
  Swift::Int v65 = v11;
  uint64_t v66 = (void (*)(unsigned char *, unsigned char *, uint64_t))v60[4];
  v66(v132, v65, v61);
  sub_10079EB18(a2 + 3, a1, (uint64_t)v8);
  int v67 = v122(v8, 1, v61);
  uint64_t v68 = v125;
  if (v67 == 1)
  {
    swift_release();
    sub_100514260(v123, v54);
    ((void (*)(unsigned char *, uint64_t))v68[1])(v132, v61);
    sub_100CE14B4((uint64_t)v134, type metadata accessor for CRLBoardIdentifier);
    uint64_t v63 = (uint64_t)v8;
    goto LABEL_10;
  }
  uint64_t v69 = v131;
  v66(v131, v8, v61);
  uint64_t v70 = sub_10079BD64(a2 + 4, a1);
  unint64_t v72 = v71;
  char v73 = sub_10079E3B4(a2 + 5, a1);
  if (v73 == 2
    || (char v74 = v73, v75 = sub_10079E4E8(a2 + 6, a1), (v76 & 1) != 0)
    || (uint64_t v77 = v75, v78 = sub_10079E3B4(a2 + 7, a1), v78 == 2))
  {
    sub_100514260((uint64_t)v70, v72);
    swift_release();
    sub_100514260(v123, v54);
    uint64_t v79 = (void (*)(unsigned char *, uint64_t))v125[1];
    v79(v69, v61);
    BOOL v80 = v132;
    uint64_t v81 = v61;
LABEL_19:
    v79(v80, v81);
    goto LABEL_7;
  }
  LODWORD(v122) = v78;
  unint64_t v82 = sub_10079BD64(a2 + 8, a1);
  unint64_t v84 = v83;
  uint64_t v85 = sub_10079E66C(a2 + 9, a1);
  if ((v86 & 1) != 0 || (double v121 = *(double *)&v85, v120 = sub_10079E3B4(a2 + 10, a1), v120 == 2))
  {
    sub_100514260((uint64_t)v70, v72);
    uint64_t v87 = v82;
    unint64_t v88 = v84;
LABEL_33:
    sub_100514260((uint64_t)v87, v88);
    swift_release();
    sub_100514260(v123, v54);
    uint64_t v79 = (void (*)(unsigned char *, uint64_t))v125[1];
    uint64_t v108 = v133;
    v79(v131, v133);
    BOOL v80 = v132;
    uint64_t v81 = v108;
    goto LABEL_19;
  }
  uint64_t v113 = v77;
  uint64_t v117 = v82;
  unint64_t v119 = v84;
  uint64_t v116 = v70;
  unint64_t v118 = v72;
  uint64_t v114 = sub_10079BD64(a2 + 11, a1);
  uint64_t v115 = v89;
  uint64_t result = a2 + 13;
  if (__OFADD__(a2, 13)) {
    goto LABEL_35;
  }
  uint64_t v90 = sub_10079E66C(result, a1);
  if (v91)
  {
LABEL_32:
    sub_100514260((uint64_t)v116, v118);
    sub_100514260((uint64_t)v117, v119);
    uint64_t v87 = v114;
    unint64_t v88 = v115;
    goto LABEL_33;
  }
  double v92 = *(double *)&v90;
  uint64_t result = a2 + 14;
  if (__OFADD__(a2, 14))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  char v93 = sub_10079E3B4(result, a1);
  if (v93 == 2) {
    goto LABEL_32;
  }
  char v94 = v93;
  uint64_t result = a2 + 15;
  if (__OFADD__(a2, 15))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  sqlite3_int64 v112 = sub_10079E4E8(result, a1);
  if (v95) {
    goto LABEL_32;
  }
  uint64_t result = a2 + 16;
  if (!__OFADD__(a2, 16))
  {
    sqlite3_int64 v111 = sub_10079E4E8(result, a1);
    if ((v96 & 1) == 0)
    {
      double v97 = v121;
      double v98 = v92;
      int v110 = v94 & 1;
      v120 &= 1u;
      LODWORD(v121) = v122 & 1;
      LODWORD(v122) = v74 & 1;
      uint64_t v99 = v128;
      sub_100CE144C((uint64_t)v134, (uint64_t)v128, type metadata accessor for CRLBoardIdentifier);
      int v100 = v125;
      uint64_t v101 = (void (*)(unsigned char *, unsigned char *, uint64_t))v125[2];
      uint64_t v102 = v129;
      uint64_t v103 = v133;
      v101(v129, v132, v133);
      v101(v130, v131, v103);
      sub_100CE144C((uint64_t)v99, (uint64_t)v127, type metadata accessor for CRLBoardIdentifier);
      uint64_t v104 = (uint64_t)v126;
      v101(v126, v102, v103);
      uint64_t v105 = (uint64_t)v124;
      uint64_t v106 = v130;
      v101(v124, v130, v103);
      type metadata accessor for CRLBoardDatabaseRow();
      swift_allocObject();
      uint64_t v64 = sub_100BA40A8((uint64_t)v127, v59, v112, v111, v104, v105, (uint64_t)v116, v118, v97, v98, (char)v122, v113, SLOBYTE(v121), (uint64_t)v117, v119, v120, (uint64_t)v114, v115, v110);
      uint64_t v107 = (void (*)(unsigned char *, uint64_t))v100[1];
      v107(v106, v103);
      v107(v129, v103);
      sub_100CE14B4((uint64_t)v128, type metadata accessor for CRLBoardIdentifier);
      swift_release();
      sub_100514260(v123, v54);
      v107(v131, v103);
      v107(v132, v103);
      sub_100CE14B4((uint64_t)v134, type metadata accessor for CRLBoardIdentifier);
      return v64;
    }
    goto LABEL_32;
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_100CDAD88(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData + 8);
  if (v1 >> 60 != 15)
  {
    uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData);
    uint64_t v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
    uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
    sub_100510D4C(v3, v1);
    sub_100C37AB4(0, v5, (uint64_t)&_mh_execute_header, (uint64_t)"createItemData(from:)", 21, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 11030, (uint64_t)&type metadata for UInt64, &qword_101699630);
    uint64_t v6 = sub_1008E0E9C(*(void *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue));
    char v8 = v7;
    if ((v7 & 0x100) != 0)
    {
      if (qword_10166FB70 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v18 = (void *)static OS_os_log.boardStore;
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      id v20 = v18;
      uint64_t v21 = String.init<A>(describing:)();
      uint64_t v23 = v22;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v21;
      *(void *)(inited + 40) = v23;
      uint64_t v24 = static os_log_type_t.error.getter();
      sub_100BAC898((uint64_t)v20, (uint64_t)&_mh_execute_header, v24, (uint64_t)"Database record has invalid board item type: %@", 47, 2, inited);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      swift_arrayDestroy();
    }
    else
    {
      uint64_t v9 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData);
      unint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData + 8);
      if (v10 >> 60 != 15)
      {
        uint64_t v11 = *v9;
        uint64_t v12 = *v4;
        uint64_t v13 = v4[1];
        uint64_t v14 = v4[2];
        uint64_t v15 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions);
        sub_100510D4C(*v9, v10);
        Swift::String v16 = sub_1009F10B0(v6, v8 & 1, v12, v13, v14, v15, v3, v1, v11, v10);
        sub_100514260(v11, v10);
        sub_100514260(v3, v1);
        return v16;
      }
    }
    sub_100514260(v3, v1);
  }
  return 0;
}

uint64_t sub_100CDB044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v37 = a2;
  uint64_t v38 = a8;
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v42 = a3;
  int v41 = a10;
  uint64_t v39 = a14;
  uint64_t v40 = a13;
  uint64_t v35 = a12;
  uint64_t v36 = a15;
  uint64_t v17 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v17 - 8, v18);
  id v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v21 - 8, v22);
  uint64_t v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[3] = type metadata accessor for CRLBoardDataStore(0);
  v47[4] = &off_1015282E8;
  v47[0] = a1;
  uint64_t v30 = OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData;
  *(void *)(a16 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData) = 0;
  sub_1005498A4((uint64_t)v47, a16 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_persistenceContext);
  *(void *)(a16 + v30) = a11;
  swift_retain();
  swift_retain();
  swift_release();
  *(void *)(a16 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_unsyncedChanges) = v35;
  *(void *)(a16 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_unsyncedAssetUUIDs) = v36;
  swift_release();
  uint64_t v31 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v37, v25);
  uint64_t v32 = v38;
  sub_100522E9C(v38, (uint64_t)v24, (uint64_t *)&unk_101674520);
  sub_100CE144C(a9, (uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
  uint64_t v33 = sub_100EB398C((uint64_t)v29, v42, v43, v44, v45, v46, (uint64_t)v24, (uint64_t)v20, v41, v40, v39);
  sub_100CE14B4(a9, type metadata accessor for CRLBoardIdentifier);
  sub_100522F00(v32, (uint64_t *)&unk_101674520);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v31, v25);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v47);
  return v33;
}

double *sub_100CDB344(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v56 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v54 = (uint64_t)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v76 = (uint64_t)v46 - v10;
  uint64_t v11 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v53 = (uint64_t)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v75 = (uint64_t)v46 - v16;
  uint64_t v77 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v77 - 8);
  __chkstk_darwin(v77, v18);
  char v74 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20)
    {
LABEL_3:
      v46[1] = v3;
      unint64_t v59 = a1 & 0xC000000000000001;
      id v58 = self;
      CFStringRef v57 = @"CRLImageItemsUseUnsupportedMinVersionUserDefault";
      uint64_t v50 = (void (**)(char *, uint64_t, uint64_t))(v17 + 16);
      Swift::String v49 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
      uint64_t v48 = (void (**)(char *, uint64_t))(v17 + 8);
      uint64_t v3 = 4;
      long long v47 = xmmword_101190880;
      unint64_t v52 = a1;
      uint64_t v51 = v20;
      while (1)
      {
        uint64_t v21 = v3 - 4;
        if (v59)
        {
          uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v22 = v3 - 3;
          if (__OFADD__(v21, 1)) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 8 * v3);
          swift_retain();
          uint64_t v22 = v3 - 3;
          if (__OFADD__(v21, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        id v23 = [v58 standardUserDefaults];
        unsigned int v24 = [v23 BOOLForKey:v57];

        if (v24 && *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue) == 5)
        {
          swift_release();
        }
        else
        {
          uint64_t v72 = v3;
          uint64_t v73 = v22;
          uint64_t v64 = *v50;
          v64(v74, v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemUUID, v77);
          long long v70 = *(_OWORD *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
          uint64_t v69 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions);
          uint64_t v67 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions + 16);
          uint64_t v68 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue);
          uint64_t v25 = v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID;
          swift_beginAccess();
          sub_100522E9C(v25, v75, (uint64_t *)&unk_101674520);
          uint64_t v63 = type metadata accessor for CRLBoardIdentifier;
          sub_100CE144C(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier, v76, type metadata accessor for CRLBoardIdentifier);
          int v71 = *(unsigned __int8 *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_isLocalTombstone);
          id v26 = v56;
          uint64_t v27 = swift_retain();
          uint64_t v28 = sub_100CDAD88(v27);
          Swift::Int v65 = v28;
          uint64_t v60 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges);
          unint64_t v30 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData + 8);
          uint64_t v62 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
          uint64_t v29 = v62;
          unint64_t v61 = v30;
          type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
          uint64_t v31 = swift_allocObject();
          v78[3] = ObjectType;
          v78[4] = &off_1015282E8;
          v78[0] = v26;
          uint64_t v32 = OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData;
          *(void *)(v31 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData) = 0;
          sub_1005498A4((uint64_t)v78, v31 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_persistenceContext);
          *(void *)(v31 + v32) = v28;
          id v66 = v26;
          sub_1005FA2A0(v29, v30);
          swift_retain();
          swift_retain();
          swift_release();
          *(void *)(v31 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_unsyncedChanges) = v60;
          *(void *)(v31 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_unsyncedAssetUUIDs) = &_swiftEmptySetSingleton;
          swift_release();
          uint64_t v33 = v74;
          uint64_t v34 = v77;
          v64((char *)(v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id), (uint64_t)v74, v77);
          uint64_t v35 = v75;
          uint64_t v36 = v53;
          sub_100522E9C(v75, v53, (uint64_t *)&unk_101674520);
          uint64_t v37 = v76;
          uint64_t v38 = v54;
          sub_100CE144C(v76, v54, v63);
          uint64_t v39 = v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID;
          (*v49)(v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID, 1, 1, v34);
          *(_OWORD *)(v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData) = v47;
          uint64_t v40 = v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_minRequiredVersions;
          *(_OWORD *)uint64_t v40 = v70;
          *(void *)(v40 + 16) = v67;
          *(void *)(v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_objectOptions) = v69;
          *(void *)(v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_itemTypeValue) = v68;
          swift_beginAccess();
          sub_1006063BC(v36, v39, (uint64_t *)&unk_101674520);
          swift_endAccess();
          sub_100CE12D8(v38, v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
          *(unsigned char *)(v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_tombstoned) = v71;
          int v41 = (uint64_t *)(v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData);
          uint64_t v42 = *(void *)(v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData);
          unint64_t v43 = *(void *)(v31 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData + 8);
          unint64_t v44 = v61;
          *int v41 = v62;
          v41[1] = v44;
          sub_100514260(v42, v43);
          sub_100CE14B4(v37, type metadata accessor for CRLBoardIdentifier);
          sub_100522F00(v35, (uint64_t *)&unk_101674520);
          (*v48)(v33, v77);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v78);

          swift_release_n();
          swift_release();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          a1 = v52;
          uint64_t v20 = v51;
          uint64_t v3 = v72;
          uint64_t v22 = v73;
        }
        ++v3;
        if (v22 == v20)
        {
          swift_bridgeObjectRelease();
          return (double *)v79;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

double *sub_100CDBB74(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v55 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v53 = (uint64_t)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v72 = (uint64_t)v44 - v10;
  uint64_t v11 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v52 = (uint64_t)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v71 = (uint64_t)v44 - v16;
  uint64_t v73 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v73 - 8);
  __chkstk_darwin(v73, v18);
  long long v70 = (char *)v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v75 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20)
    {
LABEL_3:
      v44[1] = v3;
      unint64_t v51 = a1 & 0xC000000000000001;
      uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v17 + 16);
      long long v47 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
      uint64_t v46 = (void (**)(char *, uint64_t))(v17 + 8);
      uint64_t v3 = 4;
      long long v45 = xmmword_101190880;
      unint64_t v50 = a1;
      uint64_t v49 = v20;
      while (1)
      {
        uint64_t v21 = v3 - 4;
        if (v51)
        {
          uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v22 = v3 - 3;
          if (__OFADD__(v21, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 8 * v3);
          swift_retain();
          uint64_t v22 = v3 - 3;
          if (__OFADD__(v21, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        uint64_t v68 = v22;
        uint64_t v69 = v3;
        uint64_t v60 = *v48;
        v60(v70, v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemUUID, v73);
        long long v66 = *(_OWORD *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
        uint64_t v65 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions);
        uint64_t v63 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions + 16);
        uint64_t v64 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue);
        uint64_t v23 = v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID;
        swift_beginAccess();
        sub_100522E9C(v23, v71, (uint64_t *)&unk_101674520);
        unint64_t v59 = type metadata accessor for CRLBoardIdentifier;
        sub_100CE144C(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier, v72, type metadata accessor for CRLBoardIdentifier);
        int v67 = *(unsigned __int8 *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_isLocalTombstone);
        id v24 = v55;
        uint64_t v25 = swift_retain();
        id v26 = sub_100CDAD88(v25);
        unint64_t v61 = v26;
        uint64_t v56 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges);
        unint64_t v28 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData + 8);
        uint64_t v58 = *(void *)(v17 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
        uint64_t v27 = v58;
        unint64_t v57 = v28;
        type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
        uint64_t v29 = swift_allocObject();
        v74[3] = ObjectType;
        v74[4] = &off_1015282E8;
        v74[0] = v24;
        uint64_t v30 = OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData;
        *(void *)(v29 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData) = 0;
        sub_1005498A4((uint64_t)v74, v29 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_persistenceContext);
        *(void *)(v29 + v30) = v26;
        id v62 = v24;
        sub_1005FA2A0(v27, v28);
        swift_retain();
        swift_retain();
        swift_release();
        *(void *)(v29 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_unsyncedChanges) = v56;
        *(void *)(v29 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_unsyncedAssetUUIDs) = &_swiftEmptySetSingleton;
        swift_release();
        uint64_t v31 = v70;
        uint64_t v32 = v73;
        v60((char *)(v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id), (uint64_t)v70, v73);
        uint64_t v33 = v71;
        uint64_t v34 = v52;
        sub_100522E9C(v71, v52, (uint64_t *)&unk_101674520);
        uint64_t v35 = v72;
        uint64_t v36 = v53;
        sub_100CE144C(v72, v53, v59);
        uint64_t v37 = v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID;
        (*v47)(v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID, 1, 1, v32);
        *(_OWORD *)(v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData) = v45;
        uint64_t v38 = v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_minRequiredVersions;
        *(_OWORD *)uint64_t v38 = v66;
        *(void *)(v38 + 16) = v63;
        *(void *)(v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_objectOptions) = v65;
        *(void *)(v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_itemTypeValue) = v64;
        swift_beginAccess();
        sub_1006063BC(v34, v37, (uint64_t *)&unk_101674520);
        swift_endAccess();
        sub_100CE12D8(v36, v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
        *(unsigned char *)(v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_tombstoned) = v67;
        uint64_t v39 = (uint64_t *)(v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData);
        uint64_t v40 = *(void *)(v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData);
        unint64_t v41 = *(void *)(v29 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData + 8);
        unint64_t v42 = v57;
        *uint64_t v39 = v58;
        v39[1] = v42;
        sub_100514260(v40, v41);
        sub_100CE14B4(v35, type metadata accessor for CRLBoardIdentifier);
        sub_100522F00(v33, (uint64_t *)&unk_101674520);
        (*v46)(v31, v73);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v74);

        swift_release_n();
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v3 = v69 + 1;
        a1 = v50;
        if (v68 == v49)
        {
          swift_bridgeObjectRelease();
          return (double *)v75;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100CDC31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v30[3] = type metadata accessor for CRLBoardDataStore(0);
  v30[4] = &off_1015282E8;
  v30[0] = a1;
  uint64_t v16 = a12 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_ckMergeableRecordValueData;
  *(_OWORD *)uint64_t v16 = xmmword_101190880;
  sub_1005498A4((uint64_t)v30, a12 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_persistenceContext);
  uint64_t v17 = (uint64_t *)(a12 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_bucketData);
  *uint64_t v17 = a4;
  v17[1] = a5;
  uint64_t v19 = *(void *)v16;
  unint64_t v18 = *(void *)(v16 + 8);
  *(void *)uint64_t v16 = a8;
  *(void *)(v16 + 8) = a9;
  swift_retain();
  sub_100510D4C(a4, a5);
  sub_1005FA2A0(a8, a9);
  sub_100514260(v19, v18);
  *(void *)(a12 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_unsyncedChanges) = a11;
  uint64_t v20 = a12 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions;
  long long v21 = *(_OWORD *)(a10 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)a10;
  *(_OWORD *)(v20 + 16) = v21;
  *(void *)(v20 + 32) = *(void *)(a10 + 32);
  swift_release();
  sub_100CE144C(a3, a12 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
  *(_OWORD *)(a12 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_syncData) = xmmword_101190880;
  *(void *)(a12 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex) = a2;
  uint64_t v22 = (void *)(a12 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_syncData);
  uint64_t v23 = *(void *)(a12 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_syncData);
  unint64_t v24 = *(void *)(a12 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_syncData + 8);
  *uint64_t v22 = a6;
  v22[1] = a7;
  sub_100514260(v23, v24);
  sub_100CE14B4(a3, type metadata accessor for CRLBoardIdentifier);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v30);
  return a12;
}

double *sub_100CDC4EC(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))
{
  unint64_t v17 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v8 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v10 = i - 3;
          if (__OFADD__(v8, 1)) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a1 + 8 * i);
          swift_retain();
          uint64_t v10 = i - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        uint64_t v16 = v9;
        a4(&v15, &v16, a2, a3);
        if (v4)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return (double *)swift_bridgeObjectRelease();
        }
        swift_release();
        if (v15)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v10 == v6)
        {
          swift_bridgeObjectRelease();
          return (double *)v17;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

double *sub_100CDC6A8(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v36 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v50 = (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v52 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v31 = v3;
      unint64_t v34 = a1 & 0xC000000000000001;
      uint64_t v9 = 4;
      long long v49 = xmmword_101190880;
      unint64_t v33 = a1;
      uint64_t v32 = v8;
      while (1)
      {
        uint64_t v3 = v9 - 4;
        if (v34)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v11 = v9 - 3;
          if (__OFADD__(v3, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v10 = *(void *)(a1 + 8 * v9);
          swift_retain();
          uint64_t v11 = v9 - 3;
          if (__OFADD__(v3, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        uint64_t v47 = v11;
        uint64_t v48 = v9;
        uint64_t v46 = *(void *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
        long long v45 = type metadata accessor for CRLBoardIdentifier;
        sub_100CE144C(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, v50, type metadata accessor for CRLBoardIdentifier);
        uint64_t v13 = *(void *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
        unint64_t v12 = *(void *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8);
        unint64_t v14 = *(void *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
        uint64_t v40 = *(void *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
        uint64_t v15 = *(void *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
        unint64_t v16 = *(void *)(v10
                        + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                        + 8);
        long long v17 = *(_OWORD *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
        long long v43 = *(_OWORD *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 16);
        long long v44 = v17;
        uint64_t v42 = *(void *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 32);
        uint64_t v41 = *(void *)(v10 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges);
        type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
        uint64_t v18 = swift_allocObject();
        v51[3] = ObjectType;
        v51[4] = &off_1015282E8;
        uint64_t v19 = v36;
        v51[0] = v36;
        uint64_t v20 = (uint64_t *)(v18
                        + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_ckMergeableRecordValueData);
        *(_OWORD *)(v18
                  + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_ckMergeableRecordValueData) = v49;
        sub_1005498A4((uint64_t)v51, v18 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_persistenceContext);
        long long v21 = (uint64_t *)(v18 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_bucketData);
        *long long v21 = v13;
        v21[1] = v12;
        uint64_t v38 = *v20;
        unint64_t v37 = v20[1];
        *uint64_t v20 = v15;
        v20[1] = v16;
        id v22 = v19;
        sub_100510D4C(v13, v12);
        sub_1005FA2A0(v15, v16);
        id v39 = v22;
        sub_100510D4C(v13, v12);
        sub_1005FA2A0(v15, v16);
        swift_retain();
        uint64_t v23 = v40;
        sub_1005FA2A0(v40, v14);
        swift_retain();
        sub_100514260(v38, v37);
        *(void *)(v18 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_unsyncedChanges) = v41;
        uint64_t v24 = v18 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions;
        long long v25 = v43;
        *(_OWORD *)uint64_t v24 = v44;
        *(_OWORD *)(v24 + 16) = v25;
        *(void *)(v24 + 32) = v42;
        swift_release();
        uint64_t v26 = v50;
        sub_100CE144C(v50, v18 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier, v45);
        uint64_t v27 = v18 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_syncData;
        *(_OWORD *)uint64_t v27 = v49;
        *(void *)(v18 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex) = v46;
        uint64_t v28 = *(void *)v27;
        unint64_t v29 = *(void *)(v27 + 8);
        *(void *)uint64_t v27 = v23;
        *(void *)(v27 + 8) = v14;
        sub_100514260(v28, v29);
        sub_100CE14B4(v26, type metadata accessor for CRLBoardIdentifier);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v51);
        sub_100514260(v15, v16);
        sub_100510084(v13, v12);

        swift_release_n();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v9 = v48 + 1;
        a1 = v33;
        if (v47 == v32)
        {
          swift_bridgeObjectRelease();
          return (double *)v52;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100CDCB64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v31 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v30 = (char *)v24 - v8;
  uint64_t v9 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v9 - 8, v10);
  unint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v32 = Set.init(minimumCapacity:)();
  if (v13)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v14 = v3 + 16;
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v17 = *(void *)(v14 + 56);
    unint64_t v18 = v14 + 40;
    uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v28 = v15;
    long long v25 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v26 = v17;
    uint64_t v29 = v14;
    uint64_t v19 = (void (**)(uint64_t, uint64_t))(v14 - 8);
    v24[1] = v18 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v21 = (uint64_t)v30;
    uint64_t v20 = v31;
    while (1)
    {
      v28(v12, v16, v2);
      id v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v18;
      (*(void (**)(char *, void, uint64_t, uint64_t))v18)(v12, 0, 1, v2);
      if ((*v27)(v12, 1, v2) == 1) {
        break;
      }
      (*v25)(v20, v12, v2);
      sub_100CB4BC8(v21, v20);
      (*v19)(v21, v2);
      v16 += v26;
      if (!--v13) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    id v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v22(v12, 1, 1, v2);
  }
  return v32;
}

uint64_t sub_100CDCE0C(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CRLBoardItem(0);
  sub_100CDE0D8((unint64_t *)&qword_101676C20, (void (*)(uint64_t))type metadata accessor for CRLBoardItem);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100CBC418(&v9, v6, (void (*)(void))type metadata accessor for CRLBoardItem, &qword_101671328, (void (*)(void))type metadata accessor for CRLBoardItem);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        sub_100CBC418(&v9, v8, (void (*)(void))type metadata accessor for CRLBoardItem, &qword_101671328, (void (*)(void))type metadata accessor for CRLBoardItem);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100CDCFF0(unint64_t a1)
{
  return sub_100CDD014(a1, (unint64_t *)&qword_101678790, (uint64_t)off_1014C0D98, (unint64_t *)&qword_10167BE30, (uint64_t *)&unk_1016710F0);
}

uint64_t sub_100CDD014(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t v10 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_10050BF48(0, a2);
  sub_10062E0F4(a4, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v18 = result;
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v12) {
      return v18;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v12) {
      return v18;
    }
  }
  if (v12 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v14 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100CBAB1C(&v17, v14, a2, a3, a5);
      }
    }
    else
    {
      uint64_t v15 = (void **)(a1 + 32);
      do
      {
        uint64_t v16 = *v15++;
        sub_100CBAB1C(&v17, v16, a2, a3, a5);

        --v12;
      }
      while (v12);
    }
    return v18;
  }
  __break(1u);
  return result;
}

uint64_t sub_100CDD1B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100CE72A0();
  uint64_t v3 = Set.init(minimumCapacity:)();
  if (!v2) {
    return v3;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 32;
  while (1)
  {
    sub_10052E538(v5 + 48 * v4, (uint64_t)v25);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    AnyHashable.hash(into:)();
    Hasher._combine(_:)(v26);
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v3 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      uint64_t v15 = ~v13;
      while (1)
      {
        sub_10052E538(*(void *)(v3 + 48) + 48 * v14, (uint64_t)v23);
        if ((static AnyHashable.== infix(_:_:)() & 1) != 0 && v24 == v26) {
          break;
        }
        sub_10058EF74((uint64_t)v23);
        unint64_t v14 = (v14 + 1) & v15;
        if (((*(void *)(v3 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          goto LABEL_14;
        }
      }
      sub_10058EF74((uint64_t)v23);
      goto LABEL_7;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10052E538((uint64_t)v25, (uint64_t)v21);
    if (*(void *)(v3 + 24) > *(void *)(v3 + 16))
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100CCD4F4();
      }
      goto LABEL_5;
    }
    if (isUniquelyReferenced_nonNull_native) {
      sub_100CBF484();
    }
    else {
      sub_100CD0A20();
    }
    Hasher.init(_seed:)();
    AnyHashable.hash(into:)();
    Hasher._combine(_:)(v22[1]);
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v14 = v17 & ~v18;
    if ((*(void *)(v3 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14)) {
      break;
    }
LABEL_5:
    *(void *)(v3 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v14;
    uint64_t v6 = (_OWORD *)(*(void *)(v3 + 48) + 48 * v14);
    long long v7 = v21[0];
    long long v8 = *(_OWORD *)v22;
    v6[1] = v21[1];
    void v6[2] = v8;
    *uint64_t v6 = v7;
    uint64_t v9 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10)
    {
      __break(1u);
      goto LABEL_26;
    }
    *(void *)(v3 + 16) = v11;
LABEL_7:
    swift_bridgeObjectRelease();
    ++v4;
    sub_10058EF74((uint64_t)v25);
    if (v4 == v2) {
      return v3;
    }
  }
  uint64_t v19 = ~v18;
  while (1)
  {
    sub_10052E538(*(void *)(v3 + 48) + 48 * v14, (uint64_t)v23);
    if ((static AnyHashable.== infix(_:_:)() & 1) != 0 && v24 == v22[1]) {
      break;
    }
    sub_10058EF74((uint64_t)v23);
    unint64_t v14 = (v14 + 1) & v19;
    if (((*(void *)(v3 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
      goto LABEL_5;
    }
  }
LABEL_26:
  sub_10058EF74((uint64_t)v23);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100CDD4A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1007791AC();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_100CB8364(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_100CDD514(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  BOOL v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_100CDE0D8((unint64_t *)&qword_10169B5A0, (void (*)(uint64_t))type metadata accessor for CRLBoardLibraryViewModel.Item);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v16 = result;
  if (v11)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_100CE144C(v13, (uint64_t)v7, type metadata accessor for CRLBoardLibraryViewModel.Item);
      sub_100CB8484((uint64_t)v10, (uint64_t)v7);
      sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardLibraryViewModel.Item);
      v13 += v14;
      --v11;
    }
    while (v11);
    return v16;
  }
  return result;
}

uint64_t sub_100CDD6A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  BOOL v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_100CDE0D8(&qword_101699640, (void (*)(uint64_t))type metadata accessor for CRLBoardPreviewImageCache.Item);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v16 = result;
  if (v11)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_100CE144C(v13, (uint64_t)v6, type metadata accessor for CRLBoardPreviewImageCache.Item);
      sub_100CB93E4((uint64_t)v10, (uint64_t)v6);
      sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardPreviewImageCache.Item);
      v13 += v14;
      --v11;
    }
    while (v11);
    return v16;
  }
  return result;
}

uint64_t sub_100CDD834(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CRLiOSMiniFormatterBuilder();
  sub_100CDE0D8(&qword_1016888A0, (void (*)(uint64_t))type metadata accessor for CRLiOSMiniFormatterBuilder);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100CBC418(&v9, v6, (void (*)(void))type metadata accessor for CRLiOSMiniFormatterBuilder, &qword_101699998, (void (*)(void))type metadata accessor for CRLiOSMiniFormatterBuilder);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        sub_100CBC418(&v9, v8, (void (*)(void))type metadata accessor for CRLiOSMiniFormatterBuilder, &qword_101699998, (void (*)(void))type metadata accessor for CRLiOSMiniFormatterBuilder);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100CDDA18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  id v9 = (char *)&v40 - v8;
  uint64_t v10 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v41 = (uint64_t)&v40 - v17;
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v40 - v20;
  uint64_t v22 = *(void *)(a1 + 16);
  sub_100CDE0D8(&qword_1016999A8, (void (*)(uint64_t))type metadata accessor for CRLBoardIdentifierAndValue);
  uint64_t v46 = v10;
  uint64_t v23 = Set.init(minimumCapacity:)();
  uint64_t v43 = v22;
  if (v22)
  {
    uint64_t v24 = 0;
    uint64_t v42 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v48 = *(void *)(v11 + 72);
    do
    {
      sub_100CE144C(v42 + v48 * v24, (uint64_t)v21, type metadata accessor for CRLBoardIdentifierAndValue);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100CDE0D8((unint64_t *)&qword_1016770E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_bridgeObjectRetain();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v47 = type metadata accessor for CRLBoardIdentifierStorage(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(int *)(v46 + 20);
      Hasher._combine(_:)(v21[v45]);
      Swift::Int v27 = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v23 + 32);
      unint64_t v29 = v27 & ~v28;
      uint64_t v30 = *(void *)(v23 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29;
      uint64_t v44 = v24;
      if ((v30 & 1) == 0)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v26 = v41;
        sub_100CE144C((uint64_t)v21, v41, type metadata accessor for CRLBoardIdentifierAndValue);
        uint64_t v49 = v23;
        sub_100CCA42C(v26, v29, isUniquelyReferenced_nonNull_native);
        uint64_t v23 = v49;
        goto LABEL_4;
      }
      uint64_t v31 = ~v28;
      while (1)
      {
        sub_100CE144C(*(void *)(v23 + 48) + v29 * v48, (uint64_t)v14, type metadata accessor for CRLBoardIdentifierAndValue);
        char v32 = static UUID.== infix(_:_:)();
        sub_100CE144C((uint64_t)v14, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
        sub_100CE144C((uint64_t)v21, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
        if ((v32 & 1) == 0)
        {
          sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
          sub_100CE14B4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
          goto LABEL_8;
        }
        uint64_t v33 = *(int *)(v47 + 20);
        uint64_t v34 = *(void *)&v9[v33];
        uint64_t v35 = *(void *)&v9[v33 + 8];
        uint64_t v36 = &v5[v33];
        if (v34 == *(void *)v36 && v35 == *((void *)v36 + 1)) {
          break;
        }
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
        sub_100CE14B4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
        if (v38) {
          goto LABEL_17;
        }
LABEL_8:
        sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifierAndValue);
        unint64_t v29 = (v29 + 1) & v31;
        if (((*(void *)(v23 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
          goto LABEL_3;
        }
      }
      sub_100CE14B4((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
      sub_100CE14B4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
LABEL_17:
      if (v14[*(int *)(v46 + 20)] != v21[v45]) {
        goto LABEL_8;
      }
      sub_100CE14B4((uint64_t)v14, type metadata accessor for CRLBoardIdentifierAndValue);
LABEL_4:
      swift_bridgeObjectRelease();
      uint64_t v24 = v44 + 1;
      sub_100CE14B4((uint64_t)v21, type metadata accessor for CRLBoardIdentifierAndValue);
    }
    while (v24 != v43);
  }
  return v23;
}

uint64_t sub_100CDDF48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_100CDE0D8(&qword_10167D0C8, (void (*)(uint64_t))type metadata accessor for CRLBoardIdentifier);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v16 = result;
  if (v11)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_100CE144C(v13, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
      sub_100CB7090((uint64_t)v10, (uint64_t)v7);
      sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      v13 += v14;
      --v11;
    }
    while (v11);
    return v16;
  }
  return result;
}

uint64_t sub_100CDE0D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100CDE120(unint64_t a1)
{
  return sub_100CDD014(a1, (unint64_t *)&qword_101674210, (uint64_t)CKRecordZoneID_ptr, (unint64_t *)&qword_101674218, (uint64_t *)&unk_101671280);
}

uint64_t sub_100CDE144(unint64_t a1)
{
  return sub_100CDD014(a1, (unint64_t *)&qword_101674200, (uint64_t)NSLayoutConstraint_ptr, (unint64_t *)&qword_101674208, &qword_101672928);
}

uint64_t sub_100CDE168(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_100CDE0D8(&qword_101699918, (void (*)(uint64_t))&type metadata accessor for UTType);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v19 = result;
  if (v11)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    uint64_t v14 = v15;
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v17 = *(void *)(v13 + 56);
    do
    {
      v14(v6, v16, v2);
      sub_100CBAE04((uint64_t)v10, v6);
      (*(void (**)(char *, uint64_t))(v13 - 8))(v10, v2);
      v16 += v17;
      --v11;
    }
    while (v11);
    return v19;
  }
  return result;
}

uint64_t sub_100CDE304(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLSELibraryViewModel.Item(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_100CDE0D8(&qword_101699908, (void (*)(uint64_t))type metadata accessor for CRLSELibraryViewModel.Item);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v16 = result;
  if (v11)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_100CE144C(v13, (uint64_t)v6, type metadata accessor for CRLSELibraryViewModel.Item);
      sub_100CBB128((uint64_t)v10, (uint64_t)v6);
      sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLSELibraryViewModel.Item);
      v13 += v14;
      --v11;
    }
    while (v11);
    return v16;
  }
  return result;
}

uint64_t sub_100CDE494(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_100CDE0D8(&qword_1016998F0, (void (*)(uint64_t))type metadata accessor for CRLSpotlightManager.ChangeType);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v16 = result;
  if (v11)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_100CE144C(v13, (uint64_t)v6, type metadata accessor for CRLSpotlightManager.ChangeType);
      sub_100CBB68C((uint64_t)v10, (uint64_t)v6);
      sub_100CE14B4((uint64_t)v10, type metadata accessor for CRLSpotlightManager.ChangeType);
      v13 += v14;
      --v11;
    }
    while (v11);
    return v16;
  }
  return result;
}

uint64_t sub_100CDE624(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100CE76DC();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v11 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 56);
    do
    {
      uint64_t v5 = (void *)*((void *)v4 - 3);
      uint64_t v6 = (void *)*((void *)v4 - 2);
      uint64_t v7 = *((void *)v4 - 1);
      unsigned __int8 v8 = *v4;
      v4 += 32;
      sub_10053BB6C(v5, v6, v7, v8);
      sub_100CB750C((uint64_t)v9, v5, (unint64_t)v6, v7, v8);
      sub_10053BBA0(v9[0], v9[1], (uint64_t)v9[2], v10);
      --v2;
    }
    while (v2);
    return v11;
  }
  return result;
}

uint64_t sub_100CDE6E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v31 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v30 = (char *)v24 - v8;
  uint64_t v9 = sub_1005057FC((uint64_t *)&unk_10169B4A0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  sub_100CDE0D8(&qword_101672918, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  uint64_t v32 = Set.init(minimumCapacity:)();
  if (v13)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v14 = v3 + 16;
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v17 = *(void *)(v14 + 56);
    unint64_t v18 = v14 + 40;
    Swift::Int v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v28 = v15;
    long long v25 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v26 = v17;
    uint64_t v29 = v14;
    uint64_t v19 = (void (**)(uint64_t, uint64_t))(v14 - 8);
    v24[1] = v18 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v21 = (uint64_t)v30;
    uint64_t v20 = v31;
    while (1)
    {
      v28(v12, v16, v2);
      uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v18;
      (*(void (**)(char *, void, uint64_t, uint64_t))v18)(v12, 0, 1, v2);
      if ((*v27)(v12, 1, v2) == 1) {
        break;
      }
      (*v25)(v20, v12, v2);
      sub_100CBC0C0(v21, v20);
      (*v19)(v21, v2);
      v16 += v26;
      if (!--v13) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v22(v12, 1, 1, v2);
  }
  return v32;
}

uint64_t sub_100CDE98C(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CRLSceneInfo();
  sub_100CDE0D8(&qword_10169FA90, (void (*)(uint64_t))type metadata accessor for CRLSceneInfo);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100CBC418(&v9, v6, (void (*)(void))type metadata accessor for CRLSceneInfo, &qword_101671068, (void (*)(void))type metadata accessor for CRLSceneInfo);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        sub_100CBC418(&v9, v8, (void (*)(void))type metadata accessor for CRLSceneInfo, &qword_101671068, (void (*)(void))type metadata accessor for CRLSceneInfo);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100CDEB70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_10050BF84(v4, (uint64_t)v5);
      sub_100CBC6D4((uint64_t)v6, (uint64_t)v5);
      sub_10050BFE0((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_100CDEBFC(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CRLCollaborationParticipant(0);
  sub_100CDE0D8((unint64_t *)&unk_10167C500, (void (*)(uint64_t))type metadata accessor for CRLCollaborationParticipant);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100CBC418(&v9, v6, (void (*)(void))type metadata accessor for CRLCollaborationParticipant, &qword_101672908, (void (*)(void))type metadata accessor for CRLCollaborationParticipant);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        sub_100CBC418(&v9, v8, (void (*)(void))type metadata accessor for CRLCollaborationParticipant, &qword_101672908, (void (*)(void))type metadata accessor for CRLCollaborationParticipant);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100CDEDE0(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v47 = sub_1005057FC(&qword_101699638);
  uint64_t v7 = __chkstk_darwin(v47, v6);
  uint64_t v46 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v45 = (uint64_t)&v42 - v10;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v50 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (v14)
  {
    uint64_t v54 = v4;
    uint64_t v52 = (v14 - 1) & v14;
    int64_t v53 = v16;
    unint64_t v17 = __clz(__rbit64(v14)) | (v16 << 6);
LABEL_5:
    uint64_t v18 = v50;
    uint64_t v19 = *(void *)(v50 + 48);
    uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 72) * v17;
    uint64_t v21 = v45;
    sub_100CE144C(v20, v45, type metadata accessor for CRLBoardIdentifier);
    uint64_t v22 = *(void *)(v18 + 56) + 40 * v17;
    uint64_t v24 = *(void *)v22;
    uint64_t v23 = *(void *)(v22 + 8);
    uint64_t v26 = *(void *)(v22 + 16);
    long long v25 = *(void **)(v22 + 24);
    LOBYTE(v22) = *(unsigned char *)(v22 + 32);
    uint64_t v27 = v47;
    uint64_t v28 = v21 + *(int *)(v47 + 48);
    *(void *)uint64_t v28 = v24;
    *(void *)(v28 + 8) = v23;
    *(void *)(v28 + 16) = v26;
    *(void *)(v28 + 24) = v25;
    *(unsigned char *)(v28 + 32) = v22;
    uint64_t v29 = v21;
    uint64_t v30 = v46;
    sub_10051B3EC(v29, v46, &qword_101699638);
    uint64_t v31 = v30 + *(int *)(v27 + 48);
    uint64_t v32 = *(void *)(v31 + 8);
    uint64_t v51 = *(void *)v31;
    uint64_t v34 = *(void *)(v31 + 16);
    uint64_t v33 = *(void *)(v31 + 24);
    uint64_t v35 = *(unsigned __int8 *)(v31 + 32);
    id v36 = v25;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v37 = v54;
    v48(v30, v51, v32, v34, v33, v35);
    uint64_t v4 = v37;
    uint64_t result = sub_100522F00(v30, &qword_101699638);
    unint64_t v14 = v52;
    int64_t v16 = v53;
    if (v4) {
      return swift_release();
    }
  }
  BOOL v38 = __OFADD__(v16, 1);
  int64_t v39 = v16 + 1;
  if (v38)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v39 >= v44) {
    return swift_release();
  }
  unint64_t v40 = *(void *)(v43 + 8 * v39);
  if (v40)
  {
LABEL_19:
    uint64_t v54 = v4;
    uint64_t v52 = (v40 - 1) & v40;
    int64_t v53 = v39;
    unint64_t v17 = __clz(__rbit64(v40)) + (v39 << 6);
    goto LABEL_5;
  }
  int64_t v41 = v39 + 1;
  if (v39 + 1 >= v44) {
    return swift_release();
  }
  unint64_t v40 = *(void *)(v43 + 8 * v41);
  if (v40) {
    goto LABEL_18;
  }
  int64_t v41 = v39 + 2;
  if (v39 + 2 >= v44) {
    return swift_release();
  }
  unint64_t v40 = *(void *)(v43 + 8 * v41);
  if (v40) {
    goto LABEL_18;
  }
  int64_t v41 = v39 + 3;
  if (v39 + 3 >= v44) {
    return swift_release();
  }
  unint64_t v40 = *(void *)(v43 + 8 * v41);
  if (v40) {
    goto LABEL_18;
  }
  int64_t v41 = v39 + 4;
  if (v39 + 4 >= v44) {
    return swift_release();
  }
  unint64_t v40 = *(void *)(v43 + 8 * v41);
  if (v40)
  {
LABEL_18:
    int64_t v39 = v41;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v39 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v39 >= v44) {
      return swift_release();
    }
    unint64_t v40 = *(void *)(v43 + 8 * v39);
    ++v41;
    if (v40) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100CDF10C(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v32 = a2;
  uint64_t v31 = sub_1005057FC(&qword_101699930);
  __chkstk_darwin(v31, v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v29 = a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v30 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v33 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (v15)
  {
    unint64_t v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v19 = v18 | (v17 << 6);
LABEL_5:
    uint64_t v20 = v33;
    uint64_t v21 = *(void *)(v33 + 48);
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v11, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v19, v22);
    uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v19);
    uint64_t v24 = v31;
    *(void *)&v11[*(int *)(v31 + 48)] = v23;
    sub_10051B3EC((uint64_t)v11, (uint64_t)v7, &qword_101699930);
    uint64_t v25 = *(void *)&v7[*(int *)(v24 + 48)];
    swift_retain();
    v32(v7, v25);
    uint64_t result = sub_100522F00((uint64_t)v7, &qword_101699930);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v17++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v17 >= v30) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v29 + 8 * v17);
  if (v27)
  {
LABEL_19:
    unint64_t v15 = (v27 - 1) & v27;
    unint64_t v19 = __clz(__rbit64(v27)) + (v17 << 6);
    goto LABEL_5;
  }
  int64_t v28 = v17 + 1;
  if (v17 + 1 >= v30) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v29 + 8 * v28);
  if (v27) {
    goto LABEL_18;
  }
  int64_t v28 = v17 + 2;
  if (v17 + 2 >= v30) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v29 + 8 * v28);
  if (v27) {
    goto LABEL_18;
  }
  int64_t v28 = v17 + 3;
  if (v17 + 3 >= v30) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v29 + 8 * v28);
  if (v27) {
    goto LABEL_18;
  }
  int64_t v28 = v17 + 4;
  if (v17 + 4 >= v30) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v29 + 8 * v28);
  if (v27)
  {
LABEL_18:
    int64_t v17 = v28;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v17 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v17 >= v30) {
      return swift_release();
    }
    unint64_t v27 = *(void *)(v29 + 8 * v17);
    ++v28;
    if (v27) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100CDF3CC(uint64_t a1, char a2)
{
  char v2 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    char v22 = 0;
LABEL_49:
    v23._uint64_t countAndFlagsBits = 0x755F6D657469202CLL;
    v23._object = (void *)0xEB00000000646975;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = 0x755F6D6574695F73;
    v24._object = (void *)0xEB00000000646975;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = 8236;
    v25._object = (void *)0xE200000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
LABEL_50:
      v26._object = (void *)0x800000010127BE50;
      v26._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v26);
      v27._object = (void *)0x800000010127BE30;
      v27._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v27);
      v28._uint64_t countAndFlagsBits = 8236;
      v28._object = (void *)0xE200000000000000;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
    }
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  char v65 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  while (2)
  {
    uint64_t v12 = *(unsigned __int8 *)(a1 + v6 + 32);
    if (v12 == 2)
    {
      if (v6)
      {
        char v65 = 1;
        goto LABEL_13;
      }
      char v65 = 1;
LABEL_18:
      int64_t v17 = "board_load_marks";
LABEL_24:
      unint64_t v15 = (unint64_t)v17 | 0x8000000000000000;
      unint64_t v16 = 0xD000000000000010;
    }
    else
    {
      if (*(unsigned char *)(a1 + v6 + 32))
      {
        if (!v6) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
      if (v6)
      {
        char v5 = 1;
LABEL_13:
        v13._uint64_t countAndFlagsBits = 8236;
        v13._object = (void *)0xE200000000000000;
        String.append(_:)(v13);
        v14._uint64_t countAndFlagsBits = 8236;
        v14._object = (void *)0xE200000000000000;
        String.append(_:)(v14);
LABEL_14:
        unint64_t v15 = 0xE900000000000064;
        unint64_t v16 = 0x6975755F6D657469;
        switch((int)v12)
        {
          case 1:
            unint64_t v16 = 0x755F746E65726170;
            unint64_t v15 = 0xEB00000000646975;
            goto LABEL_31;
          case 2:
            goto LABEL_18;
          case 3:
            unint64_t v15 = 0xE900000000000065;
            unint64_t v16 = 0x7079745F6D657469;
            goto LABEL_31;
          case 4:
            unint64_t v16 = 0x645F6E6F6D6D6F63;
            unint64_t v15 = 0xEB00000000617461;
            goto LABEL_31;
          case 5:
            unint64_t v16 = 0x6369666963657073;
            unint64_t v15 = 0xED0000617461645FLL;
            goto LABEL_31;
          case 6:
            unint64_t v16 = 0x6E6F7473626D6F74;
            unint64_t v15 = 0xEA00000000006465;
            goto LABEL_31;
          case 7:
            int64_t v17 = "last_open_crashed_version";
            goto LABEL_24;
          case 8:
            unint64_t v15 = 0xE900000000000061;
            unint64_t v16 = 0x7461645F636E7973;
            goto LABEL_31;
          case 9:
            unint64_t v16 = 0xD000000000000014;
            unint64_t v18 = "SELECT EXISTS(SELECT 1 FROM ";
            goto LABEL_30;
          case 10:
            unint64_t v16 = 0x6F5F7463656A626FLL;
            unint64_t v15 = 0xEE00736E6F697470;
            goto LABEL_31;
          case 11:
            unint64_t v16 = 0xD00000000000002DLL;
            unint64_t v18 = "hing from the datastore.";
            goto LABEL_30;
          case 12:
            unint64_t v16 = 0xD000000000000026;
            unint64_t v18 = "unsynced_changes";
LABEL_30:
            unint64_t v15 = (unint64_t)v18 | 0x8000000000000000;
            break;
          default:
            goto LABEL_31;
        }
        goto LABEL_31;
      }
      char v5 = 1;
      unint64_t v16 = 0x6975755F6D657469;
      unint64_t v15 = 0xE900000000000064;
    }
LABEL_31:
    ++v6;
    unint64_t v19 = v15;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0x6975755F6D657469;
    unint64_t v9 = 0xE900000000000064;
    switch(v12)
    {
      case 0:
        goto LABEL_5;
      case 1:
        unint64_t v7 = 0x755F746E65726170;
        unint64_t v9 = 0xEB00000000646975;
        goto LABEL_5;
      case 2:
        uint64_t v21 = "board_load_marks";
        goto LABEL_39;
      case 3:
        unint64_t v9 = 0xE900000000000065;
        unint64_t v7 = 0x7079745F6D657469;
        goto LABEL_5;
      case 4:
        unint64_t v7 = 0x645F6E6F6D6D6F63;
        unint64_t v9 = 0xEB00000000617461;
        goto LABEL_5;
      case 5:
        unint64_t v7 = 0x6369666963657073;
        unint64_t v9 = 0xED0000617461645FLL;
        goto LABEL_5;
      case 6:
        unint64_t v7 = 0x6E6F7473626D6F74;
        unint64_t v9 = 0xEA00000000006465;
        goto LABEL_5;
      case 7:
        uint64_t v21 = "last_open_crashed_version";
LABEL_39:
        unint64_t v9 = (unint64_t)v21 | 0x8000000000000000;
        unint64_t v7 = 0xD000000000000010;
        goto LABEL_5;
      case 8:
        unint64_t v9 = 0xE900000000000061;
        unint64_t v7 = 0x7461645F636E7973;
        goto LABEL_5;
      case 9:
        unint64_t v7 = 0xD000000000000014;
        uint64_t v8 = "SELECT EXISTS(SELECT 1 FROM ";
        goto LABEL_4;
      case 10:
        unint64_t v7 = 0x6F5F7463656A626FLL;
        unint64_t v9 = 0xEE00736E6F697470;
        goto LABEL_5;
      case 11:
        unint64_t v7 = 0xD00000000000002DLL;
        uint64_t v8 = "hing from the datastore.";
        goto LABEL_4;
      case 12:
        unint64_t v7 = 0xD000000000000026;
        uint64_t v8 = "unsynced_changes";
LABEL_4:
        unint64_t v9 = (unint64_t)v8 | 0x8000000000000000;
LABEL_5:
        unint64_t v10 = v9;
        String.append(_:)(*(Swift::String *)&v7);
        swift_bridgeObjectRelease();
        v11._uint64_t countAndFlagsBits = 24435;
        v11._object = (void *)0xE200000000000000;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        if (v3 != v6) {
          continue;
        }
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
        {
          char v2 = a2;
          char v22 = v65;
          goto LABEL_49;
        }
        char v2 = a2;
        if ((v65 & 1) == 0) {
          goto LABEL_50;
        }
        break;
      default:
        JUMPOUT(0);
    }
    break;
  }
LABEL_51:
  if (v2)
  {
    v29._uint64_t countAndFlagsBits = 0xD000000000000012;
    v29._object = (void *)0x800000010127BE70;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = 807419424;
    v30._object = (void *)0xE400000000000000;
    String.append(_:)(v30);
    uint64_t v32 = 0x20455245485720;
    uint64_t v31 = (void *)0xE700000000000000;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v31 = (void *)0xE000000000000000;
  }
  _StringGuts.grow(_:)(174);
  v33._uint64_t countAndFlagsBits = 0xD000000000000019;
  v33._object = (void *)0x800000010127BE90;
  String.append(_:)(v33);
  swift_bridgeObjectRetain();
  v34._uint64_t countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 0x4553282053412029;
  v35._object = (void *)0xED0000205443454CLL;
  String.append(_:)(v35);
  swift_bridgeObjectRetain();
  v36._uint64_t countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 0x204D4F524620;
  v37._object = (void *)0xE600000000000000;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v38._object = (void *)0xEB00000000736D65;
  String.append(_:)(v38);
  v39._uint64_t countAndFlagsBits = 0x2820455245485720;
  v39._object = (void *)0xE800000000000000;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = 0x6975755F6D657469;
  v40._object = (void *)0xE900000000000064;
  String.append(_:)(v40);
  v41._object = (void *)0xE900000000000020;
  v41._uint64_t countAndFlagsBits = 0x444E41203F203D20;
  String.append(_:)(v41);
  v42._uint64_t countAndFlagsBits = 0xD000000000000010;
  v42._object = (void *)0x8000000101262BA0;
  String.append(_:)(v42);
  v43._object = (void *)0x800000010127BEB0;
  v43._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v43);
  v44._uint64_t countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = 0x204D4F524620;
  v45._object = (void *)0xE600000000000000;
  String.append(_:)(v45);
  v46._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v46._object = (void *)0xEB00000000736D65;
  String.append(_:)(v46);
  v47._object = (void *)0x800000010127BED0;
  v47._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v47);
  v48._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v48._object = (void *)0xEB00000000736D65;
  String.append(_:)(v48);
  v49._uint64_t countAndFlagsBits = 46;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  v50._uint64_t countAndFlagsBits = 0x755F746E65726170;
  v50._object = (void *)0xEB00000000646975;
  String.append(_:)(v50);
  v51._uint64_t countAndFlagsBits = 2112800;
  v51._object = (void *)0xE300000000000000;
  String.append(_:)(v51);
  v52._uint64_t countAndFlagsBits = 0x755F6D6574695F73;
  v52._object = (void *)0xEB00000000646975;
  String.append(_:)(v52);
  v53._uint64_t countAndFlagsBits = 0x20444E4120;
  v53._object = (void *)0xE500000000000000;
  String.append(_:)(v53);
  v54._uint64_t countAndFlagsBits = 0x74695F6472616F62;
  v54._object = (void *)0xEB00000000736D65;
  String.append(_:)(v54);
  v55._uint64_t countAndFlagsBits = 46;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  v56._uint64_t countAndFlagsBits = 0xD000000000000010;
  v56._object = (void *)0x8000000101262BA0;
  String.append(_:)(v56);
  v57._uint64_t countAndFlagsBits = 2112800;
  v57._object = (void *)0xE300000000000000;
  String.append(_:)(v57);
  v58._uint64_t countAndFlagsBits = 0xD000000000000012;
  v58._object = (void *)0x800000010127BE30;
  String.append(_:)(v58);
  v59._uint64_t countAndFlagsBits = 0x454C455320292029;
  v59._object = (void *)0xEB00000000205443;
  String.append(_:)(v59);
  v60._uint64_t countAndFlagsBits = 0;
  v60._object = (void *)0xE000000000000000;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = 0x7573204D4F524620;
  v61._object = (void *)0xEF736D6574695F62;
  String.append(_:)(v61);
  v62._uint64_t countAndFlagsBits = v32;
  v62._object = v31;
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100CDFDDC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3._uint64_t countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    uint64_t v5 = a1;
    uint64_t v4 = (void *)a2;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = (void *)0xE000000000000000;
  }
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x75755F7465737361;
  v6._object = (void *)0xEA00000000006469;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 8236;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v4;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 0x6F69736E65747865;
  v9._object = (void *)0xE90000000000006ELL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = v5;
  v11._object = v4;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v12._object = (void *)0xEE00657461645F65;
  String.append(_:)(v12);
  return v5;
}

uint64_t sub_100CDFF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v4 - 8, v5);
  Swift::String v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  Swift::String v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)v26 - v15;
  sub_10079EB18(a2, a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    swift_release();
    sub_100522F00((uint64_t)v7, (uint64_t *)&unk_101674520);
    return 0;
  }
  unint64_t v19 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v19(v16, v7, v8);
  uint64_t result = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    v26[0] = sub_10079E7F4(result, a1);
    uint64_t result = a2 + 2;
    if (!__OFADD__(a2, 2))
    {
      uint64_t v21 = v20;
      uint64_t v22 = sub_10079E66C(result, a1);
      char v24 = v23;
      swift_release();
      if ((v24 & 1) == 0)
      {
        v19(v13, v16, v8);
        type metadata accessor for CRLAssetDatabaseRow();
        uint64_t v17 = swift_allocObject();
        v19((char *)(v17 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID), v13, v8);
        Swift::String v25 = (void *)(v17 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
        *Swift::String v25 = v26[0];
        v25[1] = v21;
        *(void *)(v17 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_tombstoneDate) = v22;
        return v17;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100CE01E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v4 - 8, v5);
  unint64_t v133 = (unint64_t)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t v128 = (uint64_t)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v129 = (uint64_t)&v111 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  double v131 = (char *)&v111 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v130 = (uint64_t)&v111 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v132 = (uint64_t)&v111 - v21;
  uint64_t v22 = sub_1005057FC((uint64_t *)&unk_101674520);
  uint64_t v24 = __chkstk_darwin(v22 - 8, v23);
  uint64_t v126 = (uint64_t)&v111 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v127 = (uint64_t)&v111 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v32 = (char *)&v111 - v31;
  uint64_t v34 = __chkstk_darwin(v30, v33);
  Swift::String v36 = (char *)&v111 - v35;
  __chkstk_darwin(v34, v37);
  Swift::String v39 = (char *)&v111 - v38;
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v43 = __chkstk_darwin(v40, v42);
  Swift::String v45 = (char *)&v111 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __chkstk_darwin(v43, v46);
  Swift::String v49 = (char *)&v111 - v48;
  __chkstk_darwin(v47, v50);
  Swift::String v52 = (char *)&v111 - v51;
  uint64_t v134 = a1;
  sub_10079EB18(a2, a1, (uint64_t)v39);
  uint64_t v122 = v45;
  uint64_t v123 = v49;
  uint64_t v124 = v36;
  uint64_t v125 = a2;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40) == 1)
  {
    swift_release();
    sub_100522F00((uint64_t)v39, (uint64_t *)&unk_101674520);
    return 0;
  }
  uint64_t v55 = v41;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v52, v39, v40);
  uint64_t v56 = v125;
  uint64_t result = v125 + 1;
  uint64_t v57 = v134;
  if (__OFADD__(v125, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v58 = v40;
  uint64_t v59 = (uint64_t)v32;
  sub_10079EB18(result, v134, (uint64_t)v32);
  uint64_t v60 = v133;
  uint64_t v61 = (uint64_t)v124;
  sub_10051B3EC(v59, (uint64_t)v124, (uint64_t *)&unk_101674520);
  uint64_t result = v56 + 2;
  if (__OFADD__(v56, 2))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  Swift::String v62 = v52;
  uint64_t v63 = sub_10079BD64(result, v57);
  if (v64 >> 60 == 15)
  {
    swift_release();
LABEL_34:
    uint64_t v110 = v61;
LABEL_35:
    sub_100522F00(v110, (uint64_t *)&unk_101674520);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v62, v58);
    return 0;
  }
  uint64_t v65 = (uint64_t)v63;
  unint64_t v66 = v64;
  sub_100510D4C((uint64_t)v63, v64);
  sub_100753724(v65, v66, v60);
  uint64_t v67 = v60;
  uint64_t v68 = v131;
  sub_100CE12D8(v67, (uint64_t)v131, type metadata accessor for CRLBoardIdentifierStorage);
  uint64_t v69 = (uint64_t)v68;
  uint64_t v70 = v130;
  sub_100CE12D8(v69, v130, type metadata accessor for CRLBoardIdentifier);
  uint64_t v71 = v70;
  uint64_t v72 = v132;
  sub_100CE12D8(v71, v132, type metadata accessor for CRLBoardIdentifier);
  uint64_t result = v56 + 3;
  if (__OFADD__(v56, 3)) {
    goto LABEL_39;
  }
  uint64_t v73 = sub_10079BE94(result, v57);
  if (v74)
  {
    swift_release();
    uint64_t v81 = v65;
    goto LABEL_17;
  }
  uint64_t v75 = v73;
  uint64_t v76 = v125;
  uint64_t result = v125 + 4;
  if (__OFADD__(v125, 4)) {
    goto LABEL_40;
  }
  uint64_t v120 = v75;
  double v131 = sub_10079BD64(result, v57);
  unint64_t v133 = v77;
  uint64_t result = v76 + 5;
  if (__OFADD__(v76, 5))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v130 = v65;
  int v78 = sub_10079BD64(result, v57);
  unint64_t v121 = v79;
  uint64_t result = v76 + 6;
  if (__OFADD__(v76, 6))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  char v80 = sub_10079E3B4(result, v57);
  if (v80 == 2)
  {
    sub_100514260((uint64_t)v78, v121);
    sub_100514260((uint64_t)v131, v133);
    swift_release();
    uint64_t v81 = v130;
LABEL_17:
    sub_100514260(v81, v66);
    uint64_t v82 = v72;
LABEL_33:
    sub_100CE14B4(v82, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_34;
  }
  char v83 = v80;
  uint64_t result = v125 + 7;
  if (__OFADD__(v125, 7)) {
    goto LABEL_43;
  }
  sqlite3_int64 v84 = sub_10079E4E8(result, v57);
  if (v85)
  {
    sub_100514260((uint64_t)v78, v121);
    uint64_t v108 = v131;
    unint64_t v109 = v133;
LABEL_32:
    sub_100514260((uint64_t)v108, v109);
    swift_release();
    sub_100514260(v130, v66);
    uint64_t v82 = v132;
    goto LABEL_33;
  }
  uint64_t v86 = v84;
  uint64_t v87 = v125;
  uint64_t result = v125 + 8;
  if (__OFADD__(v125, 8)) {
    goto LABEL_44;
  }
  unint64_t v118 = sub_10079BD64(result, v57);
  unint64_t v119 = v88;
  uint64_t result = v87 + 9;
  if (__OFADD__(v87, 9))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  sqlite3_int64 v89 = sub_10079E4E8(result, v57);
  if (v90)
  {
LABEL_31:
    sub_100514260((uint64_t)v78, v121);
    sub_100514260((uint64_t)v131, v133);
    uint64_t v108 = v118;
    unint64_t v109 = v119;
    goto LABEL_32;
  }
  uint64_t v91 = v89;
  sub_100C37AB4(0, v89, (uint64_t)&_mh_execute_header, (uint64_t)"init(row:columnOffsetIndex:)", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 10690, (uint64_t)&type metadata for UInt64, &qword_101699630);
  uint64_t result = v125 + 10;
  if (__OFADD__(v125, 10))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  sqlite3_int64 v92 = sub_10079E4E8(result, v57);
  if (v93) {
    goto LABEL_31;
  }
  sqlite3_int64 v117 = v92;
  uint64_t result = v125 + 11;
  if (__OFADD__(v125, 11))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  sqlite3_int64 v94 = sub_10079E4E8(result, v57);
  if (v95)
  {
LABEL_36:
    sub_100514260((uint64_t)v78, v121);
    sub_100514260((uint64_t)v131, v133);
    sub_100514260((uint64_t)v118, v119);
    swift_release();
    sub_100514260(v130, v66);
    sub_100CE14B4(v132, type metadata accessor for CRLBoardIdentifier);
    uint64_t v110 = (uint64_t)v124;
    goto LABEL_35;
  }
  uint64_t v96 = v94;
  uint64_t result = v125 + 12;
  if (!__OFADD__(v125, 12))
  {
    uint64_t v116 = v96;
    uint64_t v125 = v91;
    sqlite3_int64 v115 = sub_10079E4E8(result, v57);
    if ((v97 & 1) == 0)
    {
      int v113 = v83 & 1;
      uint64_t v98 = v58;
      uint64_t v112 = v58;
      uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
      int v100 = v123;
      v99(v123, v62, v98);
      uint64_t v101 = v127;
      sub_100522E9C((uint64_t)v124, v127, (uint64_t *)&unk_101674520);
      unint64_t v114 = v66;
      uint64_t v102 = v129;
      sub_100CE144C(v132, v129, type metadata accessor for CRLBoardIdentifier);
      uint64_t v103 = v100;
      uint64_t v104 = v112;
      v99(v122, v103, v112);
      uint64_t v105 = v126;
      sub_100522E9C(v101, v126, (uint64_t *)&unk_101674520);
      uint64_t v106 = v128;
      sub_100CE144C(v102, v128, type metadata accessor for CRLBoardIdentifier);
      type metadata accessor for CRLBoardItemDatabaseRow();
      swift_allocObject();
      uint64_t v53 = sub_100E19EB8((uint64_t)v122, v125, v116, v115, v117, v105, v106, v120, (uint64_t)v131, v133, (uint64_t)v78, v121, v113, v86, (uint64_t)v118, v119);
      sub_100CE14B4(v102, type metadata accessor for CRLBoardIdentifier);
      sub_100522F00(v101, (uint64_t *)&unk_101674520);
      uint64_t v107 = *(void (**)(char *, uint64_t))(v55 + 8);
      v107(v123, v104);
      swift_release();
      sub_100514260(v130, v114);
      sub_100CE14B4(v132, type metadata accessor for CRLBoardIdentifier);
      sub_100522F00((uint64_t)v124, (uint64_t *)&unk_101674520);
      v107(v62, v104);
      return v53;
    }
    goto LABEL_36;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_100CE0BA0(uint64_t a1, void *a2)
{
  if (String.count.getter() < 1)
  {
    uint64_t v5 = 0;
    a2 = (void *)0xE000000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
    v4._uint64_t countAndFlagsBits = 46;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    uint64_t v5 = a1;
  }
  _StringGuts.grow(_:)(52);
  v6._uint64_t countAndFlagsBits = v5;
  v6._object = a2;
  String.append(_:)(v6);
  v7._object = (void *)0x8000000101262BA0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = v5;
  v9._object = a2;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x7461645F74647263;
  v10._object = (void *)0xE900000000000061;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = v5;
  v12._object = a2;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = 0x726F7661665F7369;
  v13._object = (void *)0xEB00000000657469;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 8236;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = v5;
  v15._object = a2;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v16._object = (void *)0x800000010127B870;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = v5;
  v18._object = a2;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0x6174735F77656976;
  v19._object = (void *)0xEF617461645F6574;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = v5;
  v21._object = a2;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0xD000000000000019;
  v22._object = (void *)0x800000010127B890;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = v5;
  v24._object = a2;
  String.append(_:)(v24);
  v25._object = (void *)0x800000010127B8B0;
  v25._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = v5;
  v27._object = a2;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 0x7461645F636E7973;
  v28._object = (void *)0xE900000000000061;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = v5;
  v30._object = a2;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0xD000000000000026;
  v31._object = (void *)0x800000010127B8D0;
  String.append(_:)(v31);
  return 0;
}

uint64_t sub_100CE0E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v4 - 8, v5);
  Swift::String v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  Swift::String v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  Swift::String v16 = (char *)&v50 - v15;
  uint64_t v18 = __chkstk_darwin(v14, v17);
  Swift::String v20 = (char *)&v50 - v19;
  __chkstk_darwin(v18, v21);
  Swift::String v23 = (char *)&v50 - v22;
  Swift::String v24 = sub_10079BD64(a2, a1);
  if (v25 >> 60 == 15)
  {
    swift_release();
    return 0;
  }
  uint64_t v26 = (uint64_t)v24;
  unint64_t v27 = v25;
  sub_100510D4C((uint64_t)v24, v25);
  sub_100753724(v26, v27, (uint64_t)v7);
  sub_100CE12D8((uint64_t)v7, (uint64_t)v16, type metadata accessor for CRLBoardIdentifierStorage);
  sub_100CE12D8((uint64_t)v16, (uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
  sub_100CE12D8((uint64_t)v20, (uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
  uint64_t result = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  Swift::String v29 = sub_10079BD64(result, a1);
  if (v30 >> 60 == 15)
  {
    uint64_t v31 = v26;
    unint64_t v32 = v27;
LABEL_13:
    sub_100514260(v31, v32);
    swift_release();
    sub_100CE14B4((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
    return 0;
  }
  uint64_t v33 = (uint64_t)v29;
  uint64_t result = a2 + 2;
  if (__OFADD__(a2, 2)) {
    goto LABEL_26;
  }
  unint64_t v34 = v30;
  char v35 = sub_10079E3B4(result, a1);
  if (v35 == 2)
  {
LABEL_12:
    sub_100514260(v26, v27);
    uint64_t v31 = v33;
    unint64_t v32 = v34;
    goto LABEL_13;
  }
  char v36 = v35;
  uint64_t result = a2 + 3;
  if (__OFADD__(a2, 3))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v37 = sub_10079E3B4(result, a1);
  if (v37 == 2) {
    goto LABEL_12;
  }
  char v38 = v37;
  uint64_t result = a2 + 4;
  if (__OFADD__(a2, 4))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  Swift::String v39 = sub_10079BD64(result, a1);
  if (v40 >> 60 == 15) {
    goto LABEL_12;
  }
  uint64_t v55 = v39;
  unint64_t v56 = v40;
  uint64_t result = a2 + 5;
  if (__OFADD__(a2, 5)) {
    goto LABEL_29;
  }
  sqlite3_int64 v54 = sub_10079E4E8(result, a1);
  int v53 = v42;
  uint64_t result = a2 + 6;
  if (__OFADD__(a2, 6))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  sqlite3_int64 v43 = sub_10079E4E8(result, a1);
  if (v44)
  {
    sub_100514260(v26, v27);
    sub_100514260(v33, v34);
    uint64_t v31 = (uint64_t)v55;
    unint64_t v32 = v56;
    goto LABEL_13;
  }
  sqlite3_int64 v50 = v43;
  uint64_t result = a2 + 7;
  if (__OFADD__(a2, 7)) {
    goto LABEL_31;
  }
  Swift::String v45 = sub_10079BD64(result, a1);
  unint64_t v51 = v46;
  Swift::String v52 = v45;
  uint64_t result = a2 + 8;
  if (!__OFADD__(a2, 8))
  {
    sqlite3_int64 v47 = sub_10079E4E8(result, a1);
    if ((v48 & 1) == 0)
    {
      uint64_t v49 = v47;
      v53 &= 1u;
      sub_100CE144C((uint64_t)v23, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
      type metadata accessor for CRLUserBoardMetadataDatabaseRow();
      swift_allocObject();
      uint64_t v41 = sub_100843318((uint64_t)v12, v33, v34, v36 & 1, v38 & 1, (uint64_t)v55, v56, v54, v53, v50, (uint64_t)v52, v51, 2u, 2u, 2, v49);
      swift_release();
      sub_100514260(v26, v27);
      sub_100CE14B4((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
      return v41;
    }
    sub_100514260(v26, v27);
    sub_100514260(v33, v34);
    sub_100514260((uint64_t)v55, v56);
    unint64_t v32 = v51;
    uint64_t v31 = (uint64_t)v52;
    goto LABEL_13;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100CE12D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100CE1340()
{
  return sub_1006FA134(&qword_101699620);
}

uint64_t sub_100CE134C(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  sub_1005057FC(&qword_101699620);

  return sub_100C73F70(a1, v3);
}

uint64_t sub_100CE13D0()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100CE1428()
{
  return sub_100C73C5C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(void (**)(uint64_t, void))(v0 + 48));
}

unint64_t sub_100CE143C(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100CE144C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100CE14B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100CE1514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100C73FE0(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16), *(void *)(v6 + 24));
}

unint64_t sub_100CE1530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100C7445C(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16), *(void *)(v6 + 24));
}

unint64_t sub_100CE154C(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100CE155C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardItemSyncRemoteRecord_commonCRDTData + 8);
  if (v2 >> 60 == 15)
  {
    if (qword_10166FB70 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v3 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117E810;
    id v5 = v3;
    uint64_t v6 = UUID.uuidString.getter();
    uint64_t v8 = v7;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = sub_100528BE4();
    *(void *)(inited + 32) = v6;
    *(void *)(inited + 40) = v8;
    uint64_t v9 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v5, (uint64_t)&_mh_execute_header, v9, (uint64_t)"Remote record is missing commonData: %@", 39, 2, inited);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    return 0;
  }
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardItemSyncRemoteRecord_commonCRDTData);
  uint64_t v11 = sub_1008E0E9C(*(void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_itemTypeValue));
  char v13 = v12;
  if ((v12 & 0x100) != 0)
  {
    sub_100510D4C(v10, v2);
    if (qword_10166FB70 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v22 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v23 = swift_initStackObject();
    *(_OWORD *)(v23 + 16) = xmmword_10117E810;
    id v24 = v22;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v27 = v26;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_100528BE4();
    *(void *)(v23 + 32) = v25;
    *(void *)(v23 + 40) = v27;
    uint64_t v28 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v24, (uint64_t)&_mh_execute_header, v28, (uint64_t)"Remote record has invalid board item type: %@", 45, 2, v23);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

    goto LABEL_13;
  }
  unint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardItemSyncRemoteRecord_specificCRDTData + 8);
  if (v14 >> 60 == 15)
  {
    sub_100510D4C(v10, v2);
    if (qword_10166FB70 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v15 = (void *)static OS_os_log.boardStore;
    sub_1005057FC((uint64_t *)&unk_101672B40);
    uint64_t v16 = swift_initStackObject();
    *(_OWORD *)(v16 + 16) = xmmword_10117E810;
    id v17 = v15;
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_100528BE4();
    *(void *)(v16 + 32) = v18;
    *(void *)(v16 + 40) = v20;
    uint64_t v21 = static os_log_type_t.error.getter();
    sub_100BAC898((uint64_t)v17, (uint64_t)&_mh_execute_header, v21, (uint64_t)"Remote record is missing specificData: %@", 41, 2, v16);
    swift_setDeallocating();
    sub_1005057FC(&qword_101672B50);
    swift_arrayDestroy();

LABEL_13:
    sub_100514260(v10, v2);
    return 0;
  }
  uint64_t v30 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardItemSyncRemoteRecord_specificCRDTData);
  uint64_t v31 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_minRequiredVersions);
  uint64_t v32 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_minRequiredVersions + 8);
  uint64_t v33 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_minRequiredVersions + 16);
  uint64_t v34 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_objectOptions);
  sub_1005FA2A0(v10, v2);
  sub_1005FA2A0(v30, v14);
  char v35 = sub_1009F10B0(v11, v13 & 1, v31, v32, v33, v34, v10, v2, v30, v14);
  sub_100514260(v30, v14);
  sub_100514260(v10, v2);
  return v35;
}

uint64_t sub_100CE19F8(uint64_t a1, void *a2)
{
  if (String.count.getter() < 1)
  {
    uint64_t v5 = 0;
    a2 = (void *)0xE000000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
    v4._uint64_t countAndFlagsBits = 46;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    uint64_t v5 = a1;
  }
  _StringGuts.grow(_:)(76);
  v6._uint64_t countAndFlagsBits = v5;
  v6._object = a2;
  String.append(_:)(v6);
  v7._object = (void *)0xE900000000000064;
  v7._uint64_t countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = v5;
  v9._object = a2;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x755F746E65726170;
  v10._object = (void *)0xEB00000000646975;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = v5;
  v12._object = a2;
  String.append(_:)(v12);
  v13._object = (void *)0x8000000101262BA0;
  v13._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 8236;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = v5;
  v15._object = a2;
  String.append(_:)(v15);
  v16._object = (void *)0xE900000000000065;
  v16._uint64_t countAndFlagsBits = 0x7079745F6D657469;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = v5;
  v18._object = a2;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0x645F6E6F6D6D6F63;
  v19._object = (void *)0xEB00000000617461;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = v5;
  v21._object = a2;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x6369666963657073;
  v22._object = (void *)0xED0000617461645FLL;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = v5;
  v24._object = a2;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0x6E6F7473626D6F74;
  v25._object = (void *)0xEA00000000006465;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = v5;
  v27._object = a2;
  String.append(_:)(v27);
  v28._object = (void *)0x800000010127B8B0;
  v28._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = v5;
  v30._object = a2;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 0x7461645F636E7973;
  v31._object = (void *)0xE900000000000061;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = 8236;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = v5;
  v33._object = a2;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 0xD000000000000014;
  v34._object = (void *)0x800000010127BB50;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = v5;
  v36._object = a2;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = 0x6F5F7463656A626FLL;
  v37._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = 8236;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  v39._uint64_t countAndFlagsBits = v5;
  v39._object = a2;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v40._object = (void *)0x800000010127BD60;
  String.append(_:)(v40);
  v41._uint64_t countAndFlagsBits = 8236;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  v42._uint64_t countAndFlagsBits = v5;
  v42._object = a2;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 0xD000000000000026;
  v43._object = (void *)0x800000010127B8D0;
  String.append(_:)(v43);
  return 0;
}

unint64_t sub_100CE1DD8(unint64_t a1)
{
  return sub_100C8501C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t sub_100CE1DE4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3._uint64_t countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    uint64_t v5 = a1;
    Swift::String v4 = (void *)a2;
  }
  else
  {
    uint64_t v5 = 0;
    Swift::String v4 = (void *)0xE000000000000000;
  }
  _StringGuts.grow(_:)(64);
  v6._uint64_t countAndFlagsBits = v5;
  v6._object = v4;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000011;
  v7._object = (void *)0x800000010127BF80;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = v5;
  v9._object = v4;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x695F74656B637562;
  v10._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = v5;
  v12._object = v4;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = 0x645F74656B637562;
  v13._object = (void *)0xEB00000000617461;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 8236;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = v5;
  v15._object = v4;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0xD000000000000010;
  v16._object = (void *)0x800000010127B8B0;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = v5;
  v18._object = v4;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0x7461645F636E7973;
  v19._object = (void *)0xE900000000000061;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = v5;
  v21._object = v4;
  String.append(_:)(v21);
  v22._object = (void *)0x800000010127BFE0;
  v22._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = v5;
  v24._object = v4;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v25._object = (void *)0x800000010127C000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = v5;
  v27._object = v4;
  String.append(_:)(v27);
  v28._object = (void *)0x800000010127C020;
  v28._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = v5;
  v30._object = v4;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 0xD000000000000038;
  v31._object = (void *)0x800000010127C040;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = 8236;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = v5;
  v33._object = v4;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 0xD000000000000037;
  v34._object = (void *)0x800000010127C080;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = v5;
  v36._object = v4;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 0xD000000000000026;
  v37._object = (void *)0x800000010127B8D0;
  String.append(_:)(v37);
  return 0;
}

uint64_t sub_100CE2120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v4 - 8, v5);
  Swift::String v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRLBoardIdentifier(0);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  Swift::String v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  Swift::String v16 = (char *)&v58 - v15;
  uint64_t v18 = __chkstk_darwin(v14, v17);
  Swift::String v20 = (char *)&v58 - v19;
  __chkstk_darwin(v18, v21);
  Swift::String v23 = (char *)&v58 - v22;
  Swift::String v24 = sub_10079BD64(a2, a1);
  if (v25 >> 60 == 15)
  {
    swift_release();
    return 0;
  }
  uint64_t v26 = (uint64_t)v24;
  unint64_t v27 = v25;
  sub_100510D4C((uint64_t)v24, v25);
  sub_100753724(v26, v27, (uint64_t)v7);
  sub_100CE12D8((uint64_t)v7, (uint64_t)v16, type metadata accessor for CRLBoardIdentifierStorage);
  sub_100CE12D8((uint64_t)v16, (uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
  sub_100CE12D8((uint64_t)v20, (uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
  uint64_t result = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v29 = sub_10079BE94(result, a1);
  if (v30)
  {
LABEL_7:
    Swift::String v34 = (unsigned char *)v26;
    unint64_t v35 = v27;
LABEL_8:
    sub_100514260((uint64_t)v34, v35);
    swift_release();
    sub_100CE14B4((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
    return 0;
  }
  uint64_t v31 = v29;
  uint64_t result = a2 + 2;
  if (__OFADD__(a2, 2)) {
    goto LABEL_29;
  }
  Swift::String v32 = sub_10079BD64(result, a1);
  if (v33 >> 60 == 15) {
    goto LABEL_7;
  }
  uint64_t v37 = (uint64_t)v32;
  uint64_t result = a2 + 3;
  if (__OFADD__(a2, 3)) {
    goto LABEL_30;
  }
  unint64_t v38 = v33;
  sqlite3_int64 v39 = sub_10079E4E8(result, a1);
  if (v40)
  {
    sub_100514260(v26, v27);
    Swift::String v34 = (unsigned char *)v37;
    unint64_t v35 = v38;
    goto LABEL_8;
  }
  uint64_t v41 = v39;
  uint64_t result = a2 + 4;
  if (__OFADD__(a2, 4)) {
    goto LABEL_31;
  }
  uint64_t v65 = sub_10079BD64(result, a1);
  uint64_t v66 = v42;
  uint64_t result = a2 + 5;
  if (__OFADD__(a2, 5))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  Swift::String v43 = sub_10079BD64(result, a1);
  unint64_t v63 = v44;
  unint64_t v64 = v43;
  uint64_t result = a2 + 6;
  if (__OFADD__(a2, 6))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  sqlite3_int64 v45 = sub_10079E4E8(result, a1);
  if (v46)
  {
LABEL_27:
    sub_100514260(v26, v27);
    sub_100514260(v37, v38);
    sub_100514260((uint64_t)v64, v63);
    Swift::String v34 = v65;
    unint64_t v35 = v66;
    goto LABEL_8;
  }
  sqlite3_int64 v62 = v45;
  sub_100C37AB4(0, v45, (uint64_t)&_mh_execute_header, (uint64_t)"init(row:columnOffsetIndex:)", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 10920, (uint64_t)&type metadata for UInt64, &qword_101699630);
  uint64_t result = a2 + 7;
  if (__OFADD__(a2, 7))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  sqlite3_int64 v47 = sub_10079E4E8(result, a1);
  if (v48) {
    goto LABEL_27;
  }
  sqlite3_int64 v61 = v47;
  sub_100C37AB4(0, v47, (uint64_t)&_mh_execute_header, (uint64_t)"init(row:columnOffsetIndex:)", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 10925, (uint64_t)&type metadata for UInt64, &qword_101699630);
  uint64_t result = a2 + 8;
  if (__OFADD__(a2, 8))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sqlite3_int64 v49 = sub_10079E4E8(result, a1);
  if (v50) {
    goto LABEL_27;
  }
  sqlite3_int64 v60 = v49;
  uint64_t result = a2 + 9;
  if (__OFADD__(a2, 9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  sqlite3_int64 v51 = sub_10079E4E8(result, a1);
  if (v52) {
    goto LABEL_27;
  }
  sqlite3_int64 v59 = v51;
  uint64_t result = a2 + 10;
  if (!__OFADD__(a2, 10))
  {
    sqlite3_int64 v53 = sub_10079E4E8(result, a1);
    if ((v54 & 1) == 0)
    {
      uint64_t v55 = v53;
      sub_100CE144C((uint64_t)v23, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
      *((void *)&v57 + 1) = v59;
      *(void *)&long long v57 = v60;
      *((void *)&v56 + 1) = v61;
      *(void *)&long long v56 = v62;
      uint64_t v36 = sub_100A57A8C((uint64_t)v12, v31, v37, v38, v41, (uint64_t)v65, v66, (uint64_t)v64, v63, v56, v57, v55);
      swift_release();
      sub_100514260(v26, v27);
      sub_100CE14B4((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
      return v36;
    }
    goto LABEL_27;
  }
LABEL_37:
  __break(1u);
  return result;
}

void *sub_100CE2610(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_10169A1D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
  unint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8);
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 8);
  uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 16);
  uint64_t v20 = v10;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 24);
  uint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 32);
  uint64_t v18 = v12;
  sub_100510D4C(v8, v9);
  sub_1005057FC((uint64_t *)&unk_1016A8B60);
  sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  sub_1005057FC((uint64_t *)&unk_1016A8B70);
  uint64_t v13 = (void *)swift_allocObject();
  *((unsigned char *)v13 + *(void *)(*v13 + 136)) = 0;
  uint64_t v13[2] = v7;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))((char *)v13 + *(void *)(*v13 + 120), v6, v2);
  *((unsigned char *)v13 + *(void *)(*v13 + 136)) = 0;
  swift_release();
  uint64_t v14 = (void *)((char *)v13 + *(void *)(*v13 + 128));
  *uint64_t v14 = v20;
  v14[1] = v11;
  uint64_t v15 = v18;
  v14[2] = v19;
  v14[3] = v15;
  v14[4] = v17;
  return v13;
}

unint64_t sub_100CE2978()
{
  swift_beginAccess();
  sub_1005057FC(&qword_10169A1D0);
  sub_1005057FC((uint64_t *)&unk_1016A8B60);
  sub_100523288(&qword_10169A240, (uint64_t *)&unk_1016A8B60);
  char v1 = Capsule.merge<A>(_:)();
  swift_endAccess();
  unint64_t result = sub_100CB4830();
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 136)) = (*(unsigned char *)(v0 + *(void *)(*(void *)v0 + 136)) | v1) & 1;
  return result;
}

uint64_t sub_100CE2A7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_1005057FC(&qword_10169A7C0);
  __chkstk_darwin(v6 - 8, v7);
  unint64_t v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15, v16);
  uint64_t v18 = &v22[-v17];
  if (*(void *)(a1 + OBJC_IVAR____TtC8Freeform36CRLUserBoardMetadataSyncRemoteRecord_boardCRDTData + 8) >> 60 == 15)
  {
    swift_release();
    return 0;
  }
  else
  {
    sub_100510D4C(*(void *)(a1 + OBJC_IVAR____TtC8Freeform36CRLUserBoardMetadataSyncRemoteRecord_boardCRDTData), *(void *)(a1 + OBJC_IVAR____TtC8Freeform36CRLUserBoardMetadataSyncRemoteRecord_boardCRDTData + 8));
    sub_100CDE0D8(&qword_101683BA8, (void (*)(uint64_t))type metadata accessor for CRLUserBoardMetadataCRDTData);
    CRDT.init(serializedData:)();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    sub_100CE12D8((uint64_t)v9, (uint64_t)v18, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_100CE144C(a1 + OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    sub_100CE12D8((uint64_t)v18, (uint64_t)v14, type metadata accessor for CRLUserBoardMetadataCRDTData);
    uint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_minRequiredVersionForFullFidelity);
    swift_release();
    type metadata accessor for CRLUserBoardMetadataData();
    uint64_t v19 = swift_allocObject();
    sub_100CE12D8((uint64_t)v5, v19 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
    sub_100CE12D8((uint64_t)v14, v19 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, type metadata accessor for CRLUserBoardMetadataCRDTData);
    *(void *)(v19 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity) = v20;
  }
  return v19;
}

uint64_t sub_100CE2DD0(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  for (uint64_t i = 0; v4; uint64_t i = 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    a2 = *(void *)(a2 + 24);
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      if (*(void *)(v7 + 16) == v6 && *(void *)(v7 + 24) == a2)
      {
        swift_release();
        return i;
      }
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      if (v9) {
        return i;
      }
      uint64_t v10 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      ++i;
      if (v10 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return i;
}

uint64_t sub_100CE2F04(unint64_t a1, uint64_t a2)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
    return 0;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
LABEL_3:
  type metadata accessor for UUID();
  uint64_t v5 = 0;
  a2 += *(void *)(*(void *)a2 + 104);
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    sub_100CDE0D8((unint64_t *)&qword_10167BDC0, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    if (v6) {
      return v5;
    }
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v7 == v4) {
      return 0;
    }
  }
}

id sub_100CE3094(char *a1, void *a2, uint64_t a3, void *a4)
{
  sqlite3_int64 v84 = a4;
  uint64_t v83 = a3;
  uint64_t v98 = a2;
  uint64_t v101 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v99 = *(void *)(v5 - 8);
  uint64_t v100 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v87 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  unint64_t v88 = (char *)&v80 - v10;
  uint64_t v102 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v102 - 8);
  __chkstk_darwin(v102, v12);
  uint64_t v96 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v14, v15);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_hasAttemptedVacuum] = 0;
  uint64_t v20 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_logCategory;
  uint64_t v21 = qword_10166FB70;
  uint64_t v22 = v4;
  if (v21 != -1) {
    swift_once();
  }
  swift_beginAccess();
  Swift::String v23 = (void *)static OS_os_log.boardStore;
  *(void *)&v4[v20] = static OS_os_log.boardStore;
  Swift::String v24 = &v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_storeName];
  *(void *)Swift::String v24 = 0x7461446472616F62;
  *((void *)v24 + 1) = 0xE900000000000061;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_recordIDsToOverwrite] = &_swiftEmptySetSingleton;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_syncHelper] = 0;
  uint64_t v25 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManagerLock;
  type metadata accessor for CRLUnfairLock();
  uint64_t v26 = swift_allocObject();
  id v27 = v23;
  Swift::String v28 = (_DWORD *)swift_slowAlloc();
  *Swift::String v28 = 0;
  *(void *)(v26 + 16) = v28;
  atomic_thread_fence(memory_order_acq_rel);
  *(void *)&v22[v25] = v26;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager] = 0;
  uint64_t v29 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock;
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = (_DWORD *)swift_slowAlloc();
  *uint64_t v31 = 0;
  *(void *)(v30 + 16) = v31;
  atomic_thread_fence(memory_order_acq_rel);
  *(void *)&v22[v29] = v30;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager] = 0;
  uint64_t v32 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManagerLock;
  uint64_t v33 = swift_allocObject();
  Swift::String v34 = (_DWORD *)swift_slowAlloc();
  *Swift::String v34 = 0;
  *(void *)(v33 + 16) = v34;
  atomic_thread_fence(memory_order_acq_rel);
  *(void *)&v22[v32] = v33;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager] = 0;
  uint64_t v35 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_assetUploadTracker;
  uint64_t v36 = sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v105 = _swiftEmptyArrayStorage;
  uint64_t v37 = sub_100CDE0D8((unint64_t *)&qword_101676560, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v38 = sub_1005057FC(&qword_101693440);
  uint64_t v39 = sub_100523288((unint64_t *)&qword_101676568, &qword_101693440);
  uint64_t v93 = v38;
  uint64_t v92 = v39;
  uint64_t v86 = v14;
  uint64_t v94 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  char v40 = *(void (**)(void))(v11 + 104);
  unsigned int v91 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v97 = v11 + 104;
  char v90 = (void (*)(char *, void, uint64_t))v40;
  v40(v96);
  char v85 = v19;
  uint64_t v95 = v36;
  uint64_t v41 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for CRLAssetUploadTracker();
  uint64_t v42 = swift_allocObject();
  type metadata accessor for CRLAssetUploadObserverManager();
  uint64_t v43 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v43 + 112) = [objc_allocWithZone((Class)NSHashTable) initWithOptions:5 capacity:1];
  *(void *)(v42 + 16) = v43;
  *(void *)(v42 + 24) = _swiftEmptyDictionarySingleton;
  *(void *)(v42 + 32) = _swiftEmptyDictionarySingleton;
  *(unsigned char *)(v42 + 40) = 0;
  *(void *)(v42 + 48) = v41;
  *(void *)&v22[v35] = v42;
  uint64_t v44 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_accountUtilities;
  type metadata accessor for CRLAccountUtilities();
  *(void *)&v22[v44] = swift_allocObject();
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions] = _swiftEmptyDictionarySingleton;
  sqlite3_int64 v45 = self;
  id v46 = [v45 standardUserDefaults];
  id v47 = [v46 objectForKey:@"CRLDeleteBoardCleanupTolerance"];

  if (v47)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v108 = 0u;
    long long v109 = 0u;
  }
  sub_10051B3EC((uint64_t)&v108, (uint64_t)&v105, &qword_101672BF0);
  char v48 = v101;
  if (*((void *)&v106 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v49 = v103;
      goto LABEL_11;
    }
  }
  else
  {
    sub_100522F00((uint64_t)&v105, &qword_101672BF0);
  }
  uint64_t v49 = 0x40AC200000000000;
LABEL_11:
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__deletedBoardsCleanupTolerance] = v49;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_deletedBoardsCleanupWorkItem] = 0;
  id v50 = [v45 standardUserDefaults];
  id v51 = [v50 objectForKey:@"CRLDeletedBoardTTL"];

  if (v51)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v108 = 0u;
    long long v109 = 0u;
  }
  sub_10051B3EC((uint64_t)&v108, (uint64_t)&v105, &qword_101672BF0);
  if (*((void *)&v106 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v52 = v103;
      goto LABEL_19;
    }
  }
  else
  {
    sub_100522F00((uint64_t)&v105, &qword_101672BF0);
  }
  uint64_t v52 = 0x4143C68000000000;
LABEL_19:
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__deletedBoardTTL] = v52;
  sqlite3_int64 v53 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
  char v85 = (char *)(v99 + 16);
  uint64_t v82 = v53;
  v53(&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_storeURL], v48, v100);
  char v54 = v98;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_temporaryDirectory] = v98;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_lastFetchResultsTime] = 0;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_sideStore] = v83;
  uint64_t v55 = v84;
  uint64_t v81 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue] = v84;
  id v56 = v54;
  swift_retain();
  id v57 = v55;
  *(void *)&long long v105 = OS_dispatch_queue.label.getter();
  *((void *)&v105 + 1) = v58;
  v59._uint64_t countAndFlagsBits = 0x646165722ELL;
  v59._object = (void *)0xE500000000000000;
  String.append(_:)(v59);
  id v60 = v57;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v105 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sqlite3_int64 v61 = v96;
  v90(v96, v91, v102);
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&long long v105 = OS_dispatch_queue.label.getter();
  *((void *)&v105 + 1) = v62;
  v63._uint64_t countAndFlagsBits = 0x65746972772ELL;
  v63._object = (void *)0xE600000000000000;
  String.append(_:)(v63);
  id v64 = v60;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v105 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v90(v61, v91, v102);
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (v98)
  {
    uint64_t v65 = v88;
    if (qword_10166F128 != -1) {
      swift_once();
    }
    uint64_t v66 = v100;
    uint64_t v67 = sub_100556B74(v100, (uint64_t)qword_10171A928);
    uint64_t v68 = v82;
    v82(v65, (char *)v67, v66);
    uint64_t v69 = v101;
  }
  else
  {
    uint64_t v65 = v88;
    uint64_t v69 = v101;
    URL.appendingPathComponent(_:)();
    uint64_t v66 = v100;
    uint64_t v68 = v82;
  }
  uint64_t v70 = v87;
  v68(v87, v65, v66);
  uint64_t v71 = *(void **)&v22[v81];
  type metadata accessor for SQLiteDatabase();
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = 0;
  *(unsigned char *)(v72 + 24) = 0;
  uint64_t v73 = v99;
  (*(void (**)(uint64_t, char *, uint64_t))(v99 + 32))(v72 + OBJC_IVAR____TtC8Freeform14SQLiteDatabase_url, v70, v66);
  *(void *)(v72 + 32) = v71;
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database] = v72;
  type metadata accessor for CRContext();
  uint64_t v107 = 0;
  long long v105 = 0u;
  long long v106 = 0u;
  id v74 = v71;
  uint64_t v75 = static CRContext.newTransientContext(uniqueAssetManager:encryptionDelegate:)();
  sub_100522F00((uint64_t)&v105, (uint64_t *)&unk_10169A780);
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext] = v75;
  id v76 = [self mainBundle];
  unint64_t v77 = *(void (**)(char *, uint64_t))(v73 + 8);
  v77(v65, v66);
  *(void *)&v22[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_assetBundle] = v76;

  v104.receiver = v22;
  v104.super_class = ObjectType;
  id v78 = [super init];
  v77(v69, v66);
  return v78;
}

id sub_100CE3C98(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v22 = a1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7, v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v16, a1, v11, v14);
  uint64_t v21 = sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_101676560, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1005057FC(&qword_101693440);
  sub_100523288((unint64_t *)&qword_101676568, &qword_101693440);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  uint64_t v17 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v18 = objc_allocWithZone((Class)type metadata accessor for CRLBoardDataStore(0));
  id v19 = sub_100CE3094(v16, 0, v25, v17);

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v22, v11);
  return v19;
}

id sub_100CE3FE0(uint64_t a1)
{
  uint64_t v48 = a1;
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v49 = *(void (***)(char *, uint64_t, uint64_t, void (*)(char *, void, uint64_t)))(v1 - 8);
  id v50 = (void (*)(char *, void, uint64_t))v1;
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1005057FC(&qword_101672E90);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  uint64_t v55 = v10;
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v53, v14);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v15 - 8, v16);
  id v17 = objc_allocWithZone((Class)CRLTemporaryDirectory);
  NSString v18 = String._bridgeToObjectiveC()();
  v56[0] = 0;
  id v19 = [v17 initWithSignature:v18 error:v56];

  id v20 = v56[0];
  id v51 = v19;
  if (v19)
  {
    id v46 = v4;
    uint64_t v21 = sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
    id v47 = v8;
    uint64_t v22 = v21;
    id v23 = v20;
    v56[0] = (id)OS_dispatch_queue.label.getter();
    v56[1] = v24;
    v25._uint64_t countAndFlagsBits = 0x656469732ELL;
    v25._object = (void *)0xE500000000000000;
    String.append(_:)(v25);
    static DispatchQoS.unspecified.getter();
    v56[0] = _swiftEmptyArrayStorage;
    uint64_t v26 = sub_100CDE0D8((unint64_t *)&qword_101676560, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    uint64_t v27 = sub_1005057FC(&qword_101693440);
    uint64_t v28 = sub_100523288((unint64_t *)&qword_101676568, &qword_101693440);
    v45[0] = v27;
    v45[1] = v26;
    uint64_t v48 = v28;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    int v29 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
    uint64_t v30 = *(void (**)(char *, void, uint64_t))(v55 + 104);
    v55 += 104;
    v30(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v54);
    v45[2] = v22;
    uint64_t v31 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v32 = (uint64_t)v47;
    v49[7](v47, 1, 1, v50);
    type metadata accessor for CRLSideStore();
    uint64_t v33 = swift_allocObject();
    id v34 = v31;
    id v35 = (id)v33;
    uint64_t v36 = v52;
    uint64_t v37 = sub_100941A80(v32, v34);
    if (v36)
    {
    }
    else
    {
      uint64_t v38 = (uint64_t)v37;
      id v50 = v30;
      LODWORD(v52) = v29;
      OS_dispatch_queue.sync<A>(execute:)();

      id v40 = v51;
      id v41 = [v51 URL];
      uint64_t v42 = v46;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v49 = (void (**)(char *, uint64_t, uint64_t, void (*)(char *, void, uint64_t)))v40;
      static DispatchQoS.unspecified.getter();
      v56[0] = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v50(v13, v52, v54);
      id v34 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
      id v43 = objc_allocWithZone((Class)type metadata accessor for CRLBoardDataStore(0));
      id v35 = sub_100CE3094(v42, v40, v38, v34);
      id v44 = v49;

      swift_release();
    }
  }
  else
  {
    id v35 = v56[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v35;
}

uint64_t sub_100CE45D0(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = sub_100CE2DD0(v6, a2);
  char v9 = v8;
  uint64_t v10 = v3;
  swift_bridgeObjectRelease();
  if (v3) {
    return v7;
  }
  if ((v9 & 1) == 0)
  {
    unint64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_61;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_62:
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 != v28) {
        goto LABEL_6;
      }
    }
    else if (v11 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      uint64_t v12 = *(void *)(a2 + 16);
      a2 = *(void *)(a2 + 24);
      unint64_t v11 = v7 + 5;
      uint64_t v30 = v10;
      while (1)
      {
        unint64_t v13 = v11 - 4;
        uint64_t v14 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
          if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_52;
          }
          uint64_t v15 = *(void *)(v14 + 8 * v11);
          swift_retain();
        }
        if (*(void *)(v15 + 16) == v12 && *(void *)(v15 + 24) == a2)
        {
          swift_release();
          goto LABEL_39;
        }
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        if (v17) {
          goto LABEL_39;
        }
        if (v13 != v7) {
          break;
        }
LABEL_35:
        if (__OFADD__(v7++, 1)) {
          goto LABEL_54;
        }
LABEL_39:
        unint64_t v24 = v11 - 3;
        if (__OFADD__(v13, 1)) {
          goto LABEL_53;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v25 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v24 == v25) {
          return v7;
        }
      }
      uint64_t v10 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v10 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_21:
          if ((v13 & 0x8000000000000000) != 0) {
            goto LABEL_57;
          }
          if (v13 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_58;
          }
          uint64_t v19 = *(void *)(v10 + 8 * v11);
          swift_retain();
          goto LABEL_24;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0) {
          goto LABEL_55;
        }
        if (v7 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_56;
        }
        uint64_t v18 = *(void *)(v10 + 8 * v7 + 32);
        swift_retain();
        if ((v10 & 0xC000000000000001) == 0) {
          goto LABEL_21;
        }
      }
      uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = *a1;
LABEL_24:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        uint64_t v10 = a3(v10);
        *a1 = v10;
      }
      *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v19;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v21 = *a1;
      int v22 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v21;
      if (!v22 || v21 < 0 || (v21 & 0x4000000000000000) != 0)
      {
        uint64_t v21 = a3(v21);
        *a1 = v21;
      }
      uint64_t v10 = v30;
      if ((v13 & 0x8000000000000000) != 0) {
        goto LABEL_59;
      }
      if (v13 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_60;
      }
      *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v11) = v18;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_35;
    }
    return v7;
  }
  unint64_t v26 = *a1;
  if (!(v26 >> 62)) {
    return *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t sub_100CE4940(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = sub_100CE2F04(v6, a2);
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v3) {
    return v7;
  }
  if ((v9 & 1) == 0)
  {
    unint64_t i = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (i != v23) {
        goto LABEL_6;
      }
    }
    else if (i != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      type metadata accessor for UUID();
      for (unint64_t i = v7 + 5; ; ++i)
      {
        unint64_t v11 = i - 4;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v11 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v11 >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_45;
          }
          swift_retain();
        }
        sub_100CDE0D8((unint64_t *)&qword_10167BDC0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        if ((v12 & 1) == 0) {
          break;
        }
LABEL_32:
        unint64_t v20 = i - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v21 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v20 == v21) {
          return v7;
        }
      }
      if (v11 == v7)
      {
LABEL_31:
        if (__OFADD__(v7++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      }
      uint64_t v13 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v13 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v11 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          uint64_t v15 = *(void *)(v13 + 8 * i);
          swift_retain();
          goto LABEL_20;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v7 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        uint64_t v14 = *(void *)(v13 + 8 * v7 + 32);
        swift_retain();
        if ((v13 & 0xC000000000000001) == 0) {
          goto LABEL_17;
        }
      }
      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v13 = *a1;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v13;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v13 < 0 || (v13 & 0x4000000000000000) != 0)
      {
        uint64_t v13 = a3(v13);
        *a1 = v13;
      }
      *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v15;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v17 = *a1;
      int v18 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v17;
      if (!v18 || v17 < 0 || (v17 & 0x4000000000000000) != 0)
      {
        uint64_t v17 = a3(v17);
        *a1 = v17;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v11 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v14;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v7;
  }
  if (!((unint64_t)*a1 >> 62)) {
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_100CE4D08()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)&v0[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v0;
  aBlock[4] = sub_100CE9138;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(void *)"";
  void aBlock[2] = sub_100679958;
  aBlock[3] = &unk_101529950;
  char v12 = _Block_copy(aBlock);
  uint64_t v13 = v0;
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_100CDE0D8((unint64_t *)&qword_1016747E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1005057FC((uint64_t *)&unk_1016725D0);
  sub_100523288((unint64_t *)&qword_1016747F0, (uint64_t *)&unk_1016725D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

unint64_t sub_100CE4FC8(unint64_t result)
{
  if (result >= 0x11) {
    return 17;
  }
  return result;
}

uint64_t sub_100CE4FD8(void *a1, uint64_t a2)
{
  id v59 = a1;
  uint64_t v3 = sub_1005057FC(&qword_101699628);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRLBoardCRDTData(0);
  uint64_t v52 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v50 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  id v51 = (char *)&v47 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v30 = (char *)&v47 - v20;
  uint64_t v21 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v21 - 8, v22);
  uint64_t v49 = a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
  uint64_t v56 = (uint64_t)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100CE144C(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier, v56, type metadata accessor for CRLBoardIdentifier);
  uint64_t v24 = (long long *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
  uint64_t v25 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
  uint64_t v54 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 8);
  uint64_t v55 = v25;
  uint64_t v53 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
  uint64_t v26 = a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
  swift_beginAccess();
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  id v57 = v30;
  v29(v30, v26, v13);
  uint64_t v27 = a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
  swift_beginAccess();
  uint64_t v58 = v17;
  v29(v17, v27, v13);
  uint64_t v28 = 0;
  LODWORD(v29) = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone);
  LODWORD(v30) = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_hideFromRecentlyDeleted);
  uint64_t v31 = (uint64_t *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  unint64_t v32 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
  if (v32 >> 60 != 15)
  {
    uint64_t v33 = *v31;
    sub_1005FA2A0(*v31, *(void *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8));
    sub_1005FA2A0(v33, v32);
    sub_100CDE0D8((unint64_t *)&unk_10169A0D0, (void (*)(uint64_t))type metadata accessor for CRLBoardCRDTData);
    swift_retain();
    CRDT.init(serializedData:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v6, 0, 1, v7);
    int v48 = (int)v30;
    uint64_t v30 = v51;
    sub_100CE12D8((uint64_t)v6, (uint64_t)v51, type metadata accessor for CRLBoardCRDTData);
    long long v47 = *v24;
    uint64_t v34 = *((void *)v24 + 2);
    uint64_t v35 = v50;
    sub_100CE144C((uint64_t)v30, v50, type metadata accessor for CRLBoardCRDTData);
    uint64_t v36 = (void (**)(char *, uint64_t, uint64_t))(v49
                                                         + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0)
                                                                  + 20));
    LODWORD(v52) = v29;
    uint64_t v29 = *v36;
    uint64_t v37 = v36[1];
    type metadata accessor for CRLBoardData(0);
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = 7;
    *(_OWORD *)(v28 + 24) = v47;
    *(void *)(v28 + 40) = v34;
    sub_100CE12D8(v35, v28 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
    swift_bridgeObjectRetain();
    swift_release();
    sub_100514260(v33, v32);
    uint64_t v38 = (void (**)(char *, uint64_t, uint64_t))(v28 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    *uint64_t v38 = v29;
    v38[1] = v37;
    LOBYTE(v29) = v52;
    uint64_t v39 = (uint64_t)v30;
    LOBYTE(v30) = v48;
    sub_100CE14B4(v39, type metadata accessor for CRLBoardCRDTData);
  }
  uint64_t v40 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges);
  uint64_t v41 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
  unint64_t v42 = *(void *)(a2 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8);
  type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
  uint64_t v43 = swift_allocObject();
  id v44 = v59;
  sub_1005FA2A0(v41, v42);
  uint64_t v45 = sub_100CD8B04((uint64_t)v44, v56, v55, v54, v53, (uint64_t)v57, (uint64_t)v58, (char)v29, (char)v30, v28, v40, v41, v42, (uint64_t)&_swiftEmptySetSingleton, v43);
  swift_release();
  return v45;
}

uint64_t sub_100CE55AC()
{
  return sub_100CE89D4(&qword_101699650);
}

uint64_t sub_100CE55B8()
{
  return sub_100CE8ABC(&qword_101699650, (void (*)(uint64_t))sub_100C50624);
}

uint64_t sub_100CE55D8()
{
  return sub_100CE92AC(&qword_101699658);
}

uint64_t sub_100CE55E4()
{
  return sub_100CE5630(&qword_101699658, (void (*)(void))sub_100C4ED78);
}

uint64_t sub_100CE5604()
{
  return sub_100CE92AC(&qword_101699660);
}

uint64_t sub_100CE5610()
{
  return sub_100CE5630(&qword_101699660, (void (*)(void))sub_100C468A4);
}

uint64_t sub_100CE5630(uint64_t *a1, void (*a2)(void))
{
  uint64_t v5 = *(void *)(sub_1005057FC(a1) - 8);
  return sub_100C71E78(*(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2, a1);
}

uint64_t sub_100CE56A4()
{
  return sub_100CE92AC(&qword_101699668);
}

uint64_t sub_100CE56B0()
{
  return sub_100CE5630(&qword_101699668, (void (*)(void))sub_100C70F48);
}

uint64_t sub_100CE56D0()
{
  return sub_100CE92AC(&qword_101699660);
}

uint64_t sub_100CE56DC()
{
  return sub_100CE5630(&qword_101699660, (void (*)(void))sub_100C4770C);
}

uint64_t sub_100CE56FC()
{
  return sub_1006FA134(&qword_101699670);
}

uint64_t sub_100CE5708(uint64_t a1, char a2)
{
  return sub_100CE5714(a1, a2, &qword_101699670);
}

uint64_t sub_100CE5714(uint64_t a1, char a2, uint64_t *a3)
{
  char v6 = a2 & 1;
  uint64_t v7 = *(void *)(sub_1005057FC(a3) - 8);
  return sub_100C9B460(a1, v6, v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a3);
}

uint64_t sub_100CE5794()
{
  return sub_100C72A98(*(void *)(v0 + 16), *(void (**)(double *, void))(v0 + 24));
}

uint64_t sub_100CE57A0()
{
  return sub_1006FA134(&qword_101699678);
}

uint64_t sub_100CE57B0(void *a1, char a2)
{
  char v3 = a2 & 1;
  sub_1005057FC(&qword_101699678);
  return sub_100C7CA34(a1, v3);
}

uint64_t sub_100CE5828()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (v3 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v5 + v0;
  unint64_t v7 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v0 + v3, v8);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, v7 + 16, v4);
}

uint64_t sub_100CE5950()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(unsigned __int8 *)(v0 + v3);
  uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFFF8) + v0 + 8);
  unint64_t v7 = *(uint64_t (**)(uint64_t, void))(v0 + (((v3 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_100C7C2F8(v4, v0 + v2, v5, v6, v7);
}

uint64_t sub_100CE59F4()
{
  return sub_100C7C53C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void **)(v0 + 40)) & 1;
}

void sub_100CE5A20()
{
}

void sub_100CE5A44(void *a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  sub_100C44938(*(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1, a2);
}

uint64_t sub_100CE5AC4()
{
  return sub_1006FA134(&qword_101699678);
}

uint64_t sub_100CE5AD0()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100CE5BE8()
{
  return sub_100CE9708(type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100C7B478);
}

uint64_t sub_100CE5C14()
{
  return sub_100CE93C8(&qword_101699680);
}

uint64_t sub_100CE5C20()
{
  return sub_100CE5C38(sub_100C5443C);
}

uint64_t sub_100CE5C38(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(sub_1005057FC(&qword_101699680) - 8);
  return sub_100C70E88(*(void *)(v1 + 16), v1 + v4, v1 + ((v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a1);
}

uint64_t sub_100CE5D08()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CE5D40()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100CE5D80(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_100528488;
  return sub_100F516C8(a1, v4, v5, v6);
}

uint64_t sub_100CE5E34()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100CE5E7C()
{
  sub_100C43E5C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100CE5E8C@<X0>(unsigned char *a1@<X8>)
{
  return sub_100CB3360(*(void *)(v1 + 16), a1);
}

uint64_t sub_100CE5EA8()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  unint64_t v9 = (*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v3, v10);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  if (*(void *)(v0 + v9)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v9 + 16, v2 | v7 | 7);
}

void sub_100CE6044()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = *(void (**)(void))(v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100C752FC(v6, v0 + v2, v0 + v5, v7);
}

uint64_t sub_100CE6144()
{
  sub_100C7550C(*(void *)(v0 + 24), *(void *)(v0 + 32));
  return 1;
}

unint64_t sub_100CE6174()
{
  unint64_t result = qword_1016996F8;
  if (!qword_1016996F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016996F8);
  }
  return result;
}

uint64_t sub_100CE61C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100C5B964(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), *(void *)(v3 + 40));
}

uint64_t sub_100CE61D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100C5C56C(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_100CE61E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100CE6228()
{
  sub_100C44348(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(unsigned char *)(v0 + 33), *(void *)(v0 + 40));
}

uint64_t sub_100CE623C()
{
  uint64_t v1 = (int *)(type metadata accessor for CRLBoardDataStoreChangeSet(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v6 = v0 + v3;
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();
  v9(v6 + v1[8], v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100CE63EC()
{
  return sub_100CE9708(type metadata accessor for CRLBoardDataStoreChangeSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100C7CE4C);
}

uint64_t sub_100CE6418()
{
  sub_100C7D074(*(unsigned char **)(v0 + 24));
  return 1;
}

uint64_t sub_100CE6444()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CE647C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100CE6550(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unint64_t v9 = v2;
  v9[1] = sub_100528D08;
  return sub_100671CAC(a1, v5, v6, v7, v8);
}

uint64_t sub_100CE664C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CE6684()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v4)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v4 + 16, v2 | 7);
}

uint64_t sub_100CE6794()
{
  return sub_100CE9708(type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100C6A82C);
}

uint64_t sub_100CE67C0()
{
  return sub_100C6AC70(*(void *)(v0 + 16)) & 1;
}

uint64_t sub_100CE67E0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = sub_1005057FC(&qword_101699770);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 16) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100CE6954()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1005057FC(&qword_101699770);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + v3);
  unint64_t v6 = *(void *)(v0 + v3 + 8);

  return sub_100C90A74(v4, v0 + v2, v5, v6);
}

uint64_t sub_100CE6A3C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100CE6B3C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + v3 + 8);
  uint64_t v7 = *(uint64_t (**)(void, void))(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_100C8F8F0(v4, v0 + v2, v5, v6, v7);
}

uint64_t sub_100CE6BE0()
{
  return sub_100CE6BFC() & 1;
}

uint64_t sub_100CE6BFC()
{
  sub_100C8ECC0(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
  return 1;
}

uint64_t sub_100CE6C2C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = sub_1005057FC(&qword_101699770);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100CE6D88()
{
  return sub_100CE6DBC((uint64_t (*)(void))&type metadata accessor for UUID, &qword_101699770, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_100C9055C);
}

uint64_t sub_100CE6DBC(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_1005057FC(a2) - 8);
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = v3 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return a3(v9, v3 + v6, v10);
}

uint64_t sub_100CE6EB0()
{
  return sub_100CE6EC8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100C79B38);
}

uint64_t sub_100CE6EC8(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(sub_1005057FC(&qword_10167F0F0) - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4, v5);
}

uint64_t sub_100CE6F48()
{
  return sub_100CE6EC8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100C791DC);
}

uint64_t sub_100CE6F60()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);

  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v0 + v3, v9);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v0 + v4);
  unint64_t v11 = *(void *)(v0 + v4 + 48);
  if (v11 >> 60 != 15) {
    sub_100510084(v10[5], v11);
  }
  unint64_t v12 = v10[8];
  if (v12 >> 60 != 15) {
    sub_100510084(v10[7], v12);
  }
  uint64_t v13 = v2 | v7 | 7;
  uint64_t v14 = (v4 + v7 + 73) & ~v7;
  uint64_t v15 = v14 + v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v14, v5);

  return _swift_deallocObject(v0, v15, v13);
}

uint64_t sub_100CE7128()
{
  type metadata accessor for CRLBoardIdentifier(0);
  sub_1005057FC(&qword_10167F0F0);

  return sub_100C77E24();
}

void *sub_100CE720C(void *a1)
{
  uint64_t v2 = a1[7];
  unint64_t v3 = a1[8];
  sub_1005FA2A0(a1[5], a1[6]);
  sub_1005FA2A0(v2, v3);
  return a1;
}

uint64_t sub_100CE7254()
{
  sub_100C78028(*(void *)(v0 + 24), *(long long **)(v0 + 32));
  return 1;
}

uint64_t sub_100CE7288()
{
  return sub_100CE6EC8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100C7A4A0);
}

unint64_t sub_100CE72A0()
{
  unint64_t result = qword_1016997A0;
  if (!qword_1016997A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016997A0);
  }
  return result;
}

uint64_t sub_100CE72F4()
{
  return sub_100CE93C8(&qword_10167F0F0);
}

uint64_t sub_100CE7300()
{
  return sub_100CE6DBC(type metadata accessor for CRLBoardIdentifier, &qword_10167F0F0, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_100C89AD8);
}

uint64_t sub_100CE7334()
{
  sub_100C8757C(*(void *)(v0 + 24));
  return 1;
}

uint64_t type metadata accessor for CRLBoardDataStore.KeyValueTableKey(uint64_t a1)
{
  return sub_100512D5C(a1, qword_101699A28);
}

uint64_t sub_100CE7380()
{
  return sub_1006FA134(&qword_10167F0F0);
}

uint64_t sub_100CE738C()
{
  return sub_100CE7620(48);
}

uint64_t sub_100CE7394()
{
  return sub_100C6C514(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_100CE73A0()
{
  return sub_1006FA134(&qword_10167F0F0);
}

uint64_t sub_100CE73AC()
{
  return sub_100CE7620(48);
}

void sub_100CE73B4()
{
  sub_100C6EDEC(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_100CE73C0()
{
  return sub_1006FA134(&qword_10167F0F0);
}

uint64_t sub_100CE73CC()
{
  return sub_100CE7620(49);
}

uint64_t sub_100CE73D4()
{
  return sub_100C698D4(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t sub_100CE73E4()
{
  return sub_100CE93C8(&qword_10167F0F0);
}

uint64_t sub_100CE73F0()
{
  return sub_100CE6DBC(type metadata accessor for CRLBoardIdentifier, &qword_10167F0F0, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_100C89114);
}

uint64_t sub_100CE7424()
{
  return sub_100C892BC(*(void *)(v0 + 16), *(void *)(v0 + 24)) & 1;
}

uint64_t sub_100CE7448()
{
  return sub_100CE6EC8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100C8852C);
}

uint64_t sub_100CE7460()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100CE7550(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100C89054(a1, a2, v6);
}

uint64_t sub_100CE75D4()
{
  return sub_100CE6EC8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100C77054);
}

uint64_t sub_100CE75EC()
{
  return sub_1006FA134(&qword_10167F0F0);
}

uint64_t sub_100CE75F8()
{
  return sub_100CE7620(48);
}

void sub_100CE7600()
{
  sub_100C7603C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_100CE760C()
{
  return sub_1006FA134(&qword_10167F0F0);
}

uint64_t sub_100CE7618()
{
  return sub_100CE7620(48);
}

uint64_t sub_100CE7620(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100CE767C()
{
  return sub_100C70064(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

void sub_100CE7688(uint64_t *a1@<X8>)
{
  sub_100C9E590(*(void **)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(uint64_t))sub_100C9DE68, (uint64_t (*)(uint64_t, id))sub_100CDBB74, a1);
}

uint64_t sub_100CE76D0()
{
  return sub_100C74DB4(*(void *)(v0 + 16), *(void (**)(double *, void))(v0 + 24));
}

unint64_t sub_100CE76DC()
{
  unint64_t result = qword_1016997C0;
  if (!qword_1016997C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016997C0);
  }
  return result;
}

uint64_t sub_100CE7730(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100522D34(&qword_101677400);
    sub_100CDE0D8(a2, (void (*)(uint64_t))type metadata accessor for CRLBoardIdentifier);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100CE77C4()
{
  return sub_100CE93C8(&qword_101699680);
}

uint64_t sub_100CE77D0()
{
  return sub_100CE5C38(sub_100C53810);
}

void sub_100CE77E8()
{
}

void sub_100CE7804()
{
  uint64_t v1 = (char *)*(id *)(v0 + 16);
  sub_10054813C(v1, (uint64_t)v1);
}

void sub_100CE7848()
{
  uint64_t v1 = (char *)*(id *)(v0 + 16);
  sub_100547DFC(v1);
}

void sub_100CE788C()
{
  uint64_t v1 = (char *)*(id *)(v0 + 16);
  sub_10054709C(v1, (uint64_t)v1);
}

void sub_100CE78D0()
{
}

uint64_t sub_100CE7920()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100528D08;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1016997D8 + dword_1016997D8);
  return v6(v2, v3, v4);
}

uint64_t sub_100CE79DC(uint64_t a1)
{
  return sub_100C8E2F8(a1, *(void **)(v1 + 16), *(char **)(v1 + 24));
}

uint64_t sub_100CE79E4()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);

  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v3, v10);
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload <= 1)
  {
  }
  uint64_t v11 = (v3 + v4 + v7) & ~v7;
  uint64_t v12 = v11 + v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v11, v5);

  return _swift_deallocObject(v0, v12, v2 | v7 | 7);
}

uint64_t sub_100CE7BA8()
{
  return sub_100CE6DBC(type metadata accessor for CRLBoardDataStore.KeyValueTableKey, &qword_10167F0F0, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_100C8E7BC);
}

uint64_t sub_100CE7BE0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100528D08;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1016997E8 + dword_1016997E8);
  return v6(v2, v3, v4);
}

uint64_t sub_100CE7C9C(uint64_t a1)
{
  return sub_100C8D0CC(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_101529230, (uint64_t)sub_100CE7DB8, (uint64_t)&unk_101529248);
}

uint64_t sub_100CE7CE0()
{
  uint64_t v1 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100CE7DB8()
{
  return sub_100CE6EC8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100C8D460);
}

uint64_t sub_100CE7DD4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100528D08;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_101699808 + dword_101699808);
  return v6(v2, v3, v4);
}

uint64_t sub_100CE7E90()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (v4 + v2 + v3) & ~v2;
  uint64_t v6 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);

  uint64_t v10 = (id *)(v0 + v3);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(id *, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload <= 1)
  {
  }
  unsigned int v13 = swift_getEnumCaseMultiPayload();
  if (v13 == 2)
  {
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v0 + v5, v14);
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRelease();
  }
  else if (v13 <= 1)
  {
  }
  uint64_t v15 = (v5 + v4 + v8) & ~v8;
  uint64_t v16 = v15 + v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v15, v6);

  return _swift_deallocObject(v0, v16, v2 | v8 | 7);
}

uint64_t sub_100CE80E8()
{
  type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  sub_1005057FC(&qword_10167F0F0);

  return sub_100C8C46C();
}

uint64_t sub_100CE81CC()
{
  return sub_100C8C634(*(void *)(v0 + 16), *(void **)(v0 + 24)) & 1;
}

uint64_t sub_100CE81F4()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100CE823C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100528D08;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_101699828 + dword_101699828);
  return v6(v2, v3, v4);
}

uint64_t sub_100CE82F8(uint64_t a1)
{
  return sub_100C8B2B0(a1, *(void **)(v1 + 16), *(char **)(v1 + 24));
}

uint64_t sub_100CE8300()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);

  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v3, v10);
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload <= 1)
  {
  }
  uint64_t v11 = v2 | v7 | 7;
  unint64_t v12 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = (v12 + v7 + 8) & ~v7;

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v13, v5);

  return _swift_deallocObject(v0, v13 + v8, v11);
}

uint64_t sub_100CE84D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1005057FC(&qword_10167F0F0);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + v3);

  return sub_100C8B78C(v4, v0 + v2, v5);
}

uint64_t sub_100CE85BC()
{
  return 1;
}

uint64_t sub_100CE85E8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CE85F8(uint64_t a1, uint64_t a2)
{
  return sub_10079D8A8(*(void *)(v2 + 16), a2);
}

uint64_t sub_100CE8624()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100CE866C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100528D08;
  uint64_t v7 = (uint64_t (*)(int, uint64_t, void *, void *))((char *)&dword_101699848 + dword_101699848);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100CE8734(uint64_t a1)
{
  return sub_100C89C80(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100CE8740()
{
  uint64_t v1 = sub_1005057FC(&qword_10167F0F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100CE8818()
{
  sub_1005057FC(&qword_10167F0F0);
  unint64_t v1 = v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = v0[4];

  return sub_100C8A028(v1, v2, v3);
}

uint64_t sub_100CE8884()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100CE88C4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100528D08;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_101699870 + dword_101699870);
  return v6(v2, v3, v4);
}

uint64_t sub_100CE8980(uint64_t a1)
{
  return sub_100C724E8(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), &qword_101699890, (uint64_t)&unk_101529578, (uint64_t)sub_100CE8A9C, (uint64_t)&unk_101529590);
}

uint64_t sub_100CE89C8()
{
  return sub_100CE89D4(&qword_101699890);
}

uint64_t sub_100CE89D4(uint64_t *a1)
{
  uint64_t v2 = sub_1005057FC(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100CE8A9C()
{
  return sub_100CE8ABC(&qword_101699890, (void (*)(uint64_t))sub_100C489C4);
}

uint64_t sub_100CE8ABC(uint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v5 = *(void *)(sub_1005057FC(a1) - 8);
  return sub_100C72874(*(void *)(v2 + 16), *(void *)(v2 + 24), v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2, a1);
}

uint64_t sub_100CE8B30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100C489C4(*(void **)(v1 + 24));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100CE8B64()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CE8B9C()
{
  return sub_100CE8BB8(40);
}

void sub_100CE8BA4()
{
  sub_100C6D4CC(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100CE8BB0()
{
  return sub_100CE8BB8(48);
}

uint64_t sub_100CE8BB8(uint64_t a1)
{
  swift_release();
  if (*(void *)(v1 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v1, a1, 7);
}

void sub_100CE8C0C()
{
  sub_100C70764(*(double *)(v0 + 40), *(void *)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100CE8C1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100C542E4(*(void *)(v1 + 24));
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

void sub_100CE8C50()
{
}

uint64_t sub_100CE8C68()
{
  return sub_100C88328(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40)) & 1;
}

void sub_100CE8C8C()
{
  uint64_t v1 = (char *)*(id *)(v0 + 16);
  sub_100546594(v1);
}

void sub_100CE8CD0()
{
}

void sub_100CE8D28()
{
}

uint64_t sub_100CE8D50()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100528D08;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_101699898 + dword_101699898);
  return v5(v2, v3);
}

uint64_t sub_100CE8E04(uint64_t a1)
{
  return sub_100C39638(a1);
}

uint64_t sub_100CE8E0C()
{
  return sub_1006FA134(&qword_101682E08);
}

uint64_t sub_100CE8E1C()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 24);
  uint64_t v2 = sub_100C3919C(1);
  return v1(v2);
}

uint64_t sub_100CE8E64()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100528D08;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1016998B8 + dword_1016998B8);
  return v5(v2, v3);
}

uint64_t sub_100CE8F18(uint64_t a1)
{
  return sub_100C38B18(a1);
}

uint64_t sub_100CE8F20()
{
  return sub_1006FA134(&qword_10167F0F0);
}

uint64_t sub_100CE8F30()
{
  return sub_100C3839C(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

void sub_100CE8F3C(double **a1@<X8>)
{
}

uint64_t sub_100CE8F58(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return sub_10052E1EC();
  }
  return result;
}

uint64_t sub_100CE8F6C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CE8FAC(uint64_t a1)
{
  return sub_100CA2580(a1);
}

void sub_100CE8FB4(uint64_t a1, unint64_t a2, void *a3, unint64_t a4, void *a5)
{
  if ((~a2 & 0xF000000000000007) != 0) {
    sub_1008D0DA8(a1, a2, a3, a4, a5);
  }
}

void sub_100CE8FC8(uint64_t a1, unint64_t a2, void *a3, unint64_t a4, void *a5)
{
  if ((~a2 & 0xF000000000000007) != 0) {
    sub_1008D0CD8(a1, a2, a3, a4, a5);
  }
}

void sub_100CE8FE0()
{
}

uint64_t sub_100CE9004(uint64_t a1, uint64_t a2)
{
  return sub_100CE901C(a1, a2);
}

uint64_t sub_100CE901C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1006E3E24(a1, *(void *)(v2 + 16));
  if (result) {
    return sub_100CA5CEC(a2);
  }
  return result;
}

unint64_t sub_100CE9068()
{
  unint64_t result = qword_101699940;
  if (!qword_101699940)
  {
    sub_100522D34(&qword_10169A1D0);
    sub_100523288(&qword_10169A210, (uint64_t *)&unk_1016A8B60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101699940);
  }
  return result;
}

uint64_t sub_100CE9100()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CE9138()
{
  return sub_100CA971C(*(void *)(v0 + 16));
}

uint64_t sub_100CE9144()
{
  uint64_t v1 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_100CE923C()
{
}

uint64_t sub_100CE9260()
{
  return sub_100CE93C8(&qword_101699968);
}

uint64_t sub_100CE926C()
{
  return sub_100CE6DBC(type metadata accessor for CRLBoardIdentifier, &qword_101699968, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_100C76EB8);
}

uint64_t sub_100CE92A0()
{
  return sub_100CE92AC(&qword_101699660);
}

uint64_t sub_100CE92AC(uint64_t *a1)
{
  uint64_t v2 = sub_1005057FC(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100CE9374()
{
  return sub_100CE5630(&qword_101699660, (void (*)(void))sub_100C48084);
}

uint64_t sub_100CE9394()
{
  return sub_100C88014(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40)) & 1;
}

uint64_t sub_100CE93BC()
{
  return sub_100CE93C8(&qword_101699978);
}

uint64_t sub_100CE93C8(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = sub_1005057FC(a1);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v5 + v6 + v9) & ~v9;
  uint64_t v11 = v10 + *(void *)(v8 + 64);
  uint64_t v12 = v4 | v9 | 7;

  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v1 + v5, v13);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1 + v10, v7);

  return _swift_deallocObject(v1, v11, v12);
}

uint64_t sub_100CE9550()
{
  return sub_100CE6DBC(type metadata accessor for CRLBoardIdentifier, &qword_101699978, (uint64_t (*)(uint64_t, unint64_t, uint64_t))sub_100C71850);
}

unint64_t sub_100CE9584()
{
  unint64_t result = qword_101699980;
  if (!qword_101699980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101699980);
  }
  return result;
}

uint64_t sub_100CE95D8()
{
  return sub_1006FA134(&qword_101699988);
}

uint64_t sub_100CE95E4(uint64_t a1, char a2)
{
  return sub_100CE5714(a1, a2, &qword_101699988);
}

uint64_t sub_100CE95F0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100CE96DC()
{
  return sub_100CE9708((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100C9B124);
}

uint64_t sub_100CE9708(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = v2 + v4;
  uint64_t v7 = (uint64_t *)(v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return a2(v5, v6, v8, v9);
}

char *sub_100CE97B8(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
      uint64_t v13 = &a1[v12];
      uint64_t v14 = (char **)((char *)a2 + v12);
      uint64_t v15 = v14[1];
      *(void *)uint64_t v13 = *v14;
      *((void *)v13 + 1) = v15;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = *a2;
      *(void *)a1 = *a2;
      uint64_t v9 = v8;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_100CE9920(void **a1)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(void **, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    type metadata accessor for CRLBoardIdentifierStorage(0);
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload <= 1)
  {
    uint64_t v3 = *a1;
  }
}

void **sub_100CE99E0(void **a1, void **a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    uint64_t v10 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
    uint64_t v11 = (void **)((char *)a1 + v10);
    uint64_t v12 = (void **)((char *)a2 + v10);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    id v8 = v7;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void **sub_100CE9B04(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100CE14B4((uint64_t)a1, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
      uint64_t v11 = (void **)((char *)a1 + v10);
      uint64_t v12 = (void **)((char *)a2 + v10);
      *uint64_t v11 = *v12;
      v11[1] = v12[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = *a2;
      *a1 = *a2;
      id v8 = v7;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *sub_100CE9C54(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = type metadata accessor for CRLBoardIdentifierStorage(0);
    *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_100CE9D20(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100CE14B4((uint64_t)a1, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = type metadata accessor for CRLBoardIdentifierStorage(0);
      *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100CE9E10()
{
  uint64_t result = type metadata accessor for CRLBoardIdentifierStorage(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for CRLBoardDataStore.CRLBoardDataStoreMetadata(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLBoardDataStore.CRLBoardDataStoreMetadata(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLBoardDataStore.CRLBoardDataStoreMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CEA024);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLBoardDataStore.CRLBoardDataStoreMetadata()
{
  return &type metadata for CRLBoardDataStore.CRLBoardDataStoreMetadata;
}

uint64_t getEnumTagSinglePayload for CRLBoardDataStore.CRLBoardColumn(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CRLBoardDataStore.CRLBoardColumn(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *uint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CEA1B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLBoardDataStore.CRLBoardColumn()
{
  return &type metadata for CRLBoardDataStore.CRLBoardColumn;
}

unsigned char *storeEnumTagSinglePayload for CRLBoardDataStore.Table(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CEA2BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLBoardDataStore.Table()
{
  return &type metadata for CRLBoardDataStore.Table;
}

unsigned char *storeEnumTagSinglePayload for CRLBoardDataStore.SchemaVersion(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CEA3C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLBoardDataStore.SchemaVersion()
{
  return &type metadata for CRLBoardDataStore.SchemaVersion;
}

unint64_t sub_100CEA3FC()
{
  unint64_t result = qword_101699A60;
  if (!qword_101699A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101699A60);
  }
  return result;
}

uint64_t sub_100CEA450()
{
  return sub_100523288(&qword_101699A68, &qword_101699A70);
}

unint64_t sub_100CEA490()
{
  unint64_t result = qword_101699A78;
  if (!qword_101699A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101699A78);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CRLBoardDatabaseFetchRequest.CRLBoardItemDataFetchType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for CRLBoardDatabaseFetchRequest.CRLBoardItemDataFetchType(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for CRLBoardDatabaseFetchRequest.CRLBoardItemDataFetchType(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for CRLBoardDatabaseFetchRequest.CRLBoardItemDataFetchType(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CRLBoardDatabaseFetchRequest.CRLBoardItemDataFetchType()
{
  return &type metadata for CRLBoardDatabaseFetchRequest.CRLBoardItemDataFetchType;
}

unint64_t destroy for CRLBoardDatabaseFetchRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s8Freeform28CRLBoardDatabaseFetchRequestVwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  if (v4 >= 2) {
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for CRLBoardDatabaseFetchRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = (unint64_t *)(a1 + 8);
  unint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >= 2uLL)
  {
    if (v5 >= 2)
    {
      *unint64_t v4 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100522F00(a1 + 8, &qword_101699A80);
      *unint64_t v4 = *(void *)(a2 + 8);
    }
  }
  else
  {
    *unint64_t v4 = v5;
    if (v5 >= 2) {
      swift_bridgeObjectRetain();
    }
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for CRLBoardDatabaseFetchRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  unint64_t v4 = (unint64_t *)(a1 + 8);
  unint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >= 2uLL)
  {
    if (v5 >= 2)
    {
      *unint64_t v4 = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_100522F00(a1 + 8, &qword_101699A80);
  }
  *unint64_t v4 = v5;
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLBoardDatabaseFetchRequest(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLBoardDatabaseFetchRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLBoardDatabaseFetchRequest()
{
  return &type metadata for CRLBoardDatabaseFetchRequest;
}

ValueMetadata *type metadata accessor for CRLBoardDatabaseFetchRequest.CRLBoardDataFetchType()
{
  return &type metadata for CRLBoardDatabaseFetchRequest.CRLBoardDataFetchType;
}

uint64_t sub_100CEAAA0()
{
  return sub_100CE85BC() & 1;
}

unint64_t sub_100CEAAC4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1005057FC(&qword_101685CE8);
    int v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    int v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        sub_10052E1EC();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_10050BF84(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    sub_100522D7C(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    sub_10050BF84((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      sub_100CEB470((uint64_t)v30);
      swift_bridgeObjectRelease();
      sub_10052E1EC();
      swift_release();
      return 0;
    }
    sub_100522D7C((uint64_t)v31 + 8, (uint64_t)v25);
    sub_100CEB470((uint64_t)v30);
    sub_100575CE8(v25, v26);
    long long v27 = v24;
    sub_100575CE8(v26, v28);
    long long v16 = v27;
    sub_100575CE8(v28, v29);
    sub_100575CE8(v29, &v27);
    unint64_t result = sub_100955F50(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      int v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int v8 = v16;
      uint64_t v9 = (_OWORD *)(v2[7] + 32 * v17);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v9);
      unint64_t result = (unint64_t)sub_100575CE8(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)sub_100575CE8(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_100CEAE88(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_1005057FC(&qword_101699B20);
    int v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    int v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  int64_t v27 = (unint64_t)(63 - v4) >> 6;
  unsigned int v6 = (char *)v36 + 8;
  int64_t v7 = (char *)v33 + 8;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v26 = v1;
  while (1)
  {
    if (v5)
    {
      uint64_t v14 = (v5 - 1) & v5;
      unint64_t v15 = __clz(__rbit64(v5)) | (v9 << 6);
      int64_t v16 = v9;
    }
    else
    {
      int64_t v17 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v27)
      {
LABEL_36:
        sub_10052E1EC();
        return (unint64_t)v2;
      }
      unint64_t v18 = *(void *)(v28 + 8 * v17);
      int64_t v16 = v9 + 1;
      if (!v18)
      {
        int64_t v16 = v9 + 2;
        if (v9 + 2 >= v27) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v28 + 8 * v16);
        if (!v18)
        {
          int64_t v16 = v9 + 3;
          if (v9 + 3 >= v27) {
            goto LABEL_36;
          }
          unint64_t v18 = *(void *)(v28 + 8 * v16);
          if (!v18)
          {
            int64_t v16 = v9 + 4;
            if (v9 + 4 >= v27) {
              goto LABEL_36;
            }
            unint64_t v18 = *(void *)(v28 + 8 * v16);
            if (!v18)
            {
              int64_t v19 = v9 + 5;
              if (v9 + 5 >= v27) {
                goto LABEL_36;
              }
              unint64_t v18 = *(void *)(v28 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v16 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_41;
                  }
                  if (v16 >= v27) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = *(void *)(v28 + 8 * v16);
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v16 = v9 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v14 = (v18 - 1) & v18;
      unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
    }
    sub_10050BF84(*(void *)(v1 + 48) + 40 * v15, (uint64_t)v35);
    sub_100522D7C(*(void *)(v1 + 56) + 32 * v15, (uint64_t)v6);
    v33[0] = v36[0];
    v33[1] = v36[1];
    uint64_t v34 = v37;
    v32[0] = v35[0];
    v32[1] = v35[1];
    sub_10050BF84((uint64_t)v32, (uint64_t)v31);
    if (!swift_dynamicCast())
    {
      sub_100CEB470((uint64_t)v32);
LABEL_35:
      swift_bridgeObjectRelease();
      sub_10052E1EC();
      swift_release();
      return 0;
    }
    sub_100522D7C((uint64_t)v7, (uint64_t)v31);
    sub_100CEB470((uint64_t)v32);
    sub_1005057FC((uint64_t *)&unk_1016773F0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    unint64_t result = sub_100955F50(v29, v30);
    unint64_t v20 = result;
    if (v21)
    {
      uint64_t v10 = v7;
      unint64_t v11 = v6;
      int64_t v12 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v12 = v29;
      v12[1] = v30;
      uint64_t v13 = v2[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v13 + 8 * v20) = v29;
      unsigned int v6 = v11;
      int64_t v7 = v10;
      uint64_t v1 = v26;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v22 = (uint64_t *)(v2[6] + 16 * result);
    *int64_t v22 = v29;
    v22[1] = v30;
    *(void *)(v2[7] + 8 * result) = v29;
    uint64_t v23 = v2[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_39;
    }
    v2[2] = v25;
LABEL_8:
    int64_t v9 = v16;
    unint64_t v5 = v14;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CRLDeviceUtility()
{
  return self;
}

uint64_t sub_100CEB290()
{
  id v0 = [self standardUserDefaults];
  unsigned __int8 v1 = [v0 BOOLForKey:@"CRLForceDeviceIsNotCapableForUpdateUserDefault"];

  if ((v1 & 1) == 0)
  {
    id v3 = [self sharedDefaults];
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 dictionaryForKey:v4];

    if (v5)
    {
      uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v7 = sub_100CEAE88(v6);
      swift_bridgeObjectRelease();
      if (v7)
      {
        if (*(void *)(v7 + 16))
        {
          unint64_t v8 = sub_100955F50(0xD000000000000012, 0x800000010126E3B0);
          if (v9)
          {
            uint64_t v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            id v11 = [self crl_platformString];
            uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v14 = v13;

            LOBYTE(v11) = sub_100ED5CE8(v12, v14, v10);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v2 = v11 ^ 1;
            return v2 & 1;
          }
        }
        swift_bridgeObjectRelease();
      }
    }
    char v2 = 1;
    return v2 & 1;
  }
  char v2 = 0;
  return v2 & 1;
}

uint64_t sub_100CEB470(uint64_t a1)
{
  uint64_t v2 = sub_1005057FC(&qword_101699B28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100CEB4DC()
{
  uint64_t v0 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  sub_100568B28(v0, qword_10171C388);
  sub_100556B74(v0, (uint64_t)qword_10171C388);
  return NSRunLoop.SchedulerTimeType.Stride.init(integerLiteral:)();
}

id sub_100CEB57C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLCommonConstants();
  return [super dealloc];
}

uint64_t type metadata accessor for CRLCommonConstants()
{
  return self;
}

NSString sub_100CEB5D8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10171C3A0 = (uint64_t)result;
  return result;
}

NSString sub_100CEB610()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10171C3A8 = (uint64_t)result;
  return result;
}

id sub_100CEB648(void *a1, void **a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v6 - 8, v7);
  int v113 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v112 = (id)type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v112, v9);
  uint64_t v111 = (objc_class *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *((void *)v111 - 1);
  __chkstk_darwin(v111, v11);
  uint64_t v13 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v14 - 8, v15);
  type metadata accessor for CRLAccountUtilities();
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)(v2 + 120) = swift_allocObject();
  type metadata accessor for CRLUnfairLock();
  uint64_t v16 = swift_allocObject();
  int64_t v17 = (_DWORD *)swift_slowAlloc();
  *int64_t v17 = 0;
  *(void *)(v16 + 16) = v17;
  atomic_thread_fence(memory_order_acq_rel);
  *(void *)(v2 + 128) = v16;
  *(_WORD *)(v2 + 136) = 0;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 72) = a2;
  type metadata accessor for CRLDatabaseSyncDataSource();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(unsigned char *)(v18 + 24) = 0;
  *(void *)(v2 + 56) = v18;
  type metadata accessor for CRLBoardSyncLogicProvider();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v2 + 48) = v19;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(unsigned char *)(v20 + 24) = 1;
  *(void *)(v2 + 64) = v20;
  uint64_t v21 = qword_10166EE68;
  id v22 = a1;
  unint64_t v114 = a2;
  swift_retain();
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v23 = (void *)qword_10171A488;
  type metadata accessor for CRLBoardShareController();
  BOOL v24 = (void *)swift_allocObject();
  id v25 = v23;
  swift_defaultActor_initialize();
  type metadata accessor for CRLZoneShareController();
  v24[16] = 0;
  v24[17] = 0;
  uint64_t v26 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v26 + 112) = v25;
  v24[14] = v26;
  v24[15] = v22;
  id v106 = v22;
  *(void *)(v3 + 40) = v24;
  sub_10050BF48(0, (unint64_t *)&qword_1016725C0);
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, void, objc_class *))(v10 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v111);
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_100CEEA88((unint64_t *)&qword_101676560, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1005057FC(&qword_101693440);
  sub_100A5AB28();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  int64_t v27 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v29 = *(void *)(v3 + 48);
  uint64_t v28 = *(void *)(v3 + 56);
  memset(v121, 0, sizeof(v121));
  uint64_t v122 = 0;
  id v112 = (id)type metadata accessor for CRLSyncPriorityProvider();
  id v118 = v112;
  unint64_t v119 = &off_10150B148;
  uint64_t v30 = v114;
  aBlock = v114;
  uint64_t v111 = (objc_class *)type metadata accessor for CRLSyncController();
  uint64_t v31 = (char *)objc_allocWithZone(v111);
  uint64_t v32 = sub_1005231B4((uint64_t)&aBlock, (uint64_t)v118);
  __n128 v33 = __chkstk_darwin(v32, v32);
  uint64_t v35 = (uint64_t *)((char *)&v105 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v36 + 16))(v35, v33);
  uint64_t v37 = *v35;
  swift_retain();
  swift_retain();
  swift_retain();
  id v110 = v27;
  uint64_t v38 = sub_100CEE3FC(0, v28, v29, v110, v37, 0, 0, v121, 0, v31);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)&aBlock);
  *(void *)(v3 + 24) = v38;
  uint64_t v39 = *(void *)(v3 + 56);
  uint64_t v40 = type metadata accessor for TaskPriority();
  uint64_t v41 = *(void *)(v40 - 8);
  unint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v43 = v41 + 56;
  uint64_t v44 = (uint64_t)v113;
  v42(v113, 1, 1, v40);
  uint64_t v45 = (void *)swift_allocObject();
  v45[2] = 0;
  void v45[3] = 0;
  v45[4] = v38;
  v45[5] = v39;
  v45[6] = &off_10151F910;
  id v46 = v38;
  swift_retain_n();
  long long v47 = v46;
  sub_1005912D0(v44, (uint64_t)&unk_101699D90, (uint64_t)v45);

  swift_release();
  swift_release();
  int v48 = *(void **)(v3 + 24);
  uint64_t v49 = *(void *)(v3 + 40);
  uint64_t v109 = v40;
  long long v108 = v42;
  uint64_t v107 = v43;
  v42((char *)v44, 1, 1, v40);
  uint64_t v50 = (void *)swift_allocObject();
  v50[2] = 0;
  v50[3] = 0;
  v50[4] = v48;
  v50[5] = v49;
  id v50[6] = &off_101534BE8;
  id v51 = v48;
  swift_retain_n();
  id v52 = v51;
  sub_1005912D0(v44, (uint64_t)&unk_101699D98, (uint64_t)v50);

  swift_release();
  swift_release();
  uint64_t v53 = *(void *)(v3 + 64);
  uint64_t v54 = *(void *)(v3 + 48);
  id v118 = v112;
  unint64_t v119 = &off_10150B148;
  aBlock = v30;
  uint64_t v55 = (char *)objc_allocWithZone(v111);
  uint64_t v56 = sub_1005231B4((uint64_t)&aBlock, (uint64_t)v118);
  __n128 v57 = __chkstk_darwin(v56, v56);
  id v59 = (uint64_t *)((char *)&v105 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v60 + 16))(v59, v57);
  uint64_t v61 = *v59;
  swift_retain();
  id v62 = v110;
  swift_retain();
  swift_retain();
  Swift::String v63 = sub_100CEE3FC(1, v53, v54, v62, v61, 0, 0, v121, 0, v55);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)&aBlock);
  *(void *)(v3 + 32) = v63;
  id v64 = self;
  swift_retain();
  id result = [v64 defaultStore];
  if (result)
  {
    uint64_t v66 = result;
    id v67 = [result aa_primaryAppleAccount];
    swift_release();

    if (v67) {
    id v112 = v62;
    }
    *(unsigned char *)(v3 + 112) = v67 != 0;
    uint64_t v68 = self;
    id v69 = [v68 defaultCenter];
    uint64_t v70 = v106;
    if (qword_10166FE08 != -1) {
      swift_once();
    }
    uint64_t v71 = qword_10171C300;
    uint64_t v72 = swift_allocObject();
    swift_weakInit();
    unint64_t v119 = (_UNKNOWN **)sub_100CEEBD8;
    uint64_t v120 = v72;
    aBlock = _NSConcreteStackBlock;
    uint64_t v116 = *(void *)"";
    sqlite3_int64 v117 = sub_1005E5680;
    id v118 = &unk_10152A008;
    uint64_t v73 = _Block_copy(&aBlock);
    id v74 = v70;
    swift_release();
    id v75 = [v69 addObserverForName:v71 object:v74 queue:0 usingBlock:v73];
    _Block_release(v73);

    *(void *)(v3 + 80) = v75;
    swift_unknownObjectRelease();
    id v76 = [v68 defaultCenter];
    if (qword_10166FE10 != -1) {
      swift_once();
    }
    uint64_t v77 = qword_10171C308;
    uint64_t v78 = swift_allocObject();
    swift_weakInit();
    unint64_t v119 = (_UNKNOWN **)sub_100CEEBD8;
    uint64_t v120 = v78;
    aBlock = _NSConcreteStackBlock;
    uint64_t v116 = *(void *)"";
    sqlite3_int64 v117 = sub_1005E5680;
    id v118 = &unk_10152A030;
    unint64_t v79 = _Block_copy(&aBlock);
    uint64_t v80 = (char *)v74;
    swift_release();
    id v81 = [v76 addObserverForName:v77 object:v80 queue:0 usingBlock:v79];
    _Block_release(v79);

    *(void *)(v3 + 96) = v81;
    swift_unknownObjectRelease();
    id v82 = [v68 defaultCenter];
    if (qword_1016701A0 != -1) {
      swift_once();
    }
    uint64_t v83 = qword_10171CB88;
    uint64_t v84 = swift_allocObject();
    swift_weakInit();
    unint64_t v119 = (_UNKNOWN **)sub_100CEEC0C;
    uint64_t v120 = v84;
    aBlock = _NSConcreteStackBlock;
    uint64_t v116 = *(void *)"";
    sqlite3_int64 v117 = sub_1005E5680;
    id v118 = &unk_10152A058;
    char v85 = _Block_copy(&aBlock);
    swift_release();
    id v86 = [v82 addObserverForName:v83 object:0 queue:0 usingBlock:v85];
    _Block_release(v85);

    *(void *)(v3 + 88) = v86;
    swift_unknownObjectRelease();
    id v87 = [v68 defaultCenter];
    if (qword_1016701A8 != -1) {
      swift_once();
    }
    uint64_t v88 = qword_10171CB90;
    uint64_t v89 = swift_allocObject();
    swift_weakInit();
    unint64_t v119 = (_UNKNOWN **)sub_100CEEC14;
    uint64_t v120 = v89;
    aBlock = _NSConcreteStackBlock;
    uint64_t v116 = *(void *)"";
    sqlite3_int64 v117 = sub_1005E5680;
    id v118 = &unk_10152A080;
    char v90 = _Block_copy(&aBlock);
    swift_release();
    id v91 = [v87 addObserverForName:v88 object:0 queue:0 usingBlock:v90];
    _Block_release(v90);

    *(void *)(v3 + 104) = v91;
    swift_unknownObjectRelease();
    uint64_t v92 = *(void **)(v3 + 24);
    uint64_t v93 = (uint64_t)v113;
    v108(v113, 1, 1, v109);
    uint64_t v94 = (void *)swift_allocObject();
    v94[2] = 0;
    v94[3] = 0;
    v94[4] = v92;
    v94[5] = v3;
    v94[6] = &off_101529F30;
    id v95 = v92;
    swift_retain_n();
    id v96 = v95;
    sub_1005912D0(v93, (uint64_t)&unk_101699DA0, (uint64_t)v94);

    swift_release();
    swift_release();
    uint64_t v97 = *(char **)(v3 + 32);
    *(void *)&v97[OBJC_IVAR____TtC8Freeform17CRLSyncController_fetchStatusObserver + 8] = &off_101529F18;
    swift_unknownObjectWeakAssign();
    uint64_t v98 = *(char **)(v3 + 24);
    *(void *)&v98[OBJC_IVAR____TtC8Freeform17CRLSyncController_fetchStatusObserver + 8] = &off_101529F18;
    swift_unknownObjectWeakAssign();
    sub_1005057FC(&qword_101699DA8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
    *(unsigned char *)(inited + 32) = 0;
    *(void *)(inited + 40) = v98;
    *(unsigned char *)(inited + 48) = 1;
    *(void *)(inited + 56) = v97;
    unint64_t v100 = sub_100A4619C(inited);
    swift_setDeallocating();
    uint64_t v101 = v98;
    uint64_t v102 = v97;
    sub_1005057FC(&qword_101699DB0);
    swift_arrayDestroy();
    type metadata accessor for CRLSyncHelper();
    uint64_t v103 = swift_allocObject();
    *(void *)(v103 + 16) = v100;
    uint64_t v104 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_syncHelper;
    if (*(void *)&v80[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_syncHelper])
    {
      swift_retain();
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"syncHelper", 10, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 57, (uint64_t)"expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"syncHelper", 10, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 57);
      swift_release();
    }
    *(void *)&v80[v104] = v103;

    swift_release();
    swift_release();
    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CEC628()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100CED7FC();
    return swift_release();
  }
  return result;
}

uint64_t sub_100CEC688()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1008B74F0(1);
    sub_1008B74F0(1);
    return swift_release();
  }
  return result;
}

void sub_100CEC6F4()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (qword_10166FB88 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v2 = (id)static OS_os_log.dataSync;
    uint64_t v3 = static os_log_type_t.default.getter();
    sub_100BAC898((uint64_t)v2, (uint64_t)&_mh_execute_header, v3, (uint64_t)"User attempted to share a board that has not yet synced, ensuring we save this board as soon as possible. Saving immediately.", 125, 2, (uint64_t)_swiftEmptyArrayStorage);

    id v4 = *(id *)(v1 + 24);
    sub_1008B7824(1);
    swift_release();
  }
}

uint64_t sub_100CEC7EC()
{
  uint64_t v1 = sub_1005057FC(&qword_101672BB0);
  __chkstk_darwin(v1 - 8, v2);
  id v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 80);
  if (v5)
  {
    uint64_t v6 = self;
    swift_unknownObjectRetain();
    id v7 = [v6 defaultCenter];
    [v7 removeObserver:v5];
    swift_unknownObjectRelease();
  }
  uint64_t v8 = *(void *)(v0 + 96);
  if (v8)
  {
    uint64_t v9 = self;
    swift_unknownObjectRetain();
    id v10 = [v9 defaultCenter];
    [v10 removeObserver:v8];
    swift_unknownObjectRelease();
  }
  uint64_t v11 = *(void *)(v0 + 88);
  if (v11)
  {
    uint64_t v12 = self;
    swift_unknownObjectRetain();
    id v13 = [v12 defaultCenter];
    [v13 removeObserver:v11];
    swift_unknownObjectRelease();
  }
  uint64_t v14 = *(void *)(v0 + 104);
  if (v14)
  {
    uint64_t v15 = self;
    swift_unknownObjectRetain();
    id v16 = [v15 defaultCenter];
    [v16 removeObserver:v14];
    swift_unknownObjectRelease();
  }
  int64_t v17 = *(void **)(v0 + 24);
  uint64_t v18 = *(void *)(v0 + 56);
  uint64_t v19 = type metadata accessor for TaskPriority();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  v20(v4, 1, 1, v19);
  uint64_t v21 = (void *)swift_allocObject();
  _OWORD v21[2] = 0;
  v21[3] = 0;
  v21[4] = v17;
  v21[5] = v18;
  v21[6] = &off_10151F910;
  id v22 = v17;
  swift_retain();
  sub_1005912D0((uint64_t)v4, (uint64_t)&unk_101699D80, (uint64_t)v21);
  swift_release();
  uint64_t v23 = *(void **)(v0 + 24);
  uint64_t v24 = *(void *)(v0 + 40);
  v20(v4, 1, 1, v19);
  id v25 = (void *)swift_allocObject();
  _OWORD v25[2] = 0;
  v25[3] = 0;
  long long v25[4] = v23;
  v25[5] = v24;
  v25[6] = &off_101534BE8;
  id v26 = v23;
  swift_retain();
  sub_1005912D0((uint64_t)v4, (uint64_t)&unk_101699D88, (uint64_t)v25);
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100CECB44()
{
  sub_100CEC7EC();

  return swift_deallocClassInstance();
}

void sub_100CECB78(char a1)
{
  if (*(unsigned char *)(v1 + 136) != (a1 & 1) && (*(unsigned char *)(v1 + 137) & 1) == 0)
  {
    if (*(unsigned char *)(v1 + 136))
    {
      if (qword_10166F9C8 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v2 = (id)static OS_os_log.crlDefault;
      uint64_t v3 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v2, (uint64_t)&_mh_execute_header, v3, (uint64_t)"Posting syncDidBegin notification.", 34, 2, (uint64_t)_swiftEmptyArrayStorage);

      id v4 = [self defaultCenter];
      if (qword_10166FE48 != -1) {
        swift_once();
      }
      uint64_t v5 = &qword_10171C3A8;
    }
    else
    {
      if (qword_10166F9C8 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v6 = (id)static OS_os_log.crlDefault;
      uint64_t v7 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v6, (uint64_t)&_mh_execute_header, v7, (uint64_t)"Posting syncDidEnd notification.", 32, 2, (uint64_t)_swiftEmptyArrayStorage);

      id v4 = [self defaultCenter];
      if (qword_10166FE40 != -1) {
        swift_once();
      }
      uint64_t v5 = &qword_10171C3A0;
    }
    [v4 postNotificationName:*v5 object:v1 userInfo:0];
  }
}

void sub_100CECDA0(char a1)
{
  if (*(unsigned char *)(v1 + 137) != (a1 & 1) && (*(unsigned char *)(v1 + 136) & 1) == 0)
  {
    if (*(unsigned char *)(v1 + 137))
    {
      if (qword_10166F9C8 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v2 = (id)static OS_os_log.crlDefault;
      uint64_t v3 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v2, (uint64_t)&_mh_execute_header, v3, (uint64_t)"Posting syncDidBegin notification.", 34, 2, (uint64_t)_swiftEmptyArrayStorage);

      id v4 = [self defaultCenter];
      if (qword_10166FE48 != -1) {
        swift_once();
      }
      uint64_t v5 = &qword_10171C3A8;
    }
    else
    {
      if (qword_10166F9C8 != -1) {
        swift_once();
      }
      swift_beginAccess();
      id v6 = (id)static OS_os_log.crlDefault;
      uint64_t v7 = static os_log_type_t.default.getter();
      sub_100BAC898((uint64_t)v6, (uint64_t)&_mh_execute_header, v7, (uint64_t)"Posting syncDidEnd notification.", 32, 2, (uint64_t)_swiftEmptyArrayStorage);

      id v4 = [self defaultCenter];
      if (qword_10166FE40 != -1) {
        swift_once();
      }
      uint64_t v5 = &qword_10171C3A0;
    }
    [v4 postNotificationName:*v5 object:v1 userInfo:0];
  }
}

void sub_100CECFC8()
{
  uint64_t v0 = sub_1005057FC(&qword_101672EB0);
  __chkstk_darwin(v0 - 8, v1);
  id v51 = (char *)v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10166FA88 != -1) {
    goto LABEL_45;
  }
LABEL_2:
  swift_beginAccess();
  id v3 = (id)static OS_os_log.crlZoneRefetch;
  uint64_t v4 = static os_log_type_t.debug.getter();
  sub_100BAC898((uint64_t)v3, (uint64_t)&_mh_execute_header, v4, (uint64_t)"Scheduling refetch for zones that need to be refetched.", 55, 2, (uint64_t)_swiftEmptyArrayStorage);

  int v5 = 0;
  unint64_t v6 = 0;
  long long v50 = xmmword_10117D8C0;
  id v46 = (char *)&type metadata for Swift.AnyObject + 8;
  do
  {
    int v7 = v5;
    if (v6 >= 2) {
      goto LABEL_44;
    }
    int v8 = *((unsigned __int8 *)&off_101503ED8 + v6 + 32);
    uint64_t v9 = 24;
    if (v8) {
      uint64_t v9 = 32;
    }
    uint64_t v10 = 56;
    if (v8) {
      uint64_t v10 = 64;
    }
    uint64_t v11 = *(void *)(v44[0] + v10);
    uint64_t v12 = *(void **)(v44[0] + v9);
    swift_retain();
    id v54 = v12;
    Swift::Int v13 = sub_100A63554();
    Swift::Int v14 = v13;
    int v45 = v7;
    void v44[2] = v11;
    if ((v13 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      sub_10050BF48(0, (unint64_t *)&qword_101674210);
      sub_100A480B0();
      Set.Iterator.init(_cocoa:)();
      Swift::Int v14 = v59;
      Swift::Int v49 = v60;
      uint64_t v15 = v61;
      uint64_t v16 = v62;
      unint64_t v17 = v63;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v18 = -1 << *(unsigned char *)(v13 + 32);
      uint64_t v19 = *(void *)(v13 + 56);
      Swift::Int v49 = v13 + 56;
      uint64_t v20 = ~v18;
      uint64_t v21 = -v18;
      if (v21 < 64) {
        uint64_t v22 = ~(-1 << v21);
      }
      else {
        uint64_t v22 = -1;
      }
      unint64_t v17 = v22 & v19;
      uint64_t v15 = v20;
    }
    uint64_t v47 = v14 & 0x7FFFFFFFFFFFFFFFLL;
    v44[1] = v15;
    int64_t v48 = (unint64_t)(v15 + 64) >> 6;
    uint64_t v23 = 0x2065746176697250;
    if (v8) {
      uint64_t v23 = 0x5320646572616853;
    }
    uint64_t v53 = v23;
    unint64_t v24 = 0xED000065706F6353;
    if (v8) {
      unint64_t v24 = 0xEC00000065706F63;
    }
    unint64_t v52 = v24;
    if (v14 < 0)
    {
      while (1)
      {
        uint64_t v28 = __CocoaSet.Iterator.next()();
        if (!v28) {
          break;
        }
        uint64_t v57 = v28;
        sub_10050BF48(0, (unint64_t *)&qword_101674210);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v29 = v58;
        swift_unknownObjectRelease();
        uint64_t v27 = v16;
        uint64_t v25 = v17;
        if (!v29) {
          break;
        }
LABEL_40:
        uint64_t v56 = v27;
        __n128 v33 = (void *)static OS_os_log.crlZoneRefetch;
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v50;
        unint64_t v55 = v25;
        *(void *)(inited + 56) = &type metadata for String;
        unint64_t v35 = sub_100528BE4();
        *(void *)(inited + 64) = v35;
        *(void *)(inited + 32) = v53;
        *(void *)(inited + 40) = v52;
        id v36 = v33;
        id v37 = [v29 zoneName];
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v40 = v39;

        *(void *)(inited + 96) = &type metadata for String;
        *(void *)(inited + 104) = v35;
        *(void *)(inited + 72) = v38;
        *(void *)(inited + 80) = v40;
        uint64_t v41 = static os_log_type_t.default.getter();
        sub_100BAC898((uint64_t)v36, (uint64_t)&_mh_execute_header, v41, (uint64_t)"<%{public}@> Refetching records for zone to refetch: %@", 55, 2, inited);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        swift_arrayDestroy();

        uint64_t v42 = type metadata accessor for Date();
        uint64_t v43 = (uint64_t)v51;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v51, 1, 1, v42);
        sub_1008B4C34(v29, 2, 0, v43, 9);

        sub_100522F00(v43, &qword_101672EB0);
        uint64_t v16 = v56;
        unint64_t v17 = v55;
        if ((v14 & 0x8000000000000000) == 0) {
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_20:
      if (v17)
      {
        uint64_t v25 = (v17 - 1) & v17;
        unint64_t v26 = __clz(__rbit64(v17)) | (v16 << 6);
        uint64_t v27 = v16;
        goto LABEL_39;
      }
      int64_t v30 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        swift_once();
        goto LABEL_2;
      }
      if (v30 < v48)
      {
        unint64_t v31 = *(void *)(v49 + 8 * v30);
        uint64_t v27 = v16 + 1;
        if (v31) {
          goto LABEL_38;
        }
        uint64_t v27 = v16 + 2;
        if (v16 + 2 >= v48) {
          goto LABEL_3;
        }
        unint64_t v31 = *(void *)(v49 + 8 * v27);
        if (v31) {
          goto LABEL_38;
        }
        uint64_t v27 = v16 + 3;
        if (v16 + 3 >= v48) {
          goto LABEL_3;
        }
        unint64_t v31 = *(void *)(v49 + 8 * v27);
        if (v31) {
          goto LABEL_38;
        }
        uint64_t v27 = v16 + 4;
        if (v16 + 4 >= v48) {
          goto LABEL_3;
        }
        unint64_t v31 = *(void *)(v49 + 8 * v27);
        if (v31)
        {
LABEL_38:
          uint64_t v25 = (v31 - 1) & v31;
          unint64_t v26 = __clz(__rbit64(v31)) + (v27 << 6);
LABEL_39:
          id v29 = *(id *)(*(void *)(v14 + 48) + 8 * v26);
          if (!v29) {
            goto LABEL_3;
          }
          goto LABEL_40;
        }
        uint64_t v32 = v16 + 5;
        while (v48 != v32)
        {
          unint64_t v31 = *(void *)(v49 + 8 * v32++);
          if (v31)
          {
            uint64_t v27 = v32 - 1;
            goto LABEL_38;
          }
        }
      }
    }
LABEL_3:
    sub_10052E1EC();
    swift_release();

    int v5 = 1;
    unint64_t v6 = &_mh_execute_header.magic + 1;
  }
  while ((v45 & 1) == 0);
}

void sub_100CED63C(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10166F9C8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = (void *)static OS_os_log.crlDefault;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  *(void *)(inited + 56) = type metadata accessor for CRLSyncController();
  *(void *)(inited + 64) = sub_100CEEA88(&qword_101699D78, (void (*)(uint64_t))type metadata accessor for CRLSyncController);
  *(void *)(inited + 32) = a1;
  id v6 = v4;
  id v7 = a1;
  uint64_t v8 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v6, (uint64_t)&_mh_execute_header, v8, (uint64_t)"Fetch did end for sync controller: %@", 37, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  sub_10050BF48(0, (unint64_t *)&qword_101672E50);
  if (static NSObject.== infix(_:_:)())
  {
    char v9 = *(unsigned char *)(v2 + 136);
    *(unsigned char *)(v2 + 136) = 0;
    sub_100CECB78(v9);
  }
  else if (static NSObject.== infix(_:_:)())
  {
    char v10 = *(unsigned char *)(v2 + 137);
    *(unsigned char *)(v2 + 137) = 0;
    sub_100CECDA0(v10);
  }
}

void sub_100CED7FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1005057FC(&qword_101672C30);
  __chkstk_darwin(v2 - 8, v3);
  int v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(os_unfair_lock_s **)(*(void *)(v0 + 128) + 16);
  os_unfair_lock_lock(v6);
  int v7 = *(unsigned __int8 *)(v1 + 112);
  os_unfair_lock_unlock(v6);
  uint64_t v8 = (void *)Notification.name.getter();
  if (qword_10166FE10 != -1) {
    swift_once();
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
LABEL_14:

    if (!v7) {
      return;
    }
    char v19 = 0;
    goto LABEL_16;
  }
  if (qword_10166FE08 != -1) {
    swift_once();
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {

    swift_bridgeObjectRelease_n();
LABEL_19:
    uint64_t v21 = Notification.userInfo.getter();
    if (v21 && (unint64_t v22 = sub_100CEAAC4(v21), swift_bridgeObjectRelease(), v22))
    {
      if (*(void *)(v22 + 16) && (unint64_t v23 = sub_100955F50(0xD000000000000019, 0x800000010127D040), (v24 & 1) != 0))
      {
        sub_100522D7C(*(void *)(v22 + 56) + 32 * v23, (uint64_t)&v62);
        swift_bridgeObjectRelease();
        if (*((void *)&v63 + 1))
        {
          if (swift_dynamicCast())
          {
            char v25 = v61;
LABEL_33:
            uint64_t v34 = Notification.userInfo.getter();
            if (v34 && (unint64_t v35 = sub_100CEAAC4(v34), swift_bridgeObjectRelease(), v35))
            {
              if (*(void *)(v35 + 16)
                && (unint64_t v36 = sub_100955F50(0xD000000000000010, 0x800000010127D060), (v37 & 1) != 0))
              {
                sub_100522D7C(*(void *)(v35 + 56) + 32 * v36, (uint64_t)&v62);
              }
              else
              {
                long long v63 = 0u;
                long long v62 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((void *)&v63 + 1))
              {
                if (swift_dynamicCast())
                {
                  char v38 = v61;
                  if ((v25 & 1) == 0)
                  {
LABEL_47:
                    char v39 = v38;
                    if (!v7) {
                      return;
                    }
LABEL_48:
                    uint64_t v40 = Notification.userInfo.getter();
                    if (!v40) {
                      goto LABEL_60;
                    }
                    unint64_t v41 = sub_100CEAAC4(v40);
                    swift_bridgeObjectRelease();
                    if (!v41) {
                      goto LABEL_60;
                    }
                    if (*(void *)(v41 + 16)
                      && (unint64_t v42 = sub_100955F50(0xD000000000000010, 0x8000000101240F20), (v43 & 1) != 0))
                    {
                      sub_100522D7C(*(void *)(v41 + 56) + 32 * v42, (uint64_t)&v62);
                    }
                    else
                    {
                      long long v63 = 0u;
                      long long v62 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (!*((void *)&v63 + 1))
                    {
                      int v45 = &qword_101672BF0;
                      id v46 = (char *)&v62;
                      goto LABEL_59;
                    }
                    sub_1005057FC(&qword_101677400);
                    if ((swift_dynamicCast() & 1) == 0)
                    {
LABEL_60:
                      if (qword_10166FB88 != -1) {
                        swift_once();
                      }
                      swift_beginAccess();
                      id v47 = (id)static OS_os_log.dataSync;
                      uint64_t v48 = static os_log_type_t.error.getter();
                      sub_100BAC898((uint64_t)v47, (uint64_t)&_mh_execute_header, v48, (uint64_t)"Missing board ownerName in data store save notification", 55, 2, (uint64_t)_swiftEmptyArrayStorage);

                      sub_1008B7824(v39);
                      char v19 = v39;
LABEL_16:
                      sub_1008B7824(v19);
                      return;
                    }
                    sub_100999AB8(v61, (uint64_t)v5);
                    swift_bridgeObjectRelease();
                    uint64_t v44 = type metadata accessor for CRLBoardIdentifier(0);
                    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v5, 1, v44) == 1)
                    {
                      int v45 = &qword_101672C30;
                      id v46 = v5;
LABEL_59:
                      sub_100522F00((uint64_t)v46, v45);
                      goto LABEL_60;
                    }
                    Swift::Int v49 = &v5[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
                    uint64_t v50 = *(void *)v49;
                    uint64_t v51 = *((void *)v49 + 1);
                    swift_bridgeObjectRetain();
                    sub_100510028((uint64_t)v5);
                    if ((v50 || v51 != 0xE000000000000000)
                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                    {
                      if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v51 == v52)
                      {
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if ((v53 & 1) == 0)
                        {
                          id v54 = (id *)(v1 + 32);
                          goto LABEL_71;
                        }
                      }
                    }
                    id v54 = (id *)(v1 + 24);
LABEL_71:
                    id v55 = *v54;
                    swift_bridgeObjectRelease();
                    if (qword_10166FB88 != -1) {
                      swift_once();
                    }
                    swift_beginAccess();
                    uint64_t v56 = (void *)static OS_os_log.dataSync;
                    sub_1005057FC((uint64_t *)&unk_101672B40);
                    uint64_t inited = swift_initStackObject();
                    *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
                    *(void *)(inited + 56) = &type metadata for Bool;
                    *(void *)(inited + 64) = &protocol witness table for Bool;
                    *(unsigned char *)(inited + 32) = v25;
                    *(void *)(inited + 96) = &type metadata for Bool;
                    *(void *)(inited + 104) = &protocol witness table for Bool;
                    *(unsigned char *)(inited + 72) = v38;
                    id v58 = v56;
                    uint64_t v59 = static os_log_type_t.default.getter();
                    sub_100BAC898((uint64_t)v58, (uint64_t)&_mh_execute_header, v59, (uint64_t)"Scheduling a sync after saving data. Has significant changes: %d, newAssetsAdded: %d", 84, 2, inited);
                    swift_setDeallocating();
                    sub_1005057FC(&qword_101672B50);
                    swift_arrayDestroy();

                    sub_1008B7824(v39);
                    return;
                  }
LABEL_41:
                  char v39 = 1;
                  if (!v7) {
                    return;
                  }
                  goto LABEL_48;
                }
LABEL_40:
                char v38 = 0;
                if ((v25 & 1) == 0) {
                  goto LABEL_47;
                }
                goto LABEL_41;
              }
            }
            else
            {
              long long v63 = 0u;
              long long v62 = 0u;
            }
            sub_100522F00((uint64_t)&v62, &qword_101672BF0);
            goto LABEL_40;
          }
LABEL_32:
          char v25 = 0;
          goto LABEL_33;
        }
      }
      else
      {
        long long v63 = 0u;
        long long v62 = 0u;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      long long v63 = 0u;
      long long v62 = 0u;
    }
    sub_100522F00((uint64_t)&v62, &qword_101672BF0);
    goto LABEL_32;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_19;
  }
  if (qword_10166FB88 != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v26 = (void *)static OS_os_log.dataSync;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_10117E810;
  id v28 = v26;
  id v29 = (void *)Notification.name.getter();
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 64) = sub_100528BE4();
  *(void *)(v27 + 32) = v30;
  *(void *)(v27 + 40) = v32;
  uint64_t v33 = static os_log_type_t.error.getter();
  sub_100BAC898((uint64_t)v28, (uint64_t)&_mh_execute_header, v33, (uint64_t)"Encountered unknown notification in handleDataStoreDidSaveSyncableData named: %@", 80, 2, v27);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();
}

uint64_t type metadata accessor for CRLSyncDriver()
{
  return self;
}

uint64_t sub_100CEE188(uint64_t a1, uint64_t a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)&dword_101699D70 + dword_101699D70);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100528488;
  return v6(a2);
}

void sub_100CEE234(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10166F9C8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = (void *)static OS_os_log.crlDefault;
  sub_1005057FC((uint64_t *)&unk_101672B40);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10117E810;
  *(void *)(inited + 56) = type metadata accessor for CRLSyncController();
  *(void *)(inited + 64) = sub_100CEEA88(&qword_101699D78, (void (*)(uint64_t))type metadata accessor for CRLSyncController);
  *(void *)(inited + 32) = a1;
  id v6 = v4;
  id v7 = a1;
  uint64_t v8 = static os_log_type_t.default.getter();
  sub_100BAC898((uint64_t)v6, (uint64_t)&_mh_execute_header, v8, (uint64_t)"Fetch did begin for sync controller: %@", 39, 2, inited);
  swift_setDeallocating();
  sub_1005057FC(&qword_101672B50);
  swift_arrayDestroy();

  sub_10050BF48(0, (unint64_t *)&qword_101672E50);
  if (static NSObject.== infix(_:_:)())
  {
    char v9 = *(unsigned char *)(v2 + 136);
    *(unsigned char *)(v2 + 136) = 1;
    sub_100CECB78(v9);
  }
  else if (static NSObject.== infix(_:_:)())
  {
    char v10 = *(unsigned char *)(v2 + 137);
    *(unsigned char *)(v2 + 137) = 1;
    sub_100CECDA0(v10);
  }
}

char *sub_100CEE3FC(char a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, char *a10)
{
  uint64_t isEscapingClosureAtFileLocation = a9;
  char v37 = a1 & 1;
  v41[3] = type metadata accessor for CRLSyncPriorityProvider();
  v41[4] = &off_10150B148;
  v41[0] = a5;
  Swift::Int v13 = &a10[OBJC_IVAR____TtC8Freeform17CRLSyncController_dataSource];
  *((void *)v13 + 1) = 0;
  swift_unknownObjectWeakInit();
  char v14 = &a10[OBJC_IVAR____TtC8Freeform17CRLSyncController_syncLogicProvider];
  *((void *)v14 + 1) = 0;
  swift_unknownObjectWeakInit();
  *(void *)&a10[OBJC_IVAR____TtC8Freeform17CRLSyncController_fetchStatusObserver + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = &a10[OBJC_IVAR____TtC8Freeform17CRLSyncController_syncEngine];
  *((void *)v15 + 4) = 0;
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *(void *)&a10[OBJC_IVAR____TtC8Freeform17CRLSyncController_saveTask] = 0;
  uint64_t v16 = OBJC_IVAR____TtC8Freeform17CRLSyncController_targetedFetchTasks;
  uint64_t v17 = a10;
  *(void *)&a10[v16] = sub_100A3AC18((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_throttlingScheduler] = 0;
  *(void *)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_syncEngineFetchedRecords] = _swiftEmptyDictionarySingleton;
  *(void *)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_purgedRecordIDs] = _swiftEmptyDictionarySingleton;
  *(void *)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_purgedRecordZoneIDs] = &_swiftEmptySetSingleton;
  *(void *)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_zoneIDsToResetDueToUserEncryptionDataReset] = &_swiftEmptySetSingleton;
  uint64_t v18 = &v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_syncMetadata];
  *(_OWORD *)uint64_t v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *((void *)v18 + 4) = 0;
  v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_shouldFetchAssets] = 0;
  uint64_t v19 = OBJC_IVAR____TtC8Freeform17CRLSyncController_accountChangeObserverManager;
  type metadata accessor for CRLAccountChangeObserverManager();
  uint64_t v20 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v20 + 112) = &_swiftEmptySetSingleton;
  *(void *)&v17[v19] = v20;
  *(void *)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_ongoingFetchesCounter] = 0;
  *(void *)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_ongoingSavesCounter] = 0;
  v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_syncScope] = v37;
  *((void *)v13 + 1) = &off_10151F920;
  swift_unknownObjectWeakAssign();
  *((void *)v14 + 1) = &off_10152B210;
  swift_unknownObjectWeakAssign();
  uint64_t v21 = &qword_101685000;
  *(void *)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_queue] = a4;
  sub_1005498A4((uint64_t)v41, (uint64_t)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_syncPriorityProvider]);
  if (!a9)
  {
    uint64_t v24 = qword_10166EE68;
    id v25 = a4;
    if (v24 != -1) {
      goto LABEL_8;
    }
    goto LABEL_4;
  }
  unint64_t v22 = a4;
  for (uint64_t i = a9; ; uint64_t i = qword_10171A488)
  {
    id v26 = v22;
    *(void *)&v17[OBJC_IVAR____TtC8Freeform17CRLSyncController_container] = i;
    id v34 = (id)isEscapingClosureAtFileLocation;

    uint64_t v27 = (objc_class *)type metadata accessor for CRLSyncController();
    v40.receiver = v17;
    v40.super_class = v27;
    id v28 = [super init];
    id v29 = *(void **)&v28[v21[322]];
    uint64_t v17 = (char *)swift_allocObject();
    *((void *)v17 + 2) = a6;
    *((void *)v17 + 3) = a7;
    *((void *)v17 + 4) = v28;
    sub_100CEECC0((uint64_t)a8, (uint64_t)(v17 + 40));
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_100CEED28;
    *(void *)(v30 + 24) = v17;
    aBlock[4] = sub_1006591F0;
    aBlock[5] = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(void *)"";
    void aBlock[2] = sub_1006D9628;
    aBlock[3] = &unk_10152A120;
    uint64_t v21 = (uint64_t *)_Block_copy(aBlock);
    uint64_t v31 = v28;
    uint64_t v32 = v29;
    sub_1005173A0(a6);
    sub_100CEED48(a8, (void (*)(void, void, void, void, void))sub_1008D2A14);
    swift_retain();
    swift_release();
    dispatch_sync(v32, v21);

    _Block_release(v21);
    sub_100CEED48(a8, (void (*)(void, void, void, void, void))sub_10053890C);
    sub_1005174AC(a6);
    swift_release();
    swift_release();

    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v41);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_8:
    swift_once();
LABEL_4:
    unint64_t v22 = (void *)qword_10171A488;
  }
  return v31;
}

uint64_t sub_100CEE898(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_100CEE8B8, 0, 0);
}

uint64_t sub_100CEE8B8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v2 + 128) + 16);
  os_unfair_lock_lock(v3);
  *(unsigned char *)(v2 + 112) = v1 != 0;
  os_unfair_lock_unlock(v3);
  if (*(unsigned char *)(v2 + 112) != 1
    || (sub_1008B7824(0), sub_1008B7824(0), sub_1008B74F0(1), sub_1008B74F0(1), (*(unsigned char *)(v2 + 112) & 1) == 0))
  {
    uint64_t v4 = v0[3];
    if ((*(unsigned char *)(v4 + 136) & 1) != 0 || *(unsigned char *)(v4 + 137) == 1)
    {
      sub_100CED63C(*(void **)(v4 + 24));
      sub_100CED63C(*(void **)(v4 + 32));
    }
  }
  int v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100CEE9BC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  char v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *char v9 = v2;
  v9[1] = sub_100528D08;
  return sub_1008B1EAC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100CEEA88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100CEEAD4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  char v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *char v9 = v2;
  v9[1] = sub_100528D08;
  return sub_1008B1D24(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100CEEBA0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CEEBD8()
{
  return sub_100CEC628();
}

uint64_t sub_100CEEBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100CEEC04()
{
  return swift_release();
}

uint64_t sub_100CEEC0C()
{
  return sub_100CEC688();
}

void sub_100CEEC14()
{
}

uint64_t sub_100CEEC20()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100CEEC68()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100CEECC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005057FC(&qword_101685D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100CEED28()
{
  return sub_1008B203C(*(void (**)(void *__return_ptr, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), (uint64_t *)(v0 + 40));
}

uint64_t sub_100CEED38()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *sub_100CEED48(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

void sub_100CEEDA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CRLFreehandDrawingShapeItem();
    sub_100CFA664(&qword_101699E00, (void (*)(uint64_t))type metadata accessor for CRLFreehandDrawingShapeItem);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v22;
    uint64_t v21 = v23;
    uint64_t v6 = v24;
    int64_t v7 = v25;
    unint64_t v8 = v26;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    int64_t v7 = 0;
  }
  int64_t v20 = (unint64_t)(v6 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for CRLFreehandDrawingShapeItem();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v13 = v27;
    swift_unknownObjectRelease();
    int64_t v14 = v7;
    uint64_t v15 = v8;
    while (v13)
    {
      id v27 = v13;
      sub_100CF5EA4((uint64_t *)&v27, a2);

      if (v3) {
        break;
      }
      int64_t v7 = v14;
      unint64_t v8 = v15;
      if (v5 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v8)
      {
        uint64_t v15 = (v8 - 1) & v8;
        unint64_t v16 = __clz(__rbit64(v8)) | (v7 << 6);
        int64_t v14 = v7;
      }
      else
      {
        int64_t v14 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          return;
        }
        if (v14 >= v20) {
          break;
        }
        unint64_t v17 = *(void *)(v21 + 8 * v14);
        if (!v17)
        {
          int64_t v18 = v7 + 2;
          if (v7 + 2 >= v20) {
            break;
          }
          unint64_t v17 = *(void *)(v21 + 8 * v18);
          if (v17) {
            goto LABEL_22;
          }
          int64_t v18 = v7 + 3;
          if (v7 + 3 >= v20) {
            break;
          }
          unint64_t v17 = *(void *)(v21 + 8 * v18);
          if (v17) {
            goto LABEL_22;
          }
          int64_t v18 = v7 + 4;
          if (v7 + 4 >= v20) {
            break;
          }
          unint64_t v17 = *(void *)(v21 + 8 * v18);
          if (v17)
          {
LABEL_22:
            int64_t v14 = v18;
          }
          else
          {
            int64_t v14 = v7 + 5;
            if (v7 + 5 >= v20) {
              break;
            }
            unint64_t v17 = *(void *)(v21 + 8 * v14);
            if (!v17)
            {
              int64_t v19 = v7 + 6;
              while (v20 != v19)
              {
                unint64_t v17 = *(void *)(v21 + 8 * v19++);
                if (v17)
                {
                  int64_t v14 = v19 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v15 = (v17 - 1) & v17;
        unint64_t v16 = __clz(__rbit64(v17)) + (v14 << 6);
      }
      id v13 = *(id *)(*(void *)(v5 + 48) + 8 * v16);
    }
  }
  sub_10052E1EC();
}

uint64_t sub_100CEF0AC(uint64_t a1, uint64_t *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v4 = a1;
  sub_1006BB504(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100D4F4DC(v4);
  uint64_t v7 = result;
  uint64_t v8 = 0;
  uint64_t v9 = v4 + 64;
  char v10 = *(unsigned char *)(v4 + 32);
  uint64_t v31 = v4 + 88;
  uint64_t v34 = v4 + 64;
  uint64_t v35 = v4;
  int64_t v32 = v2;
  int v33 = v6;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << v10)
  {
    unint64_t v13 = (unint64_t)v7 >> 6;
    if ((*(void *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v4 + 36) != v6) {
      goto LABEL_30;
    }
    int64_t v14 = v3;
    uint64_t v15 = *(void *)(*(void *)(v4 + 48) + 8 * v7);
    uint64_t v16 = *a2;
    if (*(void *)(*a2 + 16) && (uint64_t v17 = sub_1009563E8(), (v18 & 1) != 0)) {
      uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v3 = v14;
    uint64_t result = sub_100BC6418(v19, v15);
    uint64_t v20 = result;
    uint64_t v22 = v21;
    unint64_t v24 = *((void *)v14 + 2);
    unint64_t v23 = *((void *)v14 + 3);
    if (v24 >= v23 >> 1)
    {
      uint64_t result = sub_1006BB504(v23 > 1, v24 + 1, 1);
      uint64_t v3 = v14;
    }
    *((void *)v3 + 2) = v24 + 1;
    int64_t v25 = &v3[2 * v24];
    *((void *)v25 + 4) = v20;
    *((void *)v25 + 5) = v22;
    uint64_t v4 = v35;
    char v10 = *(unsigned char *)(v35 + 32);
    unint64_t v11 = 1 << v10;
    if (v7 >= 1 << v10) {
      goto LABEL_31;
    }
    uint64_t v9 = v34;
    uint64_t v26 = *(void *)(v34 + 8 * v13);
    if ((v26 & (1 << v7)) == 0) {
      goto LABEL_32;
    }
    int v6 = v33;
    if (*(_DWORD *)(v35 + 36) != v33) {
      goto LABEL_33;
    }
    unint64_t v27 = v26 & (-2 << (v7 & 0x3F));
    if (v27)
    {
      unint64_t v11 = __clz(__rbit64(v27)) | v7 & 0xFFFFFFFFFFFFFFC0;
      int64_t v12 = v32;
    }
    else
    {
      unint64_t v28 = v13 + 1;
      unint64_t v29 = (v11 + 63) >> 6;
      int64_t v12 = v32;
      if (v13 + 1 < v29)
      {
        unint64_t v30 = *(void *)(v34 + 8 * v28);
        if (!v30)
        {
          unint64_t v28 = v13 + 2;
          if (v13 + 2 >= v29) {
            goto LABEL_4;
          }
          unint64_t v30 = *(void *)(v34 + 8 * v28);
          if (!v30)
          {
            while (v29 - 3 != v13)
            {
              unint64_t v30 = *(void *)(v31 + 8 * v13++);
              if (v30)
              {
                unint64_t v28 = v13 + 2;
                goto LABEL_21;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_21:
        unint64_t v11 = __clz(__rbit64(v30)) + (v28 << 6);
      }
    }
LABEL_4:
    ++v8;
    uint64_t v7 = v11;
    if (v8 == v12) {
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100CEF310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = a4;
  uint64_t v54 = a2;
  uint64_t v5 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v9, v10);
  int64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v55 = (uint64_t)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  char v53 = (char *)&v51 - v18;
  __chkstk_darwin(v19, v20);
  uint64_t v57 = (uint64_t)&v51 - v21;
  __chkstk_darwin(v22, v23);
  uint64_t v58 = (uint64_t)&v51 - v24;
  __chkstk_darwin(v25, v26);
  uint64_t v52 = (uint64_t)&v51 - v27;
  __chkstk_darwin(v28, v29);
  uint64_t v31 = (char *)&v51 - v30;
  uint64_t v56 = v4;
  swift_retain();
  int64_t v32 = sub_100606584(1);
  swift_release();
  uint64_t v33 = (uint64_t)v32 + *(void *)(*v32 + 632);
  swift_beginAccess();
  sub_100522E9C(v33, (uint64_t)v12, &qword_1016892B0);
  swift_retain();
  uint64_t v34 = sub_1005057FC(&qword_101686808);
  CRRegister.wrappedValue.getter();
  sub_100522E9C((uint64_t)v8, (uint64_t)v31, (uint64_t *)&unk_101674520);
  sub_100CFA604((uint64_t)v8, type metadata accessor for CRLShapeItemParentAffinity);
  sub_100522F00((uint64_t)v12, &qword_1016892B0);
  swift_release();
  swift_beginAccess();
  uint64_t v35 = v33;
  uint64_t v36 = (uint64_t)v62;
  sub_100F9A0B8(v59);
  swift_endAccess();
  if (v36)
  {
    swift_release();
    sub_100522F00((uint64_t)v31, (uint64_t *)&unk_101674520);
  }
  else
  {
    uint64_t v59 = v9;
    uint64_t v37 = v58;
    sub_100522E9C(v54, v58, (uint64_t *)&unk_101674520);
    long long v62 = v31;
    sub_100522E9C((uint64_t)v31, v57, (uint64_t *)&unk_101674520);
    uint64_t v38 = type metadata accessor for UUID();
    uint64_t v39 = *(void *)(v38 - 8);
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38);
    uint64_t v41 = v52;
    uint64_t v42 = (uint64_t)v53;
    uint64_t v54 = v34;
    if (v40 == 1)
    {
      sub_10051B3EC(v57, v52, (uint64_t *)&unk_101674520);
      swift_retain();
      sub_100522F00(v58, (uint64_t *)&unk_101674520);
    }
    else
    {
      swift_retain();
      sub_100522F00(v57, (uint64_t *)&unk_101674520);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v41, v58, v38);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
    }
    sub_100522E9C(v41, v42, (uint64_t *)&unk_101674520);
    swift_beginAccess();
    uint64_t v43 = v55;
    sub_100522E9C(v42, v55, (uint64_t *)&unk_101674520);
    uint64_t v44 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
    sub_1006063BC(v43, v45, (uint64_t *)&unk_101674520);
    v44(v61, 0);
    sub_100522F00(v42, (uint64_t *)&unk_101674520);
    swift_endAccess();
    sub_100522F00(v41, (uint64_t *)&unk_101674520);
    swift_release();
    id v46 = *(void **)(v56 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store);
    id v47 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLFreehandDrawingShapeItem());
    *(void *)&v47[OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes] = 0;
    *(void *)&v47[OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace] = 0;
    *(void *)&v47[OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke] = 0;
    *(void *)&v47[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = v46;
    *(void *)&v47[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = v32;
    uint64_t v48 = (objc_class *)type metadata accessor for CRLBoardItemBase(0);
    v60.receiver = v47;
    v60.super_class = v48;
    id v49 = v46;
    uint64_t v35 = [super init];
    sub_100522F00((uint64_t)v62, (uint64_t *)&unk_101674520);
  }
  return v35;
}

uint64_t sub_100CEF904()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    type metadata accessor for CRLFreehandDrawingItem();
    if ([v1 isKindOfClass:swift_getObjCClassFromMetadata()])
    {
    }
    else
    {
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117E810;
      swift_getObjectType();
      ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
      uint64_t v4 = NSStringFromClass(ObjCClassFromMetadata);
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v5;
      *(void *)(inited + 40) = v7;
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"isFreehandDrawingShape", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeItem.swift", 98, 2, 52, (uint64_t)"Freehand shapes should only be inside freehand drawings (got %@).", 65, 2u, inited);
      sub_1005598CC(inited, (uint64_t)"isFreehandDrawingShape", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeItem.swift", 98, 2, 52);

      swift_bridgeObjectRelease();
    }
  }
  return 1;
}

uint64_t sub_100CEFAE4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLShapeItemParentAffinity(0);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  if (*(_UNKNOWN ****)v12 != &off_101676660) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v12 + *(void *)(*(void *)v12 + 632);
  swift_beginAccess();
  sub_100522E9C(v13, (uint64_t)v10, &qword_1016892B0);
  sub_1005057FC(&qword_101686808);
  CRRegister.wrappedValue.getter();
  sub_100522F00((uint64_t)v10, &qword_1016892B0);
  uint64_t v14 = &v6[*(int *)(v3 + 36)];
  uint64_t v15 = *(void *)v14;
  char v16 = v14[8];
  sub_100CFA604((uint64_t)v6, type metadata accessor for CRLShapeItemParentAffinity);
  uint64_t v17 = 0;
  if ((v16 & 1) == 0) {
    uint64_t v17 = CRLiCloudConnectionStatus.rawValue.getter(v15);
  }
  uint64_t v18 = sub_100BC5F10(v17);
  if (v19) {
    return v18;
  }
  uint64_t v20 = *(void **)(v1 + v11);
  uint64_t v21 = (uint64_t (**)(uint64_t))(*v20 + 408);
  uint64_t v22 = *v21;
  uint64_t v23 = (*v21)(v18);
  if ((v24 & 1) == 0 || v23 != 1)
  {
    v22(v23);
    return sub_10088BE6C();
  }
  uint64_t v25 = *v20;
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v27 = *(uint64_t (**)(uint64_t))(v25 + 704);
    uint64_t v28 = swift_retain();
    uint64_t v29 = (void *)v27(v28);
    swift_release();
    id v30 = [v29 inferredAccessibilityDescriptionNoShapeNames];

    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    return v31;
  }
  __break(1u);
  return result;
}

id sub_100CEFDB4()
{
  uint64_t v1 = v0;
  swift_retain();
  uint64_t v2 = sub_100606584(0);
  swift_release();
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store);
  uint64_t v4 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLFreehandDrawingShapeItem());
  *(void *)&v4[OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes] = 0;
  *(void *)&v4[OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace] = 0;
  *(void *)&v4[OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke] = 0;
  *(void *)&v4[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = v3;
  *(void *)&v4[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = v2;
  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for CRLBoardItemBase(0);
  id v5 = v3;
  return [super init];
}

uint64_t sub_100CEFECC(uint64_t a1)
{
  uint64_t v3 = (int *)sub_1005057FC(&qword_101699E10);
  uint64_t v4 = *((void *)v3 - 1);
  __chkstk_darwin(v3, v5);
  uint64_t v46 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for CRLFreehandDrawingShapeCRDTData(0);
  __chkstk_darwin(v47, v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v45 - v12;
  uint64_t v14 = sub_1005057FC(&qword_101689340);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRLFreehandDrawingShapeItem();
  uint64_t v18 = swift_dynamicCastClass();
  if (v18)
  {
    uint64_t v19 = (char *)v18;
    uint64_t v49 = a1;
    swift_unknownObjectRetain();
    uint64_t v48 = sub_100CF6358(v19, v1);
    uint64_t v20 = *(void *)(v1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    if (*(_UNKNOWN ****)v20 != &off_101676660) {
      uint64_t v20 = 0;
    }
    uint64_t v21 = v20 + *(void *)(*(void *)v20 + 752);
    swift_beginAccess();
    sub_100CFA59C(v21, (uint64_t)v13, type metadata accessor for CRLFreehandDrawingShapeCRDTData);
    uint64_t v22 = *(void *)&v19[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
    if (*(_UNKNOWN ****)v22 != &off_101676660) {
      uint64_t v22 = 0;
    }
    uint64_t v23 = v22 + *(void *)(*(void *)v22 + 752);
    swift_beginAccess();
    sub_100CFA59C(v23, (uint64_t)v9, type metadata accessor for CRLFreehandDrawingShapeCRDTData);
    sub_100CFA664(&qword_101676A80, (void (*)(uint64_t))type metadata accessor for CRLFreehandDrawingShapeCRDTData);
    CRStruct_1.actionUndoingDifference(from:)();
    sub_100CFA604((uint64_t)v9, type metadata accessor for CRLFreehandDrawingShapeCRDTData);
    sub_100CFA604((uint64_t)v13, type metadata accessor for CRLFreehandDrawingShapeCRDTData);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v4 + 48))(v17, 1, v3) == 1)
    {
      sub_100522F00((uint64_t)v17, &qword_101689340);
      memset(v50, 0, sizeof(v50));
      uint64_t v51 = 1;
    }
    else
    {
      uint64_t v24 = v3[12];
      uint64_t v25 = (uint64_t)&v17[v24];
      uint64_t v26 = v3[16];
      uint64_t v27 = (uint64_t)&v17[v26];
      uint64_t v28 = v3[20];
      uint64_t v29 = (uint64_t)&v17[v28];
      uint64_t v30 = v3[24];
      uint64_t v45 = &v17[v30];
      uint64_t v31 = v46;
      uint64_t v32 = v46 + v24;
      uint64_t v33 = v46 + v26;
      uint64_t v47 = v46 + v26;
      uint64_t v34 = v46 + v28;
      uint64_t v35 = v46 + v30;
      sub_10051B3EC((uint64_t)v17, v46, &qword_101699E18);
      sub_10051B3EC(v25, v32, &qword_10168C8D0);
      sub_10051B3EC(v27, v33, &qword_101699E20);
      sub_10051B3EC(v29, v34, &qword_101699E20);
      sub_10051B3EC((uint64_t)v45, v35, &qword_101699E28);
      uint64_t v51 = (uint64_t)v3;
      uint64_t v36 = sub_1005767BC(v50);
      uint64_t v37 = (uint64_t)v36 + v3[12];
      uint64_t v38 = (uint64_t)v36 + v3[16];
      uint64_t v39 = (uint64_t)v36 + v3[20];
      uint64_t v40 = (uint64_t)v36 + v3[24];
      sub_10051B3EC(v31, (uint64_t)v36, &qword_101699E18);
      sub_10051B3EC(v32, v37, &qword_10168C8D0);
      sub_10051B3EC(v47, v38, &qword_101699E20);
      sub_10051B3EC(v34, v39, &qword_101699E20);
      sub_10051B3EC(v35, v40, &qword_101699E28);
    }
    uint64_t v41 = v48;
    swift_beginAccess();
    sub_10057D560((uint64_t)v50, 5);
    swift_endAccess();
    swift_unknownObjectRelease();
    return v41;
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createUndoingMutations(fromSnapshot:)", 37, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeItem.swift", 98, 2, 72, (uint64_t)"Tried to generate undo from mismatched type", 43, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to generate undo from mismatched type");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"createUndoingMutations(fromSnapshot:)", 37, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeItem.swift", 98, 2, 72);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v43, v44);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100CF04A0()
{
  type metadata accessor for CRLFreehandDrawingShapeItem();
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    swift_unknownObjectRetain();
    uint64_t v3 = sub_100CF66C0(v2, v0);
    swift_unknownObjectRelease();
    return v3;
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeItem.swift", 98, 2, 84, (uint64_t)"Tried to create observable deltas from mismatched type", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to create observable deltas from mismatched type");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeItem.swift", 98, 2, 84);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v5, v6);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100CF05EC(uint64_t a1)
{
  uint64_t v3 = sub_1005057FC(&qword_101689340);
  __chkstk_darwin(v3 - 8, v4);
  Swift::String v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = (int *)sub_1005057FC(&qword_101699E10);
  uint64_t v12 = *((void *)v11 - 1);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_10088B69C(a1);
  if (!v1)
  {
    uint64_t v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform31CRLTransactableUndoingMutations_values);
    swift_beginAccess();
    uint64_t v18 = *v17;
    if (*(void *)(v18 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v19 = sub_100956360(5);
      if (v20)
      {
        sub_100522E9C(*(void *)(v18 + 56) + 32 * v19, (uint64_t)&v43, &qword_101672BF0);
      }
      else
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v46 = 1;
      }
      swift_bridgeObjectRelease();
      if (v46 != 1)
      {
        sub_10051B3EC((uint64_t)&v43, (uint64_t)v47, &qword_101672BF0);
        if (v48)
        {
          int v25 = swift_dynamicCast();
          uint64_t v26 = *(void (**)(char *, void, uint64_t, int *))(v12 + 56);
          v26(v10, v25 ^ 1u, 1, v11);
          if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11) != 1)
          {
            uint64_t v27 = v11[12];
            uint64_t v40 = v12 + 56;
            uint64_t v41 = v26;
            uint64_t v28 = (uint64_t)&v15[v27];
            uint64_t v29 = v11[16];
            uint64_t v30 = (uint64_t)&v15[v29];
            uint64_t v31 = v11[20];
            uint64_t v42 = &v15[v31];
            uint64_t v32 = v11[24];
            uint64_t v49 = &v15[v32];
            uint64_t v33 = (uint64_t)&v10[v27];
            uint64_t v36 = &v10[v29];
            uint64_t v37 = &v10[v31];
            uint64_t v38 = &v10[v32];
            uint64_t v39 = &v15[v29];
            sub_10051B3EC((uint64_t)v10, (uint64_t)v15, &qword_101699E18);
            sub_10051B3EC(v33, v28, &qword_10168C8D0);
            sub_10051B3EC((uint64_t)v36, v30, &qword_101699E20);
            sub_10051B3EC((uint64_t)v37, (uint64_t)v42, &qword_101699E20);
            sub_10051B3EC((uint64_t)v38, (uint64_t)v49, &qword_101699E28);
            uint64_t v34 = (uint64_t)&v6[v11[12]];
            uint64_t v35 = (uint64_t)&v6[v11[16]];
            uint64_t v37 = &v6[v11[20]];
            uint64_t v38 = &v6[v11[24]];
            sub_100522E9C((uint64_t)v15, (uint64_t)v6, &qword_101699E18);
            sub_100522E9C(v28, v34, &qword_10168C8D0);
            sub_100522E9C((uint64_t)v39, v35, &qword_101699E20);
            sub_100522E9C((uint64_t)v42, (uint64_t)v37, &qword_101699E20);
            sub_100522E9C((uint64_t)v49, (uint64_t)v38, &qword_101699E28);
            v41(v6, 0, 1, v11);
            swift_beginAccess();
            type metadata accessor for CRLFreehandDrawingShapeCRDTData(0);
            sub_100CFA664(&qword_101676A80, (void (*)(uint64_t))type metadata accessor for CRLFreehandDrawingShapeCRDTData);
            swift_retain();
            CRStruct_1.apply(_:)();
            sub_100522F00((uint64_t)v6, &qword_101689340);
            swift_endAccess();
            swift_release();
            uint64_t v23 = &qword_101699E10;
            uint64_t v24 = (uint64_t)v15;
            return sub_100522F00(v24, v23);
          }
LABEL_10:
          uint64_t v23 = &qword_101689340;
          uint64_t v24 = (uint64_t)v10;
          return sub_100522F00(v24, v23);
        }
        uint64_t v21 = &qword_101672BF0;
        uint64_t v22 = (uint64_t *)v47;
LABEL_9:
        sub_100522F00((uint64_t)v22, v21);
        (*(void (**)(char *, uint64_t, uint64_t, int *))(v12 + 56))(v10, 1, 1, v11);
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 1;
    }
    uint64_t v21 = (uint64_t *)&unk_1016725E0;
    uint64_t v22 = &v43;
    goto LABEL_9;
  }
  return result;
}

ProtocolDescriptor *sub_100CF0AFC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char *a5)
{
  unint64_t v236 = a5;
  uint64_t v194 = a4;
  uint64_t v8 = type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v189 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v189 - v14;
  uint64_t v16 = type metadata accessor for CRLPKStrokePathData();
  uint64_t v235 = *(ProtocolDescriptor **)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v193 = (uint64_t)&v189 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  uint64_t v200 = (uint64_t)&v189 - v21;
  __chkstk_darwin(v22, v23);
  uint64_t v199 = (uint64_t)&v189 - v24;
  uint64_t v25 = type metadata accessor for CRLPathSourceData(0);
  __chkstk_darwin(v25 - 8, v26);
  long long v217 = (unsigned __int8 *)&v189 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v29);
  uint64_t v216 = (unsigned __int8 *)&v189 - v30;
  uint64_t v215 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v215, v31);
  uint64_t v33 = (char *)&v189 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v35);
  uint64_t v37 = (char *)&v189 - v36;
  __chkstk_darwin(v38, v39);
  uint64_t v214 = (char *)&v189 - v40;
  __chkstk_darwin(v41, v42);
  uint64_t v213 = (char *)&v189 - v43;
  __chkstk_darwin(v44, v45);
  uint64_t v212 = (char *)&v189 - v46;
  __chkstk_darwin(v47, v48);
  uint64_t v211 = (char *)&v189 - v49;
  __chkstk_darwin(v50, v51);
  uint64_t v210 = (char *)&v189 - v52;
  __chkstk_darwin(v53, v54);
  id v209 = (char *)&v189 - v55;
  uint64_t v237 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v237, v56);
  uint64_t v208 = (char *)&v189 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58, v59);
  unint64_t v207 = (char *)&v189 - v60;
  __chkstk_darwin(v61, v62);
  unint64_t v206 = (char *)&v189 - v63;
  __chkstk_darwin(v64, v65);
  uint64_t v205 = (char *)&v189 - v66;
  __chkstk_darwin(v67, v68);
  unint64_t v204 = (char *)&v189 - v69;
  __chkstk_darwin(v70, v71);
  uint64_t v203 = (char *)&v189 - v72;
  __chkstk_darwin(v73, v74);
  uint64_t v202 = (char *)&v189 - v75;
  __chkstk_darwin(v76, v77);
  uint64_t v201 = (char *)&v189 - v78;
  if (a3 == 5)
  {
    unint64_t v236 = v15;
    uint64_t v234 = v11;
    type metadata accessor for CRLShapeItem();
    uint64_t result = (ProtocolDescriptor *)swift_dynamicCastClass();
    if (!result) {
      return result;
    }
    uint64_t v166 = (char *)result;
    uint64_t v191 = a1;
    uint64_t v167 = *(void **)((char *)&result->Flags + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    uint64_t v233 = &protocol descriptor for CRLAbstractShapeItemDataProtocol;
    uint64_t result = (ProtocolDescriptor *)swift_conformsToProtocol2();
    uint64_t v235 = result;
    if (!result) {
      goto LABEL_99;
    }
    uint64_t v168 = a2;
    uint64_t v169 = *(void *)(a2 + 16);
    uint64_t v170 = v227;
    uint64_t v171 = (uint64_t)v236;
    if (!v169)
    {
      swift_unknownObjectRetain();
      swift_retain();
LABEL_93:
      swift_unknownObjectRetain();
      sub_100CF81E0(v191, v168, 5, v166, v170);
      swift_release();
      return (ProtocolDescriptor *)swift_unknownObjectRelease_n();
    }
    uint64_t v226 = v166;
    uint64_t v229 = OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace;
    uint64_t v230 = (void (*)(uint64_t))OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes;
    p_NumRequirements = &v235->NumRequirements;
    uint64_t v228 = &v244;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v190 = v168;
    unint64_t v172 = (void *)(v168 + 40);
    uint64_t v173 = (uint64_t *)&unk_101685110;
    uint64_t v231 = (void (*)(void))v167;
    while (1)
    {
      BOOL v174 = *(v172 - 1) == 0x7974536570616873 && *v172 == 0xEE0061746144656CLL;
      if (!v174 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_71;
      }
      uint64_t v237 = v169;
      (*(void (**)(void))&v235->NumRequirements)(*v167);
      sub_1005057FC(&qword_101673478);
      CRRegister.wrappedValue.getter();
      sub_10051B3EC((uint64_t)v242, (uint64_t)v245, v173);
      sub_100CFA604(v171, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
      uint64_t v175 = **(void **)&v170[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
      uint64_t result = (ProtocolDescriptor *)swift_conformsToProtocol2();
      if (!result) {
        goto LABEL_97;
      }
      unint64_t v176 = v173;
      uint64_t v177 = result;
      uint64_t v178 = *(void (**)(uint64_t, ProtocolDescriptor *))&result->NumRequirements;
      swift_retain();
      uint64_t v179 = v175;
      uint64_t v180 = (uint64_t)v234;
      v178(v179, v177);
      swift_release();
      CRRegister.wrappedValue.getter();
      sub_10051B3EC((uint64_t)v242, (uint64_t)v246, v176);
      sub_100CFA604(v180, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
      sub_10051B3EC((uint64_t)v245, (uint64_t)v247, v176);
      uint64_t v173 = v176;
      if (sub_100556850((uint64_t)v247) == 1)
      {
        sub_10051B3EC((uint64_t)v246, (uint64_t)v242, v176);
        int v181 = sub_100556850((uint64_t)v242);
        uint64_t v170 = v227;
        uint64_t v171 = (uint64_t)v236;
        uint64_t v169 = v237;
        uint64_t v167 = v231;
        if (v181 == 1) {
          goto LABEL_71;
        }
      }
      else
      {
        sub_10051B3EC((uint64_t)v246, (uint64_t)v242, v176);
        int v182 = sub_100556850((uint64_t)v242);
        uint64_t v170 = v227;
        uint64_t v171 = (uint64_t)v236;
        uint64_t v167 = v231;
        if (v182 != 1)
        {
          sub_10051B3EC((uint64_t)v246, (uint64_t)v238, v176);
          v250[11] = v238[11];
          v250[12] = v238[12];
          v250[13] = v238[13];
          v250[7] = v238[7];
          v250[8] = v238[8];
          v250[9] = v238[9];
          v250[10] = v238[10];
          v250[3] = v238[3];
          v250[4] = v238[4];
          v250[5] = v238[5];
          v250[6] = v238[6];
          v250[0] = v238[0];
          v250[1] = v238[1];
          uint64_t v251 = v239;
          v250[2] = v238[2];
          sub_10051B3EC((uint64_t)v245, (uint64_t)v240, v176);
          v248[11] = v240[11];
          v248[12] = v240[12];
          v248[13] = v240[13];
          v248[7] = v240[7];
          v248[8] = v240[8];
          v248[9] = v240[9];
          v248[10] = v240[10];
          v248[3] = v240[3];
          v248[4] = v240[4];
          v248[5] = v240[5];
          v248[6] = v240[6];
          v248[0] = v240[0];
          v248[1] = v240[1];
          uint64_t v249 = v241;
          v248[2] = v240[2];
          sub_100A37194(v245, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051A1EC);
          char v183 = sub_100A1D9DC((uint64_t)v248, (uint64_t)v250);
          sub_100A37194(v246, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100519F40);
          sub_100A37194(v245, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100519F40);
          sub_100A37194(v245, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100519F40);
          uint64_t v169 = v237;
          if (v183) {
            goto LABEL_71;
          }
          goto LABEL_70;
        }
        uint64_t v169 = v237;
      }
      sub_10051B3EC((uint64_t)v245, (uint64_t)v242, v173);
      sub_10051B3EC((uint64_t)v246, (uint64_t)v228, v173);
      sub_100556868((uint64_t)v242);
LABEL_70:
      *(void *)((char *)v230 + (void)v170) = 0;
      swift_bridgeObjectRelease();
      *(void *)&v170[v229] = 0;
      swift_bridgeObjectRelease();
LABEL_71:
      v172 += 2;
      if (!--v169)
      {
        uint64_t v168 = v190;
        swift_bridgeObjectRelease();
        uint64_t v166 = v226;
        goto LABEL_93;
      }
    }
  }
  if (a3)
  {
    uint64_t v184 = a1;
    uint64_t v185 = v194;
    uint64_t ObjectType = (ProtocolDescriptor *)swift_getObjectType();
    uint64_t v187 = v227;
    uint64_t v188 = (uint64_t)v236;
    return sub_100A9EB60(v184, a2, a3, v185, v187, ObjectType, v188);
  }
  type metadata accessor for CRLShapeItem();
  uint64_t result = (ProtocolDescriptor *)swift_dynamicCastClass();
  if (!result) {
    return result;
  }
  uint64_t v191 = a1;
  uint64_t v189 = (char *)result;
  uint64_t v80 = *(char **)((char *)&result->Flags + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  unint64_t v198 = &protocol descriptor for CRLAbstractShapeItemDataProtocol;
  uint64_t result = (ProtocolDescriptor *)swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_98;
  }
  id v81 = *(char **)(a2 + 16);
  uint64_t v82 = a2;
  uint64_t v83 = v227;
  if (!v81)
  {
    swift_unknownObjectRetain();
    swift_retain();
LABEL_91:
    swift_unknownObjectRetain();
    sub_100CF81E0(v191, v82, 0, v189, v83);
    swift_release();
    return (ProtocolDescriptor *)swift_unknownObjectRelease_n();
  }
  id v195 = v37;
  uint64_t v228 = (uint64_t *)OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace;
  uint64_t v219 = OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes;
  uint64_t v192 = v191 + OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data;
  uint64_t v233 = v235 + 2;
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v190 = v82;
  uint64_t v84 = (void *)(v82 + 40);
  uint64_t v196 = v33;
  uint64_t v197 = v16;
  uint64_t v234 = v80;
  while (1)
  {
    BOOL v85 = *(v84 - 1) == 0x6641746E65726170 && *v84 == 0xEE007974696E6966;
    if (!v85 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v225 = v84;
    uint64_t v226 = v81;
    id v86 = *(ProtocolDescriptor **)&v83[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
    uint64_t result = (ProtocolDescriptor *)swift_conformsToProtocol2();
    if (!result) {
      break;
    }
    id v87 = *(void (**)(uint64_t))(*(void *)v80 + 640);
    uint64_t v88 = (uint64_t)v201;
    uint64_t v229 = *(void *)v80 + 640;
    uint64_t v230 = v87;
    v87((uint64_t)result);
    swift_retain();
    uint64_t v89 = sub_1005057FC(&qword_101686808);
    uint64_t v90 = (uint64_t)v209;
    CRRegister.wrappedValue.getter();
    sub_100522F00(v88, &qword_1016892B0);
    uint64_t v91 = type metadata accessor for CRLBoardItemParentAffinity();
    uint64_t v92 = v90 + *(int *)(v91 + 20);
    float v94 = *(float *)v92;
    float v93 = *(float *)(v92 + 4);
    float v95 = *(float *)(v92 + 8);
    float v224 = *(float *)(v92 + 12);
    float v223 = *(float *)(v92 + 16);
    id v96 = v86;
    int v222 = *(unsigned __int8 *)(v92 + 20);
    int v97 = *(unsigned __int8 *)(v92 + 21);
    int v220 = *(unsigned __int8 *)(v92 + 22);
    int v221 = v97;
    int v218 = *(unsigned __int8 *)(v92 + 23);
    uint64_t v98 = *(void *)(v92 + 24);
    swift_bridgeObjectRetain();
    uint64_t v99 = sub_100CFA604(v90, type metadata accessor for CRLShapeItemParentAffinity);
    uint64_t v100 = *(void *)&v96->Flags;
    uint64_t v101 = *(void (**)(void))(*(void *)&v96->Flags + 640);
    uint64_t v102 = (uint64_t)v202;
    uint64_t v235 = v96;
    uint64_t v231 = v101;
    p_NumRequirements = (int *)(v100 + 640);
    v101(v99);
    uint64_t v103 = (uint64_t)v210;
    unint64_t v236 = (char *)v89;
    CRRegister.wrappedValue.getter();
    sub_100522F00(v102, &qword_1016892B0);
    uint64_t v104 = v103 + *(int *)(v91 + 20);
    float v106 = *(float *)v104;
    float v105 = *(float *)(v104 + 4);
    float v108 = *(float *)(v104 + 8);
    float v107 = *(float *)(v104 + 12);
    float v109 = *(float *)(v104 + 16);
    int v110 = *(unsigned __int8 *)(v104 + 20);
    int v111 = *(unsigned __int8 *)(v104 + 21);
    int v112 = *(unsigned __int8 *)(v104 + 22);
    int v113 = *(unsigned __int8 *)(v104 + 23);
    uint64_t v114 = *(void *)(v104 + 24);
    swift_bridgeObjectRetain();
    sub_100CFA604(v103, type metadata accessor for CRLShapeItemParentAffinity);
    if (v94 != v106
      || v93 != v105
      || v95 != v108
      || v224 != v107
      || v223 != v109
      || ((v222 ^ v110) & 1) != 0
      || ((v221 ^ v111) & 1) != 0
      || ((v220 ^ v112) & 1) != 0
      || ((v218 ^ v113) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sqlite3_int64 v117 = v227;
LABEL_27:
      *(uint64_t *)((char *)v228 + (void)v117) = 0;
      uint64_t v116 = swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    char v115 = sub_100ED60AC(v98, v114);
    swift_bridgeObjectRelease();
    uint64_t v116 = swift_bridgeObjectRelease();
    sqlite3_int64 v117 = v227;
    if ((v115 & 1) == 0) {
      goto LABEL_27;
    }
LABEL_28:
    uint64_t v118 = (uint64_t)v203;
    v230(v116);
    uint64_t v119 = (uint64_t)v211;
    CRRegister.wrappedValue.getter();
    sub_100522F00(v118, &qword_1016892B0);
    uint64_t v121 = v215;
    uint64_t v120 = v216;
    sub_100CFA59C(v119 + *(int *)(v215 + 20), (uint64_t)v216, type metadata accessor for CRLPathSourceData);
    uint64_t v122 = sub_100CFA604(v119, type metadata accessor for CRLShapeItemParentAffinity);
    uint64_t v123 = (uint64_t)v204;
    v231(v122);
    uint64_t v124 = (uint64_t)v212;
    uint64_t v83 = v117;
    CRRegister.wrappedValue.getter();
    sub_100522F00(v123, &qword_1016892B0);
    uint64_t v125 = v121;
    uint64_t v126 = v217;
    sub_100CFA59C(v124 + *(int *)(v121 + 20), (uint64_t)v217, type metadata accessor for CRLPathSourceData);
    sub_100CFA604(v124, type metadata accessor for CRLShapeItemParentAffinity);
    char v127 = sub_100AAFDA4(v120, v126);
    sub_100CFA604((uint64_t)v126, type metadata accessor for CRLPathSourceData);
    uint64_t v128 = sub_100CFA604((uint64_t)v120, type metadata accessor for CRLPathSourceData);
    uint64_t v129 = v197;
    uint64_t v130 = (uint64_t)v213;
    if ((v127 & 1) == 0)
    {
      *(void *)&v83[v219] = 0;
      swift_bridgeObjectRelease();
      *(uint64_t *)((char *)v228 + (void)v83) = 0;
      uint64_t v128 = swift_bridgeObjectRelease();
    }
    uint64_t v131 = (uint64_t)v205;
    v230(v128);
    CRRegister.wrappedValue.getter();
    sub_100522F00(v131, &qword_1016892B0);
    uint64_t v132 = v130 + *(int *)(v121 + 24);
    unint64_t v133 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))&v233->Flags;
    uint64_t v134 = v129;
    int v135 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))&v233->Flags)(v132, 1, v129);
    uint64_t v136 = (uint64_t)v195;
    uint64_t v137 = (uint64_t)v214;
    if (v135)
    {
      uint64_t v138 = sub_100CFA604(v130, type metadata accessor for CRLShapeItemParentAffinity);
      Swift::Int v139 = 0;
    }
    else
    {
      uint64_t v140 = v132;
      uint64_t v141 = v199;
      sub_100CFA59C(v140, v199, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
      sub_100CFA604(v130, type metadata accessor for CRLShapeItemParentAffinity);
      Swift::Int v139 = (void *)sub_100B364B0();
      uint64_t v138 = sub_100CFA604(v141, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    }
    uint64_t v142 = (uint64_t)v206;
    v231(v138);
    CRRegister.wrappedValue.getter();
    sub_100522F00(v142, &qword_1016892B0);
    uint64_t v143 = v137 + *(int *)(v125 + 24);
    if (v133(v143, 1, v134))
    {
      uint64_t v144 = sub_100CFA604(v137, type metadata accessor for CRLShapeItemParentAffinity);
      if (!v139) {
        goto LABEL_38;
      }
LABEL_35:
      uint64_t v145 = v139;
LABEL_36:

LABEL_37:
      uint64_t v243 = &type metadata for Bool;
      v242[0] = 1;
      sub_100522E9C((uint64_t)v242, (uint64_t)v250, &qword_101672BF0);
      swift_beginAccess();
      sub_10057D61C((uint64_t)v250, 0x18uLL);
      swift_endAccess();
      sub_100522F00((uint64_t)v242, &qword_101672BF0);
      *(void *)&v83[v219] = 0;
      swift_bridgeObjectRelease();
      *(uint64_t *)((char *)v228 + (void)v83) = 0;
      uint64_t v144 = swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    uint64_t v151 = v143;
    uint64_t v152 = v199;
    sub_100CFA59C(v151, v199, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    sub_100CFA604(v137, type metadata accessor for CRLShapeItemParentAffinity);
    uint64_t v145 = (void *)sub_100B364B0();
    uint64_t v144 = sub_100CFA604(v152, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    if (v139)
    {
      if (!v145) {
        goto LABEL_35;
      }
      sub_10050BF48(0, &qword_101699E08);
      id v153 = v139;
      char v154 = static NSObject.== infix(_:_:)();

      if ((v154 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else if (v145)
    {
      goto LABEL_36;
    }
LABEL_38:
    uint64_t v146 = (uint64_t)v207;
    v230(v144);
    CRRegister.wrappedValue.getter();
    sub_100522F00(v146, &qword_1016892B0);
    uint64_t v147 = v136 + *(int *)(v125 + 24);
    if (v133(v147, 1, v134))
    {
      uint64_t v148 = sub_100CFA604(v136, type metadata accessor for CRLShapeItemParentAffinity);
      id v149 = 0;
      uint64_t v150 = (uint64_t)v196;
    }
    else
    {
      uint64_t v155 = v147;
      uint64_t v156 = v200;
      sub_100CFA59C(v155, v200, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
      sub_100CFA604(v136, type metadata accessor for CRLShapeItemParentAffinity);
      uint64_t v150 = (uint64_t)v196;
      if (*(void *)(v156 + 80))
      {
        sub_10050BF48(0, (unint64_t *)&qword_101680C50);
        uint64_t v157 = swift_bridgeObjectRetain();
        id v149 = sub_100ABF740(v157);
      }
      else
      {
        id v149 = 0;
      }
      uint64_t v148 = sub_100CFA604(v200, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    }
    uint64_t v158 = (uint64_t)v208;
    v231(v148);
    CRRegister.wrappedValue.getter();
    sub_100522F00(v158, &qword_1016892B0);
    uint64_t v159 = v150 + *(int *)(v125 + 24);
    if (v133(v159, 1, v134))
    {
      sub_100CFA604(v150, type metadata accessor for CRLShapeItemParentAffinity);
      id v81 = v226;
      if (v149) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v160 = v159;
      uint64_t v161 = v193;
      sub_100CFA59C(v160, v193, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
      sub_100CFA604(v150, type metadata accessor for CRLShapeItemParentAffinity);
      id v81 = v226;
      if (*(void *)(v161 + 80))
      {
        sub_10050BF48(0, (unint64_t *)&qword_101680C50);
        uint64_t v162 = swift_bridgeObjectRetain();
        id v163 = sub_100ABF740(v162);
        sub_100CFA604(v161, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
        if (v149)
        {
          if (v163)
          {
            id v164 = v149;
            char v165 = static NSObject.== infix(_:_:)();

            uint64_t v84 = v225;
            if (v165)
            {
              swift_release();
              goto LABEL_54;
            }
          }
          else
          {
LABEL_52:

            uint64_t v84 = v225;
          }
          *(void *)&v83[v219] = 0;
          swift_bridgeObjectRelease();
          *(uint64_t *)((char *)v228 + (void)v83) = 0;
          swift_release();
          swift_bridgeObjectRelease();
LABEL_54:
          uint64_t v80 = v234;
          goto LABEL_8;
        }
        id v149 = v163;
        if (v163) {
          goto LABEL_52;
        }
      }
      else
      {
        sub_100CFA604(v161, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
        if (v149) {
          goto LABEL_52;
        }
      }
    }
    swift_release();
    uint64_t v80 = v234;
    uint64_t v84 = v225;
LABEL_8:
    v84 += 2;
    if (!--v81)
    {
      uint64_t v82 = v190;
      swift_bridgeObjectRelease();
      goto LABEL_91;
    }
  }
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
  return result;
}

uint64_t sub_100CF2164()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRLPKStrokePathData();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  Swift::String v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v0 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes);
  if (v16) {
    goto LABEL_17;
  }
  uint64_t v52 = v13;
  uint64_t v53 = v10;
  uint64_t v54 = v3;
  uint64_t v55 = v2;
  uint64_t v56 = OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes;
  uint64_t v17 = OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke;
  uint64_t v18 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke);
  if (v18)
  {
    id v19 = *(id *)(v1 + OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke);
  }
  else
  {
    uint64_t v51 = v6;
    uint64_t v20 = *(uint64_t **)(v1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    uint64_t v21 = *v20;
    uint64_t result = swift_conformsToProtocol2();
    if (!result) {
      goto LABEL_19;
    }
    *(void *)&v60[0] = v20;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(result + 8))(v57, v21, result);
    sub_10051B3EC((uint64_t)v57, (uint64_t)v58, (uint64_t *)&unk_101685110);
    if (sub_100556850((uint64_t)v58) == 1) {
      goto LABEL_14;
    }
    v60[12] = v58[12];
    v60[13] = v58[13];
    uint64_t v61 = v59;
    v60[8] = v58[8];
    v60[9] = v58[9];
    v60[10] = v58[10];
    v60[11] = v58[11];
    v60[4] = v58[4];
    v60[5] = v58[5];
    v60[6] = v58[6];
    v60[7] = v58[7];
    v60[0] = v58[0];
    v60[1] = v58[1];
    v60[2] = v58[2];
    v60[3] = v58[3];
    id v23 = sub_100A1E370((uint64_t)v60, 1);
    sub_100A37194(v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100519F40);
    uint64_t v24 = *(void **)(v1 + v17);
    *(void *)(v1 + v17) = v23;
    id v19 = v23;

    Swift::String v6 = v51;
  }
  self;
  uint64_t v25 = swift_dynamicCastObjCClass();
  if (!v25)
  {
    id v38 = v18;

LABEL_14:
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"pencilKitStrokes", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeItem.swift", 98, 2, 197, (uint64_t)"invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1005598CC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"pencilKitStrokes", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeItem.swift", 98, 2, 197);
    uint64_t v16 = 0;
LABEL_17:
    swift_bridgeObjectRetain();
    return v16;
  }
  uint64_t v49 = v25;
  id v50 = v19;
  uint64_t v51 = v6;
  uint64_t v26 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v27 = **(void **)(v1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v28 = *(uint64_t (**)(uint64_t))(v27 + 704);
    id v29 = v18;
    uint64_t v30 = swift_retain();
    uint64_t v31 = (void *)v28(v30);
    swift_release();
    id v32 = [v31 bezierPath];

    uint64_t v33 = *(void *)(v1 + v26);
    if (*(_UNKNOWN ****)v33 != &off_101676660) {
      uint64_t v33 = 0;
    }
    uint64_t v34 = v33 + *(void *)(*(void *)v33 + 632);
    swift_beginAccess();
    sub_100522E9C(v34, (uint64_t)v15, &qword_1016892B0);
    sub_1005057FC(&qword_101686808);
    uint64_t v35 = (uint64_t)v53;
    CRRegister.wrappedValue.getter();
    sub_100522F00((uint64_t)v15, &qword_1016892B0);
    uint64_t v36 = v35 + *(int *)(v7 + 24);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v36, 1, v55))
    {
      sub_100CFA604(v35, type metadata accessor for CRLShapeItemParentAffinity);
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v39 = v36;
      uint64_t v40 = (uint64_t)v51;
      sub_100CFA59C(v39, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
      sub_100CFA604(v35, type metadata accessor for CRLShapeItemParentAffinity);
      uint64_t v37 = (void *)sub_100B364B0();
      sub_100CFA604(v40, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    }
    uint64_t v42 = v49;
    uint64_t v41 = v50;
    uint64_t v43 = self;
    id v44 = sub_100CF3D0C();
    id v45 = [v43 pencilKitStrokesFromPath:v32 inkStroke:v42 strokePathCompactData:v37 maskPath:v44];

    type metadata accessor for PKStroke();
    uint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v47 = v56;
    *(void *)(v1 + v56) = v46;

    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v1 + v47);
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

Class sub_100CF2884(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();

  if (v5)
  {
    type metadata accessor for PKStroke();
    v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.Class isa = 0;
  }

  return v6.super.isa;
}

double *sub_100CF28FC()
{
  uint64_t v1 = type metadata accessor for PKStroke();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  uint64_t v36 = (char *)&v35 - v8;
  uint64_t v9 = v0;
  double d = 1.0;
  CGFloat ty = 0.0;
  CGFloat tx = 0.0;
  CGFloat c = 0.0;
  CGFloat b = 0.0;
  double a = 1.0;
  while (1)
  {
    uint64_t v16 = *(uint64_t (**)(void))((swift_isaMask & *v9) + 0xE0);
    uint64_t v17 = v9;
    uint64_t v18 = (void *)v16();
    [v18 transform];
    long long v39 = *(_OWORD *)&t1.a;
    long long v38 = *(_OWORD *)&t1.c;
    long long v37 = *(_OWORD *)&t1.tx;

    t1.double a = a;
    t1.CGFloat b = b;
    t1.CGFloat c = c;
    t1.double d = d;
    t1.CGFloat tx = tx;
    t1.CGFloat ty = ty;
    *(_OWORD *)&t2.double a = v39;
    *(_OWORD *)&t2.CGFloat c = v38;
    *(_OWORD *)&t2.CGFloat tx = v37;
    CGAffineTransformConcat(&v40, &t1, &t2);
    double a = v40.a;
    CGFloat b = v40.b;
    CGFloat c = v40.c;
    double d = v40.d;
    CGFloat tx = v40.tx;
    CGFloat ty = v40.ty;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

    if (!Strong) {
      break;
    }

    type metadata accessor for CRLBoardItem(0);
    uint64_t v9 = (void *)swift_dynamicCastClass();
    if (!v9) {
      goto LABEL_6;
    }
  }
  uint64_t Strong = v17;
LABEL_6:

  uint64_t v20 = sub_100CF2164();
  if (v20)
  {
    uint64_t v21 = v20;
    int64_t v22 = *(void *)(v20 + 16);
    if (v22)
    {
      *(void *)&t2.double a = _swiftEmptyArrayStorage;
      sub_1006BBB84(0, v22, 0);
      uint64_t v23 = v2 + 16;
      *(void *)&long long v38 = *(void *)(v2 + 16);
      unint64_t v24 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
      uint64_t v35 = v21;
      *(void *)&long long v37 = v24;
      unint64_t v25 = v21 + v24;
      uint64_t v26 = *(void *)(v2 + 72);
      uint64_t v27 = (void (**)(char *, uint64_t))(v2 + 8);
      *(void *)&long long v39 = v23;
      uint64_t v28 = (void (**)(unint64_t, char *, uint64_t))(v23 + 16);
      do
      {
        ((void (*)(char *, unint64_t, uint64_t))v38)(v5, v25, v1);
        Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
        t1.double a = a;
        t1.CGFloat b = b;
        t1.CGFloat c = c;
        t1.double d = d;
        t1.CGFloat tx = tx;
        t1.CGFloat ty = ty;
        id v30 = -[objc_class crl_strokeByAppendingTransform:](isa, "crl_strokeByAppendingTransform:", &t1, v35);

        static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();
        (*v27)(v5, v1);
        CGFloat v31 = t2.a;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1006BBB84(0, *(void *)(*(void *)&v31 + 16) + 1, 1);
          CGFloat v31 = t2.a;
        }
        unint64_t v33 = *(void *)(*(void *)&v31 + 16);
        unint64_t v32 = *(void *)(*(void *)&v31 + 24);
        if (v33 >= v32 >> 1)
        {
          sub_1006BBB84(v32 > 1, v33 + 1, 1);
          CGFloat v31 = t2.a;
        }
        *(void *)(*(void *)&v31 + 16) = v33 + 1;
        (*v28)(*(void *)&v31 + v37 + v33 * v26, v36, v1);
        t2.double a = v31;
        v25 += v26;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      CGFloat v31 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    }
  }
  else
  {
    CGFloat v31 = 0.0;
  }
  return *(double **)&v31;
}

void sub_100CF2EA8(void *a1)
{
  uint64_t v2 = v1;
  sub_10088AA40(a1);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong
    && (uint64_t v4 = Strong, v5 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
                     v4,
                     (v5 & 1) != 0))
  {
  }
  else
  {
    *(void *)(v2 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace) = 0;

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100CF2FD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke);
  id v4 = v3;
  if (v3) {
    goto LABEL_6;
  }
  char v5 = *(uint64_t **)(v1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  uint64_t v6 = *v5;
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    *(void *)&v14[0] = v5;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(result + 8))(v11, v6, result);
    sub_10051B3EC((uint64_t)v11, (uint64_t)v12, (uint64_t *)&unk_101685110);
    if (sub_100556850((uint64_t)v12) == 1)
    {
      id v4 = 0;
    }
    else
    {
      v14[12] = v12[12];
      v14[13] = v12[13];
      uint64_t v15 = v13;
      v14[8] = v12[8];
      v14[9] = v12[9];
      v14[10] = v12[10];
      v14[11] = v12[11];
      v14[4] = v12[4];
      v14[5] = v12[5];
      v14[6] = v12[6];
      v14[7] = v12[7];
      v14[0] = v12[0];
      v14[1] = v12[1];
      v14[2] = v12[2];
      v14[3] = v12[3];
      id v4 = sub_100A1E370((uint64_t)v14, 1);
      sub_100A37194(v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100519F40);
      uint64_t v8 = *(void **)(v1 + v2);
      *(void *)(v1 + v2) = v4;
      id v9 = v4;
    }
LABEL_6:
    id v10 = v3;
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

void sub_100CF31B8(void *a1)
{
  sub_100CFA3E8(a1);
}

void sub_100CF3314(void *a1)
{
  sub_100CFA4C8(a1);
}

uint64_t sub_100CF3390()
{
  uint64_t v1 = type metadata accessor for CRLPKStrokePathData();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  char v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLShapeItemParentAffinity(0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6, v8);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  if (*(_UNKNOWN ****)v15 != &off_101676660) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v15 + *(void *)(*(void *)v15 + 632);
  swift_beginAccess();
  sub_100522E9C(v16, (uint64_t)v14, &qword_1016892B0);
  sub_1005057FC(&qword_101686808);
  CRRegister.wrappedValue.getter();
  sub_100522F00((uint64_t)v14, &qword_1016892B0);
  uint64_t v17 = (uint64_t)&v10[*(int *)(v7 + 32)];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v17, 1, v1))
  {
    sub_100CFA604((uint64_t)v10, type metadata accessor for CRLShapeItemParentAffinity);
    return 0;
  }
  else
  {
    sub_100CFA59C(v17, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    sub_100CFA604((uint64_t)v10, type metadata accessor for CRLShapeItemParentAffinity);
    uint64_t v18 = sub_100B364B0();
    sub_100CFA604((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
  }
  return v18;
}

void sub_100CF369C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CRLPKStrokePathData();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v43, v9);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v42, v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1005057FC(&qword_10168E498);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v1 + OBJC_IVAR____TtC8Freeform12CRLBoardItem_transactionContext)
    && (id v19 = (void *)swift_unknownObjectWeakLoadStrong()) != 0
    && (uint64_t v20 = v19, v21 = (*(uint64_t (**)(void))((swift_isaMask & *v19) + 0x2F0))(), v20, (v21 & 1) != 0))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set", 75, 2u, (uint64_t)&_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set");
    sub_1005871AC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v36, v37);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    long long v39 = v8;
    uint64_t v41 = v2;
    if (**(_UNKNOWN *****)(v2 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData) == &off_101676660) {
      uint64_t v22 = *(void *)(v2 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = v22 + *(void *)(*(void *)v22 + 632);
    swift_beginAccess();
    sub_100522E9C(v23, (uint64_t)v14, &qword_1016892B0);
    id v40 = a1;
    swift_retain();
    sub_1005057FC(&qword_101686808);
    CRRegister.wrappedValue.getter();
    sub_100522F00((uint64_t)v14, &qword_1016892B0);
    uint64_t v24 = (uint64_t)&v11[*(int *)(v43 + 24)];
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v24, 1, v4))
    {
      sub_100CFA604((uint64_t)v11, type metadata accessor for CRLShapeItemParentAffinity);
      id v25 = 0;
      uint64_t v27 = v40;
      uint64_t v26 = v41;
    }
    else
    {
      uint64_t v28 = (uint64_t)v39;
      sub_100CFA59C(v24, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
      sub_100CFA604((uint64_t)v11, type metadata accessor for CRLShapeItemParentAffinity);
      id v25 = *(id *)(v28 + 80);
      if (v25)
      {
        sub_10050BF48(0, (unint64_t *)&qword_101680C50);
        uint64_t v29 = swift_bridgeObjectRetain();
        id v25 = sub_100ABF740(v29);
      }
      uint64_t v27 = v40;
      uint64_t v26 = v41;
      sub_100CFA604((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    }
    id v30 = v27;
    sub_100B3560C(v30, v25, (uint64_t)v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
    swift_beginAccess();
    CGFloat v31 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
    sub_1006063BC((uint64_t)v18, v32 + *(int *)(v43 + 24), &qword_10168E498);
    v31(v44, 0);
    swift_endAccess();
    swift_release();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong
      && (uint64_t v34 = Strong,
          char v35 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
          v34,
          (v35 & 1) != 0))
    {
    }
    else
    {
      *(void *)(v26 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes) = 0;
      swift_bridgeObjectRelease();
      *(void *)(v26 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace) = 0;

      swift_bridgeObjectRelease();
    }
  }
}

id sub_100CF3D0C()
{
  uint64_t v1 = type metadata accessor for CRLPKStrokePathData();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRLShapeItemParentAffinity(0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  if (*(_UNKNOWN ****)v15 != &off_101676660) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v15 + *(void *)(*(void *)v15 + 632);
  swift_beginAccess();
  sub_100522E9C(v16, (uint64_t)v14, &qword_1016892B0);
  sub_1005057FC(&qword_101686808);
  CRRegister.wrappedValue.getter();
  sub_100522F00((uint64_t)v14, &qword_1016892B0);
  uint64_t v17 = (uint64_t)&v10[*(int *)(v7 + 32)];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v17, 1, v1))
  {
    sub_100CFA604((uint64_t)v10, type metadata accessor for CRLShapeItemParentAffinity);
    return 0;
  }
  else
  {
    sub_100CFA59C(v17, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    sub_100CFA604((uint64_t)v10, type metadata accessor for CRLShapeItemParentAffinity);
    id v18 = (id)*((void *)v5 + 10);
    if (v18)
    {
      sub_10050BF48(0, (unint64_t *)&qword_101680C50);
      uint64_t v19 = swift_bridgeObjectRetain();
      id v18 = sub_100ABF740(v19);
    }
    sub_100CFA604((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
  }
  return v18;
}

uint64_t sub_100CF4044(void *a1)
{
  uint64_t v2 = v1;
  id v41 = a1;
  uint64_t v3 = sub_1005057FC(&qword_10168E498);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v40 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v43 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v43, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CRLPKStrokePathData();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v42 = (uint64_t)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v1 + OBJC_IVAR____TtC8Freeform12CRLBoardItem_transactionContext)
    && (uint64_t v21 = (void *)swift_unknownObjectWeakLoadStrong()) != 0
    && (uint64_t v22 = v21, v23 = (*(uint64_t (**)(void))((swift_isaMask & *v21) + 0x2F0))(), v22, (v23 & 1) != 0))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set", 75, 2u, (uint64_t)&_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set");
    sub_1005871AC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v36, v37);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v24 = *(void *)(v2 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    if (*(_UNKNOWN ****)v24 != &off_101676660) {
      uint64_t v24 = 0;
    }
    uint64_t v25 = v24 + *(void *)(*(void *)v24 + 632);
    swift_beginAccess();
    uint64_t v39 = v2;
    sub_100522E9C(v25, (uint64_t)v16, &qword_1016892B0);
    sub_1005057FC(&qword_101686808);
    CRRegister.wrappedValue.getter();
    sub_100522F00((uint64_t)v16, &qword_1016892B0);
    sub_100522E9C((uint64_t)&v12[*(int *)(v43 + 24)], (uint64_t)v9, &qword_10168E498);
    sub_100CFA604((uint64_t)v12, type metadata accessor for CRLShapeItemParentAffinity);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v17) == 1)
    {

      return sub_100522F00((uint64_t)v9, &qword_10168E498);
    }
    else
    {
      sub_100CFA6AC((uint64_t)v9, v42, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
      uint64_t v27 = v39;
      swift_retain();
      uint64_t v28 = (void *)sub_100B364B0();
      id v29 = v41;
      id v38 = v41;
      uint64_t v30 = v40;
      sub_100B3560C(v28, v29, v40);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v30, 0, 1, v17);
      swift_beginAccess();
      CGFloat v31 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
      sub_1006063BC(v30, v32 + *(int *)(v43 + 24), &qword_10168E498);
      v31(v44, 0);
      swift_endAccess();
      swift_release();
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong
        && (uint64_t v34 = Strong,
            char v35 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
            v34,
            (v35 & 1) != 0))
      {
      }
      else
      {
        *(void *)(v27 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes) = 0;
        swift_bridgeObjectRelease();
        *(void *)(v27 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace) = 0;

        swift_bridgeObjectRelease();
      }
      return sub_100CFA604(v42, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    }
  }
  return result;
}

BOOL sub_100CF46D4()
{
  uint64_t v1 = type metadata accessor for CRLShapeItemParentAffinity(0);
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  if (*(_UNKNOWN ****)v10 != &off_101676660) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 + *(void *)(*(void *)v10 + 632);
  swift_beginAccess();
  sub_100522E9C(v11, (uint64_t)v9, &qword_1016892B0);
  sub_1005057FC(&qword_101686808);
  CRRegister.wrappedValue.getter();
  sub_100522F00((uint64_t)v9, &qword_1016892B0);
  int v12 = v5[*(int *)(v2 + 36) + 8];
  sub_100CFA604((uint64_t)v5, type metadata accessor for CRLShapeItemParentAffinity);
  if (v12 != 255) {
    return 0;
  }
  id v14 = sub_100CF3D0C();

  return v14 == 0;
}

uint64_t sub_100CF4A94()
{
  uint64_t v1 = type metadata accessor for CRLShapeItemParentAffinity(0);
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  if (*(_UNKNOWN ****)v10 != &off_101676660) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 + *(void *)(*(void *)v10 + 632);
  swift_beginAccess();
  sub_100522E9C(v11, (uint64_t)v9, &qword_1016892B0);
  sub_1005057FC(&qword_101686808);
  CRRegister.wrappedValue.getter();
  sub_100522F00((uint64_t)v9, &qword_1016892B0);
  int v12 = &v5[*(int *)(v2 + 36)];
  uint64_t v13 = *(void *)v12;
  LOBYTE(v11) = v12[8];
  sub_100CFA604((uint64_t)v5, type metadata accessor for CRLShapeItemParentAffinity);
  uint64_t result = 0;
  if ((v11 & 1) == 0) {
    return CRLiCloudConnectionStatus.rawValue.getter(v13);
  }
  return result;
}

uint64_t sub_100CF4C98(unint64_t a1)
{
  if (!*(void *)(v1 + OBJC_IVAR____TtC8Freeform12CRLBoardItem_transactionContext)
    && (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong()) != 0
    && (uint64_t v4 = Strong, v5 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
                     v4,
                     (v5 & 1) != 0))
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set", 75, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Attempting to mutate a CRLTransactable without a CRLTransactableContext set");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_guardTransaction()", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactable.swift", 91, 2, 76);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v11, v12);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_retain();
    uint64_t v6 = sub_100BC6D48(a1);
    swift_beginAccess();
    sub_1005057FC(&qword_1016892B0);
    sub_1005057FC(&qword_101686808);
    uint64_t v7 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
    uint64_t v9 = v8 + *(int *)(type metadata accessor for CRLShapeItemParentAffinity(0) + 28);
    *(void *)uint64_t v9 = v6;
    *(unsigned char *)(v9 + 8) = 0;
    v7(v13, 0);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_100CF4F14(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRLPKStrokePathData();
  uint64_t v64 = *(void *)(v3 - 8);
  uint64_t v65 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v57 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v61, v6);
  uint64_t v63 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v59, v8);
  uint64_t v60 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  id v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (char *)[objc_allocWithZone((Class)type metadata accessor for CRLCommandGroup()) init];
  uint64_t v71 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v72 = a1;
  uint64_t v16 = *(uint64_t (**)(uint64_t))(**(void **)(a1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                          + 288);
  uint64_t v17 = swift_retain();
  uint64_t v18 = (void *)v16(v17);
  swift_release();
  id v19 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetInfoGeometry());
  uint64_t v68 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v20 = *(void (**)(uint64_t))(**(void **)&v1[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] + 256);
  uint64_t v70 = v1;
  uint64_t v21 = v1;
  uint64_t v22 = swift_retain();
  v20(v22);
  swift_release();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v69 = v10;
  uint64_t v67 = v24;
  v24(v14, v10);
  id v25 = [v19 initWithId:isa geometry:v18];

  uint64_t v66 = v15;
  uint64_t v26 = &v15[OBJC_IVAR____TtC8Freeform15CRLCommandGroup_commands];
  swift_beginAccess();
  id v27 = v25;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v26 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  id v62 = v27;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  uint64_t v28 = **(void **)(v72 + v71);
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t))(v28 + 704);
    uint64_t v31 = swift_retain();
    uint64_t v32 = (void *)v30(v31);
    swift_release();
    id v33 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetPathSource());
    uint64_t v34 = *(void (**)(uint64_t))(**(void **)&v70[v68] + 256);
    char v35 = v21;
    uint64_t v36 = swift_retain();
    v34(v36);
    swift_release();
    Class v37 = UUID._bridgeToObjectiveC()().super.isa;
    v67(v14, v69);
    id v38 = [v33 initWithId:v37 pathSource:v32];

    swift_beginAccess();
    id v39 = v38;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v26 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    id v58 = v39;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    uint64_t v40 = *(void *)(v72 + v71);
    if (*(_UNKNOWN ****)v40 != &off_101676660) {
      uint64_t v40 = 0;
    }
    uint64_t v41 = v40 + *(void *)(*(void *)v40 + 632);
    swift_beginAccess();
    uint64_t v42 = v60;
    sub_100522E9C(v41, v60, &qword_1016892B0);
    uint64_t v43 = v35;
    sub_1005057FC(&qword_101686808);
    uint64_t v44 = (uint64_t)v63;
    CRRegister.wrappedValue.getter();
    sub_100522F00(v42, &qword_1016892B0);
    uint64_t v45 = v44 + *(int *)(v61 + 24);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v45, 1, v65))
    {
      sub_100CFA604(v44, type metadata accessor for CRLShapeItemParentAffinity);
      uint64_t v46 = 0;
    }
    else
    {
      uint64_t v47 = v45;
      uint64_t v48 = v57;
      sub_100CFA59C(v47, v57, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
      sub_100CFA604(v44, type metadata accessor for CRLShapeItemParentAffinity);
      uint64_t v46 = (void *)sub_100B364B0();
      sub_100CFA604(v48, (uint64_t (*)(void))type metadata accessor for CRLPKStrokePathData);
    }
    id v49 = sub_100CF3D0C();
    id v50 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetFreehandDrawingShapeItemPKData());
    uint64_t v51 = *(void (**)(uint64_t))(**(void **)&v70[v68] + 256);
    uint64_t v52 = swift_retain();
    v51(v52);
    swift_release();
    Class v53 = UUID._bridgeToObjectiveC()().super.isa;
    v67(v14, v69);
    id v54 = [v50 initWithId:v53 strokePathCompactData:v46 maskPath:v49];

    swift_beginAccess();
    id v55 = v54;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v26 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

    return (uint64_t)v66;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CF5798()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

id sub_100CF57D8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLFreehandDrawingShapeItem();
  [super dealloc];
}

uint64_t sub_100CF585C()
{
  return type metadata accessor for CRLFreehandDrawingShapeItem();
}

uint64_t type metadata accessor for CRLFreehandDrawingShapeItem()
{
  uint64_t result = qword_101699DF0;
  if (!qword_101699DF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100CF58B0()
{
  return swift_updateClassMetadata2();
}

id sub_100CF58F4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  uint64_t v11 = v10;
  id v50 = a8;
  id v51 = a3;
  uint64_t v57 = a5;
  id v58 = a7;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  id v52 = a4;
  id v53 = a9;
  uint64_t v59 = a10;
  uint64_t v60 = a6;
  v48[1] = swift_getObjectType();
  uint64_t v15 = type metadata accessor for CRLFreehandDrawingShapeCRDTData(0);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15, v17);
  uint64_t v49 = (uint64_t)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v48[0] = (uint64_t)v48 - v21;
  uint64_t v22 = type metadata accessor for CRLShapeItemCRDTData(0);
  __chkstk_darwin(v22 - 8, v23);
  id v25 = (char *)v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v54 = v25;
  uint64_t v26 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v26 - 8, v27);
  id v29 = (char *)v48 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v31);
  id v33 = (char *)v48 - v32;
  id v34 = v11;
  uint64_t v35 = (uint64_t)v33;
  sub_100A9CEF0(a2, a3, a4, a9, v59, (uint64_t)v33);
  uint64_t v36 = v50;
  sub_100A9CC94(v57, v60, v58, v50, 0.0, 1, (uint64_t)v25);
  uint64_t v37 = v48[0];
  sub_100CFA59C((uint64_t)v25, v48[0], type metadata accessor for CRLShapeItemCRDTData);
  uint64_t v38 = *(int *)(v16 + 28);

  *(void *)(v37 + v38) = _swiftEmptyDictionarySingleton;
  uint64_t v39 = v35;
  sub_100522E9C(v35, (uint64_t)v29, &qword_1016892B0);
  uint64_t v40 = v49;
  sub_100CFA59C(v37, v49, type metadata accessor for CRLFreehandDrawingShapeCRDTData);
  type metadata accessor for CRLFreehandDrawingShapeItemData(0);
  uint64_t v41 = swift_allocObject();
  sub_100CFA6AC(v40, v41 + *(void *)(*(void *)v41 + 752), type metadata accessor for CRLFreehandDrawingShapeCRDTData);
  *(void *)(v41 + qword_10169E700) = 0;
  sub_10051B3EC((uint64_t)v29, v41 + *(void *)(*(void *)v41 + 632), &qword_1016892B0);
  uint64_t v42 = sub_10068B398(0x1000000000000, 0x2000400000000, 0x1000000000000, 2);
  uint64_t v43 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLFreehandDrawingShapeItem());
  *(void *)&v43[OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes] = 0;
  *(void *)&v43[OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace] = 0;
  *(void *)&v43[OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke] = 0;
  *(void *)&v43[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = v56;
  *(void *)&v43[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = v42;
  uint64_t v44 = (objc_class *)type metadata accessor for CRLBoardItemBase(0);
  v61.receiver = v43;
  v61.super_class = v44;
  id v45 = [super init];

  uint64_t v46 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v55, v46);
  sub_100CFA604(v37, type metadata accessor for CRLFreehandDrawingShapeCRDTData);
  sub_100CFA604((uint64_t)v54, type metadata accessor for CRLShapeItemCRDTData);
  sub_100522F00(v39, &qword_1016892B0);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v45;
}

uint64_t sub_100CF5EA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v42 = a2;
  uint64_t v3 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v3, v4);
  uint64_t v39 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v10 = sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = *a1;
  uint64_t v19 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  uint64_t v20 = *(void *)(*a1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  if (*(_UNKNOWN ****)v20 != &off_101676660) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = v20 + *(void *)(*(void *)v20 + 632);
  swift_beginAccess();
  sub_100522E9C(v21, (uint64_t)v17, &qword_1016892B0);
  uint64_t v40 = v10;
  sub_1005057FC(&qword_101686808);
  CRRegister.wrappedValue.getter();
  sub_100522F00((uint64_t)v17, &qword_1016892B0);
  uint64_t v41 = v3;
  uint64_t v22 = &v9[*(int *)(v3 + 28)];
  uint64_t v23 = *(void *)v22;
  char v24 = v22[8];
  sub_100CFA604((uint64_t)v9, type metadata accessor for CRLShapeItemParentAffinity);
  Swift::UInt v25 = 0;
  if ((v24 & 1) == 0) {
    Swift::UInt v25 = CRLiCloudConnectionStatus.rawValue.getter(v23);
  }
  uint64_t v26 = *(void *)(v18 + v19);
  if (*(_UNKNOWN ****)v26 != &off_101676660) {
    uint64_t v26 = 0;
  }
  uint64_t v27 = v26 + *(void *)(*(void *)v26 + 632);
  swift_beginAccess();
  sub_100522E9C(v27, (uint64_t)v13, &qword_1016892B0);
  uint64_t v28 = (uint64_t)v39;
  CRRegister.wrappedValue.getter();
  sub_100522F00((uint64_t)v13, &qword_1016892B0);
  uint64_t v29 = v28 + *(int *)(v41 + 28);
  uint64_t v30 = *(void *)v29;
  LOBYTE(v27) = *(unsigned char *)(v29 + 8);
  sub_100CFA604(v28, type metadata accessor for CRLShapeItemParentAffinity);
  uint64_t result = 0;
  if ((v27 & 1) == 0) {
    uint64_t result = CRLiCloudConnectionStatus.rawValue.getter(v30);
  }
  uint64_t v32 = v42;
  uint64_t v33 = *v42;
  uint64_t v34 = *(void *)(*v42 + 16);
  if (v34)
  {
    uint64_t result = sub_1009563E8();
    if (v35) {
      uint64_t v34 = *(void *)(*(void *)(v33 + 56) + 8 * result);
    }
    else {
      uint64_t v34 = 0;
    }
  }
  uint64_t v36 = v34 + 1;
  if (v34 == -1)
  {
    __break(1u);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = *v32;
    *uint64_t v32 = 0x8000000000000000;
    sub_100978E48(v36, v25, isUniquelyReferenced_nonNull_native);
    *uint64_t v32 = v43;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100CF6358(void *a1, uint64_t a2)
{
  void (*v9)(long long *__return_ptr, uint64_t);
  id v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t result;
  CKRecordID v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  long long v24;
  uint64_t v25;
  _OWORD v26[2];

  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRLBoardItemBase(0);
  if (swift_dynamicCastClass())
  {
    uint64_t v8 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
    uint64_t v9 = *(void (**)(long long *__return_ptr, uint64_t))(**(void **)(a2
                                                                              + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData)
                                                                + 536);
    uint64_t v10 = a1;
    swift_retain();
    uint64_t v11 = swift_retain();
    v9(&v24, v11);
    swift_release();
    swift_release();
    if (v25)
    {
      sub_100575CE8(&v24, v26);
      sub_100522D7C((uint64_t)v26, (uint64_t)&v24);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v23 = _swiftEmptyDictionarySingleton;
      sub_1009720A8(&v24, 0, isUniquelyReferenced_nonNull_native);
      uint64_t v13 = v23;
      swift_bridgeObjectRelease();
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0((uint64_t)v26);
    }
    else
    {
      sub_100522F00((uint64_t)&v24, &qword_101672BF0);
      uint64_t v13 = _swiftEmptyDictionarySingleton;
    }
    uint64_t v14 = v22;
    uint64_t v15 = *(void (**)(uint64_t))(**(void **)(a2 + v8) + 256);
    uint64_t v16 = swift_retain();
    v15(v16);
    swift_release();
    uint64_t v17 = sub_100ED26C8((uint64_t)v13);
    swift_bridgeObjectRelease();

    type metadata accessor for CRLTransactableUndoingMutations(0);
    uint64_t v18 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v18 + OBJC_IVAR____TtC8Freeform31CRLTransactableUndoingMutations_id, v7, v14);
    *(void *)(v18 + OBJC_IVAR____TtC8Freeform31CRLTransactableUndoingMutations_values) = v17;
    return v18;
  }
  else
  {
    sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createUndoingMutations(fromSnapshot:)", 37, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLBoardItem.swift", 83, 2, 798, (uint64_t)"Tried to generate undo from mismatched type", 43, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to generate undo from mismatched type");
    sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"createUndoingMutations(fromSnapshot:)", 37, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLBoardItem.swift", 83, 2, 798);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v20, v21);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100CF66C0(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v40 - v10;
  uint64_t v12 = sub_1005057FC(&qword_10168E4A0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRLShapeItem();
  uint64_t v16 = swift_dynamicCastClass();
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v41 = v15;
    type metadata accessor for CRLBoardItemBase(0);
    if (!swift_dynamicCastClass())
    {
      id v37 = a1;
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLBoardItem.swift", 83, 2, 835, (uint64_t)"Tried to create observable deltas from mismatched type", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to create observable deltas from mismatched type");
      char v35 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLBoardItem.swift";
      uint64_t v36 = 835;
      goto LABEL_17;
    }
    v40[1] = v4;
    uint64_t v18 = **(void **)(a2 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    uint64_t v19 = swift_conformsToProtocol2();
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v19 + 16);
      v40[0] = a1;
      swift_retain();
      v21(v18, v20);
      swift_release();
      uint64_t v22 = **(void **)(v17 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
      uint64_t v23 = swift_conformsToProtocol2();
      if (v23)
      {
        uint64_t v24 = v23;
        Swift::UInt v25 = *(void (**)(uint64_t, uint64_t))(v23 + 16);
        swift_retain();
        v25(v22, v24);
        swift_release();
        sub_100CFA664((unint64_t *)&qword_10168E4A8, (void (*)(uint64_t))type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
        uint64_t v26 = (uint64_t)v41;
        CRType.observableDifference(from:)();
        sub_100CFA604((uint64_t)v7, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
        sub_100CFA604((uint64_t)v11, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
        uint64_t v27 = sub_1005057FC(&qword_10168E4B0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27) == 1)
        {
          uint64_t v28 = _swiftEmptyArrayStorage;
          if (!*(void *)&_swiftEmptyArrayStorage[2])
          {

            swift_bridgeObjectRelease();
            uint64_t v29 = _swiftEmptyDictionarySingleton;
LABEL_12:
            sub_100522F00(v26, &qword_10168E4A0);
            return (uint64_t)v29;
          }
        }
        else
        {
          uint64_t v28 = sub_100F61B70(0, 1, 1, _swiftEmptyArrayStorage);
          unint64_t v31 = *((void *)v28 + 2);
          unint64_t v30 = *((void *)v28 + 3);
          if (v31 >= v30 >> 1) {
            uint64_t v28 = sub_100F61B70((double *)(v30 > 1), v31 + 1, 1, v28);
          }
          *((void *)v28 + 2) = v31 + 1;
          uint64_t v32 = &v28[2 * v31];
          strcpy((char *)v32 + 32, "shapeStyleData");
          *((unsigned char *)v32 + 47) = -18;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v42 = _swiftEmptyDictionarySingleton;
        sub_100972448((uint64_t)v28, 5, isUniquelyReferenced_nonNull_native);
        uint64_t v29 = v42;

        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 325, (uint64_t)"Tried to create observable deltas from mismatched type", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_100586FD4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Tried to create observable deltas from mismatched type");
  char v35 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift";
  uint64_t v36 = 325;
LABEL_17:
  sub_1005871AC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"createSpecificDataObservableDeltas(fromSnapshot:)", 49, 2, (uint64_t)v35, 83, 2, v36);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v38, v39);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100CF6C64(uint64_t a1, uint64_t a2, char a3, void *a4, char *a5)
{
  uint64_t v161 = a5;
  uint64_t v165 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v165 - 8);
  __chkstk_darwin(v165, v10);
  uint64_t v148 = (char *)&v141 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_1005057FC((uint64_t *)&unk_10168A0C0);
  __chkstk_darwin(v157, v12);
  uint64_t v14 = (char *)&v141 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1005057FC((uint64_t *)&unk_101674520);
  __chkstk_darwin(v15 - 8, v16);
  id v153 = (char *)&v141 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  __chkstk_darwin(v20, v21);
  uint64_t v158 = (uint64_t)&v141 - v22;
  __chkstk_darwin(v23, v24);
  uint64_t v159 = (char *)&v141 - v25;
  uint64_t v152 = v26;
  uint64_t v156 = v14;
  switch(a3)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v29 = v161;
      uint64_t v27 = v158;
      if (v28) {
        goto LABEL_4;
      }
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10117D8C0;
      uint64_t v137 = CRLTransactablePropertyMapKeys.rawValue.getter(a3);
      uint64_t v139 = v138;
      *(void *)(inited + 56) = &type metadata for String;
      *(void *)(inited + 64) = sub_100528BE4();
      *(void *)(inited + 32) = v137;
      *(void *)(inited + 40) = v139;
      *(void *)(inited + 96) = type metadata accessor for CRLBoardItemBase(0);
      *(void *)(inited + 104) = sub_100CFA664(&qword_101684F48, (void (*)(uint64_t))type metadata accessor for CRLBoardItemBase);
      *(void *)(inited + 72) = v29;
      id v140 = v29;
      sub_10086134C((uint64_t)&_mh_execute_header, (uint64_t)"populatePropertyMap(_:observedDifferenceLabels:withPropertyKey:snapshot:)", 73, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLBoardItem.swift", 83, 2, 898, (uint64_t)"Unhandled CRLTransactablePropertyMapKeys key %@ for transactable %@", 67, 2u, inited);
      sub_1005598CC(inited, (uint64_t)"populatePropertyMap(_:observedDifferenceLabels:withPropertyKey:snapshot:)", 73, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLBoardItem.swift", 83, 2, 898);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      return swift_arrayDestroy();
    default:
      swift_bridgeObjectRelease();
      uint64_t v27 = v158;
LABEL_4:
      type metadata accessor for CRLBoardItemBase(0);
      uint64_t result = swift_dynamicCastClass();
      uint64_t v155 = (void *)result;
      if (!result || !*(void *)(a2 + 16)) {
        return result;
      }
      uint64_t v31 = *(void *)(a2 + 16);
      uint64_t v162 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
      uint64_t v32 = *(void *)((char *)v155 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
      uint64_t v160 = (void *)(a1 + OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data);
      uint64_t v33 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      uint64_t v150 = (void (**)(uint64_t, uint64_t))(v9 + 8);
      uint64_t v151 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
      id v144 = a4;
      uint64_t v154 = v32;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v166 = (uint64_t *)(a2 + 40);
      uint64_t v145 = a2;
      uint64_t v146 = "accessibilityDescription";
      unint64_t v147 = 0x80000001012443E0;
      uint64_t v142 = "servable deltas with wrong type";
      unint64_t v143 = 0x80000001012443C0;
      long long v141 = xmmword_10117E810;
      uint64_t v34 = (uint64_t)v159;
      uint64_t v35 = v31;
      id v163 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      break;
  }
  do
  {
    uint64_t v37 = *(v166 - 1);
    uint64_t v36 = *v166;
    BOOL v38 = v37 == 0x6641746E65726170 && v36 == 0xEE007974696E6966;
    if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v164 = v35;
      (*(void (**)(void))(*(void *)v154 + 264))();
      Swift::String v39 = v161;
      uint64_t v40 = *(void (**)(uint64_t))(**(void **)&v161[v162] + 264);
      uint64_t v41 = swift_retain();
      v40(v41);
      swift_release();
      uint64_t v42 = (uint64_t)v156;
      uint64_t v43 = (uint64_t)&v156[*(int *)(v157 + 48)];
      sub_100522E9C(v34, (uint64_t)v156, (uint64_t *)&unk_101674520);
      sub_100522E9C(v27, v43, (uint64_t *)&unk_101674520);
      uint64_t v44 = *v33;
      if ((*v33)(v42, 1, v165) == 1)
      {
        sub_100522F00(v27, (uint64_t *)&unk_101674520);
        sub_100522F00(v34, (uint64_t *)&unk_101674520);
        if (v44(v43, 1, v165) == 1)
        {
          uint64_t v45 = sub_100522F00(v42, (uint64_t *)&unk_101674520);
LABEL_33:
          uint64_t v52 = v27;
          uint64_t v70 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v39) + 0xE0))(v45);
          uint64_t v71 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v155) + 0xE0))();
          uint64_t v72 = sub_10050BF48(0, (unint64_t *)&qword_101684F50);
          if (static NSObject.== infix(_:_:)())
          {

            uint64_t v33 = v163;
            uint64_t v35 = v164;
            goto LABEL_8;
          }
          unsigned __int8 v73 = [v70 isEqualExceptForPosition:v71];
          uint64_t v35 = v164;
          if (v73)
          {
            *((void *)&v170 + 1) = v72;
            *(void *)&long long v169 = v70;
            uint64_t v74 = v160;
            swift_beginAccess();
            sub_100522E9C((uint64_t)&v169, (uint64_t)v168, &qword_101672BF0);
            id v75 = v70;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v167 = (void *)*v74;
            *uint64_t v74 = 0x8000000000000000;
            sub_100972310((uint64_t)v168, 6uLL, isUniquelyReferenced_nonNull_native);
            *uint64_t v74 = v167;
            swift_bridgeObjectRelease();
            swift_endAccess();
          }
          else
          {
            *((void *)&v170 + 1) = v72;
            *(void *)&long long v169 = v70;
            sub_100522E9C((uint64_t)&v169, (uint64_t)v168, &qword_101672BF0);
            swift_beginAccess();
            id v83 = v70;
            sub_10057D61C((uint64_t)v168, 7uLL);
            swift_endAccess();
            sub_100522F00((uint64_t)&v169, &qword_101672BF0);
            [v83 angle];
            double v85 = v84;
            [v71 angle];
            if (sub_100895600(v85, v86))
            {

              uint64_t v33 = v163;
              goto LABEL_8;
            }
            *((void *)&v170 + 1) = v72;
            *(void *)&long long v169 = v83;
            sub_100522E9C((uint64_t)&v169, (uint64_t)v168, &qword_101672BF0);
            swift_beginAccess();
            id v75 = v83;
            sub_10057D61C((uint64_t)v168, 8uLL);
            swift_endAccess();
          }
          sub_100522F00((uint64_t)&v169, &qword_101672BF0);

          uint64_t v33 = v163;
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v46 = v152;
        sub_100522E9C(v42, v152, (uint64_t *)&unk_101674520);
        if (v44(v43, 1, v165) != 1)
        {
          uint64_t v77 = v148;
          uint64_t v78 = v43;
          uint64_t v79 = v165;
          (*v151)(v148, v78, v165);
          sub_100CFA664((unint64_t *)&qword_10167BDC0, (void (*)(uint64_t))&type metadata accessor for UUID);
          int v149 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v80 = v42;
          id v81 = *v150;
          (*v150)((uint64_t)v77, v79);
          sub_100522F00(v158, (uint64_t *)&unk_101674520);
          sub_100522F00(v34, (uint64_t *)&unk_101674520);
          v81(v46, v79);
          uint64_t v82 = v80;
          uint64_t v27 = v158;
          Swift::String v39 = v161;
          uint64_t v45 = sub_100522F00(v82, (uint64_t *)&unk_101674520);
          if (v149) {
            goto LABEL_33;
          }
LABEL_20:
          uint64_t v47 = *(void (**)(uint64_t))(**(void **)((char *)v39 + v162) + 264);
          uint64_t v48 = swift_retain();
          uint64_t v49 = (uint64_t)v153;
          v47(v48);
          uint64_t v50 = v165;
          swift_release();
          if (v44(v49, 1, v50) == 1)
          {
            sub_100522F00(v49, (uint64_t *)&unk_101674520);
            long long v169 = 0u;
            long long v170 = 0u;
          }
          else
          {
            uint64_t v66 = v165;
            *((void *)&v170 + 1) = v165;
            uint64_t v67 = sub_1005767BC((uint64_t *)&v169);
            (*v151)((char *)v67, v49, v66);
          }
          uint64_t v68 = v160;
          swift_beginAccess();
          sub_100522E9C((uint64_t)&v169, (uint64_t)v168, &qword_101672BF0);
          char v69 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v167 = (void *)*v68;
          *uint64_t v68 = 0x8000000000000000;
          sub_100972310((uint64_t)v168, 0, v69);
          *uint64_t v68 = v167;
          swift_bridgeObjectRelease();
          swift_endAccess();
          uint64_t v45 = sub_100522F00((uint64_t)&v169, &qword_101672BF0);
          uint64_t v27 = v158;
          goto LABEL_33;
        }
        sub_100522F00(v27, (uint64_t *)&unk_101674520);
        sub_100522F00(v34, (uint64_t *)&unk_101674520);
        (*v150)(v46, v165);
      }
      sub_100522F00(v42, (uint64_t *)&unk_10168A0C0);
      goto LABEL_20;
    }
    BOOL v51 = v37 == 0x64656B636F6CLL && v36 == 0xE600000000000000;
    if (v51 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v52 = v27;
      id v53 = *(uint64_t (**)(uint64_t))(**(void **)&v161[v162] + 312);
      uint64_t v54 = swift_retain();
      LOBYTE(v53) = v53(v54);
      swift_release();
      *((void *)&v170 + 1) = &type metadata for Bool;
      LOBYTE(v169) = v53 & 1;
      uint64_t v55 = v160;
      swift_beginAccess();
      sub_100522E9C((uint64_t)&v169, (uint64_t)v168, &qword_101672BF0);
      char v56 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v167 = (void *)*v55;
      uint64_t v57 = v167;
      *uint64_t v55 = 0x8000000000000000;
      unint64_t v59 = sub_1009563E8();
      uint64_t v60 = v57[2];
      BOOL v61 = (v58 & 1) == 0;
      uint64_t v62 = v60 + v61;
      if (__OFADD__(v60, v61))
      {
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        type metadata accessor for CRLChangeProperty(0);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x100CF81B8);
      }
      char v63 = v58;
      if (v57[3] >= v62)
      {
        if ((v56 & 1) == 0) {
          sub_10097C320();
        }
      }
      else
      {
        sub_10095F04C(v62, v56);
        uint64_t v64 = sub_1009563E8();
        if ((v63 & 1) != (v65 & 1)) {
          goto LABEL_104;
        }
        unint64_t v59 = v64;
      }
      uint64_t v33 = v163;
      id v87 = v167;
      if (v63)
      {
LABEL_45:
        sub_1006063BC((uint64_t)v168, v87[7] + 32 * v59, &qword_101672BF0);
LABEL_48:
        *uint64_t v160 = v87;
        swift_bridgeObjectRelease();
        swift_endAccess();
        sub_100522F00((uint64_t)&v169, &qword_101672BF0);
        goto LABEL_8;
      }
      v167[(v59 >> 6) + 8] |= 1 << v59;
      *(void *)(v87[6] + 8 * v59) = 11;
      sub_10051B3EC((uint64_t)v168, v87[7] + 32 * v59, &qword_101672BF0);
      uint64_t v88 = v87[2];
      BOOL v89 = __OFADD__(v88, 1);
      uint64_t v90 = v88 + 1;
      if (v89) {
        goto LABEL_97;
      }
LABEL_47:
      v87[2] = v90;
      goto LABEL_48;
    }
    if (v37 == 0xD000000000000011 && v36 == v147 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v52 = v27;
      uint64_t v91 = *(uint64_t (**)(uint64_t))(**(void **)&v161[v162] + 336);
      uint64_t v92 = swift_retain();
      LOBYTE(v91) = v91(v92);
      swift_release();
      *((void *)&v170 + 1) = &type metadata for Bool;
      LOBYTE(v169) = v91 & 1;
      float v93 = v160;
      swift_beginAccess();
      sub_100522E9C((uint64_t)&v169, (uint64_t)v168, &qword_101672BF0);
      char v94 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v167 = (void *)*v93;
      float v95 = v167;
      *float v93 = 0x8000000000000000;
      unint64_t v59 = sub_1009563E8();
      uint64_t v97 = v95[2];
      BOOL v98 = (v96 & 1) == 0;
      uint64_t v99 = v97 + v98;
      if (__OFADD__(v97, v98)) {
        goto LABEL_98;
      }
      char v100 = v96;
      if (v95[3] >= v99)
      {
        if ((v94 & 1) == 0) {
          sub_10097C320();
        }
      }
      else
      {
        sub_10095F04C(v99, v94);
        uint64_t v101 = sub_1009563E8();
        if ((v100 & 1) != (v102 & 1)) {
          goto LABEL_104;
        }
        unint64_t v59 = v101;
      }
      uint64_t v33 = v163;
      id v87 = v167;
      if (v100) {
        goto LABEL_45;
      }
      v167[(v59 >> 6) + 8] |= 1 << v59;
      *(void *)(v87[6] + 8 * v59) = 12;
      sub_10051B3EC((uint64_t)v168, v87[7] + 32 * v59, &qword_101672BF0);
      uint64_t v103 = v87[2];
      BOOL v89 = __OFADD__(v103, 1);
      uint64_t v90 = v103 + 1;
      if (v89) {
        goto LABEL_99;
      }
      goto LABEL_47;
    }
    if (v37 == 0xD000000000000018 && v36 == v143 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v52 = v27;
      uint64_t v104 = *(uint64_t (**)(uint64_t))(**(void **)&v161[v162] + 360);
      uint64_t v105 = swift_retain();
      uint64_t v106 = v104(v105);
      uint64_t v108 = v107;
      swift_release();
      *((void *)&v170 + 1) = &type metadata for String;
      *(void *)&long long v169 = v106;
      *((void *)&v169 + 1) = v108;
      float v109 = v160;
      swift_beginAccess();
      sub_100522E9C((uint64_t)&v169, (uint64_t)v168, &qword_101672BF0);
      char v110 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v167 = (void *)*v109;
      int v111 = v167;
      *float v109 = 0x8000000000000000;
      unint64_t v59 = sub_1009563E8();
      uint64_t v113 = v111[2];
      BOOL v114 = (v112 & 1) == 0;
      uint64_t v115 = v113 + v114;
      if (__OFADD__(v113, v114)) {
        goto LABEL_100;
      }
      char v116 = v112;
      if (v111[3] >= v115)
      {
        if ((v110 & 1) == 0) {
          sub_10097C320();
        }
      }
      else
      {
        sub_10095F04C(v115, v110);
        uint64_t v117 = sub_1009563E8();
        if ((v116 & 1) != (v118 & 1)) {
          goto LABEL_104;
        }
        unint64_t v59 = v117;
      }
      uint64_t v33 = v163;
      id v87 = v167;
      if (v116) {
        goto LABEL_45;
      }
      v167[(v59 >> 6) + 8] |= 1 << v59;
      *(void *)(v87[6] + 8 * v59) = 14;
      sub_10051B3EC((uint64_t)v168, v87[7] + 32 * v59, &qword_101672BF0);
      uint64_t v119 = v87[2];
      BOOL v89 = __OFADD__(v119, 1);
      uint64_t v90 = v119 + 1;
      if (v89) {
        goto LABEL_101;
      }
      goto LABEL_47;
    }
    if (v37 == 0x776F64616873 && v36 == 0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v52 = v27;
      *((void *)&v170 + 1) = &type metadata for Bool;
      LOBYTE(v169) = 1;
      uint64_t v120 = v160;
      swift_beginAccess();
      sub_100522E9C((uint64_t)&v169, (uint64_t)v168, &qword_101672BF0);
      char v121 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v167 = (void *)*v120;
      uint64_t v122 = v167;
      void *v120 = 0x8000000000000000;
      unint64_t v59 = sub_1009563E8();
      uint64_t v124 = v122[2];
      BOOL v125 = (v123 & 1) == 0;
      uint64_t v126 = v124 + v125;
      if (__OFADD__(v124, v125)) {
        goto LABEL_102;
      }
      char v127 = v123;
      if (v122[3] >= v126)
      {
        if ((v121 & 1) == 0) {
          sub_10097C320();
        }
      }
      else
      {
        sub_10095F04C(v126, v121);
        uint64_t v128 = sub_1009563E8();
        if ((v127 & 1) != (v129 & 1)) {
          goto LABEL_104;
        }
        unint64_t v59 = v128;
      }
      uint64_t v33 = v163;
      id v87 = v167;
      if (v127) {
        goto LABEL_45;
      }
      v167[(v59 >> 6) + 8] |= 1 << v59;
      *(void *)(v87[6] + 8 * v59) = 16;
      sub_10051B3EC((uint64_t)v168, v87[7] + 32 * v59, &qword_101672BF0);
      uint64_t v130 = v87[2];
      BOOL v89 = __OFADD__(v130, 1);
      uint64_t v90 = v130 + 1;
      if (v89) {
        goto LABEL_103;
      }
      goto LABEL_47;
    }
    uint64_t v52 = v27;
    if (v37 == 0x6574726F70707573 && v36 == 0xE900000000000064
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      unint64_t v131 = *(void *)(*(void *)&v161[v162] + 24);
      unint64_t v132 = sub_1002094A4();
      *((void *)&v170 + 1) = &type metadata for Bool;
      LOBYTE(v169) = v132 >= v131;
      unint64_t v133 = v160;
      swift_beginAccess();
      sub_100522E9C((uint64_t)&v169, (uint64_t)v168, &qword_101672BF0);
      char v134 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v167 = (void *)*v133;
      *unint64_t v133 = 0x8000000000000000;
      sub_100972310((uint64_t)v168, 0xDuLL, v134);
      *unint64_t v133 = v167;
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_100522F00((uint64_t)&v169, &qword_101672BF0);
    }
    else
    {
      sub_1005057FC((uint64_t *)&unk_101672B40);
      uint64_t v135 = swift_initStackObject();
      *(_OWORD *)(v135 + 16) = v141;
      *(void *)(v135 + 56) = &type metadata for String;
      *(void *)(v135 + 64) = sub_100528BE4();
      *(void *)(v135 + 32) = v37;
      *(void *)(v135 + 40) = v36;
      swift_bridgeObjectRetain();
      sub_1005598CC(v135, (uint64_t)"populatePropertyMap(_:observedDifferenceLabels:withPropertyKey:snapshot:)", 73, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLBoardItem.swift", 83, 2, 894);
      swift_setDeallocating();
      sub_1005057FC(&qword_101672B50);
      uint64_t v33 = v163;
      swift_arrayDestroy();
    }
LABEL_8:
    uint64_t v27 = v52;
    v166 += 2;
    --v35;
    uint64_t v34 = (uint64_t)v159;
  }
  while (v35);

  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_100CF81E0(uint64_t a1, uint64_t a2, char a3, char *a4, char *a5)
{
  uint64_t v309 = a5;
  uint64_t v295 = (char *)a1;
  uint64_t v296 = a4;
  uint64_t v265 = a2;
  uint64_t v306 = type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  __chkstk_darwin(v306, v6);
  uint64_t v264 = (char *)&v259 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  id v263 = (char *)&v259 - v10;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v259 - v13;
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v259 - v17;
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v259 - v21;
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v259 - v25;
  __chkstk_darwin(v27, v28);
  uint64_t v272 = (char *)&v259 - v29;
  __chkstk_darwin(v30, v31);
  id v273 = (char *)&v259 - v32;
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)&v259 - v35;
  __chkstk_darwin(v37, v38);
  uint64_t v40 = (char *)&v259 - v39;
  __chkstk_darwin(v41, v42);
  uint64_t v44 = (char *)&v259 - v43;
  __chkstk_darwin(v45, v46);
  uint64_t v48 = (char *)&v259 - v47;
  uint64_t v49 = type metadata accessor for CRLPathSourceData(0);
  __chkstk_darwin(v49 - 8, v50);
  uint64_t v305 = (unsigned __int8 *)&v259 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52, v53);
  v304 = (unsigned __int8 *)&v259 - v54;
  uint64_t v303 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v303, v55);
  long long v302 = (char *)&v259 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57, v58);
  uint64_t v301 = (char *)&v259 - v59;
  v308 = (ProtocolDescriptor *)sub_1005057FC(&qword_1016892B0);
  __chkstk_darwin(v308, v60);
  uint64_t v300 = (char *)&v259 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62, v63);
  uint64_t v299 = (uint64_t)&v259 - v64;
  if (a3 != 5)
  {
    if (a3)
    {
      uint64_t v250 = (uint64_t)v295;
      uint64_t v251 = v296;
      uint64_t v252 = v265;
      uint64_t v253 = v309;
      sub_100CF6C64(v250, v252, a3, v251, v253);
      return;
    }
    uint64_t v65 = v265;
    type metadata accessor for CRLShapeItem();
    uint64_t v66 = swift_dynamicCastClass();
    if (!v66) {
      return;
    }
    *(void *)&long long v294 = v66;
    uint64_t v67 = *(void **)(v66 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    uint64_t v298 = &protocol descriptor for CRLAbstractShapeItemDataProtocol;
    if (!swift_conformsToProtocol2()) {
      goto LABEL_103;
    }
    uint64_t v68 = *(void *)(v65 + 16);
    if (!v68)
    {
      uint64_t v254 = v296;
      uint64_t v255 = v296;
      swift_retain();
LABEL_92:
      swift_unknownObjectRetain();
      sub_100CF6C64((uint64_t)v295, v65, 0, (void *)v294, v309);
      swift_release();

      return;
    }
    *((void *)&v294 + 1) = &v295[OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data];
    char v69 = v296;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v70 = (void *)(v65 + 40);
    uint64_t v297 = v67;
    uint64_t v71 = v304;
    uint64_t v72 = (uint64_t)v300;
    while (1)
    {
      BOOL v73 = *(v70 - 1) == 0x6641746E65726170 && *v70 == 0xEE007974696E6966;
      if (v73 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v306 = (uint64_t)v70;
        uint64_t v307 = v68;
        uint64_t v74 = *(void *)&v309[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
        if (!swift_conformsToProtocol2())
        {
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
          return;
        }
        uint64_t v75 = v299;
        (*(void (**)(void))(*v67 + 640))();
        swift_retain();
        sub_1005057FC(&qword_101686808);
        uint64_t v76 = (uint64_t)v301;
        CRRegister.wrappedValue.getter();
        sub_100522F00(v75, &qword_1016892B0);
        uint64_t v77 = v303;
        sub_100CFA59C(v76 + *(int *)(v303 + 20), (uint64_t)v71, type metadata accessor for CRLPathSourceData);
        uint64_t v78 = sub_100CFA604(v76, type metadata accessor for CRLShapeItemParentAffinity);
        (*(void (**)(uint64_t))(*(void *)v74 + 640))(v78);
        uint64_t v79 = (uint64_t)v302;
        CRRegister.wrappedValue.getter();
        sub_100522F00(v72, &qword_1016892B0);
        uint64_t v80 = v79 + *(int *)(v77 + 20);
        id v81 = v305;
        sub_100CFA59C(v80, (uint64_t)v305, type metadata accessor for CRLPathSourceData);
        sub_100CFA604(v79, type metadata accessor for CRLShapeItemParentAffinity);
        char v82 = sub_100AAFDA4(v71, v81);
        sub_100CFA604((uint64_t)v81, type metadata accessor for CRLPathSourceData);
        sub_100CFA604((uint64_t)v71, type metadata accessor for CRLPathSourceData);
        if ((v82 & 1) == 0)
        {
          id v83 = *(void (**)(uint64_t))(*(void *)v74 + 728);
          uint64_t v84 = swift_retain();
          v83(v84);
          uint64_t v85 = swift_release();
          uint64_t v86 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v309) + 0x478))(v85);
          *((void *)&v315 + 1) = sub_10050BF48(0, (unint64_t *)&qword_1016800B8);
          *(void *)&long long v314 = v86;
          id v87 = (uint64_t *)*((void *)&v294 + 1);
          swift_beginAccess();
          sub_100522E9C((uint64_t)&v314, (uint64_t)v392, &qword_101672BF0);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v342 = *v87;
          uint64_t *v87 = 0x8000000000000000;
          sub_100972310((uint64_t)v392, 0x13uLL, isUniquelyReferenced_nonNull_native);
          uint64_t *v87 = v342;
          swift_bridgeObjectRelease();
          swift_endAccess();
          sub_100522F00((uint64_t)&v314, &qword_101672BF0);
        }
        swift_release();
        uint64_t v67 = v297;
        uint64_t v70 = (void *)v306;
        uint64_t v68 = v307;
      }
      v70 += 2;
      if (!--v68)
      {
        uint64_t v65 = v265;
        swift_bridgeObjectRelease();
        uint64_t v254 = v296;
        goto LABEL_92;
      }
    }
  }
  uint64_t v89 = v265;
  uint64_t v276 = v18;
  uint64_t v269 = v44;
  uint64_t v270 = v40;
  uint64_t v268 = v36;
  uint64_t v283 = v26;
  type metadata accessor for CRLShapeItem();
  uint64_t v90 = v296;
  uint64_t v91 = swift_dynamicCastClass();
  if (v91)
  {
    uint64_t v305 = *(unsigned __int8 **)(v91 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    v308 = &protocol descriptor for CRLAbstractShapeItemDataProtocol;
    v304 = (unsigned __int8 *)swift_conformsToProtocol2();
    if (!v304) {
      goto LABEL_104;
    }
    uint64_t v92 = *(void *)(v89 + 16);
    if (v92)
    {
      uint64_t v300 = &v295[OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data];
      uint64_t v303 = (uint64_t)(v304 + 16);
      uint64_t v262 = &v339;
      unint64_t v259 = v90;
      swift_bridgeObjectRetain();
      swift_retain();
      float v93 = (void *)(v89 + 40);
      long long v261 = xmmword_10117E810;
      uint64_t v274 = v48;
      uint64_t v275 = v14;
      uint64_t v284 = v22;
      while (1)
      {
        uint64_t v95 = *(v93 - 1);
        uint64_t v94 = *v93;
        uint64_t v297 = v93;
        BOOL v96 = v95 == 0x7974536570616873 && v94 == 0xEE0061746144656CLL;
        if (v96 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        sub_1005057FC((uint64_t *)&unk_101672B40);
        uint64_t v133 = swift_allocObject();
        *(_OWORD *)(v133 + 16) = v261;
        *(void *)(v133 + 56) = &type metadata for String;
        *(void *)(v133 + 64) = sub_100528BE4();
        *(void *)(v133 + 32) = v95;
        *(void *)(v133 + 40) = v94;
        swift_bridgeObjectRetain();
        sub_1005598CC(v133, (uint64_t)"populatePropertyMap(_:observedDifferenceLabels:withPropertyKey:snapshot:)", 73, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 398);
        swift_setDeallocating();
        sub_1005057FC(&qword_101672B50);
        swift_arrayDestroy();
        swift_deallocClassInstance();
LABEL_22:
        float v93 = v297 + 2;
        --v92;
        uint64_t v48 = v274;
        if (!v92)
        {

          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
      }
      uint64_t v282 = v92;
      uint64_t v97 = (char *)*((void *)v304 + 2);
      uint64_t v301 = *(char **)v305;
      long long v302 = v97;
      ((void (*)(char *))v97)(v301);
      sub_1005057FC((uint64_t *)&unk_1016A8B50);
      CRRegister.wrappedValue.getter();
      uint64_t v299 = *((void *)&v315 + 1);
      uint64_t v291 = v316;
      uint64_t v289 = v317;
      uint64_t v295 = v318;
      uint64_t v296 = (char *)v315;
      uint64_t v98 = v319;
      uint64_t v292 = v320;
      *(void *)&long long v293 = *((void *)&v314 + 1);
      *((void *)&v293 + 1) = v321;
      *(void *)&long long v294 = v314;
      uint64_t v298 = v322;
      *((void *)&v294 + 1) = v323;
      uint64_t v99 = v324;
      uint64_t v288 = v325;
      sub_100CFA604((uint64_t)v48, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
      uint64_t v307 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
      uint64_t v100 = **(void **)&v309[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
      uint64_t v101 = swift_conformsToProtocol2();
      if (!v101) {
        goto LABEL_95;
      }
      uint64_t v102 = v101;
      uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v101 + 16);
      swift_retain();
      uint64_t v104 = (uint64_t)v269;
      v103(v100, v102);
      swift_release();
      CRRegister.wrappedValue.getter();
      long long v285 = v314;
      uint64_t v106 = *((void *)&v315 + 1);
      uint64_t v105 = v315;
      uint64_t v286 = v316;
      uint64_t v287 = v317;
      uint64_t v107 = (uint64_t)v318;
      uint64_t v108 = v319;
      uint64_t v280 = v321;
      uint64_t v281 = v320;
      uint64_t v278 = v323;
      uint64_t v279 = v322;
      uint64_t v109 = v324;
      uint64_t v277 = v325;
      sub_100CFA604(v104, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
      uint64_t v110 = v99;
      uint64_t v290 = v98;
      if (v99)
      {
        char v112 = v298;
        uint64_t v111 = v299;
        uint64_t v113 = v296;
        uint64_t v114 = *((void *)&v293 + 1);
        uint64_t v115 = v294;
        if (v109)
        {
          uint64_t v266 = v107;
          uint64_t v267 = v108;
          *(void *)&long long v314 = v294;
          BYTE8(v314) = v293 & 1;
          long long v116 = v285;
          uint64_t v342 = v285;
          char v343 = BYTE8(v285) & 1;
          sub_1008EE6D8();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v117 = *((void *)&v294 + 1);
          swift_bridgeObjectRetain();
          uint64_t v271 = v110;
          swift_bridgeObjectRetain();
          uint64_t v118 = v288;
          swift_bridgeObjectRetain();
          if (static CRExtensible.== infix(_:_:)())
          {
            int v394 = (int)v296;
            char v395 = BYTE4(v296) & 1;
            uint64_t v396 = v299;
            uint64_t v397 = (uint64_t)v291;
            uint64_t v398 = v289;
            uint64_t v399 = (uint64_t)v295;
            uint64_t v400 = v290;
            uint64_t v401 = v292;
            uint64_t v402 = v114;
            uint64_t v119 = v117;
            uint64_t v120 = v298;
            v403 = v298;
            uint64_t v404 = v119;
            uint64_t v405 = v271;
            int v406 = v105;
            char v407 = BYTE4(v105) & 1;
            uint64_t v408 = v106;
            uint64_t v409 = (uint64_t)v286;
            uint64_t v410 = v287;
            uint64_t v411 = v266;
            uint64_t v121 = v280;
            uint64_t v122 = v281;
            uint64_t v412 = v267;
            uint64_t v413 = v281;
            uint64_t v124 = v278;
            uint64_t v123 = (uint64_t)v279;
            uint64_t v414 = v280;
            uint64_t v415 = (uint64_t)v279;
            uint64_t v416 = v278;
            uint64_t v417 = v109;
            if (sub_1007B12DC((uint64_t)&v394, (uint64_t)&v406))
            {
              int v260 = sub_100ED60AC(v118, v277);
              sub_10051ABBC(v285, *((uint64_t *)&v285 + 1), v105, v106, (uint64_t)v286, v287, v266, v267, v122, v121, v123, v124, v109);
              uint64_t v125 = *((void *)&v293 + 1);
              uint64_t v126 = v294;
              uint64_t v127 = v293;
              uint64_t v128 = (uint64_t)v295;
              uint64_t v129 = (uint64_t)v296;
              uint64_t v130 = v290;
              uint64_t v131 = (uint64_t)v291;
              uint64_t v132 = v289;
              sub_10051ABBC(v294, v293, (uint64_t)v296, v299, (uint64_t)v291, v289, (uint64_t)v295, v290, v292, *((uint64_t *)&v293 + 1), (uint64_t)v298, *((uint64_t *)&v294 + 1), v271);
              sub_10051ABBC(v126, v127, v129, v299, v131, v132, v128, v130, v292, v125, (uint64_t)v298, *((uint64_t *)&v294 + 1), v271);
              if (v260) {
                goto LABEL_44;
              }
            }
            else
            {
              sub_10051ABBC(v285, *((uint64_t *)&v285 + 1), v105, v106, (uint64_t)v286, v287, v266, v267, v122, v121, v123, v124, v109);
              uint64_t v257 = (uint64_t)v120;
              uint64_t v143 = *((void *)&v293 + 1);
              uint64_t v144 = v294;
              uint64_t v145 = v293;
              uint64_t v147 = (uint64_t)v295;
              uint64_t v146 = (uint64_t)v296;
              uint64_t v148 = v290;
              uint64_t v149 = (uint64_t)v291;
              uint64_t v150 = v289;
              sub_10051ABBC(v294, v293, (uint64_t)v296, v299, (uint64_t)v291, v289, (uint64_t)v295, v290, v292, *((uint64_t *)&v293 + 1), v257, *((uint64_t *)&v294 + 1), v271);
              sub_10051ABBC(v144, v145, v146, v299, v149, v150, v147, v148, v292, v143, (uint64_t)v298, *((uint64_t *)&v294 + 1), v271);
            }
          }
          else
          {
            sub_10051ABBC(v116, *((uint64_t *)&v116 + 1), v105, v106, (uint64_t)v286, v287, v266, v267, v281, v280, (uint64_t)v279, v278, v109);
            uint64_t v134 = v271;
            uint64_t v258 = v117;
            uint64_t v135 = v298;
            uint64_t v256 = v114;
            uint64_t v136 = v292;
            uint64_t v137 = v294;
            uint64_t v138 = v293;
            uint64_t v140 = (uint64_t)v295;
            uint64_t v139 = (uint64_t)v296;
            uint64_t v141 = v299;
            uint64_t v142 = v289;
            sub_10051ABBC(v294, v293, (uint64_t)v296, v299, (uint64_t)v291, v289, (uint64_t)v295, v290, v292, v256, (uint64_t)v298, v258, v271);
            sub_10051ABBC(v137, v138, v139, v141, (uint64_t)v291, v142, v140, v290, v136, *((uint64_t *)&v293 + 1), (uint64_t)v135, *((uint64_t *)&v294 + 1), v134);
          }
LABEL_40:
          uint64_t v151 = sub_100A9B204();
          if (v151)
          {
            uint64_t v152 = v151;
            *((void *)&v315 + 1) = sub_10050BF48(0, (unint64_t *)&qword_101687660);
            *(void *)&long long v314 = v152;
          }
          else
          {
            long long v314 = 0u;
            long long v315 = 0u;
          }
          sub_100522E9C((uint64_t)&v314, (uint64_t)&v342, &qword_101672BF0);
          swift_beginAccess();
          sub_10057D61C((uint64_t)&v342, 0x14uLL);
          swift_endAccess();
          sub_100522F00((uint64_t)&v314, &qword_101672BF0);
LABEL_44:
          uint64_t v153 = (uint64_t)v270;
          ((void (*)(char *, unsigned __int8 *))v302)(v301, v304);
          sub_1005057FC(&qword_101673478);
          CRRegister.wrappedValue.getter();
          sub_10051B3EC((uint64_t)&v314, (uint64_t)v340, (uint64_t *)&unk_101685110);
          sub_100CFA604(v153, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
          uint64_t v154 = **(void **)&v309[v307];
          uint64_t v155 = swift_conformsToProtocol2();
          if (!v155) {
            goto LABEL_96;
          }
          uint64_t v156 = v155;
          uint64_t v157 = *(void (**)(uint64_t, uint64_t))(v155 + 16);
          swift_retain();
          uint64_t v158 = (uint64_t)v268;
          v157(v154, v156);
          swift_release();
          CRRegister.wrappedValue.getter();
          sub_10051B3EC((uint64_t)&v314, (uint64_t)v341, (uint64_t *)&unk_101685110);
          sub_100CFA604(v158, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
          sub_10051B3EC((uint64_t)v340, (uint64_t)&v342, (uint64_t *)&unk_101685110);
          if (sub_100556850((uint64_t)&v342) == 1)
          {
            sub_10051B3EC((uint64_t)v341, (uint64_t)&v314, (uint64_t *)&unk_101685110);
            int v159 = sub_100556850((uint64_t)&v314);
            uint64_t v160 = (uint64_t)v273;
            if (v159 == 1) {
              goto LABEL_56;
            }
          }
          else
          {
            sub_10051B3EC((uint64_t)v341, (uint64_t)&v314, (uint64_t *)&unk_101685110);
            if (sub_100556850((uint64_t)&v314) != 1)
            {
              sub_10051B3EC((uint64_t)v341, (uint64_t)v310, (uint64_t *)&unk_101685110);
              v392[12] = v310[12];
              v392[13] = v310[13];
              uint64_t v393 = v311;
              v392[8] = v310[8];
              v392[9] = v310[9];
              v392[11] = v310[11];
              v392[10] = v310[10];
              v392[4] = v310[4];
              v392[5] = v310[5];
              v392[7] = v310[7];
              v392[6] = v310[6];
              v392[0] = v310[0];
              v392[1] = v310[1];
              v392[3] = v310[3];
              v392[2] = v310[2];
              sub_10051B3EC((uint64_t)v340, (uint64_t)v312, (uint64_t *)&unk_101685110);
              v390[12] = v312[12];
              v390[13] = v312[13];
              uint64_t v391 = v313;
              v390[8] = v312[8];
              v390[9] = v312[9];
              v390[11] = v312[11];
              v390[10] = v312[10];
              v390[4] = v312[4];
              v390[5] = v312[5];
              v390[7] = v312[7];
              v390[6] = v312[6];
              v390[0] = v312[0];
              v390[1] = v312[1];
              v390[3] = v312[3];
              v390[2] = v312[2];
              sub_100A37194(v340, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10051A1EC);
              char v161 = sub_100A1D9DC((uint64_t)v390, (uint64_t)v392);
              sub_100A37194(v341, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100519F40);
              sub_100A37194(v340, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100519F40);
              sub_100A37194(v340, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100519F40);
              uint64_t v160 = (uint64_t)v273;
              if (v161) {
                goto LABEL_56;
              }
              goto LABEL_52;
            }
            uint64_t v160 = (uint64_t)v273;
          }
          sub_10051B3EC((uint64_t)v340, (uint64_t)&v314, (uint64_t *)&unk_101685110);
          sub_10051B3EC((uint64_t)v341, (uint64_t)v262, (uint64_t *)&unk_101685110);
          sub_100556868((uint64_t)&v314);
LABEL_52:
          uint64_t v162 = v309;
          id v163 = *(void **)&v309[OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke];
          *(void *)&v309[OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke] = 0;

          uint64_t v164 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v162) + 0x420))();
          if (v164)
          {
            uint64_t v165 = v164;
            *((void *)&v315 + 1) = sub_10050BF48(0, (unint64_t *)&qword_101686A50);
            *(void *)&long long v314 = v165;
          }
          else
          {
            long long v314 = 0u;
            long long v315 = 0u;
          }
          sub_100522E9C((uint64_t)&v314, (uint64_t)v312, &qword_101672BF0);
          swift_beginAccess();
          sub_10057D61C((uint64_t)v312, 0xFuLL);
          swift_endAccess();
          sub_100522F00((uint64_t)&v314, &qword_101672BF0);
LABEL_56:
          ((void (*)(char *, unsigned __int8 *))v302)(v301, v304);
          uint64_t v166 = sub_1005057FC((uint64_t *)&unk_10168A0D0);
          CRRegister.wrappedValue.getter();
          long long v293 = v314;
          long long v294 = v315;
          uint64_t v167 = v317;
          uint64_t v295 = (char *)v316;
          uint64_t v296 = v318;
          sub_100CFA604(v160, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
          uint64_t v168 = **(void **)&v309[v307];
          uint64_t v169 = swift_conformsToProtocol2();
          if (!v169) {
            goto LABEL_97;
          }
          uint64_t v170 = v169;
          uint64_t v171 = *(void (**)(uint64_t, uint64_t))(v169 + 16);
          swift_retain();
          uint64_t v172 = (uint64_t)v272;
          v171(v168, v170);
          swift_release();
          uint64_t v299 = v166;
          CRRegister.wrappedValue.getter();
          long long v173 = v314;
          uint64_t v298 = (ProtocolDescriptor *)*((void *)&v315 + 1);
          uint64_t v174 = v315;
          uint64_t v292 = (uint64_t)v316;
          uint64_t v175 = v317;
          uint64_t v176 = (uint64_t)v318;
          sub_100CFA604(v172, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
          uint64_t v177 = v167;
          if (v167)
          {
            uint64_t v178 = (uint64_t)v283;
            uint64_t v179 = v175;
            if (v175)
            {
              uint64_t v180 = v294;
              uint64_t v290 = *((void *)&v173 + 1);
              uint64_t v291 = (ProtocolDescriptor *)v173;
              long long v382 = v173;
              uint64_t v287 = v174;
              char v383 = v174 & 1;
              int v384 = HIDWORD(v174);
              int v385 = (int)v298;
              char v386 = BYTE4(v298) & 1;
              uint64_t v181 = v292;
              uint64_t v387 = v292;
              uint64_t v388 = v175;
              uint64_t v389 = v176;
              uint64_t v288 = v175;
              uint64_t v289 = v176;
              uint64_t v183 = *((void *)&v293 + 1);
              uint64_t v182 = v293;
              long long v375 = v293;
              char v376 = v294 & 1;
              uint64_t v377 = *(void *)((char *)&v294 + 4);
              uint64_t v185 = *((void *)&v294 + 1);
              uint64_t v184 = (uint64_t)v295;
              char v378 = BYTE12(v294) & 1;
              uint64_t v379 = (uint64_t)v295;
              uint64_t v380 = v177;
              uint64_t v381 = v296;
              uint64_t v186 = v177;
              sub_10051B364(v293, *((uint64_t *)&v293 + 1), v294, *((uint64_t *)&v294 + 1), (uint64_t)v295, v177);
              char v187 = sub_10089CE74((uint64_t)&v375, (uint64_t)&v382);
              sub_10051AC38((uint64_t)v291, v290, v287, (uint64_t)v298, v181, v288);
              sub_10051AC38(v182, v183, v180, v185, v184, v186);
              uint64_t v188 = v183;
              uint64_t v178 = (uint64_t)v283;
              uint64_t v189 = sub_10051AC38(v182, v188, v180, v185, v184, v186);
              if (v187) {
                goto LABEL_69;
              }
              goto LABEL_63;
            }
          }
          else
          {
            uint64_t v178 = (uint64_t)v283;
            uint64_t v179 = v175;
            if (!v175) {
              goto LABEL_69;
            }
          }
          sub_10051AC38(v293, *((uint64_t *)&v293 + 1), v294, *((uint64_t *)&v294 + 1), (uint64_t)v295, v167);
          uint64_t v189 = sub_10051AC38(v173, *((uint64_t *)&v173 + 1), v174, (uint64_t)v298, v292, v179);
LABEL_63:
          if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v309) + 0x4C0))(v189)) {
            goto LABEL_67;
          }
          uint64_t v190 = **(void **)&v309[v307];
          uint64_t v191 = swift_conformsToProtocol2();
          if (!v191) {
            goto LABEL_101;
          }
          uint64_t v192 = v191;
          uint64_t v193 = *(void (**)(uint64_t, uint64_t))(v191 + 16);
          swift_retain();
          uint64_t v194 = (uint64_t)v264;
          v193(v190, v192);
          swift_release();
          CRRegister.wrappedValue.getter();
          long long v195 = v314;
          uint64_t v197 = *((void *)&v315 + 1);
          uint64_t v196 = v315;
          uint64_t v198 = (uint64_t)v316;
          uint64_t v199 = v317;
          uint64_t v200 = v318;
          sub_100CFA604(v194, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
          uint64_t v178 = (uint64_t)v283;
          if (!v199)
          {
LABEL_67:
            long long v314 = 0u;
            long long v315 = 0u;
          }
          else
          {
            long long v367 = v195;
            char v368 = v196 & 1;
            int v369 = HIDWORD(v196);
            int v370 = v197;
            char v371 = BYTE4(v197) & 1;
            uint64_t v372 = v198;
            uint64_t v373 = v199;
            uint64_t v374 = v200;
            uint64_t v201 = sub_10050BF48(0, (unint64_t *)&qword_101672AC0);
            id v202 = sub_10089D008((uint64_t)&v367);
            sub_10051AC38(v195, *((uint64_t *)&v195 + 1), v196, v197, v198, v199);
            *((void *)&v315 + 1) = v201;
            *(void *)&long long v314 = v202;
            uint64_t v178 = (uint64_t)v283;
          }
          sub_100522E9C((uint64_t)&v314, (uint64_t)v312, &qword_101672BF0);
          swift_beginAccess();
          sub_10057D61C((uint64_t)v312, 0x15uLL);
          swift_endAccess();
          sub_100522F00((uint64_t)&v314, &qword_101672BF0);
LABEL_69:
          ((void (*)(char *, unsigned __int8 *))v302)(v301, v304);
          CRRegister.wrappedValue.getter();
          long long v293 = v314;
          long long v294 = v315;
          uint64_t v203 = v317;
          uint64_t v295 = (char *)v316;
          uint64_t v296 = v318;
          sub_100CFA604(v178, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
          uint64_t v204 = **(void **)&v309[v307];
          uint64_t v205 = swift_conformsToProtocol2();
          if (!v205) {
            goto LABEL_98;
          }
          uint64_t v206 = v205;
          unint64_t v207 = *(void (**)(uint64_t, uint64_t))(v205 + 16);
          swift_retain();
          uint64_t v208 = (uint64_t)v284;
          v207(v204, v206);
          swift_release();
          CRRegister.wrappedValue.getter();
          long long v209 = v314;
          uint64_t v210 = *((void *)&v315 + 1);
          uint64_t v211 = v315;
          uint64_t v298 = v316;
          uint64_t v212 = v317;
          uint64_t v213 = (uint64_t)v318;
          sub_100CFA604(v208, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
          uint64_t v214 = v203;
          if (v203)
          {
            if (v212)
            {
              uint64_t v216 = *((void *)&v293 + 1);
              uint64_t v215 = v294;
              uint64_t v291 = (ProtocolDescriptor *)v213;
              uint64_t v292 = v209;
              long long v359 = v209;
              uint64_t v217 = v211;
              char v360 = v211 & 1;
              int v361 = HIDWORD(v211);
              int v362 = v210;
              char v363 = BYTE4(v210) & 1;
              v364 = v298;
              uint64_t v365 = v212;
              uint64_t v366 = v213;
              uint64_t v218 = v293;
              long long v352 = v293;
              char v353 = v294 & 1;
              uint64_t v354 = *(void *)((char *)&v294 + 4);
              uint64_t v288 = v210;
              uint64_t v289 = *((void *)&v209 + 1);
              uint64_t v220 = *((void *)&v294 + 1);
              uint64_t v219 = (uint64_t)v295;
              char v355 = BYTE12(v294) & 1;
              uint64_t v356 = (uint64_t)v295;
              uint64_t v357 = v214;
              id v358 = v296;
              uint64_t v221 = v214;
              sub_10051B364(v293, *((uint64_t *)&v293 + 1), v294, *((uint64_t *)&v294 + 1), (uint64_t)v295, v214);
              LODWORD(v290) = sub_10089CE74((uint64_t)&v352, (uint64_t)&v359);
              sub_10051AC38(v292, v289, v217, v288, (uint64_t)v298, v212);
              sub_10051AC38(v218, v216, v215, v220, v219, v221);
              uint64_t v222 = sub_10051AC38(v218, v216, v215, v220, v219, v221);
              if (v290)
              {
LABEL_82:
                uint64_t v236 = (uint64_t)v276;
                ((void (*)(char *, unsigned __int8 *))v302)(v301, v304);
                sub_1005057FC(&qword_101689320);
                CRRegister.wrappedValue.getter();
                float v237 = *(float *)&v314;
                sub_100CFA604(v236, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
                uint64_t v238 = **(void **)&v309[v307];
                uint64_t v239 = swift_conformsToProtocol2();
                if (!v239) {
                  goto LABEL_99;
                }
                uint64_t v240 = v239;
                uint64_t v241 = *(void (**)(uint64_t, uint64_t))(v239 + 16);
                swift_retain();
                uint64_t v242 = (uint64_t)v275;
                v241(v238, v240);
                swift_release();
                CRRegister.wrappedValue.getter();
                float v243 = *(float *)&v314;
                sub_100CFA604(v242, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
                if (v237 == v243)
                {
                  uint64_t v92 = v282;
                }
                else
                {
                  uint64_t v244 = **(void **)&v309[v307];
                  uint64_t v245 = swift_conformsToProtocol2();
                  if (!v245) {
                    goto LABEL_100;
                  }
                  uint64_t v246 = v245;
                  uint64_t v247 = *(void (**)(uint64_t, uint64_t))(v245 + 16);
                  swift_retain();
                  uint64_t v248 = (uint64_t)v276;
                  v247(v244, v246);
                  swift_release();
                  CRRegister.wrappedValue.getter();
                  float v249 = *(float *)&v314;
                  sub_100CFA604(v248, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
                  *((void *)&v315 + 1) = &type metadata for CGFloat;
                  *(double *)&long long v314 = v249;
                  sub_100522E9C((uint64_t)&v314, (uint64_t)v312, &qword_101672BF0);
                  swift_beginAccess();
                  sub_10057D61C((uint64_t)v312, 0x17uLL);
                  swift_endAccess();
                  sub_100522F00((uint64_t)&v314, &qword_101672BF0);
                  uint64_t v92 = v282;
                }
                goto LABEL_22;
              }
LABEL_76:
              if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v309) + 0x4C0))(v222)) {
                goto LABEL_80;
              }
              uint64_t v223 = **(void **)&v309[v307];
              uint64_t v224 = swift_conformsToProtocol2();
              if (!v224) {
                goto LABEL_102;
              }
              uint64_t v225 = v224;
              uint64_t v226 = *(void (**)(uint64_t, uint64_t))(v224 + 16);
              swift_retain();
              uint64_t v227 = (uint64_t)v263;
              v226(v223, v225);
              swift_release();
              CRRegister.wrappedValue.getter();
              long long v228 = v314;
              uint64_t v230 = *((void *)&v315 + 1);
              uint64_t v229 = v315;
              uint64_t v231 = (uint64_t)v316;
              uint64_t v232 = v317;
              uint64_t v233 = v318;
              sub_100CFA604(v227, type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData);
              if (!v232)
              {
LABEL_80:
                long long v314 = 0u;
                long long v315 = 0u;
              }
              else
              {
                long long v344 = v228;
                char v345 = v229 & 1;
                int v346 = HIDWORD(v229);
                int v347 = v230;
                char v348 = BYTE4(v230) & 1;
                uint64_t v349 = v231;
                uint64_t v350 = v232;
                v351 = v233;
                uint64_t v234 = sub_10050BF48(0, (unint64_t *)&qword_101672AC0);
                id v235 = sub_10089D008((uint64_t)&v344);
                sub_10051AC38(v228, *((uint64_t *)&v228 + 1), v229, v230, v231, v232);
                *((void *)&v315 + 1) = v234;
                *(void *)&long long v314 = v235;
              }
              sub_100522E9C((uint64_t)&v314, (uint64_t)v312, &qword_101672BF0);
              swift_beginAccess();
              sub_10057D61C((uint64_t)v312, 0x16uLL);
              swift_endAccess();
              sub_100522F00((uint64_t)&v314, &qword_101672BF0);
              goto LABEL_82;
            }
          }
          else if (!v212)
          {
            goto LABEL_82;
          }
          sub_10051AC38(v293, *((uint64_t *)&v293 + 1), v294, *((uint64_t *)&v294 + 1), (uint64_t)v295, v203);
          uint64_t v222 = sub_10051AC38(v209, *((uint64_t *)&v209 + 1), v211, v210, (uint64_t)v298, v212);
          goto LABEL_76;
        }
      }
      else
      {
        char v112 = v298;
        uint64_t v111 = v299;
        uint64_t v113 = v296;
        uint64_t v114 = *((void *)&v293 + 1);
        uint64_t v115 = v294;
        if (!v109) {
          goto LABEL_44;
        }
      }
      *(void *)&long long v314 = v115;
      *((void *)&v314 + 1) = v293;
      *(void *)&long long v315 = v113;
      *((void *)&v315 + 1) = v111;
      uint64_t v316 = v291;
      uint64_t v317 = v289;
      uint64_t v318 = v295;
      uint64_t v319 = v290;
      uint64_t v320 = v292;
      uint64_t v321 = v114;
      uint64_t v322 = v112;
      uint64_t v323 = *((void *)&v294 + 1);
      uint64_t v324 = v110;
      uint64_t v325 = v288;
      long long v326 = v285;
      uint64_t v327 = v105;
      uint64_t v328 = v106;
      uint64_t v329 = (uint64_t)v286;
      uint64_t v330 = v287;
      uint64_t v331 = v107;
      uint64_t v332 = v108;
      uint64_t v333 = v281;
      uint64_t v334 = v280;
      uint64_t v335 = (uint64_t)v279;
      uint64_t v336 = v278;
      uint64_t v337 = v109;
      uint64_t v338 = v277;
      sub_1008EE60C((uint64_t)&v314);
      goto LABEL_40;
    }
  }
}

void sub_100CFA3E8(void *a1)
{
  uint64_t v2 = v1;
  id v4 = a1;
  sub_100BC9500(a1);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong
    || (uint64_t v6 = Strong, v7 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
                     v6,
                     (v7 & 1) == 0))
  {
    *(void *)(v2 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes) = 0;
    swift_bridgeObjectRelease();
    *(void *)(v2 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace) = 0;
    swift_bridgeObjectRelease();
  }
}

void sub_100CFA4C8(void *a1)
{
  uint64_t v2 = v1;
  sub_100A9AF5C((uint64_t)a1);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong
    || (id v4 = Strong, v5 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x2F0))(),
                     v4,
                     (v5 & 1) == 0))
  {
    *(void *)(v2 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes) = 0;
    swift_bridgeObjectRelease();
    *(void *)(v2 + OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace) = 0;
    swift_bridgeObjectRelease();
  }
}