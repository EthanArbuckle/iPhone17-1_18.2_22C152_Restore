void sub_1000A767C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  objc_class *v33;
  objc_class *v34;
  id v35;
  void *v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  id v42;
  void *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  objc_super v69;
  objc_super v70;

  v1 = type metadata accessor for IndexPath();
  v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  v65 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  v5 = __chkstk_darwin(v4 - 8);
  v66 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v59 - v7;
  v67 = v2;
  v68 = v1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))((char *)&v59 - v7, 1, 1, v1);
  v9 = (uint64_t)&v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController_preferredFocusIndexPath];
  swift_beginAccess();
  sub_1000A7BB4((uint64_t)v8, v9);
  swift_endAccess();
  v10 = *(char **)&v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem];
  v11 = *(void *)&v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 8];
  v12 = *(void *)&v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 16];
  v13 = v10;
  v14 = v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 24];
  v15 = v11;
  v16 = v12;
  v17 = v14;
  if (v14 == 255)
  {
    v13 = sub_1000A8430();
    v16 = v18;
    v17 = v19;
  }
  v20 = v10;
  v21 = v15;
  sub_1000A9454(v20, v11, v12, v14);
  sub_1000A7C30(v13, v21, v16, v17, (uint64_t)v8);
  swift_beginAccess();
  sub_1000A7BB4((uint64_t)v8, v9);
  swift_endAccess();
  v22 = v66;
  sub_1000CBC00(v9, v66, (uint64_t *)&unk_1007069A0);
  v24 = v67;
  v23 = v68;
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v22, 1, v68);
  v26 = v17;
  v27 = v21;
  if (v25 == 1)
  {
    sub_1000A7C1C(v13, v21, v16, v17);
    sub_1000CBBA4(v22, (uint64_t *)&unk_1007069A0);
    return;
  }
  v28 = v23;
  v29 = v26;
  v60 = v9;
  v61 = v8;
  v62 = v13;
  v63 = v27;
  v64 = v16;
  v30 = v24;
  v31 = v22;
  v32 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v65, v31, v28);
  v33 = (objc_class *)type metadata accessor for DOCSidebarViewController(0);
  v70.receiver = v0;
  v70.super_class = v33;
  v34 = v33;
  v35 = [super collectionView];
  if (!v35)
  {
    __break(1u);
    goto LABEL_22;
  }
  v36 = v35;
  type metadata accessor for DOCSidebarCollectionView();
  v37 = [(id)swift_dynamicCastClassUnconditional() indexPathsForSelectedItems];

  if (!v37)
  {
    v55 = v62;
    v56 = v63;
    v57 = v64;
    v58 = v29;
LABEL_16:
    sub_1000A7C1C(v55, v56, v57, v58);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v28);
    return;
  }
  LODWORD(v66) = v29;
  v38 = v32;
  v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __chkstk_darwin(v40);
  *(&v59 - 2) = (uint64_t)v38;
  v41 = sub_1001B52CC((uint64_t (*)(char *))sub_100488AC4, (uint64_t)(&v59 - 4), v39);
  swift_bridgeObjectRelease();
  if (v41)
  {
    v69.receiver = v0;
    v69.super_class = v34;
    v42 = [super collectionView];
    if (v42)
    {
      v43 = v42;
      [(id)swift_dynamicCastClassUnconditional() setSelectionFollowsFocus:1];

      v44 = (uint64_t)v61;
      sub_1000CBC00(v60, (uint64_t)v61, (uint64_t *)&unk_1007069A0);
      v45 = sub_100483178(v44);
      sub_1000CBBA4(v44, (uint64_t *)&unk_1007069A0);
      v32 = v65;
      if (v45)
      {
        v46 = (char *)sub_100485D2C(v45);
        if (v49 != -1)
        {
          v50 = v46;
          v51 = v47;
          v52 = v48;
          v53 = v49;
          v54 = sub_100486934(v45);
          if (v54)
          {
            sub_100551550(v45, v50, v51, v52, v53, (uint64_t)v54);
            swift_unknownObjectRelease();
          }
          sub_1000A7C1C(v50, v51, v52, v53);
        }

        v55 = v62;
        v56 = v63;
        v57 = v64;
        v58 = v66;
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v65, v28);
      goto LABEL_19;
    }
LABEL_22:
    __break(1u);
    return;
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v38, v28);
LABEL_19:
  sub_1000A7C1C(v62, v63, v64, v66);
}

uint64_t sub_1000A7BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000A7C1C(id a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 0xFF) {
    sub_10010EDB8(a1, a2, a3, a4);
  }
}

void sub_1000A7C30(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v65 = a3;
  uint64_t v64 = a2;
  id v63 = a1;
  int v66 = a4;
  int v7 = ~(_BYTE)a4;
  uint64_t v8 = sub_1000CBE70((uint64_t *)&unk_100709870);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v7)
  {
    uint64_t v14 = type metadata accessor for IndexPath();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    v15(a5, 1, 1, v14);
    return;
  }
  uint64_t v12 = v5 + OBJC_IVAR____TtC5Files24DOCSidebarViewController__diffableDataSource;
  swift_beginAccess();
  sub_1000CBC00(v12, (uint64_t)&v77, (uint64_t *)&unk_100705D60);
  if (!*(void *)&v78[8])
  {
    sub_10010ED28(v63, v64, v65, v66);
    sub_1000CBBA4((uint64_t)&v77, (uint64_t *)&unk_100705D60);
    goto LABEL_9;
  }
  sub_10010ED28(v63, v64, v65, v66);
  sub_1000CBE70((uint64_t *)&unk_100709880);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    if (qword_100705318 != -1) {
      swift_once();
    }
    id v13 = (id)qword_10071BD48;
    goto LABEL_12;
  }
  id v13 = v70;
LABEL_12:
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  uint64_t v16 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_1000A7C1C(v63, v64, v65, v66);
    uint64_t v46 = type metadata accessor for IndexPath();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(a5, 1, 1, v46);
    return;
  }
  v53 = v11;
  uint64_t v54 = v9;
  uint64_t v55 = v8;
  uint64_t v56 = a5;
  swift_bridgeObjectRetain();
  uint64_t v52 = v16;
  v18 = (unsigned __int8 *)(v16 + 72);
  while (1)
  {
    v20 = (void *)*((void *)v18 - 3);
    uint64_t v19 = *((void *)v18 - 2);
    uint64_t v21 = *((void *)v18 - 1);
    int v22 = *v18;
    long long v69 = *(_OWORD *)(v18 - 40);
    long long v77 = v69;
    *(void *)v78 = v20;
    *(void *)&v78[8] = v19;
    *(void *)&v78[16] = v21;
    v78[24] = v22;
    v76[3] = &_s11OutlineItemVN;
    v76[4] = &off_1006B7390;
    v23 = (_OWORD *)swift_allocObject();
    v76[0] = v23;
    long long v24 = *(_OWORD *)v78;
    v23[1] = v77;
    v23[2] = v24;
    *(_OWORD *)((char *)v23 + 41) = *(_OWORD *)&v78[9];
    sub_1000D4774((uint64_t)v76, (uint64_t)v75);
    uint64_t v25 = v69;
    swift_unknownObjectRetain();
    sub_1000A9454(v20, v19, v21, v22);
    swift_unknownObjectRetain();
    sub_1000A9454(v20, v19, v21, v22);
    sub_1000CBE70(&qword_100717538);
    if (!swift_dynamicCast())
    {
      sub_10009B1B8((uint64_t)v76);
      swift_unknownObjectRelease();
      sub_1000A7C1C(v20, v19, v21, v22);
      goto LABEL_15;
    }
    id v67 = v20;
    *(void *)&long long v69 = v19;
    uint64_t v68 = v25;
    v26 = v71;
    uint64_t v27 = v72;
    uint64_t v28 = v73;
    int v29 = v74;
    sub_10009B1B8((uint64_t)v76);
    swift_unknownObjectRelease();
    if (v29 == 255)
    {
      swift_unknownObjectRelease();
      sub_1000A7C1C(v67, v69, v21, v22);
      goto LABEL_15;
    }
    uint64_t v57 = v21;
    int v62 = v22;
    int v30 = v29;
    unint64_t v31 = (unint64_t)v63;
    uint64_t v32 = v64;
    uint64_t v33 = v65;
    char v34 = v66;
    sub_1000A9454(v63, v64, v65, v66);
    sub_1000A9454(v26, v27, v28, v30);
    id v58 = v26;
    uint64_t v59 = v27;
    uint64_t v60 = v28;
    int v61 = v30;
    unint64_t v35 = sub_100249E60((unint64_t)v26, v27, v28, v30);
    uint64_t v37 = v36;
    if (v35 == sub_100249E60(v31, v32, v33, v34) && v37 == v38) {
      break;
    }
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000A7C1C(v63, v64, v65, v66);
    id v40 = v58;
    uint64_t v41 = v59;
    uint64_t v42 = v60;
    unsigned __int8 v43 = v61;
    sub_1000A7C1C(v58, v59, v60, v61);
    sub_1000A7C1C(v40, v41, v42, v43);
    unsigned __int8 v44 = v62;
    id v45 = v67;
    if (v39) {
      goto LABEL_26;
    }
    swift_unknownObjectRelease();
    sub_1000A7C1C(v45, v69, v57, v44);
LABEL_15:
    v18 += 48;
    if (!--v17)
    {
      swift_bridgeObjectRelease();
      a5 = v56;
      uint64_t v8 = v55;
      uint64_t v9 = v54;
      v11 = v53;
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRelease_n();
  sub_1000A7C1C(v63, v64, v65, v66);
  id v47 = v58;
  uint64_t v48 = v59;
  uint64_t v49 = v60;
  unsigned __int8 v50 = v61;
  sub_1000A7C1C(v58, v59, v60, v61);
  sub_1000A7C1C(v47, v48, v49, v50);
  unsigned __int8 v44 = v62;
  id v45 = v67;
LABEL_26:
  swift_bridgeObjectRelease_n();
  v51 = v53;
  sub_1004866F4(v56);
  sub_1000A7C1C(v63, v64, v65, v66);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v55);
  swift_unknownObjectRelease();
  sub_1000A7C1C(v45, v69, v57, v44);
}

char *sub_1000A8430()
{
  v1 = v0;
  uint64_t v2 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  __chkstk_darwin(v2 - 8);
  v109 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for IndexPath();
  uint64_t v4 = *(char **)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v6 = (uint64_t)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000CBE70((uint64_t *)&unk_100709870);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  v111 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v115 = (char *)&v97 - v11;
  v116 = v1;
  id v12 = [v1 splitViewController];
  if (!v12) {
    return 0;
  }
  id v13 = v12;
  self;
  uint64_t v14 = (void *)swift_dynamicCastObjCClass();
  if (!v14)
  {

    return 0;
  }
  id v15 = [v14 fullDocumentManagerViewController];

  if (!v15) {
    return 0;
  }
  uint64_t v16 = (char *)[v15 hierarchyController];

  if (!v16) {
    return 0;
  }
  id v98 = v16;
  uint64_t v17 = &v16[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
  swift_beginAccess();
  uint64_t v18 = *(void *)v17;
  if (*(void *)v17 >> 62) {
    goto LABEL_76;
  }
  uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v20 = v19;
LABEL_7:
  uint64_t v21 = v115;
  uint64_t v22 = v20;
  if (v20)
  {
    unint64_t v114 = v18 & 0xC000000000000001;
    uint64_t v117 = (uint64_t)v116 + OBJC_IVAR____TtC5Files24DOCSidebarViewController__diffableDataSource;
    swift_beginAccess();
    uint64_t v104 = v18 & 0xFFFFFFFFFFFFFF8;
    uint64_t v103 = v18 + 32;
    v118 = (void (**)(char *, uint64_t))(v8 + 8);
    v102 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v105 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    v100 = (void (**)(uint64_t, char *, uint64_t))(v4 + 32);
    v99 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    v101 = (char *)&type metadata for Any + 8;
    uint64_t v113 = v6;
    uint64_t v23 = v22;
    uint64_t v112 = v7;
    uint64_t v107 = v18;
    while (1)
    {
      BOOL v24 = __OFSUB__(v23, 1);
      unint64_t v25 = v23 - 1;
      if (v24)
      {
        __break(1u);
LABEL_73:

        swift_bridgeObjectRelease();
        return 0;
      }
      uint64_t v119 = v25;
      if (v114)
      {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v25 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          swift_bridgeObjectRetain();
          uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_7;
        }
        if (v25 >= *(void *)(v104 + 16)) {
          goto LABEL_75;
        }
        id v26 = *(id *)(v103 + 8 * v25);
      }
      v130 = v26;
      uint64_t v27 = (objc_class *)type metadata accessor for DOCSidebarViewController(0);
      v141.receiver = v116;
      v141.super_class = v27;
      result = (char *)[super collectionView];
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v4 = result;
      type metadata accessor for DOCSidebarCollectionView();

      sub_1000CBC00(v117, (uint64_t)v134, (uint64_t *)&unk_100705D60);
      if (v136)
      {
        sub_1000CBE70((uint64_t *)&unk_100709880);
        if (swift_dynamicCast())
        {
          id v29 = (id)v140[0];
          goto LABEL_25;
        }
      }
      else
      {
        sub_1000CBBA4((uint64_t)v134, (uint64_t *)&unk_100705D60);
      }
      if (qword_100705318 != -1) {
        swift_once();
      }
      id v29 = (id)qword_10071BD48;
LABEL_25:
      dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

      uint64_t v8 = (uint64_t)v21;
      uint64_t v30 = *(void *)(NSDiffableDataSourceSnapshot.itemIdentifiers.getter() + 16);
      if (!v30)
      {
        swift_bridgeObjectRelease();
        (*v118)(v21, v7);

        goto LABEL_10;
      }
      uint64_t v31 = swift_bridgeObjectRetain();
      id v132 = 0;
      uint64_t v6 = 0;
      uint64_t v133 = 0;
      *(void *)&long long v129 = v31;
      uint64_t v32 = (unsigned __int8 *)(v31 + 72);
      int v33 = 255;
      do
      {
        int v35 = *v32;
        if (v35 != 255 && ~(_BYTE)v33 == 0)
        {
          uint64_t v131 = v6;
          uint64_t v37 = (void *)*((void *)v32 - 3);
          uint64_t v38 = *((void *)v32 - 2);
          uint64_t v39 = *((void *)v32 - 1);
          sub_1000A9454(v37, v38, v39, v35);
          sub_1000A9454(v37, v38, v39, v35);
          swift_unknownObjectRetain();
          sub_1000A9454(v37, v38, v39, v35);
          swift_unknownObjectRetain();
          id v40 = sub_10024AAE8((unint64_t)v37, v38, v39, v35);
          BOOL v41 = sub_100405BFC(v130);

          id v42 = v37;
          uint64_t v8 = v38;
          uint64_t v43 = v39;
          int v44 = v35;
          if (!v41)
          {
            sub_1000A7C1C(v37, v38, v39, v35);
            int v44 = 255;
            id v42 = v132;
            uint64_t v8 = v131;
            uint64_t v43 = v133;
          }
          uint64_t v133 = v43;
          int v34 = v44;
          swift_unknownObjectRelease();
          sub_1000A7C1C(v37, v38, v39, v35);
          swift_unknownObjectRelease();
          sub_1000A7C1C(v37, v38, v39, v35);
          int v33 = v34;
          id v132 = v42;
          uint64_t v6 = v8;
        }
        v32 += 48;
        --v30;
      }
      while (v30);
      unsigned int v128 = v33;
      swift_bridgeObjectRelease_n();
      uint64_t v4 = (char *)*v118;
      uint64_t v21 = v115;
      uint64_t v7 = v112;
      (*v118)(v115, v112);
      uint64_t v45 = v113;
      if ((_BYTE)v128 == 0xFF)
      {

        uint64_t v18 = v107;
        goto LABEL_10;
      }
      v110 = (void (*)(char *, uint64_t))v4;
      sub_1000CBC00(v117, (uint64_t)v134, (uint64_t *)&unk_100705D60);
      uint64_t v4 = v109;
      uint64_t v46 = v108;
      uint64_t v131 = v6;
      if (!v136)
      {
        id v47 = v132;
        uint64_t v51 = v133;
        unsigned __int8 v52 = v128;
        sub_10010ED28(v132, v6, v133, v128);
        uint64_t v133 = v51;
        sub_10010ED28(v47, v6, v51, v52);
        sub_1000CBBA4((uint64_t)v134, (uint64_t *)&unk_100705D60);
LABEL_42:
        if (qword_100705318 != -1) {
          swift_once();
        }
        id v50 = (id)qword_10071BD48;
        goto LABEL_45;
      }
      id v47 = v132;
      uint64_t v48 = v133;
      unsigned __int8 v49 = v128;
      sub_10010ED28(v132, v6, v133, v128);
      uint64_t v133 = v48;
      sub_10010ED28(v47, v6, v48, v49);
      sub_1000CBE70((uint64_t *)&unk_100709880);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_42;
      }
      id v50 = (id)v140[0];
LABEL_45:
      dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

      uint64_t v53 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter();
      uint64_t v54 = *(void *)(v53 + 16);
      if (!v54)
      {
LABEL_58:
        swift_bridgeObjectRelease();
        v110(v111, v7);
        uint64_t v86 = v131;
        uint64_t v8 = v133;
        uint64_t v6 = v128;
        sub_1000A7C1C(v47, v131, v133, v128);
        (*v102)(v4, 1, 1, v46);
        goto LABEL_61;
      }
      swift_bridgeObjectRetain();
      uint64_t v106 = v53;
      uint64_t v55 = (unsigned __int8 *)(v53 + 72);
      while (1)
      {
        uint64_t v60 = (void *)*((void *)v55 - 3);
        uint64_t v59 = *((void *)v55 - 2);
        uint64_t v61 = *((void *)v55 - 1);
        int v62 = *v55;
        long long v129 = *(_OWORD *)(v55 - 40);
        long long v142 = v129;
        *(void *)v143 = v60;
        *(void *)&v143[8] = v59;
        *(void *)&v143[16] = v61;
        v143[24] = v62;
        v140[3] = &_s11OutlineItemVN;
        v140[4] = &off_1006B7390;
        id v63 = (_OWORD *)swift_allocObject();
        v140[0] = v63;
        long long v64 = *(_OWORD *)v143;
        v63[1] = v142;
        v63[2] = v64;
        *(_OWORD *)((char *)v63 + 41) = *(_OWORD *)&v143[9];
        sub_1000D4774((uint64_t)v140, (uint64_t)v139);
        uint64_t v65 = v129;
        swift_unknownObjectRetain();
        sub_1000A9454(v60, v59, v61, v62);
        swift_unknownObjectRetain();
        sub_1000A9454(v60, v59, v61, v62);
        sub_1000CBE70(&qword_100717538);
        if (!swift_dynamicCast())
        {
          sub_10009B1B8((uint64_t)v140);
          swift_unknownObjectRelease();
          uint64_t v56 = v60;
          uint64_t v57 = v59;
          uint64_t v58 = v61;
LABEL_48:
          sub_1000A7C1C(v56, v57, v58, v62);
          goto LABEL_49;
        }
        v126 = v60;
        uint64_t v127 = v59;
        *(void *)&long long v129 = v61;
        int v66 = v135;
        uint64_t v67 = v136;
        uint64_t v68 = v137;
        int v69 = v138;
        sub_10009B1B8((uint64_t)v140);
        swift_unknownObjectRelease();
        if (v69 == 255)
        {
          swift_unknownObjectRelease();
          uint64_t v56 = v126;
          uint64_t v57 = v127;
          uint64_t v58 = v129;
          goto LABEL_48;
        }
        uint64_t v124 = v65;
        int v125 = v62;
        unint64_t v70 = (unint64_t)v132;
        uint64_t v71 = v131;
        uint64_t v72 = v133;
        char v73 = v128;
        sub_1000A9454(v132, v131, v133, v128);
        sub_1000A9454(v66, v67, v68, v69);
        id v120 = v66;
        uint64_t v121 = v67;
        uint64_t v122 = v68;
        int v123 = v69;
        unint64_t v74 = sub_100249E60((unint64_t)v66, v67, v68, v69);
        uint64_t v75 = v72;
        uint64_t v77 = v76;
        if (v74 == sub_100249E60(v70, v71, v75, v73) && v77 == v78) {
          break;
        }
        char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000A7C1C(v132, v131, v133, v128);
        id v80 = v120;
        uint64_t v81 = v121;
        uint64_t v82 = v122;
        unsigned __int8 v83 = v123;
        sub_1000A7C1C(v120, v121, v122, v123);
        sub_1000A7C1C(v80, v81, v82, v83);
        unsigned __int8 v84 = v125;
        v85 = v126;
        if (v79) {
          goto LABEL_60;
        }
        swift_unknownObjectRelease();
        sub_1000A7C1C(v85, v127, v129, v84);
LABEL_49:
        v55 += 48;
        if (!--v54)
        {
          swift_bridgeObjectRelease();
          uint64_t v4 = v109;
          uint64_t v46 = v108;
          uint64_t v45 = v113;
          uint64_t v7 = v112;
          id v47 = v132;
          goto LABEL_58;
        }
      }
      swift_bridgeObjectRelease_n();
      sub_1000A7C1C(v132, v131, v133, v128);
      id v87 = v120;
      uint64_t v88 = v121;
      uint64_t v89 = v122;
      unsigned __int8 v90 = v123;
      sub_1000A7C1C(v120, v121, v122, v123);
      sub_1000A7C1C(v87, v88, v89, v90);
      unsigned __int8 v84 = v125;
      v85 = v126;
LABEL_60:
      swift_bridgeObjectRelease_n();
      uint64_t v91 = (uint64_t)v109;
      v92 = v111;
      sub_1004866F4((uint64_t)v109);
      id v93 = v132;
      uint64_t v86 = v131;
      uint64_t v94 = v133;
      uint64_t v6 = v128;
      sub_1000A7C1C(v132, v131, v133, v128);
      v95 = v92;
      uint64_t v8 = v94;
      uint64_t v7 = v112;
      v110(v95, v112);
      swift_unknownObjectRelease();
      id v47 = v93;
      uint64_t v4 = (char *)v91;
      sub_1000A7C1C(v85, v127, v129, v84);
      uint64_t v46 = v108;
      uint64_t v45 = v113;
LABEL_61:
      sub_1000A7C1C(v47, v86, v8, v6);
      if ((*v105)(v4, 1, v46) == 1)
      {

        sub_1000A7C1C(v47, v86, v8, v6);
        sub_1000CBBA4((uint64_t)v4, (uint64_t *)&unk_1007069A0);
        goto LABEL_68;
      }
      uint64_t v6 = v8;
      (*v100)(v45, v4, v46);
      uint64_t v8 = (uint64_t)v116;
      uint64_t v96 = sub_100482044(v45, 0);
      if (v96)
      {
        uint64_t v4 = (char *)v96;
        uint64_t v8 = *(unsigned __int8 *)(v96 + 48);

        swift_unknownObjectRelease();
        (*v99)(v45, v46);
        if (v8 == 1)
        {

          swift_bridgeObjectRelease();
          return (char *)v47;
        }
      }
      else
      {
        (*v99)(v45, v46);
      }
      sub_1000A7C1C(v47, v86, v6, v128);
LABEL_68:
      uint64_t v21 = v115;
      uint64_t v18 = v107;
LABEL_10:
      uint64_t v23 = v119;
      if (!v119) {
        goto LABEL_73;
      }
    }
  }

  swift_bridgeObjectRelease();
  return 0;
}

id sub_1000A9454(id result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 0xFF) {
    return sub_10010ED28(result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_1000A9480(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for DOCBrowserHistoryItem(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48))(a1, 1, v4))
  {
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);

    swift_bridgeObjectRelease();
    uint64_t v6 = a1 + v4[9];
    if (*(void *)(v6 + 24)) {
      sub_10009B1B8(v6);
    }
  }
  type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 20));
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *sub_1000A95C8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for DOCBrowserHistoryItem(0);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1000CBE70(&qword_10070E838);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v31 = a3;
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    uint64_t v10 = v6[5];
    uint64_t v11 = *(void **)&a2[v10];
    *(void *)&a1[v10] = v11;
    *(void *)&a1[v6[6]] = *(void *)&a2[v6[6]];
    uint64_t v12 = v6[7];
    id v13 = *(void **)&a2[v12];
    *(void *)&a1[v12] = v13;
    uint64_t v14 = v6[8];
    id v15 = *(void **)&a2[v14];
    *(void *)&a1[v14] = v15;
    uint64_t v16 = v6[9];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = *(void *)&a2[v16 + 24];
    id v20 = v11;
    swift_bridgeObjectRetain();
    id v21 = v13;
    id v22 = v15;
    if (v19)
    {
      *((void *)v17 + 3) = v19;
      (**(void (***)(char *, char *, uint64_t))(v19 - 8))(v17, v18, v19);
    }
    else
    {
      long long v23 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v23;
    }
    (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
    a3 = v31;
  }
  uint64_t v24 = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(0);
  *(void *)&a1[*(int *)(v24 + 20)] = *(void *)&a2[*(int *)(v24 + 20)];
  *(void *)&a1[*(int *)(v24 + 24)] = *(void *)&a2[*(int *)(v24 + 24)];
  uint64_t v25 = *(int *)(a3 + 20);
  id v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = *(void *)&a2[v25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28)
  {
    uint64_t v29 = *((void *)v27 + 1);
    *(void *)id v26 = v28;
    *((void *)v26 + 1) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)id v26 = *(_OWORD *)v27;
  }
  return a1;
}

void sub_1000A9824(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, SEL *a5)
{
  id v8 = a1;
  swift_retain();
  sub_1000A98E0(v8, a4);
  swift_release();
  v9.receiver = v8;
  v9.super_class = (Class)type metadata accessor for DOCViewController();
  [super a3];
}

uint64_t type metadata accessor for DOCViewController()
{
  return self;
}

uint64_t sub_1000A98E0(void *a1, unsigned __int8 a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = __chkstk_darwin(v6);
  objc_super v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = v3[16];
  unint64_t v14 = 0xEB00000000646572;
  uint64_t v15 = 0x6165707061736964;
  switch(a2)
  {
    case 1u:
      uint64_t v15 = 0x6E69726165707061;
      unint64_t v14 = 0xE900000000000067;
      break;
    case 2u:
      unint64_t v14 = 0xE800000000000000;
      uint64_t v15 = 0x6465726165707061;
      break;
    case 3u:
      unint64_t v14 = 0xEC000000676E6972;
      break;
    default:
      break;
  }
  uint64_t v16 = 0x6165707061736964;
  unint64_t v17 = 0xEB00000000646572;
  switch(v3[16])
  {
    case 1u:
      unint64_t v17 = 0xE900000000000067;
      if (v15 == 0x6E69726165707061) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2u:
      unint64_t v17 = 0xE800000000000000;
      uint64_t v16 = 0x6465726165707061;
      goto LABEL_9;
    case 3u:
      unint64_t v17 = 0xEC000000676E6972;
      if (v15 == 0x6165707061736964) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v15 != v16) {
        goto LABEL_14;
      }
LABEL_12:
      if (v14 == v17) {
        return swift_bridgeObjectRelease_n();
      }
LABEL_14:
      uint64_t v48 = v10;
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        v3[17] = 0;
        switch(a2)
        {
          case 2u:
            swift_bridgeObjectRelease();
            goto LABEL_18;
          default:
            char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v20)
            {
LABEL_18:
              switch(v13)
              {
                case 1:
                  swift_bridgeObjectRelease();
                  break;
                default:
                  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v21 & 1) == 0)
                  {
                    static Logger.UI.getter();
                    os_log_t v22 = a1;
                    long long v23 = Logger.logObject.getter();
                    int v24 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v23, (os_log_type_t)v24))
                    {
                      LODWORD(v44) = v24;
                      os_log_t v46 = v23;
                      uint64_t v25 = swift_slowAlloc();
                      os_log_t v47 = (os_log_t)swift_slowAlloc();
                      uint64_t v45 = swift_slowAlloc();
                      uint64_t v49 = (uint64_t)v22;
                      os_log_t v50 = (os_log_t)v45;
                      *(_DWORD *)uint64_t v25 = 138412546;
                      uint64_t v42 = v25 + 12;
                      uint64_t v43 = (void *)(v25 + 4);
                      BOOL v41 = &v50;
                      id v26 = v22;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      v47->isa = (Class)v22;

                      *(_WORD *)(v25 + 12) = 2080;
                      unint64_t v27 = 0xE900000000000067;
                      uint64_t v28 = 0x6E69726165707061;
                      switch(v13)
                      {
                        case 0:
                          uint64_t v28 = 0x6165707061736964;
                          unint64_t v27 = 0xEB00000000646572;
                          break;
                        case 1:
                          break;
                        case 2:
                          unint64_t v27 = 0xE800000000000000;
                          uint64_t v28 = 0x6465726165707061;
                          break;
                        case 3:
                          uint64_t v28 = 0x6165707061736964;
                          unint64_t v27 = 0xEC000000676E6972;
                          break;
                        default:
                          JUMPOUT(0);
                      }
                      uint64_t v49 = sub_10009B0E4(v28, v27, (uint64_t *)&v50);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      os_log_t v22 = v46;
                      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v44, "WARNING: %@ transitioned from %s to .appeared - skipped the .appearing state!", (uint8_t *)v25, 0x16u);
                      sub_1000CBE70(&qword_100707CC0);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                    }
                    (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v6);
                    v3[17] = 1;
                  }
                  break;
              }
            }
            v3[18] = 0;
            switch(a2)
            {
              case 1u:
              case 2u:
              case 3u:
                char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
                uint64_t result = swift_bridgeObjectRelease();
                if (v29) {
                  goto LABEL_32;
                }
                break;
              default:
                swift_bridgeObjectRelease();
LABEL_32:
                switch(v13)
                {
                  case 3:
                    uint64_t result = swift_bridgeObjectRelease();
                    break;
                  default:
                    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    uint64_t result = swift_bridgeObjectRelease();
                    if ((v30 & 1) == 0)
                    {
                      static Logger.UI.getter();
                      id v31 = a1;
                      uint64_t v32 = Logger.logObject.getter();
                      int v33 = static os_log_type_t.default.getter();
                      if (os_log_type_enabled(v32, (os_log_type_t)v33))
                      {
                        LODWORD(v45) = v33;
                        os_log_t v47 = v32;
                        uint64_t v34 = swift_slowAlloc();
                        uint64_t v43 = (void *)swift_slowAlloc();
                        os_log_t v46 = (os_log_t)swift_slowAlloc();
                        uint64_t v49 = (uint64_t)v31;
                        os_log_t v50 = v46;
                        *(_DWORD *)uint64_t v34 = 138412546;
                        uint64_t v42 = v34 + 4;
                        id v35 = v31;
                        int v44 = &v50;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        *uint64_t v43 = v31;

                        *(_WORD *)(v34 + 12) = 2080;
                        unint64_t v36 = 0xE800000000000000;
                        uint64_t v37 = 0x6E69726165707061;
                        if (v13 == 1) {
                          unint64_t v36 = 0xE900000000000067;
                        }
                        else {
                          uint64_t v37 = 0x6465726165707061;
                        }
                        if (v13) {
                          uint64_t v38 = v37;
                        }
                        else {
                          uint64_t v38 = 0x6165707061736964;
                        }
                        if (v13) {
                          unint64_t v39 = v36;
                        }
                        else {
                          unint64_t v39 = 0xEB00000000646572;
                        }
                        uint64_t v49 = sub_10009B0E4(v38, v39, (uint64_t *)&v50);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease();
                        os_log_t v40 = v47;
                        _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v45, "WARNING: %@ transitioned from %s to .disappeared - bypassing the .disappearing", (uint8_t *)v34, 0x16u);
                        sub_1000CBE70(&qword_100707CC0);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();
                      }
                      else
                      {
                      }
                      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v9, v6);
                      v3[18] = 1;
                    }
                    break;
                }
                break;
            }
            v3[16] = a2;
            break;
        }
      }
      return result;
  }
}

char *sub_1000AA298()
{
  id v1 = [v0 viewIfLoaded];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v1 window];

  if (!v3) {
    return 0;
  }
  id v4 = [v0 presentingViewController];
  if (v4
    && (uint64_t v5 = v4,
        id v6 = [v4 presentedViewController],
        v5,
        v6))
  {
    sub_10038BC7C(v6, v6);
    uint64_t v7 = sub_10038B0D4();
    swift_release();

    id v3 = v6;
  }
  else
  {
    id v8 = [v3 rootViewController];
    sub_10038BC7C(v3, v8);

    uint64_t v7 = sub_10038B0D4();
    swift_release();
  }

  return v7;
}

void sub_1000AA3C0(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
LABEL_8:
    if (!a2) {
      return;
    }
    goto LABEL_11;
  }
  unint64_t v4 = a1;
  unint64_t v24 = a1;
  uint64_t v5 = self;
  swift_bridgeObjectRetain();
  if ([v5 _UIPTabInfrastructureEnabled])
  {
    id v6 = sub_1000AB608((uint64_t *)&v24);
    if (v6)
    {
      uint64_t v7 = self;
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v6;
      aBlock[4] = sub_100515FE8;
      aBlock[5] = v8;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100514064;
      aBlock[3] = &unk_1006B4A10;
      objc_super v9 = _Block_copy(aBlock);
      id v10 = v6;
      swift_release();
      id v6 = [v7 elementWithUncachedProvider:v9];

      _Block_release(v9);
    }
    [v2 setAdditionalOverflowItems:v6];

    unint64_t v4 = v24;
  }
  uint64_t v11 = sub_1000AA730(v4);
  swift_bridgeObjectRelease();
  unint64_t v12 = sub_1000AA838((unint64_t)v11, 1);
  swift_release();
  id v13 = [v2 trailingItemGroups];
  sub_10009E6C4(0, &qword_10071AB88);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v13) = sub_1000AB1F8(v14, v12);
  swift_bridgeObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 setTrailingItemGroups:isa];

  if (!a2) {
    return;
  }
LABEL_11:
  swift_bridgeObjectRetain();
  id v16 = [v2 _dci_fixedTrailingGroup];
  if (!v16) {
    goto LABEL_14;
  }
  unint64_t v17 = v16;
  id v18 = [v16 barButtonItems];

  sub_10009E6C4(0, (unint64_t *)&qword_10070B700);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  unint64_t v19 = swift_bridgeObjectRetain();
  LOBYTE(v18) = sub_1000AD0F0(v19, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v18)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_14:
    id v20 = objc_allocWithZone((Class)UIBarButtonItemGroup);
    sub_10009E6C4(0, (unint64_t *)&qword_10070B700);
    Class v21 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v22 = [v20 initWithBarButtonItems:v21 representativeItem:0];

    [v2 _dci_setFixedTrailingGroup:v22];
  }
}

void *sub_1000AA730(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      id v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_1000CBE70((uint64_t *)&unk_1007084E0);
      id v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    unint64_t v1 = sub_1000D347C((uint64_t)&v7, v3 + 4, v2, v1);
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

uint64_t sub_1000AA838(unint64_t a1, char a2)
{
  unint64_t v2 = a1;
  unint64_t v70 = a1;
  if ((a2 & 1) == 0)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_25;
      }
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = v3 - 1;
      if (!__OFSUB__(v3, 1)) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v3) {
        goto LABEL_25;
      }
      uint64_t v5 = v3 - 1;
      if (!__OFSUB__(v3, 1))
      {
LABEL_6:
        if (v5 >= 1)
        {
          unint64_t v2 = 0;
          uint64_t v6 = v3 + 0x7FFFFFFFFFFFFFFFLL;
          do
          {
            unint64_t v7 = v3 - 1;
            uint64_t v8 = v70;
            if ((v70 & 0xC000000000000001) != 0)
            {
              uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              unint64_t v9 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v2 >= v9)
              {
LABEL_124:
                __break(1u);
LABEL_125:
                __break(1u);
LABEL_126:
                __break(1u);
LABEL_127:
                __break(1u);
LABEL_128:
                __break(1u);
                goto LABEL_129;
              }
              id v10 = *(id *)(v70 + 8 * v2 + 32);
              if (v7 >= v9) {
                goto LABEL_125;
              }
              uint64_t v11 = (uint64_t)v10;
              id v12 = *(id *)(v70 + 8 * v3 + 24);
            }
            id v13 = v12;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || (v70 & 0x8000000000000000) != 0
              || (v70 & 0x4000000000000000) != 0)
            {
              uint64_t v8 = sub_1000BC324(v70);
              unint64_t v70 = v8;
            }
            unint64_t v14 = *(void **)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * v2 + 0x20);
            *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * v2 + 0x20) = v13;

            specialized Array._endMutation()();
            uint64_t v15 = v70;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || (v70 & 0x8000000000000000) != 0
              || (v70 & 0x4000000000000000) != 0)
            {
              uint64_t v15 = sub_1000BC324(v70);
              unint64_t v70 = v15;
            }
            if (v7 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_126;
            }
            id v16 = *(void **)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x18);
            *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x18) = v11;

            specialized Array._endMutation()();
            if (v6 == v2) {
              goto LABEL_127;
            }
            ++v2;
            uint64_t v17 = v3 - 2;
            --v3;
          }
          while ((uint64_t)v2 < v17);
          unint64_t v2 = v70;
        }
        goto LABEL_25;
      }
    }
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
LABEL_25:
  unint64_t v69 = (unint64_t)_swiftEmptyArrayStorage;
  if (v2 >> 62) {
    goto LABEL_130;
  }
  uint64_t v18 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v18)
  {
    do
    {
      long long v66 = xmmword_1005A04F0;
      while (1)
      {
        if ((v2 & 0xC000000000000001) != 0)
        {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
            goto LABEL_124;
          }
          id v19 = *(id *)(v2 + 32);
        }
        id v20 = v19;
        swift_bridgeObjectRelease();
        unint64_t v21 = v2 >> 62;
        if (v2 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v36) {
            goto LABEL_121;
          }
          swift_bridgeObjectRetain();
          uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v37) {
            goto LABEL_122;
          }
        }
        else if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_121;
        }
        if ((v2 & 0xC000000000000001) != 0)
        {
          id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          if (!v21) {
            goto LABEL_36;
          }
        }
        else
        {
          if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_123;
          }
          id v22 = *(id *)(v2 + 32);
          if (!v21)
          {
LABEL_36:
            if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_128;
            }
            goto LABEL_37;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v38) {
          goto LABEL_128;
        }
LABEL_37:
        sub_1000ABDA8(0, 1, (unint64_t *)&qword_10070B700);

        sub_1000CBE70((uint64_t *)&unk_1007084E0);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = v66;
        *(void *)(v23 + 32) = v20;
        unint64_t v68 = v23;
        specialized Array._endMutation()();
        unint64_t v2 = v70;
        if (!(v70 >> 62)) {
          break;
        }
        swift_bridgeObjectRetain_n();
        id v39 = v20;
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v40) {
          goto LABEL_74;
        }
        while (1)
        {
LABEL_39:
          if ((v2 & 0xC000000000000001) != 0)
          {
            id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
              goto LABEL_120;
            }
            id v26 = *(id *)(v2 + 32);
          }
          unint64_t v27 = v26;
          swift_bridgeObjectRelease();
          if (![v27 isSystemItem]
            || (char *)[v27 systemItem] - 5 >= (char *)2)
          {
            break;
          }
          unint64_t v28 = v2 >> 62;
          if (v2 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v32) {
              goto LABEL_112;
            }
            swift_bridgeObjectRetain();
            uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v33) {
              goto LABEL_113;
            }
          }
          else if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_112;
          }
          if ((v2 & 0xC000000000000001) != 0)
          {
            id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            if (!v28) {
              goto LABEL_49;
            }
          }
          else
          {
            if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_114;
            }
            id v29 = *(id *)(v2 + 32);
            if (!v28)
            {
LABEL_49:
              if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_119;
              }
              goto LABEL_50;
            }
          }
          swift_bridgeObjectRetain();
          uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v34) {
            goto LABEL_119;
          }
LABEL_50:
          sub_1000ABDA8(0, 1, (unint64_t *)&qword_10070B700);

          id v30 = v27;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          unint64_t v2 = v70;
          if (v70 >> 62)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v35) {
              goto LABEL_74;
            }
          }
          else
          {
            uint64_t v31 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v31) {
              goto LABEL_74;
            }
          }
        }

        if ((a2 & 1) == 0) {
          goto LABEL_75;
        }
LABEL_101:
        id v57 = [v20 buttonGroup:v66];
        if (v57)
        {
          uint64_t v58 = v57;
          sub_10009E6C4(0, (unint64_t *)&qword_10070B700);
          id v59 = v58;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v59 setBarButtonItems:isa];
        }
        else
        {
          type metadata accessor for DOCBarButtonItemGroup();
          id v59 = (id)static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)();
          swift_bridgeObjectRelease();
        }
        id v61 = v59;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        if (v2 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v63) {
            goto LABEL_110;
          }
        }
        else
        {
          uint64_t v62 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v62)
          {
LABEL_110:
            swift_bridgeObjectRelease();
            long long v64 = (void *)v69;
            goto LABEL_132;
          }
        }
      }
      uint64_t v24 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      id v25 = v20;
      if (v24) {
        goto LABEL_39;
      }
LABEL_74:
      swift_bridgeObjectRelease();
      if (a2) {
        goto LABEL_101;
      }
LABEL_75:
      if (v68 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v56) {
          goto LABEL_101;
        }
        swift_bridgeObjectRetain();
        uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v42 = v41 - 1;
        if (!__OFSUB__(v41, 1)) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v41 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v41) {
          goto LABEL_101;
        }
        uint64_t v42 = v41 - 1;
        if (!__OFSUB__(v41, 1))
        {
LABEL_78:
          if (v42 >= 1)
          {
            uint64_t v43 = 0;
            uint64_t v44 = v41 + 0x7FFFFFFFFFFFFFFFLL;
            do
            {
              unint64_t v45 = v41 - 1;
              uint64_t v46 = v68;
              if ((v68 & 0xC000000000000001) != 0)
              {
                uint64_t v49 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                unint64_t v47 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v43 >= v47) {
                  goto LABEL_115;
                }
                id v48 = *(id *)(v68 + 8 * v43 + 32);
                if (v45 >= v47) {
                  goto LABEL_116;
                }
                uint64_t v49 = (uint64_t)v48;
                id v50 = *(id *)(v68 + 8 * v41 + 24);
              }
              id v51 = v50;
              if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                || (v68 & 0x8000000000000000) != 0
                || (v68 & 0x4000000000000000) != 0)
              {
                uint64_t v46 = sub_1000BC324(v68);
                unint64_t v68 = v46;
              }
              unsigned __int8 v52 = *(void **)((v46 & 0xFFFFFFFFFFFFFF8) + 8 * v43 + 0x20);
              *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 8 * v43 + 0x20) = v51;

              specialized Array._endMutation()();
              uint64_t v53 = v68;
              if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                || (v68 & 0x8000000000000000) != 0
                || (v68 & 0x4000000000000000) != 0)
              {
                uint64_t v53 = sub_1000BC324(v68);
                unint64_t v68 = v53;
              }
              if (v45 >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_117;
              }
              uint64_t v54 = *(void **)((v53 & 0xFFFFFFFFFFFFFF8) + 8 * v41 + 0x18);
              *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 8 * v41 + 0x18) = v49;

              specialized Array._endMutation()();
              if (v44 == v43) {
                goto LABEL_118;
              }
              ++v43;
              uint64_t v55 = v41 - 2;
              --v41;
            }
            while (v43 < v55);
          }
          goto LABEL_101;
        }
      }
LABEL_129:
      __break(1u);
LABEL_130:
      swift_bridgeObjectRetain_n();
      uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    while (v65);
  }
  swift_bridgeObjectRelease();
  long long v64 = _swiftEmptyArrayStorage;
LABEL_132:
  swift_bridgeObjectRelease();
  return (uint64_t)v64;
}

uint64_t sub_1000AB1F8(unint64_t a1, unint64_t a2)
{
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
LABEL_45:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v6 = a2 >> 62;
  if (!(a2 >> 62))
  {
    if (v5 == *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v5 != v26) {
    return 0;
  }
LABEL_5:
  if (v4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v4 = result;
    if (!result) {
      goto LABEL_36;
    }
LABEL_9:
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_50;
    }
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v8 = *(id *)(a1 + 32);
LABEL_12:
    unint64_t v9 = v8;
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v10)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return 1;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v10) {
        goto LABEL_35;
      }
    }
    unint64_t v6 = 0;
    unint64_t v27 = v4 - 1;
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v6 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_12;
        }
        id v11 = *(id *)(a2 + 32 + 8 * v6);
      }
      id v12 = v11;
      id v13 = v9;
      id v14 = v12;
      id v15 = [v13 barButtonItems];
      sub_10009E6C4(0, (unint64_t *)&qword_10070B700);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v16 = [v14 barButtonItems];
      uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      unint64_t v18 = swift_bridgeObjectRetain();
      LOBYTE(v16) = sub_1000AD0F0(v18, v17);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      if ((v16 & 1) == 0)
      {
        id v25 = v14;
        id v19 = v13;
LABEL_41:

LABEL_42:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      id v19 = [v13 representativeItem];
      id v20 = [v14 representativeItem];
      unint64_t v21 = v20;
      if (v19)
      {
        if (!v20)
        {

          id v25 = v13;
          goto LABEL_41;
        }
        id v22 = v19;
        char v23 = static NSObject.== infix(_:_:)();

        if ((v23 & 1) == 0) {
          goto LABEL_42;
        }
      }
      else
      {

        if (v21)
        {
          id v25 = v13;
          id v19 = v21;
          goto LABEL_41;
        }
      }
      if (v27 == v6) {
        goto LABEL_36;
      }
      unint64_t v4 = v6 + 1;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v4 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        id v24 = *(id *)(a1 + 40 + 8 * v6);
      }
      unint64_t v9 = v24;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        goto LABEL_45;
      }
      if (v10 == ++v6) {
        goto LABEL_35;
      }
    }
  }
  unint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (v4) {
    goto LABEL_9;
  }
LABEL_36:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

void *sub_1000AB608(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_69;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (v2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v2 + 8 * v4);
      unint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      if (objc_msgSend(v5, "doc_isLegacyOverflowBarButtonItem"))
      {
        swift_bridgeObjectRelease_n();
        unint64_t v8 = *a1;
        if ((unint64_t)*a1 >> 62) {
          goto LABEL_78;
        }
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v9)
        {
LABEL_20:
          swift_bridgeObjectRelease();
          if ((unint64_t)*a1 >> 62) {
            goto LABEL_82;
          }
          uint64_t v2 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          while (1)
          {
LABEL_22:
            if ((unint64_t)*a1 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v14 >= v2)
              {
LABEL_24:
                sub_1000ABDA8(v2, v14, (unint64_t *)&qword_10070B700);
                return v6;
              }
            }
            else
            {
              uint64_t v14 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v14 >= v2) {
                goto LABEL_24;
              }
            }
            __break(1u);
LABEL_82:
            swift_bridgeObjectRetain();
            uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
        }
        while (2)
        {
          uint64_t v2 = 0;
          while (1)
          {
            id v10 = (v8 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v8 + 8 * v2 + 32);
            id v11 = v10;
            unsigned __int8 v12 = [v10 doc_isLegacyOverflowBarButtonItem];

            if (v12) {
              break;
            }
            uint64_t v13 = v2 + 1;
            if (__OFADD__(v2, 1)) {
              goto LABEL_65;
            }
            ++v2;
            if (v13 == v9) {
              goto LABEL_20;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v16 = v2 + 1;
          if (__OFADD__(v2, 1))
          {
            __break(1u);
          }
          else if (!((unint64_t)*a1 >> 62))
          {
            if (v16 == *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_22;
            }
            goto LABEL_29;
          }
          swift_bridgeObjectRetain();
          uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v16 == v34) {
            goto LABEL_22;
          }
LABEL_29:
          uint64_t v17 = v2 + 5;
LABEL_30:
          unint64_t v8 = v17 - 4;
          uint64_t v18 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v8 & 0x8000000000000000) != 0) {
              goto LABEL_66;
            }
            if (v8 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_67;
            }
            id v19 = *(id *)(v18 + 8 * v17);
          }
          id v20 = v19;
          unsigned __int8 v21 = [v19 doc_isLegacyOverflowBarButtonItem];

          if (v21) {
            goto LABEL_55;
          }
          if (v8 == v2) {
            goto LABEL_54;
          }
          uint64_t v22 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v22 = *a1;
            if ((*a1 & 0xC000000000000001) == 0) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v2 < 0) {
              goto LABEL_72;
            }
            if ((unint64_t)v2 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_73;
            }
            id v23 = *(id *)(v22 + 8 * v2 + 32);
            if ((v22 & 0xC000000000000001) == 0)
            {
LABEL_40:
              if ((v8 & 0x8000000000000000) != 0) {
                goto LABEL_74;
              }
              if (v8 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_75;
              }
              id v24 = *(id *)(v22 + 8 * v17);
LABEL_43:
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *a1 = v22;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v22 < 0 || (v22 & 0x4000000000000000) != 0)
              {
                uint64_t v22 = sub_1000BC324(v22);
                *a1 = v22;
              }
              uint64_t v26 = *(void **)((v22 & 0xFFFFFFFFFFFFFF8) + 8 * v2 + 0x20);
              *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 8 * v2 + 0x20) = v24;

              specialized Array._endMutation()();
              uint64_t v27 = *a1;
              int v28 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *a1 = v27;
              if (!v28 || v27 < 0 || (v27 & 0x4000000000000000) != 0)
              {
                uint64_t v27 = sub_1000BC324(v27);
                *a1 = v27;
              }
              if ((v8 & 0x8000000000000000) != 0) {
                goto LABEL_76;
              }
              uint64_t v29 = v27 & 0xFFFFFFFFFFFFFF8;
              if (v8 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_77;
              }
              id v30 = *(void **)(v29 + 8 * v17);
              *(void *)(v29 + 8 * v17) = v23;

              specialized Array._endMutation()();
LABEL_54:
              if (__OFADD__(v2++, 1))
              {
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
LABEL_78:
                swift_bridgeObjectRetain();
                uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
                if (!v9) {
                  goto LABEL_20;
                }
                continue;
              }
LABEL_55:
              uint64_t v32 = v17 - 3;
              if (__OFADD__(v8, 1)) {
                goto LABEL_68;
              }
              if ((unint64_t)*a1 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v33 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              ++v17;
              if (v32 == v33) {
                goto LABEL_22;
              }
              goto LABEL_30;
            }
          }
          break;
        }
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v22 = *a1;
        goto LABEL_43;
      }

      ++v4;
      if (v7 == v3) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  return 0;
}

void sub_1000ABADC(unint64_t a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = v2;
    unint64_t v4 = a1;
    if (a2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100083AD8(v4);
      unint64_t v4 = a2;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    id v5 = [v2 leftBarButtonItems];
    if (!v5) {
      goto LABEL_11;
    }
    unint64_t v6 = v5;
    sub_10009E6C4(0, (unint64_t *)&qword_10070B700);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    unint64_t v7 = swift_bridgeObjectRetain();
    LOBYTE(v6) = sub_1000AD0F0(v7, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_11:
      sub_10009E6C4(0, (unint64_t *)&qword_10070B700);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v3 setLeftBarButtonItems:isa];
    }
  }
}

void sub_1000ABC60(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (!v4
    || v4 == 1
    && a3
    && (a1[4] == a2 ? (BOOL v6 = a1[5] == a3) : (BOOL v6 = 0), v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    [v3 set_alternateLargeTitles:0];
  }
  else
  {
    id v7 = [v3 _alternateLargeTitles];
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
    }
    char v10 = sub_1000082EC(a1, v9);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      [v3 set_alternateLargeTitles:isa];
    }
  }
}

uint64_t sub_1000ABDA8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    BOOL v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15 < v3) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v8 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = v5 - v3;
  if (__OFSUB__(0, v8))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v16 + v27;
    if (!__OFADD__(v16, v27)) {
      goto LABEL_8;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v7 = *v4;
  uint64_t v27 = v5 - v3;
  uint64_t v28 = v5;
  if (*v4 >> 62) {
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 - v8;
  if (__OFADD__(v10, v9)) {
    goto LABEL_20;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v7;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
    {
      uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
      if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
        uint64_t v14 = v6;
        goto LABEL_24;
      }
    }
  }
LABEL_21:
  uint64_t v14 = v6;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  swift_bridgeObjectRelease();
  *uint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_24:
  uint64_t v17 = (char *)(v13 + 32 + 8 * v28);
  sub_10009E6C4(0, v14);
  swift_arrayDestroy();
  uint64_t v18 = v27;
  if (v27)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v18 = v27;
      uint64_t v20 = v25 - v3;
      if (!__OFSUB__(v25, v3))
      {
LABEL_27:
        if (v20 < 0)
        {
LABEL_43:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        unsigned __int8 v21 = (char *)(v13 + 32 + 8 * v3);
        if (v28 != v3 || v17 >= &v21[8 * v20])
        {
          memmove(v17, v21, 8 * v20);
          uint64_t v18 = v27;
        }
        if (!(v7 >> 62))
        {
          uint64_t v22 = *(void *)(v13 + 16);
          uint64_t v23 = v22 + v18;
          if (!__OFADD__(v22, v18))
          {
LABEL_33:
            *(void *)(v13 + 16) = v23;
            goto LABEL_34;
          }
          goto LABEL_42;
        }
LABEL_40:
        swift_bridgeObjectRetain();
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v23 = v26 + v27;
        if (!__OFADD__(v26, v27)) {
          goto LABEL_33;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v13 + 16);
      uint64_t v20 = v19 - v3;
      if (!__OFSUB__(v19, v3)) {
        goto LABEL_27;
      }
    }
    __break(1u);
    goto LABEL_40;
  }
LABEL_34:

  return specialized Array._endMutation()();
}

uint64_t sub_1000AC0CC(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    if ([v2 isRoot] && objc_msgSend(v1, "enclosedInUIPDocumentLanding"))
    {
      [v2 sourceIdentifier];
      id v3 = [v2 originalSourceIdentifier];
      uint64_t v4 = (void *)DOCDocumentSourceIdentifierRecentDocuments;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;
      if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        id v11 = v4;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0)
        {
          if (v3)
          {
            uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v14 = v13;
            if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
            {
              id v16 = v11;

              swift_bridgeObjectRelease_n();
LABEL_21:
              uint64_t v4 = v2;
              goto LABEL_18;
            }
            char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
            id v19 = v11;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v18) {
              goto LABEL_21;
            }
          }
          else
          {
          }
          uint64_t v20 = (void *)DOCDocumentSourceIdentifierSharedItems;
          uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v23 = v22;
          if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24)
          {
            id v25 = v20;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
            id v27 = v20;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v26 & 1) == 0)
            {
              if (v3)
              {
                uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v30 = v29;
                if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31) {
                  LOBYTE(v3) = 1;
                }
                else {
                  LOBYTE(v3) = _stringCompareWithSmolCheck(_:_:expecting:)();
                }

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
              }
              goto LABEL_27;
            }
          }

          LOBYTE(v3) = 1;
LABEL_27:
          sub_1000CBE70((uint64_t *)&unk_100711B40);
          swift_arrayDestroy();
          return v3 & 1;
        }
      }

LABEL_18:
      sub_1000CBE70((uint64_t *)&unk_100711B40);
      swift_arrayDestroy();
      LOBYTE(v3) = 1;
      return v3 & 1;
    }
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

void sub_1000AC418()
{
  uint64_t v1 = sub_1000CBE70(&qword_10071C7D8);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&aBlock[-1] - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  char v10 = (char *)&aBlock[-1] - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&aBlock[-1] - v11;
  uint64_t v13 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem];
  if (v13)
  {
    uint64_t v14 = *(void *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_titleMenuContext];
    if (v14)
    {
      uint64_t v15 = v14
          + OBJC_IVAR____TtCC5Files31DOCItemCollectionViewController16TitleMenuContext_folderActionsMenuConfiguration;
      swift_beginAccess();
      sub_1000CBC00(v15, (uint64_t)v12, &qword_10071C7D8);
    }
    else
    {
      uint64_t v16 = _s23FolderMenuConfigurationVMa(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 1, 1, v16);
    }
    sub_1000CBC00((uint64_t)v12, (uint64_t)v10, &qword_10071C7D8);
    uint64_t v17 = (int *)_s23FolderMenuConfigurationVMa(0);
    char v18 = *(unsigned int (**)(char *, uint64_t, int *))(*((void *)v17 - 1) + 48);
    if (v18(v10, 1, v17) == 1)
    {
      id v19 = v13;
      sub_1000CBBA4((uint64_t)v10, &qword_10071C7D8);
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v21 = &v10[v17[6]];
      uint64_t v28 = v4;
      uint64_t v23 = *(void *)v21;
      uint64_t v22 = *((void *)v21 + 1);
      id v24 = v13;
      swift_retain();
      sub_100566F30((uint64_t)v10);
      aBlock[4] = v23;
      aBlock[5] = v22;
      uint64_t v4 = v28;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001FCE6C;
      aBlock[3] = &unk_1006B7BA8;
      uint64_t v20 = _Block_copy(aBlock);
      swift_release();
    }
    [v13 setTitleMenuProvider:v20];
    _Block_release(v20);
    sub_1000CBC00((uint64_t)v12, (uint64_t)v7, &qword_10071C7D8);
    if (v18(v7, 1, v17) == 1)
    {
      sub_1000CBBA4((uint64_t)v7, &qword_10071C7D8);
      id v25 = 0;
    }
    else
    {
      id v25 = *(id *)&v7[v17[7]];
      sub_100566F30((uint64_t)v7);
    }
    [v13 setDocumentProperties:v25];

    sub_1000CBC00((uint64_t)v12, (uint64_t)v4, &qword_10071C7D8);
    if (v18(v4, 1, v17) == 1)
    {
      sub_1000CBBA4((uint64_t)v4, &qword_10071C7D8);
    }
    else
    {
      uint64_t v26 = *(void *)&v4[v17[8]];
      swift_retain();
      sub_100566F30((uint64_t)v4);
      if (v26)
      {
        swift_release();
        sub_100567020(&qword_10071C7E0, (void (*)(uint64_t))type metadata accessor for DOCItemCollectionViewController);
        id v27 = v0;
LABEL_16:
        sub_1000AC84C((uint64_t)v0);
        sub_1000CBBA4((uint64_t)v12, &qword_10071C7D8);

        return;
      }
    }
    v0 = 0;
    goto LABEL_16;
  }
}

uint64_t sub_1000AC818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100566B7C);
}

uint64_t _s23FolderMenuConfigurationVMa(uint64_t a1)
{
  return sub_10009E984(a1, qword_10071C788);
}

void sub_1000AC84C(uint64_t a1)
{
  if (UINavigationItem.renameDelegate.getter())
  {
    type metadata accessor for DOCItemCollectionViewController(0);
    id v6 = (id)swift_dynamicCastClass();
    if (v6)
    {
      if (a1) {
        goto LABEL_4;
      }
LABEL_12:
      uint64_t v2 = 0;
      if (v6) {
        goto LABEL_7;
      }
LABEL_13:
      if (!v2) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    swift_unknownObjectRelease();
  }
  id v6 = 0;
  if (!a1) {
    goto LABEL_12;
  }
LABEL_4:
  type metadata accessor for DOCItemCollectionViewController(0);
  uint64_t v2 = (void *)swift_dynamicCastClass();
  if (v2) {
    swift_unknownObjectRetain();
  }
  if (!v6) {
    goto LABEL_13;
  }
LABEL_7:
  if (v2)
  {
    type metadata accessor for DOCItemCollectionViewController(0);
    id v3 = v2;
    id v4 = v6;
    char v5 = static NSObject.== infix(_:_:)();

    if (v5)
    {

LABEL_17:
      swift_unknownObjectRelease();
      return;
    }
  }
LABEL_14:
  UINavigationItem.renameDelegate.setter();
}

uint64_t sub_1000AC9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100566C3C);
}

id sub_1000AC9C0(void *a1)
{
  uint64_t v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 __systemImageNamedSwift:v3];

  id v5 = [objc_allocWithZone((Class)UIBarButtonItem) initWithImage:v4 style:0 target:0 action:0];
  [v5 setTarget:a1];
  [v5 setAction:"wantsToCreateNewFile"];
  id v6 = v5;
  id v7 = [a1 effectiveAppearance];
  NSString v8 = v7;
  if (v7)
  {
    id v9 = [v7 collectionCreateButtonTitle];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v6 setTitle:v8];

  sub_1000ACB5C();
  [v6 setEnabled:v10 & 1];
  [v6 setAccessibilityIdentifier:DOCFullDocumentManagerViewControllerNavigationBarCreateButtonIdentifier];
  return v6;
}

void sub_1000ACB5C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (!v1)
  {
    __break(1u);
    return;
  }
  uint64_t v2 = v1 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
  if (*(unsigned char *)(v2 + 16))
  {
    NSString v3 = *(void **)(*(void *)v2 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    swift_unknownObjectRetain();
  }
  else
  {
    NSString v3 = *(void **)(v2 + 8);
    swift_unknownObjectRetain();
    if (!v3) {
      return;
    }
  }
  id v4 = [v3 fpfs_fpItem];
  swift_unknownObjectRelease();
  if (v4)
  {
    id v5 = (void *)FPActionImportHere;
    sub_1000CBE70((uint64_t *)&unk_1007084E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A04F0;
    *(void *)(inited + 32) = v4;
    unint64_t v8 = inited;
    specialized Array._endMutation()();
    id v7 = v4;
    sub_1000301E0(v5, v8);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000ACC98()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_forceEditingMode);
}

id sub_1000ACCAC(uint64_t a1)
{
  if (qword_100705330 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1007377C0;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self systemImageNamed:v3 withConfiguration:v2];

  id v5 = [objc_allocWithZone((Class)UIBarButtonItem) initWithImage:v4 style:0 target:a1 action:"wantsToCreateNewFolder"];
  id result = (id)_DocumentManagerBundle();
  if (result)
  {
    id v7 = result;
    v8._countAndFlagsBits = 0xD000000000000019;
    v12._countAndFlagsBits = 0xD000000000000024;
    v12._object = (void *)0x80000001005D8370;
    v8._object = (void *)0x80000001005D8350;
    v9._countAndFlagsBits = 0x617A696C61636F4CLL;
    v9._object = (void *)0xEB00000000656C62;
    v10._countAndFlagsBits = 0x646C6F462077654ELL;
    v10._object = (void *)0xEA00000000007265;
    DOCLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v12);

    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 setTitle:v11];

    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000ACEA4()
{
  if (qword_100705278 != -1) {
    swift_once();
  }
  id v1 = [(id)qword_100737698 ellipsisMenuItemImageName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  if (qword_100705330 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1007377C0;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [self systemImageNamed:v3 withConfiguration:v2];

  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for DOCLegacyOverflowBarButtonItem();
  id v5 = [super init];
  [v5 setImage:v4];
  [v5 setStyle:0];
  id v6 = self;
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = [v6 itemCollectionMenuButtonShowing:v7];

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v5 setAccessibilityIdentifier:v8];

  return v5;
}

id sub_1000AD0F0(unint64_t a1, uint64_t a2)
{
  return sub_10007CE38(a1, a2, (uint64_t)&qword_10070B700);
}

id sub_1000AD108(id result)
{
  uint64_t v2 = v1;
  unint64_t v3 = (unint64_t)result;
  id v4 = 0;
  switch((unint64_t)result)
  {
    case 0uLL:
      if (*(unsigned char *)(v2 + 97) == 1)
      {
        id v5 = *(void **)(v2 + 16);
        id v6 = *(void **)(v2 + 32);
        NSString v7 = *(void **)(v2 + 56);
        *(void *)((char *)objc_allocWithZone((Class)type metadata accessor for DOCLoadingViewController())
                  + OBJC_IVAR____TtC5Files24DOCLoadingViewController____lazy_storage___task) = 0;
        id v8 = v5;
        id v9 = v6;
        id v10 = v7;
        return sub_1000784A0(v8, v6, v7);
      }
      return 0;
    case 1uLL:
    case 3uLL:
      return (id)sub_1000B1D54();
    case 2uLL:
      return v4;
    case 4uLL:
      if (![*(id *)(v2 + 40) node]) {
        return (id)sub_1000B1D54();
      }
      type metadata accessor for DOCRootNode();
      uint64_t v26 = (void *)swift_dynamicCastClass();
      if (!v26) {
        goto LABEL_13;
      }
      id v27 = v26;
      if (![v26 enumeratorError]) {
        goto LABEL_13;
      }
      sub_1000CBE70((uint64_t *)&unk_1007076D0);
      sub_10026DBEC();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_13;
      }
      if (NSError.isProviderDomainNotAuthenticated.getter())
      {
        id v28 = [v27 subjectNode];
        type metadata accessor for DOCEncryptedVolumeNode();
        if (swift_dynamicCastClass())
        {
          dispatch thunk of DOCEncryptedVolumeNode.tryResolving()();

LABEL_13:
          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
      return (id)sub_1000B1D54();
    default:
      Swift::String v12 = *(char **)(v2 + 48);
      uint64_t v13 = *(void *)&v12[OBJC_IVAR____TtC5Files21DOCFileProviderSource_errorCount];
      BOOL v14 = __CFADD__(v13, 1);
      unint64_t v15 = v13 + 1;
      if (v14)
      {
        __break(1u);
      }
      else
      {
        *(void *)&v12[OBJC_IVAR____TtC5Files21DOCFileProviderSource_errorCount] = v15;
        uint64_t v16 = *(void **)(v2 + 16);
        uint64_t v17 = *(void **)(v2 + 32);
        char v18 = *(void **)(v2 + 40);
        char v19 = v15 < 2;
        uint64_t v20 = *(void **)(v2 + 56);
        objc_allocWithZone((Class)type metadata accessor for DOCErrorViewController());
        sub_10006927C(v3);
        id v21 = v16;
        id v22 = v17;
        id v23 = v20;
        id v24 = v12;
        id v25 = v18;
        id v4 = sub_10032ACFC(v21, v17, v20, v3, v24, v18, v19);

        sub_1000686BC(v3);
        return v4;
      }
      return result;
  }
}

uint64_t sub_1000AD3B0()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000AD3F8()
{
  swift_unknownObjectWeakAssign();
  sub_1000AD448();

  return swift_unknownObjectRelease();
}

void sub_1000AD448()
{
  id v1 = [v0 navigationItem];
  id v2 = [v1 searchController];

  if (v2)
  {
    id v4 = [v2 searchResultsController];

    if (v4)
    {
      type metadata accessor for DOCItemCollectionViewController(0);
      if (swift_dynamicCastClass())
      {
        swift_unknownObjectWeakLoadStrong();
        uint64_t v3 = swift_unknownObjectWeakAssign();
        sub_1000AD448(v3);

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
  }
}

uint64_t sub_1000AD57C(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1();
  id v6 = (void *)(a3 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting);
  uint64_t v7 = *(void *)(a3 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting);
  *id v6 = 0;
  v6[1] = 0;
  sub_1000A7258(v7);
  sub_1000AD604();
  swift_beginAccess();
  uint64_t v8 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  return sub_1000A7258(v8);
}

unint64_t sub_1000AD604()
{
  uint64_t v1 = v0;
  unint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_state);
  unint64_t result = 0x746E65746E6F63;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x676E6964616F6CLL;
  switch(v2)
  {
    case 0uLL:
      goto LABEL_3;
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
      goto LABEL_6;
    case 5uLL:
      return result;
    default:
      sub_10006927C(v2);
      swift_errorRetain();
      id v6 = (void *)_convertErrorToNSError(_:)();
      id v7 = [v6 domain];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      [v6 code];
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v13 = v12;
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000686AC(v2);
      uint64_t v5 = v8;
      unint64_t v4 = v10;
LABEL_3:
      if (v5 == 0x676E6964616F6CLL && v4 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_6:
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          uint64_t v16 = *(void (**)(unint64_t))(v1
                                                        + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting);
          if (v16)
          {
            swift_retain();
            v16(v2);
            sub_1000A7258((uint64_t)v16);
          }
        }
      }
      return sub_1000686AC(v2);
  }
}

uint64_t sub_1000AD850()
{
  return sub_1000AD85C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void *))(v0 + 32));
}

uint64_t sub_1000AD85C(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  id v6 = (void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(a1 + 16);
  BOOL v9 = __OFSUB__(v8, 1);
  uint64_t v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
LABEL_11:
    sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    swift_bridgeObjectRetain();
    char v15 = (void *)_bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  *id v6 = v10;
  if (v10) {
    return result;
  }
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    Swift::String v12 = (void **)(a2 + 40);
    do
    {
      uint64_t v13 = *v12;
      v12 += 2;
      id v14 = v13;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v11;
    }
    while (v11);
  }
  if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  sub_10009E6C4(0, (unint64_t *)&qword_100707710);
  char v15 = _swiftEmptyArrayStorage;
LABEL_8:
  swift_bridgeObjectRelease();
  a3(v15);
  return swift_bridgeObjectRelease();
}

void sub_1000AD9E8(uint64_t a1)
{
  sub_1000AD9F0(a1, *(void *)(v1 + 16));
}

void sub_1000AD9F0(uint64_t a1, uint64_t a2)
{
  sub_10009E6C4(0, (unint64_t *)&qword_100707710);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_1000ADA6C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_10009E6C4(0, (unint64_t *)&qword_100707710);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000ADAF0(unint64_t a1)
{
  return sub_1000ADAFC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(unint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000ADAFC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(unint64_t), unint64_t a5)
{
  uint64_t v62 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v62 - 8);
  uint64_t v9 = __chkstk_darwin(v62);
  uint64_t v54 = (uint64_t (*)(unint64_t))((char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v47 = (char *)v45 - v12;
  __chkstk_darwin(v11);
  id v14 = (char *)v45 - v13;
  unint64_t v55 = a2;
  if (a2 >> 62) {
    goto LABEL_33;
  }
  uint64_t v15 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (!(a1 >> 62))
  {
    if (v15 != *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_35;
    }
LABEL_5:
    if (![self protectedAppsEnabled]) {
      return a4(a1);
    }
    unint64_t v60 = a1 >> 62;
    double Current = CFAbsoluteTimeGetCurrent();
    static Logger.UI.getter();
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v46 = a4;
    v45[1] = a5;
    v45[0] = v15;
    if (v19)
    {
      uint64_t v20 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315394;
      double v63 = COERCE_DOUBLE(sub_10009B0E4(0xD00000000000004ALL, 0x80000001005DEF90, v64));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2048;
      double v63 = *(double *)&v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[PROTECTED APPS] %s Checking if %ld locations need auth authentication.", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    id v61 = *(void (**)(char *, uint64_t))(v48 + 8);
    v61(v14, v62);
    a4 = v54;
    if (v60)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v22 = v55;
      if (!v21)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        double v38 = CFAbsoluteTimeGetCurrent();
        id v39 = v47;
        static Logger.UI.getter();
        swift_bridgeObjectRetain();
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = swift_slowAlloc();
          v64[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v42 = 136315650;
          double v63 = COERCE_DOUBLE(sub_10009B0E4(0xD00000000000004ALL, 0x80000001005DEF90, v64));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v42 + 12) = 2048;
          double v63 = v38 - Current;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v42 + 22) = 2048;
          double v63 = *(double *)v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "[PROTECTED APPS] %s check took %f sec for %ld locations", (uint8_t *)v42, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        v61(v39, v62);
        a4 = v46;
        return a4(a1);
      }
    }
    else
    {
      uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      unint64_t v22 = v55;
      if (!v21) {
        goto LABEL_26;
      }
    }
    id v23 = self;
    unint64_t v59 = v22 & 0xC000000000000001;
    unint64_t v60 = a1 & 0xC000000000000001;
    uint64_t v49 = v22 & 0xFFFFFFFFFFFFFF8;
    uint64_t v56 = v48 + 8;
    id v57 = v23;
    uint64_t v24 = 4;
    *(void *)&long long v25 = 136315906;
    long long v52 = v25;
    unint64_t v51 = 0x80000001005DEF90;
    id v50 = (char *)&type metadata for Any + 8;
    uint64_t v58 = v21;
    unint64_t v53 = a1;
    while (1)
    {
      a5 = v24 - 4;
      uint64_t v26 = v60
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char *)*(id *)(a1 + 8 * v24);
      id v14 = v26;
      uint64_t v27 = v24 - 3;
      if (__OFADD__(a5, 1)) {
        break;
      }
      if (v59)
      {
        id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (a5 >= *(void *)(v49 + 16)) {
          goto LABEL_32;
        }
        id v28 = *(id *)(v22 + 8 * v24);
      }
      uint64_t v29 = v28;
      id v30 = [v57 sharedManager:v45[0]];
      int v31 = [v30 nodeRequiresAuthentication_Sync:[v29 node]];

      swift_unknownObjectRelease();
      sub_1000AE374(v14, v31);
      static Logger.UI.getter();
      id v32 = v29;
      uint64_t v33 = v14;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v37 = (void *)swift_slowAlloc();
        v64[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = v52;
        *(void *)(v36 + 4) = sub_10009B0E4(0xD00000000000004ALL, v51, v64);
        *(_WORD *)(v36 + 12) = 1024;
        *(_DWORD *)(v36 + 14) = v31;
        *(_WORD *)(v36 + 18) = 2112;
        *(void *)(v36 + 20) = v32;
        *(_WORD *)(v36 + 28) = 2112;
        *(void *)(v36 + 30) = v33;
        *uint64_t v37 = v32;
        v37[1] = v33;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "[PROTECTED APPS] %s requiresAuthentication: %{BOOL}d location: %@ viewController: %@", (uint8_t *)v36, 0x26u);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        unint64_t v22 = v55;
        swift_slowDealloc();
        swift_arrayDestroy();
        a4 = v54;
        swift_slowDealloc();
        a1 = v53;
        swift_slowDealloc();
      }
      else
      {
      }
      v61((char *)a4, v62);
      ++v24;
      if (v27 == v58) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15 == v44) {
    goto LABEL_5;
  }
LABEL_35:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000AE374(void *a1, int a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - v9;
  if (![self protectedAppsEnabled]) {
    return;
  }
  type metadata accessor for DOCBrowserContainerController();
  uint64_t v11 = swift_dynamicCastClass();
  uint64_t v12 = (void *)v11;
  if (v11)
  {
    uint64_t v13 = (void **)(v11 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
    swift_beginAccess();
    id v14 = *v13;
    if (*v13)
    {
      type metadata accessor for DOCItemCollectionViewController(0);
      uint64_t v15 = swift_dynamicCastClass();
      if (v15)
      {
        uint64_t v16 = v15;
        id v17 = v14;
        id v18 = a1;
        id v19 = v17;
        static Logger.UI.getter();
        id v20 = v19;
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.debug.getter();
        int v23 = v22;
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v24 = swift_slowAlloc();
          int v36 = v23;
          uint64_t v25 = v24;
          os_log_type_t v35 = (void *)swift_slowAlloc();
          uint64_t v37 = swift_slowAlloc();
          uint64_t v41 = v37;
          *(_DWORD *)uint64_t v25 = 136315394;
          uint64_t v40 = sub_10009B0E4(0xD000000000000040, 0x80000001005DEFE0, &v41);
          int v38 = a2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v25 + 12) = 2112;
          os_log_t v34 = v21;
          uint64_t v40 = v16;
          id v26 = v20;
          id v39 = v18;
          id v27 = v26;
          LOBYTE(a2) = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v35 = v16;

          id v18 = v39;
          os_log_t v28 = v34;
          _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v36, "[PROTECTED APPS] %s collectionViewController: %@", (uint8_t *)v25, 0x16u);
          sub_1000CBE70(&qword_100707CC0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
        sub_1000B0240(a2 & 1);

        return;
      }
    }
    id v29 = a1;
  }
  static Logger.UI.getter();
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    id v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)id v32 = 136315138;
    uint64_t v40 = sub_10009B0E4(0xD000000000000040, 0x80000001005DEFE0, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "[PROTECTED APPS] %s collectionViewController: is nil!", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1000AE810()
{
  return sub_1000AE9E4();
}

uint64_t sub_1000AE818(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for DOCHierarchyController.BatchedLocationViewControllerDriver();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 40) = DOCSplitBrowserViewController.didCommitPreview(of:);
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 56) = _swiftEmptyArrayStorage;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = a1;
  *(unsigned char *)(v11 + 32) = a2;
  *(unsigned char *)(v11 + 33) = a3;
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v12;
  v13[3] = a4;
  v13[4] = a5;
  *(void *)(v11 + 64) = v11;
  id v14 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRelease();
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = sub_1000AFAEC;
  v16[3] = v13;
  v16[4] = v15;
  *(void *)(v11 + 40) = sub_1000AFA78;
  *(void *)(v11 + 48) = v16;
  swift_retain();
  swift_release();
  sub_1000AEA50();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for DOCHierarchyController.BatchedLocationViewControllerDriver()
{
  return self;
}

uint64_t sub_1000AE9E4()
{
  swift_beginAccess();
  unint64_t v0 = swift_bridgeObjectRetain();
  sub_1000AEF88(v0);
  uint64_t v1 = swift_endAccess();
  return sub_1000AEA50(v1);
}

void sub_1000AEA50()
{
  uint64_t v4 = v1;
  uint64_t v5 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 24) + 16))
  {
    uint64_t v21 = *(void (**)(uint64_t))(v4 + 40);
    uint64_t v22 = swift_retain();
    v21(v22);
    swift_release();
    return;
  }
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v7 = *(void **)(v6 + 32);
  uint64_t v8 = *(void **)(v6 + 40);
  id v9 = v8;
  id v10 = v7;
  sub_1000AEFA0(0, 1);
  swift_endAccess();
  id v50 = v9;
  uint64_t v3 = *v5;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v51 = v10;
  if (!v11)
  {
    id v23 = v10;
    id v24 = v9;
    swift_bridgeObjectRetain();
    unint64_t v0 = 0;
    uint64_t v2 = v10;
    goto LABEL_15;
  }
  uint64_t v49 = v4;
  id v12 = v10;
  id v13 = v9;
  swift_bridgeObjectRetain();
  unint64_t v0 = 0;
  id v14 = (void **)(v3 + 40);
  do
  {
    uint64_t v15 = *v14;
    if (*v14)
    {
      if (!v8) {
        goto LABEL_14;
      }
      uint64_t v16 = *(v14 - 1);
      sub_10009E6C4(0, &qword_100707CD0);
      id v17 = v13;
      id v18 = v16;
      id v19 = v15;
      char v20 = static NSObject.== infix(_:_:)();

      if ((v20 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else if (v8)
    {
      goto LABEL_14;
    }
    v14 += 2;
    ++v0;
  }
  while (v11 != v0);
  unint64_t v0 = v11;
LABEL_14:
  uint64_t v4 = v49;
  id v9 = v50;
  uint64_t v2 = v51;
  if (*(void *)(v3 + 16) < v0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_15:

  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v25 = (void *)swift_dynamicCastClass();
  if (!v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = _swiftEmptyArrayStorage;
  }
  uint64_t v26 = v25[2];
  swift_release();
  if (v26 == v0)
  {
    id v27 = (void *)swift_dynamicCastClass();
    if (!v27)
    {
      swift_bridgeObjectRelease();
      id v27 = _swiftEmptyArrayStorage;
    }
    goto LABEL_20;
  }
LABEL_31:
  swift_bridgeObjectRelease();
  id v27 = sub_1002F4F08(v3, v3 + 32, 0, (2 * v0) | 1);
LABEL_20:
  swift_bridgeObjectRelease();
  Swift::Int v28 = v27[2];
  swift_beginAccess();
  sub_1000CBE70((uint64_t *)&unk_10070B6E0);
  Array.remove(upTo:)(v28);
  swift_endAccess();
  sub_1000CBE70((uint64_t *)&unk_1007084E0);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1005A04F0;
  *(void *)(v29 + 32) = v2;
  aBlock[0] = v29;
  specialized Array._endMutation()();
  uint64_t v30 = aBlock[0];
  if (v28)
  {
    aBlock[0] = _swiftEmptyArrayStorage;
    id v31 = v2;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v32 = 4;
    do
    {
      id v33 = (id)v27[v32];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v32 += 2;
      --v28;
    }
    while (v28);
    os_log_t v34 = (void *)aBlock[0];
    swift_release();
  }
  else
  {
    id v35 = v2;
    swift_release();
    os_log_t v34 = _swiftEmptyArrayStorage;
  }
  aBlock[0] = v30;
  sub_1000AEF70((unint64_t)v34);
  uint64_t v36 = v30;
  uint64_t v37 = *(void **)(v4 + 16);
  uint64_t v38 = *(unsigned __int8 *)(v4 + 32);
  uint64_t v39 = *(unsigned __int8 *)(v4 + 33);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v41 = (void *)Strong;
    sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
    id v42 = v50;
    uint64_t v43 = v4;
    id v44 = v37;
    swift_retain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = v36;
    v46[3] = v44;
    v46[4] = sub_1000AE810;
    v46[5] = v43;
    aBlock[4] = sub_1000ADAF0;
    aBlock[5] = v46;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000ADA6C;
    aBlock[3] = &unk_10069A580;
    unint64_t v47 = _Block_copy(aBlock);
    id v48 = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    [v41 hierarchyController:v48 prepareControllersFor:isa :v42 isUserInteraction:v38 isBrowsingTrash:v39 completion:v47];
    swift_unknownObjectRelease();
    _Block_release(v47);

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000AEF70(unint64_t a1)
{
  return sub_100083628(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000873F8);
}

uint64_t sub_1000AEF88(unint64_t a1)
{
  return sub_10009DC84(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000A6630);
}

uint64_t sub_1000AEFA0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1000AF10C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000AF10C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000CBE70(&qword_100708CE0);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AF21C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AF21C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AF41C(unint64_t a1, void *a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24 >= 1) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1) {
    goto LABEL_10;
  }
LABEL_3:
  id v13 = a2;
  id v14 = v6;
  uint64_t v15 = sub_1000AF618(a1, (uint64_t)v14, (uint64_t)a2, a3 & 1, a4 & 1);

  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v15[2];
  *(void *)(v16 + 16) = v17;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = v16;
  v18[3] = v15;
  v18[4] = a5;
  v18[5] = a6;
  if (v17)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v19 = (void **)(v15 + 5);
    do
    {
      char v20 = *v19;
      id v21 = *(v19 - 1);
      id v22 = v20;
      sub_1000A6BBC(v22, (uint64_t)v21, (uint64_t)sub_1000AD850, (uint64_t)v18);

      v19 += 2;
      --v17;
    }
    while (v17);
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void *sub_1000AF618(unint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  LOBYTE(v5) = a5;
  LOBYTE(v6) = a4;
  unint64_t v7 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v8) {
      return _swiftEmptyArrayStorage;
    }
    sub_1000AF828(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      break;
    }
    uint64_t v9 = 0;
    unint64_t v19 = v7 & 0xC000000000000001;
    unsigned int v18 = v6 & 1;
    uint64_t v10 = v5 & 1;
    unint64_t v6 = v7;
    while (v8 != v9)
    {
      if (v19) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(v7 + 8 * v9 + 32);
      }
      id v5 = v11;
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (!Strong) {
        goto LABEL_18;
      }
      id v13 = [Strong provideContainerControllerAt:v5 from:a3 isUserInteraction:v18 isBrowsingTrash:v10];
      swift_unknownObjectRelease();
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1) {
        sub_1000AF828(v14 > 1, v15 + 1, 1);
      }
      ++v9;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      uint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
      v16[4] = v5;
      v16[5] = v13;
      unint64_t v7 = v6;
      if (v8 == v9) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_18:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AF828(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000AF858(a1, a2, a3, (void *)*v3, &qword_100708CE8, &qword_100708CF0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000AF858(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_1000CBE70(a5);
    id v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    id v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 16 * v11) {
      memmove(v13 + 4, a4 + 4, 16 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 16 * v11 || v16 >= v17 + 16 * v11)
  {
    sub_1000CBE70(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AFA78()
{
  return sub_1000AFA84(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1000AFA84(void (*a1)(void))
{
  a1();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)(result + 64) = 0;
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000AFAEC()
{
  return sub_1000AFAF8(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1000AFAF8(uint64_t a1, void (*a2)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t v4 = swift_bridgeObjectRetain();
    a2(v4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000AFB90(unint64_t a1)
{
  sub_1000AFB98(a1, *(void (**)(id))(v1 + 16));
}

void sub_1000AFB98(unint64_t a1, void (*a2)(id))
{
  unint64_t v4 = a1 >> 62;
  if (!(a1 >> 62))
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_14;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_17:

      goto LABEL_18;
    }
    id v6 = *(id *)(a1 + 32);
  }
  id v8 = v6;
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v7 != 1) {
    goto LABEL_17;
  }
  a2(v8);
}

uint64_t variable initialization expression of DOCButton.hoverEffectsAllowedIfInteractionDisabled()
{
  return 0;
}

uint64_t type metadata accessor for DOCItemCollectionContainerDataSource()
{
  return self;
}

uint64_t sub_1000AFD3C()
{
  return *(unsigned __int8 *)(v0 + 72);
}

void *sub_1000AFD44()
{
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = v1;
  return v1;
}

uint64_t sub_1000AFD6C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting + 8) = a2;
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000AFDB8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v17 = result;
    sub_10009E6C4(0, (unint64_t *)&qword_100705380);
    swift_bridgeObjectRetain();
    uint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a1;
    *(void *)(v13 + 24) = v1;
    aBlock[4] = sub_100067928;
    aBlock[5] = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000666D8;
    aBlock[3] = &unk_1006B3C30;
    int64_t v14 = _Block_copy(aBlock);
    id v15 = v1;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1000BAE4C((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000CBE70((uint64_t *)&unk_100705390);
    sub_10009449C((unint64_t *)&qword_100706780, (uint64_t *)&unk_100705390);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v17);
  }
  return result;
}

uint64_t sub_1000B0094(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_1000B00D4()
{
}

uint64_t sub_1000B00FC(uint64_t result)
{
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_automaticApplyRestorableSettingsAllowed) & 1) == 0
    && (result & 1) == 0)
  {
    return result;
  }
  uint64_t v2 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enqueuedNodesToReveal;
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enqueuedNodesToReveal);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9 >= 1)
    {
LABEL_5:
      unint64_t v4 = swift_bridgeObjectRetain();
      char v5 = sub_1001D0050(v4, 0, 0);
      swift_bridgeObjectRelease();
      if (v5)
      {
        *(void *)(v1 + v2) = _swiftEmptyArrayStorage;
        swift_bridgeObjectRelease();
      }
    }
  }
  else if (*(uint64_t *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
  {
    goto LABEL_5;
  }
  uint64_t result = sub_10000E1C0();
  uint64_t v6 = v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enqueuedNodeToSelectAndScroll;
  if (*(void *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enqueuedNodeToSelectAndScroll))
  {
    int v7 = *(unsigned char *)(v6 + 8) & 1;
    uint64_t v8 = (void *)swift_unknownObjectRetain();
    if (sub_1001D1E3C(v8, v7, 0))
    {
      *(void *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 8) = 0;
      swift_unknownObjectRelease();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1000B0240(int a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = self;
  if ([v7 protectedAppsEnabled])
  {
    static Logger.UI.getter();
    uint64_t v8 = v1;
    uint64_t v9 = Logger.logObject.getter();
    int v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, (os_log_type_t)v23))
    {
      os_log_t v20 = v9;
      uint64_t v21 = v4;
      int v22 = a1;
      uint64_t v10 = swift_slowAlloc();
      unsigned int v18 = (void *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v10 = 136316162;
      uint64_t v24 = sub_10009B0E4(0xD000000000000038, 0x80000001005F8140, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 1024;
      uint64_t v11 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected;
      LODWORD(v24) = v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 18) = 1024;
      if ([v7 protectedAppsEnabled]) {
        BOOL v12 = v8[v11] == 1
      }
           && (v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationHasAuthenticated] & 1) == 0;
      else {
        BOOL v12 = 0;
      }
      LODWORD(v24) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 24) = 2080;
      if (!*(void *)&v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection])
      {

        __break(1u);
        return;
      }
      uint64_t v24 = swift_unknownObjectRetain();
      sub_1000CBE70(&qword_100717520);
      uint64_t v13 = String.init<A>(describing:)();
      uint64_t v24 = sub_10009B0E4(v13, v14, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 34) = 2112;
      uint64_t v24 = (uint64_t)v8;
      id v15 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v18 = v8;

      os_log_t v16 = v20;
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v23, "[PROTECTED APPS] %s: locationIsProtected: %{BOOL}d shouldShowAppProtectionShieldUI: %{BOOL}d observedNode: %s self: %@", (uint8_t *)v10, 0x2Cu);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v3);
      LOBYTE(a1) = v22;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected] = a1 & 1;
    v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationHasAuthenticated] = 0;
    sub_1000B0690();
  }
}

void sub_1000B0690()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  int v7 = (char *)&v34 - v6;
  static Logger.UI.getter();
  uint64_t v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v38 = v2;
  uint64_t v39 = v1;
  uint64_t v37 = v5;
  if (v11)
  {
    uint64_t v12 = swift_slowAlloc();
    id v35 = (void *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v41 = v36;
    *(_DWORD *)uint64_t v12 = 136316162;
    uint64_t v40 = sub_10009B0E4(0xD000000000000032, 0x80000001005F81B0, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 1024;
    uint64_t v13 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected;
    LODWORD(v40) = v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 18) = 1024;
    BOOL v14 = [self protectedAppsEnabled]
       && v8[v13] == 1
       && (v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationHasAuthenticated] & 1) == 0;
    LODWORD(v40) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 24) = 2080;
    if (!*(void *)&v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection])
    {

      __break(1u);
      return;
    }
    uint64_t v40 = swift_unknownObjectRetain();
    sub_1000CBE70(&qword_100717520);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v40 = sub_10009B0E4(v16, v17, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 34) = 2112;
    uint64_t v40 = (uint64_t)v8;
    unsigned int v18 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v35 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[PROTECTED APPS] %s: locationIsProtected: %{BOOL}d shouldShowAppProtectionShieldUI: %{BOOL}d observedNode: %s self: %@", (uint8_t *)v12, 0x2Cu);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v1 = v39;
    id v15 = *(void (**)(char *, uint64_t))(v38 + 8);
    v15(v7, v39);
    uint64_t v5 = v37;
  }
  else
  {

    id v15 = *(void (**)(char *, uint64_t))(v2 + 8);
    v15(v7, v1);
  }
  uint64_t v19 = self;
  if ([v19 protectedAppsEnabled]
    && v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected] == 1
    && (v8[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationHasAuthenticated] & 1) == 0)
  {
    uint64_t v20 = 0xD00000000000001BLL;
    unint64_t v21 = 0x80000001005F81F0;
    int v22 = v8;
    char v23 = 1;
  }
  else
  {
    uint64_t v20 = 0xD00000000000001FLL;
    unint64_t v21 = 0x80000001005F8210;
    int v22 = v8;
    char v23 = 0;
  }
  sub_1000B0D2C(v22, v23, v20, v21);
  static Logger.UI.getter();
  uint64_t v24 = v8;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315650;
    uint64_t v40 = sub_10009B0E4(0xD000000000000032, 0x80000001005F81B0, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 12) = 1024;
    uint64_t v28 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected;
    LODWORD(v40) = v24[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 18) = 1024;
    BOOL v29 = [v19 protectedAppsEnabled]
       && v24[v28] == 1
       && (v24[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationHasAuthenticated] & 1) == 0;
    uint64_t v32 = v39;
    id v33 = v37;
    LODWORD(v40) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "[PROTECTED APPS] %s: locationIsProtected: %{BOOL}d shouldShowAppProtectionShieldUI: %{BOOL}d reloading contents of item collection", (uint8_t *)v27, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v30 = v33;
    uint64_t v31 = v32;
  }
  else
  {

    uint64_t v30 = v5;
    uint64_t v31 = v1;
  }
  v15(v30, v31);
  sub_1000B106C();
}

id sub_1000B0D2C(char *a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView;
  uint64_t v13 = *(void **)&a1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v13) {
    [v13 setHidden:a2 & 1];
  }
  static Logger.UI.getter();
  BOOL v14 = a1;
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v30 = v8;
    uint64_t v19 = v18;
    os_log_type_t v26 = (void *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v19 = 136315650;
    id v31 = (id)sub_10009B0E4(a3, a4, &v32);
    uint64_t v29 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2112;
    int v27 = v17;
    id v31 = v14;
    uint64_t v20 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v26 = v14;

    *(_WORD *)(v19 + 22) = 2080;
    id v31 = *(id *)&a1[v12];
    id v21 = v31;
    sub_1000CBE70(&qword_100717528);
    uint64_t v22 = String.init<A>(describing:)();
    id v31 = (id)sub_10009B0E4(v22, v23, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v27, "[PROTECTED APPS] %s: self: %@ collectionViewIfLoaded: %s", (uint8_t *)v19, 0x20u);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return [v14 docSetNeedsUpdateContentUnavailableConfiguration];
}

id sub_1000B106C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = self;
  id result = [v5 protectedAppsEnabled];
  if (result)
  {
    static Logger.UI.getter();
    int v7 = v0;
    uint64_t v8 = Logger.logObject.getter();
    int v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, (os_log_type_t)v9))
    {
      int v17 = v9;
      uint64_t v10 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v19[0] = v16;
      *(_DWORD *)uint64_t v10 = 136315650;
      uint64_t v18 = sub_10009B0E4(0xD00000000000002DLL, 0x80000001005DD790, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 1024;
      uint64_t v11 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected;
      LODWORD(v18) = v7[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationIsProtected];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 18) = 1024;
      if ([v5 protectedAppsEnabled])
      {
        int v12 = v7[v11];
        os_log_type_t v13 = v17;
        BOOL v14 = v12 == 1
           && (v7[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_locationHasAuthenticated] & 1) == 0;
      }
      else
      {
        BOOL v14 = 0;
        os_log_type_t v13 = v17;
      }
      LODWORD(v18) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v8, v13, "[PROTECTED APPS] %s: locationIsProtected: %{BOOL}d shouldShowAppProtectionShieldUI: %{BOOL}d reload contents of item collection", (uint8_t *)v10, 0x18u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    swift_beginAccess();
    uint64_t v15 = swift_bridgeObjectRetain();
    sub_10007A41C(v15, 0);
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000B1360()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
  uint64_t result = (uint64_t)[v1 isPickerUI];
  if (result)
  {
    id v3 = [v0 splitViewController];
    if (v3
      && (uint64_t v4 = v3,
          id v5 = objc_msgSend(v3, "doc_splitViewState"),
          v4,
          LOBYTE(v4) = [v5 isSidebarShown],
          v5,
          (v4 & 1) != 0))
    {
      return 0;
    }
    else if ([v1 forPickingFolders])
    {
      return 1;
    }
    else
    {
      return (uint64_t)[v1 forSavingDocuments];
    }
  }
  return result;
}

void *sub_1000B1434()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

id sub_1000B145C()
{
  [v0 loadViewIfNeeded];
  uint64_t v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView;
  id result = *(id *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (!result)
  {
    __break(1u);
    goto LABEL_18;
  }
  [result _effectiveContentInset];
  double v4 = v3;
  id result = [v0 loadViewIfNeeded];
  id v5 = *(void **)&v0[v1];
  if (!v5)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v6 = v5;
  [v6 _effectiveContentInset];
  double v8 = -v7;
  id v9 = [v6 collectionViewLayout];
  [v9 collectionViewContentSize];
  double v11 = v10;

  [v6 bounds];
  double v12 = v11 - CGRectGetHeight(v20);
  [v6 _effectiveContentInset];
  double v14 = v13;

  if (v12 + v14 < v8) {
    double v15 = v8;
  }
  else {
    double v15 = v12 + v14;
  }
  [v0 loadViewIfNeeded];
  id result = *(id *)&v0[v1];
  if (!result) {
    goto LABEL_19;
  }
  [result contentOffset];
  double v17 = v16;
  [v0 loadViewIfNeeded];
  id result = *(id *)&v0[v1];
  if (v15 < v17)
  {
    if (result) {
      goto LABEL_13;
    }
    __break(1u);
  }
  if (!result) {
    goto LABEL_20;
  }
  double v15 = -v4;
  id result = [result contentOffset];
  if (v18 >= -v4) {
    return result;
  }
  [v0 loadViewIfNeeded];
  id result = *(id *)&v0[v1];
  if (!result)
  {
LABEL_21:
    __break(1u);
    return result;
  }
LABEL_13:

  return [result setContentOffset:0.0 v15];
}

uint64_t sub_1000B1618(__int16 a1)
{
  if (a1 == 2) {
    return 0x6F6C65526C6C7566;
  }
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  if (a1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x666E6F636572202CLL;
  v6._object = (void *)0xEF203A6572756769;
  String.append(_:)(v6);
  if ((a1 & 0x100) != 0) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if ((a1 & 0x100) != 0) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  return 0x696E612866666964;
}

void sub_1000B1750()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (!v1) {
    return;
  }
  id v2 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
  id v3 = v1;
  LODWORD(v2) = [v2 isPickerUI];
  id v16 = [v0 traitCollection];
  if (v2)
  {
    uint64_t v4 = UITraitCollection.modifyingTraits(_:)();

    id v16 = (id)v4;
  }
  id v5 = [v3 preparedCells];
  if (!v5) {
    goto LABEL_22;
  }
  Swift::String v6 = v5;
  sub_10009E6C4(0, (unint64_t *)&unk_100705CD0);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_7:
      if (v8 >= 1)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if ((v7 & 0xC000000000000001) != 0) {
            id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v10 = *(id *)(v7 + 8 * i + 32);
          }
          double v11 = v10;
          type metadata accessor for DOCItemCollectionCell();
          double v12 = (void *)swift_dynamicCastClass();
          if (v12)
          {
            uint64_t v13 = (*(uint64_t (**)(void))((swift_isaMask & *v12) + 0x1F8))();
            if (v13)
            {
              double v14 = (void *)v13;
              id v15 = v16;
              sub_100094F20(v16);
            }
          }
        }
        goto LABEL_18;
      }
      __break(1u);
LABEL_22:
      __break(1u);
      return;
    }
  }
LABEL_18:

  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for DOCItemCollectionCell()
{
  return self;
}

void *sub_1000B19D0()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_cellContent);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t sub_1000B1A24(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v10 = sub_1000CBE70((uint64_t *)&unk_10070ADC0);
  __chkstk_darwin(v10 - 8);
  double v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for DOCItemCollectionConfiguration();
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  id v16 = &v42[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  double v18 = &v42[-v17];
  id v19 = [a2 browserViewContext];
  id v44 = a1;
  if (!v19)
  {
LABEL_6:
    int v20 = 2;
    goto LABEL_7;
  }
  if (v19 != (id)1)
  {
    if (v19 == (id)2)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    id v21 = [a2 browserViewContext];
    type metadata accessor for DOCBrowserViewContext(0);
    v48[3] = v22;
    v48[0] = v21;
    doc_warnUnrecognizedEnumValueEncountered(_:)();
    sub_10009B1B8((uint64_t)v48);
    goto LABEL_6;
  }
  int v20 = 3;
LABEL_7:
  int v43 = v20;
  id v45 = a3;
  id v46 = a4;
  id v47 = a5;
  id v23 = [self searchLocation];
  if (qword_1007050A8 != -1) {
    swift_once();
  }
  uint64_t v24 = (void *)static DOCFileProviderSource.searchSource;
  uint64_t v25 = type metadata accessor for DOCItemSortMode();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 1, 1, v25);
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;
  id v29 = v24;
  id v30 = a2;
  id v31 = v23;
  id v32 = v44;
  id v33 = v44;
  DOCItemCollectionConfiguration.init(source:configuration:context:initialLocation:defaultSorting:searchStartLocation:viewAccessibilityIdentifier:isBrowsingTrash:)(v29, v30, v43, v23, (uint64_t)v12, v32, v26, v28, (uint64_t)v18, 0);
  sub_1000B230C((uint64_t)v18, (uint64_t)v16);
  id v34 = objc_allocWithZone((Class)type metadata accessor for DOCItemCollectionViewController(0));
  id v35 = v45;
  id v36 = v47;
  id v37 = v47;
  id v38 = v46;
  id v39 = v46;
  uint64_t v40 = sub_1000770FC((uint64_t)v16, v35, v38, v36);

  sub_1000A4D20((uint64_t)v18);
  return v40;
}

uint64_t sub_1000B1D54()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DOCItemCollectionConfiguration();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v5 = &v70[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = &v70[-v7];
  __chkstk_darwin(v6);
  uint64_t v10 = &v70[-v9];
  uint64_t v11 = sub_1000CBE70((uint64_t *)&unk_10070ADC0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = &v70[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = &v70[-v16];
  __chkstk_darwin(v15);
  id v19 = *(void **)(v1 + 112);
  if (v19)
  {
    int v20 = *(char **)(v1 + 112);
LABEL_24:
    id v67 = v19;
    return (uint64_t)v20;
  }
  uint64_t v76 = &v70[-v18];
  char v73 = v5;
  unint64_t v74 = v8;
  id v72 = *(id *)(v1 + 40);
  id v21 = [v72 sourceIdentifier];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0) {
      goto LABEL_11;
    }
  }
  uint64_t v28 = *(void **)(v1 + 16);
  if (![v28 browserViewContext])
  {
    id v31 = v28;
    unsigned int v71 = [v28 forPickingDocuments];
    goto LABEL_17;
  }
LABEL_11:
  id v29 = *(void **)(v1 + 16);
  id v30 = [v29 browserViewContext];
  if (!v30)
  {
    id v31 = v29;
    int v32 = 2;
LABEL_15:
    unsigned int v71 = v32;
LABEL_17:
    id v34 = *(char **)(v1 + 48);
    id v35 = [v34 identifier];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v75 = v10;
    if (v36 == v39 && v38 == v40)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0)
      {
        uint64_t v46 = type metadata accessor for DOCItemSortMode();
        id v45 = v76;
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v76, 1, 1, v46);
        goto LABEL_23;
      }
    }
    id v42 = &v34[OBJC_IVAR____TtC5Files21DOCFileProviderSource_defaultSorting];
    swift_beginAccess();
    uint64_t v43 = type metadata accessor for DOCItemSortMode();
    uint64_t v44 = *(void *)(v43 - 8);
    id v45 = v76;
    (*(void (**)(unsigned char *, char *, uint64_t))(v44 + 16))(v76, v42, v43);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
LABEL_23:
    char v47 = *(unsigned char *)(v1 + 96);
    sub_1000B3294((uint64_t)v45, (uint64_t)v17);
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v50 = v49;
    sub_1000B3294((uint64_t)v17, (uint64_t)v14);
    unint64_t v51 = v34;
    id v52 = v31;
    id v53 = v72;
    id v54 = v72;
    uint64_t v55 = (uint64_t)v75;
    DOCItemCollectionConfiguration.init(source:configuration:context:initialLocation:defaultSorting:searchStartLocation:viewAccessibilityIdentifier:isBrowsingTrash:)(v51, v52, v71, v53, (uint64_t)v14, 0, v48, v50, (uint64_t)v75, v47);
    sub_1000B3234((uint64_t)v17);
    uint64_t v56 = (uint64_t)v74;
    sub_1000B230C(v55, (uint64_t)v74);
    uint64_t v58 = *(void **)(v1 + 24);
    id v57 = *(void **)(v1 + 32);
    unint64_t v59 = *(void **)(v1 + 56);
    uint64_t v60 = (uint64_t)v73;
    sub_1000B230C(v56, (uint64_t)v73);
    objc_allocWithZone((Class)type metadata accessor for DOCItemCollectionViewController(0));
    id v61 = v58;
    id v62 = v57;
    id v63 = v59;
    long long v64 = (void *)sub_1000770FC(v60, v61, v57, v59);
    sub_1000A4D20(v56);
    uint64_t v65 = *(void *)(v1 + 104);
    swift_unknownObjectRetain();
    int v20 = v64;
    sub_1000B63C0(v65);
    *(void *)&v20[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemHierarchyEventListener + 8] = *(void *)(v1 + 88);
    swift_unknownObjectWeakAssign();
    sub_1000A4D20(v55);
    sub_1000B3234((uint64_t)v76);
    long long v66 = *(void **)(v1 + 112);
    *(void *)(v1 + 112) = v20;

    id v19 = 0;
    goto LABEL_24;
  }
  id v33 = v30;
  if (v30 == (id)1)
  {
    id v31 = v29;
    int v32 = 3;
    goto LABEL_15;
  }
  if (v30 == (id)2)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  type metadata accessor for DOCBrowserViewContext(0);
  uint64_t v78 = v69;
  id v77 = v33;
  uint64_t result = doc_fatalErrorUnrecognizedEnumValueEncountered(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B230C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DOCItemCollectionConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for DOCItemCollectionConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v8 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = a3[8];
  __dst = (void *)(a1 + v9);
  uint64_t v10 = (const void *)(a2 + v9);
  uint64_t v11 = type metadata accessor for DOCItemSortMode();
  uint64_t v12 = *(void *)(v11 - 8);
  id v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  id v13 = v6;
  id v14 = v7;
  id v15 = v8;
  if (v29(v10, 1, v11))
  {
    uint64_t v16 = sub_1000CBE70((uint64_t *)&unk_10070ADC0);
    memcpy(__dst, v10, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v17 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v18 = (void *)(a1 + v17);
  id v19 = (void *)(a2 + v17);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[11];
  uint64_t v22 = a3[12];
  uint64_t v23 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v23;
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  uint64_t v24 = a3[13];
  uint64_t v25 = *(void **)(a2 + v24);
  *(void *)(a1 + v24) = v25;
  swift_bridgeObjectRetain();
  id v26 = v23;
  swift_unknownObjectRetain();
  id v27 = v25;
  return a1;
}

uint64_t DOCItemCollectionConfiguration.init(source:configuration:context:initialLocation:defaultSorting:searchStartLocation:viewAccessibilityIdentifier:isBrowsingTrash:)@<X0>(void *a1@<X0>, void *a2@<X1>, char a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, char a10)
{
  v140 = a8;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v132 = *(void *)(v18 - 8);
  uint64_t v133 = v18;
  __chkstk_darwin(v18);
  v134 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (int *)type metadata accessor for DOCItemCollectionConfiguration();
  uint64_t v21 = v20[11];
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + v21) = a6;
  uint64_t v22 = a9 + v20[8];
  uint64_t v136 = a5;
  sub_1000B3294(a5, v22);
  uint64_t v23 = (void *)(a9 + v20[10]);
  id v24 = v140;
  void *v23 = a7;
  v23[1] = v24;
  uint64_t v137 = v20;
  uint64_t v25 = v20[9];
  uint64_t v135 = a9;
  *(unsigned char *)(a9 + v25) = a10;
  id v26 = a6;
  id v27 = a6;
  uint64_t v28 = a1;
  id v139 = a2;
  id v29 = a4;
  unsigned __int8 v138 = (uint8_t *)[v29 node];
  v140 = v28;
  id v30 = [v28 identifier];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;
  if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34)
  {

    swift_bridgeObjectRelease_n();
LABEL_5:
    uint64_t v36 = v29;
    id v37 = [self defaultManager];
    id v38 = [v37 newTrashCollection];

    id v39 = objc_allocWithZone((Class)type metadata accessor for DOCNodeCollection());
    sub_1000B3300(v38, 0);
    uint64_t v41 = v40;
    swift_unknownObjectRelease();

LABEL_6:
LABEL_7:
    uint64_t result = sub_1000B3234(v136);
LABEL_8:
    uint64_t v43 = 0;
LABEL_9:
    uint64_t v44 = v137;
    uint64_t v45 = v135;
    *(void *)(v135 + v137[13]) = v41;
    *(void *)(v45 + v44[12]) = v43;
    return result;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v35) {
    goto LABEL_5;
  }
  uint64_t v46 = v140;
  id v47 = [v140 identifier];
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v49;
  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v50 == v51)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
  {
    long long v64 = &v46[OBJC_IVAR____TtC5Files21DOCFileProviderSource_type];
    id v65 = v139;
    if (v46[OBJC_IVAR____TtC5Files21DOCFileProviderSource_type + 8] != 1)
    {
      uint64_t v43 = v138;
      if (v138)
      {

        uint64_t result = sub_1000B3234(v136);
        uint64_t v41 = 0;
        goto LABEL_9;
      }
      uint64_t v103 = *(void **)&v46[OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain];
      if (!v103)
      {

        uint64_t result = sub_1000B3234(v136);
        uint64_t v41 = 0;
        goto LABEL_8;
      }
      uint64_t v104 = v29;
      id v105 = v103;
      if (FPProviderDomain.shouldUseDSEnumeration.getter())
      {
        type metadata accessor for DOCRootNode();
        uint64_t v106 = static DOCRootNode.rootNode(for:)();
        if (!v106)
        {
          id v120 = v134;
          static Logger.UI.getter();
          id v121 = v105;
          uint64_t v122 = Logger.logObject.getter();
          os_log_type_t v123 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v122, v123))
          {
            uint64_t v124 = (uint8_t *)swift_slowAlloc();
            int v125 = (void *)swift_slowAlloc();
            unsigned __int8 v138 = v124;
            *(_DWORD *)uint64_t v124 = 138412290;
            uint64_t v131 = v124 + 4;
            id v142 = v121;
            id v126 = v121;
            id v65 = v139;
            id v120 = v134;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *int v125 = v103;

            _os_log_impl((void *)&_mh_execute_header, v122, v123, "Getting nil rootNode for %@", v138, 0xCu);
            sub_1000CBE70(&qword_100707CC0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          uint64_t v130 = v132;
          uint64_t v129 = v133;

          sub_1000B3234(v136);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v120, v129);
          uint64_t v41 = 0;
          goto LABEL_8;
        }
        uint64_t v107 = (void *)v106;
        id v108 = v140;
        v109 = v140;
        id v110 = v107;
        char v141 = 1;
        uint64_t v41 = sub_10040AF1C(v110, 0, v108, 0x100000000uLL);
      }
      else
      {
        id v111 = [self defaultManager];
        id v112 = [v111 rootCollectionForProviderDomain:v105];

        id v113 = objc_allocWithZone((Class)type metadata accessor for DOCNodeCollection());
        id v114 = v112;
        sub_1000B3300(v114, 0);
        uint64_t v41 = v115;
      }
      goto LABEL_6;
    }
    v134 = v29;
    id v66 = [objc_allocWithZone((Class)DOCEnumerationProperties) init];
    NSString v67 = [v65 hostIdentifier];
    if (!v67)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v67 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    unint64_t v68 = v27;
    [v66 setHostIdentifier:v67];

    id v69 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(v65, "maximumNumberOfItemsToFetch"));
    if ((v64[8] & 1) == 0) {
      goto LABEL_66;
    }
    unint64_t v70 = v69;
    id v71 = *(id *)v64;
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v74 = v73;
    if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v74 == v75)
    {
      id v76 = v71;
    }
    else
    {
      char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v85 = v71;
      id v86 = v71;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if (v84) {
        goto LABEL_37;
      }
      uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v89 = v88;
      if (v87 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v89 != v90)
      {
        char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
        id v92 = v71;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if ((v91 & 1) == 0)
        {
          uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v118 = v117;
          if (v116 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v118 == v119)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            if ((v127 & 1) == 0)
            {
              [v66 setMaximumNumberOfItems:v70];
              id v93 = v139;
              id v94 = [v139 documentContentTypes];
              goto LABEL_38;
            }
          }
          id v93 = v139;
          Class isa = (Class)[v139 recentDocumentsContentTypes];
          if (!isa)
          {
            type metadata accessor for UTType();
            static Array._unconditionallyBridgeFromObjectiveC(_:)();
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          [v66 setAllowedContentTypes:isa];

          if ([v93 maximumNumberOfItemsToFetch] != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            [v66 setMaximumNumberOfItems:v70];
LABEL_42:
            id v96 = [self defaultManager];
            if (v64[8])
            {
              uint64_t v97 = v96;
              id v98 = *(id *)v64;
              id v99 = _sSo13FPItemManagerC5FilesE15queryCollection13forIdentifier10properties29supportRemovableFileProvidersSo07FPQueryE0CSo026DOCSpotlightEnumeratedItemG0a_So24DOCEnumerationPropertiesCSbtF_0(*(id *)v64, v66, (int)[v93 supportsRemovableFileProviders]);

              id v100 = objc_allocWithZone((Class)type metadata accessor for DOCNodeCollection());
              id v101 = v99;
              sub_1000B3300(v101, 0);
              uint64_t v41 = v102;
              swift_unknownObjectRelease();

              goto LABEL_7;
            }
            goto LABEL_66;
          }
          Class v95 = (Class)[objc_allocWithZone((Class)NSNumber) initWithInteger:DOCRecentsMaximumNumberOfItems];
          [v66 setMaximumNumberOfItems:v95];
LABEL_41:

          goto LABEL_42;
        }
LABEL_37:

        [v66 setMaximumNumberOfItems:v70];
        id v93 = v139;
        id v94 = [v139 recentDocumentsContentTypes];
LABEL_38:
        Class v95 = (Class)v94;
        if (!v95)
        {
          type metadata accessor for UTType();
          static Array._unconditionallyBridgeFromObjectiveC(_:)();
          Class v95 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        [v66 setAllowedContentTypes:v95];
        goto LABEL_41;
      }
    }
    id v77 = v71;
    swift_bridgeObjectRelease_n();

    goto LABEL_37;
  }
LABEL_14:
  if (v26)
  {
    id v53 = v29;
    id v54 = v27;
    id v55 = [v27 sourceIdentifier];
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v58 = v57;
    if (v56 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v58 == v59)
    {

      swift_bridgeObjectRelease_n();
      id v60 = v139;
LABEL_19:
      id v62 = [self defaultManager];
      id v63 = [v62 newSearchTrashCollection];
LABEL_30:

      id v82 = objc_allocWithZone((Class)type metadata accessor for DOCNodeCollection());
      sub_1000B3300(v63, 0);
      uint64_t v41 = v83;
      swift_unknownObjectRelease();

      goto LABEL_7;
    }
    char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v60 = v139;
    if (v61) {
      goto LABEL_19;
    }
    id v78 = [objc_allocWithZone((Class)DOCEnumerationProperties) init];
    id v79 = [self defaultManager];
    id v80 = (id *)&v46[OBJC_IVAR____TtC5Files21DOCFileProviderSource_type];
    if (v46[OBJC_IVAR____TtC5Files21DOCFileProviderSource_type + 8])
    {
      id v62 = v79;
      id v81 = *v80;
      id v63 = _sSo13FPItemManagerC5FilesE15queryCollection13forIdentifier10properties29supportRemovableFileProvidersSo07FPQueryE0CSo026DOCSpotlightEnumeratedItemG0a_So24DOCEnumerationPropertiesCSbtF_0(*v80, v78, (int)[v60 supportsRemovableFileProviders]);

      goto LABEL_30;
    }
  }
  else
  {
    swift_unknownObjectRelease();
    __break(1u);
  }
LABEL_66:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B3234(uint64_t a1)
{
  uint64_t v2 = sub_1000CBE70((uint64_t *)&unk_10070ADC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B3294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_10070ADC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000B3300(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &v2[OBJC_IVAR____TtC5Files17DOCNodeCollection_logPrefix];
  *uint64_t v9 = 0;
  v9[1] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Files17DOCNodeCollection_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v10 = &v2[OBJC_IVAR____TtC5Files17DOCNodeCollection_isGathering];
  v2[OBJC_IVAR____TtC5Files17DOCNodeCollection_isGathering] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Files17DOCNodeCollection_isGatheringObservation] = 0;
  *(_OWORD *)uint64_t v9 = xmmword_1005A2500;
  uint64_t v11 = v2;
  swift_bridgeObjectRelease();
  uint64_t v12 = &v11[OBJC_IVAR____TtC5Files17DOCNodeCollection_type];
  *(void *)uint64_t v12 = a1;
  *((void *)v12 + 1) = a2;
  v12[16] = 0;
  swift_unknownObjectRetain();
  id v42 = a1;
  id v13 = a1;
  unsigned __int8 v14 = [v13 isGathering];
  swift_beginAccess();
  *uint64_t v10 = v14;

  id v15 = (objc_class *)type metadata accessor for DOCNodeCollection();
  v45.receiver = v11;
  v45.super_class = v15;
  id v16 = [super init];
  static Logger.Enumeration.getter();
  id v17 = v16;
  id v18 = v13;
  swift_unknownObjectRetain_n();
  id v19 = v17;
  id v20 = v18;
  uint64_t v21 = (char *)v19;
  uint64_t v22 = Logger.logObject.getter();
  int v23 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v22, (os_log_type_t)v23))
  {

    swift_unknownObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_8:
    char v35 = v21;
    [v20 setDelegate:v35];

    swift_unknownObjectRelease();
    return;
  }
  int v38 = v23;
  id v37 = v8;
  uint64_t v40 = v6;
  uint64_t v41 = v5;
  uint64_t v24 = swift_slowAlloc();
  uint64_t v25 = (void *)swift_slowAlloc();
  uint64_t v39 = swift_slowAlloc();
  uint64_t v44 = v39;
  *(_DWORD *)uint64_t v24 = 136447234;
  unint64_t v26 = *(void *)&v21[OBJC_IVAR____TtC5Files17DOCNodeCollection_logPrefix + 8];
  if (v26)
  {
    uint64_t v27 = *(void *)&v21[OBJC_IVAR____TtC5Files17DOCNodeCollection_logPrefix];
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_10009B0E4(v27, v26, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2082;
    uint64_t v43 = sub_10009B0E4(0xD000000000000022, 0x80000001005D9230, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 22) = 2112;
    uint64_t v43 = (uint64_t)v21;
    uint64_t v28 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v36 = v25;
    *uint64_t v25 = v21;

    *(_WORD *)(v24 + 32) = 2080;
    if (a2)
    {
      id v29 = [a2 displayName];
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v32 = v31;
    }
    else
    {
      unint64_t v32 = 0xE300000000000000;
      uint64_t v30 = 4271950;
    }
    uint64_t v33 = v37;
    uint64_t v43 = sub_10009B0E4(v30, v32, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 42) = 2112;
    uint64_t v43 = (uint64_t)v20;
    id v34 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v36[1] = v42;

    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v38, "%{public}s %{public}s Init DOCNodeCollection (%@ with FPItem: %s and FPItemCollection %@", (uint8_t *)v24, 0x34u);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v41);
    goto LABEL_8;
  }

  swift_unknownObjectRelease();
  __break(1u);
}

uint64_t type metadata accessor for DOCNodeCollection()
{
  return self;
}

id _sSo13FPItemManagerC5FilesE15queryCollection13forIdentifier10properties29supportRemovableFileProvidersSo07FPQueryE0CSo026DOCSpotlightEnumeratedItemG0a_So24DOCEnumerationPropertiesCSbtF_0(void *a1, void *a2, int a3)
{
  int v111 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v109 = *(void *)(v5 - 8);
  uint64_t v110 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UTType();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (char *)v104 - v14;
  __chkstk_darwin(v13);
  id v17 = (char *)v104 - v16;
  id v18 = [self defaultManager];
  id v112 = a2;
  id v113 = v18;
  id v19 = [a2 allowedContentTypes];
  id v108 = v7;
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
  }
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
LABEL_8:
    id v27 = [v113 newRecentsCollection];
LABEL_9:
    id v28 = v27;
LABEL_10:
    id v29 = v112;
    goto LABEL_11;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26) {
    goto LABEL_8;
  }
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v54 = v53;
  if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v54 == v55)
  {
    swift_bridgeObjectRelease_n();
LABEL_44:
    id v28 = [v113 newSharedItemsCollection];
    static UTType.folder.getter();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = (void *)sub_1000B6388(0, v21[2] + 1, 1, (unint64_t)v21);
    }
    id v29 = v112;
    unint64_t v73 = v21[2];
    unint64_t v72 = v21[3];
    if (v73 >= v72 >> 1) {
      uint64_t v21 = (void *)sub_1000B6388(v72 > 1, v73 + 1, 1, (unint64_t)v21);
    }
    v21[2] = v73 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v21+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v73, v17, v8);
    goto LABEL_11;
  }
  char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v71) {
    goto LABEL_44;
  }
  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v76 = v75;
  if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v76 == v77)
  {
    swift_bridgeObjectRelease_n();
LABEL_53:
    id v27 = [v113 newFavoritesCollection];
    goto LABEL_9;
  }
  char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v78) {
    goto LABEL_53;
  }
  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v81 = v80;
  if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v81 == v82)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_81;
  }
  char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v83) {
    goto LABEL_81;
  }
  uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v86 = v85;
  if (v84 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v86 != v87)
  {
    char v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v88) {
      goto LABEL_61;
    }
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v93 = v92;
    if (v91 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v93 == v94)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v95 & 1) == 0)
      {
        while (1)
        {
          v115[0] = 0;
          v115[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(49);
          v102._object = (void *)0x80000001005FF800;
          v102._countAndFlagsBits = 0xD00000000000002ELL;
          String.append(_:)(v102);
          uint64_t v114 = (uint64_t)a1;
          type metadata accessor for DOCSpotlightEnumeratedItemIdentifier(0);
          _print_unlocked<A, B>(_:_:)();
          v103._countAndFlagsBits = 39;
          v103._object = (void *)0xE100000000000000;
          String.append(_:)(v103);
LABEL_81:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
    id v96 = [v112 tagIdentifiers];
    if (v96)
    {
      uint64_t v97 = v96;
      uint64_t v98 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v98 + 16) == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        NSString v99 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v28 = [v113 newCollectionForTag:v99];

LABEL_75:
        static UTType.folder.getter();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = (void *)sub_1000B6388(0, v21[2] + 1, 1, (unint64_t)v21);
        }
        unint64_t v101 = v21[2];
        unint64_t v100 = v21[3];
        if (v101 >= v100 >> 1) {
          uint64_t v21 = (void *)sub_1000B6388(v100 > 1, v101 + 1, 1, (unint64_t)v21);
        }
        v21[2] = v101 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v21+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v101, v12, v8);
        goto LABEL_10;
      }
      swift_bridgeObjectRelease();
    }
    id v28 = [v113 newTagCollection];
    goto LABEL_75;
  }
  swift_bridgeObjectRelease_n();
LABEL_61:
  id v28 = [v113 newSearchCollection];
  static UTType.folder.getter();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v21 = (void *)sub_1000B6388(0, v21[2] + 1, 1, (unint64_t)v21);
  }
  id v29 = v112;
  unint64_t v90 = v21[2];
  unint64_t v89 = v21[3];
  if (v90 >= v89 >> 1) {
    uint64_t v21 = (void *)sub_1000B6388(v89 > 1, v90 + 1, 1, (unint64_t)v21);
  }
  v21[2] = v90 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v21+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v90, v15, v8);
LABEL_11:
  swift_bridgeObjectRetain();
  static UTType.doc_identifiers(forContentTypes:)();
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 setAllowedFileTypes:isa];

  id v31 = [v29 excludedContentTypes];
  if (v31)
  {
    unint64_t v32 = v31;
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  static UTType.doc_identifiers(forContentTypes:)();
  swift_bridgeObjectRelease();
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 setExcludedFileTypes:v33];

  id v34 = [v29 hostIdentifier];
  if (v34)
  {
    char v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v38 = 0;
  }
  uint64_t v39 = sub_1000B5830(v36, v38);
  swift_bridgeObjectRelease();
  if (v39)
  {
    Class v40 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v28 setAllowedProviderIdentifiers:v40];
  }
  if ([self protectedAppsEnabled])
  {
    id v41 = [self sharedManager];
    id v42 = v28;
    uint64_t v43 = sub_1000B465C();

    if (v43)
    {
      uint64_t v44 = v108;
      static Logger.UI.getter();
      swift_bridgeObjectRetain_n();
      objc_super v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      int v47 = v46;
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v48 = swift_slowAlloc();
        uint64_t v106 = swift_slowAlloc();
        v115[0] = v106;
        *(_DWORD *)uint64_t v48 = 136315394;
        v104[1] = v21;
        int v105 = v47;
        uint64_t v114 = sub_10009B0E4(0xD000000000000048, 0x80000001005FF830, v115);
        uint64_t v107 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v48 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v49 = Array.description.getter();
        unint64_t v51 = v50;
        swift_bridgeObjectRelease();
        uint64_t v114 = sub_10009B0E4(v49, v51, v115);
        a1 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v105, "%s [PROTECTED APPS] setting excluded parent OIDs to %s", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v29 = v112;
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v109 + 8))(v44, v110);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        (*(void (**)(char *, uint64_t))(v109 + 8))(v44, v110);
        swift_bridgeObjectRelease();
      }
      Class v56 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v42 setExcludedParentOIDs:v56];
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_1000B5508();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;
  if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v59 == v60)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v61 & 1) == 0)
    {
      id v62 = [v29 maximumNumberOfItems];
      [v28 setDesiredNumberOfItems:v62];
    }
  }
  if ((v111 & 1) == 0) {
    goto LABEL_39;
  }
  id v63 = self;
  id v64 = [v63 defaultPermission];
  unsigned int v65 = [v64 isUSBAccessAllowed];

  if (!v65) {
    goto LABEL_39;
  }
  id v66 = [v63 defaultPermission];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v68 = [v66 canHostAppPerformAction:2 bundleIdentifier:v67];

  if (v68) {
    id v69 = &selRef_enableMountPointQueries;
  }
  else {
LABEL_39:
  }
    id v69 = &selRef_disableMountPointQueries;
  [self *v69];
  if (qword_1007052E0 != -1) {
    swift_once();
  }
  sub_1000B6204((uint64_t)v28, a1);

  return v28;
}

uint64_t sub_1000B465C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v22 - v5;
  self;
  if (swift_dynamicCastObjCClass())
  {
    static Logger.UI.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      uint64_t v22 = sub_10009B0E4(0xD000000000000023, 0x80000001005FF8F0, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v22 = sub_10009B0E4(0xD000000000000023, 0x80000001005FF8F0, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s [PROTECTED APPS] %s getting OIDs for a user search collection", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    id v10 = [self sharedManager];
    uint64_t v11 = 0xD000000000000020;
    unint64_t v12 = 0x80000001005FF4B0;
    uint64_t v13 = &selRef_applicationsWithContentHiddenFromSearch;
    uint64_t v14 = "%s [PROTECTED APPS] getting OIDs from applicationsWithContentHiddenFromSearch %s";
    id v15 = &static os_log_type_t.error.getter;
  }
  else
  {
    static Logger.UI.getter();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v22 = sub_10009B0E4(0xD000000000000023, 0x80000001005FF8F0, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v22 = sub_10009B0E4(0xD000000000000023, 0x80000001005FF8F0, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s [PROTECTED APPS] %s getting OIDs for a named search location", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    id v10 = [self sharedManager];
    uint64_t v11 = 0xD00000000000001DLL;
    unint64_t v12 = 0x80000001005FF490;
    uint64_t v13 = &selRef_protectedApplications;
    uint64_t v14 = "%s [PROTECTED APPS] getting OIDs from protectedApplications %s";
    id v15 = &static os_log_type_t.debug.getter;
  }
  sub_1000B4ADC((SEL *)v13, v11, v12, v14, (uint64_t (*)(void))v15);
  uint64_t v20 = v19;

  return v20;
}

void sub_1000B4ADC(SEL *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t (*a5)(void))
{
  uint64_t v77 = a5;
  unint64_t v89 = a4;
  unint64_t v79 = a3;
  uint64_t v78 = a2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v81 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v75 - v10;
  id v90 = self;
  id v12 = [v90 sharedManager];
  id v13 = [v12 *a1];

  uint64_t v88 = sub_10009E6C4(0, (unint64_t *)&unk_10071B890);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v91[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v86 = v9;
    if (v15) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v30 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v86 = v9;
  if (!v15) {
    goto LABEL_19;
  }
LABEL_3:
  if (v15 < 1)
  {
    __break(1u);
LABEL_65:
    __break(1u);
    return;
  }
  uint64_t v87 = v11;
  for (uint64_t i = 0; i != v15; ++i)
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v17 = *(id *)(v14 + 8 * i + 32);
    }
    uint64_t v18 = v17;
    id v19 = [v17 appContainerBundleID];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    id v23 = [v90 sharedManager];
    id v24 = [v23 hostIdentifier];

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    if (v20 == v25 && v22 == v27)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v29)
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = v91[0];
  uint64_t v9 = v86;
  uint64_t v11 = v87;
LABEL_20:
  static Logger.UI.getter();
  swift_retain_n();
  id v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    v91[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315394;
    uint64_t v92 = sub_10009B0E4(v78, v79, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 12) = 2080;
    swift_retain();
    uint64_t v34 = Array.description.getter();
    unint64_t v36 = v35;
    swift_release();
    uint64_t v92 = sub_10009B0E4(v34, v36, v91);
    uint64_t v9 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, v89, (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v76 = *(void (**)(char *, uint64_t))(v80 + 8);
  v76(v11, v81);
  id v96 = _swiftEmptyArrayStorage;
  uint64_t v83 = v30;
  if (v30 < 0 || (v30 & 0x4000000000000000) != 0) {
    goto LABEL_59;
  }
  uint64_t v37 = *(void *)(v30 + 16);
  swift_retain();
  for (; v37; uint64_t v37 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v38 = 0;
    uint64_t v84 = v37;
    unint64_t v85 = v83 & 0xC000000000000001;
    uint64_t v82 = v83 + 32;
    while (v85)
    {
      Class v40 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v41 = __OFADD__(v38, 1);
      uint64_t v42 = v38 + 1;
      if (v41) {
        goto LABEL_57;
      }
LABEL_34:
      uint64_t v87 = v40;
      uint64_t v88 = v42;
      id v43 = [v40 oids];
      sub_10009E6C4(0, &qword_10070A280);
      sub_10035C084(&qword_10071B8A0, &qword_10070A280);
      uint64_t v44 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      id v90 = (id)(v44 & 0xC000000000000001);
      if ((v44 & 0xC000000000000001) != 0)
      {
        uint64_t v9 = __CocoaSet.count.getter();
        if (!v9) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v9 = *(void *)(v44 + 16);
        if (!v9)
        {
LABEL_39:

          swift_bridgeObjectRelease();
          uint64_t v39 = _swiftEmptyArrayStorage;
          goto LABEL_28;
        }
      }
      char v95 = _swiftEmptyArrayStorage;
      sub_100059E2C(0, v9 & ~(v9 >> 63), 0);
      if (v90)
      {
        uint64_t v45 = __CocoaSet.startIndex.getter();
        char v47 = 1;
      }
      else
      {
        uint64_t v45 = sub_10029D470(v44);
        char v47 = v48 & 1;
      }
      uint64_t v92 = v45;
      uint64_t v93 = v46;
      char v94 = v47;
      if (v9 < 0) {
        goto LABEL_58;
      }
      uint64_t v49 = (const char *)(v44 & 0xFFFFFFFFFFFFFF8);
      if (v44 < 0) {
        uint64_t v49 = (const char *)v44;
      }
      unint64_t v89 = v49;
      do
      {
        while (1)
        {
          int64_t v55 = v92;
          uint64_t v56 = v93;
          char v57 = v94;
          sub_10029D500(v92, v93, v94, v44);
          uint64_t v59 = v58;
          id v60 = [v58 stringValue];
          uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v63 = v62;

          id v64 = v95;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100059E2C(0, v64[2] + 1, 1);
            id v64 = v95;
          }
          unint64_t v66 = v64[2];
          unint64_t v65 = v64[3];
          if (v66 >= v65 >> 1)
          {
            sub_100059E2C(v65 > 1, v66 + 1, 1);
            id v64 = v95;
          }
          uint64_t v64[2] = v66 + 1;
          NSString v67 = &v64[2 * v66];
          v67[4] = v61;
          v67[5] = v63;
          if (v90) {
            break;
          }
          int64_t v50 = sub_100544448(v55, v56, v57, v44);
          uint64_t v52 = v51;
          char v54 = v53;
          sub_1000D3250(v55, v56, v57);
          uint64_t v92 = v50;
          uint64_t v93 = v52;
          char v94 = v54 & 1;
          if (!--v9) {
            goto LABEL_27;
          }
        }
        if ((v57 & 1) == 0) {
          goto LABEL_65;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_1000CBE70((uint64_t *)&unk_10071B8A8);
        unsigned __int8 v68 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v68(v91, 0);
        --v9;
      }
      while (v9);
LABEL_27:
      sub_1000D3250(v92, v93, v94);

      swift_bridgeObjectRelease();
      uint64_t v39 = v95;
LABEL_28:
      sub_100169750((uint64_t)v39);
      uint64_t v38 = v88;
      uint64_t v9 = v86;
      if (v88 == v84) {
        goto LABEL_60;
      }
    }
    Class v40 = (char *)*(id *)(v82 + 8 * v38);
    BOOL v41 = __OFADD__(v38, 1);
    uint64_t v42 = v38 + 1;
    if (!v41) {
      goto LABEL_34;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    swift_retain();
  }
LABEL_60:
  swift_release_n();
  static Logger.UI.getter();
  swift_bridgeObjectRetain_n();
  id v69 = Logger.logObject.getter();
  os_log_type_t v70 = v77();
  if (os_log_type_enabled(v69, v70))
  {
    uint64_t v71 = swift_slowAlloc();
    v91[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v71 = 136315394;
    uint64_t v92 = sub_10009B0E4(v78, v79, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v71 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v72 = Array.description.getter();
    unint64_t v74 = v73;
    swift_bridgeObjectRelease();
    uint64_t v92 = sub_10009B0E4(v72, v74, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "%s [PROTECTED APPS] returning OIDs: %s", (uint8_t *)v71, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v76((char *)v9, v81);
}

void sub_1000B5508()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([self protectedAppsEnabled])
  {
    static Logger.UI.getter();
    id v5 = v0;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      unint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v17 = v15;
      *(_DWORD *)uint64_t v8 = 136315650;
      os_log_t v13 = v6;
      uint64_t v16 = sub_10009B0E4(0xD000000000000023, 0x80000001005FF8C0, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2080;
      uint64_t v16 = sub_10009B0E4(0xD000000000000023, 0x80000001005FF8C0, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 22) = 2112;
      uint64_t v16 = (uint64_t)v5;
      id v9 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v14 = v5;

      os_log_t v10 = v13;
      _os_log_impl((void *)&_mh_execute_header, v13, v7, "%s [PROTECTED APPS] %s %@", (uint8_t *)v8, 0x20u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    id v11 = [self defaultCenter];
    [v11 addObserver:v5 selector:"updateQueryFiltersForNewApps" name:DOCAppProtectionStatusDidChangeNotification object:0];
  }
}

uint64_t sub_1000B5830(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v61 = *(void *)(v3 - 8);
  uint64_t v62 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  id v9 = (char *)&v58 - v8;
  __chkstk_darwin(v7);
  id v11 = (char *)&v58 - v10;
  uint64_t v65 = 0;
  if (a2)
  {
    id v12 = [self defaultPermission];
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v12 allowedFileProviderBundleIdentifiersForHostBundleIdentifier:v13];

    if (v14)
    {
      a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v65 = a2;
    }
    else
    {
      a2 = 0;
    }
  }
  uint64_t v15 = self;
  uint64_t v16 = &selRef_nodeDownloadButton_downloadingNode_encounteredError_;
  id v17 = [v15 sharedManager];
  unsigned int v18 = [v17 hasAnyProtectedApps];

  if (!v18) {
    goto LABEL_17;
  }
  if (a2)
  {
    static Logger.UI.getter();
    swift_bridgeObjectRetain_n();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      aBlock[0] = v60;
      *(_DWORD *)uint64_t v21 = 136315394;
      uint64_t v63 = sub_10009B0E4(0xD000000000000020, 0x80000001005FF460, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v59 = v21 + 14;
      swift_bridgeObjectRetain();
      uint64_t v22 = v9;
      uint64_t v23 = Array.description.getter();
      unint64_t v25 = v24;
      swift_bridgeObjectRelease();
      uint64_t v26 = v23;
      id v9 = v22;
      uint64_t v63 = sub_10009B0E4(v26, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v16 = &selRef_nodeDownloadButton_downloadingNode_encounteredError_;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s [PROTECTED APPS] existing allow list from MDM, filtering that list %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v37 = *(void (**)(char *, uint64_t))(v61 + 8);
    v37(v11, v62);
    id v38 = [v15 v16[301]];
    id v39 = [v38 protectedApplicationBundleIDs];

    Class v40 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = sub_10054452C(a2, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v65 = v41;
    swift_bridgeObjectRetain();
    static Logger.UI.getter();
    swift_bridgeObjectRetain();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315394;
      uint64_t v63 = sub_10009B0E4(0xD000000000000020, 0x80000001005FF460, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v44 + 12) = 2080;
      uint64_t v63 = v41;
      swift_bridgeObjectRetain();
      sub_1000CBE70(&qword_10071B888);
      uint64_t v45 = String.init<A>(describing:)();
      uint64_t v63 = sub_10009B0E4(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s [PROTECTED APPS] final filtered allow list from MDM and Protected Aps: %s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v37(v9, v62);
LABEL_17:
    char v47 = 0;
LABEL_18:
    swift_beginAccess();
    uint64_t v48 = v65;
    sub_1000A7258((uint64_t)v47);
    return v48;
  }
  id v27 = [v15 sharedManager];
  id v28 = [v27 protectedApplicationBundleIDs];

  uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = self;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v29;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = sub_100545D9C;
  *(void *)(v32 + 24) = v31;
  aBlock[4] = (uint64_t)sub_100545DB4;
  aBlock[5] = v32;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1005422D8;
  aBlock[3] = (uint64_t)&unk_1006B5DF0;
  uint64_t v33 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  id v34 = [v30 allowedFileProviderBundleIdentifiersFiltered:v33];
  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v33 & 1) == 0)
  {
    if (v34)
    {
      uint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v36 = 0;
    }
    uint64_t v65 = v36;
    swift_bridgeObjectRetain();
    static Logger.UI.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    int v51 = v50;
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      aBlock[0] = v60;
      *(_DWORD *)uint64_t v52 = 136315650;
      LODWORD(v59) = v51;
      uint64_t v63 = sub_10009B0E4(0xD000000000000020, 0x80000001005FF460, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v53 = Array.description.getter();
      unint64_t v55 = v54;
      swift_bridgeObjectRelease();
      uint64_t v63 = sub_10009B0E4(v53, v55, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 22) = 2080;
      uint64_t v63 = v36;
      swift_bridgeObjectRetain();
      sub_1000CBE70(&qword_10071B888);
      uint64_t v56 = String.init<A>(describing:)();
      uint64_t v63 = sub_10009B0E4(v56, v57, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v59, "%s [PROTECTED APPS] no existing allow list. Filtered out: %s result: %s", (uint8_t *)v52, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v61 + 8))(v6, v62);
    char v47 = sub_100545D9C;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B6204(uint64_t result, void *a2)
{
  if (*(unsigned char *)(v2 + 24) == 1)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = *(void **)(v2 + 16);
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = a2;
    v6[3] = v2;
    v6[4] = v4;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100545E28;
    *(void *)(v7 + 24) = v6;
    v13[4] = sub_1000879B8;
    v13[5] = v7;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_100087990;
    v13[3] = &unk_1006B5E68;
    uint64_t v8 = _Block_copy(v13);
    id v9 = v5;
    id v10 = a2;
    swift_retain();
    id v11 = v4;
    swift_retain();
    swift_release();
    dispatch_sync(v9, v8);

    _Block_release(v8);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000B6388(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10007DFA0(a1, a2, a3, a4, (uint64_t *)&unk_10070C030, (uint64_t (*)(void))&type metadata accessor for UTType, (uint64_t (*)(void))&type metadata accessor for UTType);
}

uint64_t sub_1000B63C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1;
  uint64_t v11 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__selectedChildNode;
  swift_unknownObjectRetain();
  sub_1000CBE70(&qword_100717520);
  char v12 = Optional.isEqualTo(node:)();
  swift_unknownObjectRelease();
  if (v12) {
    return swift_unknownObjectRelease();
  }
  uint64_t v13 = *(void *)(v2 + v11);
  *(void *)(v2 + v11) = a1;
  id v14 = (void *)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
  swift_unknownObjectRetain();
  uint64_t result = swift_beginAccess();
  if (*v14 != 2)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  if (a1)
  {
    uint64_t v16 = (void *)swift_unknownObjectRetain();
    sub_1001D1E3C(v16, 0, 1);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease_n();
  }
  else if (v13)
  {
    sub_1000CBE70((uint64_t *)&unk_1007084E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A04F0;
    *(void *)(inited + 32) = v13;
    unint64_t v25 = inited;
    specialized Array._endMutation()();
    unint64_t v18 = v25;
    swift_unknownObjectRetain_n();
    id v19 = sub_10003B398(v18);
    swift_bridgeObjectRelease();
    if (*((void *)v19 + 2))
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, &v19[(*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)], v7);
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v20, 1, v7);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      swift_unknownObjectRelease_n();
      return sub_1000CBBA4((uint64_t)v6, (uint64_t *)&unk_1007069A0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      uint64_t v21 = *(void **)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
      if (v21)
      {
        id v22 = v21;
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        [v22 deselectItemAtIndexPath:isa animated:0];
        swift_unknownObjectRelease_n();
      }
      else
      {
        swift_unknownObjectRelease_n();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  return result;
}

void **sub_1000B69C0@<X0>(double *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 392))
  {
    uint64_t result = sub_1000B6A60(v13);
    double v5 = v13[0];
    double v4 = v13[1];
    double v7 = v13[2];
    double v6 = v13[3];
    double v9 = v13[4];
    double v8 = v13[5];
    double v11 = v13[6];
    double v10 = v13[7];
    double v12 = v13[8];
    *(double *)(v1 + 320) = v13[0];
    *(double *)(v1 + 328) = v4;
    *(double *)(v1 + 336) = v7;
    *(double *)(v1 + 344) = v6;
    *(double *)(v1 + 352) = v9;
    *(double *)(v1 + 360) = v8;
    *(double *)(v1 + 368) = v11;
    *(double *)(v1 + 376) = v10;
    *(double *)(v1 + 384) = v12;
    *(unsigned char *)(v1 + 392) = 0;
  }
  else
  {
    double v12 = *(double *)(v1 + 384);
    double v11 = *(double *)(v1 + 368);
    double v10 = *(double *)(v1 + 376);
    double v9 = *(double *)(v1 + 352);
    double v8 = *(double *)(v1 + 360);
    double v7 = *(double *)(v1 + 336);
    double v6 = *(double *)(v1 + 344);
    double v5 = *(double *)(v1 + 320);
    double v4 = *(double *)(v1 + 328);
  }
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v6;
  a1[4] = v9;
  a1[5] = v8;
  a1[6] = v11;
  a1[7] = v10;
  a1[8] = v12;
  return result;
}

void **sub_1000B6A60@<X0>(double *a1@<X8>)
{
  swift_beginAccess();
  sub_1000C8674(v11);
  swift_endAccess();
  double v2 = v12;
  if (qword_100704F90 != -1) {
    swift_once();
  }
  double v3 = *(double *)&qword_1007371D0;
  uint64_t result = sub_1000CAA5C((void **)v11);
  if (v3 + 1.0 < 0.0)
  {
    __break(1u);
  }
  else
  {
    if (v2 >= 0.0 && v2 < v3 + 1.0)
    {
      uint64_t v10 = 0;
      double v9 = 30.0;
      double v6 = 14.0;
      double v7 = 1.5;
      double v8 = 2.0;
    }
    else
    {
      double v6 = 22.0;
      double v7 = 2.0;
      double v8 = 2.5;
      double v9 = 46.0;
      uint64_t v10 = 1;
    }
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v6;
    a1[3] = v6;
    a1[4] = v7;
    a1[5] = v8;
    a1[6] = v7;
    a1[7] = v8;
    *((void *)a1 + 8) = v10;
  }
  return result;
}

uint64_t sub_1000B6B68()
{
  id v1 = [self keyWindow];
  if (!v1) {
    return 0;
  }
  double v2 = v1;
  id v3 = [v1 rootViewController];

  if (!v3) {
    return 0;
  }
  id v4 = [v0 parentViewController];
  if (v4)
  {
    id v5 = v4;
    sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    while (1)
    {
      id v6 = v5;
      id v7 = v3;
      char v8 = static NSObject.== infix(_:_:)();

      if (v8) {
        break;
      }
      id v5 = [v6 parentViewController];

      if (!v5) {
        goto LABEL_7;
      }
    }

    uint64_t v9 = 1;
  }
  else
  {
LABEL_7:
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t type metadata accessor for DOCPlaceHolderViewController()
{
  return self;
}

uint64_t sub_1000B6CA8(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  id v5 = &v2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting];
  *(void *)&v2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting + 8] = a2;
  swift_unknownObjectWeakAssign();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v7 = swift_getObjectType();
    v11[3] = ObjectType;
    v11[0] = v2;
    char v8 = *(void (**)(void *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v6 + 8);
    uint64_t v9 = v2;
    v8(v11, 1, 1, 0, v7, v6);
    swift_unknownObjectRelease();
    sub_10009B1B8((uint64_t)v11);
    return swift_unknownObjectRelease();
  }
  else
  {
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_1000B6DB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DOCBrowserHistoryItem(0) - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000B6E2C(a1, v4, v5);
}

uint64_t sub_1000B6E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v36[1] = a2;
  uint64_t v5 = sub_1000CBE70(&qword_10070E838);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DOCBrowserHistoryItem(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  double v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)v36 - v13;
  uint64_t v15 = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(0);
  uint64_t v16 = *(int *)(v15 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v16) = _swiftEmptyArrayStorage;
  sub_1000CBC00(a1, (uint64_t)v7, &qword_10070E838);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000CBBA4((uint64_t)v7, &qword_10070E838);
  }
  else
  {
    sub_1000BC744((uint64_t)v7, (uint64_t)v14, type metadata accessor for DOCBrowserHistoryItem);
    sub_1000A5858((uint64_t)v14, (uint64_t)v12, type metadata accessor for DOCBrowserHistoryItem);
    uint64_t v17 = *(int *)(v15 + 20);
    unint64_t v18 = *(void *)(a1 + v17);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v18 = sub_1000B7F44(0, *(void *)(v18 + 16) + 1, 1, v18);
    }
    unint64_t v20 = *(void *)(v18 + 16);
    unint64_t v19 = *(void *)(v18 + 24);
    if (v20 >= v19 >> 1) {
      unint64_t v18 = sub_1000B7F44(v19 > 1, v20 + 1, 1, v18);
    }
    *(void *)(v18 + 16) = v20 + 1;
    sub_1000BC744((uint64_t)v12, v18+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v20, type metadata accessor for DOCBrowserHistoryItem);
    *(void *)(a1 + v17) = v18;
    sub_1000A5770((uint64_t)v14, type metadata accessor for DOCBrowserHistoryItem);
  }
  uint64_t v37 = 0x203A676E69646461;
  unint64_t v38 = 0xE800000000000000;
  uint64_t v21 = *(void **)(a3 + *(int *)(v8 + 32));
  id v22 = *(id *)(a3 + *(int *)(v8 + 20));
  id v23 = v21;
  id v24 = sub_1000B7238();
  if (v25 != 255)
  {
    uint64_t v26 = v24;
    if (v25 == 2)
    {
      id v27 = [v23 displayName];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      sub_1000B72E4(v26, 2u);
      goto LABEL_15;
    }
    sub_1000B72E4(v24, v25);
  }
  id v31 = [v22 displayName];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v33;
  }
  else
  {

    uint64_t v28 = 0;
    uint64_t v30 = (void *)0xE000000000000000;
  }
LABEL_15:
  v34._countAndFlagsBits = v28;
  v34._object = v30;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  sub_1000CDE40(v37, v38);
  swift_bridgeObjectRelease();
  sub_1000CBBA4(a1, &qword_10070E838);
  sub_1000A5858(a3, a1, type metadata accessor for DOCBrowserHistoryItem);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
}

id sub_1000B7238()
{
  id result = [v0 representedTag];
  if (!result)
  {
    if ([v0 isRoot]) {
      return [v0 sourceIdentifier];
    }
    else {
      return [v0 fileProviderItem];
    }
  }
  return result;
}

void sub_1000B72D0(id a1, unsigned __int8 a2)
{
  if (a2 <= 2u) {
}
  }

void sub_1000B72E4(id a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    sub_1000B72D0(a1, a2);
  }
}

uint64_t sub_1000B72F8()
{
  return sub_1000B7304(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000B7304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v16[0] = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  double v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  aBlock[4] = sub_100045B40;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_1006B3910;
  id v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_1000BAE4C((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_10009449C((unint64_t *)&qword_100706780, (uint64_t *)&unk_100705390);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1000B75B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_1000CBE70(&qword_10070E838) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1000B7660(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(char **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000B7660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v82 = a7;
  uint64_t v83 = a8;
  uint64_t v79 = a5;
  uint64_t v80 = a6;
  uint64_t v77 = (char *)a3;
  uint64_t v78 = (char *)a4;
  uint64_t v81 = a2;
  uint64_t v11 = sub_1000CBE70(&qword_10070E838);
  uint64_t v76 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v71 - v16;
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v71 - v18;
  uint64_t v20 = type metadata accessor for DOCBrowserHistoryItem(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  id v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  id v27 = (char *)&v71 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v71 - v28;
  uint64_t v30 = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState(0);
  uint64_t v31 = a1;
  uint64_t v32 = (uint64_t *)(a1 + *(int *)(v30 + 20));
  if (*v32)
  {
    uint64_t v84 = 0;
    unint64_t v85 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v33._countAndFlagsBits = 91;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    v34._countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._object = (void *)0x80000001005FC840;
    v35._countAndFlagsBits = 0xD000000000000048;
    String.append(_:)(v35);
    sub_1000CDE40(v84, v85);
    swift_bridgeObjectRelease();
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = v82;
    *(void *)(v36 + 24) = v83;
    uint64_t v37 = *v32;
    swift_retain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000B7F78(0, *(void *)(v37 + 16) + 1, 1, (char *)v37);
      uint64_t v37 = result;
    }
    unint64_t v40 = *(void *)(v37 + 16);
    unint64_t v39 = *(void *)(v37 + 24);
    if (v40 >= v39 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000B7F78((char *)(v39 > 1), v40 + 1, 1, (char *)v37);
      uint64_t v37 = result;
    }
    *(void *)(v37 + 16) = v40 + 1;
    unint64_t v41 = v37 + 16 * v40;
    *(void *)(v41 + 32) = sub_100162A48;
    *(void *)(v41 + 40) = v36;
    *uint64_t v32 = v37;
  }
  else
  {
    uint64_t v80 = v19;
    uint64_t v81 = v21;
    unint64_t v73 = v24;
    unint64_t v74 = v29;
    uint64_t v72 = v27;
    uint64_t v77 = v17;
    uint64_t v78 = v14;
    uint64_t v75 = v11;
    uint64_t v42 = v31;
    uint64_t v79 = a9;
    os_log_type_t v43 = (char *)_swiftEmptyArrayStorage;
    *uint64_t v32 = (uint64_t)_swiftEmptyArrayStorage;
    v32[1] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = v82;
    *(void *)(v44 + 24) = v83;
    swift_retain();
    uint64_t v45 = (char **)v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      os_log_type_t v43 = sub_1000B7F78(0, _swiftEmptyArrayStorage[2] + 1, 1, (char *)_swiftEmptyArrayStorage);
    }
    unint64_t v47 = *((void *)v43 + 2);
    unint64_t v46 = *((void *)v43 + 3);
    uint64_t v48 = v76;
    uint64_t v49 = (uint64_t)v80;
    if (v47 >= v46 >> 1) {
      os_log_type_t v43 = sub_1000B7F78((char *)(v46 > 1), v47 + 1, 1, v43);
    }
    os_log_type_t v50 = (uint64_t *)(a10 + 16);
    *((void *)v43 + 2) = v47 + 1;
    int v51 = &v43[16 * v47];
    *((void *)v51 + 4) = sub_1000879B8;
    *((void *)v51 + 5) = v44;
    *uint64_t v45 = v43;
    sub_1000CBC00(v79, v49, &qword_10070E838);
    uint64_t v52 = v81;
    uint64_t v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
    if (v53(v49, 1, v20) == 1)
    {
      sub_1000CBBA4(v49, &qword_10070E838);
      sub_1000CBE70(&qword_10071A178);
      unint64_t v54 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      uint64_t v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = xmmword_1005A0030;
      uint64_t v56 = v55 + v54;
      uint64_t v57 = v42;
      sub_1000CBC00(v42, v56, &qword_10070E838);
      uint64_t v58 = (uint64_t)v77;
      sub_1000CBC00(v56, (uint64_t)v77, &qword_10070E838);
      uint64_t v59 = v58;
      uint64_t v60 = (uint64_t)v78;
      sub_1000CBE0C(v59, (uint64_t)v78, &qword_10070E838);
      if (v53(v60, 1, v20) == 1)
      {
        sub_1000CBBA4(v60, &qword_10070E838);
        uint64_t v61 = _swiftEmptyArrayStorage;
      }
      else
      {
        uint64_t v65 = (uint64_t)v72;
        sub_1000BC744(v60, (uint64_t)v72, type metadata accessor for DOCBrowserHistoryItem);
        uint64_t v66 = (uint64_t)v73;
        sub_1000BC744(v65, (uint64_t)v73, type metadata accessor for DOCBrowserHistoryItem);
        uint64_t v61 = _swiftEmptyArrayStorage;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v61 = (void *)sub_1000B7F44(0, _swiftEmptyArrayStorage[2] + 1, 1, (unint64_t)_swiftEmptyArrayStorage);
        }
        unint64_t v68 = v61[2];
        unint64_t v67 = v61[3];
        if (v68 >= v67 >> 1) {
          uint64_t v61 = (void *)sub_1000B7F44(v67 > 1, v68 + 1, 1, (unint64_t)v61);
        }
        v61[2] = v68 + 1;
        sub_1000BC744(v66, (uint64_t)v61+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(void *)(v52 + 72) * v68, type metadata accessor for DOCBrowserHistoryItem);
      }
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v84 = *(void *)(v57 + *(int *)(type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(0) + 20));
      swift_bridgeObjectRetain();
      sub_1000B7D5C((uint64_t)v61);
      uint64_t v69 = swift_bridgeObjectRetain();
      sub_1000B7D5C(v69);
      uint64_t v70 = v84;
      swift_beginAccess();
      *os_log_type_t v50 = v70;
    }
    else
    {
      uint64_t v62 = (uint64_t)v74;
      sub_1000BC744(v49, (uint64_t)v74, type metadata accessor for DOCBrowserHistoryItem);
      sub_1000CBE70(&qword_10071A180);
      unint64_t v63 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_1005A0030;
      sub_1000BC744(v62, v64 + v63, type metadata accessor for DOCBrowserHistoryItem);
      swift_beginAccess();
      *os_log_type_t v50 = v64;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000B7D5C(uint64_t a1)
{
  return sub_1000B7D88(a1, (uint64_t (*)(void))sub_1000B7F44, type metadata accessor for DOCBrowserHistoryItem);
}

uint64_t sub_1000B7D88(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B7F44(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10007DFA0(a1, a2, a3, a4, &qword_10071A180, type metadata accessor for DOCBrowserHistoryItem, type metadata accessor for DOCBrowserHistoryItem);
}

char *sub_1000B7F78(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1000B7F8C(a1, a2, a3, a4, &qword_100708BC8, (uint64_t *)&unk_100708BD0);
}

char *sub_1000B7F8C(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)a4 + 2);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_1000CBE70(a5);
      uint64_t v13 = (char *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * (v15 >> 4);
      unint64_t v16 = v13 + 32;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v16 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[16 * v11 + 32]) {
          memmove(v16, a4 + 32, 16 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000B80A8(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B80A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      sub_1000CBE70(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000B81B0()
{
}

void sub_1000B81B8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v1;
    aBlock[4] = sub_10006A6D0;
    aBlock[5] = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000666D8;
    aBlock[3] = &unk_1006B3E10;
    uint64_t v3 = _Block_copy(aBlock);
    id v4 = v1;
    swift_release();
    DOCRunInMainThread();
    _Block_release(v3);
  }
}

uint64_t sub_1000B82B0()
{
  uint64_t v1 = sub_1000CBE70(&qword_10070ADA0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000CBE70(&qword_10070ADA8);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000CBE70(&qword_100719440);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 16))
  {
    sub_10009E6C4(0, (unint64_t *)&unk_100705C20);
    sub_1000C63D0();
    sub_1000B86A8((unint64_t *)&qword_100708238, (unint64_t *)&unk_100705C20);
    NSDiffableDataSourceSnapshot.init()();
    uint64_t v11 = sub_1000CBE70((uint64_t *)&unk_10070ADB0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    v12(v3, 0, 1, v11);
    type metadata accessor for DOCNodeDiffableDataSourceSnapshot();
    uint64_t v13 = swift_allocObject();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fpItemSnapshot, 1, 1, v7);
    uint64_t v14 = v13 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fiNodeSnapshot;
    v12((char *)(v13 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fiNodeSnapshot), 1, 1, v11);
    *(unsigned char *)(v13 + 16) = 1;
    swift_beginAccess();
    uint64_t v15 = &qword_10070ADA0;
    uint64_t v16 = (uint64_t)v3;
    uint64_t v17 = v14;
  }
  else
  {
    sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
    sub_1000C63D0();
    sub_1000B86A8((unint64_t *)&qword_100708240, (unint64_t *)&qword_1007069C0);
    NSDiffableDataSourceSnapshot.init()();
    type metadata accessor for DOCNodeDiffableDataSourceSnapshot();
    uint64_t v13 = swift_allocObject();
    uint64_t v18 = v13 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fpItemSnapshot;
    unint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v19(v13 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fpItemSnapshot, 1, 1, v7);
    uint64_t v20 = v13 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fiNodeSnapshot;
    uint64_t v21 = sub_1000CBE70((uint64_t *)&unk_10070ADB0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
    *(unsigned char *)(v13 + 16) = 0;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v6, v10, v7);
    v19((uint64_t)v6, 0, 1, v7);
    swift_beginAccess();
    uint64_t v15 = &qword_10070ADA8;
    uint64_t v16 = (uint64_t)v6;
    uint64_t v17 = v18;
  }
  sub_10008C318(v16, v17, v15);
  swift_endAccess();
  return v13;
}

uint64_t sub_1000B86A8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10009E6C4(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DOCNodeDiffableDataSourceSnapshot()
{
  uint64_t result = qword_100719428;
  if (!qword_100719428) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000B8744(int a1, char a2)
{
  uint64_t v5 = sub_1000CBE70((uint64_t *)&unk_100709870);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(v2, "doc_hasAppearedOrIsAppearing")) {
    return;
  }
  uint64_t v9 = *(void *)&v2[OBJC_IVAR____TtC5Files24DOCSidebarViewController_locationSelection];
  uint64_t v10 = *(void **)(v9 + 24);
  if (v10)
  {
    id v60 = *(id *)(v9 + 24);
  }
  else
  {
    uint64_t v11 = *(void **)(v9 + 16);
    if (!v11) {
      return;
    }
    id v60 = v11;
    uint64_t v10 = 0;
  }
  id v12 = v10;
  int v13 = sub_10000D8DC();
  if v13 != 2 || (a2)
  {
    uint64_t v15 = (objc_class *)type metadata accessor for DOCSidebarViewController(0);
    v64.receiver = v2;
    v64.super_class = v15;
    id v60 = v60;
    [super collectionView];
    if (!v16)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      return;
    }
    uint64_t v17 = v16;
    type metadata accessor for DOCSidebarCollectionView();

    uint64_t v18 = (uint64_t)&v2[OBJC_IVAR____TtC5Files24DOCSidebarViewController__diffableDataSource];
    swift_beginAccess();
    sub_100053674(v18, (uint64_t)v62);
    uint64_t v56 = v2;
    uint64_t v54 = v6;
    int v52 = v13;
    if (v63)
    {
      sub_1000CBE70((uint64_t *)&unk_100709880);
      if (swift_dynamicCast())
      {
        id v19 = v61;
        goto LABEL_19;
      }
    }
    else
    {
      sub_1000CBBA4((uint64_t)v62, (uint64_t *)&unk_100705D60);
    }
    if (qword_100705318 != -1) {
      swift_once();
    }
    id v19 = (id)qword_10071BD48;
LABEL_19:
    int v51 = a1;
    dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

    uint64_t v55 = v5;
    uint64_t v53 = v8;
    uint64_t v20 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter();
    uint64_t v21 = *(char **)(v20 + 16);
    if (v21)
    {
      swift_bridgeObjectRetain();
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      v50[1] = v20;
      BOOL v22 = (unsigned __int8 *)(v20 + 72);
      int v23 = 255;
      do
      {
        int v24 = *v22;
        if (v24 != 255 && ~(_BYTE)v23 == 0)
        {
          uint64_t v26 = (char *)*((void *)v22 - 3);
          uint64_t v27 = *((void *)v22 - 2);
          uint64_t v28 = *((void *)v22 - 1);
          swift_unknownObjectRetain();
          sub_1000A9454(v26, v27, v28, v24);
          id v29 = sub_10024AAE8((unint64_t)v26, v27, v28, v24);
          BOOL v30 = sub_100405BFC(v60);
          swift_unknownObjectRelease();

          if (v30)
          {
            uint64_t v57 = v26;
            uint64_t v58 = v27;
            uint64_t v59 = v28;
            int v23 = v24;
          }
          else
          {
            sub_1000A7C1C(v26, v27, v28, v24);
            int v23 = 255;
          }
        }
        v22 += 48;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      uint64_t v32 = v58;
      uint64_t v31 = v59;
      uint64_t v21 = v57;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v31 = 0;
      int v23 = 255;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v55);

    Swift::String v33 = v56;
    uint64_t v34 = *(void *)&v56[OBJC_IVAR____TtC5Files24DOCSidebarViewController_editingSession];
    if (v34)
    {
      if (*(unsigned char *)(v34 + 17) != 2 && ~(_BYTE)v23 != 0) {
        goto LABEL_40;
      }
    }
    else if ((_BYTE)v23 != 0xFF)
    {
LABEL_40:
      int v41 = v52;
      uint64_t v42 = &v56[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem];
      uint64_t v44 = *(void **)&v56[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem];
      uint64_t v43 = *(void *)&v56[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 8];
      uint64_t v45 = *(void *)&v56[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 16];
      *(void *)uint64_t v42 = v21;
      *((void *)v42 + 1) = v32;
      *((void *)v42 + 2) = v31;
      unsigned __int8 v46 = v42[24];
      v42[24] = v23;
      sub_1000A9454(v21, v32, v31, v23);
      sub_10010ED28(v21, v32, v31, v23);
      sub_10010ED28(v21, v32, v31, v23);
      sub_1000A7C1C(v44, v43, v45, v46);
      sub_1000A767C();
      sub_1000A7C1C(v21, v32, v31, v23);
      char v47 = sub_1004833AC(v21, v32, v31, v23, v51 & 1, 0);
      if (v41 == 2 && v47 != 2 && (v47 & 1) == 0)
      {
        id v48 = [v33 view];
        if (v48)
        {
          uint64_t v49 = v48;
          [v48 layoutIfNeeded];

          sub_1000A7C1C(v21, v32, v31, v23);
          sub_1000A7C1C(v21, v32, v31, v23);

          return;
        }
        goto LABEL_49;
      }

      sub_1000A7C1C(v21, v32, v31, v23);
LABEL_46:
      sub_1000A7C1C(v21, v32, v31, v23);
      return;
    }
    uint64_t v36 = &v56[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem];
    uint64_t v37 = *(void **)&v56[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem];
    uint64_t v38 = *(void *)&v56[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 8];
    uint64_t v39 = *(void *)&v56[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 16];
    *((void *)v36 + 1) = 0;
    *((void *)v36 + 2) = 0;
    *(void *)uint64_t v36 = 0;
    unsigned __int8 v40 = v36[24];
    v36[24] = -1;
    sub_1000A7C1C(v37, v38, v39, v40);
    sub_1000A767C();
    sub_100484ED0();

    goto LABEL_46;
  }
  uint64_t v14 = v60;
}

uint64_t type metadata accessor for DOCPlaceholderDataSource()
{
  return self;
}

uint64_t type metadata accessor for DOCNavigationBar()
{
  return self;
}

uint64_t sub_1000B8F60()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v0;
  aBlock[4] = sub_100066840;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_1006AC0C8;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = v0;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000BAD2C((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000B921C()
{
  unint64_t result = qword_100706780;
  if (!qword_100706780)
  {
    sub_100074618((uint64_t *)&unk_100705390);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706780);
  }
  return result;
}

uint64_t sub_1000B9278(uint64_t a1)
{
  uint64_t v105 = a1;
  uint64_t v2 = sub_1000CBE70((uint64_t *)&unk_1007086D0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v97 = (uint64_t)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v94 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  id v96 = (char *)&v94 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v101 = (uint64_t)&v94 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v104 = (uint64_t)&v94 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v94 - v14;
  uint64_t v117 = type metadata accessor for DOCItemSortMode();
  uint64_t v16 = *(void *)(v117 - 8);
  uint64_t v17 = __chkstk_darwin(v117);
  uint64_t v109 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  id v108 = (char *)&v94 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v115 = (char *)&v94 - v22;
  __chkstk_darwin(v21);
  uint64_t v114 = (char *)&v94 - v23;
  uint64_t v24 = type metadata accessor for DOCItemSortDescriptor();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v107 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  char v94 = (char *)&v94 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  char v95 = (char *)&v94 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  unint64_t v100 = (char *)&v94 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v94 - v36;
  uint64_t v38 = *(void *)(*(void *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration]
                  + OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes);
  int64_t v39 = *(void *)(v38 + 16);
  unsigned __int8 v40 = _swiftEmptyArrayStorage;
  uint64_t v110 = v34;
  uint64_t v116 = v25;
  uint64_t v106 = v1;
  uint64_t v103 = v16;
  if (v39)
  {
    NSString v99 = v7;
    Swift::String v102 = v15;
    os_log_type_t v123 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B9F4C(0, v39, 0);
    uint64_t v41 = v110;
    id v113 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    unint64_t v42 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v98 = v38;
    uint64_t v43 = (char *)(v38 + v42);
    uint64_t v44 = *(void (***)(char *, uint64_t))(v16 + 72);
    uint64_t v45 = (void (**)(char *, uint64_t))(v16 + 8);
    int v111 = (void (**)(char *, char *, uint64_t))(v25 + 32);
    id v112 = v44;
    do
    {
      char v47 = v113;
      unsigned __int8 v46 = v114;
      uint64_t v48 = v117;
      v113(v114, v43, v117);
      v47(v115, v46, v48);
      DOCItemSortDescriptor.init(type:isReversed:)();
      (*v45)(v46, v48);
      unsigned __int8 v40 = v123;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v49 = v41;
      }
      else
      {
        sub_1000B9F4C(0, v40[2] + 1, 1);
        uint64_t v49 = v110;
        unsigned __int8 v40 = v123;
      }
      unint64_t v51 = v40[2];
      unint64_t v50 = v40[3];
      if (v51 >= v50 >> 1)
      {
        sub_1000B9F4C(v50 > 1, v51 + 1, 1);
        uint64_t v49 = v110;
        unsigned __int8 v40 = v123;
      }
      v40[2] = v51 + 1;
      uint64_t v25 = v116;
      unint64_t v52 = (unint64_t)v40
          + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
          + *(void *)(v25 + 72) * v51;
      uint64_t v41 = v49;
      (*(void (**)(unint64_t, char *))(v116 + 32))(v52, v37);
      os_log_type_t v123 = v40;
      uint64_t v43 = (char *)v112 + (void)v43;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
    uint64_t v15 = v102;
    uint64_t v7 = v99;
    uint64_t v35 = v41;
  }
  if (!v40[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v53 = *(char **)(v25 + 56);
  uint64_t v54 = v35;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v53)(v15, 1, 1, v35);
  uint64_t v55 = v104;
  sub_1000CBC00(v105, v104, (uint64_t *)&unk_1007086D0);
  uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v57 = v56(v55, 1, v54);
  id v113 = (void (*)(char *, char *, uint64_t))v56;
  uint64_t v114 = (char *)(v25 + 48);
  NSString v99 = (char *)(v25 + 56);
  Swift::String v102 = v53;
  if (v57 != 1)
  {
    uint64_t v66 = v55;
    unint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 32);
    unint64_t v68 = v100;
    v67(v100, v66, v54);
    sub_1000CBBA4((uint64_t)v15, (uint64_t *)&unk_1007086D0);
    v67(v15, (uint64_t)v68, v54);
    uint64_t v69 = v15;
    uint64_t v70 = v54;
LABEL_19:
    ((void (*)(char *, void, uint64_t, uint64_t))v53)(v69, 0, 1, v70);
    uint64_t v62 = v54;
    goto LABEL_20;
  }
  sub_1000CBBA4(v55, (uint64_t *)&unk_1007086D0);
  uint64_t v58 = &v106[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_sortingDescriptor];
  swift_beginAccess();
  uint64_t v59 = (uint64_t)v58;
  uint64_t v60 = v101;
  sub_1000CBC00(v59, v101, (uint64_t *)&unk_1007086D0);
  if (v56(v60, 1, v54) != 1)
  {
    uint64_t v71 = v60;
    uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 32);
    unint64_t v73 = v95;
    v72(v95, v71, v54);
    sub_1000CBBA4((uint64_t)v15, (uint64_t *)&unk_1007086D0);
    v72(v15, (uint64_t)v73, v54);
    uint64_t v69 = v15;
    uint64_t v70 = v54;
    uint64_t v53 = v102;
    goto LABEL_19;
  }
  sub_1000CBBA4(v60, (uint64_t *)&unk_1007086D0);
  sub_10009E6C4(0, (unint64_t *)&unk_1007086B0);
  uint64_t v61 = (uint64_t)v96;
  static DOCUserInterfaceStateStore.retrieveDefaultSortMode(configuration:)();
  if (v56(v61, 1, v54) != 1)
  {
    uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 32);
    uint64_t v92 = v94;
    v91(v94, v61, v110);
    sub_1000CBBA4((uint64_t)v15, (uint64_t *)&unk_1007086D0);
    v91(v15, (uint64_t)v92, v110);
    uint64_t v62 = v110;
    uint64_t v53 = v102;
    ((void (*)(char *, void, uint64_t, uint64_t))v102)(v15, 0, 1, v110);
LABEL_20:
    uint64_t v63 = v103;
    uint64_t v64 = v40[2];
    if (!v64)
    {
LABEL_33:
      uint64_t result = sub_1000CBBA4((uint64_t)v15, (uint64_t *)&unk_1007086D0);
      if (v40[2])
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v15, (unint64_t)v40+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), v62);
        ((void (*)(char *, void, uint64_t, uint64_t))v53)(v15, 0, 1, v62);
        goto LABEL_35;
      }
      __break(1u);
      return result;
    }
    goto LABEL_21;
  }
  uint64_t v62 = v54;
  sub_1000CBBA4(v61, (uint64_t *)&unk_1007086D0);
  uint64_t v63 = v103;
  uint64_t v53 = v102;
  uint64_t v64 = v40[2];
  if (!v64) {
    goto LABEL_33;
  }
LABEL_21:
  unint64_t v74 = (char *)v40 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
  uint64_t v115 = *(char **)(v25 + 72);
  uint64_t v75 = (void (**)(char *, uint64_t))(v63 + 8);
  int v111 = (void (**)(char *, char *, uint64_t))(v25 + 32);
  id v112 = (void (**)(char *, uint64_t))(v25 + 8);
  swift_bridgeObjectRetain();
  uint64_t v76 = (unsigned int (*)(char *, uint64_t, uint64_t))v113;
  while (1)
  {
    sub_1000CBC00((uint64_t)v15, (uint64_t)v7, (uint64_t *)&unk_1007086D0);
    if (v76(v7, 1, v62) == 1)
    {
      sub_1000CBBA4((uint64_t)v7, (uint64_t *)&unk_1007086D0);
      goto LABEL_23;
    }
    uint64_t v77 = v7;
    (*v111)(v107, v7, v62);
    DOCItemSortDescriptor.sortType.getter();
    DOCItemSortDescriptor.sortType.getter();
    sub_1000BAC0C((unint64_t *)&unk_10071D2C0, (void (*)(uint64_t))&type metadata accessor for DOCItemSortMode);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v120 == v118 && v121 == v119) {
      break;
    }
    char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v79 = *v75;
    uint64_t v80 = v117;
    (*v75)(v109, v117);
    v79(v108, v80);
    uint64_t v62 = v110;
    (*v112)(v107, v110);
    uint64_t v7 = v77;
    uint64_t v76 = (unsigned int (*)(char *, uint64_t, uint64_t))v113;
    if (v78) {
      goto LABEL_31;
    }
LABEL_23:
    unint64_t v74 = &v115[(void)v74];
    if (!--v64)
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = v116;
      uint64_t v53 = v102;
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v81 = *v75;
  uint64_t v82 = v117;
  (*v75)(v109, v117);
  v81(v108, v82);
  uint64_t v62 = v110;
  (*v112)(v107, v110);
  uint64_t v76 = (unsigned int (*)(char *, uint64_t, uint64_t))v113;
LABEL_31:
  swift_bridgeObjectRelease();
  uint64_t v83 = v97;
  sub_1000CBC00((uint64_t)v15, v97, (uint64_t *)&unk_1007086D0);
  unsigned int v84 = v76((char *)v83, 1, v62);
  sub_1000CBBA4(v83, (uint64_t *)&unk_1007086D0);
  BOOL v85 = v84 == 1;
  uint64_t v62 = v110;
  uint64_t v25 = v116;
  uint64_t v53 = v102;
  if (v85) {
    goto LABEL_33;
  }
LABEL_35:
  uint64_t v87 = v106;
  UIMenuElementSize v88 = (UIMenuElementSize)sub_1000BA1D0((uint64_t)v40, (uint64_t)v15, (uint64_t)v87, (uint64_t)v122, (uint64_t (*)(void))&type metadata accessor for DOCItemSortDescriptor, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))sub_1000BA32C);
  swift_bridgeObjectRelease();

  if ((unint64_t)v88 >> 62)
  {
    sub_10009E6C4(0, (unint64_t *)&qword_100708610);
    swift_bridgeObjectRetain();
    UIMenuElementSize v89 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_10009E6C4(0, (unint64_t *)&qword_100708610);
    UIMenuElementSize v89 = v88;
  }
  swift_bridgeObjectRelease();
  sub_10009E6C4(0, (unint64_t *)&qword_100708B50);
  v90._countAndFlagsBits = 0;
  v90._object = (void *)0xE000000000000000;
  v124.value.super.Class isa = 0;
  v124.is_nil = 0;
  Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v90, (Swift::String_optional)0, v124, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v89, v93).super.super.isa;
  sub_1000CBBA4((uint64_t)v15, (uint64_t *)&unk_1007086D0);
  return (uint64_t)isa;
}

uint64_t sub_1000B9F4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B9F88(a1, a2, a3, (void *)*v3, &qword_100708ED8, (uint64_t (*)(void))&type metadata accessor for DOCItemSortDescriptor);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B9F88(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000CBE70(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000BA1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v14 = *(void *)(a5(0) - 8);
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(v14 + 72);
    while (1)
    {
      a6(&v18, v15, a2, a3);
      if (v7) {
        break;
      }
      uint64_t v7 = 0;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v15 += v16;
      if (!--v9) {
        return v19;
      }
    }
    return (void *)swift_release();
  }
  return result;
}

void sub_1000BA32C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v73 = a2;
  uint64_t v60 = a4;
  uint64_t v5 = sub_1000CBE70((uint64_t *)&unk_1007086D0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v64 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v65 = (void (*)(uint64_t, uint64_t))((char *)&v49 - v8);
  uint64_t v9 = type metadata accessor for DOCItemSortMode.DisplayableMode();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DOCItemSortMode();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v62 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v63 = (char *)&v49 - v18;
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v49 - v19;
  DOCItemSortDescriptor.sortType.getter();
  DOCItemSortMode.displayableMode.getter();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v20, v13);
  uint64_t v22 = DOCItemSortMode.DisplayableMode.localizedName.getter();
  uint64_t v54 = v23;
  uint64_t v55 = v22;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  int v57 = v12;
  uint64_t v58 = v10 + 8;
  uint64_t v59 = v9;
  uint64_t v56 = v24;
  v24(v12, v9);
  uint64_t v25 = a1;
  uint64_t v26 = (uint64_t)v65;
  uint64_t v68 = v25;
  DOCItemSortDescriptor.sortType.getter();
  DOCItemSortMode.rawValue.getter();
  unint64_t v52 = v20;
  uint64_t v66 = v21;
  uint64_t v67 = v14 + 8;
  v21(v20, v13);
  NSString v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1000CBC00(v73, v26, (uint64_t *)&unk_1007086D0);
  uint64_t v27 = type metadata accessor for DOCItemSortDescriptor();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v61(v26, 1, v27) == 1)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v29 = v63;
  DOCItemSortDescriptor.sortType.getter();
  uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v65(v26, v27);
  uint64_t v30 = v62;
  DOCItemSortDescriptor.sortType.getter();
  sub_1000BAC0C((unint64_t *)&unk_10071D2C0, (void (*)(uint64_t))&type metadata accessor for DOCItemSortMode);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v71 == v69 && v72 == v70) {
    char v31 = 1;
  }
  else {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = v66;
  v66(v30, v13);
  v32(v29, v13);
  uint64_t v33 = v64;
  sub_1000CBC00(v73, v64, (uint64_t *)&unk_1007086D0);
  if (v61(v33, 1, v27) == 1) {
    goto LABEL_14;
  }
  uint64_t v34 = v31 & 1;
  int v35 = DOCItemSortDescriptor.ascending.getter();
  v65(v33, v27);
  uint64_t v36 = v53;
  uint64_t v50 = v13;
  LODWORD(v73) = v35;
  if (v34)
  {
    id v37 = [self configurationWithScale:1];
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v39 = [self systemImageNamed:v38 withConfiguration:v37];
  }
  else
  {
    id v39 = 0;
  }
  sub_10009E6C4(0, (unint64_t *)&qword_100706740);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = v39;
  id v41 = v36;
  unint64_t v42 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v43 = v52;
  DOCItemSortDescriptor.sortType.getter();
  uint64_t v44 = v57;
  DOCItemSortMode.displayableMode.getter();
  v66(v43, v50);
  DOCItemSortMode.DisplayableMode.accessibilityIdentifierComponent.getter();
  v56(v44, v59);
  uint64_t v45 = self;
  id v46 = v42;
  NSString v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v48 = [v45 sortByMenuButtonForSortIdentifier:v47 ascending:v73 & 1 active:v34];

  if (!v48)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v46 setAccessibilityIdentifier:v48];

  *uint64_t v60 = v46;
}

uint64_t sub_1000BAA5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAAA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAAEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAB34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAB7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BABC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAC0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAC54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAC9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BACE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAD2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAD74(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BADBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAE04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAE4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAE94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAEDC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAF24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BAF6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DOCNavigationController()
{
  return self;
}

uint64_t sub_1000BAFD8()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  else
  {
    uint64_t v1 = sub_100019954();
    *(void *)(v0 + 24) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000BB034()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v1 = sub_100020BC0();
    *(void *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1000BB094(uint64_t a1, uint64_t a2)
{
  sub_1000BB0A0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

void sub_1000BB0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a1;
  v10[6] = a5;
  v13[4] = sub_10006AE44;
  v13[5] = v10;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1000666D8;
  v13[3] = &unk_100699680;
  uint64_t v11 = _Block_copy(v13);
  swift_errorRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v12 = a5;
  swift_release();
  DOCRunInMainThread();
  _Block_release(v11);
}

void sub_1000BB1A4(id a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a3) {
    id v8 = [a3 effectiveTabSwitcherTab];
  }
  else {
    id v8 = [a1 effectiveTabSwitcherTab];
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = (uint64_t *)(v4 + OBJC_IVAR____TtC5Files22DOCHierarchyController__lastBrowsedStateByTab);
  swift_beginAccess();
  id v11 = a1;
  swift_bridgeObjectRetain();
  id v12 = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v28 = *v10;
  *uint64_t v10 = 0x8000000000000000;
  sub_1000BB8DC((uint64_t)v11, a2, (uint64_t)a3, v9, isUniquelyReferenced_nonNull_native);
  *uint64_t v10 = v28;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v14 = (uint64_t *)(v4 + OBJC_IVAR____TtC5Files22DOCHierarchyController_locations);
  swift_beginAccess();
  uint64_t v15 = *v14;
  if (!((unint64_t)*v14 >> 62))
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_6;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  if (!v16) {
    goto LABEL_17;
  }
LABEL_6:
  unint64_t v17 = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((v15 & 0xC000000000000001) != 0)
  {
LABEL_20:
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v17 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_22:
    __break(1u);
    return;
  }
  id v18 = *(id *)(v15 + 8 * v17 + 32);
LABEL_11:
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  id v20 = [v19 sourceIdentifier];

  uint64_t v21 = *(void **)(v4 + OBJC_IVAR____TtC5Files22DOCHierarchyController_sourceObserver);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v23 = [v21 sourceForIdentifier:v22];

  if (v23)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v25 = (void *)Strong;
      sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v27 = (void *)sub_1000BB4AC();
      [v25 hierarchyController:v4 didUpdateLastDisplayedLocationPath:isa anchorLocation:v27 source:v23];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t sub_1000BB4AC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC5Files22DOCHierarchyController__currentUpdateExpectation;
  swift_beginAccess();
  uint64_t updated = type metadata accessor for DOCHierarchyController.UpdateExpectation(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v1, 1, updated))
  {
    uint64_t v3 = (unint64_t *)(v0 + OBJC_IVAR____TtC5Files22DOCHierarchyController_locations);
    swift_beginAccess();
  }
  else
  {
    uint64_t v3 = (unint64_t *)(v1 + *(int *)(updated + 20));
  }
  unint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_6;
    }
LABEL_23:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_23;
  }
LABEL_6:
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
    id v8 = v7;
    swift_bridgeObjectRelease();
    if ([v8 isRoot])
    {
    }
    else
    {
      id v9 = [v8 sourceIdentifier];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;
      if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
    uint64_t v16 = *(void **)(v0 + OBJC_IVAR____TtC5Files22DOCHierarchyController_effectiveRootLocationCandidate);
    if (v16)
    {
      id v17 = v16;
      char v18 = sub_1000BB74C((uint64_t)v17, v4);
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {

        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return (uint64_t)v16;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v7 = *(id *)(v4 + 32);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DOCHierarchyController.UpdateExpectation(uint64_t a1)
{
  return sub_10009E984(a1, qword_10070B608);
}

uint64_t sub_1000BB738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100237AE8);
}

uint64_t sub_1000BB74C(uint64_t a1, unint64_t a2)
{
  return sub_10009EC34(a1, a2, (uint64_t)&unk_1007085C0);
}

uint64_t DOCConcreteLocation.effectiveTabSwitcherTab.getter()
{
  uint64_t v1 = v0;
  sub_1000CBE70(&qword_1007084F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10059B760;
  uint64_t v3 = (void *)DOCDocumentSourceIdentifierRecentDocuments;
  *(void *)(inited + 32) = DOCDocumentSourceIdentifierRecentDocuments;
  *(void *)(inited + 40) = 0;
  unint64_t v4 = (void *)DOCDocumentSourceIdentifierSharedItems;
  *(void *)(inited + 48) = DOCDocumentSourceIdentifierSharedItems;
  *(void *)(inited + 56) = 1;
  id v5 = v3;
  id v6 = v4;
  unint64_t v7 = sub_1000A5074(inited);
  id v8 = [v1 sourceIdentifier];
  id v9 = v8;
  if (!*(void *)(v7 + 16) || (unint64_t v10 = sub_1000A52A4((uint64_t)v8), (v11 & 1) == 0))
  {

    id v13 = [v1 originalSourceIdentifier];
    if (v13)
    {
      if (*(void *)(v7 + 16))
      {
        id v14 = v13;
        unint64_t v15 = sub_1000A52A4((uint64_t)v14);
        if (v16)
        {
          uint64_t v12 = *(void *)(*(void *)(v7 + 56) + 8 * v15);

          swift_bridgeObjectRelease();
          return v12;
        }
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    return 2;
  }
  uint64_t v12 = *(void *)(*(void *)(v7 + 56) + 8 * v10);
  swift_bridgeObjectRelease();

  return v12;
}

void sub_1000BB8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_1000BBA9C(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    id v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 24 * v14;
      NSString v22 = *(void **)v21;
      id v23 = *(void **)(v21 + 16);
      swift_bridgeObjectRelease();

      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      *(void *)(v21 + 16) = a3;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100359450();
    goto LABEL_7;
  }
  sub_1000BBB8C(v17, a5 & 1);
  uint64_t v24 = sub_1000BBA9C(a4);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_15:
    type metadata accessor for DOCTab(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v24;
  id v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  sub_1000BBB3C(v14, a4, a1, a2, a3, v20);
}

unint64_t sub_1000BBA34(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return sub_1000BBAA0(a1, v2);
}

unint64_t sub_1000BBAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1000BBB3C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  id v6 = (void *)(a6[7] + 24 * result);
  *id v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t sub_1000BBB8C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000CBE70(&qword_100711C70);
  char v35 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v32;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 24 * v19;
      long long v36 = *(_OWORD *)v28;
      uint64_t v29 = *(void **)(v28 + 16);
      if ((v35 & 1) == 0)
      {
        id v30 = v29;
        id v31 = (id)v36;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      uint64_t v17 = *(void *)(v7 + 56) + 24 * v16;
      *(_OWORD *)uint64_t v17 = v36;
      *(void *)(v17 + 16) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

void sub_1000BBF88(unint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  int64_t v8 = (int *)type metadata accessor for DOCBrowserHistoryItem(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC5Files27DOCBrowserHistoryDataSource_ignoreExternalUpdates)) {
    return;
  }
  unint64_t v11 = a1 >> 62;
  id v33 = a2;
  if (a2) {
    goto LABEL_9;
  }
  if (v11) {
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_34;
  }
LABEL_5:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v13 = *(id *)(a1 + 32);
  }
  id v33 = v13;
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v11)
  {
    while (1)
    {
      id v31 = a2;
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      if (!v15) {
        goto LABEL_36;
      }
LABEL_11:
      unint64_t v17 = v15 - 1;
      if (__OFSUB__(v15, 1)) {
        break;
      }
      if ((a1 & 0xC000000000000001) != 0) {
        goto LABEL_28;
      }
      if ((v17 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (v17 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_30;
      }
      id v18 = *(id *)(a1 + 8 * v17 + 32);
LABEL_16:
      a2 = v18;
      swift_bridgeObjectRelease();
      if (v11)
      {
        swift_bridgeObjectRetain();
        id v21 = a2;
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        id v20 = a2;
      }
      if (!v19) {
        goto LABEL_31;
      }
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      unint64_t v34 = a1;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (a1 & 0x8000000000000000) != 0
        || (a1 & 0x4000000000000000) != 0)
      {
        a1 = sub_1000BC324(a1);
        unint64_t v34 = a1;
      }
      uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v23)
      {
        uint64_t v24 = v23 - 1;
        BOOL v25 = *(void **)((a1 & 0xFFFFFFFFFFFFFF8) + 8 * v24 + 0x20);
        *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v24;
        specialized Array._endMutation()();

        uint64_t v26 = v33;
        unint64_t v27 = v34;
        uint64_t v28 = &v10[v8[9]];
        *(_OWORD *)uint64_t v28 = 0u;
        *((_OWORD *)v28 + 1) = 0u;
        id v29 = v26;
        id v30 = a3;
        UUID.init()();
        *(void *)&v10[v8[5]] = a2;
        *(void *)&v10[v8[6]] = v27;
        *(void *)&v10[v8[7]] = v33;
        *(void *)&v10[v8[8]] = v30;
        sub_1000BC328((uint64_t)v10);

        sub_1000A5770((uint64_t)v10, type metadata accessor for DOCBrowserHistoryItem);
        return;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_5;
      }
LABEL_34:
      swift_bridgeObjectRelease();
      id v33 = 0;
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v11) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_28:
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_16;
  }
LABEL_10:
  uint64_t v15 = *(void *)(v14 + 16);
  id v16 = a2;
  swift_bridgeObjectRetain();
  if (v15) {
    goto LABEL_11;
  }
LABEL_36:
  swift_bridgeObjectRelease();
  uint64_t v32 = v33;
}

uint64_t sub_1000BC2A8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void sub_1000BC328(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DOCBrowserHistoryItem(0);
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v25 + 64);
  __chkstk_darwin(v4);
  uint64_t v6 = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(0);
  __chkstk_darwin(v6 - 8);
  int64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState(0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CBE70(&qword_10070E838);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*((unsigned char *)v1 + OBJC_IVAR____TtC5Files27DOCBrowserHistoryDataSource_ignoreExternalUpdates) & 1) == 0)
  {
    uint64_t v15 = *(int *)(v4 + 20);
    uint64_t v24 = a1;
    id v16 = *(id *)(a1 + v15);
    dispatch thunk of DOCThreadSafeState.withSharedAccess<A>(_:)();
    sub_1000A5858((uint64_t)v11, (uint64_t)v8, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet);
    sub_1000A5770((uint64_t)v11, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState);
    sub_1000CBC00((uint64_t)v8, (uint64_t)v14, &qword_10070E838);
    sub_1000A5770((uint64_t)v8, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v14, 1, v4) == 1)
    {
      sub_1000CBBA4((uint64_t)v14, &qword_10070E838);

      uint64_t v17 = v24;
    }
    else
    {
      id v18 = *(id *)&v14[*(int *)(v4 + 20)];
      sub_1000A5770((uint64_t)v14, type metadata accessor for DOCBrowserHistoryItem);
      sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
      id v19 = v16;
      char v20 = static NSObject.== infix(_:_:)();

      uint64_t v17 = v24;
      if (v20) {
        return;
      }
    }
    if (sub_1000BC7AC(v17))
    {
      sub_1000A5858(v17, (uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DOCBrowserHistoryItem);
      unint64_t v21 = (*(unsigned __int8 *)(v25 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v2;
      sub_1000BC744((uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, type metadata accessor for DOCBrowserHistoryItem);
      id v23 = v2;
      sub_1000877C0();
      swift_release();
    }
  }
}

uint64_t sub_1000BC6DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000BC744(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000BC7AC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DOCBrowserHistoryItem(0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)(a1 + *(int *)(v4 + 28));
  id v8 = [v7 sourceIdentifier];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
LABEL_10:
    sub_1000A5858(a1, (uint64_t)v6, type metadata accessor for DOCBrowserHistoryItem);
    goto LABEL_11;
  }
  if (![v7 isContainer])
  {
    sub_1000A5858(a1, (uint64_t)v6, type metadata accessor for DOCBrowserHistoryItem);
LABEL_14:
    char v17 = 0;
    goto LABEL_12;
  }
  unsigned __int8 v15 = [v7 canBeRestored];
  sub_1000A5858(a1, (uint64_t)v6, type metadata accessor for DOCBrowserHistoryItem);
  if ((v15 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  id v16 = *(uint64_t (**)(char *))(v1 + OBJC_IVAR____TtC5Files27DOCBrowserHistoryDataSource_allowedItemsFilter);
  swift_retain();
  char v17 = v16(v6);
  swift_release();
LABEL_12:
  sub_1000A5770((uint64_t)v6, type metadata accessor for DOCBrowserHistoryItem);
  return v17 & 1;
}

uint64_t variable initialization expression of DOCBrowserContainedViewController.uipDocLandingBackgroundAllowed()
{
  return 1;
}

uint64_t sub_1000BC9B8(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DOCHierarchyController.FetchingOperationToken(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void **)v9;
  int v11 = *(unsigned __int8 *)(v9 + 8);

  return sub_1000C0854(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1000BCA6C(void *a1)
{
  return sub_1000BF4D4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(unsigned __int8 *)(v1 + 57));
}

void sub_1000BCA84(uint64_t a1, uint64_t a2)
{
  sub_100070780(a1, a2, v2);
}

void sub_1000BCA8C(uint64_t a1, char a2, void *a3, unint64_t a4, void *a5)
{
  unint64_t v9 = a4 >> 62;
  if (a4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v24) {
      return;
    }
  }
  else if (!*(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  if (!a5)
  {
LABEL_9:
    sub_1000BCD84(a3, a5, a2 & 1, 0, 1, 0, 0);
    return;
  }
  id v25 = a5;
  id v10 = [v25 sourceIdentifier];
  id v11 = [a3 sourceIdentifier];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {

    swift_bridgeObjectRelease_n();
LABEL_8:

    goto LABEL_9;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain_n();
  id v17 = v25;
  char v18 = sub_1000BB74C((uint64_t)v17, a4);
  swift_bridgeObjectRelease();
  if (v18)
  {
  }
  else
  {
    if (v9)
    {
      swift_bridgeObjectRetain();
      id v20 = v17;
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v21 < 0)
      {
LABEL_32:
        __break(1u);
        return;
      }
    }
    else
    {
      id v19 = v17;
    }
    sub_10051546C(0, 0, (uint64_t)v17);
  }
  if (!(a4 >> 62))
  {
    if (*(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_19;
    }
LABEL_26:
    id v23 = 0;
    goto LABEL_27;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_26;
  }
LABEL_19:
  if ((a4 & 0xC000000000000001) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_22;
  }
  if (!*(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_32;
  }
  id v22 = *(id *)(a4 + 32);
LABEL_22:
  id v23 = v22;
LABEL_27:
  id v26 = v23;
  sub_100224654(a4, v23, 0, 1, 0, DOCSplitBrowserViewController.didCommitPreview(of:), 0);

  swift_bridgeObjectRelease();
}

uint64_t sub_1000BCD84(void *a1, void *a2, int a3, int a4, int a5, void (*a6)(void), uint64_t a7)
{
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  int v43 = a5;
  int v48 = a3;
  int v49 = a4;
  NSString v47 = a2;
  uint64_t v44 = a1;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v41 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000CBE70((uint64_t *)&unk_10070B640);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  char v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  char v18 = (char *)&v39 - v17;
  uint64_t v19 = OBJC_IVAR____TtC5Files22DOCHierarchyController_isResetBeingPerformed;
  DOCGuardAssert(_:_:logOnlyIfDebugging:logOnlyIfUnitTesting:)();
  v7[v19] = 1;
  uint64_t v20 = (uint64_t)&v7[OBJC_IVAR____TtC5Files22DOCHierarchyController_loadingDisabledOperation];
  swift_beginAccess();
  sub_1000CBC00(v20, (uint64_t)v16, (uint64_t *)&unk_10070B640);
  uint64_t v21 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  uint64_t v22 = *(void *)(v21 - 8);
  id v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v16, 1, v21);
  uint64_t v42 = v8;
  if (v24 == 1)
  {
    uint64_t v25 = (uint64_t)&v7[OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation];
    swift_beginAccess();
    sub_1000CBC00(v25, (uint64_t)v18, (uint64_t *)&unk_10070B640);
    sub_1000CBBA4((uint64_t)v16, (uint64_t *)&unk_10070B640);
  }
  else
  {
    sub_1000C194C((uint64_t)v16, (uint64_t)v18, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
  }
  uint64_t v27 = v46;
  id v26 = v47;
  char v28 = v43;
  if (v23(v18, 1, v21) == 1)
  {
    sub_1000CBBA4((uint64_t)v18, (uint64_t *)&unk_10070B640);
    id v30 = v44;
    id v29 = v45;
  }
  else
  {
    char v31 = v18[*(int *)(v21 + 24)];
    sub_1000C1DEC((uint64_t)v18, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    id v30 = v44;
    id v29 = v45;
    if (v31)
    {
LABEL_8:
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = v7;
      *(void *)(v32 + 24) = v30;
      *(void *)(v32 + 32) = v29;
      *(void *)(v32 + 40) = v27;
      *(unsigned char *)(v32 + 48) = v48 & 1;
      *(unsigned char *)(v32 + 49) = v49 & 1;
      *(unsigned char *)(v32 + 50) = v28 & 1;
      *(void *)(v32 + 56) = v26;
      aBlock[4] = sub_10023F56C;
      aBlock[5] = v32;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000666D8;
      aBlock[3] = &unk_10069A968;
      id v33 = _Block_copy(aBlock);
      unint64_t v34 = v7;
      char v35 = v30;
      sub_1000C0640((uint64_t)v29);
      id v36 = v26;
      static DispatchQoS.unspecified.getter();
      uint64_t v50 = _swiftEmptyArrayStorage;
      sub_100076EA4((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000CBE70((uint64_t *)&unk_100705390);
      sub_100073DF0((unint64_t *)&qword_100706780, (uint64_t *)&unk_100705390);
      uint64_t v37 = v42;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v33);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v37);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v40);
      return swift_release();
    }
  }
  if (v7[OBJC_IVAR____TtC5Files22DOCHierarchyController_shouldForceChangeInPreparationQueue]) {
    goto LABEL_8;
  }
  return sub_1000BD320(v7, v30, v29, v27, v48 & 1, v49 & 1, v28 & 1, v26);
}

uint64_t sub_1000BD320(char *a1, void *a2, void (*a3)(void), uint64_t a4, int a5, int a6, int a7, void *a8)
{
  uint64_t v54 = a8;
  int v55 = a5;
  int v56 = a7;
  int v53 = a6;
  uint64_t v58 = a4;
  uint64_t v59 = a3;
  uint64_t v60 = a2;
  uint64_t v52 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  int v57 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000CBE70((uint64_t *)&unk_10070B640);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v50 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v50 - v18;
  uint64_t v20 = (uint64_t)&a1[OBJC_IVAR____TtC5Files22DOCHierarchyController_loadingDisabledOperation];
  swift_beginAccess();
  sub_1000CBC00(v20, (uint64_t)v17, (uint64_t *)&unk_10070B640);
  uint64_t v21 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  uint64_t v22 = *(void *)(v21 - 8);
  id v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v17, 1, v21);
  uint64_t v51 = v9;
  if (v24 == 1)
  {
    uint64_t v25 = (uint64_t)&a1[OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation];
    swift_beginAccess();
    sub_1000CBC00(v25, (uint64_t)v19, (uint64_t *)&unk_10070B640);
    sub_1000CBBA4((uint64_t)v17, (uint64_t *)&unk_10070B640);
  }
  else
  {
    sub_1000C194C((uint64_t)v17, (uint64_t)v19, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  if (v23(v19, 1, v21) == 1) {
    uint64_t v26 = sub_1000CBBA4((uint64_t)v19, (uint64_t *)&unk_10070B640);
  }
  else {
    uint64_t v26 = sub_1000C1DEC((uint64_t)v19, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
  }
  uint64_t v27 = v60;
  __chkstk_darwin(v26);
  *(&v50 - 2) = (uint64_t)v27;
  *(&v50 - 1) = (uint64_t)a1;
  DOCGuardAssert(_:_:logOnlyIfDebugging:logOnlyIfUnitTesting:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v14, 1, 1, v21);
  sub_1000C19B4((uint64_t)v14, &OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation);
  uint64_t v61 = 0x203A7465736572;
  uint64_t v62 = 0xE700000000000000;
  id v28 = [v27 shortDescription];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v31 = v30;

  v32._countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_1000BDAB0(v61, v62);
  swift_bridgeObjectRelease();
  if ([*(id *)&a1[OBJC_IVAR____TtC5Files22DOCHierarchyController_configuration] allowsDisplaying:v27])
  {
    uint64_t v34 = swift_allocObject();
    char v35 = v54;
    *(void *)(v34 + 16) = v54;
    *(void *)(v34 + 24) = a1;
    int v36 = v53 & 1;
    *(unsigned char *)(v34 + 32) = v36;
    uint64_t v37 = v58;
    uint64_t v38 = (uint64_t)v59;
    *(void *)(v34 + 40) = v33;
    *(void *)(v34 + 48) = v38;
    *(void *)(v34 + 56) = v37;
    id v39 = v35;
    a1;
    swift_retain();
    sub_1000C0640(v38);
    sub_1000C4CFC(v27, v55 & 1, v36, v56 & 1, (uint64_t)sub_1000C0190, v34);
    swift_release();
  }
  else
  {
    uint64_t v40 = v57;
    static Logger.UI.getter();
    uint64_t v41 = v27;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = (void *)swift_slowAlloc();
      uint64_t v61 = (uint64_t)v41;
      *(_DWORD *)uint64_t v44 = 138412290;
      uint64_t v45 = v41;
      uint64_t v40 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v60 = v41;

      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Tried to reset with location %@, which is not allowed by the configuration", v44, 0xCu);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v42 = v41;
    }
    uint64_t v46 = v59;
    uint64_t v48 = v51;
    uint64_t v47 = v52;

    (*(void (**)(char *, uint64_t))(v48 + 8))(v40, v47);
    sub_1000460B0(v33, 0);
    a1[OBJC_IVAR____TtC5Files22DOCHierarchyController_isResetBeingPerformed] = 0;
    if (v46) {
      v46();
    }
  }
  return swift_release();
}

uint64_t sub_1000BD990(void *a1)
{
  if (![v1 forSavingDocuments]) {
    return 1;
  }
  id v3 = [a1 sourceIdentifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if (v9) {
      return result;
    }
    id v11 = [a1 node];
    if (!v11) {
      return 1;
    }
    unsigned int v12 = [v11 isFolder];
    swift_unknownObjectRelease();
    if (v12) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1000BDAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  os_log_type_t v43 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for DispatchTime();
  uint64_t v41 = *(void *)(v48 - 8);
  uint64_t v7 = __chkstk_darwin(v48);
  char v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v40 = (char *)&v34 - v10;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.UI.getter();
  uint64_t v15 = v2;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v37 = v11;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v38 = v9;
    uint64_t v39 = a2;
    uint64_t v19 = (uint8_t *)v18;
    char v35 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 138412290;
    uint64_t v36 = v12;
    aBlock[0] = v15;
    uint64_t v20 = v15;
    uint64_t v12 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v35 = v15;

    uint64_t v11 = v37;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Suspending work (locationChangePreparationQueue) in hierarchy controller %@", v19, 0xCu);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    char v9 = v38;
    a2 = v39;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v16 = v15;
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  type metadata accessor for DOCHierarchyController.PreventChangeAssertion(0);
  uint64_t v21 = swift_allocObject();
  swift_bridgeObjectRetain();
  UUID.init()();
  *(unsigned char *)(v21
           + OBJC_IVAR____TtCC5Files22DOCHierarchyControllerP33_6DDE472ADD076946F61E7AD97D4F5D0222PreventChangeAssertion_wasTimeoutAutoDeactivated) = 0;
  uint64_t v22 = OBJC_IVAR____TtCC5Files22DOCHierarchyControllerP33_6DDE472ADD076946F61E7AD97D4F5D0222PreventChangeAssertion_active;
  id v23 = (void *)(v21
                 + OBJC_IVAR____TtCC5Files22DOCHierarchyControllerP33_6DDE472ADD076946F61E7AD97D4F5D0222PreventChangeAssertion_reason);
  void *v23 = a1;
  v23[1] = a2;
  *(unsigned char *)(v21 + v22) = 1;
  int v24 = (Class *)((char *)&v15->isa + OBJC_IVAR____TtC5Files22DOCHierarchyController_preventImmediateChangeAssertions);
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  dispatch_suspend(*(dispatch_object_t *)((char *)&v15->isa
                                        + OBJC_IVAR____TtC5Files22DOCHierarchyController_locationChangePreparationQueue));
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v25 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  uint64_t v26 = v40;
  + infix(_:_:)();
  uint64_t v41 = *(void *)(v41 + 8);
  ((void (*)(char *, uint64_t))v41)(v9, v48);
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = v21;
  aBlock[4] = sub_10023E5C8;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_100699CC0;
  uint64_t v29 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v30 = v43;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100076EA4((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_100073DF0((unint64_t *)&qword_100706780, (uint64_t *)&unk_100705390);
  char v31 = v46;
  uint64_t v32 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v47);
  ((void (*)(char *, uint64_t))v41)(v26, v48);
  return v21;
}

uint64_t type metadata accessor for DOCHierarchyController.PreventChangeAssertion(uint64_t a1)
{
  return sub_10009E984(a1, qword_10070B210);
}

void sub_1000BE198(void *a1, void *a2, char *a3, uint64_t a4, void (*a5)(void), uint64_t a6, int a7, int a8)
{
  int v164 = a8;
  int v165 = a7;
  v168 = a2;
  v162 = (void *)type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  uint64_t v173 = *(v162 - 1);
  __chkstk_darwin(v162);
  uint64_t v153 = (uint64_t)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = sub_1000CBE70((uint64_t *)&unk_10070B690);
  uint64_t v14 = __chkstk_darwin(v166);
  uint64_t v155 = (uint64_t)&v147 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v158 = (char *)&v147 - v17;
  __chkstk_darwin(v16);
  v170 = (char *)&v147 - v18;
  uint64_t v19 = sub_1000CBE70((uint64_t *)&unk_10070B640);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (char *)&v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v147 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v157 = (uint64_t)&v147 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v156 = (uint64_t)&v147 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v160 = (uint64_t)&v147 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v159 = (uint64_t)&v147 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v167 = (uint64_t)&v147 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v147 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (uint64_t)&v147 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v151 = (uint64_t)&v147 - v43;
  __chkstk_darwin(v42);
  uint64_t v152 = (uint64_t)&v147 - v44;
  v169 = (char *)a4;
  uint64_t v161 = swift_projectBox();
  v172 = a3;
  unint64_t v45 = (unint64_t)&a3[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
  swift_beginAccess();
  if (*(void *)v45 >> 62)
  {
    id v146 = a1;
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v46 = *(void *)((*(void *)v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v47 = a1;
  }
  v154 = v25;
  v174 = a1;
  v171 = a5;
  uint64_t v163 = a6;
  uint64_t v148 = v41;
  if (v46 >= 2)
  {
    uint64_t v41 = *(void *)v45;
    a6 = *(void *)v45 >> 62;
    if (a6) {
      goto LABEL_94;
    }
    uint64_t v49 = *(void *)((*(void *)v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v50 = -v49;
    if (!__OFSUB__(0, v49)) {
      goto LABEL_7;
    }
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
    return;
  }
  char v48 = 0;
  while (1)
  {
    uint64_t v69 = (uint64_t)v170;
    unint64_t v45 = *(void *)v45;
    v149 = v22;
    if (v45 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v70 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v71 = v162;
    uint64_t v22 = v169;
    v150 = v38;
    if (!v70)
    {
      uint64_t v76 = v162;
      swift_bridgeObjectRelease();
LABEL_54:
      uint64_t v75 = v168;
LABEL_55:
      uint64_t v77 = swift_allocObject();
      char v78 = v172;
      *(void *)(v77 + 16) = v22;
      *(void *)(v77 + 24) = v78;
      uint64_t v79 = v174;
      *(void *)(v77 + 32) = v174;
      *(void *)(v77 + 40) = v75;
      uint64_t v80 = v171;
      *(void *)(v77 + 48) = v79;
      *(void *)(v77 + 56) = v80;
      *(void *)(v77 + 64) = a6;
      *(unsigned char *)(v77 + 72) = v165 & 1;
      *(unsigned char *)(v77 + 73) = v164 & 1;
      uint64_t v81 = (uint64_t)&v78[OBJC_IVAR____TtC5Files22DOCHierarchyController_loadingDisabledOperation];
      swift_beginAccess();
      uint64_t v82 = v159;
      sub_1000CBC00(v81, v159, (uint64_t *)&unk_10070B640);
      uint64_t v83 = v173;
      v170 = *(char **)(v173 + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, void *))v170)(v82, 1, v76) == 1)
      {
        unsigned int v84 = &v78[OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation];
        swift_beginAccess();
        uint64_t v85 = (uint64_t)v84;
        uint64_t v83 = v173;
        v162 = (void *)v77;
        uint64_t v86 = v82;
        uint64_t v87 = v167;
        sub_1000CBC00(v85, v167, (uint64_t *)&unk_10070B640);
        id v88 = v75;
        UIMenuElementSize v89 = v78;
        swift_retain();
        swift_retain();
        id v90 = v79;
        uint64_t v77 = (uint64_t)v162;
        sub_1000CBBA4(v86, (uint64_t *)&unk_10070B640);
      }
      else
      {
        uint64_t v91 = v82;
        uint64_t v87 = v167;
        sub_1000C194C(v91, v167, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
        (*(void (**)(uint64_t, void, uint64_t, void *))(v83 + 56))(v87, 0, 1, v76);
        id v92 = v75;
        Swift::OpaquePointer v93 = v78;
        swift_retain();
        swift_retain();
        id v94 = v79;
      }
      uint64_t v95 = (uint64_t)v158;
      uint64_t v96 = v161;
      swift_beginAccess();
      uint64_t v97 = v160;
      sub_1000C1CF0(v96, v160, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
      uint64_t v98 = *(void **)(v83 + 56);
      uint64_t v173 = v83 + 56;
      v162 = v98;
      ((void (*)(uint64_t, void, uint64_t, void *))v98)(v97, 0, 1, v76);
      uint64_t v99 = v95 + *(int *)(v166 + 48);
      sub_1000CBC00(v87, v95, (uint64_t *)&unk_10070B640);
      sub_1000CBC00(v97, v99, (uint64_t *)&unk_10070B640);
      unint64_t v100 = (uint64_t (*)(uint64_t, uint64_t, void *))v170;
      uint64_t v101 = v76;
      if (((unsigned int (*)(uint64_t, uint64_t, void *))v170)(v95, 1, v76) == 1)
      {
        sub_1000CBBA4(v97, (uint64_t *)&unk_10070B640);
        sub_1000CBBA4(v87, (uint64_t *)&unk_10070B640);
        int v102 = ((uint64_t (*)(uint64_t, uint64_t, void *))v170)(v99, 1, v76);
        uint64_t v103 = v174;
        if (v102 == 1)
        {
          sub_1000CBBA4(v95, (uint64_t *)&unk_10070B640);
LABEL_65:
          sub_1000C4AD0((uint64_t)v169, v172, v103, v168, v103, (uint64_t)v171, v163, v165 & 1, v164 & 1);

LABEL_83:
          swift_release();
          return;
        }
      }
      else
      {
        uint64_t v104 = v156;
        sub_1000CBC00(v95, v156, (uint64_t *)&unk_10070B640);
        int v105 = v100(v99, 1, v76);
        uint64_t v103 = v174;
        if (v105 != 1)
        {
          uint64_t v107 = v99;
          id v108 = v101;
          uint64_t v109 = v174;
          uint64_t v110 = v97;
          uint64_t v111 = v153;
          sub_1000C194C(v107, v153, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
          LODWORD(v159) = static UUID.== infix(_:_:)();
          sub_1000C1DEC(v111, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
          uint64_t v112 = v110;
          uint64_t v103 = v109;
          uint64_t v101 = v108;
          sub_1000CBBA4(v112, (uint64_t *)&unk_10070B640);
          sub_1000CBBA4(v167, (uint64_t *)&unk_10070B640);
          sub_1000C1DEC(v104, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
          sub_1000CBBA4(v95, (uint64_t *)&unk_10070B640);
          uint64_t v106 = v157;
          if (v159) {
            goto LABEL_65;
          }
LABEL_66:
          id v113 = v172;
          sub_1000562C0();
          char valid = dispatch thunk of DOCAssertionCollection.hasValidAssertions.getter();
          swift_release();
          if (valid)
          {

            uint64_t v115 = swift_allocObject();
            *(void *)(v115 + 16) = sub_10023F690;
            *(void *)(v115 + 24) = v77;
            uint64_t v116 = (uint64_t (**)())&v113[OBJC_IVAR____TtC5Files22DOCHierarchyController_delayedLoadingBlock];
            uint64_t v117 = *(void *)&v113[OBJC_IVAR____TtC5Files22DOCHierarchyController_delayedLoadingBlock];
            void *v116 = sub_1000D8564;
            v116[1] = (uint64_t (*)())v115;
            sub_1000A7258(v117);
            return;
          }
          uint64_t v118 = (uint64_t)&v113[OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation];
          swift_beginAccess();
          sub_1000CBC00(v118, v106, (uint64_t *)&unk_10070B640);
          swift_beginAccess();
          uint64_t v119 = (uint64_t)v154;
          sub_1000C1CF0(v96, (uint64_t)v154, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
          ((void (*)(uint64_t, void, uint64_t, void *))v162)(v119, 0, 1, v101);
          uint64_t v120 = v106;
          uint64_t v121 = v155;
          uint64_t v122 = v155 + *(int *)(v166 + 48);
          sub_1000CBC00(v120, v155, (uint64_t *)&unk_10070B640);
          uint64_t v123 = v121;
          sub_1000CBC00(v119, v122, (uint64_t *)&unk_10070B640);
          UIImage_optional v124 = (uint64_t (*)(uint64_t, uint64_t, void *))v170;
          if (((unsigned int (*)(uint64_t, uint64_t, void *))v170)(v121, 1, v101) == 1)
          {
            sub_1000CBBA4(v119, (uint64_t *)&unk_10070B640);
            uint64_t v123 = v155;
            sub_1000CBBA4(v120, (uint64_t *)&unk_10070B640);
            int v125 = v124(v122, 1, v101);
            id v126 = v174;
            if (v125 == 1)
            {
              sub_1000CBBA4(v123, (uint64_t *)&unk_10070B640);
LABEL_81:
              uint64_t v142 = (uint64_t)v150;
              ((void (*)(char *, uint64_t, uint64_t, void *))v162)(v150, 1, 1, v101);
              sub_1000C19B4(v142, &OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation);
              goto LABEL_82;
            }
          }
          else
          {
            uint64_t v136 = v121;
            uint64_t v137 = (uint64_t)v149;
            sub_1000CBC00(v136, (uint64_t)v149, (uint64_t *)&unk_10070B640);
            if (v124(v122, 1, v101) != 1)
            {
              uint64_t v139 = v137;
              uint64_t v140 = v153;
              sub_1000C194C(v122, v153, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
              char v141 = static UUID.== infix(_:_:)();
              sub_1000C1DEC(v140, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
              sub_1000CBBA4((uint64_t)v154, (uint64_t *)&unk_10070B640);
              sub_1000CBBA4(v157, (uint64_t *)&unk_10070B640);
              sub_1000C1DEC(v139, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
              sub_1000CBBA4(v123, (uint64_t *)&unk_10070B640);
              id v126 = v174;
              if (v141) {
                goto LABEL_81;
              }
LABEL_82:
              v171(0);

              goto LABEL_83;
            }
            sub_1000CBBA4((uint64_t)v154, (uint64_t *)&unk_10070B640);
            sub_1000CBBA4(v157, (uint64_t *)&unk_10070B640);
            sub_1000C1DEC(v137, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            id v126 = v174;
          }
          sub_1000CBBA4(v123, (uint64_t *)&unk_10070B690);
          goto LABEL_82;
        }
        sub_1000CBBA4(v97, (uint64_t *)&unk_10070B640);
        sub_1000CBBA4(v167, (uint64_t *)&unk_10070B640);
        sub_1000C1DEC(v104, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
      }
      sub_1000CBBA4(v95, (uint64_t *)&unk_10070B690);
      uint64_t v106 = v157;
      goto LABEL_66;
    }
    unint64_t v72 = v70 - 1;
    if (__OFSUB__(v70, 1)) {
      break;
    }
    if ((v45 & 0xC000000000000001) != 0) {
      goto LABEL_91;
    }
    if ((v72 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v72 < *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v73 = *(id *)(v45 + 8 * v72 + 32);
      goto LABEL_49;
    }
    __break(1u);
LABEL_94:
    swift_bridgeObjectRetain_n();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v50 = -v49;
    if (__OFSUB__(0, v49)) {
      goto LABEL_96;
    }
LABEL_7:
    if ((unint64_t)(v50 + 1) >= 2)
    {
      Swift::Int v51 = v49 - 2;
      if (__OFSUB__(v49, 2)) {
        goto LABEL_102;
      }
      if (v49 < v51) {
        goto LABEL_103;
      }
      if (!a6)
      {
LABEL_10:
        uint64_t v52 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_15;
      }
    }
    else
    {
      if (v49 < 0) {
        goto LABEL_101;
      }
      Swift::Int v51 = 0;
      if (!a6) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_15:
    if (v52 < v51) {
      goto LABEL_97;
    }
    if (v51 < 0) {
      goto LABEL_98;
    }
    if (a6)
    {
      swift_bridgeObjectRetain();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v53 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v53 < v49) {
      goto LABEL_99;
    }
    if (v49 < 0) {
      goto LABEL_100;
    }
    if ((v41 & 0xC000000000000001) != 0 && v51 != v49)
    {
      if (v51 >= (unint64_t)v49) {
        goto LABEL_104;
      }
      sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
      Swift::Int v54 = v51;
      do
      {
        Swift::Int v55 = v54 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v54);
        Swift::Int v54 = v55;
      }
      while (v49 != v55);
    }
    if (a6)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      uint64_t v56 = v58;
      Swift::Int v51 = v59;
      unint64_t v57 = v60;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v56 = (v41 & 0xFFFFFFFFFFFFFF8) + 32;
      unint64_t v57 = (2 * v49) | 1;
    }
    a1 = v174;
    if (v51 == v57 >> 1)
    {
      swift_unknownObjectRelease();
      char v48 = 0;
    }
    else
    {
      if (v51 >= (uint64_t)(v57 >> 1)) {
        goto LABEL_105;
      }
      id v61 = *(id *)(v56 + 8 * v51);
      swift_unknownObjectRelease();
      uint64_t v41 = (uint64_t)[v61 sourceIdentifier];
      uint64_t v62 = (void *)DOCDocumentSourceIdentifierRecentDocuments;
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v65 = v64;
      if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v66) {
        char v48 = 1;
      }
      else {
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      id v68 = v62;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v174;
    }
    a6 = v163;
  }
  __break(1u);
LABEL_91:
  id v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_49:
  unint64_t v74 = v73;
  swift_bridgeObjectRelease();
  sub_10009E6C4(0, (unint64_t *)&qword_100706710);
  if ((static NSObject.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v76 = v71;

    goto LABEL_54;
  }
  uint64_t v75 = v168;
  if (v48)
  {
    uint64_t v76 = v71;

    goto LABEL_55;
  }
  char v127 = &v172[OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation];
  swift_beginAccess();
  uint64_t v128 = v152;
  sub_1000CBC00((uint64_t)v127, v152, (uint64_t *)&unk_10070B640);
  uint64_t v129 = v161;
  swift_beginAccess();
  uint64_t v130 = v151;
  sub_1000C1CF0(v129, v151, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
  uint64_t v131 = v173;
  uint64_t v132 = *(void **)(v173 + 56);
  v169 = (char *)(v173 + 56);
  v168 = v132;
  ((void (*)(uint64_t, void, uint64_t, void *))v132)(v130, 0, 1, v71);
  uint64_t v133 = v69 + *(int *)(v166 + 48);
  sub_1000CBC00(v128, v69, (uint64_t *)&unk_10070B640);
  sub_1000CBC00(v130, v133, (uint64_t *)&unk_10070B640);
  v134 = *(unsigned int (**)(uint64_t, uint64_t, void *))(v131 + 48);
  if (v134(v69, 1, v71) == 1)
  {
    sub_1000CBBA4(v130, (uint64_t *)&unk_10070B640);
    uint64_t v69 = (uint64_t)v170;
    sub_1000CBBA4(v128, (uint64_t *)&unk_10070B640);
    if (v134(v133, 1, v71) == 1)
    {
      sub_1000CBBA4(v69, (uint64_t *)&unk_10070B640);
      uint64_t v135 = v171;
      goto LABEL_85;
    }
LABEL_79:
    sub_1000CBBA4(v69, (uint64_t *)&unk_10070B690);
    v171(1);
  }
  else
  {
    uint64_t v138 = v148;
    sub_1000CBC00(v69, v148, (uint64_t *)&unk_10070B640);
    if (v134(v133, 1, v71) == 1)
    {
      sub_1000CBBA4(v151, (uint64_t *)&unk_10070B640);
      sub_1000CBBA4(v152, (uint64_t *)&unk_10070B640);
      sub_1000C1DEC(v138, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
      goto LABEL_79;
    }
    uint64_t v143 = v153;
    sub_1000C194C(v133, v153, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    char v144 = static UUID.== infix(_:_:)();
    sub_1000C1DEC(v143, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    sub_1000CBBA4(v151, (uint64_t *)&unk_10070B640);
    sub_1000CBBA4(v152, (uint64_t *)&unk_10070B640);
    sub_1000C1DEC(v138, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    sub_1000CBBA4(v69, (uint64_t *)&unk_10070B640);
    uint64_t v135 = v171;
    if (v144)
    {
LABEL_85:
      uint64_t v145 = (uint64_t)v150;
      ((void (*)(char *, uint64_t, uint64_t, void *))v168)(v150, 1, 1, v71);
      sub_1000C19B4(v145, &OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation);
    }
    v135(1);
  }
}

uint64_t sub_1000BF4D4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, int a7, int a8)
{
  int v84 = a8;
  int v83 = a7;
  uint64_t v101 = a6;
  int v102 = a5;
  uint64_t v99 = a1;
  uint64_t v97 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v81 = (uint64_t)v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_1000CBE70((uint64_t *)&unk_10070B690);
  __chkstk_darwin(v93);
  uint64_t v95 = (uint64_t)v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CBE70((uint64_t *)&unk_10070B640);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v82 = (char *)v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v85 = (uint64_t)v79 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  *(void *)&long long v103 = (char *)v79 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)v79 - v20;
  __chkstk_darwin(v19);
  uint64_t v94 = (uint64_t)v79 - v22;
  uint64_t v23 = sub_1000CBE70(&qword_10070B718);
  __chkstk_darwin(v23 - 8);
  id v90 = (char *)v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for DOCAnalyticsActionEvent.ViewMode();
  uint64_t v25 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v91 = (char *)v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DOCAnalyticsActionEvent.Source();
  __chkstk_darwin(v27 - 8);
  id v88 = (char *)v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DOCAnalyticsActionEvent.FileProvider();
  __chkstk_darwin(v29 - 8);
  uint64_t v30 = type metadata accessor for DOCAnalyticsActionEvent.Action();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)v79 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for DOCAnalyticsActionEvent();
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v35 = (char *)v79 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = swift_projectBox();
  id v98 = a2;
  id v36 = [a2 fileProviderItem];
  uint64_t v100 = a3;
  if (!v36) {
    goto LABEL_12;
  }
  uint64_t v37 = v36;
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v33, enum case for DOCAnalyticsActionEvent.Action.enumerate(_:), v30);
  uint64_t v38 = *(void **)(a3 + OBJC_IVAR____TtC5Files22DOCHierarchyController_configuration);
  sub_1000CBE70((uint64_t *)&unk_1007084E0);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1005A04F0;
  *(void *)(v39 + 32) = v37;
  uint64_t v105 = v39;
  specialized Array._endMutation()();
  v79[1] = v38;
  id v80 = v37;
  DOCAnalyticsActionEvent.FileProvider.init(items:)();
  id v40 = [self mainBundle];
  id v41 = [v40 bundleIdentifier];

  if (v41)
  {
    v79[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    v79[0] = 0;
  }
  id v42 = [v98 sourceIdentifier:v79[0]];
  DOCAnalyticsActionEvent.Source.init(sourceIdentifier:)();
  type metadata accessor for DOCBrowserContainerController();
  uint64_t v43 = swift_dynamicCastClass();
  if (!v43
    || (uint64_t v44 = (void *)(v43 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController),
        swift_beginAccess(),
        !*v44)
    || (type metadata accessor for DOCItemCollectionViewController(0), (uint64_t v45 = swift_dynamicCastClass()) == 0))
  {
    uint64_t v50 = (uint64_t)v90;
    uint64_t v51 = v89;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v90, 1, 1, v89);
    (*(void (**)(char *, void, uint64_t))(v25 + 104))(v91, enum case for DOCAnalyticsActionEvent.ViewMode.unknown(_:), v51);
    sub_1000CBBA4(v50, &qword_10070B718);
    goto LABEL_11;
  }
  uint64_t v46 = (uint64_t *)(v45 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
  swift_beginAccess();
  uint64_t v47 = *v46;
  if ((unint64_t)*v46 < 3)
  {
    char v48 = v90;
    uint64_t v49 = v89;
    (*(void (**)(char *, void, uint64_t))(v25 + 104))(v90, *(unsigned int *)*(&off_10069AB60 + v47), v89);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v48, 0, 1, v49);
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v91, v48, v49);
LABEL_11:
    DOCAnalyticsActionEvent.init(actionType:configuration:provider:bundleIdentifier:source:viewMode:)();
    type metadata accessor for DOCAnalyticsManager();
    uint64_t v52 = (void *)static DOCAnalyticsManager.shared.getter();
    DOCAnalyticsManager.sendActionEvent(_:)();

    (*(void (**)(char *, uint64_t))(v86 + 8))(v35, v87);
    a3 = v100;
LABEL_12:
    uint64_t v53 = a3 + OBJC_IVAR____TtC5Files22DOCHierarchyController_loadingDisabledOperation;
    swift_beginAccess();
    sub_1000CBC00(v53, (uint64_t)v21, (uint64_t *)&unk_10070B640);
    uint64_t v54 = v96;
    Swift::Int v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48);
    uint64_t v56 = v97;
    if (v55(v21, 1, v97) == 1)
    {
      uint64_t v57 = a3 + OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation;
      swift_beginAccess();
      uint64_t v58 = v94;
      sub_1000CBC00(v57, v94, (uint64_t *)&unk_10070B640);
      sub_1000CBBA4((uint64_t)v21, (uint64_t *)&unk_10070B640);
    }
    else
    {
      uint64_t v58 = v94;
      sub_1000C194C((uint64_t)v21, v94, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v58, 0, 1, v56);
    }
    uint64_t v59 = v103;
    uint64_t v60 = v92;
    swift_beginAccess();
    sub_1000C1CF0(v60, v59, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    id v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
    v61(v59, 0, 1, v56);
    uint64_t v62 = v95;
    uint64_t v63 = v95 + *(int *)(v93 + 48);
    sub_1000CBC00(v58, v95, (uint64_t *)&unk_10070B640);
    sub_1000CBC00(v59, v63, (uint64_t *)&unk_10070B640);
    if (v55((char *)v62, 1, v56) == 1)
    {
      sub_1000CBBA4(v59, (uint64_t *)&unk_10070B640);
      sub_1000CBBA4(v58, (uint64_t *)&unk_10070B640);
      if (v55((char *)v63, 1, v56) == 1)
      {
        sub_1000CBBA4(v62, (uint64_t *)&unk_10070B640);
LABEL_23:
        uint64_t v68 = (uint64_t)v82;
        v61((uint64_t)v82, 1, 1, v56);
        sub_1000C19B4(v68, &OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation);
        sub_1000CBE70((uint64_t *)&unk_1007084E0);
        uint64_t inited = swift_initStackObject();
        long long v103 = xmmword_1005A04F0;
        *(_OWORD *)(inited + 16) = xmmword_1005A04F0;
        id v70 = v98;
        *(void *)(inited + 32) = v98;
        unint64_t v104 = inited;
        specialized Array._endMutation()();
        unint64_t v71 = v104;
        uint64_t v72 = swift_initStackObject();
        *(_OWORD *)(v72 + 16) = v103;
        id v73 = v99;
        *(void *)(v72 + 32) = v99;
        unint64_t v104 = v72;
        specialized Array._endMutation()();
        unint64_t v74 = v104;
        id v75 = v70;
        id v76 = v73;
        uint64_t v77 = sub_1000C1ED4(v71, v74);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000C21E8((unint64_t)v77, v83 & 1, (uint64_t)DOCSplitBrowserViewController.didCommitPreview(of:), 0);
        swift_bridgeObjectRelease();
        if (v84) {
          sub_10022AA60();
        }
        sub_1000C535C();
        uint64_t v65 = 1;
        return v102(v65);
      }
    }
    else
    {
      uint64_t v64 = v85;
      sub_1000CBC00(v62, v85, (uint64_t *)&unk_10070B640);
      if (v55((char *)v63, 1, v56) != 1)
      {
        uint64_t v66 = v81;
        sub_1000C194C(v63, v81, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
        char v67 = static UUID.== infix(_:_:)();
        sub_1000C1DEC(v66, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
        sub_1000CBBA4(v103, (uint64_t *)&unk_10070B640);
        sub_1000CBBA4(v58, (uint64_t *)&unk_10070B640);
        sub_1000C1DEC(v64, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
        sub_1000CBBA4(v62, (uint64_t *)&unk_10070B640);
        if (v67) {
          goto LABEL_23;
        }
LABEL_21:
        uint64_t v65 = 0;
        return v102(v65);
      }
      sub_1000CBBA4(v103, (uint64_t *)&unk_10070B640);
      sub_1000CBBA4(v58, (uint64_t *)&unk_10070B640);
      sub_1000C1DEC(v64, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    }
    sub_1000CBBA4(v62, (uint64_t *)&unk_10070B690);
    goto LABEL_21;
  }
  uint64_t v105 = *v46;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C0190(char a1)
{
  return sub_1000C01A4(a1, *(void **)(v1 + 16), *(char **)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1000C01A4(char a1, void *a2, char *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a2)
  {
    if ((a1 & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v14 = &a3[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
    swift_beginAccess();
    unint64_t v15 = *(void *)v14;
    if (v15 >> 62) {
      goto LABEL_33;
    }
    uint64_t v16 = *(void **)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v16) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  aBlock[0] = (unint64_t)a3;
  swift_getKeyPath();
  id v11 = a2;
  _KeyValueCodingAndObserving.willChangeValue<A>(for:)();
  uint64_t v12 = *(void **)&a3[OBJC_IVAR____TtC5Files22DOCHierarchyController_effectiveRootLocationCandidate];
  *(void *)&a3[OBJC_IVAR____TtC5Files22DOCHierarchyController_effectiveRootLocationCandidate] = a2;
  id v13 = v11;

  aBlock[0] = (unint64_t)a3;
  swift_getKeyPath();
  _KeyValueCodingAndObserving.didChangeValue<A>(for:)();

  while (1)
  {

LABEL_12:
    uint64_t v20 = &a3[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
    swift_beginAccess();
    unint64_t v15 = *(void *)v20;
    if (v15 >> 62) {
      break;
    }
    uint64_t v21 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v21) {
      goto LABEL_24;
    }
LABEL_14:
    unint64_t v22 = v21 - 1;
    if (__OFSUB__(v21, 1))
    {
      __break(1u);
LABEL_30:
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_19:
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      if (a4)
      {

        goto LABEL_25;
      }
      uint64_t v25 = *(void **)&a3[OBJC_IVAR____TtC5Files22DOCHierarchyController_effectiveRootLocationCandidate];
      sub_1000CBE70((uint64_t *)&unk_1007084E0);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_1005A04F0;
      *(void *)(v26 + 32) = v24;
      aBlock[0] = v26;
      specialized Array._endMutation()();
      id v27 = v25;
      id v28 = v24;
      uint64_t v29 = (void *)sub_1000C0650(aBlock[0], v25);
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      uint64_t result = swift_bridgeObjectRelease();
      if (v29)
      {

        sub_1000BB1A4(v29, v31, v33);
        swift_bridgeObjectRelease();

        goto LABEL_25;
      }
LABEL_37:
      __break(1u);
      return result;
    }
    if ((v15 & 0xC000000000000001) != 0) {
      goto LABEL_30;
    }
    if ((v22 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v22 < *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v23 = *(id *)(v15 + 8 * v22 + 32);
      goto LABEL_19;
    }
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v16 = (void *)result;
    if (result)
    {
LABEL_6:
      if ((v15 & 0xC000000000000001) != 0)
      {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_37;
        }
        id v18 = *(id *)(v15 + 32);
      }
      uint64_t v16 = v18;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    aBlock[0] = (unint64_t)a3;
    swift_getKeyPath();
    _KeyValueCodingAndObserving.willChangeValue<A>(for:)();
    uint64_t v19 = *(void **)&a3[OBJC_IVAR____TtC5Files22DOCHierarchyController_effectiveRootLocationCandidate];
    *(void *)&a3[OBJC_IVAR____TtC5Files22DOCHierarchyController_effectiveRootLocationCandidate] = v16;
    id v13 = v16;

    aBlock[0] = (unint64_t)a3;
    swift_getKeyPath();
    _KeyValueCodingAndObserving.didChangeValue<A>(for:)();
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  if (v21) {
    goto LABEL_14;
  }
LABEL_24:
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong
    || (id v35 = [Strong hierarchyChangeTransitionCoordinator],
        swift_unknownObjectRelease(),
        !v35))
  {
    id v36 = [objc_allocWithZone((Class)UIViewController) init];
    id v35 = [v36 _definiteTransitionCoordinator];
  }
  uint64_t v37 = (void *)swift_allocObject();
  v37[2] = a3;
  v37[3] = a5;
  v37[4] = a6;
  v37[5] = a7;
  aBlock[4] = (unint64_t)sub_10004605C;
  aBlock[5] = (unint64_t)v37;
  aBlock[0] = (unint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (unint64_t)sub_100045AE0;
  aBlock[3] = (unint64_t)&unk_10069AAA8;
  uint64_t v38 = _Block_copy(aBlock);
  uint64_t v39 = a3;
  swift_retain();
  sub_1000C0640(a6);
  swift_release();
  [v35 animateAlongsideTransition:0 completion:v38];
  _Block_release(v38);
  return swift_unknownObjectRelease();
}

uint64_t sub_1000C0640(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_1000C0650(unint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    static Logger.UI.getter();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to determine BrowsedState since locations is empty", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t result = v8 - 1;
  if (__OFSUB__(v8, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_15:
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v10 = *(id *)(a1 + 8 * result + 32);
LABEL_8:
    id v11 = v10;
    swift_bridgeObjectRelease();
    id v12 = a2;
    swift_bridgeObjectRetain();
    return (unint64_t)v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C0854(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  int v117 = a6;
  uint64_t v115 = a5;
  uint64_t v114 = a4;
  *(void *)&long long v131 = a3;
  uint64_t v116 = a1;
  uint64_t v129 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v129 - 8);
  uint64_t v7 = __chkstk_darwin(v129);
  UIImage_optional v124 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  int v125 = (char *)&v111 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)&v111 - v12;
  __chkstk_darwin(v11);
  id v113 = (char *)&v111 - v14;
  uint64_t v15 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v121 = (uint64_t)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v120 = (uint64_t)&v111 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v123 = (char *)&v111 - v22;
  __chkstk_darwin(v21);
  uint64_t v127 = (uint64_t)&v111 - v23;
  uint64_t v130 = sub_1000CBE70((uint64_t *)&unk_10070B690);
  __chkstk_darwin(v130);
  uint64_t v25 = (char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_1000CBE70((uint64_t *)&unk_10070B640);
  uint64_t v26 = __chkstk_darwin(v119);
  uint64_t v118 = (uint64_t)&v111 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v126 = (uint64_t)&v111 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v111 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  id v35 = (char *)&v111 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v111 - v36;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v39 = (char *)result;
    uint64_t v112 = v13;
    uint64_t v122 = v6;
    uint64_t v40 = result + OBJC_IVAR____TtC5Files22DOCHierarchyController_loadingDisabledOperation;
    swift_beginAccess();
    sub_1000CBC00(v40, (uint64_t)v35, (uint64_t *)&unk_10070B640);
    id v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
    int v42 = v41(v35, 1, v15);
    uint64_t v128 = v39;
    if (v42 == 1)
    {
      uint64_t v43 = &v39[OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation];
      swift_beginAccess();
      uint64_t v44 = (uint64_t)v43;
      uint64_t v45 = (uint64_t)v37;
      sub_1000CBC00(v44, (uint64_t)v37, (uint64_t *)&unk_10070B640);
      sub_1000CBBA4((uint64_t)v35, (uint64_t *)&unk_10070B640);
    }
    else
    {
      uint64_t v45 = (uint64_t)v37;
      sub_1000C194C((uint64_t)v35, (uint64_t)v37, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    sub_1000C1CF0(v131, (uint64_t)v32, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v32, 0, 1, v15);
    uint64_t v46 = (uint64_t)&v25[*(int *)(v130 + 48)];
    sub_1000CBC00(v45, (uint64_t)v25, (uint64_t *)&unk_10070B640);
    sub_1000CBC00((uint64_t)v32, v46, (uint64_t *)&unk_10070B640);
    if (v41(v25, 1, v15) == 1)
    {
      sub_1000CBBA4((uint64_t)v32, (uint64_t *)&unk_10070B640);
      if (v41((char *)v46, 1, v15) == 1)
      {
        sub_1000CBBA4((uint64_t)v25, (uint64_t *)&unk_10070B640);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v47 = v126;
      sub_1000CBC00((uint64_t)v25, v126, (uint64_t *)&unk_10070B640);
      if (v41((char *)v46, 1, v15) != 1)
      {
        uint64_t v48 = v127;
        sub_1000C194C(v46, v127, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
        char v49 = static UUID.== infix(_:_:)();
        sub_1000C1DEC(v48, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
        sub_1000CBBA4((uint64_t)v32, (uint64_t *)&unk_10070B640);
        sub_1000C1DEC(v47, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
        sub_1000CBBA4((uint64_t)v25, (uint64_t *)&unk_10070B640);
        if (v49)
        {
LABEL_12:
          id v50 = v128;
          uint64_t v51 = &v128[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
          swift_beginAccess();
          if (*(void *)v51 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v52 = *(void *)((*(void *)v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          uint64_t v53 = v112;
          uint64_t v54 = (uint64_t)v123;
          if (v52)
          {
            static Logger.UI.getter();
            sub_1000C1CF0(v131, v54, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            id v55 = v50;
            uint64_t v56 = Logger.logObject.getter();
            os_log_type_t v57 = static os_log_type_t.fault.getter();
            int v58 = v57;
            if (os_log_type_enabled(v56, v57))
            {
              uint64_t v59 = swift_slowAlloc();
              uint64_t v130 = swift_slowAlloc();
              uint64_t v132 = v130;
              *(_DWORD *)uint64_t v59 = 136315394;
              *(void *)&long long v131 = v45;
              LODWORD(v128) = v58;
              uint64_t v60 = v127;
              sub_1000C1CF0(v54, v127, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
              uint64_t v61 = sub_1002255E8();
              unint64_t v63 = v62;
              sub_1000C1DEC(v60, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
              uint64_t v133 = sub_10009B0E4(v61, v63, &v132);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_1000C1DEC(v54, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
              *(_WORD *)(v59 + 12) = 2080;
              sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
              swift_bridgeObjectRetain();
              uint64_t v64 = Array.description.getter();
              unint64_t v66 = v65;
              swift_bridgeObjectRelease();
              uint64_t v133 = sub_10009B0E4(v64, v66, &v132);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v128, "Unexpected: ignoring placeholder results for: %s - There are now real locations present: %s", (uint8_t *)v59, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v122 + 8))(v112, v129);
LABEL_22:
              uint64_t v96 = v131;
              return sub_1000CBBA4(v96, (uint64_t *)&unk_10070B640);
            }

            sub_1000C1DEC(v54, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            (*(void (**)(char *, uint64_t))(v122 + 8))(v53, v129);
          }
          else
          {
            uint64_t v97 = (unsigned char *)(v114 + 16);
            swift_beginAccess();
            if ((*v97 & 1) == 0)
            {
              id v98 = v113;
              static Logger.UI.getter();
              uint64_t v99 = Logger.logObject.getter();
              os_log_type_t v100 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v99, v100))
              {
                uint64_t v101 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v101 = 0;
                _os_log_impl((void *)&_mh_execute_header, v99, v100, "Unexpected: got placeholder results async", v101, 2u);
                swift_slowDealloc();
              }

              (*(void (**)(char *, uint64_t))(v122 + 8))(v98, v129);
            }
            sub_1000CBE70((uint64_t *)&unk_1007084E0);
            uint64_t inited = swift_initStackObject();
            long long v131 = xmmword_1005A04F0;
            *(_OWORD *)(inited + 16) = xmmword_1005A04F0;
            long long v103 = v115;
            *(void *)(inited + 32) = v115;
            uint64_t v133 = inited;
            specialized Array._endMutation()();
            unint64_t v104 = v133;
            uint64_t v105 = swift_initStackObject();
            *(_OWORD *)(v105 + 16) = v131;
            uint64_t v106 = v116;
            *(void *)(v105 + 32) = v116;
            uint64_t v133 = v105;
            specialized Array._endMutation()();
            unint64_t v107 = v133;
            id v108 = v103;
            id v109 = v106;
            uint64_t v110 = sub_1000C1ED4(v104, v107);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000C21E8((unint64_t)v110, v117 & 1, (uint64_t)DOCSplitBrowserViewController.didCommitPreview(of:), 0);

            swift_bridgeObjectRelease();
          }
          goto LABEL_31;
        }
LABEL_17:
        id v67 = v128;
        uint64_t v68 = sub_1000562C0();
        if (dispatch thunk of DOCAssertionCollection.hasValidAssertions.getter())
        {
          uint64_t v69 = v125;
          static Logger.UI.getter();
          uint64_t v70 = v120;
          sub_1000C1CF0(v131, v120, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
          swift_retain_n();
          unint64_t v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.fault.getter();
          int v73 = v72;
          if (os_log_type_enabled(v71, v72))
          {
            uint64_t v74 = swift_slowAlloc();
            LODWORD(v131) = v73;
            uint64_t v75 = v74;
            uint64_t v130 = swift_slowAlloc();
            uint64_t v134 = v130;
            *(_DWORD *)uint64_t v75 = 136315394;
            uint64_t v76 = v127;
            sub_1000C1CF0(v70, v127, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            uint64_t v77 = sub_1002255E8();
            unint64_t v79 = v78;
            sub_1000C1DEC(v76, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            uint64_t v132 = sub_10009B0E4(v77, v79, &v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000C1DEC(v70, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            *(_WORD *)(v75 + 12) = 2080;
            uint64_t v132 = v68;
            type metadata accessor for DOCAssertionCollection();
            sub_100076EA4(&qword_10070B6D8, (void (*)(uint64_t))&type metadata accessor for DOCAssertionCollection);
            uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v132 = sub_10009B0E4(v80, v81, &v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v131, "Unexpected: ignoring placeholder results for: %s - loadingDisabledAssertions: %s", (uint8_t *)v75, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();

            (*(void (**)(char *, uint64_t))(v122 + 8))(v125, v129);
          }
          else
          {
            swift_release_n();

            sub_1000C1DEC(v70, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            swift_release();
            (*(void (**)(char *, uint64_t))(v122 + 8))(v69, v129);
          }
        }
        else
        {
          sub_1000CBC00(v45, v118, (uint64_t *)&unk_10070B640);
          uint64_t v82 = String.init<A>(describing:)();
          unint64_t v84 = v83;
          uint64_t v85 = v124;
          static Logger.UI.getter();
          uint64_t v86 = v121;
          sub_1000C1CF0(v131, v121, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
          swift_bridgeObjectRetain();
          uint64_t v87 = Logger.logObject.getter();
          os_log_type_t v88 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v87, v88))
          {
            uint64_t v89 = swift_slowAlloc();
            uint64_t v130 = swift_slowAlloc();
            uint64_t v134 = v130;
            *(_DWORD *)uint64_t v89 = 136315394;
            int v125 = (char *)(v89 + 4);
            *(void *)&long long v131 = v45;
            uint64_t v90 = v127;
            sub_1000C1CF0(v86, v127, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            uint64_t v91 = sub_1002255E8();
            uint64_t v126 = v82;
            uint64_t v92 = v86;
            uint64_t v93 = v91;
            unint64_t v95 = v94;
            sub_1000C1DEC(v90, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            uint64_t v132 = sub_10009B0E4(v93, v95, &v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000C1DEC(v92, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
            *(_WORD *)(v89 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v132 = sub_10009B0E4(v126, v84, &v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v87, v88, "Unexpected: ignoring placeholder results for: %s - new operation is now active: %s", (uint8_t *)v89, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();

            (*(void (**)(char *, uint64_t))(v122 + 8))(v124, v129);
            goto LABEL_22;
          }
          swift_bridgeObjectRelease_n();
          swift_release();

          sub_1000C1DEC(v86, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
          (*(void (**)(char *, uint64_t))(v122 + 8))(v85, v129);
        }
LABEL_31:
        uint64_t v96 = v45;
        return sub_1000CBBA4(v96, (uint64_t *)&unk_10070B640);
      }
      sub_1000CBBA4((uint64_t)v32, (uint64_t *)&unk_10070B640);
      sub_1000C1DEC(v47, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    }
    sub_1000CBBA4((uint64_t)v25, (uint64_t *)&unk_10070B690);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_1000C194C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C19B4(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v24 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000CBE70((uint64_t *)&unk_10070B690);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CBE70((uint64_t *)&unk_10070B640);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v18 = v2 + *a2;
  swift_beginAccess();
  sub_1000CBC00(v18, (uint64_t)v17, (uint64_t *)&unk_10070B640);
  swift_beginAccess();
  uint64_t v25 = a1;
  sub_1000C1E6C(a1, v18);
  swift_endAccess();
  uint64_t v19 = (uint64_t)&v11[*(int *)(v9 + 56)];
  sub_1000CBC00((uint64_t)v17, (uint64_t)v11, (uint64_t *)&unk_10070B640);
  sub_1000CBC00(v18, v19, (uint64_t *)&unk_10070B640);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v20((uint64_t)v11, 1, v5) == 1)
  {
    if (v20(v19, 1, v5) == 1) {
      uint64_t v21 = (uint64_t *)&unk_10070B640;
    }
    else {
      uint64_t v21 = (uint64_t *)&unk_10070B690;
    }
  }
  else
  {
    sub_1000CBC00((uint64_t)v11, (uint64_t)v15, (uint64_t *)&unk_10070B640);
    if (v20(v19, 1, v5) == 1)
    {
      sub_1000C1DEC((uint64_t)v15, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
      uint64_t v21 = (uint64_t *)&unk_10070B690;
    }
    else
    {
      uint64_t v22 = v24;
      sub_1000C194C(v19, v24, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
      static UUID.== infix(_:_:)();
      sub_1000C1DEC(v22, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
      sub_1000C1DEC((uint64_t)v15, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
      uint64_t v21 = (uint64_t *)&unk_10070B640;
    }
  }
  sub_1000CBBA4((uint64_t)v11, v21);
  sub_1000CBBA4(v25, (uint64_t *)&unk_10070B640);
  return sub_1000CBBA4((uint64_t)v17, (uint64_t *)&unk_10070B640);
}

uint64_t sub_1000C1CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023761C);
}

uint64_t sub_1000C1CF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C1D58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000C1DEC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for DOCHierarchyController.FetchingOperationToken(uint64_t a1)
{
  return sub_10009E984(a1, qword_10070B570);
}

uint64_t sub_1000C1E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_10070B640);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void *sub_1000C1ED4(unint64_t a1, unint64_t a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!(a2 >> 62)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!(a2 >> 62)) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRetain();
  _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_3:
  char v5 = DOCGuardAssert(_:_:logOnlyIfDebugging:logOnlyIfUnitTesting:)();
  uint64_t result = _swiftEmptyArrayStorage;
  if ((v5 & 1) == 0) {
    return result;
  }
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v4)
  {
    if ((a2 & 0xC000000000000001) != 0 || (unint64_t)(v4 - 1) < *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      if (((a2 | a1) & 0xC000000000000001) != 0)
      {
        uint64_t v7 = 0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v8 = *(id *)(a1 + 8 * v7 + 32);
          }
          uint64_t v9 = v8;
          if ((a2 & 0xC000000000000001) != 0) {
            id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v10 = *(id *)(a2 + 8 * v7 + 32);
          }
          uint64_t v11 = v10;
          type metadata accessor for LocationPairedViewController();
          uint64_t v12 = swift_allocObject();
          *(void *)(v12 + 16) = v9;
          *(void *)(v12 + 24) = v11;
          id v13 = v9;
          id v14 = v11;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          ++v7;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        while (v4 != v7);
      }
      else
      {
        uint64_t v15 = (void **)(a1 + 32);
        uint64_t v16 = (void **)(a2 + 32);
        type metadata accessor for LocationPairedViewController();
        do
        {
          uint64_t v17 = *v15;
          uint64_t v18 = *v16;
          uint64_t v19 = swift_allocObject();
          *(void *)(v19 + 16) = v17;
          *(void *)(v19 + 24) = v18;
          id v20 = v17;
          id v21 = v18;
          id v22 = v20;
          id v23 = v21;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          ++v16;
          ++v15;
          --v4;
        }
        while (v4);
      }
      return _swiftEmptyArrayStorage;
    }
LABEL_29:
    __break(1u);
    return result;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t type metadata accessor for LocationPairedViewController()
{
  return self;
}

uint64_t sub_1000C21E8(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v41 = v9;
  uint64_t v42 = a4;
  if (v10)
  {
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v10 < 0)
    {
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v40 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = v12 + 1;
        id v14 = *(id *)(specialized _ArrayBuffer._getElementSlowPath(_:)() + 16);
        swift_unknownObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v12 = v13;
      }
      while (v10 != v13);
    }
    else
    {
      uint64_t v16 = (uint64_t *)(a1 + 32);
      uint64_t v17 = v10;
      do
      {
        uint64_t v18 = *v16++;
        id v19 = *(id *)(v18 + 16);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v17;
      }
      while (v17);
    }
    uint64_t v15 = (void *)aBlock[0];
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v20 = 0;
      a3 = v40;
      do
      {
        uint64_t v21 = v20 + 1;
        id v22 = *(id *)(specialized _ArrayBuffer._getElementSlowPath(_:)() + 24);
        swift_unknownObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v20 = v21;
      }
      while (v10 != v21);
    }
    else
    {
      id v23 = (uint64_t *)(a1 + 32);
      a3 = v40;
      do
      {
        uint64_t v24 = *v23++;
        id v25 = *(id *)(v24 + 24);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v27 = (void *)Strong;
    sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v27 hierarchyController:v5 willSet:isa animated:a2 & 1];

    swift_unknownObjectRelease();
  }
  DOCHierarchyController.locations.setter((uint64_t)v15);
  uint64_t v29 = swift_unknownObjectWeakLoadStrong();
  if (v29)
  {
    uint64_t v30 = (void *)v29;
    sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    Class v31 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v30 hierarchyController:v5 didSet:v31 animated:a2 & 1];

    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (![self protectedAppsEnabled]) {
    goto LABEL_35;
  }
  if (!v41)
  {
    uint64_t v32 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v32) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v32 = result;
  if (result)
  {
LABEL_28:
    if (v32 >= 1)
    {
      uint64_t v33 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v34 = *(void *)(a1 + 8 * v33 + 32);
          swift_retain();
        }
        ++v33;
        aBlock[0] = v34;
        sub_1000C4264(aBlock, 0xD000000000000038, 0x80000001005DEBD0);
        swift_release();
      }
      while (v32 != v33);
      goto LABEL_34;
    }
LABEL_41:
    __break(1u);
    return result;
  }
LABEL_34:
  swift_bridgeObjectRelease();
LABEL_35:
  id v35 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v35
    || (id v36 = [v35 hierarchyChangeTransitionCoordinator],
        swift_unknownObjectRelease(),
        !v36))
  {
    id v37 = [objc_allocWithZone((Class)UIViewController) init];
    id v36 = [v37 _definiteTransitionCoordinator];
  }
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = a3;
  *(void *)(v38 + 24) = v42;
  aBlock[4] = (uint64_t)sub_100045B40;
  aBlock[5] = v38;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100045AE0;
  aBlock[3] = (uint64_t)&unk_100699B58;
  uint64_t v39 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v36 animateAlongsideTransition:0 completion:v39];
  _Block_release(v39);
  return swift_unknownObjectRelease();
}

void sub_1000C28C4(char a1)
{
  unint64_t v4 = v1;
  if (*(void *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_viewStyle) != 2)
  {
    unint64_t v13 = sub_10008A504();
    unint64_t v4 = v13;
    if (v13 >> 62)
    {
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      if (!v14) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v14) {
        goto LABEL_31;
      }
    }
    BOOL v15 = __OFSUB__(v14, 1);
    unint64_t v16 = v14 - 1;
    if (v15)
    {
      __break(1u);
    }
    else if ((v4 & 0xC000000000000001) == 0)
    {
      if ((v16 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v16 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v17 = *(id *)(v4 + 8 * v16 + 32);
LABEL_23:
        id v22 = v17;
        swift_bridgeObjectRelease();
        type metadata accessor for DOCBrowserContainerController();
        uint64_t v18 = (void *)swift_dynamicCastClass();
        if (v18) {
          [v18 setEditing:0 animated:0];
        }

        return;
      }
      __break(1u);
      goto LABEL_38;
    }
    id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_23;
  }
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers);
  if (!v5) {
    return;
  }
  char v2 = a1;
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(char **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_5;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = (char *)_CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_31;
  }
LABEL_5:
  if ((v5 & 0xC000000000000001) != 0)
  {
LABEL_38:
    uint64_t v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v7 = (char *)*(id *)(v5 + 32);
LABEL_8:
  uint64_t v6 = v7;
  swift_bridgeObjectRelease();
  v23.receiver = v6;
  v23.super_class = (Class)type metadata accessor for DOCColumnViewController(0);
  uint64_t v3 = &selRef_nodeDownloadButton_downloadingNode_encounteredError_;
  [super setEditing:0 animated:0];
  id v8 = &v6[OBJC_IVAR____TtC5Files23DOCColumnViewController_containerControllers];
  swift_beginAccess();
  unint64_t v5 = *(void *)v8;
  if (!(v5 >> 62))
  {
    unint64_t v9 = *(char **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_10;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
LABEL_40:
  swift_bridgeObjectRetain();
  unint64_t v9 = (char *)_CocoaArrayWrapper.endIndex.getter();
  if (!v9) {
    goto LABEL_41;
  }
LABEL_10:
  uint64_t v10 = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_49;
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
LABEL_49:
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_15;
  }
  if (((unint64_t)v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_51;
  }
  if ((unint64_t)v10 >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  id v11 = *(id *)(v5 + 8 * (void)v10 + 32);
LABEL_15:
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  [v12 v3[174] 0, 0];

LABEL_42:
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v9 = (char *)Strong;
    uint64_t v20 = (void *)(v4 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_currentContainers);
    swift_beginAccess();
    if (!(*v20 >> 62))
    {
      swift_bridgeObjectRetain_n();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_10009E6C4(0, (unint64_t *)&qword_100707710);
LABEL_45:
      swift_bridgeObjectRelease();
      sub_10009E6C4(0, (unint64_t *)&qword_100707710);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v9 dataSource:v4 willSet:isa on:v6 animated:v2 & 1];

      swift_unknownObjectRelease();
      return;
    }
LABEL_52:
    sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    goto LABEL_45;
  }
}

void sub_1000C2D8C(unint64_t a1, unint64_t a2, int a3)
{
  uint64_t v7 = v3;
  LODWORD(v8) = a3;
  uint64_t v11 = type metadata accessor for DOCItemCollectionFPController();
  __chkstk_darwin(v11 - 8);
  uint64_t v82 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (void **)_swiftEmptyArrayStorage;
  unint64_t v86 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(a1 >> 62))
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v83 = v3;
    if (v14) {
      goto LABEL_3;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    if (a2) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t v83 = v3;
  if (!v14) {
    goto LABEL_34;
  }
LABEL_3:
  if (v14 < 1)
  {
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = 0;
    do
    {
      BOOL v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      type metadata accessor for DOCBrowserContainerController();
      swift_dynamicCastClassUnconditional();
      unint64_t v5 = v15;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v6 = *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v6 >= *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v4;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_unknownObjectRelease();
    }
    while (v14 != v4);
    swift_bridgeObjectRelease();
    uint64_t v7 = v83;
    if (a2) {
      goto LABEL_10;
    }
LABEL_35:
    a1 = 0;
    goto LABEL_39;
  }
  int v78 = v8;
  uint64_t v4 = type metadata accessor for DOCBrowserContainerController();
  uint64_t v18 = 0;
  do
  {
    id v19 = *(void **)(a1 + 8 * v18 + 32);
    unint64_t v5 = (char *)swift_dynamicCastClassUnconditional();
    id v20 = v19;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v6 = *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6 >= *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v18;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  while (v14 != v18);
  swift_bridgeObjectRelease();
  LODWORD(v8) = v78;
  uint64_t v7 = v83;
  if (!a2) {
    goto LABEL_35;
  }
LABEL_10:
  unint64_t v85 = (unint64_t)_swiftEmptyArrayStorage;
  if (a2 >> 62) {
    goto LABEL_37;
  }
  uint64_t v16 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v16)
  {
LABEL_12:
    if (v16 < 1)
    {
      __break(1u);
      goto LABEL_82;
    }
    if ((a2 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        type metadata accessor for DOCBrowserContainerController();
        if (swift_dynamicCastClass())
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v5 = *(char **)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if ((unint64_t)v5 >= *(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
    else
    {
      unint64_t v13 = (void **)(a2 + 32);
      type metadata accessor for DOCBrowserContainerController();
      do
      {
        uint64_t v21 = *v13;
        if (swift_dynamicCastClass())
        {
          id v22 = v21;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v5 = *(char **)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if ((unint64_t)v5 >= *(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v13;
        --v16;
      }
      while (v16);
    }
  }
LABEL_38:
  swift_bridgeObjectRelease();
  a1 = v85;
LABEL_39:
  uint64_t v16 = v86;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v7;
  *(void *)(v23 + 24) = v16;
  *(unsigned char *)(v23 + 32) = v8 & 1;
  if (*(void *)&v7[OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_viewStyle] != 2)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v13 = v7;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v28 = (void *)v86;
    if (!(v86 >> 62))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_10009E6C4(0, (unint64_t *)&qword_100707710);
      unint64_t v29 = (unint64_t)v28;
LABEL_50:
      swift_bridgeObjectRelease();
      sub_1000C3A78(v29);
      sub_1000C3DD8((uint64_t)v13, v16, v8 & 1);
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
LABEL_80:
    sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    swift_bridgeObjectRetain();
    unint64_t v29 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  swift_beginAccess();
  unint64_t v24 = v86;
  uint64_t v81 = v23;
  if (v86 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v30 = v7;
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    id v25 = v7;
    if (!v4) {
      goto LABEL_52;
    }
  }
  if (v4 < 1)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    if ((v24 & 0xC000000000000001) != 0) {
      uint64_t v27 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v27 = *(id *)(v24 + 8 * j + 32);
    }
    v27[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_preventAppearanceForwarding] = 1;
  }
LABEL_52:
  swift_bridgeObjectRelease_n();
  if (a1) {
    swift_bridgeObjectRelease();
  }
  else {
    a1 = v86;
  }
  unint64_t v5 = v83;
  uint64_t v4 = OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers;
  uint64_t v16 = *(void *)&v83[OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers];
  uint64_t v7 = (char *)(a1 >> 62);
  if (v16)
  {
    unint64_t v13 = (void **)(v16 & 0xFFFFFFFFFFFFFF8);
    if (!((unint64_t)v16 >> 62))
    {
      uint64_t v31 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v31)
      {
LABEL_58:
        if ((v16 & 0xC000000000000001) != 0)
        {
          uint64_t v32 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_61;
        }
        if (v13[2])
        {
          uint64_t v32 = (char *)*(id *)(v16 + 32);
LABEL_61:
          uint64_t v33 = v32;
          swift_bridgeObjectRelease();
          uint64_t v34 = (uint64_t *)&v33[OBJC_IVAR____TtC5Files23DOCColumnViewController_containerControllers];
          swift_beginAccess();
          uint64_t v35 = *v34;
          unint64_t v13 = v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_100412F6C(a1);
          *uint64_t v34 = a1;
          swift_bridgeObjectRelease();
          unint64_t v36 = swift_bridgeObjectRetain();
          uint64_t v77 = v35;
          LOBYTE(v33) = sub_10028ED04(v36, v35);
          swift_bridgeObjectRelease();
          if ((v33 & 1) == 0)
          {
            uint64_t v75 = v4;
            uint64_t v76 = v7;
            int v78 = v8;
            unint64_t v8 = *v34;
            id v37 = v34;
            if ((unint64_t)*v34 >> 62)
            {
              swift_bridgeObjectRetain_n();
              uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
              if (v16)
              {
LABEL_64:
                uint64_t v38 = 0;
                unint64_t v39 = v8 & 0xC000000000000001;
                unint64_t v79 = v8 + 32;
                unint64_t v80 = v8;
                while (1)
                {
                  uint64_t v42 = v39
                      ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
                      : (char *)*(id *)(v79 + 8 * v38);
                  unint64_t v41 = v42;
                  if (__OFADD__(v38++, 1)) {
                    break;
                  }
                  uint64_t v44 = (void **)&v42[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
                  swift_beginAccess();
                  uint64_t v45 = *v44;
                  if (v45)
                  {
                    type metadata accessor for DOCItemCollectionViewController(0);
                    uint64_t v46 = swift_dynamicCastClass();
                    if (v46)
                    {
                      uint64_t v47 = v46;
                      unint64_t v8 = a1;
                      uint64_t v48 = v37;
                      char v49 = v13;
                      id v50 = (uint64_t *)(v46 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
                      swift_beginAccess();
                      uint64_t v51 = *v50;
                      *id v50 = 2;
                      if (v51 != 2)
                      {
                        uint64_t v52 = v47 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController;
                        swift_beginAccess();
                        uint64_t v53 = v52;
                        uint64_t v54 = v82;
                        sub_10013D2A0(v53, v82);
                        uint64_t v55 = *(void *)(*(void *)v54 + 16);
                        if (v55)
                        {
                          uint64_t v56 = (uint64_t *)(*(void *)v54 + 64);
                          do
                          {
                            uint64_t v57 = *v56;
                            v56 += 5;
                            *(unsigned char *)(v57 + 24) = *(unsigned char *)(v57 + 25);
                            --v55;
                          }
                          while (v55);
                        }
                        id v40 = v45;
                        sub_10013D304(v82);
                        sub_10001E85C();

                        unint64_t v41 = v40;
                      }
                      unint64_t v13 = v49;
                      id v37 = v48;
                      a1 = v8;
                      LOBYTE(v8) = v80;
                    }
                  }

                  if (v38 == v16) {
                    goto LABEL_94;
                  }
                }
                __break(1u);
                goto LABEL_80;
              }
            }
            else
            {
              uint64_t v16 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain_n();
              if (v16) {
                goto LABEL_64;
              }
            }
LABEL_94:
            swift_bridgeObjectRelease_n();
            if ([v13 isViewLoaded])
            {
              uint64_t v65 = swift_bridgeObjectRetain();
              sub_100413804(v65);
              swift_bridgeObjectRelease();
            }
            else
            {
              *((unsigned char *)v13 + OBJC_IVAR____TtC5Files23DOCColumnViewController_needsUpdateDiffableSnapshot) = 1;
            }
            LOBYTE(v8) = v78;
            unint64_t v5 = v83;
            uint64_t v7 = v76;
            uint64_t v4 = v75;
          }
          swift_bridgeObjectRelease();
          uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
          if (Strong)
          {
            [Strong configureColumnViewController:v13];
            swift_unknownObjectRelease();
          }

          goto LABEL_101;
        }
        __break(1u);
        goto LABEL_92;
      }
      goto LABEL_84;
    }
LABEL_83:
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_58;
    }
LABEL_84:
    swift_bridgeObjectRelease();
  }
  uint64_t v58 = swift_unknownObjectWeakLoadStrong();
  if (!v58) {
    goto LABEL_116;
  }
  uint64_t v59 = (void *)v58;
  type metadata accessor for DOCBrowserContainerController();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  unint64_t v13 = (void **)[v59 provideColumnViewControllerWithContains:isa];
  swift_unknownObjectRelease();

  uint64_t v61 = swift_unknownObjectWeakLoadStrong();
  if (v61)
  {
    uint64_t v16 = v61;
    unint64_t v6 = v4;
    if (!v7)
    {
      swift_bridgeObjectRetain();
      unint64_t v62 = v13;
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_10009E6C4(0, (unint64_t *)&qword_100707710);
LABEL_89:
      sub_10009E6C4(0, (unint64_t *)&qword_100707710);
      Class v63 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [(id)v16 dataSource:v5 willSet:v63 on:v13 animated:v8 & 1];

      swift_unknownObjectRelease();
      uint64_t v4 = v6;
      goto LABEL_101;
    }
LABEL_92:
    sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    swift_bridgeObjectRetain();
    uint64_t v64 = v13;
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_89;
  }
LABEL_101:
  sub_1000CBE70((uint64_t *)&unk_1007084E0);
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_1005A04F0;
  *(void *)(v67 + 32) = v13;
  uint64_t v84 = v67;
  specialized Array._endMutation()();
  *(void *)&v5[v4] = v84;
  uint64_t v68 = v13;
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v69 = (char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v70 = v81;
    if (!v69) {
      goto LABEL_109;
    }
  }
  else
  {
    uint64_t v69 = *(char **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v70 = v81;
    if (!v69)
    {
LABEL_109:
      swift_bridgeObjectRelease();
      uint64_t v73 = swift_allocObject();
      *(void *)(v73 + 16) = sub_100461890;
      *(void *)(v73 + 24) = v70;
      swift_retain();
      sub_100412088(v69, v8 & 1, (void (*)(void))sub_100045B40, v73);

      swift_release();
      swift_release();

      return;
    }
  }
  unint64_t v71 = v69 - 1;
  if (__OFSUB__(v69, 1))
  {
    __break(1u);
    goto LABEL_113;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_113:
    os_log_type_t v72 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_108;
  }
  if (((unint64_t)v71 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v71 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    os_log_type_t v72 = (char *)*(id *)(a1 + 8 * (void)v71 + 32);
LABEL_108:
    uint64_t v69 = v72;
    goto LABEL_109;
  }
  __break(1u);
LABEL_116:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000C3A78(unint64_t a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_viewStyle) != 2)
  {
    uint64_t v4 = sub_1000C3DC0(a1);
    swift_bridgeObjectRelease();
    if (v4)
    {
      unint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_containerControllers);
      swift_beginAccess();
      *unint64_t v5 = v4;
      return swift_bridgeObjectRelease();
    }
    goto LABEL_8;
  }
  char v2 = sub_100166FAC(a1);
  swift_bridgeObjectRelease();
  if (!v2)
  {
LABEL_8:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(void *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers) = v2;

  return swift_bridgeObjectRelease();
}

void *sub_1000C3BD4(unint64_t a1, void (*a2)(void))
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v6 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        a2(0);
        if (!swift_dynamicCastClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v6 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = v3 + 32;
      while (1)
      {
        uint64_t v9 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          break;
        }
        uint64_t v10 = *(void **)(v8 + 8 * v7);
        a2(0);
        uint64_t v11 = swift_dynamicCastClass();
        if (!v11)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v3 = v11;
        id v12 = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v7;
        if (v9 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1000C3DC0(unint64_t a1)
{
  return sub_1000C3BD4(a1, (void (*)(void))type metadata accessor for DOCBrowserContainerController);
}

void sub_1000C3DD8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = (void *)(a1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_currentContainers);
  swift_beginAccess();
  *uint64_t v6 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(a1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_updateObserver);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    sub_10008A504();
    sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 dataSource:a1 didUpdate:isa animated:a3 & 1];

    swift_unknownObjectRelease();
  }
  unint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers);
  if (!v11) {
    return;
  }
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    id v12 = (void *)_CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_6;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  id v12 = *(void **)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_15;
  }
LABEL_6:
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_19;
    }
    id v13 = *(id *)(v11 + 32);
  }
  id v12 = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_unknownObjectWeakLoadStrong();
  if (v14)
  {
    uint64_t v7 = (void *)v14;
    if (!(*v6 >> 62))
    {
      swift_bridgeObjectRetain_n();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_10009E6C4(0, (unint64_t *)&qword_100707710);
LABEL_12:
      swift_bridgeObjectRelease();
      sub_10009E6C4(0, (unint64_t *)&qword_100707710);
      Class v15 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v7 dataSource:a1 didSet:v15 on:v12 animated:a3 & 1];

      swift_unknownObjectRelease();
      return;
    }
LABEL_19:
    sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    goto LABEL_12;
  }
}

uint64_t DOCHierarchyController.locations.setter(uint64_t a1)
{
  swift_getKeyPath();
  _KeyValueCodingAndObserving.willChangeValue<A>(for:)();
  uint64_t v7 = v1;
  swift_getKeyPath();
  _KeyValueCodingAndObserving.willChangeValue<A>(for:)();
  NSString v3 = String._bridgeToObjectiveC()();
  [v7 willChangeValueForKey:v3];

  uint64_t v4 = &v7[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
  swift_beginAccess();
  *(void *)uint64_t v4 = a1;
  swift_bridgeObjectRelease();
  NSString v5 = String._bridgeToObjectiveC()();
  [v7 didChangeValueForKey:v5];

  swift_getKeyPath();
  _KeyValueCodingAndObserving.didChangeValue<A>(for:)();
  swift_getKeyPath();
  return _KeyValueCodingAndObserving.didChangeValue<A>(for:)();
}

uint64_t sub_1000C4264(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  static Logger.UI.getter();
  swift_retain_n();
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  int v27 = v13;
  uint64_t v14 = (SEL *)&unk_1006E3000;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v26 = v3;
    uint64_t v16 = v15;
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v29 = v24;
    *(_DWORD *)uint64_t v16 = 136315650;
    uint64_t v25 = v7;
    id v28 = (id)sub_10009B0E4(a2, a3, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    id v28 = [*(id *)(v11 + 16) node];
    sub_1000CBE70(&qword_100717520);
    uint64_t v17 = String.init<A>(describing:)();
    id v28 = (id)sub_10009B0E4(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2112;
    uint64_t v19 = v8;
    id v20 = *(void **)(v11 + 24);
    id v28 = v20;
    id v21 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v23 = v20;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v27, "[PROTECTED APPS] %s start authentication for node: %s viewController: %@", (uint8_t *)v16, 0x20u);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v25);
    uint64_t v14 = (SEL *)&unk_1006E3000;
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  sub_1000C45B0((uint64_t)[*(id *)(v11 + 16) v14[510]], *(void **)(v11 + 24));
  return swift_unknownObjectRelease();
}

void sub_1000C45B0(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27[-1] - v9;
  if ([self protectedAppsEnabled])
  {
    if (a1)
    {
      type metadata accessor for DOCBrowserContainerController();
      uint64_t v11 = swift_dynamicCastClass();
      id v12 = (void *)v11;
      if (v11)
      {
        os_log_type_t v13 = (void **)(v11 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
        swift_beginAccess();
        uint64_t v14 = *v13;
        if (v14)
        {
          type metadata accessor for DOCItemCollectionViewController(0);
          uint64_t v15 = swift_dynamicCastClass();
          id v16 = a2;
          if (v15)
          {
            uint64_t v17 = v16;
            id v18 = v14;
            sub_1000251F4();

            return;
          }
        }
        else
        {
          id v22 = a2;
        }
      }
      static Logger.UI.getter();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315138;
        v27[3] = sub_10009B0E4(0xD000000000000030, 0x80000001005DEAA0, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "[PROTECTED APPS] %s authenticateLocationWithNoUI nil view controller", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    else
    {
      static Logger.UI.getter();
      uint64_t v19 = Logger.logObject.getter();
      uint64_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, (os_log_type_t)v20))
      {
        id v21 = (uint8_t *)swift_slowAlloc();
        v27[0] = swift_slowAlloc();
        *(_DWORD *)id v21 = 136315138;
        uint64_t v28 = sub_10009B0E4(0xD000000000000030, 0x80000001005DEAA0, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v20, "[PROTECTED APPS] %s authenticateLocationWithNoUI nil node", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
}

uint64_t sub_1000C4AD0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v15 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  uint64_t v16 = swift_projectBox();
  char v32 = 1;
  swift_beginAccess();
  *(unsigned char *)(v16 + *(int *)(v15 + 24)) = 0;
  id v17 = [a5 sourceIdentifier];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;
  if (v18 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v20 != v21) {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a5;
  *(void *)(v23 + 24) = a2;
  *(void *)(v23 + 32) = a1;
  *(void *)(v23 + 40) = a6;
  *(void *)(v23 + 48) = a7;
  *(unsigned char *)(v23 + 56) = a8 & 1;
  *(unsigned char *)(v23 + 57) = a9 & 1;
  sub_1000CBE70(&qword_100708CE0);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1005A0030;
  *(void *)(v24 + 32) = a3;
  *(void *)(v24 + 40) = a4;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_1000BCA6C;
  *(void *)(v25 + 24) = v23;
  id v26 = a4;
  swift_retain();
  id v27 = a5;
  a2;
  swift_retain();
  swift_retain();
  id v28 = a3;
  sub_1000AE818(v24, 0, v32 & 1, (uint64_t)sub_1000AFB8C, v25);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000C4CFC(void *a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v30 = a5;
  int v28 = a2;
  int v29 = a4;
  int v31 = a3;
  uint64_t v10 = (int *)type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  uint64_t v11 = *((void *)v10 - 1);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000CBE70((uint64_t *)&unk_10070B640);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocBox();
  uint64_t v19 = v18;
  sub_1000CBE70((uint64_t *)&unk_1007084E0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1005A04F0;
  *(void *)(v20 + 32) = a1;
  uint64_t v32 = v20;
  specialized Array._endMutation()();
  uint64_t v21 = v32;
  id v22 = a1;
  UUID.init()();
  *(unsigned char *)(v19 + v10[5]) = 0;
  *(unsigned char *)(v19 + v10[6]) = 1;
  *(void *)(v19 + v10[7]) = v21;
  sub_1000C1CF0(v19, (uint64_t)v16, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
  (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v16, 0, 1, v10);
  uint64_t v23 = (uint64_t)v16;
  char v24 = v28;
  sub_1000C19B4(v23, &OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation);
  if (v29)
  {
    sub_1000C1CF0(v19, (uint64_t)v13, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    sub_1000C4FC0((uint64_t)v13, v22, v24 & 1);
    sub_1000C1DEC((uint64_t)v13, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
  }
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v7;
  *(void *)(v25 + 24) = v17;
  *(void *)(v25 + 32) = v30;
  *(void *)(v25 + 40) = a6;
  *(unsigned char *)(v25 + 48) = v24 & 1;
  *(unsigned char *)(v25 + 49) = v31 & 1;
  swift_retain();
  id v26 = v7;
  swift_retain();
  swift_retain();
  sub_10006294C(v22, 1, v26, (char *)sub_10006B5E0, v25);
  swift_release();
  return swift_release_n();
}

uint64_t sub_1000C4FC0(uint64_t a1, void *a2, int a3)
{
  uint64_t v7 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (unint64_t *)(v3 + OBJC_IVAR____TtC5Files22DOCHierarchyController_locations);
  uint64_t result = swift_beginAccess();
  unint64_t v13 = *v11;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v29) {
      return result;
    }
  }
  else if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v30 = a1;
  int v31 = a3;
  uint64_t v14 = swift_allocObject();
  int v33 = 1;
  *(unsigned char *)(v14 + 16) = 1;
  uint64_t v32 = v14 + 16;
  id v15 = [a2 placeholderLocation];
  id v16 = [a2 sourceIdentifier];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  if (v17 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v19 != v20) {
    int v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1000C1CF0(v30, (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DOCHierarchyController.FetchingOperationToken);
  unint64_t v22 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v23 = (v9 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v21;
  sub_1000C194C((uint64_t)v10, v24 + v22, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
  *(void *)(v24 + v23) = v14;
  unint64_t v25 = v24 + ((v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v25 = v15;
  *(unsigned char *)(v25 + 8) = v31 & 1;
  sub_1000CBE70(&qword_100708CE0);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1005A0030;
  *(void *)(v26 + 32) = v15;
  *(void *)(v26 + 40) = 0;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = sub_1000BC9B8;
  *(void *)(v27 + 24) = v24;
  id v28 = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000AE818(v26, 0, v33 & 1, (uint64_t)sub_1000AFB8C, v27);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  *(unsigned char *)(v14 + 16) = 0;
  return swift_release();
}

void sub_1000C535C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = _swiftEmptyArrayStorage;
  uint64_t v6 = &v0[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
  swift_beginAccess();
  unint64_t v7 = *(void *)v6;
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v9 = v8 - 1;
    if (!__OFSUB__(v8, 1)) {
      goto LABEL_3;
    }
LABEL_14:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  unint64_t v9 = v24 - 1;
  if (__OFSUB__(v24, 1)) {
    goto LABEL_14;
  }
LABEL_3:
  if ((v9 & 0x8000000000000000) != 0
    || v9 < *(void *)&v0[OBJC_IVAR____TtC5Files22DOCHierarchyController_minParentLocations])
  {
    uint64_t v13 = sub_1000C5678((uint64_t)v0);
    if (v13)
    {
      id v15 = (void *)v13;
      id v16 = v14;
      uint64_t v17 = *(void **)&v0[OBJC_IVAR____TtC5Files22DOCHierarchyController_itemManager];
      id v18 = [v14 itemID];
      uint64_t v19 = (void *)swift_allocObject();
      v19[2] = v15;
      uint64_t v19[3] = v16;
      v19[4] = v0;
      v19[5] = v5;
      aBlock[4] = sub_10023E698;
      aBlock[5] = v19;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10016A350;
      aBlock[3] = &unk_100699D88;
      uint64_t v20 = _Block_copy(aBlock);
      id v21 = v15;
      id v22 = v16;
      unint64_t v23 = v0;
      swift_retain();
      swift_release();
      [v17 fetchParentsForItemID:v18 recursively:1 completionHandler:v20];
      _Block_release(v20);
      swift_release();

      return;
    }
  }
  else
  {
    static Logger.UI.getter();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Parent loading limit reached.", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  swift_release();
}

uint64_t sub_1000C5678(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (unint64_t *)(a1 + OBJC_IVAR____TtC5Files22DOCHierarchyController_locations);
  swift_beginAccess();
  unint64_t v7 = *v6;
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    static Logger.UI.getter();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Location cannot load a parent [locations array is empty]", v22, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    os_log_type_t v11 = v10;
    swift_bridgeObjectRelease();
    id v12 = [v11 fileProviderItem];
    if (v12)
    {
      uint64_t v13 = v12;
      if (([v11 isRoot] & 1) == 0) {
        return (uint64_t)v11;
      }
      uint64_t v14 = (void *)static DOCLog.UI.getter();
      static os_log_type_t.debug.getter();
      sub_1000CBE70((uint64_t *)&unk_100708800);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1005A0030;
      *(void *)(v15 + 56) = sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
      *(void *)(v15 + 64) = sub_1000C5A24((unint64_t *)&qword_10070B688, (unint64_t *)&unk_1007085C0);
      *(void *)(v15 + 32) = v11;
      id v16 = v11;
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = (void *)static DOCLog.UI.getter();
      static os_log_type_t.debug.getter();
      sub_1000CBE70((uint64_t *)&unk_100708800);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1005A0030;
      *(void *)(v18 + 56) = sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
      *(void *)(v18 + 64) = sub_1000C5A24((unint64_t *)&qword_10070B688, (unint64_t *)&unk_1007085C0);
      *(void *)(v18 + 32) = v11;
      id v19 = v11;
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
    }
    return 0;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v10 = *(id *)(v7 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C5A24(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10009E6C4(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *DOCHierarchyController.init(configuration:sourceObserver:minParentLocations:itemManager:userInterfaceStateStore:)(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  Class v63 = a2;
  uint64_t v64 = a5;
  uint64_t v61 = a1;
  unint64_t v62 = a4;
  uint64_t v60 = a3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v59 = v7;
  __chkstk_darwin(v7);
  uint64_t v57 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v70 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v69 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  swift_unknownObjectWeakInit();
  *(void *)&v5[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations] = _swiftEmptyArrayStorage;
  *(void *)&v5[OBJC_IVAR____TtC5Files22DOCHierarchyController__lastBrowsedStateByTab] = &_swiftEmptyDictionarySingleton;
  *(void *)&v5[OBJC_IVAR____TtC5Files22DOCHierarchyController_defaultTab] = 2;
  id v12 = &v5[OBJC_IVAR____TtC5Files22DOCHierarchyController__currentUpdateExpectation];
  uint64_t updated = type metadata accessor for DOCHierarchyController.UpdateExpectation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(v12, 1, 1, updated);
  *(void *)&v5[OBJC_IVAR____TtC5Files22DOCHierarchyController_locationsBeingRestored] = 0;
  *(void *)&v5[OBJC_IVAR____TtC5Files22DOCHierarchyController_effectiveRootLocationCandidate] = 0;
  v5[OBJC_IVAR____TtC5Files22DOCHierarchyController_isResetBeingPerformed] = 0;
  uint64_t v14 = &v5[OBJC_IVAR____TtC5Files22DOCHierarchyController_loadingDisabledOperation];
  uint64_t v15 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  id v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  v16(&v6[OBJC_IVAR____TtC5Files22DOCHierarchyController_localOperation], 1, 1, v15);
  uint64_t v17 = &v6[OBJC_IVAR____TtC5Files22DOCHierarchyController_delayedLoadingBlock];
  *uint64_t v17 = 0;
  v17[1] = 0;
  *(void *)&v6[OBJC_IVAR____TtC5Files22DOCHierarchyController____lazy_storage___loadingDisabledAssertions] = 0;
  v6[OBJC_IVAR____TtC5Files22DOCHierarchyController_shouldForceChangeInPreparationQueue] = 0;
  uint64_t v56 = OBJC_IVAR____TtC5Files22DOCHierarchyController_locationChangePreparationQueue;
  uint64_t v55 = sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v18 = v6;
  uint64_t v54 = static OS_dispatch_queue.main.getter();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v67 = sub_100076EA4((unint64_t *)&qword_1007054C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v66 = sub_1000CBE70((uint64_t *)&unk_100709900);
  uint64_t v68 = sub_100073DF0((unint64_t *)&qword_1007054D0, (uint64_t *)&unk_100709900);
  uint64_t v53 = v10;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unsigned int v52 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  id v19 = *(void (**)(void))(v70 + 104);
  v70 += 104;
  uint64_t v51 = (void (*)(char *, void, uint64_t))v19;
  v19(v69);
  *(void *)&v6[v56] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v56 = OBJC_IVAR____TtC5Files22DOCHierarchyController_nodeResolvingQueue;
  uint64_t v21 = v58;
  uint64_t v20 = v59;
  id v22 = v57;
  (*(void (**)(char *, void, uint64_t))(v58 + 104))(v57, enum case for DispatchQoS.QoSClass.userInitiated(_:), v59);
  uint64_t v54 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v20);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v23 = v69;
  uint64_t v24 = v50;
  unint64_t v25 = v51;
  v51(v69, v52, v50);
  *(void *)&v18[v56] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v59 = OBJC_IVAR____TtC5Files22DOCHierarchyController_lastVisitedLocationSavingQueue;
  v25(v23, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v24);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v18[v59] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_preventImmediateChangeAssertions] = _swiftEmptyArrayStorage;
  *(void *)&v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_sourceObserverContext] = 0;
  *(void *)&v18[OBJC_IVAR____TtC5Files22DOCHierarchyController____lazy_storage___userDefaultsObservedContent] = 0;
  *(void *)&v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_pickerContext] = 0;
  uint64_t v26 = &v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_activeOrInflightAppend];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  uint64_t v27 = &v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_activeSemanticNavigationOperation];
  *(void *)uint64_t v27 = 0;
  v27[8] = 1;
  *(void *)&v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_minParentLocations] = v60;
  id v28 = v61;
  uint64_t v29 = v62;
  *(void *)&v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_configuration] = v61;
  *(void *)&v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_itemManager] = v29;
  int v31 = v63;
  uint64_t v30 = v64;
  *(void *)&v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_sourceObserver] = v63;
  *(void *)&v18[OBJC_IVAR____TtC5Files22DOCHierarchyController_userInterfaceStateStore] = v30;
  id v32 = v28;
  id v33 = v29;
  id v34 = v31;
  id v35 = v30;

  v72.receiver = v18;
  v72.super_class = ObjectType;
  unint64_t v36 = [(char *)[super init]];
  id v37 = *(void **)&v36[OBJC_IVAR____TtC5Files22DOCHierarchyController_configuration];
  uint64_t v38 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1000BCA84;
  aBlock[5] = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000704F8;
  aBlock[3] = &unk_100698880;
  unint64_t v39 = _Block_copy(aBlock);
  id v40 = v36;
  id v41 = v37;
  swift_release();
  id v42 = [v34 addSubscriberForConfiguration:v41 usingBlock:v39];
  _Block_release(v39);

  uint64_t v43 = *(void **)&v40[OBJC_IVAR____TtC5Files22DOCHierarchyController_sourceObserverContext];
  *(void *)&v40[OBJC_IVAR____TtC5Files22DOCHierarchyController_sourceObserverContext] = v42;

  uint64_t v44 = self;
  id v45 = [v44 defaultCenter];
  [v45 addObserver:v40 selector:"tagsDidChangeWithNotification:" name:DOCTagRegistryTagsDidChangeNotification object:0];

  id v46 = [v44 defaultCenter];
  uint64_t v47 = v40;
  NSString v48 = String._bridgeToObjectiveC()();
  [v46 addObserver:v47 selector:"receiveInvalidateLocationsNotification" name:v48 object:0];

  return v47;
}

uint64_t sub_1000C63A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002376DC);
}

uint64_t sub_1000C63BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100237BA8);
}

unint64_t sub_1000C63D0()
{
  unint64_t result = qword_10070AB20;
  if (!qword_10070AB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10070AB20);
  }
  return result;
}

uint64_t sub_1000C6424()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if (v1) {
    [*(id *)(v1 + 16) invalidate];
  }
  uint64_t v2 = *(void **)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 64) = 0;
  unsigned __int8 v5 = *(unsigned char *)(v0 + 88);
  *(unsigned char *)(v0 + 88) = -1;
  sub_1000A7C1C(v2, v3, v4, v5);
  uint64_t result = *(void *)(v0 + 96);
  if (result)
  {
    *(void *)(v0 + 96) = 0;
    uint64_t result = swift_release();
    uint64_t v7 = *(void (**)(uint64_t))(v0 + 48);
    if (v7)
    {
      swift_retain();
      v7(v0);
      return sub_1000A7258((uint64_t)v7);
    }
  }
  return result;
}

uint64_t sub_1000C64DC(void *a1, void *a2)
{
  *(void *)&v2[OBJC_IVAR____TtC5Files19DOCSearchController_dismissingAssertion] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Files19DOCSearchController_cachedSearchQuery] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Files19DOCSearchController__suggesterManager] = 0;
  uint64_t v5 = OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsTableViewContainerView;
  id v6 = objc_allocWithZone((Class)UIView);
  uint64_t v7 = v2;
  *(void *)&v2[v5] = [v6 init];
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsTableViewWidthConstraint] = 0;
  v7[OBJC_IVAR____TtC5Files19DOCSearchController_searchPresentationState] = 4;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController____lazy_storage___stackedSearchLayout] = 0;
  v7[OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsPlacement] = 0;
  v7[OBJC_IVAR____TtC5Files19DOCSearchController_searchFieldHasFocus] = 0;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController____lazy_storage___suggestionsTableViewController] = 0;
  uint64_t v8 = OBJC_IVAR____TtC5Files19DOCSearchController_sizeCategoryDependantConstraints;
  type metadata accessor for DOCSizeCategoryDependantConstraints();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = &_swiftEmptyDictionarySingleton;
  *(void *)(v9 + 24) = 0;
  *(unsigned char *)(v9 + 32) = 1;
  *(void *)&v7[v8] = v9;
  swift_unknownObjectWeakInit();
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController_searchDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v7[OBJC_IVAR____TtC5Files19DOCSearchController_isDeactiveTemporary] = 0;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController_selectedScopeIndex] = 0;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController_blocksToRunAfterDismiss] = _swiftEmptyArrayStorage;
  v7[OBJC_IVAR____TtC5Files19DOCSearchController__currentTraitCollectionSource] = 0;
  uint64_t v10 = &v7[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration];
  *(_WORD *)uint64_t v10 = 0;
  v10[2] = 1;
  v7[OBJC_IVAR____TtC5Files19DOCSearchController_activationTemporilyDisabled] = 0;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsTypingTimeoutTimer] = 0;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController_displayedSuggestions] = _swiftEmptyArrayStorage;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController_selectedSuggestion] = 0;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController_configuration] = a1;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController_resultCollectionViewController] = a2;
  id v11 = objc_allocWithZone((Class)type metadata accessor for DOCSearchBar());
  id v12 = a1;
  id v13 = a2;
  *(void *)&v7[OBJC_IVAR____TtC5Files19DOCSearchController__searchBar] = sub_1000C6F20(v12);

  v20.receiver = v7;
  v20.super_class = (Class)type metadata accessor for DOCSearchController();
  uint64_t v14 = (char *)[v20 initWithSearchResultsController:v13];
  [v14 setObscuresBackgroundDuringPresentation:0];
  [v14 _dci_setIgnoresSearchSuggestionsForStackedSearch:1];
  uint64_t v15 = *(void *)(*(void *)&v14[OBJC_IVAR____TtC5Files19DOCSearchController_resultCollectionViewController]
                  + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (v15)
  {
    uint64_t v16 = v15 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
    if ((*(unsigned char *)(v16 + 16) & 1) == 0)
    {
      id v17 = *(id *)v16;
      id v18 = [v17 itemFilteringPredicate];

      swift_unknownObjectWeakAssign();
      sub_1000C68D8();

      return (uint64_t)v14;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_1000C6814(void *a1, uint64_t a2, SEL *a3)
{
  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for DOCSearchController();
  [super v4];

  return v4;
}

uint64_t type metadata accessor for DOCSearchController()
{
  return self;
}

uint64_t type metadata accessor for DOCSearchBar()
{
  return self;
}

uint64_t type metadata accessor for DOCSizeCategoryDependantConstraints()
{
  return self;
}

void sub_1000C68D8()
{
  uint64_t v1 = v0;
  id v2 = [v0 searchBar];
  [v2 setDelegate:v1];

  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for DOCSearchController();
  [super setDelegate:v1];
  [v1 setSearchResultsUpdater:v1];
  uint64_t v3 = swift_unknownObjectRetain();
  sub_1000C698C(v3, (uint64_t)&off_1006B4D38);
  sub_1000C6A40();
}

uint64_t sub_1000C698C(uint64_t a1, uint64_t a2)
{
  objc_super v4 = &v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_interactionDelegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *((void *)v4 + 1) = a2;
  swift_unknownObjectWeakAssign();
  uint64_t v6 = swift_unknownObjectWeakLoadStrong();
  if (!v6)
  {
    if (!Strong) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v7 = v6;
  swift_unknownObjectRelease();
  if (Strong) {
    BOOL v8 = v7 == Strong;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
LABEL_9:
    if (objc_msgSend(v2, "doc_hasAppearedOrIsAppearing")) {
      sub_100016C84();
    }
  }
  swift_unknownObjectRelease();
LABEL_12:

  return swift_unknownObjectRelease();
}

void sub_1000C6A40()
{
  if (v0[OBJC_IVAR____TtC5Files19DOCSearchController__currentTraitCollectionSource] == 1
    && (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong()) != 0)
  {
    id v2 = [Strong traitCollectionExpectedForSearchPresentation];
    swift_unknownObjectRelease();
  }
  else
  {
    v20.receiver = v0;
    v20.super_class = (Class)type metadata accessor for DOCSearchController();
    [super traitCollection];
  }
  id v3 = [v2 horizontalSizeClass];
  objc_super v4 = *(void **)&v0[OBJC_IVAR____TtC5Files19DOCSearchController_configuration];
  unsigned __int8 v5 = [v4 isPickerUI];
  if (v3 == (id)1)
  {
    unsigned int v6 = [v4 isPickerUI];
    BOOL v7 = [v0 searchBarPlacement] == (id)1;
    if (v6)
    {
      BOOL v8 = (unsigned __int8 *)&v0[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration];
      int v9 = v0[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration];
      int v10 = v0[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration + 1];
      int v11 = v0[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration + 2];
      *BOOL v8 = v5;
      v8[1] = 2;
      v8[2] = v7;
      if (v11) {
        int v12 = 0x10000;
      }
      else {
        int v12 = 0;
      }
      int v13 = v12 | (v10 << 8) | v9;
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v7 = [v0 searchBarPlacement] == (id)1;
  }
  id v14 = [v0 searchBarPlacement];
  uint64_t v15 = &v0[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration];
  int v16 = v0[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration];
  int v17 = v0[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration + 1];
  int v18 = v0[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration + 2];
  v0[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration] = v5;
  if (v18) {
    int v19 = 0x10000;
  }
  else {
    int v19 = 0;
  }
  int v13 = v19 | (v17 << 8) | v16;
  v15[1] = v14 == (id)1;
  v15[2] = v7;
LABEL_19:
  sub_1000C6D38(v13);
}

void sub_1000C6C0C(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsPlacement;
  int v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsPlacement);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsPlacement) = a1 & 1;
  if (((((a1 & 1) == 0) ^ v3) & 1) == 0)
  {
    sub_1005176AC();
    if (*(unsigned char *)(v1 + v2))
    {
      objc_super v4 = *(unsigned char **)(v1 + OBJC_IVAR____TtC5Files19DOCSearchController_resultCollectionViewController);
      sub_1001BBDCC(0);
      char v5 = v4[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_contentUnavailableUIAllowed];
      v4[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_contentUnavailableUIAllowed] = 1;
      if ((v5 & 1) == 0) {
        [v4 docSetNeedsUpdateContentUnavailableConfiguration];
      }
      sub_1001BC12C();
    }
  }
}

void sub_1000C6D38(int a1)
{
  uint64_t v2 = &v1[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration];
  int v3 = v1[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration + 1];
  if (((a1 ^ v1[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration]) & 1) != 0
    || v3 != BYTE1(a1)
    || ((v2[2] ^ ((a1 & 0x10000u) >> 16)) & 1) != 0)
  {
    [v1 setHidesNavigationBarDuringPresentation:v3 == 0];
    if (v2[1])
    {
      if (v2[1] == 1) {
        char v4 = *v2 ^ 1;
      }
      else {
        char v4 = 0;
      }
    }
    else
    {
      char v4 = 1;
    }
    [v1 setAutomaticallyShowsCancelButton:v4 & 1];
    char v5 = sub_1000C6E20();
    v5[OBJC_IVAR____TtC5Files32DOCSearchControllerStackedLayout_canShowAppMenuButton] = v2[1] != 2;

    char v6 = v2[2];
    sub_1000C6C0C(v6);
  }
}

id sub_1000C6E20()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files19DOCSearchController____lazy_storage___stackedSearchLayout;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files19DOCSearchController____lazy_storage___stackedSearchLayout);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files19DOCSearchController____lazy_storage___stackedSearchLayout);
  }
  else
  {
    char v4 = (objc_class *)type metadata accessor for DOCSearchControllerStackedLayout();
    char v5 = objc_allocWithZone(v4);
    swift_unknownObjectWeakInit();
    v5[OBJC_IVAR____TtC5Files32DOCSearchControllerStackedLayout_canShowAppMenuButton] = 1;
    v5[OBJC_IVAR____TtC5Files32DOCSearchControllerStackedLayout_searchPresentationState] = 4;
    *(void *)&v5[OBJC_IVAR____TtC5Files32DOCSearchControllerStackedLayout_appMenuButton] = 0;
    v5[OBJC_IVAR____TtC5Files32DOCSearchControllerStackedLayout_appMenuButtonVisible] = 0;
    swift_unknownObjectWeakAssign();
    v10.receiver = v5;
    v10.super_class = v4;
    [super init];
    BOOL v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t type metadata accessor for DOCSearchControllerStackedLayout()
{
  return self;
}

id sub_1000C6F20(void *a1)
{
  swift_getObjectType();
  uint64_t v3 = sub_1000CBE70(&qword_100708758);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC5Files12DOCSearchBar_configuration] = a1;
  id v6 = (objc_class *)type metadata accessor for DOCSearchBar();
  v17.receiver = v1;
  v17.super_class = v6;
  id v7 = a1;
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  id result = (id)_DocumentManagerBundle();
  if (result)
  {
    objc_super v10 = result;
    v18._object = (void *)0x80000001005F3A80;
    v11._countAndFlagsBits = 0x686372616553;
    v11._object = (void *)0xE600000000000000;
    v12._countAndFlagsBits = 0x617A696C61636F4CLL;
    v12._object = (void *)0xEB00000000656C62;
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v18._countAndFlagsBits = 0xD000000000000022;
    DOCLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v18);

    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 setPlaceholder:v14];

    if ([self enclosingTabSwitcherCanBeFloating]) {
      [v8 _setOverrideInlineInactiveWidth:1.79769313e308];
    }
    uint64_t v15 = type metadata accessor for DOCTraitChangeObservingOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 1, 1, v15);
    id v16 = v8;
    UIView.registerForUIPDocumentLandingTraitChanges<A>(options:_:)();
    swift_unknownObjectRelease();

    sub_1000C7158((uint64_t)v5);
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C7158(uint64_t a1)
{
  uint64_t v2 = sub_1000CBE70(&qword_100708758);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000C71C8(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_unknownObjectRelease();
  }
}

double sub_1000C7214@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v76 = a3;
  uint64_t v7 = *(void *)a2;
  uint64_t v74 = *(void *)(a2 + 8);
  uint64_t v75 = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v71 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 32);
  char v10 = *(unsigned char *)(a2 + 40);
  LOBYTE(v7) = *(unsigned char *)(a2 + 41);
  char v11 = *(unsigned char *)(a2 + 42);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v72 = *(void *)(a2 + 72);
  uint64_t v73 = v14;
  uint64_t v15 = *(void *)(a2 + 88);
  *(void *)&long long v81 = *(void *)(a2 + 80);
  *((void *)&v81 + 1) = v15;
  int v16 = v10 & 1;
  int v17 = v7 & 1;
  char v18 = v11 & 1;
  long long v82 = *(_OWORD *)(a2 + 96);
  uint64_t v83 = v12;
  uint64_t v19 = _s11EnvironmentVMa();
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (void *)((char *)v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000C9970(a1, (uint64_t)v21);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v24 = v21[2];
  uint64_t v25 = v21[3];
  uint64_t v26 = v21[4];
  uint64_t v27 = v21[5];
  uint64_t v28 = v21[8];
  uint64_t v29 = a2;
  int v30 = v17;
  sub_1000CAA28(v29);
  uint64_t v31 = (uint64_t)v21;
  uint64_t v33 = v74;
  uint64_t v32 = v75;
  uint64_t v34 = v71;
  sub_1000C9914(v31);
  v110[0] = v32;
  v110[1] = v33;
  v110[2] = v34;
  v110[3] = v8;
  v110[4] = v9;
  char v111 = v16;
  char v112 = v30;
  char v113 = v18;
  uint64_t v79 = v23;
  uint64_t v80 = v13;
  uint64_t v114 = v13;
  uint64_t v35 = v28;
  uint64_t v36 = v72;
  uint64_t v37 = v73;
  uint64_t v115 = v83;
  uint64_t v116 = v73;
  uint64_t v117 = v72;
  long long v118 = v81;
  long long v119 = v82;
  uint64_t v120 = v23;
  uint64_t v121 = v22;
  uint64_t v77 = v24;
  uint64_t v78 = v35;
  uint64_t v122 = v24;
  uint64_t v123 = v25;
  uint64_t v124 = v26;
  uint64_t v125 = v27;
  uint64_t v126 = v35;
  sub_1000CB0B0(v128);
  if ((v76 & 1) == 0) {
    goto LABEL_5;
  }
  if (qword_1007050E8 != -1) {
    uint64_t v38 = swift_once();
  }
  if ((byte_1007125C8 & 1) == 0)
  {
    v69[1] = v69;
    int v76 = v16;
    v69[0] = *(void *)(v70 + 24);
    __chkstk_darwin(v38);
    v69[-2] = v110;
    LODWORD(v70) = v30;
    sub_1000CBE70(&qword_1007121D8);
    dispatch thunk of DOCThreadSafeState.withSharedAccess<A>(_:)();
    LOBYTE(v16) = v76;
    sub_1000CBE0C((uint64_t)v127, (uint64_t)&v84, &qword_1007121D8);
    unint64_t v39 = &v84;
    LOBYTE(v30) = v70;
  }
  else
  {
LABEL_5:
    unint64_t v39 = v128;
  }
  sub_1000CBE0C((uint64_t)v39, (uint64_t)v127, &qword_1007121D8);
  *(void *)&long long v84 = v32;
  *((void *)&v84 + 1) = v33;
  uint64_t v85 = v34;
  *(void *)&long long v86 = v8;
  *((void *)&v86 + 1) = v9;
  char v87 = v16;
  char v88 = v30;
  char v89 = v18;
  int v90 = *(_DWORD *)&v127[227];
  char v91 = v127[231];
  *(void *)&long long v92 = v80;
  *((void *)&v92 + 1) = v83;
  *(void *)&long long v93 = v37;
  *((void *)&v93 + 1) = v36;
  long long v94 = v81;
  long long v95 = v82;
  *(void *)&long long v96 = v79;
  *((void *)&v96 + 1) = v22;
  *(void *)&long long v97 = v77;
  *((void *)&v97 + 1) = v25;
  *(void *)&long long v98 = v26;
  *((void *)&v98 + 1) = v27;
  uint64_t v99 = v78;
  sub_1000CBE0C((uint64_t)v127, (uint64_t)v100, &qword_1007121D8);
  double result = *(double *)&v84;
  uint64_t v41 = v85;
  char v42 = v87;
  char v43 = v88;
  char v44 = v89;
  uint64_t v45 = v99;
  uint64_t v46 = v101;
  uint64_t v47 = v109;
  long long v48 = v92;
  long long v49 = v93;
  long long v50 = v94;
  long long v51 = v95;
  long long v52 = v96;
  long long v53 = v97;
  long long v54 = v98;
  long long v55 = v86;
  long long v56 = v100[0];
  long long v57 = v100[1];
  long long v58 = v100[2];
  long long v59 = v100[3];
  long long v60 = v100[4];
  long long v61 = v100[5];
  long long v62 = v102;
  long long v63 = v103;
  long long v64 = v104;
  long long v65 = v105;
  long long v66 = v106;
  long long v67 = v107;
  long long v68 = v108;
  *(_OWORD *)a4 = v84;
  *(void *)(a4 + 16) = v41;
  *(_OWORD *)(a4 + 24) = v55;
  *(unsigned char *)(a4 + 40) = v42;
  *(unsigned char *)(a4 + 41) = v43;
  *(unsigned char *)(a4 + 42) = v44;
  *(_OWORD *)(a4 + 48) = v48;
  *(_OWORD *)(a4 + 64) = v49;
  *(_OWORD *)(a4 + 80) = v50;
  *(_OWORD *)(a4 + 96) = v51;
  *(_OWORD *)(a4 + 112) = v52;
  *(_OWORD *)(a4 + 128) = v53;
  *(_OWORD *)(a4 + 144) = v54;
  *(void *)(a4 + 160) = v45;
  *(_OWORD *)(a4 + 168) = v56;
  *(_OWORD *)(a4 + 184) = v57;
  *(_OWORD *)(a4 + 200) = v58;
  *(_OWORD *)(a4 + 216) = v59;
  *(_OWORD *)(a4 + 232) = v60;
  *(_OWORD *)(a4 + 248) = v61;
  *(void *)(a4 + 264) = v46;
  *(_OWORD *)(a4 + 272) = v62;
  *(_OWORD *)(a4 + 288) = v63;
  *(_OWORD *)(a4 + 304) = v64;
  *(_OWORD *)(a4 + 320) = v65;
  *(_OWORD *)(a4 + 336) = v66;
  *(_OWORD *)(a4 + 352) = v67;
  *(_OWORD *)(a4 + 368) = v68;
  *(void *)(a4 + 384) = v47;
  return result;
}

uint64_t sub_1000C7644()
{
  double v1 = *v0;
  sub_1000C7B44(v6);
  sub_1000CA180((uint64_t)v0, v6, v7);
  sub_1000CAA5C((void **)v7);
  if (v1 < v11 + v12 + v12 + v8 + v9 + v9 + v10 + v10 + v8 + v9 + v9 + v10 + v10) {
    return 1;
  }
  BOOL v3 = (*((unsigned char *)v0 + *(int *)(_s11EnvironmentVMa() + 44) + 8) & 1) == 0;
  uint64_t v4 = sub_1000CA354((uint64_t)v0, v1);
  BOOL v5 = __OFADD__(v4, v3);
  uint64_t result = v4 + v3;
  if (v5) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C7708@<X0>(double *a1@<X8>)
{
  uint64_t v2 = _s11EnvironmentVMa();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v5 = self;
  id v6 = [v5 currentDevice];
  id v7 = [v6 userInterfaceIdiom];

  if (v7 == (id)6)
  {
    long long v44 = *(_OWORD *)&UIEdgeInsetsZero.top;
    CGFloat bottom = UIEdgeInsetsZero.bottom;
    CGFloat right = UIEdgeInsetsZero.right;
    id v10 = [objc_allocWithZone((Class)UITraitCollection) init];
    long long v11 = v44;
    *(_OWORD *)uint64_t v4 = xmmword_1005A7E70;
    *((_OWORD *)v4 + 1) = v11;
    *((CGFloat *)v4 + 4) = bottom;
    *((CGFloat *)v4 + 5) = right;
    v4[48] = 2;
    *((void *)v4 + 7) = [v10 userInterfaceIdiom];
    [v10 displayScale];
    *((void *)v4 + 8) = v12;
    id v13 = v10;
    v4[72] = sub_1000C8E20(v13);
    UITraitCollection.doc_preferredLayoutSizeCategory.getter();
    sub_10009E9DC();
    UITraitCollection.subscript.getter();
    char v14 = v46;
    uint64_t v15 = &v4[*(int *)(v2 + 44)];
    *(void *)uint64_t v15 = v45;
    v15[8] = v14;
    id v16 = [self defaultMetrics];
    [v16 scaledValueForValue:v13 compatibleWithTraitCollection:1.0];
    uint64_t v18 = v17;

    *(void *)&v4[*(int *)(v2 + 48)] = v18;
    if (qword_100704F98 != -1) {
      swift_once();
    }
    double v19 = *(double *)&qword_1007371D8;
    if (qword_100704FB0 != -1) {
      swift_once();
    }
    sub_1000C99D4(v19, *(double *)&qword_1007371F0);
    uint64_t v21 = v20;
    sub_1000C9B00();
    double v22 = 12.0;
    UIFloorToScale();
    uint64_t v24 = v23;
    double v25 = 16.0;
    double v26 = 20.0;
    uint64_t v27 = 0;
    double v28 = 12.0;
    double v29 = 12.0;
  }
  else
  {
    id v30 = [v5 currentDevice];
    id v31 = [v30 userInterfaceIdiom];

    if (v31) {
      double v32 = 1022.0;
    }
    else {
      double v32 = 718.0;
    }
    long long v44 = *(_OWORD *)&UIEdgeInsetsZero.top;
    CGFloat v33 = UIEdgeInsetsZero.bottom;
    CGFloat v34 = UIEdgeInsetsZero.right;
    id v35 = [objc_allocWithZone((Class)UITraitCollection) init];
    *(double *)uint64_t v4 = v32;
    *((double *)v4 + 1) = v32;
    *((_OWORD *)v4 + 1) = v44;
    *((CGFloat *)v4 + 4) = v33;
    *((CGFloat *)v4 + 5) = v34;
    v4[48] = 2;
    *((void *)v4 + 7) = [v35 userInterfaceIdiom];
    [v35 displayScale];
    *((void *)v4 + 8) = v36;
    id v37 = v35;
    v4[72] = sub_1000C8E20(v37);
    UITraitCollection.doc_preferredLayoutSizeCategory.getter();
    sub_10009E9DC();
    UITraitCollection.subscript.getter();
    char v38 = v46;
    unint64_t v39 = &v4[*(int *)(v2 + 44)];
    *(void *)unint64_t v39 = v45;
    v39[8] = v38;
    id v40 = [self defaultMetrics];
    [v40 scaledValueForValue:v37 compatibleWithTraitCollection:1.0];
    uint64_t v42 = v41;

    *(void *)&v4[*(int *)(v2 + 48)] = v42;
    sub_1000C92AC((uint64_t)v4, 2, (uint64_t)&v45);
    uint64_t v21 = v45;
    uint64_t v24 = v46;
    double v22 = v47;
    double v28 = v48;
    double v29 = v49;
    uint64_t v27 = v50;
    double v26 = v51;
    double v25 = v52;
  }
  uint64_t result = sub_1000C9914((uint64_t)v4);
  *(void *)a1 = v21;
  *((void *)a1 + 1) = v24;
  a1[2] = v22;
  a1[3] = v28;
  a1[4] = v29;
  *((void *)a1 + 5) = v27;
  a1[6] = v26;
  a1[7] = v25;
  return result;
}

uint64_t sub_1000C7B44@<X0>(_OWORD *a1@<X8>)
{
  double v3 = *v1;
  uint64_t v4 = sub_1000C7CA0((uint64_t)v1);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4 + 32;
  uint64_t v7 = v5 - 1;
  if (v3 <= *(double *)(v4 + 32 + 72 * (v5 - 1)))
  {
    uint64_t v9 = v6 + 72 * v7;
    long long v10 = *(_OWORD *)(v9 + 56);
    long long v11 = *(_OWORD *)(v9 + 40);
    long long v12 = *(_OWORD *)(v9 + 24);
    long long v13 = *(_OWORD *)(v9 + 8);
    if (v5 != 1)
    {
      if (v3 > *(double *)(v6 + 72 * v5 - 144))
      {
LABEL_10:
        long long v21 = v13;
        long long v23 = v12;
        long long v25 = v11;
        long long v27 = v10;
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      uint64_t v14 = v4 + 72 * v5 - 32;
      while (--v7)
      {
        uint64_t v15 = (long long *)(v14 - 72);
        double v16 = *(double *)(v14 - 152);
        v14 -= 72;
        if (v3 > v16)
        {
          long long v11 = v15[2];
          long long v10 = v15[3];
          long long v13 = *v15;
          long long v12 = v15[1];
          goto LABEL_10;
        }
      }
      long long v26 = *(_OWORD *)(v14 - 40);
      long long v28 = *(_OWORD *)(v14 - 24);
      long long v22 = *(_OWORD *)(v14 - 72);
      long long v24 = *(_OWORD *)(v14 - 56);
LABEL_14:
      uint64_t result = swift_bridgeObjectRelease();
      long long v20 = v26;
      long long v19 = v28;
      long long v18 = v22;
      long long v17 = v24;
      goto LABEL_12;
    }
LABEL_16:
    long long v22 = v13;
    long long v24 = v12;
    long long v26 = v11;
    long long v28 = v10;
    goto LABEL_14;
  }
  long long v25 = *(_OWORD *)(v4 + 72);
  long long v27 = *(_OWORD *)(v4 + 88);
  long long v21 = *(_OWORD *)(v4 + 40);
  long long v23 = *(_OWORD *)(v4 + 56);
  swift_bridgeObjectRelease();
  uint64_t result = sub_100384C14();
LABEL_11:
  long long v18 = v21;
  long long v17 = v23;
  long long v20 = v25;
  long long v19 = v27;
LABEL_12:
  *a1 = v18;
  a1[1] = v17;
  a1[2] = v20;
  a1[3] = v19;
  return result;
}

uint64_t sub_1000C7CA0(uint64_t a1)
{
  if (*(void *)(a1 + 56) == 6)
  {
    sub_1000CBE70(&qword_100708D98);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1005A0030;
    if (qword_100704F98 != -1) {
      swift_once();
    }
    double v3 = *(double *)&qword_1007371D8;
    if (qword_100704FB0 != -1) {
      swift_once();
    }
    sub_1000C99D4(v3, *(double *)&qword_1007371F0);
    uint64_t v5 = v4;
    sub_1000C9B00();
    UIFloorToScale();
    *(void *)(v2 + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(v2 + 40) = v5;
    *(void *)(v2 + 48) = v6;
    __asm { FMOV            V0.2D, #12.0 }
    *(_OWORD *)(v2 + 56) = _Q0;
    *(_OWORD *)(v2 + 72) = xmmword_1005A7E50;
    *(_OWORD *)(v2 + 88) = xmmword_1005A7E60;
  }
  else
  {
    __chkstk_darwin(a1);
    v13[2] = a1;
    uint64_t v2 = (uint64_t)sub_1000C90D8((void (*)(long long *__return_ptr, char *))sub_1000C9214, (uint64_t)v13, (uint64_t)&off_100689880);
  }
  uint64_t v14 = v2;
  swift_bridgeObjectRetain();
  sub_1000C7E60(&v14);
  swift_bridgeObjectRelease();
  return v14;
}

Swift::Int sub_1000C7E60(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000C7ECC(v2);
  }
  double v3 = *(double **)(v2 + 16);
  v5[0] = (double *)(v2 + 32);
  v5[1] = v3;
  Swift::Int result = sub_1000C7EE0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1000C7ECC(uint64_t a1)
{
  return sub_1000C9F9C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

Swift::Int sub_1000C7EE0(double **a1)
{
  Swift::Int v3 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      char v89 = *a1;
      uint64_t v90 = -1;
      uint64_t v91 = 1;
      long long v92 = *a1;
      do
      {
        double v93 = v89[9 * v91];
        uint64_t v94 = v90;
        long long v95 = v92;
        do
        {
          long long v96 = v95 + 9;
          if (v93 >= *v95) {
            break;
          }
          if (!v89) {
            goto LABEL_142;
          }
          long long v97 = *((_OWORD *)v95 + 5);
          long long v98 = *((_OWORD *)v95 + 6);
          long long v99 = *((_OWORD *)v95 + 7);
          long long v100 = *((_OWORD *)v95 + 8);
          long long v101 = *((_OWORD *)v95 + 3);
          *(_OWORD *)(v95 + 13) = *((_OWORD *)v95 + 2);
          *(_OWORD *)(v95 + 15) = v101;
          long long v103 = *(_OWORD *)v95;
          long long v102 = *((_OWORD *)v95 + 1);
          *(_OWORD *)(v95 + 1) = v97;
          v95[17] = v95[8];
          double *v95 = v93;
          *(_OWORD *)(v95 + 3) = v98;
          *(_OWORD *)(v95 + 5) = v99;
          *(_OWORD *)(v95 + 7) = v100;
          v95 -= 9;
          *long long v96 = v103;
          v96[1] = v102;
        }
        while (!__CFADD__(v94++, 1));
        ++v91;
        v92 += 9;
        --v90;
      }
      while (v91 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_147;
  }
  Swift::Int v117 = result;
  uint64_t v114 = (uint64_t *)a1;
  if (v3 < 2)
  {
    double v8 = _swiftEmptyArrayStorage;
    uint64_t v123 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      long long v11 = (char *)_swiftEmptyArrayStorage;
LABEL_104:
      long long v105 = v11;
      uint64_t v116 = v8;
      if (v12 >= 2)
      {
        uint64_t v106 = *v114;
        do
        {
          unint64_t v107 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_133;
          }
          if (!v106) {
            goto LABEL_146;
          }
          long long v108 = v105;
          uint64_t v109 = *(void *)&v105[16 * v107 + 32];
          uint64_t v110 = *(void *)&v105[16 * v12 + 24];
          sub_10034565C((double *)(v106 + 72 * v109), (double *)(v106 + 72 * *(void *)&v105[16 * v12 + 16]), v106 + 72 * v110, v123);
          if (v1) {
            break;
          }
          if (v110 < v109) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v108 = sub_100520230((uint64_t)v108);
          }
          if (v107 >= *((void *)v108 + 2)) {
            goto LABEL_135;
          }
          char v111 = &v108[16 * v107 + 32];
          *(void *)char v111 = v109;
          *((void *)v111 + 1) = v110;
          unint64_t v112 = *((void *)v108 + 2);
          if (v12 > v112) {
            goto LABEL_136;
          }
          memmove(&v108[16 * v12 + 16], &v108[16 * v12 + 32], 16 * (v112 - v12));
          long long v105 = v108;
          *((void *)v108 + 2) = v112 - 1;
          unint64_t v12 = v112 - 1;
        }
        while (v112 > 2);
      }
LABEL_94:
      swift_bridgeObjectRelease();
      v116[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v116 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v116 = (void *)v7;
    uint64_t v123 = (double *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  long long v10 = *a1;
  uint64_t v115 = (uint64_t)(*a1 + 18);
  uint64_t v113 = (uint64_t)(*a1 - 9);
  long long v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v118 = v3;
  uint64_t v124 = v10;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      double v14 = v10[9 * v9];
      double v15 = v10[9 * v13];
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        double v16 = (double *)(v115 + 72 * v13);
        double v17 = v14;
        while (1)
        {
          double v18 = v17;
          double v17 = *v16;
          if (v14 < v15 == *v16 >= v18) {
            break;
          }
          ++v9;
          v16 += 9;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_139;
        }
        if (v13 < v9)
        {
          uint64_t v19 = 9 * v9;
          uint64_t v20 = 9 * v13;
          Swift::Int v21 = v9;
          Swift::Int v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v10) {
                goto LABEL_145;
              }
              long long v23 = &v10[v19];
              double v24 = v10[v20 + 8];
              long long v121 = *(_OWORD *)&v10[v20 + 2];
              long long v122 = *(_OWORD *)&v10[v20];
              long long v119 = *(_OWORD *)&v10[v20 + 6];
              long long v120 = *(_OWORD *)&v10[v20 + 4];
              memmove(&v10[v20], &v10[v19 - 9], 0x48uLL);
              long long v10 = v124;
              *(_OWORD *)(v23 - 9) = v122;
              *(_OWORD *)(v23 - 7) = v121;
              *(_OWORD *)(v23 - 5) = v120;
              *(_OWORD *)(v23 - 3) = v119;
              *(v23 - 1) = v24;
            }
            ++v22;
            v19 -= 9;
            v20 += 9;
          }
          while (v22 < v21);
          Swift::Int v3 = v118;
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_137;
    }
    if (v9 - v13 >= v117) {
      goto LABEL_47;
    }
    Swift::Int v25 = v13 + v117;
    if (__OFADD__(v13, v117)) {
      goto LABEL_140;
    }
    if (v25 >= v3) {
      Swift::Int v25 = v3;
    }
    if (v25 < v13) {
      break;
    }
    if (v9 != v25)
    {
      uint64_t v26 = v113 + 72 * v9;
      do
      {
        double v27 = v10[9 * v9];
        Swift::Int v28 = v13;
        uint64_t v29 = v26;
        do
        {
          id v30 = (_OWORD *)(v29 + 72);
          if (v27 >= *(double *)v29) {
            break;
          }
          if (!v10) {
            goto LABEL_143;
          }
          long long v31 = *(_OWORD *)(v29 + 80);
          long long v32 = *(_OWORD *)(v29 + 96);
          long long v33 = *(_OWORD *)(v29 + 112);
          long long v34 = *(_OWORD *)(v29 + 128);
          long long v35 = *(_OWORD *)(v29 + 48);
          *(_OWORD *)(v29 + 104) = *(_OWORD *)(v29 + 32);
          *(_OWORD *)(v29 + 120) = v35;
          long long v37 = *(_OWORD *)v29;
          long long v36 = *(_OWORD *)(v29 + 16);
          *(_OWORD *)(v29 + 8) = v31;
          *(void *)(v29 + 136) = *(void *)(v29 + 64);
          *(double *)uint64_t v29 = v27;
          *(_OWORD *)(v29 + 24) = v32;
          *(_OWORD *)(v29 + 40) = v33;
          *(_OWORD *)(v29 + 56) = v34;
          v29 -= 72;
          ++v28;
          *id v30 = v37;
          v30[1] = v36;
        }
        while (v9 != v28);
        ++v9;
        v26 += 72;
      }
      while (v9 != v25);
      Swift::Int v9 = v25;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_132;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v11 = sub_10051F91C(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v39 = *((void *)v11 + 2);
    unint64_t v38 = *((void *)v11 + 3);
    unint64_t v12 = v39 + 1;
    long long v10 = v124;
    if (v39 >= v38 >> 1)
    {
      char v88 = sub_10051F91C((char *)(v38 > 1), v39 + 1, 1, v11);
      long long v10 = v124;
      long long v11 = v88;
    }
    *((void *)v11 + 2) = v12;
    id v40 = v11 + 32;
    uint64_t v41 = &v11[16 * v39 + 32];
    *(void *)uint64_t v41 = v13;
    *((void *)v41 + 1) = v9;
    if (v39)
    {
      while (1)
      {
        unint64_t v42 = v12 - 1;
        if (v12 >= 4)
        {
          double v47 = &v40[16 * v12];
          uint64_t v48 = *((void *)v47 - 8);
          uint64_t v49 = *((void *)v47 - 7);
          BOOL v53 = __OFSUB__(v49, v48);
          uint64_t v50 = v49 - v48;
          if (v53) {
            goto LABEL_121;
          }
          uint64_t v52 = *((void *)v47 - 6);
          uint64_t v51 = *((void *)v47 - 5);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v45 = v51 - v52;
          char v46 = v53;
          if (v53) {
            goto LABEL_122;
          }
          unint64_t v54 = v12 - 2;
          long long v55 = &v40[16 * v12 - 32];
          uint64_t v57 = *(void *)v55;
          uint64_t v56 = *((void *)v55 + 1);
          BOOL v53 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          if (v53) {
            goto LABEL_124;
          }
          BOOL v53 = __OFADD__(v45, v58);
          uint64_t v59 = v45 + v58;
          if (v53) {
            goto LABEL_127;
          }
          if (v59 >= v50)
          {
            uint64_t v77 = &v40[16 * v42];
            uint64_t v79 = *(void *)v77;
            uint64_t v78 = *((void *)v77 + 1);
            BOOL v53 = __OFSUB__(v78, v79);
            uint64_t v80 = v78 - v79;
            if (v53) {
              goto LABEL_131;
            }
            BOOL v70 = v45 < v80;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v71 = *((void *)v11 + 4);
            uint64_t v72 = *((void *)v11 + 5);
            BOOL v53 = __OFSUB__(v72, v71);
            uint64_t v64 = v72 - v71;
            char v65 = v53;
            goto LABEL_78;
          }
          uint64_t v44 = *((void *)v11 + 4);
          uint64_t v43 = *((void *)v11 + 5);
          BOOL v53 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          char v46 = v53;
        }
        if (v46) {
          goto LABEL_123;
        }
        unint64_t v54 = v12 - 2;
        long long v60 = &v40[16 * v12 - 32];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v63 = __OFSUB__(v61, v62);
        uint64_t v64 = v61 - v62;
        char v65 = v63;
        if (v63) {
          goto LABEL_126;
        }
        long long v66 = &v40[16 * v42];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v53 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v53) {
          goto LABEL_129;
        }
        if (__OFADD__(v64, v69)) {
          goto LABEL_130;
        }
        if (v64 + v69 >= v45)
        {
          BOOL v70 = v45 < v69;
LABEL_84:
          if (v70) {
            unint64_t v42 = v54;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v65) {
          goto LABEL_125;
        }
        uint64_t v73 = &v40[16 * v42];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v53 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v53) {
          goto LABEL_128;
        }
        if (v76 < v64) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v81 = v42 - 1;
        if (v42 - 1 >= v12)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v10) {
          goto LABEL_144;
        }
        long long v82 = v11;
        uint64_t v83 = &v40[16 * v81];
        uint64_t v84 = *(void *)v83;
        uint64_t v85 = &v40[16 * v42];
        uint64_t v86 = *((void *)v85 + 1);
        sub_10034565C(&v10[9 * *(void *)v83], &v10[9 * *(void *)v85], (unint64_t)&v10[9 * v86], v123);
        if (v1) {
          goto LABEL_94;
        }
        if (v86 < v84) {
          goto LABEL_118;
        }
        if (v42 > *((void *)v82 + 2)) {
          goto LABEL_119;
        }
        *(void *)uint64_t v83 = v84;
        *(void *)&v40[16 * v81 + 8] = v86;
        unint64_t v87 = *((void *)v82 + 2);
        if (v42 >= v87) {
          goto LABEL_120;
        }
        long long v11 = v82;
        unint64_t v12 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((void *)v82 + 2) = v87 - 1;
        long long v10 = v124;
        if (v87 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v118;
    if (v9 >= v118)
    {
      double v8 = v116;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double sub_1000C8674@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = _s11EnvironmentVMa();
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v6) = *(unsigned char *)(v1 + 56);
  double v8 = *(void **)v1;
  long long v9 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v7 + 1) = v9;
  *((_OWORD *)v7 + 2) = *(_OWORD *)(v1 + 40);
  v7[48] = v6;
  id v10 = v8;
  *((void *)v7 + 7) = [v10 userInterfaceIdiom];
  [v10 displayScale];
  *((void *)v7 + 8) = v11;
  id v12 = v10;
  v7[72] = sub_1000C8E20(v12);
  UITraitCollection.doc_preferredLayoutSizeCategory.getter();
  sub_10009E9DC();
  UITraitCollection.subscript.getter();
  int v13 = v157;
  double v14 = &v7[*(int *)(v5 + 52)];
  *(void *)double v14 = v156;
  v14[8] = v13;
  id v15 = [self defaultMetrics];
  [v15 scaledValueForValue:v12 compatibleWithTraitCollection:1.0];
  uint64_t v17 = v16;

  *(void *)&v7[*(int *)(v5 + 56)] = v17;
  uint64_t v18 = v2 + 64;
  sub_1000CBE0C(v18, (uint64_t)v206, &qword_1007121D8);
  sub_1000CBE0C((uint64_t)v206, (uint64_t)v207, &qword_1007121D8);
  if (sub_1000CBEB4((uint64_t *)v207) == 1)
  {
    sub_1000C7B44(v118);
    sub_1000CA180((uint64_t)v7, v118, v119);
    if (qword_1007050E0 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1000CA4F4((uint64_t)v7, (uint64_t)v119, 1, (uint64_t)&v120);
    uint64_t v19 = v138;
    uint64_t v117 = v137;
    long long v114 = v134;
    long long v115 = v135;
    long long v116 = v136;
    long long v110 = v130;
    long long v111 = v131;
    long long v112 = v132;
    long long v113 = v133;
    long long v108 = v143;
    long long v109 = v144;
    long long v106 = v141;
    long long v107 = v142;
    long long v104 = v139;
    long long v105 = v140;
    sub_1000CAF68((uint64_t)&v120);
    uint64_t v20 = sub_1000C7644();
    if (v19 >= v20)
    {
      sub_1000CA11C((uint64_t)&v120);
      long long v101 = v153;
      long long v102 = v154;
      uint64_t v103 = v155;
      long long v97 = v149;
      long long v98 = v150;
      long long v99 = v151;
      long long v100 = v152;
      long long v93 = v145;
      long long v94 = v146;
      long long v95 = v147;
      long long v96 = v148;
      uint64_t v22 = *((void *)&v120 + 1);
      uint64_t v21 = v120;
      uint64_t v23 = v121;
      long long v24 = v122;
      char v25 = v123;
      char v26 = v124;
      char v27 = v125;
      long long v28 = v126;
      long long v29 = v127;
      long long v30 = v128;
      long long v31 = v129;
      long long v83 = v114;
      long long v84 = v115;
      long long v85 = v116;
      long long v79 = v110;
      long long v80 = v111;
      long long v81 = v112;
      long long v82 = v113;
      *(void *)&long long v86 = v117;
      *((void *)&v86 + 1) = v19;
      long long v91 = v108;
      long long v92 = v109;
      long long v89 = v106;
      long long v90 = v107;
      long long v87 = v104;
      long long v88 = v105;
    }
    else
    {
      sub_100381CB0(&v120, v20, (uint64_t)v7, 1, v13 ^ 1, &v156);
      sub_1000CA11C((uint64_t)&v120);
      sub_1000CA11C((uint64_t)&v120);
      long long v101 = v189;
      long long v102 = v190;
      uint64_t v103 = v191;
      long long v97 = v185;
      long long v98 = v186;
      long long v99 = v187;
      long long v100 = v188;
      long long v93 = v181;
      long long v94 = v182;
      long long v95 = v183;
      long long v96 = v184;
      long long v89 = v177;
      long long v90 = v178;
      long long v91 = v179;
      long long v92 = v180;
      long long v85 = v173;
      long long v86 = v174;
      long long v87 = v175;
      long long v88 = v176;
      long long v81 = v169;
      long long v82 = v170;
      long long v83 = v171;
      long long v84 = v172;
      long long v79 = v167;
      long long v80 = v168;
      uint64_t v21 = v156;
      uint64_t v22 = v157;
      uint64_t v23 = v158;
      long long v24 = v159;
      char v25 = v160;
      char v26 = v161;
      char v27 = v162;
      long long v28 = v163;
      long long v29 = v164;
      long long v30 = v165;
      long long v31 = v166;
    }
    v43[0] = v21;
    v43[1] = v22;
    v43[2] = v23;
    long long v44 = v24;
    char v45 = v25 & 1;
    char v46 = v26 & 1;
    char v47 = v27 & 1;
    long long v48 = v28;
    long long v49 = v29;
    long long v50 = v30;
    long long v51 = v31;
    long long v62 = v89;
    long long v63 = v90;
    long long v64 = v91;
    long long v65 = v92;
    long long v58 = v85;
    long long v59 = v86;
    long long v60 = v87;
    long long v61 = v88;
    long long v54 = v81;
    long long v55 = v82;
    long long v56 = v83;
    long long v57 = v84;
    long long v52 = v79;
    long long v53 = v80;
    long long v74 = v101;
    long long v75 = v102;
    uint64_t v76 = v103;
    long long v70 = v97;
    long long v71 = v98;
    long long v73 = v100;
    long long v72 = v99;
    long long v66 = v93;
    long long v67 = v94;
    long long v69 = v96;
    long long v68 = v95;
    sub_1000CAA28((uint64_t)&v79);
    sub_1000CA11C((uint64_t)v43);
    sub_1000CAA5C((void **)v119);
    swift_release();
    sub_1000C9914((uint64_t)v7);
    v77[10] = v89;
    v77[11] = v90;
    v77[12] = v91;
    v77[13] = v92;
    v77[6] = v85;
    v77[7] = v86;
    v77[8] = v87;
    v77[9] = v88;
    v77[2] = v81;
    v77[3] = v82;
    v77[4] = v83;
    v77[5] = v84;
    v77[0] = v79;
    v77[1] = v80;
    DOCSplitBrowserViewController.didCommitPreview(of:)(v77);
    sub_1000CBE0C(v18, (uint64_t)v78, &qword_1007121D8);
    sub_1000CAA28((uint64_t)&v79);
    sub_1000CA2A0((uint64_t)v78);
    sub_1000CBE0C((uint64_t)v77, v18, &qword_1007121D8);
    long long v202 = v89;
    long long v203 = v90;
    long long v204 = v91;
    long long v205 = v92;
    long long v198 = v85;
    long long v199 = v86;
    long long v200 = v87;
    long long v201 = v88;
    long long v194 = v81;
    long long v195 = v82;
    long long v196 = v83;
    long long v197 = v84;
    long long v32 = v79;
    long long v33 = v80;
  }
  else
  {
    sub_1000CBE0C((uint64_t)v206, (uint64_t)&v156, &qword_1007121D8);
    sub_1000CAA28((uint64_t)&v156);
    sub_1000C9914((uint64_t)v7);
    long long v202 = v207[10];
    long long v203 = v207[11];
    long long v204 = v207[12];
    long long v205 = v207[13];
    long long v198 = v207[6];
    long long v199 = v207[7];
    long long v200 = v207[8];
    long long v201 = v207[9];
    long long v194 = v207[2];
    long long v195 = v207[3];
    long long v196 = v207[4];
    long long v197 = v207[5];
    long long v32 = v207[0];
    long long v33 = v207[1];
  }
  long long v192 = v32;
  long long v193 = v33;
  long long v34 = v203;
  a1[10] = v202;
  a1[11] = v34;
  long long v35 = v205;
  a1[12] = v204;
  a1[13] = v35;
  long long v36 = v199;
  a1[6] = v198;
  a1[7] = v36;
  long long v37 = v201;
  a1[8] = v200;
  a1[9] = v37;
  long long v38 = v195;
  a1[2] = v194;
  a1[3] = v38;
  long long v39 = v197;
  a1[4] = v196;
  a1[5] = v39;
  double result = *(double *)&v192;
  long long v41 = v193;
  *a1 = v192;
  a1[1] = v41;
  return result;
}

uint64_t sub_1000C8E20(void *a1)
{
  uint64_t v2 = type metadata accessor for DOCContentLayoutSizeCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v8 = (char *)v26 - v7;
  id v9 = [a1 preferredContentSizeCategory];
  char v10 = UIContentSizeCategory.isAccessibilityCategory.getter();

  if ((v10 & 1) == 0)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
    if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
      {
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;
        if (v21 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v23 != v24)
        {
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (v25 & 1) == 0;
        }

        swift_bridgeObjectRelease_n();
        return 0;
      }
    }

    return 0;
  }
  UITraitCollection.doc_preferredLayoutSizeCategory.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for DOCContentLayoutSizeCategory.extraLarge(_:), v2);
  sub_1000C9F24();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();

  uint64_t v12 = v26[0];
  uint64_t v11 = v26[1];
  int v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v8, v2);
  if (v11 == v12) {
    return 3;
  }
  else {
    return 2;
  }
}

void *sub_1000C90D8(void (*a1)(long long *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    long long v30 = _swiftEmptyArrayStorage;
    sub_1000C9F7C(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    id v9 = (char *)(a3 + 32);
    while (1)
    {
      char v10 = *v9++;
      char v24 = v10;
      a1(&v25, &v24);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      long long v11 = v25;
      long long v12 = v26;
      long long v13 = v27;
      long long v14 = v28;
      uint64_t v15 = v29;
      long long v30 = v6;
      unint64_t v17 = v6[2];
      unint64_t v16 = v6[3];
      if (v17 >= v16 >> 1)
      {
        long long v22 = v26;
        long long v23 = v25;
        long long v20 = v28;
        long long v21 = v27;
        sub_1000C9F7C(v16 > 1, v17 + 1, 1);
        long long v14 = v20;
        long long v13 = v21;
        long long v12 = v22;
        long long v11 = v23;
        uint64_t v6 = v30;
      }
      v6[2] = v17 + 1;
      uint64_t v18 = &v6[9 * v17];
      *((_OWORD *)v18 + 2) = v11;
      *((_OWORD *)v18 + 3) = v12;
      *((_OWORD *)v18 + 4) = v13;
      *((_OWORD *)v18 + 5) = v14;
      v18[12] = v15;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

double sub_1000C9214@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C9234(a1, *(void *)(v2 + 16), a2);
}

double sub_1000C9234@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = qword_1005A7E90[*a1];
  sub_1000C92AC(a2, *a1, (uint64_t)v8);
  *(void *)a3 = v4;
  long long v5 = v8[1];
  *(_OWORD *)(a3 + 8) = v8[0];
  *(_OWORD *)(a3 + 24) = v5;
  double result = *(double *)&v9;
  long long v7 = v10;
  *(_OWORD *)(a3 + 40) = v9;
  *(_OWORD *)(a3 + 56) = v7;
  return result;
}

uint64_t sub_1000C92AC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DOCContentLayoutSizeCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _s11EnvironmentVMa();
  __chkstk_darwin(v10);
  long long v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = *(double *)a1;
  switch(a2)
  {
    case 2:
      if (qword_100704F88 != -1) {
        swift_once();
      }
      double v19 = *(double *)&qword_1007371C8;
      if (qword_100704FA0 != -1) {
        swift_once();
      }
      sub_1000C99D4(v19, *(double *)&qword_1007371E0);
      double v16 = v20;
      goto LABEL_15;
    case 3:
      if (qword_100704F88 != -1) {
        swift_once();
      }
      double v24 = *(double *)&qword_1007371C8;
      if (qword_100704FA8 != -1) {
        swift_once();
      }
      long long v25 = &qword_1007371E8;
      goto LABEL_30;
    case 4:
      if (qword_100704F88 != -1) {
        swift_once();
      }
      double v24 = *(double *)&qword_1007371C8;
      if (qword_100704FB0 != -1) {
        swift_once();
      }
      long long v25 = &qword_1007371F0;
LABEL_30:
      sub_1000C99D4(v24, *(double *)v25);
      double v16 = v26;
      if (*(unsigned char *)(a1 + *(int *)(v10 + 44) + 8)) {
        double v18 = 12.0;
      }
      else {
        double v18 = 6.0;
      }
      sub_1000C9B00();
      UIFloorToScale();
      double v22 = v27;
      double v17 = 30.0;
      goto LABEL_34;
    default:
      if (qword_100704F80 != -1) {
        swift_once();
      }
      double v14 = *(double *)&qword_1007371C0;
      if (qword_100704F90 != -1) {
        swift_once();
      }
      sub_1000C99D4(v14, *(double *)&qword_1007371D0);
      double v16 = v15;
      if (!a2)
      {
        double v17 = 4.0;
        if (*(unsigned char *)(a1 + *(int *)(v10 + 44) + 8)) {
          double v18 = 8.0;
        }
        else {
          double v18 = 4.0;
        }
LABEL_19:
        sub_1000C9B00();
        UIFloorToScale();
        double v22 = v23;
        goto LABEL_34;
      }
LABEL_15:
      if (*(unsigned char *)(a1 + *(int *)(v10 + 44) + 8)) {
        double v18 = 8.0;
      }
      else {
        double v18 = 4.0;
      }
      sub_1000C9B00();
      UIFloorToScale();
      double v22 = v21;
      double v17 = 10.0;
      if (v13 > 719.0) {
        goto LABEL_19;
      }
LABEL_34:
      sub_1000C9970(a1, (uint64_t)v12);
      if (v13 >= 500.0)
      {
        sub_1000C9914((uint64_t)v12);
        BOOL v31 = 0;
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DOCContentLayoutSizeCategory.extraLarge(_:), v6);
        sub_1000C9F24();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v29 = v46[0];
        uint64_t v28 = v46[1];
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        sub_1000C9914((uint64_t)v12);
        BOOL v30 = v28 == v29;
        BOOL v31 = v28 == v29;
        double v32 = v18 + -4.0;
        double v33 = v17 + -12.0;
        if (!v30)
        {
          double v32 = v18;
          double v33 = v17;
        }
        double v18 = fmax(v32, 4.0);
        if (v33 >= 4.0) {
          double v17 = v33;
        }
        else {
          double v17 = 4.0;
        }
      }
      int v34 = *(unsigned __int8 *)(a1 + 48);
      double v35 = fmax(v18 + -2.0, 4.0);
      if (v34 == 3) {
        double v36 = v35;
      }
      else {
        double v36 = v18;
      }
      if (v34 == 3) {
        double v37 = 12.0;
      }
      else {
        double v37 = v18;
      }
      if (v34 == 3) {
        double v38 = 12.0;
      }
      else {
        double v38 = 20.0;
      }
      if (v34 == 3) {
        double v39 = 12.0;
      }
      else {
        double v39 = 10.0;
      }
      uint64_t result = static DOCUIPPrototyping.enhandedMajestyGridLayout.getter();
      if ((result & 1) != 0 && *(double *)a1 >= 320.0)
      {
        double v22 = v22 + v22;
        double v36 = 32.0;
        double v37 = 32.0;
        double v17 = 96.0;
      }
      if (v31)
      {
        double v41 = v36 + v17 + v17 + v16 + v22 + v22 + 8.0 + v16 + v22 + v22 + 8.0 - v13;
        double v42 = v41 * 0.5;
        if (v41 <= 0.0) {
          double v42 = 0.0;
        }
        double v43 = fmax(v22 - v42, 2.0);
        if (v42 > 0.0) {
          double v22 = v43;
        }
        double v44 = v13 - (v36 + v17 + v17 + v16 + v22 + v22 + 8.0 + v16 + v22 + v22 + 8.0);
        if (v44 <= 0.0) {
          double v44 = 0.0;
        }
        double v45 = (v16 * 0.2 - v44) * 0.5;
        if (v45 < 0.0) {
          double v45 = 0.0;
        }
        if (v45 > 0.0) {
          double v22 = fmax(v22 - v45, 2.0);
        }
      }
      *(double *)a3 = v16;
      *(double *)(a3 + 8) = v22;
      *(void *)(a3 + 16) = 0x4010000000000000;
      *(double *)(a3 + 24) = v37;
      *(double *)(a3 + 32) = v36;
      *(double *)(a3 + 40) = v39;
      *(double *)(a3 + 48) = v38;
      *(double *)(a3 + 56) = v17;
      return result;
  }
}

uint64_t sub_1000C9914(uint64_t a1)
{
  uint64_t v2 = _s11EnvironmentVMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C9970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s11EnvironmentVMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C99D4(double a1, double a2)
{
  double v4 = a2 - a1;
  sub_1000C9B00();
  double v6 = v4 * v5 + a1;
  if (!*(unsigned char *)(v2 + *(int *)(_s11EnvironmentVMa() + 44) + 8)) {
    double v6 = v6 * 0.785;
  }
  if (static DOCUIPPrototyping.enhandedMajestyGridLayout.getter()) {
    double v7 = v6 * 1.27388535;
  }
  else {
    double v7 = v6;
  }
  if (qword_100704FB8 != -1) {
    swift_once();
  }
  if (v7 >= *(double *)&qword_1007371F8) {
    double v7 = *(double *)&qword_1007371F8;
  }
  if (qword_100704F78 != -1) {
    swift_once();
  }
  if (*(double *)&qword_1007371B8 > v7) {
    double v7 = *(double *)&qword_1007371B8;
  }
  uint64_t result = sub_1000C9DD8(v7, 1.0);
  if (v9)
  {
    return UIRoundToScale();
  }
  return result;
}

uint64_t sub_1000C9B00()
{
  uint64_t v0 = self;
  id v1 = [v0 defaultMetrics];
  double v13 = sub_1000491C4;
  uint64_t v14 = 0;
  char v9 = _NSConcreteStackBlock;
  uint64_t v10 = 1107296256;
  uint64_t v11 = sub_100049158;
  long long v12 = &unk_1006A5900;
  uint64_t v2 = _Block_copy(&v9);
  uint64_t v3 = self;
  id v4 = [v3 traitCollectionWithTraits:v2];
  _Block_release(v2);
  swift_release();
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if (result)
  {
    __break(1u);
  }
  else
  {
    [v1 scaledValueForValue:v4 compatibleWithTraitCollection:1.0];

    id v6 = [v0 defaultMetrics];
    double v13 = sub_1000491AC;
    uint64_t v14 = 0;
    char v9 = _NSConcreteStackBlock;
    uint64_t v10 = 1107296256;
    uint64_t v11 = sub_100049158;
    long long v12 = &unk_1006A5928;
    double v7 = _Block_copy(&v9);
    id v8 = [v3 traitCollectionWithTraits:v7];
    _Block_release(v7);
    swift_release();
    uint64_t result = swift_isEscapingClosureAtFileLocation();
    if ((result & 1) == 0)
    {
      [v6 scaledValueForValue:v8 compatibleWithTraitCollection:1.0];

      return _s11EnvironmentVMa();
    }
  }
  __break(1u);
  return result;
}

uint64_t _s11EnvironmentVMa()
{
  uint64_t result = qword_1007127E0;
  if (!qword_1007127E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C9DD8(double a1, double a2)
{
  sub_1000CBE70(&qword_100708C10);
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 32) = xmmword_1005A3BE0;
  *(_OWORD *)(result + 16) = xmmword_1005A3BD0;
  *(_OWORD *)(result + 48) = xmmword_1005A3BF0;
  *(_OWORD *)(result + 64) = xmmword_1005A3C00;
  *(_OWORD *)(result + 80) = xmmword_1005A3C10;
  *(_OWORD *)(result + 96) = xmmword_1005A3C20;
  *(_OWORD *)(result + 112) = xmmword_1005A3C30;
  *(_OWORD *)(result + 128) = xmmword_1005A3C40;
  if (fabs(a1 + -84.0) >= a2)
  {
    uint64_t v5 = 0;
    double v6 = 84.0;
    uint64_t v7 = 6;
    uint64_t v8 = 13;
    while (1)
    {
      if (v6 < a1) {
        uint64_t v5 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 - 1;
      }
      if (v8 < v5)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      uint64_t v9 = v5 + v8;
      if (__OFADD__(v5, v8)) {
        break;
      }
      if ((unint64_t)(v9 - 28) < 0xFFFFFFFFFFFFFFE3) {
        goto LABEL_14;
      }
      uint64_t v7 = ((unint64_t)(char)(v9 + ((v9 & 0x80) >> 7)) >> 1);
      double v6 = *(double *)(result + 32 + 8 * v7);
      if (vabdd_f64(a1, v6) < a2)
      {
        swift_bridgeObjectRelease();
        return *(void *)&v6;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0x4055000000000000;
  }
  return result;
}

unint64_t sub_1000C9F24()
{
  unint64_t result = qword_10070AE68;
  if (!qword_10070AE68)
  {
    type metadata accessor for DOCContentLayoutSizeCategory();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10070AE68);
  }
  return result;
}

uint64_t sub_1000C9F7C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000C9F9C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000C9F9C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000CBE70(&qword_100708D98);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  long long v12 = v10 + 32;
  double v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[72 * v8] || v12 >= &v13[72 * v8])
  {
    memcpy(v12, v13, 72 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CA11C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 16);
  id v4 = *(void **)(a1 + 112);
  uint64_t v5 = *(void **)(a1 + 128);
  unint64_t v6 = *(void **)(a1 + 336);

  return a1;
}

__n128 sub_1000CA180@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  __n128 v17 = a2[1];
  __n128 v18 = *a2;
  __n128 v15 = a2[3];
  __n128 v16 = a2[2];
  if (v4 == 3)
  {
    uint64_t v6 = 0;
    UIFontTextStyle v8 = UIFontTextStyleCaption1;
    uint64_t v7 = 2;
    UIFontTextStyle v10 = UIFontTextStyleCaption1;
  }
  else
  {
    uint64_t v6 = 2;
    if (*(unsigned __int8 *)(a1 + 72) < 2u) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = 3;
    }
    if (!*(unsigned char *)(a1 + *(int *)(_s11EnvironmentVMa() + 44) + 8)) {
      uint64_t v6 = 0;
    }
    if (*(void *)(a1 + 56) == 6)
    {
      UIFontTextStyle v8 = UIFontTextStyleBody;
      uint64_t v9 = &UIFontTextStyleSubheadline;
    }
    else
    {
      UIFontTextStyle v8 = UIFontTextStyleSubheadline;
      uint64_t v9 = &UIFontTextStyleCaption1;
    }
    UIFontTextStyle v10 = *v9;
  }
  BOOL v11 = v4 != 3;
  long long v12 = v8;
  double v13 = v10;
  a3->n128_u64[0] = (unint64_t)v12;
  a3->n128_u64[1] = v7;
  a3[1].n128_u64[0] = (unint64_t)v13;
  a3[1].n128_u64[1] = v6;
  a3[2].n128_u64[0] = 0;
  a3[2].n128_u8[8] = v11;
  a3[2].n128_u8[9] = v11;
  a3[2].n128_u8[10] = v11;
  a3[3] = v18;
  a3[4] = v17;
  __n128 result = v15;
  a3[5] = v16;
  a3[6] = v15;
  return result;
}

uint64_t sub_1000CA2A0(uint64_t a1)
{
  return a1;
}

void sub_1000CA314(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
  }
}

uint64_t sub_1000CA354(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for DOCContentLayoutSizeCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s11EnvironmentVMa();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + *(int *)(v8 + 40), v4);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v9 == enum case for DOCContentLayoutSizeCategory.regular(_:))
  {
    uint64_t v10 = 3;
  }
  else
  {
    if (v9 != enum case for DOCContentLayoutSizeCategory.large(_:)
      && v9 != enum case for DOCContentLayoutSizeCategory.extraLarge(_:))
    {
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
    uint64_t v10 = 2;
  }
  sub_1000C7B44(&v13);
  if (((double)v10 + -1.0) * v15
     + v16
     + v16
     + (*(double *)&v13 + *((double *)&v13 + 1) + *((double *)&v13 + 1) + v14 + v14) * (double)v10 <= a2)
    return v10;
  else {
    return 2;
  }
}

__n128 sub_1000CA4F4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = a3;
  uint64_t v36 = *(void *)(a2 + 8);
  uint64_t v37 = *(void *)a2;
  uint64_t v34 = *(void *)(a2 + 24);
  uint64_t v35 = *(void *)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 32);
  char v31 = *(unsigned char *)(a2 + 41);
  char v32 = *(unsigned char *)(a2 + 40);
  char v7 = *(unsigned char *)(a2 + 42);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  sub_1000C7214(a1, a2, a3, (uint64_t)&v89);
  long long v69 = v89;
  *(void *)long long v70 = *(void *)v90;
  *(_OWORD *)&v70[8] = *(_OWORD *)&v90[8];
  v70[24] = v90[24];
  v70[25] = v90[25];
  v70[26] = v90[26];
  __n128 v71 = v91;
  long long v72 = v92;
  long long v73 = v93;
  long long v74 = v94;
  long long v75 = v95;
  long long v76 = v96;
  long long v77 = v97;
  uint64_t v78 = v98;
  v79[0] = v99[0];
  v79[1] = v99[1];
  void v79[2] = v99[2];
  v79[3] = v99[3];
  v79[4] = v99[4];
  v79[5] = v99[5];
  long long v81 = v101;
  long long v82 = v102;
  long long v83 = v103;
  long long v84 = v104;
  long long v85 = v105;
  long long v86 = v106;
  long long v87 = v107;
  uint64_t v80 = v100;
  uint64_t v88 = v108;
  v53[8] = v96;
  v53[9] = v97;
  v53[0] = v89;
  v53[1] = *(_OWORD *)v70;
  v53[6] = v94;
  v53[7] = v95;
  v53[4] = v92;
  v53[5] = v93;
  v53[2] = *(_OWORD *)&v70[16];
  v53[3] = v91;
  uint64_t v54 = v98;
  *(_OWORD *)long long v90 = *(_OWORD *)v70;
  *(_OWORD *)&v90[16] = *(_OWORD *)&v70[16];
  sub_1000CBE0C((uint64_t)v79, (uint64_t)v99, &qword_1007121D8);
  sub_1000CAA90((uint64_t)&v89);
  sub_1000CAA5C((void **)&v69);
  sub_1000CBE0C((uint64_t)v79, (uint64_t)v109, &qword_1007121D8);
  if (sub_1000CBEB4((uint64_t *)v109) == 1)
  {
    sub_1000CAA90((uint64_t)&v89);
    sub_1000CABE8((uint64_t)v53, (uint64_t)v52);
    long long v48 = v52[10];
    long long v49 = v52[11];
    long long v50 = v52[12];
    long long v51 = v52[13];
    long long v44 = v52[6];
    long long v45 = v52[7];
    long long v46 = v52[8];
    long long v47 = v52[9];
    long long v40 = v52[2];
    long long v41 = v52[3];
    long long v42 = v52[4];
    long long v43 = v52[5];
    long long v38 = v52[0];
    long long v39 = v52[1];
    if (v4)
    {
      sub_1000CAA28((uint64_t)v52);
      sub_1000CAA28(a2);
      sub_1000CAA28((uint64_t)v52);
      uint64_t v16 = sub_1000CAA28((uint64_t)&v69);
      if (qword_1007050E8 != -1) {
        uint64_t v16 = swift_once();
      }
      if (byte_1007125C8 != 1)
      {
        __chkstk_darwin(v16);
        sub_1000CAA28((uint64_t)v52);
        sub_1000CAA28((uint64_t)&v69);
        dispatch thunk of DOCThreadSafeState.withExclusiveAccess<A>(_:)();
        sub_1000CAA5C((void **)&v69);
        sub_1000CAA5C((void **)v52);
      }
      sub_1000CAE50((uint64_t)&v89);
      sub_1000CAA5C((void **)v52);
      sub_1000CAA5C((void **)&v69);
    }
    else
    {
      sub_1000CAA28(a2);
      sub_1000CAA28((uint64_t)v52);
      sub_1000CAE50((uint64_t)&v89);
    }
    long long v65 = v48;
    long long v66 = v49;
    long long v67 = v50;
    long long v68 = v51;
    long long v61 = v44;
    long long v62 = v45;
    long long v63 = v46;
    long long v64 = v47;
    long long v57 = v40;
    long long v58 = v41;
    long long v59 = v42;
    long long v60 = v43;
    long long v17 = v38;
    long long v18 = v39;
  }
  else
  {
    sub_1000CAA28(a2);
    sub_1000CA2A0((uint64_t)v79);
    long long v65 = v109[10];
    long long v66 = v109[11];
    long long v67 = v109[12];
    long long v68 = v109[13];
    long long v61 = v109[6];
    long long v62 = v109[7];
    long long v63 = v109[8];
    long long v64 = v109[9];
    long long v57 = v109[2];
    long long v58 = v109[3];
    long long v59 = v109[4];
    long long v60 = v109[5];
    long long v17 = v109[0];
    long long v18 = v109[1];
  }
  long long v55 = v17;
  long long v56 = v18;
  long long v19 = v66;
  *(_OWORD *)(a4 + 272) = v65;
  *(_OWORD *)(a4 + 288) = v19;
  long long v20 = v68;
  *(_OWORD *)(a4 + 304) = v67;
  *(_OWORD *)(a4 + 320) = v20;
  long long v21 = v62;
  *(_OWORD *)(a4 + 208) = v61;
  *(_OWORD *)(a4 + 224) = v21;
  long long v22 = v64;
  *(_OWORD *)(a4 + 240) = v63;
  *(_OWORD *)(a4 + 256) = v22;
  long long v23 = v58;
  *(_OWORD *)(a4 + 144) = v57;
  *(_OWORD *)(a4 + 160) = v23;
  long long v24 = v60;
  *(_OWORD *)(a4 + 176) = v59;
  *(_OWORD *)(a4 + 192) = v24;
  long long v25 = v56;
  *(_OWORD *)(a4 + 112) = v55;
  *(_OWORD *)(a4 + 128) = v25;
  long long v26 = v77;
  *(_OWORD *)(a4 + 464) = v76;
  *(_OWORD *)(a4 + 480) = v26;
  *(void *)(a4 + 496) = v78;
  long long v27 = v73;
  *(_OWORD *)(a4 + 400) = v72;
  *(_OWORD *)(a4 + 416) = v27;
  long long v28 = v75;
  *(_OWORD *)(a4 + 432) = v74;
  *(_OWORD *)(a4 + 448) = v28;
  long long v29 = *(_OWORD *)v70;
  *(_OWORD *)(a4 + 336) = v69;
  *(_OWORD *)(a4 + 352) = v29;
  __n128 result = v71;
  *(_OWORD *)(a4 + 368) = *(_OWORD *)&v70[16];
  *(__n128 *)(a4 + 384) = result;
  *(void *)a4 = v37;
  *(void *)(a4 + 8) = v36;
  *(void *)(a4 + 16) = v35;
  *(void *)(a4 + 24) = v34;
  *(void *)(a4 + 32) = v33;
  *(unsigned char *)(a4 + 40) = v32 & 1;
  *(unsigned char *)(a4 + 41) = v31 & 1;
  *(unsigned char *)(a4 + 42) = v7 & 1;
  *(void *)(a4 + 48) = v8;
  *(void *)(a4 + 56) = v9;
  *(void *)(a4 + 64) = v10;
  *(void *)(a4 + 72) = v11;
  *(void *)(a4 + 80) = v12;
  *(void *)(a4 + 88) = v13;
  *(void *)(a4 + 96) = v14;
  *(void *)(a4 + 104) = v15;
  return result;
}

uint64_t sub_1000CAA28(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  id v3 = *(id *)a1;
  id v4 = v2;
  return a1;
}

void **sub_1000CAA5C(void **a1)
{
  uint64_t v2 = *a1;

  return a1;
}

uint64_t sub_1000CAA90(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  id v3 = *(void **)(a1 + 184);
  uint64_t v7 = *(void *)(a1 + 176);
  uint64_t v8 = *(void **)(a1 + 168);
  id v4 = *(id *)a1;
  id v5 = v2;
  sub_1000CABA8(v8, v7, v3);
  return a1;
}

id sub_1000CABA8(id result, uint64_t a2, void *a3)
{
  if (result)
  {
    id v3 = result;
    return a3;
  }
  return result;
}

uint64_t sub_1000CABE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  double v3 = *(double *)(result + 64);
  double v4 = *(double *)(result + 80);
  double v5 = *(double *)(result + 104);
  double v6 = *(double *)(result + 48) + *(double *)(result + 56) + *(double *)(result + 56) + v3 + v3;
  double v7 = (v4 + *(double *)(result + 112) - (v5 + v5)) / (v6 + v4);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 < 9.22337204e18)
  {
    uint64_t v8 = result;
    double v25 = v3 + v3;
    uint64_t v26 = *(void *)(result + 56);
    uint64_t v27 = *(void *)(result + 48);
    uint64_t v28 = *(void *)(result + 64);
    uint64_t v9 = *(void *)result;
    uint64_t v10 = *(void *)(result + 8);
    uint64_t v11 = *(void *)(result + 16);
    long long v22 = *(_OWORD *)(result + 24);
    char v12 = *(unsigned char *)(result + 40);
    char v13 = *(unsigned char *)(result + 41);
    char v14 = *(unsigned char *)(result + 42);
    uint64_t v15 = *(void *)(result + 72);
    uint64_t v23 = *(void *)(result + 88);
    uint64_t v24 = *(void *)(result + 96);
    uint64_t v16 = (uint64_t)v7;
    if ((uint64_t)v7 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = (uint64_t)v7;
    }
    double v18 = 0.0;
    __n128 result = UIFloorToScale();
    double v20 = v19;
    if (v16 < 2) {
      goto LABEL_15;
    }
    double v18 = v4;
    if (v4 + v4 < *(double *)(v8 + 152)) {
      goto LABEL_15;
    }
    if (v4 + v19 * 0.2 - v5 <= 0.0)
    {
      double v18 = v4;
    }
    else
    {
      __n128 result = UIRoundToScale();
      double v18 = fmax(v21, 2.0);
      if (v4 + v20 * 0.2 - v5 - (v4 - v18) * (double)(v17 - 1) > 0.0)
      {
        __n128 result = UIRoundToScale();
        if (v6 > v19) {
          double v19 = v6;
        }
        goto LABEL_15;
      }
    }
    double v19 = v20;
LABEL_15:
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 24) = v22;
    *(unsigned char *)(a2 + 40) = v12;
    *(unsigned char *)(a2 + 41) = v13;
    *(unsigned char *)(a2 + 42) = v14;
    *(void *)(a2 + 48) = v27;
    *(void *)(a2 + 56) = v26;
    *(void *)(a2 + 64) = v28;
    *(void *)(a2 + 72) = v15;
    *(double *)(a2 + 80) = v4;
    *(void *)(a2 + 88) = v23;
    *(void *)(a2 + 96) = v24;
    *(double *)(a2 + 104) = v5;
    *(void *)(a2 + 112) = v27;
    *(void *)(a2 + 120) = v17;
    *(void *)(a2 + 128) = v23;
    *(double *)(a2 + 136) = v5;
    *(void *)(a2 + 144) = v24;
    *(double *)(a2 + 152) = v5;
    *(void *)(a2 + 160) = v15;
    *(double *)(a2 + 168) = v4;
    *(double *)(a2 + 176) = v20;
    *(void *)(a2 + 184) = v28;
    *(double *)(a2 + 192) = v20 - v25;
    *(void *)(a2 + 200) = v15;
    *(double *)(a2 + 208) = v18;
    *(double *)(a2 + 216) = v19;
    return result;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000CAE50(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  double v3 = *(void **)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 176);
  double v6 = *(void **)(a1 + 168);

  sub_1000CA314(v6, v5, v3);
  return a1;
}

uint64_t sub_1000CAF68(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  double v3 = *(void **)(a1 + 112);
  double v4 = *(void **)(a1 + 128);
  uint64_t v5 = *(void **)(a1 + 336);
  double v6 = *(void **)(a1 + 352);
  id v7 = *(id *)a1;
  id v8 = v2;
  id v9 = v3;
  id v10 = v4;
  id v11 = v5;
  id v12 = v6;
  return a1;
}

void **sub_1000CAFCC@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (*(void *)(*a1 + 16))
  {
    sub_1000CAA28((uint64_t)a2);
    unint64_t v6 = sub_1000CEF10((uint64_t)a2);
    if (v7)
    {
      id v8 = (_OWORD *)(*(void *)(v4 + 56) + 224 * v6);
      long long v9 = v8[1];
      v20[0] = *v8;
      v20[1] = v9;
      long long v10 = v8[5];
      long long v12 = v8[2];
      long long v11 = v8[3];
      v20[4] = v8[4];
      v20[5] = v10;
      v20[2] = v12;
      v20[3] = v11;
      long long v13 = v8[6];
      long long v14 = v8[7];
      long long v15 = v8[9];
      v20[8] = v8[8];
      v20[9] = v15;
      v20[6] = v13;
      v20[7] = v14;
      long long v16 = v8[10];
      long long v17 = v8[11];
      long long v18 = v8[13];
      v20[12] = v8[12];
      v20[13] = v18;
      v20[10] = v16;
      v20[11] = v17;
      memmove(a3, v8, 0xE0uLL);
      DOCSplitBrowserViewController.didCommitPreview(of:)(a3);
      sub_1000CAA28((uint64_t)v20);
      return sub_1000CAA5C(a2);
    }
    sub_1000CAA5C(a2);
  }
  sub_1000CB0B0(v20);
  return (void **)sub_1000CBE0C((uint64_t)v20, (uint64_t)a3, &qword_1007121D8);
}

double sub_1000CB0B0(_OWORD *a1)
{
  double result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *sub_1000CB0D4@<X0>(void *a1@<X8>)
{
  return sub_1000CB108(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

void *sub_1000CB0F0@<X0>(void *a1@<X8>)
{
  return sub_1000D8BA0(a1);
}

void *sub_1000CB108@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, void *a2@<X8>)
{
  double result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1000CB14C@<X0>(void *a1@<X8>)
{
  return sub_1000CB180(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000CB168@<X0>(void *a1@<X8>)
{
  return sub_1000D7270(a1);
}

uint64_t sub_1000CB180@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection__nodes);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000CB4C0(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = (uint64_t)v4 + OBJC_IVAR____TtC5Files36DOCCollectionViewCompositionalLayout_coreLayout;
  swift_beginAccess();
  sub_1000CB78C(v10, (uint64_t)v20, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong
    || (long long v12 = Strong,
        id v13 = [Strong collectionView],
        v12,
        !v13))
  {
    sub_1000CB730((uint64_t)v20);
LABEL_7:
    v19.receiver = v4;
    v19.super_class = ObjectType;
    return (uint64_t)[super shouldInvalidateLayoutForBoundsChange:a1, a2, a3, a4];
  }
  [v13 bounds];
  double v15 = v14;
  double v17 = v16;

  if (v15 == a3)
  {
    sub_1000CB730((uint64_t)v20);
    if (v17 != a4) {
      return 1;
    }
    goto LABEL_7;
  }
  sub_1000CB730((uint64_t)v20);
  return 1;
}

double sub_1000CB64C()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0 + OBJC_IVAR____TtC5Files36DOCCollectionViewCompositionalLayout_coreLayout;
  swift_beginAccess();
  sub_1000CB78C(v2, (uint64_t)v9, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    v8.receiver = Strong;
    v8.super_class = ObjectType;
    [super collectionViewContentSize];
    double v6 = v5;

    if (v10 > v6) {
      double v6 = v10;
    }
  }
  else
  {
    double v6 = 0.0;
  }
  sub_1000CB730((uint64_t)v9);
  return v6;
}

uint64_t sub_1000CB730(uint64_t a1)
{
  return a1;
}

uint64_t destroy for DOCItemCollectionCoreFooterAwareLayout()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t sub_1000CB78C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  a3(a2 + 32, a1 + 32);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  return a2;
}

void *sub_1000CB7E4(unint64_t a1, uint64_t a2)
{
  uint64_t v33 = type metadata accessor for DOCFileEntity();
  __chkstk_darwin(v33);
  uint64_t v32 = (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for SiriVocabulary.DynamicTerm();
  uint64_t v5 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  char v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1000D3048(a2, a1);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  double result = (void *)swift_bridgeObjectRelease();
  unint64_t v34 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v15 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v16 = (v13 >> 1) - v11;
  if (v13 >> 1 != v11)
  {
    if ((uint64_t)(v13 >> 1) <= v11) {
      goto LABEL_25;
    }
    double v17 = (id *)(v9 + 8 * v11);
    do
    {
      if (objc_msgSend(*v17, "fpfs_fpItem"))
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v17;
      --v16;
    }
    while (v16);
    unint64_t v15 = v34;
  }
  swift_unknownObjectRelease();
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_12;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v18 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v18) {
    goto LABEL_22;
  }
LABEL_12:
  unint64_t v34 = (unint64_t)_swiftEmptyArrayStorage;
  double result = (void *)sub_1000D2830(0, v18 & ~(v18 >> 63), 0);
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = 0;
    double v20 = (void *)v34;
    uint64_t v29 = v5 + 32;
    unint64_t v30 = v15 & 0xC000000000000001;
    double v21 = (void *)v15;
    do
    {
      uint64_t v22 = v18;
      if (v30) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v23 = *(id *)(v15 + 8 * v19 + 32);
      }
      uint64_t v24 = v23;
      id v25 = [v23 filename:v29];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v26 = v24;
      sub_100162CCC(v26, v32);
      sub_1000CC05C(&qword_100707F70, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
      SiriVocabulary.DynamicTerm.init<A>(_:entity:)();

      unint64_t v34 = (unint64_t)v20;
      unint64_t v28 = v20[2];
      unint64_t v27 = v20[3];
      if (v28 >= v27 >> 1)
      {
        sub_1000D2830(v27 > 1, v28 + 1, 1);
        double v20 = (void *)v34;
      }
      ++v19;
      v20[2] = v28 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v28, v7, v31);
      uint64_t v18 = v22;
      unint64_t v15 = (unint64_t)v21;
    }
    while (v22 != v19);
    swift_bridgeObjectRelease();
    return v20;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000CBBA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000CBE70(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000CBC00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000CBE70(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CBC64()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isDropping) == 2;
  if (!*(void *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_appearance)) {
    v1 |= 2uLL;
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__traitCollection)) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = v1 | 4;
  }
  sub_1000CBE0C(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_listItemLayoutTraits, (uint64_t)v12, (uint64_t *)&unk_10070AD40);
  sub_1000CBE0C((uint64_t)v12, (uint64_t)v13, (uint64_t *)&unk_10070AD40);
  if (sub_1000CBEB4(v13) == 1) {
    v2 |= 8uLL;
  }
  sub_1000CBE0C(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits, (uint64_t)v10, (uint64_t *)&unk_100705550);
  sub_1000CBE0C((uint64_t)v10, (uint64_t)v11, (uint64_t *)&unk_100705550);
  int v3 = sub_1000CBEB4(v11);
  uint64_t v4 = v2 | 0x10;
  if (v3 != 1) {
    uint64_t v4 = v2;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isSelecting) == 2) {
    v4 |= 0x20uLL;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isPickable) == 2) {
    v4 |= 0x40uLL;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_stackMetrics + 40)) {
    v4 |= 0x80uLL;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_preferLastUsedDate) == 2) {
    uint64_t v5 = v4 | 0x100;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node);
  swift_beginAccess();
  if (!*v6)
  {
    int v7 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isInCreateMode);
    uint64_t v8 = v5 | 0x200;
    if (v7) {
      uint64_t v8 = v5;
    }
    if (v7 != 2) {
      return v8;
    }
  }
  return v5;
}

uint64_t sub_1000CBE0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000CBE70(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CBE70(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000CBEB4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1000CBECC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CBF40(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DOCFileEntity();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CBF84(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CBFCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CC014(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CC05C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DOCFileEntity()
{
  uint64_t result = qword_100708060;
  if (!qword_100708060) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_1000CC0F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  swift_beginAccess();
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = (int *)type metadata accessor for DOCBrowserHistoryItem(0);
  uint64_t v9 = v8[5];
  id v42 = *(id *)(a1 + v9);
  id v10 = v42;
  swift_bridgeObjectRetain();
  id v11 = [v10 fileProviderItem];
  if (v11)
  {
    id v12 = v11;
    long long v45 = &type metadata for DOCIdentityHashableLocation.FPItemImpl;
    unint64_t v46 = sub_10050039C();
    unint64_t v47 = sub_1005003F0();
    unint64_t v43 = (unint64_t)v10;
    id v44 = v12;
  }
  else
  {
    id v13 = [v10 representedTag];
    if (v13)
    {
      double v14 = v13;
      id v15 = v10;
      id v16 = (id)FPTagFromDOCTag();
      long long v45 = &type metadata for DOCIdentityHashableLocation.FPTagImpl;
      unint64_t v46 = sub_1005002F4();
      unint64_t v47 = sub_100500348();

      unint64_t v43 = (unint64_t)v15;
      id v44 = v16;
    }
    else
    {
      long long v45 = &type metadata for DOCIdentityHashableLocation.OtherImpl;
      unint64_t v46 = sub_1000CE0C8();
      unint64_t v47 = sub_1000CE11C();
      unint64_t v43 = (unint64_t)v10;
    }
  }
  char v17 = sub_1000D334C((uint64_t)&v42, v7);
  sub_1000CE1FC((uint64_t)&v42);
  swift_bridgeObjectRelease();
  if (v17)
  {
    id v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v18._countAndFlagsBits = 91;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x80000001005FC800;
    v20._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v20);
    id v21 = *(id *)(a1 + v9);
    id v22 = [v21 description];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v25 = v24;

    v26._countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);

    swift_bridgeObjectRelease();
    sub_1000CDE40((uint64_t)v42, v43);
    swift_bridgeObjectRelease();
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*((void *)v8 - 1) + 56))(a4, 1, 1, v8);
  }
  else
  {
    swift_beginAccess();
    unint64_t v28 = *(void **)(a3 + 16);
    sub_1000A5858(a1, a4, type metadata accessor for DOCBrowserHistoryItem);
    uint64_t v29 = v8[5];
    unint64_t v30 = *(void **)(a4 + v29);
    swift_bridgeObjectRetain();
    id v31 = v30;
    uint64_t result = sub_1000CC4E4(v30, v28, 0);
    if (result)
    {
      uint64_t v32 = result;

      *(void *)(a4 + v29) = v32;
      uint64_t v33 = v8[7];
      unint64_t v34 = *(void **)(a4 + v33);
      id v35 = v34;
      uint64_t v36 = sub_1000CC4E4(v34, v28, 0);

      *(void *)(a4 + v33) = v36;
      id v37 = v36;

      uint64_t v38 = v8[6];
      unint64_t v39 = *(void *)(a4 + v38);
      swift_bridgeObjectRetain();

      swift_bridgeObjectRetain();
      long long v40 = sub_1000053B0(v39, v28, 0);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(void *)(a4 + v38) = v40;
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v8 - 1) + 56))(a4, 0, 1, v8);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void *sub_1000CC4E4(void *a1, void *a2, uint64_t a3)
{
  int v3 = a1;
  if (!a1) {
    return v3;
  }
  uint64_t v5 = a2;
  if (!a2)
  {
    id v9 = a1;
    if (!a3) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  uint64_t v24 = a1;
  id v6 = a1;
  id v7 = [v6 fileProviderItem];
  if (v7)
  {
    id v8 = v7;
    unint64_t v27 = &type metadata for DOCIdentityHashableLocation.FPItemImpl;
    unint64_t v28 = sub_10050039C();
    unint64_t v29 = sub_1005003F0();
    id v25 = v6;
    id v26 = v8;
    if (!v5[2]) {
      goto LABEL_14;
    }
  }
  else
  {
    id v10 = [v6 representedTag];
    if (v10)
    {
      id v11 = v10;
      id v12 = v6;
      id v13 = (id)FPTagFromDOCTag();
      unint64_t v27 = &type metadata for DOCIdentityHashableLocation.FPTagImpl;
      unint64_t v28 = sub_1005002F4();
      unint64_t v29 = sub_100500348();

      id v25 = v12;
      id v26 = v13;
      if (!v5[2]) {
        goto LABEL_14;
      }
    }
    else
    {
      unint64_t v27 = &type metadata for DOCIdentityHashableLocation.OtherImpl;
      unint64_t v28 = sub_1000CE0C8();
      unint64_t v29 = sub_1000CE11C();
      id v25 = v6;
      if (!v5[2]) {
        goto LABEL_14;
      }
    }
  }
  unint64_t v14 = sub_10017C394((uint64_t)&v24);
  if (v15)
  {
    sub_1000CE280(v5[7] + 56 * v14, (uint64_t)v30);
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v31 = 0;
  memset(v30, 0, sizeof(v30));
LABEL_15:
  sub_1000CE1FC((uint64_t)&v24);
  uint64_t v5 = *(void **)&v30[0];
  if (*(void *)&v30[0])
  {
    id v16 = *(id *)&v30[0];
    sub_1000CE1FC((uint64_t)v30);
    if (!a3) {
      goto LABEL_21;
    }
  }
  else
  {
    sub_1000CBBA4((uint64_t)v30, &qword_10071A160);
    if (!a3) {
      goto LABEL_21;
    }
  }
LABEL_19:
  if (v5) {
    goto LABEL_22;
  }
  uint64_t v5 = [objc_allocWithZone((Class)DOCConcreteLocation) initWithTaggedItemsSourceRepresentedTag:a3];
LABEL_21:
  if (v5)
  {
LABEL_22:
    char v17 = v5;
    id v18 = [v17 representedTag];
    if (v18)
    {

      unsigned __int8 v19 = [v3 isTaggedItemsSource];
      if ((v19 & 1) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
      id v20 = [v3 fileProviderItem];
      if (!v20
        || (v20, (id v21 = [v17 fileProviderItem]) == 0))
      {

        goto LABEL_30;
      }
      id v22 = v21;

      int v3 = v17;
    }
    char v17 = v3;
    int v3 = v5;
LABEL_30:
  }
  return v3;
}

uint64_t sub_1000CC768(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int64_t a5)
{
  int64_t v154 = a5;
  uint64_t v153 = a4;
  id v152 = a3;
  uint64_t v140 = a2;
  uint64_t v157 = a1;
  uint64_t v139 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v137 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  long long v132 = (char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v148 = (dispatch_group_t)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  Class isa = v148[-1].isa;
  __chkstk_darwin(v148);
  long long v146 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v141);
  long long v142 = (char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for DispatchQoS();
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  long long v143 = (char *)&v129 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = (int *)type metadata accessor for DOCBrowserHistoryItem(0);
  uint64_t v130 = *((void *)v10 - 1);
  __chkstk_darwin(v10);
  id v12 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000CBE70(&qword_10070E838);
  uint64_t v150 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v150 + 64);
  __chkstk_darwin(v13 - 8);
  long long v149 = (char *)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  uint64_t v144 = v19;
  *(void *)(v19 + 16) = 0;
  long long v151 = (uint64_t *)(v19 + 16);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v20 = sub_100062330(6);
  uint64_t v156 = v21;
  long long v145 = v22;
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  id v25 = (void *)swift_allocObject();
  id v26 = v152;
  uint64_t v27 = v153;
  v25[2] = v152;
  v25[3] = v27;
  v25[4] = v154;
  *(void *)&long long v164 = 0;
  *((void *)&v164 + 1) = 0xE000000000000000;
  id v28 = v26;
  swift_retain();
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  *(void *)&long long v164 = 91;
  *((void *)&v164 + 1) = 0xE100000000000000;
  v29._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0xD00000000000001ALL;
  v30._object = (void *)0x80000001005FC6A0;
  String.append(_:)(v30);
  id v31 = v155;
  sub_1000CDE40(v164, *((unint64_t *)&v164 + 1));
  swift_bridgeObjectRelease();
  uint64_t v32 = (uint64_t)v149;
  sub_1000CBC00(v157, (uint64_t)v149, &qword_10070E838);
  unint64_t v33 = (*(unsigned __int8 *)(v150 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80);
  unint64_t v34 = (v14 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  id v35 = (void *)swift_allocObject();
  v35[2] = v31;
  v35[3] = v20;
  uint64_t v157 = v20;
  uint64_t v36 = v145;
  v35[4] = v156;
  v35[5] = v36;
  v35[6] = v24;
  v35[7] = sub_1000B72F8;
  v35[8] = v25;
  sub_1000CBE0C(v32, (uint64_t)v35 + v33, &qword_10070E838);
  *(void *)((char *)v35 + v34) = v144;
  uint64_t v37 = v24;
  id v38 = v31;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000877C0();
  swift_release();
  unint64_t v39 = v151;
  swift_beginAccess();
  uint64_t v40 = *v39;
  if (!*v39)
  {
    *(void *)&long long v164 = 0;
    *((void *)&v164 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v56._countAndFlagsBits = 91;
    v56._object = (void *)0xE100000000000000;
    String.append(_:)(v56);
    v57._countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58._countAndFlagsBits = 0xD000000000000030;
    v58._object = (void *)0x80000001005FC6C0;
    String.append(_:)(v58);
    sub_1000CDE40(v164, *((unint64_t *)&v164 + 1));
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  if (!*(void *)(v40 + 16))
  {
    *(void *)&long long v164 = 0;
    *((void *)&v164 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(void *)&long long v164 = 91;
    *((void *)&v164 + 1) = 0xE100000000000000;
    v61._countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 0xD000000000000025;
    v62._object = (void *)0x80000001005FC700;
    String.append(_:)(v62);
    sub_1000CDE40(v164, *((unint64_t *)&v164 + 1));
    swift_bridgeObjectRelease();
    sub_1000877C0();
    swift_release();
    return swift_release();
  }
  *(void *)&long long v164 = 0;
  *((void *)&v164 + 1) = 0xE000000000000000;
  uint64_t v153 = v40;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  *(void *)&long long v164 = 91;
  *((void *)&v164 + 1) = 0xE100000000000000;
  uint64_t v41 = v157;
  v42._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 0xD000000000000018;
  v43._object = (void *)0x80000001005FC730;
  String.append(_:)(v43);
  id v152 = v38;
  sub_1000CDE40(v164, *((unint64_t *)&v164 + 1));
  swift_bridgeObjectRelease();
  *(void *)&long long v164 = _swiftEmptyArrayStorage;
  uint64_t v44 = *(void *)(v153 + 16);
  long long v129 = v25;
  uint64_t v131 = v37;
  if (v44)
  {
    id v155 = (id)(v153 + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80)));
    int64_t v154 = *(void *)(v130 + 72);
    swift_bridgeObjectRetain();
    uint64_t v45 = 0;
    do
    {
      sub_1000A5858((uint64_t)v155 + v154 * v45, (uint64_t)v12, type metadata accessor for DOCBrowserHistoryItem);
      *(void *)&v162[0] = _swiftEmptyArrayStorage;
      id v48 = *(id *)&v12[v10[5]];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(*(void *)&v162[0] + 16) >= *(void *)(*(void *)&v162[0] + 24) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      long long v49 = sub_1000D25E0(*(void *)&v12[v10[6]]);
      sub_1000050A8((uint64_t)v49);
      id v50 = *(id *)&v12[v10[7]];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(*(void *)&v162[0] + 16) >= *(void *)(*(void *)&v162[0] + 24) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v51 = *(void *)&v162[0];
      *(void *)&v160[0] = _swiftEmptyArrayStorage;
      uint64_t v52 = *(void *)(*(void *)&v162[0] + 16);
      if (v52)
      {
        swift_bridgeObjectRetain_n();
        for (uint64_t i = 0; i != v52; ++i)
        {
          uint64_t v54 = *(void **)(v51 + 8 * i + 32);
          if (v54)
          {
            id v55 = v54;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((*(void *)&v160[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v160[0] & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v46 = *(void **)&v160[0];
        uint64_t v41 = v157;
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v46 = _swiftEmptyArrayStorage;
      }
      ++v45;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000A5770((uint64_t)v12, type metadata accessor for DOCBrowserHistoryItem);
      sub_1000AEF70((unint64_t)v46);
      uint64_t v47 = v156;
    }
    while (v45 != v44);
    swift_bridgeObjectRelease_n();
    unint64_t v60 = v164;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v60 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v47 = v156;
  }
  id v63 = v145;
  if (v60 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v64) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v64 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v64)
    {
LABEL_25:
      *(void *)&long long v164 = _swiftEmptyArrayStorage;
      uint64_t result = sub_1000D27F0(0, v64 & ~(v64 >> 63), 0);
      if (v64 < 0) {
        goto LABEL_67;
      }
      uint64_t v65 = 0;
      long long v66 = (void *)v164;
      id v155 = (id)v60;
      do
      {
        id v67 = *(id *)(v60 + 8 * v65 + 32);
        id v68 = [v67 fileProviderItem:v129];
        if (v68)
        {
          id v69 = v68;
          unint64_t v70 = sub_10050039C();
          unint64_t v71 = sub_1005003F0();
          long long v72 = &type metadata for DOCIdentityHashableLocation.FPItemImpl;
          id v63 = v69;
        }
        else
        {
          id v73 = [v67 representedTag];
          if (v73)
          {
            long long v74 = v73;
            id v75 = v67;
            id v63 = (id)FPTagFromDOCTag();

            unint64_t v70 = sub_1005002F4();
            unint64_t v71 = sub_100500348();
            long long v72 = &type metadata for DOCIdentityHashableLocation.FPTagImpl;
          }
          else
          {
            unint64_t v70 = sub_1000CE0C8();
            unint64_t v71 = sub_1000CE11C();
            long long v72 = &type metadata for DOCIdentityHashableLocation.OtherImpl;
          }
        }
        *(void *)&long long v164 = v66;
        unint64_t v77 = v66[2];
        unint64_t v76 = v66[3];
        if (v77 >= v76 >> 1)
        {
          sub_1000D27F0(v76 > 1, v77 + 1, 1);
          long long v66 = (void *)v164;
        }
        ++v65;
        v66[2] = v77 + 1;
        uint64_t v78 = &v66[7 * v77];
        v78[4] = v67;
        v78[5] = v67;
        v78[6] = v63;
        v78[8] = v72;
        v78[9] = v70;
        v78[10] = v71;
        uint64_t v41 = v157;
        unint64_t v60 = (unint64_t)v155;
      }
      while (v64 != v65);
      swift_bridgeObjectRelease();
      uint64_t v47 = v156;
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRelease();
  long long v66 = _swiftEmptyArrayStorage;
LABEL_38:
  uint64_t v79 = swift_allocObject();
  uint64_t v80 = sub_1000CE170((uint64_t)v66);
  swift_bridgeObjectRelease();
  uint64_t v130 = v79;
  *(void *)(v79 + 16) = v80;
  uint64_t v81 = v79 + 16;
  *(void *)&long long v164 = &_swiftEmptyDictionarySingleton;
  uint64_t v82 = v140;
  if (v140)
  {
    unint64_t v83 = __chkstk_darwin(v140);
    *(&v129 - 2) = &v164;
    sub_1004FFB90(v83, (void (*)(id, id))sub_1005002EC);
  }
  __chkstk_darwin(v82);
  *(&v129 - 2) = (void *)v81;
  uint64_t v140 = v84;
  sub_10000B540(v84, (void (*)(unsigned char *, unsigned char *))sub_1005001DC);
  *(void *)&long long v164 = 0;
  *((void *)&v164 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  *(void *)&long long v164 = 91;
  *((void *)&v164 + 1) = 0xE100000000000000;
  v85._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86._object = (void *)0x80000001005FC750;
  v86._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v86);
  sub_1000CDE40(v164, *((unint64_t *)&v164 + 1));
  swift_bridgeObjectRelease();
  uint64_t v87 = sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v164 = _swiftEmptyArrayStorage;
  sub_1000BAE4C((unint64_t *)&qword_1007054C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000CBE70((uint64_t *)&unk_100709900);
  sub_10009449C((unint64_t *)&qword_1007054D0, (uint64_t *)&unk_100709900);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*((void (**)(char *, void, dispatch_group_t))isa + 13))(v146, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v148);
  long long v142 = (char *)v87;
  long long v149 = (char *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v88 = swift_allocObject();
  unint64_t v89 = sub_1000D3910((uint64_t)_swiftEmptyArrayStorage);
  long long v151 = (uint64_t *)v88;
  *(void *)(v88 + 16) = v89;
  uint64_t v150 = swift_allocObject();
  *(void *)(v150 + 16) = _swiftEmptyArrayStorage;
  dispatch_group_t v148 = dispatch_group_create();
  uint64_t v90 = *(void *)v81;
  uint64_t v91 = *(void *)(*(void *)v81 + 56);
  uint64_t v153 = *(void *)v81 + 56;
  uint64_t v92 = 1 << *(unsigned char *)(v90 + 32);
  uint64_t v93 = -1;
  if (v92 < 64) {
    uint64_t v93 = ~(-1 << v92);
  }
  unint64_t v94 = v93 & v91;
  Class isa = (Class)OBJC_IVAR____TtC5Files32_DOCBrowserHistoryDataSourceBase_itemManager;
  int64_t v154 = (unint64_t)(v92 + 63) >> 6;
  long long v146 = (char *)v159;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v95 = 0;
  long long v96 = v151;
  uint64_t v97 = v150;
  while (1)
  {
    if (v94)
    {
      unint64_t v98 = __clz(__rbit64(v94));
      v94 &= v94 - 1;
      unint64_t v99 = v98 | (v95 << 6);
      goto LABEL_60;
    }
    int64_t v100 = v95 + 1;
    if (__OFADD__(v95, 1))
    {
      __break(1u);
      goto LABEL_66;
    }
    if (v100 >= v154) {
      goto LABEL_63;
    }
    unint64_t v101 = *(void *)(v153 + 8 * v100);
    ++v95;
    if (!v101)
    {
      int64_t v95 = v100 + 1;
      if (v100 + 1 >= v154) {
        goto LABEL_63;
      }
      unint64_t v101 = *(void *)(v153 + 8 * v95);
      if (!v101)
      {
        int64_t v95 = v100 + 2;
        if (v100 + 2 >= v154) {
          goto LABEL_63;
        }
        unint64_t v101 = *(void *)(v153 + 8 * v95);
        if (!v101) {
          break;
        }
      }
    }
LABEL_59:
    unint64_t v94 = (v101 - 1) & v101;
    unint64_t v99 = __clz(__rbit64(v101)) + (v95 << 6);
LABEL_60:
    sub_1000CE280(*(void *)(v90 + 48) + 56 * v99, (uint64_t)&v164);
    v162[0] = v164;
    v162[1] = v165;
    v162[2] = v166;
    uint64_t v163 = v167;
    id v103 = [(id)v164 fileProviderItem];
    if (v103)
    {
      long long v104 = v103;
      id v105 = [v103 itemID];

      if (v105)
      {
        dispatch_group_t v106 = v148;
        dispatch_group_enter(v148);
        id v155 = *(id *)((char *)isa + (void)v152);
        sub_1000CE280((uint64_t)v162, (uint64_t)v160);
        uint64_t v107 = swift_allocObject();
        uint64_t v108 = v90;
        id v109 = v149;
        *(void *)(v107 + 16) = v149;
        *(void *)(v107 + 24) = v96;
        long long v110 = v160[1];
        *(_OWORD *)(v107 + 32) = v160[0];
        *(_OWORD *)(v107 + 48) = v110;
        *(_OWORD *)(v107 + 64) = v160[2];
        *(void *)(v107 + 80) = v161;
        *(void *)(v107 + 88) = v97;
        *(void *)(v107 + 96) = v106;
        v159[2] = sub_100500244;
        v159[3] = v107;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        v159[0] = sub_10000CAE4;
        v159[1] = &unk_1006B3730;
        long long v111 = _Block_copy(aBlock);
        id v112 = v109;
        uint64_t v90 = v108;
        swift_retain();
        swift_retain();
        long long v113 = v106;
        uint64_t v47 = v156;
        swift_release();
        [v155 fetchItemForItemID:v105 completionHandler:v111];
        long long v114 = v111;
        uint64_t v41 = v157;
        _Block_release(v114);
      }
    }
    uint64_t result = sub_1000CE1FC((uint64_t)v162);
  }
  int64_t v102 = v100 + 3;
  if (v102 >= v154)
  {
LABEL_63:
    swift_release();
    uint64_t v115 = v133;
    long long v116 = v132;
    uint64_t v117 = v134;
    (*(void (**)(char *, void, uint64_t))(v133 + 104))(v132, enum case for DispatchQoS.QoSClass.userInitiated(_:), v134);
    Swift::Int v118 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
    uint64_t v119 = swift_allocObject();
    swift_unknownObjectWeakInit();
    long long v120 = (void *)swift_allocObject();
    v120[2] = v119;
    v120[3] = v41;
    uint64_t v121 = v145;
    v120[4] = v47;
    v120[5] = v121;
    uint64_t v122 = v130;
    v120[6] = v131;
    v120[7] = v122;
    char v123 = v151;
    v120[8] = v140;
    v120[9] = v123;
    v120[10] = v150;
    *(void *)&long long v166 = sub_1000D6868;
    *((void *)&v166 + 1) = v120;
    *(void *)&long long v164 = _NSConcreteStackBlock;
    *((void *)&v164 + 1) = 1107296256;
    *(void *)&long long v165 = sub_1000666D8;
    *((void *)&v165 + 1) = &unk_1006B37A8;
    char v124 = _Block_copy(&v164);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    char v125 = v143;
    static DispatchQoS.unspecified.getter();
    *(void *)&v162[0] = _swiftEmptyArrayStorage;
    sub_1000BAE4C((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000CBE70((uint64_t *)&unk_100705390);
    sub_10009449C((unint64_t *)&qword_100706780, (uint64_t *)&unk_100705390);
    long long v126 = v137;
    uint64_t v127 = v139;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    dispatch_group_t v128 = v148;
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v124);
    swift_release();

    (*(void (**)(char *, uint64_t))(v138 + 8))(v126, v127);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v125, v136);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  unint64_t v101 = *(void *)(v153 + 8 * v102);
  if (v101)
  {
    int64_t v95 = v102;
    goto LABEL_59;
  }
  while (1)
  {
    int64_t v95 = v102 + 1;
    if (__OFADD__(v102, 1)) {
      break;
    }
    if (v95 >= v154) {
      goto LABEL_63;
    }
    unint64_t v101 = *(void *)(v153 + 8 * v95);
    ++v102;
    if (v101) {
      goto LABEL_59;
    }
  }
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

uint64_t sub_1000CDE40(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC5Files32_DOCBrowserHistoryDataSourceBase_shortDebugID);
  unint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC5Files32_DOCBrowserHistoryDataSourceBase_shortDebugID + 8);
  swift_bridgeObjectRetain();
  static Logger.BrowserHistory.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = v5;
    uint64_t v14 = v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v17 = a1;
    uint64_t v20 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_10009B0E4(v10, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_10009B0E4(v17, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[History:%s] %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

unint64_t sub_1000CE0C8()
{
  unint64_t result = qword_10071A120;
  if (!qword_10071A120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071A120);
  }
  return result;
}

unint64_t sub_1000CE11C()
{
  unint64_t result = qword_10071A128;
  if (!qword_10071A128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071A128);
  }
  return result;
}

uint64_t sub_1000CE170(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1000D673C();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_1000CE280(v4, (uint64_t)v5);
      sub_1000CE36C((uint64_t)v6, (uint64_t)v5);
      sub_1000CE1FC((uint64_t)v6);
      v4 += 56;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1000CE1FC(uint64_t a1)
{
  return a1;
}

uint64_t destroy for DOCIdentityHashableLocation(id *a1)
{
  uint64_t v1 = (uint64_t)(a1 + 1);

  return sub_10009B1B8(v1);
}

uint64_t sub_1000CE280(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for DOCIdentityHashableLocation(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  uint64_t v6 = *(void *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = v6;
  uint64_t v8 = v7;
  unint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  id v10 = v3;
  v9(v4, v5, v8);
  return a1;
}

uint64_t sub_1000CE36C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  sub_1000A6B78((void *)(a2 + 8), *(void *)(a2 + 32));
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v16 = a1;
    uint64_t v10 = ~v8;
    while (1)
    {
      sub_1000CE280(*(void *)(v6 + 48) + 56 * v9, (uint64_t)&v17);
      Hasher.init(_seed:)();
      sub_1000A6B78(v18, v18[3]);
      dispatch thunk of Hashable.hash(into:)();
      Swift::Int v11 = Hasher._finalize()();
      Hasher.init(_seed:)();
      sub_1000A6B78((void *)(a2 + 8), *(void *)(a2 + 32));
      dispatch thunk of Hashable.hash(into:)();
      Swift::Int v12 = Hasher._finalize()();
      sub_1000CE1FC((uint64_t)&v17);
      if (v11 == v12) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v2;
        a1 = v16;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000CE1FC(a2);
    sub_1000CE280(*(void *)(*v2 + 48) + 56 * v9, v16);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1000CE280(a2, (uint64_t)v19);
    uint64_t v17 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1000D2878((Swift::Int)v19, v9, isUniquelyReferenced_nonNull_native);
    *int v3 = v17;
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    return 1;
  }
}

void sub_1000CE5B0(int a1)
{
  sub_1000CE5B8(a1, *v1);
}

void sub_1000CE5B8(int a1, id a2)
{
  id v3 = [a2 sourceIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  swift_bridgeObjectRelease();
  id v4 = [a2 displayName];
  if (v4)
  {
    uint64_t v5 = v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

id *sub_1000CE68C(uint64_t a1, void *a2, double a3)
{
  uint64_t v6 = (void *)a2[1];
  id v11 = (id)a2[2];
  id v12 = v6;
  id v10 = (id)a2[4];
  sub_1000CED00(&v12);
  sub_1000CED00(&v11);
  sub_1000CED00(&v10);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0x8000000000000000;
  sub_1000CE748((uint64_t)a2, isUniquelyReferenced_nonNull_native, a3);
  *(void *)(a1 + 8) = v9;
  swift_bridgeObjectRelease();
  sub_1000CF6B4(&v12);
  sub_1000CF6B4(&v11);
  return sub_1000CF6B4(&v10);
}

id *sub_1000CE748(uint64_t a1, char a2, double a3)
{
  id v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000CE8B0(a1);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = (id *)(v11 + v12);
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= (uint64_t)result && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= (uint64_t)result && (a2 & 1) == 0)
  {
    uint64_t result = (id *)sub_10035A540();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v10) = a3;
      return result;
    }
LABEL_11:
    uint64_t v18 = *(void **)(a1 + 8);
    id v26 = *(id *)(a1 + 16);
    id v27 = v18;
    id v25 = *(id *)(a1 + 32);
    id v19 = v25;
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v20 = v16[6] + 40 * v10;
    long long v21 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v20 = *(_OWORD *)a1;
    *(_OWORD *)(v20 + 16) = v21;
    *(void *)(v20 + 32) = v19;
    *(double *)(v16[7] + 8 * v10) = a3;
    uint64_t v22 = v16[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      void v16[2] = v24;
      sub_1000CED00(&v27);
      sub_1000CED00(&v26);
      return sub_1000CED00(&v25);
    }
    goto LABEL_14;
  }
  sub_10000757C((uint64_t)result, a2 & 1);
  uint64_t result = (id *)sub_1000CE8B0(a1);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = (unint64_t)result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = (id *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_1000CE8B0(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_1000CF444();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000CE9D4(a1, v2);
}

id *sub_1000CE91C@<X0>(id *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = result[1];
  if (v4[2])
  {
    uint64_t v6 = (void *)a2[1];
    id v12 = (id)a2[2];
    id v13 = v6;
    id v11 = (id)a2[4];
    sub_1000CED00(&v11);
    sub_1000CED00(&v13);
    sub_1000CED00(&v12);
    unint64_t v7 = sub_1000CE8B0((uint64_t)a2);
    if (v8) {
      uint64_t v9 = *(void *)(v4[7] + 8 * v7);
    }
    else {
      uint64_t v9 = 0;
    }
    char v10 = v8 ^ 1;
    sub_1000CF6B4(&v13);
    sub_1000CF6B4(&v12);
    uint64_t result = sub_1000CF6B4(&v11);
  }
  else
  {
    uint64_t v9 = 0;
    char v10 = 1;
  }
  *(void *)a3 = v9;
  *(unsigned char *)(a3 + 8) = v10 & 1;
  return result;
}

unint64_t sub_1000CE9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v40 = ~v3;
    double v6 = *(double *)a1;
    do
    {
      uint64_t v7 = *(void *)(v42 + 48) + 40 * v4;
      if (*(double *)v7 != v6) {
        goto LABEL_4;
      }
      char v8 = *(void **)(v7 + 8);
      uint64_t v9 = *(void **)(v7 + 16);
      uint64_t v10 = *(void *)(v7 + 24);
      id v11 = *(void **)(v7 + 32);
      id v45 = *(id *)(a1 + 8);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
      if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
      {
        id v21 = v8;
        id v22 = v9;
        id v23 = v11;
        sub_1000CED00(&v45);
        swift_bridgeObjectRelease_n();
        sub_1000CF6B4(&v45);
      }
      else
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        id v18 = v8;
        id v19 = v9;
        id v20 = v11;
        sub_1000CED00(&v45);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000CF6B4(&v45);

        if ((v17 & 1) == 0) {
          goto LABEL_3;
        }
      }
      id v44 = *(id *)(a1 + 16);
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;
      if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27)
      {
        id v31 = v9;
        sub_1000CED00(&v44);
        swift_bridgeObjectRelease_n();
        sub_1000CF6B4(&v44);
      }
      else
      {
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        id v30 = v9;
        sub_1000CED00(&v44);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000CF6B4(&v44);

        if ((v29 & 1) == 0) {
          goto LABEL_3;
        }
      }
      if (v10 != *(void *)(a1 + 24))
      {
LABEL_3:

        goto LABEL_4;
      }
      id v43 = *(id *)(a1 + 32);
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;
      if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
      {
        id v39 = v11;
        sub_1000CED00(&v43);
        swift_bridgeObjectRelease_n();
        sub_1000CF6B4(&v43);

        return v4;
      }
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v37 = v11;
      sub_1000CED00(&v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000CF6B4(&v43);

      if (v36) {
        return v4;
      }
LABEL_4:
      unint64_t v4 = (v4 + 1) & v40;
    }
    while (((*(void *)(v41 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

id *sub_1000CED00(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_1000CED2C(_OWORD *a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000CEF10(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10035A28C();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7] + 224 * v10;
      return sub_1003ED250((uint64_t)a1, v17);
    }
    goto LABEL_13;
  }
  sub_1000CF6E0(v13, a3 & 1);
  unint64_t v19 = sub_1000CEF10(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = (void *)*v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_13:
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v21 = v16[6] + 168 * v10;
  long long v23 = *(_OWORD *)(a2 + 80);
  long long v22 = *(_OWORD *)(a2 + 96);
  long long v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v21 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v21 + 64) = v24;
  *(_OWORD *)(v21 + 80) = v23;
  *(_OWORD *)(v21 + 96) = v22;
  long long v26 = *(_OWORD *)(a2 + 16);
  long long v25 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)a2;
  *(_OWORD *)(v21 + 16) = v26;
  *(_OWORD *)(v21 + 32) = v25;
  long long v27 = *(_OWORD *)(a2 + 112);
  long long v28 = *(_OWORD *)(a2 + 128);
  long long v29 = *(_OWORD *)(a2 + 144);
  *(void *)(v21 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(v21 + 128) = v28;
  *(_OWORD *)(v21 + 144) = v29;
  *(_OWORD *)(v21 + 112) = v27;
  id v30 = (_OWORD *)(v16[7] + 224 * v10);
  long long v31 = a1[1];
  *id v30 = *a1;
  v30[1] = v31;
  long long v32 = a1[2];
  long long v33 = a1[3];
  long long v34 = a1[5];
  v30[4] = a1[4];
  v30[5] = v34;
  v30[2] = v32;
  _OWORD v30[3] = v33;
  long long v35 = a1[6];
  long long v36 = a1[7];
  long long v37 = a1[9];
  v30[8] = a1[8];
  v30[9] = v37;
  v30[6] = v35;
  v30[7] = v36;
  long long v38 = a1[10];
  long long v39 = a1[11];
  long long v40 = a1[13];
  v30[12] = a1[12];
  v30[13] = v40;
  v30[10] = v38;
  v30[11] = v39;
  uint64_t v41 = v16[2];
  BOOL v42 = __OFADD__(v41, 1);
  uint64_t v43 = v41 + 1;
  if (v42)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  void v16[2] = v43;

  return sub_1000CAA28(a2);
}

unint64_t sub_1000CEF10(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_1000CF54C();
  sub_1000CEFD0(*(double *)(a1 + 112), *(double *)(a1 + 120));
  UIEdgeInsets.hash(into:)();
  if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(a1 + 160);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  Swift::Int v3 = Hasher._finalize()();

  return sub_1000CF01C(a1, v3);
}

void sub_1000CEFD0(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

unint64_t sub_1000CF01C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v44 = ~v3;
    BOOL v42 = *(void **)(a1 + 16);
    uint64_t v43 = *(void *)(a1 + 8);
    *(void *)&long long v41 = *(void *)(a1 + 32);
    *((void *)&v41 + 1) = *(void *)(a1 + 24);
    int v39 = *(unsigned __int8 *)(a1 + 41);
    int v40 = *(unsigned __int8 *)(a1 + 40);
    char v37 = *(unsigned char *)(a1 + 42);
    float64x2_t v35 = *(float64x2_t *)(a1 + 80);
    float64x2_t v36 = *(float64x2_t *)(a1 + 96);
    float64x2_t v33 = *(float64x2_t *)(a1 + 48);
    float64x2_t v34 = *(float64x2_t *)(a1 + 64);
    v65[0] = *(id *)a1;
    do
    {
      uint64_t v5 = *(void *)(v46 + 48) + 168 * v4;
      float64x2_t v6 = *(float64x2_t *)(v5 + 48);
      float64x2_t v7 = *(float64x2_t *)(v5 + 64);
      float64x2_t v8 = *(float64x2_t *)(v5 + 96);
      float64x2_t v58 = *(float64x2_t *)(v5 + 80);
      float64x2_t v59 = v8;
      float64x2_t v56 = v6;
      float64x2_t v57 = v7;
      long long v10 = *(_OWORD *)(v5 + 16);
      long long v9 = *(_OWORD *)(v5 + 32);
      long long v53 = *(_OWORD *)v5;
      long long v54 = v10;
      long long v55 = v9;
      long long v12 = *(_OWORD *)(v5 + 128);
      long long v11 = *(_OWORD *)(v5 + 144);
      long long v13 = *(_OWORD *)(v5 + 112);
      double v63 = *(double *)(v5 + 160);
      long long v61 = v12;
      long long v62 = v11;
      long long v60 = v13;
      long long v14 = v53;
      long long v15 = v54;
      unint64_t v16 = v55;
      int v17 = BYTE8(v55);
      int v52 = BYTE9(v55);
      int v47 = BYTE10(v55);
      float64x2_t v50 = v58;
      float64x2_t v51 = v8;
      float64x2_t v48 = v56;
      float64x2_t v49 = v57;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;
      if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
      {
        sub_1000CAA28((uint64_t)&v53);
        id v22 = (id)v14;
        sub_1000CED00(v65);
        swift_bridgeObjectRelease_n();
        sub_1000CF6B4(v65);
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_1000CAA28((uint64_t)&v53);
        id v24 = (id)v14;
        sub_1000CED00(v65);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000CF6B4(v65);

        if ((v23 & 1) == 0) {
          goto LABEL_3;
        }
      }
      if (*((void *)&v14 + 1) != v43)
      {
LABEL_3:
        sub_1000CAA5C((void **)&v53);
        goto LABEL_4;
      }
      id v64 = v42;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;
      if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
      {
        id v29 = (id)v15;
        sub_1000CED00(&v64);
        swift_bridgeObjectRelease_n();
        sub_1000CF6B4(&v64);

        sub_1000CAA5C((void **)&v53);
      }
      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        id v31 = (id)v15;
        sub_1000CED00(&v64);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000CF6B4(&v64);

        sub_1000CAA5C((void **)&v53);
        if ((v30 & 1) == 0) {
          goto LABEL_4;
        }
      }
      if (__PAIR128__(*((unint64_t *)&v15 + 1), v16) == v41
        && ((v17 ^ v40) & 1) == 0
        && ((v52 ^ v39) & 1) == 0
        && (vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v48, v33), (int32x4_t)vceqq_f64(v49, v34)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v50, v35), (int32x4_t)vceqq_f64(v51, v36)))), 7uLL))) & 1) != 0&& ((v37 & 1) == 0) != v47&& *(double *)&v60 == *(double *)(a1 + 112)&& *((double *)&v60 + 1) == *(double *)(a1 + 120)&& *(double *)&v61 == *(double *)(a1 + 128)&& *((double *)&v61 + 1) == *(double *)(a1 + 136)&& *(double *)&v62 == *(double *)(a1 + 144)&& *((double *)&v62 + 1) == *(double *)(a1 + 152)&& v63 == *(double *)(a1 + 160))
      {
        return v4;
      }
LABEL_4:
      unint64_t v4 = (v4 + 1) & v44;
    }
    while (((*(void *)(v45 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

id *sub_1000CF444()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  id v8 = (id)v0[1];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = v8;
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_1000CF6B4(&v8);
  id v7 = (id)v0[2];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v3 = v7;
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_1000CF6B4(&v7);
  Hasher._combine(_:)(v0[3]);
  id v6 = (id)v0[4];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = v6;
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return sub_1000CF6B4(&v6);
}

void sub_1000CF54C()
{
  id v19 = *(id *)v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v1 = v19;
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_1000CF6B4(&v19);
  Hasher._combine(_:)(*(void *)(v0 + 8));
  id v18 = *(id *)(v0 + 16);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = v18;
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_1000CF6B4(&v18);
  Hasher._combine(_:)(*(void *)(v0 + 24));
  Hasher._combine(_:)(*(void *)(v0 + 32));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 40) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 41) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 42) & 1);
  Swift::UInt64 v3 = *(void *)(v0 + 56);
  Swift::UInt64 v4 = *(void *)(v0 + 64);
  Swift::UInt64 v5 = *(void *)(v0 + 72);
  Swift::UInt64 v6 = *(void *)(v0 + 80);
  Swift::UInt64 v7 = *(void *)(v0 + 88);
  Swift::UInt64 v9 = *(void *)(v0 + 96);
  Swift::UInt64 v8 = *(void *)(v0 + 104);
  if ((*(void *)(v0 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)(v0 + 48);
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v3;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v4;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v5;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v6;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v7;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = v9;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = v8;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
}

id *sub_1000CF6B4(id *a1)
{
  return a1;
}

unint64_t sub_1000CF6E0(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  sub_1000CBE70(&qword_100711D18);
  char v78 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  Swift::UInt64 v6 = (void *)v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    long long v74 = (void *)(v4 + 64);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v4 + 64);
    int64_t v75 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v76 = v5 + 64;
    unint64_t result = swift_retain();
    int64_t v11 = 0;
    uint64_t v77 = v4;
    while (1)
    {
      if (v9)
      {
        unint64_t v56 = __clz(__rbit64(v9));
        uint64_t v57 = (v9 - 1) & v9;
        unint64_t v58 = v56 | (v11 << 6);
      }
      else
      {
        int64_t v59 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
        if (v59 >= v75) {
          goto LABEL_27;
        }
        unint64_t v60 = v74[v59];
        ++v11;
        if (!v60)
        {
          int64_t v11 = v59 + 1;
          if (v59 + 1 >= v75) {
            goto LABEL_27;
          }
          unint64_t v60 = v74[v11];
          if (!v60)
          {
            int64_t v61 = v59 + 2;
            if (v61 >= v75)
            {
LABEL_27:
              swift_release();
              if (v78)
              {
                uint64_t v72 = 1 << *(unsigned char *)(v4 + 32);
                if (v72 >= 64) {
                  bzero(v74, ((unint64_t)(v72 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v74 = -1 << v72;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            unint64_t v60 = v74[v61];
            if (!v60)
            {
              while (1)
              {
                int64_t v11 = v61 + 1;
                if (__OFADD__(v61, 1)) {
                  goto LABEL_34;
                }
                if (v11 >= v75) {
                  goto LABEL_27;
                }
                unint64_t v60 = v74[v11];
                ++v61;
                if (v60) {
                  goto LABEL_24;
                }
              }
            }
            int64_t v11 = v61;
          }
        }
LABEL_24:
        uint64_t v57 = (v60 - 1) & v60;
        unint64_t v58 = __clz(__rbit64(v60)) + (v11 << 6);
      }
      unint64_t v82 = v57;
      int64_t v83 = v11;
      if (v78)
      {
        uint64_t v62 = *(void *)(v4 + 56);
        uint64_t v63 = *(void *)(v4 + 48) + 168 * v58;
        uint64_t v32 = *(void *)v63;
        uint64_t v33 = *(void *)(v63 + 8);
        uint64_t v34 = *(void *)(v63 + 16);
        uint64_t v35 = *(void *)(v63 + 24);
        uint64_t v36 = *(void *)(v63 + 32);
        char v37 = *(unsigned char *)(v63 + 40);
        char v38 = *(unsigned char *)(v63 + 41);
        int v129 = *(_DWORD *)(v63 + 43);
        char v130 = *(unsigned char *)(v63 + 47);
        char v39 = *(unsigned char *)(v63 + 42);
        uint64_t v80 = *(void *)(v63 + 56);
        uint64_t v81 = *(void *)(v63 + 48);
        uint64_t v88 = *(void *)(v63 + 72);
        uint64_t v89 = *(void *)(v63 + 64);
        uint64_t v86 = *(void *)(v63 + 88);
        uint64_t v87 = *(void *)(v63 + 80);
        double v40 = *(double *)(v63 + 112);
        uint64_t v84 = *(void *)(v63 + 104);
        uint64_t v85 = *(void *)(v63 + 96);
        double v41 = *(double *)(v63 + 120);
        uint64_t v42 = *(void *)(v63 + 128);
        uint64_t v43 = *(void *)(v63 + 136);
        uint64_t v44 = *(void *)(v63 + 144);
        uint64_t v45 = *(void *)(v63 + 152);
        Swift::UInt64 v79 = *(void *)(v63 + 160);
        id v64 = (long long *)(v62 + 224 * v58);
        long long v65 = v64[13];
        long long v127 = v64[12];
        long long v128 = v65;
        long long v66 = v64[11];
        long long v125 = v64[10];
        long long v126 = v66;
        long long v67 = v64[9];
        long long v123 = v64[8];
        long long v124 = v67;
        long long v68 = v64[7];
        long long v121 = v64[6];
        long long v122 = v68;
        long long v69 = v64[5];
        long long v119 = v64[4];
        long long v120 = v69;
        long long v70 = v64[3];
        long long v117 = v64[2];
        long long v118 = v70;
        long long v71 = v64[1];
        long long v115 = *v64;
        long long v116 = v71;
      }
      else
      {
        uint64_t v12 = *(void *)(v4 + 48) + 168 * v58;
        long long v13 = *(_OWORD *)(v12 + 48);
        long long v14 = *(_OWORD *)(v12 + 64);
        long long v15 = *(_OWORD *)(v12 + 96);
        long long v95 = *(_OWORD *)(v12 + 80);
        long long v96 = v15;
        long long v93 = v13;
        long long v94 = v14;
        long long v16 = *(_OWORD *)(v12 + 112);
        long long v17 = *(_OWORD *)(v12 + 128);
        long long v18 = *(_OWORD *)(v12 + 144);
        Swift::UInt64 v100 = *(void *)(v12 + 160);
        long long v98 = v17;
        long long v99 = v18;
        long long v97 = v16;
        long long v19 = *(_OWORD *)(v12 + 32);
        long long v20 = *(_OWORD *)v12;
        long long v91 = *(_OWORD *)(v12 + 16);
        long long v92 = v19;
        long long v90 = v20;
        uint64_t v21 = (long long *)(*(void *)(v4 + 56) + 224 * v58);
        long long v22 = v21[1];
        long long v101 = *v21;
        long long v102 = v22;
        long long v23 = v21[5];
        long long v25 = v21[2];
        long long v24 = v21[3];
        long long v105 = v21[4];
        long long v106 = v23;
        long long v103 = v25;
        long long v104 = v24;
        long long v26 = v21[6];
        long long v27 = v21[7];
        long long v28 = v21[9];
        long long v109 = v21[8];
        long long v110 = v28;
        long long v107 = v26;
        long long v108 = v27;
        long long v29 = v21[10];
        long long v30 = v21[11];
        long long v31 = v21[13];
        long long v113 = v21[12];
        long long v114 = v31;
        long long v111 = v29;
        long long v112 = v30;
        sub_1000CAA28((uint64_t)&v90);
        sub_1000CAA28((uint64_t)&v101);
        long long v125 = v111;
        long long v126 = v112;
        long long v127 = v113;
        long long v128 = v114;
        long long v121 = v107;
        long long v122 = v108;
        long long v123 = v109;
        long long v124 = v110;
        long long v117 = v103;
        long long v118 = v104;
        long long v119 = v105;
        long long v120 = v106;
        long long v115 = v101;
        long long v116 = v102;
        uint64_t v33 = *((void *)&v90 + 1);
        uint64_t v32 = v90;
        uint64_t v35 = *((void *)&v91 + 1);
        uint64_t v34 = v91;
        uint64_t v36 = v92;
        char v37 = BYTE8(v92);
        char v38 = BYTE9(v92);
        char v39 = BYTE10(v92);
        int v129 = *(_DWORD *)((char *)&v92 + 11);
        char v130 = HIBYTE(v92);
        uint64_t v80 = *((void *)&v93 + 1);
        uint64_t v81 = v93;
        uint64_t v88 = *((void *)&v94 + 1);
        uint64_t v89 = v94;
        uint64_t v86 = *((void *)&v95 + 1);
        uint64_t v87 = v95;
        double v40 = *(double *)&v97;
        uint64_t v84 = *((void *)&v96 + 1);
        uint64_t v85 = v96;
        double v41 = *((double *)&v97 + 1);
        uint64_t v43 = *((void *)&v98 + 1);
        uint64_t v42 = v98;
        uint64_t v45 = *((void *)&v99 + 1);
        uint64_t v44 = v99;
        Swift::UInt64 v79 = v100;
      }
      Hasher.init(_seed:)();
      uint64_t v131 = v32;
      uint64_t v132 = v33;
      uint64_t v133 = v34;
      uint64_t v134 = v35;
      uint64_t v135 = v36;
      char v136 = v37 & 1;
      char v137 = v38 & 1;
      char v138 = v39 & 1;
      uint64_t v139 = v81;
      uint64_t v140 = v80;
      uint64_t v141 = v89;
      uint64_t v142 = v88;
      uint64_t v143 = v87;
      uint64_t v144 = v86;
      uint64_t v145 = v85;
      uint64_t v146 = v84;
      sub_1000CF54C();
      sub_1000CEFD0(v40, v41);
      UIEdgeInsets.hash(into:)();
      if ((v79 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v46 = v79;
      }
      else {
        Swift::UInt64 v46 = 0;
      }
      Hasher._combine(_:)(v46);
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v76 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v47 = v6[6] + 168 * result;
      *(void *)uint64_t v47 = v32;
      *(void *)(v47 + 8) = v33;
      *(void *)(v47 + 16) = v34;
      *(void *)(v47 + 24) = v35;
      *(void *)(v47 + 32) = v36;
      *(unsigned char *)(v47 + 40) = v37;
      *(unsigned char *)(v47 + 41) = v38;
      *(unsigned char *)(v47 + 42) = v39;
      *(_DWORD *)(v47 + 43) = v129;
      *(unsigned char *)(v47 + 47) = v130;
      *(void *)(v47 + 48) = v81;
      *(void *)(v47 + 56) = v80;
      *(void *)(v47 + 64) = v89;
      *(void *)(v47 + 72) = v88;
      *(void *)(v47 + 80) = v87;
      *(void *)(v47 + 88) = v86;
      *(void *)(v47 + 96) = v85;
      *(void *)(v47 + 104) = v84;
      *(double *)(v47 + 112) = v40;
      *(double *)(v47 + 120) = v41;
      *(void *)(v47 + 128) = v42;
      *(void *)(v47 + 136) = v43;
      *(void *)(v47 + 144) = v44;
      *(void *)(v47 + 152) = v45;
      *(void *)(v47 + 160) = v79;
      float64x2_t v48 = (_OWORD *)(v6[7] + 224 * result);
      long long v49 = v126;
      v48[10] = v125;
      v48[11] = v49;
      long long v50 = v128;
      v48[12] = v127;
      v48[13] = v50;
      long long v51 = v122;
      v48[6] = v121;
      v48[7] = v51;
      long long v52 = v124;
      v48[8] = v123;
      v48[9] = v52;
      long long v53 = v118;
      v48[2] = v117;
      v48[3] = v53;
      long long v54 = v120;
      void v48[4] = v119;
      v48[5] = v54;
      long long v55 = v116;
      *float64x2_t v48 = v115;
      v48[1] = v55;
      ++v6[2];
      uint64_t v4 = v77;
      unint64_t v9 = v82;
      int64_t v11 = v83;
    }
  }
  unint64_t result = swift_release();
  *id v73 = v6;
  return result;
}

uint64_t initializeWithTake for DOCFileProviderSourceType(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t sub_1000D01D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D01E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D01F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0204(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0214(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0224(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0234(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0244(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0254(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0264(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0274(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0284(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0294(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D02A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D02B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D02C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D02D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D02E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D02F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0304(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0314(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0324(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0344(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0354(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0364(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0374(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0394(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D03A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D03B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D03C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D03D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D03E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D03F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0404(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0414(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0424(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0434(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0444(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0454(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0464(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0474(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0484(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0494(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D04A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D04B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D04C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D04D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D04E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D04F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0504(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0514(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0524(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0534(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0544(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0554(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0564(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0574(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0584(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0594(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D05A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D05B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D05C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D05D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D05E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D05F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0604(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0614(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0624(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0634(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0644(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0654(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0664(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0674(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0684(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0694(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D06A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D06B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D06C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D06D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D06E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D06F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0704(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0714(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0724(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0734(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0744(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0754(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0764(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0774(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0784(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0794(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D07A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D07B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D07C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D07D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D07E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D07F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0804(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0814(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0824(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0834(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0844(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0854(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0864(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0874(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0884(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0894(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D08A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D08B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D08C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D08D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D08E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D08F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0904(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0914(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0924(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0934(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0944(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0954(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0964(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0974(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0984(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0994(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D09A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D09B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D09C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D09D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D09E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D09F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0A94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0B04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0B44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0B54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0B64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0B74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D0B84()
{
  return swift_release();
}

uint64_t sub_1000D0B8C()
{
  return swift_release();
}

uint64_t sub_1000D0B94()
{
  return swift_release();
}

uint64_t sub_1000D0B9C()
{
  return swift_release();
}

uint64_t sub_1000D0BA4()
{
  return swift_release();
}

uint64_t sub_1000D0BAC()
{
  return swift_release();
}

uint64_t sub_1000D0BB4()
{
  return swift_release();
}

uint64_t sub_1000D0BBC()
{
  return swift_release();
}

uint64_t sub_1000D0BC4()
{
  return swift_release();
}

uint64_t sub_1000D0BCC()
{
  return swift_release();
}

uint64_t sub_1000D0BD4()
{
  return swift_release();
}

uint64_t sub_1000D0BDC()
{
  return swift_release();
}

uint64_t sub_1000D0BE4()
{
  return swift_release();
}

uint64_t sub_1000D0BEC()
{
  return swift_release();
}

uint64_t sub_1000D0BF4()
{
  return swift_release();
}

uint64_t sub_1000D0BFC()
{
  return swift_release();
}

uint64_t sub_1000D0C04()
{
  return swift_release();
}

uint64_t sub_1000D0C0C()
{
  return swift_release();
}

uint64_t sub_1000D0C14()
{
  return swift_release();
}

uint64_t sub_1000D0C1C()
{
  return swift_release();
}

uint64_t sub_1000D0C24()
{
  return swift_release();
}

uint64_t sub_1000D0C2C()
{
  return swift_release();
}

uint64_t sub_1000D0C34()
{
  return swift_release();
}

uint64_t sub_1000D0C3C()
{
  return swift_release();
}

uint64_t sub_1000D0C44()
{
  return swift_release();
}

uint64_t sub_1000D0C4C()
{
  return swift_release();
}

uint64_t sub_1000D0C54()
{
  return swift_release();
}

uint64_t sub_1000D0C5C()
{
  return swift_release();
}

uint64_t sub_1000D0C64()
{
  return swift_release();
}

uint64_t sub_1000D0C6C()
{
  return swift_release();
}

uint64_t sub_1000D0C74()
{
  return swift_release();
}

uint64_t sub_1000D0C7C()
{
  return swift_release();
}

uint64_t sub_1000D0C84()
{
  return swift_release();
}

uint64_t sub_1000D0C8C()
{
  return swift_release();
}

uint64_t sub_1000D0C94()
{
  return swift_release();
}

uint64_t sub_1000D0C9C()
{
  return swift_release();
}

uint64_t sub_1000D0CA4()
{
  return swift_release();
}

uint64_t sub_1000D0CAC()
{
  return swift_release();
}

uint64_t sub_1000D0CB4()
{
  return swift_release();
}

uint64_t sub_1000D0CBC()
{
  return swift_release();
}

uint64_t sub_1000D0CC4()
{
  return swift_release();
}

uint64_t sub_1000D0CCC()
{
  return swift_release();
}

uint64_t sub_1000D0CD4()
{
  return swift_release();
}

uint64_t sub_1000D0CDC()
{
  return swift_release();
}

uint64_t sub_1000D0CE4()
{
  return swift_release();
}

uint64_t sub_1000D0CEC()
{
  return swift_release();
}

uint64_t sub_1000D0CF4()
{
  return swift_release();
}

uint64_t sub_1000D0CFC()
{
  return swift_release();
}

uint64_t sub_1000D0D04()
{
  return swift_release();
}

uint64_t sub_1000D0D0C()
{
  return swift_release();
}

uint64_t sub_1000D0D14()
{
  return swift_release();
}

uint64_t sub_1000D0D1C()
{
  return swift_release();
}

uint64_t sub_1000D0D24()
{
  return swift_release();
}

uint64_t sub_1000D0D2C()
{
  return swift_release();
}

uint64_t sub_1000D0D34()
{
  return swift_release();
}

uint64_t sub_1000D0D3C()
{
  return swift_release();
}

uint64_t sub_1000D0D44()
{
  return swift_release();
}

uint64_t sub_1000D0D4C()
{
  return swift_release();
}

uint64_t sub_1000D0D54()
{
  return swift_release();
}

uint64_t sub_1000D0D5C()
{
  return swift_release();
}

uint64_t sub_1000D0D64()
{
  return swift_release();
}

uint64_t sub_1000D0D6C()
{
  return swift_release();
}

uint64_t sub_1000D0D74()
{
  return swift_release();
}

uint64_t sub_1000D0D7C()
{
  return swift_release();
}

uint64_t sub_1000D0D84()
{
  return swift_release();
}

uint64_t sub_1000D0D8C()
{
  return swift_release();
}

uint64_t sub_1000D0D94()
{
  return swift_release();
}

uint64_t sub_1000D0D9C()
{
  return swift_release();
}

uint64_t sub_1000D0DA4()
{
  return swift_release();
}

uint64_t sub_1000D0DAC()
{
  return swift_release();
}

uint64_t sub_1000D0DB4()
{
  return swift_release();
}

uint64_t sub_1000D0DBC()
{
  return swift_release();
}

uint64_t sub_1000D0DC4()
{
  return swift_release();
}

uint64_t sub_1000D0DCC()
{
  return swift_release();
}

uint64_t sub_1000D0DD4()
{
  return swift_release();
}

uint64_t sub_1000D0DDC()
{
  return swift_release();
}

uint64_t sub_1000D0DE4()
{
  return swift_release();
}

uint64_t sub_1000D0DEC()
{
  return swift_release();
}

uint64_t sub_1000D0DF4()
{
  return swift_release();
}

uint64_t sub_1000D0DFC()
{
  return swift_release();
}

uint64_t sub_1000D0E04()
{
  return swift_release();
}

uint64_t sub_1000D0E0C()
{
  return swift_release();
}

uint64_t sub_1000D0E14()
{
  return swift_release();
}

uint64_t sub_1000D0E1C()
{
  return swift_release();
}

uint64_t sub_1000D0E24()
{
  return swift_release();
}

uint64_t sub_1000D0E2C()
{
  return swift_release();
}

uint64_t sub_1000D0E34()
{
  return swift_release();
}

uint64_t sub_1000D0E3C()
{
  return swift_release();
}

uint64_t sub_1000D0E44()
{
  return swift_release();
}

uint64_t sub_1000D0E4C()
{
  return swift_release();
}

uint64_t sub_1000D0E54()
{
  return swift_release();
}

uint64_t sub_1000D0E5C()
{
  return swift_release();
}

uint64_t sub_1000D0E64()
{
  return swift_release();
}

uint64_t sub_1000D0E6C()
{
  return swift_release();
}

uint64_t sub_1000D0E74()
{
  return swift_release();
}

uint64_t sub_1000D0E7C()
{
  return swift_release();
}

uint64_t sub_1000D0E84()
{
  return swift_release();
}

uint64_t sub_1000D0E8C()
{
  return swift_release();
}

uint64_t sub_1000D0E94()
{
  return swift_release();
}

uint64_t sub_1000D0E9C()
{
  return swift_release();
}

uint64_t sub_1000D0EA4()
{
  return swift_release();
}

uint64_t sub_1000D0EAC()
{
  return swift_release();
}

uint64_t sub_1000D0EB4()
{
  return swift_release();
}

uint64_t sub_1000D0EBC()
{
  return swift_release();
}

uint64_t sub_1000D0EC4()
{
  return swift_release();
}

uint64_t sub_1000D0ECC()
{
  return swift_release();
}

uint64_t sub_1000D0ED4()
{
  return swift_release();
}

uint64_t sub_1000D0EDC()
{
  return swift_release();
}

uint64_t sub_1000D0EE4()
{
  return swift_release();
}

uint64_t sub_1000D0EEC()
{
  return swift_release();
}

uint64_t sub_1000D0EF4()
{
  return swift_release();
}

uint64_t sub_1000D0EFC()
{
  return swift_release();
}

uint64_t sub_1000D0F04()
{
  return swift_release();
}

uint64_t sub_1000D0F0C()
{
  return swift_release();
}

uint64_t sub_1000D0F14()
{
  return swift_release();
}

uint64_t sub_1000D0F1C()
{
  return swift_release();
}

uint64_t sub_1000D0F24()
{
  return swift_release();
}

uint64_t sub_1000D0F2C()
{
  return swift_release();
}

uint64_t sub_1000D0F34()
{
  return swift_release();
}

uint64_t sub_1000D0F3C()
{
  return swift_release();
}

uint64_t sub_1000D0F44()
{
  return swift_release();
}

uint64_t sub_1000D0F4C()
{
  return swift_release();
}

uint64_t sub_1000D0F54()
{
  return swift_release();
}

uint64_t sub_1000D0F5C()
{
  return swift_release();
}

uint64_t sub_1000D0F64()
{
  return swift_release();
}

uint64_t sub_1000D0F6C()
{
  return swift_release();
}

uint64_t sub_1000D0F74()
{
  return swift_release();
}

uint64_t sub_1000D0F7C()
{
  return swift_release();
}

uint64_t sub_1000D0F84()
{
  return swift_release();
}

uint64_t sub_1000D0F8C()
{
  return swift_release();
}

uint64_t sub_1000D0F94()
{
  return swift_release();
}

uint64_t sub_1000D0F9C()
{
  return swift_release();
}

uint64_t sub_1000D0FA4()
{
  return swift_release();
}

uint64_t sub_1000D0FAC()
{
  return swift_release();
}

uint64_t sub_1000D0FB4()
{
  return swift_release();
}

uint64_t sub_1000D0FBC()
{
  return swift_release();
}

uint64_t sub_1000D0FC4()
{
  return swift_release();
}

uint64_t sub_1000D0FCC()
{
  return swift_release();
}

uint64_t sub_1000D0FD4()
{
  return swift_release();
}

uint64_t sub_1000D0FDC()
{
  return swift_release();
}

uint64_t sub_1000D0FE4()
{
  return swift_release();
}

uint64_t sub_1000D0FEC()
{
  return swift_release();
}

uint64_t sub_1000D0FF4()
{
  return swift_release();
}

uint64_t sub_1000D0FFC()
{
  return swift_release();
}

uint64_t sub_1000D1004()
{
  return swift_release();
}

uint64_t sub_1000D100C()
{
  return swift_release();
}

uint64_t sub_1000D1014()
{
  return swift_release();
}

uint64_t sub_1000D101C()
{
  return swift_release();
}

uint64_t sub_1000D1024()
{
  return swift_release();
}

uint64_t sub_1000D102C()
{
  return swift_release();
}

uint64_t sub_1000D1034()
{
  return swift_release();
}

uint64_t sub_1000D103C()
{
  return swift_release();
}

uint64_t sub_1000D1044()
{
  return swift_release();
}

uint64_t sub_1000D104C()
{
  return swift_release();
}

uint64_t sub_1000D1054()
{
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for DOCBrowserLayoutConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

unsigned char *_s3TagOwCP(unsigned char *result, unsigned char *a2)
{
  id *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionSizeClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

__n128 initializeWithTake for DOCLocationChange(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000D1158(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

void *initializeBufferWithCopyOfBuffer for DOCBrowserContainerState(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for DOCBrowserContainerState(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

id sub_1000D1200()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionView_configuration);
}

id sub_1000D1218()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration);
}

uint64_t getEnumTagSinglePayload for DOCBrowserContainerState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t getEnumTagSinglePayload for DOCGridLayout(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 224)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *storeEnumTagSinglePayload for DOCItemCollectionSizeClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    id *result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          id *result = a2 + 16;
        break;
    }
  }
  return result;
}

uint64_t sub_1000D141C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004FBBEC);
}

uint64_t sub_1000D1430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004FB030);
}

unint64_t sub_1000D1450@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10007149C(a1, *(void *)(v2 + 16), a2);
}

uint64_t destroy for DOCViewEditMenuInteraction.Presentatable()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D14A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004FB0FC);
}

uint64_t sub_1000D14B8(uint64_t a1)
{
  return sub_1000A54C0(a1, *(unsigned char *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(unsigned char **)(v1 + 40), *(uint64_t **)(v1 + 48));
}

uint64_t sub_1000D14CC(uint64_t a1)
{
  unint64_t v2 = sub_1000D1508();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_1000D1508()
{
  unint64_t result = qword_100712F48;
  if (!qword_100712F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712F48);
  }
  return result;
}

__n128 initializeWithCopy for DOCItemCollectionCellStackMetrics(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DOCCollectionSection()
{
  return &type metadata for DOCCollectionSection;
}

void type metadata accessor for DOCTab(uint64_t a1)
{
}

uint64_t sub_1000D1688()
{
  return 0x6946686372616553;
}

uint64_t sub_1000D16A4@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return sub_100070C80(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1000D16AC()
{
  return sub_100046EB0();
}

uint64_t getEnumTagSinglePayload for DOCCollectionSection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000D16FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10021D6B4);
}

uint64_t sub_1000D1710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10021DC3C);
}

unint64_t sub_1000D1728()
{
  return 0xD000000000000026;
}

void *initializeWithTake for DOCFileProviderSyncStateHeaderViewModel.State(void *result, void *a2)
{
  id *result = *a2;
  return result;
}

uint64_t sub_1000D1920(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000D1930(uint64_t a1, void *a2)
{
  return [a2 setAllowsDocumentCreation:*(unsigned __int8 *)(a1 + 32)];
}

uint64_t sub_1000D193C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100014C04(*(void **)(v1 + 16), a1);
}

unsigned char *storeEnumTagSinglePayload for DOCConcreteLocationSwiftEncodable.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        id *result = a2;
        break;
      case 2:
        *(_WORD *)__n128 result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        id *result = 0;
        break;
      case 2:
        *(_WORD *)__n128 result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)__n128 result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1000D19E0()
{
  return 1635017060;
}

uint64_t sub_1000D19F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004FBCB0);
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionViewController.UpdatedLayoutInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for DOCIdentityHashableLocation()
{
  return &type metadata for DOCIdentityHashableLocation;
}

ValueMetadata *type metadata accessor for DOCItemCollectionSizeClass()
{
  return &type metadata for DOCItemCollectionSizeClass;
}

id sub_1000D1A7C()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC5Files24DOCSidebarViewController_configuration);
}

uint64_t storeEnumTagSinglePayload for DOCBrowserContainerState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 4;
    }
  }
  return result;
}

uint64_t type metadata accessor for DOCHierarchyController(uint64_t a1)
{
  return sub_10009E984(a1, (uint64_t *)&unk_10070B1B0);
}

ValueMetadata *type metadata accessor for DOCHierarchyController.ResolvedLocationInfo()
{
  return &type metadata for DOCHierarchyController.ResolvedLocationInfo;
}

unsigned char *_s12BrowsedStateV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    id *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          id *result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t _s12BrowsedStateV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unint64_t sub_1000D1C70()
{
  unint64_t result = 0xD000000000000014;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 3:
      unint64_t result = 0x6F4C726F68636E61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t DOCAppearStateTracker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t storeEnumTagSinglePayload for DOCCollectionSection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1000D1D68(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t type metadata accessor for RestorableSettings(uint64_t a1)
{
  return sub_10009E984(a1, qword_10070AF48);
}

uint64_t sub_1000D1DE8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100025900(1, a1);
}

ValueMetadata *type metadata accessor for DOCSidebarItem()
{
  return &type metadata for DOCSidebarItem;
}

ValueMetadata *type metadata accessor for DOCSourceType()
{
  return &type metadata for DOCSourceType;
}

uint64_t storeEnumTagSinglePayload for DOCGridLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 224) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 224) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCGridLayout()
{
  return &type metadata for DOCGridLayout;
}

id *sub_1000D1E98@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CE91C(a1, *(void **)(v2 + 16), a2);
}

void **sub_1000D1EA4(uint64_t *a1)
{
  return sub_100019190(a1, *(void ***)(v1 + 16), *(_OWORD **)(v1 + 24));
}

void **sub_1000D1EAC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1000CAFCC(a1, *(void ***)(v2 + 16), a2);
}

uint64_t sub_1000D1EC0(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));

  return _swift_deallocObject(v1, 32, 7);
}

const char *sub_1000D1F08()
{
  return "itemsOrigin";
}

const char *sub_1000D1F14()
{
  return "isHidden";
}

const char *sub_1000D1F20()
{
  return "isGathering";
}

const char *sub_1000D1F2C()
{
  return "isEjectable";
}

const char *sub_1000D1F38()
{
  return "forceDisplayFilenameExtensions";
}

const char *sub_1000D1F44()
{
  return "currentLocationTitle";
}

const char *sub_1000D1F50()
{
  return "DOCSourceOrderKey";
}

uint64_t sub_1000D21B0()
{
  return swift_getGenericMetadata();
}

id sub_1000D21E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)DOCAutoBarHidingTabBarController;
  return [super _setSelectedViewController:v1];
}

void sub_1000D221C(id a1)
{
  uint64_t v1 = +[NSMapTable strongToWeakObjectsMapTable];
  uint64_t v2 = (void *)qword_10071D3B8;
  qword_10071D3B8 = v1;
}

uint64_t sub_1000D225C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_100705D60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *sub_1000D22C4(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v4 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        self;
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      for (uint64_t j = 0; ; ++j)
      {
        uint64_t v6 = j + 1;
        if (__OFADD__(j, 1)) {
          break;
        }
        self;
        uint64_t v7 = swift_dynamicCastObjCClass();
        if (!v7)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v1 = v7;
        swift_unknownObjectRetain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v6 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1000D24AC(unint64_t a1)
{
  return sub_1000D22C4(a1);
}

uint64_t sub_1000D24B8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = sub_1001BBE9C;
  }
  else
  {
    (*(void (**)(void))(v2 + 144))();
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = sub_100007D94;
  }
  return _swift_task_switch(v5, v3, v4);
}

void *sub_1000D25E0(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = 0;
        do
        {
          uint64_t v5 = v4 + 1;
          Swift::UInt64 v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
          id v6 = v10;
          sub_1000CBE70(&qword_10071A170);
          swift_dynamicCast();
          swift_unknownObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v4 = v5;
        }
        while (v2 != v5);
      }
      else
      {
        uint64_t v7 = (void **)(a1 + 32);
        sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
        do
        {
          int v8 = *v7++;
          id v9 = v8;
          sub_1000CBE70(&qword_10071A170);
          swift_dynamicCast();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v2;
        }
        while (v2);
      }
      return _swiftEmptyArrayStorage;
    }
  }
  return result;
}

uint64_t sub_1000D27F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000D5A8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000D2810(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000E648(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000D2830(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B9F88(a1, a2, a3, (void *)*v3, &qword_100708F00, (uint64_t (*)(void))&type metadata accessor for SiriVocabulary.DynamicTerm);
  *uint64_t v3 = result;
  return result;
}

void *sub_1000D286C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100009AB8(a1, a2, a3, a4, &qword_100708EE8);
}

Swift::Int sub_1000D2878(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000F1194();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_1000F3F2C();
      goto LABEL_12;
    }
    sub_1000F6130();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  sub_1000A6B78((void *)(v5 + 8), *(void *)(v5 + 32));
  dispatch thunk of Hashable.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    do
    {
      sub_1000CE280(*(void *)(v8 + 48) + 56 * a2, (uint64_t)v22);
      Hasher.init(_seed:)();
      sub_1000A6B78(v23, v23[3]);
      dispatch thunk of Hashable.hash(into:)();
      Swift::Int v11 = Hasher._finalize()();
      Hasher.init(_seed:)();
      sub_1000A6B78((void *)(v5 + 8), *(void *)(v5 + 32));
      dispatch thunk of Hashable.hash(into:)();
      Swift::Int v12 = Hasher._finalize()();
      uint64_t result = sub_1000CE1FC((uint64_t)v22);
      if (v11 == v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v21;
  *(void *)(*v21 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 56 * a2;
  long long v15 = *(_OWORD *)v5;
  long long v16 = *(_OWORD *)(v5 + 16);
  long long v17 = *(_OWORD *)(v5 + 32);
  *(void *)(v14 + 48) = *(void *)(v5 + 48);
  *(_OWORD *)(v14 + 16) = v16;
  *(_OWORD *)(v14 + 32) = v17;
  *(_OWORD *)uint64_t v14 = v15;
  uint64_t v18 = *(void *)(v13 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v13 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_1000D2AA4()
{
  unint64_t result = qword_1007155A8;
  if (!qword_1007155A8)
  {
    sub_100074618(&qword_1007155A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007155A8);
  }
  return result;
}

uint64_t sub_1000D2B00(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000CBE70((uint64_t *)&unk_1007076D0);
    uint64_t v5 = swift_allocError();
    *unint64_t v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = (void *)v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  id v8 = a2;

  return swift_continuation_throwingResume();
}

uint64_t sub_1000D2BC0()
{
  return sub_1000BAA5C(&qword_1007058F0, type metadata accessor for DOCTab);
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void sub_1000D2C1C()
{
  sub_10000C2F4(*(void *)(v0 + 16));
}

uint64_t sub_1000D2C24()
{
  if (![v0 isEditing]) {
    goto LABEL_7;
  }
  uint64_t v1 = (char *)[v0 effectiveBrowserViewController];
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (id *)&v1[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess();
  id v4 = *v3;
  uint64_t v5 = *v3;

  if (!v4) {
    goto LABEL_7;
  }
  if (![v5 isEditing])
  {

LABEL_7:
    char v7 = 0;
    return v7 & 1;
  }
  char v6 = (*(uint64_t (**)(void))((swift_isaMask & *v5) + 0x168))();

  char v7 = v6 ^ 1;
  return v7 & 1;
}

id sub_1000D2DE4()
{
  id result = sub_100020388();
  qword_100736E68 = (uint64_t)result;
  byte_100736E70 = v1 & 1;
  return result;
}

uint64_t sub_1000D2E10()
{
  return sub_1000BAA5C(&qword_100706140, type metadata accessor for Key);
}

NSString sub_1000D2EAC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100736F00 = (uint64_t)result;
  return result;
}

NSString sub_1000D2EE4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100736F30 = (uint64_t)result;
  return result;
}

NSString sub_1000D2F1C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100736F08 = (uint64_t)result;
  return result;
}

NSString sub_1000D2F54()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100736F18 = (uint64_t)result;
  return result;
}

NSString sub_1000D2F8C()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.DOCItemCollectionViewDidLayoutSubviews = (uint64_t)result;
  return result;
}

NSString sub_1000D2FC4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100736F28 = (uint64_t)result;
  return result;
}

void sub_1000D300C()
{
  static UITraitCollection.DOCTabBarBlurAvoidanceTrait.defaultValue = 0;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for FPItemsOrigin(uint64_t a1)
{
}

uint64_t sub_1000D3048(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  NSString result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 < 0) {
    uint64_t v6 = v3;
  }
  if (v3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    NSString result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    NSString result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    for (Swift::Int i = 0; i != v7; ++i)
    {
      sub_1000CBE70((uint64_t *)&unk_100706730);
      _ArrayBuffer._typeCheckSlowPath(_:)(i);
    }
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v11;
}

uint64_t sub_1000D31E4(uint64_t a1)
{
  return sub_10000BFE4(a1, sub_10029D474, (unint64_t *)&unk_10070BDD0);
}

id sub_1000D3210()
{
  char v1 = (void *)(*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();

  return v1;
}

uint64_t sub_1000D3250(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000D325C()
{
  unint64_t result = qword_10070B660;
  if (!qword_10070B660)
  {
    sub_100074618(&qword_10070AEB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10070B660);
  }
  return result;
}

uint64_t sub_1000D32B8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100074618(&qword_100709568);
    sub_1000D47D8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1000D3338(unint64_t a1, uint64_t a2)
{
  return sub_10007CE38(a1, a2, (uint64_t)&qword_10070A1A0);
}

uint64_t sub_1000D334C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  unint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = a2 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000CE280(v5, (uint64_t)v9);
    Hasher.init(_seed:)();
    sub_1000A6B78(v10, v10[3]);
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    Hasher.init(_seed:)();
    sub_1000A6B78(v4, *(void *)(a1 + 32));
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v7 = Hasher._finalize()();
    sub_1000CE1FC((uint64_t)v9);
    if (v6 == v7) {
      break;
    }
    v5 += 56;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1000D347C(uint64_t result, void *a2, uint64_t a3, unint64_t a4)
{
  Swift::Int v7 = a2;
  uint64_t v8 = (void *)result;
  if (a4 >> 62) {
    goto LABEL_31;
  }
  uint64_t v9 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!a2)
  {
LABEL_32:
    unint64_t v10 = v9;
    uint64_t v9 = 0;
LABEL_33:
    *uint64_t v8 = a4;
    v8[1] = v10;
    return v9;
  }
  while (1)
  {
    if (!a3)
    {
      unint64_t v10 = v9;
      uint64_t v9 = 0;
      goto LABEL_33;
    }
    if (a3 < 0)
    {
      __break(1u);
LABEL_35:
      unint64_t v10 = 0;
      goto LABEL_33;
    }
    if (!v9) {
      goto LABEL_35;
    }
    unint64_t v10 = v9 - 1;
    if (__OFSUB__(v9, 1))
    {
      __break(1u);
LABEL_37:
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_11;
    }
    unint64_t v4 = a4 & 0xC000000000000001;
    if ((a4 & 0xC000000000000001) != 0) {
      goto LABEL_37;
    }
    if ((v10 & 0x8000000000000000) != 0) {
      break;
    }
    if (v10 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_39;
    }
    id v11 = *(id *)(a4 + 8 * v10 + 32);
LABEL_11:
    *Swift::Int v7 = v11;
    uint64_t v12 = a3 - 1;
    if (a3 == 1)
    {
      uint64_t v9 = 1;
      goto LABEL_33;
    }
    long long v16 = v8;
    uint64_t v13 = 0;
    uint64_t v8 = (void *)(a4 + 8 * v9 + 16);
    ++v7;
    while (1)
    {
      if (!(v12 + v13))
      {
        __break(1u);
LABEL_27:
        unint64_t v10 = 0;
LABEL_25:
        uint64_t v8 = v16;
        goto LABEL_33;
      }
      if (v9 + v13 == 1) {
        goto LABEL_27;
      }
      if (0x8000000000000001 - v9 == v13) {
        break;
      }
      unint64_t v15 = v9 + v13 - 2;
      if (v4)
      {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_29;
        }
        if (v15 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_30;
        }
        id v14 = (id)v8[v13];
      }
      *v7++ = v14;
      --v13;
      if (!(v12 + v13))
      {
        unint64_t v10 = v9 + v13 - 1;
        uint64_t v9 = a3;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000D3650(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_1000BBA9C(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v1;
  uint64_t *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100359450();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 24 * v5);
  sub_100354914(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_1000D370C(uint64_t a1)
{
  uint64_t v2 = sub_1000CBE70(&qword_100717868);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000CBE70(&qword_100717870);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000CBC00(v12, (uint64_t)v5, &qword_100717868);
    id v14 = *(void **)v5;
    char v15 = v5[8];
    unint64_t result = sub_10017BBE4(*(void **)v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = v7[6] + 16 * result;
    *(void *)uint64_t v19 = v14;
    *(unsigned char *)(v19 + 8) = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for RestorableSettings(0);
    unint64_t result = sub_1004A0DA8(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, type metadata accessor for RestorableSettings);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000D3910(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000CBE70((uint64_t *)&unk_100711C60);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000CBC00(v4, (uint64_t)v18, &qword_1007177A8);
    unint64_t result = sub_10017C394((uint64_t)v18);
    if (v6) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v7 = v2[6] + 56 * result;
    long long v8 = v18[0];
    long long v9 = v18[1];
    long long v10 = v18[2];
    *(void *)(v7 + 48) = v19;
    *(_OWORD *)(v7 + 16) = v9;
    *(_OWORD *)(v7 + 32) = v10;
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v11 = v2[7] + 56 * result;
    long long v12 = v20;
    long long v13 = v21;
    long long v14 = v22;
    *(void *)(v11 + 48) = v23;
    *(_OWORD *)(v11 + 16) = v13;
    *(_OWORD *)(v11 + 32) = v14;
    *(_OWORD *)uint64_t v11 = v12;
    uint64_t v15 = v2[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v2[2] = v17;
    v4 += 112;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000D3A64(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000CBE70(&qword_100711E78);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 64);
  while (1)
  {
    unint64_t v5 = (void *)*(v4 - 4);
    uint64_t v6 = *(v4 - 3);
    uint64_t v7 = *(v4 - 2);
    char v8 = *((unsigned char *)v4 - 8);
    uint64_t v9 = *v4;
    sub_10010ED28(v5, v6, v7, v8);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10017C290((unint64_t)v5, v6, v7, v8);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = v2[6] + 32 * result;
    *(void *)uint64_t v12 = v5;
    *(void *)(v12 + 8) = v6;
    *(void *)(v12 + 16) = v7;
    *(unsigned char *)(v12 + 24) = v8;
    *(void *)(v2[7] + 8 * result) = v9;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 5;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for QueryCollectionDelayedLoadingSimulator()
{
  return self;
}

uint64_t sub_1000D3C38()
{
  type metadata accessor for QueryCollectionDelayedLoadingSimulator();
  swift_allocObject();
  uint64_t result = sub_100019AB0();
  qword_10071B720 = result;
  return result;
}

uint64_t sub_1000D3C78(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  a4(a1 + 32, a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t initializeWithCopy for DOCItemCollectionCoreFooterAwareLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D3C78(a1, a2, a3, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
}

uint64_t sub_1000D3CE8(uint64_t a1, uint64_t a2)
{
  return a2;
}

double sub_1000D3D44()
{
  if (*(unsigned char *)v0 != 1) {
    return 0.0;
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0.0;
  }
  uint64_t v2 = Strong;
  id v3 = [Strong collectionView];
  if (!v3)
  {
LABEL_24:

    return 0.0;
  }
  uint64_t v4 = v3;
  type metadata accessor for DOCItemCollectionView();
  unint64_t v5 = (void *)swift_dynamicCastClass();
  if (!v5)
  {

    goto LABEL_24;
  }
  uint64_t v6 = v5;
  [v5 bounds];
  double v8 = v7;
  double v10 = v9;
  [v6 _effectiveContentInset];
  double v12 = v11;
  [v6 safeAreaInsets];
  double v14 = v12 + v13;
  uint64_t v15 = (void *)swift_unknownObjectWeakLoadStrong();
  double v16 = 0.0;
  double v17 = 0.0;
  double v18 = 0.0;
  if (v15)
  {
    uint64_t v19 = v15;
    v54.receiver = v15;
    v54.super_class = (Class)type metadata accessor for DOCCollectionViewCompositionalLayout();
    [super collectionViewContentSize];
    double v21 = v20;
    double v23 = v22;

    if (*(double *)(v0 + 16) > v21) {
      double v17 = *(double *)(v0 + 16);
    }
    else {
      double v17 = v21;
    }
    if (*(double *)(v0 + 24) > v23) {
      double v18 = *(double *)(v0 + 24);
    }
    else {
      double v18 = v23;
    }
  }
  double v24 = v10 - v14;
  double v25 = *(double *)(v0 + 8);
  double v26 = v18 - v25;
  long long v27 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v27)
  {
    double v16 = *(double *)&v27[OBJC_IVAR____TtC5Files36DOCCollectionViewCompositionalLayout_footerViewContentInsets];
  }
  v57.origin.y = v26 + v16;
  v57.size.height = v25 - v16;
  double v28 = 0.0;
  v57.origin.x = 0.0;
  v57.size.width = v17;
  double MinY = CGRectGetMinY(v57);
  v58.origin.x = 0.0;
  v58.origin.y = 0.0;
  v58.size.width = v8;
  v58.size.height = v24;
  if (MinY >= CGRectGetMaxY(v58)) {
    goto LABEL_38;
  }
  uint64_t v30 = swift_unknownObjectWeakLoadStrong();
  double v31 = 0.0;
  if (v30)
  {
    uint64_t v32 = (void *)v30;
    uint64_t v33 = (objc_class *)type metadata accessor for DOCCollectionViewCompositionalLayout();
    v55.receiver = v32;
    v55.super_class = v33;
    [super collectionViewContentSize];
    double v28 = v34;
    double v36 = v35;

    if (*(double *)(v0 + 16) > v28) {
      double v28 = *(double *)(v0 + 16);
    }
    if (*(double *)(v0 + 24) > v36) {
      double v31 = *(double *)(v0 + 24);
    }
    else {
      double v31 = v36;
    }
  }
  double v37 = v31 - v25;
  char v38 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v38)
  {
    double v39 = *(double *)&v38[OBJC_IVAR____TtC5Files36DOCCollectionViewCompositionalLayout_footerViewContentInsets];
  }
  else
  {
    double v39 = 0.0;
  }
  v59.origin.y = v37 + v39;
  v59.size.height = v25 - v39;
  double v41 = 0.0;
  v59.origin.x = 0.0;
  v59.size.width = v28;
  double MaxY = CGRectGetMaxY(v59);
  v60.origin.x = 0.0;
  v60.origin.y = 0.0;
  v60.size.width = v8;
  v60.size.height = v24;
  if (CGRectGetMaxY(v60) >= MaxY)
  {
LABEL_38:
  }
  else
  {
    uint64_t v43 = swift_unknownObjectWeakLoadStrong();
    double v44 = 0.0;
    if (v43)
    {
      uint64_t v45 = (void *)v43;
      Swift::UInt64 v46 = (objc_class *)type metadata accessor for DOCCollectionViewCompositionalLayout();
      v56.receiver = v45;
      v56.super_class = v46;
      [super collectionViewContentSize];
      double v48 = v47;
      double v50 = v49;

      if (*(double *)(v0 + 16) > v48) {
        double v41 = *(double *)(v0 + 16);
      }
      else {
        double v41 = v48;
      }
      if (*(double *)(v0 + 24) > v50) {
        double v44 = *(double *)(v0 + 24);
      }
      else {
        double v44 = v50;
      }
    }
    double v51 = v44 - v25;
    long long v52 = (char *)swift_unknownObjectWeakLoadStrong();
    if (v52)
    {
      double v53 = *(double *)&v52[OBJC_IVAR____TtC5Files36DOCCollectionViewCompositionalLayout_footerViewContentInsets];
    }
    else
    {
      double v53 = 0.0;
    }
    v61.origin.y = v51 + v53;
    v61.size.height = v25 - v53;
    v61.origin.x = 0.0;
    v61.size.width = v41;
    CGRectGetHeight(v61);
  }
  return v8;
}

uint64_t sub_1000D404C(unint64_t a1)
{
  if (!a1) {
    return a1;
  }
  id v3 = v1;
  if (*(unsigned char *)v1 != 1)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  unint64_t v32 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result) {
      goto LABEL_5;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    unint64_t v15 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_23;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  if (!v4) {
    goto LABEL_22;
  }
LABEL_5:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v6 = 0;
  unint64_t v30 = 0x80000001005DA300;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(a1 + 8 * v6 + 32);
    }
    double v8 = v7;
    id v9 = [v7 representedElementKind:v30];
    if (!v9)
    {
LABEL_7:

      goto LABEL_8;
    }
    double v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (v11 == 0xD000000000000024 && v13 == v30)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0) {
        goto LABEL_7;
      }
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_8:
    ++v6;
  }
  while (v4 != v6);
  swift_bridgeObjectRelease();
  unint64_t v15 = v32;
  if ((v32 & 0x8000000000000000) == 0)
  {
LABEL_23:
    if ((v15 & 0x4000000000000000) != 0) {
      goto LABEL_39;
    }
    uint64_t v16 = *(void *)(v15 + 16);
    uint64_t result = swift_retain();
    if (v16) {
      goto LABEL_25;
    }
LABEL_40:
    swift_release_n();
    return a1;
  }
LABEL_39:
  swift_retain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v16 = result;
  if (!result) {
    goto LABEL_40;
  }
LABEL_25:
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    double v18 = v3[1];
    do
    {
      if ((v15 & 0xC000000000000001) != 0) {
        id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v27 = *(id *)(v15 + 8 * v17 + 32);
      }
      double v28 = v27;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v19 = (void *)Strong;
        double v20 = (objc_class *)type metadata accessor for DOCCollectionViewCompositionalLayout();
        v31.receiver = v19;
        v31.super_class = v20;
        [super collectionViewContentSize];
        double v22 = v21;
        double v24 = v23;

        if (v3[2] > v22) {
          double v25 = v3[2];
        }
        else {
          double v25 = v22;
        }
        if (v3[3] > v24) {
          double v26 = v3[3];
        }
        else {
          double v26 = v24;
        }
      }
      else
      {
        double v25 = 0.0;
        double v26 = 0.0;
      }
      ++v17;
      [v28 setFrame:0.0, v26 - v18, v25, v18];
    }
    while (v16 != v17);
    goto LABEL_40;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DOCInterfaceSystemAppearance_Default()
{
  return self;
}

uint64_t type metadata accessor for DOCCollectionViewCompositionalLayout()
{
  return self;
}

uint64_t type metadata accessor for DOCTabBarVariableBlurBackgroundView()
{
  return self;
}

uint64_t variable initialization expression of DOCTabBarVariableBlurBackgroundView.gradientView()
{
  return 0;
}

void sub_1000D4410()
{
  sub_100005A90();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for DOCSharedSplitBrowserViewController()
{
  uint64_t result = qword_10070ECF0;
  if (!qword_10070ECF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D4520()
{
  return type metadata accessor for DOCSharedSplitBrowserViewController();
}

uint64_t type metadata accessor for DOCSidebarPaneNavigationController()
{
  return self;
}

void sub_1000D458C()
{
  sub_1000D8BE4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for DOCItemCollectionViewSectionHeader()
{
  uint64_t result = qword_1007191C8;
  if (!qword_1007191C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D471C()
{
  return swift_updateClassMetadata2();
}

uint64_t type metadata accessor for DOCItemCollectionLargeTextListCell(uint64_t a1)
{
  return sub_10009E984(a1, (uint64_t *)&unk_10070E210);
}

uint64_t sub_1000D4774(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000D47D8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DOCConcreteLocationSwiftEncodable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCConcreteLocationSwiftEncodable.CodingKeys()
{
  return &type metadata for DOCConcreteLocationSwiftEncodable.CodingKeys;
}

unint64_t sub_1000D4834()
{
  unint64_t result = qword_1007095C8;
  if (!qword_1007095C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007095C8);
  }
  return result;
}

unint64_t sub_1000D4888()
{
  unint64_t result = qword_1007095D0;
  if (!qword_1007095D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007095D0);
  }
  return result;
}

uint64_t sub_1000D48DC(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_isUserInteractionEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

void sub_1000D4928()
{
  sub_1000D7EA8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000D49C4()
{
  uint64_t result = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000D4A58(uint64_t a1)
{
  return sub_1000224A0(a1, *(void (**)(unsigned char *))(v1 + 16));
}

uint64_t sub_1000D4A60()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

ValueMetadata *type metadata accessor for DOCItemCollectionCellContentPool.CellContentPromise()
{
  return &type metadata for DOCItemCollectionCellContentPool.CellContentPromise;
}

uint64_t sub_1000D4AA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D4AF0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1000D1744;
  return sub_10001955C(a1, v4, v5, v6);
}

uint64_t sub_1000D4BA4(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 264) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  uint64_t v4 = *(void *)(v2 + 232);
  return _swift_task_switch(sub_10002D270, v4, v3);
}

uint64_t sub_1000D4CCC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *double v8 = v2;
  v8[1] = sub_1000D1744;
  return sub_100010664(a1, v4, v5, v6, v7);
}

uint64_t sub_1000D4D90()
{
  return sub_10003C5D4(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1000D4D98()
{
}

uint64_t sub_1000D4DA0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000D1744;
  return sub_10000CEDC(a1, v4, v5, v6, v7, v8);
}

void sub_1000D4E68(int a1, uint64_t a2)
{
  sub_10001DD08(a1, a2, v2, 0xD000000000000021, 0x80000001005F8050);
}

void sub_1000D4E9C(id a1, char a2)
{
  if (a2 != -1) {
}
  }

ValueMetadata *type metadata accessor for DOCItemCollectionViewController.RestorableSettingsCacheKey()
{
  return &type metadata for DOCItemCollectionViewController.RestorableSettingsCacheKey;
}

void DOCItemCollectionViewController.isUserInteractionEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_isUserInteractionEnabled);
  swift_beginAccess();
  *uint64_t v3 = a1;
  if ((a1 & 1) == 0)
  {
    id v4 = [self sharedManager];
    [v4 unregisterKeyboardFocusable:v1];
  }
}

void *sub_1000D4F54()
{
  uint64_t result = (void *)sub_1000D370C((uint64_t)_swiftEmptyArrayStorage);
  off_10070A180 = result;
  return result;
}

void sub_1000D4F7C(void *a1)
{
  if (sub_10008BD6C())
  {
    uint64_t v3 = v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController;
    swift_beginAccess();
    unint64_t v4 = *(void *)(v3 + 8);
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v16 < 1) {
        return;
      }
    }
    else if (*(uint64_t *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1)
    {
      return;
    }
    uint64_t v5 = self;
    id v6 = [v5 fractionalWidthDimension:1.0];
    id v7 = [v5 estimatedDimension:44.0];
    id v8 = [self sizeWithWidthDimension:v6 heightDimension:v7];

    uint64_t v9 = qword_100704F68;
    id v10 = v8;
    if (v9 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v12 = [self boundarySupplementaryItemWithLayoutSize:v10 elementKind:v11 alignment:1];

    [v12 setPinToVisibleBounds:1];
    sub_1000CBE70((uint64_t *)&unk_1007084E0);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1005A04F0;
    *(void *)(v13 + 32) = v12;
    uint64_t v17 = v13;
    specialized Array._endMutation()();
    sub_10009E6C4(0, (unint64_t *)&unk_10070AE00);
    id v14 = v12;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [a1 setBoundarySupplementaryItems:isa, v17];
  }
}

uint64_t sub_1000D52C8()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___visibleItemsCorpus;
  if (*(void *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___visibleItemsCorpus))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___visibleItemsCorpus);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for SiriVocabulary.Corpus();
    swift_allocObject();
    uint64_t v2 = SiriVocabulary.Corpus.init(contents:capacity:)();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

ValueMetadata *type metadata accessor for DOCItemCollectionViewController.UpdatedLayoutInfo()
{
  return &type metadata for DOCItemCollectionViewController.UpdatedLayoutInfo;
}

uint64_t sub_1000D54A8()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100736F40 = result;
  *(void *)algn_100736F48 = v1;
  return result;
}

uint64_t sub_1000D54D8()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = __chkstk_darwin(v1);
  uint64_t v5 = &v30[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_performingBatchUpdates;
  if (*(void *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_performingBatchUpdates])
  {
    id v7 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.default.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = *(void *)&v0[v6];
    *(_OWORD *)(v8 + 16) = xmmword_1005A0030;
    *(void *)(v8 + 56) = &type metadata for Int;
    *(void *)(v8 + 64) = &protocol witness table for Int;
    *(void *)(v8 + 32) = v9;
    os_log(_:dso:log:type:_:)();

    uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
    v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_needsCollectionReload] = 1;
    return result;
  }
  if (v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_appLaunchOptimizationsActive]) {
    goto LABEL_4;
  }
  id v10 = (void *)static DOCLog.UI.getter();
  static os_log_type_t.default.getter();
  sub_1000CBE70((uint64_t *)&unk_100708800);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1005A0030;
  *(void *)(v11 + 56) = type metadata accessor for DOCItemCollectionViewController(0);
  *(void *)(v11 + 64) = sub_100078438(&qword_10070A288, (void (*)(uint64_t))type metadata accessor for DOCItemCollectionViewController);
  *(void *)(v11 + 32) = v0;
  id v12 = v0;
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  static os_signpost_type_t.begin.getter();
  uint64_t updated = (void *)updatePointsOfInterestHandler.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();

  id v14 = *(uint64_t (**)(unsigned char *, uint64_t))(v2 + 8);
  uint64_t result = v14(v5, v1);
  if (*(void *)&v12[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection])
  {
    unint64_t v15 = sub_10007CC5C(result);
    DOCItemCollectionViewController.items.setter(v15);
    static os_signpost_type_t.event.getter();
    uint64_t v16 = (void *)updatePointsOfInterestHandler.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    v14(v5, v1);
    v12[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_needsCollectionReload] = 0;
    v12[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_updateStackViewMetrics] = 1;
    sub_100012D80();
    static os_signpost_type_t.event.getter();
    uint64_t v17 = (void *)updatePointsOfInterestHandler.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    v14(v5, v1);
    sub_10013F3CC();
    static os_signpost_type_t.event.getter();
    double v18 = (void *)updatePointsOfInterestHandler.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    v14(v5, v1);
    swift_beginAccess();
    uint64_t v19 = swift_bridgeObjectRetain();
    sub_10007A41C(v19, 2);
    swift_bridgeObjectRelease();
    static os_signpost_type_t.event.getter();
    double v20 = (void *)updatePointsOfInterestHandler.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    v14(v5, v1);
    unint64_t v21 = sub_100493F88((uint64_t)_swiftEmptyArrayStorage);
    double v22 = (unint64_t *)&v12[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_urlToItemCache];
    swift_beginAccess();
    *double v22 = v21;
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(*(void *)&v12[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration]
                  + OBJC_IVAR____TtC5Files21DOCFileProviderSource_type
                  + 8) == 1)
    {
      v12[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation] = 0;
      id v23 = [v12 viewIfLoaded];
      id v24 = [v23 window];

      if (v24) {
        sub_1000A6988();
      }
    }
    static os_signpost_type_t.event.getter();
    double v25 = (void *)updatePointsOfInterestHandler.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    v14(v5, v1);
    DOCItemCollectionViewController.updateOverlay(animated:)(0);
    static os_signpost_type_t.event.getter();
    double v26 = (void *)updatePointsOfInterestHandler.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    v14(v5, v1);
    id v27 = *(void **)&v12[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__footerView];
    if (v27)
    {
      id v28 = v27;
      sub_1001AF2D4();
    }
    static os_signpost_type_t.end.getter();
    long long v29 = (void *)updatePointsOfInterestHandler.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)();

    return v14(v5, v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000D5C74(uint64_t a1)
{
  sub_10000D18C();
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
    if (v4)
    {
      uint64_t v5 = v2;
      uint64_t v6 = v3;
      uint64_t v7 = v4 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
      if (*(unsigned char *)(v7 + 16))
      {
        uint64_t v8 = *(void *)(*(void *)v7 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
        swift_unknownObjectRetain();
      }
      else
      {
        uint64_t v8 = *(void *)(v7 + 8);
        swift_unknownObjectRetain();
        if (!v8)
        {
          uint64_t v10 = 0;
LABEL_13:
          id v11 = objc_allocWithZone((Class)type metadata accessor for DOCPromptHeaderView());
          sub_100165924(v5, v6, v8, v10);
          return;
        }
      }
      unsigned int v9 = [(id)v8 isShared];
      swift_unknownObjectRelease();
      if (v9) {
        uint64_t v8 = 0x322E6E6F73726570;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v9) {
        uint64_t v10 = 0xED00006C6C69662ELL;
      }
      else {
        uint64_t v10 = 0;
      }
      goto LABEL_13;
    }
    __break(1u);
  }
}

void *sub_1000D5D88()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___promptView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___promptView);
  uint64_t v3 = v2;
  if (v2 == (void *)1)
  {
    sub_1000D5C74(v0);
    uint64_t v3 = v4;
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v6 = v4;
    sub_1000D8158(v5);
  }
  sub_1000D8148(v2);
  return v3;
}

void sub_1000D5E40()
{
}

uint64_t sub_1000D5E48(unint64_t a1)
{
  return sub_10000C4F0(a1);
}

void sub_1000D5E50()
{
  sub_100006B58();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for DOCFocusableCollectionViewState()
{
  uint64_t result = qword_10070EFB0;
  if (!qword_10070EFB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000D5F38()
{
  sub_100008448();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000D6000(unint64_t a1)
{
  return sub_10000B304(a1, v1);
}

uint64_t type metadata accessor for DOCSourceVisibilityController()
{
  return self;
}

uint64_t type metadata accessor for DOCSourceVisibilityController.VisibilityObserver()
{
  return self;
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.ListItemTraits()
{
  return &type metadata for DOCItemCollectionLayoutTraits.ListItemTraits;
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.GridItemTraits()
{
  return &type metadata for DOCItemCollectionLayoutTraits.GridItemTraits;
}

void sub_1000D6070()
{
  sub_10000A2F8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for DOCBrowserLayoutConfiguration()
{
  return &type metadata for DOCBrowserLayoutConfiguration;
}

unint64_t sub_1000D612C()
{
  unint64_t result = qword_1007165C8;
  if (!qword_1007165C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007165C8);
  }
  return result;
}

uint64_t sub_1000D6180()
{
  uint64_t v0 = qword_1007165A0;
  swift_bridgeObjectRetain();
  return v0;
}

void sub_1000D61C0(uint64_t a1@<X8>)
{
  char v1 = byte_1007165B8;
  *(void *)a1 = qword_1007165B0;
  *(unsigned char *)(a1 + 8) = v1;
}

ValueMetadata *type metadata accessor for DOCBrowserLayoutConfiguration.SizeSetting()
{
  return &type metadata for DOCBrowserLayoutConfiguration.SizeSetting;
}

void sub_1000D62C4()
{
  sub_100006784(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1000D62CC()
{
  sub_10006948C(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_1000D62D8()
{
}

void sub_1000D62FC()
{
  sub_1000D8BE4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000D6480()
{
  char v1 = *(void **)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_observedProgress);
  if (v1 && *(unsigned char *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isObservingProgress) == 1)
  {
    *(unsigned char *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isObservingProgress) = 0;
    id v2 = v1;
    uint64_t v3 = (void *)static DOCLog.UI.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1005A0030;
    *(void *)(v4 + 56) = sub_10009E6C4(0, &qword_10070EB70);
    *(void *)(v4 + 64) = sub_1001141E0();
    *(void *)(v4 + 32) = v2;
    id v5 = v2;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 removeObserver:v0 forKeyPath:v6 context:&unk_10071CC00];

    id v7 = String._bridgeToObjectiveC()();
    [v5 removeObserver:v0 forKeyPath:v7 context:&unk_10071CC00];
  }
}

void sub_1000D6634()
{
  qword_1007377D0 = 16303;
}

unint64_t sub_1000D66E8()
{
  unint64_t result = qword_10071A238;
  if (!qword_10071A238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071A238);
  }
  return result;
}

unint64_t sub_1000D673C()
{
  unint64_t result = qword_100708200;
  if (!qword_100708200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100708200);
  }
  return result;
}

unint64_t sub_1000D6794()
{
  unint64_t result = qword_10071A250;
  if (!qword_10071A250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071A250);
  }
  return result;
}

NSString sub_1000D6830()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1007376B0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000D6868()
{
  return sub_10002E2A8(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10]);
}

void *sub_1000D68A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CC0F0(a1, *(void *)(v2 + 16), *(void *)(v2 + 64), a2);
}

unint64_t sub_1000D68B8()
{
  unint64_t result = qword_1007137B0;
  if (!qword_1007137B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007137B0);
  }
  return result;
}

unint64_t sub_1000D690C()
{
  unint64_t result = qword_10071BC88;
  if (!qword_10071BC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071BC88);
  }
  return result;
}

unint64_t sub_1000D6960()
{
  unint64_t result = qword_100712F30;
  if (!qword_100712F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100712F30);
  }
  return result;
}

unint64_t sub_1000D69B4()
{
  unint64_t result = qword_10071BC90;
  if (!qword_10071BC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071BC90);
  }
  return result;
}

unint64_t sub_1000D6A10()
{
  unint64_t result = qword_10071BCB0;
  if (!qword_10071BCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071BCB0);
  }
  return result;
}

unint64_t sub_1000D6A64()
{
  unint64_t result = qword_10071BCB8;
  if (!qword_10071BCB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071BCB8);
  }
  return result;
}

uint64_t type metadata accessor for DOCNodeDiffableDataSource()
{
  return self;
}

void sub_1000D6AE4()
{
  sub_10000582C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for DOCItemCollectionListCell(uint64_t a1)
{
  return sub_10009E984(a1, (uint64_t *)&unk_10070E1D0);
}

void sub_1000D6C10()
{
}

void sub_1000D6C30()
{
}

void sub_1000D6C54()
{
  sub_100006B58();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for DOCSidebarViewController(uint64_t a1)
{
  return sub_10009E984(a1, qword_10070C8A8);
}

uint64_t sub_1000D6DD8()
{
  return type metadata accessor for DOCSidebarViewController(0);
}

void sub_1000D6E14()
{
  sub_10004C464(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000D6E1C(uint64_t a1)
{
  sub_100010D64(a1, v1);
}

void sub_1000D6E24()
{
}

uint64_t type metadata accessor for DOCSidebarViewController.LocationSelection()
{
  return self;
}

ValueMetadata *_s14OutlineSectionVMa()
{
  return &_s14OutlineSectionVN;
}

unint64_t sub_1000D6E64()
{
  unint64_t result = qword_10071BE48;
  if (!qword_10071BE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071BE48);
  }
  return result;
}

void sub_1000D6EB8()
{
}

ValueMetadata *_s11OutlineItemVMa()
{
  return &_s11OutlineItemVN;
}

unint64_t sub_1000D6ED4()
{
  unint64_t result = qword_10071BE50;
  if (!qword_10071BE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071BE50);
  }
  return result;
}

uint64_t type metadata accessor for DOCSidebarViewController.BBIStorage()
{
  return self;
}

uint64_t sub_1000D6F4C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DOCSidebarViewController.DOCSidebarItemChangePacer(uint64_t a1)
{
  return sub_10009E984(a1, qword_10070CAA0);
}

double sub_1000D6FB0(char a1, double a2)
{
  type metadata accessor for DOCSidebarViewController.DOCSidebarItemChangePacer(0);
  uint64_t v4 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  *(_WORD *)(v4 + 88) = 255;
  *(void *)(v4 + 96) = 0;
  *(double *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = a1;
  return result;
}

uint64_t type metadata accessor for DOCSharedDocumentsSource(uint64_t a1)
{
  return sub_10009E984(a1, (uint64_t *)&unk_100710B30);
}

uint64_t type metadata accessor for DOCNamedLocationResolver()
{
  return self;
}

ValueMetadata *type metadata accessor for DOCBrowserContainerState()
{
  return &type metadata for DOCBrowserContainerState;
}

void sub_1000D70D0()
{
  qword_100711028 = 0;
}

uint64_t sub_1000D70DC()
{
  return sub_100008B0C(*(void *)(v0 + 16), *(NSObject **)(v0 + 24), *(unsigned char **)(v0 + 32));
}

uint64_t sub_1000D70E8()
{
  return sub_100008E44(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void ***)(v0 + 32));
}

ValueMetadata *type metadata accessor for DOCThumbnailLoadingPool.DOCThumbnailPoolEntry()
{
  return &type metadata for DOCThumbnailLoadingPool.DOCThumbnailPoolEntry;
}

uint64_t type metadata accessor for DOCFileSystemCollection()
{
  uint64_t result = qword_100713708;
  if (!qword_100713708) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D7150()
{
  if (v0[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_domainState] == 2) {
    return 0;
  }
  id v1 = [v0 isGathering];
  if (v1) {
    return 0;
  }
  uint64_t v3 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_stateLock];
  uint64_t v4 = __chkstk_darwin(v1);
  __chkstk_darwin(v4);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  sub_1003BA354(&v6);
  os_unfair_lock_unlock(v3 + 4);
  uint64_t v2 = v6;
  swift_release();
  return v2;
}

uint64_t sub_1000D7258()
{
  return sub_10000A7D8();
}

uint64_t sub_1000D7270@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC5Files23DOCFileSystemCollection__nodes);
  return swift_bridgeObjectRetain();
}

void sub_1000D729C()
{
  sub_1000317F4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t type metadata accessor for DOCFileExtensionManager()
{
  return self;
}

void *sub_1000D72DC()
{
  type metadata accessor for DOCFileExtensionManager();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_10000A95C();
  qword_100737550 = v0;
  return result;
}

ValueMetadata *type metadata accessor for DOCFileExtensionManager.State()
{
  return &type metadata for DOCFileExtensionManager.State;
}

uint64_t sub_1000D7328()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1000D7360()
{
  return type metadata accessor for DOCColumnViewController(0);
}

NSString sub_1000D7368()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1007374D8 = (uint64_t)result;
  return result;
}

uint64_t sub_1000D73FC()
{
  uint64_t result = type metadata accessor for ScrollToItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ActiveScrollItemContext(uint64_t a1)
{
  return sub_10009E984(a1, qword_100714D40);
}

uint64_t type metadata accessor for DOCSourceOrderStrategy()
{
  return self;
}

void sub_1000D74D8()
{
}

uint64_t sub_1000D74E0()
{
  return sub_100059344(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000D74E8(uint64_t a1, uint64_t a2)
{
  sub_10000FEE8(a1, a2, v2);
}

uint64_t sub_1000D74F4()
{
  return type metadata accessor for DOCLocationChangePacer();
}

uint64_t sub_1000D74FC()
{
  return type metadata accessor for DOCHierarchyController(0);
}

uint64_t sub_1000D7504(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_1000D7520()
{
  return sub_1000D7504((uint64_t (*)(void, void, void, void, void, void, void))sub_10003D300);
}

void sub_1000D753C(void *a1)
{
  sub_100014374(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32));
}

void sub_1000D754C(void *a1)
{
  sub_1000D7558(a1, *(void *)(v1 + 16), *(void (**)(void, void))(v1 + 24), *(void *)(v1 + 32));
}

void sub_1000D7558(void *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  if (a1) {
    unsigned __int8 v6 = a1;
  }
  else {
    unsigned __int8 v6 = [self defaultLocation];
  }
  id v7 = v6;
  sub_10004336C(v6, 0, a3, a4);
}

void sub_1000D75E4(NSObject *a1)
{
  sub_1000D760C(a1, *(void *)(v1 + 16), *(void (**)(void, void))(v1 + 24), *(void *)(v1 + 32), "resolving .defaultLocation: location is nil, using empty location instead.");
}

void sub_1000D760C(NSObject *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, const char *a5)
{
  if (a1) {
    unsigned int v9 = a1;
  }
  else {
    unsigned int v9 = sub_100230A78(a5);
  }
  uint64_t v8 = a1;
  sub_10004336C(v9, 1, a3, a4);
}

uint64_t sub_1000D768C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_1000D76A4()
{
  return sub_1000D768C((uint64_t (*)(void, void, void, void, void))sub_100040024);
}

void sub_1000D76BC(void *a1)
{
  sub_10001E6D0(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_1000D76C4(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1000D76DC()
{
  return sub_1000D76C4((uint64_t (*)(void, void, void, void, void, void))sub_100013E84);
}

void sub_1000D76F8(unint64_t a1, uint64_t a2)
{
  sub_100025D68(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1000D7708(uint64_t a1, uint64_t a2)
{
  return sub_1000D7720(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_100023AC0);
}

uint64_t sub_1000D7720(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_1000D7738(uint64_t a1, uint64_t a2)
{
  return sub_1000D7720(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_1000160FC);
}

uint64_t sub_1000D7750(void *a1)
{
  return sub_100015264(a1, *(void **)v1, *(void *)(v1 + 8), *(void **)(v1 + 16));
}

ValueMetadata *_s12BrowsedStateVMa()
{
  return &_s12BrowsedStateVN;
}

unint64_t sub_1000D7780()
{
  unint64_t result = qword_10070B6B0;
  if (!qword_10070B6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10070B6B0);
  }
  return result;
}

ValueMetadata *_s12BrowsedStateV10CodingKeysOMa()
{
  return &_s12BrowsedStateV10CodingKeysON;
}

unint64_t sub_1000D77EC()
{
  unint64_t result = qword_1007095B8;
  if (!qword_1007095B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007095B8);
  }
  return result;
}

unint64_t sub_1000D7840()
{
  unint64_t result = qword_1007095C0;
  if (!qword_1007095C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007095C0);
  }
  return result;
}

unint64_t sub_1000D7894()
{
  unint64_t result = qword_100709558;
  if (!qword_100709558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100709558);
  }
  return result;
}

void sub_1000D78E8()
{
  sub_100009E5C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for DRIMainViewController()
{
  uint64_t result = qword_100712EC0;
  if (!qword_100712EC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1000D7A74()
{
  unint64_t result = qword_100706E20;
  if (!qword_100706E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706E20);
  }
  return result;
}

unint64_t sub_1000D7AC8()
{
  unint64_t result = qword_100708230;
  if (!qword_100708230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100708230);
  }
  return result;
}

uint64_t type metadata accessor for DOCSharedServerSource()
{
  uint64_t result = qword_100714700;
  if (!qword_100714700) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for DOCMutableSidebarData()
{
  return self;
}

unint64_t sub_1000D7BA0()
{
  unint64_t result = qword_10070D3C8;
  if (!qword_10070D3C8)
  {
    type metadata accessor for DOCItemCollectionView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10070D3C8);
  }
  return result;
}

void sub_1000D7C50(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = a1 == 0;
  }
  if (!v5)
  {
    id v6 = a1;
    id v7 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.info.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1005A0030;
    *(void *)(v8 + 56) = sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
    *(void *)(v8 + 64) = sub_100140764();
    *(void *)(v8 + 32) = v6;
    id v9 = v6;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    uint64_t v10 = (void **)(v1 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem);
    swift_beginAccess();
    id v11 = *v10;
    *uint64_t v10 = 0;
    sub_10013FFF4(v11);

    uint64_t v4 = *v3;
  }
  if (v4)
  {
    id v12 = v4;
    uint64_t v13 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.info.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1005A0030;
    *(void *)(v14 + 56) = sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
    *(void *)(v14 + 64) = sub_100140764();
    *(void *)(v14 + 32) = v12;
    id v15 = v12;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
}

unsigned char *sub_1000D7E48()
{
  unint64_t result = sub_100010E90();
  static DOCFileProviderSource.searchSource = (uint64_t)result;
  return result;
}

unsigned char *sub_1000D7E68()
{
  unint64_t result = sub_1000158D8();
  qword_100737340 = (uint64_t)result;
  return result;
}

unsigned char *sub_1000D7E88()
{
  unint64_t result = sub_100013A34();
  qword_100737348 = (uint64_t)result;
  return result;
}

void sub_1000D7EA8()
{
  if (!qword_10070E6B8)
  {
    type metadata accessor for DOCBrowserHistoryItem(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10070E6B8);
    }
  }
}

void sub_1000D7F10()
{
}

void sub_1000D7F18()
{
  qword_1007371F0 = 0x406C400000000000;
}

void sub_1000D7F2C()
{
  qword_1007371E8 = 0x4065400000000000;
}

void sub_1000D7F40()
{
  qword_1007371E0 = 0x4060E00000000000;
}

void sub_1000D7F54()
{
  qword_1007371D0 = 0x4056800000000000;
}

void sub_1000D7F68()
{
  qword_1007371C8 = 0x4055000000000000;
}

void sub_1000D7F78()
{
  qword_1007371C0 = 0x4050800000000000;
}

void sub_1000D7F8C()
{
  qword_1007371B8 = 0x4034000000000000;
}

void sub_1000D7F9C()
{
  qword_1007371F8 = 0x4074000000000000;
}

unint64_t sub_1000D7FB0()
{
  unint64_t result = qword_100710FF8;
  if (!qword_100710FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100710FF8);
  }
  return result;
}

uint64_t type metadata accessor for BrowserSceneDelegate()
{
  return self;
}

id sub_1000D804C()
{
  *(void *)&v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_window] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_viewController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_fileImportController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_sourceOrderObserver] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_newWindowActivityIdentifier];
  *(void *)uint64_t v1 = 0xD000000000000024;
  *((void *)v1 + 1) = 0x80000001005E05D0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_stateRestorationActivityIdentifier];
  *(void *)uint64_t v2 = 0xD000000000000026;
  *((void *)v2 + 1) = 0x80000001005E0600;
  uint64_t v3 = &v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_stateRestorationURLKey];
  *(void *)uint64_t v3 = 0xD00000000000002BLL;
  *((void *)v3 + 1) = 0x80000001005E0630;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for BrowserSceneDelegate();
  return [super init];
}

uint64_t type metadata accessor for DOCValueChangePacer()
{
  return sub_1000D21B0();
}

id sub_1000D8148(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

void sub_1000D8158(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_1000D8168()
{
  uint64_t result = type metadata accessor for ScrollPositionInfo.ItemOffset(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000D820C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100222120);
}

uint64_t sub_1000D8220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100222050);
}

uint64_t sub_1000D8234()
{
  uint64_t result = type metadata accessor for ScrollPositionInfo(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCDebugUIScenario()
{
  return &type metadata for DOCDebugUIScenario;
}

uint64_t sub_1000D82F8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DOCTipsFamilyTip();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D8338(uint64_t a1)
{
  return sub_10001AEF0(a1, qword_100716CE8);
}

uint64_t sub_1000D8358@<X0>(uint64_t *a1@<X8>)
{
  return sub_100025900(0, a1);
}

uint64_t sub_1000D8364()
{
  return sub_1000D82F8(&qword_100716D98);
}

uint64_t sub_1000D8398(uint64_t a1)
{
  return sub_10001AEF0(a1, qword_100716CD0);
}

NSString sub_1000D83BC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100736E88 = (uint64_t)result;
  return result;
}

void sub_1000D83F4()
{
  sub_100009E5C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for DOCTipsManager(uint64_t a1)
{
  return sub_10009E984(a1, (uint64_t *)&unk_100707C18);
}

uint64_t sub_1000D8568()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = sub_10038A5E8;
  }
  else {
    uint64_t v2 = sub_1000079F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

unint64_t sub_1000D867C()
{
  unint64_t result = qword_100715130;
  if (!qword_100715130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100715130);
  }
  return result;
}

ValueMetadata *_s9ScenariosVMa()
{
  return &_s9ScenariosVN;
}

uint64_t type metadata accessor for DOCGridLayout.LayoutCalculator()
{
  return self;
}

ValueMetadata *type metadata accessor for DOCGridLayout.LayoutCalculator.State()
{
  return &type metadata for DOCGridLayout.LayoutCalculator.State;
}

ValueMetadata *type metadata accessor for DOCGridLayout.LayoutCalculator.HeightDeterminingFactors()
{
  return &type metadata for DOCGridLayout.LayoutCalculator.HeightDeterminingFactors;
}

unint64_t sub_1000D872C()
{
  unint64_t result = qword_100712728;
  if (!qword_100712728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712728);
  }
  return result;
}

void _s4SpecVwxx(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

ValueMetadata *type metadata accessor for DOCGridLayout.LayoutCalculator.CalculationVariables()
{
  return &type metadata for DOCGridLayout.LayoutCalculator.CalculationVariables;
}

unint64_t sub_1000D87D0()
{
  unint64_t result = qword_100712720;
  if (!qword_100712720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712720);
  }
  return result;
}

id *sub_1000D8824(uint64_t a1)
{
  return sub_1000CE68C(a1, *(void **)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_1000D8830()
{
  return sub_1000CBF84(&qword_100708000, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
}

uint64_t sub_1000D8878()
{
  return sub_1000CBF84(&qword_100707FE0, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
}

uint64_t sub_1000D88C0()
{
  return sub_1000CBF84(&qword_100707FB0, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
}

uint64_t sub_1000D8908()
{
  return sub_1000CBF84(&qword_100707FB8, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
}

void *sub_1000D8950()
{
  return &protocol witness table for FileEntityIdentifier;
}

uint64_t sub_1000D895C()
{
  return sub_1000CBF84(&qword_100707FC8, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
}

uint64_t sub_1000D89A4()
{
  return sub_1000CBF84((unint64_t *)&qword_10070C070, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
}

uint64_t sub_1000D89EC()
{
  return sub_1000CBF84((unint64_t *)&unk_100707F90, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
}

uint64_t type metadata accessor for ScrollToItem(uint64_t a1)
{
  return sub_10009E984(a1, qword_100714DD0);
}

void *sub_1000D8A54()
{
  type metadata accessor for DOCInterfaceSystemAppearance_Default();
  unint64_t result = (void *)swift_allocObject();
  result[2] = 0x73697370696C6C65;
  result[3] = 0xEF656C637269632ELL;
  result[4] = 0x73697370696C6C65;
  result[5] = 0xE800000000000000;
  qword_100737698 = (uint64_t)result;
  return result;
}

ValueMetadata *type metadata accessor for DOCFastLabel.AttachmentRenderer()
{
  return &type metadata for DOCFastLabel.AttachmentRenderer;
}

ValueMetadata *type metadata accessor for DOCFastLabel.LabelInformation()
{
  return &type metadata for DOCFastLabel.LabelInformation;
}

uint64_t sub_1000D8B60()
{
  return sub_1000D8B78();
}

uint64_t sub_1000D8B78()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *sub_1000D8BA0@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void sub_1000D8BE4()
{
  if (!qword_10071CDC0)
  {
    type metadata accessor for DOCItemSortDescriptor();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10071CDC0);
    }
  }
}

unint64_t sub_1000D8C3C()
{
  unint64_t result = qword_100716DE0;
  if (!qword_100716DE0)
  {
    sub_100074618(&qword_100716DB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100716DE0);
  }
  return result;
}

void sub_1000D93A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D93C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained userDidTapDownloadButton];
}

void sub_1000D99D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = docLogHandle;
  if (v6)
  {
    if (!docLogHandle)
    {
      DOCInitLogging();
      id v7 = docLogHandle;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100583184(a1, v7, (uint64_t)v6);
    }
    uint64_t v8 = [v6 domain];
    if ([v8 isEqualToString:NSCocoaErrorDomain])
    {
      id v9 = [v6 code];

      if (v9 == (id)3072)
      {
        uint64_t v10 = docLogHandle;
        if (!docLogHandle)
        {
          DOCInitLogging();
          uint64_t v10 = docLogHandle;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          id v11 = *(void **)(a1 + 32);
          id v12 = v10;
          uint64_t v13 = [v11 displayName];
          *(_DWORD *)buf = 138412290;
          double v18 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Download operation canceled for item: %@", buf, 0xCu);
        }
        goto LABEL_19;
      }
    }
    else
    {
    }
    uint64_t v14 = [*(id *)(a1 + 40) delegate];
    char v15 = objc_opt_respondsToSelector();

    if (v15)
    {
      id v16 = v6;
      DOCRunInMainThread();
    }
  }
  else
  {
    if (!docLogHandle)
    {
      DOCInitLogging();
      id v7 = docLogHandle;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_1005830EC(a1, v7);
    }
  }
LABEL_19:
}

void sub_1000D9C14(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [v2 node];
  [v4 nodeDownloadButton:v2 downloadingNode:v3 encounteredError:*(void *)(a1 + 40)];
}

void sub_1000D9C94(uint64_t a1)
{
  uint64_t v2 = docLogHandle;
  if (!docLogHandle)
  {
    DOCInitLogging();
    uint64_t v2 = docLogHandle;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100583244(a1, v2);
  }
}

void sub_1000DA3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
}

void sub_1000DA428(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained userDidTapDownloadButton];
}

void sub_1000DA468(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained userDidTapOpenButton];
}

void sub_1000DAB68(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1000DABD4(uint64_t a1)
{
  objc_copyWeak(&to, (id *)(a1 + 32));
  id v1 = objc_loadWeakRetained(&to);

  if (v1)
  {
    id v2 = objc_loadWeakRetained(&to);
    unsigned __int8 v3 = [v2 _defaultLocationIsRecentsTab];

    if ((v3 & 1) == 0)
    {
      id v4 = objc_loadWeakRetained(&to);
      id v5 = [v4 hierarchyController];
      [v5 reset];

      id v6 = objc_loadWeakRetained(&to);
      id v7 = [v6 hierarchyController];
      [v7 resetWithDefaultLocationWithAnimated:0];
    }
  }
  objc_destroyWeak(&to);
}

void sub_1000DAC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

uint64_t sub_1000DB7DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000DBF48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  if (v7)
  {
    id v10 = v7;
    id v8 = v5;
    id v9 = v6;
    DOCRunInMainThread();
  }
}

uint64_t sub_1000DC018(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000DC030(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_7:
    v4();
    goto LABEL_8;
  }
  if (!*(void *)(a1 + 32) || !*(unsigned char *)(a1 + 56))
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_7;
  }
  id v5 = [*(id *)(a1 + 40) documentManager];
  uint64_t v6 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000DC134;
  __n128 v7[3] = &unk_100688DA0;
  id v8 = *(id *)(a1 + 48);
  [v5 importDocumentAt:v6 mode:1 toCurrentBrowserLocationWithCompletion:v7];

LABEL_8:
}

void sub_1000DC134(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000DC204;
    v4[3] = &unk_100688DC8;
    id v6 = *(id *)(a1 + 32);
    id v5 = v3;
    [v5 bumpLastOpenDateWithCompletionHandler:v4];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t sub_1000DC204(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1000DC21C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000DC22C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000DC6CC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x20u);
}

id sub_1000DC844(uint64_t a1)
{
  return [_uip_setTabBarHidden:animated:];
}

id sub_1000DC8CC(uint64_t a1)
{
  [*(id *)(a1 + 32) beginAppearanceTransition:0 animated:0];
  id v2 = *(void **)(a1 + 32);

  return _[v2 endAppearanceTransition];
}

uint64_t sub_1000DC910(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000DC920(uint64_t a1)
{
  [*(id *)(a1 + 32) setViewControllers:*(void *)(a1 + 40) animated:0];
  [*(id *)(a1 + 32) setSelectedIndex:*(void *)(a1 + 56)];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);

  return [v2 setViewControllers:v3 animated:0];
}

void sub_1000DCD30(id a1)
{
  CFArrayRef v1 = CGImageSourceCopyTypeIdentifiers();
  id v2 = (void *)qword_10071D3A8;
  qword_10071D3A8 = (uint64_t)v1;
}

BOOL sub_1000DDC54(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) containsObject:v5])
  {
    id v6 = *(void **)(a1 + 40);
    id v12 = 0;
    id v13 = 0;
    unsigned int v7 = [v6 readTag:a3 path:v5 title:&v13 value:&v12];
    id v8 = v13;
    id v9 = v12;
    if (v7) {
      [*(id *)(a1 + 48) setObject:v9 forKeyedSubscript:v8];
    }
    [*(id *)(a1 + 32) removeObject:v5];
  }
  BOOL v10 = [*(id *)(a1 + 32) count] != 0;

  return v10;
}

id sub_1000DE914(uint64_t a1)
{
  [*(id *)(a1 + 32) setPrefersAnimatedTabVibilityChanges:*(unsigned __int8 *)(a1 + 40)];
  unsigned __int8 v2 = [*(id *)(a1 + 32) isShowingCollapsedSidebarViewController];
  uint64_t v3 = [*(id *)(a1 + 32) splitViewDelegate];
  uint64_t v4 = v3;
  if (v2)
  {
    BOOL v5 = 1;
  }
  else if (*(unsigned char *)(a1 + 41))
  {
    BOOL v5 = 0;
  }
  else
  {
    BOOL v5 = *(unsigned char *)(a1 + 42) == 0;
  }
  [v3 splitViewController:*(void *)(a1 + 32) wantsToShowTabBar:v5];

  id v6 = *(void **)(a1 + 32);

  return [v6 setPrefersAnimatedTabVibilityChanges:0];
}

uint64_t sub_1000DED64(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1000DF11C(uint64_t a1)
{
  [*(id *)(a1 + 32) setImage:0];
  unsigned __int8 v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) _displayModeButtonItemTitle];
  [v2 setTitle:v3];

  uint64_t v4 = *(void **)(a1 + 32);

  return _[v4 _setShowsBackButtonIndicator:1];
}

id sub_1000DF2C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) clearSplitViewStateTransitionStateIfNecessary];
}

id sub_1000DF428(uint64_t a1)
{
  [*(id *)(a1 + 32) updateUIPHorizontalInsetsIfNecessaryWithCoordinator:*(void *)(a1 + 40)];
  unsigned __int8 v2 = *(void **)(a1 + 32);

  return [v2 updateTraitCollectionTabBarSetting];
}

id sub_1000DF468(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;

  [*(id *)(a1 + 32) clearSplitViewStateTransitionStateIfNecessary];
  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 updatePreferredSplitBehavior];
}

void sub_1000DF958(uint64_t a1)
{
  [*(id *)(a1 + 32) updateTraitCollectionTabBarSetting];
  [*(id *)(a1 + 32) updateDisplayModeButtonVisibility];
  [*(id *)(a1 + 32) updateUIPHorizontalInsetsIfNecessaryWithCoordinator:*(void *)(a1 + 40)];
  uint64_t v2 = [*(id *)(a1 + 32) splitViewDelegate];
  [v2 splitViewController:*(void *)(a1 + 32) willChangeFromState:*(void *)(a1 + 48) toState:*(void *)(a1 + 56)];

  uint64_t v3 = [*(id *)(a1 + 32) fullDocumentManagerViewController];
  [v3 splitViewWillChangeFrom:*(void *)(a1 + 64) to:*(void *)(a1 + 72) alongsideCoordinator:*(void *)(a1 + 40)];

  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 56);
    [v4 updateContentEditingOverlaysForState:v5];
  }
}

void sub_1000DF9FC(uint64_t a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1 + 32) updateContentEditingOverlaysForState:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) updateDisplayModeButtonVisibility];
  if (*(unsigned char *)(a1 + 72)) {
    [*(id *)(a1 + 32) _saveUserPrefersTiledSidebarForChangeFromDisplayMode:*(void *)(a1 + 64) toDisplayMode:[*(id *)(a1 + 48) displayMode]];
  }
  if (([v4 isCancelled] & 1) != 0
    || !*(unsigned char *)(a1 + 73) && objc_msgSend(*(id *)(a1 + 32), "doc_isAppearing"))
  {
    [*(id *)(a1 + 32) clearSplitViewStateTransitionStateIfNecessary];
  }
  uint64_t v3 = [*(id *)(a1 + 32) splitViewDelegate];
  [v3 splitViewController:*(void *)(a1 + 32) didChangeFromState:*(void *)(a1 + 56) toState:*(void *)(a1 + 40) isUserDisplayModeChange:*(unsigned __int8 *)(a1 + 72)];

  [*(id *)(a1 + 32) setPrefersAnimatedTabVibilityChanges:0];
}

void sub_1000DFF2C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) fullDocumentManagerViewController];
  [v1 setRootViewController:0];
}

void sub_1000E1654(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = docLogHandle;
  if (v3)
  {
    if (!docLogHandle)
    {
      DOCInitLogging();
      id v4 = docLogHandle;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1005838AC(a1, v4, (uint64_t)v3);
    }
  }
  else
  {
    if (!docLogHandle)
    {
      DOCInitLogging();
      id v4 = docLogHandle;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_1005837D8(a1, v4);
    }
  }
}

id sub_1000E1854(uint64_t a1)
{
  [*(id *)(a1 + 32) forceUpdatePreferredContentSize];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 objc_doc_preheatDidFinish];
}

id sub_1000E2524(uint64_t a1, void *a2)
{
  id v3 = [a2 providerID];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_1000E3028()
{
  id v0 = objc_alloc((Class)DSNSHelperContext);

  return _[v0 initWithOptions:0 delegate:0];
}

id sub_1000E3C18(uint64_t a1)
{
  [*(id *)(a1 + 32) presentTab:2 rawTabSwitchOnly:1];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _beginSystemTabBarHidden];
}

uint64_t sub_1000E3D3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000E3DCC(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v3 = v2[20];
  id v4 = [v2 fullRecentsViewController];
  [v2 _setShowSystemTabBar:v3 isEditing:[v4 isEditing]];

  id v5 = *(id *)(a1 + 40);
  id result = [*(id *)(a1 + 32) effectiveTabSwitcherTab];
  if (v5 != result)
  {
    unsigned int v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    return [v7 presentTab:v8];
  }
  return result;
}

void sub_1000E3FF0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) displayedRootLocation];
  LOBYTE(v2) = [v2 isEqual:v3];

  if ((v2 & 1) == 0)
  {
    id v4 = *(void **)(a1 + 48);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000E40C4;
    v5[3] = &unk_100688C40;
    id v6 = v4;
    id v7 = *(id *)(a1 + 56);
    [v6 withLocationChangePacingDisabled:v5];
  }
}

void sub_1000E40C4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) firstObject];
  [v1 updateSelectionToMatchBrowsedLocation:v2 scrollToVisible:1];
}

void sub_1000E42F8(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) canHaveTabs];
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [v3 tabBarController];
    [v4 setSoleValidIndex:0];
  }
  else
  {
    id v5 = [v3 tabControllerIndexForTab:2];
    id v4 = [*(id *)(a1 + 32) tabBarController];
    id v6 = +[NSNumber numberWithUnsignedInteger:v5];
    [v4 setSoleValidIndex:v6];
  }
  id v7 = [*(id *)(a1 + 32) tabBarController];
  [v7 setNeverAllowShowingSystemTabs:*(unsigned char *)(a1 + 40) == 0];

  uint64_t v8 = *(unsigned __int8 *)(a1 + 40);
  id v9 = [*(id *)(a1 + 32) navigationController];
  [v9 setToolbarHidden:v8];
}

uint64_t sub_1000E43F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000E4B00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateTabButtonsVisibilityForTraits];
}

void sub_1000E4C70(id a1, DOCFullDocumentManagerViewController *a2)
{
  id v2 = [(DOCFullDocumentManagerViewController *)a2 documentManager];
  [v2 configureUIPDocumentLandingStyleIfNecessary];
}

id sub_1000E4F38(uint64_t a1, void *a2)
{
  return [a2 setCustomActions:*(void *)(a1 + 32)];
}

void sub_1000E5908(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    id v11 = docLogHandle;
    if (!docLogHandle)
    {
      DOCInitLogging();
      id v11 = docLogHandle;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 138412802;
      uint64_t v23 = v12;
      __int16 v24 = 1024;
      int v25 = v13;
      __int16 v26 = 2112;
      id v27 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unable to reveal the url: %@ importIfNeeded:%d error: %@", buf, 0x1Cu);
    }
    uint64_t v14 = *(void *)(a1 + 56);
    if (v14) {
      (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v7);
    }
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 40) configuration];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000E5AEC;
    v15[3] = &unk_100689328;
    id v16 = v5;
    char v20 = *(unsigned char *)(a1 + 64);
    id v19 = *(id *)(a1 + 56);
    id v9 = *(id *)(a1 + 48);
    __int16 v21 = *(_WORD *)(a1 + 65);
    uint64_t v10 = *(void *)(a1 + 40);
    id v17 = v9;
    uint64_t v18 = v10;
    [v16 fetchItemWithBumpLastOpenDate:0 configuration:v8 completionHandler:v15];
  }
}

void sub_1000E5AEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1000E5DB4;
  v24[3] = &unk_1006892D8;
  id v6 = a3;
  id v25 = v6;
  id v7 = v5;
  id v26 = v7;
  id v27 = *(id *)(a1 + 32);
  char v30 = *(unsigned char *)(a1 + 64);
  id v29 = *(id *)(a1 + 56);
  id v28 = *(id *)(a1 + 40);
  uint64_t v8 = objc_retainBlock(v24);
  id v9 = [*(id *)(a1 + 40) fullDocumentManagerViewController];
  uint64_t v10 = [v9 effectiveBrowserViewController];
  id v11 = [v10 contentViewController];

  if (*(unsigned char *)(a1 + 65)
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && [v11 displayMode] == (id)2
    || *(unsigned char *)(a1 + 66)
    && ([*(id *)(a1 + 48) configuration],
        int v13 = objc_claimAutoreleasedReturnValue(),
        unsigned int v14 = [v13 isPickerUI],
        v13,
        v14))
  {
    uint64_t v12 = [v7 fileProviderItem];
    ((void (*)(void *, void *, void))v8[2])(v8, v12, 0);
  }
  else
  {
    char v15 = [v7 fileProviderItem];
    uint64_t v12 = [v15 itemID];

    id v16 = +[FPItemManager defaultManager];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000E648C;
    v17[3] = &unk_100689300;
    id v18 = *(id *)(a1 + 32);
    char v23 = *(unsigned char *)(a1 + 64);
    id v21 = *(id *)(a1 + 56);
    id v19 = v6;
    double v22 = v8;
    id v20 = v7;
    [v16 fetchParentsForItemID:v12 recursively:1 completionHandler:v17];
  }
}

void sub_1000E5DB4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v9 = a1[4];
  id v10 = a1[5];
  id v11 = v5;
  id v12 = a1[6];
  id v15 = a1[8];
  int v13 = v6;
  id v14 = a1[7];
  id v7 = v6;
  id v8 = v5;
  DOCRunInMainThread();
}

void sub_1000E5EDC(uint64_t a1)
{
  if (!*(void *)(a1 + 32)
    && (id v7 = *(void **)(a1 + 40)) != 0
    && ([v7 fileProviderItem], (id v8 = objc_claimAutoreleasedReturnValue()) != 0)
    && (uint64_t v9 = *(void *)(a1 + 48), v8, v9))
  {
    if ([*(id *)(a1 + 64) isTrashed])
    {
      id v10 = +[DOCConcreteLocation trashedItemsLocation];
    }
    else
    {
      id v11 = objc_alloc((Class)DOCConcreteLocation);
      id v12 = [*(id *)(a1 + 48) providerDomainID];
      id v10 = [v11 initWithSourceIdentifier:v12 node:*(void *)(a1 + 48)];
    }
    int v13 = [*(id *)(a1 + 72) fullDocumentManagerViewController];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000E6114;
    v15[3] = &unk_100689288;
    id v19 = *(id *)(a1 + 80);
    id v16 = *(id *)(a1 + 64);
    id v17 = *(id *)(a1 + 56);
    id v18 = v13;
    id v14 = v13;
    [v14 revealLocation:v10 animated:0 completion:v15];
  }
  else
  {
    id v2 = docLogHandle;
    if (!docLogHandle)
    {
      DOCInitLogging();
      id v2 = docLogHandle;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 56);
      int v4 = *(unsigned __int8 *)(a1 + 88);
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      uint64_t v21 = v3;
      __int16 v22 = 1024;
      int v23 = v4;
      __int16 v24 = 2112;
      uint64_t v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Error fetching the item for the revealed URL: %@ importIfNeeded: %d error: %@", buf, 0x1Cu);
    }
    uint64_t v6 = *(void *)(a1 + 80);
    if (v6) {
      (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, 0, *(void *)(a1 + 32));
    }
  }
}

void sub_1000E6114(id *a1)
{
  id v2 = (void (**)(id, id, void))a1[7];
  if (v2 && !a1[4]) {
    v2[2](v2, a1[5], 0);
  }
  if (a1[4])
  {
    uint64_t v3 = docLogHandle;
    if (!docLogHandle)
    {
      DOCInitLogging();
      uint64_t v3 = docLogHandle;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = a1[5];
      *(_DWORD *)buf = 136315394;
      id v17 = "-[DOCTabbedBrowserViewController revealDocumentAtURL:importIfNeeded:openDocument:revealContents:updateLastUs"
            "edDate:completion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s 1. Starting reveal of item: %@ expecting to get completion handler to continue", buf, 0x16u);
    }
    uint64_t v5 = [a1[6] effectiveBrowserViewController];
    if (v5)
    {
      uint64_t v6 = [a1[6] effectiveBrowserViewController];
      id v15 = a1[4];
      id v7 = +[NSArray arrayWithObjects:&v15 count:1];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1000E638C;
      v11[3] = &unk_100689260;
      id v12 = a1[4];
      id v14 = a1[7];
      id v13 = a1[5];
      [v6 revealWithItems:v7 selectEvenIfVisible:1 completionBlock:v11];
    }
    else
    {
      id v8 = docLogHandle;
      if (!docLogHandle)
      {
        DOCInitLogging();
        id v8 = docLogHandle;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = a1[5];
        *(_DWORD *)buf = 136315394;
        id v17 = "-[DOCTabbedBrowserViewController revealDocumentAtURL:importIfNeeded:openDocument:revealContents:updateLast"
              "UsedDate:completion:]_block_invoke";
        __int16 v18 = 2112;
        id v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s 3. Can not reveal of item: %@ effectiveBrowserViewController is nil. Calling completion handler", buf, 0x16u);
      }
      id v10 = (void (**)(id, id, void))a1[7];
      if (v10) {
        v10[2](v10, a1[5], 0);
      }
    }
  }
}

uint64_t sub_1000E638C(void *a1, int a2)
{
  id v4 = docLogHandle;
  if (!docLogHandle)
  {
    DOCInitLogging();
    id v4 = docLogHandle;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    int v7 = 136315650;
    id v8 = "-[DOCTabbedBrowserViewController revealDocumentAtURL:importIfNeeded:openDocument:revealContents:updateLastUsedD"
         "ate:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s 2. Finished reveal of item: %@ completion handler success: %d", (uint8_t *)&v7, 0x1Cu);
  }
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[5], 0);
  }
  return result;
}

void sub_1000E648C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 firstObject];
  int v7 = (void *)v6;
  if (v5 || !v6)
  {
    uint64_t v10 = docLogHandle;
    if (!docLogHandle)
    {
      DOCInitLogging();
      uint64_t v10 = docLogHandle;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = *(unsigned __int8 *)(a1 + 72);
      int v14 = 138412802;
      uint64_t v15 = v11;
      __int16 v16 = 1024;
      int v17 = v12;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Error fetching the parent item for the revealed URL: %@ importIfNeeded: %d error: %@", (uint8_t *)&v14, 0x1Cu);
    }
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13) {
      (*(void (**)(uint64_t, void, void))(v13 + 16))(v13, 0, *(void *)(a1 + 40));
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 64);
    __int16 v9 = [*(id *)(a1 + 48) fileProviderItem];
    (*(void (**)(uint64_t, void *, void *))(v8 + 16))(v8, v7, v9);
  }
}

uint64_t sub_1000E65EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000E6828(uint64_t a1)
{
  [*(id *)(a1 + 32) switchToBrowse];
  id v2 = [*(id *)(a1 + 32) fullRecentsViewController];
  [v2 dismissSearch];
}

id sub_1000E6DDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateTabBarVisibility];
}

id sub_1000E7324(uint64_t a1)
{
  return [*(id *)(a1 + 32) presentTab:*(void *)(a1 + 40) rawTabSwitchOnly:1];
}

void sub_1000E76D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = [WeakRetained sourceObserverQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000E7780;
    block[3] = &unk_100688C90;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

id sub_1000E7780(uint64_t a1)
{
  id v2 = docSourceLogHandle;
  if (!docSourceLogHandle)
  {
    DOCInitLogging();
    id v2 = docSourceLogHandle;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = v2;
    id v4 = +[DOCManagedPermission defaultPermission];
    id v5 = [v4 hostIdentifier];
    int v7 = 138412290;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MDM host identifier changed to %@, so simulate a source update", (uint8_t *)&v7, 0xCu);
  }
  return [*(id *)(a1 + 32) sourceObserverQueue_didReceiveSourceUpdate];
}

void sub_1000E79A0(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1000E79B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if ([WeakRetained observationCount]) {
      [WeakRetained setObservationCount:[WeakRetained observationCount] - 1];
    }
    if (![WeakRetained observationCount])
    {
      uint64_t v1 = [WeakRetained providerDomainsFINodeObserver];
      [v1 stopObserving:3];

      [WeakRetained stopObservingLegacyPickers];
      [WeakRetained stopObservingDefaultSaveLocation];
    }
  }
}

void sub_1000E7B34(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000E7B48(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = [WeakRetained sourcesSubscribers];
  uint64_t v3 = [*(id *)(a1 + 32) identifier];
  [v2 removeObjectForKey:v3];
}

void sub_1000E7C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      int v7 = 0;
      do
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v9 = v8;
          uint64_t v10 = [v9 providerDomain];
          uint64_t v11 = v10;
          if (v10)
          {
            int v12 = [v10 providerID];
            uint64_t v13 = [*(id *)(a1 + 32) providerID];
            if (v12 != v13)
            {

              goto LABEL_10;
            }
            int v14 = [v11 identifier];
            [*(id *)(a1 + 32) providerDomainID];
            __int16 v16 = v15 = a1;

            BOOL v17 = v14 == v16;
            a1 = v15;
            if (v17)
            {
              int v12 = DOCLocalizedDisplayName();
              (*(void (**)(void))(*(void *)(v15 + 40) + 16))();
LABEL_10:
            }
          }
        }
        int v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v18 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
      id v5 = v18;
    }
    while (v18);
  }
}

void sub_1000E7F40(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000E7F54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    id v3 = WeakRetained;
    objc_sync_enter(v3);
    id v4 = [v3 providerNodes];
    id v5 = [v4 arrayByAddingObjectsFromArray:*(void *)(a1 + 32)];
    [v3 setProviderNodes:v5];

    objc_sync_exit(v3);
    id WeakRetained = v6;
  }
}

void sub_1000E7FF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E80F8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000E810C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    id v3 = WeakRetained;
    objc_sync_enter(v3);
    id v4 = [v3 providerNodes];
    id v5 = [v4 arrayByExcludingObjectsInArray:*(void *)(a1 + 32)];
    [v3 setProviderNodes:v5];

    objc_sync_exit(v3);
    id WeakRetained = v6;
  }
}

void sub_1000E81AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E8364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000E8388(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    id v2 = WeakRetained;
    objc_sync_enter(v2);
    id v3 = [v2 pendingChildPropertyChanges];
    [v2 setPendingChildPropertyChanges:0];
    objc_sync_exit(v2);

    if ([v3 count])
    {
      if (([v3 containsObject:&off_1006BB428] & 1) != 0
        || [v3 containsObject:&off_1006BB440])
      {
        id v4 = +[DOCIconService shared];
        id v5 = [v2 providers];
        [v4 updateFileProvidersIcon:v5];
      }
      if ([v3 containsObject:&off_1006BB458]) {
        [v2 providersChanged];
      }
      [v2 sourceObserverQueue_didReceiveSourceUpdate];
    }

    id WeakRetained = v6;
  }
}

void sub_1000E84A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E8580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000E8594(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateProviderNodes];
}

void sub_1000E86B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained didReceiveSourceUpdate];
}

void sub_1000E8808(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1000E881C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained sourceObserverQueue_didReceiveSourceUpdate];
}

id sub_1000E8B54(void *a1, double a2, double a3, double a4)
{
  int v7 = [a1 identifier];
  id v8 = [objc_alloc((Class)ISIcon) initWithType:v7];
  id v9 = sub_1000E8C08(v8, a2, a3, a4);

  if (!v9)
  {
    id v9 = sub_1000E8CAC(a2, a3, a4);
  }

  return v9;
}

id sub_1000E8C08(void *a1, double a2, double a3, double a4)
{
  id v7 = a1;
  id v8 = [objc_alloc((Class)ISImageDescriptor) initWithSize:a2 scale:a3];
  [v8 setDrawBorder:1];
  id v9 = sub_1000E8DC4(v7, v8);

  return v9;
}

id sub_1000E8CAC(double a1, double a2, double a3)
{
  id v6 = +[ISIcon genericDocumentIcon];
  id v7 = sub_1000E8C08(v6, a1, a2, a3);

  return v7;
}

id sub_1000E8D28(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)ISIcon) initWithBundleIdentifier:v1];

  id v3 = +[ISImageDescriptor imageDescriptorNamed:kISImageDescriptorTableUIName];
  id v4 = sub_1000E8DC4(v2, v3);

  return v4;
}

id sub_1000E8DC4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 imageForDescriptor:v4];
  if ([v5 placeholder])
  {
    uint64_t v6 = [v3 prepareImageForDescriptor:v4];

    id v5 = (void *)v6;
  }
  if (v5)
  {
    id v7 = +[UIImage imageWithCGImage:](UIImage, "imageWithCGImage:", [v5 CGImage]);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

BOOL sub_1000E9124(uint64_t a1, uint64_t a2, CGPDFObject *a3)
{
  id v5 = +[NSString stringWithCString:a2 encoding:134217984];
  if ([*(id *)(a1 + 32) containsObject:v5])
  {
    if (CGPDFObjectGetType(a3) == kCGPDFObjectTypeString)
    {
      CGPDFStringRef value = 0;
      if (CGPDFObjectGetValue(a3, kCGPDFObjectTypeString, &value))
      {
        uint64_t v6 = (__CFString *)CGPDFStringCopyTextString(value);
        [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v5];
      }
    }
    [*(id *)(a1 + 32) removeObject:v5];
  }
  BOOL v7 = [*(id *)(a1 + 32) count] != 0;

  return v7;
}

id sub_1000E94D4(void *a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000E9584;
  v6[3] = &unk_100689528;
  id v7 = a2;
  id v3 = v7;
  id v4 = [a1 serviceViewControllerProxyWithErrorHandler:v6];

  return v4;
}

uint64_t sub_1000E9584(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *variable initialization expression of DOCFilterableOperationProgressCollectionSource.unorderedItems()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of DOCDebugInfoManager.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_1000BAA5C((unint64_t *)&qword_1007054C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000CBE70((uint64_t *)&unk_100709900);
  sub_10009449C((unint64_t *)&qword_1007054D0, (uint64_t *)&unk_100709900);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of DOCFilterableOperationProgressCollectionSource.filteringPredicate()
{
  return 0;
}

void *variable initialization expression of DOCItemCollectionViewController.subscriptions()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.familyFetcher@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FamilyFetcher();
  uint64_t result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1006A5950;
  *a1 = result;
  return result;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.registeredItemCellClassByIdentifier()
{
  return sub_10007920C((uint64_t)_swiftEmptyArrayStorage);
}

id variable initialization expression of DOCItemCollectionViewController.sortOptionsAccessibilityModelView()
{
  id v0 = objc_allocWithZone((Class)UIView);

  return [v0 initWithFrame:0.0, 0.0, 0.0, 0.0];
}

uint64_t variable initialization expression of DOCButton._userInteractionStateDeterminesLayerHitTestState_override()
{
  return 2;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.indexPathForRememberedFocusNode@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C((uint64_t (*)(void))&type metadata accessor for IndexPath, a1);
}

void *variable initialization expression of DOCItemCollectionViewController.urlToItemCache()
{
  return &_swiftEmptyDictionarySingleton;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionListCellIdentifier()
{
  return 0xD000000000000020;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionGridCellIdentifier()
{
  return 0xD000000000000020;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionLargeTextListCellIdentifier()
{
  return 0xD000000000000029;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionCreateCellIdentifier()
{
  return 0xD000000000000022;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionStatusSectionFooterIdentifier()
{
  return 0xD00000000000002BLL;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionStatusSectionEmptyFooterIdentifier()
{
  return 0xD000000000000030;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionStatusSectionHeaderIdentifier()
{
  return 0xD00000000000002BLL;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionGroupedSectionHeaderIdentifier()
{
  return 0xD00000000000002CLL;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionStatusSectionEmptyHeaderIdentifier()
{
  return 0xD000000000000030;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.searchPresentationState()
{
  return 4;
}

void *variable initialization expression of DOCItemCollectionViewController.cellContentPool()
{
  type metadata accessor for DOCItemCollectionCellContentPool();
  id v0 = (void *)swift_allocObject();
  v0[2] = 0;
  v0[3] = [objc_allocWithZone((Class)NSLock) init];
  v0[4] = sub_1000790C8((uint64_t)_swiftEmptyArrayStorage);
  return v0;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.thumbnailLoadingPool()
{
  return sub_1000E9CC0((void (*)(void))type metadata accessor for DOCThumbnailLoadingPool, 40, sub_10007EF2C);
}

uint64_t variable initialization expression of DOCItemCollectionViewController.collectionViewLayoutOptimizationContext()
{
  return 2;
}

id variable initialization expression of DOCItemCollectionViewController.appLaunchOptimizationsActive()
{
  id v0 = [self shared];
  id v1 = [v0 locked];

  return v1;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.itemsController@<X0>(void *a1@<X8>)
{
  *a1 = _swiftEmptyArrayStorage;
  a1[1] = _swiftEmptyArrayStorage;
  a1[2] = sub_100078F9C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v2 = type metadata accessor for DOCItemCollectionFPController();
  id v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for DOCItemGroupingBehavior();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *((unsigned char *)a1 + *(int *)(v2 + 32)) = 0;
  return result;
}

uint64_t variable initialization expression of DOCItemCollectionViewController._groupingBehavior@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EA7DC((unsigned int *)&enum case for DOCItemGroupingBehavior.none(_:), (uint64_t (*)(void))&type metadata accessor for DOCItemGroupingBehavior, a1);
}

uint64_t variable initialization expression of DOCItemCollectionViewController.shouldShowAllFilenameExtensionPublisher()
{
  if (qword_1007051D0 != -1) {
    swift_once();
  }
  return sub_10007F190();
}

id variable initialization expression of DOCItemCollectionViewController.typeToFocusController()
{
  return sub_1000EA4B8((uint64_t (*)(void))&type metadata accessor for DOCTypeToFocusController);
}

uint64_t variable initialization expression of DOCItemCollectionViewController.$__lazy_storage_$_listLayoutConfiguration@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C((uint64_t (*)(void))&type metadata accessor for UICollectionLayoutListConfiguration, a1);
}

double variable initialization expression of DOCItemCollectionViewController.tableLayoutSidebarPlainAppearanceMetrics@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_10059B770;
  double result = 12.0;
  *(_OWORD *)(a1 + 24) = xmmword_10059B780;
  return result;
}

double variable initialization expression of DOCItemCollectionViewController.preSnapshotConfiguration@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.sortingDescriptor@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C((uint64_t (*)(void))&type metadata accessor for DOCItemSortDescriptor, a1);
}

uint64_t variable initialization expression of DOCItemCollectionViewController.overridenEstimatedCollectionViewSize()
{
  return 0;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.enqueuedNodeToSelectAndScroll()
{
  return 0;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.enqueuedNodeScrollPositionInfo@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C(type metadata accessor for ScrollPositionInfo, a1);
}

uint64_t variable initialization expression of DOCItemCollectionViewController.bbiStorage()
{
  return sub_1000E9CC0((void (*)(void))_s10BBIStorageCMa, 192, (uint64_t (*)(void))sub_10007EEE4);
}

uint64_t sub_1000E9CC0(void (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t variable initialization expression of DOCHierarchyController._currentUpdateExpectation@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C(type metadata accessor for DOCHierarchyController.UpdateExpectation, a1);
}

uint64_t variable initialization expression of DOCHierarchyController.loadingDisabledOperation@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C(type metadata accessor for DOCHierarchyController.FetchingOperationToken, a1);
}

uint64_t variable initialization expression of DOCHierarchyController.locationChangePreparationQueue()
{
  return sub_1000EA87C(0xD000000000000032, 0x80000001005D2860);
}

uint64_t variable initialization expression of DOCHierarchyController.nodeResolvingQueue()
{
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v0 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v2 = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.userInitiated(_:), v5);
  v10[1] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  int v12 = _swiftEmptyArrayStorage;
  sub_1000BAA5C((unint64_t *)&qword_1007054C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000CBE70((uint64_t *)&unk_100709900);
  sub_10009449C((unint64_t *)&qword_1007054D0, (uint64_t *)&unk_100709900);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of DOCHierarchyController.lastVisitedLocationSavingQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_1000BAA5C((unint64_t *)&qword_1007054C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000CBE70((uint64_t *)&unk_100709900);
  sub_10009449C((unint64_t *)&qword_1007054D0, (uint64_t *)&unk_100709900);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of DOCItemCollectionCellContent.lastPartialProgress()
{
  return 0;
}

double variable initialization expression of DOCImageContainerFittingView.metrics()
{
  return 5.0;
}

double variable initialization expression of DOCItemCollectionCellContent.minimumRowHeight()
{
  return 0.0;
}

uint64_t variable initialization expression of DOCImageContainerFittingView.maxThumbnailCount()
{
  return 3;
}

double variable initialization expression of DOCItemInfoContentViewController.lastThumbnailSize()
{
  return 0.0;
}

__n128 variable initialization expression of DOCItemInfoContentViewController.metrics@<Q0>(uint64_t a1@<X8>)
{
  sub_1002815C8((uint64_t)v4);
  long long v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v4[4];
  __n128 result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double variable initialization expression of DOCItemInfoContentViewController.layoutMargins()
{
  return 16.0;
}

uint64_t variable initialization expression of DOCItemInfoContentViewController._statusAppearance()
{
  return 10;
}

id variable initialization expression of DOCItemInfoContentViewController.rootContentView()
{
  return sub_1000EA4B8((uint64_t (*)(void))type metadata accessor for DOCItemInfoContentViewController.RootHStack);
}

unint64_t variable initialization expression of DOCItemInfoContentViewController.actionsForCurrentActivityViewController()
{
  return sub_100494A88((uint64_t)_swiftEmptyArrayStorage);
}

double variable initialization expression of DOCSidebarViewController._diffableDataSource@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t variable initialization expression of DOCSidebarViewController.itemToCachedIcon()
{
  return sub_1000D3A64((uint64_t)_swiftEmptyArrayStorage);
}

double variable initialization expression of DOCSidebarViewController.itemSelectionPacer()
{
  return sub_1000D6FB0(3, 0.5);
}

uint64_t variable initialization expression of DOCSidebarViewController.currentlySelectedSidebarItem()
{
  return 0;
}

uint64_t variable initialization expression of DOCSidebarViewController.locationSelection()
{
  type metadata accessor for DOCSidebarViewController.LocationSelection();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t variable initialization expression of DOCSidebarViewController.sectionsDisablingUpdateAnimationUntilFirstLoad()
{
  sub_1000D7AC8();
  uint64_t v2 = Set.init(minimumCapacity:)();
  sub_100030AD8(&v1, 0);
  sub_100030AD8(&v1, 1);
  sub_100030AD8(&v1, 2);
  sub_100030AD8(&v1, 3);
  sub_100030AD8(&v1, 4);
  sub_100030AD8(&v1, 5);
  return v2;
}

double variable initialization expression of DOCSidebarViewController.bbiStorage()
{
  type metadata accessor for DOCSidebarViewController.BBIStorage();
  uint64_t v0 = (_OWORD *)swift_allocObject();
  double result = 0.0;
  v0[1] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  return result;
}

id variable initialization expression of DOCSidebarViewController.actionManager()
{
  return sub_1000EA4B8((uint64_t (*)(void))type metadata accessor for DOCActionManager);
}

id sub_1000EA4B8(uint64_t (*a1)(void))
{
  id v1 = objc_allocWithZone((Class)a1(0));

  return [v1 init];
}

double variable initialization expression of DOCItemRenameTextView.verticalMargin()
{
  return 2.0;
}

uint64_t variable initialization expression of DOCAbstractPacedPropertyUpdater.$__lazy_storage_$_clientNotifyState@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C(type metadata accessor for DOCAbstractPacedPropertyUpdater.ClientNotifyState, a1);
}

double variable initialization expression of DOCTabBarVariableBlurBackgroundView.metrics@<D0>(uint64_t a1@<X8>)
{
  double result = 6.0;
  *(_OWORD *)a1 = xmmword_10059B790;
  *(void *)(a1 + 16) = 0x402C000000000000;
  *(void *)(a1 + 24) = &off_10068A8B8;
  *(void *)(a1 + 32) = &off_10068A908;
  return result;
}

double variable initialization expression of DOCTabBarVariableBlurBackgroundView.lastSeenBounds()
{
  return 0.0;
}

id variable initialization expression of DOCTabBarVariableBlurBackgroundView.blurView()
{
  id v0 = objc_allocWithZone((Class)UIVisualEffectView);

  return [v0 init];
}

uint64_t variable initialization expression of DOCOperationCombinedProgress.progressValue()
{
  return 0;
}

uint64_t variable initialization expression of DOCOperationCombinedProgress.operationProgressByID()
{
  uint64_t v0 = type metadata accessor for DOCOperationProgress();
  swift_getTupleTypeMetadata2();
  uint64_t v1 = static Array._allocateUninitialized(_:)();

  return Dictionary.init(dictionaryLiteral:)(v1, &type metadata for AnyHashable, v0, &protocol witness table for AnyHashable);
}

uint64_t variable initialization expression of DOCFileProviderSource.defaultSorting@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EA7DC((unsigned int *)&enum case for DOCItemSortMode.name(_:), (uint64_t (*)(void))&type metadata accessor for DOCItemSortMode, a1);
}

uint64_t variable initialization expression of DOCFileProviderSource.sortingModes()
{
  sub_1000CBE70(&qword_1007054E0);
  uint64_t v0 = type metadata accessor for DOCItemSortMode();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10059B7A0;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, enum case for DOCItemSortMode.name(_:), v0);
  v6(v5 + v2, enum case for DOCItemSortMode.kind(_:), v0);
  v6(v5 + 2 * v2, enum case for DOCItemSortMode.modificationDate(_:), v0);
  v6(v5 + 3 * v2, enum case for DOCItemSortMode.size(_:), v0);
  v6(v5 + 4 * v2, enum case for DOCItemSortMode.tags(_:), v0);
  return v4;
}

uint64_t variable initialization expression of DOCFileProviderSource.defaultGroupingMode@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EA7DC((unsigned int *)&enum case for DOCItemSortMode.kind(_:), (uint64_t (*)(void))&type metadata accessor for DOCItemSortMode, a1);
}

uint64_t sub_1000EA7DC@<X0>(unsigned int *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a3, v4, v5);
}

_UNKNOWN **variable initialization expression of DOCFileProviderSource.availableDisplayModes()
{
  return &off_10068AA48;
}

uint64_t variable initialization expression of DOCBrowserContainerController.state()
{
  return 5;
}

uint64_t variable initialization expression of DOCBrowserContainerController.queue()
{
  return sub_1000EA87C(0xD000000000000028, 0x80000001005D2930);
}

uint64_t sub_1000EA87C(uint64_t a1, uint64_t a2)
{
  v8[1] = a1;
  _OWORD v8[2] = a2;
  v8[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v8[0] - 8);
  __chkstk_darwin(v8[0]);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  static OS_dispatch_queue.main.getter();
  static DispatchQoS.unspecified.getter();
  v8[3] = _swiftEmptyArrayStorage;
  sub_1000BAA5C((unint64_t *)&qword_1007054C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000CBE70((uint64_t *)&unk_100709900);
  sub_10009449C((unint64_t *)&qword_1007054D0, (uint64_t *)&unk_100709900);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v8[0]);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of DOCFakeStaticContentProgress.identifier()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v8[0] = v4;
  v8[1] = v6;
  return AnyHashable.init<A>(_:)();
}

id variable initialization expression of DOCFakeStaticContentProgress.progress()
{
  id v0 = objc_allocWithZone((Class)NSProgress);

  return [v0 init];
}

unint64_t variable initialization expression of DOCFileOperationsManager.trackedItemsByID()
{
  return sub_1004932E0((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of DOCFileOperationsManager.observers()
{
  sub_1000CBE70(&qword_1007054E8);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t variable initialization expression of DOCFileOperationsManager.testablesProviderObservance@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C((uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

double variable initialization expression of DOCInlineRenameController.previousKeyboardFrame@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of DOCMetadataFolderSizingViewModel.folderSize@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C((uint64_t (*)(void))&type metadata accessor for DOCFolderSize, a1);
}

uint64_t variable initialization expression of DOCItemCollectionView.focusableCollectionViewState()
{
  type metadata accessor for DOCFocusableCollectionViewState();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtC5Files31DOCFocusableCollectionViewState_indexPathForMostRecentlySelectedItem;
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtC5Files31DOCFocusableCollectionViewState_indexPathForSelectionExtensionStart, 1, 1, v2);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC5Files31DOCFocusableCollectionViewState_hasFocus) = 0;
  return v0;
}

id variable initialization expression of DOCItemCollectionView.backgroundTapGestureRecognizer()
{
  id v0 = objc_allocWithZone((Class)UITapGestureRecognizer);

  return [v0 init];
}

uint64_t _s5Files28DOCOperationCombinedProgressC7debugID33_1A97632AB0D3E1E013EFFCB739CB2E29LLSsvpfi_0()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v4 = sub_100062330(6);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t variable initialization expression of DOCOperationProgress._cachedLocalizedOperationDescription()
{
  return 0;
}

uint64_t variable initialization expression of DOCPreviewController.source()
{
  return 0;
}

uint64_t variable initialization expression of DOCPreviewController.importedURL@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EAF8C((uint64_t (*)(void))&type metadata accessor for URL, a1);
}

uint64_t variable initialization expression of DOCViewController.appearStateTracker()
{
  type metadata accessor for DOCAppearStateTracker();
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

uint64_t variable initialization expression of DOCItemCollectionCellContent.gridItemLayoutTraits@<X0>(uint64_t a1@<X8>)
{
  sub_10008FA08((uint64_t)v3);
  return sub_1000CBE0C((uint64_t)v3, a1, (uint64_t *)&unk_100705550);
}

uint64_t variable initialization expression of DOCItemCollectionCellContent.listItemLayoutTraits@<X0>(uint64_t a1@<X8>)
{
  sub_10008F9F0(v3);
  return sub_1000CBE0C((uint64_t)v3, a1, (uint64_t *)&unk_10070AD40);
}

uint64_t sub_1000EAF8C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

double variable initialization expression of DOCItemCollectionCellContent.stackMetrics@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

id variable initialization expression of DOCItemCollectionCellContent.thumbnailUpdateLock()
{
  id v0 = objc_allocWithZone((Class)NSLock);

  return [v0 init];
}

id variable initialization expression of DOCItemCollectionCellContent._titleColor()
{
  id v0 = [self labelColor];

  return v0;
}

id variable initialization expression of DOCItemCollectionCellContent.trailingAttachmentcolor()
{
  id v0 = [self secondaryLabelColor];

  return v0;
}

uint64_t variable initialization expression of DOCItemCollectionCellContent._titleWithTags@<X0>(uint64_t a1@<X8>)
{
  sub_1000951C8((uint64_t)v3);
  return sub_1000CBE0C((uint64_t)v3, a1, &qword_100705560);
}

double variable initialization expression of DOCItemCollectionCellContent.minimumProgressFractionForStatusTextUpdate()
{
  return 0.05;
}

uint64_t sub_1000EB120(uint64_t a1, uint64_t a2)
{
  return sub_1000ED7F8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSNumber sub_1000EB144()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t sub_1000EB14C(uint64_t a1, uint64_t a2)
{
  uint64_t result = static Float._forceBridgeFromObjectiveC(_:result:)();
  *(_DWORD *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 1;
  return result;
}

uint64_t sub_1000EB1A0(uint64_t a1, uint64_t a2)
{
  char v3 = static Float._conditionallyBridgeFromObjectiveC(_:result:)();
  *(_DWORD *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 1;
  return v3 & 1;
}

uint64_t sub_1000EB1F8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = static Float._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v3;
  return result;
}

void sub_1000EB22C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000EB234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_1000EB254@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1000EB268@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_1000EB27C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000EB2A8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1000EB2CC(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1000EB2E0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000EB2F4(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000EB308()
{
  return *v0 == 0;
}

void *sub_1000EB318(void *result)
{
  *v1 &= ~*result;
  return result;
}

Swift::Int sub_1000EB32C()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000EB374()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000EB3A0()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

NSNumber sub_1000EB3E4()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_1000EB3EC(uint64_t a1, uint64_t a2)
{
  uint64_t result = static CGFloat._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_1000EB440(uint64_t a1, uint64_t a2)
{
  char v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t sub_1000EB498@<X0>(void *a1@<X8>)
{
  uint64_t result = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v3;
  return result;
}

uint64_t sub_1000EB4C0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_1000EB4C8(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1000EB4D0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1000EB4E4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

_DWORD *sub_1000EB4F8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1000EB524@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1000EB548(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1000EB55C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000EB570(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000EB584(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000EB598(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000EB5AC()
{
  return *v0 == 0;
}

_DWORD *sub_1000EB5BC(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_1000EB5D0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000EB5E4(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1000EB614(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1000EB628(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_1000EB63C(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C(&qword_1007060B0, type metadata accessor for UIDocumentBrowserError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000EB6A8(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C(&qword_1007060B0, type metadata accessor for UIDocumentBrowserError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000EB718(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C((unint64_t *)&qword_1007060E8, type metadata accessor for UIDocumentBrowserError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void *sub_1000EB784@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000EB798(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000EB7C8(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1000EB7DC(void *result)
{
  *v1 &= *result;
  return result;
}

void sub_1000EB7F0(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_1000EB7FC()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_1000EB828(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000EB8A0(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000EB920@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000EB964(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C(&qword_100706108, type metadata accessor for CSSearchQueryError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000EB9D0(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C(&qword_100706108, type metadata accessor for CSSearchQueryError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000EBA3C(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C(&qword_100706138, type metadata accessor for CSSearchQueryError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_1000EBAA8()
{
  return *v0;
}

BOOL sub_1000EBAB0(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000EBAC4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000EBB0C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000EBB50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100574168(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1000EBB90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1000F9A88(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

BOOL sub_1000EBBD0(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000EBBE4(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t sub_1000EBBF8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000EBC08(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C((unint64_t *)&qword_1007060E8, type metadata accessor for UIDocumentBrowserError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000EBC74(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C((unint64_t *)&qword_1007060E8, type metadata accessor for UIDocumentBrowserError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000EBCE0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BAA5C((unint64_t *)&qword_1007060E8, type metadata accessor for UIDocumentBrowserError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000EBD70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BAA5C((unint64_t *)&qword_1007060E8, type metadata accessor for UIDocumentBrowserError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000EBDF0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_10057416C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

BOOL sub_1000EBE30(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_1000EBE44@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000EBE50()
{
  sub_1000BAA5C(&qword_100705B48, type metadata accessor for DOCDocumentSourceIdentifier);
  sub_1000BAA5C((unint64_t *)&unk_100705B50, type metadata accessor for DOCDocumentSourceIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void *sub_1000EBF0C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000EBF18()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000EBF28(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C(&qword_100706138, type metadata accessor for CSSearchQueryError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000EBF94(uint64_t a1)
{
  uint64_t v2 = sub_1000BAA5C(&qword_100706138, type metadata accessor for CSSearchQueryError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000EC000(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BAA5C(&qword_100706138, type metadata accessor for CSSearchQueryError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000EC090()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000EC0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BAA5C(&qword_100706138, type metadata accessor for CSSearchQueryError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000EC144()
{
  return Hasher._finalize()();
}

uint64_t sub_1000EC1A4()
{
  sub_1000BAA5C(&qword_100705AF8, type metadata accessor for TextStyle);
  sub_1000BAA5C(&qword_100705B00, type metadata accessor for TextStyle);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

_DWORD *sub_1000EC260@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

float sub_1000EC270@<S0>(_DWORD *a1@<X8>)
{
  float result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_1000EC27C()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC338()
{
  sub_1000BAA5C((unint64_t *)&qword_100706230, type metadata accessor for Key);
  sub_1000BAA5C(&qword_100706238, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC3F4()
{
  sub_1000BAA5C((unint64_t *)&qword_1007069D0, type metadata accessor for FPAction);
  sub_1000BAA5C(&qword_100705B60, type metadata accessor for FPAction);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC4B0()
{
  sub_1000BAA5C(&qword_100705AE8, type metadata accessor for DOCSpotlightEnumeratedItemIdentifier);
  sub_1000BAA5C(&qword_100705AF0, type metadata accessor for DOCSpotlightEnumeratedItemIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC56C()
{
  sub_1000BAA5C(&qword_100705AD8, type metadata accessor for Name);
  sub_1000BAA5C(&qword_100705AE0, type metadata accessor for Name);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC628()
{
  sub_1000BAA5C(&qword_100705B18, type metadata accessor for FPProviderDomainID);
  sub_1000BAA5C(&qword_100705B20, type metadata accessor for FPProviderDomainID);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC6E4()
{
  sub_1000BAA5C(&qword_100706210, type metadata accessor for URLResourceKey);
  sub_1000BAA5C(&qword_100706218, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC7A0()
{
  sub_1000BAA5C(&qword_100706188, type metadata accessor for NSFileProviderItemIdentifier);
  sub_1000BAA5C(&qword_100706190, type metadata accessor for NSFileProviderItemIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC85C()
{
  sub_1000BAA5C((unint64_t *)&qword_100705B38, type metadata accessor for ProgressUserInfoKey);
  sub_1000BAA5C(&qword_100705B40, type metadata accessor for ProgressUserInfoKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC918()
{
  sub_1000BAA5C(&qword_100706168, type metadata accessor for FileOperationKind);
  sub_1000BAA5C(&qword_100706170, type metadata accessor for FileOperationKind);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000EC9D4()
{
  sub_1000BAA5C(&qword_100706250, type metadata accessor for FPProviderID);
  sub_1000BAA5C(&qword_100706258, type metadata accessor for FPProviderID);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ECA90()
{
  sub_1000BAA5C((unint64_t *)&qword_1007061C0, type metadata accessor for AttributeName);
  sub_1000BAA5C(&qword_1007061C8, type metadata accessor for AttributeName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ECB4C()
{
  sub_1000BAA5C(&qword_1007061B0, type metadata accessor for TraitKey);
  sub_1000BAA5C(&qword_1007061B8, type metadata accessor for TraitKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void *sub_1000ECC08@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

double sub_1000ECC18@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t sub_1000ECC24()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ECCEC()
{
  sub_1000BAA5C(&qword_100706240, type metadata accessor for UIContentSizeCategory);
  sub_1000BAA5C(&qword_100706248, type metadata accessor for UIContentSizeCategory);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ECDA8()
{
  sub_1000BAA5C(&qword_100705AC8, type metadata accessor for NSFileProviderDomainIdentifier);
  sub_1000BAA5C(&qword_100705AD0, type metadata accessor for NSFileProviderDomainIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ECE64()
{
  sub_1000BAA5C(&qword_100706178, type metadata accessor for DOCIntentLocationType);
  sub_1000BAA5C(&qword_100706180, type metadata accessor for DOCIntentLocationType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ECF20()
{
  sub_1000BAA5C(&qword_100705B28, type metadata accessor for NSFileProviderSearchFilter);
  sub_1000BAA5C(&qword_100705B30, type metadata accessor for NSFileProviderSearchFilter);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ECFDC()
{
  sub_1000BAA5C(&qword_100706220, type metadata accessor for ActivityType);
  sub_1000BAA5C(&qword_100706228, type metadata accessor for ActivityType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ED098()
{
  sub_1000BAA5C((unint64_t *)&unk_10070CEA0, type metadata accessor for DOCTagRegistryChangeKey);
  sub_1000BAA5C(&qword_100706160, type metadata accessor for DOCTagRegistryChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ED154()
{
  sub_1000BAA5C(&qword_100705B08, type metadata accessor for NSKeyValueChangeKey);
  sub_1000BAA5C(&qword_100705B10, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ED210()
{
  sub_1000BAA5C(&qword_100706260, type metadata accessor for CAGradientLayerType);
  sub_1000BAA5C(&qword_100706268, type metadata accessor for CAGradientLayerType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ED2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BAA5C((unint64_t *)&qword_1007060E8, type metadata accessor for UIDocumentBrowserError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000ED350@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000ED37C()
{
  sub_1000BAA5C(&qword_1007061F0, type metadata accessor for AVFileType);
  sub_1000BAA5C(&qword_1007061F8, type metadata accessor for AVFileType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void sub_1000ED438(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000ED444()
{
  sub_1000BAA5C(&qword_1007061D0, type metadata accessor for LaunchOptionsKey);
  sub_1000BAA5C(&qword_1007061D8, type metadata accessor for LaunchOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ED500()
{
  sub_1000BAA5C((unint64_t *)&qword_100706200, type metadata accessor for NSFileProviderServiceName);
  sub_1000BAA5C(&qword_100706208, type metadata accessor for NSFileProviderServiceName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ED5BC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000ED604()
{
  sub_1000BAA5C(&qword_100706148, type metadata accessor for PDFDocumentWriteOption);
  sub_1000BAA5C((unint64_t *)&unk_100706150, type metadata accessor for PDFDocumentWriteOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000ED6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BAA5C(&qword_100706138, type metadata accessor for CSSearchQueryError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000ED744()
{
  return Float.hashValue.getter(*v0);
}

void sub_1000ED74C()
{
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = *v0;
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t sub_1000ED780(uint64_t a1)
{
  if ((*v1 & 0x7FFFFFFF) != 0) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  return static Hasher._hash(seed:bytes:count:)(a1, v2, 4);
}

uint64_t sub_1000ED794()
{
  return Double.hashValue.getter(*v0);
}

void sub_1000ED79C()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t sub_1000ED7D0(uint64_t a1)
{
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  return static Hasher._hash(seed:_:)(a1, v2);
}

uint64_t sub_1000ED7E0(uint64_t a1, uint64_t a2)
{
  return sub_1000ED7F8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000ED7F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000ED83C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

BOOL sub_1000ED890(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL sub_1000ED8A4(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000ED8B8()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1000ED944(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_10008E1D0(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      char v12 = static AnyHashable.== infix(_:_:)();
      sub_10008E17C((uint64_t)v17);
      if (v12) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_10008E17C(a2);
    sub_10008E1D0(*(void *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10008E1D0(a2, (uint64_t)v17);
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000F1D70((Swift::Int)v17, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_1000EDAC0(void *a1, void *a2)
{
  return sub_1000EE510(a1, a2, (uint64_t *)&unk_1007179E0, type metadata accessor for FPAction);
}

uint64_t sub_1000EDAE0(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100181884((uint64_t)v21, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000F7ECC(a2, a3);
    sub_1000F1EDC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v21[0];
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v11 = ~v9;
  uint64_t v12 = *(void *)(v7 + 48);
  while (2)
  {
    uint64_t v13 = (void *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    switch(v14)
    {
      case 0:
        if (a3) {
          goto LABEL_4;
        }
        goto LABEL_32;
      case 1:
        if (a3 == 1) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 2:
        if (a3 == 2) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 3:
        if (a3 == 3) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 4:
        if (a3 == 4) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 5:
        if (a3 == 5) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 6:
        if (a3 == 6) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 7:
        if (a3 == 7) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 8:
        if (a3 == 8) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 9:
        if (a3 == 9) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 10:
        if (a3 != 10) {
          goto LABEL_4;
        }
LABEL_32:
        swift_bridgeObjectRelease();
        goto LABEL_33;
      default:
        if (a3 < 0xB
          || (*v13 == a2 ? (BOOL v15 = v14 == a3) : (BOOL v15 = 0),
              !v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
        {
LABEL_4:
          unint64_t v10 = (v10 + 1) & v11;
          if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
            goto LABEL_34;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        sub_1000F7EE0(a2, a3);
LABEL_33:
        uint64_t v16 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
        uint64_t v17 = *v16;
        unint64_t v18 = v16[1];
        *a1 = *v16;
        a1[1] = v18;
        sub_1000F7ECC(v17, v18);
        return 0;
    }
  }
}

uint64_t sub_1000EDD5C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000F2134(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000EDF0C(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000BAA5C(&qword_1007086E0, (void (*)(uint64_t))&type metadata accessor for UTType);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    id v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      long long v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1000BAA5C((unint64_t *)&qword_100705C30, (void (*)(uint64_t))&type metadata accessor for UTType);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    __int16 v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000F22D0((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1000EE230(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10009E6C4(0, (unint64_t *)&unk_100705CD0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_1004FD7B0(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_1000F077C(v27, (uint64_t *)&unk_10071A210);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_1004FDA74(v8, v24);
    *uint64_t v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10009E6C4(0, (unint64_t *)&unk_100705CD0);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        long long v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_1000F27D0((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10071A210, (unint64_t *)&unk_100705CD0);
    *uint64_t v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1000EE4F0(void *a1, void *a2)
{
  return sub_1000EE510(a1, a2, (uint64_t *)&unk_100705BA0, type metadata accessor for DOCDocumentSourceIdentifier);
}

uint64_t sub_1000EE510(void *a1, void *a2, uint64_t *a3, void (*a4)(void))
{
  char v5 = v4;
  uint64_t v8 = *v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *v5;
    *char v5 = 0x8000000000000000;
    id v26 = a2;
    sub_1000F258C((uint64_t)v26, v11, isUniquelyReferenced_nonNull_native, a3, a4);
    *char v5 = v32;
    swift_bridgeObjectRelease();
    *a1 = v26;
    return 1;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      uint64_t v18 = ~v10;
      do
      {
        unint64_t v11 = (v11 + 1) & v18;
        if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
          goto LABEL_16;
        }
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v24 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  id v28 = *(void **)(*(void *)(*v5 + 48) + 8 * v11);
  *a1 = v28;
  id v29 = v28;
  return 0;
}

uint64_t sub_1000EE744(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10009E6C4(0, (unint64_t *)&unk_100705C20);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_1004FD7E0(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_1000F077C(v27, &qword_1007177C0);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_1004FDA74(v8, v24);
    *uint64_t v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10009E6C4(0, (unint64_t *)&unk_100705C20);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_1000F27D0((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, &qword_1007177C0, (unint64_t *)&unk_100705C20);
    *uint64_t v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1000EEA04(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_1004FDA14(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_1000F077C(v27, &qword_10071A230);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_1004FDA74(v8, v24);
    *uint64_t v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_1000F27D0((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, &qword_10071A230, (unint64_t *)&qword_1007069C0);
    *uint64_t v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1000EECC4(unsigned char *a1, char a2)
{
  uint64_t v3 = v2;
  Swift::Int v6 = a2 & 1;
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2 & 1);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000F2964(v6, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(v7 + 48);
  if ((((v6 == 0) ^ *(unsigned __int8 *)(v11 + v10)) & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while ((((v6 == 0) ^ *(unsigned __int8 *)(v11 + v10)) & 1) == 0);
  }
  uint64_t result = 0;
  LOBYTE(v6) = *(unsigned char *)(*(void *)(*v3 + 48) + v10);
LABEL_8:
  *a1 = v6;
  return result;
}

uint64_t sub_1000EEE00(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000BAA5C((unint64_t *)&unk_100705B80, (void (*)(uint64_t))&type metadata accessor for URL);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    id v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1000BAA5C(&qword_100708600, (void (*)(uint64_t))&type metadata accessor for URL);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      Swift::Int v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000F2ACC((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

BOOL sub_1000EF16C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  unint64_t v2 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v1 + 32));
  uint64_t v3 = (1 << v2) & *(void *)(v1 + ((v2 >> 3) & 0xFFFFFFFFFFFFFF8) + 56);
  if (!v3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v0;
    uint64_t *v0 = 0x8000000000000000;
    sub_1000F2DD0(v2, isUniquelyReferenced_nonNull_native);
    uint64_t *v0 = v6;
    swift_bridgeObjectRelease();
  }
  return v3 == 0;
}

uint64_t sub_1000EF230(Swift::Int *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Swift::UInt v10 = String.hashValue.getter();
  Hasher._combine(_:)(v10);
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = *(void *)(v9 + 48);
    uint64_t v15 = (void *)(v14 + 24 * v13);
    BOOL v16 = *v15 == a2 && v15[1] == a3;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = (Swift::Int *)(*(void *)(*v4 + 48) + 24 * v13);
      Swift::Int v18 = v17[1];
      Swift::Int v19 = v17[2];
      *a1 = *v17;
      a1[1] = v18;
      a1[2] = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v21 = ~v12;
    while (1)
    {
      unint64_t v13 = (v13 + 1) & v21;
      if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        break;
      }
      Swift::Int v22 = (void *)(v14 + 24 * v13);
      BOOL v23 = *v22 == a2 && v22[1] == a3;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000F2ED0(a2, a3, a4, v13, isUniquelyReferenced_nonNull_native);
  *uint64_t v4 = v25;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  uint64_t result = 1;
  a1[2] = a4;
  return result;
}

uint64_t sub_1000EF41C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705C10);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      long long v29 = *(_OWORD *)v20;
      long long v30 = *(_OWORD *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 32);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)uint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000EF6E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705C40);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_51;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v32 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_52;
    }
    if (v15 >= v8) {
      break;
    }
    unint64_t v16 = v32[v15];
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v8) {
        break;
      }
      unint64_t v16 = v32[v10];
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v8) {
          break;
        }
        unint64_t v16 = v32[v10];
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 >= v8) {
            break;
          }
          unint64_t v16 = v32[v17];
          if (!v16)
          {
            while (1)
            {
              int64_t v10 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_53;
              }
              if (v10 >= v8) {
                goto LABEL_47;
              }
              unint64_t v16 = v32[v10];
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          int64_t v10 = v17;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    unint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    Hasher.init(_seed:)();
    switch(v19)
    {
      case 0:
        Swift::UInt v21 = 0;
        goto LABEL_37;
      case 1:
        Swift::UInt v21 = 1;
        goto LABEL_37;
      case 2:
        Swift::UInt v21 = 2;
        goto LABEL_37;
      case 3:
        Swift::UInt v21 = 3;
        goto LABEL_37;
      case 4:
        Swift::UInt v21 = 4;
        goto LABEL_37;
      case 5:
        Swift::UInt v21 = 5;
        goto LABEL_37;
      case 6:
        Swift::UInt v21 = 6;
        goto LABEL_37;
      case 7:
        Swift::UInt v21 = 7;
        goto LABEL_37;
      case 8:
        Swift::UInt v21 = 8;
        goto LABEL_37;
      case 9:
        Swift::UInt v21 = 9;
        goto LABEL_37;
      case 10:
        Swift::UInt v21 = 11;
LABEL_37:
        Hasher._combine(_:)(v21);
        break;
      default:
        Hasher._combine(_:)(0xAuLL);
        String.hash(into:)();
        break;
    }
    Swift::Int v22 = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v26 = 0;
    unint64_t v27 = (unint64_t)(63 - v23) >> 6;
    do
    {
      if (++v25 == v27 && (v26 & 1) != 0)
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        JUMPOUT(0x1000EFA88);
      }
      BOOL v28 = v25 == v27;
      if (v25 == v27) {
        unint64_t v25 = 0;
      }
      v26 |= v28;
      uint64_t v29 = *(void *)(v9 + 8 * v25);
    }
    while (v29 == -1);
    unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
LABEL_7:
    *(void *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    int64_t v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
    *int64_t v12 = v20;
    v12[1] = v19;
    ++*(void *)(v4 + 16);
  }
LABEL_47:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
  if (v30 > 63) {
    bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v32 = -1 << v30;
  }
  *(void *)(v2 + 16) = 0;
LABEL_51:
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000EFAB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70(&qword_100717A10);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000EFD94()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  double v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000CBE70(&qword_100705C38);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    double v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    double v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *double v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000BAA5C(&qword_1007086E0, (void (*)(uint64_t))&type metadata accessor for UTType);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_1000F0190(uint64_t a1)
{
  return sub_1000F077C(a1, (uint64_t *)&unk_10071A210);
}

uint64_t sub_1000F019C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_1000CBE70(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v29 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    unint64_t v31 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v4 + 56);
    int64_t v30 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v30) {
          goto LABEL_33;
        }
        unint64_t v17 = v31[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v30) {
            goto LABEL_33;
          }
          unint64_t v17 = v31[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v30) {
              goto LABEL_33;
            }
            unint64_t v17 = v31[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v30)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v29;
                uint64_t v28 = 1 << *(unsigned char *)(v4 + 32);
                if (v28 > 63) {
                  bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v31 = -1 << v28;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v17 = v31[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v30) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v31[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v4 + 48) + 8 * v15);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v20 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v22 = v20 & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_1000F04AC(uint64_t a1)
{
  return sub_1000F077C(a1, &qword_1007177C0);
}

uint64_t sub_1000F04B8(uint64_t a1)
{
  return sub_1000F077C(a1, &qword_10071A230);
}

uint64_t sub_1000F04C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705CE0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000F0770(uint64_t a1)
{
  return sub_1000F077C(a1, (uint64_t *)&unk_100705CC0);
}

uint64_t sub_1000F077C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_1000CBE70(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    int64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_1000F0A18()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  double v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000CBE70(&qword_100705B90);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    double v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    double v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *double v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000BAA5C((unint64_t *)&unk_100705B80, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_1000F0E14()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705D50);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_37;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_38;
    }
    if (v15 >= v9) {
      break;
    }
    unint64_t v16 = v6[v15];
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v9) {
        break;
      }
      unint64_t v16 = v6[v11];
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v9) {
          break;
        }
        unint64_t v16 = v6[v11];
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 >= v9) {
            break;
          }
          unint64_t v16 = v6[v17];
          if (!v16)
          {
            while (1)
            {
              int64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_39;
              }
              if (v11 >= v9) {
                goto LABEL_33;
              }
              unint64_t v16 = v6[v11];
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          int64_t v11 = v17;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v23 = 0;
    unint64_t v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1000F117CLL);
      }
      BOOL v25 = v22 == v24;
      if (v22 == v24) {
        unint64_t v22 = 0;
      }
      v23 |= v25;
      uint64_t v26 = *(void *)(v10 + 8 * v22);
    }
    while (v26 == -1);
    unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
LABEL_33:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000F1194()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70(&qword_100705A60);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v34 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v33 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v16 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v17 = v16 | (v10 << 6);
      }
      else
      {
        int64_t v18 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_33;
        }
        unint64_t v19 = v34[v18];
        ++v10;
        if (!v19)
        {
          int64_t v10 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v19 = v34[v10];
          if (!v19)
          {
            int64_t v10 = v18 + 2;
            if (v18 + 2 >= v33) {
              goto LABEL_33;
            }
            unint64_t v19 = v34[v10];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v33)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v32 = 1 << *(unsigned char *)(v2 + 32);
                if (v32 > 63) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v19 = v34[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v10 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v34[v10];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v10 << 6);
      }
      uint64_t v21 = *(void *)(v2 + 48) + 56 * v17;
      long long v22 = *(_OWORD *)v21;
      uint64_t v23 = *(void *)(v21 + 48);
      long long v24 = *(_OWORD *)(v21 + 32);
      long long v36 = *(_OWORD *)(v21 + 16);
      long long v37 = v24;
      uint64_t v38 = v23;
      long long v35 = v22;
      Hasher.init(_seed:)();
      sub_1000A6B78((void *)&v35 + 1, v37);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v8 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v11 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 56 * v11;
      long long v13 = v35;
      long long v14 = v36;
      long long v15 = v37;
      *(void *)(v12 + 48) = v38;
      *(_OWORD *)(v12 + 16) = v14;
      *(_OWORD *)(v12 + 32) = v15;
      *(_OWORD *)uint64_t v12 = v13;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000F14E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70(&qword_100705B98);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v23 = v2;
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (!v9)
      {
        int64_t v13 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v13 >= v10) {
          goto LABEL_31;
        }
        uint64_t v9 = v6[v13];
        ++v5;
        if (!v9)
        {
          int64_t v5 = v13 + 1;
          if (v13 + 1 >= v10) {
            goto LABEL_31;
          }
          uint64_t v9 = v6[v5];
          if (!v9)
          {
            int64_t v5 = v13 + 2;
            if (v13 + 2 >= v10) {
              goto LABEL_31;
            }
            uint64_t v9 = v6[v5];
            if (!v9)
            {
              int64_t v14 = v13 + 3;
              if (v14 >= v10)
              {
LABEL_31:
                uint64_t v22 = 1 << *(unsigned char *)(v23 + 32);
                if (v22 > 63) {
                  bzero(v6, ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v22;
                }
                uint64_t v1 = v0;
                *(void *)(v23 + 16) = 0;
                break;
              }
              uint64_t v9 = v6[v14];
              if (!v9)
              {
                while (1)
                {
                  int64_t v5 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_37;
                  }
                  if (v5 >= v10) {
                    goto LABEL_31;
                  }
                  uint64_t v9 = v6[v5];
                  ++v14;
                  if (v9) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v5 = v14;
            }
          }
        }
      }
LABEL_22:
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v18 = 0;
        unint64_t v19 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v19 && (v18 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v20 = v17 == v19;
          if (v17 == v19) {
            unint64_t v17 = 0;
          }
          v18 |= v20;
          uint64_t v21 = *(void *)(v11 + 8 * v17);
        }
        while (v21 == -1);
        unint64_t v12 = __clz(__rbit64(~v21)) + (v17 << 6);
      }
      v9 &= v9 - 1;
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000F1760()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705C50);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v27 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        int64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          return result;
        }
        if (v14 >= v27) {
          goto LABEL_41;
        }
        unint64_t v15 = v6[v14];
        ++v5;
        if (!v15)
        {
          int64_t v5 = v14 + 1;
          if (v14 + 1 >= v27) {
            goto LABEL_41;
          }
          unint64_t v15 = v6[v5];
          if (!v15)
          {
            int64_t v5 = v14 + 2;
            if (v14 + 2 >= v27) {
              goto LABEL_41;
            }
            unint64_t v15 = v6[v5];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v27)
              {
LABEL_41:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                goto LABEL_45;
              }
              unint64_t v15 = v6[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v5 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_47;
                  }
                  if (v5 >= v27) {
                    goto LABEL_41;
                  }
                  unint64_t v15 = v6[v5];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
      }
      int v17 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v13);
      Hasher.init(_seed:)();
      if (v17 == 2) {
        break;
      }
      if (v17 == 3)
      {
        Swift::UInt v18 = 2;
        goto LABEL_30;
      }
      if (v17 == 4)
      {
        Swift::UInt v18 = 3;
LABEL_30:
        Hasher._combine(_:)(v18);
        goto LABEL_32;
      }
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v17 & 1);
LABEL_32:
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_46;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v10 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(unsigned char *)(*(void *)(v4 + 48) + v11) = v17;
      ++*(void *)(v4 + 16);
    }
    Swift::UInt v18 = 1;
    goto LABEL_30;
  }
LABEL_45:
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000F1A74()
{
  uint64_t v1 = *v0;
  sub_1000CBE70(&qword_100705B78);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    unint64_t v29 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v7 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v8 = v2 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v6)
      {
        unint64_t v13 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v7) {
          goto LABEL_33;
        }
        unint64_t v16 = v29[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v7) {
            goto LABEL_33;
          }
          unint64_t v16 = v29[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v7) {
              goto LABEL_33;
            }
            unint64_t v16 = v29[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v7)
              {
LABEL_33:
                swift_release();
                uint64_t v28 = 1 << *(unsigned char *)(v1 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v29 = -1 << v28;
                }
                *(void *)(v1 + 16) = 0;
                break;
              }
              unint64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v7) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v29[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v6 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = *(void *)(v1 + 48) + 24 * v14;
      uint64_t v19 = *(void *)v18;
      long long v30 = *(_OWORD *)(v18 + 8);
      Hasher.init(_seed:)();
      Swift::UInt v20 = String.hashValue.getter();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v8 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v3 + 48) + 24 * v11;
      *(void *)uint64_t v12 = v19;
      *(_OWORD *)(v12 + 8) = v30;
      ++*(void *)(v3 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v0 = v3;
  return result;
}

Swift::Int sub_1000F1D70(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000EF41C();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_1000F30A8();
      goto LABEL_12;
    }
    sub_1000F45D4();
  }
  uint64_t v9 = *v3;
  uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      sub_10008E1D0(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = static AnyHashable.== infix(_:_:)();
      uint64_t result = sub_10008E17C((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_1000F1EDC(Swift::Int result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_1000EF6E8();
    }
    else
    {
      if (v10 > v9)
      {
        uint64_t result = (Swift::Int)sub_1000F3284();
        goto LABEL_40;
      }
      sub_1000F4868();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    sub_100181884((uint64_t)v24, v8, a2);
    uint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v14 = ~v12;
      uint64_t v15 = *(void *)(v11 + 48);
      while (1)
      {
        uint64_t v16 = (void *)(v15 + 16 * a3);
        uint64_t v17 = v16[1];
        switch(v17)
        {
          case 0:
            if (a2) {
              goto LABEL_11;
            }
            goto LABEL_39;
          case 1:
            if (a2 == 1) {
              goto LABEL_39;
            }
            goto LABEL_11;
          case 2:
            if (a2 == 2) {
              goto LABEL_39;
            }
            goto LABEL_11;
          case 3:
            if (a2 == 3) {
              goto LABEL_39;
            }
            goto LABEL_11;
          case 4:
            if (a2 != 4) {
              goto LABEL_11;
            }
            goto LABEL_39;
          case 5:
            if (a2 == 5) {
              goto LABEL_39;
            }
            goto LABEL_11;
          case 6:
            if (a2 == 6) {
              goto LABEL_39;
            }
            goto LABEL_11;
          case 7:
            if (a2 == 7) {
              goto LABEL_39;
            }
            goto LABEL_11;
          case 8:
            if (a2 == 8) {
              goto LABEL_39;
            }
            goto LABEL_11;
          case 9:
            if (a2 == 9) {
              goto LABEL_39;
            }
            goto LABEL_11;
          case 10:
            if (a2 == 10) {
              goto LABEL_39;
            }
            goto LABEL_11;
          default:
            if (a2 >= 0xB)
            {
              BOOL v18 = *v16 == v8 && v17 == a2;
              if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
LABEL_39:
                uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                goto LABEL_40;
              }
            }
LABEL_11:
            a3 = (a3 + 1) & v14;
            if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
              goto LABEL_40;
            }
            break;
        }
      }
    }
  }
LABEL_40:
  uint64_t v19 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  Swift::UInt v20 = (uint64_t *)(*(void *)(v19 + 48) + 16 * a3);
  uint64_t *v20 = v8;
  v20[1] = a2;
  uint64_t v21 = *(void *)(v19 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
    JUMPOUT(0x1000F2108);
  }
  *(void *)(v19 + 16) = v23;
  return result;
}

Swift::Int sub_1000F2134(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1000EFAB4();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000F3438();
      goto LABEL_22;
    }
    sub_1000F4C04();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        BOOL v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1000F22D0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000EFD94();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1000F3AE8((uint64_t (*)(void))&type metadata accessor for UTType, &qword_100705C38);
      goto LABEL_12;
    }
    sub_1000F4EB4();
  }
  uint64_t v12 = *v3;
  sub_1000BAA5C(&qword_1007086E0, (void (*)(uint64_t))&type metadata accessor for UTType);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1000BAA5C((unint64_t *)&qword_100705C30, (void (*)(uint64_t))&type metadata accessor for UTType);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F258C(uint64_t result, unint64_t a2, char a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7 = v5;
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v12 = v10 + 1;
  if (a3)
  {
    sub_1000F019C(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      uint64_t result = (uint64_t)sub_1000F35EC(a4);
LABEL_22:
      uint64_t v29 = *v7;
      *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v29 + 48) + 8 * a2) = v9;
      uint64_t v30 = *(void *)(v29 + 16);
      BOOL v31 = __OFADD__(v30, 1);
      uint64_t v32 = v30 + 1;
      if (!v31)
      {
        *(void *)(v29 + 16) = v32;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1000F5264(v12, a4);
  }
  uint64_t v13 = *v5;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v14 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    uint64_t v22 = ~v15;
    do
    {
      a2 = (a2 + 1) & v22;
      if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;
      if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26) {
        goto LABEL_25;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v28 & 1) == 0);
  }
LABEL_26:
  a5(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000F27D0(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_1000F077C(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1000F35EC(a4);
      goto LABEL_14;
    }
    sub_1000F5540(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10009E6C4(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

Swift::Int sub_1000F2964(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result & 1;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000F04C4();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_1000F379C();
      goto LABEL_14;
    }
    sub_1000F57B8();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (((v5 == 0) ^ *(unsigned __int8 *)(v10 + a2)))
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (((v5 == 0) ^ *(unsigned __int8 *)(v10 + a2))) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_1000F2ACC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  char v28 = v3;
  uint64_t v29 = v7;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1000F0A18();
    }
    else
    {
      if (v11 > v10)
      {
        sub_1000F3AE8((uint64_t (*)(void))&type metadata accessor for URL, &qword_100705B90);
        goto LABEL_12;
      }
      sub_1000F5A34();
    }
    uint64_t v12 = *v3;
    sub_1000BAA5C((unint64_t *)&unk_100705B80, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
    a2 = v13 & ~v14;
    uint64_t v30 = v12;
    uint64_t v15 = v12 + 56;
    if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v16 = ~v14;
      char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      uint64_t v18 = v7 + 16;
      uint64_t v17 = v19;
      uint64_t v20 = *(void *)(v18 + 56);
      while (1)
      {
        v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
        sub_1000BAA5C(&qword_100708600, (void (*)(uint64_t))&type metadata accessor for URL);
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
        if (v21) {
          break;
        }
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_12;
        }
      }
LABEL_15:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x1000F2D88);
    }
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(void *)(v23 + 16) = v27;
  return result;
}

Swift::Int sub_1000F2DD0(Swift::Int result, char a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *(void *)(*v2 + 16);
  unint64_t v5 = *(void *)(*v2 + 24);
  if (v5 <= v4 || (a2 & 1) == 0)
  {
    if (a2)
    {
      sub_1000F14E8();
      goto LABEL_8;
    }
    if (v5 <= v4)
    {
      sub_1000F6430();
LABEL_8:
      uint64_t v6 = *v2;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      unint64_t v3 = result & ~(-1 << *(unsigned char *)(v6 + 32));
      if ((*(void *)(v6 + ((v3 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v3)) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    uint64_t result = (Swift::Int)sub_1000F4104();
  }
LABEL_9:
  uint64_t v7 = *v2;
  *(void *)(*v2 + 8 * (v3 >> 6) + 56) |= 1 << v3;
  uint64_t v8 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (!v9)
  {
    *(void *)(v7 + 16) = v10;
    return result;
  }
  __break(1u);
LABEL_12:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_1000F2ED0(Swift::Int result, Swift::Int a2, Swift::Int a3, unint64_t i, char a5)
{
  uint64_t v6 = v5;
  Swift::Int v10 = result;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_21;
  }
  if (a5)
  {
    sub_1000F1A74();
  }
  else
  {
    if (v12 > v11)
    {
      uint64_t result = (Swift::Int)sub_1000F43F8();
      goto LABEL_21;
    }
    sub_1000F6958();
  }
  uint64_t v13 = *v5;
  Hasher.init(_seed:)();
  Swift::UInt v14 = String.hashValue.getter();
  Hasher._combine(_:)(v14);
  uint64_t result = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  Swift::Int i = result & ~v15;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v17 = *(void *)(v13 + 48);
    uint64_t v18 = (void *)(v17 + 24 * i);
    if (*v18 == v10 && v18[1] == a2) {
      goto LABEL_24;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_24;
    }
    uint64_t v20 = ~v15;
    for (Swift::Int i = (i + 1) & v20; ((*(void *)(v16 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; Swift::Int i = (i + 1) & v20)
    {
      char v21 = (void *)(v17 + 24 * i);
      if (*v21 == v10 && v21[1] == a2) {
        goto LABEL_24;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_24;
      }
    }
  }
LABEL_21:
  uint64_t v23 = *v6;
  *(void *)(*v6 + 8 * (i >> 6) + 56) |= 1 << i;
  uint64_t v24 = (Swift::Int *)(*(void *)(v23 + 48) + 24 * i);
  *uint64_t v24 = v10;
  v24[1] = a2;
  v24[2] = a3;
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_24:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000F30A8()
{
  uint64_t v1 = v0;
  sub_1000CBE70((uint64_t *)&unk_100705C10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t result = (void *)sub_10008E1D0(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    long long v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000F3278()
{
  return sub_1000F35EC((uint64_t *)&unk_1007179E0);
}

void *sub_1000F3284()
{
  uint64_t v1 = v0;
  sub_1000CBE70((uint64_t *)&unk_100705C40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_1000F7ECC(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F3438()
{
  uint64_t v1 = v0;
  sub_1000CBE70(&qword_100717A10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000F35EC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000CBE70(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000F3790()
{
  return sub_1000F35EC(&qword_1007177C0);
}

void *sub_1000F379C()
{
  uint64_t v1 = v0;
  sub_1000CBE70((uint64_t *)&unk_100705CE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F3930()
{
  uint64_t v1 = v0;
  sub_1000CBE70(&qword_100705B70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    id result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000F3ADC()
{
  return sub_1000F35EC((uint64_t *)&unk_100705CC0);
}

void *sub_1000F3AE8(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v25 - v7;
  sub_1000CBE70(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  id result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  BOOL v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    id result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1000F3D98()
{
  uint64_t v1 = v0;
  sub_1000CBE70((uint64_t *)&unk_100705D50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F3F2C()
{
  uint64_t v1 = v0;
  sub_1000CBE70(&qword_100705A60);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 56 * v15;
    id result = (void *)sub_1000CE280(*(void *)(v2 + 48) + 56 * v15, (uint64_t)v24);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    uint64_t v18 = v25;
    long long v19 = v24[2];
    long long v20 = v24[1];
    *(_OWORD *)uint64_t v17 = v24[0];
    *(_OWORD *)(v17 + 16) = v20;
    *(_OWORD *)(v17 + 32) = v19;
    *(void *)(v17 + 48) = v18;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F4104()
{
  uint64_t v1 = v0;
  sub_1000CBE70(&qword_100705B98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_27:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (!v12)
    {
      int64_t v14 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v14 >= v13) {
        goto LABEL_27;
      }
      uint64_t v12 = *(void *)(v6 + 8 * v14);
      ++v9;
      if (!v12)
      {
        int64_t v9 = v14 + 1;
        if (v14 + 1 >= v13) {
          goto LABEL_27;
        }
        uint64_t v12 = *(void *)(v6 + 8 * v9);
        if (!v12)
        {
          int64_t v9 = v14 + 2;
          if (v14 + 2 >= v13) {
            goto LABEL_27;
          }
          uint64_t v12 = *(void *)(v6 + 8 * v9);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_12:
    v12 &= v12 - 1;
  }
  int64_t v15 = v14 + 3;
  if (v15 >= v13) {
    goto LABEL_27;
  }
  uint64_t v12 = *(void *)(v6 + 8 * v15);
  if (v12)
  {
    int64_t v9 = v15;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_27;
    }
    uint64_t v12 = *(void *)(v6 + 8 * v9);
    ++v15;
    if (v12) {
      goto LABEL_12;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_1000F4264()
{
  uint64_t v1 = v0;
  sub_1000CBE70((uint64_t *)&unk_100705C50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F43F8()
{
  uint64_t v1 = v0;
  sub_1000CBE70(&qword_100705B78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = *(_OWORD *)(v17 + 8);
    *(void *)uint64_t v18 = *(void *)v17;
    *(_OWORD *)(v18 + 8) = v19;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000F45D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705C10);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_10008E1D0(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    long long v15 = v29[0];
    long long v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)uint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F4868()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705C40);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_49;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_50;
    }
    if (v15 >= v31) {
      break;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v31) {
        break;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v31) {
          break;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v10);
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 >= v31) {
            break;
          }
          unint64_t v16 = *(void *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              int64_t v10 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_51;
              }
              if (v10 >= v31) {
                goto LABEL_47;
              }
              unint64_t v16 = *(void *)(v6 + 8 * v10);
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          int64_t v10 = v17;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    unint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    Hasher.init(_seed:)();
    switch(v19)
    {
      case 0:
        Swift::UInt v21 = 0;
        goto LABEL_37;
      case 1:
        Swift::UInt v21 = 1;
        goto LABEL_37;
      case 2:
        Swift::UInt v21 = 2;
        goto LABEL_37;
      case 3:
        Swift::UInt v21 = 3;
        goto LABEL_37;
      case 4:
        Swift::UInt v21 = 4;
        goto LABEL_37;
      case 5:
        Swift::UInt v21 = 5;
        goto LABEL_37;
      case 6:
        Swift::UInt v21 = 6;
        goto LABEL_37;
      case 7:
        Swift::UInt v21 = 7;
        goto LABEL_37;
      case 8:
        Swift::UInt v21 = 8;
        goto LABEL_37;
      case 9:
        Swift::UInt v21 = 9;
        goto LABEL_37;
      case 10:
        Swift::UInt v21 = 11;
LABEL_37:
        Hasher._combine(_:)(v21);
        break;
      default:
        Hasher._combine(_:)(0xAuLL);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        break;
    }
    Swift::Int v22 = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v26 = 0;
    unint64_t v27 = (unint64_t)(63 - v23) >> 6;
    do
    {
      if (++v25 == v27 && (v26 & 1) != 0)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        JUMPOUT(0x1000F4BD8);
      }
      BOOL v28 = v25 == v27;
      if (v25 == v27) {
        unint64_t v25 = 0;
      }
      v26 |= v28;
      uint64_t v29 = *(void *)(v9 + 8 * v25);
    }
    while (v29 == -1);
    unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
LABEL_7:
    *(void *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    int64_t v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
    *int64_t v12 = v20;
    v12[1] = v19;
    ++*(void *)(v4 + 16);
  }
LABEL_47:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_49:
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000F4C04()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70(&qword_100717A10);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F4EB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000CBE70(&qword_100705C38);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000BAA5C(&qword_1007086E0, (void (*)(uint64_t))&type metadata accessor for UTType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F5264(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_1000CBE70(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  char v29 = v2;
  uint64_t v30 = v4 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v4 + 56);
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    unint64_t v19 = *(void **)(*(void *)(v4 + 48) + 8 * v15);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v20 = v19;
    String.hash(into:)();
    Swift::Int v21 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v6 + 48) + 8 * v13) = v20;
    ++*(void *)(v6 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v29;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v30 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F5540(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_1000CBE70(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F57B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705CE0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F5A34()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000CBE70(&qword_100705B90);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000BAA5C((unint64_t *)&unk_100705B80, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F5DE4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705D50);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_35;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v15 >= v9) {
      break;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v9) {
        break;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v9) {
          break;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v17 >= v9) {
            break;
          }
          unint64_t v16 = *(void *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              int64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_37;
              }
              if (v11 >= v9) {
                goto LABEL_33;
              }
              unint64_t v16 = *(void *)(v6 + 8 * v11);
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          int64_t v11 = v17;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v23 = 0;
    unint64_t v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x1000F6118);
      }
      BOOL v25 = v22 == v24;
      if (v22 == v24) {
        unint64_t v22 = 0;
      }
      v23 |= v25;
      uint64_t v26 = *(void *)(v10 + 8 * v22);
    }
    while (v26 == -1);
    unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
LABEL_33:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_35:
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000F6130()
{
  uint64_t v1 = *v0;
  sub_1000CBE70(&qword_100705A60);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v27 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v28 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v15 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v16 = v15 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v28) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v27 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v27 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v27 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_24:
    sub_1000CE280(*(void *)(v1 + 48) + 56 * v16, (uint64_t)v29);
    Hasher.init(_seed:)();
    sub_1000A6B78((void *)v29 + 1, v30);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v7 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v21) & ~*(void *)(v7 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v7 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v10 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v3 + 48) + 56 * v10;
    long long v12 = v29[0];
    long long v13 = v29[1];
    long long v14 = v30;
    *(void *)(v11 + 48) = v31;
    *(_OWORD *)(v11 + 16) = v13;
    *(_OWORD *)(v11 + 32) = v14;
    *(_OWORD *)uint64_t v11 = v12;
    ++*(void *)(v3 + 16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v28)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v27 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v28) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v27 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F6430()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70(&qword_100705B98);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (!v9)
    {
      int64_t v13 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      if (v13 >= v10) {
        goto LABEL_31;
      }
      uint64_t v9 = *(void *)(v6 + 8 * v13);
      ++v5;
      if (!v9)
      {
        int64_t v5 = v13 + 1;
        if (v13 + 1 >= v10) {
          goto LABEL_31;
        }
        uint64_t v9 = *(void *)(v6 + 8 * v5);
        if (!v9)
        {
          int64_t v5 = v13 + 2;
          if (v13 + 2 >= v10) {
            goto LABEL_31;
          }
          uint64_t v9 = *(void *)(v6 + 8 * v5);
          if (!v9) {
            break;
          }
        }
      }
    }
LABEL_22:
    Hasher.init(_seed:)();
    Hasher._combine(_:)(0);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v18 = 0;
      unint64_t v19 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v19 && (v18 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v20 = v17 == v19;
        if (v17 == v19) {
          unint64_t v17 = 0;
        }
        v18 |= v20;
        uint64_t v21 = *(void *)(v11 + 8 * v17);
      }
      while (v21 == -1);
      unint64_t v12 = __clz(__rbit64(~v21)) + (v17 << 6);
    }
    v9 &= v9 - 1;
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    ++*(void *)(v4 + 16);
  }
  int64_t v14 = v13 + 3;
  if (v14 >= v10)
  {
LABEL_31:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_33;
  }
  uint64_t v9 = *(void *)(v6 + 8 * v14);
  if (v9)
  {
    int64_t v5 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_31;
    }
    uint64_t v9 = *(void *)(v6 + 8 * v5);
    ++v14;
    if (v9) {
      goto LABEL_22;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1000F6674()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000CBE70((uint64_t *)&unk_100705C50);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_43:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v14 >= v26) {
      goto LABEL_41;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_41;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_41;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_24:
    int v17 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v13);
    Hasher.init(_seed:)();
    switch(v17)
    {
      case 2:
        Swift::UInt v18 = 1;
        goto LABEL_30;
      case 3:
        Swift::UInt v18 = 2;
        goto LABEL_30;
      case 4:
        Swift::UInt v18 = 3;
LABEL_30:
        Hasher._combine(_:)(v18);
        goto LABEL_32;
    }
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v17 & 1);
LABEL_32:
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v10 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(unsigned char *)(*(void *)(v4 + 48) + v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_41:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_43;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v26) {
      goto LABEL_41;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1000F6958()
{
  uint64_t v1 = *v0;
  sub_1000CBE70(&qword_100705B78);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v5 = v1 + 56;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v1 + 56);
  int64_t v28 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v8 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v1 + 48) + 24 * v14;
    uint64_t v19 = *(void *)v18;
    long long v29 = *(_OWORD *)(v18 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::UInt v20 = String.hashValue.getter();
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v8 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v3 + 48) + 24 * v11;
    *(void *)uint64_t v12 = v19;
    *(_OWORD *)(v12 + 8) = v29;
    ++*(void *)(v3 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v5 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F6C34(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 < 0) {
    uint64_t v6 = v3;
  }
  if (v3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
    Swift::Int v10 = 0;
    do
    {
      Swift::Int v11 = v10 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v10);
      Swift::Int v10 = v11;
    }
    while (v7 != v11);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v12;
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
}

void type metadata accessor for NSFileProviderDomainIdentifier(uint64_t a1)
{
}

void type metadata accessor for NSFileProviderSearchQueryTrashedItemsMembership(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceLayoutDirection(uint64_t a1)
{
}

void type metadata accessor for UIPopoverArrowDirection(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for DOCMetadataLevelOfDetail(uint64_t a1)
{
}

void type metadata accessor for NodeNotificationOptions(uint64_t a1)
{
}

void type metadata accessor for FINodeProperty(uint64_t a1)
{
}

void type metadata accessor for UIDropOperation(uint64_t a1)
{
}

void type metadata accessor for DOCThumbnailDrawingStyle(uint64_t a1)
{
}

void type metadata accessor for _UIVisualEffectBackdropViewRenderMode(uint64_t a1)
{
}

void type metadata accessor for CGBlendMode(uint64_t a1)
{
}

__n128 initializeWithTake for DOCItemCollectionLayoutTraits.GridTraits.GroupedLayoutTraits(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for NSDirectionalEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for Operation(uint64_t a1)
{
}

uint64_t _s8SettingsVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionLayoutTraits.ItemStatusBadgeTraits(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionLayoutTraits.ItemStatusBadgeTraits(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for DOCSpotlightEnumeratedItemIdentifier(uint64_t a1)
{
}

void type metadata accessor for ElementSize(uint64_t a1)
{
}

void type metadata accessor for UIDocumentBrowserActionMenuSortOrder(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for TextStyle(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceIdiom(uint64_t a1)
{
}

void type metadata accessor for DOCItemCollectionRowStyle(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void type metadata accessor for FPProviderDomainID(uint64_t a1)
{
}

void type metadata accessor for NSFileProviderSearchFilter(uint64_t a1)
{
}

void type metadata accessor for DragState(uint64_t a1)
{
}

void type metadata accessor for ProgressUserInfoKey(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for DOCGridItemSpacing(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DOCGridItemSpacing(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for FPAction(uint64_t a1)
{
}

uint64_t sub_1000F7104()
{
  return sub_1000BAA5C(&qword_1007058C8, type metadata accessor for FPAction);
}

uint64_t sub_1000F714C()
{
  return sub_1000BAA5C(&qword_1007058D0, type metadata accessor for FPAction);
}

uint64_t sub_1000F7194()
{
  return sub_1000BAA5C(&qword_1007058D8, type metadata accessor for DOCDocumentSourceIdentifier);
}

uint64_t sub_1000F71DC()
{
  return sub_1000BAA5C(&qword_1007058E0, type metadata accessor for DOCDocumentSourceIdentifier);
}

uint64_t sub_1000F7224()
{
  return sub_1000BAA5C(&qword_1007058E8, type metadata accessor for DOCDocumentSourceIdentifier);
}

uint64_t sub_1000F726C()
{
  return sub_1000BAA5C(&qword_1007058F8, type metadata accessor for ProgressUserInfoKey);
}

uint64_t sub_1000F72B4()
{
  return sub_1000BAA5C(&qword_100705900, type metadata accessor for ProgressUserInfoKey);
}

uint64_t sub_1000F72FC()
{
  return sub_1000BAA5C(&qword_100705908, type metadata accessor for NSFileProviderSearchFilter);
}

uint64_t sub_1000F7344()
{
  return sub_1000BAA5C(&qword_100705910, type metadata accessor for NSFileProviderSearchFilter);
}

uint64_t sub_1000F738C()
{
  return sub_1000BAA5C(&qword_100705918, type metadata accessor for NSFileProviderSearchFilter);
}

uint64_t sub_1000F73D4()
{
  return sub_1000BAA5C(&qword_100705920, type metadata accessor for FPProviderDomainID);
}

uint64_t sub_1000F741C()
{
  return sub_1000BAA5C(&qword_100705928, type metadata accessor for FPProviderDomainID);
}

uint64_t sub_1000F7464()
{
  return sub_1000BAA5C(&qword_100705930, type metadata accessor for FPProviderDomainID);
}

uint64_t sub_1000F74AC()
{
  return sub_1000BAA5C(&qword_100705938, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1000F74F4()
{
  return sub_1000BAA5C(&qword_100705940, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1000F753C()
{
  return sub_1000BAA5C(&qword_100705948, type metadata accessor for DOCItemCollectionRowStyle);
}

uint64_t sub_1000F7584()
{
  return sub_1000BAA5C(&qword_100705950, type metadata accessor for DOCItemCollectionRowStyle);
}

uint64_t sub_1000F75CC()
{
  return sub_1000BAA5C(&qword_100705958, type metadata accessor for DOCItemCollectionRowStyle);
}

uint64_t sub_1000F7614()
{
  return sub_1000BAA5C(&qword_100705960, type metadata accessor for DOCItemCollectionRowStyle);
}

uint64_t sub_1000F765C()
{
  return sub_1000BAA5C(&qword_100705968, type metadata accessor for TextStyle);
}

uint64_t sub_1000F76A4()
{
  return sub_1000BAA5C(&qword_100705970, type metadata accessor for TextStyle);
}

uint64_t sub_1000F76EC()
{
  return sub_1000BAA5C(&qword_100705978, type metadata accessor for TextStyle);
}

uint64_t sub_1000F7734()
{
  return sub_1000BAA5C(&qword_100705980, type metadata accessor for UIDocumentBrowserActionMenuSortOrder);
}

uint64_t sub_1000F777C()
{
  return sub_1000BAA5C(&qword_100705988, type metadata accessor for DOCSpotlightEnumeratedItemIdentifier);
}

uint64_t sub_1000F77C4()
{
  return sub_1000BAA5C(&qword_100705990, type metadata accessor for DOCSpotlightEnumeratedItemIdentifier);
}

uint64_t sub_1000F780C()
{
  return sub_1000BAA5C(&qword_100705998, type metadata accessor for DOCSpotlightEnumeratedItemIdentifier);
}

uint64_t sub_1000F7854()
{
  return sub_1000BAA5C(&qword_1007059A0, type metadata accessor for DOCThumbnailDrawingStyle);
}

uint64_t sub_1000F789C()
{
  return sub_1000BAA5C(&qword_1007059A8, type metadata accessor for DOCThumbnailDrawingStyle);
}

uint64_t sub_1000F78E4()
{
  return sub_1000BAA5C(&qword_1007059B0, type metadata accessor for DOCThumbnailDrawingStyle);
}

uint64_t sub_1000F792C()
{
  return sub_1000BAA5C(&qword_1007059B8, type metadata accessor for DOCThumbnailDrawingStyle);
}

uint64_t sub_1000F7974()
{
  return sub_1000BAA5C(&qword_1007059C0, type metadata accessor for FINodeProperty);
}

uint64_t sub_1000F79BC()
{
  return sub_1000BAA5C(&qword_1007059C8, type metadata accessor for NodeNotificationOptions);
}

uint64_t sub_1000F7A04()
{
  return sub_1000BAA5C(&qword_1007059D0, type metadata accessor for NodeNotificationOptions);
}

uint64_t sub_1000F7A4C()
{
  return sub_1000BAA5C(&qword_1007059D8, type metadata accessor for NodeNotificationOptions);
}

uint64_t sub_1000F7A94()
{
  return sub_1000BAA5C(&qword_1007059E0, type metadata accessor for NodeNotificationOptions);
}

uint64_t sub_1000F7ADC()
{
  return sub_1000BAA5C(&qword_1007059E8, type metadata accessor for Name);
}

uint64_t sub_1000F7B24()
{
  return sub_1000BAA5C(&qword_1007059F0, type metadata accessor for Name);
}

uint64_t sub_1000F7B6C()
{
  return sub_1000BAA5C(&qword_1007059F8, type metadata accessor for Name);
}

uint64_t sub_1000F7BB4()
{
  return sub_1000BAA5C(&qword_100705A00, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_1000F7BFC()
{
  return sub_1000BAA5C(&qword_100705A08, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_1000F7C44()
{
  return sub_1000BAA5C(&qword_100705A10, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_1000F7C8C()
{
  return sub_1000BAA5C(&qword_100705A18, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t sub_1000F7CD4()
{
  return sub_1000BAA5C(&qword_100705A20, type metadata accessor for NSFileProviderDomainIdentifier);
}

uint64_t sub_1000F7D1C()
{
  return sub_1000BAA5C(&qword_100705A28, type metadata accessor for NSFileProviderDomainIdentifier);
}

uint64_t sub_1000F7D64()
{
  return sub_1000BAA5C(&qword_100705A30, type metadata accessor for NSFileProviderDomainIdentifier);
}

uint64_t sub_1000F7DAC()
{
  return sub_1000BAA5C(&qword_100705A38, type metadata accessor for UIUserInterfaceSizeClass);
}

uint64_t sub_1000F7DF4()
{
  return sub_1000BAA5C(&qword_100705A40, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1000F7E3C()
{
  return sub_1000BAA5C(&qword_100705A48, type metadata accessor for ProgressUserInfoKey);
}

uint64_t sub_1000F7E84()
{
  return sub_1000BAA5C((unint64_t *)&unk_100705A50, type metadata accessor for FPAction);
}

uint64_t sub_1000F7ECC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000F7EE0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for PDFDocumentWriteOption(uint64_t a1)
{
}

void type metadata accessor for DisplayMode(uint64_t a1)
{
}

void type metadata accessor for DOCTagRegistryChangeKey(uint64_t a1)
{
}

void type metadata accessor for Availability(uint64_t a1)
{
}

void type metadata accessor for UIDocumentBrowserError(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for FileOperationKind(uint64_t a1)
{
}

void type metadata accessor for FPArchiveFormat(uint64_t a1)
{
}

void type metadata accessor for DOCIntentLocationType(uint64_t a1)
{
}

void type metadata accessor for DOCServicePopoverTrackerRegion(uint64_t a1)
{
}

void type metadata accessor for NSFileProviderItemIdentifier(uint64_t a1)
{
}

void type metadata accessor for DOCDocumentInteractionMode(uint64_t a1)
{
}

void type metadata accessor for WFSystemContextualActionType(uint64_t a1)
{
}

void type metadata accessor for FPLastUsageUpdatePolicy(uint64_t a1)
{
}

void type metadata accessor for DOCDataOwnerState(uint64_t a1)
{
}

void type metadata accessor for CMFormatDescription(uint64_t a1)
{
}

__n128 sub_1000F8034(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DOCUniformHorizontalEdgeInsets(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DOCUniformHorizontalEdgeInsets(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMTime(uint64_t a1)
{
}

void type metadata accessor for Weight(uint64_t a1)
{
}

void type metadata accessor for TraitKey(uint64_t a1)
{
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

void type metadata accessor for DOCThumbnailStyle(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
}

void type metadata accessor for DOCSymbolicLocation(uint64_t a1)
{
}

void type metadata accessor for DOCUIPBrowserContentMode(uint64_t a1)
{
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
}

void type metadata accessor for AVFileType(uint64_t a1)
{
}

void type metadata accessor for NSFileProviderServiceName(uint64_t a1)
{
}

void type metadata accessor for ImportMode(uint64_t a1)
{
}

void type metadata accessor for DOCFolderIconType(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for CSSearchQueryError(uint64_t a1)
{
}

void type metadata accessor for DOCBrowserViewContext(uint64_t a1)
{
}

void type metadata accessor for ActivityType(uint64_t a1)
{
}

void type metadata accessor for SymbolScale(uint64_t a1)
{
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void type metadata accessor for DOCBadgeViewSize(uint64_t a1)
{
}

void type metadata accessor for ScrollDirection(uint64_t a1)
{
}

void type metadata accessor for FPProviderID(uint64_t a1)
{
}

void type metadata accessor for CAGradientLayerType(uint64_t a1)
{
}

void type metadata accessor for CGContext(uint64_t a1)
{
}

uint64_t sub_1000F829C()
{
  return sub_1000BAA5C(&qword_100705ED0, type metadata accessor for CAGradientLayerType);
}

uint64_t sub_1000F82E4()
{
  return sub_1000BAA5C(&qword_100705ED8, type metadata accessor for CAGradientLayerType);
}

uint64_t sub_1000F832C()
{
  return sub_1000BAA5C(&qword_100705EE0, type metadata accessor for CAGradientLayerType);
}

uint64_t sub_1000F8374()
{
  return sub_1000BAA5C(&qword_100705EE8, type metadata accessor for FPProviderID);
}

uint64_t sub_1000F83BC()
{
  return sub_1000BAA5C(&qword_100705EF0, type metadata accessor for FPProviderID);
}

uint64_t sub_1000F8404()
{
  return sub_1000BAA5C(&qword_100705EF8, type metadata accessor for FPProviderID);
}

uint64_t sub_1000F844C()
{
  return sub_1000BAA5C(&qword_100705F00, type metadata accessor for ScrollDirection);
}

uint64_t sub_1000F8494()
{
  return sub_1000BAA5C(&qword_100705F08, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1000F84DC()
{
  return sub_1000BAA5C(&qword_100705F10, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1000F8524()
{
  return sub_1000BAA5C(&qword_100705F18, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1000F856C()
{
  return sub_1000BAA5C(&qword_100705F20, type metadata accessor for Key);
}

uint64_t sub_1000F85B4()
{
  return sub_1000BAA5C(&qword_100705F28, type metadata accessor for Key);
}

uint64_t sub_1000F85FC()
{
  return sub_1000BAA5C(&qword_100705F30, type metadata accessor for ActivityType);
}

uint64_t sub_1000F8644()
{
  return sub_1000BAA5C(&qword_100705F38, type metadata accessor for ActivityType);
}

uint64_t sub_1000F868C()
{
  return sub_1000BAA5C(&qword_100705F40, type metadata accessor for ActivityType);
}

uint64_t sub_1000F86D4()
{
  return sub_1000BAA5C(&qword_100705F48, type metadata accessor for CSSearchQueryError);
}

uint64_t sub_1000F871C()
{
  return sub_1000BAA5C(&qword_100705F50, type metadata accessor for CSSearchQueryError);
}

uint64_t sub_1000F8764()
{
  return sub_1000BAA5C(&qword_100705F58, type metadata accessor for URLResourceKey);
}

uint64_t sub_1000F87AC()
{
  return sub_1000BAA5C(&qword_100705F60, type metadata accessor for URLResourceKey);
}

uint64_t sub_1000F87F4()
{
  return sub_1000BAA5C(&qword_100705F68, type metadata accessor for URLResourceKey);
}

uint64_t sub_1000F883C()
{
  return sub_1000BAA5C(&qword_100705F70, type metadata accessor for DOCFolderIconType);
}

uint64_t sub_1000F8884()
{
  return sub_1000BAA5C(&qword_100705F78, type metadata accessor for NSFileProviderServiceName);
}

uint64_t sub_1000F88CC()
{
  return sub_1000BAA5C(&qword_100705F80, type metadata accessor for NSFileProviderServiceName);
}

uint64_t sub_1000F8914()
{
  return sub_1000BAA5C(&qword_100705F88, type metadata accessor for AVFileType);
}

uint64_t sub_1000F895C()
{
  return sub_1000BAA5C(&qword_100705F90, type metadata accessor for AVFileType);
}

uint64_t sub_1000F89A4()
{
  return sub_1000BAA5C(&qword_100705F98, type metadata accessor for AVFileType);
}

uint64_t sub_1000F89EC()
{
  return sub_1000BAA5C(&qword_100705FA0, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1000F8A34()
{
  return sub_1000BAA5C(&qword_100705FA8, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1000F8A7C()
{
  return sub_1000BAA5C(&qword_100705FB0, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1000F8AC4()
{
  return sub_1000BAA5C(&qword_100705FB8, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_1000F8B0C()
{
  return sub_1000BAA5C(&qword_100705FC0, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_1000F8B54()
{
  return sub_1000BAA5C(&qword_100705FC8, type metadata accessor for AttributeName);
}

uint64_t sub_1000F8B9C()
{
  return sub_1000BAA5C(&qword_100705FD0, type metadata accessor for AttributeName);
}

uint64_t sub_1000F8BE4()
{
  return sub_1000BAA5C(&qword_100705FD8, type metadata accessor for TraitKey);
}

uint64_t sub_1000F8C2C()
{
  return sub_1000BAA5C(&qword_100705FE0, type metadata accessor for TraitKey);
}

uint64_t sub_1000F8C74()
{
  return sub_1000BAA5C(&qword_100705FE8, type metadata accessor for TraitKey);
}

uint64_t sub_1000F8CBC()
{
  return sub_1000BAA5C(&qword_100705FF0, type metadata accessor for Weight);
}

uint64_t sub_1000F8D04()
{
  return sub_1000BAA5C(&qword_100705FF8, type metadata accessor for Weight);
}

uint64_t sub_1000F8D4C()
{
  return sub_1000BAA5C(&qword_100706000, type metadata accessor for Weight);
}

uint64_t sub_1000F8D94()
{
  return sub_1000BAA5C(&qword_100706008, type metadata accessor for NSFileProviderItemIdentifier);
}

uint64_t sub_1000F8DDC()
{
  return sub_1000BAA5C(&qword_100706010, type metadata accessor for NSFileProviderItemIdentifier);
}

uint64_t sub_1000F8E24()
{
  return sub_1000BAA5C(&qword_100706018, type metadata accessor for NSFileProviderItemIdentifier);
}

uint64_t sub_1000F8E6C()
{
  return sub_1000BAA5C(&qword_100706020, type metadata accessor for DOCIntentLocationType);
}

uint64_t sub_1000F8EB4()
{
  return sub_1000BAA5C(&qword_100706028, type metadata accessor for DOCIntentLocationType);
}

uint64_t sub_1000F8EFC()
{
  return sub_1000BAA5C(&qword_100706030, type metadata accessor for DOCIntentLocationType);
}

uint64_t sub_1000F8F44()
{
  return sub_1000BAA5C(&qword_100706038, type metadata accessor for FileOperationKind);
}

uint64_t sub_1000F8F8C()
{
  return sub_1000BAA5C(&qword_100706040, type metadata accessor for FileOperationKind);
}

uint64_t sub_1000F8FD4()
{
  return sub_1000BAA5C(&qword_100706048, type metadata accessor for FileOperationKind);
}

uint64_t sub_1000F901C()
{
  return sub_1000BAA5C(&qword_100706050, type metadata accessor for UIDocumentBrowserError);
}

uint64_t sub_1000F9064()
{
  return sub_1000BAA5C(&qword_100706058, type metadata accessor for UIDocumentBrowserError);
}

uint64_t sub_1000F90AC()
{
  return sub_1000BAA5C(&qword_100706060, type metadata accessor for Availability);
}

uint64_t sub_1000F90F4()
{
  return sub_1000BAA5C(&qword_100706068, type metadata accessor for Availability);
}

uint64_t sub_1000F913C()
{
  return sub_1000BAA5C(&qword_100706070, type metadata accessor for Availability);
}

uint64_t sub_1000F9184()
{
  return sub_1000BAA5C(&qword_100706078, type metadata accessor for Availability);
}

uint64_t sub_1000F91CC()
{
  return sub_1000BAA5C(&qword_100706080, type metadata accessor for DOCTagRegistryChangeKey);
}

uint64_t sub_1000F9214()
{
  return sub_1000BAA5C(&qword_100706088, type metadata accessor for DOCTagRegistryChangeKey);
}

uint64_t sub_1000F925C()
{
  return sub_1000BAA5C(&qword_100706090, type metadata accessor for PDFDocumentWriteOption);
}

uint64_t sub_1000F92A4()
{
  return sub_1000BAA5C(&qword_100706098, type metadata accessor for PDFDocumentWriteOption);
}

uint64_t sub_1000F92EC()
{
  return sub_1000BAA5C(&qword_1007060A0, type metadata accessor for PDFDocumentWriteOption);
}

uint64_t sub_1000F9334()
{
  return sub_1000BAA5C(&qword_1007060A8, type metadata accessor for DOCTagRegistryChangeKey);
}

uint64_t sub_1000F937C()
{
  return sub_1000BAA5C(&qword_1007060B0, type metadata accessor for UIDocumentBrowserError);
}

uint64_t sub_1000F93C4()
{
  return sub_1000BAA5C(&qword_1007060B8, type metadata accessor for UIDocumentBrowserError);
}

uint64_t sub_1000F940C()
{
  return sub_1000BAA5C(&qword_1007060C0, type metadata accessor for UIDocumentBrowserError);
}

uint64_t sub_1000F9454()
{
  return sub_1000BAA5C(&qword_1007060C8, _s3__C4CodeOMa_0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_1000F94B0()
{
  return sub_1000BAA5C(&qword_1007060D0, _s3__C4CodeOMa_0);
}

unint64_t sub_1000F94FC()
{
  unint64_t result = qword_1007060D8;
  if (!qword_1007060D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007060D8);
  }
  return result;
}

uint64_t sub_1000F9550()
{
  return sub_1000BAA5C(&qword_1007060E0, _s3__C4CodeOMa_0);
}

uint64_t sub_1000F9598()
{
  return sub_1000BAA5C((unint64_t *)&qword_1007060E8, type metadata accessor for UIDocumentBrowserError);
}

uint64_t sub_1000F95E0()
{
  return sub_1000BAA5C(&qword_1007060F0, type metadata accessor for AttributeName);
}

uint64_t sub_1000F9628()
{
  return sub_1000BAA5C(&qword_1007060F8, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_1000F9670()
{
  return sub_1000BAA5C(&qword_100706100, type metadata accessor for NSFileProviderServiceName);
}

uint64_t sub_1000F96B8()
{
  return sub_1000BAA5C(&qword_100706108, type metadata accessor for CSSearchQueryError);
}

uint64_t sub_1000F9700()
{
  return sub_1000BAA5C(&qword_100706110, type metadata accessor for CSSearchQueryError);
}

uint64_t sub_1000F9748()
{
  return sub_1000BAA5C(&qword_100706118, type metadata accessor for CSSearchQueryError);
}

uint64_t sub_1000F9790()
{
  return sub_1000BAA5C(&qword_100706120, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_1000F97EC()
{
  return sub_1000BAA5C(&qword_100706128, type metadata accessor for Code);
}

uint64_t sub_1000F9834()
{
  return sub_1000BAA5C(&qword_100706130, type metadata accessor for Code);
}

uint64_t sub_1000F987C()
{
  return sub_1000BAA5C(&qword_100706138, type metadata accessor for CSSearchQueryError);
}

unint64_t sub_1000F98C4()
{
  unint64_t result = qword_1007061A8;
  if (!qword_1007061A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007061A8);
  }
  return result;
}

void type metadata accessor for Attributes(uint64_t a1)
{
}

void type metadata accessor for State(uint64_t a1)
{
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
}

void type metadata accessor for CTLine(uint64_t a1)
{
}

uint64_t sub_1000F9968()
{
  return sub_1000BAA5C(&qword_1007062A0, type metadata accessor for Attributes);
}

uint64_t sub_1000F99B0()
{
  return sub_1000BAA5C(&qword_1007062A8, type metadata accessor for Attributes);
}

uint64_t sub_1000F99F8()
{
  return sub_1000BAA5C(&qword_1007062B0, type metadata accessor for Attributes);
}

uint64_t sub_1000F9A40()
{
  return sub_1000BAA5C(&qword_1007062B8, type metadata accessor for Attributes);
}

uint64_t sub_1000F9A88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void sub_1000F9B64()
{
  if (*(unsigned char *)(v0 + 24))
  {
    switch(*(unsigned char *)(v0 + 8))
    {
      case 7:
        swift_bridgeObjectRelease();
        goto LABEL_6;
      case 9:
        return;
      default:
        char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v2 & 1) == 0) {
          return;
        }
LABEL_6:
        double v1 = 75.0;
        break;
    }
  }
  else
  {
    double v1 = *(double *)(v0 + 16) * 100.0;
  }
  id v3 = [self progressWithTotalUnitCount:100];
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x1000F9D90);
  }
  id v4 = v3;
  [v3 setCompletedUnitCount:(uint64_t)v1];

  *(void *)(v0 + 80) = v4;
  *(unsigned char *)(v0 + 8) = 7;
}

void *sub_1000F9DB8()
{
  uint64_t v1 = *v0;
  uint64_t result = _swiftEmptyArrayStorage;
  if (*v0)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v5 = *(unsigned __int8 *)(v1 + i + 32);
        switch(*(unsigned char *)(v1 + i + 32))
        {
          case 1:
            uint64_t v5 = 1;
            break;
          case 2:
            uint64_t v5 = 2;
            break;
          case 3:
            uint64_t v5 = 3;
            break;
          case 4:
            uint64_t v5 = 4;
            break;
          case 5:
            uint64_t v5 = 5;
            break;
          case 6:
            uint64_t v5 = 6;
            break;
          case 7:
            uint64_t v5 = 7;
            break;
          default:
            break;
        }
        id v6 = objc_allocWithZone((Class)DOCTag);
        NSString v7 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v8 = [v6 initWithDisplayName:v7 labelIndex:v5 type:1];

        if (v8)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
  }
  return result;
}

uint64_t sub_1000F9FD8()
{
  long long v1 = v0[3];
  v4[2] = v0[2];
  v4[3] = v1;
  void v4[4] = v0[4];
  long long v2 = v0[1];
  v4[0] = *v0;
  v4[1] = v2;
  sub_1000CBE0C((uint64_t)v4 + 8, (uint64_t)&v5, &qword_100706478);
  sub_1000CBE0C((uint64_t)&v5, (uint64_t)&v6, &qword_100706478);
  return byte_1005A00B2[v6];
}

uint64_t sub_1000FA050@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
  uint64_t v5 = *(void *)(v4 - 8);
  CGRect v59 = (uint64_t *)v4;
  uint64_t v60 = v5;
  __chkstk_darwin(v4);
  uint64_t v55 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_1000CBE70((uint64_t *)&unk_10071A190);
  uint64_t v7 = __chkstk_darwin(v57);
  uint64_t v56 = (uint64_t)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  double v53 = (char *)&v53 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v53 - v12;
  __chkstk_darwin(v11);
  int64_t v15 = (char *)&v53 - v14;
  uint64_t v16 = sub_1000CBE70(&qword_1007076B0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v61 = 0;
  unint64_t v62 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  unint64_t v61 = 0xD00000000000001ELL;
  unint64_t v62 = 0x80000001005D3E70;
  objc_super v54 = a1;
  id v23 = [a1 displayName];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  BOOL v26 = v25;

  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    __chkstk_darwin(v29);
    dispatch thunk of DOCThreadSafeState.withSharedAccess<A>(_:)();
    sub_1000CBC00((uint64_t)v15, (uint64_t)v13, (uint64_t *)&unk_10071A190);
    long long v30 = *(uint64_t (**)(char *, uint64_t, uint64_t *))(v60 + 48);
    v60 += 48;
    int v31 = v30(v13, 1, v59);
    sub_1000CBBA4((uint64_t)v13, (uint64_t *)&unk_10071A190);
    if (v31 == 1)
    {
      uint64_t v32 = sub_1000FA5EC(v54, (uint64_t)v22);
      __chkstk_darwin(v32);
      uint64_t v33 = (uint64_t)v53;
      dispatch thunk of DOCThreadSafeState.withSharedAccess<A>(_:)();
      sub_1000CBBA4((uint64_t)v15, (uint64_t *)&unk_10071A190);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      sub_1000CBE0C(v33, (uint64_t)v15, (uint64_t *)&unk_10071A190);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    }
    uint64_t v34 = v56;
    sub_1000CBE0C((uint64_t)v15, v56, (uint64_t *)&unk_10071A190);
    uint64_t v35 = v59;
    if (v30((char *)v34, 1, v59) == 1)
    {
      uint64_t result = sub_1000CBBA4(v34, (uint64_t *)&unk_10071A190);
      uint64_t v60 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      double v44 = 0;
      uint64_t v45 = 1;
    }
    else
    {
      uint64_t v46 = v55;
      sub_1000FC60C(v34, v55);
      double v47 = (uint64_t *)(v46 + *((int *)v35 + 5));
      uint64_t v48 = v47[1];
      uint64_t v58 = *v47;
      uint64_t v49 = v47[2];
      uint64_t v37 = v47[3];
      uint64_t v38 = v47[4];
      uint64_t v39 = v47[5];
      uint64_t v50 = v47[6];
      uint64_t v41 = v47[7];
      uint64_t v42 = v47[8];
      uint64_t v51 = v47[9];
      double v44 = (void *)v47[10];
      CGRect v59 = a2;
      uint64_t v60 = v48;
      uint64_t v52 = v49;
      sub_1000FC670(v58, v48, v49, v37, v38, v39, v50, v41, v42, v51, v44);
      uint64_t result = sub_1000FC6E0(v46);
      uint64_t v43 = v51;
      uint64_t v40 = v50;
      uint64_t v36 = v52;
      uint64_t v45 = v58;
      a2 = v59;
    }
    *a2 = v45;
    a2[1] = v60;
    a2[2] = v36;
    a2[3] = v37;
    a2[4] = v38;
    a2[5] = v39;
    a2[6] = v40;
    a2[7] = v41;
    a2[8] = v42;
    a2[9] = v43;
    a2[10] = (uint64_t)v44;
  }
  return result;
}

uint64_t sub_1000FA5EC(void *a1, uint64_t a2)
{
  uint64_t v53 = a2;
  uint64_t v54 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
  __chkstk_darwin(v52);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 stringForKey:v10];

  uint64_t v56 = v6;
  if (v11)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  id v15 = [a1 displayName];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  uint64_t v55 = v2;
  if (!v14)
  {
    uint64_t v19 = v4;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
    uint64_t v47 = 0;
    uint64_t v46 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    goto LABEL_12;
  }
  if (v16 != v12 || v14 != v18)
  {
    uint64_t v19 = v4;
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_10;
    }
    uint64_t v20 = 0;
    uint64_t v47 = 0;
    uint64_t v46 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v14 = 0;
LABEL_12:
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v45 = 0;
    double v44 = 0;
    uint64_t v24 = 1;
    goto LABEL_13;
  }
  uint64_t v19 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  long long v66 = 0;
  CGRect v59 = _swiftEmptyArrayStorage;
  unsigned __int16 v60 = 265;
  uint64_t v61 = 0;
  unsigned __int8 v62 = 1;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  sub_1000F9B64();
  uint64_t v24 = (uint64_t)v59;
  uint64_t v47 = v61;
  uint64_t v46 = v62;
  uint64_t v22 = *((void *)&v63 + 1);
  uint64_t v21 = v63;
  uint64_t v14 = v64;
  uint64_t v57 = v65;
  uint64_t v58 = *((void *)&v64 + 1);
  uint64_t v45 = *((void *)&v65 + 1);
  double v44 = v66;
  uint64_t v20 = v60;
LABEL_13:
  uint64_t v25 = v52;
  BOOL v26 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v50 = v8;
  uint64_t v27 = v54;
  v26(v8, v53, v54);
  int64_t v28 = (uint64_t *)&v8[*(int *)(v25 + 20)];
  *int64_t v28 = v24;
  v28[1] = v20;
  uint64_t v29 = v24;
  uint64_t v52 = v20;
  uint64_t v53 = v24;
  uint64_t v30 = v20;
  uint64_t v31 = v47;
  uint64_t v32 = v46;
  v28[2] = v47;
  v28[3] = v32;
  uint64_t v48 = v21;
  v28[4] = v21;
  v28[5] = v22;
  uint64_t v33 = v22;
  uint64_t v49 = v22;
  uint64_t v51 = v14;
  uint64_t v34 = v58;
  v28[6] = v14;
  v28[7] = v34;
  uint64_t v35 = v34;
  uint64_t v58 = v34;
  uint64_t v36 = v57;
  uint64_t v37 = v45;
  v28[8] = v57;
  v28[9] = v37;
  uint64_t v38 = v44;
  v28[10] = (uint64_t)v44;
  sub_1000FC670(v29, v30, v31, v32, v21, v33, v14, v35, v36, v37, v38);
  uint64_t v39 = v56;
  uint64_t v40 = URL.standardizedFileURL.getter();
  __chkstk_darwin(v40);
  uint64_t v41 = (uint64_t)v50;
  dispatch thunk of DOCThreadSafeState.withExclusiveAccess<A>(_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v27);
  sub_1000FC870(v53, v52, v31, v32, v48, v49, v51, v58, v57, v37, v38);
  return sub_1000FC6E0(v41);
}

uint64_t sub_1000FAA88(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v52 = a3;
  id v48 = a2;
  uint64_t v51 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario() - 8;
  __chkstk_darwin(v51);
  uint64_t v50 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v66 - 8);
  uint64_t v6 = __chkstk_darwin(v66);
  uint64_t v49 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  NSString v10 = (char *)&v36 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  LODWORD(v47) = *(unsigned __int16 *)(a1 + 24);
  uint64_t v46 = *(void *)(a1 + 32);
  LODWORD(v45) = *(unsigned __int8 *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v44 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v43 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v41 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v42 = v12;
  URL.appendingPathComponent(_:)();
  long long v65 = 0;
  uint64_t v55 = v13;
  unsigned __int16 v56 = v47;
  uint64_t v57 = v46;
  unsigned __int8 v58 = v45;
  uint64_t v59 = v44;
  uint64_t v60 = v14;
  uint64_t v61 = v43;
  uint64_t v62 = v15;
  uint64_t v63 = v41;
  uint64_t v64 = v17;
  sub_1000F9B64();
  uint64_t v18 = v55;
  uint64_t v47 = v57;
  uint64_t v46 = v58;
  uint64_t v45 = v59;
  uint64_t v37 = v60;
  uint64_t v19 = v62;
  uint64_t v44 = v61;
  uint64_t v43 = v63;
  uint64_t v36 = v64;
  uint64_t v20 = v65;
  uint64_t v39 = v65;
  uint64_t v40 = v56;
  uint64_t v21 = v12;
  uint64_t v22 = v66;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v21, v66);
  id v48 = v20;
  uint64_t v41 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = v19;
  uint64_t v38 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v49;
  URL.standardizedFileURL.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v10, v22);
  BOOL v26 = v50;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v50, v24, v22);
  uint64_t v27 = &v26[*(int *)(v51 + 28)];
  uint64_t v28 = (uint64_t)v26;
  uint64_t v29 = v40;
  *(void *)uint64_t v27 = v18;
  *((void *)v27 + 1) = v29;
  uint64_t v30 = v46;
  *((void *)v27 + 2) = v47;
  *((void *)v27 + 3) = v30;
  uint64_t v31 = v37;
  *((void *)v27 + 4) = v45;
  *((void *)v27 + 5) = v31;
  *((void *)v27 + 6) = v44;
  *((void *)v27 + 7) = v23;
  uint64_t v32 = v36;
  *((void *)v27 + 8) = v43;
  *((void *)v27 + 9) = v32;
  *((void *)v27 + 10) = v39;
  uint64_t v33 = v42;
  URL.standardizedFileURL.getter();
  uint64_t v53 = v10;
  uint64_t v54 = v26;
  dispatch thunk of DOCThreadSafeState.withExclusiveAccess<A>(_:)();
  uint64_t v34 = v66;
  v25(v10, v66);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000FC6E0(v28);
  return ((uint64_t (*)(char *, uint64_t))v25)(v33, v34);
}

uint64_t sub_1000FAF00(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v34 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v34 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(v34 + 56) + 80 * i;
    uint64_t v18 = *(void *)v17;
    LOWORD(v14) = *(_WORD *)(v17 + 8);
    uint64_t v19 = *(void *)(v17 + 16);
    char v20 = *(unsigned char *)(v17 + 24);
    uint64_t v21 = *(void *)(v17 + 32);
    uint64_t v22 = *(void *)(v17 + 72);
    v26[0] = v15;
    v26[1] = v16;
    void v26[2] = v18;
    __int16 v27 = (__int16)v14;
    uint64_t v28 = v19;
    char v29 = v20;
    uint64_t v30 = v21;
    long long v31 = *(_OWORD *)(v17 + 40);
    long long v32 = *(_OWORD *)(v17 + 56);
    uint64_t v33 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(v26);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v8 >= v24) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v23 + 8 * v8);
    if (!v12) {
      break;
    }
LABEL_17:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v8 + 1;
  if (v8 + 1 >= v24) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v23 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v8 + 2;
  if (v8 + 2 >= v24) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v23 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v8 + 3;
  if (v8 + 3 >= v24) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v23 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v8 + 4;
  if (v8 + 4 >= v24) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v23 + 8 * v13);
  if (v12)
  {
LABEL_16:
    int64_t v8 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v24) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v23 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000FB1A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000CBE70(&qword_1007076B0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v30 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  id v20 = [a1 nodeURL];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v30 = a1;
    uint64_t v31 = a2;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v22(v17, v7, v4);
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v23(v17, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4) != 1)
    {
      v22(v19, v17, v4);
      v23(v19, 0, 1, v4);
      a2 = v31;
      goto LABEL_13;
    }
    a1 = v30;
    a2 = v31;
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v23(v17, 1, 1, v4);
  }
  id v24 = [a1 fpfs_fpItem];
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = [v24 fileURL];

    if (v26)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = 1;
    }
    v23(v14, v27, 1, v4);
    sub_1000CBE0C((uint64_t)v14, (uint64_t)v19, &qword_1007076B0);
  }
  else
  {
    v23(v19, 1, 1, v4);
  }
  sub_1000CBBA4((uint64_t)v17, &qword_1007076B0);
LABEL_13:
  sub_1000CBC00((uint64_t)v19, (uint64_t)v11, &qword_1007076B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
  {
    sub_1000CBBA4((uint64_t)v19, &qword_1007076B0);
    sub_1000CBBA4((uint64_t)v11, &qword_1007076B0);
    uint64_t v28 = 1;
  }
  else
  {
    URL.standardizedFileURL.getter();
    sub_1000CBBA4((uint64_t)v19, &qword_1007076B0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    uint64_t v28 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(a2, v28, 1, v4);
}

uint64_t sub_1000FB588@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v5 = sub_10017BB10(a2), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v9 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
    uint64_t v16 = *(void *)(v9 - 8);
    sub_1000FC80C(v8 + *(void *)(v16 + 72) * v7, a3);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v11 = a3;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v14 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v13 = v14;
    uint64_t v11 = a3;
    uint64_t v12 = 1;
  }

  return v10(v11, v12, 1, v13);
}

uint64_t sub_1000FB69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000CBE70((uint64_t *)&unk_10071A190);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, a2);
  sub_1000FC80C(a3, (uint64_t)v7);
  uint64_t v12 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 0, 1, v12);
  return sub_1004F1BDC((uint64_t)v7, (uint64_t)v10);
}

uint64_t sub_1000FB808()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DOCDebugUIScenarioManager()
{
  return self;
}

ValueMetadata *type metadata accessor for DOCDebugUIScenarioManager.State()
{
  return &type metadata for DOCDebugUIScenarioManager.State;
}

uint64_t sub_1000FB874@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v60 = a3;
  uint64_t v7 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  uint64_t v66 = v8;
  __chkstk_darwin(v7);
  uint64_t v62 = (uint64_t)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_1000CBE70((uint64_t *)&unk_10071A190);
  uint64_t v10 = __chkstk_darwin(v63);
  uint64_t v61 = (uint64_t)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v59 = (char *)v56 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v56 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v56 - v17;
  uint64_t v19 = sub_1000CBE70(&qword_1007076B0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  id v26 = (char *)v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)v56 - v27;
  unsigned __int8 v58 = a1;
  uint64_t v64 = a2;
  sub_1000FB1A0(a1, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    char v29 = &qword_1007076B0;
    uint64_t v30 = (uint64_t)v21;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v28, v21, v22);
    uint64_t v31 = URL.standardizedFileURL.getter();
    uint64_t v32 = *(void *)(v64 + 16);
    __chkstk_darwin(v31);
    v56[1] = v32;
    dispatch thunk of DOCThreadSafeState.withSharedAccess<A>(_:)();
    uint64_t v33 = *(void (**)(char *, uint64_t))(v23 + 8);
    v33(v26, v22);
    sub_1000CBC00((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_10071A190);
    uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
    v66 += 48;
    uint64_t v57 = v34;
    unsigned int v35 = v34((uint64_t)v16, 1, v65);
    sub_1000CBBA4((uint64_t)v16, (uint64_t *)&unk_10071A190);
    if (v35 == 1)
    {
      sub_1000FBE40(v58, v64);
      uint64_t v36 = URL.standardizedFileURL.getter();
      __chkstk_darwin(v36);
      uint64_t v37 = (uint64_t)v59;
      dispatch thunk of DOCThreadSafeState.withSharedAccess<A>(_:)();
      v33(v26, v22);
      sub_1000CBBA4((uint64_t)v18, (uint64_t *)&unk_10071A190);
      v33(v28, v22);
      sub_1000CBE0C(v37, (uint64_t)v18, (uint64_t *)&unk_10071A190);
    }
    else
    {
      v33(v28, v22);
    }
    uint64_t v38 = v61;
    sub_1000CBE0C((uint64_t)v18, v61, (uint64_t *)&unk_10071A190);
    uint64_t v39 = v65;
    if (v57(v38, 1, v65) != 1)
    {
      uint64_t v52 = v38;
      uint64_t v53 = v62;
      sub_1000FC60C(v52, v62);
      uint64_t v54 = (uint64_t *)(v53 + *(int *)(v39 + 20));
      uint64_t v51 = *v54;
      uint64_t v55 = v54[1];
      uint64_t v43 = v54[3];
      uint64_t v65 = v54[2];
      uint64_t v66 = v55;
      uint64_t v44 = v54[4];
      uint64_t v45 = v54[5];
      uint64_t v46 = v54[6];
      uint64_t v47 = v54[7];
      uint64_t v48 = v54[8];
      uint64_t v49 = v54[9];
      uint64_t v50 = (void *)v54[10];
      sub_1000FC670(v51, v55, v65, v43, v44, v45, v46, v47, v48, v49, v50);
      uint64_t result = sub_1000FC6E0(v62);
      uint64_t v42 = v65;
      uint64_t v41 = v66;
      goto LABEL_10;
    }
    char v29 = (uint64_t *)&unk_10071A190;
    uint64_t v30 = v38;
  }
  uint64_t result = sub_1000CBBA4(v30, v29);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 1;
LABEL_10:
  *a4 = v51;
  a4[1] = v41;
  a4[2] = v42;
  a4[3] = v43;
  a4[4] = v44;
  a4[5] = v45;
  a4[6] = v46;
  a4[7] = v47;
  a4[8] = v48;
  a4[9] = v49;
  a4[10] = (uint64_t)v50;
  return result;
}

uint64_t type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario()
{
  uint64_t result = qword_1007064D8;
  if (!qword_1007064D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FBE38@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000FB588(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1000FBE40(void *a1, uint64_t a2)
{
  uint64_t v62 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
  __chkstk_darwin(v62);
  uint64_t v61 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000CBE70(&qword_1007076B0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v49 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v49 - v22;
  sub_1000FB1A0(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_1000CBBA4((uint64_t)v7, &qword_1007076B0);
  }
  uint64_t v57 = v12;
  unsigned __int8 v58 = v15;
  uint64_t v59 = a2;
  uint64_t v25 = v18;
  unsigned __int16 v56 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v56(v23, v7, v8);
  uint64_t v26 = v9;
  URL.deletingLastPathComponent()();
  URL.appendingPathComponent(_:)();
  id v27 = [self defaultManager];
  URL.path.getter();
  uint64_t v28 = v21;
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v30 = [v27 fileExistsAtPath:v29];

  uint64_t v60 = v28;
  if (v30)
  {
    uint64_t v54 = v25;
    uint64_t v55 = v23;
    uint64_t v31 = Data.init(contentsOf:options:)();
    unint64_t v33 = v32;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1000FC79C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    uint64_t v52 = v63;
    uint64_t v53 = v31;
    uint64_t v41 = v58;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v58, v55, v8);
    uint64_t v42 = v57;
    URL.standardizedFileURL.getter();
    unint64_t v50 = v33;
    uint64_t v43 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v51 = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v43(v41, v8);
    uint64_t v44 = (uint64_t)v61;
    v56(v61, v42, v8);
    uint64_t v45 = v44 + *(int *)(v62 + 20);
    *(void *)uint64_t v45 = 1;
    *(_OWORD *)(v45 + 8) = 0u;
    *(_OWORD *)(v45 + 24) = 0u;
    *(_OWORD *)(v45 + 40) = 0u;
    *(_OWORD *)(v45 + 56) = 0u;
    *(_OWORD *)(v45 + 72) = 0u;
    uint64_t v46 = URL.standardizedFileURL.getter();
    uint64_t v47 = v59;
    __chkstk_darwin(v46);
    *(&v49 - 2) = (uint64_t)v41;
    *(&v49 - 1) = v44;
    dispatch thunk of DOCThreadSafeState.withExclusiveAccess<A>(_:)();
    v43(v41, v8);
    uint64_t v48 = sub_1000FC6E0(v44);
    __chkstk_darwin(v48);
    *(&v49 - 2) = (uint64_t)v60;
    *(&v49 - 1) = v47;
    sub_1000FAF00((void (*)(void *))sub_1000FC7F0, (uint64_t)(&v49 - 4), v52);
    sub_100021020(v53, v50);
    swift_bridgeObjectRelease();
    v43(v54, v8);
    v43(v55, v8);
    return ((uint64_t (*)(char *, uint64_t))v43)(v60, v8);
  }
  else
  {
    uint64_t v34 = v58;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v58, v23, v8);
    uint64_t v35 = v8;
    uint64_t v36 = v57;
    URL.standardizedFileURL.getter();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v26 + 8);
    v37(v34, v8);
    uint64_t v38 = (uint64_t)v61;
    v56(v61, v36, v35);
    uint64_t v39 = v38 + *(int *)(v62 + 20);
    *(void *)uint64_t v39 = 1;
    *(_OWORD *)(v39 + 8) = 0u;
    *(_OWORD *)(v39 + 24) = 0u;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
    *(_OWORD *)(v39 + 72) = 0u;
    uint64_t v40 = URL.standardizedFileURL.getter();
    __chkstk_darwin(v40);
    *(&v49 - 2) = (uint64_t)v34;
    *(&v49 - 1) = v38;
    dispatch thunk of DOCThreadSafeState.withExclusiveAccess<A>(_:)();
    v37(v34, v35);
    sub_1000FC6E0(v38);
    v37(v25, v35);
    v37(v23, v35);
    return ((uint64_t (*)(char *, uint64_t))v37)(v60, v35);
  }
}

uint64_t sub_1000FC60C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FC670(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (result != 1)
  {
    id v12 = a11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000FC6E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000FC73C(uint64_t a1)
{
  return sub_1000FB69C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1000FC744()
{
  unint64_t result = qword_10070ACE0;
  if (!qword_10070ACE0)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10070ACE0);
  }
  return result;
}

unint64_t sub_1000FC79C()
{
  unint64_t result = qword_100706470;
  if (!qword_100706470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706470);
  }
  return result;
}

uint64_t sub_1000FC7F0(uint64_t a1)
{
  return sub_1000FAA88(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000FC80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000FC870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a1 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void destroy for DOCDebugUIScenario(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 80);
}

uint64_t initializeWithCopy for DOCDebugUIScenario(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  return a1;
}

uint64_t assignWithCopy for DOCDebugUIScenario(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 80);
  uint64_t v6 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v6;
  id v7 = v6;

  return a1;
}

__n128 initializeWithTake for DOCDebugUIScenario(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for DOCDebugUIScenario(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for DOCDebugUIScenario(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 88)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCDebugUIScenario(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t *sub_1000FCC28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    if (*(void *)v10 == 1)
    {
      long long v11 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v11;
      *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
      *((void *)v9 + 10) = *((void *)v10 + 10);
      long long v12 = *((_OWORD *)v10 + 1);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v12;
    }
    else
    {
      *(void *)uint64_t v9 = *(void *)v10;
      *((_WORD *)v9 + 4) = *((_WORD *)v10 + 4);
      *((void *)v9 + 2) = *((void *)v10 + 2);
      v9[24] = v10[24];
      uint64_t v14 = *((void *)v10 + 5);
      *((void *)v9 + 4) = *((void *)v10 + 4);
      *((void *)v9 + 5) = v14;
      uint64_t v15 = *((void *)v10 + 7);
      *((void *)v9 + 6) = *((void *)v10 + 6);
      *((void *)v9 + 7) = v15;
      uint64_t v16 = *((void *)v10 + 9);
      *((void *)v9 + 8) = *((void *)v10 + 8);
      *((void *)v9 + 9) = v16;
      uint64_t v17 = (void *)*((void *)v10 + 10);
      *((void *)v9 + 10) = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v18 = v17;
    }
  }
  return a1;
}

void sub_1000FCD88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (void *)(a1 + *(int *)(a2 + 20));
  if (*v5 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)v5[10];
  }
}

uint64_t sub_1000FCE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  if (*(void *)v9 == 1)
  {
    long long v10 = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v8 + 48) = v10;
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
    *(void *)(v8 + 80) = *(void *)(v9 + 80);
    long long v11 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v11;
  }
  else
  {
    *(void *)uint64_t v8 = *(void *)v9;
    *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
    *(void *)(v8 + 16) = *(void *)(v9 + 16);
    *(unsigned char *)(v8 + 24) = *(unsigned char *)(v9 + 24);
    uint64_t v12 = *(void *)(v9 + 40);
    *(void *)(v8 + 32) = *(void *)(v9 + 32);
    *(void *)(v8 + 40) = v12;
    uint64_t v13 = *(void *)(v9 + 56);
    *(void *)(v8 + 48) = *(void *)(v9 + 48);
    *(void *)(v8 + 56) = v13;
    uint64_t v14 = *(void *)(v9 + 72);
    *(void *)(v8 + 64) = *(void *)(v9 + 64);
    *(void *)(v8 + 72) = v14;
    uint64_t v15 = *(void **)(v9 + 80);
    *(void *)(v8 + 80) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v15;
  }
  return a1;
}

uint64_t sub_1000FCF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7);
  if (*(void *)(a1 + v7) == 1)
  {
    if (v10 == 1)
    {
      long long v11 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v11;
      long long v12 = *(_OWORD *)(v9 + 32);
      long long v13 = *(_OWORD *)(v9 + 48);
      long long v14 = *(_OWORD *)(v9 + 64);
      *(void *)(v8 + 80) = *(void *)(v9 + 80);
      *(_OWORD *)(v8 + 48) = v13;
      *(_OWORD *)(v8 + 64) = v14;
      *(_OWORD *)(v8 + 32) = v12;
    }
    else
    {
      *(void *)uint64_t v8 = v10;
      *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
      *(unsigned char *)(v8 + 9) = *(unsigned char *)(v9 + 9);
      uint64_t v19 = *(void *)(v9 + 16);
      *(unsigned char *)(v8 + 24) = *(unsigned char *)(v9 + 24);
      *(void *)(v8 + 16) = v19;
      *(void *)(v8 + 32) = *(void *)(v9 + 32);
      *(void *)(v8 + 40) = *(void *)(v9 + 40);
      *(void *)(v8 + 48) = *(void *)(v9 + 48);
      *(void *)(v8 + 56) = *(void *)(v9 + 56);
      *(void *)(v8 + 64) = *(void *)(v9 + 64);
      *(void *)(v8 + 72) = *(void *)(v9 + 72);
      uint64_t v20 = *(void **)(v9 + 80);
      *(void *)(v8 + 80) = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v21 = v20;
    }
  }
  else if (v10 == 1)
  {
    sub_1000FD15C(a1 + v7);
    long long v15 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v15;
    long long v17 = *(_OWORD *)(v9 + 48);
    long long v16 = *(_OWORD *)(v9 + 64);
    long long v18 = *(_OWORD *)(v9 + 32);
    *(void *)(v8 + 80) = *(void *)(v9 + 80);
    *(_OWORD *)(v8 + 48) = v17;
    *(_OWORD *)(v8 + 64) = v16;
    *(_OWORD *)(v8 + 32) = v18;
  }
  else
  {
    *(void *)uint64_t v8 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
    *(unsigned char *)(v8 + 9) = *(unsigned char *)(v9 + 9);
    uint64_t v22 = *(void *)(v9 + 16);
    *(unsigned char *)(v8 + 24) = *(unsigned char *)(v9 + 24);
    *(void *)(v8 + 16) = v22;
    *(void *)(v8 + 32) = *(void *)(v9 + 32);
    *(void *)(v8 + 40) = *(void *)(v9 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v8 + 48) = *(void *)(v9 + 48);
    *(void *)(v8 + 56) = *(void *)(v9 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v8 + 64) = *(void *)(v9 + 64);
    *(void *)(v8 + 72) = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void **)(v8 + 80);
    uint64_t v24 = *(void **)(v9 + 80);
    *(void *)(v8 + 80) = v24;
    id v25 = v24;
  }
  return a1;
}

uint64_t sub_1000FD15C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000FD18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v10;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(void *)(v8 + 80) = *(void *)(v9 + 80);
  long long v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v11;
  return a1;
}

uint64_t sub_1000FD228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  if (*(void *)(a1 + v7) != 1)
  {
    if (*(void *)v9 != 1)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(unsigned char *)(v8 + 24) = *(unsigned char *)(v9 + 24);
      uint64_t v12 = *(void *)(v9 + 40);
      *(void *)(v8 + 32) = *(void *)(v9 + 32);
      *(void *)(v8 + 40) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(v9 + 56);
      *(void *)(v8 + 48) = *(void *)(v9 + 48);
      *(void *)(v8 + 56) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(v9 + 72);
      *(void *)(v8 + 64) = *(void *)(v9 + 64);
      *(void *)(v8 + 72) = v14;
      swift_bridgeObjectRelease();
      long long v15 = *(void **)(v8 + 80);
      *(void *)(v8 + 80) = *(void *)(v9 + 80);

      return a1;
    }
    sub_1000FD15C(v8);
  }
  long long v10 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v10;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(void *)(v8 + 80) = *(void *)(v9 + 80);
  long long v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v11;
  return a1;
}

uint64_t sub_1000FD348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FD35C);
}

uint64_t sub_1000FD35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 - 1) & ~(((int)v10 - 1) >> 31);
  }
}

uint64_t sub_1000FD420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FD434);
}

uint64_t sub_1000FD434(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 + 1);
  }
  return result;
}

uint64_t sub_1000FD4F0()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_1000FD58C(double a1, double a2, double a3, double a4)
{
  v4[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_prefersInitallySelectedText] = 1;
  v4[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_hasEverBeenFirstResponder] = 0;
  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for FilenameTextField();
  [super initWithFrame:a1, a2, a3, a4];
  unint64_t v10 = self;
  id v11 = v9;
  id v12 = [v10 preferredFontForTextStyle:UIFontTextStyleBody];
  [v11 setFont:v12];

  [v11 setAdjustsFontForContentSizeCategory:1];
  sub_1000FD804();

  return v11;
}

void sub_1000FD804()
{
  id v1 = (id)DOCFrameworkBundle();
  id v2 = [v0 traitCollection];
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = self;
  id v10 = [v4 colorNamed:v3 inBundle:v1 compatibleWithTraitCollection:v2];

  if ([v0 isEnabled])
  {
    id v5 = [v4 labelColor];
    [v0 setTextColor:v5];

    [v0 setBackgroundColor:v10];
  }
  else
  {
    id v6 = [v4 secondaryLabelColor];
    [v0 setTextColor:v6];

    if (v10) {
      id v7 = [v10 colorWithAlphaComponent:0.5];
    }
    else {
      id v7 = 0;
    }
    [v0 setBackgroundColor:v7];
  }
  id v8 = [v0 layer];
  [v8 setCornerRadius:6.0];

  id v9 = [v0 layer];
  [v9 setCornerCurve:kCACornerCurveContinuous];
}

id sub_1000FDA1C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = (objc_class *)type metadata accessor for FilenameTextField();
  v20.receiver = v0;
  v20.super_class = v9;
  [super becomeFirstResponder];
  if (v10)
  {
    if (v0[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_hasEverBeenFirstResponder])
    {
      v0[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_hasEverBeenFirstResponder] = 1;
    }
    else
    {
      int v11 = v0[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_prefersInitallySelectedText];
      v0[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_hasEverBeenFirstResponder] = 1;
      if (v11 == 1)
      {
        sub_10009E6C4(0, (unint64_t *)&qword_100705380);
        uint64_t v18 = static OS_dispatch_queue.main.getter();
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = v0;
        aBlock[4] = sub_1001027D4;
        aBlock[5] = v12;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_1000666D8;
        aBlock[3] = &unk_10068C7A0;
        uint64_t v13 = _Block_copy(aBlock);
        objc_super v14 = v0;
        swift_release();
        static DispatchQoS.unspecified.getter();
        aBlock[0] = _swiftEmptyArrayStorage;
        sub_1001027E8((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_1000CBE70((uint64_t *)&unk_100705390);
        sub_1000B921C();
        dispatch thunk of SetAlgebra.init<A>(_:)();
        long long v15 = (void *)v18;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v13);

        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
  }
  return v10;
}

void sub_1000FDD84(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, const char **a7)
{
  v25.receiver = a1;
  v25.super_class = (Class)type metadata accessor for FilenameTextField();
  uint64_t v12 = *a7;
  id v13 = v25.receiver;
  [super a2:a3 a4:a5];
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  id v22 = [v13 leftView];

  if (v22) {
    double v23 = 0.0;
  }
  else {
    double v23 = 10.0;
  }
  id v24 = [v13 rightView];

  sub_10009D0D0(v15, v17, v19, v21, 10.0, v23);
}

id sub_1000FDFC4()
{
  return sub_100100FF8((uint64_t (*)(void))type metadata accessor for FilenameTextField);
}

uint64_t type metadata accessor for FilenameTextField()
{
  return self;
}

id sub_1000FE1C8()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UIStackView) init];
    [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v4 setAxis:0];
    [v4 setSpacing:*(double *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics)];
    [v4 setAlignment:3];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1000FE294()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)DOCStackedThumbnailView) initWithTopThumbnailSize:*(double *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 56) *(double *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 64)];
    LODWORD(v5) = 1148846080;
    [v4 setContentCompressionResistancePriority:0 forAxis:v5];
    LODWORD(v6) = 1148846080;
    [v4 setContentCompressionResistancePriority:1 forAxis:v6];
    LODWORD(v7) = 1148846080;
    [v4 setContentHuggingPriority:0 forAxis:v7];
    id v8 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v9 = v2;
  return v3;
}

char *sub_1000FE374()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton);
  if (v2)
  {
    id v3 = *(char **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton);
  }
  else
  {
    uint64_t v4 = v0;
    double v5 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_textStyle);
    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v7 = objc_allocWithZone((Class)type metadata accessor for DOCRenameButton());
    id v8 = sub_100469BEC(v5, (uint64_t)sub_100102738, v6);
    [v8 setContentHorizontalAlignment:4];
    *(void *)&v8[OBJC_IVAR____TtC5Files15DOCRenameButton_delegate + 8] = &off_10068C6E0;
    swift_unknownObjectWeakAssign();
    id v9 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v8;
    id v3 = v8;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

void sub_1000FE478()
{
  uint64_t v0 = sub_1000CBE70(&qword_1007076B0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v29 - v8;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  int v11 = (char *)Strong;
  uint64_t v12 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v12)
  {

    return;
  }
  uint64_t v13 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext;
  uint64_t v14 = *(void *)(*(void *)&v11[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext]
                  + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
  uint64_t v31 = v12;
  if (!v14 || !*(void *)(v14 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_11;
  }
  double v15 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  v15(v2, v14 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_11:
    sub_1000CBBA4((uint64_t)v2, &qword_1007076B0);
    objc_super v25 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.error.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1005A0030;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_100073F48();
    strcpy((char *)(v26 + 32), "filenameButton");
    *(unsigned char *)(v26 + 47) = -18;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  unsigned __int8 v30 = (void (*)(char *, char *, uint64_t))v15;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  uint64_t v16 = *(void *)(*(void *)&v11[v13] + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
  if (v16
    && *(void *)(v16 + 16) == 1
    && (id v17 = sub_1000FE93C(),
        id v18 = [v17 text],
        v17,
        v18))
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    v30(v7, v9, v3);
    id v22 = objc_allocWithZone((Class)type metadata accessor for DOCRenameViewController());
    double v23 = sub_1002EB1A8((uint64_t)v7, v19, v21, 0);
    *(void *)&v23[OBJC_IVAR____TtC5Files23DOCRenameViewController_delegate + 8] = &off_10068C6F0;
    swift_unknownObjectWeakAssign();
    id v24 = v31;
    sub_1002E97A4(v31, 1);
  }
  else
  {
    id v27 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.error.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1005A0030;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_100073F48();
    strcpy((char *)(v28 + 32), "filenameButton");
    *(unsigned char *)(v28 + 47) = -18;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

id sub_1000FE93C()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField);
  }
  else
  {
    type metadata accessor for FilenameTextField();
    id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
    [v4 setRightViewMode:3];
    [v4 addTarget:v0 action:"textFieldDidEndEditing:" forControlEvents:0x80000];
    [v4 addTarget:v0 action:"textFieldDidChange:" forControlEvents:0x20000];
    [v4 setEnablesReturnKeyAutomatically:1];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_1000FEA18(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate;
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    id v6 = [a1 text];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v10 = 0;
    }
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v8, v10, ObjectType, v5);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000FEB70(void *a1)
{
  sub_1000FECCC();
  uint64_t v3 = v1 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate;
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    id v6 = [a1 text];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v10 = 0;
    }
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(v1, v8, v10, ObjectType, v5);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000FECCC()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle) == 1)
  {
    id v2 = sub_1000FE93C();
    id v39 = [v2 text];

    if (v39)
    {
      id v3 = sub_1000FE93C();
      id v4 = [v3 font];

      if (v4)
      {
        id v5 = sub_1000FE93C();
        [v5 bounds];
        CGFloat v7 = v6;
        CGFloat v9 = v8;
        CGFloat v11 = v10;
        CGFloat v13 = v12;

        v43.origin.x = 0.0;
        v43.origin.y = 0.0;
        v43.size.width = 0.0;
        v43.size.height = 0.0;
        v41.origin.x = v7;
        v41.origin.y = v9;
        v41.size.width = v11;
        v41.size.height = v13;
        if (!CGRectEqualToRect(v41, v43))
        {
          id v14 = sub_1000FE93C();
          id v15 = sub_1000FE93C();
          [v15 bounds];
          double v17 = v16;
          double v19 = v18;
          double v21 = v20;
          double v23 = v22;

          [v14 editingRectForBounds:v17, v19, v21, v23];
          CGFloat v25 = v24;
          CGFloat v27 = v26;
          double v29 = v28;
          CGFloat v31 = v30;

          if (v29 > 0.0)
          {
            sub_1000CBE70((uint64_t *)&unk_100706750);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1005A0030;
            *(void *)(inited + 32) = NSFontAttributeName;
            *(void *)(inited + 64) = sub_10009E6C4(0, (unint64_t *)&unk_10070AD10);
            *(void *)(inited + 40) = v4;
            unint64_t v33 = NSFontAttributeName;
            id v34 = v4;
            sub_10009CC48(inited);
            type metadata accessor for Key(0);
            sub_1001027E8((unint64_t *)&qword_100706230, type metadata accessor for Key);
            Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v39 sizeWithAttributes:isa];
            double v37 = v36;

            v42.origin.x = v25;
            v42.origin.y = v27;
            v42.size.width = v29;
            v42.size.height = v31;
            if (CGRectGetWidth(v42) <= v37)
            {
              *(unsigned char *)(v0 + v1) = 0;
              id v38 = sub_1000FEFF4();
              [v38 setNeedsUpdateConfiguration];
            }
            else
            {
            }
            return;
          }
        }
      }
    }
  }
}

id sub_1000FEFF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIButton.Configuration();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  double v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v8 = (char *)aBlock - v7;
  uint64_t v9 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton;
  double v10 = *(void **)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton];
  if (v10)
  {
    id v11 = *(id *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton];
  }
  else
  {
    sub_10009E6C4(0, (unint64_t *)&unk_1007085F0);
    double v12 = self;

    static UIButton.Configuration.borderless()();
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    sub_10009E6C4(0, (unint64_t *)&qword_100706740);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_10010261C;
    *(void *)(v14 + 24) = v13;
    swift_retain_n();
    UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    id v15 = (void *)UIButton.init(configuration:primaryAction:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    swift_release();
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_100102664;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_10041B2E4;
    aBlock[3] = &unk_10068C750;
    double v17 = _Block_copy(aBlock);
    swift_release();
    [v15 setConfigurationUpdateHandler:v17];
    _Block_release(v17);
    [v15 setTranslatesAutoresizingMaskIntoConstraints:0];
    LODWORD(v18) = 1148846080;
    [v15 setContentHuggingPriority:0 forAxis:v18];
    [v1 updateTagButtonAccessibility:v15];
    double v19 = *(void **)&v1[v9];
    *(void *)&v1[v9] = v15;
    id v11 = v15;

    double v10 = 0;
  }
  id v20 = v10;
  return v11;
}

void sub_1000FF3C0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_100100D74();
  }
}

char *sub_1000FF414(uint64_t a1)
{
  uint64_t v2 = sub_1000CBE70(&qword_100706658);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  __chkstk_darwin(v60);
  uint64_t v57 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v58 = *(void *)(v6 - 8);
  uint64_t v59 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  unsigned __int16 v56 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v55 = (char *)&v53 - v9;
  uint64_t v10 = sub_1000CBE70(&qword_100706748);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v15 = (char *)&v53 - v14;
  uint64_t v16 = type metadata accessor for UIButton.Configuration();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  double v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong();
  if (!result) {
    return result;
  }
  double v21 = result;
  UIButton.configuration.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {

    return (char *)sub_1000CBBA4((uint64_t)v15, &qword_100706748);
  }
  uint64_t v54 = a1;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
  double v22 = self;
  id v23 = [v22 defaultMetrics];
  uint64_t v24 = *(int *)(v60 + 44);
  uint64_t v53 = &v21[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics];
  double v25 = *(double *)&v21[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + v24];
  id v26 = [v21 traitCollection];
  [v23 scaledValueForValue:v26 compatibleWithTraitCollection:v25];
  double v28 = v27;

  double v29 = &v21[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags];
  swift_beginAccess();
  if (*(void *)v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v38) {
      goto LABEL_11;
    }
  }
  else if (!*(void *)((*(void *)v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_11;
  }
  sub_10009E6C4(0, &qword_10070E2D0);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v31 = [self requestForChainedTags:isa tagDimension:v28];

  if (v31)
  {
    id v32 = v31;
    id v33 = [v22 defaultMetrics];
    id v34 = [v21 traitCollection];
    [v33 scaledValueForValue:v34 compatibleWithTraitCollection:4.0];

    [v32 setSpacingType:1];
    id v35 = [self shared];
    id v36 = [v35 renderImageWithRequest:v32];

    UIButton.Configuration.image.setter();
    UIButton.Configuration.imagePadding.setter();
    if ((v21[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle] & 1) == 0) {
      NSDirectionalEdgeInsets.by(adding:)();
    }

    uint64_t v37 = v54;
    goto LABEL_12;
  }
LABEL_11:
  id v39 = [self configurationWithScale:-1];
  NSString v40 = String._bridgeToObjectiveC()();
  id v41 = [self systemImageNamed:v40 withConfiguration:v39];

  UIButton.Configuration.image.setter();
  id v42 = [v22 defaultMetrics];
  id v43 = [v21 traitCollection];
  [v42 scaledValueForValue:v43 compatibleWithTraitCollection:2.0];

  UIButton.Configuration.imagePadding.setter();
  uint64_t v37 = v54;
LABEL_12:
  if (v21[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle] == 1)
  {
    uint64_t result = (char *)(id)_DocumentManagerBundle();
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v44 = result;
    v61._countAndFlagsBits = 0xD000000000000028;
    v61._object = (void *)0x80000001005D4210;
    v45._object = (void *)0x80000001005D41F0;
    v45._countAndFlagsBits = 0xD000000000000011;
    v46._countAndFlagsBits = 0x617A696C61636F4CLL;
    v46._object = (void *)0xEB00000000656C62;
    v47._countAndFlagsBits = 1936154964;
    v47._object = (void *)0xE400000000000000;
    DOCLocalizedString(_:tableName:bundle:value:comment:)(v45, v46, (NSBundle)v44, v47, v61);

    UIButton.Configuration.title.setter();
    uint64_t v37 = v54;
  }
  else
  {
    UIButton.Configuration.title.setter();
  }
  [v21 updateTagButtonAccessibility:v37];
  uint64_t v48 = v57;
  sub_10010266C((uint64_t)v53, v57);
  sub_1001026D0(v48 + *(int *)(v60 + 40), (uint64_t)v4);
  uint64_t v49 = v58;
  uint64_t v50 = v59;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v4, 1, v59) == 1)
  {
    sub_1000CBBA4((uint64_t)v4, &qword_100706658);
  }
  else
  {
    uint64_t v51 = v55;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v55, v4, v50);
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v56, v51, v50);
    UIButton.Configuration.buttonSize.setter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v50);
  }
  UIButton.Configuration.contentInsets.setter();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v19, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  UIButton.configuration.setter();
  uint64_t v52 = sub_1000FE374();
  [v52 setNeedsUpdateConfiguration];

  return (char *)(*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

char *sub_1000FFD44(void *a1, void *a2)
{
  *(void *)&v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags] = _swiftEmptyArrayStorage;
  uint64_t v4 = &v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics];
  __asm { FMOV            V0.2D, #12.0 }
  *(_OWORD *)uint64_t v4 = _Q0;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((void *)v4 + 6) = 0;
  *(int64x2_t *)(v4 + 56) = vdupq_n_s64(0x4049000000000000uLL);
  v4[72] = 1;
  uint64_t v10 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  uint64_t v11 = &v4[*(int *)(v10 + 40)];
  uint64_t v12 = type metadata accessor for UIButton.Configuration.Size();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)&v4[*(int *)(v10 + 44)] = 0x4028000000000000;
  uint64_t v13 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_containerView;
  id v14 = objc_allocWithZone((Class)UIView);
  id v15 = v2;
  id v16 = [v14 init];
  id v17 = [self clearColor];
  [v16 setBackgroundColor:v17];

  [v16 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v2[v13] = v16;
  *(void *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView] = 0;
  *(void *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView] = 0;
  *(void *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton] = 0;
  *(void *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameLabel] = 0;
  *(void *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField] = 0;
  v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle] = 1;
  *(void *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton] = 0;
  *(void *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_activeConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_textStyle] = UIFontTextStyleBody;
  swift_unknownObjectWeakInit();
  *(void *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext] = a1;
  swift_unknownObjectWeakAssign();
  uint64_t v18 = UIFontTextStyleBody;
  id v68 = a1;

  v70.receiver = v15;
  v70.super_class = (Class)type metadata accessor for DOCPickerFilenameView(0);
  double v19 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v19 setPreservesSuperviewLayoutMargins:1];
  sub_100100B14();
  uint64_t v20 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_containerView;
  [v19 addSubview:*(void *)&v19[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_containerView]];
  id v21 = *(id *)&v19[v20];
  id v22 = sub_1000FE1C8();
  [v21 addSubview:v22];

  id v23 = sub_1000FE1C8();
  id v24 = sub_1000FE294();
  [v23 addArrangedSubview:v24];

  double v25 = *(double *)&v19[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 8];
  double v26 = *(double *)&v19[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 16];
  double v27 = *(double *)&v19[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 24];
  double v28 = *(double *)&v19[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 32];
  id v67 = self;
  sub_1000CBE70((uint64_t *)&unk_1007084E0);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1005A00C0;
  id v30 = [*(id *)&v19[v20] leadingAnchor];
  id v31 = [v19 layoutMarginsGuide];
  id v32 = [v31 leadingAnchor];

  id v33 = [v30 constraintEqualToAnchor:v32 constant:v26];
  *(void *)(v29 + 32) = v33;
  id v34 = [*(id *)&v19[v20] trailingAnchor];
  id v35 = [v19 layoutMarginsGuide];
  id v36 = [v35 trailingAnchor];

  id v37 = [v34 constraintEqualToAnchor:v36 constant:-v28];
  *(void *)(v29 + 40) = v37;
  id v38 = [*(id *)&v19[v20] topAnchor];
  id v39 = [v19 topAnchor];
  id v40 = [v38 constraintEqualToAnchor:v39 constant:v25];

  *(void *)(v29 + 48) = v40;
  id v41 = sub_1000FE1C8();
  id v42 = [v41 leadingAnchor];

  id v43 = [*(id *)&v19[v20] leadingAnchor];
  id v44 = [v42 constraintEqualToAnchor:v43];

  *(void *)(v29 + 56) = v44;
  id v45 = sub_1000FE1C8();
  id v46 = [v45 trailingAnchor];

  id v47 = [*(id *)&v19[v20] trailingAnchor];
  id v48 = [v46 constraintEqualToAnchor:v47];

  *(void *)(v29 + 64) = v48;
  specialized Array._endMutation()();
  sub_10009E6C4(0, (unint64_t *)&unk_100706720);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v67 activateConstraints:isa];

  id v50 = sub_1000FE1C8();
  id v51 = sub_1000FE93C();
  [v50 addArrangedSubview:v51];

  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1005A00D0;
  id v53 = [v19 keyboardLayoutGuide];
  id v54 = [v53 topAnchor];

  id v55 = [*(id *)&v19[v20] bottomAnchor];
  id v56 = [v54 constraintEqualToAnchor:v55 constant:12.0];

  *(void *)(v52 + 32) = v56;
  id v57 = [*(id *)&v19[v20] bottomAnchor];
  id v58 = sub_1000FE93C();
  id v59 = [v58 bottomAnchor];

  id v60 = [v57 constraintEqualToAnchor:v59 constant:v27];
  *(void *)(v52 + 40) = v60;
  id v61 = sub_1000FE93C();
  id v62 = [v61 topAnchor];

  id v63 = [*(id *)&v19[v20] topAnchor];
  id v64 = [v62 constraintEqualToAnchor:v63];

  *(void *)(v52 + 48) = v64;
  specialized Array._endMutation()();
  Class v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v67 activateConstraints:v65];

  sub_100100540();
  return v19;
}

void sub_100100540()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext;
  uint64_t v3 = *(char **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext);
  uint64_t v4 = *(void *)&v3[OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave];
  if (v4)
  {
    if (*(void *)(v4 + 16) != 1) {
      goto LABEL_8;
    }
LABEL_7:
    id v6 = *(id *)(v1 + v2);
    DOCPickerContext.firstDisplayName.getter();
    uint64_t v8 = v7;

    if (v8) {
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  unint64_t v5 = *(void *)&v3[OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove];
  if (v5)
  {
    if (v5 >> 62)
    {
      id v32 = v3;
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
      if (v33 != 1) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1) {
      goto LABEL_7;
    }
  }
LABEL_8:
  v9._countAndFlagsBits = 0x6D65744920756C25;
  v9._object = (void *)0xE900000000000073;
  v10._countAndFlagsBits = 0x6F207265626D754ELL;
  v10._object = (void *)0xEF736D6574692066;
  DOCLocalizedDictionaryString(_:comment:)(v9, v10);
  sub_1000CBE70((uint64_t *)&unk_100708800);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1005A0030;
  uint64_t v12 = *(char **)(v1 + v2);
  uint64_t v13 = *(void *)&v12[OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave];
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
  }
  else
  {
    unint64_t v15 = *(void *)&v12[OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove];
    if (v15)
    {
      if (v15 >> 62)
      {
        id v37 = (id)v2;
        id v34 = v12;
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
        uint64_t v14 = v35;
        uint64_t v2 = (uint64_t)v37;
      }
      else
      {
        uint64_t v14 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
  }
  *(void *)(v11 + 56) = &type metadata for Int;
  *(void *)(v11 + 64) = &protocol witness table for Int;
  *(void *)(v11 + 32) = v14;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_15:
  uint64_t v16 = *(void *)(*(void *)(v1 + v2) + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
  if (v16) {
    BOOL v17 = *(void *)(v16 + 16) == 1;
  }
  else {
    BOOL v17 = 0;
  }
  id v18 = sub_1000FE93C();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 setText:v19];

  id v20 = sub_1000FE93C();
  [v20 setEnabled:v17];

  id v21 = sub_1000FE1C8();
  [v21 setSpacing:*(double *)(v1 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics)];

  if (*(void *)(*(void *)(v1 + v2) + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave))
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 72) == 1)
    {
      id v22 = sub_1000FE93C();
      id v23 = sub_1000FEFF4();
      [v22 setRightView:v23];
    }
    else
    {
      id v22 = sub_1000FE1C8();
      id v23 = sub_1000FEFF4();
      [v22 addArrangedSubview:v23];
    }
  }
  else
  {
    id v24 = sub_1000FE1C8();
    id v25 = sub_1000FEFF4();
    [v24 removeArrangedSubview:v25];

    id v23 = sub_1000FE93C();
    [v23 setRightView:0];
  }

  uint64_t v26 = *(void *)(v1 + v2);
  uint64_t v27 = *(void *)(v26 + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
  if (v27 && *(void *)(v27 + 16))
  {
    swift_bridgeObjectRetain();
    id v28 = sub_1000FE294();
    type metadata accessor for URL();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v28 setURLs:isa];
LABEL_32:

    return;
  }
  unint64_t v29 = *(void *)(v26 + OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove);
  if (!v29) {
    return;
  }
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31 >= 1)
    {
      id v28 = sub_1000FE294();
      swift_bridgeObjectRetain();
      sub_1000CBE70((uint64_t *)&unk_100706730);
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v30)
    {
      id v28 = sub_1000FE294();
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
LABEL_31:
      swift_bridgeObjectRelease();
      sub_1000CBE70((uint64_t *)&unk_100706730);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v28 setNodes:isa];
      goto LABEL_32;
    }
  }

  swift_bridgeObjectRelease();
}

void sub_100100B14()
{
  id v1 = [self clearColor];
  [v0 setBackgroundColor:v1];

  id v2 = [self effectWithStyle:5];
  id v3 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v2];

  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 addSubview:v3];
  Class isa = (Class)(id)DOCConstraintsToResizeWithSuperview();
  if (!isa)
  {
    sub_10009E6C4(0, (unint64_t *)&unk_100706720);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  unint64_t v5 = self;
  [v5 activateConstraints:isa];

  id v6 = [objc_allocWithZone((Class)DOCSeparatorView) init];
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 addSubview:v6];
  Class v7 = (Class)(id)DOCConstraintsToResizeWithSuperview();
  if (!v7)
  {
    sub_10009E6C4(0, (unint64_t *)&unk_100706720);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class v8 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v7 = v8;
  }
  Class v9 = v7;
  [v5 activateConstraints:];
}

void sub_100100D74()
{
  id v1 = v0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    id v4 = [objc_allocWithZone((Class)DOCTagEditorViewController) init];
    [v4 setDelegate:v0];
    swift_beginAccess();
    sub_10009E6C4(0, &qword_10070E2D0);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 setSelectedTags:isa];

    id v6 = [objc_allocWithZone((Class)UINavigationController) initWithRootViewController:v4];
    UIViewController.doc_configureForPresentingLargeContent(withPreferredStyle:)(UIModalPresentationPopover);
    id v7 = [v6 popoverPresentationController];
    if (v7)
    {
      Class v8 = v7;
      [v7 setSourceView:v1];
    }
    id v9 = [v6 popoverPresentationController];
    if (v9)
    {
      Swift::String v10 = v9;
      uint64_t v11 = (void *)sub_1000FEFF4();
      [v11 bounds];
      double v13 = v12;
      double v15 = v14;
      double v17 = v16;
      double v19 = v18;

      id v20 = (void *)sub_1000FEFF4();
      [v1 convertRect:v20 fromCoordinateSpace:v13, v15, v17, v19];
      double v22 = v21;
      double v24 = v23;
      double v26 = v25;
      double v28 = v27;

      [v10 setSourceRect:v22, v24, v26, v28];
    }
    [v3 presentViewController:v6 animated:1 completion:0];
  }
}

id sub_100100FE0()
{
  return sub_100100FF8(type metadata accessor for DOCPickerFilenameView);
}

id sub_100100FF8(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return [super dealloc];
}

uint64_t sub_100101144()
{
  return type metadata accessor for DOCPickerFilenameView(0);
}

uint64_t type metadata accessor for DOCPickerFilenameView(uint64_t a1)
{
  return sub_10009E984(a1, (uint64_t *)&unk_1007065E8);
}

uint64_t sub_10010116C()
{
  uint64_t result = type metadata accessor for DOCPickerFilenameView.Metrics(319);
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for DOCPickerFilenameView.Metrics(uint64_t a1)
{
  return sub_10009E984(a1, (uint64_t *)&unk_1007066B8);
}

void *sub_100101494(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *id v4 = *a2;
    id v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    long long v7 = *(_OWORD *)(a2 + 7);
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v8 = *(int *)(a3 + 40);
    id v9 = (void *)(a1 + v8);
    Swift::String v10 = (char *)a2 + v8;
    *(_OWORD *)(a1 + 56) = v7;
    uint64_t v11 = type metadata accessor for UIButton.Configuration.Size();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_1000CBE70(&qword_100706658);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(void *)((char *)v4 + *(int *)(a3 + 44)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 44));
  }
  return v4;
}

uint64_t sub_10010163C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 40);
  uint64_t v3 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3);
  if (!result)
  {
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(v2, v3);
  }
  return result;
}

uint64_t sub_100101710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (void *)(a1 + v7);
  id v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v10 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_1000CBE70(&qword_100706658);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_100101868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_1000CBE70(&qword_100706658);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_100101A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v10 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_1000CBE70(&qword_100706658);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_100101B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  *(void *)(a1 + 64) = v8;
  uint64_t v12 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_1000CBE70(&qword_100706658);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_100101D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100101D5C);
}

uint64_t sub_100101D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_1000CBE70(&qword_100706658);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 40);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100101E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100101E24);
}

uint64_t sub_100101E24(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 72) = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_1000CBE70(&qword_100706658);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100101ECC()
{
  sub_100101F88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100101F88()
{
  if (!qword_1007066C8)
  {
    type metadata accessor for UIButton.Configuration.Size();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1007066C8);
    }
  }
}

void sub_100101FE0()
{
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags] = _swiftEmptyArrayStorage;
  uint64_t v1 = &v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics];
  __asm { FMOV            V0.2D, #12.0 }
  *(_OWORD *)uint64_t v1 = _Q0;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((void *)v1 + 6) = 0;
  *(int64x2_t *)(v1 + 56) = vdupq_n_s64(0x4049000000000000uLL);
  v1[72] = 1;
  uint64_t v7 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  uint64_t v8 = &v1[*(int *)(v7 + 40)];
  uint64_t v9 = type metadata accessor for UIButton.Configuration.Size();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)&v1[*(int *)(v7 + 44)] = 0x4028000000000000;
  uint64_t v10 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_containerView;
  id v11 = [objc_allocWithZone((Class)UIView) init];
  id v12 = [self clearColor];
  [v11 setBackgroundColor:v12];

  [v11 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v0[v10] = v11;
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField] = 0;
  v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle] = 1;
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_activeConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_textStyle] = UIFontTextStyleBody;
  swift_unknownObjectWeakInit();
  uint64_t v13 = UIFontTextStyleBody;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100102214(uint64_t *a1)
{
  unint64_t v2 = *a1;
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_62;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
LABEL_3:
    sub_10009E6C4(0, (unint64_t *)&qword_100706710);
    unint64_t v4 = 0;
    while (1)
    {
      id v5 = (v2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v2 + 8 * v4 + 32);
      int v6 = v5;
      char v7 = static NSObject.== infix(_:_:)();

      if (v7) {
        break;
      }
      unint64_t v8 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        if (!v3) {
          goto LABEL_10;
        }
        goto LABEL_3;
      }
      ++v4;
      if (v8 == v3) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
    }
    else if (!((unint64_t)*a1 >> 62))
    {
      if (v10 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_16:
        for (unint64_t i = v4 + 5; ; ++i)
        {
          unint64_t v2 = i - 4;
          uint64_t v12 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v2 & 0x8000000000000000) != 0) {
              goto LABEL_52;
            }
            if (v2 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_53;
            }
            id v13 = *(id *)(v12 + 8 * i);
          }
          uint64_t v14 = v13;
          char v15 = static NSObject.== infix(_:_:)();

          if (v15) {
            goto LABEL_42;
          }
          if (v2 != v4) {
            break;
          }
LABEL_41:
          if (__OFADD__(v4++, 1)) {
            goto LABEL_55;
          }
LABEL_42:
          unint64_t v26 = i - 3;
          if (__OFADD__(v2, 1)) {
            goto LABEL_54;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v27 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v26 == v27) {
            return v4;
          }
        }
        uint64_t v16 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v16 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_27:
            if ((v2 & 0x8000000000000000) != 0) {
              goto LABEL_58;
            }
            if (v2 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_59;
            }
            id v18 = *(id *)(v16 + 8 * i);
            goto LABEL_30;
          }
        }
        else
        {
          if ((v4 & 0x8000000000000000) != 0) {
            goto LABEL_56;
          }
          if (v4 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_57;
          }
          id v17 = *(id *)(v16 + 8 * v4 + 32);
          if ((v16 & 0xC000000000000001) == 0) {
            goto LABEL_27;
          }
        }
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v16 = *a1;
LABEL_30:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v16;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v16 < 0 || (v16 & 0x4000000000000000) != 0)
        {
          uint64_t v16 = sub_1000BC324(v16);
          *a1 = v16;
        }
        id v20 = *(void **)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
        *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v18;

        specialized Array._endMutation()();
        uint64_t v21 = *a1;
        int v22 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v21;
        if (!v22 || v21 < 0 || (v21 & 0x4000000000000000) != 0)
        {
          uint64_t v21 = sub_1000BC324(v21);
          *a1 = v21;
        }
        if ((v2 & 0x8000000000000000) != 0) {
          goto LABEL_60;
        }
        uint64_t v23 = v21 & 0xFFFFFFFFFFFFFF8;
        if (v2 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_61;
        }
        double v24 = *(void **)(v23 + 8 * i);
        *(void *)(v23 + 8 * i) = v17;

        specialized Array._endMutation()();
        goto LABEL_41;
      }
      return v4;
    }
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 != v29) {
      goto LABEL_16;
    }
    return v4;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if (!((unint64_t)*a1 >> 62)) {
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_1001025E4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10010261C()
{
}

uint64_t sub_100102624()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010265C(uint64_t a1)
{
  return sub_1002DBB5C(a1, *(uint64_t (**)(void))(v1 + 16));
}

char *sub_100102664(uint64_t a1)
{
  return sub_1000FF414(a1);
}

uint64_t sub_10010266C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001026D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70(&qword_100706658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100102738()
{
}

uint64_t sub_100102740(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010279C()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1001027D4()
{
  return [*(id *)(v0 + 16) selectAll:0];
}

uint64_t sub_1001027E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100102830()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self systemImageNamed:v0];

  return v1;
}

BOOL sub_100102968(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10010297C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1001029C4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1001029F0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_100102A34@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100103E78(*a1);
  *a2 = result;
  return result;
}

void sub_100102A60(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100102A6C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC5Files13DOCSuggestion_title);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100102AA8(uint64_t a1, uint64_t a2)
{
  return sub_100102AD0(a1, a2, &OBJC_IVAR____TtC5Files13DOCSuggestion_customImageGenerator, &OBJC_IVAR____TtC5Files13DOCSuggestion_customImage);
}

uint64_t sub_100102ABC(uint64_t a1, uint64_t a2)
{
  return sub_100102AD0(a1, a2, &OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImageGenerator, &OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImage);
}

uint64_t sub_100102AD0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(uint64_t (**)(void))(v4 + *a3);
  char v7 = (id *)(v4 + *a4);
  swift_beginAccess();
  if (v6)
  {
    id v8 = *v7;
    swift_retain_n();

    uint64_t v9 = v6();
    sub_1000A7258((uint64_t)v6);
    *char v7 = (id)v9;
    sub_1000A7258((uint64_t)v6);
  }
  else if (a1)
  {

    *char v7 = 0;
  }
  return swift_endAccess();
}

void *sub_100102B90()
{
  return sub_100102BA8(&OBJC_IVAR____TtC5Files13DOCSuggestion_customImage);
}

void *sub_100102B9C()
{
  return sub_100102BA8(&OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImage);
}

void *sub_100102BA8(void *a1)
{
  uint64_t v2 = (void **)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  id v4 = v3;
  return v3;
}

id sub_100102BF4()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_matchingInputRange];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  v1[16] = 1;
  uint64_t v2 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_title];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0xE000000000000000;
  uint64_t v3 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_representedObject];
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  id v4 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_atomTitle];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0xE000000000000000;
  id v5 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_textReplacement];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files13DOCSuggestion_customImage] = 0;
  int v6 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_customImageGenerator];
  *(void *)int v6 = 0;
  *((void *)v6 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImage] = 0;
  char v7 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImageGenerator];
  id v8 = (objc_class *)type metadata accessor for DOCSuggestion();
  *(void *)char v7 = 0;
  *((void *)v7 + 1) = 0;
  v10.receiver = v0;
  v10.super_class = v8;
  return [super init];
}

id sub_100102CEC()
{
  return sub_100103BD0(type metadata accessor for DOCSuggestion);
}

uint64_t type metadata accessor for DOCSuggestion()
{
  return self;
}

id sub_100102DE8()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC5Files13DOCSuggestion_matchingInputRange;
  int v2 = *((unsigned __int8 *)v0 + OBJC_IVAR____TtC5Files13DOCSuggestion_matchingInputRange + 16);
  uint64_t v3 = self;
  id v4 = &selRef_labelColor;
  if (!v2) {
    id v4 = &selRef_secondaryLabelColor;
  }
  id v5 = [v3 *v4];
  (*(void (**)(void))((swift_isaMask & *v0) + 0xB0))();
  sub_1000CBE70((uint64_t *)&unk_100706750);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A0030;
  *(void *)(inited + 32) = NSForegroundColorAttributeName;
  uint64_t v22 = sub_10009E6C4(0, (unint64_t *)&qword_1007088B0);
  *(void *)(inited + 64) = v22;
  *(void *)(inited + 40) = v5;
  uint64_t v21 = NSForegroundColorAttributeName;
  id v23 = v5;
  sub_10009CC48(inited);
  id v7 = objc_allocWithZone((Class)NSMutableAttributedString);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_100104524((unint64_t *)&qword_100706230, 255, type metadata accessor for Key);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithString:v8 attributes:isa];

  if ((v1[16] & 1) == 0)
  {
    uint64_t v11 = *(void *)v1;
    uint64_t v12 = *((void *)v1 + 1);
    uint64_t v13 = swift_initStackObject();
    *(_OWORD *)(v13 + 16) = xmmword_1005A0030;
    *(void *)(v13 + 32) = v21;
    uint64_t v14 = self;
    char v15 = v21;
    id v16 = [v14 labelColor];
    *(void *)(v13 + 64) = v22;
    *(void *)(v13 + 40) = v16;
    sub_10009CC48(v13);
    Class v17 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v10 setAttributes:v17 range:v11, v12];
  }
  id v18 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x170))();
  id v19 = [objc_allocWithZone((Class)UISearchSuggestionItem) initWithLocalizedAttributedSuggestion:v10 localizedDescription:0 iconImage:v18];
  [v19 setRepresentedObject:v0];

  return v19;
}

id sub_100103124()
{
  return sub_10010313C(&OBJC_IVAR____TtC5Files13DOCSuggestion_customImage);
}

id sub_100103130()
{
  return sub_10010313C(&OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImage);
}

id sub_10010313C(void *a1)
{
  int v2 = (void **)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  id v4 = v3;
  if (!v3) {
    id v4 = sub_100102830();
  }
  id v5 = v3;
  return v4;
}

void sub_1001031AC()
{
}

uint64_t sub_100103238()
{
  return swift_bridgeObjectRelease();
}

id sub_10010324C()
{
  return sub_100103BD0(type metadata accessor for DOCSearchSuggestion);
}

uint64_t type metadata accessor for DOCSearchSuggestion()
{
  return self;
}

id sub_1001032CC()
{
  return sub_100103BD0(type metadata accessor for DOCSuggester);
}

uint64_t type metadata accessor for DOCSuggester()
{
  return self;
}

id sub_100103354()
{
  id result = [objc_allocWithZone((Class)DOCDateParser) init];
  qword_100706788 = (uint64_t)result;
  return result;
}

uint64_t sub_100103388(void *a1)
{
  int v2 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCTagSuggester());
  *(void *)&v2[OBJC_IVAR____TtC5Files15DOCTagSuggester_dataSource + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = &off_10068C858;
  swift_unknownObjectWeakAssign();
  *(void *)&v2[OBJC_IVAR____TtC5Files12DOCSuggester_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v2[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = a1;
  uint64_t v3 = (objc_class *)type metadata accessor for DOCSuggester();
  v33.receiver = v2;
  v33.super_class = v3;
  id v4 = a1;
  id v5 = [super init];
  uint64_t v6 = qword_100704E10;
  id v7 = v4;
  if (v6 != -1) {
    swift_once();
  }
  NSString v8 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCDateSuggester());
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  *(void *)&v8[OBJC_IVAR____TtC5Files12DOCSuggester_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v8[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v7;
  v32.receiver = v8;
  v32.super_class = v3;
  [super init];
  sub_1000CBE70((uint64_t *)&unk_1007084E0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1005A0220;
  *(void *)(v10 + 32) = v5;
  *(void *)(v10 + 40) = v9;
  uint64_t v11 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCFileTypeSuggester());
  *(void *)&v11[OBJC_IVAR____TtC5Files12DOCSuggester_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v11[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v7;
  v31.receiver = v11;
  v31.super_class = v3;
  id v12 = v7;
  id v26 = v5;
  id v25 = v9;
  *(void *)(v10 + 48) = [super init];
  id v13 = objc_allocWithZone((Class)type metadata accessor for DOCNaturalLanguageFileTypeSuggester());
  uint64_t v14 = OBJC_IVAR____TtC5Files35DOCNaturalLanguageFileTypeSuggester_naturalLanguageFileTypeDescriptors;
  uint64_t v15 = qword_1007051E0;
  id v16 = v12;
  Class v17 = (char *)v13;
  if (v15 != -1) {
    swift_once();
  }
  *(void *)&v17[v14] = qword_1007160E0;
  swift_bridgeObjectRetain();

  *(void *)&v17[OBJC_IVAR____TtC5Files12DOCSuggester_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v17[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v16;
  v30.receiver = v17;
  v30.super_class = v3;
  *(void *)(v10 + 56) = [super init];
  id v18 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCPersonSuggester());
  *(void *)&v18[OBJC_IVAR____TtC5Files18DOCPersonSuggester_currentQuery] = 0;
  *(void *)&v18[OBJC_IVAR____TtC5Files12DOCSuggester_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v18[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v16;
  v29.receiver = v18;
  v29.super_class = v3;
  id v19 = v16;
  *(void *)(v10 + 64) = [super init];
  id v20 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCIsSharedSuggester());
  *(void *)&v20[OBJC_IVAR____TtC5Files12DOCSuggester_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v20[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v19;
  v28.receiver = v20;
  v28.super_class = v3;
  id v21 = v19;
  *(void *)(v10 + 72) = [super init];
  uint64_t v22 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCFilenameSuggester());
  *(void *)&v22[OBJC_IVAR____TtC5Files12DOCSuggester_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v22[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v21;
  v27.receiver = v22;
  v27.super_class = v3;
  id v23 = v21;
  *(void *)(v10 + 80) = [super init];
  specialized Array._endMutation()();

  return v10;
}

uint64_t sub_100103730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100103E88(a1, a2, a4);
}

void sub_100103738(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)&v5[OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId] == a3)
  {
    uint64_t v11 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.debug.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1005A0230;
    uint64_t v13 = String.count.getter();
    *(void *)(v12 + 56) = &type metadata for Int;
    *(void *)(v12 + 64) = &protocol witness table for Int;
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 96) = &type metadata for Int;
    *(void *)(v12 + 104) = &protocol witness table for Int;
    *(void *)(v12 + 72) = a3;
    *(void *)(v12 + 136) = type metadata accessor for DOCSuggester();
    *(void *)(v12 + 144) = sub_100104524((unint64_t *)&unk_1007068C0, v14, (void (*)(uint64_t))type metadata accessor for DOCSuggester);
    *(void *)(v12 + 112) = a1;
    id v15 = a1;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    id v16 = (void *)swift_allocObject();
    void v16[2] = v5;
    v16[3] = a2;
    v16[4] = a3;
    v16[5] = a4;
    v16[6] = a5;
    v19[4] = sub_1001045B4;
    v19[5] = v16;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 1107296256;
    v19[2] = sub_1000666D8;
    uint64_t v19[3] = &unk_10068C8A8;
    Class v17 = _Block_copy(v19);
    id v18 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    DOCRunInMainThread();
    _Block_release(v17);
  }
}

uint64_t sub_100103938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_gatheredSuggestions);
  swift_beginAccess();
  unint64_t v14 = swift_bridgeObjectRetain();
  sub_1001694F0(v14);
  uint64_t result = swift_endAccess();
  uint64_t v16 = *(void *)(a1 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_numWaitedSuggesterResults);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_numWaitedSuggesterResults) = v18;
    if (v18 <= 0)
    {
      uint64_t v19 = a1 + OBJC_IVAR____TtC5Files12DOCSuggester_delegate;
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v30 = a4;
        uint64_t v20 = *(void *)(v19 + 8);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v31 = v9;
        uint64_t v32 = v10;
        uint64_t v21 = a5;
        uint64_t v22 = *v13;
        id v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8);
        swift_bridgeObjectRetain();
        uint64_t v24 = v21;
        uint64_t v9 = v31;
        v23(a1, v22, a3, v30, v24, ObjectType, v20);
        uint64_t v10 = v32;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      static Logger.UI.getter();
      id v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        objc_super v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)objc_super v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "All suggesters delivered.", v27, 2u);
        swift_slowDealloc();
      }

      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
  return result;
}

uint64_t sub_100103B78()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

id sub_100103BB8()
{
  return sub_100103BD0(type metadata accessor for DOCSuggesterManager);
}

id sub_100103BD0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for DOCSuggesterManager()
{
  return self;
}

uint64_t getEnumTagSinglePayload for DOCSuggestionCategory(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DOCSuggestionCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    char *result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100103DD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t sub_100103DFC(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100103E04(unsigned char *result, char a2)
{
  char *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DOCSuggestionCategory()
{
  return &type metadata for DOCSuggestionCategory;
}

unint64_t sub_100103E20()
{
  unint64_t result = qword_1007068B8;
  if (!qword_1007068B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007068B8);
  }
  return result;
}

unint64_t sub_100103E78(unint64_t result)
{
  if (result >= 0xA) {
    return 10;
  }
  return result;
}

uint64_t sub_100103E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a3;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  *uint64_t v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v12 = String.count.getter();
  if (v12 >= 1)
  {
    uint64_t v13 = v62;
    uint64_t v14 = *(void *)(v62 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId);
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (!v15)
    {
      uint64_t v3 = v12;
      uint64_t v63 = OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId;
      *(void *)(v62 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId) = v16;
      BOOL v17 = (void *)(v13 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_gatheredSuggestions);
      swift_beginAccess();
      *BOOL v17 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      unint64_t v4 = *(void *)(v13 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_suggesters);
      id v64 = _swiftEmptyArrayStorage;
      if (!(v4 >> 62))
      {
        uint64_t v18 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRetain();
        if (v18)
        {
LABEL_6:
          if (v18 < 1)
          {
            __break(1u);
            goto LABEL_50;
          }
          uint64_t v20 = a1;
          for (uint64_t i = 0; i != v18; ++i)
          {
            if ((v4 & 0xC000000000000001) != 0) {
              uint64_t v22 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              uint64_t v22 = *(id *)(v4 + 8 * i + 32);
            }
            id v23 = v22;
            if (v3 >= (*(uint64_t (**)(void))((swift_isaMask & *v22) + 0x88))())
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v24 = (uint64_t)v64;
          a1 = v20;
LABEL_22:
          BOOL v29 = v24 < 0 || (v24 & 0x4000000000000000) != 0;
          if (v29)
          {
            swift_bridgeObjectRetain();
            uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
          }
          else
          {
            uint64_t v30 = *(void *)(v24 + 16);
          }
          uint64_t v31 = _swiftEmptyArrayStorage;
          uint64_t v60 = a1;
          uint64_t v61 = a2;
          HIDWORD(v58) = v29;
          if (!v30)
          {
LABEL_36:
            id v64 = v31;
            sub_1000CBE70(&qword_10070AEB0);
            sub_1001044C8();
            uint64_t v42 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v44 = v43;
            swift_bridgeObjectRelease();
            id v45 = (void *)static DOCLog.UI.getter();
            static os_log_type_t.debug.getter();
            sub_1000CBE70((uint64_t *)&unk_100708800);
            uint64_t v46 = swift_allocObject();
            *(_OWORD *)(v46 + 16) = xmmword_1005A0230;
            uint64_t v47 = String.count.getter();
            *(void *)(v46 + 56) = &type metadata for Int;
            *(void *)(v46 + 64) = &protocol witness table for Int;
            *(void *)(v46 + 32) = v47;
            uint64_t v48 = v62;
            uint64_t v49 = *(void *)(v62 + v63);
            *(void *)(v46 + 96) = &type metadata for Int;
            *(void *)(v46 + 104) = &protocol witness table for Int;
            *(void *)(v46 + 72) = v49;
            *(void *)(v46 + 136) = &type metadata for String;
            *(void *)(v46 + 144) = sub_100073F48();
            *(void *)(v46 + 112) = v42;
            *(void *)(v46 + 120) = v44;
            os_log(_:dso:log:type:_:)();

            uint64_t v50 = v48;
            swift_bridgeObjectRelease();
            *(void *)(v48 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_numWaitedSuggesterResults) = v30;
            if (HIDWORD(v58))
            {
              swift_retain();
              uint64_t result = _CocoaArrayWrapper.endIndex.getter();
              uint64_t v51 = result;
            }
            else
            {
              uint64_t v51 = *(void *)(v24 + 16);
              uint64_t result = swift_retain();
            }
            uint64_t v53 = v59;
            uint64_t v52 = v60;
            uint64_t v54 = v61;
            if (!v51) {
              return swift_release_n();
            }
            if (v51 >= 1)
            {
              for (uint64_t j = 0; j != v51; ++j)
              {
                if ((v24 & 0xC000000000000001) != 0) {
                  id v56 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v56 = *(id *)(v24 + 8 * j + 32);
                }
                id v57 = v56;
                (*(void (**)(uint64_t, uint64_t, void, uint64_t))((swift_isaMask & *v56) + 0x90))(v52, v54, *(void *)(v50 + v63), v53);
              }
              return swift_release_n();
            }
LABEL_51:
            __break(1u);
            return result;
          }
          id v64 = _swiftEmptyArrayStorage;
          uint64_t result = sub_100059E2C(0, v30 & ~(v30 >> 63), 0);
          if ((v30 & 0x8000000000000000) == 0)
          {
            uint64_t v32 = 0;
            uint64_t v31 = v64;
            do
            {
              if ((v24 & 0xC000000000000001) != 0) {
                id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v33 = *(id *)(v24 + 8 * v32 + 32);
              }
              id v34 = v33;
              id v35 = [v33 description];
              uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v38 = v37;

              id v64 = v31;
              unint64_t v40 = v31[2];
              unint64_t v39 = v31[3];
              if (v40 >= v39 >> 1)
              {
                sub_100059E2C(v39 > 1, v40 + 1, 1);
                uint64_t v31 = v64;
              }
              ++v32;
              v31[2] = v40 + 1;
              id v41 = &v31[2 * v40];
              v41[4] = v36;
              v41[5] = v38;
            }
            while (v30 != v32);
            goto LABEL_36;
          }
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
LABEL_21:
        swift_bridgeObjectRelease();
        uint64_t v24 = (uint64_t)_swiftEmptyArrayStorage;
        goto LABEL_22;
      }
LABEL_20:
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v18 = result;
      if (result) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v25 = v62;
  uint64_t v26 = v62 + OBJC_IVAR____TtC5Files12DOCSuggester_delegate;
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v27 = *(void *)(v26 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8))(v25, _swiftEmptyArrayStorage, *(void *)(v25 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId), a1, a2, ObjectType, v27);
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t sub_1001044C8()
{
  unint64_t result = qword_100711820;
  if (!qword_100711820)
  {
    sub_100074618(&qword_10070AEB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711820);
  }
  return result;
}

uint64_t sub_100104524(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010456C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001045B4()
{
  return sub_100103938(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

id sub_100104794(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dropInteraction] = 0;
  *(void *)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO] = 0;
  v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_autohideWhenPossibleDropTarget] = 0;
  v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_active] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state] = 0;
  v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_hasDropTargetRequiringAutohide] = 0;
  uint64_t v3 = v1;
  id v4 = [a1 dimmable];
  swift_unknownObjectWeakAssign();

  id v5 = [v4 dimmingOverlayHostView];
  [v5 bounds];
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;

  uint64_t v14 = (objc_class *)type metadata accessor for DOCContentDimmingOverlay();
  v19.receiver = v3;
  v19.super_class = v14;
  v18.receiver = [super initWithFrame:v7, v9, v11, v13];
  v18.super_class = v14;
  id v15 = v18.receiver;
  [super setHidden:1];
  id v16 = v15;
  [v16 setAutoresizingMask:18];
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return v16;
}

uint64_t *sub_100104A0C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

void sub_100104A28()
{
  uint64_t v1 = v0;
  int v2 = v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_autohideWhenPossibleDropTarget];
  uint64_t v3 = OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dropInteraction;
  id v4 = *(void **)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dropInteraction];
  if (v2 == 1)
  {
    if (!v4)
    {
      id v5 = [objc_allocWithZone((Class)UIDropInteraction) initWithDelegate:v1];
      double v6 = *(void **)&v1[v3];
      *(void *)&v1[v3] = v5;
      id v7 = v5;

      [v1 addInteraction:v7];
      if (qword_100704F58 != -1) {
        swift_once();
      }
      double v8 = (void *)qword_100736F38;
      id v16 = (void *)qword_100736F38;
      swift_getKeyPath();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      id v9 = v8;
      uint64_t v10 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
      swift_release();
      swift_release();

      double v11 = *(void **)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO];
      *(void *)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO] = v10;
    }
  }
  else if (v4)
  {
    *(void *)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dropInteraction] = 0;
    [v1 removeInteraction:v4];
    uint64_t v12 = OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO;
    double v13 = *(void **)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO];
    if (v13)
    {
      id v14 = v13;
      dispatch thunk of NSKeyValueObservation.invalidate()();

      id v15 = *(id *)&v1[v12];
    }
    else
    {
      id v15 = 0;
    }
    *(void *)&v1[v12] = 0;
  }
}

void sub_100104C24()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_100104C78();
  }
}

uint64_t sub_100104C78()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_active) == 1)
  {
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_hasDropTargetRequiringAutohide)) {
      goto LABEL_6;
    }
    if (qword_100704F58 != -1) {
      swift_once();
    }
    if ([(id)qword_100736F38 isItemCollectionDragActive]) {
LABEL_6:
    }
      uint64_t v1 = 2;
    else {
      uint64_t v1 = 1;
    }
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state);
    *(void *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state) = v1;
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state);
    *(void *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state) = 0;
  }

  return sub_100104D38(v2);
}

uint64_t sub_100104D38(uint64_t result)
{
  uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state];
  if ((result == 1) == (v2 != 1))
  {
    v25.receiver = v1;
    v25.super_class = (Class)type metadata accessor for DOCContentDimmingOverlay();
    unsigned int v3 = [super isHidden];
    if (v2 != 1 || v3 == 0)
    {
      double v8 = 0;
    }
    else
    {
      id v5 = self;
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v1;
      uint64_t v7 = swift_allocObject();
      double v8 = sub_100105450;
      *(void *)(v7 + 16) = sub_100105450;
      *(void *)(v7 + 24) = v6;
      id v23 = sub_1000879B8;
      uint64_t v24 = v7;
      objc_super v19 = _NSConcreteStackBlock;
      uint64_t v20 = 1107296256;
      uint64_t v21 = sub_100087990;
      uint64_t v22 = &unk_10068C9E0;
      id v9 = _Block_copy(&v19);
      uint64_t v10 = v1;
      swift_retain();
      swift_release();
      [v5 performWithoutAnimation:v9];
      _Block_release(v9);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (isEscapingClosureAtFileLocation)
      {
        __break(1u);
        return result;
      }
    }
    uint64_t v12 = self;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v1;
    id v23 = sub_1001053B8;
    uint64_t v24 = v13;
    objc_super v19 = _NSConcreteStackBlock;
    uint64_t v20 = 1107296256;
    uint64_t v21 = sub_1000666D8;
    uint64_t v22 = &unk_10068C918;
    id v14 = _Block_copy(&v19);
    id v15 = v1;
    swift_release();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v15;
    *(unsigned char *)(v16 + 24) = v2 != 1;
    id v23 = sub_1001053F8;
    uint64_t v24 = v16;
    objc_super v19 = _NSConcreteStackBlock;
    uint64_t v20 = 1107296256;
    uint64_t v21 = sub_10000A884;
    uint64_t v22 = &unk_10068C968;
    BOOL v17 = _Block_copy(&v19);
    objc_super v18 = v15;
    swift_release();
    [v12 animateWithDuration:v14 animations:v17 completion:0.15];
    _Block_release(v17);
    _Block_release(v14);
    return sub_1000A7258((uint64_t)v8);
  }
  return result;
}

void *sub_100105060(char *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state;
  double v3 = 0.0;
  if (*(void *)&a1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state] == 1) {
    double v3 = 1.0;
  }
  [a1 setAlpha:v3];
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    [result dimmingOverlayStateDidChange:a1 state:*(void *)&a1[v2]];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

id sub_100105264()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCContentDimmingOverlay();
  return [super dealloc];
}

uint64_t type metadata accessor for DOCContentDimmingOverlay()
{
  return self;
}

ValueMetadata *type metadata accessor for DOCContentDimmingOverlay.DOCDimmingState()
{
  return &type metadata for DOCContentDimmingOverlay.DOCDimmingState;
}

unint64_t sub_10010532C()
{
  unint64_t result = qword_100706990;
  if (!qword_100706990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706990);
  }
  return result;
}

uint64_t sub_100105380()
{
  return _swift_deallocObject(v0, 24, 7);
}

void *sub_1001053B8()
{
  return sub_100105060(*(char **)(v0 + 16));
}

uint64_t sub_1001053C0()
{
  return _swift_deallocObject(v0, 25, 7);
}

id sub_1001053F8(id result)
{
  if (result)
  {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 24);
    v3.receiver = *(id *)(v1 + 16);
    v3.super_class = (Class)type metadata accessor for DOCContentDimmingOverlay();
    return [super setHidden:v2];
  }
  return result;
}

id sub_100105450()
{
  uint64_t v1 = *(void **)(v0 + 16);
  [v1 setAlpha:0.0];
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DOCContentDimmingOverlay();
  return [super setHidden:0];
}

uint64_t sub_1001054A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

const char *sub_1001054B8()
{
  return "isItemCollectionDragActive";
}

id sub_1001054C4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isItemCollectionDragActive];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1001054F8(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsItemCollectionDragActive:*a1];
}

uint64_t sub_10010550C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100105544()
{
}

void sub_10010554C()
{
  *(void *)&v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dropInteraction] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO] = 0;
  v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_autohideWhenPossibleDropTarget] = 0;
  v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_active] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state] = 0;
  v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_hasDropTargetRequiringAutohide] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *sub_100105610(void *a1, uint64_t a2)
{
  objc_super v3 = v2;
  if ((v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_endingInlineRename] & 1) == 0
    && (*(void *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_inlineRenameController]
     || (v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_preparingForInlineRename] & 1) != 0))
  {
    return _swiftEmptyArrayStorage;
  }
  id v5 = sub_10010AA60(a2);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = v5;
  swift_getObjectType();
  if ((DOCNode.doc_isAppContainerRoot.getter() & 1) != 0
    || (objc_msgSend(v6, "doc_isCollaborationInvitation") & 1) != 0)
  {
    goto LABEL_5;
  }
  id v7 = [a1 items];
  sub_10009E6C4(0, (unint64_t *)&unk_10070C600);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRetain();
  LOBYTE(v7) = sub_10010B060(v8, v6);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v7)
  {
    id v9 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.debug.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_10059B760;
    *(void *)(v10 + 56) = &type metadata for String;
    unint64_t v11 = sub_100073F48();
    *(void *)(v10 + 64) = v11;
    *(void *)(v10 + 32) = 0xD000000000000019;
    *(void *)(v10 + 40) = 0x80000001005D4CA0;
    id v12 = [v6 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    *(void *)(v10 + 96) = &type metadata for String;
    *(void *)(v10 + 104) = v11;
    *(void *)(v10 + 72) = v13;
    *(void *)(v10 + 80) = v15;
    os_log(_:dso:log:type:_:)();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v18 = DOCNode.fpfs_syncFetchFPItem()();
  if (!v18)
  {
LABEL_5:
    swift_unknownObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  objc_super v19 = (void *)v18;
  id v34 = 0;
  id v20 = [self defaultPermission];
  id v21 = [v20 dataOwnerStateForNode:v6];

  if (v21 == (id)1) {
    uint64_t v22 = 2;
  }
  else {
    uint64_t v22 = v21 == (id)2;
  }
  id v23 = self;
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = &v34;
  _OWORD v24[3] = v19;
  void v24[4] = v3;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_10010C4D4;
  *(void *)(v25 + 24) = v24;
  v33[4] = sub_1000879B8;
  v33[5] = v25;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 1107296256;
  v33[2] = sub_100087990;
  v33[3] = &unk_10068CAF8;
  uint64_t v26 = _Block_copy(v33);
  id v27 = v3;
  swift_retain();
  id v28 = v19;
  swift_release();
  [v23 _performAsDataOwner:v22 block:v26];
  _Block_release(v26);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  id result = (void *)swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else if (v34)
  {
    id v30 = [objc_allocWithZone((Class)UIDragItem) initWithItemProvider:v34];
    [v30 setLocalObject:v28];
    sub_1000CBE70((uint64_t *)&unk_1007084E0);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1005A04F0;
    *(void *)(v31 + 32) = v30;
    v33[0] = v31;
    specialized Array._endMutation()();
    uint64_t v16 = v33[0];
    swift_unknownObjectRelease();

    uint64_t v32 = v34;
    swift_release();

    return (void *)v16;
  }
  __break(1u);
  return result;
}

void sub_100105A70(id *a1, void *a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)NSItemProvider) init];
  id v7 = *a1;
  *a1 = v6;

  if (*a1)
  {
    unint64_t v8 = *(void **)(*(void *)(a3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration)
                  + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
    id v11 = *a1;
    id v9 = *a1;
    if (v8) {
      unsigned int v10 = [v8 supportsPickingFolders];
    }
    else {
      unsigned int v10 = 2;
    }
    NSItemProvider.registerFPItem(_:supportsPickingFolders:disableExternalFolders:disableRealUTI:)(a2, v10, 0, 0);
  }
}

unint64_t DOCItemCollectionViewController.collectionView(_:itemsForBeginning:at:)(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_10010B188(a2, a3);
}

void *DOCItemCollectionViewController.collectionView(_:itemsForAddingTo:at:point:)(uint64_t a1, void (**a2)(char *, uint64_t), uint64_t a3)
{
  return sub_10010B37C(a2, a3);
}

void DOCItemCollectionViewController.collectionView(_:dragSessionWillBegin:)(uint64_t a1, uint64_t a2)
{
}

id DOCItemCollectionViewController.collectionView(_:dragPreviewParametersForItemAt:)(uint64_t a1, uint64_t a2)
{
  return sub_10010B81C(a2);
}

void *sub_100105F88(uint64_t a1, void *a2, void *a3)
{
  id v65 = a2;
  uint64_t v6 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  id v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v63 - v10;
  uint64_t v12 = type metadata accessor for IndexPath();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v66 = (char *)&v63 - v17;
  swift_getObjectType();
  id v18 = [a3 localDragSession];
  swift_unknownObjectRelease();
  if (v18
    && ([*(id *)(v3 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration) isPickerUI] & 1) != 0)
  {
    return 0;
  }
  id v64 = v16;
  uint64_t v67 = v3;
  objc_super v19 = sub_100497424();
  sub_1002F4E20((uint64_t)v19);
  swift_bridgeObjectRelease();
  sub_10010BFFC(a1, (uint64_t)v11);
  id v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v20(v11, 1, v12) != 1)
  {
    uint64_t v23 = (uint64_t)v66;
    uint64_t v63 = *(void (**)(void))(v13 + 32);
    v63();
    if (IndexPath.count.getter() != 2) {
      goto LABEL_10;
    }
    id result = *(void **)(v67 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
    if (!result) {
      goto LABEL_45;
    }
    if (([result isGathering] & 1) == 0
      && (*(unsigned char *)(v67 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__showsCreateButton) & 1) != 0
      && (sub_1001DAF30(v23) & 1) != 0)
    {
LABEL_10:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v12);
LABEL_12:
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v23, v12);
      id result = (void *)sub_1000CBBA4((uint64_t)v9, (uint64_t *)&unk_1007069A0);
      uint64_t v22 = v67;
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v9, v23, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    if (v20(v9, 1, v12) == 1) {
      goto LABEL_12;
    }
    uint64_t v30 = (uint64_t)v64;
    ((void (*)(char *, char *, uint64_t))v63)(v64, v9, v12);
    uint64_t v31 = sub_1001BAA44(v30, 0);
    if (v31)
    {
      BOOL v29 = (void *)v31;
      swift_getObjectType();
      uint64_t v32 = DOCNode.fpfs_syncFetchFPItem()();
      if (v32)
      {
        id v33 = (void *)v32;
        if ((sub_1004978CC() & 1) == 0)
        {
          unsigned int v49 = [v29 isFolder];
          swift_unknownObjectRelease();

          uint64_t v50 = *(void (**)(char *, uint64_t))(v13 + 8);
          v50(v64, v12);
          id result = (void *)((uint64_t (*)(char *, uint64_t))v50)(v66, v12);
          uint64_t v22 = v67;
          if (v49) {
            goto LABEL_34;
          }
          goto LABEL_13;
        }
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        id v35 = [v65 cellForItemAtIndexPath:isa];

        uint64_t v36 = v64;
        if (v35)
        {
          type metadata accessor for DOCItemCollectionCell();
          uint64_t v37 = swift_dynamicCastClass();
          if (v37)
          {
            uint64_t v38 = (char *)v37;
            [a3 locationInView:v37];
            CGFloat v40 = v39;
            CGFloat v42 = v41;
            uint64_t v43 = (void *)(v67 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
            swift_beginAccess();
            if (*v43)
            {
              [v38 bounds];
            }
            else
            {
              id v52 = *(id *)&v38[OBJC_IVAR____TtC5Files21DOCItemCollectionCell_thumbnailView];
              [v52 bounds];
              [v52 convertRect:v38 toCoordinateSpace:];
              CGFloat v54 = v53;
              CGFloat v56 = v55;
              CGFloat v58 = v57;
              CGFloat v60 = v59;

              v69.origin.x = v54;
              v69.origin.y = v56;
              v69.size.width = v58;
              v69.size.height = v60;
              *(CGRect *)&uint64_t v44 = CGRectInset(v69, -10.0, -10.0);
            }
            v68.x = v40;
            v68.y = v42;
            BOOL v61 = CGRectContainsPoint(*(CGRect *)&v44, v68);

            uint64_t v62 = *(void (**)(char *, uint64_t))(v13 + 8);
            v62(v36, v12);
            v62(v66, v12);
            if (v61)
            {
              swift_release();
              return v29;
            }
            id result = (void *)swift_unknownObjectRelease();
            goto LABEL_43;
          }
        }
        swift_unknownObjectRelease();

        uint64_t v51 = *(void (**)(char *, uint64_t))(v13 + 8);
        v51(v36, v12);
        id result = (void *)((uint64_t (*)(char *, uint64_t))v51)(v66, v12);
LABEL_43:
        uint64_t v22 = v67;
        goto LABEL_13;
      }
      swift_unknownObjectRelease();
      uint64_t v23 = (uint64_t)v66;
    }
    swift_release();
    uint64_t v48 = *(void (**)(char *, uint64_t))(v13 + 8);
    v48(v64, v12);
    v48((char *)v23, v12);
    return 0;
  }
  id result = (void *)sub_1000CBBA4((uint64_t)v11, (uint64_t *)&unk_1007069A0);
  uint64_t v22 = v67;
LABEL_13:
  uint64_t v24 = *(void *)(v22 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (v24)
  {
    if (*(unsigned char *)(v24 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16))
    {
      swift_unknownObjectRetain();
      goto LABEL_17;
    }
    uint64_t v25 = *(void *)(v24 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 8);
    swift_unknownObjectRetain();
    if (v25)
    {
LABEL_17:
      swift_getObjectType();
      uint64_t v26 = (void *)DOCNode.fpfs_syncFetchFPItem()();
      swift_unknownObjectRelease();
      if (v26)
      {
        char v27 = sub_1004978CC();
        swift_release();
        if (v27)
        {
          id v28 = (void *)(v24 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type);
          if (*(unsigned char *)(v24 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16)) {
            BOOL v29 = *(void **)(*v28 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
          }
          else {
            BOOL v29 = (void *)v28[1];
          }
          swift_unknownObjectRetain();

          return v29;
        }

        return 0;
      }
    }
LABEL_34:
    swift_release();
    return 0;
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

void DOCItemCollectionViewController.collectionView(_:performDropWith:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  objc_super v70 = a1;
  uint64_t v5 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  CGRect v69 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v9 = (char *)&v69 - v8;
  uint64_t v10 = (void *)static DOCLog.UI.getter();
  static os_log_type_t.debug.getter();
  uint64_t v71 = sub_1000CBE70((uint64_t *)&unk_100708800);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10059B760;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v12 = sub_100073F48();
  *(void *)(v11 + 64) = v12;
  unint64_t v72 = v12;
  unint64_t v73 = (unint64_t)"8";
  *(void *)(v11 + 32) = 0xD000000000000022;
  *(void *)(v11 + 40) = 0x80000001005D48A0;
  self;
  uint64_t v13 = swift_dynamicCastObjCClassUnconditional();
  *(void *)(v11 + 96) = sub_10009E6C4(0, (unint64_t *)&qword_100706710);
  *(void *)(v11 + 104) = sub_1000C5A24((unint64_t *)&unk_1007069B0, (unint64_t *)&qword_100706710);
  *(void *)(v11 + 72) = v13;
  swift_unknownObjectRetain();
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v14 = type metadata accessor for IndexPath();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v9, 1, 1, v14);
  long long v74 = v3;
  sub_100107020((uint64_t)v9);
  sub_1000CBBA4((uint64_t)v9, (uint64_t *)&unk_1007069A0);
  id v16 = [a2 items];
  sub_1000CBE70(&qword_100709890);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_29;
  }
  if (*(void *)&v74[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enumerationIdentifier])
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
    {
      swift_bridgeObjectRelease_n();
LABEL_10:
      uint64_t v24 = *(void **)&v74[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enumerationProperties];
      if (!v24) {
        return;
      }
      id v25 = [v24 tagIdentifiers];
      if (!v25) {
        return;
      }
      uint64_t v26 = v25;
      uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v27 + 16) == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        id v28 = [self sharedInstance];
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v30 = [v28 tagForName:v29];

        if (v30)
        {
          id v31 = [a2 session];
          uint64_t v32 = sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
          id v33 = v30;
          sub_10049E304(v31, v74, v32, v33);
          swift_unknownObjectRelease();
LABEL_28:

          return;
        }
        return;
      }
LABEL_30:
      swift_bridgeObjectRelease();
      return;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_10;
    }
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;
    if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v36 == v37)
    {
      swift_bridgeObjectRelease_n();
LABEL_20:
      uint64_t v39 = sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
      id v40 = [a2 session];
      uint64_t v41 = swift_allocObject();
      CGFloat v42 = v74;
      swift_unknownObjectWeakInit();
      sub_10049E748(v40, v42, v39, v41);
      swift_unknownObjectRelease();
      swift_release();
      return;
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v38) {
      goto LABEL_20;
    }
  }
  id v43 = [a2 destinationIndexPath];
  if (v43)
  {
    uint64_t v44 = v43;
    uint64_t v45 = (uint64_t)v69;
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = 1;
    uint64_t v45 = (uint64_t)v69;
  }
  v15((char *)v45, v46, 1, v14);
  id v47 = [a2 session];
  uint64_t v48 = sub_100105F88(v45, v70, v47);
  swift_unknownObjectRelease();
  sub_1000CBBA4(v45, (uint64_t *)&unk_1007069A0);
  if (!v48
    || (swift_getObjectType(), unsigned int v49 = (void *)DOCNode.fpfs_syncFetchFPItem()(), swift_unknownObjectRelease(), !v49))
  {
LABEL_29:
    double v59 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.debug.getter();
    uint64_t v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = xmmword_1005A0030;
    unint64_t v61 = v72;
    *(void *)(v60 + 56) = &type metadata for String;
    *(void *)(v60 + 64) = v61;
    unint64_t v62 = v73 | 0x8000000000000000;
    *(void *)(v60 + 32) = 0xD000000000000022;
    *(void *)(v60 + 40) = v62;
    os_log(_:dso:log:type:_:)();

    goto LABEL_30;
  }
  uint64_t v50 = sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
  uint64_t v51 = (void (**)(char *, uint64_t))[a2 session];
  swift_getObjectType();
  char v52 = sub_10049BAF8(v51, v50);
  swift_unknownObjectRelease();
  if (v52)
  {
    double v53 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.debug.getter();
    uint64_t v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_1005A0030;
    unint64_t v55 = v72;
    *(void *)(v54 + 56) = &type metadata for String;
    *(void *)(v54 + 64) = v55;
    unint64_t v56 = v73 | 0x8000000000000000;
    *(void *)(v54 + 32) = 0xD000000000000022;
    *(void *)(v54 + 40) = v56;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    id v57 = [a2 session];
    CGFloat v58 = v74;
    id v33 = v49;
    sub_10049F064(v57, v58, v50, v58, v33);
    swift_unknownObjectRelease();

    goto LABEL_28;
  }
  id v63 = objc_msgSend(objc_msgSend(a2, "session"), "items");
  swift_unknownObjectRelease();
  sub_10009E6C4(0, (unint64_t *)&unk_10070C600);
  unint64_t v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v65 = swift_allocObject();
  uint64_t v66 = v74;
  swift_unknownObjectWeakInit();
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v65;
  *(void *)(v67 + 24) = v49;
  id v68 = v49;
  swift_retain();
  sub_10049F708(v64, v68, v66, (uint64_t)sub_10010BA70, v67);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
}

void sub_100107020(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010BFFC(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000CBBA4((uint64_t)v6, (uint64_t *)&unk_1007069A0);
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  [v2 loadViewIfNeeded];
  uint64_t v11 = *(void **)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v11)
  {
    id v12 = v11;
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v14 = [v12 cellForItemAtIndexPath:isa];

    if (v14)
    {
      type metadata accessor for DOCItemCollectionCell();
      uint64_t v15 = (void *)swift_dynamicCastClass();
      if (v15 && (id v16 = v14, ([v15 isHighlighted] & 1) == 0))
      {
        [v15 setHighlighted:1];
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_12:
      uint64_t v17 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_dropTargetHighlightedCell;
      id v18 = *(id *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_dropTargetHighlightedCell];
      if (v18)
      {
        if (v15)
        {
          type metadata accessor for DOCItemCollectionCell();
          id v19 = v15;
          id v18 = v18;
          char v20 = static NSObject.== infix(_:_:)();

          if (v20) {
            goto LABEL_20;
          }
        }
        else
        {
          id v18 = v18;
        }
        id v18 = v18;
        if ([v18 isHighlighted]) {
          [v18 setHighlighted:0];
        }
      }
LABEL_20:
      uint64_t v21 = *(void **)&v2[v17];
      *(void *)&v2[v17] = v15;

      return;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_9:
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  __break(1u);
}

void sub_10010730C(unint64_t a1, void *a2)
{
  uint64_t v34 = type metadata accessor for DOCOperationItem();
  uint64_t v4 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {

    id v36 = [self defaultManager];
    unint64_t v38 = (unint64_t)_swiftEmptyArrayStorage;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      id v33 = a2;
      if (v8)
      {
LABEL_4:
        if (v8 < 1)
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return;
        }
        uint64_t v32 = v4;
        uint64_t v9 = 0;
        unint64_t v10 = a1 & 0xC000000000000001;
        uint64_t v11 = (void *)FPActionTrash;
        long long v35 = xmmword_1005A04F0;
        unint64_t v12 = a1;
        do
        {
          if (v10) {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v13 = *(id *)(a1 + 8 * v9 + 32);
          }
          id v14 = v13;
          sub_1000CBE70((uint64_t *)&unk_1007084E0);
          uint64_t v15 = swift_allocObject();
          *(_OWORD *)(v15 + 16) = v35;
          *(void *)(v15 + 32) = v14;
          uint64_t v37 = (void *)v15;
          specialized Array._endMutation()();
          sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
          id v16 = v14;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v18 = [v36 eligibleActionsForItems:isa];

          type metadata accessor for FPAction(0);
          sub_10010C0CC((unint64_t *)&qword_1007069D0, type metadata accessor for FPAction);
          static Set._unconditionallyBridgeFromObjectiveC(_:)();

          id v19 = v11;
          char v20 = sub_1005350BC();

          swift_bridgeObjectRelease();
          if (v20)
          {
            id v21 = v16;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v9;

          a1 = v12;
        }
        while (v8 != v9);
        swift_bridgeObjectRelease();
        unint64_t v22 = v38;
        uint64_t v4 = v32;
        if (!(v38 >> 62))
        {
LABEL_15:
          uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v23)
          {
            swift_bridgeObjectRetain();
LABEL_17:
            uint64_t v37 = _swiftEmptyArrayStorage;
            sub_100190F0C(0, v23 & ~(v23 >> 63), 0);
            if ((v23 & 0x8000000000000000) == 0)
            {
              uint64_t v24 = 0;
              id v25 = v37;
              do
              {
                if ((v22 & 0xC000000000000001) != 0) {
                  id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v26 = *(id *)(v22 + 8 * v24 + 32);
                }
                *uint64_t v6 = v26;
                swift_storeEnumTagMultiPayload();
                uint64_t v37 = v25;
                unint64_t v28 = v25[2];
                unint64_t v27 = v25[3];
                if (v28 >= v27 >> 1)
                {
                  sub_100190F0C(v27 > 1, v28 + 1, 1);
                  id v25 = v37;
                }
                ++v24;
                void v25[2] = v28 + 1;
                sub_10010C430((uint64_t)v6, (uint64_t)v25+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v28);
              }
              while (v23 != v24);
              swift_bridgeObjectRelease();
              goto LABEL_26;
            }
            goto LABEL_35;
          }
LABEL_32:

          swift_bridgeObjectRelease();
          return;
        }
LABEL_29:
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v30)
        {
          swift_bridgeObjectRetain();
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          if (!v23)
          {
            swift_bridgeObjectRelease();
            id v25 = _swiftEmptyArrayStorage;
LABEL_26:
            swift_bridgeObjectRelease();
            id v29 = v36;
            sub_100535854(3, (uint64_t)v25, 0, 0, 0, 1, v33, 0, 0);
            swift_bridgeObjectRelease();

            return;
          }
          goto LABEL_17;
        }
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      id v33 = a2;
      if (v8) {
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
}

uint64_t sub_100107818(unint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [*(id *)(a3 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration) hostIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = a4;
  Date.init()();
  id v14 = objc_allocWithZone((Class)DOCHotFolderEvent);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v17 = [v14 initWithAppBundleIdentifier:v15 folderItem:v13 type:1 lastUsedDate:isa frecency:1.0];

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  type metadata accessor for DOCSmartFolderManager();
  id v18 = (void *)static DOCSmartFolderManager.sharedManager.getter();
  DOCSmartFolderManager.register(event:)();

  id v19 = [self defaultManager];
  sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
  Class v20 = Array._bridgeToObjectiveC()().super.isa;
  id v21 = [v19 eligibleActionsForDroppingItems:v20 underItem:v13];

  type metadata accessor for FPAction(0);
  sub_10010C0CC((unint64_t *)&qword_1007069D0, type metadata accessor for FPAction);
  uint64_t v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10049EB74(a1, v13, v22, a2, 0, 0);
  return swift_bridgeObjectRelease();
}

void sub_100107ABC(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v10 = (void *)Strong;
  id v11 = [*(id *)(Strong + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration) hostIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v12 = a3;
  Date.init()();
  id v13 = objc_allocWithZone((Class)DOCHotFolderEvent);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v16 = [v13 initWithAppBundleIdentifier:v14 folderItem:v12 type:1 lastUsedDate:isa frecency:1.0];

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  type metadata accessor for DOCSmartFolderManager();
  id v17 = (void *)static DOCSmartFolderManager.sharedManager.getter();
  DOCSmartFolderManager.register(event:)();

  if (!a1)
  {

    return;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_5;
    }
LABEL_11:

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v18) {
    goto LABEL_11;
  }
LABEL_5:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v19 = *(id *)(a1 + 32);
LABEL_8:
    Class v20 = v19;
    swift_bridgeObjectRelease();
    sub_1000CBE70((uint64_t *)&unk_1007084E0);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1005A04F0;
    *(void *)(v21 + 32) = v20;
    aBlock[0] = v21;
    specialized Array._endMutation()();
    sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
    id v22 = v20;
    Class v23 = Array._bridgeToObjectiveC()().super.isa;
    aBlock[4] = DOCSplitBrowserViewController.didCommitPreview(of:);
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_10000A884;
    aBlock[3] = &unk_10068CA80;
    uint64_t v24 = _Block_copy(aBlock);
    swift_release();
    [v10 revealWithItems:v23 selectEvenIfVisible:0 completionBlock:v24];
    _Block_release(v24);

    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void DOCItemCollectionViewController.collectionView(_:canHandle:)(uint64_t a1, void *a2)
{
}

uint64_t DOCItemCollectionViewController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, void (**a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UTType();
  id v9 = *(id *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v104 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  NSString v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v16 = (char *)&v99 - v15;
  sub_10010BFFC(a3, (uint64_t)&v99 - v15);
  uint64_t v17 = v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_lastDropIndexPath;
  swift_beginAccess();
  sub_10010BFFC(v17, (uint64_t)v14);
  swift_beginAccess();
  sub_10010C064((uint64_t)v16, v17);
  swift_endAccess();
  sub_1001B7800((uint64_t)v14);
  sub_1000CBBA4((uint64_t)v16, (uint64_t *)&unk_1007069A0);
  sub_1000CBBA4((uint64_t)v14, (uint64_t *)&unk_1007069A0);
  if (!*(void *)(v4 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enumerationIdentifier)) {
    goto LABEL_20;
  }
  id v103 = v9;
  uint64_t v18 = v8;
  uint64_t v19 = a3;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25)
  {
LABEL_11:
    uint64_t v30 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v16, 1, 1, v30);
    sub_100107020((uint64_t)v16);
    sub_1000CBBA4((uint64_t)v16, (uint64_t *)&unk_1007069A0);
    return (uint64_t)objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", objc_msgSend(*(id *)(v4+ OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), "isPopoverOrWidget") ^ 1, 0);
  }
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;
  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29) {
    goto LABEL_9;
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v32) {
    goto LABEL_13;
  }
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;
  if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v40 == v41)
  {
LABEL_9:
    swift_bridgeObjectRelease_n();
LABEL_13:
    uint64_t v33 = sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
    swift_getObjectType();
    LOBYTE(v33) = sub_10049BAF8(a2, v33);
    id v34 = objc_allocWithZone((Class)UICollectionViewDropProposal);
    if (v33) {
      uint64_t v35 = 3;
    }
    else {
      uint64_t v35 = 1;
    }
    id v36 = [v34 initWithDropOperation:v35 intent:0];
    uint64_t v37 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v16, 1, 1, v37);
    sub_100107020((uint64_t)v16);
    sub_1000CBBA4((uint64_t)v16, (uint64_t *)&unk_1007069A0);
    return (uint64_t)v36;
  }
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a3 = v19;
  uint64_t v8 = v18;
  id v9 = v103;
  if (v42) {
    goto LABEL_13;
  }
LABEL_20:
  if (!sub_100105F88(a3, a1, a2))
  {
LABEL_26:
    uint64_t v46 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.debug.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_1005A0030;
    *(void *)(v47 + 56) = &type metadata for String;
    *(void *)(v47 + 64) = sub_100073F48();
    *(void *)(v47 + 32) = 0xD000000000000040;
    *(void *)(v47 + 40) = 0x80000001005D4960;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    uint64_t v48 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v16, 1, 1, v48);
    sub_100107020((uint64_t)v16);
    sub_1000CBBA4((uint64_t)v16, (uint64_t *)&unk_1007069A0);
    return (uint64_t)[objc_allocWithZone((Class)UICollectionViewDropProposal) initWithDropOperation:1 intent:0];
  }
  swift_getObjectType();
  id v43 = (void *)DOCNode.fpfs_syncFetchFPItem()();
  if (!v43)
  {
    swift_unknownObjectRelease();
    goto LABEL_26;
  }
  id v103 = v43;
  uint64_t v102 = a3;
  swift_getObjectType();
  id v44 = [a2 localDragSession];
  if (!v44)
  {
    long long v106 = 0u;
    long long v107 = 0u;
LABEL_36:
    uint64_t result = sub_1000CBBA4((uint64_t)&v106, (uint64_t *)&unk_100705D60);
    goto LABEL_37;
  }
  id v45 = [v44 localContext];
  swift_unknownObjectRelease();
  if (v45)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v105, 0, 32);
  }
  sub_1000516C4((uint64_t)v105, (uint64_t)&v106);
  if (!*((void *)&v107 + 1)) {
    goto LABEL_36;
  }
  sub_1000CBE70((uint64_t *)&unk_100706730);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      sub_10009E6C4(0, (unint64_t *)&qword_100706710);
      swift_unknownObjectRetain();
      char v50 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v50)
      {
LABEL_35:
        uint64_t v51 = type metadata accessor for IndexPath();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v16, 1, 1, v51);
        sub_100107020((uint64_t)v16);
        sub_1000CBBA4((uint64_t)v16, (uint64_t *)&unk_1007069A0);
        id v36 = [objc_allocWithZone((Class)UICollectionViewDropProposal) initWithDropOperation:0 intent:0];
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
        return (uint64_t)v36;
      }
    }
    else
    {
      self;
      if (swift_dynamicCastObjCClass())
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          uint64_t v101 = sub_10009E6C4(0, (unint64_t *)&unk_100705C20);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          char v88 = static NSObject.== infix(_:_:)();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (v88) {
            goto LABEL_35;
          }
        }
      }
    }
    uint64_t result = swift_unknownObjectRelease();
  }
LABEL_37:
  uint64_t v52 = *(void *)(v4 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (v52)
  {
    uint64_t v53 = v52 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
    if (*(unsigned char *)(v53 + 16))
    {
      uint64_t v54 = *(void **)(*(void *)v53 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v54 = *(void **)(v53 + 8);
      swift_unknownObjectRetain();
      if (!v54) {
        goto LABEL_44;
      }
    }
    id v55 = [v54 fpfs_fpItem];
    swift_unknownObjectRelease();
    if (v55)
    {
      sub_10009E6C4(0, (unint64_t *)&qword_100706710);
      char v56 = static NSObject.== infix(_:_:)();

      if (v56)
      {
        LODWORD(v101) = 0;
        goto LABEL_45;
      }
    }
LABEL_44:
    LODWORD(v101) = 1;
LABEL_45:
    sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
    uint64_t v57 = (uint64_t)v104;
    static UTType.item.getter();
    unint64_t v58 = (unint64_t)sub_10049C6C0(a2, v57);
    (*((void (**)(uint64_t, uint64_t))v9 + 1))(v57, v8);
    if (v58 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v59 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v60 = v102;
    id v61 = v103;
    if (!v59)
    {
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    if (sub_10009EC34((uint64_t)v103, v58, (uint64_t)&qword_1007069C0))
    {
      swift_bridgeObjectRelease();
      uint64_t v62 = type metadata accessor for IndexPath();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v16, 1, 1, v62);
      sub_100107020((uint64_t)v16);
      sub_1000CBBA4((uint64_t)v16, (uint64_t *)&unk_1007069A0);
      id v63 = [objc_allocWithZone((Class)UICollectionViewDropProposal) initWithDropOperation:0 intent:0];
LABEL_80:
      id v36 = v63;
      goto LABEL_81;
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1000CBE70((uint64_t *)&unk_100706730);
    unint64_t Available = Array<A>.fpfs_syncFetchAvailableFPItems()();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v58 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      id v67 = *(id *)(v58 + 32);
    }
    char v68 = sub_10009EC34((uint64_t)v67, Available, (uint64_t)&qword_1007069C0);
    swift_bridgeObjectRelease();
    if (!(v101 & 1 | ((v68 & 1) == 0)))
    {
      swift_bridgeObjectRelease();
      id v36 = [objc_allocWithZone((Class)UICollectionViewDropProposal) initWithDropOperation:1 intent:0];

LABEL_81:
      swift_unknownObjectRelease();

      return (uint64_t)v36;
    }

    id v69 = [self defaultManager];
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v71 = [v69 eligibleActionsForDroppingItems:isa underItem:v61];
    long long v104 = (char *)(v58 & 0xC000000000000001);
    id v72 = v71;

    type metadata accessor for FPAction(0);
    sub_10010C0CC((unint64_t *)&qword_1007069D0, type metadata accessor for FPAction);
    uint64_t v100 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000CBE70((uint64_t *)&unk_1007069D8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A0500;
    long long v74 = (void *)FPActionTrash;
    *(void *)(inited + 32) = FPActionTrash;
    int64_t v75 = (void *)FPActionUntrash;
    uint64_t v76 = (void *)FPActionReparent;
    *(void *)(inited + 40) = FPActionUntrash;
    *(void *)(inited + 48) = v76;
    uint64_t v77 = (void *)FPActionTag;
    *(void *)(inited + 56) = FPActionTag;
    id v78 = v74;
    id v79 = v75;
    id v80 = v76;
    id v81 = v77;
    unint64_t v82 = sub_1004A0904(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v83 = swift_initStackObject();
    *(_OWORD *)(v83 + 16) = xmmword_1005A0030;
    uint64_t v84 = (void *)FPActionCopy;
    *(void *)(v83 + 32) = FPActionCopy;
    id v85 = v84;
    uint64_t v86 = sub_1004A0904(v83);
    swift_setDeallocating();
    uint64_t result = swift_arrayDestroy();
    if (v104)
    {
      id v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v60 = v102;
LABEL_68:
      id v61 = v103;
      uint64_t v89 = v100;
      swift_bridgeObjectRelease();
      id v90 = [self defaultPermission];
      unsigned int v91 = [v90 canItem:v87 performAction:1 item:v61];

      swift_bridgeObjectRetain();
      uint64_t v92 = sub_100109D00((uint64_t)v82, v89);
      swift_bridgeObjectRelease();
      uint64_t v93 = *(void *)(v92 + 16);
      swift_release();
      if (v93)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v94 = v101;
        sub_100108EA0(v60, v101);
        if (v91) {
          uint64_t v95 = 3;
        }
        else {
          uint64_t v95 = 1;
        }
        goto LABEL_76;
      }
      uint64_t v96 = sub_100109D00((uint64_t)v86, v89);
      swift_bridgeObjectRelease();
      uint64_t v97 = *(void *)(v96 + 16);
      swift_release();
      if (v97)
      {
        int v94 = v101;
        sub_100108EA0(v60, v101);
        if (v91) {
          uint64_t v95 = 2;
        }
        else {
          uint64_t v95 = 1;
        }
LABEL_76:
        if (v94) {
          uint64_t v98 = 2;
        }
        else {
          uint64_t v98 = 0;
        }
        id v63 = [objc_allocWithZone((Class)UICollectionViewDropProposal) initWithDropOperation:v95 intent:v98];
        goto LABEL_80;
      }
LABEL_51:
      int v64 = v101;
      sub_100108EA0(v60, v101);
      if (v64) {
        uint64_t v65 = 2;
      }
      else {
        uint64_t v65 = 0;
      }
      id v63 = [objc_allocWithZone((Class)UICollectionViewDropProposal) initWithDropOperation:2 intent:v65];
      goto LABEL_80;
    }
    uint64_t v60 = v102;
    if (*(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v87 = *(id *)(v58 + 32);
      goto LABEL_68;
    }
    goto LABEL_85;
  }
LABEL_86:
  __break(1u);
  return result;
}

uint64_t sub_100108EA0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v15 - v8;
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010BFFC(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1000CBBA4((uint64_t)v9, (uint64_t *)&unk_1007069A0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    if (a2)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v7, v13, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      sub_100107020((uint64_t)v7);
      sub_1000CBBA4((uint64_t)v7, (uint64_t *)&unk_1007069A0);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1, 1, v10);
  sub_100107020((uint64_t)v7);
  return sub_1000CBBA4((uint64_t)v7, (uint64_t *)&unk_1007069A0);
}

uint64_t sub_1001090FC(uint64_t a1, unint64_t a2)
{
  return sub_10009EC34(a1, a2, (uint64_t)&unk_100705CD0);
}

uint64_t sub_100109110(uint64_t a1, unint64_t a2)
{
  return sub_10009EC34(a1, a2, (uint64_t)&qword_1007069C0);
}

uint64_t sub_100109128(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  id v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001091F0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

void sub_100109254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v5 = a5 >> 1;
  if (a5 >> 1 != a4)
  {
    char v6 = a5;
    uint64_t v7 = a4;
    sub_10009E6C4(0, (unint64_t *)&unk_1007085C0);
    if (v5 > v7)
    {
      id v9 = *(void **)(a3 + 8 * v7);
      swift_unknownObjectRetain();
      id v10 = v9;
      char v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) != 0 || v7 + 1 == v5)
      {
LABEL_5:
        swift_unknownObjectRelease();
        return;
      }
      uint64_t v12 = v5 - 2;
      uint64_t v13 = a3 + 8;
      if (v6)
      {
        while (v7 + 1 < v5)
        {
          id v17 = *(id *)(v13 + 8 * v7);
          char v18 = static NSObject.== infix(_:_:)();

          if ((v18 & 1) == 0)
          {
            BOOL v16 = v12 == v7++;
            if (!v16) {
              continue;
            }
          }
          goto LABEL_5;
        }
      }
      else
      {
        while (v7 + 1 < v5)
        {
          id v14 = *(id *)(v13 + 8 * v7);
          char v15 = static NSObject.== infix(_:_:)();

          if ((v15 & 1) == 0)
          {
            BOOL v16 = v12 == v7++;
            if (!v16) {
              continue;
            }
          }
          goto LABEL_5;
        }
        __break(1u);
      }
      __break(1u);
    }
    __break(1u);
  }
}

BOOL sub_1001093B8(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100109418(uint64_t a1, unint64_t a2)
{
  return sub_10009EC34(a1, a2, (uint64_t)&unk_100706B70);
}

uint64_t sub_10010942C(uint64_t a1, unint64_t a2)
{
  return sub_10003A49C(a1, a2, (uint64_t (*)(void))type metadata accessor for DOCBrowserContainerController);
}

uint64_t sub_100109444(uint64_t a1, unint64_t a2)
{
  return sub_10003A49C(a1, a2, type metadata accessor for DOCItemCollectionViewController);
}

uint64_t DOCItemCollectionViewController.collectionView(_:dropSessionDidEnter:)(uint64_t a1, void *a2)
{
  return sub_10010C114(a2);
}

void sub_1001095E8(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v8 = a3;
  swift_unknownObjectRetain();
  id v9 = a1;
  a5(a4);

  swift_unknownObjectRelease();
}

uint64_t DOCItemCollectionViewController.collectionView(_:dropSessionDidEnd:)()
{
  *(void *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDropSession) = 0;
  return swift_unknownObjectRelease();
}

void sub_1001096BC(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  id v7 = a3;
  swift_unknownObjectRetain();
  id v8 = a1;
  a5();

  swift_unknownObjectRelease();
}

uint64_t DOCItemCollectionViewController._collectionView(_:dataOwnerFor:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  __chkstk_darwin(v4 - 8);
  int v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010BFFC(a3, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    id v10 = sub_10010AA60((uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    if (!v10) {
      return 0;
    }
    swift_getObjectType();
    uint64_t v11 = sub_100497DF4();
    swift_unknownObjectRelease();
    return v11;
  }
  return result;
}

void *DOCItemCollectionViewController._collectionView(_:dataOwnerFor:withDestinationIndexPath:)(void *result, void *a2, uint64_t a3)
{
  if (result)
  {
    if (sub_100105F88(a3, result, a2))
    {
      swift_getObjectType();
      uint64_t v3 = sub_100497DF4();
      swift_unknownObjectRelease();
      return (void *)v3;
    }
    else
    {
      uint64_t v4 = (void *)static DOCLog.UI.getter();
      static os_log_type_t.debug.getter();
      sub_1000CBE70((uint64_t *)&unk_100708800);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_1005A0030;
      *(void *)(v5 + 56) = &type metadata for String;
      *(void *)(v5 + 64) = sub_100073F48();
      *(void *)(v5 + 32) = 0xD000000000000039;
      *(void *)(v5 + 40) = 0x80000001005D49B0;
      os_log(_:dso:log:type:_:)();

      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100109D00(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    sub_100109E88((unint64_t *)((char *)&v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, a2, v3);
    uint64_t v8 = v7;
    swift_release();
  }
  else
  {
    id v9 = (void *)swift_slowAlloc();
    bzero(v9, v6);
    sub_100109E88((unint64_t *)v9, v5, a2, v3);
    uint64_t v8 = v10;
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

void sub_100109E88(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v68 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v69 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v71 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          uint64_t v74 = (v9 - 1) & v9;
          int64_t v76 = v6;
          unint64_t v11 = __clz(__rbit64(v9)) | (v6 << 6);
        }
        else
        {
          int64_t v12 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_85;
          }
          if (v12 >= v69) {
            goto LABEL_83;
          }
          unint64_t v13 = *(void *)(v68 + 8 * v12);
          int64_t v14 = v6 + 1;
          if (!v13)
          {
            int64_t v14 = v6 + 2;
            if (v6 + 2 >= v69) {
              goto LABEL_83;
            }
            unint64_t v13 = *(void *)(v68 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v6 + 3;
              if (v6 + 3 >= v69) {
                goto LABEL_83;
              }
              unint64_t v13 = *(void *)(v68 + 8 * v14);
              if (!v13)
              {
                uint64_t v15 = v6 + 4;
                if (v6 + 4 >= v69) {
                  goto LABEL_83;
                }
                unint64_t v13 = *(void *)(v68 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      goto LABEL_87;
                    }
                    if (v14 >= v69) {
                      goto LABEL_83;
                    }
                    unint64_t v13 = *(void *)(v68 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v14 = v6 + 4;
              }
            }
          }
LABEL_22:
          uint64_t v74 = (v13 - 1) & v13;
          int64_t v76 = v14;
          unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        }
        BOOL v16 = *(void **)(*(void *)(v4 + 48) + 8 * v11);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        id v72 = v16;
        String.hash(into:)();
        Swift::Int v17 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        uint64_t v18 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v19 = v17 & ~v18;
        unint64_t v20 = v19 >> 6;
        uint64_t v21 = 1 << v19;
        if (((1 << v19) & *(void *)(v10 + 8 * (v19 >> 6))) != 0) {
          break;
        }
LABEL_6:

        int64_t v6 = v76;
        uint64_t v5 = a3;
        uint64_t v4 = a4;
        unint64_t v9 = v74;
      }
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;
      if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
        {
          uint64_t v28 = ~v18;
          for (unint64_t i = v19 + 1; ; unint64_t i = v30 + 1)
          {
            unint64_t v30 = i & v28;
            if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
              break;
            }
            uint64_t v5 = a3;
            uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v33 = v32;
            if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34)
            {
              swift_bridgeObjectRelease_n();
LABEL_38:

              unint64_t v20 = v30 >> 6;
              uint64_t v21 = 1 << v30;
              goto LABEL_39;
            }
            char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v36) {
              goto LABEL_38;
            }
          }
          goto LABEL_6;
        }
      }

      uint64_t v5 = a3;
LABEL_39:
      a1[v20] |= v21;
      BOOL v37 = __OFADD__(v71++, 1);
      uint64_t v4 = a4;
      unint64_t v9 = v74;
      int64_t v6 = v76;
      if (v37) {
        goto LABEL_86;
      }
    }
  }
  int64_t v38 = 0;
  uint64_t v70 = a3 + 56;
  uint64_t v71 = 0;
  uint64_t v39 = 1 << *(unsigned char *)(a3 + 32);
  if (v39 < 64) {
    uint64_t v40 = ~(-1 << v39);
  }
  else {
    uint64_t v40 = -1;
  }
  unint64_t v41 = v40 & *(void *)(a3 + 56);
  int64_t v73 = (unint64_t)(v39 + 63) >> 6;
  uint64_t v42 = a4 + 56;
  while (1)
  {
    if (v41)
    {
      unint64_t v43 = __clz(__rbit64(v41));
      v41 &= v41 - 1;
      int64_t v77 = v38;
      unint64_t v44 = v43 | (v38 << 6);
      goto LABEL_65;
    }
    int64_t v45 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    if (v45 >= v73) {
      goto LABEL_83;
    }
    unint64_t v46 = *(void *)(v70 + 8 * v45);
    int64_t v47 = v38 + 1;
    if (!v46)
    {
      int64_t v47 = v38 + 2;
      if (v38 + 2 >= v73) {
        goto LABEL_83;
      }
      unint64_t v46 = *(void *)(v70 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v38 + 3;
        if (v38 + 3 >= v73) {
          goto LABEL_83;
        }
        unint64_t v46 = *(void *)(v70 + 8 * v47);
        if (!v46) {
          break;
        }
      }
    }
LABEL_64:
    unint64_t v41 = (v46 - 1) & v46;
    int64_t v77 = v47;
    unint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_65:
    unsigned int v49 = *(void **)(*(void *)(v5 + 48) + 8 * v44);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v75 = v49;
    String.hash(into:)();
    Swift::Int v50 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v51 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v52 = v50 & ~v51;
    if (((*(void *)(v42 + ((v52 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v52) & 1) == 0) {
      goto LABEL_48;
    }
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v54;
    if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v55 == v56)
    {
LABEL_79:
      swift_bridgeObjectRelease_n();
      goto LABEL_80;
    }
    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v58)
    {
LABEL_80:

      *(unint64_t *)((char *)a1 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
      BOOL v37 = __OFADD__(v71++, 1);
      int64_t v38 = v77;
      uint64_t v5 = a3;
      if (v37)
      {
        __break(1u);
LABEL_83:
        swift_retain();
        sub_10056C968(a1, a2, v71, v5);
        return;
      }
    }
    else
    {
      uint64_t v59 = ~v51;
      while (1)
      {
        unint64_t v52 = (v52 + 1) & v59;
        if (((*(void *)(v42 + ((v52 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v52) & 1) == 0) {
          break;
        }
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v62 = v61;
        if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v62 == v63) {
          goto LABEL_79;
        }
        char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v65) {
          goto LABEL_80;
        }
      }
LABEL_48:

      int64_t v38 = v77;
      uint64_t v5 = a3;
    }
  }
  uint64_t v48 = v38 + 4;
  if (v38 + 4 >= v73) {
    goto LABEL_83;
  }
  unint64_t v46 = *(void *)(v70 + 8 * v48);
  if (v46)
  {
    int64_t v47 = v38 + 4;
    goto LABEL_64;
  }
  while (1)
  {
    int64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v47 >= v73) {
      goto LABEL_83;
    }
    unint64_t v46 = *(void *)(v70 + 8 * v47);
    ++v48;
    if (v46) {
      goto LABEL_64;
    }
  }
LABEL_88:
  __break(1u);
}

uint64_t (*sub_10010A510(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  int64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10010A764(v6, a2, a3);
  return sub_10010A578;
}

uint64_t (*sub_10010A57C(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  int64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10010A7E4(v6, a2, a3);
  return sub_10010A578;
}

uint64_t (*sub_10010A5E4(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  int64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10010A864(v6, a2, a3);
  return sub_10010A578;
}

uint64_t (*sub_10010A64C(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  int64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10010A8EC(v6, a2, a3);
  return sub_10010A578;
}

uint64_t (*sub_10010A6B4(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  int64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10010A974(v6, a2, a3);
  return sub_10010A578;
}

void sub_10010A71C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_10010A764(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return j__s5Files39DOCFileProviderSyncStateHeaderViewModelC5StateOwxx;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_10010A7E4(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return j__s5Files20DOCNodeGoToCandidateVwxx;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_10010A864(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return destroy for DOCItemCollectionViewController.UpdatedLayoutInfo;
  }
  __break(1u);
  return result;
}

uint64_t destroy for DOCItemCollectionViewController.UpdatedLayoutInfo()
{
  return swift_release();
}

uint64_t (*sub_10010A8EC(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return destroy for DOCNodeGoToCandidate;
  }
  __break(1u);
  return result;
}

uint64_t destroy for DOCNodeGoToCandidate()
{
  return swift_unknownObjectRelease();
}

void (*sub_10010A974(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for DOCFileProviderSyncStateHeaderViewModel.State;
  }
  __break(1u);
  return result;
}

void destroy for DOCFileProviderSyncStateHeaderViewModel.State(id *a1)
{
}

uint64_t sub_10010A9FC()
{
  return static NSObject.== infix(_:_:)() & 1;
}

void *sub_10010AA60(uint64_t a1)
{
  uint64_t v3 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1001DAF30(a1))
  {
    uint64_t v10 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.debug.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_10059B760;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_100073F48();
    *(void *)(v11 + 32) = 0xD000000000000018;
    *(void *)(v11 + 40) = 0x80000001005D4A80;
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    *(void *)(v11 + 96) = sub_10009E6C4(0, &qword_100706B80);
    *(void *)(v11 + 104) = sub_1000C5A24((unint64_t *)&qword_100706B88, &qword_100706B80);
    *(void *)(v11 + 72) = isa;
LABEL_11:
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return 0;
  }
  if (IndexPath.count.getter() != 2) {
    goto LABEL_8;
  }
  uint64_t result = *(void **)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (result)
  {
    if (([result isGathering] & 1) != 0
      || (*(unsigned char *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__showsCreateButton) & 1) == 0
      || (sub_1001DAF30(a1) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
        Swift::Int v17 = (void *)sub_1001BAA44((uint64_t)v9, 0);
        if (v17)
        {
          BOOL v16 = v17;
          if ([v17 isReadable])
          {
            (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
            return v16;
          }
          uint64_t v23 = (void *)static DOCLog.UI.getter();
          v28[3] = static os_log_type_t.debug.getter();
          sub_1000CBE70((uint64_t *)&unk_100708800);
          uint64_t v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = xmmword_10059B760;
          *(void *)(v24 + 56) = &type metadata for String;
          unint64_t v25 = sub_100073F48();
          *(void *)(v24 + 64) = v25;
          *(void *)(v24 + 32) = 0xD000000000000018;
          *(void *)(v24 + 40) = 0x80000001005D4A80;
          sub_10010C0CC(qword_1007097E0, (void (*)(uint64_t))&type metadata accessor for IndexPath);
          uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v24 + 96) = &type metadata for String;
          *(void *)(v24 + 104) = v25;
          *(void *)(v24 + 72) = v26;
          *(void *)(v24 + 80) = v27;
          os_log(_:dso:log:type:_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v18 = (void *)static DOCLog.UI.getter();
          static os_log_type_t.debug.getter();
          sub_1000CBE70((uint64_t *)&unk_100708800);
          uint64_t v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = xmmword_10059B760;
          *(void *)(v19 + 56) = &type metadata for String;
          unint64_t v20 = sub_100073F48();
          *(void *)(v19 + 64) = v20;
          *(void *)(v19 + 32) = 0xD000000000000018;
          *(void *)(v19 + 40) = 0x80000001005D4A80;
          sub_10010C0CC(qword_1007097E0, (void (*)(uint64_t))&type metadata accessor for IndexPath);
          uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v19 + 96) = &type metadata for String;
          *(void *)(v19 + 104) = v20;
          *(void *)(v19 + 72) = v21;
          *(void *)(v19 + 80) = v22;
          os_log(_:dso:log:type:_:)();
        }
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        return 0;
      }
      goto LABEL_10;
    }
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
LABEL_10:
    sub_1000CBBA4((uint64_t)v5, (uint64_t *)&unk_1007069A0);
    uint64_t v10 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.debug.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_10059B760;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_100073F48();
    *(void *)(v14 + 32) = 0xD000000000000018;
    *(void *)(v14 + 40) = 0x80000001005D4A80;
    uint64_t v15 = IndexPath.item.getter();
    *(void *)(v14 + 96) = &type metadata for Int;
    *(void *)(v14 + 104) = &protocol witness table for Int;
    *(void *)(v14 + 72) = v15;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id sub_10010B060(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      [a2 isEqual:[v6 localObject]];

      swift_unknownObjectRelease();
      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  id v9 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  return v9;
}

unint64_t sub_10010B188(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = (void *)static DOCLog.UI.getter();
  static os_log_type_t.debug.getter();
  sub_1000CBE70((uint64_t *)&unk_100708800);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10059B760;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_100073F48();
  *(void *)(v7 + 32) = 0xD000000000000027;
  *(void *)(v7 + 40) = 0x80000001005D4CC0;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  *(void *)(v7 + 96) = sub_10009E6C4(0, &qword_100706B80);
  *(void *)(v7 + 104) = sub_1000C5A24((unint64_t *)&qword_100706B88, &qword_100706B80);
  *(void *)(v7 + 72) = isa;
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  unint64_t result = (unint64_t)sub_100105610(a1, a2);
  unint64_t v10 = result;
  if (!(result >> 62))
  {
    if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
    return v10;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v14) {
    return v10;
  }
LABEL_3:
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (v11)
  {
    uint64_t v12 = v11 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
    if (*(unsigned char *)(v12 + 16)) {
      uint64_t v13 = *(void *)(*(void *)v12 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    }
    else {
      uint64_t v13 = *(void *)(v12 + 8);
    }
    swift_unknownObjectRetain();
    [a1 setLocalContext:v13];
    swift_unknownObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10010B37C(void (**a1)(char *, uint64_t), uint64_t a2)
{
  uint64_t v24 = type metadata accessor for UTType();
  uint64_t v21 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = (void *)static DOCLog.UI.getter();
  static os_log_type_t.debug.getter();
  sub_1000CBE70((uint64_t *)&unk_100708800);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10059B760;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_100073F48();
  *(void *)(v7 + 32) = 0xD00000000000002CLL;
  *(void *)(v7 + 40) = 0x80000001005D4C20;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  *(void *)(v7 + 96) = sub_10009E6C4(0, &qword_100706B80);
  *(void *)(v7 + 104) = sub_1000C5A24((unint64_t *)&qword_100706B88, &qword_100706B80);
  *(void *)(v7 + 72) = isa;
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
  uint64_t v9 = sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
  swift_getObjectType();
  uint64_t v23 = v9;
  unint64_t v10 = _swiftEmptyArrayStorage;
  if ((sub_10049BAF8(a1, v9) & 1) == 0) {
    return v10;
  }
  unint64_t v11 = (unint64_t)sub_100105610(a1, a2);
  unint64_t v12 = v11;
  uint64_t v28 = _swiftEmptyArrayStorage;
  if (!(v11 >> 62))
  {
    uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_4;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  if (!v13)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_4:
  unint64_t v22 = v12 & 0xC000000000000001;
  uint64_t v14 = (void (**)(char *, uint64_t))(v21 + 8);
  for (uint64_t i = 4; ; ++i)
  {
    if (v22) {
      BOOL v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      BOOL v16 = *(id *)(v12 + 8 * i);
    }
    unint64_t v10 = v16;
    uint64_t v17 = i - 3;
    if (__OFADD__(i - 4, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    unint64_t result = [v16 localObject];
    if (!result) {
      break;
    }
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000A54B0(&v26, &v27);
    swift_dynamicCast();
    id v19 = v25;
    id v20 = [v25 contentType];
    static UTType._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v20) = UTType.isFolderUTI.getter();
    (*v14)(v5, v24);
    if (v20)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    if (v17 == v13)
    {
      swift_bridgeObjectRelease();
      return v28;
    }
  }
  __break(1u);
  return result;
}

void sub_10010B710(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession;
  *(void *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession] = a1;
  swift_unknownObjectRetain_n();
  swift_unknownObjectRelease();
  if (qword_100704F58 != -1) {
    swift_once();
  }
  [(id)qword_100736F38 setIsItemCollectionDragActive:*(void *)&v1[v2] != 0];
  swift_unknownObjectRelease();
  int v3 = v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isActiveDragSource];
  v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isActiveDragSource] = 1;
  if (v3 != 1)
  {
    id v5 = *(id *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_activeDragStrongReferenceToSelf];
    *(void *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_activeDragStrongReferenceToSelf] = v1;
    uint64_t v4 = v1;
  }
}

id sub_10010B81C(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
  swift_beginAccess();
  id v4 = 0;
  if (!*v3)
  {
    id v5 = sub_1001B533C(a1);
    id v6 = [objc_allocWithZone((Class)UIDragPreviewParameters) init];
    id v7 = [v5 visiblePath];
    [v6 setVisiblePath:v7];

    id v4 = v6;
    id v8 = [v5 backgroundColor];
    [v4 setBackgroundColor:v8];
  }
  return v4;
}

void _s5Files31DOCItemCollectionViewControllerC010collectionD0_17dragSessionDidEndySo012UICollectionD0C_So06UIDragH0_ptF_0()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession;
  *(void *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession) = 0;
  swift_unknownObjectRelease();
  if (qword_100704F58 != -1) {
    swift_once();
  }
  [(id)qword_100736F38 setIsItemCollectionDragActive:*(void *)(v0 + v1) != 0];
  *(unsigned char *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isSpringLoading) = 0;
  char v2 = *(unsigned char *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isActiveDragSource);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isActiveDragSource) = 0;
  if (v2)
  {
    int v3 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_activeDragStrongReferenceToSelf);
    *(void *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_activeDragStrongReferenceToSelf) = 0;
  }
}

uint64_t sub_10010B9F8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010BA30()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10010BA70(unint64_t a1)
{
  sub_100107ABC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_10010BA78(void *a1)
{
  uint64_t v2 = type metadata accessor for DOCDragPasteboardType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 items];
  uint64_t v7 = sub_10009E6C4(0, (unint64_t *)&unk_10070C600);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v9)
  {
    uint64_t v29 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.debug.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1005A0030;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = sub_100073F48();
    *(void *)(v30 + 32) = 0xD00000000000001CLL;
    *(void *)(v30 + 40) = 0x80000001005D4BA0;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  id v10 = [a1 items];
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_6;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    long long v27 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.debug.getter();
    sub_1000CBE70((uint64_t *)&unk_100708800);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1005A0030;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_100073F48();
    *(void *)(v28 + 32) = 0xD00000000000001CLL;
    *(void *)(v28 + 40) = 0x80000001005D4BA0;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    return;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v40 = v3;
  uint64_t v41 = v7;
  unint64_t v13 = 0;
  unint64_t v14 = v11 & 0xC000000000000001;
  unint64_t v36 = v11 + 32;
  uint64_t v37 = v11 & 0xFFFFFFFFFFFFFF8;
  uint64_t v45 = v3 + 16;
  uint64_t v15 = (void (**)(char *, uint64_t))(v3 + 8);
  unint64_t v43 = v11;
  unint64_t v38 = v11 & 0xC000000000000001;
  uint64_t v39 = v12;
  while (1)
  {
    if (v14)
    {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v13 >= *(void *)(v37 + 16))
      {
        __break(1u);
        return;
      }
      id v16 = *(id *)(v36 + 8 * v13);
    }
    id v46 = v16;
    BOOL v17 = __OFADD__(v13, 1);
    uint64_t v7 = v13 + 1;
    if (v17)
    {
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v18 = DOCAcceptableDragPasteboardTypes.getter();
    uint64_t v19 = *(void *)(v18 + 16);
    if (!v19) {
      break;
    }
    uint64_t v42 = v7;
    uint64_t v20 = v3;
    unint64_t v21 = v18 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v22 = *(void *)(v20 + 72);
    uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 16);
    uint64_t v44 = v18;
    swift_bridgeObjectRetain();
    while (1)
    {
      v23(v5, v21, v2);
      id v24 = [v46 itemProvider];
      DOCDragPasteboardType.typeIdentifier.getter();
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned int v26 = [v24 hasRepresentationConformingToTypeIdentifier:v25 fileOptions:0];

      (*v15)(v5, v2);
      if (v26) {
        break;
      }
      v21 += v22;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_20;
      }
    }

    swift_bridgeObjectRelease_n();
    uint64_t v3 = v40;
    unint64_t v13 = v42;
    unint64_t v11 = v43;
    unint64_t v14 = v38;
    if (v42 == v39) {
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_20:
  uint64_t v31 = (void *)static DOCLog.UI.getter();
  static os_log_type_t.debug.getter();
  sub_1000CBE70((uint64_t *)&unk_100708800);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_10059B760;
  *(void *)(v32 + 56) = &type metadata for String;
  *(void *)(v32 + 64) = sub_100073F48();
  *(void *)(v32 + 32) = 0xD00000000000001CLL;
  *(void *)(v32 + 40) = 0x80000001005D4BA0;
  *(void *)(v32 + 96) = v41;
  *(void *)(v32 + 104) = sub_1000C5A24(&qword_100706BF0, (unint64_t *)&unk_10070C600);
  id v33 = v46;
  *(void *)(v32 + 72) = v46;
  id v34 = v33;
  os_log(_:dso:log:type:_:)();

  swift_bridgeObjectRelease();
}

uint64_t sub_10010BFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010C064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010C0CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010C114(void *a1)
{
  id v2 = [a1 localDragSession];
  uint64_t v3 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession;
  *(void *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession) = v2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (qword_100704F58 != -1) {
    swift_once();
  }
  [(id)qword_100736F38 setIsItemCollectionDragActive:*(void *)(v1 + v3) != 0];
  swift_unknownObjectRelease();
  uint64_t v4 = swift_dynamicCastObjCProtocolConditional();
  if (v4) {
    swift_unknownObjectRetain();
  }
  *(void *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDropSession) = v4;
  return swift_unknownObjectRelease();
}

uint64_t _s5Files31DOCItemCollectionViewControllerC010collectionD0_18dropSessionDidExitySo012UICollectionD0C_So06UIDropH0_ptF_0()
{
  uint64_t v1 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  id v6 = &v12[-v5];
  uint64_t v7 = type metadata accessor for IndexPath();
  unint64_t v8 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  sub_100107020((uint64_t)v6);
  sub_1000CBBA4((uint64_t)v6, (uint64_t *)&unk_1007069A0);
  id v9 = [self defaultCenter];
  if (qword_100704F18 != -1) {
    swift_once();
  }
  [v9 postNotificationName:qword_100736EF8 object:v0];

  v8(v6, 1, 1, v7);
  uint64_t v10 = v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_lastDropIndexPath;
  swift_beginAccess();
  sub_10010BFFC(v10, (uint64_t)v4);
  swift_beginAccess();
  sub_10010C064((uint64_t)v6, v10);
  swift_endAccess();
  sub_1001B7800((uint64_t)v4);
  sub_1000CBBA4((uint64_t)v6, (uint64_t *)&unk_1007069A0);
  return sub_1000CBBA4((uint64_t)v4, (uint64_t *)&unk_1007069A0);
}

uint64_t sub_10010C430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DOCOperationItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010C494()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_10010C4D4()
{
  sub_100105A70(*(id **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10010C4E0()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_10010C500()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCDisplayModeChangeHandler();
  return [super dealloc];
}

Swift::Int sub_10010C534()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010C640()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010C738()
{
  return Hasher._finalize()();
}

uint64_t sub_10010C7EC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010C8D0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010C9EC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010CAFC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10010CC78()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010CD6C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010CE98()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010CFA0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010D0C0()
{
  return Hasher._finalize()();
}

uint64_t sub_10010D170(unsigned __int8 *a1, char *a2)
{
  return sub_1004C0DC4(*a1, *a2);
}

Swift::Int sub_10010D17C()
{
  return sub_10010C534();
}

uint64_t sub_10010D184()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10010D278()
{
  return sub_10010CE98();
}

unint64_t sub_10010D280@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10010DBD4(*a1);
  *a2 = result;
  return result;
}

void sub_10010D2B0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 7368564;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEC00000064657355;
      uint64_t v3 = 0x796C746E65636572;
      goto LABEL_3;
    case 2:
      uint64_t v4 = 0x6E6F697461636F6CLL;
      goto LABEL_6;
    case 3:
      uint64_t v4 = 0x657469726F766166;
LABEL_6:
      *a1 = v4;
      a1[1] = 0xE900000000000073;
      break;
    case 4:
      *a1 = 0x73726576726573;
      a1[1] = 0xE700000000000000;
      break;
    case 5:
      *a1 = 1936154996;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_10010D380(void *a1@<X8>)
{
  *a1 = &off_100689B88;
}

Swift::Int sub_10010D390()
{
  return Hasher._finalize()();
}

void sub_10010D3D4()
{
}

Swift::Int sub_10010D3FC()
{
  return Hasher._finalize()();
}

uint64_t sub_10010D43C()
{
  return 0x6465646E61707865;
}

uint64_t sub_10010D454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6465646E61707865 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_10010D4EC(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10010D4F8(uint64_t a1)
{
  unint64_t v2 = sub_10010F02C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010D534(uint64_t a1)
{
  unint64_t v2 = sub_10010F02C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10010D570@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_1000CBE70(&qword_100706E38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A6B78(a1, a1[3]);
  sub_10010F02C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10009B1B8((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_10009B1B8((uint64_t)a1);
  *a2 = v9 & 1;
  return result;
}

uint64_t sub_10010D6D0(void *a1)
{
  uint64_t v2 = sub_1000CBE70(&qword_100706E48);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A6B78(a1, a1[3]);
  sub_10010F02C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_10010D804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a2;
  _OWORD v4[5] = a3;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_1000666D8;
  v4[3] = &unk_10068CC98;
  uint64_t v3 = _Block_copy(v4);
  swift_retain();
  swift_release();
  DOCRunInMainThread();
  _Block_release(v3);
}

uint64_t sub_10010D8AC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t getEnumTagSinglePayload for DOCSidebarSectionKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DOCSidebarSectionKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    void *result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010DA60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCSidebarSectionKind()
{
  return &type metadata for DOCSidebarSectionKind;
}

unint64_t sub_10010DA9C()
{
  unint64_t result = qword_100706E10;
  if (!qword_100706E10)
  {
    sub_100074618(&qword_100706E18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706E10);
  }
  return result;
}

uint64_t sub_10010DAF8()
{
  uint64_t v1 = *(void **)(v0 + 24);
  sub_10009E6C4(0, &qword_100706E28);
  sub_10010DB6C();
  id v2 = v1;
  return AnyHashable.init<A>(_:)();
}

unint64_t sub_10010DB6C()
{
  unint64_t result = qword_100706E30;
  if (!qword_100706E30)
  {
    sub_10009E6C4(255, &qword_100706E28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706E30);
  }
  return result;
}

unint64_t sub_10010DBD4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100689AD8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

void sub_10010DC20(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a5;
  *(void *)(v12 + 24) = a6;
  uint64_t v139 = v12;
  uint64_t v151 = *(void *)(a1 + 16);
  uint64_t v137 = a5;
  if (!v151)
  {
    swift_retain();
    id v124 = a6;
    goto LABEL_104;
  }
  char v138 = (void (**)(uint64_t))(a3 + OBJC_IVAR____TtC5Files22DOCSourceOrderObserver_updateBlock);
  swift_bridgeObjectRetain_n();
  swift_retain();
  id v13 = a6;
  uint64_t v156 = (void **)(a4 + 88);
  swift_beginAccess();
  uint64_t v14 = 0;
  uint64_t v15 = (uint64_t *)(a1 + 40);
  id v16 = (uint64_t *)(a1 + 48);
  BOOL v17 = (unsigned __int8 *)(a1 + 56);
  uint64_t v141 = (void *)DOCDocumentSourceIdentifierLocal;
  uint64_t v140 = (void *)DOCDocumentSourceIdentifierTrashedItems;
  uint64_t v18 = 1;
  uint64_t v150 = a1 + 32;
  uint64_t v19 = (id *)(a1 + 32);
  unsigned __int8 v146 = a2;
  uint64_t v152 = a4;
  while (2)
  {
    uint64_t v153 = v18;
    uint64_t v154 = v14;
    uint64_t v22 = *v156;
    id v157 = *v19;
    uint64_t v158 = *v15;
    uint64_t v159 = *v16;
    unsigned __int8 v160 = *v17;
    sub_10010ED28(*v19, *v15, *v16, *v17);
    if (a2 == 2)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = (void *)v22[2];
      if (!v23) {
        goto LABEL_3;
      }
    }
    else
    {
      swift_retain();
      uint64_t v24 = swift_bridgeObjectRetain();
      NSString v25 = sub_10028CFF0(v24);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v22 = v25;
      uint64_t v23 = (void *)v25[2];
      if (!v23)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
    id v147 = v23;
    unsigned int v26 = (void *)v22[4];
    uint64_t v27 = v22[5];
    uint64_t v28 = v22[6];
    char v29 = *((unsigned char *)v22 + 56);
    sub_10010ED28(v26, v27, v28, v29);
    unint64_t v30 = sub_100249E60((unint64_t)v26, v27, v28, v29);
    uint64_t v32 = v31;
    BOOL v34 = v30 == sub_100249E60((unint64_t)v157, v158, v159, v160) && v32 == v33;
    if (v34)
    {
      swift_bridgeObjectRelease_n();
      sub_10010EDB8(v26, v27, v28, v29);
LABEL_18:
      int v36 = a2;
      swift_bridgeObjectRelease();
      unint64_t v37 = 0;
      if (v36 == 2) {
        goto LABEL_19;
      }
      goto LABEL_41;
    }
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10010EDB8(v26, v27, v28, v29);
    if (v35) {
      goto LABEL_18;
    }
    if (v147 == (id)1)
    {
      swift_bridgeObjectRelease();
      a4 = v152;
      goto LABEL_4;
    }
    a4 = v152;
    if (v22[2] < 2uLL) {
      goto LABEL_124;
    }
    uint64_t v41 = (void *)v22[8];
    uint64_t v40 = v22[9];
    uint64_t v42 = v22[10];
    char v43 = *((unsigned char *)v22 + 88);
    sub_10010ED28(v41, v40, v42, v43);
    unint64_t v44 = sub_100249E60((unint64_t)v41, v40, v42, v43);
    uint64_t v46 = v45;
    if (v44 == sub_100249E60((unint64_t)v157, v158, v159, v160) && v46 == v47)
    {
      swift_bridgeObjectRelease_n();
      sub_10010EDB8(v41, v40, v42, v43);
      goto LABEL_27;
    }
    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10010EDB8(v41, v40, v42, v43);
    if (v48)
    {
LABEL_27:
      int v49 = a2;
      swift_bridgeObjectRelease();
      unint64_t v37 = 1;
      if (v49 == 2) {
        goto LABEL_20;
      }
      goto LABEL_42;
    }
    Swift::Int v50 = (unsigned __int8 *)(v22 + 15);
    unint64_t v51 = 2;
    while (1)
    {
      unint64_t v37 = v51;
      if (v147 == (id)v51)
      {
        swift_bridgeObjectRelease();
        a4 = v152;
        a2 = v146;
        goto LABEL_4;
      }
      if (v51 >= v22[2]) {
        goto LABEL_123;
      }
      unint64_t v52 = (void *)*((void *)v50 - 3);
      uint64_t v53 = *((void *)v50 - 2);
      uint64_t v54 = *((void *)v50 - 1);
      unsigned __int8 v55 = *v50;
      sub_10010ED28(v52, v53, v54, *v50);
      unint64_t v56 = sub_100249E60((unint64_t)v52, v53, v54, v55);
      uint64_t v58 = v57;
      if (v56 == sub_100249E60((unint64_t)v157, v158, v159, v160) && v58 == v59) {
        break;
      }
      char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10010EDB8(v52, v53, v54, v55);
      unint64_t v51 = v37 + 1;
      v50 += 32;
      if (v61) {
        goto LABEL_40;
      }
    }
    swift_bridgeObjectRelease_n();
    sub_10010EDB8(v52, v53, v54, v55);
LABEL_40:
    swift_bridgeObjectRelease();
    if (v146 == 2)
    {
LABEL_19:
      a4 = v152;
LABEL_20:
      uint64_t v39 = v154;
      unint64_t v38 = v156;
      if (v37 == v154) {
        goto LABEL_85;
      }
      goto LABEL_87;
    }
LABEL_41:
    a4 = v152;
LABEL_42:
    uint64_t v39 = v154;
    unint64_t v38 = v156;
    uint64_t v62 = *v156;
    if (!(*v156)[2]) {
      goto LABEL_84;
    }
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = 0;
    while (1)
    {
      uint64_t v66 = &v62[v63];
      uint64_t v68 = (void *)v66[4];
      uint64_t v67 = v66[5];
      uint64_t v69 = v66[6];
      if (*((unsigned char *)v66 + 56) != 1) {
        goto LABEL_45;
      }
      sub_10010ED28((id)v66[4], v66[5], v66[6], 1u);
      id v148 = v68;
      id v71 = [v148 status];
      if (!v71)
      {
        sub_10010EDB8(v68, v67, v69, 1u);
        sub_10010EDB8(v68, v67, v69, 1u);
LABEL_61:
        unint64_t v38 = v156;
        goto LABEL_45;
      }
      if (v71 != (id)1)
      {
        if (v71 != (id)2) {
          goto LABEL_59;
        }
        sub_10010EDB8(v68, v67, v69, 1u);
        sub_10010EDB8(v68, v67, v69, 1u);
        a4 = v152;
        goto LABEL_61;
      }
      id v72 = sub_10047DFD4(1);
      uint64_t v144 = sub_100167240((uint64_t)v72);
      swift_bridgeObjectRelease();
      int64_t v73 = sub_10047DFD4(0);
      uint64_t v142 = sub_100167240((uint64_t)v73);
      swift_bridgeObjectRelease();
      sub_1000CBE70(&qword_10070CE50);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1005A0230;
      *(void *)(inited + 32) = static DOCDocumentSourceIdentifier.iCloudCurrent.getter();
      *(void *)(inited + 40) = v141;
      *(void *)(inited + 48) = v140;
      id v75 = v141;
      id v76 = v140;
      int64_t v77 = sub_10049D5A4(inited);
      swift_setDeallocating();
      type metadata accessor for DOCDocumentSourceIdentifier(0);
      swift_arrayDestroy();
      sub_10047DC64(v142, (void *)v144);
      sub_10047DC64((uint64_t)v77, v78);
      uint64_t v80 = v79;
      id v81 = [v148 identifier];
      LOBYTE(v144) = sub_1005350BC(v81, v80);

      uint64_t v39 = v154;
      swift_bridgeObjectRelease();
      if ((v144 & 1) != 0 || ![v148 status])
      {
LABEL_59:
        sub_10010EDB8(v68, v67, v69, 1u);
        sub_10010EDB8(v68, v67, v69, 1u);
        a4 = v152;
        unint64_t v38 = v156;
        goto LABEL_48;
      }
      id v82 = [v148 status];
      sub_10010EDB8(v68, v67, v69, 1u);
      sub_10010EDB8(v68, v67, v69, 1u);
      BOOL v34 = v82 == (id)2;
      uint64_t v39 = v154;
      unint64_t v38 = v156;
      a4 = v152;
      if (v34) {
        goto LABEL_48;
      }
LABEL_45:
      if (__OFADD__(v64, 1))
      {
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
      if (v64 == v37) {
        break;
      }
      ++v64;
LABEL_48:
      ++v65;
      uint64_t v62 = *v38;
      unint64_t v70 = (*v38)[2];
      v63 += 4;
      if (v65 >= v70) {
        goto LABEL_63;
      }
    }
    uint64_t v62 = *v38;
    unint64_t v70 = (*v38)[2];
LABEL_63:
    if (!v70)
    {
      unint64_t v37 = v65;
      if (v65 == v39) {
        goto LABEL_85;
      }
      goto LABEL_87;
    }
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    unint64_t v85 = 0;
    while (2)
    {
      uint64_t v86 = &v62[v83];
      char v88 = (void *)v86[4];
      uint64_t v87 = v86[5];
      uint64_t v89 = v86[6];
      if (*((unsigned char *)v86 + 56) == 1)
      {
        sub_10010ED28((id)v86[4], v86[5], v86[6], 1u);
        id v149 = v88;
        id v90 = [v149 status];
        if (!v90)
        {
          sub_10010EDB8(v88, v87, v89, 1u);
          sub_10010EDB8(v88, v87, v89, 1u);
          goto LABEL_82;
        }
        if (v90 == (id)1)
        {
          unsigned int v91 = sub_10047DFD4(1);
          uint64_t v145 = sub_100167240((uint64_t)v91);
          swift_bridgeObjectRelease();
          uint64_t v92 = sub_10047DFD4(0);
          uint64_t v143 = sub_100167240((uint64_t)v92);
          swift_bridgeObjectRelease();
          sub_1000CBE70(&qword_10070CE50);
          uint64_t v93 = swift_initStackObject();
          *(_OWORD *)(v93 + 16) = xmmword_1005A0230;
          *(void *)(v93 + 32) = static DOCDocumentSourceIdentifier.iCloudCurrent.getter();
          *(void *)(v93 + 40) = v141;
          *(void *)(v93 + 48) = v140;
          id v94 = v141;
          id v95 = v140;
          uint64_t v96 = sub_10049D5A4(v93);
          swift_setDeallocating();
          type metadata accessor for DOCDocumentSourceIdentifier(0);
          swift_arrayDestroy();
          sub_10047DC64(v143, (void *)v145);
          sub_10047DC64((uint64_t)v96, v97);
          uint64_t v99 = v98;
          id v100 = [v149 identifier];
          LOBYTE(v145) = sub_1005350BC(v100, v99);

          uint64_t v39 = v154;
          swift_bridgeObjectRelease();
          if ((v145 & 1) == 0 && [v149 status])
          {
            id v101 = [v149 status];
            sub_10010EDB8(v88, v87, v89, 1u);
            sub_10010EDB8(v88, v87, v89, 1u);
            BOOL v34 = v101 == (id)2;
            uint64_t v39 = v154;
            unint64_t v38 = v156;
            a4 = v152;
            if (!v34) {
              break;
            }
LABEL_69:
            ++v85;
            uint64_t v62 = *v38;
            v83 += 4;
            if (v85 >= (*v38)[2]) {
              goto LABEL_83;
            }
            continue;
          }
        }
        else if (v90 == (id)2)
        {
          sub_10010EDB8(v88, v87, v89, 1u);
          sub_10010EDB8(v88, v87, v89, 1u);
          a4 = v152;
LABEL_82:
          unint64_t v38 = v156;
          break;
        }
        sub_10010EDB8(v88, v87, v89, 1u);
        sub_10010EDB8(v88, v87, v89, 1u);
        a4 = v152;
        unint64_t v38 = v156;
        goto LABEL_69;
      }
      break;
    }
    if (__OFADD__(v84, 1)) {
      goto LABEL_117;
    }
    if (v84 != v39)
    {
      ++v84;
      goto LABEL_69;
    }
LABEL_83:
    uint64_t v39 = v85;
    unint64_t v37 = v65;
LABEL_84:
    if (v37 == v39)
    {
LABEL_85:
      a2 = v146;
      goto LABEL_4;
    }
LABEL_87:
    if (v37 >= (*v38)[2]) {
      goto LABEL_119;
    }
    uint64_t v155 = v39;
    uint64_t v102 = (uint64_t)&(*v38)[4 * v37];
    long long v104 = *(void **)(v102 + 32);
    uint64_t v103 = *(void *)(v102 + 40);
    uint64_t v105 = *(void *)(v102 + 48);
    int v106 = *(unsigned __int8 *)(v102 + 56);
    long long v107 = v38;
    swift_beginAccess();
    long long v108 = *v107;
    sub_10010ED28(v104, v103, v105, v106);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v108 = sub_10050DC64(v108);
    }
    unint64_t v109 = v108[2];
    if (v37 >= v109) {
      goto LABEL_120;
    }
    unint64_t v110 = v109 - 1;
    uint64_t v111 = v109 - 1 - v37;
    if (v111 < 0) {
      goto LABEL_131;
    }
    uint64_t v112 = (uint64_t)&v108[4 * v37 + 4];
    long long v113 = *(void **)v112;
    uint64_t v115 = *(void *)(v112 + 8);
    uint64_t v114 = *(void *)(v112 + 16);
    unsigned __int8 v116 = *(unsigned char *)(v112 + 24);
    memmove((void *)v112, (const void *)(v112 + 32), 32 * v111);
    v108[2] = v110;
    *uint64_t v156 = v108;
    swift_endAccess();
    sub_10010EDB8(v113, v115, v114, v116);
    swift_beginAccess();
    a2 = v146;
    if ((*v156)[2] < v155) {
      goto LABEL_121;
    }
    if (v155 < 0) {
      goto LABEL_122;
    }
    uint64_t v117 = v105;
    long long v118 = v104;
    sub_10010ED28(v104, v103, v117, v106);
    sub_100514F7C(v155, v155, (uint64_t)v104, v103, v117, v106);
    swift_endAccess();
    if (v106 != 2)
    {
      a4 = v152;
      if (v106 == 1)
      {
        if (sub_100421264(v118, v155))
        {
          long long v119 = *v138;
          swift_beginAccess();
          swift_retain();
          uint64_t v120 = swift_bridgeObjectRetain();
          v119(v120);
          swift_release();
          swift_bridgeObjectRelease();
          sub_100027C9C();
        }
        sub_10010EDB8(v118, v103, v117, 1u);
        sub_10010EDB8(v118, v103, v117, 1u);
      }
      else
      {
        sub_10010EDB8(v118, v103, v117, v106);
      }
LABEL_4:
      sub_10010EDB8(v157, v158, v159, v160);
      uint64_t v20 = v153;
      if (v153 == v151) {
        goto LABEL_102;
      }
LABEL_5:
      uint64_t v19 = (id *)(v150 + 32 * v20);
      uint64_t v15 = (uint64_t *)(v19 + 1);
      id v16 = (uint64_t *)(v19 + 2);
      BOOL v17 = (unsigned __int8 *)(v19 + 3);
      uint64_t v14 = v20;
      BOOL v21 = __OFADD__(v20, 1);
      uint64_t v18 = v20 + 1;
      if (v21) {
        goto LABEL_118;
      }
      continue;
    }
    break;
  }
  long long v121 = self;
  id v122 = v104;
  id v123 = [v121 sharedInstance];
  [v123 moveTag:v122 toIndex:v155];
  sub_10010EDB8(v104, v103, v117, 2u);

  sub_10010EDB8(v104, v103, v117, 2u);
  sub_10010EDB8(v157, v158, v159, v160);
  a4 = v152;
  uint64_t v20 = v153;
  if (v153 != v151) {
    goto LABEL_5;
  }
LABEL_102:
  swift_bridgeObjectRelease_n();
LABEL_104:
  swift_beginAccess();
  uint64_t v125 = *(void *)(a4 + 88);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v126 = *(void *)(v125 + 16);
  if (v126)
  {
    uint64_t v127 = v125 + 32;
    swift_bridgeObjectRetain_n();
    do
    {
      if (!*(unsigned char *)(v127 + 24))
      {
        id v128 = *(id *)v127;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((aBlock[0] & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v127 += 32;
      --v126;
    }
    while (v126);
    swift_bridgeObjectRelease();
    unint64_t v129 = aBlock[0];
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v129 = (unint64_t)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  if (!(v129 >> 62))
  {
    if (*(uint64_t *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1) {
      goto LABEL_115;
    }
LABEL_126:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v135 = *(void *)(v137 + 16);
    BOOL v21 = __OFSUB__(v135, 1);
    uint64_t v136 = v135 - 1;
    if (v21)
    {
      __break(1u);
LABEL_131:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x10010ECB0);
    }
    *(void *)(v137 + 16) = v136;
    if (!v136) {
      sub_100284134(0x655274696D6D6F63, 0xED0000726564726FLL, 0);
    }
    swift_release();
    return;
  }
LABEL_125:
  swift_bridgeObjectRetain();
  uint64_t v134 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v134 < 1) {
    goto LABEL_126;
  }
LABEL_115:
  id v130 = [self sharedManager];
  sub_10009E6C4(0, (unint64_t *)&qword_1007069C0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v132 = swift_allocObject();
  *(void *)(v132 + 16) = sub_10010ED20;
  *(void *)(v132 + 24) = v139;
  aBlock[4] = sub_10010EE80;
  aBlock[5] = v132;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10000A884;
  aBlock[3] = &unk_10068CC70;
  uint64_t v133 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v130 updateFavoritesRanksToMatchOrderedFavorites:isa completion:v133];
  _Block_release(v133);
  swift_release();
}

uint64_t sub_10010ECE0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

id sub_10010ED20()
{
  return sub_1001A67C0(*(void *)(v0 + 16));
}

id sub_10010ED28(id result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 4u)
  {
    uint64_t v4 = a4;
    if (a4 > 4uLL) {
      uint64_t v4 = 0;
    }
    return ((id (*)(id))((char *)&loc_10010ED4C + (int)funcs_10010ED54[v4]))(result);
  }
  return result;
}

id sub_10010ED58(id a1)
{
  return a1;
}

uint64_t sub_10010ED6C(void *a1)
{
  id v1 = a1;

  return swift_bridgeObjectRetain();
}

void sub_10010EDB8(id a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 4u)
  {
    uint64_t v4 = a4;
    if (a4 > 4uLL) {
      uint64_t v4 = 0;
    }
    ((void (*)(id))((char *)&loc_10010EDDC + (int)funcs_10010EDE4[v4]))(a1);
  }
}

void sub_10010EDE8(id a1)
{
}

uint64_t sub_10010EDFC(void *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10010EE48()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10010EE80(uint64_t a1)
{
  sub_10010D804(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t getEnumTagSinglePayload for DOCMutableSidebarSection.PersistableState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DOCMutableSidebarSection.PersistableState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010EFF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCMutableSidebarSection.PersistableState()
{
  return &type metadata for DOCMutableSidebarSection.PersistableState;
}

unint64_t sub_10010F02C()
{
  unint64_t result = qword_100706E40;
  if (!qword_100706E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706E40);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DOCMutableSidebarSection.PersistableState.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for DOCMutableSidebarSection.PersistableState.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10010F16CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCMutableSidebarSection.PersistableState.CodingKeys()
{
  return &type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys;
}

unint64_t sub_10010F1A8()
{
  unint64_t result = qword_100706E50;
  if (!qword_100706E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706E50);
  }
  return result;
}

unint64_t sub_10010F200()
{
  unint64_t result = qword_100706E58;
  if (!qword_100706E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706E58);
  }
  return result;
}

unint64_t sub_10010F258()
{
  unint64_t result = qword_100706E60;
  if (!qword_100706E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706E60);
  }
  return result;
}

uint64_t sub_10010F2BC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DOCEmptyDataSource()
{
  return self;
}

id sub_10010F328()
{
  int v2 = (void *)v0[2];
  uint64_t v1 = (void *)v0[3];
  int v3 = (void *)v0[4];
  id v4 = objc_allocWithZone((Class)type metadata accessor for DOCBrowserContainedViewController());
  id v5 = v2;
  id v6 = v1;
  id v7 = v3;
  return sub_1000784A0(v5, v1, v3);
}

uint64_t DOCPresentationPreheatable<>.doc_preheatForPresenting(completion:)(uint64_t (*a1)(void), uint64_t a2)
{
  int v3 = v2;
  id v6 = (void *)UIViewController.associatedObjectStorage.getter();
  swift_getKeyPath();
  dispatch thunk of DOCAssociatedObjectStorage.subscript.getter();
  swift_release();

  swift_release();
  if (!v13 && swift_dynamicCastObjCProtocolConditional())
  {
    id v7 = v3;
    int v8 = (void *)UIViewController.associatedObjectStorage.getter();
    swift_getKeyPath();
    type metadata accessor for DOCPresentationPreheatController();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = 0x3FE0000000000000;
    swift_unknownObjectWeakInit();
    *(void *)(v9 + 32) = _swiftEmptyArrayStorage;
    *(unsigned char *)(v9 + 40) = 0;
    swift_unknownObjectWeakAssign();
    uint64_t v13 = v9;
    dispatch thunk of DOCAssociatedObjectStorage.subscript.setter();
  }
  uint64_t v10 = (void *)UIViewController.associatedObjectStorage.getter();
  swift_getKeyPath();
  dispatch thunk of DOCAssociatedObjectStorage.subscript.getter();
  swift_release();

  if (!v13) {
    return ((uint64_t (*)(uint64_t))a1)(v11);
  }
  sub_10010FA20(a1, a2);
  return swift_release();
}

uint64_t sub_10010F50C()
{
  uint64_t v1 = v0;
  int v2 = (void *)UIViewController.associatedObjectStorage.getter();
  swift_getKeyPath();
  dispatch thunk of DOCAssociatedObjectStorage.subscript.getter();
  swift_release();

  swift_release();
  if (!v8 && swift_dynamicCastObjCProtocolConditional())
  {
    id v3 = v1;
    id v4 = (void *)UIViewController.associatedObjectStorage.getter();
    swift_getKeyPath();
    type metadata accessor for DOCPresentationPreheatController();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = 0x3FE0000000000000;
    swift_unknownObjectWeakInit();
    *(void *)(v5 + 32) = _swiftEmptyArrayStorage;
    *(unsigned char *)(v5 + 40) = 0;
    swift_unknownObjectWeakAssign();
    uint64_t v8 = v5;
    dispatch thunk of DOCAssociatedObjectStorage.subscript.setter();
  }
  id v6 = (void *)UIViewController.associatedObjectStorage.getter();
  swift_getKeyPath();
  dispatch thunk of DOCAssociatedObjectStorage.subscript.getter();
  swift_release();

  return v8;
}

void DOCPresentationPreheatable<>.doc_preheatDidFinish()()
{
  uint64_t v1 = v0;
  int v2 = (void *)UIViewController.associatedObjectStorage.getter();
  swift_getKeyPath();
  dispatch thunk of DOCAssociatedObjectStorage.subscript.getter();
  swift_release();

  swift_release();
  if (!v7 && swift_dynamicCastObjCProtocolConditional())
  {
    id v3 = v1;
    id v4 = (void *)UIViewController.associatedObjectStorage.getter();
    swift_getKeyPath();
    type metadata accessor for DOCPresentationPreheatController();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = 0x3FE0000000000000;
    swift_unknownObjectWeakInit();
    *(void *)(v5 + 32) = _swiftEmptyArrayStorage;
    *(unsigned char *)(v5 + 40) = 0;
    swift_unknownObjectWeakAssign();
    uint64_t v7 = v5;
    dispatch thunk of DOCAssociatedObjectStorage.subscript.setter();
  }
  id v6 = (void *)UIViewController.associatedObjectStorage.getter();
  swift_getKeyPath();
  dispatch thunk of DOCAssociatedObjectStorage.subscript.getter();
  swift_release();

  if (v7)
  {
    sub_10010FFB0(2);
    swift_release();
  }
}

void UIViewController.objc_doc_preheatForPresenting(completion:)(uint64_t (*a1)(void), uint64_t a2)
{
  id v3 = v2;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    id v6 = v3;
    DOCPresentationPreheatable<>.doc_preheatForPresenting(completion:)(a1, a2);
  }
  else
  {
    a1();
  }
}

Swift::Void __swiftcall UIViewController.objc_doc_preheatDidFinish()()
{
  if (swift_dynamicCastObjCProtocolConditional())
  {
    id v1 = v0;
    DOCPresentationPreheatable<>.doc_preheatDidFinish()();
  }
}

uint64_t sub_10010F9C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10010F50C();
  *a1 = result;
  return result;
}

uint64_t sub_10010F9F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10010F50C();
  *a1 = result;
  return result;
}

uint64_t sub_10010FA20(uint64_t (*a1)(void), uint64_t a2)
{
  if (*(unsigned char *)(v2 + 40) == 2) {
    return a1();
  }
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = (char **)(v2 + 32);
  swift_beginAccess();
  uint64_t v8 = *(char **)(v2 + 32);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 32) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = sub_1000B7F78(0, *((void *)v8 + 2) + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = *((void *)v8 + 2);
  unint64_t v10 = *((void *)v8 + 3);
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = sub_1000B7F78((char *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  *((void *)v8 + 2) = v11 + 1;
  uint64_t v12 = &v8[16 * v11];
  *((void *)v12 + 4) = sub_1000879B8;
  *((void *)v12 + 5) = v6;
  swift_endAccess();
  return sub_10010FB6C();
}

uint64_t type metadata accessor for DOCPresentationPreheatController()
{
  return self;
}

uint64_t sub_10010FB6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v11);
  BOOL v17 = (char *)&v22 - v16;
  if (!*(unsigned char *)(v1 + 40))
  {
    uint64_t v24 = v15;
    uint64_t v25 = v6;
    uint64_t v26 = v7;
    uint64_t v27 = v3;
    *(unsigned char *)(v1 + 40) = 1;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      [Strong doc_startPreheatIfNecessary];
      swift_unknownObjectRelease();
    }
    sub_10011029C();
    uint64_t v23 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v24 + 8);
    v19(v13, v10);
    aBlock[4] = sub_1001102DC;
    aBlock[5] = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1000666D8;
    aBlock[3] = &unk_10068CE98;
    uint64_t v20 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = &_swiftEmptyArrayStorage;
    sub_1001102E4();
    sub_1000CBE70((uint64_t *)&unk_100705390);
    sub_1000B921C();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    BOOL v21 = (void *)v23;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v25);
    return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
  }
  return result;
}

uint64_t sub_10010FEF4(uint64_t result)
{
  if (*(unsigned char *)(result + 40) != 2)
  {
    uint64_t v1 = result;
    *(unsigned char *)(result + 40) = 2;
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 32);
    *(void *)(v1 + 32) = &_swiftEmptyArrayStorage;
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = v2 + 40;
      do
      {
        uint64_t v5 = *(void (**)(uint64_t))(v4 - 8);
        uint64_t v6 = swift_retain();
        v5(v6);
        swift_release();
        v4 += 16;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10010FFB0(uint64_t result)
{
  if (*(unsigned char *)(v1 + 40) != 2)
  {
    *(unsigned char *)(v1 + 40) = result;
    if (result == 2)
    {
      swift_beginAccess();
      uint64_t v2 = *(void *)(v1 + 32);
      *(void *)(v1 + 32) = _swiftEmptyArrayStorage;
      uint64_t v3 = *(void *)(v2 + 16);
      if (v3)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = v2 + 40;
        do
        {
          uint64_t v5 = *(void (**)(uint64_t))(v4 - 8);
          uint64_t v6 = swift_retain();
          v5(v6);
          swift_release();
          v4 += 16;
          --v3;
        }
        while (v3);
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100110070()
{
  sub_10003A094(v0 + 24);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t getEnumTagSinglePayload for DOCPresentationPreheatController.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DOCPresentationPreheatController.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10011020CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCPresentationPreheatController.State()
{
  return &type metadata for DOCPresentationPreheatController.State;
}

unint64_t sub_100110248()
{
  unint64_t result = qword_100707048;
  if (!qword_100707048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707048);
  }
  return result;
}

unint64_t sub_10011029C()
{
  unint64_t result = qword_100705380;
  if (!qword_100705380)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100705380);
  }
  return result;
}

uint64_t sub_1001102DC()
{
  return sub_10010FEF4(v0);
}

unint64_t sub_1001102E4()
{
  unint64_t result = qword_100706770;
  if (!qword_100706770)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100706770);
  }
  return result;
}

uint64_t sub_10011033C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100110374()
{
  return sub_100516BD8(*(void *)(v0 + 16));
}

uint64_t sub_10011037C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

id sub_1001103B4(uint64_t a1)
{
  int v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___dismissAction] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Files28DOCViewOptionsViewController_viewModel] = a1;
  type metadata accessor for DOCViewOptionsViewModel();
  sub_100110CB4();
  swift_retain_n();
  uint64_t v5 = v2;
  ObservedObject.init(wrappedValue:)();
  id v6 = sub_100110534();
  swift_release();
  uint64_t v7 = OBJC_IVAR____TtC5Files28DOCViewOptionsViewController_viewOptionsHostingController;
  *(void *)&v5[OBJC_IVAR____TtC5Files28DOCViewOptionsViewController_viewOptionsHostingController] = v6;

  uint64_t v8 = *(void *)&v5[v7];
  v13.receiver = v5;
  v13.super_class = ObjectType;
  [super initWithRootViewController:v8];
  id result = [v9 view];
  if (result)
  {
    uint64_t v11 = result;
    NSString v12 = [self viewOptionsRoot];
    if (!v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v11 setAccessibilityIdentifier:v12];

    swift_release();
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100110534()
{
  uint64_t v0 = type metadata accessor for UIHostingControllerSizingOptions();
  __chkstk_darwin(v0 - 8);
  id v1 = objc_allocWithZone((Class)sub_1000CBE70(&qword_1007070A0));
  swift_retain();
  id v2 = (id)UIHostingController.init(rootView:)();
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setTitle:v3];

  id result = [v2 view];
  if (result)
  {
    uint64_t v5 = result;
    id v6 = [self clearColor];
    [v5 setBackgroundColor:v6];

    static UIHostingControllerSizingOptions.preferredContentSize.getter();
    dispatch thunk of UIHostingController.sizingOptions.setter();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

objc_class *sub_1001106A4()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem);
  if (v2)
  {
    NSString v3 = *(objc_class **)(v0
                        + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem);
  }
  else
  {
    uint64_t v4 = v0;
    sub_10009E6C4(0, (unint64_t *)&qword_10070B700);
    v9.value.super.super.Class isa = (Class)sub_100110738();
    v9.is_nil = 0;
    v5.super.super.Class isa = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemDone, v9, v10).super.super.isa;
    id v6 = *(void **)(v0 + v1);
    *(UIBarButtonItem *)(v4 + v1) = v5;
    NSString v3 = v5.super.super.isa;

    id v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_100110738()
{
  uint64_t v1 = OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___dismissAction;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___dismissAction);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___dismissAction);
  }
  else
  {
    uint64_t v4 = v0;
    sub_10009E6C4(0, (unint64_t *)&qword_100706740);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    UIBarButtonItem v5 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    id v6 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v5;
    id v3 = v5;

    id v2 = 0;
  }
  id v7 = v2;
  return v3;
}

void sub_100110820()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong dismissViewControllerAnimated:1 completion:0];
  }
}

void sub_100110B8C()
{
  swift_release();

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem));
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___dismissAction);
}

id _s5Files32DOCItemInfoContentViewControllerCfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t type metadata accessor for DOCViewOptionsViewController()
{
  return self;
}

unint64_t sub_100110CB4()
{
  unint64_t result = qword_100707098;
  if (!qword_100707098)
  {
    type metadata accessor for DOCViewOptionsViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707098);
  }
  return result;
}

uint64_t sub_100110D0C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100110D44()
{
}

unsigned char *storeEnumTagSinglePayload for DOCCollectionViewEditMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100110E18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCCollectionViewEditMode()
{
  return &type metadata for DOCCollectionViewEditMode;
}

unint64_t sub_100110E54()
{
  unint64_t result = qword_1007070A8;
  if (!qword_1007070A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007070A8);
  }
  return result;
}

BOOL sub_100110EA8(uint64_t a1, uint64_t a2)
{
  return sub_100113E6C(*(void **)a1, *(unsigned char *)(a1 + 8), *(void **)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_100110EC0(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a1 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = v8 & 1;
  }
  return a4(v7, 2, a2, a3);
}

uint64_t sub_100110F9C()
{
  return sub_100110FEC((SEL *)&selRef_pause, (uint64_t)sub_10011477C, (uint64_t)&unk_10068D198);
}

uint64_t sub_100110FC4()
{
  return sub_100110FEC((SEL *)&selRef_resume, (uint64_t)sub_100114804, (uint64_t)&unk_10068D170);
}

uint64_t sub_100110FEC(SEL *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v5 = v3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v46 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  __chkstk_darwin(v8);
  UIMenu_optional v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DOCFileProviderSyncStateFooterViewModel.Configuration(0);
  __chkstk_darwin(v11 - 8);
  objc_super v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v42 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  BOOL v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v39 = (char *)&v35 - v18;
  uint64_t v19 = type metadata accessor for DOCFileOperation() - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (id *)((char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = *(void *)(v5 + 152);
  if (v23)
  {
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24)
    {
      uint64_t v36 = v14;
      unint64_t v37 = v10;
      uint64_t v38 = v6;
      uint64_t v25 = v23 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      uint64_t v26 = *(void *)(v20 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_100114714(v25, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
        [v22[5] *a1];
        sub_100114780((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
        v25 += v26;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
      UIMenu_optional v10 = v37;
      uint64_t v6 = v38;
      uint64_t v14 = v36;
    }
  }
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v38 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  sub_100114714(v5 + OBJC_IVAR____TtC5Files39DOCFileProviderSyncStateFooterViewModel_configuration, (uint64_t)v13, type metadata accessor for DOCFileProviderSyncStateFooterViewModel.Configuration);
  uint64_t v27 = v39;
  + infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v42 + 8);
  v28(v17, v14);
  uint64_t v29 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v13, v29);
  aBlock[4] = v40;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = v41;
  uint64_t v30 = v14;
  uint64_t v31 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000BAAA4((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  uint64_t v32 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v33 = (void *)v38;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v6);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
  return ((uint64_t (*)(char *, uint64_t))v28)(v27, v30);
}

uint64_t sub_100111528()
{
  swift_beginAccess();
  sub_10011458C(v0 + 96, (uint64_t)&v24);
  if (!v25)
  {
    sub_1001145F4((uint64_t)&v24);
    return 0;
  }
  sub_1001146DC(&v24, (uint64_t)v27);
  uint64_t v1 = type metadata accessor for DOCFileOperationsManager();
  uint64_t v2 = v28;
  uint64_t v3 = v29;
  unsigned int v4 = sub_1000A6B78(v27, v28);
  uint64_t v25 = v2;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v26 = v5;
  uint64_t v6 = sub_100052C70((uint64_t *)&v24);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v6, v4, v2);
  id v7 = sub_100409078((uint64_t)v6, v1, v2, v5);
  sub_10009B1B8((uint64_t)&v24);
  type metadata accessor for DOCFileOperationCollectionSource();
  *(void *)(swift_allocObject() + 48) = v7;
  uint64_t v8 = (char *)v7;
  uint64_t v9 = sub_1002FB41C(0, 0);
  uint64_t v10 = OBJC_IVAR____TtC5Files24DOCFileOperationsManager_observers;
  uint64_t v11 = *(void *)&v8[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_observers];
  swift_beginAccess();
  unint64_t v12 = *(void *)(v11 + 16);
  uint64_t v23 = _swiftEmptyArrayStorage;
  if (!(v12 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v16 = _swiftEmptyArrayStorage;
LABEL_17:
    *(void *)(v11 + 16) = v16;
    uint64_t v17 = swift_bridgeObjectRelease();
    unint64_t v18 = *(void *)(v11 + 16);
    __chkstk_darwin(v17);
    v21[2] = v9;
    swift_bridgeObjectRetain();
    char v19 = sub_1001B5048((uint64_t (*)(uint64_t *))sub_1001146F4, (uint64_t)v21, v18);
    swift_release();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      uint64_t v20 = *(void *)&v8[v10];
      swift_retain();
      sub_1002FB058((uint64_t)v9, v20);
      swift_release();
      sub_100407238();
      sub_100406674();
    }
    swift_release();

    sub_10009B1B8((uint64_t)v27);
    return (uint64_t)v9;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v13 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_4:
  if (v13 >= 1)
  {
    uint64_t v22 = v10;
    for (uint64_t i = 0; i != v13; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      if (swift_unknownObjectWeakLoadStrong())
      {
        swift_unknownObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = v23;
    uint64_t v10 = v22;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

void sub_10011187C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DOCFileOperation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (id *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((sub_10011342C() & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + 152);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        uint64_t v8 = v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
        uint64_t v9 = *(void *)(v3 + 72);
        swift_bridgeObjectRetain();
        uint64_t v10 = 0;
        do
        {
          sub_100114714(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
          id v11 = v5[5];
          sub_100114780((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
          uint64_t v12 = NSProgress.fileTotalCount.getter();
          char v14 = v13;

          if (v14) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = v12;
          }
          BOOL v16 = __OFADD__(v10, v15);
          v10 += v15;
          if (v16)
          {
            __break(1u);
            return;
          }
          v8 += v9;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        if (v10 > 0)
        {
          uint64_t v17 = *(void **)(v1 + 160);
          if (v17) {
            [v17 contentType];
          }
        }
      }
    }
  }
}

uint64_t sub_100111A14()
{
  int v1 = *(unsigned __int8 *)(v0 + 176);
  if (v1 != 255 && v1 == 2 && *(void *)(v0 + 168) == 0) {
    return 1;
  }
  uint64_t result = *(void *)(v0 + 160);
  if (result)
  {
    if ([(id)result contentType] == (id)2)
    {
      uint64_t result = *(void *)(v0 + 160);
      if (!result) {
        return result;
      }
      id v4 = [(id)result subTitle];
      if (v4)
      {

        return 1;
      }
    }
    uint64_t result = *(void *)(v0 + 160);
    if (result)
    {
      if ([(id)result contentType] == (id)2)
      {
        uint64_t v5 = *(void **)(v0 + 160);
        if (v5)
        {
          id v6 = [v5 actions];
          sub_10009E6C4(0, &qword_100707440);
          unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v7 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v8 = 0;
        }
        return v8 > 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100111B5C()
{
  int v1 = *(unsigned __int8 *)(v0 + 176);
  if (v1 != 255 && v1 == 2 && *(void *)(v0 + 168) == 0) {
    return 1;
  }
  uint64_t result = *(void *)(v0 + 160);
  if (result)
  {
    if ([(id)result contentType] != (id)2) {
      return 0;
    }
    uint64_t result = *(void *)(v0 + 160);
    if (result)
    {
      uint64_t result = (uint64_t)[(id)result subTitle];
      if (result)
      {

        return 1;
      }
    }
  }
  return result;
}

uint64_t (*sub_100111BDC())()
{
  return j__swift_endAccess;
}

uint64_t sub_100111C30()
{
  uint64_t v1 = v0;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    v40[0] = Strong;
    swift_getKeyPath();
    swift_allocObject();
    swift_weakInit();
    uint64_t v3 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = *(void **)(v1 + 136);
  *(void *)(v1 + 136) = v3;

  swift_beginAccess();
  sub_10011458C(v1 + 56, (uint64_t)v40);
  uint64_t v5 = v41;
  sub_1001145F4((uint64_t)v40);
  if (!v5)
  {
    id v6 = *(void **)(v1 + 32);
    uint64_t v7 = type metadata accessor for DOCFileProviderSyncStateProvider();
    swift_allocObject();
    id v8 = v6;
    uint64_t v9 = (void *)sub_100548A54(v8, 1);

    uint64_t v41 = v7;
    uint64_t v42 = &off_1006B6BA8;
    v40[0] = v9;
    sub_100114654((uint64_t)v40, (uint64_t)v37);
    swift_beginAccess();
    sub_1001144AC((uint64_t)v37, v1 + 56);
    swift_endAccess();
  }
  swift_beginAccess();
  sub_10011458C(v1 + 96, (uint64_t)v40);
  uint64_t v10 = v41;
  sub_1001145F4((uint64_t)v40);
  if (!v10)
  {
    id v11 = *(void **)(v1 + 32);
    uint64_t v12 = type metadata accessor for DOCFileProviderSyncStateProvider();
    swift_allocObject();
    id v13 = v11;
    char v14 = (void *)sub_100548A54(v13, 1);

    uint64_t v41 = v12;
    uint64_t v42 = &off_1006B6BA8;
    v40[0] = v14;
    sub_100114654((uint64_t)v40, (uint64_t)v37);
    swift_beginAccess();
    sub_1001144AC((uint64_t)v37, v1 + 96);
    swift_endAccess();
  }
  BOOL v16 = sub_100111BDC();
  if (*(void *)(v15 + 24))
  {
    uint64_t v17 = v15;
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v19 = *(void *)(v17 + 24);
    uint64_t v20 = *(void *)(v17 + 32);
    sub_10003CCE8(v17, v19);
    (*(void (**)(uint64_t (*)(), uint64_t, uint64_t))(*(void *)(v20 + 8) + 24))(sub_1001146D4, v18, v19);
  }
  ((void (*)(id *, void))v16)(v40, 0);
  uint64_t v22 = sub_100111BDC();
  if (*(void *)(v21 + 24))
  {
    uint64_t v23 = v21;
    uint64_t v24 = swift_allocObject();
    swift_weakInit();
    uint64_t v25 = *(void *)(v23 + 24);
    uint64_t v26 = *(void *)(v23 + 32);
    sub_10003CCE8(v23, v25);
    (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v26 + 32))(sub_1001146CC, v24, v25, v26);
  }
  ((void (*)(id *, void))v22)(v40, 0);
  sub_10011458C(v1 + 56, (uint64_t)v40);
  if (v41)
  {
    sub_1000D4774((uint64_t)v40, (uint64_t)v37);
    sub_1001145F4((uint64_t)v40);
    uint64_t v27 = v38;
    uint64_t v28 = v39;
    sub_1000A6B78(v37, v38);
    uint64_t v29 = swift_allocObject();
    swift_weakInit();
    uint64_t v30 = *(void *)(v28 + 8);
    uint64_t v31 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v30 + 8);
    swift_retain();
    v31(sub_1001146C4, v29, v27, v30);
    swift_release_n();
    sub_10009B1B8((uint64_t)v37);
  }
  else
  {
    sub_1001145F4((uint64_t)v40);
  }
  sub_10011458C(v1 + 56, (uint64_t)v40);
  if (!v41) {
    return sub_1001145F4((uint64_t)v40);
  }
  sub_1000D4774((uint64_t)v40, (uint64_t)v37);
  sub_1001145F4((uint64_t)v40);
  uint64_t v32 = v38;
  uint64_t v33 = v39;
  sub_1000A6B78(v37, v38);
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = *(void (**)(void (*)(void *), uint64_t, uint64_t, uint64_t))(v33 + 16);
  swift_retain();
  v35(sub_1001146BC, v34, v32, v33);
  swift_release_n();
  return sub_10009B1B8((uint64_t)v37);
}

uint64_t sub_100112130()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result + 56;
    swift_beginAccess();
    sub_10011458C(v1, (uint64_t)v10);
    if (v11)
    {
      sub_1000D4774((uint64_t)v10, (uint64_t)v7);
      sub_1001145F4((uint64_t)v10);
      uint64_t v2 = v8;
      uint64_t v3 = v9;
      sub_1000A6B78(v7, v8);
      uint64_t v4 = swift_allocObject();
      swift_weakInit();
      uint64_t v5 = *(void *)(v3 + 8);
      id v6 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v5 + 8);
      swift_retain();
      v6(sub_1001146C4, v4, v2, v5);
      swift_release_n();
      sub_10009B1B8((uint64_t)v7);
    }
    else
    {
      sub_1001145F4((uint64_t)v10);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100112274()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result + 56;
    swift_beginAccess();
    sub_10011458C(v1, (uint64_t)v9);
    if (v10)
    {
      sub_1000D4774((uint64_t)v9, (uint64_t)v6);
      sub_1001145F4((uint64_t)v9);
      uint64_t v2 = v7;
      uint64_t v3 = v8;
      sub_1000A6B78(v6, v7);
      uint64_t v4 = swift_allocObject();
      swift_weakInit();
      uint64_t v5 = *(void (**)(void (*)(void *), uint64_t, uint64_t, uint64_t))(v3 + 16);
      swift_retain();
      v5(sub_1001146BC, v4, v2, v3);
      swift_release_n();
      sub_10009B1B8((uint64_t)v6);
    }
    else
    {
      sub_1001145F4((uint64_t)v9);
    }
    return swift_release();
  }
  return result;
}

void sub_1001123B4()
{
  uint64_t v1 = *(void **)(v0 + 136);
  *(void *)(v0 + 136) = 0;

  swift_beginAccess();
  *(void *)(v0 + 144) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)static DOCLog.UI.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  swift_beginAccess();
  sub_1001144AC((uint64_t)&v5, v0 + 56);
  swift_endAccess();
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  swift_beginAccess();
  sub_1001144AC((uint64_t)&v5, v0 + 96);
  swift_endAccess();
  uint64_t v3 = *(void **)(v0 + 168);
  *(void *)(v0 + 168) = 0;
  char v4 = *(unsigned char *)(v0 + 176);
  *(unsigned char *)(v0 + 176) = -1;
  sub_100114290(v3, v4);
}

uint64_t sub_1001124D4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    *(void *)(result + 152) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v3 + 144) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    char v4 = (void *)static DOCLog.UI.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    sub_100112CE0();
    sub_100112820();
    return swift_release();
  }
  return result;
}

void sub_1001125B4(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = *(void **)(Strong + 160);
    *(void *)(Strong + 160) = a1;
    id v4 = a1;

    sub_100112820();
    swift_release();
  }
}

uint64_t sub_100112634()
{
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_retain_n();
  if (Strong)
  {
    unsigned __int8 v3 = [Strong isGathering];

    if (v3)
    {
      uint64_t v4 = 4;
      char v5 = 2;
LABEL_14:
      sub_10011431C((void *)v4, v5);
      swift_release_n();
      goto LABEL_15;
    }
  }
  long long v6 = *(void **)(v0 + 160);
  if (v6)
  {
    if ([v6 contentType] == (id)2)
    {
      uint64_t v7 = *(void **)(v0 + 160);
      if (v7)
      {
        id v8 = v7;
        sub_10011431C(v7, 1);
        swift_release_n();

        goto LABEL_15;
      }
    }
  }
  sub_10011187C();
  if (v9)
  {
    if (sub_100113068())
    {
      uint64_t v4 = 2;
      char v5 = 2;
    }
    else
    {
      sub_100113074();
      char v5 = 0;
    }
    goto LABEL_14;
  }
  if (sub_10011342C())
  {
    uint64_t v4 = 3;
    char v5 = 2;
    goto LABEL_14;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_100114314;
  *(void *)(v11 + 24) = v1;
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  swift_retain();
  swift_retain();
  uint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
  sub_10050B27C(v12, (uint64_t)sub_1001147F4, v11);
  swift_release_n();
  swift_release();
  swift_release();

LABEL_15:

  return swift_release();
}

uint64_t sub_100112820()
{
  *(unsigned char *)(*(void *)(v0 + 40) + 16) = 0;
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_retain_n();
  if (Strong)
  {
    unsigned __int8 v3 = [Strong isGathering];

    if (v3)
    {
      uint64_t v4 = 4;
      char v5 = 2;
LABEL_14:
      sub_100112A24((void *)v4, v5, 0, 0);
      swift_release_n();
      goto LABEL_15;
    }
  }
  long long v6 = *(void **)(v0 + 160);
  if (v6)
  {
    if ([v6 contentType] == (id)2)
    {
      uint64_t v7 = *(void **)(v0 + 160);
      if (v7)
      {
        id v8 = v7;
        sub_100112A24(v7, 1, 0, 0);
        swift_release_n();

        goto LABEL_15;
      }
    }
  }
  sub_10011187C();
  if (v9)
  {
    if (sub_100113068())
    {
      uint64_t v4 = 2;
      char v5 = 2;
    }
    else
    {
      sub_100113074();
      char v5 = 0;
    }
    goto LABEL_14;
  }
  if (sub_10011342C())
  {
    uint64_t v4 = 3;
    char v5 = 2;
    goto LABEL_14;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_100114248;
  *(void *)(v11 + 24) = v1;
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  swift_retain();
  swift_retain();
  uint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
  sub_10050B27C(v12, (uint64_t)sub_100114288, v11);
  swift_release_n();
  swift_release();
  swift_release();

LABEL_15:

  return swift_release();
}

uint64_t sub_100112A24(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void **)(result + 168);
    int v11 = *(unsigned __int8 *)(result + 176);
    if (v11 == 255) {
      goto LABEL_12;
    }
    if (a2)
    {
      if (a2 == 1)
      {
        if (v11 != 1) {
          goto LABEL_12;
        }
        sub_10009E6C4(0, (unint64_t *)&qword_100706710);
        sub_100114300(v10, 1);
        sub_100113CD4(a1, 1);
        char v12 = static NSObject.== infix(_:_:)();
        sub_100114290(v10, 1);
        sub_100113CF8(a1, 1);
        if ((v12 & 1) == 0)
        {
          uint64_t v10 = *(void **)(v9 + 168);
          LOBYTE(v11) = *(unsigned char *)(v9 + 176);
          goto LABEL_12;
        }
        return swift_release();
      }
      switch((unint64_t)a1)
      {
        case 1uLL:
          if (v11 != 2 || v10 != (void *)1) {
            goto LABEL_12;
          }
          return swift_release();
        case 2uLL:
          if (v11 != 2 || v10 != (void *)2) {
            goto LABEL_12;
          }
          return swift_release();
        case 3uLL:
          if (v11 != 2 || v10 != (void *)3) {
            goto LABEL_12;
          }
          uint64_t v19 = 3;
          break;
        case 4uLL:
          if (v11 != 2 || v10 != (void *)4) {
            goto LABEL_12;
          }
          uint64_t v19 = 4;
          break;
        default:
          if (v11 != 2 || v10 != 0) {
            goto LABEL_12;
          }
          return swift_release();
      }
      char v20 = 2;
    }
    else
    {
      if (*(unsigned char *)(result + 176)) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == a1;
      }
      if (!v13)
      {
LABEL_12:
        *(void *)(v9 + 168) = a1;
        *(unsigned char *)(v9 + 176) = a2;
        sub_100113CD4(a1, a2);
        sub_100114290(v10, v11);
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          uint64_t v15 = Strong;
          uint64_t v16 = swift_allocObject();
          *(void *)(v16 + 16) = v15;
          *(void *)(v16 + 24) = a1;
          *(unsigned char *)(v16 + 32) = a2;
          *(void *)(v16 + 40) = a3;
          *(void *)(v16 + 48) = a4;
          aBlock[4] = sub_1001142F0;
          aBlock[5] = v16;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          void aBlock[2] = sub_1000666D8;
          aBlock[3] = &unk_10068D0D0;
          uint64_t v17 = _Block_copy(aBlock);
          sub_100113CD4(a1, a2);
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_release();
          DOCRunInMainThread();
          _Block_release(v17);
          swift_release();
          return swift_unknownObjectRelease();
        }
        return swift_release();
      }
      uint64_t v19 = (uint64_t)a1;
      char v20 = 0;
    }
    sub_100114300((id)v19, v20);
    return swift_release();
  }
  return result;
}

uint64_t sub_100112CE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DOCFileOperation() - 8;
  __chkstk_darwin(v2);
  char v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *(void *)(v0 + 152);
  if (result)
  {
    uint64_t v7 = *(void *)(result + 16);
    if (v7)
    {
      uint64_t v8 = result + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      uint64_t v9 = *(void *)(v3 + 72);
      v19[1] = *(void *)(v0 + 152);
      swift_bridgeObjectRetain();
      long long v20 = xmmword_10059B760;
      do
      {
        sub_100114714(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
        id v21 = (id)*((void *)v5 + 5);
        id v10 = v21;
        swift_getKeyPath();
        swift_allocObject();
        swift_weakInit();
        id v11 = v10;
        char v12 = (void *)_KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
        swift_release();
        swift_release();

        BOOL v13 = (void *)static DOCLog.UI.getter();
        sub_1000CBE70((uint64_t *)&unk_100708800);
        uint64_t v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = v20;
        uint64_t v15 = (void *)*((void *)v5 + 5);
        *(void *)(v14 + 56) = sub_10009E6C4(0, &qword_10070EB70);
        *(void *)(v14 + 64) = sub_1001141E0();
        *(void *)(v14 + 32) = v15;
        *(void *)(v14 + 96) = type metadata accessor for NSKeyValueObservation();
        *(void *)(v14 + 104) = sub_1000BAAA4(&qword_100707430, (void (*)(uint64_t))&type metadata accessor for NSKeyValueObservation);
        *(void *)(v14 + 72) = v12;
        id v16 = v15;
        id v17 = v12;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        swift_bridgeObjectRelease();
        swift_beginAccess();
        id v18 = v17;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(*(void *)(v1 + 144) + 16) >= *(void *)(*(void *)(v1 + 144) + 24) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();

        sub_100114780((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
        v8 += v9;
        --v7;
      }
      while (v7);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100113008(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a4();
    return swift_release();
  }
  return result;
}

uint64_t sub_100113068()
{
  return sub_100113438((SEL *)&selRef_isDownloadingOperation);
}

void sub_100113074()
{
  uint64_t v1 = type metadata accessor for DOCFileOperation() - 8;
  __chkstk_darwin(v1);
  uint64_t v4 = (id *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void *)(v0 + 152);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      uint64_t v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v8 = *(void *)(v2 + 72);
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      while (1)
      {
        sub_100114714(v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
        id v10 = v4[5];
        sub_100114780((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
        uint64_t v11 = NSProgress.fileTotalCount.getter();
        char v13 = v12;

        uint64_t v14 = (v13 & 1) != 0 ? 0 : v11;
        BOOL v15 = __OFADD__(v9, v14);
        v9 += v14;
        if (v15) {
          break;
        }
        v7 += v8;
        if (!--v6)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
    }
  }
}

id sub_1001131D8()
{
  uint64_t v1 = type metadata accessor for DOCFileOperation();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1 - 8);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (id *)((char *)&v21 - v6);
  id result = [*(id *)(v0 + 32) isProgressPausable];
  if (result)
  {
    uint64_t v9 = *(void *)(v0 + 152);
    if (v9)
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v22 = _swiftEmptyArrayStorage;
      uint64_t v11 = *(void *)(v9 + 16);
      id result = (id)swift_bridgeObjectRetain();
      if (v11)
      {
        unint64_t v12 = 0;
        char v13 = &selRef_cellForItemAtIndexPath_;
        uint64_t v21 = v2;
        while (v12 < *(void *)(v9 + 16))
        {
          unint64_t v14 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
          uint64_t v15 = *(void *)(v2 + 72);
          sub_100114714(v9 + v14 + v15 * v12, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
          if ([v7[5] v13[29]])
          {
            uint64_t v16 = (uint64_t)v5;
            sub_100114104((uint64_t)v7, (uint64_t)v5);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_100190C7C(0, v10[2] + 1, 1);
            }
            id v10 = v22;
            unint64_t v18 = v22[2];
            unint64_t v17 = v22[3];
            if (v18 >= v17 >> 1)
            {
              sub_100190C7C(v17 > 1, v18 + 1, 1);
              id v10 = v22;
            }
            void v10[2] = v18 + 1;
            uint64_t v19 = (uint64_t)v10 + v14 + v18 * v15;
            uint64_t v5 = (char *)v16;
            id result = (id)sub_100114104(v16, v19);
            uint64_t v2 = v21;
            char v13 = &selRef_cellForItemAtIndexPath_;
          }
          else
          {
            id result = (id)sub_100114780((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
          }
          if (v11 == ++v12)
          {
            id v10 = v22;
            goto LABEL_15;
          }
        }
        __break(1u);
      }
      else
      {
LABEL_15:
        swift_bridgeObjectRelease();
        uint64_t v20 = v10[2];
        swift_release();
        return (id)(v20 != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10011342C()
{
  return sub_100113438((SEL *)&selRef_isPaused);
}

uint64_t sub_100113438(SEL *a1)
{
  uint64_t v3 = type metadata accessor for DOCFileOperation();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (id *)((char *)&v21 - v8);
  uint64_t v10 = *(void *)(v1 + 152);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(v10 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (v12)
  {
    unint64_t v14 = 0;
    uint64_t v22 = v12;
    uint64_t v23 = v4;
    while (v14 < *(void *)(v10 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v16 = *(void *)(v4 + 72);
      sub_100114714(v10 + v15 + v16 * v14, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
      if ([v9[5] *a1])
      {
        unint64_t v17 = a1;
        sub_100114104((uint64_t)v9, (uint64_t)v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100190C7C(0, v11[2] + 1, 1);
        }
        uint64_t v11 = v24;
        unint64_t v19 = v24[2];
        unint64_t v18 = v24[3];
        if (v19 >= v18 >> 1)
        {
          sub_100190C7C(v18 > 1, v19 + 1, 1);
          uint64_t v11 = v24;
        }
        v11[2] = v19 + 1;
        uint64_t result = sub_100114104((uint64_t)v7, (uint64_t)v11 + v15 + v19 * v16);
        a1 = v17;
        uint64_t v12 = v22;
        uint64_t v4 = v23;
      }
      else
      {
        uint64_t result = sub_100114780((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DOCFileOperation);
      }
      if (v12 == ++v14)
      {
        uint64_t v11 = v24;
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v20 = v11[2];
    swift_release();
    return v20 != 0;
  }
  return result;
}

uint64_t sub_100113674()
{
  sub_10003A094(v0 + 16);

  swift_release();
  swift_unknownObjectWeakDestroy();
  sub_1001145F4(v0 + 56);
  sub_1001145F4(v0 + 96);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_100114290(*(id *)(v0 + 168), *(unsigned char *)(v0 + 176));
  sub_100114780(v0 + OBJC_IVAR____TtC5Files39DOCFileProviderSyncStateFooterViewModel_configuration, type metadata accessor for DOCFileProviderSyncStateFooterViewModel.Configuration);
  return v0;
}

uint64_t sub_10011370C()
{
  sub_100113674();

  return swift_deallocClassInstance();
}

uint64_t sub_100113764()
{
  return type metadata accessor for DOCFileProviderSyncStateFooterViewModel(0);
}

uint64_t type metadata accessor for DOCFileProviderSyncStateFooterViewModel(uint64_t a1)
{
  return sub_10009E984(a1, qword_1007070E0);
}

uint64_t sub_10011378C()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_10011387C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1001138E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_10011394C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001139B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100113A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100113A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100113ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100113AF0);
}

uint64_t sub_100113AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100113B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100113B70);
}

uint64_t sub_100113B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DOCFileProviderSyncStateFooterViewModel.Configuration(uint64_t a1)
{
  return sub_10009E984(a1, qword_1007073F8);
}

uint64_t sub_100113C00()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100113CD4(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id sub_100113CD4(id result, char a2)
{
  if (a2 == 1) {
    return result;
  }
  return result;
}

void destroy for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1)
{
}

void sub_100113CF8(id a1, char a2)
{
  if (a2 == 1) {
}
  }

uint64_t assignWithCopy for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100113CD4(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_100113CF8(v5, v6);
  return a1;
}

uint64_t assignWithTake for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_100113CF8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCFileProviderSyncStateFooterViewModel.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100113E2C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100113E44(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DOCFileProviderSyncStateFooterViewModel.State()
{
  return &type metadata for DOCFileProviderSyncStateFooterViewModel.State;
}

BOOL sub_100113E6C(void *a1, char a2, void *a3, char a4)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (a4 == 1)
      {
        sub_10009E6C4(0, (unint64_t *)&qword_100706710);
        sub_100113CD4(a1, 1);
        sub_100113CD4(a3, 1);
        char v6 = static NSObject.== infix(_:_:)();
        sub_100113CF8(a3, 1);
        sub_100113CF8(a1, 1);
        return v6 & 1;
      }
      return 0;
    }
    switch((unint64_t)a1)
    {
      case 1uLL:
        if (a4 != 2 || a3 != (void *)1) {
          return 0;
        }
        break;
      case 2uLL:
        if (a4 != 2 || a3 != (void *)2) {
          return 0;
        }
        break;
      case 3uLL:
        if (a4 != 2 || a3 != (void *)3) {
          return 0;
        }
        break;
      case 4uLL:
        if (a4 != 2 || a3 != (void *)4) {
          return 0;
        }
        break;
      default:
        if (a4 != 2 || a3) {
          return 0;
        }
        break;
    }
    return 1;
  }
  else
  {
    if (a4) {
      return 0;
    }
    return a1 == a3;
  }
}

uint64_t sub_100113FE0(void *a1)
{
  uint64_t v2 = v1;
  *(void *)(v2 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 152) = 0;
  *(unsigned char *)(v2 + 176) = -1;
  uint64_t v4 = v2 + OBJC_IVAR____TtC5Files39DOCFileProviderSyncStateFooterViewModel_configuration;
  *(void *)(v2 + OBJC_IVAR____TtC5Files39DOCFileProviderSyncStateFooterViewModel_configuration) = 100;
  uint64_t v5 = enum case for DispatchTimeInterval.milliseconds(_:);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  *(void *)(v2 + 32) = a1;
  type metadata accessor for DOCProviderDomainStateManager();
  swift_allocObject();
  *(void *)(v2 + 40) = sub_10050AFC0((uint64_t)a1);
  swift_unknownObjectWeakAssign();
  return v2;
}

uint64_t sub_100114104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DOCFileOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

const char *sub_100114168()
{
  return "fractionCompleted";
}

uint64_t sub_100114178()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001141B0(uint64_t a1, uint64_t a2)
{
  return sub_100113008(a1, a2, v2, (void (*)(void))sub_100112634);
}

unint64_t sub_1001141E0()
{
  unint64_t result = qword_10070AD50;
  if (!qword_10070AD50)
  {
    sub_10009E6C4(255, &qword_10070EB70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10070AD50);
  }
  return result;
}

uint64_t sub_100114248(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_100112A24(a1, a2, a3, a4);
}

uint64_t sub_100114250()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100114288(char a1, uint64_t a2, uint64_t a3)
{
  return sub_100110EC0(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16));
}

void sub_100114290(id a1, char a2)
{
  if (a2 != -1) {
    sub_100113CF8(a1, a2);
  }
}

uint64_t sub_1001142A4()
{
  sub_100113CF8(*(id *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001142F0()
{
  return sub_1004B9CEC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

id sub_100114300(id result, char a2)
{
  if (a2 != -1) {
    return sub_100113CD4(result, a2);
  }
  return result;
}

uint64_t sub_100114314(void *a1, char a2)
{
  return sub_10011431C(a1, a2);
}

uint64_t sub_10011431C(void *a1, char a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = Strong;
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = a1;
      *(unsigned char *)(v7 + 32) = a2;
      aBlock[4] = sub_1001144A0;
      aBlock[5] = v7;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1000666D8;
      aBlock[3] = &unk_10068D148;
      uint64_t v8 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      sub_100113CD4(a1, a2);
      swift_release();
      DOCRunInMainThread();
      _Block_release(v8);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10011445C()
{
  sub_100113CF8(*(id *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return _swift_deallocObject(v0, 33, 7);
}

void sub_1001144A0()
{
  sub_1004B9CBC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1001144AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70(&qword_100707438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_100114514@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isGathering];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100114548(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsGathering:*a1];
}

uint64_t sub_10011455C(uint64_t a1, uint64_t a2)
{
  return sub_100113008(a1, a2, v2, (void (*)(void))sub_100112820);
}

uint64_t sub_10011458C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70(&qword_100707438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001145F4(uint64_t a1)
{
  uint64_t v2 = sub_1000CBE70(&qword_100707438);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100114654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70(&qword_100707438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001146BC(void *a1)
{
}

uint64_t sub_1001146C4(uint64_t a1)
{
  return sub_1001124D4(a1);
}

uint64_t sub_1001146CC()
{
  return sub_100112274();
}

uint64_t sub_1001146D4()
{
  return sub_100112130();
}

uint64_t sub_1001146DC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1001146F4(uint64_t a1)
{
  return sub_1002FB008(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100114714(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100114780(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_100114808()
{
  qword_100707448 = 0x4059000000000000;
}

char *sub_100114840()
{
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_activeDropTargetView] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0xE000000000000000;
  id v2 = objc_allocWithZone((Class)UIView);
  uint64_t v3 = v0;
  id v4 = [v2 init];
  *(void *)&v3[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line] = v4;
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v5 = [objc_allocWithZone((Class)UIView) init];
  [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v6 = [v5 layer];
  uint64_t v7 = self;
  id v8 = [v7 blackColor];
  id v9 = [v8 CGColor];

  [v6 setBorderColor:v9];
  id v10 = [v5 layer];
  [v10 setBorderWidth:1.0];

  id v11 = [v7 whiteColor];
  [v5 setBackgroundColor:v11];

  id v12 = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v13 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info;
  *(void *)&v3[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info] = v12;
  [v12 setNumberOfLines:0];
  [v12 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v14 = v12;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [self fontWithName:v15 size:16.0];

  [v14 setFont:v16];
  id v17 = *(id *)&v3[v13];
  NSString v18 = String._bridgeToObjectiveC()();
  [v17 setText:v18];

  v59.receiver = v3;
  v59.super_class = (Class)_s22DebugDropIndicatorViewCMa();
  unint64_t v19 = [(char *)[v59 initWithFrame:0.0, 0.0, 0.0, 0.0]];
  [v19 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v19 addSubview:v5];
  uint64_t v20 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info;
  [v5 addSubview:*(void *)&v19[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info]];
  uint64_t v21 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line;
  [v19 addSubview:*(void *)&v19[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line]];
  id v58 = self;
  sub_1000CBE70((uint64_t *)&unk_1007084E0);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1005A0C20;
  id v23 = [v5 topAnchor];
  id v24 = [v19 topAnchor];
  id v25 = [v23 constraintEqualToAnchor:v24];

  *(void *)(v22 + 32) = v25;
  id v26 = [v5 bottomAnchor];
  id v27 = [*(id *)&v19[v21] topAnchor];
  id v28 = [v26 constraintEqualToAnchor:v27 constant:-40.0];

  *(void *)(v22 + 40) = v28;
  id v29 = [v5 leadingAnchor];
  id v30 = [v19 trailingAnchor];
  id v31 = [v29 constraintEqualToAnchor:v30];

  *(void *)(v22 + 48) = v31;
  id v32 = [v5 topAnchor];
  id v33 = [*(id *)&v19[v20] topAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33 constant:-10.0];

  *(void *)(v22 + 56) = v34;
  id v35 = [v5 leftAnchor];
  id v36 = [*(id *)&v19[v20] leftAnchor];
  id v37 = [v35 constraintEqualToAnchor:v36 constant:-10.0];

  *(void *)(v22 + 64) = v37;
  id v38 = [v5 rightAnchor];
  id v39 = [*(id *)&v19[v20] rightAnchor];
  id v40 = [v38 constraintEqualToAnchor:v39 constant:10.0];

  *(void *)(v22 + 72) = v40;
  id v41 = [v5 bottomAnchor];
  id v42 = [*(id *)&v19[v20] bottomAnchor];
  id v43 = [v41 constraintEqualToAnchor:v42 constant:10.0];

  *(void *)(v22 + 80) = v43;
  id v44 = [*(id *)&v19[v21] bottomAnchor];
  id v45 = [v19 bottomAnchor];
  id v46 = [v44 constraintEqualToAnchor:v45];

  *(void *)(v22 + 88) = v46;
  id v47 = [*(id *)&v19[v21] leadingAnchor];
  id v48 = [v19 leadingAnchor];
  id v49 = [v47 constraintEqualToAnchor:v48];

  *(void *)(v22 + 96) = v49;
  id v50 = [*(id *)&v19[v21] trailingAnchor];
  id v51 = [v19 trailingAnchor];
  id v52 = [v50 constraintEqualToAnchor:v51];

  *(void *)(v22 + 104) = v52;
  id v53 = [*(id *)&v19[v21] heightAnchor];
  id v54 = [v53 constraintEqualToConstant:2.0];

  *(void *)(v22 + 112) = v54;
  specialized Array._endMutation()();
  sub_10009E6C4(0, (unint64_t *)&unk_100706720);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v58 activateConstraints:isa];

  LODWORD(v56) = 1148846080;
  [v19 setContentCompressionResistancePriority:1 forAxis:v56];
  [v19 setUserInteractionEnabled:0];
  [v19 setClipsToBounds:0];

  return v19;
}

void sub_10011508C(void *a1, void *a2, uint64_t a3)
{
  id v4 = v3;
  id v8 = [v3 window];
  if (!v8)
  {
    id v8 = [a1 window];
    if (!v8) {
      goto LABEL_21;
    }
  }
  id v43 = v8;
  id v9 = [v3 window];
  if (v9)
  {
    id v10 = v9;
    sub_10009E6C4(0, (unint64_t *)&unk_10070CF00);
    id v11 = v43;
    char v12 = static NSObject.== infix(_:_:)();

    if (v12) {
      goto LABEL_12;
    }
  }
  else
  {
  }
  sub_1001154E8();
  [v43 addSubview:v4];
  id v13 = [v4 widthAnchor];
  id v14 = [a1 widthAnchor];
  if (qword_100704E18 != -1) {
    swift_once();
  }
  id v15 = [v13 constraintEqualToAnchor:v14 constant:-*(double *)&qword_100707448];

  uint64_t v16 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint;
  id v17 = *(void **)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint];
  *(void *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint] = v15;

  id v18 = [*(id *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line] centerYAnchor];
  id v19 = [v43 topAnchor];
  id v20 = [v18 constraintEqualToAnchor:v19];

  uint64_t v21 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint;
  uint64_t v22 = *(void **)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint];
  *(void *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint] = v20;

  sub_1000CBE70((uint64_t *)&unk_1007084E0);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1005A0C30;
  id v24 = *(void **)&v4[v16];
  if (!v24)
  {
    __break(1u);
    goto LABEL_20;
  }
  *(void *)(v23 + 32) = v24;
  id v25 = *(void **)&v4[v21];
  if (!v25)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return;
  }
  *(void *)(v23 + 40) = v25;
  uint64_t v44 = v23;
  specialized Array._endMutation()();
  *(void *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView] = v44;
  id v26 = v24;
  id v27 = v25;
  swift_bridgeObjectRelease();
  id v28 = self;
  sub_10009E6C4(0, (unint64_t *)&unk_100706720);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 activateConstraints:isa];

  [v4 setHidden:0];
LABEL_12:
  id v30 = *(void **)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint];
  id v31 = v43;
  if (v30)
  {
    id v32 = v30;
    [a2 locationInView:v43];
    [v32 setConstant:v33];

    id v31 = v43;
  }
  [v31 bringSubviewToFront:v4];
  id v34 = *(void **)(a3 + 24);
  id v35 = *(void **)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal];
  *(void *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal] = v34;
  id v36 = v34;

  sub_1001155D8();
  sub_1001156C8();

  id v37 = [self standardUserDefaults];
  NSString v38 = String._bridgeToObjectiveC()();
  unsigned int v39 = [v37 BOOLForKey:v38];

  if (v39)
  {
    uint64_t v40 = sub_100115FC0(a3);
    id v41 = (uint64_t *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText];
    *id v41 = v40;
    v41[1] = v42;
    swift_bridgeObjectRelease();
    sub_1001156C8();
  }
}

uint64_t sub_1001154E8()
{
  [v0 removeFromSuperview];
  uint64_t v1 = self;
  uint64_t v2 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView;
  sub_10009E6C4(0, (unint64_t *)&unk_100706720);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 deactivateConstraints:isa];

  id v4 = *(void **)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint];
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint] = 0;

  id v5 = *(void **)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint];
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint] = 0;

  *(void *)&v0[v2] = _swiftEmptyArrayStorage;

  return swift_bridgeObjectRelease();
}

void sub_1001155D8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal);
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 intent];
    id v4 = self;
    if (v3 == (id)1) {
      id v5 = [v4 orangeColor];
    }
    else {
      id v5 = [v4 greenColor];
    }
    id v6 = v5;

    [*(id *)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line) setBackgroundColor:v6];
  }
  else
  {
    id v6 = [self grayColor];
    [*(id *)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line) setBackgroundColor:v6];
  }
}

void sub_1001156C8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal);
  if (v1)
  {
    type metadata accessor for DOCSidebarDropProposal(0);
    uint64_t v2 = swift_dynamicCastClass();
    if (v2)
    {
      id v3 = (void *)v2;
      id v4 = v1;
      [v3 intent];
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      type metadata accessor for IndexPath();
      sub_100115EC0();
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 0x3A704F202020200ALL;
      v6._object = (void *)0xE900000000000020;
      String.append(_:)(v6);
      [v3 operation];
      Swift::String v7 = String.lowercased()();
      swift_bridgeObjectRelease();
      String.append(_:)(v7);

      swift_bridgeObjectRelease();
    }
  }
  id v8 = (uint64_t *)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText);
  swift_bridgeObjectRetain();
  uint64_t v9 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v9 >= 1)
  {
    v10._countAndFlagsBits = 2570;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    uint64_t v11 = *v8;
    char v12 = (void *)v8[1];
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = v11;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
  }
  id v14 = *(void **)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info);
  id v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 setText:v15];
}

id sub_100115AB8()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s22DebugDropIndicatorViewCMa();
  return [super dealloc];
}

uint64_t _s22DebugDropIndicatorViewCMa()
{
  return self;
}

unint64_t sub_100115BC0()
{
  _s3dbgCMa();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  unint64_t result = sub_1004944C8((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 24) = result;
  qword_100707450 = v0;
  return result;
}

uint64_t sub_100115C0C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  Swift::String v10 = (uint64_t *)(v4 + 24);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v4 + 24);
  if (*(void *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_100042F50(a1, a2);
    if (v13)
    {
      id v14 = (uint64_t *)(*(void *)(v11 + 56) + 16 * v12);
      uint64_t v16 = *v14;
      unint64_t v15 = v14[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v15 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v15 = 0xE000000000000000;
  }
  if (*(unsigned char *)(v5 + 16) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v16 == a3 && (void *)v15 == a4) {
      return swift_bridgeObjectRelease();
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17) {
      return result;
    }
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v10;
  *Swift::String v10 = 0x8000000000000000;
  sub_1003E068C(a3, (uint64_t)a4, a1, a2, isUniquelyReferenced_nonNull_native);
  *Swift::String v10 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  id v20 = (void *)static DOCLog.UI.getter();
  static os_log_type_t.info.getter();
  sub_1000CBE70((uint64_t *)&unk_100708800);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1005A0030;
  v22._countAndFlagsBits = a3;
  v22._object = a4;
  String.append(_:)(v22);
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = sub_100073F48();
  *(void *)(v21 + 32) = 0x205D446E445BLL;
  *(void *)(v21 + 40) = 0xE600000000000000;
  os_log(_:dso:log:type:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100115E64()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t _s3dbgCMa()
{
  return self;
}

unint64_t sub_100115EC0()
{
  unint64_t result = qword_1007097E0[0];
  if (!qword_1007097E0[0])
  {
    type metadata accessor for IndexPath();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1007097E0);
  }
  return result;
}

void sub_100115F18()
{
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_activeDropTargetView] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0xE000000000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100115FC0(uint64_t a1)
{
  uint64_t v2 = 0x2A6C696E2ALL;
  uint64_t v3 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  Swift::String v6 = (char *)&v33[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v8 = (char *)&v33[-1] - v7;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = v9 + OBJC_IVAR____TtCC5Files21DOCSidebarDropContext9DebugInfo_lastReturnedTargetIndexPath;
  swift_beginAccess();
  sub_10010BFFC(v10, (uint64_t)v8);
  uint64_t v11 = *(void **)(v9 + OBJC_IVAR____TtCC5Files21DOCSidebarDropContext9DebugInfo_lastReturnedProposal);
  strcpy((char *)v33, "    target: ");
  BYTE5(v33[1]) = 0;
  HIWORD(v33[1]) = -5120;
  sub_10010BFFC((uint64_t)v8, (uint64_t)v6);
  uint64_t v12 = type metadata accessor for IndexPath();
  uint64_t v13 = *(void *)(v12 - 8);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12);
  id v15 = v11;
  if (v14 == 1)
  {
    sub_10011631C((uint64_t)v6);
    uint64_t v16 = (void *)0xE500000000000000;
    uint64_t v17 = 0x2A6C696E2ALL;
  }
  else
  {
    uint64_t v17 = IndexPath.description.getter();
    uint64_t v16 = v18;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v12);
  }
  v19._countAndFlagsBits = v17;
  v19._object = v16;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 10;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v33[0];
  Swift::String v22 = (void *)v33[1];
  v33[0] = 0xD00000000000002ELL;
  v33[1] = 0x80000001005D5470;
  v21._object = v22;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v24 = v33[0];
  uint64_t v23 = v33[1];
  strcpy((char *)v33, "  proposal: ");
  BYTE5(v33[1]) = 0;
  HIWORD(v33[1]) = -5120;
  if (v11)
  {
    id v25 = (void *)0xE600000000000000;
    uint64_t v2 = 0x6C65636E6143;
    switch((unint64_t)[v15 operation])
    {
      case 0uLL:
        break;
      case 1uLL:
        id v25 = (void *)0xE90000000000006ELL;
        uint64_t v2 = 0x6564646962726F46;
        break;
      case 2uLL:
        id v25 = (void *)0xE400000000000000;
        uint64_t v2 = 2037411651;
        break;
      case 3uLL:
        id v25 = (void *)0xE400000000000000;
        uint64_t v2 = 1702260557;
        break;
      default:
        id v25 = (void *)0x80000001005D53F0;
        uint64_t v2 = 0xD000000000000014;
        break;
    }
  }
  else
  {
    id v25 = (void *)0xE500000000000000;
  }
  v26._countAndFlagsBits = v2;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = v33[0];
  id v28 = (void *)v33[1];
  v33[0] = v24;
  v33[1] = v23;
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = v33[0];
  sub_10011631C((uint64_t)v8);
  return v30;
}

uint64_t sub_10011631C(uint64_t a1)
{
  uint64_t v2 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100116380()
{
  unint64_t result = qword_1007075B0;
  if (!qword_1007075B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007075B0);
  }
  return result;
}

uint64_t sub_1001163D4()
{
  return sub_1000CBF40(&qword_100707F70);
}

uint64_t sub_100116408()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t sub_10011643C()
{
  uint64_t v0 = type metadata accessor for IntentAuthenticationPolicy();
  sub_10001AF94(v0, qword_100736DE8);
  uint64_t v1 = sub_10009D098(v0, (uint64_t)qword_100736DE8);
  uint64_t v2 = enum case for IntentAuthenticationPolicy.requiresAuthentication(_:);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);

  return v3(v1, v2, v0);
}

uint64_t sub_1001164C4(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for DOCFileEntity();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100116584, 0, 0);
}

uint64_t sub_100116584()
{
  IntentParameter.wrappedValue.getter();
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = v0[5];
    uint64_t v3 = v0[6];
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v7 = v0[7];
      sub_1001173A0(v5, v7);
      id v8 = *(id *)(v7 + *(int *)(v4 + 32));
      sub_100117404(v7);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  v0[8] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_9;
    }
  }
  else if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    id v9 = [self defaultManager];
    v0[9] = v9;
    int v14 = (uint64_t (*)(uint64_t, char, uint64_t))((char *)&dword_10071B900 + dword_10071B900);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[10] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100116814;
    return v14((uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)v9);
  }
  swift_bridgeObjectRelease();
  sub_100117460();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100116814()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1001169A4;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 72);
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_100116934;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100116934()
{
  static IntentResult.result<>()();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001169A4()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100116A18()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

unint64_t sub_100116A50()
{
  unint64_t result = qword_1007075B8;
  if (!qword_1007075B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007075B8);
  }
  return result;
}

unint64_t sub_100116AA8()
{
  unint64_t result = qword_1007075C0;
  if (!qword_1007075C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007075C0);
  }
  return result;
}

unint64_t sub_100116B00()
{
  unint64_t result = qword_1007075C8;
  if (!qword_1007075C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007075C8);
  }
  return result;
}

uint64_t sub_100116B54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100116B70()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100116BC0(uint64_t a1)
{
  unint64_t v2 = sub_1001174B4();

  return static AssistantSchemaIntent.title.getter(a1, v2);
}

uint64_t sub_100116C0C@<X0>(uint64_t a1@<X8>)
{
  if (qword_100704E28 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for IntentAuthenticationPolicy();
  uint64_t v3 = sub_10009D098(v2, (uint64_t)qword_100736DE8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_100116CC0(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000CB70;
  return sub_1001164C4(a1, v4);
}

uint64_t sub_100116D60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100117080();
  *a1 = result;
  return result;
}

uint64_t sub_100116D88(uint64_t a1)
{
  unint64_t v2 = sub_100116A50();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100116DC8()
{
  unint64_t result = qword_1007075D8;
  if (!qword_1007075D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007075D8);
  }
  return result;
}

uint64_t sub_100116E1C()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)();
}

ValueMetadata *type metadata accessor for DeleteFilesIntent()
{
  return &type metadata for DeleteFilesIntent;
}

unint64_t sub_100117024()
{
  unint64_t result = qword_100712F60;
  if (!qword_100712F60)
  {
    sub_100074618(&qword_10071B630);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100712F60);
  }
  return result;
}

uint64_t sub_100117080()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000CBE70(&qword_1007075E0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)v17 - v8;
  uint64_t v10 = sub_1000CBE70((uint64_t *)&unk_10070C020);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = sub_1000CBE70(&qword_1007075E8);
  uint64_t v13 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v17[1] = 0;
  sub_1000CBE70((uint64_t *)&unk_10070C030);
  type metadata accessor for UTType();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10059B760;
  static UTType.item.getter();
  static UTType.folder.getter();
  uint64_t v14 = type metadata accessor for IntentDialog();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v9, 1, 1, v14);
  v15(v7, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  sub_1000CBF40(&qword_1007075F0);
  return IntentParameter<>.init(description:default:supportedContentTypes:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t sub_1001173A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DOCFileEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100117404(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DOCFileEntity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100117460()
{
  unint64_t result = qword_100707600;
  if (!qword_100707600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707600);
  }
  return result;
}

unint64_t sub_1001174B4()
{
  unint64_t result = qword_100707608;
  if (!qword_100707608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707608);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DeleteFilesIntent.TrashError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001175A4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeleteFilesIntent.TrashError()
{
  return &type metadata for DeleteFilesIntent.TrashError;
}

unint64_t sub_1001175E0()
{
  unint64_t result = qword_100707610;
  if (!qword_100707610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707610);
  }
  return result;
}

void sub_100117710()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC5Files22DOCSearchAppMenuButton_attachedMenu];
  if (v1)
  {
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v1;
    void v7[4] = sub_100117B1C;
    v7[5] = v2;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    void v7[2] = sub_1001178E4;
    void v7[3] = &unk_10068D2A0;
    int v3 = _Block_copy(v7);
    id v4 = v1;
    swift_release();
    [v0 _setMenuProvider:v3];
    _Block_release(v3);
    id v5 = [v4 image];
    [v0 setImage:v5 forState:0];

    NSString v6 = [v4 title];
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v0 setTitle:v6 forState:0];

    [v0 setShowsMenuAsPrimaryAction:1];
    [v0 setNeedsUpdateConfiguration];
  }
  else
  {
    [v0 _setMenuProvider:0];
  }
}

id sub_1001178E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  id v5 = *(uint64_t (**)(long long *, uint64_t))(a1 + 32);
  if (a2)
  {
    *((void *)&v9 + 1) = swift_getObjectType();
    *(void *)&long long v8 = a2;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v8 = 0u;
  long long v9 = 0u;
  if (a3)
  {
LABEL_3:
    sub_100117B24();
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
LABEL_4:
  swift_retain();
  swift_unknownObjectRetain();
  NSString v6 = (void *)v5(&v8, v3);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10006273C((uint64_t)&v8);

  return v6;
}

id sub_100117A7C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCSearchAppMenuButton();
  return [super dealloc];
}

uint64_t type metadata accessor for DOCSearchAppMenuButton()
{
  return self;
}

uint64_t sub_100117AE4()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100117B1C()
{
  return *(id *)(v0 + 16);
}

unint64_t sub_100117B24()
{
  unint64_t result = qword_100708610;
  if (!qword_100708610)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100708610);
  }
  return result;
}

uint64_t sub_100117B64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC5Files14DOCApplication_currentTestName);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void sub_100117B80(uint64_t a1, unint64_t a2, NSObject *a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  unsigned int v124 = a4;
  uint64_t v127 = a3;
  id v128 = (void *)a1;
  uint64_t v118 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  id v123 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v122 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  long long v121 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for DispatchTimeInterval();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v115 = (uint64_t *)((char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v120 = type metadata accessor for DispatchTime();
  uint64_t v119 = *(void *)(v120 - 8);
  uint64_t v16 = __chkstk_darwin(v120);
  uint64_t v114 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  long long v113 = (char *)&v104 - v18;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v125 = (char *)&v104 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  Swift::String v26 = (char *)&v104 - v25;
  __chkstk_darwin(v24);
  Swift::String v29 = (char *)&v104 - v28;
  uint64_t v126 = a6;
  if (a6 >= 31)
  {
    uint64_t v127 = v7;
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      aBlock = (void *)swift_slowAlloc();
      uint64_t v126 = v19;
      *(_DWORD *)id v32 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v138 = sub_10009B0E4((uint64_t)v128, a2, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Waited for more than 30 seconds for the collection view to populate. Failing test %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v20 + 8))(v29, v126);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v29, v19);
    }
    id v41 = v127;
    NSString v42 = String._bridgeToObjectiveC()();
    [v41 failedTest:v42];
LABEL_8:

    return;
  }
  uint64_t v106 = v27;
  uint64_t v107 = v13;
  static Logger.Tests.getter();
  double v33 = v7;
  id v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  unint64_t v112 = a2;
  unsigned int v111 = a5;
  uint64_t v108 = v11;
  if (v36)
  {
    id v37 = v33;
    NSString v38 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)NSString v38 = 67109120;
    unsigned int v39 = (uint64_t *)((char *)v33 + OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs);
    swift_beginAccess();
    uint64_t v40 = *v39;
    double v33 = v37;
    LOBYTE(aBlock) = sub_100109124(0, v40) & 1;
    LODWORD(aBlock) = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v34, v35, "recents loaded: %{BOOL}d", v38, 8u);
    swift_slowDealloc();
  }
  else
  {

    id v34 = v33;
  }

  id v45 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  uint64_t v44 = v20 + 8;
  id v43 = v45;
  v45((uint64_t)v26, v19);
  id v46 = v127;
  [v127 loadViewIfNeeded];
  id v47 = *(Class *)((char *)&v46->isa + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
  if (!v47)
  {
    __break(1u);
    goto LABEL_36;
  }
  id v48 = v47;
  [v48 contentSize];
  id v51 = *(Class *)((char *)&v46->isa + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (!v51)
  {
LABEL_36:
    __break(1u);
    return;
  }
  double v52 = v49;
  id v53 = v50;
  unint64_t v109 = v43;
  unsigned __int8 v54 = [v51 isGathering];
  id v110 = v48;
  if ((v54 & 1) == 0)
  {
    unsigned __int8 v55 = (char *)v46 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController;
    swift_beginAccess();
    unint64_t v56 = *((void *)v55 + 1);
    if (v56 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      id v46 = v127;
      if (v72) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v46 = v127;
      if (v57)
      {
LABEL_15:
        if (v52 != 0.0 && *(double *)&v53 != 0.0)
        {
          uint64_t v58 = v19;
          [v48 layoutIfNeeded];
          static Logger.Tests.getter();
          objc_super v59 = v46;
          uint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v62 = swift_slowAlloc();
            *(_DWORD *)uint64_t v62 = 67109888;
            LODWORD(aBlock) = v124;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v62 + 8) = 1024;
            LODWORD(aBlock) = v111;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v62 + 14) = 2048;
            aBlock = v53;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v62 + 24) = 2048;
            unint64_t v63 = *((void *)v55 + 1);
            if (v63 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v64 = (void *)_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v64 = *(void **)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            uint64_t v65 = v112;
            aBlock = v64;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl((void *)&_mh_execute_header, v60, v61, "performing scroll test. %d iterations, %d delta, content size is %f, item count : %ld", (uint8_t *)v62, 0x22u);
            swift_slowDealloc();
          }
          else
          {

            uint64_t v60 = v59;
            uint64_t v65 = v112;
          }

          v109(v106, v58);
          aBlock = v128;
          uint64_t v133 = v65;
          uint64_t v130 = 0x6C61727574614ELL;
          unint64_t v131 = 0xE700000000000000;
          sub_10009D28C();
          if ((StringProtocol.contains<A>(_:)() & 1) != 0
            && (uint64_t v66 = self, [v66 isRecapAvailable]))
          {
            id v67 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
            swift_bridgeObjectRetain();
            id v68 = v110;
            NSString v69 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            NSString v42 = [v67 initWithTestName:v69 scrollView:v68 completionHandler:0];

            [v66 runTestWithParameters:v42];
          }
          else
          {
            id v70 = v110;
            [v110 _effectiveContentInset];
            [v70 setContentOffset:0.0, -v71];
            NSString v42 = String._bridgeToObjectiveC()();
            [v70 _performScrollTest:v42 iterations:v124 delta:v111];
          }
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v127 = v33;
  int64_t v73 = v125;
  static Logger.Tests.getter();
  uint64_t v74 = v46;
  unint64_t v75 = v112;
  swift_bridgeObjectRetain_n();
  id v76 = v74;
  int64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v106 = v44;
    uint64_t v79 = swift_slowAlloc();
    uint64_t v105 = (void *)swift_slowAlloc();
    aBlock = v105;
    *(_DWORD *)uint64_t v79 = 136316162;
    swift_bridgeObjectRetain();
    uint64_t v130 = sub_10009B0E4((uint64_t)v128, v75, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v79 + 12) = 2048;
    uint64_t v130 = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v79 + 22) = 1024;
    unsigned int v80 = [v51 isGathering];

    LODWORD(v130) = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v79 + 28) = 2048;
    uint64_t v130 = (uint64_t)v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v79 + 38) = 2048;
    id v81 = &v76[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController];
    swift_beginAccess();
    unint64_t v82 = *((void *)v81 + 1);
    if (v82 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v83 = *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unsigned int v84 = v111;
    unint64_t v85 = v125;
    uint64_t v129 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v77, v78, "waiting before starting test %s (attempt %ld). collection view is gathering: %{BOOL}d, content size: %f, items count : %ld", (uint8_t *)v79, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v109((uint64_t)v85, v19);
    unint64_t v75 = v112;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v109((uint64_t)v73, v19);
    unsigned int v84 = v111;
  }
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v125 = (char *)static OS_dispatch_queue.main.getter();
  uint64_t v86 = v114;
  static DispatchTime.now()();
  uint64_t v87 = v115;
  void *v115 = 1;
  uint64_t v88 = v116;
  uint64_t v89 = v117;
  (*(void (**)(void *, void, uint64_t))(v116 + 104))(v87, enum case for DispatchTimeInterval.seconds(_:), v117);
  id v90 = v113;
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v88 + 8))(v87, v89);
  unsigned int v91 = v90;
  uint64_t v92 = *(void (**)(char *, uint64_t))(v119 + 8);
  uint64_t v93 = v120;
  v92(v86, v120);
  uint64_t v94 = swift_allocObject();
  uint64_t v96 = v127;
  uint64_t v95 = (uint64_t)v128;
  *(void *)(v94 + 16) = v127;
  *(void *)(v94 + 24) = v95;
  *(void *)(v94 + 32) = v75;
  *(void *)(v94 + 40) = v76;
  *(_DWORD *)(v94 + 48) = v124;
  *(_DWORD *)(v94 + 52) = v84;
  *(void *)(v94 + 56) = v126;
  uint64_t v136 = sub_10013D40C;
  uint64_t v137 = v94;
  aBlock = _NSConcreteStackBlock;
  uint64_t v133 = 1107296256;
  uint64_t v134 = sub_1000666D8;
  uint64_t v135 = &unk_10068E410;
  uint64_t v97 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  uint64_t v98 = v96;
  uint64_t v99 = v76;
  swift_release();
  id v100 = v121;
  static DispatchQoS.unspecified.getter();
  aBlock = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  id v101 = v123;
  uint64_t v102 = v118;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v103 = v125;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v97);

  (*(void (**)(char *, uint64_t))(v108 + 8))(v101, v102);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v100, v107);
  v92(v91, v93);
}

uint64_t sub_100118B84(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = 0;
    LOBYTE(v18) = 1;
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v8 = sub_100342508(result, a2, 10);
    swift_bridgeObjectRelease();
    uint64_t v18 = HIDWORD(v8) & 1;
LABEL_36:
    uint64_t v19 = v8;
    if (v18) {
      uint64_t v19 = 0;
    }
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      NSString v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      NSString v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v7 = sub_1003424F0(v6, v4, 10);
    LODWORD(v8) = v7;
    char v25 = BYTE4(v7) & 1;
    char v9 = BYTE4(v7) & 1;
    goto LABEL_35;
  }
  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v3) {
      goto LABEL_51;
    }
    if (v3 == 1) {
      goto LABEL_34;
    }
    LODWORD(v8) = (BYTE1(result) - 48);
    if (v8 > 9) {
      goto LABEL_34;
    }
    uint64_t v14 = v3 - 2;
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        unsigned int v16 = *v15 - 48;
        if (v16 > 9) {
          goto LABEL_34;
        }
        uint64_t v17 = 10 * (int)v8;
        if (v17 != (int)v17) {
          goto LABEL_34;
        }
        LODWORD(v8) = v17 + v16;
        if (__OFADD__(v17, v16)) {
          goto LABEL_34;
        }
        char v9 = 0;
        ++v15;
        if (!--v14) {
          goto LABEL_35;
        }
      }
    }
LABEL_40:
    char v9 = 0;
    goto LABEL_35;
  }
  if (result != 45)
  {
    if (!v3) {
      goto LABEL_34;
    }
    LODWORD(v8) = (result - 48);
    if (v8 > 9) {
      goto LABEL_34;
    }
    uint64_t v20 = v3 - 1;
    if (v20)
    {
      uint64_t v21 = (unsigned __int8 *)v24 + 1;
      while (1)
      {
        unsigned int v22 = *v21 - 48;
        if (v22 > 9) {
          goto LABEL_34;
        }
        uint64_t v23 = 10 * (int)v8;
        if (v23 != (int)v23) {
          goto LABEL_34;
        }
        LODWORD(v8) = v23 + v22;
        if (__OFADD__(v23, v22)) {
          goto LABEL_34;
        }
        char v9 = 0;
        ++v21;
        if (!--v20) {
          goto LABEL_35;
        }
      }
    }
    goto LABEL_40;
  }
  if (v3)
  {
    if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      char v9 = 0;
      LODWORD(v8) = -(BYTE1(result) - 48);
      uint64_t v10 = v3 - 2;
      if (!v10)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        LODWORD(v18) = v9 & 1;
        goto LABEL_36;
      }
      uint64_t v11 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        unsigned int v12 = *v11 - 48;
        if (v12 > 9) {
          break;
        }
        uint64_t v13 = 10 * (int)v8;
        if (v13 != (int)v13) {
          break;
        }
        LODWORD(v8) = v13 - v12;
        if (__OFSUB__(v13, v12)) {
          break;
        }
        char v9 = 0;
        ++v11;
        if (!--v10) {
          goto LABEL_35;
        }
      }
    }
LABEL_34:
    LODWORD(v8) = 0;
    char v9 = 1;
    goto LABEL_35;
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void sub_100118DD4(uint64_t a1, unint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.Tests.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v21 = a3;
    uint64_t v16 = swift_slowAlloc();
    unsigned int v22 = a4;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v23 = v5;
    uint64_t v25 = v18;
    uint64_t v20 = v10;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_10009B0E4(a1, a2, &v25);
    a3 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "performing scrolling test %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v22;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v20);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v19 = sub_10013761C(a3);
  sub_100117B80(a1, a2, a4, v19, HIDWORD(v19), 0);
}

void sub_100119038(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  NSString v51 = a2;
  uint64_t v42 = a3;
  uint64_t v50 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  __chkstk_darwin(v5);
  id v46 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v44 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v43 - 8);
  uint64_t v13 = __chkstk_darwin(v43);
  os_log_type_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v38 - v16;
  id v41 = a4;
  id v18 = [a4 effectiveFullBrowser];
  uint64_t v19 = self;
  id v20 = [v18 configuration];
  id v21 = [v20 sceneIdentifier];

  id v22 = [v19 globalTabbedBrowserControllerForIdentifier:v21];
  if (v22)
  {
    [v22 switchToTab:2];
    id v23 = [v22 splitBrowserViewController];
    [v23 showSidebar];

    sub_10009E6C4(0, (unint64_t *)&qword_100705380);
    uint64_t v40 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    void *v11 = 1;
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchTimeInterval.seconds(_:), v8);
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
    unsigned int v39 = *(void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v24 = v43;
    v39(v15, v43);
    uint64_t v25 = (void *)swift_allocObject();
    uint64_t v27 = v41;
    uint64_t v26 = v42;
    NSString v29 = v51;
    id v28 = v52;
    void v25[2] = v41;
    v25[3] = v28;
    v25[4] = v50;
    v25[5] = v29;
    v25[6] = v26;
    aBlock[4] = sub_10013D3EC;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1000666D8;
    aBlock[3] = &unk_10068E3C0;
    uint64_t v30 = _Block_copy(aBlock);
    id v31 = v27;
    id v32 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    double v33 = v44;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000CBE70((uint64_t *)&unk_100705390);
    sub_1000B921C();
    id v34 = v46;
    uint64_t v35 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    BOOL v36 = (void *)v40;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v30);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v47);
    v39(v17, v24);
  }
  else
  {
    NSString v51 = String._bridgeToObjectiveC()();
    [v52 failedTest:v51];
    id v37 = v51;
  }
}

void sub_100119614(void *a1, void *a2, void *a3, unint64_t a4, uint64_t a5)
{
  id v9 = [a1 effectiveFullBrowser];
  id v11 = DOCFullDocumentManagerViewController.sidebarViewController.getter();

  if (v11)
  {
    uint64_t v10 = sub_10013761C(a5);
    sub_1001196E4(a3, a4, v11, v10, SHIDWORD(v10));
  }
  else
  {
    id v11 = String._bridgeToObjectiveC()();
    [a2 failedTest:];
  }
}

void sub_1001196E4(NSString a1, unint64_t a2, void *a3, unsigned int a4, int a5)
{
  uint64_t v6 = v5;
  unsigned int v81 = a4;
  LODWORD(v82) = a5;
  NSString v83 = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v79 = *(void *)(v9 - 8);
  uint64_t v80 = v9;
  __chkstk_darwin(v9);
  int64_t v77 = &v64[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v78 = type metadata accessor for DispatchQoS();
  uint64_t v76 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  unint64_t v75 = &v64[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  uint64_t v70 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = &v64[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for DispatchTime();
  uint64_t v73 = *(void *)(v15 - 8);
  uint64_t v74 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  id v18 = &v64[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  double v71 = &v64[-v19];
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = &v64[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  uint64_t v26 = &v64[-v25];
  uint64_t v72 = a3;
  id v27 = [a3 collectionView];
  if (v27)
  {
    id v68 = v6;
    id v69 = v27;
    [v27 contentSize];
    uint64_t v30 = *(void *)&v29;
    id v31 = *(void ***)&v28;
    if (v29 == 0.0 || v28 == 0.0)
    {
      static Logger.Tests.getter();
      swift_bridgeObjectRetain_n();
      id v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      int v43 = v42;
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v44 = swift_slowAlloc();
        unint64_t v67 = a2;
        uint64_t v45 = v44;
        uint64_t v66 = (void **)swift_slowAlloc();
        aBlock = v66;
        *(_DWORD *)uint64_t v45 = 136315650;
        int v65 = v43;
        swift_bridgeObjectRetain();
        uint64_t v90 = sub_10009B0E4((uint64_t)v83, v67, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v45 + 12) = 2048;
        uint64_t v90 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v90 = (uint64_t)v31;
        int v46 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v65, "waiting before starting test %s. content size: {%f, %f}", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        a2 = v67;
        swift_slowDealloc();

        (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v26, v20);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v26, v20);
        int v46 = v82;
      }
      sub_10009E6C4(0, (unint64_t *)&qword_100705380);
      uint64_t v82 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      *uint64_t v14 = 1;
      uint64_t v50 = v70;
      (*(void (**)(void *, void, uint64_t))(v70 + 104))(v14, enum case for DispatchTimeInterval.seconds(_:), v12);
      NSString v51 = v71;
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v50 + 8))(v14, v12);
      uint64_t v52 = v74;
      uint64_t v73 = *(void *)(v73 + 8);
      ((void (*)(unsigned char *, uint64_t))v73)(v18, v74);
      uint64_t v53 = swift_allocObject();
      unsigned __int8 v54 = v68;
      NSString v55 = v83;
      *(void *)(v53 + 16) = v68;
      *(void *)(v53 + 24) = v55;
      unint64_t v56 = v72;
      *(void *)(v53 + 32) = a2;
      *(void *)(v53 + 40) = v56;
      *(_DWORD *)(v53 + 48) = v81;
      *(_DWORD *)(v53 + 52) = v46;
      uint64_t v88 = sub_10013D368;
      uint64_t v89 = v53;
      aBlock = _NSConcreteStackBlock;
      uint64_t v85 = 1107296256;
      uint64_t v86 = sub_1000666D8;
      uint64_t v87 = &unk_10068E370;
      uint64_t v57 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      id v58 = v54;
      id v59 = v56;
      swift_release();
      uint64_t v60 = v75;
      static DispatchQoS.unspecified.getter();
      aBlock = (void **)_swiftEmptyArrayStorage;
      sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000CBE70((uint64_t *)&unk_100705390);
      sub_1000B921C();
      os_log_type_t v61 = v77;
      uint64_t v62 = v80;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      unint64_t v63 = (void *)v82;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v57);

      (*(void (**)(unsigned char *, uint64_t))(v79 + 8))(v61, v62);
      (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v60, v78);
      ((void (*)(unsigned char *, uint64_t))v73)(v51, v52);
    }
    else
    {
      static Logger.Tests.getter();
      id v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 67109632;
        LODWORD(aBlock) = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v34 + 8) = 1024;
        LODWORD(aBlock) = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v34 + 14) = 2048;
        aBlock = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "performing scroll test. %d iterations, %d delta, content size is %f", (uint8_t *)v34, 0x18u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v24, v20);
      aBlock = (void **)v83;
      uint64_t v85 = a2;
      uint64_t v90 = 0x6C61727574614ELL;
      unint64_t v91 = 0xE700000000000000;
      sub_10009D28C();
      if ((StringProtocol.contains<A>(_:)() & 1) != 0
        && (uint64_t v35 = self, [v35 isRecapAvailable]))
      {
        id v36 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
        swift_bridgeObjectRetain();
        id v37 = v69;
        NSString v38 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v39 = [v36 initWithTestName:v38 scrollView:v37 completionHandler:0];

        [v35 runTestWithParameters:v39];
      }
      else
      {
        id v47 = v69;
        [v69 _effectiveContentInset];
        [v47 setContentOffset:0.0, -v48];
        NSString v49 = String._bridgeToObjectiveC()();
        [v47 _performScrollTest:v49 iterations:v81 delta:v82];
      }
    }
  }
  else
  {
    NSString v83 = String._bridgeToObjectiveC()();
    [v6 failedTest:v83];
    NSString v40 = v83;
  }
}

uint64_t sub_10011A134(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char a6)
{
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v6;
  *(void *)(v13 + 24) = a1;
  *(void *)(v13 + 32) = a2;
  *(void *)(v13 + 40) = a5;
  *(unsigned char *)(v13 + 48) = a6;
  *(void *)(v13 + 56) = a3;
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = sub_10013D270;
  v14[3] = v13;
  v14[4] = v6;
  v14[5] = a5;
  id v15 = v6;
  id v16 = a5;
  id v17 = v15;
  id v18 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10011E108(a4, v18, (uint64_t)sub_10013E828, (uint64_t)v14);
  swift_release();

  return swift_release();
}

void sub_10011A250(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t a5, void *a6, char a7, uint64_t a8)
{
  uint64_t v15 = type metadata accessor for DOCItemCollectionFPController();
  __chkstk_darwin(v15 - 8);
  id v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Logger();
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    NSString v57 = String._bridgeToObjectiveC()();
    [a3 failedTest:v57];
    uint64_t v22 = v57;

    return;
  }
  uint64_t v56 = v19;
  uint64_t v23 = (char *)[a6 effectiveBrowserViewController];
  NSString v57 = a4;
  if (v23)
  {
    uint64_t v24 = v23;
    NSString v55 = (void *)a8;
    unint64_t v25 = a5;
    uint64_t v26 = a3;
    id v27 = (void **)&v23[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess();
    double v28 = *v27;
    if (v28)
    {
      type metadata accessor for DOCItemCollectionViewController(0);
      uint64_t v29 = swift_dynamicCastClass();
      if (v29)
      {
        uint64_t v30 = v29;
        id v31 = v28;

        id v32 = (uint64_t *)((char *)v30 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
        swift_beginAccess();
        uint64_t v33 = *v32;
        *id v32 = a7 & 1;
        uint64_t v34 = (uint64_t)v57;
        if (v33 != (a7 & 1))
        {
          uint64_t v35 = (uint64_t)v30 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController;
          swift_beginAccess();
          sub_10013D2A0(v35, (uint64_t)v17);
          uint64_t v36 = *(void *)(*(void *)v17 + 16);
          if (v36)
          {
            id v37 = (uint64_t *)(*(void *)v17 + 64);
            do
            {
              uint64_t v38 = *v37;
              v37 += 5;
              *(unsigned char *)(v38 + 24) = *(unsigned char *)(v38 + 25);
              --v36;
            }
            while (v36);
          }
          sub_10013D304((uint64_t)v17);
          sub_10001E85C();
        }
        sub_100118DD4(v34, v25, (uint64_t)v55, v30);

        return;
      }
    }

    a3 = v26;
  }
  static Logger.Tests.getter();
  id v39 = a6;
  NSString v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    NSString v55 = a3;
    uint64_t v42 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    v58[0] = v54;
    *(_DWORD *)uint64_t v42 = 136315394;
    id v59 = [v39 effectiveBrowserViewController];
    sub_1000CBE70((uint64_t *)&unk_100707720);
    uint64_t v43 = String.init<A>(describing:)();
    id v59 = (id)sub_10009B0E4(v43, v44, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2080;
    uint64_t v45 = (char *)[v39 effectiveBrowserViewController];
    if (v45)
    {
      int v46 = v45;
      id v47 = (void **)&v45[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess();
      double v48 = *v47;
      if (*v47)
      {
        type metadata accessor for DOCItemCollectionViewController(0);
        uint64_t v49 = swift_dynamicCastClass();
        if (v49) {
          id v50 = v48;
        }
      }
      else
      {
        uint64_t v49 = 0;
      }
    }
    else
    {
      uint64_t v49 = 0;
    }
    uint64_t v60 = v49;
    sub_1000CBE70(&qword_100717510);
    uint64_t v51 = String.init<A>(describing:)();
    uint64_t v60 = sub_10009B0E4(v51, v52, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s's content VC is %s, not a DOCItemCollectionViewController", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v56 + 8))(v21, v18);
    a3 = v55;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v56 + 8))(v21, v18);
  }
  NSString v53 = String._bridgeToObjectiveC()();
  [a3 failedTest:v53];
}

uint64_t sub_10011A7C4(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v43 = a5;
  uint64_t v42 = a3;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [self recentDocumentsLocation];
  static Logger.Tests.getter();
  id v14 = v13;
  id v15 = a1;
  uint64_t v16 = v14;
  id v17 = v15;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  int v20 = v19;
  uint64_t v21 = (SEL *)&unk_1006E3000;
  uint64_t v22 = (SEL *)&unk_1006E3000;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 138412546;
    uint64_t v38 = a4;
    uint64_t v39 = a6;
    unint64_t v44 = v16;
    int v36 = v20;
    unint64_t v25 = v16;
    id v37 = a2;
    id v26 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v16;

    *(_WORD *)(v23 + 12) = 2112;
    id v27 = [v17 fullRecentsViewController];
    double v28 = [v27 hierarchyController];

    unint64_t v44 = v28;
    a4 = v38;
    a6 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v24[1] = v28;
    a2 = v37;

    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v36, "resetting location %@ to %@", (uint8_t *)v23, 0x16u);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    uint64_t v21 = (SEL *)&unk_1006E3000;
    swift_slowDealloc();
    uint64_t v22 = (SEL *)&unk_1006E3000;
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  id v29 = [v17 v21[351]];
  id v30 = [v29 v22[367]];

  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v17;
  *(void *)(v31 + 24) = a2;
  *(void *)(v31 + 32) = v42;
  *(void *)(v31 + 40) = a4;
  *(unsigned char *)(v31 + 48) = v43 & 1;
  *(void *)(v31 + 56) = a6;
  id v32 = v17;
  id v33 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000BCD84(v16, v16, 0, 1, 0, (void (*)(void))sub_10013DE24, v31);

  return swift_release();
}

void sub_10011AB44(void *a1, void *a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6)
{
  uint64_t v42 = a3;
  unint64_t v43 = a4;
  uint64_t v44 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v44 - 8);
  uint64_t v11 = __chkstk_darwin(v44);
  id v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v15 = (char *)&v39 - v14;
  static Logger.Tests.getter();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "location reset completion block", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v41 = *(void (**)(char *, uint64_t))(v10 + 8);
  v41(v15, v44);
  os_log_type_t v19 = (char *)[a1 effectiveBrowserViewController];
  if (v19)
  {
    int v20 = v19;
    uint64_t v21 = (void **)&v19[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess();
    uint64_t v22 = *v21;
    if (v22)
    {
      type metadata accessor for DOCItemCollectionViewController(0);
      uint64_t v23 = swift_dynamicCastClass();
      if (v23)
      {
        uint64_t v24 = v23;
        NSString v25 = v22;

        id v26 = [a1 fullRecentsViewController];
        DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)(a5 & 1, 1, 0);

        sub_100118DD4(v42, v43, a6, v24);
        goto LABEL_19;
      }
    }
  }
  static Logger.Tests.getter();
  id v27 = a1;
  double v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v40 = a2;
    id v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)id v30 = 136315138;
    uint64_t v31 = (char *)[v27 effectiveBrowserViewController];
    if (v31)
    {
      id v32 = v31;
      id v33 = (void **)&v31[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess();
      uint64_t v34 = *v33;
      if (*v33)
      {
        type metadata accessor for DOCItemCollectionViewController(0);
        uint64_t v35 = swift_dynamicCastClass();
        if (v35) {
          id v36 = v34;
        }
      }
      else
      {
        uint64_t v35 = 0;
      }
    }
    else
    {
      uint64_t v35 = 0;
    }
    uint64_t v45 = v35;
    sub_1000CBE70(&qword_100717510);
    uint64_t v37 = String.init<A>(describing:)();
    uint64_t v45 = sub_10009B0E4(v37, v38, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "itemCollectionVC %s is not a DOCItemCollectionViewController", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v41(v13, v44);
    a2 = v40;
  }
  else
  {

    v41(v13, v44);
  }
  NSString v25 = String._bridgeToObjectiveC()();
  [a2 failedTest:v25];
LABEL_19:
}

uint64_t sub_10011AF94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  id v13 = (void *)swift_allocObject();
  v13[2] = v6;
  v13[3] = a1;
  v13[4] = a2;
  void v13[5] = a5;
  void v13[6] = a6;
  v13[7] = a3;
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = sub_10013D1D4;
  v14[3] = v13;
  v14[4] = v6;
  v14[5] = a5;
  id v15 = v6;
  id v16 = a5;
  id v17 = v15;
  id v18 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10011E108(a4, v18, (uint64_t)sub_10013E828, (uint64_t)v14);
  swift_release();

  return swift_release();
}

void sub_10011B0AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v71 = a8;
  uint64_t v73 = a7;
  uint64_t v13 = type metadata accessor for IndexPath();
  uint64_t v69 = *(void *)(v13 - 8);
  uint64_t v70 = v13;
  __chkstk_darwin(v13);
  id v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v74 - 8);
  uint64_t v17 = __chkstk_darwin(v74);
  os_log_type_t v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v67 - v20;
  if (a2)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    [a3 failedTest:v22];
  }
  uint64_t v75 = a4;
  uint64_t v23 = (char *)[a6 effectiveBrowserViewController];
  unint64_t v76 = a5;
  if (v23)
  {
    uint64_t v24 = v23;
    NSString v25 = (void **)&v23[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess();
    id v26 = *v25;
    if (*v25)
    {
      type metadata accessor for DOCItemCollectionViewController(0);
      uint64_t v27 = swift_dynamicCastClass();
      if (v27)
      {
        double v28 = (char *)v27;
        id v68 = v26;

        static Logger.Tests.getter();
        unint64_t v29 = v76;
        swift_bridgeObjectRetain_n();
        id v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.debug.getter();
        BOOL v32 = os_log_type_enabled(v30, v31);
        uint64_t v72 = a3;
        if (v32)
        {
          id v33 = (uint8_t *)swift_slowAlloc();
          *(void *)&v77[0] = swift_slowAlloc();
          *(_DWORD *)id v33 = 136315138;
          unint64_t v67 = v33 + 4;
          swift_bridgeObjectRetain();
          v79[0] = sub_10009B0E4(v75, v76, (uint64_t *)v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Navigating to 100item folder for test %s", v33, 0xCu);
          swift_arrayDestroy();
          unint64_t v29 = v76;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v74);
        uint64_t v48 = v73;
        id v49 = [a6 effectiveFullBrowser];
        DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)(v48, 1, 0);

        [v28 loadViewIfNeeded];
        id v50 = *(void **)&v28[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
        if (v50)
        {
          uint64_t v51 = v68;
          id v52 = v50;
          sub_10011B8F4(v52, 2, (uint64_t)v15);
          uint64_t v53 = v75;
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v69 + 8))(v15, v70);
          [v28 collectionView:v52 performPrimaryActionForItemAtIndexPath:isa];

          NSString v55 = v72;
          uint64_t v56 = (void *)swift_allocObject();
          void v56[2] = a6;
          v56[3] = v55;
          v56[4] = v53;
          v56[5] = v29;
          v56[6] = v71;
          NSString v57 = self;
          id v58 = a6;
          swift_bridgeObjectRetain();
          id v59 = @"DOCFullDocumentManagerViewControllerDidFinishLoadingNotificationName";
          id v60 = v55;
          swift_bridgeObjectRetain();
          id v61 = [v57 defaultCenter];
          memset(v77, 0, 32);
          id v62 = [self mainQueue];
          uint64_t v63 = swift_allocObject();
          *(void *)(v63 + 16) = sub_10013D204;
          *(void *)(v63 + 24) = v56;
          swift_retain();
          NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)();

          swift_release();
          sub_1000CBBA4((uint64_t)v77, (uint64_t *)&unk_100705D60);

          swift_release();
        }
        else
        {
          __break(1u);
        }
        return;
      }
    }
  }
  static Logger.Tests.getter();
  id v34 = a6;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v71 = v16;
    uint64_t v72 = a3;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    v79[0] = v38;
    *(_DWORD *)uint64_t v37 = 136315394;
    *(void *)&v77[0] = [v34 effectiveBrowserViewController];
    sub_1000CBE70((uint64_t *)&unk_100707720);
    uint64_t v39 = String.init<A>(describing:)();
    *(void *)&v77[0] = sub_10009B0E4(v39, v40, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    uint64_t v41 = (char *)[v34 effectiveBrowserViewController];
    uint64_t v73 = v38;
    if (v41)
    {
      uint64_t v42 = v41;
      unint64_t v43 = (void **)&v41[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess();
      uint64_t v44 = *v43;
      uint64_t v45 = v71;
      if (*v43)
      {
        type metadata accessor for DOCItemCollectionViewController(0);
        uint64_t v46 = swift_dynamicCastClass();
        if (v46) {
          id v47 = v44;
        }
      }
      else
      {
        uint64_t v46 = 0;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v45 = v71;
    }
    uint64_t v78 = v46;
    sub_1000CBE70(&qword_100717510);
    uint64_t v64 = String.init<A>(describing:)();
    uint64_t v78 = sub_10009B0E4(v64, v65, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s's content VC is %s), not a DOCItemCollectionViewController", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v45 + 8))(v21, v74);
    a3 = v72;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v74);
  }
  NSString v66 = String._bridgeToObjectiveC()();
  [a3 failedTest:v66];
}

void sub_10011B8F4(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v52 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for IndexPath();
  uint64_t v7 = *(char **)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v48 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  __chkstk_darwin(v9 - 8);
  id v49 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a1 preparedCells];
  if (!v11)
  {
    __break(1u);
    JUMPOUT(0x10011C230);
  }
  uint64_t v12 = v11;
  sub_10009E6C4(0, (unint64_t *)&unk_100705CD0);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_4;
    }
LABEL_40:
    swift_bridgeObjectRelease();
LABEL_41:
    static Logger.Tests.getter();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = 0x467974706D452D32;
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      unint64_t v42 = 0xED00007265646C6FLL;
      switch((char)v52)
      {
        case 1:
          uint64_t v40 = 0x6D65744936312D31;
          unint64_t v42 = 0xEE007265646C6F46;
          break;
        case 2:
          uint64_t v40 = 0x6574493030312D33;
          unint64_t v42 = 0xEF7265646C6F466DLL;
          break;
        case 3:
          unint64_t v42 = 0xE300000000000000;
          uint64_t v40 = 3158067;
          break;
        case 4:
          unint64_t v42 = 0x80000001005D5780;
          uint64_t v40 = 0xD000000000000010;
          break;
        case 5:
          uint64_t v40 = 0x2073776F646E6957;
          unint64_t v42 = 0xEE00667265502038;
          break;
        case 6:
          uint64_t v40 = 0x462072656D6D7553;
          unint64_t v42 = 0xEE0067706A2E6E75;
          break;
        case 7:
          uint64_t v40 = 0x6E6F736874696D53;
          unint64_t v42 = 0xEF6664702E6E6169;
          break;
        case 8:
          uint64_t v40 = 0x6F46747365544C51;
          unint64_t v42 = 0xEC0000007265646CLL;
          break;
        default:
          break;
      }
      uint64_t v59 = sub_10009B0E4(v40, v42, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "index path not found for folder name %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v51 + 8))(v6, v4);
    sub_10013C488();
    swift_allocError();
    swift_willThrow();
    return;
  }
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v14) {
    goto LABEL_40;
  }
LABEL_4:
  id v44 = a1;
  uint64_t v45 = v7;
  uint64_t v43 = v4;
  unint64_t v55 = v13;
  unint64_t v56 = v13 & 0xC000000000000001;
  uint64_t v4 = 4;
  uint64_t v53 = v14;
  uint64_t v54 = v52;
  unint64_t v46 = (unint64_t)"v16@?0@\"NSError\"8";
  while (1)
  {
    if (v56) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v15 = *(id *)(v13 + 8 * v4);
    }
    a1 = v15;
    uint64_t v16 = v4 - 3;
    if (__OFADD__(v4 - 4, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    type metadata accessor for DOCItemCollectionCell();
    uint64_t v17 = (void *)swift_dynamicCastClass();
    if (!v17)
    {

      goto LABEL_6;
    }
    uint64_t v18 = (*(uint64_t (**)(void))((swift_isaMask & *v17) + 0x1F8))();
    if (!v18) {
      goto LABEL_31;
    }
    os_log_type_t v19 = (void *)v18;
    uint64_t v7 = v6;
    uint64_t v20 = (void *)(v18 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node);
    swift_beginAccess();
    if (!*v20)
    {

LABEL_31:
      swift_bridgeObjectRelease();
      sub_10013C488();
      swift_allocError();
      swift_willThrow();

      return;
    }
    unint64_t v21 = 0xED00007265646C6FLL;
    id v57 = v19;
    id v58 = a1;
    unint64_t v22 = 0x467974706D452D32;
    switch(v54)
    {
      case 1:
        unint64_t v22 = 0x6D65744936312D31;
        unint64_t v21 = 0xEE007265646C6F46;
        break;
      case 2:
        unint64_t v22 = 0x6574493030312D33;
        unint64_t v21 = 0xEF7265646C6F466DLL;
        break;
      case 3:
        unint64_t v21 = 0xE300000000000000;
        unint64_t v22 = 3158067;
        break;
      case 4:
        unint64_t v21 = v46 | 0x8000000000000000;
        unint64_t v22 = 0xD000000000000010;
        break;
      case 5:
        unint64_t v22 = 0x2073776F646E6957;
        unint64_t v21 = 0xEE00667265502038;
        break;
      case 6:
        unint64_t v22 = 0x462072656D6D7553;
        unint64_t v21 = 0xEE0067706A2E6E75;
        break;
      case 7:
        unint64_t v22 = 0x6E6F736874696D53;
        unint64_t v21 = 0xEF6664702E6E6169;
        break;
      case 8:
        unint64_t v22 = 0x6F46747365544C51;
        unint64_t v21 = 0xEC0000007265646CLL;
        break;
      default:
        break;
    }
    id v23 = [(id)swift_unknownObjectRetain() filename];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    if (v22 == v24 && v21 == v26) {
      break;
    }
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v29 = v58;
    if (v28) {
      goto LABEL_33;
    }

    swift_unknownObjectRelease();
    unint64_t v13 = v55;
    uint64_t v14 = v53;
LABEL_6:
    ++v4;
    if (v16 == v14)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v43;
      goto LABEL_41;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v29 = v58;
LABEL_33:
  swift_bridgeObjectRelease();
  id v30 = [v44 indexPathForCell:v29];
  uint64_t v32 = (uint64_t)v49;
  uint64_t v31 = v50;
  id v33 = v45;
  if (v30)
  {
    id v34 = v30;
    uint64_t v35 = v48;
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v36 = (void (*)(uint64_t, char *, uint64_t))*((void *)v33 + 4);
    uint64_t v37 = v35;
    id v29 = v58;
    v36(v32, v37, v31);
    (*((void (**)(uint64_t, void, uint64_t, uint64_t))v33 + 7))(v32, 0, 1, v31);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v33 + 6))(v32, 1, v31) != 1)
    {

      swift_unknownObjectRelease();
      v36(v47, (char *)v32, v31);
      return;
    }
  }
  else
  {
    (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v45 + 7))(v49, 1, 1, v50);
  }
  sub_1000CBBA4(v32, (uint64_t *)&unk_1007069A0);
  sub_10013C488();
  swift_allocError();
  swift_willThrow();

  swift_unknownObjectRelease();
}

void sub_10011C278(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = (char *)[a1 effectiveBrowserViewController];
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = v9;
  id v11 = (void **)&v9[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess();
  uint64_t v12 = *v11;
  if (!v12 || (type metadata accessor for DOCItemCollectionViewController(0), (uint64_t v13 = swift_dynamicCastClass()) == 0))
  {

LABEL_6:
    NSString v15 = String._bridgeToObjectiveC()();
    [a2 failedTest:v15];
    goto LABEL_7;
  }
  uint64_t v14 = v13;
  NSString v15 = v12;

  sub_100118DD4(a3, a4, a5, v14);
LABEL_7:
}

void sub_10011C378(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v49 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  NSString v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    [a3 failedTest:v16];
  }
  uint64_t v50 = a4;
  uint64_t v17 = (char *)[a6 effectiveBrowserViewController];
  if (v17)
  {
    uint64_t v18 = v17;
    os_log_type_t v19 = (void **)&v17[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess();
    uint64_t v20 = *v19;
    if (v20)
    {
      type metadata accessor for DOCItemCollectionViewController(0);
      uint64_t v21 = swift_dynamicCastClass();
      if (v21)
      {
        uint64_t v22 = v21;
        id v23 = v20;

        id v24 = [a6 effectiveFullBrowser];
        uint64_t v25 = self;
        uint64_t v26 = (void *)swift_allocObject();
        void v26[2] = a3;
        void v26[3] = v22;
        v26[4] = v50;
        v26[5] = a5;
        v26[6] = v24;
        v26[7] = a7;
        aBlock[4] = sub_10013DEBC;
        aBlock[5] = v26;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_1000666D8;
        aBlock[3] = &unk_1006912F0;
        uint64_t v27 = _Block_copy(aBlock);
        id v28 = v23;
        id v29 = a3;
        swift_bridgeObjectRetain();
        NSString v30 = v24;
        swift_release();
        [v25 performAfterCATransactionCommits:v27];
        _Block_release(v27);

        goto LABEL_19;
      }
    }
  }
  uint64_t v48 = a5;
  static Logger.Tests.getter();
  id v31 = a6;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v47 = a3;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    uint64_t v53 = v46;
    *(_DWORD *)uint64_t v34 = 136315394;
    aBlock[0] = [v31 effectiveBrowserViewController];
    sub_1000CBE70((uint64_t *)&unk_100707720);
    uint64_t v35 = String.init<A>(describing:)();
    aBlock[0] = sub_10009B0E4(v35, v36, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v37 = (char *)[v31 effectiveBrowserViewController];
    if (v37)
    {
      uint64_t v38 = v37;
      os_log_type_t v39 = (void **)&v37[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess();
      uint64_t v40 = *v39;
      uint64_t v41 = &selRef_cellForItemAtIndexPath_;
      if (*v39)
      {
        type metadata accessor for DOCItemCollectionViewController(0);
        uint64_t v42 = swift_dynamicCastClass();
        if (v42) {
          id v43 = v40;
        }
      }
      else
      {
        uint64_t v42 = 0;
      }
    }
    else
    {
      uint64_t v42 = 0;
      uint64_t v41 = &selRef_cellForItemAtIndexPath_;
    }
    uint64_t v52 = v42;
    sub_1000CBE70(&qword_100717510);
    uint64_t v44 = String.init<A>(describing:)();
    uint64_t v52 = sub_10009B0E4(v44, v45, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s's content VC is %s, not a DOCItemCollectionViewController", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v49);
    a3 = v47;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v49);
    uint64_t v41 = &selRef_cellForItemAtIndexPath_;
  }
  NSString v30 = String._bridgeToObjectiveC()();
  [a3 v41[60] v30];
LABEL_19:
}

uint64_t sub_10011C898(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a6;
  v12[7] = a2;
  id v13 = a1;
  swift_bridgeObjectRetain();
  id v14 = a5;
  sub_10011EB24(a2, (uint64_t)sub_10013DF24, (uint64_t)v12);

  return swift_release();
}

uint64_t sub_10011C954(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v9 = String._bridgeToObjectiveC()();
  [a1 startedTest:v9];

  DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)(a5, 1, 0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  id v11 = a1;
  sub_10011EB24(a6, (uint64_t)sub_10013DF54, v10);

  return swift_release();
}

void sub_10011CA24(char *a1)
{
  if (*(void *)&a1[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8])
  {
    swift_bridgeObjectRetain();
    id v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v2 = 0;
  }
  [a1 finishedTest:v2 waitForCommit:1 extraResults:0];
}

void sub_10011CAC4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = 0;
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v10;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = v11;
  v12[6] = a1;
  v16[4] = sub_10013D144;
  v16[5] = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  void v16[2] = sub_1000704F8;
  v16[3] = &unk_10068E1E0;
  id v13 = _Block_copy(v16);
  swift_retain();
  swift_retain();
  id v14 = a1;
  swift_release();
  id v15 = [a2 addSubscriberForConfiguration:a3 usingBlock:v13];
  _Block_release(v13);
  swift_release();
}

uint64_t sub_10011CC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  id v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v16 - 8);
  uint64_t v29 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v27 = static OS_dispatch_queue.main.getter();
  os_log_type_t v19 = (void *)swift_allocObject();
  void v19[2] = a3;
  uint64_t v19[3] = a2;
  v19[4] = a4;
  v19[5] = a5;
  void v19[6] = a6;
  v19[7] = a7;
  v19[8] = a1;
  aBlock[4] = sub_10013D1BC;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_10068E230;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_retain();
  id v21 = a7;
  swift_bridgeObjectRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  uint64_t v22 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v23 = (void *)v27;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v18, v29);
}

void sub_10011CF48(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t), uint64_t a4, uint64_t a5, void *a6, unint64_t a7)
{
  unint64_t v46 = a7;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    if (a2)
    {
      a3(0, a2);
    }
    else
    {
      uint64_t v44 = v11;
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      uint64_t v45 = v12;
      if (Strong)
      {
        id v43 = (void *)Strong;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = (void *)static DOCDocumentSourceIdentifier.iCloudCurrent.getter();
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        os_log_type_t v19 = v18;

        v20._countAndFlagsBits = v17;
        v20._object = v19;
        Swift::Bool v21 = String.hasPrefix(_:)(v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v21)
        {
          Swift::Bool v22 = 1;
        }
        else
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          v23._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::Bool v22 = String.hasPrefix(_:)(v23);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        unint64_t v24 = v46;
        uint64_t v25 = v43;
        id v26 = a6;
        uint64_t v27 = sub_1001381BC(v24, v26, v22);

        if (v27)
        {
          id v28 = v27;
          id v29 = [v28 identifier];
          id v30 = [objc_allocWithZone((Class)DOCConcreteLocation) initWithSourceIdentifier:v29 node:0];

          uint64_t v12 = v45;
          if (v30)
          {
            swift_beginAccess();
            *(unsigned char *)(a1 + 16) = 1;
            id v31 = v30;
            a3(v30, 0);

            return;
          }
        }
        else
        {

          uint64_t v12 = v45;
        }
      }
      static Logger.Tests.getter();
      id v32 = a6;
      swift_bridgeObjectRetain_n();
      id v33 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        v47[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136315394;
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = sub_10009B0E4(v37, v38, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2080;
        sub_10009E6C4(0, &qword_100707CD0);
        swift_bridgeObjectRetain();
        uint64_t v39 = Array.description.getter();
        unint64_t v41 = v40;
        swift_bridgeObjectRelease();
        uint64_t v48 = sub_10009B0E4(v39, v41, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Sources updated. Did not find: %s in list of sources: %s", (uint8_t *)v36, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v44);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v44);
      }
    }
  }
}

uint64_t sub_10011D3F4(void **a1, void *a2, int a3)
{
  uint64_t v4 = v3;
  LODWORD(v69) = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v67 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v60 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)v60 - v14;
  uint64_t v16 = *a1;
  static Logger.Tests.getter();
  id v17 = a2;
  id v18 = v16;
  id v19 = v17;
  id v20 = v18;
  Swift::Bool v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  LODWORD(v63) = v22;
  BOOL v23 = os_log_type_enabled(v21, v22);
  id v68 = v19;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc();
    id v62 = v13;
    uint64_t v25 = v24;
    uint64_t v61 = swift_slowAlloc();
    uint64_t v71 = v61;
    *(_DWORD *)uint64_t v25 = 136315394;
    uint64_t v66 = v3;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v8;
    uint64_t v70 = sub_10009B0E4(v26, v27, &v71);
    uint64_t v65 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    v60[1] = v25 + 14;
    id v28 = [v20 identifier];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;

    uint64_t v8 = v64;
    uint64_t v70 = sub_10009B0E4(v29, v31, &v71);
    uint64_t v7 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v4 = v66;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v63, "Specified source: %s / Available source: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v13 = v62;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v63 = *(void (**)(char *, uint64_t))(v8 + 8);
  v63(v15, v7);
  if ((v69 & 1) == 0 || ![v20 isiCloudBased])
  {
    id v45 = [v20 identifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v46._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::Bool v47 = String.hasPrefix(_:)(v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v47) {
      return 0;
    }
    static Logger.Tests.getter();
    id v48 = v20;
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v65 = v7;
      uint64_t v71 = v52;
      uint64_t v66 = v4;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v69 = v51 + 4;
      id v53 = [v48 identifier];
      uint64_t v64 = v8;
      id v54 = v53;
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v57 = v56;

      uint64_t v70 = sub_10009B0E4(v55, v57, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Source %s is a match", v51, 0xCu);
      uint64_t v44 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v63(v67, v65);
      return v44;
    }

    id v58 = v67;
LABEL_14:
    v63(v58, v7);
    return 1;
  }
  static Logger.Tests.getter();
  id v32 = v20;
  id v33 = v13;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v34, v35))
  {

    id v58 = v33;
    goto LABEL_14;
  }
  uint64_t v36 = swift_slowAlloc();
  id v62 = v33;
  uint64_t v37 = (uint8_t *)v36;
  uint64_t v38 = swift_slowAlloc();
  uint64_t v66 = v4;
  uint64_t v71 = v38;
  uint64_t v65 = v7;
  *(_DWORD *)uint64_t v37 = 136315138;
  uint64_t v69 = v37 + 4;
  id v39 = [v32 identifier];
  uint64_t v64 = v8;
  id v40 = v39;
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v43 = v42;

  uint64_t v70 = sub_10009B0E4(v41, v43, &v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v34, v35, "Source %s is a match", v37, 0xCu);
  uint64_t v44 = 1;
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  v63(v62, v65);
  return v44;
}

uint64_t sub_10011DAB0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v23 = static OS_dispatch_queue.main.getter();
  id v15 = (void *)swift_allocObject();
  v15[2] = v4;
  v15[3] = a2;
  void v15[4] = a1;
  v15[5] = a3;
  v15[6] = a4;
  aBlock[4] = sub_10013D06C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_10068E0F0;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v4;
  id v18 = a2;
  id v19 = a1;
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v20 = (void *)v23;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v24);
}

void sub_10011DD98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v13 = [a2 tabBarController];
  if (v13)
  {
    uint64_t v14 = v13;
    sub_10009E6C4(0, (unint64_t *)&qword_100705380);
    *uint64_t v12 = static OS_dispatch_queue.main.getter();
    (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
    char v15 = _dispatchPreconditionTest(_:)();
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
    if (v15)
    {
      [v14 setSelectedIndex:2];

      id v16 = [a2 effectiveFullBrowser];
      id v17 = (void *)swift_allocObject();
      void v17[2] = a2;
      v17[3] = a4;
      void v17[4] = a5;
      aBlock[4] = sub_10013D0A0;
      aBlock[5] = v17;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1000666D8;
      aBlock[3] = &unk_10068E140;
      id v18 = _Block_copy(aBlock);
      id v19 = a2;
      swift_retain();
      swift_release();
      [v16 showLocation:a3 animated:0 withCompletionBlock:v18];
      _Block_release(v18);

      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_10011DFF4(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = (char *)[a1 effectiveBrowserViewController];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (void **)&v3[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess();
    uint64_t v6 = *v5;
    if (v6)
    {
      type metadata accessor for DOCItemCollectionViewController(0);
      uint64_t v7 = swift_dynamicCastClass();
      if (v7)
      {
        uint64_t v8 = v7;
        id v9 = v6;

        id v10 = v9;
        a2(v8, 0);

        return;
      }
    }
  }
  sub_10013C2E8();
  uint64_t v11 = swift_allocError();
  *uint64_t v12 = 1;
  a2(0, v11);
  swift_errorRelease();
}

uint64_t sub_10011E108(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  id v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchTime();
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  char v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v23 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  id v16 = (void *)swift_allocObject();
  void v16[2] = a2;
  v16[3] = v4;
  v16[4] = a1;
  v16[5] = a3;
  void v16[6] = a4;
  aBlock[4] = sub_10013CFD8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_10068E078;
  id v17 = _Block_copy(aBlock);
  id v18 = a2;
  id v19 = v4;
  id v20 = a1;
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  Swift::Bool v21 = (void *)v23;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v15, v26);
}

uint64_t sub_10011E490(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = [a1 effectiveFullBrowser];
  uint64_t v10 = (char *)[v9 hierarchyController];
  id v11 = *(id *)&v10[OBJC_IVAR____TtC5Files22DOCHierarchyController_sourceObserver];

  id v12 = [a1 configuration];
  id v13 = (void *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  id v14 = a3;
  swift_retain();
  sub_10011CAC4(v14, v11, (uint64_t)v12, (uint64_t)sub_10013D00C, (uint64_t)v13);

  return swift_release();
}

void sub_10011E5B8(void *a1, uint64_t a2, void *a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    static Logger.Tests.getter();
    swift_errorRetain();
    id v14 = a3;
    swift_errorRetain();
    id v15 = v14;
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = v27;
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v28 = a5;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v29 = a4;
      uint64_t v30 = sub_10009B0E4(v19, v20, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v30 = a2;
      swift_errorRetain();
      sub_1000CBE70((uint64_t *)&unk_1007076D0);
      uint64_t v21 = String.init<A>(describing:)();
      uint64_t v30 = sub_10009B0E4(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a4 = (void (*)(void, void))v29;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "error getting location for source identifier %s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_errorRetain();
    a4(0, a2);
    swift_errorRelease();
    swift_errorRelease();
  }
  else if (a1)
  {
    id v29 = a1;
    a4(a1, 0);
    uint64_t v23 = v29;
  }
  else
  {
    sub_10013C2E8();
    uint64_t v24 = swift_allocError();
    *uint64_t v25 = 2;
    a4(0, v24);
    swift_errorRelease();
  }
}

uint64_t sub_10011E958(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (sub_100138050((uint64_t)a1)) {
    return a2();
  }
  if (qword_100704F30 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v3;
  v8[3] = a1;
  void v8[4] = a2;
  v8[5] = a3;
  id v9 = self;
  id v10 = v3;
  id v11 = a1;
  swift_retain();
  id v12 = [v9 defaultCenter];
  v17[3] = sub_10009E6C4(0, (unint64_t *)&qword_100707710);
  id v13 = self;
  id v14 = v11;
  id v15 = [v13 mainQueue:v11];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_10013CE74;
  *(void *)(v16 + 24) = v8;
  swift_retain();
  NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)();

  swift_release();
  sub_1000CBBA4((uint64_t)v17, (uint64_t *)&unk_100705D60);
  return swift_release();
}

uint64_t sub_10011EB24(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = a1;
  void v7[3] = a2;
  void v7[4] = a3;
  id v8 = a1;
  swift_retain_n();
  id v9 = v8;
  if (sub_100138050((uint64_t)v9))
  {
    sub_10011ED94((uint64_t)v9, a2, a3);
    swift_release();

    return swift_release();
  }
  else
  {
    if (qword_100704F30 != -1) {
      swift_once();
    }
    id v11 = (void *)swift_allocObject();
    v11[2] = v3;
    v11[3] = v9;
    void v11[4] = sub_10013CE64;
    v11[5] = v7;
    id v12 = self;
    id v13 = v9;
    id v14 = v3;
    swift_retain();
    id v15 = [v12 defaultCenter];
    v20[3] = sub_10009E6C4(0, (unint64_t *)&qword_100707710);
    v20[0] = v13;
    uint64_t v16 = self;
    id v17 = v13;
    id v18 = [v16 mainQueue:v20[0]];
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_10013CE74;
    *(void *)(v19 + 24) = v11;
    swift_retain();
    NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)();

    swift_release();
    sub_1000CBBA4((uint64_t)v20, (uint64_t *)&unk_100705D60);
    swift_release();

    swift_release();
    return swift_release();
  }
}

uint64_t sub_10011ED94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v107 = a2;
  uint64_t v108 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v111 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for DispatchQoS();
  uint64_t v110 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  unint64_t v109 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for Logger();
  id v8 = *(uint64_t (***)(uint64_t))(v129 - 8);
  uint64_t v9 = __chkstk_darwin(v129);
  long long v121 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)&v107 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v107 - v14;
  dispatch_group_t v126 = dispatch_group_create();
  uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
  uint64_t v117 = v13;
  uint64_t v113 = v5;
  uint64_t v114 = v4;
  uint64_t v127 = v15;
  if (!v16)
  {
    unint64_t v66 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_53:
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.debug.getter();
    BOOL v69 = os_log_type_enabled((os_log_t)v67, v68);
    uint64_t v70 = &off_10059B000;
    unint64_t v71 = v66 >> 62;
    unint64_t v122 = v66;
    if (!v69)
    {

      swift_bridgeObjectRelease_n();
      id v128 = v8[1];
      ((void (*)(char *, uint64_t))v128)(v15, v129);
      goto LABEL_58;
    }
    unint64_t v66 = (unint64_t)v8;
    id v13 = (char *)swift_slowAlloc();
    id v130 = swift_slowAlloc();
    *(_DWORD *)id v13 = 136315394;
    *(void *)&v152[0] = sub_10009B0E4(0xD00000000000004DLL, 0x80000001005D57F0, &v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((_WORD *)v13 + 6) = 2048;
    if (v71) {
      goto LABEL_83;
    }
    uint64_t v72 = *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      *(void *)&v152[0] = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v67, v68, "%s START waiting for %ld to load before continuing", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v8 = (uint64_t (**)(uint64_t))v66;
      id v128 = *(uint64_t (**)(uint64_t))(v66 + 8);
      ((void (*)(char *, uint64_t))v128)(v127, v129);
      id v13 = v117;
      uint64_t v70 = &off_10059B000;
LABEL_58:
      if (v71)
      {
        unint64_t v71 = v122;
        swift_bridgeObjectRetain();
        uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
        if (!v67) {
          goto LABEL_81;
        }
      }
      else
      {
        unint64_t v71 = v122;
        uint64_t v67 = *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v67) {
          goto LABEL_81;
        }
      }
      if (v67 >= 1) {
        break;
      }
      __break(1u);
LABEL_83:
      swift_bridgeObjectRetain();
      uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v74 = 0;
    uint64_t v127 = (char *)(v8 + 1);
    id v123 = &v132;
    unint64_t v124 = v71 & 0xC000000000000001;
    *(void *)&long long v73 = 136315650;
    long long v120 = v73;
    unint64_t v116 = (unint64_t)"efinitions plist";
    dispatch_queue_t v119 = (dispatch_queue_t)0x80000001005D57F0;
    id v118 = (char *)&type metadata for Any + 8;
    *(void *)&long long v73 = *((void *)v70 + 227);
    long long v115 = v73;
    id v125 = (id)v67;
    do
    {
      if (v124)
      {
        int64_t v77 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        int64_t v77 = *(void **)(v71 + 8 * (void)v74 + 32);
        swift_unknownObjectRetain();
      }
      static Logger.Tests.getter();
      swift_unknownObjectRetain_n();
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = swift_slowAlloc();
        id v130 = swift_slowAlloc();
        *(_DWORD *)uint64_t v80 = v120;
        *(void *)(v80 + 4) = sub_10009B0E4(0xD00000000000004DLL, (unint64_t)v119, &v130);
        *(_WORD *)(v80 + 12) = 2080;
        *(void *)&v152[0] = v77;
        swift_unknownObjectRetain();
        sub_1000CBE70(&qword_100707718);
        uint64_t v81 = String.init<A>(describing:)();
        *(void *)(v80 + 14) = sub_10009B0E4(v81, v82, &v130);
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v80 + 22) = 2080;
        unsigned int v83 = [v77 hasFinishedTryingToFetchCorrectThumbnail];
        BOOL v84 = v83 == 0;
        if (v83) {
          uint64_t v85 = 1702195828;
        }
        else {
          uint64_t v85 = 0x65736C6166;
        }
        if (v84) {
          unint64_t v86 = 0xE500000000000000;
        }
        else {
          unint64_t v86 = 0xE400000000000000;
        }
        *(void *)(v80 + 24) = sub_10009B0E4(v85, v86, &v130);
        swift_unknownObjectRelease_n();
        unint64_t v71 = v122;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "%s Checking thumbnail: %s. hasFinishedTryingToFetchCorrectThumbnail: %s", (uint8_t *)v80, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      ((void (*)(char *, uint64_t))v128)(v13, v129);
      dispatch_group_t v87 = v126;
      dispatch_group_enter(v126);
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = v77;
      *(void *)(v88 + 24) = v87;
      uint64_t v134 = sub_10013CEB8;
      uint64_t v135 = (void *)v88;
      id v130 = (uint64_t)_NSConcreteStackBlock;
      uint64_t v131 = 1107296256;
      uint64_t v132 = sub_1000666D8;
      uint64_t v133 = &unk_10068DF10;
      uint64_t v89 = _Block_copy(&v130);
      swift_unknownObjectRetain();
      uint64_t v90 = v87;
      swift_release();
      unsigned __int8 v91 = [v77 registerGenerationCompletionHandler:v89];
      _Block_release(v89);
      if ((v91 & 1) == 0)
      {
        uint64_t v92 = v121;
        static Logger.Tests.getter();
        swift_unknownObjectRetain_n();
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v93, v94))
        {
          uint64_t v95 = swift_slowAlloc();
          id v130 = swift_slowAlloc();
          *(_DWORD *)uint64_t v95 = v115;
          *(void *)(v95 + 4) = sub_10009B0E4(0xD00000000000004DLL, v116 | 0x8000000000000000, &v130);
          *(_WORD *)(v95 + 12) = 2080;
          *(void *)&v152[0] = v77;
          swift_unknownObjectRetain();
          sub_1000CBE70(&qword_100707718);
          uint64_t v96 = String.init<A>(describing:)();
          *(void *)(v95 + 14) = sub_10009B0E4(v96, v97, &v130);
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "%s Thumbnail generation already completed for thumbnail: %s", (uint8_t *)v95, 0x16u);
          swift_arrayDestroy();
          unint64_t v71 = v122;
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v75 = v92;
          id v13 = v117;
        }
        else
        {

          swift_unknownObjectRelease_n();
          uint64_t v75 = v92;
        }
        ((void (*)(char *, uint64_t))v128)(v75, v129);
        dispatch_group_leave(v90);
      }
      id v76 = v125;
      uint64_t v74 = (char *)v74 + 1;
      swift_unknownObjectRelease();
    }
    while (v76 != v74);
LABEL_81:
    swift_bridgeObjectRelease();
    sub_10009E6C4(0, (unint64_t *)&qword_100705380);
    uint64_t v98 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v99 = (void *)swift_allocObject();
    uint64_t v100 = v107;
    uint64_t v101 = v108;
    v99[2] = v71;
    v99[3] = v100;
    v99[4] = v101;
    uint64_t v134 = sub_10013CF00;
    uint64_t v135 = v99;
    id v130 = (uint64_t)_NSConcreteStackBlock;
    uint64_t v131 = 1107296256;
    uint64_t v132 = sub_1000666D8;
    uint64_t v133 = &unk_10068DF60;
    uint64_t v102 = _Block_copy(&v130);
    swift_retain();
    uint64_t v103 = v109;
    static DispatchQoS.unspecified.getter();
    *(void *)&v152[0] = _swiftEmptyArrayStorage;
    sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000CBE70((uint64_t *)&unk_100705390);
    sub_1000B921C();
    uint64_t v104 = v111;
    uint64_t v105 = v114;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    dispatch_group_t v106 = v126;
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v102);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v104, v105);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v103, v112);
    return swift_release();
  }
  id v17 = [v16 visibleCells];
  sub_10009E6C4(0, (unint64_t *)&unk_100705CD0);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v162 = (unint64_t)_swiftEmptyArrayStorage;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v19 = result;
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_51;
  }
  uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v19)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    unint64_t v66 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_52:
    swift_bridgeObjectRelease();
    id v13 = v117;
    id v15 = v127;
    goto LABEL_53;
  }
LABEL_4:
  if (v19 >= 1)
  {
    id v123 = v8;
    uint64_t v21 = 0;
    unint64_t v22 = v18 & 0xC000000000000001;
    unint64_t v122 = (unint64_t)&v132;
    unint64_t v124 = v18 & 0xC000000000000001;
    while (1)
    {
      id v23 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v18 + 8 * v21 + 32);
      uint64_t v24 = v23;
      type metadata accessor for DOCItemCollectionCell();
      uint64_t v25 = (void *)swift_dynamicCastClass();
      if (v25)
      {
        uint64_t v26 = (*(uint64_t (**)(void))((swift_isaMask & *v25) + 0x1F8))();
        if (v26) {
          break;
        }
      }

LABEL_7:
      if (v19 == ++v21)
      {
        swift_bridgeObjectRelease();
        unint64_t v66 = v162;
        id v8 = v123;
        goto LABEL_52;
      }
    }
    uint64_t v27 = (char *)v26;
    uint64_t v28 = OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__thumbnail;
    uint64_t v29 = *(void *)(v26 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__thumbnail);
    if (v29)
    {
LABEL_44:
      swift_unknownObjectRetain();

      if (v29)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      goto LABEL_7;
    }
    id v128 = *(uint64_t (**)(uint64_t))(v26
                                             + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__thumbnailLoadingPool);
    if (!v128
      || (uint64_t v30 = (void **)(v26 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node),
          swift_beginAccess(),
          (uint64_t v31 = *v30) == 0)
      || (id v32 = *(void **)&v27[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__traitCollection]) == 0)
    {
LABEL_43:
      uint64_t v29 = *(void *)&v27[v28];
      goto LABEL_44;
    }
    id v125 = v31;
    sub_1000CBE0C((uint64_t)&v27[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits], (uint64_t)v151, (uint64_t *)&unk_100705550);
    sub_1000CBE0C((uint64_t)v151, (uint64_t)v152, (uint64_t *)&unk_100705550);
    if (sub_1000CBEB4((uint64_t *)v152) == 1)
    {
      unint64_t v22 = v124;
      goto LABEL_43;
    }
    dispatch_queue_t v119 = (dispatch_queue_t)OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__isFolder;
    int v33 = v27[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__isFolder];
    swift_retain();
    id v34 = v125;
    swift_unknownObjectRetain();
    *(void *)&long long v120 = v32;
    sub_10009736C(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100097430);
    if (v33 == 2)
    {
      LODWORD(v115) = [v34 isFolder];
      *((unsigned char *)&v119->isa + (void)v27) = v115;
    }
    else
    {
      LODWORD(v115) = v33 & 1;
    }
    unint64_t v22 = v124;
    uint64_t v150 = 0;
    os_log_type_t v35 = v128;
    dispatch_queue_t v119 = (dispatch_queue_t)*((void *)v128 + 4);
    uint64_t v36 = (char *)swift_allocObject();
    id v37 = v125;
    *((void *)v36 + 2) = v35;
    *((void *)v36 + 3) = v37;
    *((void *)v36 + 4) = &v150;
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = sub_100087E2C;
    *(void *)(v38 + 24) = v36;
    unint64_t v116 = (unint64_t)v36;
    uint64_t v134 = sub_1000879B8;
    uint64_t v135 = (void *)v38;
    id v130 = (uint64_t)_NSConcreteStackBlock;
    uint64_t v131 = 1107296256;
    uint64_t v132 = sub_100087990;
    uint64_t v133 = &unk_10068DFD8;
    id v39 = _Block_copy(&v130);
    id v118 = v135;
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v119, v39);
    _Block_release(v39);
    LOBYTE(v39) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v39) {
      goto LABEL_85;
    }
    id v40 = v150;
    if (v150)
    {
      swift_release();
    }
    else
    {
      uint64_t v41 = (void *)v120;
      id v42 = [(id)v120 userInterfaceStyle];
      uint64_t v43 = (uint64_t)v42;
      if ((unint64_t)v42 >= 3)
      {
        type metadata accessor for UIUserInterfaceStyle(0);
        uint64_t v133 = v45;
        id v130 = v43;
        doc_warnUnrecognizedEnumValueEncountered(_:)();
        sub_10009B1B8((uint64_t)&v130);
        uint64_t v44 = 1;
      }
      else
      {
        uint64_t v44 = *((void *)&unk_1005A1150 + (void)v42);
      }
      dispatch_queue_t v119 = (dispatch_queue_t)v44;
      long long v146 = v158;
      long long v147 = v159;
      long long v148 = v160;
      id v149 = v161;
      long long v142 = v154;
      long long v143 = v155;
      long long v144 = v156;
      long long v145 = v157;
      long long v138 = v152[0];
      long long v139 = v152[1];
      long long v140 = v152[2];
      long long v141 = v153;
      if (v115)
      {
        id v46 = v41;
        sub_10009736C(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100097430);
        double v47 = 0.0;
      }
      else
      {
        double v48 = *(double *)&v153;
        if (*(double *)&v155 < *(double *)&v153) {
          double v48 = *(double *)&v155;
        }
        double v49 = floor(v48);
        id v50 = v41;
        sub_10009736C(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100097430);
        double v47 = v49 / 1.41421356;
      }
      long long v51 = v153;
      [v41 displayScale];
      double v53 = v52;
      id v54 = [v125 isFolder];
      id v55 = objc_allocWithZone((Class)DOCThumbnailDescriptor);
      id v56 = [v55 initWithSize:v119 minimumSize:1 scale:1 style:v54 isFolded:v51 isInteractive:v47 isFolder:v53];
      id v118 = v56;
      id v57 = [self sharedGenerator];
      id v40 = [v57 thumbnailForNode:v125 descriptor:v56];

      id v130 = (uint64_t)v40;
      uint64_t v131 = (uint64_t)v119;
      long long v58 = v147;
      uint64_t v59 = (uint64_t (**)(uint64_t))v122;
      *(_OWORD *)(v122 + 128) = v146;
      *((_OWORD *)v59 + 9) = v58;
      *((_OWORD *)v59 + 10) = v148;
      v59[22] = v149;
      long long v60 = v143;
      *((_OWORD *)v59 + 4) = v142;
      *((_OWORD *)v59 + 5) = v60;
      long long v61 = v145;
      *((_OWORD *)v59 + 6) = v144;
      *((_OWORD *)v59 + 7) = v61;
      long long v62 = v139;
      *(_OWORD *)uint64_t v59 = v138;
      *((_OWORD *)v59 + 1) = v62;
      long long v63 = v141;
      *((_OWORD *)v59 + 2) = v140;
      *((_OWORD *)v59 + 3) = v63;
      uint64_t v136 = v120;
      char v137 = v115;
      swift_unknownObjectRetain();
      sub_1000A3084((uint64_t)&v130);
      swift_release();
      swift_unknownObjectRelease();
    }
    id v64 = *(id *)&v27[v28];
    *(void *)&v27[v28] = v40;
    swift_unknownObjectRetain();
    if (v40)
    {
      if (v64 && v40 == v64) {
        goto LABEL_42;
      }
      if (!v64)
      {
        uint64_t v65 = v40;
LABEL_41:
        [v65 addListener:v27];
        goto LABEL_42;
      }
    }
    else if (!v64)
    {
      goto LABEL_42;
    }
    [v64 removeListener:v27];
    uint64_t v65 = *(void **)&v27[v28];
    if (v65) {
      goto LABEL_41;
    }
LABEL_42:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_10009736C(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000973E0);
    swift_release();
    swift_unknownObjectRelease();

    goto LABEL_43;
  }
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

void sub_10011FFE0(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.Tests.getter();
  swift_unknownObjectRetain_n();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    id v15 = a2;
    uint64_t v11 = v10;
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v16 = sub_10009B0E4(0xD00000000000004DLL, 0x80000001005D57F0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v16 = a1;
    swift_unknownObjectRetain();
    sub_1000CBE70(&qword_100707718);
    uint64_t v12 = String.init<A>(describing:)();
    uint64_t v16 = sub_10009B0E4(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s Thumbnail generation request completed for thumbnail: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v15;
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  dispatch_group_leave(a2);
}

uint64_t sub_100120250(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.Tests.getter();
  swift_bridgeObjectRetain_n();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v16 = a2;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v17 = sub_10009B0E4(0xD00000000000004DLL, 0x80000001005D57F0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2048;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v17 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s END waiting for %ld. All items loaded, continuing", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16(v12);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return a2(v14);
  }
}

uint64_t sub_1001204E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  aBlock[4] = sub_10013C344;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_10068D560;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1001207A8(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    ((void (*)(uint64_t))a3)(a2);
  }
  if (a1 && (type metadata accessor for DOCItemCollectionViewController(0), (uint64_t v12 = swift_dynamicCastClass()) != 0))
  {
    uint64_t v13 = (void *)v12;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a3;
    *(void *)(v14 + 24) = a4;
    id v15 = a1;
    swift_retain();
    sub_10011EB24(v13, (uint64_t)sub_10013E4B0, v14);

    return swift_release();
  }
  else
  {
    static Logger.Tests.getter();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "content view controller is nil", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_10013C2E8();
    swift_allocError();
    unsigned char *v20 = 1;
    a3();
    return swift_errorRelease();
  }
}

uint64_t sub_1001209F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v13 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  aBlock[4] = sub_1000D8564;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_10068D808;
  id v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_100120CB0(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, void *a5, void *a6)
{
  if (a2)
  {
    a3(0);
  }
  else if (a1)
  {
    swift_retain();
    id v11 = a1;
    sub_10013856C(v11, a6, a5, (void (*)(void, uint64_t))a3, a4, a1);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void sub_100120D6C(void *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    [a3 failedTest:v16];
  }
  static Logger.Tests.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v25 = a3;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = a1;
    unint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v27 = a6;
    uint64_t v29 = v21;
    uint64_t v24 = v12;
    *(_DWORD *)unint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_10009B0E4(a4, a5, &v29);
    a3 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Starting test %s", v20, 0xCu);
    swift_arrayDestroy();
    a6 = v27;
    swift_slowDealloc();
    a1 = v26;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  NSString v22 = String._bridgeToObjectiveC()();
  [a3 startedTest:v22];

  if (a1)
  {
    swift_bridgeObjectRetain();
    id v23 = a3;
    sub_100138DE0(a1, a6, v23, v23, a4, a5);

    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_100121038(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    [a2 failedTest:v12];
  }
  static Logger.Tests.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v18 = v8;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v19 = a2;
    NSString v16 = (uint8_t *)v15;
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)NSString v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_10009B0E4(a3, a4, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting test %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v19;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  NSString v17 = String._bridgeToObjectiveC()();
  [a2 finishedTest:v17];
}

void sub_1001212B4(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    id v14 = a4;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v29 = v25;
      *(_DWORD *)uint64_t v18 = 136315394;
      int v24 = v17;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_10009B0E4(a2, a3, &v29);
      uint64_t v27 = a5;
      uint64_t v28 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = a2;
      uint64_t v28 = sub_10009B0E4(v20, v21, &v29);
      a5 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v24, "Failed test %s. Timed-out waiting for source identifier: %s. Note that performHandlerAfterLocationForSourceIsLoaded doesn't error out if the source is not found", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    NSString v22 = String._bridgeToObjectiveC()();
    [a5 failedTest:v22];
  }
}

void sub_100121570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, id a7, id a8, id a9, unsigned __int8 a10)
{
  uint64_t v93 = a4;
  id v89 = a9;
  uint64_t v84 = type metadata accessor for IndexPath();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v85 = (uint64_t)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v91 = v17;
  uint64_t v92 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v88 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v77 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v77 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v77 - v27;
  swift_beginAccess();
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t v90 = v26;
  if (a2)
  {
    id v87 = a8;
    static Logger.Tests.getter();
    swift_bridgeObjectRetain();
    unint64_t v86 = a6;
    id v29 = a6;
    id v30 = a7;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    id v31 = v29;
    id v32 = v30;
    swift_errorRetain();
    int v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      os_log_t v80 = v33;
      uint64_t v37 = v36;
      uint64_t v78 = (void *)swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      *(void *)&v94[0] = v81;
      *(_DWORD *)uint64_t v37 = 136315906;
      unint64_t v82 = v23;
      swift_bridgeObjectRetain();
      uint64_t v95 = sub_10009B0E4(v93, a5, (uint64_t *)v94);
      int v79 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v37 + 12) = 2080;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v95 = sub_10009B0E4(v38, v39, (uint64_t *)v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 22) = 2112;
      uint64_t v95 = (uint64_t)v32;
      id v40 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v41 = v78;
      *uint64_t v78 = v32;

      uint64_t v23 = v82;
      *(_WORD *)(v37 + 32) = 2112;
      swift_errorRetain();
      uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v95 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v41[1] = v42;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v43 = v80;
      _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v79, "Failed test %s. performHandlerAfterLocationForSourceIsLoaded: %s. mainViewController: %@ returned error: %@", (uint8_t *)v37, 0x2Au);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v28, v91);
    NSString v44 = String._bridgeToObjectiveC()();
    a8 = v87;
    [v87 failedTest:v44];

    uint64_t v26 = v90;
    a6 = v86;
  }
  id v45 = [a7 effectiveFullBrowser];
  DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)((uint64_t)v89, 1, (id *)a6);

  static Logger.Tests.getter();
  swift_bridgeObjectRetain_n();
  id v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    id v89 = a7;
    double v48 = (uint8_t *)swift_slowAlloc();
    *(void *)&v94[0] = swift_slowAlloc();
    *(_DWORD *)double v48 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v95 = sub_10009B0E4(v93, a5, (uint64_t *)v94);
    uint64_t v49 = v92;
    a7 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Starting test %s", v48, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v50 = *(void (**)(char *, uint64_t))(v49 + 8);
    long long v51 = v90;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    id v50 = *(void (**)(char *, uint64_t))(v92 + 8);
    long long v51 = v26;
  }
  uint64_t v52 = v91;
  v50(v51, v91);
  NSString v53 = String._bridgeToObjectiveC()();
  [a8 startedTest:v53];

  id v54 = (char *)[a7 effectiveBrowserViewController];
  if (!v54) {
    goto LABEL_17;
  }
  id v55 = v54;
  id v56 = (void **)&v54[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess();
  id v57 = *v56;
  if (!v57 || (type metadata accessor for DOCItemCollectionViewController(0), (uint64_t v58 = swift_dynamicCastClass()) == 0))
  {

LABEL_17:
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    unint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      long long v73 = (uint8_t *)swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      uint64_t v90 = (char *)v50;
      *(void *)&v94[0] = v74;
      *(_DWORD *)long long v73 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v96 = sub_10009B0E4(v93, a5, (uint64_t *)v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Failed test %s. mainViewController.effectiveBrowserViewController?.containedItemCollectionViewController was nil", v73, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v90)(v23, v52);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v50(v23, v52);
    }
    NSString v75 = String._bridgeToObjectiveC()();
    [a8 failedTest:v75];

    return;
  }
  uint64_t v59 = (char *)v58;
  id v60 = v57;

  uint64_t v61 = qword_100704F50;
  id v62 = v60;
  if (v61 != -1) {
    swift_once();
  }
  uint64_t v90 = (char *)v50;
  uint64_t v63 = swift_allocObject();
  *(void *)(v63 + 16) = a8;
  id v64 = self;
  id v89 = a8;
  id v65 = [v64 defaultCenter];
  memset(v94, 0, sizeof(v94));
  id v66 = [self mainQueue];
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = sub_10013E0E8;
  *(void *)(v67 + 24) = v63;
  swift_retain();
  NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)();

  swift_release();
  sub_1000CBBA4((uint64_t)v94, (uint64_t *)&unk_100705D60);
  swift_release();
  [v59 loadViewIfNeeded];
  os_log_type_t v68 = *(void **)&v59[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v68)
  {
    id v69 = v68;
    uint64_t v70 = v85;
    sub_10011B8F4(v69, a10, v85);
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v70, v84);
    [v59 collectionView:v69 performPrimaryActionForItemAtIndexPath:isa];
  }
  else
  {
    __break(1u);
  }
}

void sub_1001221D4(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.Tests.getter();
  uint64_t v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  uint64_t v9 = &off_100707000;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = v2;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v12 = *(void *)&v6[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8];
    uint64_t v17 = *(void *)&v6[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName];
    uint64_t v18 = v12;
    swift_bridgeObjectRetain();
    sub_1000CBE70((uint64_t *)&unk_10070BD50);
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v17 = sub_10009B0E4(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v9 = &off_100707000;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received finish gathering notification for %s (should be Browse*Folder). Finishing test", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v16);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  if (*(void *)((char *)v9[202] + (void)v6 + 8))
  {
    swift_bridgeObjectRetain();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v15 = 0;
  }
  [v6 finishedTest:v15 waitForCommit:1 extraResults:0];
}

id sub_100122464(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id result = [a4 tabBarController];
  if (result)
  {
    NSString v15 = result;
    sub_10009E6C4(0, (unint64_t *)&qword_100705380);
    *uint64_t v13 = static OS_dispatch_queue.main.getter();
    (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
    char v16 = _dispatchPreconditionTest(_:)();
    id result = (id)(*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
    if (v16)
    {
      [v15 setSelectedIndex:0];

      id v17 = [self recentDocumentsLocation];
      id v18 = [a4 fullRecentsViewController];
      id v19 = [v18 hierarchyController];

      uint64_t v20 = (void *)swift_allocObject();
      v20[2] = v17;
      v20[3] = a4;
      void v20[4] = v5;
      v20[5] = a3;
      v20[6] = a1;
      v20[7] = a2;
      uint64_t v21 = v17;
      id v22 = a4;
      id v23 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000BCD84(v21, v17, 0, 1, 0, (void (*)(void))sub_10013CD5C, (uint64_t)v20);

      return (id)swift_release();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001226C8(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v89 = a5;
  unint64_t v90 = a6;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v91 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v86 = (char *)&v82 - v15;
  __chkstk_darwin(v14);
  id v17 = (char *)&v82 - v16;
  static Logger.Tests.getter();
  id v18 = a1;
  id v19 = a2;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  int v22 = v21;
  BOOL v23 = os_log_type_enabled(v20, v21);
  id v87 = a3;
  uint64_t v85 = a4;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc();
    id v88 = v19;
    uint64_t v25 = v24;
    uint64_t v26 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 138412546;
    uint64_t v84 = v11;
    uint64_t v92 = v18;
    uint64_t v27 = v18;
    LODWORD(v83) = v22;
    uint64_t v28 = v10;
    id v29 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v26 = v18;

    uint64_t v10 = v28;
    *(_WORD *)(v25 + 12) = 2112;
    id v30 = [v88 fullRecentsViewController];
    uint64_t v92 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v26[1] = v30;
    uint64_t v11 = v84;

    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v83, "did show %@ on %@", (uint8_t *)v25, 0x16u);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v19 = v88;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v20 = v18;
  }
  id v31 = v91;

  os_log_type_t v34 = *(void (**)(void, void))(v11 + 8);
  uint64_t v32 = v11 + 8;
  int v33 = v34;
  v34(v17, v10);
  int v35 = (char *)[v19 effectiveBrowserViewController];
  if (!v35) {
    goto LABEL_13;
  }
  uint64_t v36 = v35;
  uint64_t v37 = (id *)&v35[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess();
  id v38 = *v37;
  id v39 = *v37;

  if (!v38) {
    goto LABEL_13;
  }
  type metadata accessor for DOCItemCollectionViewController(0);
  uint64_t v40 = swift_dynamicCastClass();
  if (v40)
  {
    uint64_t v41 = (void *)v40;
    id v88 = v19;
    uint64_t v42 = v33;
    id v43 = [*(id *)(v40 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration) identifier];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;
    if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v46 == v47)
    {

      swift_bridgeObjectRelease_n();
      int v33 = v42;
    }
    else
    {
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v31 = v91;
      int v33 = v42;
      id v19 = v88;
      if ((v49 & 1) == 0) {
        goto LABEL_12;
      }
    }
    id v66 = v86;
    static Logger.Tests.getter();
    id v67 = v39;
    os_log_type_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = swift_slowAlloc();
      uint64_t v91 = (char *)v10;
      unint64_t v71 = (uint8_t *)v70;
      uint64_t v83 = swift_slowAlloc();
      uint64_t v92 = v83;
      *(_DWORD *)unint64_t v71 = 136315138;
      unint64_t v82 = v71 + 4;
      id v72 = v67;
      uint64_t v84 = v32;
      id v73 = v72;
      id v74 = [v41 description];
      id v88 = v33;
      id v75 = v74;
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v78 = v77;

      uint64_t v94 = sub_10009B0E4(v76, v78, (uint64_t *)&v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "trying to run scroll test on %s", v71, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, char *))v88)(v86, v91);
    }
    else
    {

      ((void (*)(char *, uint64_t))v33)(v66, v10);
    }
    unint64_t v79 = sub_10013761C(v85);
    int v80 = v79;
    unint64_t v81 = HIDWORD(v79);
    NSString v65 = v67;
    sub_100135DB0(v89, v90, v41, v80, v81, v87);

    goto LABEL_20;
  }
LABEL_12:

LABEL_13:
  uint64_t v50 = v10;
  static Logger.Tests.getter();
  id v51 = v19;
  unint64_t v52 = v90;
  swift_bridgeObjectRetain_n();
  id v53 = v51;
  id v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    id v88 = v33;
    uint64_t v56 = swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v92 = sub_10009B0E4(v89, v52, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v56 + 12) = 2080;
    id v57 = (char *)[v53 effectiveBrowserViewController];
    if (v57)
    {
      uint64_t v58 = v57;
      uint64_t v59 = (void **)&v57[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess();
      id v60 = *v59;
      id v61 = v60;
    }
    else
    {
      id v60 = 0;
    }
    uint64_t v93 = (uint64_t)v60;
    sub_1000CBE70((uint64_t *)&unk_100707700);
    uint64_t v63 = String.init<A>(describing:)();
    uint64_t v93 = sub_10009B0E4(v63, v64, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failed test %s: %s could not switch to Recents", (uint8_t *)v56, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v88)(v91, v50);
    id v62 = v87;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    ((void (*)(char *, uint64_t))v33)(v31, v50);
    id v62 = v87;
  }
  NSString v65 = String._bridgeToObjectiveC()();
  [v62 failedTest:v65];
LABEL_20:
}

uint64_t sub_100122EEC(void *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(void, void), uint64_t a4)
{
  id v73 = a2;
  id v74 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v71 = *(void *)(v6 - 8);
  uint64_t v72 = v6;
  __chkstk_darwin(v6);
  uint64_t v67 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  unint64_t v64 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v65 = type metadata accessor for DispatchQoS();
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  id v62 = &v54[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v59 = type metadata accessor for DispatchTimeInterval();
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  id v57 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v68 = type metadata accessor for DispatchTime();
  uint64_t v61 = *(void *)(v68 - 8);
  uint64_t v10 = __chkstk_darwin(v68);
  uint64_t v56 = &v54[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  id v60 = &v54[-v12];
  uint64_t v13 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  os_log_type_t v55 = &v54[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = &v54[-v17];
  uint64_t v19 = __chkstk_darwin(v16);
  os_log_type_t v21 = &v54[-v20];
  __chkstk_darwin(v19);
  BOOL v23 = &v54[-v22];
  uint64_t v24 = type metadata accessor for IndexPath();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  v26(v23, 1, 1, v24);
  id v69 = a1;
  uint64_t v70 = a4;
  sub_10011B8F4(a1, a4, (uint64_t)v21);
  sub_1000CBBA4((uint64_t)v23, (uint64_t *)&unk_1007069A0);
  v26(v21, 0, 1, v24);
  sub_1000CBE0C((uint64_t)v21, (uint64_t)v23, (uint64_t *)&unk_1007069A0);
  uint64_t v27 = (uint64_t)v23;
  id v29 = v73;
  uint64_t v28 = v74;
  sub_1000CBC00(v27, (uint64_t)v18, (uint64_t *)&unk_1007069A0);
  int v30 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48))(v18, 1, v24);
  sub_1000CBBA4((uint64_t)v18, (uint64_t *)&unk_1007069A0);
  if (v30 == 1)
  {
    id v31 = v69;
    [v69 bounds];
    CGFloat v32 = CGRectGetHeight(v76) * 0.75;
    [v31 contentOffset];
    double v34 = v33;
    CGFloat v35 = v32 + v33;
    [v31 contentSize];
    if (v35 >= v36)
    {
      uint64_t v51 = (uint64_t)v55;
      v26(v55, 1, 1, v24);
      sub_10013C488();
      uint64_t v52 = swift_allocError();
      v29(v51, v52);
      swift_errorRelease();
      sub_1000CBBA4(v51, (uint64_t *)&unk_1007069A0);
    }
    else
    {
      [v31 bounds];
      [v31 setContentOffset:CGPointMake(0.0, v34.size.height * 0.75 + v77.size.height)];
      [v31 reloadData];
      sub_10009E6C4(0, (unint64_t *)&qword_100705380);
      uint64_t v37 = (void *)static OS_dispatch_queue.main.getter();
      id v38 = v56;
      static DispatchTime.now()();
      id v39 = v57;
      *id v57 = 1;
      uint64_t v40 = v58;
      uint64_t v41 = v59;
      (*(void (**)(void *, void, uint64_t))(v58 + 104))(v39, enum case for DispatchTimeInterval.seconds(_:), v59);
      uint64_t v42 = v60;
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v40 + 8))(v39, v41);
      id v74 = *(void (**)(void, void))(v61 + 8);
      v74(v38, v68);
      uint64_t v43 = swift_allocObject();
      *(unsigned char *)(v43 + 16) = v70;
      *(void *)(v43 + 24) = v31;
      *(void *)(v43 + 32) = v29;
      *(void *)(v43 + 40) = v28;
      aBlock[4] = sub_10013C430;
      aBlock[5] = v43;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1000666D8;
      aBlock[3] = &unk_10068D7B8;
      uint64_t v44 = v27;
      uint64_t v45 = _Block_copy(aBlock);
      id v46 = v31;
      swift_retain();
      swift_release();
      uint64_t v47 = v62;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000CBE70((uint64_t *)&unk_100705390);
      sub_1000B921C();
      double v48 = v64;
      uint64_t v49 = v67;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      uint64_t v50 = v45;
      uint64_t v27 = v44;
      _Block_release(v50);

      (*(void (**)(unsigned char *, uint64_t))(v66 + 8))(v48, v49);
      (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v47, v65);
      v74(v42, v68);
    }
  }
  else
  {
    v29(v27, 0);
  }
  return sub_1000CBBA4(v27, (uint64_t *)&unk_1007069A0);
}

uint64_t sub_100123A34(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v16;
  uint64_t v48 = v13;
  if (a1)
  {
    if (a1 != 2)
    {
      type metadata accessor for DOCTab(0);
      v51[3] = v39;
      v51[0] = a1;
      uint64_t result = doc_fatalErrorUnrecognizedEnumValueEncountered(_:)();
      __break(1u);
      return result;
    }
    uint64_t v49 = 0;
  }
  else
  {
    uint64_t v49 = 2;
  }
  static Logger.Tests.getter();
  swift_bridgeObjectRetain_n();
  id v17 = a4;
  id v18 = a5;
  id v19 = v17;
  id v20 = v18;
  os_log_type_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v46 = a2;
    uint64_t v25 = v24;
    uint64_t v26 = (void *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    v51[0] = v43;
    *(_DWORD *)uint64_t v25 = 136315650;
    uint64_t v44 = a1;
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_10009B0E4(v46, a3, v51);
    os_log_t v42 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 2112;
    int v41 = v23;
    uint64_t v50 = (uint64_t)v19;
    id v27 = v19;
    uint64_t v45 = v6;
    id v28 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v26 = v19;

    *(_WORD *)(v25 + 22) = 2080;
    v40[1] = v25 + 24;
    id v29 = v20;
    id v30 = [v29 description];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    a1 = v44;
    uint64_t v50 = sub_10009B0E4(v31, v33, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v6 = v45;
    swift_bridgeObjectRelease();
    os_log_t v34 = v42;
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v41, "%s %@ %s", (uint8_t *)v25, 0x20u);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v46;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v48);
  CGFloat v35 = (void *)swift_allocObject();
  v35[2] = v6;
  v35[3] = a2;
  v35[4] = a3;
  v35[5] = v20;
  v35[6] = a1;
  swift_bridgeObjectRetain();
  id v36 = v20;
  id v37 = v6;
  sub_100124404(v49, 2, (uint64_t)sub_10013CCCC, (uint64_t)v35);
  return swift_release();
}

uint64_t sub_100123E28(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v22 = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  void v16[6] = v22;
  aBlock[4] = sub_10013CCEC;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_10068DD80;
  id v17 = _Block_copy(aBlock);
  id v18 = a1;
  swift_bridgeObjectRetain();
  id v19 = a4;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v23);
}

void sub_100124110(char *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v23[0] = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (void *)((char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23[1] = a2;
  _OWORD v23[2] = a3;
  NSString v17 = String._bridgeToObjectiveC()();
  [a1 startedTest:v17];

  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  *uint64_t v16 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a5 < 0)
  {
LABEL_9:
    __break(1u);
    return;
  }
  [a4 setSelectedIndex:a5];
  id v18 = (uint64_t *)&a1[OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs];
  swift_beginAccess();
  if (sub_100109124(a5, *v18))
  {
    static Logger.Tests.getter();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "tab already in loadedTabs, finishing test after commit", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, void))(v10 + 8))(v12, v23[0]);
    NSString v22 = String._bridgeToObjectiveC()();
    [a1 finishedTest:v22 waitForCommit:1 extraResults:0];
  }
}

uint64_t sub_100124404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v54 = v8;
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char **)((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v46 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v46 - 8);
  uint64_t v15 = __chkstk_darwin(v46);
  NSString v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v19 = (char *)&v45 - v18;
  os_log_type_t v20 = v4;
  uint64_t v21 = (uint64_t *)&v4[OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs];
  swift_beginAccess();
  uint64_t v22 = a1;
  LOBYTE(a1) = sub_100109124(a1, *v21);
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v49 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  uint64_t v45 = v19;
  if (a1)
  {
    *uint64_t v13 = v47;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v24 = v46;
    v23(v17, v46);
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v50;
    *(void *)(v25 + 16) = v48;
    *(void *)(v25 + 24) = v26;
    uint64_t v61 = sub_1000D8564;
    id v62 = (void *)v25;
    aBlock = _NSConcreteStackBlock;
    uint64_t v58 = 1107296256;
    uint64_t v59 = sub_1000666D8;
    id v60 = &unk_10068DD08;
    id v27 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v28 = v51;
    static DispatchQoS.unspecified.getter();
    aBlock = (void **)_swiftEmptyArrayStorage;
    sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000CBE70((uint64_t *)&unk_100705390);
    sub_1000B921C();
    id v29 = v52;
    uint64_t v30 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v31 = v45;
    unint64_t v32 = (void *)v49;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v29, v30);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v54);
    return ((uint64_t (*)(char *, uint64_t))v23)(v31, v24);
  }
  else
  {
    + infix(_:_:)();
    os_log_t v34 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v35 = v46;
    v34(v17, v46);
    id v36 = (void *)swift_allocObject();
    void v36[2] = v20;
    v36[3] = v22;
    uint64_t v37 = v48;
    v36[4] = v47;
    v36[5] = v37;
    v36[6] = v50;
    uint64_t v61 = sub_10013CC94;
    id v62 = v36;
    aBlock = _NSConcreteStackBlock;
    uint64_t v58 = 1107296256;
    uint64_t v59 = sub_1000666D8;
    id v60 = &unk_10068DCB8;
    id v38 = _Block_copy(&aBlock);
    swift_retain();
    id v39 = v20;
    swift_release();
    uint64_t v40 = v51;
    static DispatchQoS.unspecified.getter();
    aBlock = (void **)_swiftEmptyArrayStorage;
    sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000CBE70((uint64_t *)&unk_100705390);
    sub_1000B921C();
    int v41 = v52;
    uint64_t v42 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v43 = v45;
    uint64_t v44 = (void *)v49;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v41, v42);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v54);
    return ((uint64_t (*)(char *, uint64_t))v34)(v43, v35);
  }
}

void sub_100124AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v102 = a8;
  int v101 = a7;
  unint64_t v111 = a5;
  uint64_t v13 = sub_1000CBE70(&qword_1007076B0);
  __chkstk_darwin(v13 - 8);
  uint64_t v103 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for URL();
  uint64_t v105 = *(void *)(v106 - 8);
  uint64_t v15 = __chkstk_darwin(v106);
  uint64_t v100 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = v16;
  __chkstk_darwin(v15);
  uint64_t v104 = (char *)&v97 - v17;
  uint64_t v18 = type metadata accessor for Logger();
  unint64_t v109 = *(void (***)(void, void))(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v108 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v97 - v21;
  uint64_t v23 = a3 + 16;
  swift_beginAccess();
  sub_1000CBC00(v23, (uint64_t)&aBlock, (uint64_t *)&unk_100705D60);
  uint64_t v24 = *((void *)&v116 + 1);
  sub_1000CBBA4((uint64_t)&aBlock, (uint64_t *)&unk_100705D60);
  uint64_t v112 = a4;
  id v110 = (id)v18;
  if (v24)
  {
    uint64_t v25 = a6;
    uint64_t v26 = a1;
    swift_beginAccess();
    sub_1000CBC00(v23, (uint64_t)&aBlock, (uint64_t *)&unk_100705D60);
    if (!*((void *)&v116 + 1))
    {
LABEL_55:
      __break(1u);
      return;
    }
    id v27 = self;
    uint64_t v28 = *((void *)&v116 + 1);
    id v29 = sub_1000A6B78(&aBlock, *((uint64_t *)&v116 + 1));
    uint64_t v30 = *(void *)(v28 - 8);
    __chkstk_darwin(v29);
    unint64_t v32 = (char *)&v97 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v30 + 16))(v32);
    uint64_t v33 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v28);
    sub_10009B1B8((uint64_t)&aBlock);
    [v27 endMonitoringProviderDomainChanges:v33];
    swift_unknownObjectRelease();
    long long aBlock = 0u;
    long long v116 = 0u;
    swift_beginAccess();
    sub_1000D225C((uint64_t)&aBlock, v23);
    a1 = v26;
    a6 = v25;
    uint64_t v18 = (uint64_t)v110;
  }
  if (!a1)
  {
    static Logger.Tests.getter();
    unint64_t v52 = v111;
    swift_bridgeObjectRetain_n();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v119 = sub_10009B0E4(v112, v52, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed test %s. domainDictionary was nil", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    ((void (**)(char *, uint64_t))v109)[1](v22, v18);
    NSString v73 = String._bridgeToObjectiveC()();
    [a6 failedTest:v73];

    return;
  }
  uint64_t v107 = a6;
  uint64_t v98 = a9;
  uint64_t v34 = *(void *)(a1 + 64);
  uint64_t v113 = (void *)(a1 + 64);
  uint64_t v35 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & v34;
  id v114 = (id)((unint64_t)(v35 + 63) >> 6);
  swift_bridgeObjectRetain_n();
  uint64_t v38 = 0;
  if (!v37) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v39 = __clz(__rbit64(v37));
  v37 &= v37 - 1;
  for (unint64_t i = v39 | (v38 << 6); ; unint64_t i = __clz(__rbit64(v42)) + (v38 << 6))
  {
    uint64_t v44 = a1;
    uint64_t v45 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    *(void *)&long long aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&aBlock + 1) = v46;
    id v47 = v45;
    uint64_t v48 = static DOCDocumentSourceIdentifier.iCloudCurrent.getter();
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v51 = v50;

    uint64_t v119 = v49;
    uint64_t v120 = v51;
    sub_10013BF8C();
    sub_10013BFE0();
    LOBYTE(v48) = BidirectionalCollection<>.starts<A>(with:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v48)
    {
      a1 = v44;
      goto LABEL_34;
    }

    a1 = v44;
    if (v37) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v41 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v41 >= (uint64_t)v114) {
      goto LABEL_33;
    }
    unint64_t v42 = v113[v41];
    ++v38;
    if (!v42)
    {
      uint64_t v38 = v41 + 1;
      if (v41 + 1 >= (uint64_t)v114) {
        goto LABEL_33;
      }
      unint64_t v42 = v113[v38];
      if (!v42)
      {
        uint64_t v38 = v41 + 2;
        if (v41 + 2 >= (uint64_t)v114) {
          goto LABEL_33;
        }
        unint64_t v42 = v113[v38];
        if (!v42)
        {
          uint64_t v38 = v41 + 3;
          if (v41 + 3 >= (uint64_t)v114) {
            goto LABEL_33;
          }
          unint64_t v42 = v113[v38];
          if (!v42)
          {
            uint64_t v38 = v41 + 4;
            if (v41 + 4 >= (uint64_t)v114) {
              goto LABEL_33;
            }
            unint64_t v42 = v113[v38];
            if (!v42) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v37 = (v42 - 1) & v42;
  }
  uint64_t v43 = v41 + 5;
  if (v43 < (uint64_t)v114)
  {
    unint64_t v42 = v113[v43];
    if (!v42)
    {
      while (1)
      {
        uint64_t v38 = v43 + 1;
        if (__OFADD__(v43, 1)) {
          goto LABEL_54;
        }
        if (v38 >= (uint64_t)v114) {
          goto LABEL_33;
        }
        unint64_t v42 = v113[v38];
        ++v43;
        if (v42) {
          goto LABEL_26;
        }
      }
    }
    uint64_t v38 = v43;
    goto LABEL_26;
  }
LABEL_33:
  uint64_t v45 = 0;
LABEL_34:
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v57 = v111;
  uint64_t v58 = v108;
  if (v45 && *(void *)(a1 + 16))
  {
    id v59 = v45;
    uint64_t v60 = sub_1000A54AC(v59);
    if ((v61 & 1) != 0 && *(void *)(a1 + 16))
    {
      id v62 = *(id *)(*(void *)(a1 + 56) + 8 * v60);
      uint64_t v63 = v56;
      uint64_t v64 = sub_1000A54AC(v63);
      if (v65)
      {
        id v66 = *(id *)(*(void *)(a1 + 56) + 8 * v64);
        uint64_t v113 = v63;

        id v114 = v62;
        id v67 = [v62 storageURLs];
        uint64_t v68 = v106;
        uint64_t v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(v69 + 16))
        {
          uint64_t v70 = v105;
          uint64_t v71 = (uint64_t)v103;
          (*(void (**)(char *, unint64_t, uint64_t))(v105 + 16))(v103, v69 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80)), v68);
          uint64_t v72 = 0;
        }
        else
        {
          uint64_t v72 = 1;
          uint64_t v70 = v105;
          uint64_t v71 = (uint64_t)v103;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v71, v72, 1, v68);
        swift_bridgeObjectRelease();
        int v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v71, 1, v68);
        uint64_t v58 = v108;
        if (v81 != 1)
        {
          id v110 = v66;
          unint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 32);
          uint64_t v83 = v104;
          v82(v104, v71, v68);
          uint64_t v108 = (char *)[self defaultManager];
          uint64_t v84 = v100;
          (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v100, v83, v68);
          unint64_t v85 = (*(unsigned __int8 *)(v70 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
          unint64_t v109 = (void (**)(void, void))v59;
          unint64_t v86 = v57;
          unint64_t v87 = (v99 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = swift_allocObject();
          *(void *)(v88 + 16) = v112;
          *(void *)(v88 + 24) = v86;
          uint64_t v89 = v107;
          *(void *)(v88 + 32) = v107;
          *(unsigned char *)(v88 + 40) = v101;
          v82((char *)(v88 + v85), (uint64_t)v84, v68);
          unint64_t v90 = (void *)(v88 + v87);
          uint64_t v91 = v98;
          *unint64_t v90 = v102;
          v90[1] = v91;
          uint64_t v117 = sub_10013C128;
          uint64_t v118 = v88;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v116 = sub_10000CAE4;
          *((void *)&v116 + 1) = &unk_10068D3A8;
          uint64_t v92 = _Block_copy(&aBlock);
          swift_bridgeObjectRetain();
          id v93 = v89;
          swift_retain();
          swift_release();
          id v94 = v108;
          uint64_t v95 = v110;
          [v108 doc_fetchRootItemForProviderDomain:v110 completionHandler:v92];

          _Block_release(v92);
          id v96 = v109;

          (*(void (**)(char *, uint64_t))(v70 + 8))(v104, v68);
          return;
        }

        sub_1000CBBA4(v71, &qword_1007076B0);
      }
      else
      {
      }
    }
    else
    {
    }
  }
  static Logger.Tests.getter();
  swift_bridgeObjectRetain_n();
  id v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v74, v75))
  {
    CGRect v76 = (uint8_t *)swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    id v114 = v56;
    *(void *)&long long aBlock = v77;
    *(_DWORD *)CGRect v76 = 136315138;
    unint64_t v78 = v111;
    swift_bridgeObjectRetain();
    uint64_t v119 = sub_10009B0E4(v112, v78, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed test %s. could not get cloudURL", v76, 0xCu);
    swift_arrayDestroy();
    NSString v56 = v114;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  ((void (**)(char *, id))v109)[1](v58, v110);
  unint64_t v79 = v107;
  NSString v80 = String._bridgeToObjectiveC()();
  [v79 failedTest:v80];
}

void sub_1001257B8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v50 = (uint8_t *)a8;
  id v51 = a9;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v47 = v15;
  uint64_t v48 = v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    unint64_t v46 = a4;
    uint64_t v23 = *(void **)&a5[OBJC_IVAR____TtC5Files14DOCApplication_localDomainRootForQLTests];
    *(void *)&a5[OBJC_IVAR____TtC5Files14DOCApplication_localDomainRootForQLTests] = a1;
    id v49 = a1;

    switch((char)a6)
    {
      case 8:
        swift_bridgeObjectRelease();
        goto LABEL_8;
      default:
        uint64_t v28 = a5;
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v29)
        {
LABEL_8:
          sub_10012644C(a3, v46, v49, a7, a6, (uint64_t)v50, (uint64_t)v51);
          uint64_t v30 = v49;
        }
        else
        {
          sub_1000CBE70((uint64_t *)&unk_1007087F0);
          uint64_t v31 = swift_allocObject();
          *(_OWORD *)(v31 + 16) = xmmword_1005A0030;
          URL.appendingPathComponent(_:)();
          URL.appendingPathComponent(_:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v47);
          unint64_t v32 = self;
          id v33 = v49;
          id v34 = [v32 shared];
          id v35 = objc_allocWithZone((Class)type metadata accessor for DOCCopyOperation());
          uint64_t v36 = DOCCopyOperation.init(urls:destinationFolder:undoManager:)(v31, v33, v34);
          unint64_t v37 = (void *)swift_allocObject();
          uint64_t v38 = v46;
          v37[2] = a3;
          void v37[3] = v38;
          uint64_t v39 = (uint64_t)v50;
          id v40 = v51;
          v37[4] = v28;
          v37[5] = v39;
          v37[6] = v40;
          aBlock[4] = (uint64_t)sub_10013C1E8;
          aBlock[5] = (uint64_t)v37;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          void aBlock[2] = (uint64_t)sub_1001950CC;
          aBlock[3] = (uint64_t)&unk_10068D3F8;
          uint64_t v41 = _Block_copy(aBlock);
          swift_bridgeObjectRetain();
          unint64_t v42 = v36;
          id v43 = v28;
          swift_retain();
          swift_release();
          [v42 setActionCompletionBlock:v41];
          _Block_release(v41);

          id v44 = [self defaultManager];
          [v44 scheduleAction:v42];
        }
        break;
    }
  }
  else
  {
    id v51 = a5;
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v50 = v26 + 4;
      swift_bridgeObjectRetain();
      void aBlock[6] = sub_10009B0E4(a3, a4, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed test %s. FPItem was nil", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    NSString v27 = String._bridgeToObjectiveC()();
    [v51 failedTest:v27];
  }
}

void sub_100125FDC(void *a1, uint64_t a2, unint64_t a3, void *a4, void (*a5)(uint64_t))
{
  id v27 = a4;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_5;
  }
  uint64_t v29 = (uint64_t)a1;
  swift_errorRetain();
  sub_1000CBE70((uint64_t *)&unk_1007076D0);
  sub_10009E6C4(0, (unint64_t *)&qword_100707ED0);
  if (!swift_dynamicCast()) {
    goto LABEL_6;
  }
  id v14 = v28;
  uint64_t v15 = v10;
  uint64_t v16 = (char *)[v28 code];

  BOOL v17 = v16 + 1001 == 0;
  uint64_t v10 = v15;
  if (v17)
  {
LABEL_5:
    a5(v11);
  }
  else
  {
LABEL_6:
    static Logger.Tests.getter();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v29 = v25;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v26 = a2;
      swift_bridgeObjectRetain();
      id v28 = (id)sub_10009B0E4(v26, a3, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      id v28 = a1;
      swift_errorRetain();
      sub_1000CBE70((uint64_t *)&unk_1007076E0);
      uint64_t v21 = String.init<A>(describing:)();
      uint64_t v24 = v9;
      id v28 = (id)sub_10009B0E4(v21, v22, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed test %s. Copy operation error: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v24);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
    NSString v23 = String._bridgeToObjectiveC()();
    [v27 failedTest:v23];
  }
}

uint64_t sub_10012635C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    type metadata accessor for FPProviderDomainID(0);
    sub_10009E6C4(0, (unint64_t *)&unk_1007076A0);
    sub_10013C370(&qword_100705B18, type metadata accessor for FPProviderDomainID);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_10012644C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v27 = a4;
  uint64_t v28 = a1;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  id v14 = self;
  id v15 = a3;
  id v16 = [v14 shared];
  id v17 = objc_allocWithZone((Class)type metadata accessor for DOCCreateFolderOperation());
  uint64_t v18 = (void *)DOCCreateFolderOperation.init(parentItem:folderName:undoManager:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v11);
  unint64_t v19 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v28;
  *((void *)v20 + 3) = a2;
  *((void *)v20 + 4) = v8;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v20[v19], (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  uint64_t v21 = &v20[(v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v22 = v30;
  *(void *)uint64_t v21 = v29;
  *((void *)v21 + 1) = v22;
  aBlock[4] = sub_10013C968;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10000CAE4;
  aBlock[3] = &unk_10068DBC8;
  NSString v23 = _Block_copy(aBlock);
  id v24 = v18;
  swift_bridgeObjectRetain();
  id v25 = v8;
  swift_retain();
  swift_release();
  [v24 setCreateFolderCompletionBlock:v23];
  _Block_release(v23);

  id v26 = [self defaultManager];
  [v26 scheduleAction:v24];
}

void sub_100126850(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, uint8_t *a7, uint8_t *a8)
{
  uint64_t v47 = a7;
  id v48 = a5;
  uint64_t v49 = a3;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  id v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_1000CBE70((uint64_t *)&unk_1007087F0);
    unint64_t v46 = a8;
    uint64_t v20 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v45 = v20 | 7;
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1005A0030;
    unint64_t v44 = a4;
    id v22 = a1;
    URL.appendingPathComponent(_:)();
    URL.appendingPathComponent(_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))((char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
    NSString v23 = self;
    id v24 = v22;
    id v25 = [v23 shared];
    id v26 = objc_allocWithZone((Class)type metadata accessor for DOCCopyOperation());
    id v43 = DOCCopyOperation.init(urls:destinationFolder:undoManager:)(v21, v24, v25);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a6, v12);
    uint64_t v27 = (v20 + 40) & ~v20;
    unint64_t v28 = (v14 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = (char *)swift_allocObject();
    id v30 = v48;
    unint64_t v31 = v44;
    *((void *)v29 + 2) = v49;
    *((void *)v29 + 3) = v31;
    *((void *)v29 + 4) = v30;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v29[v27], v15, v12);
    *(void *)&v29[v28] = v24;
    unint64_t v32 = (uint8_t **)&v29[(v28 + 15) & 0xFFFFFFFFFFFFFFF8];
    id v33 = v46;
    *unint64_t v32 = v47;
    v32[1] = v33;
    aBlock[4] = (uint64_t)sub_10013CB24;
    aBlock[5] = (uint64_t)v29;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_1001950CC;
    aBlock[3] = (uint64_t)&unk_10068DC18;
    id v34 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    id v35 = v24;
    uint64_t v36 = v43;
    id v37 = v30;
    swift_retain();
    swift_release();
    [v36 setActionCompletionBlock:v34];
    _Block_release(v34);

    NSString v38 = [self defaultManager];
    [v38 scheduleAction:v36];
  }
  else
  {
    uint64_t v39 = v17;
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    id v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v42 = 136315138;
      uint64_t v47 = v42 + 4;
      swift_bridgeObjectRetain();
      void aBlock[6] = sub_10009B0E4(v49, a4, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed setup %s. Folder item nil", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v16);
    NSString v38 = String._bridgeToObjectiveC()();
    [v48 failedTest:v38];
  }
}

void sub_100126DD8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v41 = a7;
  unint64_t v42 = a8;
  id v40 = a6;
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v19 = a2;
    unint64_t v42 = a4;
    static Logger.Tests.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      aBlock[0] = v41;
      *(_DWORD *)uint64_t v22 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_10009B0E4(v19, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v44 = a1;
      swift_errorRetain();
      sub_1000CBE70((uint64_t *)&unk_1007076E0);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v44 = sub_10009B0E4(v23, v24, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed setup %s copyPDFOperation error: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v43);
    NSString v38 = v42;
    NSString v37 = String._bridgeToObjectiveC()();
    [v38 failedTest:v37];
  }
  else
  {
    sub_1000CBE70((uint64_t *)&unk_1007087F0);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1005A0030;
    URL.appendingPathComponent(_:)();
    URL.appendingPathComponent(_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    id v26 = self;
    id v27 = v40;
    id v28 = [v26 shared];
    id v29 = objc_allocWithZone((Class)type metadata accessor for DOCCopyOperation());
    id v30 = DOCCopyOperation.init(urls:destinationFolder:undoManager:)(v25, v27, v28);
    unint64_t v31 = (void *)swift_allocObject();
    v31[2] = a2;
    v31[3] = a3;
    uint64_t v32 = v41;
    id v33 = v42;
    v31[4] = a4;
    v31[5] = v32;
    v31[6] = v33;
    aBlock[4] = (uint64_t)sub_10013CC24;
    aBlock[5] = (uint64_t)v31;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_1001950CC;
    aBlock[3] = (uint64_t)&unk_10068DC68;
    id v34 = _Block_copy(aBlock);
    id v35 = v30;
    swift_bridgeObjectRetain();
    id v36 = a4;
    swift_retain();
    swift_release();
    [v35 setActionCompletionBlock:v34];
    _Block_release(v34);

    NSString v37 = [self defaultManager];
    [v37 scheduleAction:v35];
  }
}

void sub_100127338(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void (*a5)(uint64_t))
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.Tests.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v25 = v22;
      *(_DWORD *)uint64_t v17 = 136315394;
      uint64_t v23 = v10;
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_10009B0E4(a2, a3, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2080;
      v21[1] = v17 + 14;
      uint64_t v24 = a1;
      swift_errorRetain();
      sub_1000CBE70((uint64_t *)&unk_1007076E0);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v24 = sub_10009B0E4(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed setup %s. copyImageOperation error: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v23);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
    NSString v20 = String._bridgeToObjectiveC()();
    [a4 failedTest:v20];
  }
  else
  {
    a5(v12);
  }
}

uint64_t sub_100127638(uint64_t a1, unint64_t a2)
{
  uint64_t v45 = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v44 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v43 - v7;
  uint64_t v9 = sub_1000CBE70(&qword_1007076B0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v43 - v13;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  os_log_type_t v21 = (char *)v43 - v20;
  uint64_t v22 = *(void **)(v2 + OBJC_IVAR____TtC5Files14DOCApplication_localDomainRootForQLTests);
  if (!v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
LABEL_7:
    sub_1000CBBA4((uint64_t)v14, &qword_1007076B0);
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (uint8_t *)swift_slowAlloc();
      id v49 = (id)swift_slowAlloc();
      *(_DWORD *)id v27 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_10009B0E4(v45, a2, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed teardown, QuickLook test files probably left in local files %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v8, v47);
  }
  id v23 = [v22 fileURL];
  if (v23)
  {
    uint64_t v24 = v23;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v12, 1, 1, v15);
  }
  sub_1000CBE0C((uint64_t)v12, (uint64_t)v14, &qword_1007076B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v14, v15);
  id v29 = [self defaultManager];
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v30);
  uint64_t v32 = v31;
  id v33 = *(void (**)(char *, uint64_t))(v16 + 8);
  v33(v19, v15);
  id v49 = 0;
  unsigned int v34 = [v29 removeItemAtURL:v32 error:&v49];

  id v35 = v49;
  if (!v34)
  {
    id v36 = v35;
    uint64_t v37 = _convertNSErrorToError(_:)();

    swift_willThrow();
    NSString v38 = v44;
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      unint64_t v42 = (void *)swift_slowAlloc();
      v43[1] = v37;
      id v49 = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      v43[0] = v41 + 4;
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_10009B0E4(v45, a2, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed teardown, QuickLook test files probably left in local files %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v46 + 8))(v44, v47);
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v47);
    }
  }
  return ((uint64_t (*)(char *, uint64_t))v33)(v21, v15);
}

uint64_t sub_100127E20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  return sub_1001296C8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10068DA98, (uint64_t)sub_10013C6A4);
}

uint64_t sub_100127E5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  void v15[4] = a1;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  *(unsigned char *)(v16 + 40) = a8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  *(void *)(v17 + 32) = a1;
  *(void *)(v17 + 40) = a6;
  *(void *)(v17 + 48) = a7;
  *(void *)(v17 + 56) = a5;
  *(void *)(v17 + 64) = sub_10013C6F4;
  *(void *)(v17 + 72) = v15;
  *(void *)(v17 + 80) = sub_10013C71C;
  *(void *)(v17 + 88) = v16;
  *(unsigned char *)(v17 + 96) = a8;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = sub_10013C224;
  _OWORD v18[3] = v17;
  v18[4] = a1;
  void v18[5] = a6;
  id v19 = a1;
  swift_bridgeObjectRetain_n();
  id v20 = v19;
  id v21 = a6;
  id v22 = v20;
  id v23 = v21;
  id v24 = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10011E108(v24, v23, (uint64_t)sub_10013E828, (uint64_t)v18);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void sub_100128024(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.Tests.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v15 = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v16 = a3;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_10009B0E4(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting test %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v16;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  NSString v14 = String._bridgeToObjectiveC()();
  [a3 startedTest:v14];
}

uint64_t sub_100128270(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  return sub_1001296C8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10068D958, (uint64_t)sub_10013C5CC);
}

uint64_t sub_1001282AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  *(void *)(v15 + 32) = a1;
  *(void *)(v15 + 40) = a6;
  *(unsigned char *)(v15 + 48) = a8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a6;
  *(void *)(v16 + 48) = a7;
  *(void *)(v16 + 56) = a5;
  *(void *)(v16 + 64) = DOCSplitBrowserViewController.didCommitPreview(of:);
  *(void *)(v16 + 72) = 0;
  *(void *)(v16 + 80) = sub_10013C600;
  *(void *)(v16 + 88) = v15;
  *(unsigned char *)(v16 + 96) = a8;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = sub_10013C224;
  v17[3] = v16;
  void v17[4] = a1;
  v17[5] = a6;
  id v18 = a1;
  id v19 = a6;
  id v20 = v18;
  id v21 = v19;
  swift_bridgeObjectRetain_n();
  id v22 = v20;
  id v23 = v21;
  id v24 = a5;
  swift_retain();
  swift_retain();
  sub_10011E108(v24, v23, (uint64_t)sub_10013E828, (uint64_t)v17);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100128448(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v40 = a5;
  NSString v38 = a3;
  uint64_t v39 = a4;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v33 - v19;
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v35 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  *uint64_t v13 = 1;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  unsigned int v34 = *(void (**)(char *, uint64_t))(v15 + 8);
  id v21 = v18;
  uint64_t v22 = v14;
  v34(v21, v14);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v37;
  *(void *)(v23 + 16) = v36;
  *(void *)(v23 + 24) = v24;
  os_log_type_t v26 = v38;
  uint64_t v25 = v39;
  *(void *)(v23 + 32) = v38;
  *(void *)(v23 + 40) = v25;
  *(unsigned char *)(v23 + 48) = v40;
  aBlock[4] = sub_10013C654;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_10068DA10;
  id v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v28 = v26;
  id v29 = v25;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  uint64_t v30 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v31 = (void *)v35;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v30);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v43);
  return ((uint64_t (*)(char *, uint64_t))v34)(v20, v22);
}

uint64_t sub_1001288D8(uint64_t a1, unint64_t a2, void *a3, void *a4, int a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.Tests.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v23 = a3;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v24 = a4;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    int v25 = a5;
    uint64_t v27 = v18;
    uint64_t v22 = v10;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_10009B0E4(a1, a2, &v27);
    a3 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting test %s", v17, 0xCu);
    swift_arrayDestroy();
    a5 = v25;
    swift_slowDealloc();
    a4 = v24;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v22);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  NSString v19 = String._bridgeToObjectiveC()();
  [a3 startedTest:v19];

  swift_bridgeObjectRetain();
  id v20 = a3;
  sub_1003999F4(1, a4, v20, a1, a2, a5);

  return swift_bridgeObjectRelease();
}

void sub_100128B74(char *a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_100128B9C(char *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)&a1[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8])
  {
    swift_bridgeObjectRetain();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v13 = 0;
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  *(void *)(v14 + 32) = a3;
  *(unsigned char *)(v14 + 40) = a4;
  void v17[4] = a6;
  v17[5] = v14;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  void v17[2] = sub_1000666D8;
  v17[3] = a7;
  os_log_type_t v15 = _Block_copy(v17);
  uint64_t v16 = a1;
  swift_bridgeObjectRetain();
  swift_release();
  [v16 finishedTest:v13 waitForCommit:1 extraResults:0 withTeardownBlock:v15];
  _Block_release(v15);
}

uint64_t sub_100128CEC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100127638(a2, a3);
}

uint64_t sub_100128D1C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  return sub_1001296C8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10068D868, (uint64_t)sub_10013C554);
}

uint64_t sub_100128D58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a6;
  *(void *)(v15 + 24) = a2;
  *(void *)(v15 + 32) = a3;
  *(void *)(v15 + 40) = a1;
  *(unsigned char *)(v15 + 48) = a8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a6;
  *(void *)(v16 + 48) = a7;
  *(void *)(v16 + 56) = a5;
  *(void *)(v16 + 64) = DOCSplitBrowserViewController.didCommitPreview(of:);
  *(void *)(v16 + 72) = 0;
  *(void *)(v16 + 80) = sub_10013C574;
  *(void *)(v16 + 88) = v15;
  *(unsigned char *)(v16 + 96) = a8;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = sub_10013C224;
  v17[3] = v16;
  void v17[4] = a1;
  v17[5] = a6;
  id v18 = a6;
  id v19 = a1;
  id v20 = v18;
  swift_bridgeObjectRetain_n();
  id v21 = v19;
  id v22 = v20;
  id v23 = a5;
  swift_retain();
  swift_retain();
  sub_10011E108(v23, v22, (uint64_t)sub_10013E828, (uint64_t)v17);
  swift_release();
  swift_release();

  return swift_release();
}

void sub_100128EF0(char *a1, uint64_t a2, unint64_t a3, id a4, char a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v63 - v16;
  __chkstk_darwin(v15);
  id v19 = (char *)&v63 - v18;
  id v20 = *(void **)&a1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
  if (!v20)
  {
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    NSString v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      id v67 = a4;
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v66 = v10;
      aBlock[0] = v59;
      *(_DWORD *)uint64_t v58 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v69 = sub_10009B0E4(a2, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to launch QuickLook for test %s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v66);
      a4 = v67;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
    }
    NSString v51 = String._bridgeToObjectiveC()();
    [a4 failedTest:v51];
    goto LABEL_18;
  }
  uint64_t v66 = v10;
  id v67 = a4;
  uint64_t v21 = a2;
  id v22 = v20;
  id v23 = [a1 view];
  if (v23)
  {
    uint64_t v24 = v23;
    id v25 = [v23 window];

    if (!v25)
    {
      static Logger.Tests.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v60 = Logger.logObject.getter();
      uint64_t v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, (os_log_type_t)v61))
      {
        id v62 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        id v64 = v22;
        *(_DWORD *)id v62 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v69 = sub_10009B0E4(v21, a3, aBlock);
        id v22 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v61, "Failed to find QuickLook bounds for test %s", v62, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v66);
      NSString v51 = String._bridgeToObjectiveC()();
      [v67 failedTest:v51];
      goto LABEL_17;
    }
    uint64_t v65 = v11;
    id v26 = [v22 view];
    if (v26)
    {
      uint64_t v27 = v26;
      [v26 bounds];
      double v29 = v28;
      double v31 = v30;
      double v33 = v32;
      double v35 = v34;

      id v36 = [v22 view];
      [v25 convertRect:v36 fromView:v29];
      double v38 = v37;
      double v40 = v39;
      double v42 = v41;
      double v44 = v43;

      uint64_t v45 = swift_allocObject();
      id v46 = v67;
      *(void *)(v45 + 16) = v67;
      *(void *)(v45 + 24) = v21;
      *(void *)(v45 + 32) = a3;
      *(unsigned char *)(v45 + 40) = a5;
      id v47 = objc_allocWithZone((Class)RPTDirectionalSwipeTestParameters);
      swift_bridgeObjectRetain();
      id v48 = v46;
      NSString v49 = String._bridgeToObjectiveC()();
      aBlock[4] = (uint64_t)sub_10013C54C;
      aBlock[5] = v45;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = (uint64_t)sub_1000666D8;
      aBlock[3] = (uint64_t)&unk_10068D920;
      uint64_t v50 = _Block_copy(aBlock);
      swift_release();
      NSString v51 = [v47 initWithTestName:v49 scrollingBounds:1 swipeCount:6 direction:v50 completionHandler:v38, v40, v42, v44];
      _Block_release(v50);

      [v51 setShouldFlick:1];
      static Logger.Tests.getter();
      swift_bridgeObjectRetain_n();
      unint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        id v64 = v22;
        uint64_t v55 = (uint8_t *)v54;
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v69 = sub_10009B0E4(v21, a3, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Starting test %s", v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v22 = v64;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v65 + 8))(v14, v66);
      [self runTestWithParameters:v51];
LABEL_17:

LABEL_18:
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10012968C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  return sub_1001296C8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10068D2F0, (uint64_t)sub_100135D98);
}

uint64_t sub_1001296C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v9;
  *(void *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  *(void *)(v17 + 48) = a4;
  *(void *)(v17 + 56) = a5;
  *(void *)(v17 + 64) = a6;
  *(unsigned char *)(v17 + 72) = a7;
  id v18 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v19 = a4;
  id v20 = a5;
  sub_10013BBE0(a1, a2, a7, a9, v17);

  return swift_release();
}

uint64_t sub_100129798(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a6;
  *(void *)(v15 + 24) = a2;
  *(void *)(v15 + 32) = a3;
  *(void *)(v15 + 40) = a1;
  *(unsigned char *)(v15 + 48) = a8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a6;
  *(void *)(v16 + 48) = a7;
  *(void *)(v16 + 56) = a5;
  *(void *)(v16 + 64) = DOCSplitBrowserViewController.didCommitPreview(of:);
  *(void *)(v16 + 72) = 0;
  *(void *)(v16 + 80) = sub_10013C208;
  *(void *)(v16 + 88) = v15;
  *(unsigned char *)(v16 + 96) = a8;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = sub_10013C224;
  v17[3] = v16;
  void v17[4] = a1;
  v17[5] = a6;
  id v18 = a6;
  id v19 = a1;
  id v20 = v18;
  swift_bridgeObjectRetain_n();
  id v21 = v19;
  id v22 = v20;
  id v23 = a5;
  swift_retain();
  swift_retain();
  sub_10011E108(v23, v22, (uint64_t)sub_10013C244, (uint64_t)v17);
  swift_release();
  swift_release();

  return swift_release();
}

void sub_100129930(char *a1, uint64_t a2, unint64_t a3, id a4, char a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v69 - v16;
  __chkstk_darwin(v15);
  id v19 = (char *)&v69 - v18;
  id v20 = *(void **)&a1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
  if (!v20)
  {
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    id v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      id v72 = a4;
      id v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      uint64_t v71 = v10;
      uint64_t v75 = v65;
      *(_DWORD *)id v64 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v74 = sub_10009B0E4(a2, a3, &v75);
      a4 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Failed to launch QuickLook for test %s", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v71);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
    }
    unint64_t v52 = (char *)String._bridgeToObjectiveC()();
    [a4 failedTest:v52];
    goto LABEL_18;
  }
  uint64_t v71 = v10;
  id v72 = a4;
  uint64_t v21 = a2;
  id v22 = v20;
  id v23 = [a1 view];
  if (v23)
  {
    uint64_t v24 = v23;
    id v25 = [v23 window];

    if (!v25)
    {
      static Logger.Tests.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v66 = Logger.logObject.getter();
      uint64_t v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, (os_log_type_t)v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        id v69 = v22;
        *(_DWORD *)uint64_t v68 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v74 = sub_10009B0E4(v21, a3, &v75);
        id v22 = v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v67, "Failed to find QuickLook bounds for test %s", v68, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v71);
      unint64_t v52 = (char *)String._bridgeToObjectiveC()();
      [v72 failedTest:v52];
      goto LABEL_17;
    }
    uint64_t v70 = v11;
    id v26 = [v22 view];
    if (v26)
    {
      uint64_t v27 = v26;
      [v26 bounds];
      double v29 = v28;
      double v31 = v30;
      double v33 = v32;
      double v35 = v34;

      id v36 = [v22 view];
      [v25 convertRect:v36 fromView:v29 toView:v31];
      uint64_t v38 = v37;
      uint64_t v40 = v39;
      uint64_t v42 = v41;
      uint64_t v44 = v43;

      uint64_t v45 = (objc_class *)type metadata accessor for DOCPinchZoomTestParameters();
      id v46 = (char *)objc_allocWithZone(v45);
      id v47 = (uint64_t *)&v46[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_testName];
      *id v47 = 0;
      v47[1] = 0;
      id v48 = &v46[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_completionHandler];
      *(void *)id v48 = 0;
      *((void *)v48 + 1) = 0;
      uint64_t v49 = v21;
      *id v47 = v21;
      v47[1] = a3;
      swift_bridgeObjectRetain();
      uint64_t v50 = v46;
      swift_bridgeObjectRelease();
      NSString v51 = &v50[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_bounds];
      *(void *)NSString v51 = v38;
      *((void *)v51 + 1) = v40;
      *((void *)v51 + 2) = v42;
      *((void *)v51 + 3) = v44;

      v73.receiver = v50;
      v73.super_class = v45;
      unint64_t v52 = (char *)objc_msgSendSuper2(&v73, "init");
      uint64_t v53 = swift_allocObject();
      id v54 = v72;
      *(void *)(v53 + 16) = v72;
      *(void *)(v53 + 24) = v49;
      *(void *)(v53 + 32) = a3;
      *(unsigned char *)(v53 + 40) = a5;
      uint64_t v55 = &v52[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_completionHandler];
      uint64_t v56 = *(void *)&v52[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_completionHandler];
      *(void *)uint64_t v55 = sub_10013C54C;
      *((void *)v55 + 1) = v53;
      swift_bridgeObjectRetain();
      id v57 = v54;
      sub_1000A7258(v56);
      static Logger.Tests.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc();
        id v69 = v22;
        uint64_t v61 = (uint8_t *)v60;
        uint64_t v75 = swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v74 = sub_10009B0E4(v49, a3, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Starting test %s", v61, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v22 = v69;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v70 + 8))(v14, v71);
      [self runTestWithParameters:v52];
LABEL_17:

LABEL_18:
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10012A098(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, id a6, uint64_t a7, id *a8, void (*a9)(void), uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v62 = a7;
  os_log_type_t v63 = a8;
  id v64 = a5;
  uint64_t v65 = a3;
  uint64_t v16 = a9;
  uint64_t v61 = a10;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  id v23 = (char *)&v56 - v22;
  uint64_t v24 = &selRef_cellForItemAtIndexPath_;
  if (a2)
  {
    static Logger.Tests.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    uint64_t v60 = v25;
    int v58 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      id v59 = a6;
      uint64_t v28 = v27;
      uint64_t v56 = swift_slowAlloc();
      *(void *)&v66[0] = v56;
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v67 = sub_10009B0E4(v65, a4, (uint64_t *)v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v67 = a2;
      swift_errorRetain();
      sub_1000CBE70((uint64_t *)&unk_1007076E0);
      uint64_t v29 = String.init<A>(describing:)();
      id v57 = a9;
      uint64_t v67 = sub_10009B0E4(v29, v30, (uint64_t *)v66);
      uint64_t v24 = &selRef_cellForItemAtIndexPath_;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v16 = v57;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      double v31 = v60;
      _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v58, "Failed test %s. Error: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a6 = v59;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    NSString v32 = String._bridgeToObjectiveC()();
    [v64 v24[60] v32];
  }
  id v33 = [a6 effectiveFullBrowser];
  DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)(v62, 1, v63);

  v16();
  double v34 = (char *)[a6 effectiveBrowserViewController];
  if (!v34) {
    goto LABEL_12;
  }
  double v35 = v34;
  id v36 = (void **)&v34[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess();
  uint64_t v37 = *v36;
  if (!v37 || (type metadata accessor for DOCItemCollectionViewController(0), (uint64_t v38 = swift_dynamicCastClass()) == 0))
  {

LABEL_12:
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(void *)&v66[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_10009B0E4(v65, a4, (uint64_t *)v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed test %s. mainViewController.effectiveBrowserViewController?.containedItemCollectionViewController was nil", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v24 = &selRef_cellForItemAtIndexPath_;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    NSString v49 = String._bridgeToObjectiveC()();
    [v64 v24[60] v49];
    goto LABEL_16;
  }
  uint64_t v39 = (char *)v38;
  id v59 = a6;
  id v40 = v37;

  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = a11;
  *(void *)(v41 + 24) = a12;
  uint64_t v42 = self;
  id v43 = v40;
  uint64_t v44 = @"DOCQLPreviewFinishLoadingNotificationName";
  swift_retain();
  id v45 = [v42 defaultCenter];
  memset(v66, 0, sizeof(v66));
  id v46 = [self mainQueue];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = sub_100045B40;
  *(void *)(v47 + 24) = v41;
  swift_retain();
  NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)();

  swift_release();
  sub_1000CBBA4((uint64_t)v66, (uint64_t *)&unk_100705D60);

  swift_release();
  [v39 loadViewIfNeeded];
  id v48 = *(void **)&v39[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v48)
  {
    swift_bridgeObjectRetain();
    NSString v49 = v43;
    id v50 = v64;
    id v51 = v59;
    id v52 = v48;
    sub_100139FF8(v52, a13, a13, v50, v51, v65, a4, v52, v39);

    swift_bridgeObjectRelease();
LABEL_16:

    return;
  }
  __break(1u);
}

uint64_t sub_10012A7BC(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v44 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v47 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  id v43 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v36 - v19;
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v38 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  *uint64_t v13 = 1;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v21 = v18;
  uint64_t v22 = v14;
  v37(v21, v14);
  id v23 = (void *)swift_allocObject();
  uint64_t v24 = v39;
  uint64_t v25 = v40;
  _OWORD v23[2] = a1;
  void v23[3] = v24;
  uint64_t v27 = v41;
  os_log_type_t v26 = v42;
  v23[4] = v25;
  void v23[5] = v27;
  v23[6] = v26;
  aBlock[4] = sub_10013C454;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_10068D6F0;
  uint64_t v28 = _Block_copy(aBlock);
  id v29 = a1;
  swift_bridgeObjectRetain();
  id v30 = v27;
  id v31 = v26;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  id v33 = v43;
  uint64_t v32 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  double v34 = (void *)v38;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v46);
  return ((uint64_t (*)(char *, uint64_t))v37)(v20, v22);
}

void sub_10012AC50(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (char *)[a1 effectiveBrowserViewController];
  if (!v14)
  {
LABEL_7:
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    os_log_type_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v31 = a4;
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v30 = v10;
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_10009B0E4(a2, a3, &v33);
      a4 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed test %s. Timed out waiting for mainViewController.effectiveBrowserViewController?.containedItemCollectionViewController", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v30);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    NSString v24 = String._bridgeToObjectiveC()();
    [a4 failedTest:v24];
    goto LABEL_11;
  }
  uint64_t v15 = v14;
  uint64_t v16 = (void **)&v14[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess();
  uint64_t v17 = *v16;
  if (!*v16 || (type metadata accessor for DOCItemCollectionViewController(0), (uint64_t v18 = swift_dynamicCastClass()) == 0))
  {

    goto LABEL_7;
  }
  uint64_t v19 = (char *)v18;
  id v20 = v17;

  [v19 loadViewIfNeeded];
  uint64_t v21 = *(void **)&v19[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v21)
  {
    swift_bridgeObjectRetain();
    id v22 = v20;
    id v23 = a5;
    NSString v24 = a4;
    id v25 = v21;
    sub_10013AFFC((uint64_t)v25, 7, v19, v23, a2, a3, v24);

    swift_bridgeObjectRelease();
LABEL_11:

    return;
  }
  __break(1u);
}

uint64_t sub_10012AFA0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v706 = a3;
  v715 = (unsigned char *)a1;
  v716 = a2;
  uint64_t v712 = 0;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v713 = *(void *)(v3 - 8);
  uint64_t v714 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  v697 = (char *)&v676 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  v696 = (char *)&v676 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  v695 = (char *)&v676 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v694 = (char *)&v676 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v693 = (char *)&v676 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v692 = (char *)&v676 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v691 = (char *)&v676 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v690 = (char *)&v676 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v689 = (char *)&v676 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v688 = (char *)&v676 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v687 = (char *)&v676 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v686 = (char *)&v676 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v685 = (char *)&v676 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v684 = (char *)&v676 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v683 = (char *)&v676 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v682 = (char *)&v676 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v681 = (char *)&v676 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v680 = (char *)&v676 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v679 = (char *)&v676 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v678 = (char *)&v676 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v698 = (char *)&v676 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  v699 = (char *)&v676 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v700 = (char *)&v676 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v701 = (uint8_t *)&v676 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  v702 = (uint8_t *)&v676 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v703 = ((char *)&v676 - v55);
  uint64_t v56 = __chkstk_darwin(v54);
  v705 = ((char *)&v676 - v57);
  uint64_t v58 = __chkstk_darwin(v56);
  v717 = (char *)&v676 - v59;
  __chkstk_darwin(v58);
  uint64_t v61 = (char *)&v676 - v60;
  sub_10009E6C4(0, (unint64_t *)&qword_100707730);
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v64 = sub_100464620(v62, v63);
  id v711 = v64;
  if (!v64)
  {
    long long v722 = 0u;
    long long v723 = 0u;
LABEL_11:
    sub_1000CBBA4((uint64_t)&v722, (uint64_t *)&unk_100705D60);
    goto LABEL_12;
  }
  if ([v64 objectForKey:DOCTestUserDefaultsKeyProviderForPPT])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v718, 0, sizeof(v718));
  }
  sub_1000CBE0C((uint64_t)v718, (uint64_t)&v722, (uint64_t *)&unk_100705D60);
  if (!*((void *)&v723 + 1)) {
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    id v66 = (id)static DOCDocumentSourceIdentifier.iCloudCurrent.getter();
    goto LABEL_13;
  }
  NSString v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v66 = v65;
  static Logger.Tests.getter();
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v66;
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  uint64_t v70 = swift_allocObject();
  *(unsigned char *)(v70 + 16) = 32;
  uint64_t v71 = (uint8_t *)swift_allocObject();
  v71[16] = 8;
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = sub_10013E824;
  *(void *)(v72 + 24) = v67;
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = sub_10013E4B4;
  *(void *)(v73 + 24) = v72;
  sub_1000CBE70(&qword_100707738);
  uint64_t v74 = swift_allocObject();
  sub_1004A1BC8(v74, 3);
  *uint64_t v75 = sub_10013E4C8;
  v75[1] = v70;
  v75[2] = sub_10013E4C8;
  v75[3] = v71;
  v75[4] = sub_10013E4BC;
  v75[5] = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v68, v69))
  {
    CGRect v76 = (uint8_t *)sub_10017BAFC();
    uint64_t v719 = swift_slowAlloc();
    uint64_t v720 = 0;
    *(_WORD *)CGRect v76 = 258;
    *(void *)&v718[0] = v76 + 2;
    *(void *)&long long v722 = sub_10013E4C8;
    *((void *)&v722 + 1) = v70;
    uint64_t v77 = v712;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    if (v77) {
      goto LABEL_344;
    }
    swift_release();
    *(void *)&long long v722 = sub_10013E4C8;
    *((void *)&v722 + 1) = v71;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    swift_release();
    *(void *)&long long v722 = sub_10013E4BC;
    *((void *)&v722 + 1) = v73;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    uint64_t v712 = 0;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "forcing provider to: %s", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_10017BB04();
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v713 + 8))(v61, v714);
LABEL_13:
  unint64_t v78 = v717;
  static Logger.Tests.getter();
  uint64_t v79 = swift_allocObject();
  NSString v80 = v716;
  *(void *)(v79 + 16) = v715;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = v66;
  swift_bridgeObjectRetain();
  id v710 = v66;
  v709 = Logger.logObject.getter();
  LODWORD(v80) = static os_log_type_t.debug.getter();
  uint64_t v82 = swift_allocObject();
  *(unsigned char *)(v82 + 16) = 32;
  uint64_t v83 = swift_allocObject();
  *(unsigned char *)(v83 + 16) = 8;
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = sub_10013D480;
  *(void *)(v84 + 24) = v79;
  uint64_t v85 = swift_allocObject();
  *(void *)(v85 + 16) = sub_10013D4EC;
  *(void *)(v85 + 24) = v84;
  uint64_t v86 = swift_allocObject();
  *(unsigned char *)(v86 + 16) = 32;
  uint64_t v87 = swift_allocObject();
  *(unsigned char *)(v87 + 16) = 8;
  uint64_t v88 = swift_allocObject();
  *(void *)(v88 + 16) = sub_10013D4BC;
  *(void *)(v88 + 24) = v81;
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = sub_10013E4B4;
  *(void *)(v89 + 24) = v88;
  uint64_t v704 = sub_1000CBE70(&qword_100707738);
  uint64_t v90 = swift_allocObject();
  sub_1004A1BC8(v90, 6);
  *uint64_t v91 = sub_10013D4D4;
  v91[1] = v82;
  v91[2] = sub_10013E4C8;
  v91[3] = v83;
  uint64_t v91[4] = sub_10013D4F4;
  v91[5] = v85;
  v91[6] = sub_10013E4C8;
  v91[7] = v86;
  v91[8] = sub_10013E4C8;
  v91[9] = v87;
  v91[10] = sub_10013E4BC;
  v91[11] = v89;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  LODWORD(v708) = v80;
  os_log_type_t v92 = v80;
  id v93 = v709;
  if (os_log_type_enabled(v709, v92))
  {
    uint64_t v71 = (uint8_t *)sub_10017BAFC();
    uint64_t v719 = swift_slowAlloc();
    uint64_t v720 = 0;
    *(_WORD *)uint64_t v71 = 514;
    *(void *)&v718[0] = v71 + 2;
    *(void *)&long long v722 = sub_10013D4D4;
    *((void *)&v722 + 1) = v82;
    uint64_t v94 = v712;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    if (v94) {
      goto LABEL_344;
    }
    swift_release();
    *(void *)&long long v722 = sub_10013E4C8;
    *((void *)&v722 + 1) = v83;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    swift_release();
    *(void *)&long long v722 = sub_10013D4F4;
    *((void *)&v722 + 1) = v85;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    swift_release();
    *(void *)&long long v722 = sub_10013E4C8;
    *((void *)&v722 + 1) = v86;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    swift_release();
    *(void *)&long long v722 = sub_10013E4C8;
    *((void *)&v722 + 1) = v87;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    swift_release();
    *(void *)&long long v722 = sub_10013E4BC;
    *((void *)&v722 + 1) = v89;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    uint64_t v712 = 0;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v708, "runTest: %s with provider: %s", v71, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_10017BB04();

    uint64_t v95 = *(void (**)(char *, uint64_t))(v713 + 8);
    v95(v717, v714);
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v95 = *(void (**)(char *, uint64_t))(v713 + 8);
    v95(v78, v714);
  }
  id v96 = [self keyWindow];
  if (!v96) {
    goto LABEL_36;
  }
  uint64_t v97 = v96;
  uint64_t v98 = (uint8_t *)[v96 rootViewController];
  if (!v98)
  {
LABEL_32:

LABEL_37:
    uint64_t v109 = 0;
    goto LABEL_38;
  }
  uint64_t v71 = v98;
  type metadata accessor for DRIMainViewController();
  uint64_t v99 = (char *)swift_dynamicCastClass();
  if (!v99)
  {

    goto LABEL_32;
  }
  uint64_t v100 = v99;
  int v101 = [v99 tabBarController];
  if (!v101)
  {

LABEL_36:
    goto LABEL_37;
  }
  uint64_t v102 = v101;
  uint64_t v103 = &v707[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName];
  uint64_t v105 = (uint64_t)v715;
  uint64_t v104 = v716;
  *(void *)uint64_t v103 = v715;
  *((void *)v103 + 1) = v104;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  [v102 enclosingTabSwitcherStyle];
  uint64_t v106 = DOCTabSwitcherStyle.showsTabs.getter();
  if (!v104)
  {
    NSString v111 = 0;
LABEL_40:
    if (v706) {
      v112.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    }
    else {
      v112.super.Class isa = 0;
    }
    uint64_t v119 = (objc_class *)type metadata accessor for DOCApplication();
    v721.receiver = v707;
    v721.super_class = v119;
    uint64_t v109 = [v721 runTest:v111 options:v112.super.isa];

    uint64_t v120 = &v725;
    goto LABEL_52;
  }
  uint64_t v107 = v106;
  if (v105 == 0x6F54686374697753 && v716 == (void *)0xEE006573776F7242
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (v107)
    {
      sub_100123A34(2, (uint64_t)v715, (unint64_t)v716, v100, v102);
LABEL_27:

LABEL_28:
LABEL_29:
      uint64_t v108 = &v725;
LABEL_30:

      uint64_t v109 = 1;
LABEL_38:

      return v109;
    }
    if (v706)
    {
      uint64_t v113 = (void *)swift_allocObject();
      id v114 = v707;
      uint64_t v115 = (uint64_t)v715;
      v113[2] = v707;
      v113[3] = v115;
      v113[4] = v716;
      v113[5] = v100;
      swift_bridgeObjectRetain();
      id v116 = v114;
      uint64_t v117 = v71;
      uint64_t v118 = v710;
      sub_10011E108(v710, v100, (uint64_t)sub_10013E82C, (uint64_t)v113);

LABEL_44:
      swift_release();
      uint64_t v109 = 1;
      goto LABEL_38;
    }
    __break(1u);
LABEL_134:
    if (v715 == (unsigned char *)0x6F466573776F7242 && v716 == (void *)0xEC0000007265646CLL
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      static Logger.Tests.getter();
      uint64_t v251 = swift_allocObject();
      v252 = v717;
      *(void *)(v251 + 16) = v717;
      uint64_t v253 = swift_allocObject();
      *(void *)(v253 + 16) = v252;
      v703 = v71;
      v705 = Logger.logObject.getter();
      int v254 = static os_log_type_t.debug.getter();
      uint64_t v255 = swift_allocObject();
      *(unsigned char *)(v255 + 16) = 64;
      uint64_t v256 = swift_allocObject();
      *(unsigned char *)(v256 + 16) = 8;
      uint64_t v257 = swift_allocObject();
      *(void *)(v257 + 16) = sub_10013E8A0;
      *(void *)(v257 + 24) = v251;
      uint64_t v258 = swift_allocObject();
      *(void *)(v258 + 16) = sub_10013E4B8;
      *(void *)(v258 + 24) = v257;
      uint64_t v259 = swift_allocObject();
      *(unsigned char *)(v259 + 16) = 32;
      uint64_t v260 = swift_allocObject();
      *(unsigned char *)(v260 + 16) = 8;
      uint64_t v261 = swift_allocObject();
      *(void *)(v261 + 16) = sub_10013E8A4;
      *(void *)(v261 + 24) = v253;
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = sub_10013E4B4;
      *(void *)(v105 + 24) = v261;
      uint64_t v262 = swift_allocObject();
      sub_1004A1BC8(v262, 6);
      void *v263 = sub_10013E4C8;
      v263[1] = v255;
      v263[2] = sub_10013E4C8;
      v263[3] = v256;
      v263[4] = sub_10013E4C0;
      v263[5] = v258;
      v263[6] = sub_10013E4C8;
      v263[7] = v259;
      v263[8] = sub_10013E4C8;
      v263[9] = v260;
      v263[10] = sub_10013E4BC;
      v263[11] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v704) = v254;
      uint64_t v71 = (uint8_t *)v705;
      if (!os_log_type_enabled(v705, (os_log_type_t)v254))
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_141;
      }
      v264 = (uint8_t *)sub_10017BAFC();
      uint64_t v265 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v265;
      v702 = v264;
      *(_WORD *)v264 = 514;
      *(void *)&v718[0] = v264 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v255;
      uint64_t v266 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (!v266)
      {
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v256;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C0;
        *((void *)&v722 + 1) = v258;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v259;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v260;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4BC;
        *((void *)&v722 + 1) = v105;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        v267 = v71;
        v268 = v71;
        uint64_t v71 = v702;
        _os_log_impl((void *)&_mh_execute_header, v268, (os_log_type_t)v704, "BrowseFolder %@ %s", v702, 0x16u);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_10017BB04();

LABEL_141:
        v677(v678, v714);
        if (v706)
        {
          uint64_t v109 = 1;
          v216 = v710;
          sub_1001393B8((uint64_t)v715, (uint64_t)v716, v710, v717, 0, 1);
          goto LABEL_113;
        }
        __break(1u);
        goto LABEL_243;
      }
LABEL_344:
      swift_errorRelease();
      __break(1u);
LABEL_345:
      __break(1u);
LABEL_346:
      NSString v111 = String._bridgeToObjectiveC()();
      uint64_t v97 = v709;
      uint64_t v102 = v708;
      goto LABEL_40;
    }
    goto LABEL_144;
  }
  if ((v715 != (unsigned char *)0x6F54686374697753 || v716 != (void *)0xEF73746E65636552)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v83 = 0xD000000000000014;
    uint64_t v107 = 0xD000000000000010;
    v709 = v97;
    v708 = v102;
    v717 = v100;
    v677 = v95;
    if (v715 == (unsigned char *)0xD000000000000010 && v716 == (void *)0x80000001005D5BB0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      static Logger.Tests.getter();
      uint64_t v126 = swift_allocObject();
      *(void *)(v126 + 16) = v100;
      uint64_t v127 = swift_allocObject();
      *(void *)(v127 + 16) = v100;
      v702 = v71;
      v703 = Logger.logObject.getter();
      int v128 = static os_log_type_t.debug.getter();
      uint64_t v71 = (uint8_t *)swift_allocObject();
      v71[16] = 64;
      uint64_t v129 = swift_allocObject();
      *(unsigned char *)(v129 + 16) = 8;
      uint64_t v130 = swift_allocObject();
      *(void *)(v130 + 16) = sub_10013E8A0;
      *(void *)(v130 + 24) = v126;
      uint64_t v131 = swift_allocObject();
      *(void *)(v131 + 16) = sub_10013E4B8;
      *(void *)(v131 + 24) = v130;
      uint64_t v132 = swift_allocObject();
      *(unsigned char *)(v132 + 16) = 32;
      uint64_t v133 = swift_allocObject();
      *(unsigned char *)(v133 + 16) = 8;
      uint64_t v134 = swift_allocObject();
      *(void *)(v134 + 16) = sub_10013E8A4;
      *(void *)(v134 + 24) = v127;
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = sub_10013E4B4;
      *(void *)(v105 + 24) = v134;
      uint64_t v135 = swift_allocObject();
      sub_1004A1BC8(v135, 6);
      *uint64_t v136 = sub_10013E4C8;
      v136[1] = v71;
      v136[2] = sub_10013E4C8;
      v136[3] = v129;
      v136[4] = sub_10013E4C0;
      v136[5] = v131;
      v136[6] = sub_10013E4C8;
      v136[7] = v132;
      v136[8] = sub_10013E4C8;
      v136[9] = v133;
      v136[10] = sub_10013E4BC;
      v136[11] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      char v137 = v703;
      swift_bridgeObjectRelease();
      LODWORD(v704) = v128;
      if (os_log_type_enabled(v137, (os_log_type_t)v128))
      {
        long long v138 = (uint8_t *)sub_10017BAFC();
        uint64_t v139 = swift_slowAlloc();
        uint64_t v719 = swift_slowAlloc();
        uint64_t v720 = v139;
        *(_WORD *)long long v138 = 514;
        *(void *)&v718[0] = v138 + 2;
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v71;
        uint64_t v140 = v712;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        if (v140) {
          goto LABEL_344;
        }
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v129;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C0;
        *((void *)&v722 + 1) = v131;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v132;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v133;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        long long v141 = (void (*)(NSObject *, uint64_t))v677;
        swift_release();
        *(void *)&long long v722 = sub_10013E4BC;
        *((void *)&v722 + 1) = v105;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        long long v142 = v703;
        _os_log_impl((void *)&_mh_execute_header, v703, (os_log_type_t)v704, "ScrollAllRecents %@ %s", v138, 0x16u);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_10017BB04();

        v141(v705, v714);
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v677((char *)v705, v714);
      }
      uint64_t v71 = (uint8_t *)v709;
      id v143 = v708;
      if (v706)
      {
        sub_100137A74((uint64_t)v715, (uint64_t)v716, v706, v717, 0);

        uint64_t v109 = 1;
        goto LABEL_38;
      }
      __break(1u);
      goto LABEL_151;
    }
    if (v715 == (unsigned char *)0xD000000000000014 && v716 == (void *)0x80000001005D5B90
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      static Logger.Tests.getter();
      uint64_t v144 = swift_allocObject();
      *(void *)(v144 + 16) = v100;
      uint64_t v145 = swift_allocObject();
      *(void *)(v145 + 16) = v100;
      v702 = v71;
      v705 = Logger.logObject.getter();
      int v146 = static os_log_type_t.debug.getter();
      uint64_t v147 = swift_allocObject();
      *(unsigned char *)(v147 + 16) = 64;
      uint64_t v148 = swift_allocObject();
      *(unsigned char *)(v148 + 16) = 8;
      uint64_t v149 = swift_allocObject();
      *(void *)(v149 + 16) = sub_10013E8A0;
      *(void *)(v149 + 24) = v144;
      uint64_t v150 = swift_allocObject();
      *(void *)(v150 + 16) = sub_10013E4B8;
      *(void *)(v150 + 24) = v149;
      uint64_t v151 = swift_allocObject();
      *(unsigned char *)(v151 + 16) = 32;
      uint64_t v152 = swift_allocObject();
      *(unsigned char *)(v152 + 16) = 8;
      uint64_t v153 = swift_allocObject();
      *(void *)(v153 + 16) = sub_10013E8A4;
      *(void *)(v153 + 24) = v145;
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = sub_10013E4B4;
      *(void *)(v105 + 24) = v153;
      uint64_t v154 = swift_allocObject();
      sub_1004A1BC8(v154, 6);
      *long long v155 = sub_10013E4C8;
      v155[1] = v147;
      v155[2] = sub_10013E4C8;
      v155[3] = v148;
      v155[4] = sub_10013E4C0;
      v155[5] = v150;
      v155[6] = sub_10013E4C8;
      v155[7] = v151;
      v155[8] = sub_10013E4C8;
      v155[9] = v152;
      v155[10] = sub_10013E4BC;
      v155[11] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      long long v156 = v705;
      swift_bridgeObjectRelease();
      LODWORD(v704) = v146;
      if (os_log_type_enabled(v156, (os_log_type_t)v146))
      {
        uint64_t v71 = (uint8_t *)sub_10017BAFC();
        uint64_t v157 = swift_slowAlloc();
        uint64_t v719 = swift_slowAlloc();
        uint64_t v720 = v157;
        *(_WORD *)uint64_t v71 = 514;
        *(void *)&v718[0] = v71 + 2;
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v147;
        uint64_t v158 = v712;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        if (v158) {
          goto LABEL_344;
        }
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v148;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C0;
        *((void *)&v722 + 1) = v150;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v151;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        id v159 = v708;
        long long v160 = v717;
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v152;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        uint64_t v161 = (void (*)(NSObject *, uint64_t))v677;
        swift_release();
        *(void *)&long long v722 = sub_10013E4BC;
        *((void *)&v722 + 1) = v105;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        unint64_t v162 = v705;
        _os_log_impl((void *)&_mh_execute_header, v705, (os_log_type_t)v704, "ScrollAllRecentsList %@ %s", v71, 0x16u);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_10017BB04();

        v161(v703, v714);
        uint64_t v71 = (uint8_t *)v709;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v677((char *)v703, v714);
        uint64_t v71 = (uint8_t *)v709;
        id v159 = v708;
        long long v160 = v717;
      }
      if (v706)
      {
        uint64_t v109 = 1;
        sub_100137A74((uint64_t)v715, (uint64_t)v716, v706, v160, 1);

        goto LABEL_38;
      }
      __break(1u);
      goto LABEL_162;
    }
    if (v715 == (unsigned char *)0x65526C6C6F726353 && v716 == (void *)0xED000073746E6563
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (v706)
      {
        sub_100122464((uint64_t)v715, (uint64_t)v716, v706, v100);
        goto LABEL_27;
      }
      __break(1u);
      goto LABEL_172;
    }
    if (v715 == (unsigned char *)0xD000000000000014 && v716 == (void *)0x80000001005D5B70
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (v706)
      {
        sub_100122464((uint64_t)v715, (uint64_t)v716, v706, v717);

LABEL_84:
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_182;
    }
    if (v715 == (unsigned char *)0x72426C6C6F726353 && v716 == (void *)0xEC0000006573776FLL
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      static Logger.Tests.getter();
      uint64_t v163 = swift_allocObject();
      long long v164 = v717;
      *(void *)(v163 + 16) = v717;
      uint64_t v165 = swift_allocObject();
      *(void *)(v165 + 16) = v164;
      v703 = v71;
      v705 = Logger.logObject.getter();
      int v166 = static os_log_type_t.debug.getter();
      uint64_t v167 = swift_allocObject();
      *(unsigned char *)(v167 + 16) = 64;
      uint64_t v168 = swift_allocObject();
      *(unsigned char *)(v168 + 16) = 8;
      uint64_t v169 = swift_allocObject();
      *(void *)(v169 + 16) = sub_10013E8A0;
      *(void *)(v169 + 24) = v163;
      uint64_t v170 = swift_allocObject();
      *(void *)(v170 + 16) = sub_10013E4B8;
      *(void *)(v170 + 24) = v169;
      uint64_t v171 = swift_allocObject();
      *(unsigned char *)(v171 + 16) = 32;
      uint64_t v172 = swift_allocObject();
      *(unsigned char *)(v172 + 16) = 8;
      uint64_t v173 = swift_allocObject();
      *(void *)(v173 + 16) = sub_10013E8A4;
      *(void *)(v173 + 24) = v165;
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = sub_10013E4B4;
      *(void *)(v105 + 24) = v173;
      uint64_t v174 = swift_allocObject();
      sub_1004A1BC8(v174, 6);
      *long long v175 = sub_10013E4C8;
      v175[1] = v167;
      v175[2] = sub_10013E4C8;
      v175[3] = v168;
      v175[4] = sub_10013E4C0;
      v175[5] = v170;
      v175[6] = sub_10013E4C8;
      v175[7] = v171;
      v175[8] = sub_10013E4C8;
      v175[9] = v172;
      v175[10] = sub_10013E4BC;
      v175[11] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v704) = v166;
      uint64_t v71 = (uint8_t *)v705;
      if (os_log_type_enabled(v705, (os_log_type_t)v166))
      {
        long long v176 = (uint8_t *)sub_10017BAFC();
        uint64_t v177 = swift_slowAlloc();
        uint64_t v719 = swift_slowAlloc();
        uint64_t v720 = v177;
        v701 = v176;
        *(_WORD *)long long v176 = 514;
        *(void *)&v718[0] = v176 + 2;
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v167;
        uint64_t v178 = v712;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        if (v178) {
          goto LABEL_344;
        }
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v168;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C0;
        *((void *)&v722 + 1) = v170;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v171;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v172;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4BC;
        *((void *)&v722 + 1) = v105;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        long long v179 = v71;
        long long v180 = v71;
        uint64_t v71 = v701;
        _os_log_impl((void *)&_mh_execute_header, v180, (os_log_type_t)v704, "ScrollBrowse %@ %s", v701, 0x16u);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_10017BB04();
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v677((char *)v702, v714);
      if (!v706)
      {
        __break(1u);
        goto LABEL_192;
      }
LABEL_93:
      long long v181 = v710;
      sub_10011A134((uint64_t)v715, (uint64_t)v716, v706, v710, v717, 0);
LABEL_94:

      uint64_t v108 = &v724;
      goto LABEL_30;
    }
    uint64_t v102 = (unsigned char *)0xD000000000000013;
    if (v715 == (unsigned char *)0xD000000000000013 && v716 == (void *)0x80000001005D5B50
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      static Logger.Tests.getter();
      uint64_t v182 = swift_allocObject();
      long long v183 = v717;
      *(void *)(v182 + 16) = v717;
      uint64_t v184 = swift_allocObject();
      *(void *)(v184 + 16) = v183;
      v703 = v71;
      v705 = Logger.logObject.getter();
      int v185 = static os_log_type_t.debug.getter();
      uint64_t v186 = swift_allocObject();
      *(unsigned char *)(v186 + 16) = 64;
      uint64_t v187 = swift_allocObject();
      uint64_t v107 = 8;
      *(unsigned char *)(v187 + 16) = 8;
      uint64_t v188 = swift_allocObject();
      *(void *)(v188 + 16) = sub_10013E8A0;
      *(void *)(v188 + 24) = v182;
      uint64_t v189 = swift_allocObject();
      *(void *)(v189 + 16) = sub_10013E4B8;
      *(void *)(v189 + 24) = v188;
      uint64_t v83 = swift_allocObject();
      *(unsigned char *)(v83 + 16) = 32;
      uint64_t v102 = (unsigned char *)swift_allocObject();
      v102[16] = 8;
      uint64_t v190 = swift_allocObject();
      *(void *)(v190 + 16) = sub_10013E8A4;
      *(void *)(v190 + 24) = v184;
      uint64_t v191 = swift_allocObject();
      *(void *)(v191 + 16) = sub_10013E4B4;
      *(void *)(v191 + 24) = v190;
      uint64_t v192 = swift_allocObject();
      sub_1004A1BC8(v192, 6);
      *long long v193 = sub_10013E4C8;
      v193[1] = v186;
      v193[2] = sub_10013E4C8;
      v193[3] = v187;
      v193[4] = sub_10013E4C0;
      v193[5] = v189;
      v193[6] = sub_10013E4C8;
      v193[7] = v83;
      v193[8] = sub_10013E4C8;
      v193[9] = v102;
      v193[10] = sub_10013E4BC;
      v193[11] = v191;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v704) = v185;
      uint64_t v71 = (uint8_t *)v705;
      if (os_log_type_enabled(v705, (os_log_type_t)v185))
      {
        long long v194 = (uint8_t *)sub_10017BAFC();
        uint64_t v107 = swift_slowAlloc();
        uint64_t v719 = swift_slowAlloc();
        uint64_t v720 = v107;
        v702 = v194;
        *(_WORD *)long long v194 = 514;
        *(void *)&v718[0] = v194 + 2;
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v186;
        uint64_t v195 = v712;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        if (v195) {
          goto LABEL_344;
        }
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v187;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C0;
        *((void *)&v722 + 1) = v189;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v83;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v102;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4BC;
        *((void *)&v722 + 1) = v191;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        long long v196 = v71;
        long long v197 = v71;
        uint64_t v71 = v702;
        _os_log_impl((void *)&_mh_execute_header, v197, (os_log_type_t)v704, "ScrollBrowseNatural %@ %s", v702, 0x16u);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_10017BB04();
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v677((char *)v701, v714);
      if (v706) {
        goto LABEL_93;
      }
      __break(1u);
    }
    if (v715 == (unsigned char *)v107 && v716 == (void *)0x80000001005D5B30
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      static Logger.Tests.getter();
      uint64_t v198 = swift_allocObject();
      long long v199 = v717;
      *(void *)(v198 + 16) = v717;
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = v199;
      v703 = v71;
      v705 = Logger.logObject.getter();
      int v200 = static os_log_type_t.debug.getter();
      uint64_t v201 = swift_allocObject();
      *(unsigned char *)(v201 + 16) = 64;
      uint64_t v202 = swift_allocObject();
      *(unsigned char *)(v202 + 16) = 8;
      uint64_t v203 = swift_allocObject();
      *(void *)(v203 + 16) = sub_100117B1C;
      *(void *)(v203 + 24) = v198;
      uint64_t v204 = swift_allocObject();
      *(void *)(v204 + 16) = sub_10013E4B8;
      *(void *)(v204 + 24) = v203;
      uint64_t v205 = swift_allocObject();
      *(unsigned char *)(v205 + 16) = 32;
      uint64_t v206 = swift_allocObject();
      *(unsigned char *)(v206 + 16) = 8;
      uint64_t v207 = swift_allocObject();
      *(void *)(v207 + 16) = sub_10013DBD4;
      *(void *)(v207 + 24) = v105;
      uint64_t v208 = swift_allocObject();
      *(void *)(v208 + 16) = sub_10013E4B4;
      *(void *)(v208 + 24) = v207;
      uint64_t v209 = swift_allocObject();
      sub_1004A1BC8(v209, 6);
      void *v210 = sub_10013E4C8;
      v210[1] = v201;
      v210[2] = sub_10013E4C8;
      v210[3] = v202;
      v210[4] = sub_10013E4C0;
      v210[5] = v204;
      v210[6] = sub_10013E4C8;
      v210[7] = v205;
      v210[8] = sub_10013E4C8;
      v210[9] = v206;
      v210[10] = sub_10013E4BC;
      v210[11] = v208;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v704) = v200;
      uint64_t v71 = (uint8_t *)v705;
      if (os_log_type_enabled(v705, (os_log_type_t)v200))
      {
        v211 = (uint8_t *)sub_10017BAFC();
        uint64_t v212 = swift_slowAlloc();
        uint64_t v105 = swift_slowAlloc();
        uint64_t v719 = v105;
        uint64_t v720 = v212;
        v702 = v211;
        *(_WORD *)v211 = 514;
        *(void *)&v718[0] = v211 + 2;
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v201;
        uint64_t v213 = v712;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        if (v213) {
          goto LABEL_344;
        }
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v202;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C0;
        *((void *)&v722 + 1) = v204;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v205;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v206;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4BC;
        *((void *)&v722 + 1) = v208;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        v214 = v71;
        v215 = v71;
        uint64_t v71 = v702;
        _os_log_impl((void *)&_mh_execute_header, v215, (os_log_type_t)v704, "ScrollBrowseList %@ %s", v702, 0x16u);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_10017BB04();
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v677(v700, v714);
      if (!v706)
      {
        __break(1u);
        goto LABEL_212;
      }
LABEL_112:
      uint64_t v109 = 1;
      v216 = v710;
      sub_10011A134((uint64_t)v715, (uint64_t)v716, v706, v710, v717, 1);
LABEL_113:

      uint64_t v120 = &v724;
LABEL_52:

      goto LABEL_38;
    }
    uint64_t v105 = v83 + 3;
    if (v715 == (unsigned char *)(v83 + 3) && v716 == (void *)0x80000001005D5B10
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      static Logger.Tests.getter();
      uint64_t v217 = swift_allocObject();
      v218 = v717;
      *(void *)(v217 + 16) = v717;
      uint64_t v219 = swift_allocObject();
      *(void *)(v219 + 16) = v218;
      v703 = v71;
      v705 = Logger.logObject.getter();
      int v220 = static os_log_type_t.debug.getter();
      uint64_t v221 = swift_allocObject();
      *(unsigned char *)(v221 + 16) = 64;
      uint64_t v83 = swift_allocObject();
      uint64_t v107 = 8;
      *(unsigned char *)(v83 + 16) = 8;
      uint64_t v222 = swift_allocObject();
      *(void *)(v222 + 16) = sub_10013E8A0;
      *(void *)(v222 + 24) = v217;
      uint64_t v223 = swift_allocObject();
      *(void *)(v223 + 16) = sub_10013E4B8;
      *(void *)(v223 + 24) = v222;
      uint64_t v102 = (unsigned char *)swift_allocObject();
      v102[16] = 32;
      uint64_t v224 = swift_allocObject();
      *(unsigned char *)(v224 + 16) = 8;
      uint64_t v225 = swift_allocObject();
      *(void *)(v225 + 16) = sub_10013E8A4;
      *(void *)(v225 + 24) = v219;
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = sub_10013E4B4;
      *(void *)(v105 + 24) = v225;
      uint64_t v226 = swift_allocObject();
      sub_1004A1BC8(v226, 6);
      void *v227 = sub_10013E4C8;
      v227[1] = v221;
      v227[2] = sub_10013E4C8;
      v227[3] = v83;
      v227[4] = sub_10013E4C0;
      v227[5] = v223;
      v227[6] = sub_10013E4C8;
      v227[7] = v102;
      v227[8] = sub_10013E4C8;
      v227[9] = v224;
      v227[10] = sub_10013E4BC;
      v227[11] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v704) = v220;
      uint64_t v71 = (uint8_t *)v705;
      if (os_log_type_enabled(v705, (os_log_type_t)v220))
      {
        v228 = (uint8_t *)sub_10017BAFC();
        uint64_t v107 = swift_slowAlloc();
        uint64_t v719 = swift_slowAlloc();
        uint64_t v720 = v107;
        v702 = v228;
        *(_WORD *)v228 = 514;
        *(void *)&v718[0] = v228 + 2;
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v221;
        uint64_t v229 = v712;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        if (v229) {
          goto LABEL_344;
        }
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v83;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C0;
        *((void *)&v722 + 1) = v223;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v102;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v224;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4BC;
        *((void *)&v722 + 1) = v105;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        v230 = v71;
        v231 = v71;
        uint64_t v71 = v702;
        _os_log_impl((void *)&_mh_execute_header, v231, (os_log_type_t)v704, "ScrollBrowseListNatural %@ %s", v702, 0x16u);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_10017BB04();
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v677(v699, v714);
      if (v706) {
        goto LABEL_112;
      }
      __break(1u);
    }
    if (v715 == (unsigned char *)v83 && v716 == (void *)0x80000001005D5AF0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      static Logger.Tests.getter();
      uint64_t v232 = swift_allocObject();
      v233 = v717;
      *(void *)(v232 + 16) = v717;
      uint64_t v234 = swift_allocObject();
      *(void *)(v234 + 16) = v233;
      v703 = v71;
      v705 = Logger.logObject.getter();
      int v235 = static os_log_type_t.debug.getter();
      uint64_t v236 = swift_allocObject();
      *(unsigned char *)(v236 + 16) = 64;
      uint64_t v237 = swift_allocObject();
      *(unsigned char *)(v237 + 16) = 8;
      uint64_t v238 = swift_allocObject();
      *(void *)(v238 + 16) = sub_10013E8A0;
      *(void *)(v238 + 24) = v232;
      uint64_t v239 = swift_allocObject();
      *(void *)(v239 + 16) = sub_10013E4B8;
      *(void *)(v239 + 24) = v238;
      uint64_t v240 = swift_allocObject();
      *(unsigned char *)(v240 + 16) = 32;
      uint64_t v241 = swift_allocObject();
      *(unsigned char *)(v241 + 16) = 8;
      uint64_t v242 = swift_allocObject();
      *(void *)(v242 + 16) = sub_10013E8A4;
      *(void *)(v242 + 24) = v234;
      uint64_t v243 = swift_allocObject();
      *(void *)(v243 + 16) = sub_10013E4B4;
      *(void *)(v243 + 24) = v242;
      uint64_t v244 = swift_allocObject();
      sub_1004A1BC8(v244, 6);
      void *v245 = sub_10013E4C8;
      v245[1] = v236;
      v245[2] = sub_10013E4C8;
      v245[3] = v237;
      v245[4] = sub_10013E4C0;
      v245[5] = v239;
      v245[6] = sub_10013E4C8;
      v245[7] = v240;
      v245[8] = sub_10013E4C8;
      v245[9] = v241;
      v245[10] = sub_10013E4BC;
      v245[11] = v243;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v704) = v235;
      uint64_t v71 = (uint8_t *)v705;
      if (os_log_type_enabled(v705, (os_log_type_t)v235))
      {
        v246 = (uint8_t *)sub_10017BAFC();
        uint64_t v247 = swift_slowAlloc();
        uint64_t v719 = swift_slowAlloc();
        uint64_t v720 = v247;
        v702 = v246;
        *(_WORD *)v246 = 514;
        *(void *)&v718[0] = v246 + 2;
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v236;
        uint64_t v248 = v712;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        if (v248) {
          goto LABEL_344;
        }
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v237;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C0;
        *((void *)&v722 + 1) = v239;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v240;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4C8;
        *((void *)&v722 + 1) = v241;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        *(void *)&long long v722 = sub_10013E4BC;
        *((void *)&v722 + 1) = v243;
        sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
        swift_release();
        v249 = v71;
        v250 = v71;
        uint64_t v71 = v702;
        _os_log_impl((void *)&_mh_execute_header, v250, (os_log_type_t)v704, "ScrollSidebarNatural %@ %s", v702, 0x16u);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_10017BB04();
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v677(v698, v714);
      if (v706)
      {
        sub_100119038((uint64_t)v715, v716, v706, v717);
LABEL_132:

        goto LABEL_84;
      }
      __break(1u);
      goto LABEL_231;
    }
    goto LABEL_134;
  }
  if (v107)
  {
    sub_100123A34(0, (uint64_t)v715, (unint64_t)v716, v100, v102);

    goto LABEL_28;
  }
  if (v706)
  {
    long long v121 = (void *)DOCDocumentSourceIdentifierRecentDocuments;
    unint64_t v122 = (void *)swift_allocObject();
    id v123 = v707;
    uint64_t v124 = (uint64_t)v715;
    v122[2] = v707;
    v122[3] = v124;
    v122[4] = v716;
    v122[5] = v100;
    swift_bridgeObjectRetain();
    v123;
    id v125 = v71;
    sub_10011E108(v121, v100, (uint64_t)sub_10013E82C, (uint64_t)v122);

LABEL_55:
    goto LABEL_44;
  }
  __break(1u);
LABEL_144:
  if (v715 == (unsigned char *)(v83 - 3) && v716 == (void *)0x80000001005D5AD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v269 = swift_allocObject();
    v270 = v717;
    *(void *)(v269 + 16) = v717;
    uint64_t v271 = swift_allocObject();
    *(void *)(v271 + 16) = v270;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v272 = static os_log_type_t.debug.getter();
    uint64_t v273 = swift_allocObject();
    *(unsigned char *)(v273 + 16) = 64;
    uint64_t v274 = swift_allocObject();
    *(unsigned char *)(v274 + 16) = 8;
    uint64_t v275 = swift_allocObject();
    *(void *)(v275 + 16) = sub_10013E8A0;
    *(void *)(v275 + 24) = v269;
    uint64_t v276 = swift_allocObject();
    *(void *)(v276 + 16) = sub_10013E4B8;
    *(void *)(v276 + 24) = v275;
    uint64_t v277 = swift_allocObject();
    *(unsigned char *)(v277 + 16) = 32;
    uint64_t v278 = swift_allocObject();
    *(unsigned char *)(v278 + 16) = 8;
    uint64_t v279 = swift_allocObject();
    *(void *)(v279 + 16) = sub_10013E8A4;
    *(void *)(v279 + 24) = v271;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v279;
    uint64_t v280 = swift_allocObject();
    sub_1004A1BC8(v280, 6);
    void *v281 = sub_10013E4C8;
    v281[1] = v273;
    v281[2] = sub_10013E4C8;
    v281[3] = v274;
    v281[4] = sub_10013E4C0;
    v281[5] = v276;
    v281[6] = sub_10013E4C8;
    v281[7] = v277;
    v281[8] = sub_10013E4C8;
    v281[9] = v278;
    v281[10] = sub_10013E4BC;
    v281[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v272;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v272))
    {
      v282 = (uint8_t *)sub_10017BAFC();
      uint64_t v283 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v283;
      v702 = v282;
      *(_WORD *)v282 = 514;
      *(void *)&v718[0] = v282 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v273;
      uint64_t v284 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v284) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v274;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v276;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v277;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v278;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v285 = v71;
      v286 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v286, (os_log_type_t)v704, "BrowseEmptyFolder %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_152;
    }
LABEL_151:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_152:
    v677(v679, v714);
    if (v706)
    {
      uint64_t v287 = (uint64_t)v715;
      uint64_t v288 = (uint64_t)v716;
      long long v181 = v710;
      v289 = v710;
      v290 = v717;
      int v291 = 0;
LABEL_154:
      sub_1001393B8(v287, v288, v289, v290, 0, v291);
      goto LABEL_94;
    }
    __break(1u);
    goto LABEL_253;
  }
  if (v715 == v102 && v716 == (void *)0x80000001005D5AB0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v292 = swift_allocObject();
    v293 = v717;
    *(void *)(v292 + 16) = v717;
    uint64_t v294 = swift_allocObject();
    *(void *)(v294 + 16) = v293;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v295 = static os_log_type_t.debug.getter();
    uint64_t v296 = swift_allocObject();
    *(unsigned char *)(v296 + 16) = 64;
    uint64_t v297 = swift_allocObject();
    *(unsigned char *)(v297 + 16) = 8;
    uint64_t v298 = swift_allocObject();
    *(void *)(v298 + 16) = sub_10013E8A0;
    *(void *)(v298 + 24) = v292;
    uint64_t v299 = swift_allocObject();
    *(void *)(v299 + 16) = sub_10013E4B8;
    *(void *)(v299 + 24) = v298;
    uint64_t v300 = swift_allocObject();
    *(unsigned char *)(v300 + 16) = 32;
    uint64_t v301 = swift_allocObject();
    *(unsigned char *)(v301 + 16) = 8;
    uint64_t v302 = swift_allocObject();
    *(void *)(v302 + 16) = sub_10013E8A4;
    *(void *)(v302 + 24) = v294;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v302;
    uint64_t v303 = swift_allocObject();
    sub_1004A1BC8(v303, 6);
    void *v304 = sub_10013E4C8;
    v304[1] = v296;
    v304[2] = sub_10013E4C8;
    v304[3] = v297;
    v304[4] = sub_10013E4C0;
    v304[5] = v299;
    v304[6] = sub_10013E4C8;
    v304[7] = v300;
    v304[8] = sub_10013E4C8;
    v304[9] = v301;
    v304[10] = sub_10013E4BC;
    v304[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v295;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v295))
    {
      v305 = (uint8_t *)sub_10017BAFC();
      uint64_t v306 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v306;
      v702 = v305;
      *(_WORD *)v305 = 514;
      *(void *)&v718[0] = v305 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v296;
      uint64_t v307 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v307) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v297;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v299;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v300;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v301;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v308 = v71;
      v309 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v309, (os_log_type_t)v704, "Browse100ItemFolder %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_163;
    }
LABEL_162:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_163:
    v677(v680, v714);
    if (v706)
    {
      uint64_t v287 = (uint64_t)v715;
      uint64_t v288 = (uint64_t)v716;
      long long v181 = v710;
      v289 = v710;
      v290 = v717;
      int v291 = 2;
      goto LABEL_154;
    }
    __break(1u);
    goto LABEL_264;
  }
  if (v715 == (unsigned char *)v83 && v716 == (void *)0x80000001005D5A90
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v310 = swift_allocObject();
    v311 = v717;
    *(void *)(v310 + 16) = v717;
    uint64_t v312 = swift_allocObject();
    *(void *)(v312 + 16) = v311;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v313 = static os_log_type_t.debug.getter();
    uint64_t v314 = swift_allocObject();
    *(unsigned char *)(v314 + 16) = 64;
    uint64_t v315 = swift_allocObject();
    *(unsigned char *)(v315 + 16) = 8;
    uint64_t v316 = swift_allocObject();
    *(void *)(v316 + 16) = sub_10013E8A0;
    *(void *)(v316 + 24) = v310;
    uint64_t v317 = swift_allocObject();
    *(void *)(v317 + 16) = sub_10013E4B8;
    *(void *)(v317 + 24) = v316;
    uint64_t v318 = swift_allocObject();
    *(unsigned char *)(v318 + 16) = 32;
    uint64_t v319 = swift_allocObject();
    *(unsigned char *)(v319 + 16) = 8;
    uint64_t v320 = swift_allocObject();
    *(void *)(v320 + 16) = sub_10013E8A4;
    *(void *)(v320 + 24) = v312;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v320;
    uint64_t v321 = swift_allocObject();
    sub_1004A1BC8(v321, 6);
    void *v322 = sub_10013E4C8;
    v322[1] = v314;
    v322[2] = sub_10013E4C8;
    v322[3] = v315;
    v322[4] = sub_10013E4C0;
    v322[5] = v317;
    v322[6] = sub_10013E4C8;
    v322[7] = v318;
    v322[8] = sub_10013E4C8;
    v322[9] = v319;
    v322[10] = sub_10013E4BC;
    v322[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v313;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v313))
    {
      v323 = (uint8_t *)sub_10017BAFC();
      uint64_t v324 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v324;
      v702 = v323;
      *(_WORD *)v323 = 514;
      *(void *)&v718[0] = v323 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v314;
      uint64_t v325 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v325) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v315;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v317;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v318;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v319;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v326 = v71;
      v327 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v327, (os_log_type_t)v704, "Browse1000ItemFolder %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_173;
    }
LABEL_172:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_173:
    v677(v681, v714);
    if (v706)
    {
      uint64_t v287 = (uint64_t)v715;
      uint64_t v288 = (uint64_t)v716;
      long long v181 = v710;
      v289 = v710;
      v290 = v717;
      int v291 = 4;
      goto LABEL_154;
    }
    __break(1u);
    goto LABEL_274;
  }
  if (v715 == (unsigned char *)v83 && v716 == (void *)0x80000001005D5A70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v328 = swift_allocObject();
    v329 = v717;
    *(void *)(v328 + 16) = v717;
    uint64_t v330 = swift_allocObject();
    *(void *)(v330 + 16) = v329;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v331 = static os_log_type_t.debug.getter();
    uint64_t v332 = swift_allocObject();
    *(unsigned char *)(v332 + 16) = 64;
    uint64_t v333 = swift_allocObject();
    *(unsigned char *)(v333 + 16) = 8;
    uint64_t v334 = swift_allocObject();
    *(void *)(v334 + 16) = sub_10013E8A0;
    *(void *)(v334 + 24) = v328;
    uint64_t v335 = swift_allocObject();
    *(void *)(v335 + 16) = sub_10013E4B8;
    *(void *)(v335 + 24) = v334;
    uint64_t v336 = swift_allocObject();
    *(unsigned char *)(v336 + 16) = 32;
    uint64_t v337 = swift_allocObject();
    *(unsigned char *)(v337 + 16) = 8;
    uint64_t v338 = swift_allocObject();
    *(void *)(v338 + 16) = sub_10013E8A4;
    *(void *)(v338 + 24) = v330;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v338;
    uint64_t v339 = swift_allocObject();
    sub_1004A1BC8(v339, 6);
    void *v340 = sub_10013E4C8;
    v340[1] = v332;
    v340[2] = sub_10013E4C8;
    v340[3] = v333;
    v340[4] = sub_10013E4C0;
    v340[5] = v335;
    v340[6] = sub_10013E4C8;
    v340[7] = v336;
    v340[8] = sub_10013E4C8;
    v340[9] = v337;
    v340[10] = sub_10013E4BC;
    v340[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v331;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v331))
    {
      v341 = (uint8_t *)sub_10017BAFC();
      uint64_t v342 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v342;
      v702 = v341;
      *(_WORD *)v341 = 514;
      *(void *)&v718[0] = v341 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v332;
      uint64_t v343 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v343) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v333;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v335;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v336;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v337;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v344 = v71;
      v345 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v345, (os_log_type_t)v704, "ScrollBrowse %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_183;
    }
LABEL_182:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_183:
    v677(v682, v714);
    if (v706)
    {
      long long v181 = v710;
      sub_10011AF94((uint64_t)v715, (uint64_t)v716, v706, v710, v717, 0);
      goto LABEL_94;
    }
    __break(1u);
    goto LABEL_284;
  }
  if (v715 == (unsigned char *)(v83 + 14) && v716 == (void *)0x80000001005D5A40
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v346 = swift_allocObject();
    v347 = v717;
    *(void *)(v346 + 16) = v717;
    uint64_t v348 = swift_allocObject();
    *(void *)(v348 + 16) = v347;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v349 = static os_log_type_t.debug.getter();
    uint64_t v350 = swift_allocObject();
    *(unsigned char *)(v350 + 16) = 64;
    uint64_t v351 = swift_allocObject();
    *(unsigned char *)(v351 + 16) = 8;
    uint64_t v352 = swift_allocObject();
    *(void *)(v352 + 16) = sub_10013E8A0;
    *(void *)(v352 + 24) = v346;
    uint64_t v353 = swift_allocObject();
    *(void *)(v353 + 16) = sub_10013E4B8;
    *(void *)(v353 + 24) = v352;
    uint64_t v354 = swift_allocObject();
    *(unsigned char *)(v354 + 16) = 32;
    uint64_t v355 = swift_allocObject();
    *(unsigned char *)(v355 + 16) = 8;
    uint64_t v356 = swift_allocObject();
    *(void *)(v356 + 16) = sub_10013E8A4;
    *(void *)(v356 + 24) = v348;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v356;
    uint64_t v357 = swift_allocObject();
    sub_1004A1BC8(v357, 6);
    void *v358 = sub_10013E4C8;
    v358[1] = v350;
    v358[2] = sub_10013E4C8;
    v358[3] = v351;
    v358[4] = sub_10013E4C0;
    v358[5] = v353;
    v358[6] = sub_10013E4C8;
    v358[7] = v354;
    v358[8] = sub_10013E4C8;
    v358[9] = v355;
    v358[10] = sub_10013E4BC;
    v358[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v349;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v349))
    {
      v359 = (uint8_t *)sub_10017BAFC();
      uint64_t v360 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v360;
      v702 = v359;
      *(_WORD *)v359 = 514;
      *(void *)&v718[0] = v359 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v350;
      uint64_t v361 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v361) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v351;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v353;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v354;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v355;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v362 = v71;
      v363 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v363, (os_log_type_t)v704, "SwitchBrowseViewModeFromGridToList %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_193;
    }
LABEL_192:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_193:
    v677(v683, v714);
    if (v706)
    {
      v364 = (void *)swift_allocObject();
      v365 = v707;
      uint64_t v366 = (uint64_t)v715;
      v367 = v716;
      v364[2] = v707;
      v364[3] = v366;
      v368 = v717;
      v364[4] = v367;
      v364[5] = v368;
      uint64_t v109 = 1;
      v364[6] = 1;
      v369 = (void *)swift_allocObject();
      v369[2] = sub_10013E4CC;
      v369[3] = v364;
      v369[4] = v365;
      v369[5] = v368;
      id v370 = v365;
      v371 = v703;
      swift_bridgeObjectRetain();
      id v372 = v370;
      v373 = v371;
      swift_retain();
      v374 = v710;
      sub_10011E108(v710, v368, (uint64_t)sub_10013E828, (uint64_t)v369);

      swift_release();
      swift_release();
      goto LABEL_38;
    }
    __break(1u);
    goto LABEL_295;
  }
  if (v715 == (unsigned char *)(v83 + 16) && v716 == (void *)0x80000001005D5A10
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v375 = swift_allocObject();
    v376 = v717;
    *(void *)(v375 + 16) = v717;
    uint64_t v377 = swift_allocObject();
    *(void *)(v377 + 16) = v376;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v378 = static os_log_type_t.debug.getter();
    uint64_t v379 = swift_allocObject();
    *(unsigned char *)(v379 + 16) = 64;
    uint64_t v380 = swift_allocObject();
    *(unsigned char *)(v380 + 16) = 8;
    uint64_t v381 = swift_allocObject();
    *(void *)(v381 + 16) = sub_10013E8A0;
    *(void *)(v381 + 24) = v375;
    uint64_t v382 = swift_allocObject();
    *(void *)(v382 + 16) = sub_10013E4B8;
    *(void *)(v382 + 24) = v381;
    uint64_t v383 = swift_allocObject();
    *(unsigned char *)(v383 + 16) = 32;
    uint64_t v384 = swift_allocObject();
    *(unsigned char *)(v384 + 16) = 8;
    uint64_t v385 = swift_allocObject();
    *(void *)(v385 + 16) = sub_10013E8A4;
    *(void *)(v385 + 24) = v377;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v385;
    uint64_t v386 = swift_allocObject();
    sub_1004A1BC8(v386, 6);
    void *v387 = sub_10013E4C8;
    v387[1] = v379;
    v387[2] = sub_10013E4C8;
    v387[3] = v380;
    v387[4] = sub_10013E4C0;
    v387[5] = v382;
    v387[6] = sub_10013E4C8;
    v387[7] = v383;
    v387[8] = sub_10013E4C8;
    v387[9] = v384;
    v387[10] = sub_10013E4BC;
    v387[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v378;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v378))
    {
      v388 = (uint8_t *)sub_10017BAFC();
      uint64_t v389 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v389;
      v702 = v388;
      *(_WORD *)v388 = 514;
      *(void *)&v718[0] = v388 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v379;
      uint64_t v390 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v390) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v380;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v382;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v383;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v384;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v391 = v71;
      v392 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v392, (os_log_type_t)v704, "SwitchBrowseViewModeFromGridToColumn %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v677(v684, v714);
    if (v706)
    {
      v393 = (void *)swift_allocObject();
      v394 = v707;
      uint64_t v395 = (uint64_t)v715;
      v396 = v716;
      v393[2] = v707;
      v393[3] = v395;
      v397 = v717;
      v393[4] = v396;
      v393[5] = v397;
      v393[6] = 2;
      v398 = (void *)swift_allocObject();
      v398[2] = sub_10013E4CC;
      v398[3] = v393;
      v398[4] = v394;
      v398[5] = v397;
      id v399 = v394;
      v400 = v703;
      swift_bridgeObjectRetain();
      id v401 = v399;
      v402 = v400;
      swift_retain();
LABEL_204:
      v403 = v710;
      sub_10011E108(v710, v397, (uint64_t)sub_10013E828, (uint64_t)v398);

      swift_release();
      goto LABEL_44;
    }
    __break(1u);
    goto LABEL_305;
  }
  if (v715 == (unsigned char *)(v83 + 14) && v716 == (void *)0x80000001005D59E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v404 = swift_allocObject();
    v405 = v717;
    *(void *)(v404 + 16) = v717;
    uint64_t v406 = swift_allocObject();
    *(void *)(v406 + 16) = v405;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v407 = static os_log_type_t.debug.getter();
    uint64_t v408 = swift_allocObject();
    *(unsigned char *)(v408 + 16) = 64;
    uint64_t v409 = swift_allocObject();
    *(unsigned char *)(v409 + 16) = 8;
    uint64_t v410 = swift_allocObject();
    *(void *)(v410 + 16) = sub_10013E8A0;
    *(void *)(v410 + 24) = v404;
    uint64_t v411 = swift_allocObject();
    *(void *)(v411 + 16) = sub_10013E4B8;
    *(void *)(v411 + 24) = v410;
    uint64_t v412 = swift_allocObject();
    *(unsigned char *)(v412 + 16) = 32;
    uint64_t v413 = swift_allocObject();
    *(unsigned char *)(v413 + 16) = 8;
    uint64_t v414 = swift_allocObject();
    *(void *)(v414 + 16) = sub_10013E8A4;
    *(void *)(v414 + 24) = v406;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v414;
    uint64_t v415 = swift_allocObject();
    sub_1004A1BC8(v415, 6);
    void *v416 = sub_10013E4C8;
    v416[1] = v408;
    v416[2] = sub_10013E4C8;
    v416[3] = v409;
    v416[4] = sub_10013E4C0;
    v416[5] = v411;
    v416[6] = sub_10013E4C8;
    v416[7] = v412;
    v416[8] = sub_10013E4C8;
    v416[9] = v413;
    v416[10] = sub_10013E4BC;
    v416[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v407;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v407))
    {
      v417 = (uint8_t *)sub_10017BAFC();
      uint64_t v418 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v418;
      v702 = v417;
      *(_WORD *)v417 = 514;
      *(void *)&v718[0] = v417 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v408;
      uint64_t v419 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v419) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v409;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v411;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v412;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v413;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v420 = v71;
      v421 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v421, (os_log_type_t)v704, "SwitchBrowseViewModeFromListToGrid %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_213;
    }
LABEL_212:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_213:
    v677(v685, v714);
    if (v706)
    {
      v422 = (void *)swift_allocObject();
      v423 = v707;
      uint64_t v424 = (uint64_t)v715;
      v425 = v716;
      v422[2] = v707;
      v422[3] = v424;
      v397 = v717;
      v422[4] = v425;
      v422[5] = v397;
      v422[6] = 0;
      v398 = (void *)swift_allocObject();
      v398[2] = sub_10013D890;
      v398[3] = v422;
      v398[4] = v423;
      v398[5] = v397;
      id v426 = v423;
      v427 = v703;
      swift_bridgeObjectRetain();
      id v428 = v426;
      v402 = v427;
      swift_retain();
      goto LABEL_204;
    }
    __break(1u);
    goto LABEL_316;
  }
  if (v715 == v102 && v716 == (void *)0x80000001005D59C0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v429 = swift_allocObject();
    v430 = v717;
    *(void *)(v429 + 16) = v717;
    uint64_t v431 = swift_allocObject();
    *(void *)(v431 + 16) = v430;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v432 = static os_log_type_t.debug.getter();
    uint64_t v433 = swift_allocObject();
    *(unsigned char *)(v433 + 16) = 64;
    uint64_t v434 = swift_allocObject();
    *(unsigned char *)(v434 + 16) = 8;
    uint64_t v435 = swift_allocObject();
    *(void *)(v435 + 16) = sub_10013E8A0;
    *(void *)(v435 + 24) = v429;
    uint64_t v436 = swift_allocObject();
    *(void *)(v436 + 16) = sub_10013E4B8;
    *(void *)(v436 + 24) = v435;
    uint64_t v437 = swift_allocObject();
    *(unsigned char *)(v437 + 16) = 32;
    uint64_t v438 = swift_allocObject();
    *(unsigned char *)(v438 + 16) = 8;
    uint64_t v439 = swift_allocObject();
    *(void *)(v439 + 16) = sub_10013E8A4;
    *(void *)(v439 + 24) = v431;
    uint64_t v440 = swift_allocObject();
    *(void *)(v440 + 16) = sub_10013E4B4;
    *(void *)(v440 + 24) = v439;
    uint64_t v441 = swift_allocObject();
    sub_1004A1BC8(v441, 6);
    void *v442 = sub_10013E4C8;
    v442[1] = v433;
    v442[2] = sub_10013E4C8;
    v442[3] = v434;
    v442[4] = sub_10013E4C0;
    v442[5] = v436;
    v442[6] = sub_10013E4C8;
    v442[7] = v437;
    v442[8] = sub_10013E4C8;
    v442[9] = v438;
    v442[10] = sub_10013E4BC;
    v442[11] = v440;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v432;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v432))
    {
      v443 = (uint8_t *)sub_10017BAFC();
      uint64_t v444 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v444;
      v702 = v443;
      *(_WORD *)v443 = 514;
      *(void *)&v718[0] = v443 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v433;
      uint64_t v445 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v445) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v434;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v436;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v437;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v438;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v440;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v446 = v71;
      v447 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v447, (os_log_type_t)v704, "Browse300ItemFolder %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v677(v686, v714);
    if (v706)
    {
      uint64_t v287 = (uint64_t)v715;
      uint64_t v288 = (uint64_t)v716;
      long long v181 = v710;
      v289 = v710;
      v290 = v717;
      int v291 = 3;
      goto LABEL_154;
    }
    __break(1u);
    goto LABEL_326;
  }
  if (v715 == (unsigned char *)(v83 + 2) && v716 == (void *)0x80000001005D59A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v448 = swift_allocObject();
    v449 = v717;
    *(void *)(v448 + 16) = v717;
    uint64_t v450 = swift_allocObject();
    *(void *)(v450 + 16) = v449;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v451 = static os_log_type_t.debug.getter();
    uint64_t v452 = swift_allocObject();
    *(unsigned char *)(v452 + 16) = 64;
    uint64_t v453 = swift_allocObject();
    *(unsigned char *)(v453 + 16) = 8;
    uint64_t v454 = swift_allocObject();
    *(void *)(v454 + 16) = sub_10013E8A0;
    *(void *)(v454 + 24) = v448;
    uint64_t v455 = swift_allocObject();
    *(void *)(v455 + 16) = sub_10013E4B8;
    *(void *)(v455 + 24) = v454;
    uint64_t v456 = swift_allocObject();
    *(unsigned char *)(v456 + 16) = 32;
    uint64_t v457 = swift_allocObject();
    *(unsigned char *)(v457 + 16) = 8;
    uint64_t v458 = swift_allocObject();
    *(void *)(v458 + 16) = sub_10013E8A4;
    *(void *)(v458 + 24) = v450;
    uint64_t v459 = swift_allocObject();
    *(void *)(v459 + 16) = sub_10013E4B4;
    *(void *)(v459 + 24) = v458;
    uint64_t v460 = swift_allocObject();
    sub_1004A1BC8(v460, 6);
    void *v461 = sub_10013E4C8;
    v461[1] = v452;
    v461[2] = sub_10013E4C8;
    v461[3] = v453;
    v461[4] = sub_10013E4C0;
    v461[5] = v455;
    v461[6] = sub_10013E4C8;
    v461[7] = v456;
    v461[8] = sub_10013E4C8;
    v461[9] = v457;
    v461[10] = sub_10013E4BC;
    v461[11] = v459;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v451;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v451))
    {
      v462 = (uint8_t *)sub_10017BAFC();
      uint64_t v463 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v463;
      v702 = v462;
      *(_WORD *)v462 = 514;
      *(void *)&v718[0] = v462 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v452;
      uint64_t v464 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v464) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v453;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v455;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v456;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v457;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v459;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v465 = v71;
      v466 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v466, (os_log_type_t)v704, "BrowseSMB300ItemFolder %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_232;
    }
LABEL_231:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_232:
    v677(v687, v714);
    if (v706)
    {
      v467 = (void **)&DOCDocumentSourceIdentifierSMBFileProvider;
LABEL_234:
      v468 = *v467;
      uint64_t v469 = (uint64_t)v715;
      uint64_t v470 = (uint64_t)v716;
      v471 = v717;
      int v472 = 3;
LABEL_235:
      sub_1001393B8(v469, v470, v468, v471, 0, v472);
      goto LABEL_132;
    }
LABEL_326:
    __break(1u);
    goto LABEL_327;
  }
  if (v715 == (unsigned char *)(v83 + 2) && v716 == (void *)0x80000001005D5980
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v473 = swift_allocObject();
    v474 = v717;
    *(void *)(v473 + 16) = v717;
    uint64_t v475 = swift_allocObject();
    *(void *)(v475 + 16) = v474;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v476 = static os_log_type_t.debug.getter();
    uint64_t v477 = swift_allocObject();
    *(unsigned char *)(v477 + 16) = 64;
    uint64_t v478 = swift_allocObject();
    *(unsigned char *)(v478 + 16) = 8;
    uint64_t v479 = swift_allocObject();
    *(void *)(v479 + 16) = sub_10013E8A0;
    *(void *)(v479 + 24) = v473;
    uint64_t v480 = swift_allocObject();
    *(void *)(v480 + 16) = sub_10013E4B8;
    *(void *)(v480 + 24) = v479;
    uint64_t v481 = swift_allocObject();
    *(unsigned char *)(v481 + 16) = 32;
    uint64_t v482 = swift_allocObject();
    *(unsigned char *)(v482 + 16) = 8;
    uint64_t v483 = swift_allocObject();
    *(void *)(v483 + 16) = sub_10013E8A4;
    *(void *)(v483 + 24) = v475;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v483;
    uint64_t v484 = swift_allocObject();
    sub_1004A1BC8(v484, 6);
    void *v485 = sub_10013E4C8;
    v485[1] = v477;
    v485[2] = sub_10013E4C8;
    v485[3] = v478;
    v485[4] = sub_10013E4C0;
    v485[5] = v480;
    v485[6] = sub_10013E4C8;
    v485[7] = v481;
    v485[8] = sub_10013E4C8;
    v485[9] = v482;
    v485[10] = sub_10013E4BC;
    v485[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v476;
    uint64_t v71 = (uint8_t *)v705;
    if (!os_log_type_enabled(v705, (os_log_type_t)v476))
    {
LABEL_243:

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_244;
    }
    v486 = (uint8_t *)sub_10017BAFC();
    uint64_t v487 = swift_slowAlloc();
    uint64_t v719 = swift_slowAlloc();
    uint64_t v720 = v487;
    v702 = v486;
    *(_WORD *)v486 = 514;
    *(void *)&v718[0] = v486 + 2;
    *(void *)&long long v722 = sub_10013E4C8;
    *((void *)&v722 + 1) = v477;
    uint64_t v488 = v712;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    if (!v488)
    {
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v478;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v480;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v481;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v482;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v489 = v71;
      v490 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v490, (os_log_type_t)v704, "BrowseUSB300ItemFolder %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

LABEL_244:
      v677(v688, v714);
      if (v706)
      {
        v467 = (void **)&DOCDocumentSourceIdentifierExternalDeviceFileProvider;
        goto LABEL_234;
      }
      __break(1u);
      goto LABEL_331;
    }
    goto LABEL_344;
  }
  if (v715 == (unsigned char *)(v83 + 6) && v716 == (void *)0x80000001005D5960
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v491 = swift_allocObject();
    v492 = v717;
    *(void *)(v491 + 16) = v717;
    uint64_t v493 = swift_allocObject();
    *(void *)(v493 + 16) = v492;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v494 = static os_log_type_t.debug.getter();
    uint64_t v495 = swift_allocObject();
    *(unsigned char *)(v495 + 16) = 64;
    uint64_t v496 = swift_allocObject();
    *(unsigned char *)(v496 + 16) = 8;
    uint64_t v497 = swift_allocObject();
    *(void *)(v497 + 16) = sub_10013E8A0;
    *(void *)(v497 + 24) = v491;
    uint64_t v498 = swift_allocObject();
    *(void *)(v498 + 16) = sub_10013E4B8;
    *(void *)(v498 + 24) = v497;
    uint64_t v499 = swift_allocObject();
    *(unsigned char *)(v499 + 16) = 32;
    uint64_t v500 = swift_allocObject();
    *(unsigned char *)(v500 + 16) = 8;
    uint64_t v501 = swift_allocObject();
    *(void *)(v501 + 16) = sub_10013E8A4;
    *(void *)(v501 + 24) = v493;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v501;
    uint64_t v502 = swift_allocObject();
    sub_1004A1BC8(v502, 6);
    void *v503 = sub_10013E4C8;
    v503[1] = v495;
    v503[2] = sub_10013E4C8;
    v503[3] = v496;
    v503[4] = sub_10013E4C0;
    v503[5] = v498;
    v503[6] = sub_10013E4C8;
    v503[7] = v499;
    v503[8] = sub_10013E4C8;
    v503[9] = v500;
    v503[10] = sub_10013E4BC;
    v503[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v494;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v494))
    {
      v504 = (uint8_t *)sub_10017BAFC();
      uint64_t v505 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v505;
      v702 = v504;
      *(_WORD *)v504 = 514;
      *(void *)&v718[0] = v504 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v495;
      uint64_t v506 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v506) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v496;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v498;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v499;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v500;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v507 = v71;
      v508 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v508, (os_log_type_t)v704, "SwitchLocationToiCloudTest %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_254;
    }
LABEL_253:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_254:
    v677(v689, v714);
    if (!v706)
    {
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
      goto LABEL_333;
    }
    v509 = (void *)static DOCDocumentSourceIdentifier.iCloudCurrent.getter();
    v510 = (void *)swift_allocObject();
    v511 = v707;
    uint64_t v512 = (uint64_t)v715;
    v510[2] = v707;
    v510[3] = v512;
    v513 = v717;
    v510[4] = v716;
    v510[5] = v513;
    swift_bridgeObjectRetain();
    id v514 = v511;
    v515 = v703;
    sub_10011E108(v509, v513, (uint64_t)sub_10013E82C, (uint64_t)v510);

    goto LABEL_256;
  }
  if (v715 == (unsigned char *)v105 && v716 == (void *)0x80000001005D5940
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v516 = swift_allocObject();
    v517 = v717;
    *(void *)(v516 + 16) = v717;
    uint64_t v518 = swift_allocObject();
    *(void *)(v518 + 16) = v517;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v519 = static os_log_type_t.debug.getter();
    uint64_t v520 = swift_allocObject();
    *(unsigned char *)(v520 + 16) = 64;
    uint64_t v521 = swift_allocObject();
    *(unsigned char *)(v521 + 16) = 8;
    uint64_t v522 = swift_allocObject();
    *(void *)(v522 + 16) = sub_10013E8A0;
    *(void *)(v522 + 24) = v516;
    uint64_t v523 = swift_allocObject();
    *(void *)(v523 + 16) = sub_10013E4B8;
    *(void *)(v523 + 24) = v522;
    uint64_t v524 = swift_allocObject();
    *(unsigned char *)(v524 + 16) = 32;
    uint64_t v525 = swift_allocObject();
    *(unsigned char *)(v525 + 16) = 8;
    uint64_t v526 = swift_allocObject();
    *(void *)(v526 + 16) = sub_10013E8A4;
    *(void *)(v526 + 24) = v518;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v526;
    uint64_t v527 = swift_allocObject();
    sub_1004A1BC8(v527, 6);
    void *v528 = sub_10013E4C8;
    v528[1] = v520;
    v528[2] = sub_10013E4C8;
    v528[3] = v521;
    v528[4] = sub_10013E4C0;
    v528[5] = v523;
    v528[6] = sub_10013E4C8;
    v528[7] = v524;
    v528[8] = sub_10013E4C8;
    v528[9] = v525;
    v528[10] = sub_10013E4BC;
    v528[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v519;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v519))
    {
      v529 = (uint8_t *)sub_10017BAFC();
      uint64_t v530 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v530;
      v702 = v529;
      *(_WORD *)v529 = 514;
      *(void *)&v718[0] = v529 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v520;
      uint64_t v531 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v531) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v521;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v523;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v524;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v525;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v532 = v71;
      v533 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v533, (os_log_type_t)v704, "SwitchLocationToSMBTest %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

LABEL_265:
      v677(v690, v714);
      if (v706)
      {
        v468 = (void *)DOCDocumentSourceIdentifierSMBFileProvider;
        uint64_t v469 = (uint64_t)v715;
        uint64_t v470 = (uint64_t)v716;
        v471 = v717;
        int v472 = 5;
        goto LABEL_235;
      }
      goto LABEL_332;
    }
LABEL_264:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_265;
  }
  if (v715 == (unsigned char *)v105 && v716 == (void *)0x80000001005D5920
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v534 = swift_allocObject();
    v535 = v717;
    *(void *)(v534 + 16) = v717;
    uint64_t v536 = swift_allocObject();
    *(void *)(v536 + 16) = v535;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v537 = static os_log_type_t.debug.getter();
    uint64_t v538 = swift_allocObject();
    *(unsigned char *)(v538 + 16) = 64;
    uint64_t v539 = swift_allocObject();
    *(unsigned char *)(v539 + 16) = 8;
    uint64_t v540 = swift_allocObject();
    *(void *)(v540 + 16) = sub_10013E8A0;
    *(void *)(v540 + 24) = v534;
    uint64_t v541 = swift_allocObject();
    *(void *)(v541 + 16) = sub_10013E4B8;
    *(void *)(v541 + 24) = v540;
    uint64_t v542 = swift_allocObject();
    *(unsigned char *)(v542 + 16) = 32;
    uint64_t v543 = swift_allocObject();
    *(unsigned char *)(v543 + 16) = 8;
    uint64_t v544 = swift_allocObject();
    *(void *)(v544 + 16) = sub_10013E8A4;
    *(void *)(v544 + 24) = v536;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v544;
    uint64_t v545 = swift_allocObject();
    sub_1004A1BC8(v545, 6);
    void *v546 = sub_10013E4C8;
    v546[1] = v538;
    v546[2] = sub_10013E4C8;
    v546[3] = v539;
    v546[4] = sub_10013E4C0;
    v546[5] = v541;
    v546[6] = sub_10013E4C8;
    v546[7] = v542;
    v546[8] = sub_10013E4C8;
    v546[9] = v543;
    v546[10] = sub_10013E4BC;
    v546[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v537;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v537))
    {
      v547 = (uint8_t *)sub_10017BAFC();
      uint64_t v548 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v548;
      v702 = v547;
      *(_WORD *)v547 = 514;
      *(void *)&v718[0] = v547 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v538;
      uint64_t v549 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v549) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v539;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v541;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v542;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v543;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v550 = v71;
      v551 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v551, (os_log_type_t)v704, "SwitchLocationToUSBTest %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_275;
    }
LABEL_274:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_275:
    v677(v691, v714);
    if (!v706)
    {
LABEL_333:
      __break(1u);
      goto LABEL_334;
    }
    v552 = (void *)DOCDocumentSourceIdentifierExternalDeviceFileProvider;
    v553 = (void *)swift_allocObject();
    v554 = v707;
    uint64_t v555 = (uint64_t)v715;
    v553[2] = v707;
    v553[3] = v555;
    v556 = v717;
    v553[4] = v716;
    v553[5] = v556;
    swift_bridgeObjectRetain();
    id v557 = v554;
    v515 = v703;
    sub_10011E108(v552, v556, (uint64_t)sub_10013D6F4, (uint64_t)v553);
LABEL_256:

    goto LABEL_55;
  }
  uint64_t v105 = v83 - 2;
  if (v715 == (unsigned char *)(v83 - 2) && v716 == (void *)0x80000001005D5900
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v558 = swift_allocObject();
    v559 = v717;
    *(void *)(v558 + 16) = v717;
    uint64_t v560 = swift_allocObject();
    *(void *)(v560 + 16) = v559;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v561 = static os_log_type_t.debug.getter();
    uint64_t v562 = swift_allocObject();
    *(unsigned char *)(v562 + 16) = 64;
    uint64_t v563 = swift_allocObject();
    *(unsigned char *)(v563 + 16) = 8;
    uint64_t v564 = swift_allocObject();
    *(void *)(v564 + 16) = sub_10013E8A0;
    *(void *)(v564 + 24) = v558;
    uint64_t v565 = swift_allocObject();
    *(void *)(v565 + 16) = sub_10013E4B8;
    *(void *)(v565 + 24) = v564;
    uint64_t v566 = swift_allocObject();
    *(unsigned char *)(v566 + 16) = 32;
    uint64_t v567 = swift_allocObject();
    *(unsigned char *)(v567 + 16) = 8;
    uint64_t v568 = swift_allocObject();
    *(void *)(v568 + 16) = sub_10013E8A4;
    *(void *)(v568 + 24) = v560;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v568;
    uint64_t v569 = swift_allocObject();
    sub_1004A1BC8(v569, 6);
    void *v570 = sub_10013E4C8;
    v570[1] = v562;
    v570[2] = sub_10013E4C8;
    v570[3] = v563;
    v570[4] = sub_10013E4C0;
    v570[5] = v565;
    v570[6] = sub_10013E4C8;
    v570[7] = v566;
    v570[8] = sub_10013E4C8;
    v570[9] = v567;
    v570[10] = sub_10013E4BC;
    v570[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v561;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v561))
    {
      v571 = (uint8_t *)sub_10017BAFC();
      uint64_t v572 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v572;
      v702 = v571;
      *(_WORD *)v571 = 514;
      *(void *)&v718[0] = v571 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v562;
      uint64_t v573 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v573) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v563;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v565;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v566;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v567;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v574 = v71;
      v575 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v575, (os_log_type_t)v704, "OpenQuickLookImage %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_285;
    }
LABEL_284:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_285:
    v677(v692, v714);
    if (!v706)
    {
LABEL_334:
      __break(1u);
      goto LABEL_335;
    }
    v576 = (void *)DOCDocumentSourceIdentifierLocal;
    uint64_t v577 = (uint64_t)v715;
    uint64_t v578 = (uint64_t)v716;
    uint64_t v579 = v706;
    v580 = v717;
    char v581 = 6;
LABEL_287:
    sub_100127E20(v577, v578, v579, v576, v580, 0, v581);
    goto LABEL_132;
  }
  if (v715 == (unsigned char *)v107 && v716 == (void *)0x80000001005D58E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v582 = swift_allocObject();
    v583 = v717;
    *(void *)(v582 + 16) = v717;
    uint64_t v584 = swift_allocObject();
    *(void *)(v584 + 16) = v583;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v585 = static os_log_type_t.debug.getter();
    uint64_t v586 = swift_allocObject();
    *(unsigned char *)(v586 + 16) = 64;
    uint64_t v587 = swift_allocObject();
    *(unsigned char *)(v587 + 16) = 8;
    uint64_t v588 = swift_allocObject();
    *(void *)(v588 + 16) = sub_10013E8A0;
    *(void *)(v588 + 24) = v582;
    uint64_t v589 = swift_allocObject();
    *(void *)(v589 + 16) = sub_10013E4B8;
    *(void *)(v589 + 24) = v588;
    uint64_t v590 = swift_allocObject();
    *(unsigned char *)(v590 + 16) = 32;
    uint64_t v591 = swift_allocObject();
    *(unsigned char *)(v591 + 16) = 8;
    uint64_t v592 = swift_allocObject();
    *(void *)(v592 + 16) = sub_10013E8A4;
    *(void *)(v592 + 24) = v584;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v592;
    uint64_t v593 = swift_allocObject();
    sub_1004A1BC8(v593, 6);
    void *v594 = sub_10013E4C8;
    v594[1] = v586;
    v594[2] = sub_10013E4C8;
    v594[3] = v587;
    v594[4] = sub_10013E4C0;
    v594[5] = v589;
    v594[6] = sub_10013E4C8;
    v594[7] = v590;
    v594[8] = sub_10013E4C8;
    v594[9] = v591;
    v594[10] = sub_10013E4BC;
    v594[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v585;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v585))
    {
      v595 = (uint8_t *)sub_10017BAFC();
      uint64_t v596 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v596;
      v702 = v595;
      *(_WORD *)v595 = 514;
      *(void *)&v718[0] = v595 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v586;
      uint64_t v597 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v597) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v587;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v589;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v590;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v591;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v598 = v71;
      v599 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v599, (os_log_type_t)v704, "OpenQuickLookPDF %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_296;
    }
LABEL_295:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_296:
    v677(v693, v714);
    if (!v706)
    {
LABEL_335:
      __break(1u);
      goto LABEL_336;
    }
    v576 = (void *)DOCDocumentSourceIdentifierLocal;
    uint64_t v577 = (uint64_t)v715;
    uint64_t v578 = (uint64_t)v716;
    uint64_t v579 = v706;
    v580 = v717;
    char v581 = 7;
    goto LABEL_287;
  }
  if (v715 == v102 && v716 == (void *)0x80000001005D58C0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v600 = swift_allocObject();
    v601 = v717;
    *(void *)(v600 + 16) = v717;
    uint64_t v602 = swift_allocObject();
    *(void *)(v602 + 16) = v601;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v603 = static os_log_type_t.debug.getter();
    uint64_t v604 = swift_allocObject();
    *(unsigned char *)(v604 + 16) = 64;
    uint64_t v605 = swift_allocObject();
    *(unsigned char *)(v605 + 16) = 8;
    uint64_t v606 = swift_allocObject();
    *(void *)(v606 + 16) = sub_10013E8A0;
    *(void *)(v606 + 24) = v600;
    uint64_t v607 = swift_allocObject();
    *(void *)(v607 + 16) = sub_10013E4B8;
    *(void *)(v607 + 24) = v606;
    uint64_t v608 = swift_allocObject();
    *(unsigned char *)(v608 + 16) = 32;
    uint64_t v609 = swift_allocObject();
    *(unsigned char *)(v609 + 16) = 8;
    uint64_t v610 = swift_allocObject();
    *(void *)(v610 + 16) = sub_10013E8A4;
    *(void *)(v610 + 24) = v602;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v610;
    uint64_t v611 = swift_allocObject();
    sub_1004A1BC8(v611, 6);
    void *v612 = sub_10013E4C8;
    v612[1] = v604;
    v612[2] = sub_10013E4C8;
    v612[3] = v605;
    v612[4] = sub_10013E4C0;
    v612[5] = v607;
    v612[6] = sub_10013E4C8;
    v612[7] = v608;
    v612[8] = sub_10013E4C8;
    v612[9] = v609;
    v612[10] = sub_10013E4BC;
    v612[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v603;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v603))
    {
      v613 = (uint8_t *)sub_10017BAFC();
      uint64_t v614 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v614;
      v702 = v613;
      *(_WORD *)v613 = 514;
      *(void *)&v718[0] = v613 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v604;
      uint64_t v615 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v615) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v605;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v607;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v608;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v609;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v616 = v71;
      v617 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v617, (os_log_type_t)v704, "CloseQuickLookImage %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_306;
    }
LABEL_305:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_306:
    v677(v694, v714);
    if (!v706)
    {
LABEL_336:
      __break(1u);
      goto LABEL_337;
    }
    v618 = (void *)DOCDocumentSourceIdentifierLocal;
    uint64_t v619 = (uint64_t)v715;
    uint64_t v620 = (uint64_t)v716;
    uint64_t v621 = v706;
    v622 = v717;
    char v623 = 6;
LABEL_308:
    sub_100128270(v619, v620, v621, v618, v622, 0, v623);
    goto LABEL_132;
  }
  if (v715 == (unsigned char *)(v83 - 3) && v716 == (void *)0x80000001005D58A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v624 = swift_allocObject();
    v625 = v717;
    *(void *)(v624 + 16) = v717;
    uint64_t v626 = swift_allocObject();
    *(void *)(v626 + 16) = v625;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v627 = static os_log_type_t.debug.getter();
    uint64_t v628 = swift_allocObject();
    *(unsigned char *)(v628 + 16) = 64;
    uint64_t v629 = swift_allocObject();
    *(unsigned char *)(v629 + 16) = 8;
    uint64_t v630 = swift_allocObject();
    *(void *)(v630 + 16) = sub_10013E8A0;
    *(void *)(v630 + 24) = v624;
    uint64_t v631 = swift_allocObject();
    *(void *)(v631 + 16) = sub_10013E4B8;
    *(void *)(v631 + 24) = v630;
    uint64_t v632 = swift_allocObject();
    *(unsigned char *)(v632 + 16) = 32;
    uint64_t v633 = swift_allocObject();
    *(unsigned char *)(v633 + 16) = 8;
    uint64_t v634 = swift_allocObject();
    *(void *)(v634 + 16) = sub_10013E8A4;
    *(void *)(v634 + 24) = v626;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10013E4B4;
    *(void *)(v105 + 24) = v634;
    uint64_t v635 = swift_allocObject();
    sub_1004A1BC8(v635, 6);
    void *v636 = sub_10013E4C8;
    v636[1] = v628;
    v636[2] = sub_10013E4C8;
    v636[3] = v629;
    v636[4] = sub_10013E4C0;
    v636[5] = v631;
    v636[6] = sub_10013E4C8;
    v636[7] = v632;
    v636[8] = sub_10013E4C8;
    v636[9] = v633;
    v636[10] = sub_10013E4BC;
    v636[11] = v105;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v627;
    uint64_t v71 = (uint8_t *)v705;
    if (os_log_type_enabled(v705, (os_log_type_t)v627))
    {
      v637 = (uint8_t *)sub_10017BAFC();
      uint64_t v638 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v638;
      v702 = v637;
      *(_WORD *)v637 = 514;
      *(void *)&v718[0] = v637 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v628;
      uint64_t v639 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v639) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v629;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v631;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v632;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v633;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v105;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v640 = v71;
      v641 = v71;
      uint64_t v71 = v702;
      _os_log_impl((void *)&_mh_execute_header, v641, (os_log_type_t)v704, "CloseQuickLookPDF %@ %s", v702, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_317;
    }
LABEL_316:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_317:
    v677(v695, v714);
    if (!v706)
    {
LABEL_337:
      __break(1u);
      goto LABEL_338;
    }
    v618 = (void *)DOCDocumentSourceIdentifierLocal;
    uint64_t v619 = (uint64_t)v715;
    uint64_t v620 = (uint64_t)v716;
    uint64_t v621 = v706;
    v622 = v717;
    char v623 = 7;
    goto LABEL_308;
  }
  if (v715 == (unsigned char *)(v83 + 5) && v716 == (void *)0x80000001005D5880
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static Logger.Tests.getter();
    uint64_t v642 = swift_allocObject();
    v643 = v717;
    *(void *)(v642 + 16) = v717;
    uint64_t v644 = swift_allocObject();
    *(void *)(v644 + 16) = v643;
    v703 = v71;
    v705 = Logger.logObject.getter();
    int v645 = static os_log_type_t.debug.getter();
    uint64_t v646 = swift_allocObject();
    *(unsigned char *)(v646 + 16) = 64;
    uint64_t v647 = swift_allocObject();
    *(unsigned char *)(v647 + 16) = 8;
    uint64_t v648 = swift_allocObject();
    *(void *)(v648 + 16) = sub_10013E8A0;
    *(void *)(v648 + 24) = v642;
    uint64_t v649 = swift_allocObject();
    *(void *)(v649 + 16) = sub_10013E4B8;
    *(void *)(v649 + 24) = v648;
    uint64_t v650 = swift_allocObject();
    *(unsigned char *)(v650 + 16) = 32;
    uint64_t v651 = swift_allocObject();
    *(unsigned char *)(v651 + 16) = 8;
    uint64_t v652 = swift_allocObject();
    *(void *)(v652 + 16) = sub_10013E8A4;
    *(void *)(v652 + 24) = v644;
    uint64_t v653 = swift_allocObject();
    *(void *)(v653 + 16) = sub_10013E4B4;
    *(void *)(v653 + 24) = v652;
    uint64_t v654 = swift_allocObject();
    uint64_t v71 = (uint8_t *)sub_1004A1BC8(v654, 6);
    void *v655 = sub_10013E4C8;
    v655[1] = v646;
    v655[2] = sub_10013E4C8;
    v655[3] = v647;
    v655[4] = sub_10013E4C0;
    v655[5] = v649;
    v655[6] = sub_10013E4C8;
    v655[7] = v650;
    v655[8] = sub_10013E4C8;
    v655[9] = v651;
    v655[10] = sub_10013E4BC;
    v655[11] = v653;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v704) = v645;
    if (os_log_type_enabled(v705, (os_log_type_t)v645))
    {
      uint64_t v71 = (uint8_t *)sub_10017BAFC();
      uint64_t v656 = swift_slowAlloc();
      uint64_t v719 = swift_slowAlloc();
      uint64_t v720 = v656;
      *(_WORD *)uint64_t v71 = 514;
      *(void *)&v718[0] = v71 + 2;
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v646;
      uint64_t v657 = v712;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      if (v657) {
        goto LABEL_344;
      }
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v647;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C0;
      *((void *)&v722 + 1) = v649;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v650;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v651;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v653;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v658 = v705;
      _os_log_impl((void *)&_mh_execute_header, v705, (os_log_type_t)v704, "SwipeQuickLookPDFAndImage %@ %s", v71, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

LABEL_328:
      v677(v696, v714);
      if (v706)
      {
        sub_100128D1C((uint64_t)v715, (uint64_t)v716, v706, DOCDocumentSourceIdentifierLocal, v717, 0, 8);
        goto LABEL_132;
      }
      goto LABEL_345;
    }
LABEL_327:

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_328;
  }
LABEL_338:
  if ((v715 != (unsigned char *)v105 || v716 != (void *)0x80000001005D5860)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_346;
  }
  static Logger.Tests.getter();
  uint64_t v659 = swift_allocObject();
  v660 = v717;
  *(void *)(v659 + 16) = v717;
  uint64_t v661 = swift_allocObject();
  *(void *)(v661 + 16) = v660;
  v703 = v71;
  v705 = Logger.logObject.getter();
  int v662 = static os_log_type_t.debug.getter();
  uint64_t v663 = swift_allocObject();
  *(unsigned char *)(v663 + 16) = 64;
  uint64_t v664 = swift_allocObject();
  *(unsigned char *)(v664 + 16) = 8;
  uint64_t v665 = swift_allocObject();
  *(void *)(v665 + 16) = sub_10013E8A0;
  *(void *)(v665 + 24) = v659;
  uint64_t v666 = swift_allocObject();
  *(void *)(v666 + 16) = sub_10013D53C;
  *(void *)(v666 + 24) = v665;
  uint64_t v667 = swift_allocObject();
  *(unsigned char *)(v667 + 16) = 32;
  uint64_t v668 = swift_allocObject();
  *(unsigned char *)(v668 + 16) = 8;
  uint64_t v669 = swift_allocObject();
  *(void *)(v669 + 16) = sub_10013E8A4;
  *(void *)(v669 + 24) = v661;
  uint64_t v670 = swift_allocObject();
  *(void *)(v670 + 16) = sub_10013E4B4;
  *(void *)(v670 + 24) = v669;
  uint64_t v671 = swift_allocObject();
  sub_1004A1BC8(v671, 6);
  void *v672 = sub_10013E4C8;
  v672[1] = v663;
  v672[2] = sub_10013E4C8;
  v672[3] = v664;
  v672[4] = sub_10013D544;
  v672[5] = v666;
  v672[6] = sub_10013E4C8;
  v672[7] = v667;
  v672[8] = sub_10013E4C8;
  v672[9] = v668;
  v672[10] = sub_10013E4BC;
  v672[11] = v670;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  LODWORD(v704) = v662;
  if (os_log_type_enabled(v705, (os_log_type_t)v662))
  {
    uint64_t v71 = (uint8_t *)sub_10017BAFC();
    uint64_t v673 = swift_slowAlloc();
    uint64_t v719 = swift_slowAlloc();
    uint64_t v720 = v673;
    *(_WORD *)uint64_t v71 = 514;
    *(void *)&v718[0] = v71 + 2;
    *(void *)&long long v722 = sub_10013E4C8;
    *((void *)&v722 + 1) = v663;
    uint64_t v674 = v712;
    sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
    if (!v674)
    {
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v664;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013D544;
      *((void *)&v722 + 1) = v666;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v667;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4C8;
      *((void *)&v722 + 1) = v668;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      *(void *)&long long v722 = sub_10013E4BC;
      *((void *)&v722 + 1) = v670;
      sub_10019FE90((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v722, (uint64_t)v718, (uint64_t)&v720, (uint64_t)&v719);
      swift_release();
      v675 = v705;
      _os_log_impl((void *)&_mh_execute_header, v705, (os_log_type_t)v704, "ZoomQuickLookImage %@ %s", v71, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10017BB04();

      goto LABEL_348;
    }
    goto LABEL_344;
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
LABEL_348:
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v677)(v697, v714);
  if (v706)
  {
    sub_10012968C((uint64_t)v715, (uint64_t)v716, v706, DOCDocumentSourceIdentifierLocal, v717, 0, 6);
    goto LABEL_132;
  }
  __break(1u);
  return result;
}

uint64_t sub_100135B58(void *a1)
{
  return String.init<A>(describing:)();
}

id sub_100135C54()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCApplication();
  return [super dealloc];
}

BOOL sub_100135CE8()
{
  uint64_t v1 = (unsigned char *)(*v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_gatheringThumbnails);
  swift_beginAccess();
  return (*v1 & 1) == 0;
}

id sub_100135D40()
{
  uint64_t v1 = (char *)*v0;
  [*v0 loadViewIfNeeded];
  id result = *(id *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (result)
  {
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100135D98()
{
  return sub_10013C6BC((uint64_t (*)(void, void, void, void, void, void, void, void))sub_100129798);
}

id sub_100135DB0(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, void *a6)
{
  uint64_t v87 = a6;
  LODWORD(v89) = a5;
  LODWORD(v88) = a4;
  os_log_type_t v92 = (void *)a1;
  uint64_t v77 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v85 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for DispatchQoS();
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v83 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for DispatchTimeInterval();
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v11 = (id *)((char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v82 = type metadata accessor for DispatchTime();
  uint64_t v81 = *(void *)(v82 - 8);
  uint64_t v12 = __chkstk_darwin(v82);
  uint64_t v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  NSString v80 = (char *)&v75 - v15;
  uint64_t v91 = type metadata accessor for Logger();
  uint64_t v90 = *(void *)(v91 - 8);
  uint64_t v16 = __chkstk_darwin(v91);
  uint64_t v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v75 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v75 - v22;
  v100[3] = type metadata accessor for DOCItemCollectionViewController(0);
  v100[4] = &off_10068D2C8;
  v100[0] = a3;
  uint64_t v24 = a3;
  id result = [v24 loadViewIfNeeded];
  uint64_t v26 = *(void **)&v24[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v26)
  {
    uint64_t v27 = &v24[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_gatheringThumbnails];
    swift_beginAccess();
    char v28 = *v27;
    id v29 = v26;
    uint64_t v30 = v29;
    if (v28)
    {
      id v75 = v29;
      static Logger.Tests.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v31 = Logger.logObject.getter();
      unint64_t v32 = a2;
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        long long aBlock = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)&v99[0] = sub_10009B0E4((uint64_t)v92, v32, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v31, v33, "waiting before starting test %s. items or thumbnails still gathering", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v90 + 8))(v23, v91);
      uint64_t v44 = v87;
      uint64_t v45 = v77;
      uint64_t v46 = v76;
      sub_10009E6C4(0, (unint64_t *)&qword_100705380);
      uint64_t v91 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      void *v11 = 1;
      uint64_t v47 = v78;
      uint64_t v48 = v79;
      (*(void (**)(void *, void, uint64_t))(v78 + 104))(v11, enum case for DispatchTimeInterval.seconds(_:), v79);
      uint64_t v49 = v80;
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v47 + 8))(v11, v48);
      uint64_t v90 = *(void *)(v81 + 8);
      uint64_t v50 = v82;
      ((void (*)(char *, uint64_t))v90)(v14, v82);
      sub_1000D4774((uint64_t)v100, (uint64_t)v99);
      uint64_t v51 = swift_allocObject();
      uint64_t v52 = (uint64_t)v92;
      *(void *)(v51 + 16) = v44;
      *(void *)(v51 + 24) = v52;
      *(void *)(v51 + 32) = v32;
      sub_1001146DC(v99, v51 + 40);
      int v53 = v89;
      *(_DWORD *)(v51 + 80) = v88;
      *(_DWORD *)(v51 + 84) = v53;
      uint64_t v97 = sub_10013CD78;
      uint64_t v98 = v51;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v94 = 1107296256;
      uint64_t v95 = sub_1000666D8;
      id v96 = &unk_10068DDF8;
      uint64_t v54 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      id v55 = v44;
      swift_release();
      uint64_t v56 = v83;
      static DispatchQoS.unspecified.getter();
      long long aBlock = _swiftEmptyArrayStorage;
      sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000CBE70((uint64_t *)&unk_100705390);
      sub_1000B921C();
      uint64_t v57 = v85;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v58 = (void *)v91;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v54);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v57, v45);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v56, v86);
      ((void (*)(char *, uint64_t))v90)(v49, v50);
      return (id)sub_10009B1B8((uint64_t)v100);
    }
    [v29 layoutIfNeeded];
    [v30 contentSize];
    if (v35 >= 20.0)
    {
      static Logger.Tests.getter();
      uint64_t v59 = v30;
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 67109632;
        LODWORD(aBlock) = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v62 + 8) = 1024;
        LODWORD(aBlock) = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v62 + 14) = 2048;
        [v59 contentSize];
        long long aBlock = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v60, v61, "performing scroll test. %d iterations, %d delta, content size is %f", (uint8_t *)v62, 0x18u);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v60 = v59;
      }
      uint64_t v66 = v91;
      uint64_t v67 = v92;
      uint64_t v68 = v90;

      (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v66);
      long long aBlock = v67;
      uint64_t v94 = a2;
      *(void *)&v99[0] = 0x6C61727574614ELL;
      *((void *)&v99[0] + 1) = 0xE700000000000000;
      sub_10009D28C();
      if (StringProtocol.contains<A>(_:)())
      {
        os_log_type_t v69 = self;
        if ([v69 isRecapAvailable])
        {
          id v70 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
          uint64_t v71 = v59;
          swift_bridgeObjectRetain();
          NSString v72 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v73 = [v70 initWithTestName:v72 scrollView:v71 completionHandler:0];

          [v69 runTestWithParameters:v73];
          return (id)sub_10009B1B8((uint64_t)v100);
        }
      }
      [v59 _effectiveContentInset];
      -[NSObject setContentOffset:](v59, "setContentOffset:", 0.0, -v74);
      NSString v65 = String._bridgeToObjectiveC()();
      [v59 _performScrollTest:v65 iterations:v88 delta:v89];
    }
    else
    {
      static Logger.Tests.getter();
      uint64_t v36 = v30;
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v88 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 138412290;
        long long aBlock = &v36->isa;
        uint64_t v40 = v36;
        unint64_t v89 = a2;
        uint64_t v41 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v88 = v26;

        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Cannot perform scroll test on empty collection view %@", v39, 0xCu);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v37 = v36;
      }
      uint64_t v42 = v87;
      uint64_t v43 = v91;
      uint64_t v64 = v90;

      (*(void (**)(char *, uint64_t))(v64 + 8))(v21, v43);
      NSString v65 = String._bridgeToObjectiveC()();
      [v42 failedTest:v65];
    }
    return (id)sub_10009B1B8((uint64_t)v100);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001369FC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v97 = a6;
  unsigned int v98 = a5;
  unsigned int v99 = a4;
  uint64_t v102 = a2;
  uint64_t v103 = (void *)a1;
  uint64_t v91 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v95 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for DispatchQoS();
  uint64_t v94 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  id v93 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for DispatchTimeInterval();
  uint64_t v87 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v89 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v82 - v18;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v100 = *(void *)(v20 - 8);
  int v101 = (void (*)(void, void))v20;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v82 - v25;
  __chkstk_darwin(v24);
  os_log_type_t v92 = (char *)&v82 - v27;
  v111[3] = a7;
  v111[4] = a8;
  sub_100052C70(v111);
  (*(void (**)(void))(*(void *)(a7 - 8) + 16))();
  char v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a8 + 16))(a7, a8);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8))
  {
    [v28 layoutIfNeeded];
    [v28 contentSize];
    if (v29 < 20.0)
    {
      uint64_t v30 = v26;
      static Logger.Tests.getter();
      uint64_t v31 = v28;
      unint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        double v35 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 138412290;
        long long aBlock = &v31->isa;
        uint64_t v36 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *double v35 = v31;

        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Cannot perform scroll test on empty collection view %@", v34, 0xCu);
        sub_1000CBE70(&qword_100707CC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        unint64_t v32 = v31;
      }
      uint64_t v67 = v97;
      uint64_t v69 = v100;
      uint64_t v68 = v101;

      (*(void (**)(char *, void))(v69 + 8))(v30, v68);
      NSString v70 = String._bridgeToObjectiveC()();
      [v67 failedTest:v70];
      goto LABEL_18;
    }
    uint64_t v42 = v23;
    static Logger.Tests.getter();
    uint64_t v31 = v28;
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 67109632;
      uint64_t v46 = v98;
      LODWORD(aBlock) = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 8) = 1024;
      uint64_t v47 = v46;
      LODWORD(aBlock) = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 14) = 2048;
      [v31 contentSize];
      long long aBlock = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v43, v44, "performing scroll test. %d iterations, %d delta, content size is %f", (uint8_t *)v45, 0x18u);
      swift_slowDealloc();
    }
    else
    {
      uint64_t v47 = v98;

      uint64_t v43 = v31;
    }
    uint64_t v72 = v102;
    uint64_t v71 = v103;
    uint64_t v74 = v100;
    id v73 = v101;

    (*(void (**)(char *, void))(v74 + 8))(v42, v73);
    long long aBlock = v71;
    uint64_t v105 = v72;
    *(void *)&v110[0] = 0x6C61727574614ELL;
    *((void *)&v110[0] + 1) = 0xE700000000000000;
    sub_10009D28C();
    if ((StringProtocol.contains<A>(_:)() & 1) == 0
      || (id v75 = self, ![v75 isRecapAvailable]))
    {
      [v31 _effectiveContentInset];
      -[NSObject setContentOffset:](v31, "setContentOffset:", 0.0, -v80);
      NSString v70 = String._bridgeToObjectiveC()();
      [v31 _performScrollTest:v70 iterations:v99 delta:v47];
LABEL_18:

      return sub_10009B1B8((uint64_t)v111);
    }
    id v76 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    swift_bridgeObjectRetain();
    uint64_t v77 = v31;
    NSString v78 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v79 = [v76 initWithTestName:v78 scrollView:v77 completionHandler:0];

    [v75 runTestWithParameters:v79];
  }
  else
  {
    uint64_t v83 = v17;
    uint64_t v84 = v13;
    id v85 = v28;
    uint64_t v82 = v19;
    uint64_t v86 = v14;
    uint64_t v37 = v92;
    static Logger.Tests.getter();
    unint64_t v38 = v102;
    swift_bridgeObjectRetain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      long long aBlock = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v110[0] = sub_10009B0E4((uint64_t)v103, v38, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "waiting before starting test %s. items or thumbnails still gathering", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, void))(v100 + 8))(v37, v101);
    uint64_t v49 = v97;
    uint64_t v50 = v91;
    uint64_t v51 = v90;
    uint64_t v52 = v89;
    int v53 = v82;
    uint64_t v54 = v88;
    uint64_t v55 = v87;
    sub_10009E6C4(0, (unint64_t *)&qword_100705380);
    uint64_t v102 = static OS_dispatch_queue.main.getter();
    uint64_t v56 = v83;
    static DispatchTime.now()();
    uint64_t v57 = v84;
    *uint64_t v84 = 1;
    (*(void (**)(void *, void, uint64_t))(v55 + 104))(v57, enum case for DispatchTimeInterval.seconds(_:), v54);
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v55 + 8))(v57, v54);
    int v101 = *(void (**)(void, void))(v52 + 8);
    uint64_t v58 = v86;
    v101(v56, v86);
    sub_1000D4774((uint64_t)v111, (uint64_t)v110);
    uint64_t v59 = swift_allocObject();
    uint64_t v60 = (uint64_t)v103;
    *(void *)(v59 + 16) = v49;
    *(void *)(v59 + 24) = v60;
    *(void *)(v59 + 32) = v38;
    sub_1001146DC(v110, v59 + 40);
    unsigned int v61 = v98;
    *(_DWORD *)(v59 + 80) = v99;
    *(_DWORD *)(v59 + 84) = v61;
    uint64_t v108 = sub_10013CD78;
    uint64_t v109 = v59;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v105 = 1107296256;
    uint64_t v106 = sub_1000666D8;
    uint64_t v107 = &unk_10068DE48;
    uint64_t v62 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    id v63 = v49;
    swift_release();
    uint64_t v64 = v93;
    static DispatchQoS.unspecified.getter();
    long long aBlock = _swiftEmptyArrayStorage;
    sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000CBE70((uint64_t *)&unk_100705390);
    sub_1000B921C();
    NSString v65 = v95;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v66 = (void *)v102;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v62);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v65, v50);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v64, v96);
    v101(v53, v58);
  }
  return sub_10009B1B8((uint64_t)v111);
}

uint64_t sub_10013761C(uint64_t a1)
{
  if (!a1)
  {
    __break(1u);
LABEL_10:
    sub_1000CBBA4((uint64_t)&v6, (uint64_t *)&unk_100705D60);
    goto LABEL_11;
  }
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v2 = sub_10008E070((uint64_t)v5), (v3 & 1) != 0))
  {
    sub_10009B208(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v6);
  }
  else
  {
    long long v6 = 0u;
    long long v7 = 0u;
  }
  sub_10008E17C((uint64_t)v5);
  if (!*((void *)&v7 + 1)) {
    goto LABEL_10;
  }
  if (swift_dynamicCast())
  {
    v5[0] = 0x6F69746172657469;
    v5[1] = 29550;
    swift_bridgeObjectRelease();
  }
LABEL_11:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_100137A74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v49 = a3;
  int v44 = a5;
  uint64_t v47 = a2;
  uint64_t v43 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for DispatchQoS();
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v52 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v50 = *(void *)(v13 - 8);
  uint64_t v51 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v45 = (char *)&v41 - v17;
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v46 = a4;
  id result = [a4 tabBarController];
  if (result)
  {
    uint64_t v23 = result;
    sub_10009E6C4(0, (unint64_t *)&qword_100705380);
    *uint64_t v21 = static OS_dispatch_queue.main.getter();
    (*(void (**)(uint64_t *, void, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
    char v24 = _dispatchPreconditionTest(_:)();
    id result = (id)(*(uint64_t (**)(uint64_t *, uint64_t))(v19 + 8))(v21, v18);
    if (v24)
    {
      [v23 setSelectedIndex:0];

      uint64_t v42 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      *uint64_t v12 = 2;
      (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchTimeInterval.seconds(_:), v9);
      uint64_t v25 = v45;
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v26 = *(void (**)(char *, uint64_t))(v50 + 8);
      uint64_t v27 = v16;
      uint64_t v28 = v51;
      v26(v27, v51);
      uint64_t v29 = swift_allocObject();
      uint64_t v31 = v46;
      uint64_t v30 = v47;
      os_log_type_t v33 = v48;
      uint64_t v32 = v49;
      *(void *)(v29 + 16) = v46;
      *(void *)(v29 + 24) = v33;
      *(void *)(v29 + 32) = v43;
      *(void *)(v29 + 40) = v30;
      *(unsigned char *)(v29 + 48) = v44 & 1;
      *(void *)(v29 + 56) = v32;
      aBlock[4] = sub_10013DDB8;
      aBlock[5] = v29;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1000666D8;
      aBlock[3] = &unk_100691278;
      uint64_t v34 = _Block_copy(aBlock);
      id v35 = v31;
      id v36 = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v37 = v52;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000CBE70((uint64_t *)&unk_100705390);
      sub_1000B921C();
      unint64_t v38 = v54;
      uint64_t v39 = v57;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      os_log_type_t v40 = (void *)v42;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v34);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v39);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v37, v55);
      return (id)((uint64_t (*)(char *, uint64_t))v26)(v25, v28);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100138050(uint64_t a1)
{
  id result = *(void **)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (result)
  {
    unsigned __int8 v3 = [result isGathering];
    uint64_t v4 = a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController;
    swift_beginAccess();
    unint64_t v5 = *(void *)(v4 + 8);
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id result = *(void **)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
    if (result)
    {
      id v7 = [result visibleCells];
      sub_10009E6C4(0, (unint64_t *)&unk_100705CD0);
      unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v6) {
        char v10 = v3;
      }
      else {
        char v10 = 1;
      }
      if (v10) {
        return 0;
      }
      else {
        return (void *)(v9 > 0);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1001381BC(unint64_t a1, void *a2, char a3)
{
  LOBYTE(v4) = a3;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v8 = 4;
    v4 &= 1u;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v8);
      char v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      uint64_t v14 = v9;
      char v12 = sub_10011D3F4(&v14, a2, v4);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v10;
      }
      if (v12)
      {
        swift_bridgeObjectRelease();
        return v10;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001382EC(void *a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4, void *a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  if (a1)
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_10013C268;
    *(void *)(v14 + 24) = v13;
    id v15 = a5;
    id v16 = a1;
    swift_retain();
    swift_retain();
    sub_10011EB24(v16, (uint64_t)sub_10013C33C, v14);
    swift_release();

    return swift_release();
  }
  else
  {
    id v18 = a5;
    swift_retain();
    static Logger.Tests.getter();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "content view controller is nil", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    sub_10013C2E8();
    uint64_t v22 = swift_allocError();
    unsigned char *v23 = 1;
    a3(0, v22);
    swift_errorRelease();
    return swift_release();
  }
}

void sub_10013856C(void *a1, void *a2, id a3, void (*a4)(void, uint64_t), uint64_t a5, void *a6)
{
  id v61 = a1;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = (void *)swift_allocObject();
  uint64_t v55 = a4;
  v15[2] = a4;
  v15[3] = a5;
  void v15[4] = a6;
  id v56 = a6;
  swift_retain();
  id v16 = [a2 effectiveFullBrowser];
  uint64_t v17 = (char *)[v16 hierarchyController];

  id v18 = &v17[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
  swift_beginAccess();
  unint64_t v19 = *(void *)v18;
  swift_bridgeObjectRetain();

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    os_log_type_t v20 = (char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    os_log_type_t v20 = *(char **)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v58 = v12;
  uint64_t v59 = v11;
  uint64_t v60 = v14;
  if (!v20)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v21 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_33:
    uint64_t v22 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
    os_log_type_t v20 = v22;
    swift_bridgeObjectRelease();
    if ([v20 isRoot])
    {
      uint64_t v54 = v15;
      uint64_t v57 = v20;
      id v23 = [v20 sourceIdentifier];
      id v24 = [v61 sourceIdentifier];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;
      if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
        {
          id v15 = v54;
          os_log_type_t v20 = v57;
          goto LABEL_17;
        }
      }
      uint64_t v45 = (char *)[a2 effectiveBrowserViewController];
      if (v45)
      {
        uint64_t v46 = v45;
        uint64_t v47 = (void **)&v45[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
        swift_beginAccess();
        uint64_t v48 = *v47;
        uint64_t v49 = v56;
        if (*v47)
        {
          type metadata accessor for DOCItemCollectionViewController(0);
          uint64_t v50 = (char *)swift_dynamicCastClass();
          if (v50) {
            id v51 = v48;
          }
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v52 = v55;
      }
      else
      {
        uint64_t v50 = 0;
        uint64_t v52 = v55;
        uint64_t v49 = v56;
      }
      swift_retain();
      id v53 = v49;
      sub_1001382EC(v50, (uint64_t)a3, v52, a5, a6);
      swift_release();

      swift_release();
      os_log_type_t v20 = v50;
      goto LABEL_30;
    }
LABEL_17:
    static Logger.Tests.getter();
    uint64_t v31 = v61;
    id v32 = a2;
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      LODWORD(v56) = v35;
      unint64_t v38 = (void *)v37;
      *(_DWORD *)uint64_t v36 = 138412546;
      uint64_t v57 = v20;
      uint64_t v62 = v31;
      uint64_t v39 = v31;
      id v61 = a3;
      os_log_type_t v40 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v38 = v31;

      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v41 = [v32 effectiveFullBrowser];
      uint64_t v62 = v41;
      a3 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v38[1] = v41;
      os_log_type_t v20 = v57;

      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v56, "showing %@ on %@", (uint8_t *)v36, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v33 = v31;
    }
    uint64_t v42 = v59;

    (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v42);
    uint64_t v43 = (void *)swift_allocObject();
    void v43[2] = sub_10013C268;
    void v43[3] = v15;
    v43[4] = a3;
    swift_retain();
    id v44 = a3;
    sub_10011DAB0(v31, v32, (uint64_t)sub_10013C284, (uint64_t)v43);
    swift_release();
    swift_release();
LABEL_30:

    return;
  }
  if (((unint64_t)v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v21 < *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v22 = (char *)*(id *)(v19 + 8 * (void)v21 + 32);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t sub_100138B60(void *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  if (a1)
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_10013E4C4;
    *(void *)(v14 + 24) = v13;
    id v15 = a3;
    swift_bridgeObjectRetain();
    id v16 = a1;
    swift_retain();
    sub_10011EB24(v16, (uint64_t)sub_10013E4B0, v14);
    swift_release();

    return swift_release();
  }
  else
  {
    id v18 = a3;
    swift_bridgeObjectRetain();
    static Logger.Tests.getter();
    unint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, (os_log_type_t)v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v20, "content view controller is nil", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    sub_10013C2E8();
    uint64_t v22 = swift_allocError();
    unsigned char *v23 = 1;
    sub_100121038(v22, v18, a4, a5);
    swift_errorRelease();
    return swift_release();
  }
}

void sub_100138DE0(void *a1, void *a2, id a3, void *a4, uint64_t a5, unint64_t a6)
{
  id v62 = a1;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = (void *)swift_allocObject();
  v15[2] = a4;
  v15[3] = a5;
  void v15[4] = a6;
  id v57 = a4;
  swift_bridgeObjectRetain();
  id v16 = [a2 effectiveFullBrowser];
  uint64_t v17 = (char *)[v16 hierarchyController];

  id v18 = &v17[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
  swift_beginAccess();
  unint64_t v19 = *(void *)v18;
  swift_bridgeObjectRetain();

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v59 = v12;
  uint64_t v60 = v11;
  id v61 = v14;
  if (!v20)
  {
    swift_bridgeObjectRelease();
    id v23 = 0;
    goto LABEL_17;
  }
  unint64_t v21 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v56 = a5;
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_33:
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
    id v23 = v22;
    swift_bridgeObjectRelease();
    if ([v23 isRoot])
    {
      uint64_t v58 = v15;
      uint64_t v24 = v23;
      id v25 = [v23 sourceIdentifier];
      id v26 = [v62 sourceIdentifier];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;
      if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0)
        {
          id v15 = v58;
          id v23 = v24;
          goto LABEL_17;
        }
      }
      uint64_t v46 = (char *)[a2 effectiveBrowserViewController];
      if (v46)
      {
        uint64_t v47 = v46;
        uint64_t v48 = (void **)&v46[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
        swift_beginAccess();
        uint64_t v49 = *v48;
        uint64_t v50 = v56;
        id v51 = v57;
        if (*v48)
        {
          type metadata accessor for DOCItemCollectionViewController(0);
          uint64_t v52 = (void *)swift_dynamicCastClass();
          if (v52) {
            id v53 = v49;
          }
        }
        else
        {
          uint64_t v52 = 0;
        }
      }
      else
      {
        uint64_t v52 = 0;
        uint64_t v50 = v56;
        id v51 = v57;
      }
      id v54 = v51;
      swift_bridgeObjectRetain();
      sub_100138B60(v52, (uint64_t)a3, v54, v50, a6);
      swift_release();

      swift_bridgeObjectRelease();
      id v23 = v52;
      goto LABEL_30;
    }
LABEL_17:
    static Logger.Tests.getter();
    os_log_type_t v33 = v62;
    id v34 = a2;
    int v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      id v57 = v23;
      uint64_t v58 = v15;
      uint64_t v38 = v37;
      uint64_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412546;
      id v63 = v33;
      os_log_type_t v40 = v33;
      id v62 = a3;
      uint64_t v41 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v33;

      *(_WORD *)(v38 + 12) = 2112;
      uint64_t v42 = [v34 effectiveFullBrowser];
      id v63 = v42;
      a3 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v39[1] = v42;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "showing %@ on %@", (uint8_t *)v38, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v23 = v57;
      id v15 = v58;
      swift_slowDealloc();
    }
    else
    {

      int v35 = v33;
    }
    uint64_t v43 = v60;

    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v43);
    id v44 = (void *)swift_allocObject();
    v44[2] = sub_10013E10C;
    v44[3] = v15;
    v44[4] = a3;
    swift_retain();
    id v45 = a3;
    sub_10011DAB0(v33, v34, (uint64_t)sub_10013E8B4, (uint64_t)v44);
    swift_release();
    swift_release();
LABEL_30:

    return;
  }
  if ((v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v21 < *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v22 = *(id *)(v19 + 8 * v21 + 32);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t sub_1001393B8(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, int a6)
{
  id v47 = a3;
  int v56 = a6;
  id v54 = a4;
  uint64_t v55 = a5;
  uint64_t v57 = a2;
  uint64_t v58 = a1;
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (void (**)(char *, uint64_t))((char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v45 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = 0;
  sub_10009E6C4(0, (unint64_t *)&qword_100705380);
  uint64_t v46 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  *uint64_t v13 = 10;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  id v44 = *(void (**)(char *, uint64_t))(v15 + 8);
  v44(v18, v14);
  id v22 = (void *)swift_allocObject();
  uint64_t v24 = v57;
  uint64_t v23 = v58;
  v22[2] = v21;
  v22[3] = v23;
  id v26 = v47;
  id v25 = v48;
  v22[4] = v24;
  v22[5] = v26;
  v22[6] = v25;
  aBlock[4] = sub_10013DFAC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  aBlock[3] = &unk_100691390;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  id v47 = v26;
  id v28 = v25;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_1000B921C();
  uint64_t v29 = v49;
  uint64_t v30 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v31 = (void *)v46;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v9, v52);
  v44(v20, v45);
  uint64_t v32 = swift_allocObject();
  uint64_t v34 = v57;
  uint64_t v33 = v58;
  *(void *)(v32 + 16) = v21;
  *(void *)(v32 + 24) = v33;
  int v35 = v47;
  *(void *)(v32 + 32) = v34;
  *(void *)(v32 + 40) = v35;
  uint64_t v37 = v54;
  uint64_t v36 = v55;
  *(void *)(v32 + 48) = v54;
  *(void *)(v32 + 56) = v28;
  *(void *)(v32 + 64) = v36;
  *(unsigned char *)(v32 + 72) = v56;
  uint64_t v38 = (void *)swift_allocObject();
  v38[2] = sub_10013E034;
  v38[3] = v32;
  v38[4] = v28;
  v38[5] = v37;
  id v39 = v28;
  id v40 = v37;
  swift_retain();
  swift_bridgeObjectRetain();
  id v41 = v35;
  v39;
  id v42 = v40;
  swift_retain();
  sub_10011E108(v41, v42, (uint64_t)sub_10013E828, (uint64_t)v38);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100139960(uint64_t a1, char a2, void *a3, void *a4, uint64_t a5, unint64_t a6, void *a7, void *a8)
{
  id v45 = a8;
  uint64_t v46 = a5;
  id v42 = a4;
  id v47 = a3;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v12 - 8);
  uint64_t v44 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for IndexPath();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CBC00(a1, (uint64_t)v17, (uint64_t *)&unk_1007069A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_1000CBBA4((uint64_t)v17, (uint64_t *)&unk_1007069A0);
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(void *)&v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_10009B0E4(v46, a6, (uint64_t *)v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed test %s. Could not find index path", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v44);
    NSString v27 = String._bridgeToObjectiveC()();
    [v47 failedTest:v27];
  }
  else
  {
    unint64_t v25 = a6;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    id v26 = a7;
    switch(a2)
    {
      case 8:
        swift_bridgeObjectRelease();
        goto LABEL_10;
      default:
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v28)
        {
LABEL_10:
          uint64_t v29 = (void *)swift_allocObject();
          uint64_t v30 = v42;
          uint64_t v31 = v46;
          id v32 = v47;
          _OWORD v29[2] = v42;
          v29[3] = v31;
          v29[4] = v25;
          v29[5] = v32;
          v29[6] = v26;
          uint64_t v33 = self;
          swift_bridgeObjectRetain();
          uint64_t v34 = @"DOCFullDocumentManagerViewControllerDidFinishLoadingNotificationName";
          id v35 = v30;
          id v36 = v32;
          id v37 = v26;
          id v38 = [v33 defaultCenter];
          memset(v48, 0, sizeof(v48));
          id v39 = [self mainQueue];
          uint64_t v40 = swift_allocObject();
          *(void *)(v40 + 16) = sub_10013C438;
          *(void *)(v40 + 24) = v29;
          swift_retain();
          NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)();

          swift_release();
          sub_1000CBBA4((uint64_t)v48, (uint64_t *)&unk_100705D60);

          swift_release();
        }
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        [v45 collectionView:v26 performPrimaryActionForItemAtIndexPath:isa];

        (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
        break;
    }
  }
}

uint64_t sub_100139FF8(void *a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, unint64_t a7, void *a8, void *a9)
{
  uint64_t v87 = a1;
  uint64_t v88 = a2;
  uint64_t v73 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  NSString v70 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for DispatchQoS();
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v68 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DispatchTimeInterval();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  id v62 = (char **)((char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v67 = type metadata accessor for DispatchTime();
  uint64_t v66 = *(void *)(v67 - 8);
  uint64_t v18 = __chkstk_darwin(v67);
  id v61 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  NSString v65 = (char *)&v60 - v20;
  uint64_t v75 = type metadata accessor for Logger();
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v83 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v60 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v86 = (char *)&v60 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v60 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v60 - v30;
  uint64_t v32 = swift_allocObject();
  int v80 = a3;
  *(unsigned char *)(v32 + 16) = a3;
  *(void *)(v32 + 24) = a4;
  *(void *)(v32 + 32) = a5;
  uint64_t v81 = a6;
  *(void *)(v32 + 40) = a6;
  *(void *)(v32 + 48) = a7;
  *(void *)(v32 + 56) = a8;
  *(void *)(v32 + 64) = a9;
  uint64_t v85 = v32;
  uint64_t v33 = type metadata accessor for IndexPath();
  uint64_t v84 = *(void *)(v33 - 8);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56);
  v34(v31, 1, 1, v33);
  id v79 = a4;
  id v78 = a5;
  unint64_t v82 = a7;
  swift_bridgeObjectRetain();
  id v77 = a8;
  id v76 = a9;
  sub_10011B8F4(v87, v88, (uint64_t)v29);
  sub_1000CBBA4((uint64_t)v31, (uint64_t *)&unk_1007069A0);
  v34(v29, 0, 1, v33);
  sub_1000CBE0C((uint64_t)v29, (uint64_t)v31, (uint64_t *)&unk_1007069A0);
  uint64_t v35 = v85;
  uint64_t v36 = (uint64_t)v86;
  sub_1000CBC00((uint64_t)v31, (uint64_t)v86, (uint64_t *)&unk_1007069A0);
  int v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v36, 1, v33);
  sub_1000CBBA4(v36, (uint64_t *)&unk_1007069A0);
  if (v37 == 1)
  {
    id v38 = v87;
    [v87 bounds];
    CGFloat v39 = CGRectGetHeight(v90) * 0.75;
    [v38 contentOffset];
    double v41 = v40;
    CGFloat v42 = v39 + v40;
    [v38 contentSize];
    if (v42 >= v43)
    {
      uint64_t v58 = (uint64_t)v60;
      v34(v60, 1, 1, v33);
      sub_100139960(v58, v80, v79, v78, v81, v82, v77, v76);
      sub_1000CBBA4(v58, (uint64_t *)&unk_1007069A0);
    }
    else
    {
      [v38 bounds];
      [v38 setContentOffset:CGPointMake(0.0, v41.origin.y + CGRectGetHeight(v91) * 0.75)];
      [v38 reloadData];
      sub_10009E6C4(0, (unint64_t *)&qword_100705380);
      uint64_t v85 = static OS_dispatch_queue.main.getter();
      uint64_t v44 = v61;
      static DispatchTime.now()();
      id v45 = v62;
      *id v62 = 1;
      uint64_t v46 = v63;
      uint64_t v47 = v64;
      (*(void (**)(void *, void, uint64_t))(v63 + 104))(v45, enum case for DispatchTimeInterval.seconds(_:), v64);
      uint64_t v86 = v31;
      uint64_t v48 = v65;
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v46 + 8))(v45, v47);
      uint64_t v84 = *(void *)(v66 + 8);
      uint64_t v49 = v67;
      ((void (*)(char *, uint64_t))v84)(v44, v67);
      uint64_t v50 = swift_allocObject();
      *(unsigned char *)(v50 + 16) = v88;
      *(void *)(v50 + 24) = v38;
      *(void *)(v50 + 32) = sub_10013C418;
      *(void *)(v50 + 40) = v35;
      aBlock[4] = sub_10013C430;
      aBlock[5] = v50;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1000666D8;
      aBlock[3] = &unk_10068D650;
      uint64_t v51 = _Block_copy(aBlock);
      id v52 = v38;
      swift_retain();
      swift_release();
      uint64_t v53 = v68;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000CBE70((uint64_t *)&unk_100705390);
      sub_1000B921C();
      id v54 = v70;
      uint64_t v55 = v73;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      int v56 = (void *)v85;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v51);

      (*(void (**)(char *, uint64_t))(v72 + 8))(v54, v55);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v53, v71);
      uint64_t v57 = v48;
      uint64_t v31 = v86;
      ((void (*)(char *, uint64_t))v84)(v57, v49);
    }
  }
  else
  {
    sub_100139960((uint64_t)v31, v80, v79, v78, v81, v82, v77, v76);
  }
  sub_1000CBBA4((uint64_t)v31, (uint64_t *)&unk_1007069A0);
  return swift_release();
}

void sub_10013AC50(uint64_t a1, void (**a2)(void, void), uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v29 = a6;
  unint64_t v30 = a5;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void (***)(void, void))(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for IndexPath();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CBC00(a1, (uint64_t)v14, (uint64_t *)&unk_1007069A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    uint64_t v27 = v9;
    uint64_t v28 = v8;
    sub_1000CBBA4((uint64_t)v14, (uint64_t *)&unk_1007069A0);
    static Logger.Tests.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = v29;
    if (v21)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      unint64_t v24 = v30;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_10009B0E4(a4, v24, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed test %s. Could not find index path of PDF", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    ((void (**)(char *, uint64_t))v27)[1](v11, v28);
    NSString v26 = String._bridgeToObjectiveC()();
    [v22 failedTest:v26];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    [v27 collectionView:v28 performPrimaryActionForItemAtIndexPath:isa];

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
}

uint64_t sub_10013AFFC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v84 = a1;
  uint64_t v85 = a2;
  uint64_t v73 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  NSString v70 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for DispatchQoS();
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v68 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DispatchTimeInterval();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  id v62 = (uint64_t *)((char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v67 = type metadata accessor for DispatchTime();
  uint64_t v66 = *(void *)(v67 - 8);
  uint64_t v15 = __chkstk_darwin(v67);
  id v61 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  NSString v65 = (char *)&v58 - v17;
  uint64_t v75 = type metadata accessor for Logger();
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v18 = sub_1000CBE70((uint64_t *)&unk_1007069A0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v60 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v82 = (uint64_t *)((char *)&v58 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v58 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v58 - v26;
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = a3;
  v28[3] = a4;
  uint64_t v79 = a5;
  _DWORD v28[4] = a5;
  v28[5] = a6;
  uint64_t v83 = v28;
  v28[6] = a7;
  uint64_t v29 = type metadata accessor for IndexPath();
  uint64_t v81 = *(void *)(v29 - 8);
  unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56);
  v30(v27, 1, 1, v29);
  id v31 = a3;
  uint64_t v32 = (void *)v84;
  id v78 = (void (**)(void, void))v31;
  id v77 = a4;
  unint64_t v80 = a6;
  swift_bridgeObjectRetain();
  id v76 = a7;
  sub_10011B8F4(v32, v85, (uint64_t)v25);
  uint64_t v59 = v30;
  sub_1000CBBA4((uint64_t)v27, (uint64_t *)&unk_1007069A0);
  v30(v25, 0, 1, v29);
  sub_1000CBE0C((uint64_t)v25, (uint64_t)v27, (uint64_t *)&unk_1007069A0);
  uint64_t v33 = (uint64_t)v27;
  uint64_t v34 = (void (*)(void, void))v82;
  sub_1000CBC00((uint64_t)v27, (uint64_t)v82, (uint64_t *)&unk_1007069A0);
  int v35 = (*(uint64_t (**)(void (*)(void, void), uint64_t, uint64_t))(v81 + 48))(v34, 1, v29);
  sub_1000CBBA4((uint64_t)v34, (uint64_t *)&unk_1007069A0);
  if (v35 == 1)
  {
    [v32 bounds];
    CGFloat v36 = CGRectGetHeight(v87) * 0.75;
    [v32 contentOffset];
    double v38 = v37;
    CGFloat v39 = v36 + v37;
    [v32 contentSize];
    if (v39 >= v40)
    {
      uint64_t v56 = (uint64_t)v60;
      v59(v60, 1, 1, v29);
      sub_10013AC50(v56, v78, (uint64_t)v77, v79, v80, v76);
      sub_1000CBBA4(v56, (uint64_t *)&unk_1007069A0);
    }
    else
    {
      [v32 bounds];
      [v32 setContentOffset:CGPointMake(0.0, v38.size.height * 0.75)];
      [v32 reloadData];
      sub_10009E6C4(0, (unint64_t *)&qword_100705380);
      uint64_t v84 = static OS_dispatch_queue.main.getter();
      double v41 = v61;
      static DispatchTime.now()();
      CGFloat v42 = v62;
      *id v62 = 1;
      uint64_t v43 = v63;
      uint64_t v44 = v64;
      (*(void (**)(void *, void, uint64_t))(v63 + 104))(v42, enum case for DispatchTimeInterval.seconds(_:), v64);
      id v45 = v65;
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v43 + 8))(v42, v44);
      unint64_t v82 = *(uint64_t **)(v66 + 8);
      uint64_t v46 = v67;
      ((void (*)(char *, uint64_t))v82)(v41, v67);
      uint64_t v47 = swift_allocObject();
      *(unsigned char *)(v47 + 16) = v85;
      *(void *)(v47 + 24) = v32;
      *(void *)(v47 + 32) = sub_10013C474;
      *(void *)(v47 + 40) = v83;
      aBlock[4] = sub_10013C430;
      aBlock[5] = v47;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1000666D8;
      aBlock[3] = &unk_10068D768;
      uint64_t v48 = v33;
      uint64_t v49 = _Block_copy(aBlock);
      id v50 = v32;
      swift_retain();
      swift_release();
      uint64_t v51 = v68;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_10013C370((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000CBE70((uint64_t *)&unk_100705390);
      sub_1000B921C();
      id v52 = v70;
      uint64_t v53 = v73;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v54 = (void *)v84;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      uint64_t v55 = v49;
      uint64_t v33 = v48;
      _Block_release(v55);

      (*(void (**)(char *, uint64_t))(v72 + 8))(v52, v53);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v51, v71);
      ((void (*)(char *, uint64_t))v82)(v45, v46);
    }
  }
  else
  {
    sub_10013AC50((uint64_t)v27, v78, (uint64_t)v77, v79, v80, v76);
  }
  sub_1000CBBA4(v33, (uint64_t *)&unk_1007069A0);
  return swift_release();
}

uint64_t sub_10013BBE0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  uint64_t v12 = self;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = a1;
  *(void *)(v13 + 32) = a2;
  *(void *)(v13 + 40) = v5;
  *(unsigned char *)(v13 + 48) = a3;
  *(void *)(v13 + 56) = a4;
  *(void *)(v13 + 64) = a5;
  uint64_t v28 = sub_10013BF58;
  uint64_t v29 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10012635C;
  uint64_t v27 = &unk_10068D358;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  id v15 = v5;
  swift_retain();
  swift_release();
  id v16 = [v12 beginMonitoringProviderDomainChangesWithHandler:v14];
  _Block_release(v14);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_beginAccess();
  sub_1000D225C((uint64_t)aBlock, v11 + 16);
  sub_1000CBC00(v11 + 16, (uint64_t)aBlock, (uint64_t *)&unk_100705D60);
  uint64_t v17 = v27;
  sub_1000CBBA4((uint64_t)aBlock, (uint64_t *)&unk_100705D60);
  if (!v17) {
    return swift_release();
  }
  uint64_t result = sub_1000CBC00(v11 + 16, (uint64_t)aBlock, (uint64_t *)&unk_100705D60);
  uint64_t v19 = v27;
  if (v27)
  {
    uint64_t v20 = sub_1000A6B78(aBlock, (uint64_t)v27);
    uint64_t v21 = *(v19 - 1);
    __chkstk_darwin(v20);
    uint64_t v23 = (char *)aBlock - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
    (*(void (**)(char *))(v21 + 16))(v23);
    uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, void *))(v21 + 8))(v23, v19);
    sub_10009B1B8((uint64_t)aBlock);
    [v12 endMonitoringProviderDomainChanges:v24];
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10013BEC8()
{
  if (*(void *)(v0 + 40)) {
    sub_10009B1B8(v0 + 16);
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10013BF08()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10013BF58(uint64_t a1, uint64_t a2)
{
  sub_100124AA4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64));
}

unint64_t sub_10013BF8C()
{
  unint64_t result = qword_1007076B8;
  if (!qword_1007076B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007076B8);
  }
  return result;
}

unint64_t sub_10013BFE0()
{
  unint64_t result = qword_1007076C0;
  if (!qword_1007076C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007076C0);
  }
  return result;
}

uint64_t sub_10013C034()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 41) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10013C128(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001257B8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(char **)(v2 + 32), *(unsigned __int8 *)(v2 + 40), v2 + v6, *(void *)(v2 + v7), *(void **)(v2 + v7 + 8));
}

uint64_t sub_10013C1E8(uint64_t a1)
{
  return sub_10013CC3C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100125FDC);
}

uint64_t sub_10013C200()
{
  return sub_10013DD40(49);
}

uint64_t sub_10013C208()
{
  return sub_10013C66C((uint64_t (*)(void, void, void, void, void))sub_100129930);
}

uint64_t sub_10013C228()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

void sub_10013C244(void *a1, uint64_t a2)
{
  sub_100120CB0(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_10013C250()
{
  return sub_10013E130((void (*)(void))&_swift_release);
}

uint64_t sub_10013C26C()
{
  return sub_10013E130((void (*)(void))&_swift_release);
}

uint64_t sub_10013C284(void *a1, uint64_t a2)
{
  return sub_1001207A8(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10013C290()
{
  return sub_10013E130((void (*)(void))&_swift_release);
}

uint64_t sub_10013C2A8(uint64_t a1)
{
  if (a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v3, a1);
}

unint64_t sub_10013C2E8()
{
  unint64_t result = qword_1007076F0;
  if (!qword_1007076F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007076F0);
  }
  return result;
}

uint64_t sub_10013C33C()
{
  return sub_1001204E4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10013C344()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_10013C370(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013C3B8(uint64_t a1)
{
  return sub_1001209F0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10013C3C0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10013C418(uint64_t a1)
{
  sub_100139960(a1, *(unsigned char *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64));
}

uint64_t sub_10013C438()
{
  return sub_10013DFC4((uint64_t (*)(void, void, void, void, void))sub_10012A7BC);
}

uint64_t sub_10013C454()
{
  return sub_10013DFC4((uint64_t (*)(void, void, void, void, void))sub_10012AC50);
}

uint64_t sub_10013C46C()
{
  return sub_10013DE60(56);
}

void sub_10013C474(uint64_t a1)
{
  sub_10013AC50(a1, *(void (***)(void, void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48));
}

unint64_t sub_10013C488()
{
  unint64_t result = qword_1007076F8;
  if (!qword_1007076F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007076F8);
  }
  return result;
}

uint64_t sub_10013C4E0()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10013C520()
{
  return sub_100122EEC(*(void **)(v0 + 24), *(void (**)(uint64_t, uint64_t))(v0 + 32), *(void (**)(void, void))(v0 + 40), *(unsigned __int8 *)(v0 + 16));
}

uint64_t sub_10013C530()
{
  return sub_10013E194((void (*)(void))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10013C554()
{
  return sub_10013C6BC((uint64_t (*)(void, void, void, void, void, void, void, void))sub_100128D58);
}

uint64_t sub_10013C56C()
{
  return sub_10013DD40(49);
}

uint64_t sub_10013C574()
{
  return sub_10013C66C((uint64_t (*)(void, void, void, void, void))sub_100128EF0);
}

uint64_t sub_10013C590()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10013C5AC()
{
  return sub_10013E194((void (*)(void))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10013C5CC()
{
  return sub_10013C6BC((uint64_t (*)(void, void, void, void, void, void, void, void))sub_1001282AC);
}

uint64_t sub_10013C5E4()
{
  return sub_10013E08C((void (*)(void))&_swift_bridgeObjectRelease, 49);
}

uint64_t sub_10013C600()
{
  return sub_10013C66C((uint64_t (*)(void, void, void, void, void))sub_100128448);
}

uint64_t sub_10013C61C()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10013C638()
{
  return sub_10013E08C((void (*)(void))&_swift_bridgeObjectRelease, 49);
}

uint64_t sub_10013C654()
{
  return sub_10013C66C((uint64_t (*)(void, void, void, void, void))sub_1001288D8);
}

uint64_t sub_10013C66C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_10013C684()
{
  return sub_10013E194((void (*)(void))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10013C6A4()
{
  return sub_10013C6BC((uint64_t (*)(void, void, void, void, void, void, void, void))sub_100127E5C);
}

uint64_t sub_10013C6BC(uint64_t (*a1)(void, void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned __int8 *)(v1 + 72));
}

uint64_t sub_10013C6DC()
{
  return sub_10013E130((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_10013C6F4()
{
  sub_100128024(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10013C700()
{
  return sub_10013E194((void (*)(void))&_swift_bridgeObjectRelease, 41);
}

void sub_10013C71C()
{
  sub_100128B9C(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), (uint64_t)&unk_10068DB60, (uint64_t)sub_10013C54C, (uint64_t)&unk_10068DB78);
}

uint64_t sub_10013C768()
{
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 97, 7);
}

void sub_10013C7C8(uint64_t a1, uint64_t a2)
{
  sub_10012A098(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(id *)(v2 + 40), *(void *)(v2 + 48), *(id **)(v2 + 56), *(void (**)(void))(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88), *(unsigned char *)(v2 + 96));
}

uint64_t sub_10013C80C()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10013C828()
{
  return sub_10013E194((void (*)(void))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10013C844()
{
  return sub_100127638(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10013C874()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10013C968(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2[2];
  unint64_t v8 = v2[3];
  uint64_t v9 = (void *)v2[4];
  uint64_t v10 = (uint64_t)v2 + v6;
  uint64_t v11 = (uint8_t **)((char *)v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];

  sub_100126850(a1, a2, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_10013CA20()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

void sub_10013CB24(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1[2];
  unint64_t v7 = v1[3];
  unint64_t v8 = (void *)v1[4];
  uint64_t v9 = *(void **)((char *)v1 + v5);
  uint64_t v10 = (uint64_t)v1 + v4;
  uint64_t v11 = (void *)((char *)v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = (void *)v11[1];

  sub_100126DD8(a1, v6, v7, v8, v10, v9, v12, v13);
}

uint64_t sub_10013CBDC()
{
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013CC24(uint64_t a1)
{
  return sub_10013CC3C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100127338);
}

uint64_t sub_10013CC3C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_10013CC54()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013CC94()
{
  return sub_100124404(v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_10013CCC4()
{
  return sub_10013DD40(56);
}

uint64_t sub_10013CCCC()
{
  return sub_10013DFC4((uint64_t (*)(void, void, void, void, void))sub_100123E28);
}

uint64_t sub_10013CCE4()
{
  return sub_10013DD40(56);
}

uint64_t sub_10013CCEC()
{
  return sub_10013DFC4((uint64_t (*)(void, void, void, void, void))sub_100124110);
}

uint64_t sub_10013CD04()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10013CD5C()
{
  return sub_10013DF3C((uint64_t (*)(void, void, void, void, void, void))sub_1001226C8);
}

uint64_t sub_10013CD80()
{
  swift_bridgeObjectRelease();
  sub_10009B1B8(v0 + 40);

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10013CDC8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  unint64_t v4 = (void *)(v0 + 40);
  unsigned int v5 = *(_DWORD *)(v0 + 80);
  unsigned int v6 = *(_DWORD *)(v0 + 84);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v9 = sub_1000A6B78(v4, v8);

  return sub_1001369FC(v2, v3, (uint64_t)v9, v5, v6, v1, v8, v7);
}

uint64_t sub_10013CE48()
{
  return sub_10013E194((void (*)(void))&_swift_release, 40);
}

uint64_t sub_10013CE64()
{
  return sub_10011ED94(v0[2], v0[3], v0[4]);
}

uint64_t sub_10013CE78()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10013CEB8()
{
  sub_10011FFE0(*(void *)(v0 + 16), *(NSObject **)(v0 + 24));
}

uint64_t sub_10013CEC0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013CF00()
{
  return sub_100120250(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_10013CF0C()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013CF4C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013CF60()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10013CFA8()
{
  return sub_10011E958(*(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10013CFD8()
{
  return sub_10013DFC4((uint64_t (*)(void, void, void, void, void))sub_10011E490);
}

uint64_t sub_10013CFF0()
{
  return sub_10013E194((void (*)(void))&_swift_release, 40);
}

void sub_10013D00C(void *a1, uint64_t a2)
{
  sub_10011E5B8(a1, a2, *(void **)(v2 + 16), *(void (**)(void, void))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10013D01C()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013D06C()
{
  return sub_10013DFC4((uint64_t (*)(void, void, void, void, void))sub_10011DD98);
}

uint64_t sub_10013D084()
{
  return sub_10013E194((void (*)(void))&_swift_release, 40);
}

void sub_10013D0A0()
{
  sub_10011DFF4(*(void **)(v0 + 16), *(void (**)(uint64_t, uint64_t))(v0 + 24));
}

uint64_t sub_10013D0AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D0BC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013D0F4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013D144(uint64_t a1, uint64_t a2)
{
  return sub_10013D970(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_10011CC34);
}

uint64_t sub_10013D15C()
{
  swift_release();
  swift_errorRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10013D1BC()
{
  sub_10011CF48(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(id, uint64_t))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void **)(v0 + 56), *(void *)(v0 + 64));
}

void sub_10013D1D4(uint64_t a1, uint64_t a2)
{
  sub_10011B0AC(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_10013D1E4()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10013D204()
{
  return sub_10013DFC4((uint64_t (*)(void, void, void, void, void))sub_10011C278);
}

uint64_t sub_10013D220()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10013D270(uint64_t a1, uint64_t a2)
{
  sub_10011A250(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(unsigned char *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_10013D284()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10013D2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DOCItemCollectionFPController();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013D304(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DOCItemCollectionFPController();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013D360()
{
  return sub_10013DD40(56);
}

uint64_t sub_10013D368()
{
  return sub_1001196E4(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned int *)(v0 + 48), *(unsigned int *)(v0 + 52));
}

uint64_t sub_10013D39C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013D3EC()
{
  return sub_10013DFC4((uint64_t (*)(void, void, void, void, void))sub_100119614);
}

uint64_t sub_10013D404()
{
  return sub_10013DD40(64);
}

uint64_t sub_10013D40C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (!__OFADD__(v1, 1)) {
    return sub_100117B80(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned int *)(v0 + 48), *(unsigned int *)(v0 + 52), v1 + 1);
  }
  __break(1u);
  return result;
}

uint64_t sub_10013D448()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013D480()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10013D4BC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10013D4C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char **sub_10013D4D4(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A00BC(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_10013D4DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D4EC()
{
  return sub_10019FECC(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10013D4F4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_10019FEF4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10013D4FC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D50C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D51C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D52C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D53C()
{
  return sub_1001A00CC(*(uint64_t (**)(void))(v0 + 16));
}

void sub_10013D544(uint64_t *a1, void **a2, uint64_t a3)
{
  sub_1001A00F4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10013D54C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D55C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D56C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D57C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D58C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D59C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D5AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D5BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D5CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D5DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D5EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D5FC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D60C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D61C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D62C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D63C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D64C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D65C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D66C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D67C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D68C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D69C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D6AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D6BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D6CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D6DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D6EC()
{
  return sub_10013DD40(48);
}

void sub_10013D6F4(void *a1, uint64_t a2)
{
  sub_100120D6C(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_10013D700()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D710()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D720()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D730()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D740()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D750()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D760()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D770()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D780()
{
  return sub_10013DD40(48);
}

uint64_t sub_10013D788()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D798()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D7A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D7B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D7C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D7D8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D7E8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D7F8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D808()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D818()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D828()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D838()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D848()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D858()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D868()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D878()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D888()
{
  return sub_10013DD40(56);
}

uint64_t sub_10013D890(uint64_t a1, uint64_t a2)
{
  return sub_10013D970(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_10011C378);
}

uint64_t sub_10013D8A8()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10013D8C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D8D4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D8E4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D8F4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D904()
{
  return sub_10013DD40(56);
}

uint64_t sub_10013D90C()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10013D928()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D938()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D948()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D958()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D968()
{
  return sub_10013DD40(56);
}

uint64_t sub_10013D970(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_10013D988()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10013D9A4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013D9DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D9EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D9FC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013DA34()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DA44()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DA54()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DA64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DA74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DA84()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DA94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DAA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DAB4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DAC4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DAD4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DAE4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DAF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB04()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB34()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB44()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB54()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB84()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DB94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DBA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DBB4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DBC4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DBD4()
{
  return sub_100135B58(*(void **)(v0 + 16));
}

uint64_t sub_10013DBF0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC00()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC10()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC20()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC30()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC40()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC50()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC60()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC70()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DC90()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DCA0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DCB0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DCC0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DCD0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DCE0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DCF0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DD00()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DD10()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DD20()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DD30()
{
  return sub_10013DD40(48);
}

uint64_t sub_10013DD38()
{
  return sub_10013DD40(48);
}

uint64_t sub_10013DD40(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10013DD94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DDA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013DDB8()
{
  return sub_10013DE3C((uint64_t (*)(void, void, void, void, void, void))sub_10011A7C4);
}

uint64_t sub_10013DDD4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10013DE24()
{
  return sub_10013DE3C((uint64_t (*)(void, void, void, void, void, void))sub_10011AB44);
}

uint64_t sub_10013DE3C(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_10013DE58()
{
  return sub_10013DE60(64);
}

uint64_t sub_10013DE60(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10013DEBC()
{
  return sub_10013DF3C((uint64_t (*)(void, void, void, void, void, void))sub_10011C898);
}

uint64_t sub_10013DED4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10013DF24()
{
  return sub_10013DF3C((uint64_t (*)(void, void, void, void, void, void))sub_10011C954);
}

uint64_t sub_10013DF3C(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void sub_10013DF54()
{
  sub_10011CA24(*(char **)(v0 + 16));
}

uint64_t sub_10013DF5C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013DFAC()
{
  return sub_10013DFC4((uint64_t (*)(void, void, void, void, void))sub_1001212B4);
}

uint64_t sub_10013DFC4(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10013DFDC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 73, 7);
}

void sub_10013E034(uint64_t a1, uint64_t a2)
{
  sub_100121570(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(id *)(v2 + 48), *(id *)(v2 + 56), *(id *)(v2 + 64), *(unsigned char *)(v2 + 72));
}

uint64_t sub_10013E070()
{
  return sub_10013E08C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10013E08C(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 24));

  return _swift_deallocObject(v2, a2, 7);
}

void sub_10013E0E8()
{
  sub_1001221D4(*(void **)(v0 + 16));
}

uint64_t sub_10013E0F0()
{
  return sub_10013E194((void (*)(void))&_swift_bridgeObjectRelease, 40);
}

void sub_10013E10C(uint64_t a1)
{
  sub_100121038(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10013E118()
{
  return sub_10013E130((void (*)(void))&_swift_release);
}

uint64_t sub_10013E130(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_10013E178()
{
  return sub_10013E194((void (*)(void))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_10013E194(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 32));

  return _swift_deallocObject(v2, a2, 7);
}

uint64_t sub_10013E1F0()
{
  return _swift_deallocObject(v0, 40, 7);
}

unsigned char *storeEnumTagSinglePayload for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10013E2C4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError()
{
  return &type metadata for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError;
}

unsigned char *storeEnumTagSinglePayload for DOCApplication.DOCApplicationTestError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10013E3C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCApplication.DOCApplicationTestError()
{
  return &type metadata for DOCApplication.DOCApplicationTestError;
}

unint64_t sub_10013E404()
{
  unint64_t result = qword_100707750;
  if (!qword_100707750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707750);
  }
  return result;
}

unint64_t sub_10013E45C()
{
  unint64_t result = qword_100707758;
  if (!qword_100707758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707758);
  }
  return result;
}

uint64_t sub_10013E8BC()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10011029C();
  static DispatchQoS.userInitiated.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_1000BAAEC((unint64_t *)&qword_1007054C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000CBE70((uint64_t *)&unk_100709900);
  sub_10009449C((unint64_t *)&qword_1007054D0, (uint64_t *)&unk_100709900);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100707760 = result;
  return result;
}

uint64_t sub_10013EAFC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  [*(id *)(a1 + 24) lock];
  swift_getObjectType();
  DOCNode.identifierKey.getter();
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 32);
  if (!*(void *)(v4 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10008E070((uint64_t)v11);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    sub_10008E17C((uint64_t)v11);
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(v4 + 56) + 24 * v5;
  uint64_t v8 = *(void **)v7;
  uint64_t v9 = *(void *)(v7 + 16);
  sub_10008F4B4(*(void **)v7, *(void *)(v7 + 8), v9);
  swift_bridgeObjectRelease();
  uint64_t result = sub_10008E17C((uint64_t)v11);
  if ((v9 & 0x8000000000000000) == 0)
  {
    *a2 = v8;
    return result;
  }
  swift_release();

LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_10013EC40(void (*a1)(void *), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1(a3);
  uint64_t v9 = *(void **)(a4 + 24);
  [v9 lock];
  swift_getObjectType();
  DOCNode.identifierKey.getter();
  uint64_t v10 = (uint64_t *)(a4 + 32);
  swift_beginAccess();
  uint64_t v11 = *(void *)(a4 + 32);
  if (!*(void *)(v11 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_10008E070((uint64_t)v22);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    sub_10008E17C((uint64_t)v22);
    return [v9 unlock:v21];
  }
  uint64_t v14 = *(void *)(v11 + 56) + 24 * v12;
  id v16 = *(void **)v14;
  uint64_t v15 = *(void *)(v14 + 8);
  uint64_t v17 = *(void *)(v14 + 16);
  sub_10008F4B4(*(void **)v14, v15, v17);
  swift_bridgeObjectRelease();
  sub_10008E17C((uint64_t)v22);
  if (v17 < 0)
  {
    swift_release();

    if (v15 == a6)
    {
      DOCNode.identifierKey.getter();
      swift_beginAccess();
      id v19 = a3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v21 = *v10;
      *uint64_t v10 = 0x8000000000000000;
      sub_10008D8EC((uint64_t)a3, 0, 0, (uint64_t)v22, isUniquelyReferenced_nonNull_native);
      *uint64_t v10 = v21;
      swift_bridgeObjectRelease();
      sub_10008E17C((uint64_t)v22);
      swift_endAccess();
    }
  }
  else
  {
    sub_10008D3E0(v16, v15, v17);
  }
  return [v9 unlock:v21];
}

id sub_10013EE10(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void **)(v4 + 24);
  [v8 lock];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v9 = (uint64_t)result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (!v9) {
      goto LABEL_10;
    }
  }
  if (v9 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v11 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8 * v11 + 32);
      swift_unknownObjectRetain();
    }
    ++v11;
    uint64_t v13 = v12;
    sub_10013EF4C((uint64_t)&v13, v4, a2, a3);
    swift_unknownObjectRelease();
  }
  while (v9 != v11);
LABEL_10:
  swift_bridgeObjectRelease();

  return [v8 unlock];
}

void sub_10013EF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v43 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  DOCNode.identifierKey.getter();
  swift_beginAccess();
  uint64_t v12 = *(void *)(a2 + 32);
  if (!*(void *)(v12 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_10008E070((uint64_t)aBlock);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    sub_10008E17C((uint64_t)aBlock);
    goto LABEL_12;
  }
  uint64_t v36 = v6;
  uint64_t v37 = v4;
  uint64_t v15 = *(void *)(v12 + 56) + 24 * v13;
  id v16 = *(void **)v15;
  uint64_t v17 = *(void *)(v15 + 8);
  uint64_t v18 = *(void *)(v15 + 16);
  sub_10008F4B4(*(void **)v15, v17, v18);
  swift_bridgeObjectRelease();
  sub_10008E17C((uint64_t)aBlock);
  if (v18 < 0)
  {
    id v19 = (void *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
    dispatch thunk of DispatchWorkItem.cancel()();
    if (v43)
    {
      int v35 = v16;
      uint64_t v20 = qword_100704E30;
      uint64_t v21 = v41;
      swift_retain();
      if (v20 != -1) {
        swift_once();
      }
      uint64_t v34 = qword_100707760;
      uint64_t v22 = (void *)swift_allocObject();
      uint64_t v23 = v43;
      v22[2] = v43;
      v22[3] = v21;
      v22[4] = v19;
      aBlock[4] = sub_1000D4A60;
      aBlock[5] = v22;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1000666D8;
      void aBlock[3] = &unk_100691770;
      uint64_t v32 = _Block_copy(aBlock);
      sub_1000C0640(v23);
      id v33 = v19;
      static DispatchQoS.unspecified.getter();
      void aBlock[6] = _swiftEmptyArrayStorage;
      sub_1000BAAEC((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000CBE70((uint64_t *)&unk_100705390);
      sub_10009449C((unint64_t *)&qword_100706780, (uint64_t *)&unk_100705390);
      uint64_t v24 = v36;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v25 = v32;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      swift_release();
      _Block_release(v25);

      sub_1000A7258(v43);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v24);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    sub_10008D3E0(v16, v17, v18);
  }
LABEL_12:
  DOCNode.identifierKey.getter();
  swift_beginAccess();
  uint64_t v26 = (void *)sub_10008DA78((uint64_t)aBlock);
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  sub_10008E17C((uint64_t)aBlock);
  swift_endAccess();
  sub_10008D42C(v26, v28, v30);
}

id sub_10013F3CC()
{
  uint64_t v1 = *(void **)(v0 + 24);
  [v1 lock];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_22:
    if ((*(void *)(*(void *)(v2 + 56) + 24 * v11 + 16) & 0x8000000000000000) != 0)
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      id result = (id)swift_release();
    }
  }
  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v7) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v12);
  ++v9;
  if (v13) {
    goto LABEL_21;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v7) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v9 = v12 + 2;
  if (v12 + 2 >= v7) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v9 = v12 + 3;
  if (v12 + 3 >= v7) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_21:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_22;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_24:
    swift_release();
    *(void *)(v0 + 32) = sub_1000790C8((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    return [v1 unlock];
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10013F5A8()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void destroy for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t a1)
{
}

void *_s5Files32DOCItemCollectionCellContentPoolC18CellContentPromiseOwCP_0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  sub_10008F4B4(*(void **)a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t assignWithCopy for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  sub_10008F4B4(*(void **)a2, v4, v5);
  unint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_10008D3E0(v6, v7, v8);
  return a1;
}

__n128 _s12BrowsedStateVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_10008D3E0(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x3FFF);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 50) >> 13) | (2
                                                            * ((*(void *)(a1 + 16) >> 50) & 0x1C00 | ((*(void *)(a1 + 16) & 7) << 7) | (*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x3FFF;
    if (a3 >= 0x3FFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      unint64_t v3 = (-a2 >> 1) & 0x1FFF | ((-a2 & 0x3FFF) << 13);
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10013F7E8(uint64_t a1)
{
  return *(void *)(a1 + 16) >> 63;
}

uint64_t sub_10013F7F4(uint64_t result)
{
  *(void *)(result + 16) &= ~0x8000000000000000;
  return result;
}

void *sub_10013F804(void *result, uint64_t a2)
{
  uint64_t v2 = result[2] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *result &= 0xFFFFFFFFFFFFFF8uLL;
  result[2] = v2;
  return result;
}

uint64_t sub_10013F824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10008D444(a1, a2, a3, a4, a5, (uint64_t)&unk_100691708, (uint64_t)sub_10013F850, (uint64_t)&unk_100691720);
}

uint64_t sub_10013F854()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013F894@<X0>(void *a1@<X8>)
{
  return sub_10013EAFC(*(void *)(v1 + 16), a1);
}

id sub_10013F8B4()
{
  return sub_10013EC40(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_10013F8CC()
{
  type metadata accessor for DOCFileProviderSyncStateObserverCache();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = &_swiftEmptyDictionarySingleton;
  qword_100736E00 = result;
  return result;
}

uint64_t sub_10013F904(void *a1)
{
  id v3 = [a1 identifier];
  uint64_t v4 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 16);
  if (!*(void *)(v5 + 16))
  {

LABEL_6:
    type metadata accessor for DOCFileProviderSyncStateObserver();
    swift_allocObject();
    id v9 = a1;
    uint64_t v8 = sub_10038BE2C((uint64_t)v9);
    id v10 = [v9 identifier];
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_1003DFFEC(v8, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v13;

    swift_bridgeObjectRelease();
    swift_endAccess();
    return v8;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000A54AC(v3);
  if ((v7 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  swift_retain();

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10013FA6C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DOCFileProviderSyncStateObserverCache()
{
  return self;
}

uint64_t sub_10013FAC8()
{
  sub_10009E6C4(0, &qword_100707988);
  uint64_t result = NSString.init(stringLiteral:)();
  qword_100707948 = result;
  return result;
}

id DOCNodeContextMenuConfiguration.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void *DOCInteractionManager.lastOpenedItem.getter()
{
  id v1 = (void **)(v0 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void DOCInteractionManager.lastOpenedItem.setter(void *a1)
{
}

void (*DOCInteractionManager.lastOpenedItem.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = (void **)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return sub_10013FDEC;
}

void sub_10013FDEC(uint64_t a1, char a2)
{
}

id sub_10013FE10(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (id *)(a1 + *a3);
  swift_beginAccess();
  return *v3;
}

void *DOCInteractionManager.lastSelectedItem.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_10013FEC8(char *a1, uint64_t a2, void *a3, void *a4, void (*a5)(void *))
{
  uint64_t v8 = (void **)&a1[*a4];
  swift_beginAccess();
  id v9 = *v8;
  *uint64_t v8 = a3;
  id v10 = a3;
  unint64_t v11 = a1;
  a5(v9);
}

void DOCInteractionManager.lastSelectedItem.setter(void *a1)
{
}

void sub_10013FF78(void *a1, void *a2, void (*a3)(void *))
{
  uint64_t v6 = (void **)(v3 + *a2);
  swift_beginAccess();
  id v7 = *v6;
  *uint64_t v6 = a1;
  id v8 = a1;
  a3(v7);
}

uint64_t sub_10013FFF4(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v39 - v8;
  id v10 = (void **)(v1 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem);
  uint64_t result = swift_beginAccess();
  int64_t v12 = *v10;
  if (*v10) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = a1 == 0;
  }
  if (!v13)
  {
    uint64_t v43 = v7;
    id v14 = a1;
    static Logger.UI.getter();
    id v15 = v14;
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v45 = v41;
      uint64_t v40 = v18;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v39 = v18 + 4;
      id v19 = v15;
      id v20 = [v19 description];
      uint64_t v21 = v4;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v3;
      unint64_t v24 = v23;

      uint64_t v25 = v22;
      uint64_t v4 = v21;
      uint64_t v44 = sub_10009B0E4(v25, v24, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v3 = v42;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[Interaction] Clearing last selected item. Previous item was: %s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v26 = v21;
    }
    else
    {

      uint64_t v26 = v4;
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v9, v3);
    int64_t v12 = *v10;
    id v7 = v43;
  }
  if (v12)
  {
    id v27 = v12;
    static Logger.UI.getter();
    id v28 = v27;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v42 = v3;
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v43 = v7;
      uint64_t v45 = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v41 = (uint64_t)(v31 + 4);
      id v33 = v28;
      id v34 = [v33 description];
      uint64_t v35 = v4;
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      uint64_t v44 = sub_10009B0E4(v36, v38, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[Interaction] Setting the last selected item: %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v43, v42);
    }
    else
    {

      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }
  }
  return result;
}

void (*DOCInteractionManager.lastSelectedItem.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = (void **)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return sub_1001404E0;
}

void sub_1001404E0(uint64_t a1, char a2)
{
}

void sub_1001404F8(uint64_t a1, char a2, void (*a3)(void *))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = (void **)(*(void *)a1 + 24);
  uint64_t v5 = *v6;
  uint64_t v8 = *(void *)(*(void *)a1 + 32);
  uint64_t v7 = *(void *)(*(void *)a1 + 40);
  id v9 = *(void **)(v8 + v7);
  *(void *)(v8 + v7) = *v6;
  if (a2)
  {
    id v10 = v5;
    a3(v9);

    id v9 = *v6;
  }
  else
  {
    id v11 = v5;
    a3(v9);
  }

  free(v4);
}

id DOCInteractionManager.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCInteractionManager();
  return [super init];
}

id DOCInteractionManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCInteractionManager();
  [super dealloc];
}

void sub_10014066C(void *a1, uint64_t a2)
{
  uint64_t v3 = qword_100704E40;
  id v4 = a1;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_100707940;
  id v6 = [(id)qword_100707940 objectForKey:v4];
  if (!v6)
  {
    id v6 = [objc_allocWithZone((Class)type metadata accessor for DOCInteractionManager()) init];
    [v5 setObject:forKey:];
  }

  [(id)qword_100707940 setObject:v6 forKey:a2];
}

unint64_t sub_100140764()
{
  unint64_t result = qword_100710B40;
  if (!qword_100710B40)
  {
    sub_10009E6C4(255, (unint64_t *)&qword_1007069C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100710B40);
  }
  return result;
}

unint64_t sub_1001407D0()
{
  unint64_t result = qword_100707990;
  if (!qword_100707990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707990);
  }
  return result;
}

unint64_t sub_100140828()
{
  unint64_t result = qword_100707998;
  if (!qword_100707998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707998);
  }
  return result;
}

uint64_t sub_10014087C()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t sub_1001408B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001408CC()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_10001AF94(v6, qword_100736E08);
  sub_10009D098(v6, (uint64_t)qword_100736E08);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)();
}

uint64_t sub_100140ADC()
{
  uint64_t v0 = sub_1000CBE70(&qword_100707B48);
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_1000CBE70(&qword_100707B50);
  __chkstk_darwin(v1);
  sub_100142DA0();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._object = (void *)0x80000001005D6110;
  v2._countAndFlagsBits = 0xD00000000000002CLL;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_1000CBE70(&qword_100707B58);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_100140C7C()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_100140CA0()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_100140CC4()
{
  uint64_t v0 = type metadata accessor for IntentAuthenticationPolicy();
  sub_10001AF94(v0, qword_100736E20);
  uint64_t v1 = sub_10009D098(v0, (uint64_t)qword_100736E20);
  uint64_t v2 = enum case for IntentAuthenticationPolicy.requiresAuthentication(_:);
  Swift::String v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);

  return v3(v1, v2, v0);
}

uint64_t sub_100140D4C(uint64_t a1, uint64_t a2)
{
  v2[6] = a1;
  v2[7] = a2;
  uint64_t v3 = type metadata accessor for DOCFileEntity();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_100140E88, 0, 0);
}

uint64_t sub_100140E88()
{
  static Logger.AppIntents.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[GetContentOfFolderIntent] Performing Get Contents of Folder Intent", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[8];

  id v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[16] = v9;
  v0[17] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v4, v5);
  IntentParameter.wrappedValue.getter();
  id v10 = *(void **)(v7 + *(int *)(v8 + 32));
  v0[18] = v10;
  id v11 = v10;
  sub_100117404(v7);
  uint64_t v12 = swift_task_alloc();
  v0[19] = v12;
  *(void *)(v12 + 16) = v11;
  BOOL v13 = (void *)swift_task_alloc();
  v0[20] = v13;
  uint64_t v14 = sub_1000CBE70((uint64_t *)&unk_100707B20);
  *BOOL v13 = v0;
  v13[1] = sub_100141068;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000015, 0x80000001005D60F0, sub_100142DF4, v12, v14);
}

uint64_t sub_100141068()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100141180, 0, 0);
}

uint64_t sub_100141180()
{
  uint64_t v22 = v1;

  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v21 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v6 = (unint64_t)v5 >> 62;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v0 = v5;
    }
    else {
      uint64_t v0 = (v5 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v20 = (unint64_t)v5 >> 62;
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v20 = (unint64_t)v5 >> 62;
    if (v7)
    {
LABEL_3:
      if (v7 < 1)
      {
        __break(1u);
        goto LABEL_44;
      }
      uint64_t v8 = 0;
      uint64_t v3 = (void *)(v5 & 0xC000000000000001);
      do
      {
        if (v3)
        {
          id v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          id v9 = *(void **)(v5 + 8 * v8 + 32);
          swift_unknownObjectRetain();
        }
        os_log_type_t v2 = (uint8_t *)[v9 fpfs_fpItem];
        swift_unknownObjectRelease();
        if (v2)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v8;
      }
      while (v7 != v8);
      swift_bridgeObjectRelease();
      uint64_t v7 = v21;
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_19:
  static Logger.AppIntents.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v0 = Logger.logObject.getter();
  LOBYTE(v6) = static os_log_type_t.default.getter();
  unint64_t v4 = (unint64_t)v7 >> 62;
  if (!os_log_type_enabled(v0, (os_log_type_t)v6))
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  uint64_t v3 = (void *)(v1 + 32);
  os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)os_log_type_t v2 = 134218240;
  if (v4) {
    goto LABEL_45;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    *uint64_t v3 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *((_WORD *)v2 + 6) = 2048;
    if (v20)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v3 = *(void **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)(v1 + 40) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)v6, "[GetContentOfFolderIntent] %ld items out of %ld nodes found", v2, 0x16u);
    swift_slowDealloc();
LABEL_27:

    (*(void (**)(void, void))(v1 + 128))(*(void *)(v1 + 112), *(void *)(v1 + 96));
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        BOOL v13 = _swiftEmptyArrayStorage;
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v5) {
        goto LABEL_39;
      }
    }
    uint64_t v21 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v0 = &v21;
    sub_100190F48(0, v5 & ~(v5 >> 63), 0);
    if ((v5 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(v1 + 72);
  BOOL v13 = (void *)v21;
  do
  {
    if ((v7 & 0xC000000000000001) != 0) {
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v14 = *(id *)(v7 + 8 * v11 + 32);
    }
    sub_100162CCC(v14, *(void *)(v1 + 80));
    uint64_t v21 = (uint64_t)v13;
    unint64_t v16 = v13[2];
    unint64_t v15 = v13[3];
    if (v16 >= v15 >> 1)
    {
      sub_100190F48(v15 > 1, v16 + 1, 1);
      BOOL v13 = (void *)v21;
    }
    uint64_t v17 = *(void *)(v1 + 80);
    ++v11;
    v13[2] = v16 + 1;
    sub_100142DFC(v17, (uint64_t)v13+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v16);
  }
  while (v5 != v11);
  swift_bridgeObjectRelease();
LABEL_40:
  *(void *)(v1 + 24) = v13;
  sub_1000CBE70((uint64_t *)&unk_10070C060);
  sub_100142E60();
  static IntentResult.result<A>(value:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v1 + 8);
  return v18();
}

uint64_t sub_100141650@<X0>(uint64_t a1@<X8>)
{
  return sub_1001416C4(&qword_100704E50, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100736E08, a1);
}

uint64_t sub_10014168C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001416C4(&qword_100704E58, (uint64_t (*)(void))&type metadata accessor for IntentAuthenticationPolicy, (uint64_t)qword_100736E20, a1);
}

uint64_t sub_1001416C4@<X0>(void *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_10009D098(v7, a3);
  id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t sub_10014176C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000CB70;
  return sub_100140D4C(a1, v4);
}

uint64_t sub_10014180C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001424C4();
  *a1 = result;
  return result;
}

uint64_t sub_100141834(uint64_t a1)
{
  unint64_t v2 = sub_100142DA0();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t sub_100141870(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v6 - 8);
  uint64_t v20 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000CBE70(&qword_100707B40);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  sub_10011029C();
  uint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_100142FD4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000666D8;
  void aBlock[3] = &unk_1006918B0;
  unint64_t v15 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_10014303C((unint64_t *)&qword_100706770, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000CBE70((uint64_t *)&unk_100705390);
  sub_100073DF0((unint64_t *)&qword_100706780, (uint64_t *)&unk_100705390);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
  return swift_release();
}

uint64_t sub_100141C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70(&qword_100707B40);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  type metadata accessor for FolderNodeObserver();
  uint64_t v7 = (void *)swift_allocObject();
  void v7[3] = 0;
  void v7[4] = 0;
  void v7[2] = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_unknownObjectRetain();
  sub_100141DC8((uint64_t)sub_100143118, v9);
  swift_release();
  return swift_release();
}

uint64_t sub_100141D80()
{
  return CheckedContinuation.resume(returning:)();
}

void sub_100141DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCNodeObserver());
  swift_getObjectType();
  uint64_t v7 = (void *)swift_unknownObjectRetain();
  unint64_t v8 = sub_10050E01C(v7, 0, 0, v6);
  uint64_t v9 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v9 + 2) = v3;
  *((void *)v9 + 3) = a1;
  *((void *)v9 + 4) = a2;
  uint64_t v10 = (objc_class *)type metadata accessor for DOCNodeObserverSubscriber(0);
  id v11 = objc_allocWithZone(v10);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v12 = (char *)v11;
  UUID.init()();
  unint64_t v13 = &v12[OBJC_IVAR____TtC5Files25DOCNodeObserverSubscriber_updateBlock];
  *(void *)unint64_t v13 = DOCSplitBrowserViewController.didCommitPreview(of:);
  *((void *)v13 + 1) = 0;
  uint64_t v14 = (uint64_t (**)(uint64_t))&v12[OBJC_IVAR____TtC5Files25DOCNodeObserverSubscriber_didFinishGatheringBlock];
  *uint64_t v14 = sub_100142BE4;
  v14[1] = v9;
  swift_retain();

  v20.receiver = v12;
  v20.super_class = v10;
  id v15 = [super init];
  swift_release();
  unint64_t v16 = &v8[OBJC_IVAR____TtC5Files15DOCNodeObserver_subscribers];
  swift_beginAccess();
  id v17 = v15;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_release();
  uint64_t v18 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v17;

  sub_100034EF8();
  uint64_t v19 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v8;
}

uint64_t sub_100141FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000CBE70(&qword_100707AC0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for MainActor();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = v12;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = a3;
  void v13[5] = a4;
  void v13[6] = a1;
  v13[7] = v11;
  swift_release();
  sub_10003D154((uint64_t)v9, (uint64_t)&unk_100707AD0, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_100142148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  void v7[6] = a5;
  type metadata accessor for MainActor();
  v7[9] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001421E4, v9, v8);
}

uint64_t sub_1001421E4()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = (void (*)(uint64_t))v0[5];
  swift_release();
  v2(v1);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1001422A0();
    swift_release();
  }
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_1001422A0()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v9 = v1;
    sub_10019E3AC();
    uint64_t v2 = *(void **)(v0 + 32);
    if (v2)
    {
      swift_beginAccess();
      id v3 = v2;
      unint64_t v4 = swift_bridgeObjectRetain();
      unint64_t v5 = sub_10050E2E4(v4, (uint64_t)v3);
      char v7 = v6;
      swift_bridgeObjectRelease();
      if (v7)
      {
      }
      else
      {
        swift_beginAccess();
        uint64_t v8 = (void *)sub_100050628(v5);
        swift_endAccess();
      }
    }
    else
    {
    }
  }
}

uint64_t sub_1001423D0()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FolderNodeObserver()
{
  return self;
}

ValueMetadata *type metadata accessor for GetContentOfFolderIntent()
{
  return &type metadata for GetContentOfFolderIntent;
}

uint64_t sub_10014244C()
{
  return sub_100073DF0(&qword_100707AA0, &qword_100707AA8);
}

uint64_t sub_100142488()
{
  return sub_100073DF0((unint64_t *)&unk_100707AB0, (uint64_t *)&unk_10070C010);
}

uint64_t sub_1001424C4()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v34 = *(void *)(v0 - 8);
  uint64_t v35 = v0;
  __chkstk_darwin(v0);
  id v33 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1000CBE70(&qword_1007075E0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v32 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v31 = (char *)&v28 - v5;
  uint64_t v6 = sub_1000CBE70((uint64_t *)&unk_100707AE0);
  __chkstk_darwin(v6 - 8);
  unint64_t v37 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000CBE70((uint64_t *)&unk_10070C020);
  __chkstk_darwin(v8 - 8);
  uint64_t v36 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Locale();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for LocalizedStringResource();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v29 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_1000CBE70((uint64_t *)&unk_100707AF0);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v19 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  objc_super v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v20(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v20(v13, v19, v10);
  uint64_t v21 = v36;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v16);
  uint64_t v22 = type metadata accessor for DOCFileEntity();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v37, 1, 1, v22);
  sub_1000CBE70((uint64_t *)&unk_10070C030);
  type metadata accessor for UTType();
  uint64_t v23 = swift_allocObject();
  long long v28 = xmmword_1005A0030;
  *(_OWORD *)(v23 + 16) = xmmword_1005A0030;
  static UTType.folder.getter();
  uint64_t v24 = type metadata accessor for IntentDialog();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  v25(v31, 1, 1, v24);
  v25(v32, 1, 1, v24);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = v28;
  static UTType.folder.getter();
  type metadata accessor for FileEntitySpotlight.Source();
  swift_allocObject();
  uint64_t v38 = sub_100308720(v26, 1);
  uint64_t v39 = 2;
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v33, enum case for InputConnectionBehavior.default(_:), v35);
  sub_100142D4C();
  sub_10014303C(&qword_1007075F0, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
  return IntentParameter<>.init<A>(title:description:default:supportedContentTypes:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)();
}

uint64_t sub_100142BA4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100142BE4(uint64_t a1)
{
  return sub_100141FD0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100142BF0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100142C28()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100142C78(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000CB70;
  return sub_100142148(a1, v4, v5, v6, v7, v9, v8);
}

unint64_t sub_100142D4C()
{
  unint64_t result = qword_100707B00;
  if (!qword_100707B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707B00);
  }
  return result;
}

unint64_t sub_100142DA0()
{
  unint64_t result = qword_100707B10;
  if (!qword_100707B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100707B10);
  }
  return result;
}

uint64_t sub_100142DF4(uint64_t a1)
{
  return sub_100141870(a1, *(void *)(v1 + 16));
}

uint64_t sub_100142DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DOCFileEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100142E60()
{
  unint64_t result = qword_100707B30;
  if (!qword_100707B30)
  {
    sub_100074618((uint64_t *)&unk_10070C060);
    sub_10014303C((unint64_t *)&qword_10070C070, (void (*)(uint64_t))type metadata accessor for DOCFileEntity);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100707B30);
  }
  return result;
}

uint64_t sub_100142F04()
{
  uint64_t v1 = sub_1000CBE70(&qword_100707B40);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100142FD4()
{
  uint64_t v1 = *(void *)(sub_1000CBE70(&qword_100707B40) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100141C10(v2, v3);
}

uint64_t sub_10014303C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100143084()
{
  uint64_t v1 = sub_1000CBE70(&qword_100707B40);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100143118()
{
  sub_1000CBE70(&qword_100707B40);

  return sub_100141D80();
}

uint64_t sub_10014318C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

id sub_1001431B8()
{
  id v1 = [*v0 configuration];

  return v1;
}

id sub_1001431F0()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC5Files19DOCSearchController_configuration);
}

id sub_100143208()
{
  id result = *(id *)(*v0 + OBJC_IVAR____TtC5Files24DOCServiceViewController__configuration);
  if (result) {
    return result;
  }
  __break(1u);
  return result;
}

void sub_10014322C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    sub_100149D64();
  }
}

id sub_100143280()
{
  [*(id *)&v0[OBJC_IVAR____TtC5Files14DOCTipsManager_sourceObserver] stopObservingSources];
  if (*(void *)&v0[OBJC_IVAR____TtC5Files14DOCTipsManager_sharingFlowTask])
  {
    swift_retain();
    sub_1000CBE70((uint64_t *)&unk_1007076D0);
    Task.cancel()();
    swift_release();
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCTipsManager(0);
  return [super dealloc];
}

uint64_t sub_100143498()
{
  return type metadata accessor for DOCTipsManager(0);
}

id sub_1001434A0(void *a1, uint64_t a2)
{
  id v99 = a1;
  uint64_t v3 = sub_1000CBE70(&qword_1007076B0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000CBE70(&qword_100707AC0);
  __chkstk_darwin(v10 - 8);
  int v101 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Tips.InvalidationReason();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v92 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v29 = (char *)&v92 - v28;
  if (a2)
  {
    uint64_t v30 = (uint64_t)v101;
    if (a2 == 1)
    {
      uint64_t v31 = v25;
      uint64_t v32 = v100;
      uint64_t v33 = v23;
      static Logger.DocumentManager.getter();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Files Family Tip, user sent folder invite", v36, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v33);
      v102[1] = *(id *)(v32 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTip);
      (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for Tips.InvalidationReason.actionPerformed(_:), v12);
      type metadata accessor for DOCTipsFamilyTip();
      sub_10014B994();
      swift_retain();
      Tip.invalidate(reason:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      swift_release();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v37 = objc_allocWithZone((Class)NSUserDefaults);
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v39 = [v37 initWithSuiteName:v38];

      if (v39)
      {
        [v39 setBool:1 forKey:DOCUserDefaultsKeyIsSharingFolderWithAdultFamilyMember];
      }
      uint64_t v40 = type metadata accessor for TaskPriority();
      uint64_t v30 = (uint64_t)v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v101, 1, 1, v40);
      type metadata accessor for MainActor();
      uint64_t v41 = static MainActor.shared.getter();
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = &protocol witness table for MainActor;
      sub_10003D154(v30, (uint64_t)&unk_100707CF8, v42);
      swift_release();
    }
  }
  else
  {
    uint64_t v95 = v24;
    uint64_t v96 = v9;
    uint64_t v92 = v26;
    id v93 = v27;
    uint64_t v43 = v25;
    uint64_t v97 = v7;
    uint64_t v98 = v23;
    static Logger.DocumentManager.getter();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Files Family Tip, user cancelled invite", v46, 2u);
      swift_slowDealloc();
    }

    uint64_t v47 = *(void (**)(char *, uint64_t))(v43 + 8);
    uint64_t v94 = v43 + 8;
    v47(v22, v98);
    uint64_t v48 = v100;
    uint64_t v49 = v100 + OBJC_IVAR____TtC5Files14DOCTipsManager_familyFolderFilePath;
    swift_beginAccess();
    sub_1000CBC00(v49, (uint64_t)v5, &qword_1007076B0);
    uint64_t v50 = v97;
    uint64_t v51 = v6;
    int v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48))(v5, 1, v6);
    uint64_t v30 = (uint64_t)v101;
    if (v52 == 1)
    {
      sub_1000CBBA4((uint64_t)v5, &qword_1007076B0);
    }
    else
    {
      uint64_t v53 = v96;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v96, v5, v51);
      id v54 = *(void **)(v48 + OBJC_IVAR____TtC5Files14DOCTipsManager_fileManager);
      URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC5Files14DOCTipsManager_fileManager);
      uint64_t v56 = v55;
      type metadata accessor for URLResourceKey(0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      v102[0] = 0;
      id v58 = [v54 contentsOfDirectoryAtURL:v56 includingPropertiesForKeys:isa options:0 error:v102];

      id v59 = v102[0];
      if (v58)
      {
        id v93 = (void (*)(uint64_t, uint64_t))v47;
        uint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        id v61 = v59;

        static Logger.DocumentManager.getter();
        swift_bridgeObjectRetain();
        id v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v64 = 134217984;
          v102[0] = *(id *)(v60 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Files Family Tip, items in Family folder  %ld", v64, 0xCu);
          uint64_t v50 = v97;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        uint64_t v71 = v93;
        v93((uint64_t)v95, v98);
        uint64_t v72 = *(void *)(v60 + 16);
        swift_bridgeObjectRelease();
        if (v72)
        {
          (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v51);
        }
        else
        {
          URL._bridgeToObjectiveC()(v73);
          uint64_t v75 = v74;
          v102[0] = 0;
          id v76 = v53;
          unsigned int v77 = [v54 removeItemAtURL:v74 error:v102];

          if (v77)
          {
            id v78 = *(void (**)(char *, uint64_t))(v50 + 8);
            id v79 = v102[0];
            v78(v76, v51);
          }
          else
          {
            id v80 = v102[0];
            _convertNSErrorToError(_:)();

            swift_willThrow();
            static Logger.DocumentManager.getter();
            swift_errorRetain();
            swift_errorRetain();
            uint64_t v81 = Logger.logObject.getter();
            os_log_type_t v82 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v81, v82))
            {
              uint64_t v83 = (uint8_t *)swift_slowAlloc();
              uint64_t v84 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v83 = 138412290;
              swift_errorRetain();
              uint64_t v85 = (void *)_swift_stdlib_bridgeErrorToNSError();
              v102[0] = v85;
              uint64_t v50 = v97;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v84 = v85;
              uint64_t v71 = v93;
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v81, v82, "Files Family Tip, Failed to remove family folder with error: %@", v83, 0xCu);
              sub_1000CBE70(&qword_100707CC0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_errorRelease();
              swift_errorRelease();
            }
            uint64_t v86 = v96;
            swift_errorRelease();
            v71(v92, v98);
            (*(void (**)(char *, uint64_t))(v50 + 8))(v86, v51);
          }
        }
      }
      else
      {
        id v65 = v102[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        static Logger.DocumentManager.getter();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = (uint8_t *)swift_slowAlloc();
          uint64_t v69 = (void *)swift_slowAlloc();
          uint64_t v95 = v68;
          *(_DWORD *)uint64_t v68 = 138412290;
          swift_errorRetain();
          NSString v70 = (void *)_swift_stdlib_bridgeErrorToNSError();
          v102[0] = v70;
          uint64_t v50 = v97;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v69 = v70;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "Files Family Tip, Failed to get folder contents with error: %@", v95, 0xCu);
          sub_1000CBE70(&qword_100707CC0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        swift_errorRelease();
        v47((char *)v93, v98);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v96, v51);
      }
    }
  }
  uint64_t v87 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v30, 1, 1, v87);
  uint64_t v88 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v89 = static MainActor.shared.getter();
  CGRect v90 = (void *)swift_allocObject();
  v90[2] = v89;
  v90[3] = &protocol witness table for MainActor;
  v90[4] = v88;
  swift_release();
  sub_1001B699C(v30, (uint64_t)&unk_100707CE0, (uint64_t)v90);
  swift_release();
  return [v99 dismissViewControllerAnimated:1 completion:0];
}

uint64_t sub_100144158()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 40) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001441EC, v2, v1);
}

uint64_t sub_1001441EC()
{
  swift_release();
  if (qword_100705218 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_1000CBE70(&qword_10070AB30);
  sub_10009D098(v1, (uint64_t)qword_100716CB8);
  *(unsigned char *)(v0 + 48) = 1;
  swift_beginAccess();
  Tips.Parameter.wrappedValue.setter();
  swift_endAccess();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001442DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v4[5] = a1;
  void v4[6] = a4;
  type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100144374, v6, v5);
}

uint64_t sub_100144374()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v2 = (void *)Strong;
  if (Strong)
  {
    uint64_t v3 = *(void **)(Strong + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
    if (v3) {
      [v3 setUserInteractionEnabled:1];
    }
  }
  **(unsigned char **)(v0 + 40) = v2 == 0;
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100144494()
{
  v1[16] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  return _swift_task_switch(sub_100144564, 0, 0);
}

uint64_t sub_100144564()
{
  uint64_t v1 = *(void **)(v0[16] + OBJC_IVAR____TtC5Files14DOCTipsManager_sourceObserver);
  v0[21] = v1;
  if (v1)
  {
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_1001446BC;
    uint64_t v2 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100144B90;
    v0[13] = &unk_100691AA8;
    v0[14] = v2;
    [v1 retrieveAllSourcesCompletionBlock:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3(0);
  }
}

uint64_t sub_1001446BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = sub_100144A5C;
  }
  else {
    uint64_t v2 = sub_1001447CC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001447CC()
{
  unint64_t v1 = v0[15];
  if (v1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 0;
      while (1)
      {
        if ((v1 & 0xC000000000000001) != 0) {
          id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v4 = *(id *)(v1 + 8 * v3 + 32);
        }
        uint64_t v5 = v4;
        uint64_t v0 = (void *)(v3 + 1);
        if (__OFADD__(v3, 1))
        {
          __break(1u);
          goto LABEL_25;
        }
        type metadata accessor for DOCFileProviderSource(0);
        uint64_t v6 = swift_dynamicCastClass();
        if (v6)
        {
          uint64_t v7 = (void *)v6;
          uint64_t v8 = *(void **)(v6 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
          if (v8)
          {
            id v9 = v5;
            id v10 = v8;
            if (((unint64_t)[v7 status] | 2) == 2
              && [v10 isiCloudDriveProvider]
              && ([v10 isEnterpriseDomain] & 1) == 0)
            {
              uint64_t v0 = v19;
              swift_bridgeObjectRelease();
              static Logger.DocumentManager.getter();
              uint64_t v11 = Logger.logObject.getter();
              os_log_type_t v12 = static os_log_type_t.default.getter();
              BOOL v13 = os_log_type_enabled(v11, v12);
              uint64_t v14 = (void *)v19[21];
              if (v13)
              {
                uint64_t v15 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v15 = 0;
                _os_log_impl((void *)&_mh_execute_header, v11, v12, "Files Family Tip, found main iCloud Drive Provider", v15, 2u);
                swift_slowDealloc();
              }
              else
              {

                id v9 = v14;
              }

              (*(void (**)(void, void))(v19[18] + 8))(v19[20], v19[17]);
              goto LABEL_19;
            }
          }
        }

        ++v3;
        if (v0 == (void *)v2)
        {
          uint64_t v0 = v19;
          break;
        }
      }
    }
  }
  uint64_t v16 = (void *)v0[21];
  swift_bridgeObjectRelease();

  uint64_t v8 = 0;
LABEL_19:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void *))v0[1];
  return v17(v8);
}

uint64_t sub_100144A5C()
{
  swift_willThrow();
  swift_errorRelease();
  static Logger.DocumentManager.getter();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Files Family Tip, failed to get sources", v3, 2u);
    swift_slowDealloc();
  }
  id v4 = (void *)v0[21];
  uint64_t v6 = v0[18];
  uint64_t v5 = v0[19];
  uint64_t v7 = v0[17];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8(0);
}

uint64_t sub_100144B90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000CBE70((uint64_t *)&unk_1007076D0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_10009E6C4(0, &qword_100707CD0);
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100144C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[24] = v5;
  v4[25] = *(void *)(v5 - 8);
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = sub_1000CBE70(&qword_1007076B0);
  v4[30] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[31] = v6;
  v4[32] = *(void *)(v6 - 8);
  v4[33] = swift_task_alloc();
  return _swift_task_switch(sub_100144DDC, 0, 0);
}

uint64_t sub_100144DDC()
{
  *(void *)(v0 + 272) = [self defaultManager];
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v1;
  void *v1 = v0;
  v1[1] = sub_100144E90;
  return sub_100144494();
}

uint64_t sub_100144E90(uint64_t a1)
{
  *(void *)(*(void *)v1 + 288) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100144F90, 0, 0);
}

uint64_t sub_100144F90()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void **)(v0 + 288);
  if (!v1)
  {
    static Logger.DocumentManager.getter();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Files Family Tip, No iCloud Drive Domain found", v21, 2u);
      swift_slowDealloc();
    }
    uint64_t v22 = *(void **)(v0 + 272);
    uint64_t v23 = *(void *)(v0 + 248);
    uint64_t v24 = *(void *)(v0 + 256);
    uint64_t v25 = *(void *)(v0 + 216);
    uint64_t v26 = *(void *)(v0 + 192);
    uint64_t v27 = *(void *)(v0 + 200);
    uint64_t v28 = *(void *)(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v28, 1, 1, v23);
    goto LABEL_23;
  }
  if (![*(id *)(v0 + 288) isEnabled]
    || ([v1 isHidden] & 1) != 0)
  {
    static Logger.DocumentManager.getter();
    id v2 = v1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void **)(v0 + 272);
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v9 = *(void *)(v0 + 200);
    if (v5)
    {
      uint64_t v34 = *(void **)(v0 + 272);
      uint64_t v10 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      unsigned int v11 = [v2 isEnabled];
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = 1702195828;
      }
      else {
        uint64_t v13 = 0x65736C6166;
      }
      uint64_t v33 = v7;
      if (v12) {
        unint64_t v14 = 0xE500000000000000;
      }
      else {
        unint64_t v14 = 0xE400000000000000;
      }
      *(void *)(v0 + 128) = sub_10009B0E4(v13, v14, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      unsigned int v15 = [v2 isHidden];
      BOOL v16 = v15 == 0;
      if (v15) {
        uint64_t v17 = 1702195828;
      }
      else {
        uint64_t v17 = 0x65736C6166;
      }
      if (v16) {
        unint64_t v18 = 0xE500000000000000;
      }
      else {
        unint64_t v18 = 0xE400000000000000;
      }
      *(void *)(v0 + 136) = sub_10009B0E4(v17, v18, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Files Family Tip, Did not attempt to create folder, iCloud Domain isEnabled: %s , isHidden: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v33, v8);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 256) + 56))(*(void *)(v0 + 160), 1, 1, *(void *)(v0 + 248));
LABEL_23:
    *(unsigned char *)(*(void *)(v0 + 160) + *(int *)(type metadata accessor for FamilyFolderDetails(0) + 20)) = 0;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    return v29();
  }
  uint64_t v31 = *(void **)(v0 + 272);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_100145478;
  uint64_t v32 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1000D2B00;
  *(void *)(v0 + 104) = &unk_100691A18;
  *(void *)(v0 + 112) = v32;
  [v31 doc_fetchRootItemForProviderDomain:v1 completionHandler:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100145478()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 296) = v1;
  if (v1) {
    id v2 = sub_100145CD4;
  }
  else {
    id v2 = sub_100145588;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100145588()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[15];
  v0[38] = v3;
  uint64_t v4 = swift_allocObject();
  v0[39] = v4;
  swift_unknownObjectWeakInit();
  BOOL v5 = (void *)swift_task_alloc();
  v0[40] = v5;
  v5[2] = v4;
  v5[3] = v2;
  void v5[4] = v1;
  void v5[5] = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[41] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1001456B8;
  uint64_t v8 = v0[29];
  uint64_t v7 = v0[30];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, 0, 0, 0xD000000000000021, 0x80000001005D63C0, sub_10014B6B4, v5, v8);
}

uint64_t sub_1001456B8()
{
  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100145970;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v2 = sub_1001457DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001457DC()
{
  uint64_t v1 = *(void **)(v0 + 304);
  uint64_t v2 = *(void **)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 240);

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_1000CBBA4(*(void *)(v0 + 240), &qword_1007076B0);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 256) + 56))(*(void *)(v0 + 160), 1, 1, *(void *)(v0 + 248));
    char v6 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 256);
    uint64_t v7 = *(void *)(v0 + 264);
    uint64_t v9 = *(void *)(v0 + 248);
    uint64_t v10 = *(void *)(v0 + 160);
    unsigned int v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v11(v7, *(void *)(v0 + 240), v9);
    v11(v10, v7, v9);
    char v6 = 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
  }
  *(unsigned char *)(*(void *)(v0 + 160) + *(int *)(type metadata accessor for FamilyFolderDetails(0) + 20)) = v6;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100145970()
{
  uint64_t v21 = v0;
  uint64_t v1 = *(void **)(v0 + 304);
  swift_release();
  swift_task_dealloc();

  static Logger.DocumentManager.getter();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unsigned int v15 = *(void **)(v0 + 272);
    uint64_t v16 = *(void *)(v0 + 200);
    uint64_t v17 = *(void **)(v0 + 288);
    uint64_t v18 = *(void *)(v0 + 192);
    uint64_t v19 = *(void *)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 168);
    unint64_t v5 = *(void *)(v0 + 176);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 144) = sub_10009B0E4(v4, v5, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 152) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Files Family Tip, Failed to create folder %s with error: %@", (uint8_t *)v6, 0x16u);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v18);
  }
  else
  {
    uint64_t v9 = *(void **)(v0 + 288);
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v10 = *(void *)(v0 + 208);
    uint64_t v12 = *(void *)(v0 + 192);

    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 256) + 56))(*(void *)(v0 + 160), 1, 1, *(void *)(v0 + 248));
  *(unsigned char *)(*(void *)(v0 + 160) + *(int *)(type metadata accessor for FamilyFolderDetails(0) + 20)) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100145CD4()
{
  uint64_t v20 = v0;
  swift_willThrow();
  static Logger.DocumentManager.getter();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = *(void **)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 200);
    uint64_t v16 = *(void **)(v0 + 288);
    uint64_t v17 = *(void *)(v0 + 192);
    uint64_t v18 = *(void *)(v0 + 208);
    uint64_t v3 = *(void *)(v0 + 168);
    unint64_t v4 = *(void *)(v0 + 176);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 144) = sub_10009B0E4(v3, v4, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 152) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Files Family Tip, Failed to create folder %s with error: %@", (uint8_t *)v5, 0x16u);
    sub_1000CBE70(&qword_100707CC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v17);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 288);
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v11 = *(void *)(v0 + 192);

    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 256) + 56))(*(void *)(v0 + 160), 1, 1, *(void *)(v0 + 248));
  *(unsigned char *)(*(void *)(v0 + 160) + *(int *)(type metadata accessor for FamilyFolderDetails(0) + 20)) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

void sub_100146028(void *a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, void (*a6)(char *, uint64_t), uint64_t a7)
{
  uint64_t v65 = a7;
  uint64_t v66 = a6;
  id v63 = a4;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v69 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  id v62 = (char *)&v56 - v17;
  uint64_t v18 = sub_1000CBE70(&qword_1007076B0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v64 = (char *)&v56 - v22;
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v67 = *(void *)(v23 - 8);
  uint64_t v68 = v23;
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v56 - v27;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v30 = Strong;
  if (a2)
  {
    swift_errorRetain();
    static Logger.DocumentManager.getter();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      id v62 = (char *)swift_slowAlloc();
      v71[0] = (uint64_t)v62;
      *(_DWORD *)uint64_t v33 = 136315394;
      id v61 = v30;
      swift_bridgeObjectRetain();
      uint64_t v70 = sub_10009B0E4((uint64_t)v63, a5, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2112;
      swift_errorRetain();
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v70 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v35;
      uint64_t v30 = v61;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Files Family Tip, Failed to create folder %s with error: %@", (uint8_t *)v33, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v67 + 8))(v28, v68);
    uint64_t v21 = v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v64, 1, 1, v10);
    swift_errorRetain();
    v66(v21, a2);
    swift_errorRelease();

    swift_errorRelease();
    goto LABEL_15;
  }
  if (!a1)
  {

    return;
  }
  id v36 = a1;
  id v37 = [v36 fileURL];
  id v63 = v36;
  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v21, 1, 1, v10);
    goto LABEL_14;
  }
  NSString v38 = v37;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v39 = v69;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
  v40(v21, v16, v10);
  uint64_t v41 = *(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56);
  v41(v21, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v21, 1, v10) == 1)
  {
LABEL_14:

LABEL_15:
    sub_1000CBBA4((uint64_t)v21, &qword_1007076B0);
    return;
  }
  uint64_t v60 = (void (*)(uint64_t, void, uint64_t, uint64_t))v41;
  id v61 = v30;
  uint64_t v42 = v62;
  v40(v62, v21, v10);
  static Logger.DocumentManager.getter();
  id v59 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v59(v13, v42, v10);
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = swift_slowAlloc();
    os_log_t v57 = v43;
    uint64_t v46 = (uint8_t *)v45;
    uint64_t v58 = swift_slowAlloc();
    v71[0] = v58;
    *(_DWORD *)uint64_t v46 = 136315138;
    uint64_t v56 = v46 + 4;
    uint64_t v47 = URL.absoluteString.getter();
    uint64_t v70 = sub_10009B0E4(v47, v48, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v69 = *(void *)(v39 + 8);
    ((void (*)(char *, uint64_t))v69)(v13, v10);
    os_log_t v49 = v57;
    _os_log_impl((void *)&_mh_execute_header, v57, v44, "Files Family Tip, got url for Family folder %s", v46, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v69 = *(void *)(v39 + 8);
    ((void (*)(char *, uint64_t))v69)(v13, v10);
  }
  (*(void (**)(char *, uint64_t))(v67 + 8))(v26, v68);
  uint64_t v51 = (void (*)(uint64_t, char *, uint64_t))v59;
  uint64_t v50 = v60;
  uint64_t v52 = (uint64_t)v64;
  uint64_t v53 = v62;
  v59(v64, v62, v10);
  v50(v52, 0, 1, v10);
  id v54 = v61;
  uint64_t v55 = (uint64_t)v61 + OBJC_IVAR____TtC5Files14DOCTipsManager_familyFolderFilePath;
  swift_beginAccess();
  sub_10014B834(v52, v55);
  swift_endAccess();
  v51(v52, v53, v10);
  v50(v52, 0, 1, v10);
  v66((char *)v52, 0);

  sub_1000CBBA4(v52, &qword_1007076B0);
  ((void (*)(char *, uint64_t))v69)(v53, v10);
}

uint64_t sub_100146864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_1000CBE70(&qword_100707CC8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v13 = (char *)result;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
    unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v15 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    id v16 = objc_allocWithZone((Class)FPCreateFolderOperation);
    id v17 = a5;
    swift_bridgeObjectRetain();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v19 = [v16 initWithParentItem:v17 folderName:v18];

    [v19 setShouldBounceOnCollision:1];
    uint64_t v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v21 = (void *)swift_allocObject();
    void v21[2] = v20;
    v21[3] = a3;
    void v21[4] = a4;
    v21[5] = sub_10014B758;
    v21[6] = v15;
    aBlock[4] = sub_10014B824;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_10000CAE4;
    void aBlock[3] = &unk_100691A80;
    uint64_t v22 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    [v19 setCreateFolderCompletionBlock:v22];
    _Block_release(v22);
    [*(id *)&v13[OBJC_IVAR____TtC5Files14DOCTipsManager_fpItemManager] scheduleAction:v19];

    return swift_release();
  }
  return result;
}

uint64_t sub_100146B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70(&qword_1007076B0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (a2)
  {
    v8[1] = a2;
    swift_errorRetain();
    sub_1000CBE70(&qword_100707CC8);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_1000CBC00(a1, (uint64_t)v8 - v6, &qword_1007076B0);
    sub_1000CBE70(&qword_100707CC8);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_100146C24(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __chkstk_darwin(v14);
  id v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v21 = (char *)&v36 - v20;
  if (a2)
  {
    uint64_t v41 = v19;
    uint64_t v42 = v18;
    uint64_t v43 = a5;
    swift_errorRetain();
    static Logger.DocumentManager.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      NSString v38 = (void *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v45 = v39;
      *(_DWORD *)uint64_t v24 = 136315394;
      os_log_t v37 = v22;
      uint64_t v25 = URL.absoluteString.getter();
      uint64_t v44 = sub_10009B0E4(v25, v26, &v45);
      uint64_t v40 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      *(_WORD *)(v24 + 12) = 2112;
      swift_errorRetain();
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v44 = v27;
      a4 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v38 = v27;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v22 = v37;
      _os_log_impl((void *)&_mh_execute_header, v37, v23, "Files Family Tip, error getting metadata for file %s %@", (uint8_t *)v24, 0x16u);
      sub_1000CBE70(&qword_100707CC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v42);
    swift_errorRetain();
    a4(0, a2);
    swift_errorRelease();
    swift_errorRelease();
  }
  else if (a1)
  {
    uint64_t v28 = v19;
    uint64_t v29 = v18;
    uint64_t v30 = (void (*)(void *, void))a4;
    id v31 = a1;
    static Logger.DocumentManager.getter();
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Files Family Tip, got metadata for file", v34, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
    id v35 = v31;
    v30(a1, 0);
  }
  else
  {
    a4(0, 0);
  }
}

uint64_t sub_1001470DC(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_1001470FC, 0, 0);
}

uint64_t sub_1001470FC()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_allocObject();
  v0[5] = v2;
  swift_unknownObjectWeakInit();
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  uint64_t v5 = sub_1000CBE70((uint64_t *)&unk_100707C88);
  *uint64_t v4 = v0;
  v4[1] = sub_100147228;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000020, 0x80000001005D6360, sub_10014B4C4, v3, v5);
}

uint64_t sub_100147228()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100147368;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v2 = sub_10014734C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014734C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_100147368()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001473D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_1000CBE70(&qword_100707CB8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    id v23 = Strong;
    v11((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v14 = v24;
    URL._bridgeToObjectiveC()(v15);
    id v17 = v16;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v4);
    unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v19 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19 + v18, (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    uint64_t v20 = (uint64_t (**)(void *, uint64_t))(v19 + ((v6 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
    void *v20 = sub_10014B4D8;
    v20[1] = (uint64_t (*)(void *, uint64_t))v13;
    aBlock[4] = sub_10014B604;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_10000CAE4;
    void aBlock[3] = &unk_1006919F0;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    SWCollaborationMetadataForDocumentURL();
    _Block_release(v21);
    swift_release();
  }
}

uint64_t sub_1001476D0(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_1000CBE70(&qword_100707CB8);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v3 = a1;
    sub_1000CBE70(&qword_100707CB8);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100147744()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000CBE70(&qword_100707AC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.DocumentManager.getter();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Files Family Tip, Initiating tips share flow", v11, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v14;
  v15[3] = &protocol witness table for MainActor;
  void v15[4] = v13;
  swift_release();
  *(void *)(v1 + OBJC_IVAR____TtC5Files14DOCTipsManager_sharingFlowTask) = sub_100149288((uint64_t)v4, (uint64_t)&unk_100707C60, (uint64_t)v15);
  return swift_release();
}

uint64_t sub_1001479B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[6] = a4;
  uint64_t v5 = type metadata accessor for Logger();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  sub_1000CBE70(&qword_100707AC0);
  v4[12] = swift_task_alloc();
  sub_1000CBE70(&qword_1007076B0);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[16] = v7;
  v4[17] = *(void *)(v7 + 64);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = type metadata accessor for FamilyFolderDetails(0);
  v4[21] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[22] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[23] = v9;
  v4[24] = v8;
  return _swift_task_switch(sub_100147BD8, v9, v8);
}

id sub_100147BD8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[25] = Strong;
  if (Strong)
  {
    id result = (id)_DocumentManagerBundle();
    if (result)
    {
      uint64_t v3 = result;
      v12._object = (void *)0x80000001005D6280;
      v4._countAndFlagsBits = 0x796C696D6146;
      v4._object = (void *)0xE600000000000000;
      v5._countAndFlagsBits = 0x617A696C61636F4CLL;
      v5._object = (void *)0xEB00000000656C62;
      v6._countAndFlagsBits = 0;
      v6._object = (void *)0xE000000000000000;
      v12._countAndFlagsBits = 0xD000000000000039;
      Swift::String v7 = DOCLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v12);

      v0[26] = v7._object;
      uint64_t v8 = (void *)swift_task_alloc();
      v0[27] = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_100147DE8;
      uint64_t v9 = v0[21];
      return (id)sub_100144C6C(v9, v7._countAndFlagsBits, (uint64_t)v7._object);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v10 = (uint64_t (*)(void))v0[1];
    return (id)v10();
  }
  return result;
}

uint64_t sub_100147DE8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 192);
  uint64_t v3 = *(void *)(v1 + 184);
  return _swift_task_switch(sub_100147F2C, v3, v2);
}

uint64_t sub_100147F2C()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[14];
  sub_1000CBC00(v0[21], v3, &qword_1007076B0);
  Swift::String v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[28] = v4;
  v0[29] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v1) == 1)
  {
    uint64_t v5 = v0[14];
    swift_release();
    sub_1000CBBA4(v5, &qword_1007076B0);
LABEL_8:
    static Logger.DocumentManager.getter();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Files Family Tip, Family folder details not found", v17, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = v0[25];
    uint64_t v20 = v0[8];
    uint64_t v19 = v0[9];
    uint64_t v21 = v0[7];

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    uint64_t v22 = *(void **)(v18 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
    id v23 = (void *)v0[25];
    uint64_t v24 = v0[21];
    if (v22) {
      [v22 setUserInteractionEnabled:1];
    }

    sub_10014A380(v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[19];
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[14];
  Swift::String v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v0[30] = v12;
  v0[31] = (v10 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v12(v8, v11, v9);
  if (*(unsigned char *)(v7 + *(int *)(v6 + 20)) != 1)
  {
    (*(void (**)(void, void))(v0[16] + 8))(v0[19], v0[15]);
    swift_release();
    goto LABEL_8;
  }
  uint64_t v13 = (void *)swift_task_alloc();
  v0[32] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100148204;
  return sub_10014A3DC();
}

uint64_t sub_100148204(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 264) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 192);
  uint64_t v4 = *(void *)(v2 + 184);
  return _swift_task_switch(sub_10014832C, v4, v3);
}

uint64_t sub_10014832C()
{
  if (!*(void *)(*(void *)(v0 + 264) + 16))
  {
    swift_bridgeObjectRelease();
    swift_release();
    static Logger.DocumentManager.getter();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Files Family Tip, No family members found to use as recipients", v42, 2u);
      swift_slowDealloc();
    }
    uint64_t v43 = *(void *)(v0 + 200);
    uint64_t v44 = *(void *)(v0 + 80);
    goto LABEL_16;
  }
  if (![self canSendText])
  {
    swift_bridgeObjectRelease();
    swift_release();
    static Logger.DocumentManager.getter();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v45, "Files Family Tip, SMS services are not available", v46, 2u);
      swift_slowDealloc();
    }
    uint64_t v43 = *(void *)(v0 + 200);
    uint64_t v44 = *(void *)(v0 + 88);
LABEL_16:
    uint64_t v47 = *(void *)(v0 + 56);
    uint64_t v48 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v44, v47);
    os_log_t v49 = *(void **)(v43 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
    uint64_t v50 = *(void **)(v0 + 200);
    uint64_t v51 = *(void *)(v0 + 168);
    uint64_t v52 = *(void *)(v0 + 152);
    uint64_t v53 = *(void *)(v0 + 120);
    uint64_t v54 = *(void *)(v0 + 128);
    if (v49) {
      [v49 setUserInteractionEnabled:1];
    }

    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
    goto LABEL_19;
  }
  uint64_t v1 = *(void *)(v0 + 200);
  id v2 = [objc_allocWithZone((Class)MFMessageComposeViewController) init];
  *(void *)(v0 + 272) = v2;
  [v2 setMessageComposeDelegate:v1];
  id v3 = (id)_DocumentManagerBundle();
  if (!v3)
  {
    __break(1u);
    return Task.value.getter(v3, v4, v5, v6, v7);
  }
  uint64_t v8 = v3;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 104);
  v59._object = (void *)0x80000001005D6300;
  v14._object = (void *)0x80000001005D62C0;
  v14._countAndFlagsBits = 0x1000000000000035;
  v15._countAndFlagsBits = 0x617A696C61636F4CLL;
  v15._object = (void *)0xEB00000000656C62;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v59._countAndFlagsBits = 0xD000000000000056;
  DOCLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v8, v16, v59);

  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setBody:v17];

  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v18(v13, v10, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v11);
  int v19 = v9(v13, 1, v11);
  uint64_t v21 = 0;
  if (v19 != 1)
  {
    uint64_t v22 = *(void *)(v0 + 120);
    uint64_t v23 = *(void *)(v0 + 128);
    uint64_t v24 = *(void *)(v0 + 104);
    URL._bridgeToObjectiveC()(v20);
    uint64_t v21 = v25;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v22);
  }
  id v26 = [objc_allocWithZone((Class)NSItemProvider) initWithContentsOfURL:v21];
  *(void *)(v0 + 280) = v26;

  if (v26)
  {
    os_log_t v57 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 240);
    uint64_t v27 = *(void **)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 144);
    uint64_t v28 = *(void *)(v0 + 152);
    uint64_t v30 = *(void *)(v0 + 128);
    uint64_t v31 = *(void *)(v0 + 120);
    uint64_t v32 = *(void *)(v0 + 96);
    uint64_t v33 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
    v18(v29, v28, v31);
    unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v27;
    v57(v35 + v34, v29, v31);
    id v36 = v27;
    uint64_t v37 = sub_100149058(v32, 3, (uint64_t)&unk_100707C80, v35, 1.0);
    *(void *)(v0 + 288) = v37;
    swift_release();
    sub_1000CBBA4(v32, &qword_100707AC0);
    NSString v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v38;
    uint64_t v39 = sub_1000CBE70((uint64_t *)&unk_100707C88);
    uint64_t v6 = sub_1000CBE70((uint64_t *)&unk_1007076D0);
    *NSString v38 = v0;
    v38[1] = sub_100148994;
    uint64_t v7 = &protocol self-conformance witness table for Error;
    id v3 = (id)(v0 + 40);
    uint64_t v4 = v37;
    uint64_t v5 = v39;
    return Task.value.getter(v3, v4, v5, v6, v7);
  }

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v51 = *(void *)(v0 + 168);
  (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 152), *(void *)(v0 + 120));
LABEL_19:
  sub_10014A380(v51);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v55 = *(uint64_t (**)(void))(v0 + 8);
  return v55();
}

uint64_t sub_100148994()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 184);
    uint64_t v4 = *(void *)(v2 + 192);
    uint64_t v5 = sub_100148CF8;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 184);
    uint64_t v4 = *(void *)(v2 + 192);
    uint64_t v5 = sub_100148AD8;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100148AD8()
{
  swift_release();
  uint64_t v1 = (void *)v0[5];
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 defaultShareOptions];
    if (v3)
    {
      uint64_t v4 = v3;
      self;
      uint64_t v5 = (void *)swift_dynamicCastObjCClass();
      if (!v5) {
    }
      }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v8 = (void *)v0[34];
    [v8 insertCollaborationItemProvider:v0[35] collaborationShareOptions:v5 collaborationMetadata:v2 isCollaboration:1];

    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v8 setRecipients:isa];

    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    uint64_t v11 = (void *)v0[34];
    uint64_t v12 = (void *)v0[35];
    uint64_t v7 = (void *)v0[25];
    if (Strong)
    {
      uint64_t v13 = Strong;
      [Strong presentViewController:v0[34] animated:1 completion:0];
    }
    else
    {
    }
    uint64_t v6 = v2;
  }
  else
  {
    uint64_t v6 = (void *)v0[34];
    id v2 = (id)v0[35];
    uint64_t v7 = (void *)v0[25];
    swift_bridgeObjectRelease();
  }

  uint64_t v14 = v0[21];
  (*(void (**)(void, void))(v0[16] + 8))(v0[19], v0[15]);
  sub_10014A380(v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100148CF8()
{
  uint64_t v1 = v0[25];
  swift_release();
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
  id v3 = (void *)v0[34];
  uint64_t v4 = (void *)v0[35];
  uint64_t v5 = (void *)v0[25];
  if (v2) {
    [v2 setUserInteractionEnabled:1];
  }

  swift_errorRelease();
  uint64_t v6 = v0[21];
  (*(void (**)(void, void))(v0[16] + 8))(v0[19], v0[15]);
  sub_10014A380(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100148E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100148EE8;
  void v6[3] = a3;
  void v6[4] = a2;
  return _swift_task_switch(sub_1001470FC, 0, 0);
}

uint64_t sub_100148EE8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 32) = a1;
    return _swift_task_switch(sub_100149034, 0, 0);
  }
}

uint64_t sub_100149034()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100149058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10 = sub_1000CBE70(&qword_100707AC0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CBC00(a1, (uint64_t)v12, &qword_100707AC0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = a2;
  *(void *)(v13 + 40) = a3;
  *(void *)(v13 + 48) = a4;
  *(double *)(v13 + 56) = a5;
  uint64_t v14 = type metadata accessor for TaskPriority();
  uint64_t v15 = *(void *)(v14 - 8);
  LODWORD(a2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  swift_retain();
  if (a2 == 1)
  {
    sub_1000CBBA4((uint64_t)v12, &qword_100707AC0);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    if (*(void *)(v13 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v17 = v18;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
  }
  sub_1000CBE70((uint64_t *)&unk_100707C88);
  if (v17 | v16)
  {
    v20[0] = 0;
    v20[1] = 0;
    v20[2] = v16;
    v20[3] = v17;
  }
  return swift_task_create();
}

uint64_t sub_100149288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1000CBBA4(a1, &qword_100707AC0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

id sub_100149458()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v61 - v5;
  __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v61 - v8;
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
  if (v10)
  {
    id v62 = v7;
    id v11 = v10;
    static Logger.DocumentManager.getter();
    id v12 = v11;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v63 = v2;
    uint64_t v61 = v1;
    if (v15)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      unsigned int v17 = [v12 isUserInteractionEnabled];
      BOOL v18 = v17 == 0;
      if (v17) {
        uint64_t v19 = 1702195828;
      }
      else {
        uint64_t v19 = 0x65736C6166;
      }
      if (v18) {
        unint64_t v20 = 0xE500000000000000;
      }
      else {
        unint64_t v20 = 0xE400000000000000;
      }
      uint64_t v66 = sub_10009B0E4(v19, v20, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v2 = v63;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Files Family Tip, familySharedFolderTipView isUserInteractionEnabled value %s", v16, 0xCu);
      swift_arrayDestroy();
      uint64_t v1 = v61;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v23 = *(void (**)(char *, uint64_t))(v2 + 8);
    v23(v9, v1);
    static Logger.DocumentManager.getter();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      id v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)id v26 = 136315138;
      if (qword_100705220 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_1000CBE70(&qword_10070AB30);
      sub_10009D098(v27, (uint64_t)qword_100716CD0);
      swift_beginAccess();
      Tips.Parameter.wrappedValue.getter();
      int v28 = v64;
      swift_endAccess();
      if (v28) {
        uint64_t v29 = 1702195828;
      }
      else {
        uint64_t v29 = 0x65736C6166;
      }
      if (v28) {
        unint64_t v30 = 0xE400000000000000;
      }
      else {
        unint64_t v30 = 0xE500000000000000;
      }
      v65[0] = sub_10009B0E4(v29, v30, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Files Family Tip, tip hasFamilyWithAdultMember parameter value %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v31 = v6;
      uint64_t v1 = v61;
    }
    else
    {

      uint64_t v31 = v6;
    }
    v23(v31, v1);
    uint64_t v32 = v62;
    static Logger.DocumentManager.getter();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      if (qword_100705218 != -1) {
        swift_once();
      }
      uint64_t v36 = sub_1000CBE70(&qword_10070AB30);
      sub_10009D098(v36, (uint64_t)qword_100716CB8);
      swift_beginAccess();
      Tips.Parameter.wrappedValue.getter();
      int v37 = v64;
      swift_endAccess();
      if (v37) {
        uint64_t v38 = 1702195828;
      }
      else {
        uint64_t v38 = 0x65736C6166;
      }
      if (v37) {
        unint64_t v39 = 0xE400000000000000;
      }
      else {
        unint64_t v39 = 0xE500000000000000;
      }
      v65[0] = sub_10009B0E4(v38, v39, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Files Family Tip, tip hasSharedFolderWithAdultFamilyMember parameter value %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v40 = v62;
    }
    else
    {

      uint64_t v40 = v32;
    }
    v23(v40, v1);
    [v12 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v41 = [objc_allocWithZone((Class)UIView) init];
    [v41 addSubview:v12];
    uint64_t v42 = self;
    sub_1000CBE70((uint64_t *)&unk_1007084E0);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_1005A1560;
    id v44 = [v12 leadingAnchor];
    id v45 = [v41 layoutMarginsGuide];
    id v46 = [v45 leadingAnchor];

    id v47 = [v44 constraintEqualToAnchor:v46];
    *(void *)(v43 + 32) = v47;
    id v48 = [v12 trailingAnchor];
    id v49 = [v41 layoutMarginsGuide];
    id v50 = [v49 trailingAnchor];

    id v51 = [v48 constraintEqualToAnchor:v50];
    *(void *)(v43 + 40) = v51;
    id v52 = [v12 topAnchor];
    id v53 = [v41 layoutMarginsGuide];
    id v54 = [v53 topAnchor];

    id v55 = [v52 constraintEqualToAnchor:v54];
    *(void *)(v43 + 48) = v55;
    id v56 = [v12 bottomAnchor];
    id v57 = [v41 layoutMarginsGuide];
    id v58 = [v57 bottomAnchor];

    id v59 = [v56 constraintEqualToAnchor:v58];
    *(void *)(v43 + 56) = v59;
    v65[0] = v43;
    specialized Array._endMutation()();
    sub_10009E6C4(0, (unint64_t *)&unk_100706720);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v42 activateConstraints:isa];

    return v41;
  }
  else
  {
    id v21 = objc_allocWithZone((Class)UIView);
    return [v21 init];
  }
}

uint64_t sub_100149D64()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - v7;
  static Logger.DocumentManager.getter();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Files Family Tip, Set up shared folder button tapped", v11, 2u);
    swift_slowDealloc();
  }

  id v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  uint64_t v13 = OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView;
  os_log_type_t v14 = *(void **)&v1[OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView];
  if (v14) {
    [v14 setUserInteractionEnabled:0];
  }
  static Logger.DocumentManager.getter();
  BOOL v15 = v1;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v27 = v2;
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 136315138;
    uint64_t v19 = *(void **)&v1[v13];
    if (v19) {
      unsigned __int8 v20 = [v19 isUserInteractionEnabled];
    }
    else {
      unsigned __int8 v20 = 2;
    }
    LOBYTE(v28) = v20;
    sub_1000CBE70(&qword_100707C50);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v28 = sub_10009B0E4(v23, v24, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Files Family Tip, familySharedFolderTipView isUserInteractionEnabled value in action handler %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v21 = v6;
    uint64_t v22 = v27;
  }
  else
  {

    id v21 = v6;
    uint64_t v22 = v2;
  }
  v12(v21, v22);
  return sub_100147744();
}

uint64_t sub_10014A094(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  uint64_t v12 = swift_task_alloc();
  *(void *)(v7 + 24) = v12;
  *(void *)uint64_t v12 = v7;
  *(void *)(v12 + 8) = sub_10014A160;
  *(double *)(v12 + 48) = a2;
  *(void *)(v12 + 32) = a6;
  *(void *)(v12 + 40) = a7;
  *(void *)(v12 + 24) = a5;
  return _swift_task_switch(sub_10014ACA4, 0, 0);
}

uint64_t sub_10014A160(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t sub_10014A270()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014A2AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D1744;
  return sub_1001479B4(a1, v4, v5, v6);
}

uint64_t type metadata accessor for FamilyFolderDetails(uint64_t a1)
{
  return sub_10009E984(a1, qword_100707D58);
}

uint64_t sub_10014A380(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FamilyFolderDetails(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10014A3DC()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1007128F8 + dword_1007128F8);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10014A4D8;
  return v4();
}

uint64_t sub_10014A4D8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10014A5D8, 0, 0);
}

void sub_10014A5D8()
{
  uint64_t v1 = (void *)v0[6];
  if (!v1)
  {
    static Logger.DocumentManager.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Files Family Tip, No Family found", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = v0[3];
    uint64_t v11 = v0[4];
    uint64_t v13 = v0[2];

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    uint64_t v14 = _swiftEmptyArrayStorage;
    goto LABEL_39;
  }
  uint64_t v28 = (void *)v0[6];
  id v2 = [v1 members];
  sub_10009E6C4(0, &qword_100707CB0);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4)
    {
LABEL_4:
      if (v4 < 1)
      {
        __break(1u);
        goto LABEL_43;
      }
      for (uint64_t i = 0; i != v4; ++i)
      {
        if ((v3 & 0xC000000000000001) != 0) {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v6 = *(id *)(v3 + 8 * i + 32);
        }
        uint64_t v7 = v6;
        if ([v6 memberType] || (objc_msgSend(v7, "isMe") & 1) != 0)
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_36;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_36;
  }
LABEL_21:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
  {
LABEL_36:
    swift_retain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_23;
  }
  uint64_t v15 = _swiftEmptyArrayStorage[2];
  swift_retain();
  if (v15)
  {
LABEL_23:
    if (v15 >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v14 = _swiftEmptyArrayStorage;
      do
      {
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v17 = (id)_swiftEmptyArrayStorage[v16 + 4];
        }
        BOOL v18 = v17;
        id v19 = [v17 appleID];
        if (v19)
        {
          unsigned __int8 v20 = v19;
          uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v23 = v22;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v14 = sub_1000825D0(0, v14[2] + 1, 1, v14);
          }
          unint64_t v25 = v14[2];
          unint64_t v24 = v14[3];
          if (v25 >= v24 >> 1) {
            uint64_t v14 = sub_1000825D0((void *)(v24 > 1), v25 + 1, 1, v14);
          }
          v14[2] = v25 + 1;
          uint64_t v26 = &v14[2 * v25];
          v26[4] = v21;
          v26[5] = v23;
        }
        else
        {
        }
        ++v16;
      }
      while (v15 != v16);
      goto LABEL_38;
    }
LABEL_43:
    __break(1u);
    return;
  }
LABEL_37:
  uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_38:
  swift_release_n();

  uint64_t v0 = v29;
LABEL_39:
  swift_task_dealloc();
  uint64_t v27 = (void (*)(void *))v0[1];
  v27(v14);
}

uint64_t sub_10014A9A4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10014AA70(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000CB70;
  return sub_100148E34(a1, v5, v6);
}

uint64_t sub_10014AB58()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10014AB98(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  uint64_t v7 = *((void *)v1 + 5);
  uint64_t v8 = *((void *)v1 + 6);
  double v9 = v1[7];
  os_log_type_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *os_log_type_t v10 = v2;
  v10[1] = sub_1000D1744;
  uint64_t v11 = dword_100707C98;
  return ((uint64_t (*)(uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100707C98
                                                                                               + v11))(a1, v9, v4, v5, v6, v7, v8);
}

uint64_t sub_10014AC7C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(double *)(v4 + 48) = a4;
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 24) = a1;
  return _swift_task_switch(sub_10014ACA4, 0, 0);
}

void sub_10014ACA4()
{
  uint64_t v1 = v0[3];
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v1)
    {
      uint64_t v2 = (int *)v0[4];
      v0[7] = 0;
      uint64_t v5 = (void (*)(void *))((char *)v2 + *v2);
      uint64_t v3 = (void *)swift_task_alloc();
      v0[8] = v3;
      *uint64_t v3 = v0;
      uint64_t v4 = sub_10014AE54;
    }
    else
    {
      static Task<>.checkCancellation()();
      uint64_t v5 = (void (*)(void *))(v0[4] + *(int *)v0[4]);
      uint64_t v3 = (void *)swift_task_alloc();
      v0[12] = v3;
      *uint64_t v3 = v0;
      uint64_t v4 = sub_10014B398;
    }
    v3[1] = v4;
    v5(v0 + 2);
  }
}

uint64_t sub_10014AE54()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10014AF68;
  }
  else {
    uint64_t v2 = sub_10014734C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014AF68(unint64_t a1)
{
  double v2 = *(double *)(v1 + 48) * 1000000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(a1);
  }
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 80) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10014B04C;
  a1 = (unint64_t)v2;
  return static Task<>.sleep(nanoseconds:)(a1);
}

uint64_t sub_10014B04C()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    double v2 = sub_10014B334;
  }
  else {
    double v2 = sub_10014B160;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014B160()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[7] + 1;
  uint64_t result = swift_errorRelease();
  if (v2 == v1)
  {
    uint64_t v4 = v0[11];
    static Task<>.checkCancellation()();
    if (v4)
    {
      uint64_t v5 = (uint64_t (*)(void))v0[1];
      return v5();
    }
    double v9 = (uint64_t (*)(void *))(v0[4] + *(int *)v0[4]);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[12] = v7;
    *uint64_t v7 = v0;
    uint64_t v8 = sub_10014B398;
  }
  else
  {
    uint64_t v6 = v0[7] + 1;
    v0[7] = v6;
    if (v6 == v0[3])
    {
      __break(1u);
      return result;
    }
    double v9 = (uint64_t (*)(void *))(v0[4] + *(int *)v0[4]);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[8] = v7;
    *uint64_t v7 = v0;
    uint64_t v8 = sub_10014AE54;
  }
  v7[1] = v8;
  return v9(v0 + 2);
}

uint64_t sub_10014B334()
{
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014B398()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10014B4AC;
  }
  else {
    uint64_t v2 = sub_10014C4D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014B4AC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10014B4C4(uint64_t a1)
{
  sub_1001473D4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10014B4CC()
{
  return sub_10014B6CC(&qword_100707CB8);
}

uint64_t sub_10014B4D8(void *a1, uint64_t a2)
{
  sub_1000CBE70(&qword_100707CB8);

  return sub_1001476D0(a1, a2);
}

uint64_t sub_10014B55C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10014B604(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  double v9 = *(void (**)(void, void))v8;
  uint64_t v10 = *(void *)(v8 + 8);

  sub_100146C24(a1, a2, v7, v9, v10);
}

uint64_t sub_10014B6B4(uint64_t a1)
{
  return sub_100146864(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10014B6C0()
{
  return sub_10014B6CC(&qword_100707CC8);
}

uint64_t sub_10014B6CC(uint64_t *a1)
{
  uint64_t v2 = sub_1000CBE70(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10014B758(uint64_t a1, uint64_t a2)
{
  sub_1000CBE70(&qword_100707CC8);

  return sub_100146B4C(a1, a2);
}

uint64_t sub_10014B7DC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10014B824(void *a1, uint64_t a2)
{
  sub_100146028(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void (**)(char *, uint64_t))(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_10014B834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBE70(&qword_1007076B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014B8A0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10014B8E0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000CB70;
  return sub_1001442DC(a1, v4, v5, v6);
}

unint64_t sub_10014B994()
{
  unint64_t result = qword_100707CE8;
  if (!qword_100707CE8)
  {
    type metadata accessor for DOCTipsFamilyTip();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100707CE8);
  }
  return result;
}

uint64_t sub_10014B9EC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014BA24()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000D1744;
  return sub_100144158();
}

uint64_t *sub_10014BAD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_1000CBE70(&qword_1007076B0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10014BC48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_10014BD18(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1000CBE70(&qword_1007076B0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_10014BE40(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_1000CBE70(&qword_1007076B0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_10014BFCC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1000CBE70(&qword_1007076B0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_10014C0F4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_1000CBE70(&qword_1007076B0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10014C280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014C294);
}

uint64_t sub_10014C294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CBE70(&qword_1007076B0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10014C368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014C37C);
}

uint64_t sub_10014C37C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000CBE70(&qword_1007076B0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

void sub_10014C43C()
{
  sub_100009E5C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10014C4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DOCOperationItem();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (void **)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v26 - v8);
  sub_10009B208(a2, (uint64_t)&v30);
  type metadata accessor for DOCActionContext();
  if (swift_dynamicCast())
  {
    unsigned int v10 = v29;
    sub_1000CBE70((uint64_t *)&unk_100706730);
    unint64_t All = Array<A>.fpfs_syncFetchAllFPItems()();
    if (!All)
    {

      return;
    }
    unint64_t v12 = All;
    if (All >> 62)
    {
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      if (v13) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((All & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v13)
      {
LABEL_5:
        unint64_t v28 = v12;
        uint64_t v30 = _swiftEmptyArrayStorage;
        sub_100190F0C(0, v13 & ~(v13 >> 63), 0);
        if (v13 < 0)
        {
          __break(1u);
          return;
        }
        uint64_t v27 = v10;
        uint64_t v14 = v30;
        if ((v28 & 0xC000000000000001) != 0)
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            *uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            swift_storeEnumTagMultiPayload();
            uint64_t v30 = v14;
            unint64_t v17 = v14[2];
            unint64_t v16 = v14[3];
            if (v17 >= v16 >> 1)
            {
              sub_100190F0C(v16 > 1, v17 + 1, 1);
              uint64_t v14 = v30;
            }
            v14[2] = v17 + 1;
            sub_10010C430((uint64_t)v9, (uint64_t)v14+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v17);
          }
        }
        else
        {
          BOOL v18 = (void **)(v28 + 32);
          do
          {
            id v19 = *v18;
            *uint64_t v7 = *v18;
            swift_storeEnumTagMultiPayload();
            uint64_t v30 = v14;
            unint64_t v21 = v14[2];
            unint64_t v20 = v14[3];
            id v22 = v19;
            if (v21 >= v20 >> 1)
            {
              sub_100190F0C(v20 > 1, v21 + 1, 1);
              uint64_t v14 = v30;
            }
            v14[2] = v21 + 1;
            sub_10010C430((uint64_t)v7, (uint64_t)v14+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v21);
            ++v18;
            --v13;
          }
          while (v13);
        }
        swift_bridgeObjectRelease();
        unsigned int v10 = v27;
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_20:
    id v23 = [self defaultManager];
    id v24 = *(id *)&v10[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
    sub_100535854(3, (uint64_t)v14, 0, 0, 0, 1, v24, 0, 0);

    swift_bridgeObjectRelease();
    type metadata accessor for DOCSmartFolderManager();
    unint64_t v25 = (void *)static DOCSmartFolderManager.sharedManager.getter();
    dispatch thunk of DOCSmartFolderManager.refreshSmartFolders()();
  }
}

void sub_10014C860(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DOCOperationItem();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (void **)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v30 - v8);
  sub_10009B208(a2, (uint64_t)&v34);
  type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  unsigned int v10 = v33;
  sub_1000CBE70((uint64_t *)&unk_100706730);
  unint64_t All = Array<A>.fpfs_syncFetchAllFPItems()();
  if (!All)
  {

    return;
  }
  unint64_t v12 = All;
  if (All >> 62)
  {
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    if (v13) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((All & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13)
    {
LABEL_5:
      unint64_t v32 = v12;
      os_log_type_t v34 = _swiftEmptyArrayStorage;
      sub_100190F0C(0, v13 & ~(v13 >> 63), 0);
      if (v13 < 0)
      {
        __break(1u);
        return;
      }
      uint64_t v31 = v10;
      uint64_t v14 = v34;
      if ((v32 & 0xC000000000000001) != 0)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          *uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          swift_storeEnumTagMultiPayload();
          os_log_type_t v34 = v14;
          unint64_t v17 = v14[2];
          unint64_t v16 = v14[3];
          if (v17 >= v16 >> 1)
          {
            sub_100190F0C(v16 > 1, v17 + 1, 1);
            uint64_t v14 = v34;
          }
          v14[2] = v17 + 1;
          sub_10010C430((uint64_t)v9, (uint64_t)v14+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v17);
        }
      }
      else
      {
        BOOL v18 = (void **)(v32 + 32);
        do
        {
          id v19 = *v18;
          *uint64_t v7 = *v18;
          swift_storeEnumTagMultiPayload();
          os_log_type_t v34 = v14;
          unint64_t v21 = v14[2];
          unint64_t v20 = v14[3];
          id v22 = v19;
          if (v21 >= v20 >> 1)
          {
            sub_100190F0C(v20 > 1, v21 + 1, 1);
            uint64_t v14 = v34;
          }
          v14[2] = v21 + 1;
          sub_10010C430((uint64_t)v7, (uint64_t)v14+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v21);
          ++v18;
          --v13;
        }
        while (v13);
      }
      swift_bridgeObjectRelease();
      unsigned int v10 = v31;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_20:
  uint64_t v23 = OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController;
  id v24 = *(void **)&v10[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
  type metadata accessor for DOCItemCollectionViewController(0);
  uint64_t v25 = swift_dynamicCastClass();
  if (!v25)
  {
LABEL_23:
    id v28 = [self defaultManager];
    sub_100535854(4, (uint64_t)v14, 0, 0, 0, 1, *(void **)&v10[v23], 0, 0);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v26 = (void *)v25;
  id v27 = v24;
  if ([v26 isEditing])
  {

    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = v10;
  sub_10029E198((char *)v26, (uint64_t)v14, v29);

  swift_bridgeObjectRelease_n();
}