uint64_t sub_100004FCC()
{
  uint64_t v0;

  type metadata accessor for AlarmDataProvider();
  v0 = swift_allocObject();
  sub_100006228();
  return v0;
}

uint64_t sub_100005004()
{
  uint64_t v0 = swift_allocObject();
  sub_100006228();
  return v0;
}

uint64_t type metadata accessor for AlarmDataProvider()
{
  return self;
}

uint64_t sub_100005064@<X0>(uint64_t a1@<X8>)
{
  sub_1000893B0();
  v2 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = sub_1000893C0();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(a1 + v2[6], 1, 1, v4);
  *(unsigned char *)(a1 + v2[7]) = 0;
  uint64_t v7 = v2[8];
  v8 = (void *)(a1 + v2[9]);
  void *v8 = 0;
  v8[1] = 0;
  v9 = (void *)(a1 + v2[10]);
  void *v9 = 0;
  v9[1] = 0;
  v10 = (void *)(a1 + v2[11]);
  void *v10 = 0;
  v10[1] = 0;
  v11 = (void *)(a1 + v2[12]);
  void *v11 = 0;
  v11[1] = 0;
  *(unsigned char *)(a1 + v2[13]) = 0;
  *(unsigned char *)(a1 + v2[14]) = 0;
  v12 = (void *)(a1 + v2[15]);
  void *v12 = 0;
  v12[1] = 0;
  *(unsigned char *)(a1 + v2[16]) = 0;
  *(unsigned char *)(a1 + v2[17]) = 0;
  *(unsigned char *)(a1 + v7) = 1;
  return result;
}

uint64_t sub_100005184()
{
  return 0;
}

uint64_t sub_10000518C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, char a20)
{
  uint64_t v26 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(a9, a1, v26);
  v27 = (int *)type metadata accessor for AlarmEntry();
  sub_100006914(a2, a9 + v27[5]);
  uint64_t result = sub_100006914(a3, a9 + v27[6]);
  *(unsigned char *)(a9 + v27[7]) = a4;
  *(unsigned char *)(a9 + v27[8]) = a5;
  v29 = (void *)(a9 + v27[9]);
  void *v29 = a6;
  v29[1] = a7;
  v30 = (void *)(a9 + v27[10]);
  void *v30 = a8;
  v30[1] = a10;
  v31 = (void *)(a9 + v27[11]);
  void *v31 = a11;
  v31[1] = a12;
  v32 = (void *)(a9 + v27[12]);
  void *v32 = a13;
  v32[1] = a14;
  *(unsigned char *)(a9 + v27[13]) = a15;
  *(unsigned char *)(a9 + v27[14]) = a16;
  v33 = (void *)(a9 + v27[15]);
  void *v33 = a17;
  v33[1] = a18;
  *(unsigned char *)(a9 + v27[16]) = a19;
  *(unsigned char *)(a9 + v27[17]) = a20;
  return result;
}

uint64_t sub_10000532C(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  type metadata accessor for AlarmEntry();
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for WidgetUtilities();
  uint64_t v9 = (*(uint64_t (**)(unint64_t, unint64_t))(v8 + 80))(0xD00000000000001FLL, 0x800000010008ABC0);
  (*(void (**)(uint64_t))(*(void *)a4 + 224))(v9);
  a2(v7);
  return sub_1000069C0((uint64_t)v7);
}

uint64_t sub_100005428(uint64_t a1, void (*a2)(char *), uint64_t a3, id *a4)
{
  uint64_t v43 = a3;
  v44 = a2;
  sub_10008A310();
  ((void (*)(void))__chkstk_darwin)();
  v42 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000697C(&qword_1000A47F8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  uint64_t v11 = sub_1000893C0();
  uint64_t v38 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  v33 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000697C(&qword_1000A4800);
  uint64_t v40 = *(void *)(v13 - 8);
  uint64_t v41 = v13;
  __chkstk_darwin(v13);
  v39 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for AlarmEntry();
  uint64_t v15 = *(void *)(v36 - 8);
  uint64_t v16 = __chkstk_darwin(v36);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v33 - v19;
  uint64_t v21 = type metadata accessor for WidgetUtilities();
  v34 = *(uint64_t (**)(unint64_t, unint64_t))(v21 + 80);
  uint64_t v35 = v21;
  uint64_t v22 = v34(0xD00000000000001FLL, 0x800000010008ABE0);
  (*((void (**)(uint64_t))*a4 + 28))(v22);
  v37 = v20;
  sub_100006A1C((uint64_t)v20, (uint64_t)v18);
  v23 = (void *)sub_1000094FC(0, 1, 1, &_swiftEmptyArrayStorage);
  unint64_t v25 = v23[2];
  unint64_t v24 = v23[3];
  if (v25 >= v24 >> 1) {
    v23 = (void *)sub_1000094FC(v24 > 1, v25 + 1, 1, v23);
  }
  v23[2] = v25 + 1;
  sub_1000096D0((uint64_t)v18, (uint64_t)v23+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v25);
  id v26 = [a4[2] nextExpectedRefreshDate];
  if (v26)
  {
    v27 = v26;
    sub_100089380();

    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  uint64_t v30 = v38;
  v29 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v8, v28, 1, v11);
  sub_100006914((uint64_t)v8, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v10, 1, v11) == 1)
  {
    sub_100009734((uint64_t)v10);
    v34(0xD00000000000001ELL, 0x800000010008AC00);
    sub_10008A300();
    sub_100009794(&qword_1000A4808, (void (*)(uint64_t))type metadata accessor for AlarmEntry);
    sub_10008A370();
  }
  else
  {
    v31 = v33;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v33, v10, v11);
    unint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    sub_10008A5C0(35);
    swift_bridgeObjectRelease();
    unint64_t v45 = 0xD000000000000021;
    unint64_t v46 = 0x800000010008AC20;
    sub_100009794(&qword_1000A4810, (void (*)(uint64_t))&type metadata accessor for Date);
    v47._countAndFlagsBits = sub_10008A640();
    sub_10008A440(v47);
    swift_bridgeObjectRelease();
    v34(v45, v46);
    swift_bridgeObjectRelease();
    sub_10008A2E0();
    sub_100009794(&qword_1000A4808, (void (*)(uint64_t))type metadata accessor for AlarmEntry);
    sub_10008A370();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v11);
  }
  v44(v29);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return sub_1000069C0((uint64_t)v37);
}

uint64_t sub_100005A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*(id *)(a1 + 16) nextExpectedRefreshDate];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_100089380();

    uint64_t v5 = sub_1000893C0();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = sub_1000893C0();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

uint64_t sub_100005B04(uint64_t a1, void (*a2)(char *))
{
  type metadata accessor for AlarmEntry();
  __chkstk_darwin();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for WidgetUtilities();
  uint64_t v8 = (*(uint64_t (**)(unint64_t, unint64_t))(v7 + 80))(0xD00000000000001FLL, 0x800000010008ABC0);
  (*(void (**)(uint64_t))(*(void *)v6 + 224))(v8);
  a2(v5);
  return sub_1000069C0((uint64_t)v5);
}

uint64_t sub_100005C00(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  return sub_100005428(a1, a2, a3, *v3);
}

uint64_t sub_100005C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100005CBC;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100005CBC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100005DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000B058;
  return TimelineProvider.relevance()(a1, a2, a3);
}

id sub_100005E64()
{
  id v0 = objc_allocWithZone((Class)MTAlarmManager);

  return [v0 init];
}

id sub_100005E9C()
{
  return *(id *)(v0 + 16);
}

id sub_100005EA4()
{
  swift_beginAccess();
  v1 = *(void **)(v0 + 24);

  return v1;
}

void sub_100005EE8(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = a1;
}

uint64_t (*sub_100005F30())()
{
  return j__swift_endAccess;
}

id sub_100005F88()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 32);

  return v1;
}

void sub_100005FCC(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = a1;
}

uint64_t (*sub_100006014())()
{
  return j_j__swift_endAccess;
}

id sub_100006068()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 40);

  return v1;
}

void sub_1000060AC(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = a1;
}

uint64_t (*sub_1000060F4())()
{
  return j_j__swift_endAccess;
}

id sub_100006148()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 48);

  return v1;
}

void sub_10000618C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = a1;
}

uint64_t (*sub_1000061D4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100006228()
{
  uint64_t v1 = sub_100089480();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100089580();
  uint64_t v59 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)MTAlarmManager) init];
  id v9 = [objc_allocWithZone((Class)NSDateFormatter) init];
  *(void *)(v0 + 24) = v9;
  uint64_t v10 = (id *)(v0 + 24);
  id v11 = v9;
  sub_100089570();
  Class isa = sub_100089550().super.isa;
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v60 = v6 + 8;
  v13(v8, v5);
  v57 = v13;
  [v11 setTimeZone:isa];

  swift_beginAccess();
  id v14 = *v10;
  uint64_t v15 = sub_100031718();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  uint64_t v64 = v2 + 16;
  v58 = v16;
  uint64_t v62 = v15;
  v16(v4, v15, v1);
  Class v17 = sub_100089430().super.isa;
  v61 = *(void (**)(char *, uint64_t))(v2 + 8);
  v55[1] = v2 + 8;
  v61(v4, v1);
  [v14 setLocale:v17];

  [*v10 setDateStyle:4];
  [*v10 setTimeStyle:0];
  [*v10 setDoesRelativeDateFormatting:1];
  [*v10 setFormattingContext:4];
  id v18 = [objc_allocWithZone((Class)NSDateFormatter) init];
  uint64_t v19 = (id *)v63;
  *(void *)(v63 + 32) = v18;
  v19 += 4;
  id v20 = v18;
  sub_100089570();
  Class v21 = sub_100089550().super.isa;
  uint64_t v22 = v59;
  v13(v8, v59);
  [v20 setTimeZone:v21];

  swift_beginAccess();
  id v23 = *v19;
  uint64_t v24 = v15;
  uint64_t v25 = v1;
  uint64_t v56 = v1;
  uint64_t v26 = v1;
  v27 = v58;
  v58(v4, v24, v26);
  id v28 = v23;
  Class v29 = sub_100089430().super.isa;
  v61(v4, v25);
  [v28 setLocale:v29];

  id v30 = *v19;
  NSString v31 = sub_10008A3F0();
  [v30 setLocalizedDateFormatFromTemplate:v31];

  [*v19 setDateStyle:0];
  [*v19 setTimeStyle:1];
  [*v19 setDoesRelativeDateFormatting:1];
  [*v19 setFormattingContext:4];
  id v32 = [objc_allocWithZone((Class)NSDateFormatter) init];
  uint64_t v33 = v63;
  v34 = (id *)v63;
  *(void *)(v63 + 40) = v32;
  v34 += 5;
  id v35 = v32;
  sub_100089570();
  Class v36 = sub_100089550().super.isa;
  uint64_t v37 = v22;
  uint64_t v38 = v57;
  v57(v8, v37);
  [v35 setTimeZone:v36];

  swift_beginAccess();
  id v39 = *v34;
  uint64_t v40 = v56;
  v27(v4, v62, v56);
  id v41 = v39;
  Class v42 = sub_100089430().super.isa;
  uint64_t v43 = v61;
  v61(v4, v40);
  [v41 setLocale:v42];

  id v44 = *v34;
  NSString v45 = sub_10008A3F0();
  [v44 setDateFormat:v45];

  id v46 = [objc_allocWithZone((Class)NSDateFormatter) init];
  *(void *)(v33 + 48) = v46;
  id v47 = v46;
  sub_100089570();
  Class v48 = sub_100089550().super.isa;
  v38(v8, v59);
  [v47 setTimeZone:v48];

  swift_beginAccess();
  v49 = *(void **)(v33 + 48);
  v58(v4, v62, v40);
  id v50 = v49;
  Class v51 = sub_100089430().super.isa;
  v43(v4, v40);
  [v50 setLocale:v51];

  id v52 = *(id *)(v33 + 48);
  NSString v53 = sub_10008A3F0();
  [v52 setDateFormat:v53];

  return v33;
}

uint64_t type metadata accessor for AlarmEntry()
{
  uint64_t result = qword_1000A84C0;
  if (!qword_1000A84C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100006914(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000697C(&qword_1000A47F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000697C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000069C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AlarmEntry();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100006A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100006A80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000893C0();
  uint64_t v154 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  v149 = (char *)v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v138 - v6;
  uint64_t v8 = (int *)type metadata accessor for AlarmEntry();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v155 = (id)sub_10000697C(&qword_1000A47F8);
  uint64_t v11 = __chkstk_darwin(v155);
  uint64_t v13 = (char *)v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  v150 = (char *)v138 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v151 = (char *)v138 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v138 - v18;
  uint64_t v147 = v1;
  id v20 = *(void **)(v1 + 16);
  id v21 = [v20 nextWidgetAlarmInThreshold];
  if (v21)
  {
    uint64_t v22 = v21;
    v143 = v7;
    v144 = v13;
    uint64_t v156 = 0;
    unint64_t v157 = 0xE000000000000000;
    sub_10008A5C0(70);
    v158._countAndFlagsBits = 0xD00000000000001FLL;
    v158._object = (void *)0x800000010008ACA0;
    sub_10008A440(v158);
    id v23 = [v22 description];
    uint64_t v24 = sub_10008A400();
    uint64_t v26 = v25;

    v159._countAndFlagsBits = v24;
    v159._object = v26;
    sub_10008A440(v159);
    swift_bridgeObjectRelease();
    v160._countAndFlagsBits = 0x6F6F6E537369202CLL;
    v160._object = (void *)0xED0000203A64657ALL;
    sub_10008A440(v160);
    unsigned int v27 = [v22 isSnoozed];
    BOOL v28 = v27 == 0;
    if (v27) {
      v29._countAndFlagsBits = 1702195828;
    }
    else {
      v29._countAndFlagsBits = 0x65736C6166;
    }
    if (v28) {
      id v30 = (void *)0xE500000000000000;
    }
    else {
      id v30 = (void *)0xE400000000000000;
    }
    v29._object = v30;
    sub_10008A440(v29);
    swift_bridgeObjectRelease();
    v161._object = (void *)0x800000010008ACC0;
    v161._countAndFlagsBits = 0xD000000000000014;
    sub_10008A440(v161);
    id v31 = [v22 snoozeFireDate];
    id v32 = v22;
    uint64_t v148 = a1;
    if (v31)
    {
      uint64_t v33 = v31;
      sub_100089380();

      v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56);
      id v35 = (void *)((v154 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
      v34((uint64_t)v19, 0, 1, v3);
    }
    else
    {
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56);
      id v35 = (void *)((v154 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
      v34((uint64_t)v19, 1, 1, v3);
    }
    uint64_t v49 = type metadata accessor for WidgetUtilities();
    sub_10008A600();
    sub_100009734((uint64_t)v19);
    v138[0] = *(void *)(v49 + 80);
    v138[1] = v49;
    ((void (*)(uint64_t, unint64_t))v138[0])(v156, v157);
    swift_bridgeObjectRelease();
    sub_1000893B0();
    uint64_t v50 = (uint64_t)&v10[v8[5]];
    uint64_t v51 = 1;
    v34(v50, 1, 1, v3);
    v146 = &v10[v8[6]];
    v152 = v34;
    uint64_t v153 = v3;
    id v155 = v35;
    ((void (*)(void))v34)();
    uint64_t v52 = v8[7];
    v10[v52] = 0;
    v10[v8[8]] = 0;
    NSString v53 = &v10[v8[9]];
    *(void *)NSString v53 = 0;
    *((void *)v53 + 1) = 0;
    v139 = v53;
    v54 = &v10[v8[10]];
    *(void *)v54 = 0;
    *((void *)v54 + 1) = 0;
    v140 = v54;
    v55 = &v10[v8[11]];
    *(void *)v55 = 0;
    *((void *)v55 + 1) = 0;
    v141 = v55;
    uint64_t v56 = &v10[v8[12]];
    *(void *)uint64_t v56 = 0;
    *((void *)v56 + 1) = 0;
    v142 = v56;
    uint64_t v57 = v8[13];
    v10[v57] = 0;
    uint64_t v145 = v8[14];
    v10[v145] = 0;
    v58 = (uint64_t *)&v10[v8[15]];
    uint64_t *v58 = 0;
    v58[1] = 0;
    v10[v8[16]] = 0;
    v10[v8[17]] = 0;
    uint64_t v59 = v32;
    id v60 = [v32 nextFireDate];
    if (v60)
    {
      v61 = v60;
      uint64_t v62 = v151;
      sub_100089380();

      uint64_t v63 = (uint64_t)v62;
      uint64_t v51 = 0;
    }
    else
    {
      uint64_t v63 = (uint64_t)v151;
    }
    v152(v63, v51, 1, v153);
    sub_10000981C(v63, v50);
    uint64_t v64 = v59;
    v10[v52] = [v59 isSleepAlarm];
    if ([v59 isSleepAlarm])
    {
      id v65 = [self nextSleepAlarm];

      if (!v65)
      {
        ((void (*)(unint64_t, unint64_t))v138[0])(0xD000000000000021, 0x800000010008ACE0);
        uint64_t v128 = v148;
        sub_1000893B0();
        v129 = v64;
        v131 = v152;
        uint64_t v130 = v153;
        v152(v128 + v8[5], 1, 1, v153);
        v131(v128 + v8[6], 1, 1, v130);

        *(unsigned char *)(v128 + v8[7]) = 0;
        *(unsigned char *)(v128 + v8[8]) = 0;
        v132 = (void *)(v128 + v8[9]);
        void *v132 = 0;
        v132[1] = 0;
        v133 = (void *)(v128 + v8[10]);
        void *v133 = 0;
        v133[1] = 0;
        v134 = (void *)(v128 + v8[11]);
        void *v134 = 0;
        v134[1] = 0;
        v135 = (void *)(v128 + v8[12]);
        void *v135 = 0;
        v135[1] = 0;
        *(unsigned char *)(v128 + v8[13]) = 0;
        *(unsigned char *)(v128 + v8[14]) = 0;
        v136 = (void *)(v128 + v8[15]);
        void *v136 = 0;
        v136[1] = 0;
        uint64_t v137 = v8[16];
        *(unsigned char *)(v128 + v8[17]) = 0;
        *(unsigned char *)(v128 + v137) = 1;
        return sub_1000069C0((uint64_t)v10);
      }
    }
    v10[v57] = [v59 isFiring];
    v10[v145] = 0;
    id v66 = [v59 snoozeFireDate];
    if (v66)
    {
      v67 = v66;
      uint64_t v68 = (uint64_t)v150;
      sub_100089380();

      uint64_t v69 = 0;
      uint64_t v70 = v153;
    }
    else
    {
      uint64_t v69 = 1;
      uint64_t v70 = v153;
      uint64_t v68 = (uint64_t)v150;
    }
    v78 = v152;
    v152(v68, v69, 1, v70);
    sub_10000981C(v68, (uint64_t)v146);
    id v79 = [v64 title];
    if (v79)
    {
      v80 = v79;
      uint64_t v81 = sub_10008A400();
      uint64_t v83 = v82;
    }
    else
    {
      uint64_t v81 = 0;
      uint64_t v83 = 0;
    }
    uint64_t v84 = (uint64_t)v144;
    swift_bridgeObjectRelease();
    uint64_t *v58 = v81;
    v58[1] = v83;
    id v85 = [v64 nextFireDate];
    if (v85)
    {
      v86 = v85;
      v87 = v78;
      v88 = v149;
      sub_100089380();

      uint64_t v89 = v154;
      v90 = *(void (**)(uint64_t, char *, uint64_t))(v154 + 32);
      v90(v84, v88, v70);
      v87(v84, 0, 1, v70);
      int v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v84, 1, v70);
      uint64_t v92 = v148;
      if (v91 != 1)
      {
        v93 = v143;
        uint64_t v94 = ((uint64_t (*)(char *, uint64_t, uint64_t))v90)(v143, v84, v70);
        uint64_t v95 = v147;
        v96 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v147 + 120))(v94);
        Class isa = sub_100089360().super.isa;
        id v98 = [v96 stringFromDate:isa];
        id v155 = v64;
        id v99 = v98;

        uint64_t v100 = sub_10008A400();
        uint64_t v102 = v101;

        v103 = (uint64_t *)v139;
        uint64_t v104 = swift_bridgeObjectRelease();
        uint64_t *v103 = v100;
        v103[1] = v102;
        v105 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v95 + 144))(v104);
        Class v106 = sub_100089360().super.isa;
        id v107 = [v105 stringFromDate:v106];

        uint64_t v108 = sub_10008A400();
        uint64_t v110 = v109;

        v111 = (uint64_t *)v140;
        uint64_t v112 = swift_bridgeObjectRelease();
        uint64_t *v111 = v108;
        v111[1] = v110;
        v113 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v95 + 168))(v112);
        Class v114 = sub_100089360().super.isa;
        id v115 = [v113 stringFromDate:v114];

        uint64_t v116 = sub_10008A400();
        uint64_t v118 = v117;

        v119 = (uint64_t *)v141;
        uint64_t v120 = swift_bridgeObjectRelease();
        uint64_t *v119 = v116;
        v119[1] = v118;
        v121 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v95 + 192))(v120);
        Class v122 = sub_100089360().super.isa;
        id v123 = [v121 stringFromDate:v122];

        uint64_t v124 = sub_10008A400();
        uint64_t v126 = v125;

        (*(void (**)(char *, uint64_t))(v89 + 8))(v93, v70);
        v127 = (uint64_t *)v142;
        swift_bridgeObjectRelease();
        uint64_t *v127 = v124;
        v127[1] = v126;
        return sub_1000096D0((uint64_t)v10, v92);
      }
    }
    else
    {
      v78(v84, 1, 1, v70);
      uint64_t v92 = v148;
    }

    sub_100009734(v84);
    return sub_1000096D0((uint64_t)v10, v92);
  }
  id v36 = [v20 alarmsSync];
  if (!v36) {
    goto LABEL_23;
  }
  uint64_t v37 = v36;
  sub_1000097DC();
  unint64_t v38 = sub_10008A490();

  if (v38 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_10008A610();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v39)
  {
    uint64_t v40 = type metadata accessor for WidgetUtilities();
    (*(void (**)(unint64_t, unint64_t))(v40 + 80))(0xD00000000000001DLL, 0x800000010008AC80);
    sub_1000893B0();
    id v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56);
    v41(a1 + v8[5], 1, 1, v3);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v41)(a1 + v8[6], 1, 1, v3);
    *(unsigned char *)(a1 + v8[7]) = 0;
    *(unsigned char *)(a1 + v8[8]) = 0;
    uint64_t v43 = (void *)(a1 + v8[9]);
    *uint64_t v43 = 0;
    v43[1] = 0;
    id v44 = (void *)(a1 + v8[10]);
    *id v44 = 0;
    v44[1] = 0;
    NSString v45 = (void *)(a1 + v8[11]);
    *NSString v45 = 0;
    v45[1] = 0;
    id v46 = (void *)(a1 + v8[12]);
    *id v46 = 0;
    v46[1] = 0;
    *(unsigned char *)(a1 + v8[13]) = 0;
    *(unsigned char *)(a1 + v8[14]) = 0;
    id v47 = (void *)(a1 + v8[15]);
    *id v47 = 0;
    v47[1] = 0;
    *(unsigned char *)(a1 + v8[16]) = 0;
    uint64_t v48 = v8[17];
  }
  else
  {
LABEL_23:
    uint64_t v71 = type metadata accessor for WidgetUtilities();
    (*(void (**)(unint64_t, unint64_t))(v71 + 80))(0xD00000000000002ALL, 0x800000010008AC50);
    sub_1000893B0();
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56);
    v72(a1 + v8[5], 1, 1, v3);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v72)(a1 + v8[6], 1, 1, v3);
    *(unsigned char *)(a1 + v8[7]) = 0;
    *(unsigned char *)(a1 + v8[8]) = 0;
    v73 = (void *)(a1 + v8[9]);
    void *v73 = 0;
    v73[1] = 0;
    v74 = (void *)(a1 + v8[10]);
    void *v74 = 0;
    v74[1] = 0;
    v75 = (void *)(a1 + v8[11]);
    void *v75 = 0;
    v75[1] = 0;
    v76 = (void *)(a1 + v8[12]);
    void *v76 = 0;
    v76[1] = 0;
    *(unsigned char *)(a1 + v8[13]) = 0;
    *(unsigned char *)(a1 + v8[14]) = 0;
    v77 = (void *)(a1 + v8[15]);
    void *v77 = 0;
    v77[1] = 0;
    uint64_t v48 = v8[16];
    *(unsigned char *)(a1 + v8[17]) = 0;
  }
  *(unsigned char *)(a1 + v48) = 1;
  return result;
}

uint64_t sub_10000774C@<X0>(uint64_t a1@<X8>)
{
  sub_1000893B0();
  uint64_t v2 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(a1 + v2[6], 1, 1, v4);
  *(unsigned char *)(a1 + v2[7]) = 0;
  *(unsigned char *)(a1 + v2[8]) = 0;
  uint64_t v7 = (void *)(a1 + v2[9]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = (void *)(a1 + v2[10]);
  void *v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (void *)(a1 + v2[11]);
  void *v9 = 0;
  v9[1] = 0;
  uint64_t v10 = (void *)(a1 + v2[12]);
  void *v10 = 0;
  v10[1] = 0;
  *(unsigned char *)(a1 + v2[13]) = 0;
  *(unsigned char *)(a1 + v2[14]) = 0;
  uint64_t v11 = (void *)(a1 + v2[15]);
  void *v11 = 0;
  v11[1] = 0;
  uint64_t v12 = v2[16];
  *(unsigned char *)(a1 + v2[17]) = 0;
  *(unsigned char *)(a1 + v12) = 1;
  return result;
}

uint64_t sub_10000786C@<X0>(uint64_t a1@<X8>)
{
  sub_1000893B0();
  uint64_t v2 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(a1 + v2[6], 1, 1, v4);
  *(unsigned char *)(a1 + v2[7]) = 0;
  *(unsigned char *)(a1 + v2[8]) = 0;
  uint64_t v7 = (void *)(a1 + v2[9]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = (void *)(a1 + v2[10]);
  void *v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (void *)(a1 + v2[11]);
  void *v9 = 0;
  v9[1] = 0;
  uint64_t v10 = (void *)(a1 + v2[12]);
  void *v10 = 0;
  v10[1] = 0;
  *(unsigned char *)(a1 + v2[13]) = 0;
  *(unsigned char *)(a1 + v2[14]) = 0;
  uint64_t v11 = (void *)(a1 + v2[15]);
  void *v11 = 0;
  v11[1] = 0;
  *(unsigned char *)(a1 + v2[16]) = 0;
  *(unsigned char *)(a1 + v2[17]) = 1;
  return result;
}

id *sub_100007990()
{
  return v0;
}

uint64_t sub_1000079D0()
{
  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_100007A28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000893C0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_100007A90(uint64_t a1)
{
  uint64_t v3 = sub_1000893C0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*sub_100007AF8())()
{
  return nullsub_1;
}

uint64_t sub_100007B20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AlarmEntry() + 20);

  return sub_100009884(v3, a1);
}

uint64_t sub_100007B64(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AlarmEntry() + 20);

  return sub_10000981C(a1, v3);
}

uint64_t (*sub_100007BA8())()
{
  return nullsub_1;
}

uint64_t sub_100007BF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000893C0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_100007C5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AlarmEntry() + 24);

  return sub_100009884(v3, a1);
}

uint64_t sub_100007CA0(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AlarmEntry() + 24);

  return sub_10000981C(a1, v3);
}

uint64_t (*sub_100007CE4())()
{
  return nullsub_1;
}

uint64_t sub_100007D2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000893C0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v22 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AlarmEntry();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - v12;
  sub_100009884(v0 + *(int *)(v5 + 24), (uint64_t)&v21 - v12);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  int v15 = v14(v13, 1, v2);
  sub_100009734((uint64_t)v13);
  sub_100006A1C(v1, (uint64_t)v7);
  if (v15 == 1)
  {
    BOOL v16 = 0;
LABEL_5:
    sub_1000069C0((uint64_t)v7);
    return v16;
  }
  uint64_t v17 = v22;
  sub_1000893B0();
  sub_100009884((uint64_t)&v7[*(int *)(v5 + 24)], (uint64_t)v10);
  uint64_t result = v14(v10, 1, v2);
  if (result != 1)
  {
    uint64_t v19 = sub_100089390();
    id v20 = *(void (**)(char *, uint64_t))(v3 + 8);
    v20(v17, v2);
    v20(v10, v2);
    BOOL v16 = v19 == -1;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100007F8C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000073;
  uint64_t v3 = 0x6D72616C41206F4ELL;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6D72616C41206F4ELL;
  unint64_t v6 = 0xE900000000000073;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v5 = 0x6D72616C41;
      break;
    case 2:
      unint64_t v5 = 0x2064657A6F6F6E53;
      unint64_t v6 = 0xED00006D72616C41;
      break;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      unint64_t v5 = 0x705520656B6157;
      break;
    case 4:
      unint64_t v6 = 0x800000010008AB90;
      unint64_t v5 = 0xD000000000000013;
      break;
    case 5:
      unint64_t v6 = 0xE300000000000000;
      unint64_t v5 = 7827278;
      break;
    case 6:
      unint64_t v5 = 0x4F20736D72616C41;
      unint64_t v6 = 0xEA00000000006666;
      break;
    case 7:
      unint64_t v6 = 0xE300000000000000;
      unint64_t v5 = 4605519;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      if (v5 == 0x6D72616C41) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v2 = 0xED00006D72616C41;
      if (v5 != 0x2064657A6F6F6E53) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x705520656B6157) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v2 = 0x800000010008AB90;
      if (v5 != 0xD000000000000013) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v2 = 0xE300000000000000;
      if (v5 != 7827278) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      uint64_t v3 = 0x4F20736D72616C41;
      unint64_t v2 = 0xEA00000000006666;
      goto LABEL_21;
    case 7:
      unint64_t v2 = 0xE300000000000000;
      if (v5 != 4605519) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v3) {
        goto LABEL_25;
      }
LABEL_22:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = sub_10008A650();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100008220()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 28));
}

uint64_t sub_100008244(char a1)
{
  uint64_t result = type metadata accessor for AlarmEntry();
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100008274())()
{
  return nullsub_1;
}

uint64_t sub_1000082BC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 32));
}

uint64_t sub_1000082E0(char a1)
{
  uint64_t result = type metadata accessor for AlarmEntry();
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100008310())()
{
  return nullsub_1;
}

uint64_t sub_100008358()
{
  return 0;
}

uint64_t sub_100008364()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000083A4(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AlarmEntry() + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000083EC())()
{
  return nullsub_1;
}

uint64_t sub_100008434()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100008474(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AlarmEntry() + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000084BC())()
{
  return nullsub_1;
}

uint64_t sub_100008504()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100008544(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AlarmEntry() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_10000858C())()
{
  return nullsub_1;
}

uint64_t sub_1000085D4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100008614(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AlarmEntry() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_10000865C())()
{
  return nullsub_1;
}

uint64_t sub_1000086A4()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 52));
}

uint64_t sub_1000086C8(char a1)
{
  uint64_t result = type metadata accessor for AlarmEntry();
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_1000086F8())()
{
  return nullsub_1;
}

uint64_t sub_100008740()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 56));
}

uint64_t sub_100008764(char a1)
{
  uint64_t result = type metadata accessor for AlarmEntry();
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_100008794())()
{
  return nullsub_1;
}

uint64_t sub_1000087DC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10000881C(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AlarmEntry() + 60));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_100008864())()
{
  return nullsub_1;
}

uint64_t sub_1000088AC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 64));
}

uint64_t sub_1000088D0(char a1)
{
  uint64_t result = type metadata accessor for AlarmEntry();
  *(unsigned char *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*sub_100008900())()
{
  return nullsub_1;
}

uint64_t sub_100008948()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 68));
}

uint64_t sub_10000896C(char a1)
{
  uint64_t result = type metadata accessor for AlarmEntry();
  *(unsigned char *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*sub_10000899C())()
{
  return nullsub_1;
}

uint64_t sub_1000089E4()
{
  uint64_t v1 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (int *)type metadata accessor for AlarmEntry();
  sub_100009884(v0 + v4[5], (uint64_t)v3);
  uint64_t v5 = sub_1000893C0();
  int v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5);
  sub_100009734((uint64_t)v3);
  if (v6 == 1)
  {
    if (*(unsigned char *)(v0 + v4[17])) {
      return 6;
    }
    else {
      return 0;
    }
  }
  else if (*(unsigned char *)(v0 + v4[7]))
  {
    return 3;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_100008AEC()
{
  return sub_10008A070();
}

uint64_t sub_100008B08()
{
  return 0x69662E6D72616C61;
}

uint64_t sub_100008B24()
{
  type metadata accessor for AlarmEntry();

  return sub_10008A070();
}

BOOL sub_100008B88()
{
  uint64_t v1 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AlarmEntry();
  sub_100009884(v0 + *(int *)(v4 + 20), (uint64_t)v3);
  uint64_t v5 = sub_1000893C0();
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100009734((uint64_t)v3);
  return v6;
}

uint64_t sub_100008C58()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 36));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100008CAC()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 40));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100008D00()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 44));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100008D54()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry() + 48));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100008DA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (int *)type metadata accessor for AlarmEntry();
  __chkstk_darwin(v5);
  char v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)(v1 + *(int *)(v8 + 60));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  sub_100006A1C(v1, (uint64_t)v7);
  if (!v11)
  {
    sub_100009884((uint64_t)&v7[v5[5]], (uint64_t)v4);
    uint64_t v12 = sub_1000893C0();
    int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v4, 1, v12);
    sub_100009734((uint64_t)v4);
    if (v13 == 1)
    {
      if (v7[v5[17]]) {
        char v14 = 6;
      }
      else {
        char v14 = 0;
      }
    }
    else if (v7[v5[7]])
    {
      char v14 = 3;
    }
    else
    {
      char v14 = 1;
    }
    uint64_t v10 = sub_100008F48(v14);
  }
  swift_bridgeObjectRetain();
  sub_1000069C0((uint64_t)v7);
  return v10;
}

uint64_t sub_100008F48(char a1)
{
  uint64_t v1 = (void *)0xE900000000000073;
  uint64_t v2 = 0x6D72616C41206F4ELL;
  switch(a1)
  {
    case 1:
      uint64_t v1 = (void *)0xE500000000000000;
      uint64_t v2 = 0x6D72616C41;
      break;
    case 2:
      uint64_t v1 = (void *)0xED00006D72616C41;
      uint64_t v2 = 0x2064657A6F6F6E53;
      break;
    case 3:
      uint64_t v1 = (void *)0xE700000000000000;
      uint64_t v2 = 0x705520656B6157;
      break;
    case 4:
      uint64_t v1 = (void *)0x800000010008AB90;
      uint64_t v2 = 0xD000000000000013;
      break;
    case 5:
      uint64_t v1 = (void *)0xE300000000000000;
      uint64_t v2 = 7827278;
      break;
    case 6:
      uint64_t v1 = (void *)0xEA00000000006666;
      uint64_t v2 = 0x4F20736D72616C41;
      break;
    case 7:
      uint64_t v1 = (void *)0xE300000000000000;
      uint64_t v2 = 4605519;
      break;
    default:
      break;
  }
  uint64_t v3 = (objc_class *)[self mainBundle];
  v7._countAndFlagsBits = (uint64_t)v1;
  v8._countAndFlagsBits = v2;
  v8._object = v1;
  v9.value._countAndFlagsBits = 0;
  v9.value._object = 0;
  v4.super.Class isa = v3;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  uint64_t v5 = sub_1000890B0(v8, v9, v4, v10, v7);
  swift_bridgeObjectRelease_n();

  return v5;
}

unint64_t sub_1000090E4(char a1)
{
  unint64_t result = 0x6D72616C41206F4ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D72616C41;
      break;
    case 2:
      unint64_t result = 0x2064657A6F6F6E53;
      break;
    case 3:
      unint64_t result = 0x705520656B6157;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 7827278;
      break;
    case 6:
      unint64_t result = 0x4F20736D72616C41;
      break;
    case 7:
      unint64_t result = 4605519;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000091F0(unsigned __int8 *a1, char *a2)
{
  return sub_100007F8C(*a1, *a2);
}

Swift::Int sub_1000091FC()
{
  return sub_100009354();
}

uint64_t sub_100009208()
{
  return sub_100009210();
}

uint64_t sub_100009210()
{
  sub_10008A420();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000934C()
{
  return sub_100009354();
}

Swift::Int sub_100009354()
{
  return sub_10008A6A0();
}

uint64_t sub_1000094A0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000098EC(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_1000094D0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000090E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

size_t sub_1000094FC(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    int v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000697C(&qword_1000A4A18);
  uint64_t v10 = *(void *)(type metadata accessor for AlarmEntry() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  int v13 = (void *)swift_allocObject();
  unint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for AlarmEntry() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

uint64_t sub_1000096D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100009734(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A47F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100009794(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000097DC()
{
  unint64_t result = qword_1000A4818[0];
  if (!qword_1000A4818[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_1000A4818);
  }
  return result;
}

uint64_t sub_10000981C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000697C(&qword_1000A47F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100009884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000697C(&qword_1000A47F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000098EC(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1000A20F8;
  v6._object = a2;
  unint64_t v4 = sub_10008A630(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 8) {
    return 8;
  }
  else {
    return v4;
  }
}

uint64_t sub_100009938()
{
  return sub_100009794(&qword_1000A4808, (void (*)(uint64_t))type metadata accessor for AlarmEntry);
}

unint64_t sub_100009984()
{
  unint64_t result = qword_1000A4830;
  if (!qword_1000A4830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4830);
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmProvider()
{
  return &type metadata for AlarmProvider;
}

char *sub_1000099E8(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = &a1[v10];
    unint64_t v12 = &a2[v10];
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v43(&a2[v10], 1, v7))
    {
      uint64_t v13 = sub_10000697C(&qword_1000A47F8);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    uint64_t v15 = a3[6];
    unint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    if (v43(&a2[v15], 1, v7))
    {
      uint64_t v18 = sub_10000697C(&qword_1000A47F8);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v9(v16, v17, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
    }
    uint64_t v19 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    a1[v19] = a2[v19];
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = &a1[v20];
    id v23 = &a2[v20];
    uint64_t v24 = *((void *)v23 + 1);
    *uint64_t v22 = *(void *)v23;
    v22[1] = v24;
    uint64_t v25 = &a1[v21];
    uint64_t v26 = &a2[v21];
    uint64_t v27 = *((void *)v26 + 1);
    *uint64_t v25 = *(void *)v26;
    v25[1] = v27;
    uint64_t v28 = a3[11];
    uint64_t v29 = a3[12];
    id v30 = &a1[v28];
    id v31 = &a2[v28];
    uint64_t v32 = *((void *)v31 + 1);
    char *v30 = *(void *)v31;
    v30[1] = v32;
    uint64_t v33 = &a1[v29];
    v34 = &a2[v29];
    uint64_t v35 = *((void *)v34 + 1);
    char *v33 = *(void *)v34;
    v33[1] = v35;
    uint64_t v36 = a3[14];
    a1[a3[13]] = a2[a3[13]];
    a1[v36] = a2[v36];
    uint64_t v37 = a3[15];
    uint64_t v38 = a3[16];
    uint64_t v39 = &a1[v37];
    uint64_t v40 = &a2[v37];
    uint64_t v41 = *((void *)v40 + 1);
    char *v39 = *(void *)v40;
    v39[1] = v41;
    a1[v38] = a2[v38];
    a1[a3[17]] = a2[a3[17]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100009CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  Swift::String v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v9 = a1 + *(int *)(a2 + 24);
  if (!v8(v9, 1, v4)) {
    v6(v9, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_100009E64(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v41(&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_10000697C(&qword_1000A47F8);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (v41(&a2[v13], 1, v6))
  {
    uint64_t v16 = sub_10000697C(&qword_1000A47F8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v8(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  uint64_t v17 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v17] = a2[v17];
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  id v23 = &a1[v19];
  uint64_t v24 = &a2[v19];
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)id v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = &a1[v26];
  uint64_t v29 = &a2[v26];
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v30;
  id v31 = &a1[v27];
  uint64_t v32 = &a2[v27];
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)id v31 = *(void *)v32;
  *((void *)v31 + 1) = v33;
  uint64_t v34 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v34] = a2[v34];
  uint64_t v35 = a3[15];
  uint64_t v36 = a3[16];
  uint64_t v37 = &a1[v35];
  uint64_t v38 = &a2[v35];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  a1[v36] = a2[v36];
  a1[a3[17]] = a2[a3[17]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10000A11C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v37 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v37(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(&a1[v8], 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_6:
    uint64_t v14 = sub_10000697C(&qword_1000A47F8);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v37(v9, v10, v6);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v6);
  int v19 = v11(v17, 1, v6);
  if (!v18)
  {
    if (!v19)
    {
      v37(v16, v17, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000697C(&qword_1000A47F8);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v16, v17, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
LABEL_13:
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  id v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[11];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  id v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)id v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[13]] = a2[a3[13]];
  a1[a3[14]] = a2[a3[14]];
  uint64_t v33 = a3[15];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[16]] = a2[a3[16]];
  a1[a3[17]] = a2[a3[17]];
  return a1;
}

char *sub_10000A4FC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  id v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v23(&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_10000697C(&qword_1000A47F8);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (v23(&a2[v13], 1, v6))
  {
    uint64_t v16 = sub_10000697C(&qword_1000A47F8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v8(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  uint64_t v17 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v17] = a2[v17];
  uint64_t v18 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  uint64_t v19 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  uint64_t v20 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v20] = a2[v20];
  uint64_t v21 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  a1[v21] = a2[v21];
  a1[a3[17]] = a2[a3[17]];
  return a1;
}

char *sub_10000A768(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v50 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v50(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(&a1[v8], 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_6:
    uint64_t v14 = sub_10000697C(&qword_1000A47F8);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v50(v9, v10, v6);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v6);
  int v19 = v11(v17, 1, v6);
  if (!v18)
  {
    if (!v19)
    {
      v50(v16, v17, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000697C(&qword_1000A47F8);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v17, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
LABEL_13:
  uint64_t v21 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v21] = a2[v21];
  uint64_t v22 = a3[9];
  id v23 = &a1[v22];
  uint64_t v24 = (uint64_t *)&a2[v22];
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *(void *)id v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[10];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (uint64_t *)&a2[v27];
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *(void *)uint64_t v28 = v31;
  *((void *)v28 + 1) = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[11];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = (uint64_t *)&a2[v32];
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[12];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = (uint64_t *)&a2[v37];
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v42] = a2[v42];
  uint64_t v43 = a3[15];
  id v44 = &a1[v43];
  NSString v45 = (uint64_t *)&a2[v43];
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  *(void *)id v44 = v47;
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  a1[v48] = a2[v48];
  return a1;
}

uint64_t sub_10000AAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000AB00);
}

uint64_t sub_10000AB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000697C(&qword_1000A47F8);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_10000AC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000AC3C);
}

uint64_t sub_10000AC3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1000893C0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_10000697C(&qword_1000A47F8);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 36) + 8) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10000AD54()
{
  sub_1000893C0();
  if (v0 <= 0x3F)
  {
    sub_10000AE44();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10000AE44()
{
  if (!qword_1000A49B8)
  {
    sub_1000893C0();
    unint64_t v0 = sub_10008A580();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000A49B8);
    }
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for AlarmState(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AlarmState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AlarmState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000B008);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_10000B030(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10000B038(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AlarmState()
{
  return &type metadata for AlarmState;
}

uint64_t sub_10000B05C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v1 = sub_10000697C(&qword_1000A4A20);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A4A28);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  uint64_t v36 = v6;
  __chkstk_darwin(v5);
  int v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A4A30);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  uint64_t v38 = v10;
  __chkstk_darwin(v9);
  uint64_t v34 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100004FCC();
  type metadata accessor for AlarmsWidget.WidgetView();
  sub_10000EFA4(&qword_1000A4A38, (void (*)(uint64_t))type metadata accessor for AlarmsWidget.WidgetView);
  sub_10000B6E8();
  sub_10008A2D0();
  sub_100089990();
  uint64_t v12 = sub_100089E20();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  unint64_t v17 = sub_10000B73C();
  sub_100089A90();
  sub_10000B7E0(v12, v14, v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v18 = sub_10008A280();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100097E50;
  unint64_t v23 = v22 + v21;
  uint64_t v24 = *(void (**)(unint64_t, void, uint64_t))(v19 + 104);
  v24(v23, enum case for WidgetFamily.accessoryRectangular(_:), v18);
  v24(v23 + v20, enum case for WidgetFamily.accessoryInline(_:), v18);
  v24(v23 + 2 * v20, enum case for WidgetFamily.accessoryCircular(_:), v18);
  uint64_t v40 = v1;
  unint64_t v41 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v27 = v34;
  uint64_t v26 = v35;
  sub_100089A70();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v26);
  sub_100089990();
  uint64_t v28 = sub_100089E20();
  uint64_t v30 = v29;
  LOBYTE(v17) = v31 & 1;
  uint64_t v40 = v26;
  unint64_t v41 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v32 = v37;
  sub_100089A60();
  sub_10000B7E0(v28, v30, v17);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v27, v32);
}

uint64_t sub_10000B5BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AlarmEntry();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F0E0(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(a2 + *(int *)(type metadata accessor for AlarmsWidget.WidgetView() + 20)) = KeyPath;
  sub_10000697C(&qword_1000A4A58);
  swift_storeEnumTagMultiPayload();
  return sub_1000096D0((uint64_t)v6, a2);
}

uint64_t type metadata accessor for AlarmsWidget.WidgetView()
{
  uint64_t result = qword_1000A85E0;
  if (!qword_1000A85E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10000B6E8()
{
  unint64_t result = qword_1000A4A40;
  if (!qword_1000A4A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4A40);
  }
  return result;
}

unint64_t sub_10000B73C()
{
  unint64_t result = qword_1000A4A48;
  if (!qword_1000A4A48)
  {
    sub_10000B798(&qword_1000A4A20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4A48);
  }
  return result;
}

uint64_t sub_10000B798(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000B7E0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10000B7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000096D0(a1, a3);
  uint64_t v5 = a3 + *(int *)(type metadata accessor for AlarmsWidget.WidgetView() + 20);

  return sub_10000BCF8(a2, v5);
}

uint64_t sub_10000B844()
{
  sub_10000697C(&qword_1000A4A50);
  uint64_t v0 = sub_10008A280();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100097E50;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, enum case for WidgetFamily.accessoryRectangular(_:), v0);
  v6(v5 + v2, enum case for WidgetFamily.accessoryInline(_:), v0);
  v6(v5 + 2 * v2, enum case for WidgetFamily.accessoryCircular(_:), v0);
  return v4;
}

uint64_t sub_10000B978@<X0>(uint64_t a1@<X8>)
{
  return sub_10000F0E0(v1, a1, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
}

uint64_t sub_10000B9AC(uint64_t a1)
{
  return sub_10000BD60(a1, v1);
}

uint64_t sub_10000B9B4@<X0>(uint64_t a1@<X8>)
{
  return sub_10000B9EC(a1);
}

uint64_t sub_10000B9EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000898F0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A4A58);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F148(v2, (uint64_t)v10, &qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_10008A280();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = sub_10008A560();
    uint64_t v14 = sub_100089B70();
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = sub_10000F1AC(0x6146746567646957, 0xEC000000796C696DLL, &v17);
      _os_log_impl((void *)&_mh_execute_header, v14, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1000898E0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_10000BC7C@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4A58);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10000BCD4()
{
  return sub_1000898A0();
}

uint64_t sub_10000BCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000697C(&qword_1000A4A60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BDC4@<X0>(uint64_t a1@<X8>)
{
  return sub_10000BDCC(v1, a1);
}

uint64_t sub_10000BDCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v122 = a2;
  uint64_t v115 = type metadata accessor for AlarmSmallWidgetView(0);
  __chkstk_darwin(v115);
  uint64_t v94 = (uint64_t)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_10000697C(&qword_1000A4B60);
  uint64_t v95 = *(void *)(v117 - 8);
  uint64_t v4 = __chkstk_darwin(v117);
  v93 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v97 = (char *)&v89 - v6;
  uint64_t v112 = sub_10000697C(&qword_1000A4B68);
  __chkstk_darwin(v112);
  Class v114 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000697C(&qword_1000A4B38);
  __chkstk_darwin(v121);
  uint64_t v116 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A4B70);
  __chkstk_darwin(v9 - 8);
  v105 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AlarmComplicationCircularView(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v107 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000697C(&qword_1000A4B40);
  __chkstk_darwin(v111);
  uint64_t v108 = (uint64_t)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000697C(&qword_1000A4B78);
  uint64_t v110 = *(void *)(v113 - 8);
  uint64_t v14 = __chkstk_darwin(v113);
  Class v106 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v109 = (char *)&v89 - v16;
  uint64_t v102 = type metadata accessor for AlarmInlineComplicationView(0);
  __chkstk_darwin(v102);
  uint64_t v90 = (uint64_t)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_10000697C(&qword_1000A4B80);
  uint64_t v92 = *(void *)(v104 - 8);
  uint64_t v18 = __chkstk_darwin(v104);
  uint64_t v89 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  int v91 = (char *)&v89 - v20;
  uint64_t v119 = sub_10000697C(&qword_1000A4B88);
  __chkstk_darwin(v119);
  uint64_t v118 = (uint64_t)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000697C(&qword_1000A4B90);
  __chkstk_darwin(v99);
  uint64_t v101 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_10000697C(&qword_1000A4B18);
  __chkstk_darwin(v120);
  v103 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000697C(&qword_1000A4B98);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for AlarmEntry();
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for AlarmComplicationRectangularView(0);
  __chkstk_darwin(v98);
  char v31 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_10000697C(&qword_1000A4BA0);
  uint64_t v96 = *(void *)(v100 - 8);
  uint64_t v32 = __chkstk_darwin(v100);
  uint64_t v34 = (char *)&v89 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v89 - v35;
  uint64_t v37 = sub_10008A280();
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v40 = (char *)&v89 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AlarmsWidget.WidgetView();
  uint64_t v41 = a1;
  sub_10000B9EC((uint64_t)v40);
  int v42 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v40, v37);
  if (v42 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_10000F0E0(a1, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
    sub_100028E98(v126);
    uint64_t v124 = &type metadata for AnalogueCircularDimensions;
    uint64_t v125 = &off_1000A2848;
    uint64_t v43 = (_OWORD *)swift_allocObject();
    *(void *)&long long v123 = v43;
    long long v44 = v126[1];
    v43[1] = v126[0];
    v43[2] = v44;
    long long v45 = v126[3];
    v43[3] = v126[2];
    v43[4] = v45;
    uint64_t v46 = (uint64_t)v105;
    sub_10007511C();
    char v47 = sub_100005184();
    char v48 = sub_100005184();
    char v49 = sub_100005184();
    char v50 = v48 & 1;
    uint64_t v51 = v107;
    sub_100077C24(v46, (uint64_t)v29, &v123, v47 & 1, v50, v49 & 1, v107);
    sub_10008A1B0();
    uint64_t v52 = v108;
    sub_10000D004(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v108, 0.0, 1, INFINITY, 0);
    sub_10000F080(v51, type metadata accessor for AlarmComplicationCircularView);
    sub_100089140();
    unint64_t v53 = sub_10000EEF8();
    v54 = v106;
    uint64_t v55 = v111;
    sub_100089E90();
    sub_10000F024((uint64_t)v26, &qword_1000A4B98);
    sub_10000F024(v52, &qword_1000A4B40);
    uint64_t v56 = v110;
    uint64_t v57 = v109;
    uint64_t v58 = v113;
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v109, v54, v113);
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v114, v57, v58);
    swift_storeEnumTagMultiPayload();
    *(void *)&long long v123 = v55;
    *((void *)&v123 + 1) = v53;
    swift_getOpaqueTypeConformance2();
    uint64_t v59 = sub_10000EFA4(&qword_1000A4B58, (void (*)(uint64_t))type metadata accessor for AlarmSmallWidgetView);
    *(void *)&long long v123 = v115;
    *((void *)&v123 + 1) = v59;
    swift_getOpaqueTypeConformance2();
    uint64_t v60 = (uint64_t)v116;
    sub_100089AB0();
    sub_10000F148(v60, v118, &qword_1000A4B38);
    swift_storeEnumTagMultiPayload();
    sub_10000ECB4();
    sub_10000EDEC();
    sub_100089AB0();
    sub_10000F024(v60, &qword_1000A4B38);
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v57, v58);
  }
  else
  {
    int v62 = v42;
    if (v42 == enum case for WidgetFamily.accessoryRectangular(_:))
    {
      sub_10000F0E0(v41, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
      sub_100073BCC((uint64_t)v29, (uint64_t)v31);
      sub_100089140();
      uint64_t v63 = sub_10000EFA4(&qword_1000A4B20, (void (*)(uint64_t))type metadata accessor for AlarmComplicationRectangularView);
      uint64_t v64 = v98;
      sub_100089E90();
      sub_10000F024((uint64_t)v26, &qword_1000A4B98);
      sub_10000F080((uint64_t)v31, type metadata accessor for AlarmComplicationRectangularView);
      uint64_t v65 = v96;
      uint64_t v66 = v100;
      (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v36, v34, v100);
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v101, v36, v66);
      swift_storeEnumTagMultiPayload();
      *(void *)&v126[0] = v64;
      *((void *)&v126[0] + 1) = v63;
      swift_getOpaqueTypeConformance2();
      uint64_t v67 = sub_10000EFA4(&qword_1000A4B28, (void (*)(uint64_t))type metadata accessor for AlarmInlineComplicationView);
      *(void *)&v126[0] = v102;
      *((void *)&v126[0] + 1) = v67;
      swift_getOpaqueTypeConformance2();
      uint64_t v68 = (uint64_t)v103;
      sub_100089AB0();
      sub_10000F148(v68, v118, &qword_1000A4B18);
      swift_storeEnumTagMultiPayload();
      sub_10000ECB4();
      sub_10000EDEC();
      sub_100089AB0();
      sub_10000F024(v68, &qword_1000A4B18);
      return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v36, v66);
    }
    else
    {
      int v69 = enum case for WidgetFamily.accessoryInline(_:);
      sub_10000F0E0(v41, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
      if (v62 == v69)
      {
        uint64_t v70 = v90;
        sub_100073BCC((uint64_t)v29, v90);
        sub_100089140();
        uint64_t v71 = sub_10000EFA4(&qword_1000A4B28, (void (*)(uint64_t))type metadata accessor for AlarmInlineComplicationView);
        v72 = v89;
        uint64_t v73 = v102;
        sub_100089E90();
        sub_10000F024((uint64_t)v26, &qword_1000A4B98);
        sub_10000F080(v70, type metadata accessor for AlarmInlineComplicationView);
        uint64_t v74 = v92;
        v75 = v91;
        uint64_t v76 = v104;
        (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v72, v104);
        (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v101, v75, v76);
        swift_storeEnumTagMultiPayload();
        uint64_t v77 = sub_10000EFA4(&qword_1000A4B20, (void (*)(uint64_t))type metadata accessor for AlarmComplicationRectangularView);
        *(void *)&v126[0] = v98;
        *((void *)&v126[0] + 1) = v77;
        swift_getOpaqueTypeConformance2();
        *(void *)&v126[0] = v73;
        *((void *)&v126[0] + 1) = v71;
        swift_getOpaqueTypeConformance2();
        uint64_t v78 = (uint64_t)v103;
        sub_100089AB0();
        sub_10000F148(v78, v118, &qword_1000A4B18);
        swift_storeEnumTagMultiPayload();
        sub_10000ECB4();
        sub_10000EDEC();
        sub_100089AB0();
        sub_10000F024(v78, &qword_1000A4B18);
        return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v75, v76);
      }
      else
      {
        uint64_t v79 = v94;
        sub_100073BCC((uint64_t)v29, v94);
        sub_100089140();
        uint64_t v80 = sub_10000EFA4(&qword_1000A4B58, (void (*)(uint64_t))type metadata accessor for AlarmSmallWidgetView);
        uint64_t v81 = v93;
        uint64_t v82 = v115;
        sub_100089E90();
        sub_10000F024((uint64_t)v26, &qword_1000A4B98);
        sub_10000F080(v79, type metadata accessor for AlarmSmallWidgetView);
        uint64_t v83 = v95;
        uint64_t v84 = v97;
        id v85 = v81;
        uint64_t v86 = v117;
        (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v97, v85, v117);
        (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v114, v84, v86);
        swift_storeEnumTagMultiPayload();
        unint64_t v87 = sub_10000EEF8();
        *(void *)&v126[0] = v111;
        *((void *)&v126[0] + 1) = v87;
        swift_getOpaqueTypeConformance2();
        *(void *)&v126[0] = v82;
        *((void *)&v126[0] + 1) = v80;
        swift_getOpaqueTypeConformance2();
        uint64_t v88 = (uint64_t)v116;
        sub_100089AB0();
        sub_10000F148(v88, v118, &qword_1000A4B38);
        swift_storeEnumTagMultiPayload();
        sub_10000ECB4();
        sub_10000EDEC();
        sub_100089AB0();
        sub_10000F024(v88, &qword_1000A4B38);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v97, v86);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v37);
      }
    }
  }
}

__n128 sub_10000D004@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_10008A560();
    uint64_t v23 = (void *)sub_100089B70();
    sub_100089630();
  }
  sub_1000897B0();
  sub_10000F0E0(v13, a9, type metadata accessor for AlarmComplicationCircularView);
  uint64_t v24 = (_OWORD *)(a9 + *(int *)(sub_10000697C(&qword_1000A4B40) + 36));
  v24[4] = v30;
  v24[5] = v31;
  v24[6] = v32;
  *uint64_t v24 = v26;
  v24[1] = v27;
  __n128 result = v29;
  v24[2] = v28;
  v24[3] = v29;
  return result;
}

uint64_t sub_10000D1D8()
{
  return sub_100089EE0();
}

uint64_t sub_10000D1F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000D210()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AlarmsWidget()
{
  return &type metadata for AlarmsWidget;
}

char *sub_10000D240(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = sub_1000893C0();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v8(a1, a2, v6);
    uint64_t v9 = (int *)type metadata accessor for AlarmEntry();
    uint64_t v10 = v9[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v46 = v8;
    if (v13(&a2[v10], 1, v6))
    {
      uint64_t v14 = sub_10000697C(&qword_1000A47F8);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
      uint64_t v15 = v7;
    }
    else
    {
      v8(v11, v12, v6);
      uint64_t v15 = v7;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
    }
    uint64_t v17 = v9[6];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    if (v13(&a2[v17], 1, v6))
    {
      uint64_t v20 = sub_10000697C(&qword_1000A47F8);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      v46(v18, v19, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v6);
    }
    a1[v9[7]] = a2[v9[7]];
    a1[v9[8]] = a2[v9[8]];
    uint64_t v21 = v9[9];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    uint64_t v24 = *((void *)v23 + 1);
    *(void *)uint64_t v22 = *(void *)v23;
    *((void *)v22 + 1) = v24;
    uint64_t v25 = v9[10];
    long long v26 = &a1[v25];
    long long v27 = &a2[v25];
    uint64_t v28 = *((void *)v27 + 1);
    *(void *)long long v26 = *(void *)v27;
    *((void *)v26 + 1) = v28;
    uint64_t v29 = v9[11];
    long long v30 = &a1[v29];
    long long v31 = &a2[v29];
    uint64_t v32 = *((void *)v31 + 1);
    *(void *)long long v30 = *(void *)v31;
    *((void *)v30 + 1) = v32;
    uint64_t v33 = v9[12];
    uint64_t v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    a1[v9[13]] = a2[v9[13]];
    a1[v9[14]] = a2[v9[14]];
    uint64_t v37 = v9[15];
    uint64_t v38 = &a1[v37];
    uint64_t v39 = &a2[v37];
    uint64_t v40 = *((void *)v39 + 1);
    *(void *)uint64_t v38 = *(void *)v39;
    *((void *)v38 + 1) = v40;
    a1[v9[16]] = a2[v9[16]];
    a1[v9[17]] = a2[v9[17]];
    uint64_t v41 = *(int *)(a3 + 20);
    int v42 = &a1[v41];
    uint64_t v43 = &a2[v41];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v44 = sub_10008A280();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v42, v43, v44);
    }
    else
    {
      *(void *)int v42 = *(void *)v43;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10000D604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = type metadata accessor for AlarmEntry();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v9(v8, 1, v4)) {
    v6(v8, v4);
  }
  uint64_t v10 = a1 + *(int *)(v7 + 24);
  if (!v9(v10, 1, v4)) {
    v6(v10, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + *(int *)(a2 + 20);
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_10008A280();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
    return v13(v11, v12);
  }
  else
  {
    return swift_release();
  }
}

char *sub_10000D81C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = sub_1000893C0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v44 = v7;
  if (v12(&a2[v9], 1, v5))
  {
    uint64_t v13 = sub_10000697C(&qword_1000A47F8);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    uint64_t v14 = v6;
  }
  else
  {
    v7(v10, v11, v5);
    uint64_t v14 = v6;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  }
  uint64_t v15 = v8[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  if (v12(&a2[v15], 1, v5))
  {
    uint64_t v18 = sub_10000697C(&qword_1000A47F8);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v44(v16, v17, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v5);
  }
  a1[v8[7]] = a2[v8[7]];
  a1[v8[8]] = a2[v8[8]];
  uint64_t v19 = v8[9];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  uint64_t v23 = v8[10];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *((void *)v25 + 1);
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = v26;
  uint64_t v27 = v8[11];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v30;
  uint64_t v31 = v8[12];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  a1[v8[13]] = a2[v8[13]];
  a1[v8[14]] = a2[v8[14]];
  uint64_t v35 = v8[15];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = v38;
  a1[v8[16]] = a2[v8[16]];
  a1[v8[17]] = a2[v8[17]];
  uint64_t v39 = *(int *)(a3 + 20);
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v42 = sub_10008A280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v40, v41, v42);
  }
  else
  {
    *(void *)uint64_t v40 = *(void *)v41;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_10000DB88(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = sub_1000893C0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v41 = *(void (**)(void *, const void *, uint64_t))(v6 + 24);
  v41(a1, a2, v5);
  uint64_t v7 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v8 = v7[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  int v12 = v11(&a1[v8], 1, v5);
  int v13 = v11(v10, 1, v5);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v10, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
LABEL_6:
    uint64_t v14 = sub_10000697C(&qword_1000A47F8);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v41(v9, v10, v5);
LABEL_7:
  uint64_t v15 = v7[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v5);
  int v19 = v11(v17, 1, v5);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
LABEL_12:
    uint64_t v20 = sub_10000697C(&qword_1000A47F8);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  v41(v16, v17, v5);
LABEL_13:
  a1[v7[7]] = a2[v7[7]];
  a1[v7[8]] = a2[v7[8]];
  uint64_t v21 = v7[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = v7[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = v7[11];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v7[12];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v7[13]] = a2[v7[13]];
  a1[v7[14]] = a2[v7[14]];
  uint64_t v33 = v7[15];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v7[16]] = a2[v7[16]];
  a1[v7[17]] = a2[v7[17]];
  if (a1 != a2)
  {
    uint64_t v36 = *(int *)(a3 + 20);
    uint64_t v37 = &a1[v36];
    uint64_t v38 = &a2[v36];
    sub_10000F024((uint64_t)&a1[v36], &qword_1000A4A58);
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v39 = sub_10008A280();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
    }
    else
    {
      *(void *)uint64_t v37 = *(void *)v38;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_10000E020(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = sub_1000893C0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  int v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v25 = v7;
  if (v12(&a2[v9], 1, v5))
  {
    uint64_t v13 = sub_10000697C(&qword_1000A47F8);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    uint64_t v14 = v6;
  }
  else
  {
    v7(v10, v11, v5);
    uint64_t v14 = v6;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  }
  uint64_t v15 = v8[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  if (v12(&a2[v15], 1, v5))
  {
    uint64_t v18 = sub_10000697C(&qword_1000A47F8);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v25(v16, v17, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v5);
  }
  a1[v8[7]] = a2[v8[7]];
  a1[v8[8]] = a2[v8[8]];
  *(_OWORD *)&a1[v8[9]] = *(_OWORD *)&a2[v8[9]];
  *(_OWORD *)&a1[v8[10]] = *(_OWORD *)&a2[v8[10]];
  *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
  *(_OWORD *)&a1[v8[12]] = *(_OWORD *)&a2[v8[12]];
  a1[v8[13]] = a2[v8[13]];
  a1[v8[14]] = a2[v8[14]];
  *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
  a1[v8[16]] = a2[v8[16]];
  a1[v8[17]] = a2[v8[17]];
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = sub_10008A280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v20, v21, v23);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  return a1;
}

char *sub_10000E350(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = sub_1000893C0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v52 = *(void (**)(void *, const void *, uint64_t))(v6 + 40);
  v52(a1, a2, v5);
  uint64_t v7 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v8 = v7[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  int v12 = v11(&a1[v8], 1, v5);
  int v13 = v11(v10, 1, v5);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v10, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
LABEL_6:
    uint64_t v14 = sub_10000697C(&qword_1000A47F8);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v52(v9, v10, v5);
LABEL_7:
  uint64_t v15 = v7[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v5);
  int v19 = v11(v17, 1, v5);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v16, v17, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
LABEL_12:
    uint64_t v20 = sub_10000697C(&qword_1000A47F8);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  v52(v16, v17, v5);
LABEL_13:
  a1[v7[7]] = a2[v7[7]];
  a1[v7[8]] = a2[v7[8]];
  uint64_t v21 = v7[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (uint64_t *)&a2[v21];
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *(void *)uint64_t v22 = v25;
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = v7[10];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = (uint64_t *)&a2[v26];
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *(void *)uint64_t v27 = v30;
  *((void *)v27 + 1) = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = v7[11];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = (uint64_t *)&a2[v31];
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  *(void *)uint64_t v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = v7[12];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = (uint64_t *)&a2[v36];
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  a1[v7[13]] = a2[v7[13]];
  a1[v7[14]] = a2[v7[14]];
  uint64_t v41 = v7[15];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = (uint64_t *)&a2[v41];
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *(void *)uint64_t v42 = v45;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  a1[v7[16]] = a2[v7[16]];
  a1[v7[17]] = a2[v7[17]];
  if (a1 != a2)
  {
    uint64_t v46 = *(int *)(a3 + 20);
    char v47 = &a1[v46];
    char v48 = &a2[v46];
    sub_10000F024((uint64_t)&a1[v46], &qword_1000A4A58);
    uint64_t v49 = sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v50 = sub_10008A280();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v47, v48, v50);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10000E7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000E7BC);
}

uint64_t sub_10000E7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AlarmEntry();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_10000697C(&qword_1000A4A60);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10000E8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000E8CC);
}

uint64_t sub_10000E8CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AlarmEntry();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_10000697C(&qword_1000A4A60);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_10000E9D4()
{
  type metadata accessor for AlarmEntry();
  if (v0 <= 0x3F)
  {
    sub_10000EA9C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10000EA9C()
{
  if (!qword_1000A4AC0)
  {
    sub_10008A280();
    unint64_t v0 = sub_1000896A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000A4AC0);
    }
  }
}

uint64_t sub_10000EAF4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10000EBC4()
{
  unint64_t result = qword_1000A4AF0;
  if (!qword_1000A4AF0)
  {
    sub_10000B798(&qword_1000A4AF8);
    sub_10000EC38();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4AF0);
  }
  return result;
}

unint64_t sub_10000EC38()
{
  unint64_t result = qword_1000A4B00;
  if (!qword_1000A4B00)
  {
    sub_10000B798(&qword_1000A4B08);
    sub_10000ECB4();
    sub_10000EDEC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4B00);
  }
  return result;
}

unint64_t sub_10000ECB4()
{
  unint64_t result = qword_1000A4B10;
  if (!qword_1000A4B10)
  {
    sub_10000B798(&qword_1000A4B18);
    type metadata accessor for AlarmComplicationRectangularView(255);
    sub_10000EFA4(&qword_1000A4B20, (void (*)(uint64_t))type metadata accessor for AlarmComplicationRectangularView);
    swift_getOpaqueTypeConformance2();
    type metadata accessor for AlarmInlineComplicationView(255);
    sub_10000EFA4(&qword_1000A4B28, (void (*)(uint64_t))type metadata accessor for AlarmInlineComplicationView);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4B10);
  }
  return result;
}

unint64_t sub_10000EDEC()
{
  unint64_t result = qword_1000A4B30;
  if (!qword_1000A4B30)
  {
    sub_10000B798(&qword_1000A4B38);
    sub_10000B798(&qword_1000A4B40);
    sub_10000EEF8();
    swift_getOpaqueTypeConformance2();
    type metadata accessor for AlarmSmallWidgetView(255);
    sub_10000EFA4(&qword_1000A4B58, (void (*)(uint64_t))type metadata accessor for AlarmSmallWidgetView);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4B30);
  }
  return result;
}

unint64_t sub_10000EEF8()
{
  unint64_t result = qword_1000A4B48;
  if (!qword_1000A4B48)
  {
    sub_10000B798(&qword_1000A4B40);
    sub_10000EFA4(&qword_1000A4B50, (void (*)(uint64_t))type metadata accessor for AlarmComplicationCircularView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4B48);
  }
  return result;
}

uint64_t sub_10000EFA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000EFEC()
{
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10000F024(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000697C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000F080(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000F0E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000F148(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000697C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10000F1AC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = sub_10000F280(v12, 0, 0, 1, a1, a2);
  unint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000F3D0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000F3D0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000F380((uint64_t)v12);
  return v7;
}

unint64_t sub_10000F280(unint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          unint64_t result = 0;
          *((unsigned char *)__dst + v10) = 0;
          *a1 = (unint64_t)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    unint64_t result = (unint64_t)sub_10000F42C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    unint64_t result = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    unint64_t result = sub_10008A5F0();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10000F380(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000F3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

char *sub_10000F42C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (char *)sub_10000F4C4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10000F5C8(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10000F5C8((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

void *sub_10000F4C4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10000F560(v2, 0);
      unint64_t result = (void *)sub_10008A5D0();
      if (v5) {
        break;
      }
      if (result == (void *)v2) {
        return v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = sub_10008A450();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10000F560(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000697C(&qword_1000A4BA8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_10000F5C8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000697C(&qword_1000A4BA8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10000F6B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000893C0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  size_t v11 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v60 = (char *)v50 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v59 = (char *)v50 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v64 = (char *)v50 - v17;
  __chkstk_darwin(v16);
  uint64_t v63 = (char *)v50 - v18;
  uint64_t v67 = (int *)type metadata accessor for WorldClockCity();
  uint64_t v19 = *((void *)v67 - 1);
  __chkstk_darwin(v67);
  uint64_t v65 = (uint64_t)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10008A310();
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v24 = (char *)v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*a1 + 96))(v22);
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    v50[2] = v24;
    uint64_t v51 = a1;
    uint64_t v58 = v6;
    uint64_t v52 = a2;
    unint64_t v27 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v50[1] = v25;
    uint64_t v28 = v25 + v27;
    uint64_t v29 = *(void *)(v19 + 72);
    uint64_t v66 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v68 = v8 + 32;
    v54 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v55 = v29;
    uint64_t v30 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v56 = v11;
    uint64_t v57 = v8;
    unint64_t v53 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v31 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v32 = v65;
    do
    {
      uint64_t v62 = v26;
      sub_10000FDD0(v28, v32);
      uint64_t v33 = *v66;
      (*v66)(v63, v32 + v67[9], v7);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v31 = (char *)sub_1000130E0(0, *((void *)v30 + 2) + 1, 1, v30, &qword_1000A4FE8, (uint64_t (*)(void))&type metadata accessor for Date);
      }
      unint64_t v35 = *((void *)v31 + 2);
      unint64_t v34 = *((void *)v31 + 3);
      if (v35 >= v34 >> 1) {
        uint64_t v31 = (char *)sub_1000130E0(v34 > 1, v35 + 1, 1, v31, &qword_1000A4FE8, (uint64_t (*)(void))&type metadata accessor for Date);
      }
      *((void *)v31 + 2) = v35 + 1;
      unint64_t v36 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      uint64_t v37 = *(void *)(v57 + 72);
      uint64_t v38 = &v31[v36 + v37 * v35];
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v39(v38, v63, v7);
      v33(v64, v32 + v67[10], v7);
      unint64_t v41 = *((void *)v31 + 2);
      unint64_t v40 = *((void *)v31 + 3);
      v61 = v33;
      if (v41 >= v40 >> 1) {
        uint64_t v31 = (char *)sub_1000130E0(v40 > 1, v41 + 1, 1, v31, &qword_1000A4FE8, (uint64_t (*)(void))&type metadata accessor for Date);
      }
      *((void *)v31 + 2) = v41 + 1;
      v39(&v31[v36 + v41 * v37], v64, v7);
      uint64_t v42 = (uint64_t)v58;
      sub_100009884(v65 + v67[11], (uint64_t)v58);
      if ((*v54)(v42, 1, v7) == 1)
      {
        sub_10000F024(v42, &qword_1000A47F8);
        uint64_t v43 = v56;
      }
      else
      {
        uint64_t v44 = v59;
        v39(v59, (char *)v42, v7);
        v61(v60, (uint64_t)v44, v7);
        unint64_t v46 = *((void *)v31 + 2);
        unint64_t v45 = *((void *)v31 + 3);
        if (v46 >= v45 >> 1) {
          uint64_t v31 = (char *)sub_1000130E0(v45 > 1, v46 + 1, 1, v31, &qword_1000A4FE8, (uint64_t (*)(void))&type metadata accessor for Date);
        }
        uint64_t v43 = v56;
        *((void *)v31 + 2) = v46 + 1;
        v39(&v31[v36 + v46 * v37], v60, v7);
        (*v53)(v59, v7);
      }
      sub_1000893B0();
      unint64_t v48 = *((void *)v31 + 2);
      unint64_t v47 = *((void *)v31 + 3);
      if (v48 >= v47 >> 1) {
        uint64_t v31 = (char *)sub_1000130E0(v47 > 1, v48 + 1, 1, v31, &qword_1000A4FE8, (uint64_t (*)(void))&type metadata accessor for Date);
      }
      *((void *)v31 + 2) = v48 + 1;
      v39(&v31[v36 + v48 * v37], v43, v7);
      uint64_t v32 = v65;
      sub_100013DC8(v65, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
      swift_bridgeObjectRelease();
      v28 += v55;
      uint64_t v30 = v31;
      uint64_t v26 = v62 - 1;
    }
    while (v62 != 1);
    swift_bridgeObjectRelease();
    a1 = v51;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = (char *)&_swiftEmptyArrayStorage;
  }
  swift_retain();
  sub_100013510((uint64_t)v31, a1);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10008A2F0();
  type metadata accessor for WorldClockEntry();
  sub_100013E68(&qword_1000A4BD0, (void (*)(uint64_t))type metadata accessor for WorldClockEntry);
  return sub_10008A370();
}

uint64_t sub_10000FDD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorldClockCity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000FE34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for WorldClockEntry();
  *(void *)(a4 + *(int *)(result + 20)) = a2;
  *(unsigned char *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t sub_10000FEBC()
{
  return v0;
}

uint64_t sub_10000FEC4()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_10000FED4()
{
  return swift_allocObject();
}

void *sub_10000FEE4()
{
  return &unk_1000A4BB0;
}

uint64_t sub_10000FEF0()
{
  return sub_100010238(&qword_1000A4BB0);
}

uint64_t sub_10000FF00(uint64_t a1, uint64_t a2)
{
  return sub_10001029C(a1, a2, &qword_1000A4BB0, &off_1000A4BB8);
}

uint64_t (*sub_10000FF10())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10000FF6C(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_1000103BC(a1, a2, a3, a4, 66, 0xD000000000000040, (void *)0x800000010008AEE0);
}

uint64_t sub_10000FF90(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_1000106FC(a1, a2, a3, a4, 49, 0xD00000000000002FLL, (void *)0x800000010008AF60);
}

uint64_t sub_10000FFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for WorldClockSingleProvider();

  return IntentTimelineProvider.recommendations()(v3, a2);
}

uint64_t sub_10000FFE8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_10001002C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t sub_100010070()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_1000100B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  uint64_t v7 = type metadata accessor for WorldClockSingleProvider();
  *unint64_t v6 = v3;
  v6[1] = sub_10000B058;
  return IntentTimelineProvider.relevances()(a1, v7, a3);
}

uint64_t sub_100010168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  uint64_t v7 = type metadata accessor for WorldClockSingleProvider();
  *unint64_t v6 = v3;
  v6[1] = sub_10000B058;
  return IntentTimelineProvider.relevance()(a1, v7, a3);
}

void *sub_10001021C()
{
  return &unk_1000A4BC0;
}

uint64_t sub_100010228()
{
  return sub_100010238(&qword_1000A4BC0);
}

uint64_t sub_100010238(uint64_t *a1)
{
  swift_beginAccess();
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10001028C(uint64_t a1, uint64_t a2)
{
  return sub_10001029C(a1, a2, &qword_1000A4BC0, &off_1000A4BC8);
}

uint64_t sub_10001029C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000102FC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100010354@<X0>(uint64_t a1@<X8>)
{
  sub_1000893B0();
  uint64_t result = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(result + 20)) = &_swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + *(int *)(result + 24)) = 1;
  return result;
}

uint64_t sub_10001039C(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_1000103BC(a1, a2, a3, a4, 65, 0xD00000000000003FLL, (void *)0x800000010008AFB0);
}

uint64_t sub_1000103BC(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  v21[1] = a4;
  uint64_t v22 = a3;
  uint64_t v11 = type metadata accessor for WorldClockEntry();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WorldClockIntentModel();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = &_swiftEmptyArrayStorage;
  *(void *)(v14 + 24) = 0;
  id v15 = a1;
  id v16 = [v15 cities];
  if (v16)
  {
    uint64_t v17 = v16;
    sub_100013E28();
    unint64_t v18 = sub_10008A490();
  }
  else
  {
    unint64_t v18 = 0;
  }
  sub_10001169C(v18);

  swift_bridgeObjectRelease();
  uint64_t v19 = type metadata accessor for WidgetUtilities();
  uint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  sub_10008A5C0(a5);
  uint64_t v26 = v23;
  unint64_t v27 = v24;
  v28._countAndFlagsBits = a6;
  v28._object = a7;
  sub_10008A440(v28);
  uint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  sub_10008A5C0(37);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0xD000000000000023;
  v25._object = (void *)0x800000010008AF30;
  swift_beginAccess();
  type metadata accessor for WorldClockCity();
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = sub_10008A4A0();
  sub_10008A440(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10008A440(v25);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, unint64_t))(v19 + 80))(v26, v27);
  swift_bridgeObjectRelease();
  sub_1000110F4((uint64_t)v13);
  *(void *)&v13[*(int *)(v11 + 20)] = *(void *)(v14 + 16);
  v13[*(int *)(v11 + 24)] = 0;
  swift_bridgeObjectRetain();
  v22(v13);
  swift_release();
  return sub_100013DC8((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
}

uint64_t sub_100010638(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &_swiftEmptyArrayStorage;
  *(void *)(v2 + 24) = 0;
  id v3 = [a1 cities];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_100013E28();
    unint64_t v5 = sub_10008A490();
  }
  else
  {
    unint64_t v5 = 0;
  }
  sub_10001169C(v5);

  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1000106DC(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_1000106FC(a1, a2, a3, a4, 48, 0xD00000000000002ELL, (void *)0x800000010008AFF0);
}

uint64_t sub_1000106FC(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  v24._countAndFlagsBits = a6;
  v24._object = a7;
  uint64_t v9 = v7;
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v11 = sub_10000697C(&qword_1000A4BE0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WorldClockIntentModel();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = &_swiftEmptyArrayStorage;
  *(void *)(v15 + 24) = 0;
  id v16 = a1;
  id v17 = [v16 cities];
  if (v17)
  {
    unint64_t v18 = v17;
    sub_100013E28();
    unint64_t v19 = sub_10008A490();
  }
  else
  {
    unint64_t v19 = 0;
  }
  sub_10001169C(v19);

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v9 + 80))(v15);
  uint64_t v20 = type metadata accessor for WidgetUtilities();
  unint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  sub_10008A5C0(a5);
  sub_10008A440(v24);
  sub_10008A600();
  uint64_t v21 = *(void (**)(unint64_t, unint64_t))(v20 + 80);
  v21(v27, v28);
  swift_bridgeObjectRelease();
  unint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  sub_10008A5C0(20);
  swift_bridgeObjectRelease();
  unint64_t v27 = 0xD000000000000012;
  unint64_t v28 = 0x800000010008AF90;
  char v22 = sub_10002F50C();
  v29._countAndFlagsBits = sub_10002F6F0(v22);
  sub_10008A440(v29);
  swift_bridgeObjectRelease();
  v21(v27, v28);
  swift_bridgeObjectRelease();
  v26(v14);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100010994(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for WorldClockMultiProvider();

  return IntentTimelineProvider.recommendations()(v3, a2);
}

uint64_t sub_1000109CC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_100010A10()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t sub_100010A54()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_100010A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  uint64_t v7 = type metadata accessor for WorldClockMultiProvider();
  *unint64_t v6 = v3;
  v6[1] = sub_100005CBC;
  return IntentTimelineProvider.relevances()(a1, v7, a3);
}

uint64_t sub_100010B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  uint64_t v7 = type metadata accessor for WorldClockMultiProvider();
  *unint64_t v6 = v3;
  v6[1] = sub_10000B058;
  return IntentTimelineProvider.relevance()(a1, v7, a3);
}

uint64_t sub_100010C00()
{
  type metadata accessor for WorldClockEntry();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100010C34(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for WorldClockEntry() + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*sub_100010C74())()
{
  return nullsub_1;
}

uint64_t sub_100010CBC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for WorldClockEntry() + 24));
}

uint64_t sub_100010CE0(char a1)
{
  uint64_t result = type metadata accessor for WorldClockEntry();
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100010D10())()
{
  return nullsub_1;
}

unint64_t sub_100010D58()
{
  sub_10008A5C0(41);
  swift_bridgeObjectRelease();
  sub_1000893C0();
  sub_100013E68(&qword_1000A4810, (void (*)(uint64_t))&type metadata accessor for Date);
  v1._countAndFlagsBits = sub_10008A640();
  sub_10008A440(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x736569746963202CLL;
  v2._object = (void *)0xEA0000000000203ALL;
  sub_10008A440(v2);
  type metadata accessor for WorldClockEntry();
  type metadata accessor for WorldClockCity();
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = sub_10008A4A0();
  sub_10008A440(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000001BLL;
}

uint64_t sub_100010E90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for WorldClockEntry() + 20));
  if (*(void *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(type metadata accessor for WorldClockCity() - 8);
    uint64_t v5 = v3 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    return sub_10000FDD0(v5, a1);
  }
  else
  {
    return sub_10008435C(a1);
  }
}

void *sub_100010F3C()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100010F48()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100010F80(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100010FC8())()
{
  return j__swift_endAccess;
}

id sub_10001101C()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)GEOAlmanac) init];
    uint64_t v4 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t sub_100011088(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return _objc_release_x1();
}

void (*sub_100011094(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_10001101C();
  return sub_1000110DC;
}

void sub_1000110DC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v2;
}

uint64_t sub_1000110EC()
{
  return 0;
}

uint64_t sub_1000110F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000893C0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self widgetOverrideDate];
  if (v9)
  {
    uint64_t v10 = v9;
    sub_100089380();

    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v11(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v11)(a1, v8, v2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  sub_1000893B0();
  return sub_10000F024((uint64_t)v8, &qword_1000A47F8);
}

uint64_t sub_1000112E0()
{
  uint64_t v0 = swift_allocObject();
  sub_100011318();
  return v0;
}

void *sub_100011318()
{
  v0[2] = &_swiftEmptyArrayStorage;
  v0[3] = 0;
  sub_10000697C(&qword_1000A4BE8);
  type metadata accessor for WorldClockCity();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100097F60;
  uint64_t v2 = *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, double, double))(*v0 + 192);
  v2(4413774, 0xE300000000000000, 4413774, 0xE300000000000000, 0xD000000000000010, 0x800000010008B040, 0x342D544D47, 0xE500000000000000, 40.73061, -73.935242);
  v2(0x6F676163696843, 0xE700000000000000, 4802627, 0xE300000000000000, 0x2F61636972656D41uLL, 0xEF6F676163696843, 0x352D544D47, 0xE500000000000000, 41.881832, -87.623177);
  v2(0x676E696A696542, 0xE700000000000000, 5458498, 0xE300000000000000, 0x6168532F61697341uLL, 0xED0000696168676ELL, 0x362B544D47, 0xE500000000000000, 39.913818, 116.363625);
  v2(0x6E69747265707543, 0xE90000000000006FLL, 5264707, 0xE300000000000000, 0xD000000000000013, 0x800000010008B060, 0x372D544D47, 0xE500000000000000, 37.323, -122.03218);
  swift_beginAccess();
  v0[2] = v1;
  swift_bridgeObjectRelease();
  return v0;
}

void *sub_1000115F0(void *a1)
{
  v1[2] = &_swiftEmptyArrayStorage;
  v1[3] = 0;
  id v3 = [a1 cities];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_100013E28();
    uint64_t v5 = sub_10008A490();
  }
  else
  {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(*v1 + 176))(v5);

  swift_bridgeObjectRelease();
  return v1;
}

id sub_10001169C(unint64_t a1)
{
  uint64_t v2 = &_swiftEmptyArrayStorage;
  if (!a1)
  {
LABEL_23:
    uint64_t v14 = *(uint64_t (**)(void *))(*(void *)v1 + 104);
    return (id)v14(v2);
  }
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_21;
  }
LABEL_20:
  swift_bridgeObjectRetain_n();
  uint64_t v4 = sub_10008A610();
  if (!v4)
  {
LABEL_21:
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v2 = sub_100013EB0((unint64_t)&_swiftEmptyArrayStorage, (unint64_t)v1);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_23;
  }
LABEL_4:
  uint64_t v15 = v1;
  id v16 = self;
  uint64_t v5 = 4;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v6 = (id)sub_10008A5E0();
    }
    else {
      id v6 = *(id *)(a1 + 8 * v5);
    }
    uint64_t v1 = v6;
    uint64_t v7 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    id result = [v16 sharedManager];
    if (!result) {
      break;
    }
    id v9 = result;
    id v10 = [v1 identifier];
    if (v10)
    {
      uint64_t v11 = v10;
      sub_10008A400();

      NSString v12 = sub_10008A3F0();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v12 = 0;
    }
    id v13 = [v9 updatedDataForCityWithID:v12 v15];

    if (v13)
    {
      sub_10008A480();
      if (*(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_10008A4C0();
      }
      sub_10008A4D0();
      sub_10008A4B0();
    }
    ++v5;
    if (v7 == v4)
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = v15;
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100011914(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v96 = a2;
  uint64_t v99 = a1;
  uint64_t v105 = sub_10000697C(&qword_1000A47F8);
  uint64_t v8 = __chkstk_darwin(v105);
  uint64_t v89 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v95 = (char *)&v87 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v93 = (char *)&v87 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  int v91 = (char *)&v87 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v88 = (char *)&v87 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v94 = (char *)&v87 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v92 = (char *)&v87 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v90 = (char *)&v87 - v23;
  __chkstk_darwin(v22);
  uint64_t v107 = (char *)&v87 - v24;
  uint64_t v25 = sub_100089520();
  uint64_t v103 = *(void *)(v25 - 8);
  uint64_t v104 = v25;
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_1000893C0();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(uint64_t (**)(void))(*(void *)v4 + 120);
  uint64_t v34 = *(void *)v4 + 120;
  unint64_t v35 = (void *)((uint64_t (*)(uint64_t))v33)(v30);
  (*(void (**)(void))(*(void *)v4 + 144))();
  sub_100089160();
  double v37 = v36;
  uint64_t v101 = *(void (**)(char *, uint64_t))(v29 + 8);
  v101(v32, v28);
  [v35 calculateAstronomicalTimeForLocation:a3 time:a4 altitudeInDegrees:GEOAlmanacAltitudeSunset];

  uint64_t v102 = v27;
  uint64_t v38 = sub_100089500();
  Class v106 = (void (*)(void, void, void, void))v4;
  uint64_t v110 = v34;
  uint64_t v111 = v33;
  uint64_t v39 = (void *)((uint64_t (*)(uint64_t))v33)(v38);
  id v40 = [v39 sunset];

  if (!v40)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v107, 1, 1, v28);
    goto LABEL_25;
  }
  sub_100089380();

  unint64_t v41 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  uint64_t v42 = v107;
  uint64_t v97 = v29 + 32;
  uint64_t v98 = v32;
  uint64_t v43 = v32;
  uint64_t v44 = v41;
  v41(v107, v43, v28);
  uint64_t v5 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  uint64_t v109 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v109(v42, 0, 1, v28);
  unint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  uint64_t v100 = v29 + 48;
  uint64_t v108 = v45;
  if (v45(v42, 1, v28) == 1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v33 = (uint64_t (*)(void))v28;
  unint64_t v46 = v102;
  char v47 = sub_1000894C0();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v46, v104);
  v101(v42, v28);
  if (v47)
  {
    unint64_t v112 = 0;
    unint64_t v113 = 0xE000000000000000;
    sub_10008A5C0(44);
    uint64_t v48 = swift_bridgeObjectRelease();
    unint64_t v112 = 0xD000000000000019;
    unint64_t v113 = 0x800000010008B0A0;
    uint64_t v49 = (void *)((uint64_t (*)(uint64_t))v111)(v48);
    id v50 = [v49 nextSunrise];

    uint64_t v51 = v44;
    if (v50)
    {
      uint64_t v52 = v90;
      sub_100089380();

      uint64_t v53 = 0;
    }
    else
    {
      uint64_t v53 = 1;
      uint64_t v52 = v90;
    }
    uint64_t v59 = 1;
    v109(v52, v53, 1, v28);
    v114._countAndFlagsBits = sub_10008A410();
    sub_10008A440(v114);
    swift_bridgeObjectRelease();
    v115._countAndFlagsBits = 0x73207478656E202CLL;
    v115._object = (void *)0xEF203A7465736E75;
    sub_10008A440(v115);
    uint64_t v60 = (void *)v111();
    id v61 = [v60 nextSunset];

    uint64_t v62 = v92;
    if (v61)
    {
      sub_100089380();

      uint64_t v59 = 0;
    }
    uint64_t v5 = v109;
    v109(v62, v59, 1, v28);
    uint64_t v67 = type metadata accessor for WidgetUtilities();
    v118._countAndFlagsBits = sub_10008A410();
    sub_10008A440(v118);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, unint64_t))(v67 + 80))(v112, v113);
    uint64_t v68 = swift_bridgeObjectRelease();
    int v69 = (void *)((uint64_t (*)(uint64_t))v111)(v68);
    id v70 = [v69 nextSunrise];

    if (v70)
    {
      uint64_t v71 = v98;
      sub_100089380();

      v72 = v94;
      v51(v94, v71, v28);
      v5(v72, 0, 1, v28);
      if (v108(v72, 1, v28) != 1)
      {
        uint64_t v73 = ((uint64_t (*)(uint64_t, char *, uint64_t))v51)(v99, v72, v28);
        uint64_t v74 = (void *)((uint64_t (*)(uint64_t))v111)(v73);
        id v75 = [v74 nextSunset];

        if (v75)
        {
          sub_100089380();

          uint64_t v76 = v88;
          v51(v88, v71, v28);
          v109(v76, 0, 1, v28);
          if (v108(v76, 1, v28) == 1) {
            goto LABEL_29;
          }
          return ((uint64_t (*)(uint64_t, char *, uint64_t))v51)(v96, v76, v28);
        }
LABEL_28:
        v109(v88, 1, 1, (uint64_t)v33);
LABEL_29:
        __break(1u);
LABEL_30:
        v5(v95, 1, 1, (uint64_t)v33);
        goto LABEL_31;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_26:
    v5(v94, 1, 1, (uint64_t)v33);
    goto LABEL_27;
  }
  unint64_t v112 = 0;
  unint64_t v113 = 0xE000000000000000;
  sub_10008A5C0(34);
  uint64_t v54 = swift_bridgeObjectRelease();
  unint64_t v112 = 0xD000000000000014;
  unint64_t v113 = 0x800000010008B080;
  uint64_t v55 = (void *)((uint64_t (*)(uint64_t))v111)(v54);
  id v56 = [v55 sunrise];

  uint64_t v51 = v44;
  if (v56)
  {
    uint64_t v57 = v91;
    sub_100089380();

    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v58 = 1;
    uint64_t v57 = v91;
  }
  uint64_t v63 = 1;
  uint64_t v5 = v109;
  v109(v57, v58, 1, v28);
  v116._countAndFlagsBits = sub_10008A410();
  sub_10008A440(v116);
  swift_bridgeObjectRelease();
  v117._countAndFlagsBits = 0x7465736E7573202CLL;
  v117._object = (void *)0xEA0000000000203ALL;
  sub_10008A440(v117);
  uint64_t v64 = (void *)v111();
  id v65 = [v64 sunset];

  uint64_t v66 = v93;
  if (v65)
  {
    sub_100089380();

    uint64_t v63 = 0;
  }
  v5(v66, v63, 1, v28);
  uint64_t v77 = type metadata accessor for WidgetUtilities();
  v119._countAndFlagsBits = sub_10008A410();
  sub_10008A440(v119);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t))(v77 + 80))(v112, v113);
  uint64_t v78 = swift_bridgeObjectRelease();
  uint64_t v79 = (void *)((uint64_t (*)(uint64_t))v111)(v78);
  id v80 = [v79 sunrise];

  if (!v80) {
    goto LABEL_30;
  }
  uint64_t v81 = v98;
  sub_100089380();

  uint64_t v82 = v95;
  v51(v95, v81, v28);
  v5(v82, 0, 1, v28);
  if (v108(v82, 1, v28) == 1)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v83 = ((uint64_t (*)(uint64_t, char *, uint64_t))v51)(v99, v82, v28);
  uint64_t v84 = (void *)((uint64_t (*)(uint64_t))v111)(v83);
  id v85 = [v84 sunset];

  if (!v85)
  {
LABEL_32:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t (*)(void)))v5)(v89, 1, 1, v33);
    goto LABEL_33;
  }
  sub_100089380();

  uint64_t v76 = v89;
  v51(v89, v81, v28);
  v5(v76, 0, 1, v28);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v108)(v76, 1, v28);
  if (result != 1) {
    return ((uint64_t (*)(void, void, void))v51)(v96, v76, v28);
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100012548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v66 = a5;
  uint64_t v67 = a6;
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t v61 = a7;
  uint64_t v12 = sub_10000697C(&qword_1000A47F8);
  uint64_t v13 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v12 - 8);
  uint64_t v59 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v52 - v15;
  uint64_t v17 = sub_1000893C0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v17);
  uint64_t v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = sub_10000697C(&qword_1000A4BF0);
  uint64_t v25 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v24);
  uint64_t v58 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v25);
  uint64_t v29 = (char *)&v52 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v52 + *(int *)(v24 + 48) - v30;
  uint64_t v32 = (char *)&v52 - v30;
  uint64_t v33 = (*(uint64_t (**)(double, double))(*(void *)v9 + 184))(a8, a9);
  uint64_t v34 = *(void (**)(uint64_t))(*(void *)v9 + 144);
  uint64_t v60 = v23;
  v34(v33);
  id v35 = [self widgetOverrideDate];
  if (v35)
  {
    double v36 = v35;
    sub_100089380();

    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v16, v21, v17);
    int v37 = 1;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1) {
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  int v37 = 0;
LABEL_6:
  int v53 = v37;
  sub_10000F024((uint64_t)v16, &qword_1000A47F8);
  uint64_t v38 = &v29[*(int *)(v24 + 48)];
  id v56 = v29;
  uint64_t v57 = v38;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  uint64_t v55 = v32;
  v39(v29, v32, v17);
  v39(v38, v31, v17);
  id v40 = v58;
  uint64_t v52 = &v58[*(int *)(v24 + 48)];
  uint64_t v41 = (uint64_t)v52;
  v39(v58, v32, v17);
  v39((char *)v41, v31, v17);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(*(void *)v9 + 200);
  uint64_t v54 = v17;
  uint64_t v43 = v63;
  swift_bridgeObjectRetain();
  uint64_t v44 = v65;
  swift_bridgeObjectRetain();
  uint64_t v45 = v67;
  swift_bridgeObjectRetain();
  uint64_t v46 = (uint64_t)v59;
  uint64_t v47 = v66;
  v42(v66, v45);
  LOBYTE(v42) = sub_100005184();
  char v48 = sub_100005184();
  sub_1000841F0((uint64_t)v60, v53, v62, v43, v64, v44, v47, v45, v61, (uint64_t)v56, (uint64_t)v52, v46, v42 & 1, v48 & 1);
  sub_10000F024((uint64_t)v55, &qword_1000A4BF0);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v50 = v54;
  v49(v40, v54);
  return ((uint64_t (*)(char *, uint64_t))v49)(v57, v50);
}

uint64_t sub_100012A14@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v43 = sub_1000893C0();
  uint64_t v5 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = sub_100089520();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  __chkstk_darwin(v11);
  id v40 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100089580();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v36 - v21;
  uint64_t v44 = a1;
  sub_100089530();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10000F024((uint64_t)v15, qword_1000A4BF8);
    uint64_t v23 = type metadata accessor for WidgetUtilities();
    v46[0] = 0;
    v46[1] = 0xE000000000000000;
    sub_10008A5C0(41);
    swift_bridgeObjectRelease();
    v46[0] = 0xD000000000000027;
    v46[1] = 0x800000010008B0C0;
    v47._countAndFlagsBits = v44;
    v47._object = a2;
    sub_10008A440(v47);
    (*(void (**)(void, void))(v23 + 80))(v46[0], v46[1]);
    swift_bridgeObjectRelease();
    uint64_t v24 = 1;
    uint64_t v25 = v45;
    uint64_t v26 = v43;
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v28 = v22;
    uint64_t v38 = v22;
    v27(v22, v15, v16);
    id v29 = [self currentCalendar];
    uint64_t v30 = v40;
    sub_1000894D0();

    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v28, v16);
    sub_100089510();
    sub_1000893B0();
    sub_1000894B0();
    int v37 = a2;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v32 = v43;
    v31(v7, v43);
    uint64_t v39 = v5;
    uint64_t v33 = v45;
    sub_100089340();
    v31(v10, v32);
    uint64_t v34 = type metadata accessor for WidgetUtilities();
    v46[0] = 0;
    v46[1] = 0xE000000000000000;
    sub_10008A5C0(50);
    swift_bridgeObjectRelease();
    strcpy((char *)v46, "For timezone: ");
    HIBYTE(v46[1]) = -18;
    v48._countAndFlagsBits = v44;
    v48._object = v37;
    sub_10008A440(v48);
    v49._object = (void *)0x800000010008B0F0;
    v49._countAndFlagsBits = 0xD000000000000020;
    sub_10008A440(v49);
    sub_100013E68(&qword_1000A4810, (void (*)(uint64_t))&type metadata accessor for Date);
    v50._countAndFlagsBits = sub_10008A640();
    sub_10008A440(v50);
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v34 + 80))(v46[0], v46[1]);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v42);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v38, v16);
    uint64_t v24 = 0;
    uint64_t v25 = v33;
    uint64_t v5 = v39;
    uint64_t v26 = v32;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v25, v24, 1, v26);
}

unint64_t sub_100012F6C()
{
  sub_10008A5C0(37);
  uint64_t v1 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v0 + 96))(v1);
  type metadata accessor for WorldClockCity();
  v3._countAndFlagsBits = sub_10008A4A0();
  sub_10008A440(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000023;
}

uint64_t sub_100013034()
{
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_10001305C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10001309C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

size_t sub_1000130E0(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000697C(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

size_t sub_1000132BC(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100013334(a1, a2, a3, (void *)*v3, &qword_1000A4FE0, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  *Swift::String v3 = result;
  return result;
}

size_t sub_1000132F8(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100013334(a1, a2, a3, (void *)*v3, &qword_1000A4BE8, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  *Swift::String v3 = result;
  return result;
}

size_t sub_100013334(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000697C(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

void *sub_100013510(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_10000697C(&qword_1000A47F8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v78 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v77 = (char *)v58 - v8;
  uint64_t v9 = sub_1000893C0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v82 = (char *)v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  id v85 = (char *)v58 - v14;
  __chkstk_darwin(v13);
  uint64_t v76 = (char *)v58 - v15;
  uint64_t v75 = type metadata accessor for WorldClockCity();
  uint64_t v61 = *(void *)(v75 - 8);
  uint64_t v16 = __chkstk_darwin(v75);
  uint64_t v90 = (uint64_t)v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v74 = (char *)v58 - v18;
  uint64_t v68 = type metadata accessor for WorldClockEntry();
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v20 = (char *)v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v21 = *(void *)(a1 + 16);
  if (!v21) {
    return &_swiftEmptyArrayStorage;
  }
  v58[1] = v2;
  uint64_t v92 = &_swiftEmptyArrayStorage;
  size_t v22 = sub_1000132BC(0, v21, 0);
  uint64_t v23 = 0;
  uint64_t v65 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v24 = (uint64_t (**)(size_t))(*a2 + 96);
  uint64_t v64 = *v24;
  uint64_t v63 = v24;
  uint64_t v89 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v87 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  unint64_t v25 = v10 + 16;
  uint64_t v62 = *(void *)(v10 + 72);
  uint64_t v86 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v72 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v73 = (void (**)(uint64_t, char *, uint64_t))(v10 + 40);
  uint64_t v83 = (void (**)(char *, void, uint64_t))(v10 + 16);
  uint64_t v60 = a2;
  uint64_t v59 = v20;
  int64_t v66 = v21;
  do
  {
    uint64_t v71 = v23;
    uint64_t v84 = v65 + v62 * v23;
    uint64_t v26 = v64(v22);
    int64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      unint64_t v70 = v25 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      int v91 = &_swiftEmptyArrayStorage;
      uint64_t v28 = v26;
      sub_1000132F8(0, v27, 0);
      id v29 = v91;
      uint64_t v30 = v61;
      unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v69 = v28;
      unint64_t v81 = v31;
      uint64_t v32 = v28 + v31;
      id v88 = self;
      uint64_t v80 = *(void *)(v30 + 72);
      uint64_t v33 = v82;
      do
      {
        sub_10000FDD0(v32, v90);
        id v34 = [v88 widgetOverrideDate];
        if (v34)
        {
          id v35 = v34;
          uint64_t v36 = v85;
          sub_100089380();

          uint64_t v37 = (uint64_t)v77;
          (*v89)(v77, v36, v9);
          uint64_t v38 = *v87;
          (*v87)(v37, 0, 1, v9);
        }
        else
        {
          uint64_t v38 = *v87;
          uint64_t v37 = (uint64_t)v77;
          (*v87)((uint64_t)v77, 1, 1, v9);
        }
        uint64_t v39 = v76;
        uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))v25;
        v79(v33, v84, v9);
        id v40 = *v86;
        if ((*v86)(v37, 1, v9) == 1)
        {
          uint64_t v41 = v33;
          uint64_t v42 = *v89;
          (*v89)(v39, v41, v9);
          sub_10000F024(v37, &qword_1000A47F8);
        }
        else
        {
          (*v72)(v33, v9);
          uint64_t v42 = *v89;
          (*v89)(v39, (char *)v37, v9);
        }
        (*v73)(v90, v39, v9);
        id v43 = [v88 widgetOverrideDate];
        if (v43)
        {
          uint64_t v44 = v85;
          sub_100089380();

          id v43 = v78;
          v42(v78, v44, v9);
          uint64_t v45 = (uint64_t)v43;
          v38((uint64_t)v43, 0, 1, v9);
          LOBYTE(v43) = v40((uint64_t)v43, 1, v9) != 1;
        }
        else
        {
          uint64_t v45 = (uint64_t)v78;
          v38((uint64_t)v78, 1, 1, v9);
        }
        sub_10000F024(v45, &qword_1000A47F8);
        uint64_t v46 = (uint64_t)v74;
        uint64_t v47 = v90;
        *(unsigned char *)(v90 + *(int *)(v75 + 20)) = (_BYTE)v43;
        sub_100014C1C(v47, v46, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
        int v91 = v29;
        unint64_t v49 = v29[2];
        unint64_t v48 = v29[3];
        if (v49 >= v48 >> 1)
        {
          sub_1000132F8(v48 > 1, v49 + 1, 1);
          id v29 = v91;
        }
        v29[2] = v49 + 1;
        uint64_t v50 = v80;
        sub_100014C1C(v46, (uint64_t)v29 + v81 + v49 * v80, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
        v32 += v50;
        --v27;
        uint64_t v33 = v82;
        unint64_t v25 = (unint64_t)v83;
      }
      while (v27);
      swift_bridgeObjectRelease();
      uint64_t v20 = v59;
      v79(v59, v84, v9);
    }
    else
    {
      swift_bridgeObjectRelease();
      id v29 = &_swiftEmptyArrayStorage;
      (*(void (**)(char *, uint64_t, uint64_t))v25)(v20, v84, v9);
    }
    uint64_t v51 = v68;
    *(void *)&v20[*(int *)(v68 + 20)] = v29;
    v20[*(int *)(v51 + 24)] = 0;
    uint64_t v52 = v92;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000132BC(0, v52[2] + 1, 1);
      uint64_t v52 = v92;
    }
    int64_t v53 = v66;
    uint64_t v54 = v71;
    unint64_t v56 = v52[2];
    unint64_t v55 = v52[3];
    if (v56 >= v55 >> 1)
    {
      sub_1000132BC(v55 > 1, v56 + 1, 1);
      uint64_t v54 = v71;
      uint64_t v52 = v92;
    }
    uint64_t v23 = v54 + 1;
    v52[2] = v56 + 1;
    size_t v22 = sub_100014C1C((uint64_t)v20, (uint64_t)v52+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v56, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
    unint64_t v25 = (unint64_t)v83;
  }
  while (v23 != v53);
  return v52;
}

uint64_t type metadata accessor for WorldClockEntry()
{
  uint64_t result = qword_1000A8870;
  if (!qword_1000A8870) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for WorldClockIntentModel()
{
  return self;
}

uint64_t sub_100013DC8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100013E28()
{
  unint64_t result = qword_1000A4BD8;
  if (!qword_1000A4BD8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A4BD8);
  }
  return result;
}

uint64_t sub_100013E68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100013EB0(unint64_t a1, unint64_t a2)
{
  unint64_t v55 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A4FD0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = type metadata accessor for WorldClockCity();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v69 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v58 = (uint64_t)&v54 - v9;
  if (a1 >> 62)
  {
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10008A610();
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_3:
      unint64_t v68 = a1 & 0xC000000000000001;
      int64_t v66 = (void (**)(void *, uint64_t, uint64_t, unint64_t))(v59 + 56);
      uint64_t v64 = (unsigned int (**)(void *, uint64_t, unint64_t))(v59 + 48);
      uint64_t v11 = &_swiftEmptyArrayStorage;
      uint64_t v12 = 4;
      unint64_t v60 = a1;
      uint64_t v61 = (void *)0x800000010008B220;
      uint64_t v65 = v5;
      unint64_t v67 = v6;
      uint64_t v63 = v10;
      while (1)
      {
        uint64_t v5 = (char *)(v12 - 4);
        if (v68) {
          id v15 = (id)sub_10008A5E0();
        }
        else {
          id v15 = *(id *)(a1 + 8 * v12);
        }
        uint64_t v16 = v15;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          goto LABEL_38;
        }
        id v17 = [v15 cityName];
        if (!v17) {
          id v17 = [v16 displayString];
        }
        uint64_t v18 = sub_10008A400();
        uint64_t v20 = v19;

        id v21 = [v16 timeZoneName];
        uint64_t v71 = v12 - 3;
        v72 = v11;
        if (!v21) {
          goto LABEL_19;
        }
        size_t v22 = v21;
        uint64_t v62 = sub_10008A400();
        uint64_t v24 = v23;

        id v25 = [v16 latitude];
        if (!v25) {
          goto LABEL_18;
        }
        uint64_t v26 = v25;
        id v27 = [v16 longditude];
        if (!v27) {
          break;
        }
        uint64_t v28 = v27;
        id v29 = [v16 abbreviation];
        uint64_t v57 = v18;
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v56 = sub_10008A400();
          unint64_t v32 = v31;
        }
        else
        {
          uint64_t v56 = 0;
          unint64_t v32 = 0xE000000000000000;
        }
        [v26 doubleValue];
        double v46 = v45;
        [v28 doubleValue];
        unint64_t v6 = v55;
        uint64_t v11 = v65;
        (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double, double))(*(void *)v55 + 192))(v57, v20, v56, v32, v62, v24, 0x372D544D47, 0xE500000000000000, v46, v47);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = 0;
        a1 = v60;
LABEL_28:
        swift_bridgeObjectRelease();
        uint64_t v48 = v44;
        unint64_t v49 = v67;
        (*v66)(v11, v48, 1, v67);
        if (v70)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return v11;
        }

        if ((*v64)(v11, 1, v49) == 1)
        {
          sub_10000F024((uint64_t)v11, &qword_1000A4FD0);
          uint64_t v13 = v63;
          uint64_t v14 = v71;
          uint64_t v11 = v72;
        }
        else
        {
          uint64_t v50 = v58;
          sub_100014C1C((uint64_t)v11, v58, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
          sub_100014C1C(v50, v69, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
          uint64_t v11 = v72;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v14 = v71;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            uint64_t v11 = (void *)sub_1000130E0(0, v11[2] + 1, 1, v11, &qword_1000A4BE8, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
          }
          uint64_t v13 = v63;
          unint64_t v6 = v11[2];
          unint64_t v52 = v11[3];
          if (v6 >= v52 >> 1) {
            uint64_t v11 = (void *)sub_1000130E0(v52 > 1, v6 + 1, 1, v11, &qword_1000A4BE8, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
          }
          v11[2] = v6 + 1;
          sub_100014C1C(v69, (uint64_t)v11+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v59 + 72) * v6, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
        }
        ++v12;
        if (v14 == v13)
        {
          swift_bridgeObjectRelease();
          return v11;
        }
      }

LABEL_18:
      swift_bridgeObjectRelease();
      a1 = v60;
LABEL_19:
      swift_bridgeObjectRelease();
      uint64_t v75 = 0;
      unint64_t v76 = 0xE000000000000000;
      sub_10008A5C0(62);
      v77._countAndFlagsBits = 0xD00000000000002ELL;
      v77._object = v61;
      sub_10008A440(v77);
      id v33 = [v16 cityName];
      if (v33)
      {
        id v34 = v33;
        uint64_t v35 = sub_10008A400();
        uint64_t v37 = v36;
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v37 = 0;
      }
      uint64_t v73 = v35;
      uint64_t v74 = v37;
      sub_10000697C(&qword_1000A4FD8);
      v78._countAndFlagsBits = sub_10008A410();
      sub_10008A440(v78);
      swift_bridgeObjectRelease();
      v79._countAndFlagsBits = 0x6F7A656D6974202CLL;
      v79._object = (void *)0xEC000000203A656ELL;
      sub_10008A440(v79);
      id v38 = [v16 timeZoneName];
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = sub_10008A400();
        uint64_t v42 = v41;
      }
      else
      {
        uint64_t v40 = 0;
        uint64_t v42 = 0;
      }
      uint64_t v43 = type metadata accessor for WidgetUtilities();
      uint64_t v73 = v40;
      uint64_t v74 = v42;
      v80._countAndFlagsBits = sub_10008A410();
      sub_10008A440(v80);
      swift_bridgeObjectRelease();
      unint64_t v6 = v43;
      (*(void (**)(uint64_t, unint64_t))(v43 + 80))(v75, v76);
      uint64_t v44 = 1;
      uint64_t v11 = v65;
      goto LABEL_28;
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000145A0()
{
  return sub_100013E68(&qword_1000A4BD0, (void (*)(uint64_t))type metadata accessor for WorldClockEntry);
}

uint64_t type metadata accessor for WorldClockBaseProvider()
{
  return self;
}

uint64_t type metadata accessor for WorldClockSingleProvider()
{
  return self;
}

uint64_t type metadata accessor for WorldClockMultiProvider()
{
  return self;
}

void *sub_100014654(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10001472C(uint64_t a1)
{
  uint64_t v2 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000147A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100014828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000148C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t sub_100014944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000149D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000149E8);
}

uint64_t sub_1000149E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100014AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100014ABC);
}

uint64_t sub_100014ABC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000893C0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100014B78()
{
  uint64_t result = sub_1000893C0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100014C1C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100014C8C()
{
  uint64_t result = sub_10008A040();
  qword_1000ABEA8 = result;
  return result;
}

uint64_t *sub_100014CC4()
{
  if (qword_1000A8880 != -1) {
    swift_once();
  }
  return &qword_1000ABEA8;
}

uint64_t sub_100014D10()
{
  return sub_100015E70(&qword_1000A8880);
}

uint64_t sub_100014D34(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABEB0);
}

uint64_t *sub_100014D5C()
{
  if (qword_1000A8888 != -1) {
    swift_once();
  }
  return &qword_1000ABEB0;
}

uint64_t sub_100014DA8()
{
  return sub_100015E70(&qword_1000A8888);
}

uint64_t sub_100014DCC()
{
  uint64_t v0 = sub_100089F90();
  __n128 v1 = __chkstk_darwin(v0);
  (*(void (**)(char *, void, __n128))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:), v1);
  uint64_t result = sub_10008A020();
  qword_1000ABEB8 = result;
  return result;
}

uint64_t *sub_100014EAC()
{
  if (qword_1000A8890 != -1) {
    swift_once();
  }
  return &qword_1000ABEB8;
}

uint64_t sub_100014EF8()
{
  return sub_100015E70(&qword_1000A8890);
}

uint64_t sub_100014F1C()
{
  sub_100089FE0();
  uint64_t v0 = sub_10008A010();
  uint64_t result = swift_release();
  qword_1000ABEC0 = v0;
  return result;
}

uint64_t *sub_100014F5C()
{
  if (qword_1000A8898 != -1) {
    swift_once();
  }
  return &qword_1000ABEC0;
}

uint64_t sub_100014FA8()
{
  return sub_100015E70(&qword_1000A8898);
}

uint64_t sub_100014FCC()
{
  uint64_t v0 = sub_100089F90();
  __n128 v1 = __chkstk_darwin(v0);
  (*(void (**)(char *, void, __n128))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:), v1);
  uint64_t result = sub_10008A020();
  qword_1000ABEC8 = result;
  return result;
}

uint64_t *sub_1000150B4()
{
  if (qword_1000A88A0 != -1) {
    swift_once();
  }
  return &qword_1000ABEC8;
}

uint64_t sub_100015100()
{
  return sub_100015E70(&qword_1000A88A0);
}

uint64_t sub_100015124(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABED0);
}

uint64_t *sub_100015144()
{
  if (qword_1000A88A8 != -1) {
    swift_once();
  }
  return &qword_1000ABED0;
}

uint64_t sub_100015190()
{
  return sub_100015E70(&qword_1000A88A8);
}

uint64_t sub_1000151B4(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABED8);
}

uint64_t *sub_1000151D8()
{
  if (qword_1000A88B0 != -1) {
    swift_once();
  }
  return &qword_1000ABED8;
}

uint64_t sub_100015224()
{
  return sub_100015E70(&qword_1000A88B0);
}

uint64_t sub_100015248(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABEE0);
}

uint64_t *sub_100015268()
{
  if (qword_1000A88B8 != -1) {
    swift_once();
  }
  return &qword_1000ABEE0;
}

uint64_t sub_1000152B4()
{
  return sub_100015E70(&qword_1000A88B8);
}

uint64_t sub_1000152D8(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABEE8);
}

uint64_t *sub_1000152F4()
{
  if (qword_1000A88C0 != -1) {
    swift_once();
  }
  return &qword_1000ABEE8;
}

uint64_t sub_100015340()
{
  return sub_100015E70(&qword_1000A88C0);
}

uint64_t sub_100015364(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABEF0);
}

uint64_t *sub_100015380()
{
  if (qword_1000A88C8 != -1) {
    swift_once();
  }
  return &qword_1000ABEF0;
}

uint64_t sub_1000153CC()
{
  return sub_100015E70(&qword_1000A88C8);
}

uint64_t sub_1000153F0(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABEF8);
}

uint64_t *sub_100015408()
{
  if (qword_1000A88D0 != -1) {
    swift_once();
  }
  return &qword_1000ABEF8;
}

uint64_t sub_100015454()
{
  return sub_100015E70(&qword_1000A88D0);
}

uint64_t sub_100015478(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABF00);
}

uint64_t *sub_100015498()
{
  if (qword_1000A88D8 != -1) {
    swift_once();
  }
  return &qword_1000ABF00;
}

uint64_t sub_1000154E4()
{
  return sub_100015E70(&qword_1000A88D8);
}

uint64_t sub_100015508(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABF08);
}

uint64_t *sub_100015530()
{
  if (qword_1000A88E0 != -1) {
    swift_once();
  }
  return &qword_1000ABF08;
}

uint64_t sub_10001557C()
{
  return sub_100015E70(&qword_1000A88E0);
}

uint64_t sub_1000155A0(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABF10);
}

uint64_t *sub_1000155BC()
{
  if (qword_1000A88E8 != -1) {
    swift_once();
  }
  return &qword_1000ABF10;
}

uint64_t sub_100015608()
{
  return sub_100015E70(&qword_1000A88E8);
}

uint64_t sub_10001562C(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABF18);
}

uint64_t *sub_100015648()
{
  if (qword_1000A88F0 != -1) {
    swift_once();
  }
  return &qword_1000ABF18;
}

uint64_t sub_100015694()
{
  return sub_100015E70(&qword_1000A88F0);
}

uint64_t sub_1000156B8()
{
  uint64_t v0 = sub_100089F90();
  __n128 v1 = __chkstk_darwin(v0);
  (*(void (**)(char *, void, __n128))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:), v1);
  uint64_t result = sub_10008A020();
  qword_1000ABF20 = result;
  return result;
}

uint64_t *sub_100015798()
{
  if (qword_1000A88F8 != -1) {
    swift_once();
  }
  return &qword_1000ABF20;
}

uint64_t sub_1000157E4()
{
  return sub_100015E70(&qword_1000A88F8);
}

uint64_t sub_100015808(char a1)
{
  if ((a1 & 1) == 0)
  {
    if (qword_1000A88A0 == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (qword_1000A88D0 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:

  return swift_retain();
}

uint64_t sub_1000158A8(char a1)
{
  if ((a1 & 1) == 0)
  {
    if (qword_1000A88A8 == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (qword_1000A88D8 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:

  return swift_retain();
}

uint64_t sub_100015948(char a1)
{
  if ((a1 & 1) == 0)
  {
    if (qword_1000A88B0 == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (qword_1000A88E0 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:

  return swift_retain();
}

uint64_t sub_1000159E8(char a1)
{
  if ((a1 & 1) == 0)
  {
    if (qword_1000A88B8 == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (qword_1000A88E8 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:

  return swift_retain();
}

uint64_t sub_100015A88(char a1)
{
  if ((a1 & 1) == 0)
  {
    if (qword_1000A88C0 == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (qword_1000A88F0 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:

  return swift_retain();
}

uint64_t sub_100015B28(char a1)
{
  if ((a1 & 1) == 0)
  {
    if (qword_1000A88C8 == -1) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (qword_1000A88F8 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_5:

  return swift_retain();
}

uint64_t sub_100015BC8(char a1)
{
  if (a1) {
    return sub_100089FD0();
  }
  else {
    return sub_10008A000();
  }
}

uint64_t sub_100015BD4(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABF28);
}

uint64_t *sub_100015BF0()
{
  if (qword_1000A8900 != -1) {
    swift_once();
  }
  return &qword_1000ABF28;
}

uint64_t sub_100015C3C()
{
  return sub_100015E70(&qword_1000A8900);
}

uint64_t sub_100015C60(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABF30);
}

uint64_t *sub_100015C80()
{
  if (qword_1000A8908 != -1) {
    swift_once();
  }
  return &qword_1000ABF30;
}

uint64_t sub_100015CCC()
{
  return sub_100015E70(&qword_1000A8908);
}

uint64_t sub_100015CF0(uint64_t a1)
{
  return sub_100015D0C(a1, &qword_1000ABF38);
}

uint64_t sub_100015D0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100089F90();
  __n128 v4 = __chkstk_darwin(v3);
  (*(void (**)(char *, void, __n128))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:), v4);
  uint64_t result = sub_10008A020();
  *a2 = result;
  return result;
}

uint64_t *sub_100015E00()
{
  if (qword_1000A8910 != -1) {
    swift_once();
  }
  return &qword_1000ABF38;
}

uint64_t sub_100015E4C()
{
  return sub_100015E70(&qword_1000A8910);
}

uint64_t sub_100015E70(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t sub_100015EBC()
{
  sub_10000697C(&qword_1000A50B8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100098250;
  *(void *)(v0 + 32) = sub_100089FE0();
  *(void *)(v0 + 40) = sub_100089FE0();
  if (qword_1000A8900 != -1) {
    swift_once();
  }
  *(void *)(v0 + 48) = qword_1000ABF28;
  uint64_t v1 = qword_1000A8908;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  *(void *)(v0 + 56) = qword_1000ABF30;
  swift_retain();
  *(void *)(v0 + 64) = sub_100089FD0();
  sub_10008A4B0();
  uint64_t result = sub_10008A160();
  qword_1000ABF40 = result;
  return result;
}

uint64_t *sub_100015FBC()
{
  if (qword_1000A8918 != -1) {
    swift_once();
  }
  return &qword_1000ABF40;
}

uint64_t sub_100016008()
{
  return sub_1000162AC(&qword_1000A8918);
}

uint64_t sub_10001602C()
{
  sub_10000697C(&qword_1000A50B8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100097E50;
  if (qword_1000A8910 != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = qword_1000ABF38;
  uint64_t v1 = qword_1000A8900;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  *(void *)(v0 + 40) = qword_1000ABF28;
  swift_retain();
  *(void *)(v0 + 48) = sub_100089FD0();
  sub_10008A4B0();
  uint64_t result = sub_10008A160();
  qword_1000ABF48 = result;
  return result;
}

uint64_t *sub_10001611C()
{
  if (qword_1000A8920 != -1) {
    swift_once();
  }
  return &qword_1000ABF48;
}

uint64_t sub_100016168()
{
  return sub_1000162AC(&qword_1000A8920);
}

uint64_t sub_10001618C()
{
  sub_10000697C(&qword_1000A50B8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100098260;
  if (qword_1000A8908 != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = qword_1000ABF30;
  swift_retain();
  *(void *)(v0 + 40) = sub_10008A000();
  sub_10008A4B0();
  uint64_t result = sub_10008A160();
  qword_1000ABF50 = result;
  return result;
}

uint64_t *sub_10001623C()
{
  if (qword_1000A8928 != -1) {
    swift_once();
  }
  return &qword_1000ABF50;
}

uint64_t sub_100016288()
{
  return sub_1000162AC(&qword_1000A8928);
}

uint64_t sub_1000162AC(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void *sub_1000162F8()
{
  return &unk_100098270;
}

double sub_100016304()
{
  return 0.0;
}

void *sub_10001630C()
{
  return &unk_100098278;
}

double sub_100016318()
{
  return 16.0;
}

void *sub_100016320()
{
  return &unk_100098280;
}

void *sub_10001632C()
{
  return &unk_100098288;
}

double sub_100016338()
{
  return 8.0;
}

void *sub_100016340()
{
  return &unk_100098290;
}

void sub_10001634C(uint64_t a1)
{
}

double *sub_100016358()
{
  if (qword_1000A8930 != -1) {
    swift_once();
  }
  return &dbl_1000ABF58;
}

double sub_1000163A4()
{
  return sub_100016534(&qword_1000A8930, (uint64_t)&dbl_1000ABF58);
}

void sub_1000163C8(uint64_t a1)
{
}

double *sub_1000163D4()
{
  if (qword_1000A8938 != -1) {
    swift_once();
  }
  return &dbl_1000ABF60;
}

double sub_100016420()
{
  return sub_100016534(&qword_1000A8938, (uint64_t)&dbl_1000ABF60);
}

void sub_100016444(uint64_t a1)
{
}

void sub_100016450(uint64_t a1, double *a2)
{
  id v3 = [self currentDevice];
  id v4 = [v3 userInterfaceIdiom];

  double v5 = 15.0;
  if (v4 == (id)1) {
    double v5 = 14.0;
  }
  *a2 = v5;
}

double *sub_1000164C4()
{
  if (qword_1000A8940 != -1) {
    swift_once();
  }
  return &dbl_1000ABF68;
}

double sub_100016510()
{
  return sub_100016534(&qword_1000A8940, (uint64_t)&dbl_1000ABF68);
}

double sub_100016534(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

uint64_t sub_100016570()
{
  uint64_t v0 = sub_10008A260();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008A250();
  char v4 = sub_10008A220();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v4) {
    return sub_100089A30();
  }
  else {
    return sub_100089A20();
  }
}

void sub_100016660()
{
  if (sub_100018508())
  {
    id v0 = [self defaultController];
    id v1 = [v0 currentDisplayZoomMode];

    id v2 = [v1 displayZoomOption];
    BOOL v3 = v2 == (id)1;
  }
  else
  {
    BOOL v3 = 0;
  }
  byte_1000ABF70 = v3;
}

char *sub_1000166F4()
{
  if (qword_1000A8948 != -1) {
    swift_once();
  }
  return &byte_1000ABF70;
}

uint64_t sub_100016744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000898F0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A4FF0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000184A0(v2, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1000899F0();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = sub_10008A560();
    uint64_t v14 = sub_100089B70();
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = sub_10000F1AC(0xD000000000000013, 0x800000010008B250, &v17);
      _os_log_impl((void *)&_mh_execute_header, v14, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1000898E0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1000169CC()
{
  return sub_1000897C0();
}

uint64_t sub_1000169F0(uint64_t a1)
{
  uint64_t v2 = sub_1000899F0();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_1000897D0();
}

uint64_t sub_100016AB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CapMaxContentSizeCategory() + 20);
  uint64_t v4 = sub_1000899F0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for CapMaxContentSizeCategory()
{
  uint64_t result = qword_1000A8AE0;
  if (!qword_1000A8AE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100016B7C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CapMaxContentSizeCategory() + 20);
  uint64_t v4 = sub_1000899F0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_100016BF4())()
{
  return nullsub_1;
}

uint64_t sub_100016C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v4 = sub_1000899F0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&KeyPath - v9;
  uint64_t KeyPath = swift_getKeyPath();
  sub_100016744((uint64_t)v7);
  uint64_t v11 = v2 + *(int *)(type metadata accessor for CapMaxContentSizeCategory() + 20);
  BOOL v12 = sub_100017294((uint64_t)v7, v11);
  os_log_type_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  if (v12)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, v11, v4);
  }
  else
  {
    sub_100016744((uint64_t)v10);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  }
  uint64_t v15 = (uint64_t *)(a2 + *(int *)(sub_10000697C(&qword_1000A4FF8) + 36));
  uint64_t v16 = sub_10000697C(&qword_1000A5000);
  v14((char *)v15 + *(int *)(v16 + 28), (uint64_t)v10, v4);
  *uint64_t v15 = KeyPath;
  uint64_t v17 = sub_10000697C(&qword_1000A5008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(a2, v20, v17);
  return ((uint64_t (*)(char *, uint64_t))v13)(v10, v4);
}

uint64_t sub_100016E44@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4FF0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100016E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000176AC(a1, a3);
  uint64_t v5 = a3 + *(int *)(type metadata accessor for CapMaxContentSizeCategory() + 20);
  uint64_t v6 = sub_1000899F0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a2, v6);
}

uint64_t sub_100016F28()
{
  return sub_100089700();
}

uint64_t sub_100016F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v6 = sub_1000899F0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&KeyPath - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  BOOL v12 = (char *)&KeyPath - v11;
  uint64_t KeyPath = swift_getKeyPath();
  sub_100016744((uint64_t)v9);
  uint64_t v13 = v3 + *(int *)(a2 + 20);
  BOOL v14 = sub_100017294((uint64_t)v9, v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  if (v14)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v16(v12, v13, v6);
  }
  else
  {
    sub_100016744((uint64_t)v12);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  }
  uint64_t v17 = (uint64_t *)(a3 + *(int *)(sub_10000697C(&qword_1000A4FF8) + 36));
  uint64_t v18 = sub_10000697C(&qword_1000A5000);
  v16((char *)v17 + *(int *)(v18 + 28), (uint64_t)v12, v6);
  *uint64_t v17 = KeyPath;
  uint64_t v19 = sub_10000697C(&qword_1000A5008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a3, v22, v19);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, v6);
}

BOOL sub_100017148(char a1, char a2)
{
  return a1 == a2;
}

void sub_100017158(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100017180(unsigned __int8 a1)
{
  return sub_10008A6A0();
}

BOOL sub_1000171C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000171DC()
{
  Swift::UInt v1 = *v0;
  sub_10008A670();
  sub_10008A680(v1);
  return sub_10008A6A0();
}

void sub_100017224()
{
  sub_10008A680(*v0);
}

Swift::Int sub_100017250()
{
  Swift::UInt v1 = *v0;
  sub_10008A670();
  sub_10008A680(v1);
  return sub_10008A6A0();
}

BOOL sub_100017294(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v3 = sub_1000899F0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
  v11((char *)&v19 - v9, a2, v3, v8);
  BOOL v12 = *(uint64_t (**)(char *, uint64_t))(v4 + 88);
  int v13 = v12(v10, v3);
  unint64_t v14 = 0;
  int v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      unint64_t v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      unint64_t v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:)) {
      goto LABEL_7;
    }
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      unint64_t v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      unint64_t v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      unint64_t v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      unint64_t v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      unint64_t v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      unint64_t v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      unint64_t v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
LABEL_7:
        unint64_t v14 = 3;
        goto LABEL_24;
      }
      unint64_t v14 = 11;
    }
  }
LABEL_24:
  ((void (*)(char *, uint64_t, uint64_t))v11)(v6, v20, v3);
  int v16 = v12(v6, v3);
  if (v16 == v15)
  {
    unint64_t v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    unint64_t v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    unint64_t v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        unint64_t v17 = 4;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        unint64_t v17 = 5;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        unint64_t v17 = 6;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        unint64_t v17 = 7;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        unint64_t v17 = 8;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        unint64_t v17 = 9;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        unint64_t v17 = 10;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        unint64_t v17 = 11;
        return v14 < v17;
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    unint64_t v17 = 3;
  }
  return v14 < v17;
}

uint64_t sub_1000176AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000697C(&qword_1000A4B70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017714()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100017734()
{
  unint64_t result = qword_1000A5010;
  if (!qword_1000A5010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5010);
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetImages()
{
  return &type metadata for WidgetImages;
}

ValueMetadata *type metadata accessor for WidgetColors()
{
  return &type metadata for WidgetColors;
}

ValueMetadata *type metadata accessor for WidgetColors.Night()
{
  return &type metadata for WidgetColors.Night;
}

ValueMetadata *type metadata accessor for WidgetColors.Day()
{
  return &type metadata for WidgetColors.Day;
}

ValueMetadata *type metadata accessor for WidgetPadding()
{
  return &type metadata for WidgetPadding;
}

uint64_t *sub_1000177D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000899F0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1000899F0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_100017930(uint64_t a1, uint64_t a2)
{
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1000899F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_1000899F0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

void *sub_100017A04(void *a1, void *a2, uint64_t a3)
{
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000899F0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1000899F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

void *sub_100017B0C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100017C24((uint64_t)a1);
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1000899F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_100017C24(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A4FF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100017C84(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000899F0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000899F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *sub_100017D94(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100017C24((uint64_t)a1);
    uint64_t v6 = sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000899F0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000899F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100017EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017EC8);
}

uint64_t sub_100017EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4B70);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_1000899F0();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100017FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100017FD8);
}

uint64_t sub_100017FD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000697C(&qword_1000A4B70);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_1000899F0();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_1000180E0()
{
  sub_1000181A8();
  if (v0 <= 0x3F)
  {
    sub_1000899F0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000181A8()
{
  if (!qword_1000A5070)
  {
    sub_1000899F0();
    unint64_t v0 = sub_1000896A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000A5070);
    }
  }
}

uint64_t getEnumTagSinglePayload for FaceType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FaceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001835CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FaceType()
{
  return &type metadata for FaceType;
}

unint64_t sub_100018398()
{
  unint64_t result = qword_1000A50A0;
  if (!qword_1000A50A0)
  {
    sub_10000B798(&qword_1000A4FF8);
    sub_10001845C(&qword_1000A50A8, &qword_1000A5008);
    sub_10001845C(&qword_1000A50B0, &qword_1000A5000);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A50A0);
  }
  return result;
}

uint64_t sub_10001845C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000184A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000697C(&qword_1000A4FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018508()
{
  if (!qword_1000A8AF0) {
    qword_1000A8AF0 = _sl_dlopen();
  }
  return qword_1000A8AF0;
}

uint64_t sub_1000185D8()
{
  uint64_t result = _sl_dlopen();
  qword_1000A8AF0 = result;
  return result;
}

uint64_t sub_100018650@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v1 = sub_10000697C(&qword_1000A50F0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A50F8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  uint64_t v37 = v6;
  __chkstk_darwin(v5);
  int v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A5100);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  uint64_t v39 = v10;
  __chkstk_darwin(v9);
  uint64_t v35 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D6F8(0, &qword_1000A5108);
  type metadata accessor for WorldClockSingleProvider();
  uint64_t v41 = sub_10000FED4();
  type metadata accessor for WorldClockWidgetSingle.WidgetView(0);
  sub_100018C3C(&qword_1000A5110, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetSingle.WidgetView);
  sub_100018C3C(&qword_1000A5118, (void (*)(uint64_t))type metadata accessor for WorldClockSingleProvider);
  sub_10008A2C0();
  sub_100089990();
  uint64_t v12 = sub_100089E20();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  uint64_t v17 = sub_10001845C(&qword_1000A5120, &qword_1000A50F0);
  sub_100089A90();
  sub_10000B7E0(v12, v14, v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v18 = sub_10008A280();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100098260;
  unint64_t v23 = v22 + v21;
  uint64_t v24 = *(void (**)(unint64_t, void, uint64_t))(v19 + 104);
  v24(v23, enum case for WidgetFamily.systemSmall(_:), v18);
  v24(v23 + v20, enum case for WidgetFamily.accessoryInline(_:), v18);
  uint64_t v41 = v1;
  uint64_t v42 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  id v27 = v35;
  uint64_t v26 = v36;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v28 = v26;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v26);
  sub_100089990();
  uint64_t v29 = sub_100089E20();
  uint64_t v31 = v30;
  LOBYTE(v8) = v32 & 1;
  uint64_t v41 = v28;
  uint64_t v42 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v33 = v38;
  sub_100089A60();
  sub_10000B7E0(v29, v31, (char)v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v27, v33);
}

uint64_t sub_100018C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D74C(a1, type metadata accessor for WorldClockWidgetSingle.WidgetView, a2);
}

uint64_t type metadata accessor for WorldClockWidgetSingle.WidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000A97A0);
}

uint64_t sub_100018C3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100018C84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001D880(a1, a2, type metadata accessor for WorldClockWidgetSingle.WidgetView, a3);
}

uint64_t sub_100018C9C()
{
  return sub_10001B89C((unsigned int *)&enum case for WidgetFamily.systemSmall(_:), (unsigned int *)&enum case for WidgetFamily.accessoryInline(_:));
}

uint64_t sub_100018CB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100022938(v1, a1, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
}

uint64_t sub_100018CE4(uint64_t a1)
{
  return sub_100018CEC(a1, v1);
}

uint64_t sub_100018CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorldClockEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018D50@<X0>(uint64_t a1@<X8>)
{
  return sub_100019D24((void (*)(void))type metadata accessor for WorldClockWidgetSingle.WidgetView, a1);
}

uint64_t sub_100018D68@<X0>(uint64_t a1@<X8>)
{
  return sub_100018D70(v1, a1);
}

uint64_t sub_100018D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v79 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A59C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v71 = (uint64_t *)((char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000697C(&qword_1000A4A60);
  __chkstk_darwin(v5 - 8);
  unint64_t v67 = (uint64_t *)((char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v76 = type metadata accessor for WorldClockWidgetViewSingle(0);
  __chkstk_darwin(v76);
  uint64_t v69 = (uint64_t)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000697C(&qword_1000A59E0);
  uint64_t v74 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v70 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v73 = (char *)&v65 - v10;
  uint64_t v80 = sub_10000697C(&qword_1000A5A10);
  __chkstk_darwin(v80);
  uint64_t v75 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000697C(&qword_1000A4B98);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for WorldClockEntry();
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for CityInlineComplication(0);
  __chkstk_darwin(v78);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_10000697C(&qword_1000A5A18);
  uint64_t v72 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  unint64_t v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v65 - v23;
  uint64_t v25 = sub_10008A280();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WorldClockWidgetSingle.WidgetView(0);
  sub_10000B9EC((uint64_t)v28);
  uint64_t v66 = v26;
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v26 + 88);
  uint64_t v68 = v25;
  int v30 = v29(v28, v25);
  LODWORD(v25) = enum case for WidgetFamily.accessoryInline(_:);
  sub_100022938(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  if (v30 == v25)
  {
    char v32 = v75;
    uint64_t v31 = v76;
    sub_10005BE54((uint64_t)v17, (uint64_t)v19);
    id v33 = [self widgetURL];
    if (v33)
    {
      id v34 = v33;
      sub_100089130();

      uint64_t v35 = sub_100089150();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v14, 0, 1, v35);
    }
    else
    {
      uint64_t v57 = sub_100089150();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v14, 1, 1, v57);
    }
    uint64_t v58 = sub_100018C3C(&qword_1000A58C8, (void (*)(uint64_t))type metadata accessor for CityInlineComplication);
    uint64_t v59 = v78;
    sub_100089E90();
    sub_10000F024((uint64_t)v14, &qword_1000A4B98);
    sub_100022BA8((uint64_t)v19, type metadata accessor for CityInlineComplication);
    uint64_t v60 = v72;
    uint64_t v61 = v81;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v24, v21, v81);
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v32, v24, v61);
    swift_storeEnumTagMultiPayload();
    uint64_t v82 = v59;
    uint64_t v83 = v58;
    swift_getOpaqueTypeConformance2();
    uint64_t v62 = type metadata accessor for ClockWidgetEnvironmentObject();
    uint64_t v63 = sub_100018C3C(&qword_1000A58D0, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewSingle);
    uint64_t v64 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    uint64_t v82 = v31;
    uint64_t v83 = v62;
    uint64_t v84 = v63;
    uint64_t v85 = v64;
    swift_getOpaqueTypeConformance2();
    sub_100089AB0();
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v24, v61);
  }
  else
  {
    uint64_t v36 = v67;
    uint64_t v37 = sub_100033AC4(v67);
    uint64_t v38 = sub_100071FF4(v37);
    char v40 = v39 & 1;
    uint64_t v41 = v71;
    uint64_t v42 = sub_100033C2C(v71);
    uint64_t v43 = sub_100033CE4(v42);
    uint64_t v45 = v69;
    sub_1000351A4((uint64_t)v17, (uint64_t)v36, v38, v40, (uint64_t)v41, v43, v44 & 1, v69);
    uint64_t v46 = type metadata accessor for ClockWidgetEnvironmentObject();
    char v47 = sub_100086AE0();
    sub_100086AE8(v47);
    uint64_t v48 = sub_100018C3C(&qword_1000A58D0, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewSingle);
    uint64_t v49 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    uint64_t v50 = v70;
    uint64_t v51 = v76;
    sub_100089ED0();
    swift_release();
    sub_100022BA8(v45, type metadata accessor for WorldClockWidgetViewSingle);
    unint64_t v52 = v73;
    uint64_t v53 = v74;
    uint64_t v54 = v77;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, v50, v77);
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v75, v52, v54);
    swift_storeEnumTagMultiPayload();
    uint64_t v55 = sub_100018C3C(&qword_1000A58C8, (void (*)(uint64_t))type metadata accessor for CityInlineComplication);
    uint64_t v82 = v78;
    uint64_t v83 = v55;
    swift_getOpaqueTypeConformance2();
    uint64_t v82 = v51;
    uint64_t v83 = v46;
    uint64_t v84 = v48;
    uint64_t v85 = v49;
    swift_getOpaqueTypeConformance2();
    sub_100089AB0();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v28, v68);
  }
}

uint64_t sub_1000196E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100027078(a1, a2, &qword_1000A4A60);
}

uint64_t sub_100019704@<X0>(uint64_t a1@<X8>)
{
  return sub_100018650(a1);
}

uint64_t sub_10001971C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v1 = sub_10000697C(&qword_1000A5128);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A5130);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  uint64_t v34 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A5138);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  uint64_t v36 = v10;
  __chkstk_darwin(v9);
  char v32 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D6F8(0, &qword_1000A5108);
  type metadata accessor for WorldClockSingleProvider();
  uint64_t v38 = sub_10000FED4();
  type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView(0);
  sub_100018C3C(&qword_1000A5140, (void (*)(uint64_t))type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView);
  sub_100018C3C(&qword_1000A5118, (void (*)(uint64_t))type metadata accessor for WorldClockSingleProvider);
  sub_10008A2C0();
  sub_100089990();
  uint64_t v12 = sub_100089E20();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  uint64_t v17 = sub_10001845C(&qword_1000A5148, &qword_1000A5128);
  sub_100089A90();
  sub_10000B7E0(v12, v14, v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v18 = sub_10008A280();
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100098400;
  (*(void (**)(unint64_t, void, uint64_t))(v19 + 104))(v21 + v20, enum case for WidgetFamily.systemSmall(_:), v18);
  uint64_t v38 = v1;
  uint64_t v39 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v24 = v32;
  uint64_t v23 = v33;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v25 = v23;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v23);
  sub_100089990();
  uint64_t v26 = sub_100089E20();
  uint64_t v28 = v27;
  LOBYTE(v8) = v29 & 1;
  uint64_t v38 = v25;
  uint64_t v39 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v30 = v35;
  sub_100089A60();
  sub_10000B7E0(v26, v28, (char)v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v24, v30);
}

uint64_t sub_100019CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D74C(a1, type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView, a2);
}

uint64_t type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000A97B0);
}

uint64_t sub_100019CE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001D880(a1, a2, type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView, a3);
}

uint64_t sub_100019D00()
{
  return sub_100021A04((unsigned int *)&enum case for WidgetFamily.systemSmall(_:));
}

uint64_t sub_100019D0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100019D24((void (*)(void))type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView, a1);
}

uint64_t sub_100019D24@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  return sub_10000B9EC(a2);
}

uint64_t sub_100019D64@<X0>(uint64_t a1@<X8>)
{
  return sub_10001AF24(v1, (void (*)(void, __n128))type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView, 3, a1);
}

uint64_t sub_100019D9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v1 = sub_10008A270();
  uint64_t v59 = *(void *)(v1 - 8);
  uint64_t v60 = v1;
  __chkstk_darwin(v1);
  uint64_t v58 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A5150);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000697C(&qword_1000A5158);
  uint64_t v50 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A5160);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  uint64_t v53 = v10;
  __chkstk_darwin(v9);
  char v47 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000697C(&qword_1000A5168);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  uint64_t v55 = v13;
  __chkstk_darwin(v12);
  uint64_t v49 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(&qword_1000A5170);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v56 = v15;
  uint64_t v57 = v16;
  __chkstk_darwin(v15);
  uint64_t v51 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D6F8(0, &qword_1000A5108);
  type metadata accessor for WorldClockSingleProvider();
  uint64_t v62 = sub_10000FED4();
  type metadata accessor for WorldClockSquareWidgetSingle.WidgetView(0);
  sub_100018C3C(&qword_1000A5178, (void (*)(uint64_t))type metadata accessor for WorldClockSquareWidgetSingle.WidgetView);
  sub_100018C3C(&qword_1000A5118, (void (*)(uint64_t))type metadata accessor for WorldClockSingleProvider);
  sub_10008A2C0();
  sub_100089990();
  uint64_t v18 = sub_100089E20();
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  uint64_t v23 = sub_10001845C(&qword_1000A5180, &qword_1000A5150);
  sub_100089A90();
  sub_10000B7E0(v18, v20, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v24 = sub_10008A280();
  uint64_t v25 = *(void *)(v24 - 8);
  unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100098400;
  (*(void (**)(unint64_t, void, uint64_t))(v25 + 104))(v27 + v26, enum case for WidgetFamily.systemSmall(_:), v24);
  uint64_t v62 = v3;
  uint64_t v63 = v23;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v30 = v47;
  uint64_t v29 = v48;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v31 = v29;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v8, v29);
  sub_100089990();
  uint64_t v32 = sub_100089E20();
  uint64_t v34 = v33;
  LOBYTE(v23) = v35 & 1;
  uint64_t v62 = v31;
  uint64_t v63 = OpaqueTypeConformance2;
  uint64_t v36 = swift_getOpaqueTypeConformance2();
  uint64_t v37 = v49;
  uint64_t v38 = v52;
  sub_100089A60();
  sub_10000B7E0(v32, v34, v23);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v38);
  uint64_t v39 = v58;
  uint64_t v40 = v59;
  uint64_t v41 = v60;
  (*(void (**)(char *, void, uint64_t))(v59 + 104))(v58, enum case for WidgetBackgroundStyle.blur(_:), v60);
  uint64_t v62 = v38;
  uint64_t v63 = v36;
  uint64_t v42 = swift_getOpaqueTypeConformance2();
  uint64_t v43 = v51;
  uint64_t v44 = v54;
  sub_100089AA0();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v37, v44);
  uint64_t v62 = v44;
  uint64_t v63 = v42;
  swift_getOpaqueTypeConformance2();
  uint64_t v45 = v56;
  sub_100089A80();
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v43, v45);
}

uint64_t sub_10001A5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D74C(a1, type metadata accessor for WorldClockSquareWidgetSingle.WidgetView, a2);
}

uint64_t type metadata accessor for WorldClockSquareWidgetSingle.WidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000A97C0);
}

uint64_t sub_10001A5F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001D880(a1, a2, type metadata accessor for WorldClockSquareWidgetSingle.WidgetView, a3);
}

uint64_t sub_10001A610@<X0>(uint64_t a1@<X8>)
{
  return sub_100019D24((void (*)(void))type metadata accessor for WorldClockSquareWidgetSingle.WidgetView, a1);
}

uint64_t sub_10001A628@<X0>(uint64_t a1@<X8>)
{
  return sub_10001AF24(v1, (void (*)(void, __n128))type metadata accessor for WorldClockSquareWidgetSingle.WidgetView, 4, a1);
}

uint64_t sub_10001A660@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v1 = sub_10008A270();
  uint64_t v59 = *(void *)(v1 - 8);
  uint64_t v60 = v1;
  __chkstk_darwin(v1);
  uint64_t v58 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A5188);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000697C(&qword_1000A5190);
  uint64_t v50 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A5198);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  uint64_t v53 = v10;
  __chkstk_darwin(v9);
  char v47 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000697C(&qword_1000A51A0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  uint64_t v55 = v13;
  __chkstk_darwin(v12);
  uint64_t v49 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(&qword_1000A51A8);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v56 = v15;
  uint64_t v57 = v16;
  __chkstk_darwin(v15);
  uint64_t v51 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D6F8(0, &qword_1000A5108);
  type metadata accessor for WorldClockSingleProvider();
  uint64_t v62 = sub_10000FED4();
  type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView(0);
  sub_100018C3C(&qword_1000A51B0, (void (*)(uint64_t))type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView);
  sub_100018C3C(&qword_1000A5118, (void (*)(uint64_t))type metadata accessor for WorldClockSingleProvider);
  sub_10008A2C0();
  sub_100089990();
  uint64_t v18 = sub_100089E20();
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  uint64_t v23 = sub_10001845C(&qword_1000A51B8, &qword_1000A5188);
  sub_100089A90();
  sub_10000B7E0(v18, v20, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v24 = sub_10008A280();
  uint64_t v25 = *(void *)(v24 - 8);
  unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100098400;
  (*(void (**)(unint64_t, void, uint64_t))(v25 + 104))(v27 + v26, enum case for WidgetFamily.systemSmall(_:), v24);
  uint64_t v62 = v3;
  uint64_t v63 = v23;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v30 = v47;
  uint64_t v29 = v48;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v31 = v29;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v8, v29);
  sub_100089990();
  uint64_t v32 = sub_100089E20();
  uint64_t v34 = v33;
  LOBYTE(v23) = v35 & 1;
  uint64_t v62 = v31;
  uint64_t v63 = OpaqueTypeConformance2;
  uint64_t v36 = swift_getOpaqueTypeConformance2();
  uint64_t v37 = v49;
  uint64_t v38 = v52;
  sub_100089A60();
  sub_10000B7E0(v32, v34, v23);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v38);
  uint64_t v39 = v58;
  uint64_t v40 = v59;
  uint64_t v41 = v60;
  (*(void (**)(char *, void, uint64_t))(v59 + 104))(v58, enum case for WidgetBackgroundStyle.blur(_:), v60);
  uint64_t v62 = v38;
  uint64_t v63 = v36;
  uint64_t v42 = swift_getOpaqueTypeConformance2();
  uint64_t v43 = v51;
  uint64_t v44 = v54;
  sub_100089AA0();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v37, v44);
  uint64_t v62 = v44;
  uint64_t v63 = v42;
  swift_getOpaqueTypeConformance2();
  uint64_t v45 = v56;
  sub_100089A80();
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v43, v45);
}

uint64_t sub_10001AE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D74C(a1, type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView, a2);
}

uint64_t type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000A97D0);
}

uint64_t sub_10001AEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001D880(a1, a2, type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView, a3);
}

uint64_t sub_10001AED8@<X0>(uint64_t a1@<X8>)
{
  return sub_100019D24((void (*)(void))type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView, a1);
}

uint64_t sub_10001AEF0@<X0>(uint64_t a1@<X8>)
{
  return sub_10001AF24(v1, (void (*)(void, __n128))type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView, 0, a1);
}

uint64_t sub_10001AF24@<X0>(uint64_t a1@<X0>, void (*a2)(void, __n128)@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v31 = a3;
  uint64_t v32 = a4;
  uint64_t v6 = sub_10000697C(&qword_1000A59C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t *)&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_10000697C(&qword_1000A4A60);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)&v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for WorldClockEntry();
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for WorldClockWidgetViewSingle(0);
  __chkstk_darwin(v15);
  uint64_t v17 = &v30[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_10008A280();
  uint64_t v19 = *(void *)(v18 - 8);
  __n128 v20 = __chkstk_darwin(v18);
  char v22 = &v30[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2(0, v20);
  sub_10000B9EC((uint64_t)v22);
  (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v22, v18);
  sub_100022938(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  uint64_t v23 = sub_100033AC4(v11);
  uint64_t v24 = sub_100071FF4(v23);
  LOBYTE(a2) = v25 & 1;
  uint64_t v26 = sub_100033C2C(v8);
  uint64_t v27 = sub_100033CE4(v26);
  sub_1000351A4((uint64_t)v14, (uint64_t)v11, v24, (char)a2, (uint64_t)v8, v27, v28 & 1, (uint64_t)v17);
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_100086AE8(v31);
  sub_100018C3C(&qword_1000A58D0, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewSingle);
  sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  sub_100089ED0();
  swift_release();
  return sub_100022BA8((uint64_t)v17, type metadata accessor for WorldClockWidgetViewSingle);
}

uint64_t sub_10001B278@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v1 = sub_10000697C(&qword_1000A51C0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A51C8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  uint64_t v37 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A51D0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  uint64_t v39 = v10;
  __chkstk_darwin(v9);
  char v35 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D6F8(0, &qword_1000A5108);
  type metadata accessor for WorldClockSingleProvider();
  uint64_t v41 = sub_10000FED4();
  type metadata accessor for CityWidgetDigital.WidgetView(0);
  sub_100018C3C(&qword_1000A51D8, (void (*)(uint64_t))type metadata accessor for CityWidgetDigital.WidgetView);
  sub_100018C3C(&qword_1000A5118, (void (*)(uint64_t))type metadata accessor for WorldClockSingleProvider);
  sub_10008A2C0();
  sub_100089990();
  uint64_t v12 = sub_100089E20();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  uint64_t v17 = sub_10001845C(&qword_1000A51E0, &qword_1000A51C0);
  sub_100089A90();
  sub_10000B7E0(v12, v14, v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v18 = sub_10008A280();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100098260;
  unint64_t v23 = v22 + v21;
  uint64_t v24 = *(void (**)(unint64_t, void, uint64_t))(v19 + 104);
  v24(v23, enum case for WidgetFamily.accessoryRectangular(_:), v18);
  v24(v23 + v20, enum case for WidgetFamily.accessoryCircular(_:), v18);
  uint64_t v41 = v1;
  uint64_t v42 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v27 = v35;
  uint64_t v26 = v36;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v28 = v26;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v26);
  sub_100089990();
  uint64_t v29 = sub_100089E20();
  uint64_t v31 = v30;
  LOBYTE(v8) = v32 & 1;
  uint64_t v41 = v28;
  uint64_t v42 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v33 = v38;
  sub_100089A60();
  sub_10000B7E0(v29, v31, (char)v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v27, v33);
}

uint64_t sub_10001B838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D74C(a1, type metadata accessor for CityWidgetDigital.WidgetView, a2);
}

uint64_t type metadata accessor for CityWidgetDigital.WidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000A97F0);
}

uint64_t sub_10001B870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001D880(a1, a2, type metadata accessor for CityWidgetDigital.WidgetView, a3);
}

uint64_t sub_10001B888()
{
  return sub_10001B89C((unsigned int *)&enum case for WidgetFamily.accessoryRectangular(_:), (unsigned int *)&enum case for WidgetFamily.accessoryCircular(_:));
}

uint64_t sub_10001B89C(unsigned int *a1, unsigned int *a2)
{
  sub_10000697C(&qword_1000A4A50);
  uint64_t v4 = sub_10008A280();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100098260;
  unint64_t v9 = v8 + v7;
  uint64_t v10 = *a1;
  uint64_t v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 104);
  v11(v9, v10, v4);
  v11(v9 + v6, *a2, v4);
  return v8;
}

uint64_t sub_10001B9A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100019D24((void (*)(void))type metadata accessor for CityWidgetDigital.WidgetView, a1);
}

uint64_t sub_10001B9B8@<X0>(uint64_t a1@<X8>)
{
  return sub_10001B9C0(v1, a1);
}

uint64_t sub_10001B9C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v145 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A59C0);
  __chkstk_darwin(v3 - 8);
  v132 = (uint64_t *)((char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000697C(&qword_1000A4A60);
  __chkstk_darwin(v5 - 8);
  v131 = (uint64_t *)((char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v120 = type metadata accessor for WorldClockWidgetViewSingle(0);
  __chkstk_darwin(v120);
  uint64_t v113 = (uint64_t)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_10000697C(&qword_1000A59E0);
  uint64_t v116 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  Swift::String v114 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  Swift::String v115 = (char *)&v113 - v10;
  uint64_t v117 = sub_10000697C(&qword_1000A59E8);
  __chkstk_darwin(v117);
  uint64_t v119 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000697C(&qword_1000A5940);
  __chkstk_darwin(v144);
  uint64_t v121 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for CityInlineComplication(0);
  __chkstk_darwin(v118);
  v129 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for WorldClockEntry();
  __chkstk_darwin(v14 - 8);
  uint64_t v146 = (uint64_t)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = type metadata accessor for ClockCircularDigitalComplication(0);
  __chkstk_darwin(v133);
  uint64_t v130 = (uint64_t)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_10000697C(&qword_1000A59F0);
  v127 = *(char **)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v124 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000697C(&qword_1000A5928);
  __chkstk_darwin(v136);
  v134 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v126 = (char *)&v113 - v20;
  uint64_t v141 = sub_10000697C(&qword_1000A59F8);
  __chkstk_darwin(v141);
  uint64_t v142 = (uint64_t)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_10000697C(&qword_1000A5A00);
  __chkstk_darwin(v138);
  uint64_t v140 = (uint64_t)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000697C(&qword_1000A5910);
  __chkstk_darwin(v143);
  v135 = (char *)&v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000697C(&qword_1000A4B98);
  __chkstk_darwin(v24 - 8);
  uint64_t v125 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v113 - v27;
  uint64_t v29 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)&v113 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = type metadata accessor for ClockRectangularComplication(0);
  __chkstk_darwin(v137);
  uint64_t v33 = (char *)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000697C(&qword_1000A5A08);
  uint64_t v123 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  char v35 = (char *)&v113 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v113 - v37;
  uint64_t v39 = sub_10008A280();
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v113 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CityWidgetDigital.WidgetView(0);
  uint64_t v43 = a1;
  sub_10000B9EC((uint64_t)v42);
  int v44 = (*(uint64_t (**)(char *, uint64_t))(v40 + 88))(v42, v39);
  if (v44 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    uint64_t v45 = (uint64_t)v125;
    uint64_t v46 = v127;
    uint64_t v47 = v128;
    uint64_t v48 = (uint64_t)v126;
    uint64_t v49 = v146;
    sub_100022938(a1, v146, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
    sub_100028E98(&v150);
    uint64_t v148 = &type metadata for AnalogueCircularDimensions;
    v149 = &off_1000A2848;
    uint64_t v50 = (_OWORD *)swift_allocObject();
    *(void *)&long long v147 = v50;
    long long v51 = v151;
    v50[1] = v150;
    v50[2] = v51;
    long long v52 = v153;
    void v50[3] = v152;
    v50[4] = v52;
    char v53 = sub_100005184();
    char v54 = sub_100005184();
    char v55 = sub_100005184();
    char v56 = v54 & 1;
    uint64_t v57 = v130;
    sub_10005B618(v49, &v147, v53 & 1, v56, v55 & 1, v130);
    id v58 = [self widgetURL];
    if (v58)
    {
      uint64_t v59 = v58;
      sub_100089130();

      uint64_t v60 = sub_100089150();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v45, 0, 1, v60);
    }
    else
    {
      uint64_t v77 = sub_100089150();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v45, 1, 1, v77);
    }
    uint64_t v78 = v142;
    uint64_t v79 = (uint64_t)v135;
    uint64_t v80 = v47;
    uint64_t v81 = v124;
    sub_100018C3C(&qword_1000A5930, (void (*)(uint64_t))type metadata accessor for ClockCircularDigitalComplication);
    sub_100089E90();
    sub_10000F024(v45, &qword_1000A4B98);
    sub_100022BA8(v57, type metadata accessor for ClockCircularDigitalComplication);
    sub_10008A1B0();
    uint64_t v82 = (uint64_t)v134;
    __n128 v83 = sub_10001CD3C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v134, 0.0, 1, INFINITY, 0);
    (*((void (**)(char *, uint64_t, __n128))v46 + 1))(v81, v80, v83);
    sub_100027078(v82, v48, &qword_1000A5928);
    sub_10000F148(v48, v140, &qword_1000A5928);
    swift_storeEnumTagMultiPayload();
    uint64_t v84 = sub_100018C3C(&qword_1000A5918, (void (*)(uint64_t))type metadata accessor for ClockRectangularComplication);
    *(void *)&long long v147 = v137;
    *((void *)&v147 + 1) = v84;
    swift_getOpaqueTypeConformance2();
    sub_1000261D8();
    sub_100089AB0();
    sub_10000F148(v79, v78, &qword_1000A5910);
    swift_storeEnumTagMultiPayload();
    sub_1000260FC();
    sub_1000262B4();
    sub_100089AB0();
    sub_10000F024(v79, &qword_1000A5910);
    return sub_10000F024(v48, &qword_1000A5928);
  }
  else
  {
    int v61 = v44;
    uint64_t v133 = (uint64_t)v35;
    v127 = v42;
    uint64_t v128 = v40;
    v134 = v38;
    uint64_t v130 = v39;
    uint64_t v62 = v146;
    uint64_t v63 = (uint64_t)v129;
    uint64_t v64 = v131;
    uint64_t v65 = v43;
    uint64_t v66 = v132;
    if (v61 == enum case for WidgetFamily.accessoryRectangular(_:))
    {
      sub_100010E90((uint64_t)v31);
      sub_100036684((uint64_t)v31, (uint64_t)v33);
      id v67 = [self widgetURL];
      if (v67)
      {
        uint64_t v68 = v67;
        uint64_t v69 = (uint64_t)v28;
        sub_100089130();

        uint64_t v70 = sub_100089150();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v28, 0, 1, v70);
      }
      else
      {
        uint64_t v104 = sub_100089150();
        uint64_t v69 = (uint64_t)v28;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v28, 1, 1, v104);
      }
      uint64_t v105 = v142;
      uint64_t v106 = v123;
      uint64_t v107 = v133;
      uint64_t v108 = sub_100018C3C(&qword_1000A5918, (void (*)(uint64_t))type metadata accessor for ClockRectangularComplication);
      uint64_t v109 = v137;
      sub_100089E90();
      sub_10000F024(v69, &qword_1000A4B98);
      sub_100022BA8((uint64_t)v33, type metadata accessor for ClockRectangularComplication);
      uint64_t v110 = (uint64_t)v134;
      uint64_t v111 = v139;
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 32))(v134, v107, v139);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16))(v140, v110, v111);
      swift_storeEnumTagMultiPayload();
      *(void *)&long long v150 = v109;
      *((void *)&v150 + 1) = v108;
      swift_getOpaqueTypeConformance2();
      sub_1000261D8();
      uint64_t v112 = (uint64_t)v135;
      sub_100089AB0();
      sub_10000F148(v112, v105, &qword_1000A5910);
      swift_storeEnumTagMultiPayload();
      sub_1000260FC();
      sub_1000262B4();
      sub_100089AB0();
      sub_10000F024(v112, &qword_1000A5910);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 8))(v110, v111);
    }
    else
    {
      int v71 = enum case for WidgetFamily.accessoryInline(_:);
      sub_100022938(v65, v146, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
      if (v61 == v71)
      {
        sub_10005BE54(v62, v63);
        sub_100022938(v63, v119, type metadata accessor for CityInlineComplication);
        swift_storeEnumTagMultiPayload();
        sub_100018C3C(&qword_1000A58C8, (void (*)(uint64_t))type metadata accessor for CityInlineComplication);
        uint64_t v72 = type metadata accessor for ClockWidgetEnvironmentObject();
        uint64_t v73 = sub_100018C3C(&qword_1000A58D0, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewSingle);
        uint64_t v74 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
        *(void *)&long long v150 = v120;
        *((void *)&v150 + 1) = v72;
        *(void *)&long long v151 = v73;
        *((void *)&v151 + 1) = v74;
        swift_getOpaqueTypeConformance2();
        uint64_t v75 = (uint64_t)v121;
        sub_100089AB0();
        sub_10000F148(v75, v142, &qword_1000A5940);
        swift_storeEnumTagMultiPayload();
        sub_1000260FC();
        sub_1000262B4();
        sub_100089AB0();
        sub_10000F024(v75, &qword_1000A5940);
        return sub_100022BA8(v63, type metadata accessor for CityInlineComplication);
      }
      else
      {
        uint64_t v85 = sub_100033AC4(v64);
        uint64_t v86 = sub_100071FF4(v85);
        char v88 = v87 & 1;
        uint64_t v89 = (uint64_t)v66;
        uint64_t v90 = sub_100033C2C(v66);
        uint64_t v91 = sub_100033CE4(v90);
        uint64_t v93 = v113;
        sub_1000351A4(v62, (uint64_t)v64, v86, v88, v89, v91, v92 & 1, v113);
        uint64_t v94 = type metadata accessor for ClockWidgetEnvironmentObject();
        char v95 = sub_100086AE0();
        sub_100086AE8(v95);
        uint64_t v96 = sub_100018C3C(&qword_1000A58D0, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewSingle);
        uint64_t v97 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
        uint64_t v98 = v114;
        uint64_t v99 = v120;
        sub_100089ED0();
        swift_release();
        sub_100022BA8(v93, type metadata accessor for WorldClockWidgetViewSingle);
        uint64_t v100 = v116;
        uint64_t v101 = v115;
        uint64_t v102 = v122;
        (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v115, v98, v122);
        (*(void (**)(uint64_t, char *, uint64_t))(v100 + 16))(v119, v101, v102);
        swift_storeEnumTagMultiPayload();
        sub_100018C3C(&qword_1000A58C8, (void (*)(uint64_t))type metadata accessor for CityInlineComplication);
        *(void *)&long long v150 = v99;
        *((void *)&v150 + 1) = v94;
        *(void *)&long long v151 = v96;
        *((void *)&v151 + 1) = v97;
        swift_getOpaqueTypeConformance2();
        uint64_t v103 = (uint64_t)v121;
        sub_100089AB0();
        sub_10000F148(v103, v142, &qword_1000A5940);
        swift_storeEnumTagMultiPayload();
        sub_1000260FC();
        sub_1000262B4();
        sub_100089AB0();
        sub_10000F024(v103, &qword_1000A5940);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v102);
        return (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v127, v130);
      }
    }
  }
}

__n128 sub_10001CD3C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_10008A560();
    uint64_t v23 = (void *)sub_100089B70();
    sub_100089630();
  }
  sub_1000897B0();
  uint64_t v24 = sub_10000697C(&qword_1000A59F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a9, v13, v24);
  uint64_t v25 = (_OWORD *)(a9 + *(int *)(sub_10000697C(&qword_1000A5928) + 36));
  v25[4] = v31;
  v25[5] = v32;
  v25[6] = v33;
  *uint64_t v25 = v27;
  v25[1] = v28;
  __n128 result = v30;
  v25[2] = v29;
  v25[3] = v30;
  return result;
}

__n128 sub_10001CF28@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_10008A560();
    uint64_t v23 = (void *)sub_100089B70();
    sub_100089630();
  }
  sub_1000897B0();
  sub_100022938(v13, a9, type metadata accessor for ClockCircularAnalogueComplication);
  uint64_t v24 = (_OWORD *)(a9 + *(int *)(sub_10000697C(&qword_1000A5358) + 36));
  v24[4] = v30;
  v24[5] = v31;
  v24[6] = v32;
  *uint64_t v24 = v26;
  v24[1] = v27;
  __n128 result = v29;
  v24[2] = v28;
  v24[3] = v29;
  return result;
}

uint64_t sub_10001D0F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001B278(a1);
}

uint64_t sub_10001D10C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v1 = sub_10000697C(&qword_1000A51E8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A51F0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  uint64_t v37 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A51F8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  uint64_t v39 = v10;
  __chkstk_darwin(v9);
  char v35 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D6F8(0, &qword_1000A5200);
  type metadata accessor for WorldClockMultiProvider();
  uint64_t v41 = sub_10000FED4();
  type metadata accessor for WorldClockWidgetMulti.WidgetView(0);
  sub_100018C3C(&qword_1000A5208, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetMulti.WidgetView);
  sub_100018C3C(&qword_1000A5210, (void (*)(uint64_t))type metadata accessor for WorldClockMultiProvider);
  sub_10008A2C0();
  sub_100089990();
  uint64_t v12 = sub_100089E20();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  uint64_t v17 = sub_10001845C(&qword_1000A5218, &qword_1000A51E8);
  sub_100089A90();
  sub_10000B7E0(v12, v14, v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v18 = sub_10008A280();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100097E50;
  unint64_t v23 = v22 + v21;
  uint64_t v24 = *(void (**)(unint64_t, void, uint64_t))(v19 + 104);
  v24(v23, enum case for WidgetFamily.systemSmall(_:), v18);
  v24(v23 + v20, enum case for WidgetFamily.systemMedium(_:), v18);
  v24(v23 + 2 * v20, enum case for WidgetFamily.accessoryRectangular(_:), v18);
  uint64_t v41 = v1;
  uint64_t v42 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  long long v27 = v35;
  uint64_t v26 = v36;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v28 = v26;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v26);
  sub_100089990();
  uint64_t v29 = sub_100089E20();
  uint64_t v31 = v30;
  LOBYTE(v8) = v32 & 1;
  uint64_t v41 = v28;
  uint64_t v42 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v33 = v38;
  sub_100089A60();
  sub_10000B7E0(v29, v31, (char)v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v27, v33);
}

uint64_t sub_10001D6F8(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001D734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D74C(a1, type metadata accessor for WorldClockWidgetMulti.WidgetView, a2);
}

uint64_t sub_10001D74C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for WorldClockEntry();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022938(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(a3 + *(int *)(a2(0) + 20)) = KeyPath;
  sub_10000697C(&qword_1000A4A58);
  swift_storeEnumTagMultiPayload();
  return sub_100022474((uint64_t)v8, a3, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
}

uint64_t type metadata accessor for WorldClockWidgetMulti.WidgetView(uint64_t a1)
{
  return sub_100022C28(a1, qword_1000A9810);
}

uint64_t sub_10001D868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001D880(a1, a2, type metadata accessor for WorldClockWidgetMulti.WidgetView, a3);
}

uint64_t sub_10001D880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  sub_100022474(a1, a4, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  uint64_t v7 = a3(0);
  return sub_100027078(a2, a4 + *(int *)(v7 + 20), &qword_1000A4A60);
}

uint64_t sub_10001D8F0()
{
  sub_10000697C(&qword_1000A4A50);
  uint64_t v0 = sub_10008A280();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100097E50;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, enum case for WidgetFamily.systemSmall(_:), v0);
  v6(v5 + v2, enum case for WidgetFamily.systemMedium(_:), v0);
  v6(v5 + 2 * v2, enum case for WidgetFamily.accessoryRectangular(_:), v0);
  return v4;
}

uint64_t sub_10001DA24@<X0>(uint64_t a1@<X8>)
{
  return sub_100019D24((void (*)(void))type metadata accessor for WorldClockWidgetMulti.WidgetView, a1);
}

uint64_t sub_10001DA3C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001DA44(v1, a1);
}

uint64_t sub_10001DA44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A59C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v64 = (uint64_t *)((char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000697C(&qword_1000A4A60);
  __chkstk_darwin(v5 - 8);
  uint64_t v62 = (uint64_t *)((char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v70 = type metadata accessor for WorldClockWidgetViewMulti(0);
  __chkstk_darwin(v70);
  uint64_t v65 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000697C(&qword_1000A59C8);
  uint64_t v68 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v63 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v67 = (char *)&v61 - v10;
  uint64_t v74 = sub_10000697C(&qword_1000A59D0);
  __chkstk_darwin(v74);
  uint64_t v69 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000697C(&qword_1000A4B98);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for WorldClockEntry();
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for WorldClockRectangularSummary(0);
  __chkstk_darwin(v72);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000697C(&qword_1000A59D8);
  uint64_t v66 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  unint64_t v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v61 - v23;
  uint64_t v25 = sub_10008A280();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WorldClockWidgetMulti.WidgetView(0);
  sub_10000B9EC((uint64_t)v28);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v26 + 88);
  uint64_t v61 = v25;
  int v30 = v29(v28, v25);
  LODWORD(v25) = enum case for WidgetFamily.accessoryRectangular(_:);
  sub_100022938(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  if (v30 == v25)
  {
    char v32 = v69;
    uint64_t v31 = v70;
    sub_100058860((uint64_t)v17, (uint64_t)v19);
    id v33 = [self widgetURL];
    if (v33)
    {
      uint64_t v34 = v33;
      sub_100089130();

      uint64_t v35 = sub_100089150();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v14, 0, 1, v35);
    }
    else
    {
      uint64_t v53 = sub_100089150();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v14, 1, 1, v53);
    }
    uint64_t v54 = sub_100018C3C(&qword_1000A5968, (void (*)(uint64_t))type metadata accessor for WorldClockRectangularSummary);
    uint64_t v55 = v72;
    sub_100089E90();
    sub_10000F024((uint64_t)v14, &qword_1000A4B98);
    sub_100022BA8((uint64_t)v19, type metadata accessor for WorldClockRectangularSummary);
    uint64_t v56 = v66;
    uint64_t v57 = v75;
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v24, v21, v75);
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v32, v24, v57);
    swift_storeEnumTagMultiPayload();
    uint64_t v76 = v55;
    uint64_t v77 = v54;
    swift_getOpaqueTypeConformance2();
    uint64_t v58 = type metadata accessor for ClockWidgetEnvironmentObject();
    uint64_t v59 = sub_100018C3C(&qword_1000A5970, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewMulti);
    uint64_t v60 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    uint64_t v76 = v31;
    uint64_t v77 = v58;
    uint64_t v78 = v59;
    uint64_t v79 = v60;
    swift_getOpaqueTypeConformance2();
    sub_100089AB0();
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v24, v57);
  }
  else
  {
    uint64_t v36 = v62;
    uint64_t v37 = sub_100033AC4(v62);
    uint64_t v38 = sub_100071FF4(v37);
    char v40 = v39 & 1;
    uint64_t v41 = v64;
    sub_100033C2C(v64);
    uint64_t v42 = v65;
    sub_100037B6C((uint64_t)v17, (uint64_t)v36, v38, v40, (uint64_t)v41, v65);
    uint64_t v43 = type metadata accessor for ClockWidgetEnvironmentObject();
    char v44 = sub_100086AE0();
    sub_100086AE8(v44);
    uint64_t v66 = sub_100018C3C(&qword_1000A5970, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewMulti);
    uint64_t v45 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    uint64_t v46 = v63;
    uint64_t v47 = v70;
    sub_100089ED0();
    swift_release();
    sub_100022BA8(v42, type metadata accessor for WorldClockWidgetViewMulti);
    uint64_t v48 = v67;
    uint64_t v49 = v68;
    uint64_t v50 = v71;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v46, v71);
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v69, v48, v50);
    swift_storeEnumTagMultiPayload();
    uint64_t v51 = sub_100018C3C(&qword_1000A5968, (void (*)(uint64_t))type metadata accessor for WorldClockRectangularSummary);
    uint64_t v76 = v72;
    uint64_t v77 = v51;
    swift_getOpaqueTypeConformance2();
    uint64_t v76 = v47;
    uint64_t v77 = v43;
    uint64_t v78 = v66;
    uint64_t v79 = v45;
    swift_getOpaqueTypeConformance2();
    sub_100089AB0();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v61);
  }
}

uint64_t sub_10001E3AC@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4A58);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10001E404@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D10C(a1);
}

uint64_t sub_10001E41C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v1 = sub_10008A270();
  uint64_t v64 = *(void *)(v1 - 8);
  uint64_t v65 = v1;
  __chkstk_darwin(v1);
  uint64_t v63 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A5220);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000697C(&qword_1000A5228);
  uint64_t v55 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A5230);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  uint64_t v58 = v10;
  __chkstk_darwin(v9);
  long long v52 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000697C(&qword_1000A5238);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  uint64_t v60 = v13;
  __chkstk_darwin(v12);
  uint64_t v54 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(&qword_1000A5240);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v61 = v15;
  uint64_t v62 = v16;
  __chkstk_darwin(v15);
  uint64_t v56 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DateTimeProvider();
  uint64_t v71 = sub_10000FED4();
  sub_10000697C(&qword_1000A5248);
  uint64_t v18 = type metadata accessor for DateTimeWidgetView(255);
  uint64_t v19 = type metadata accessor for ClockWidgetEnvironmentObject();
  uint64_t v20 = sub_100018C3C(&qword_1000A5250, (void (*)(uint64_t))type metadata accessor for DateTimeWidgetView);
  uint64_t v21 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  uint64_t v67 = v18;
  uint64_t v68 = v19;
  uint64_t v69 = v20;
  uint64_t v70 = v21;
  swift_getOpaqueTypeConformance2();
  sub_100018C3C(&qword_1000A5260, (void (*)(uint64_t))type metadata accessor for DateTimeProvider);
  sub_10008A2D0();
  sub_100089990();
  uint64_t v22 = sub_100089E20();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  uint64_t v27 = sub_10001845C(&qword_1000A5268, &qword_1000A5220);
  sub_100089A90();
  sub_10000B7E0(v22, v24, v26);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v28 = sub_10008A280();
  uint64_t v29 = *(void *)(v28 - 8);
  unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_100098400;
  (*(void (**)(unint64_t, void, uint64_t))(v29 + 104))(v31 + v30, enum case for WidgetFamily.systemSmall(_:), v28);
  uint64_t v67 = v3;
  uint64_t v68 = v27;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  id v33 = v52;
  uint64_t v34 = v53;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v34);
  sub_100089990();
  uint64_t v36 = sub_100089E20();
  uint64_t v38 = v37;
  LOBYTE(v27) = v39 & 1;
  uint64_t v67 = v35;
  uint64_t v68 = OpaqueTypeConformance2;
  uint64_t v40 = swift_getOpaqueTypeConformance2();
  uint64_t v41 = v54;
  uint64_t v42 = v57;
  sub_100089A60();
  sub_10000B7E0(v36, v38, v27);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v42);
  uint64_t v43 = v63;
  uint64_t v44 = v64;
  uint64_t v45 = v65;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, enum case for WidgetBackgroundStyle.blur(_:), v65);
  uint64_t v67 = v42;
  uint64_t v68 = v40;
  uint64_t v46 = swift_getOpaqueTypeConformance2();
  uint64_t v47 = v56;
  uint64_t v48 = v59;
  sub_100089AA0();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v45);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v48);
  uint64_t v67 = v48;
  uint64_t v68 = v46;
  swift_getOpaqueTypeConformance2();
  uint64_t v49 = v61;
  sub_100089A80();
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v47, v49);
}

uint64_t sub_10001ECA4(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A59C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for DateTimeWidgetView(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateTimeEntry();
  LOBYTE(a1) = *(unsigned char *)(a1 + *(int *)(v8 + 24));
  uint64_t v9 = sub_100071FF4(v8);
  char v11 = v10 & 1;
  sub_100033C2C(v4);
  sub_100053F68(a1, v9, v11, (uint64_t)v4, (uint64_t)v7);
  type metadata accessor for ClockWidgetEnvironmentObject();
  char v12 = sub_100086AE0();
  sub_100086AE8(v12);
  sub_100018C3C(&qword_1000A5250, (void (*)(uint64_t))type metadata accessor for DateTimeWidgetView);
  sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  sub_100089ED0();
  swift_release();
  return sub_100022BA8((uint64_t)v7, type metadata accessor for DateTimeWidgetView);
}

uint64_t sub_10001EE80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v1 = sub_10008A270();
  uint64_t v64 = *(void *)(v1 - 8);
  uint64_t v65 = v1;
  __chkstk_darwin(v1);
  uint64_t v63 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A5270);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000697C(&qword_1000A5278);
  uint64_t v55 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A5280);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  uint64_t v58 = v10;
  __chkstk_darwin(v9);
  long long v52 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000697C(&qword_1000A5288);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  uint64_t v60 = v13;
  __chkstk_darwin(v12);
  uint64_t v54 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(&qword_1000A5290);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v61 = v15;
  uint64_t v62 = v16;
  __chkstk_darwin(v15);
  uint64_t v56 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DateTimeProvider();
  uint64_t v71 = sub_10000FED4();
  sub_10000697C(&qword_1000A5298);
  uint64_t v18 = type metadata accessor for NonNumericWidgetView(255);
  uint64_t v19 = type metadata accessor for ClockWidgetEnvironmentObject();
  uint64_t v20 = sub_100018C3C(&qword_1000A52A0, (void (*)(uint64_t))type metadata accessor for NonNumericWidgetView);
  uint64_t v21 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  uint64_t v67 = v18;
  uint64_t v68 = v19;
  uint64_t v69 = v20;
  uint64_t v70 = v21;
  swift_getOpaqueTypeConformance2();
  sub_100018C3C(&qword_1000A5260, (void (*)(uint64_t))type metadata accessor for DateTimeProvider);
  sub_10008A2D0();
  sub_100089990();
  uint64_t v22 = sub_100089E20();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  uint64_t v27 = sub_10001845C(&qword_1000A52A8, &qword_1000A5270);
  sub_100089A90();
  sub_10000B7E0(v22, v24, v26);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v28 = sub_10008A280();
  uint64_t v29 = *(void *)(v28 - 8);
  unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_100098400;
  (*(void (**)(unint64_t, void, uint64_t))(v29 + 104))(v31 + v30, enum case for WidgetFamily.systemSmall(_:), v28);
  uint64_t v67 = v3;
  uint64_t v68 = v27;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  id v33 = v52;
  uint64_t v34 = v53;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v34);
  sub_100089990();
  uint64_t v36 = sub_100089E20();
  uint64_t v38 = v37;
  LOBYTE(v27) = v39 & 1;
  uint64_t v67 = v35;
  uint64_t v68 = OpaqueTypeConformance2;
  uint64_t v40 = swift_getOpaqueTypeConformance2();
  uint64_t v41 = v54;
  uint64_t v42 = v57;
  sub_100089A60();
  sub_10000B7E0(v36, v38, v27);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v42);
  uint64_t v43 = v63;
  uint64_t v44 = v64;
  uint64_t v45 = v65;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, enum case for WidgetBackgroundStyle.blur(_:), v65);
  uint64_t v67 = v42;
  uint64_t v68 = v40;
  uint64_t v46 = swift_getOpaqueTypeConformance2();
  uint64_t v47 = v56;
  uint64_t v48 = v59;
  sub_100089AA0();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v45);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v48);
  uint64_t v67 = v48;
  uint64_t v68 = v46;
  swift_getOpaqueTypeConformance2();
  uint64_t v49 = v61;
  sub_100089A80();
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v47, v49);
}

uint64_t sub_10001F708(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A59C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for NonNumericWidgetView(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateTimeEntry();
  LOBYTE(a1) = *(unsigned char *)(a1 + *(int *)(v8 + 24));
  uint64_t v9 = sub_100071FF4(v8);
  char v11 = v10 & 1;
  sub_100033C2C(v4);
  sub_100054DC0(a1, v9, v11, (uint64_t)v4, (uint64_t)v7);
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_100086AE8(3);
  sub_100018C3C(&qword_1000A52A0, (void (*)(uint64_t))type metadata accessor for NonNumericWidgetView);
  sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  sub_100089ED0();
  swift_release();
  return sub_100022BA8((uint64_t)v7, type metadata accessor for NonNumericWidgetView);
}

uint64_t sub_10001F8E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v1 = sub_10008A270();
  uint64_t v64 = *(void *)(v1 - 8);
  uint64_t v65 = v1;
  __chkstk_darwin(v1);
  uint64_t v63 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A52B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000697C(&qword_1000A52B8);
  uint64_t v55 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A52C0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  uint64_t v58 = v10;
  __chkstk_darwin(v9);
  long long v52 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000697C(&qword_1000A52C8);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  uint64_t v60 = v13;
  __chkstk_darwin(v12);
  uint64_t v54 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(&qword_1000A52D0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v61 = v15;
  uint64_t v62 = v16;
  __chkstk_darwin(v15);
  uint64_t v56 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DateTimeProvider();
  uint64_t v71 = sub_10000FED4();
  sub_10000697C(&qword_1000A52D8);
  uint64_t v18 = type metadata accessor for SquareWidgetView(255);
  uint64_t v19 = type metadata accessor for ClockWidgetEnvironmentObject();
  uint64_t v20 = sub_100018C3C(&qword_1000A52E0, (void (*)(uint64_t))type metadata accessor for SquareWidgetView);
  uint64_t v21 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  uint64_t v67 = v18;
  uint64_t v68 = v19;
  uint64_t v69 = v20;
  uint64_t v70 = v21;
  swift_getOpaqueTypeConformance2();
  sub_100018C3C(&qword_1000A5260, (void (*)(uint64_t))type metadata accessor for DateTimeProvider);
  sub_10008A2D0();
  sub_100089990();
  uint64_t v22 = sub_100089E20();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  uint64_t v27 = sub_10001845C(&qword_1000A52E8, &qword_1000A52B0);
  sub_100089A90();
  sub_10000B7E0(v22, v24, v26);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v28 = sub_10008A280();
  uint64_t v29 = *(void *)(v28 - 8);
  unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_100098400;
  (*(void (**)(unint64_t, void, uint64_t))(v29 + 104))(v31 + v30, enum case for WidgetFamily.systemSmall(_:), v28);
  uint64_t v67 = v3;
  uint64_t v68 = v27;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  id v33 = v52;
  uint64_t v34 = v53;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v34);
  sub_100089990();
  uint64_t v36 = sub_100089E20();
  uint64_t v38 = v37;
  LOBYTE(v27) = v39 & 1;
  uint64_t v67 = v35;
  uint64_t v68 = OpaqueTypeConformance2;
  uint64_t v40 = swift_getOpaqueTypeConformance2();
  uint64_t v41 = v54;
  uint64_t v42 = v57;
  sub_100089A60();
  sub_10000B7E0(v36, v38, v27);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v42);
  uint64_t v43 = v63;
  uint64_t v44 = v64;
  uint64_t v45 = v65;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, enum case for WidgetBackgroundStyle.blur(_:), v65);
  uint64_t v67 = v42;
  uint64_t v68 = v40;
  uint64_t v46 = swift_getOpaqueTypeConformance2();
  uint64_t v47 = v56;
  uint64_t v48 = v59;
  sub_100089AA0();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v45);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v48);
  uint64_t v67 = v48;
  uint64_t v68 = v46;
  swift_getOpaqueTypeConformance2();
  uint64_t v49 = v61;
  sub_100089A80();
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v47, v49);
}

uint64_t sub_100020170(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A59C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for SquareWidgetView(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateTimeEntry();
  LOBYTE(a1) = *(unsigned char *)(a1 + *(int *)(v8 + 24));
  uint64_t v9 = sub_100071FF4(v8);
  char v11 = v10 & 1;
  sub_100033C2C(v4);
  sub_100055F4C(a1, v9, v11, (uint64_t)v4, (uint64_t)v7);
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_100086AE8(4);
  sub_100018C3C(&qword_1000A52E0, (void (*)(uint64_t))type metadata accessor for SquareWidgetView);
  sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  sub_100089ED0();
  swift_release();
  return sub_100022BA8((uint64_t)v7, type metadata accessor for SquareWidgetView);
}

uint64_t sub_10002034C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v1 = sub_10008A270();
  uint64_t v64 = *(void *)(v1 - 8);
  uint64_t v65 = v1;
  __chkstk_darwin(v1);
  uint64_t v63 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A52F0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000697C(&qword_1000A52F8);
  uint64_t v55 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A5300);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  uint64_t v58 = v10;
  __chkstk_darwin(v9);
  long long v52 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000697C(&qword_1000A5308);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  uint64_t v60 = v13;
  __chkstk_darwin(v12);
  uint64_t v54 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(&qword_1000A5310);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v61 = v15;
  uint64_t v62 = v16;
  __chkstk_darwin(v15);
  uint64_t v56 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DateTimeProvider();
  uint64_t v71 = sub_10000FED4();
  sub_10000697C(&qword_1000A5318);
  uint64_t v18 = type metadata accessor for DigitalClockWidgetView(255);
  uint64_t v19 = type metadata accessor for ClockWidgetEnvironmentObject();
  uint64_t v20 = sub_100018C3C(&qword_1000A5320, (void (*)(uint64_t))type metadata accessor for DigitalClockWidgetView);
  uint64_t v21 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  uint64_t v67 = v18;
  uint64_t v68 = v19;
  uint64_t v69 = v20;
  uint64_t v70 = v21;
  swift_getOpaqueTypeConformance2();
  sub_100018C3C(&qword_1000A5260, (void (*)(uint64_t))type metadata accessor for DateTimeProvider);
  sub_10008A2D0();
  sub_100089990();
  uint64_t v22 = sub_100089E20();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  uint64_t v27 = sub_10001845C(&qword_1000A5328, &qword_1000A52F0);
  sub_100089A90();
  sub_10000B7E0(v22, v24, v26);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v28 = sub_10008A280();
  uint64_t v29 = *(void *)(v28 - 8);
  unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_100098400;
  (*(void (**)(unint64_t, void, uint64_t))(v29 + 104))(v31 + v30, enum case for WidgetFamily.systemSmall(_:), v28);
  uint64_t v67 = v3;
  uint64_t v68 = v27;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  id v33 = v52;
  uint64_t v34 = v53;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v34);
  sub_100089990();
  uint64_t v36 = sub_100089E20();
  uint64_t v38 = v37;
  LOBYTE(v27) = v39 & 1;
  uint64_t v67 = v35;
  uint64_t v68 = OpaqueTypeConformance2;
  uint64_t v40 = swift_getOpaqueTypeConformance2();
  uint64_t v41 = v54;
  uint64_t v42 = v57;
  sub_100089A60();
  sub_10000B7E0(v36, v38, v27);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v42);
  uint64_t v43 = v63;
  uint64_t v44 = v64;
  uint64_t v45 = v65;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, enum case for WidgetBackgroundStyle.blur(_:), v65);
  uint64_t v67 = v42;
  uint64_t v68 = v40;
  uint64_t v46 = swift_getOpaqueTypeConformance2();
  uint64_t v47 = v56;
  uint64_t v48 = v59;
  sub_100089AA0();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v45);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v48);
  uint64_t v67 = v48;
  uint64_t v68 = v46;
  swift_getOpaqueTypeConformance2();
  uint64_t v49 = v61;
  sub_100089A80();
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v47, v49);
}

uint64_t sub_100020BE0(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A59C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for DigitalClockWidgetView(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateTimeEntry();
  LOBYTE(a1) = *(unsigned char *)(a1 + *(int *)(v8 + 24));
  uint64_t v9 = sub_100071FF4(v8);
  char v11 = v10 & 1;
  sub_100033C2C(v4);
  sub_100053A54(a1, v9, v11, (uint64_t)v4, (uint64_t)v7);
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_100086AE8(0);
  sub_100018C3C(&qword_1000A5320, (void (*)(uint64_t))type metadata accessor for DigitalClockWidgetView);
  sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  sub_100089ED0();
  swift_release();
  return sub_100022BA8((uint64_t)v7, type metadata accessor for DigitalClockWidgetView);
}

uint64_t sub_100020DBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v1 = sub_10000697C(&qword_1000A5330);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A5338);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  uint64_t v41 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A5340);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v42 = v9;
  uint64_t v43 = v10;
  __chkstk_darwin(v9);
  char v39 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D6F8(0, &qword_1000A5108);
  type metadata accessor for WorldClockSingleProvider();
  uint64_t v49 = sub_10000FED4();
  sub_10000697C(&qword_1000A5348);
  uint64_t v12 = sub_10000B798(&qword_1000A5350);
  uint64_t v13 = type metadata accessor for ClockWidgetEnvironmentObject();
  uint64_t v14 = sub_10000B798(&qword_1000A5358);
  unint64_t v15 = sub_10002194C();
  uint64_t v45 = v14;
  unint64_t v46 = v15;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v17 = sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  uint64_t v45 = v12;
  unint64_t v46 = v13;
  uint64_t v47 = OpaqueTypeConformance2;
  uint64_t v48 = v17;
  swift_getOpaqueTypeConformance2();
  sub_100018C3C(&qword_1000A5118, (void (*)(uint64_t))type metadata accessor for WorldClockSingleProvider);
  sub_10008A2C0();
  sub_100089990();
  uint64_t v18 = sub_100089E20();
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  uint64_t v23 = sub_10001845C(&qword_1000A5370, &qword_1000A5330);
  sub_100089A90();
  sub_10000B7E0(v18, v20, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000697C(&qword_1000A4A50);
  uint64_t v24 = sub_10008A280();
  uint64_t v25 = *(void *)(v24 - 8);
  unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100098400;
  (*(void (**)(unint64_t, void, uint64_t))(v25 + 104))(v27 + v26, enum case for WidgetFamily.accessoryCircular(_:), v24);
  uint64_t v45 = v1;
  unint64_t v46 = v23;
  uint64_t v28 = swift_getOpaqueTypeConformance2();
  unint64_t v30 = v39;
  uint64_t v29 = v40;
  sub_100089A70();
  swift_bridgeObjectRelease();
  uint64_t v31 = v29;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v29);
  sub_100089990();
  uint64_t v32 = sub_100089E20();
  uint64_t v34 = v33;
  LOBYTE(v8) = v35 & 1;
  uint64_t v45 = v31;
  unint64_t v46 = v28;
  swift_getOpaqueTypeConformance2();
  uint64_t v36 = v42;
  sub_100089A60();
  sub_10000B7E0(v32, v34, (char)v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v30, v36);
}

uint64_t sub_1000213DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A4B98);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A4B70);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for WorldClockEntry();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ClockCircularAnalogueComplication(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(&qword_1000A5358);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000697C(&qword_1000A5350);
  uint64_t v39 = *(void *)(v18 - 8);
  uint64_t v40 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000697C(&qword_1000A5348);
  uint64_t v37 = *(void *)(v21 - 8);
  uint64_t v38 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022938(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  sub_100028E98(v45);
  uint64_t v43 = &type metadata for AnalogueCircularDimensions;
  uint64_t v44 = &off_1000A2848;
  uint64_t v24 = (_OWORD *)swift_allocObject();
  *(void *)&long long v42 = v24;
  long long v25 = v45[1];
  v24[1] = v45[0];
  v24[2] = v25;
  long long v26 = v45[3];
  v24[3] = v45[2];
  v24[4] = v26;
  sub_100034D20(v8);
  LOBYTE(a1) = sub_100005184();
  char v27 = sub_100005184();
  char v28 = sub_100005184();
  sub_100059DF4((uint64_t)v11, (uint64_t)v8, &v42, a1 & 1, v27 & 1, v28 & 1, (uint64_t)v14);
  sub_10008A1B0();
  sub_10001CF28(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v17, 0.0, 1, INFINITY, 0);
  sub_100022BA8((uint64_t)v14, type metadata accessor for ClockCircularAnalogueComplication);
  id v29 = [self widgetURL];
  if (v29)
  {
    unint64_t v30 = v29;
    sub_100089130();

    uint64_t v31 = sub_100089150();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v5, 0, 1, v31);
  }
  else
  {
    uint64_t v32 = sub_100089150();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v5, 1, 1, v32);
  }
  unint64_t v33 = sub_10002194C();
  sub_100089E90();
  sub_10000F024((uint64_t)v5, &qword_1000A4B98);
  sub_10000F024((uint64_t)v17, &qword_1000A5358);
  type metadata accessor for ClockWidgetEnvironmentObject();
  char v34 = sub_100086AE0();
  sub_100086AE8(v34);
  *(void *)&long long v42 = v15;
  *((void *)&v42 + 1) = v33;
  swift_getOpaqueTypeConformance2();
  sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  uint64_t v35 = v40;
  sub_100089ED0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v20, v35);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v41, v23, v38);
}

unint64_t sub_10002194C()
{
  unint64_t result = qword_1000A5360;
  if (!qword_1000A5360)
  {
    sub_10000B798(&qword_1000A5358);
    sub_100018C3C(&qword_1000A5368, (void (*)(uint64_t))type metadata accessor for ClockCircularAnalogueComplication);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5360);
  }
  return result;
}

uint64_t sub_1000219F8()
{
  return sub_100021A04((unsigned int *)&enum case for WidgetFamily.accessoryCircular(_:));
}

uint64_t sub_100021A04(unsigned int *a1)
{
  sub_10000697C(&qword_1000A4A50);
  uint64_t v2 = sub_10008A280();
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100098400;
  (*(void (**)(unint64_t, void, uint64_t))(v3 + 104))(v5 + v4, *a1, v2);
  return v5;
}

uint64_t sub_100021AE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v58 = a1;
  uint64_t v67 = sub_10000697C(&qword_1000A5378);
  uint64_t v69 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v66 = (char *)&v50 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v57 = (uint64_t)&v50 - v3;
  uint64_t v4 = type metadata accessor for CityWidgetDigital(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v56 = (uint64_t)&v50 - v8;
  uint64_t v9 = type metadata accessor for WorldClockWidgetMulti(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v63 = sub_10000697C(&qword_1000A5380);
  uint64_t v68 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v62 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v50 - v17;
  uint64_t v19 = sub_10000697C(&qword_1000A5388);
  uint64_t v64 = *(void *)(v19 - 8);
  uint64_t v65 = v19;
  __chkstk_darwin(v19);
  uint64_t v61 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v50 - v22;
  uint64_t v24 = sub_10000697C(&qword_1000A5390);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v59 = v24;
  uint64_t v60 = v25;
  __chkstk_darwin(v24);
  char v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  unint64_t v30 = (char *)&v50 - v29;
  sub_100022238();
  uint64_t v54 = v30;
  sub_100089A50();
  sub_10000697C(&qword_1000A53A0);
  long long v52 = v23;
  sub_1000896D0();
  uint64_t v50 = v18;
  sub_1000222D0();
  uint64_t *v11 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4A58);
  swift_storeEnumTagMultiPayload();
  sub_100022474((uint64_t)v11, (uint64_t)v14, type metadata accessor for WorldClockWidgetMulti);
  *uint64_t v6 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = v56;
  uint64_t v32 = sub_100022474((uint64_t)v6, v56, type metadata accessor for CityWidgetDigital);
  nullsub_1(v32);
  uint64_t v33 = v57;
  sub_1000224DC(v57);
  char v34 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  uint64_t v55 = v27;
  v34(v27, v30, v59);
  v70[0] = (uint64_t)v27;
  uint64_t v35 = (uint64_t)v61;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v61, v23, v65);
  v70[1] = v35;
  uint64_t v36 = v68;
  uint64_t v37 = (uint64_t)v62;
  uint64_t v38 = v63;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v62, v18, v63);
  v70[3] = v37;
  uint64_t v53 = v11;
  sub_100022938((uint64_t)v14, (uint64_t)v11, type metadata accessor for WorldClockWidgetMulti);
  v70[4] = (uint64_t)v11;
  uint64_t v39 = v31;
  uint64_t v51 = v6;
  sub_100022938(v31, (uint64_t)v6, type metadata accessor for CityWidgetDigital);
  v70[5] = (uint64_t)v6;
  uint64_t v40 = v69;
  uint64_t v41 = (uint64_t)v66;
  uint64_t v42 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v66, v33, v67);
  v70[8] = v41;
  sub_1000229A0(v70);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  uint64_t v69 = v40 + 8;
  v43(v33, v42);
  sub_100022BA8(v39, type metadata accessor for CityWidgetDigital);
  sub_100022BA8((uint64_t)v14, type metadata accessor for WorldClockWidgetMulti);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v36 + 8);
  uint64_t v68 = v36 + 8;
  v44(v50, v38);
  uint64_t v45 = v65;
  unint64_t v46 = *(void (**)(char *, uint64_t))(v64 + 8);
  v46(v52, v65);
  uint64_t v47 = v59;
  uint64_t v48 = *(void (**)(char *, uint64_t))(v60 + 8);
  v48(v54, v59);
  v43((uint64_t)v66, v67);
  sub_100022BA8((uint64_t)v51, type metadata accessor for CityWidgetDigital);
  sub_100022BA8((uint64_t)v53, type metadata accessor for WorldClockWidgetMulti);
  v44(v62, v63);
  v46(v61, v45);
  return ((uint64_t (*)(char *, uint64_t))v48)(v55, v47);
}

uint64_t type metadata accessor for CityWidgetDigital(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000A97E0);
}

uint64_t type metadata accessor for WorldClockWidgetMulti(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000A9800);
}

uint64_t sub_1000221F4()
{
  sub_100022238();

  return sub_100089A50();
}

unint64_t sub_100022238()
{
  unint64_t result = qword_1000A5398;
  if (!qword_1000A5398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5398);
  }
  return result;
}

uint64_t sub_10002228C()
{
  sub_10000697C(&qword_1000A53A0);

  return sub_1000896D0();
}

uint64_t sub_1000222D0()
{
  uint64_t v0 = sub_10000697C(&qword_1000A53A8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for WorldClockWidgetSingle(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v10 - v7;
  *uint64_t v5 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4A58);
  swift_storeEnumTagMultiPayload();
  sub_100022474((uint64_t)v5, (uint64_t)v8, type metadata accessor for WorldClockWidgetSingle);
  sub_100022938((uint64_t)v8, (uint64_t)v5, type metadata accessor for WorldClockWidgetSingle);
  sub_100022938((uint64_t)v5, (uint64_t)v2, type metadata accessor for WorldClockWidgetSingle);
  sub_1000896D0();
  sub_100022BA8((uint64_t)v8, type metadata accessor for WorldClockWidgetSingle);
  return sub_100022BA8((uint64_t)v5, type metadata accessor for WorldClockWidgetSingle);
}

uint64_t sub_100022474(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000224DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v46 = sub_10000697C(&qword_1000A53B0);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000697C(&qword_1000A53B8);
  uint64_t v50 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v33 - v4;
  uint64_t v43 = sub_10000697C(&qword_1000A53C0);
  uint64_t v39 = *(void *)(v43 - 8);
  uint64_t v6 = v39;
  __chkstk_darwin(v43);
  uint64_t v49 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = sub_10000697C(&qword_1000A53C8);
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v12 = v42;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - v16;
  sub_100022C60();
  uint64_t v41 = v17;
  sub_100089AE0();
  sub_100022CB4();
  uint64_t v38 = v10;
  sub_100089AE0();
  sub_100022D08();
  uint64_t v36 = v5;
  sub_100089AE0();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v40 = v14;
  uint64_t v19 = v11;
  uint64_t v37 = v11;
  v18(v14, v17, v11);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v20 = v49;
  uint64_t v21 = v43;
  v35(v49, v10, v43);
  char v34 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  uint64_t v22 = v5;
  uint64_t v23 = v44;
  v34(v48, v22, v44);
  uint64_t v24 = v45;
  v18(v45, v14, v19);
  uint64_t v25 = v46;
  v35(&v24[*(int *)(v46 + 48)], v20, v21);
  uint64_t v26 = v48;
  v34(&v24[*(int *)(v25 + 64)], v48, v23);
  sub_1000896D0();
  char v27 = *(void (**)(char *, uint64_t))(v50 + 8);
  v27(v36, v23);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v39 + 8);
  uint64_t v29 = v21;
  v28(v38, v21);
  unint64_t v30 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v31 = v37;
  v30(v41, v37);
  v27(v26, v23);
  v28(v49, v29);
  return ((uint64_t (*)(char *, uint64_t))v30)(v40, v31);
}

uint64_t sub_100022938(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000229A0(uint64_t *a1)
{
  uint64_t v2 = (int *)sub_10000697C(&qword_1000A59B8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *a1;
  uint64_t v6 = sub_10000697C(&qword_1000A5390);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v4, v5, v6);
  uint64_t v7 = &v4[v2[12]];
  uint64_t v8 = a1[1];
  uint64_t v9 = sub_10000697C(&qword_1000A5388);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = &v4[v2[20]];
  uint64_t v11 = a1[3];
  uint64_t v12 = sub_10000697C(&qword_1000A5380);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  sub_100022938(a1[4], (uint64_t)&v4[v2[24]], type metadata accessor for WorldClockWidgetMulti);
  sub_100022938(a1[5], (uint64_t)&v4[v2[28]], type metadata accessor for CityWidgetDigital);
  uint64_t v13 = &v4[v2[40]];
  uint64_t v14 = a1[8];
  uint64_t v15 = sub_10000697C(&qword_1000A5378);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return sub_1000896D0();
}

uint64_t sub_100022BA8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for WorldClockWidgetSingle(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000A9790);
}

uint64_t sub_100022C28(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100022C60()
{
  unint64_t result = qword_1000A53D0;
  if (!qword_1000A53D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A53D0);
  }
  return result;
}

unint64_t sub_100022CB4()
{
  unint64_t result = qword_1000A53D8;
  if (!qword_1000A53D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A53D8);
  }
  return result;
}

unint64_t sub_100022D08()
{
  unint64_t result = qword_1000A53E0;
  if (!qword_1000A53E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A53E0);
  }
  return result;
}

uint64_t sub_100022D5C()
{
  return sub_100089710();
}

unint64_t sub_100022D90()
{
  unint64_t result = qword_1000A53E8;
  if (!qword_1000A53E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A53E8);
  }
  return result;
}

uint64_t *sub_100022DF4()
{
  return &qword_1000A50C0;
}

uint64_t sub_100022E00()
{
  return sub_100010238(&qword_1000A50C0);
}

uint64_t sub_100022E10(uint64_t a1, uint64_t a2)
{
  return sub_10001029C(a1, a2, &qword_1000A50C0, &off_1000A50C8);
}

uint64_t (*sub_100022E20())()
{
  return j__swift_endAccess;
}

uint64_t sub_100022E78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v25 = sub_100089110();
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A53F0);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000697C(&qword_1000A53F8);
  uint64_t v23 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000697C(&qword_1000A5400);
  uint64_t v26 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A5408);
  uint64_t v10 = sub_10000B798(&qword_1000A5410);
  uint64_t v11 = sub_10001845C(&qword_1000A5418, &qword_1000A5410);
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  swift_getOpaqueTypeConformance2();
  sub_10008A360();
  sub_1000890F0();
  uint64_t v12 = sub_10001845C(&qword_1000A5420, &qword_1000A53F0);
  sub_100089B30();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v14 = v25;
  v13(v2, v25);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  sub_1000890F0();
  uint64_t v28 = v3;
  uint64_t v29 = v12;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v16 = v21;
  sub_100089B20();
  v13(v2, v14);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v16);
  uint64_t v28 = v16;
  uint64_t v29 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v17 = v24;
  sub_100089B40();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v9, v17);
}

uint64_t sub_1000232F0()
{
  return sub_1000238D0(1);
}

uint64_t sub_10002330C()
{
  return Label.init(title:icon:)(sub_100023360, 0, sub_100023374, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100023360@<X0>(uint64_t a1@<X8>)
{
  return sub_1000240AC(a1);
}

uint64_t sub_100023374@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10008A070();
  *a1 = result;
  return result;
}

uint64_t *sub_1000233B0()
{
  return &qword_1000A50D0;
}

uint64_t sub_1000233BC()
{
  return sub_100010238(&qword_1000A50D0);
}

uint64_t sub_1000233CC(uint64_t a1, uint64_t a2)
{
  return sub_10001029C(a1, a2, &qword_1000A50D0, &off_1000A50D8);
}

uint64_t (*sub_1000233DC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100023434@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v25 = sub_100089110();
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A53F0);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000697C(&qword_1000A53F8);
  uint64_t v23 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000697C(&qword_1000A5400);
  uint64_t v26 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A5408);
  uint64_t v10 = sub_10000B798(&qword_1000A5410);
  uint64_t v11 = sub_10001845C(&qword_1000A5418, &qword_1000A5410);
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  swift_getOpaqueTypeConformance2();
  sub_10008A360();
  sub_1000890F0();
  uint64_t v12 = sub_10001845C(&qword_1000A5420, &qword_1000A53F0);
  sub_100089B30();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v14 = v25;
  v13(v2, v25);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  sub_1000890F0();
  uint64_t v28 = v3;
  uint64_t v29 = v12;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v16 = v21;
  sub_100089B20();
  v13(v2, v14);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v16);
  uint64_t v28 = v16;
  uint64_t v29 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v17 = v24;
  sub_100089B40();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v9, v17);
}

uint64_t sub_1000238B4()
{
  return sub_1000238D0(3);
}

uint64_t sub_1000238D0(int a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5410);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = sub_10002BE8C(a1);
  sub_10000697C(&qword_1000A59A0);
  sub_10001845C(&qword_1000A59A8, &qword_1000A59A0);
  sub_100026FEC();
  sub_10008A1F0();
  sub_100032E98();
  sub_10001845C(&qword_1000A5418, &qword_1000A5410);
  swift_retain();
  sub_100089AC0();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100023A78()
{
  return Label.init(title:icon:)(sub_100023ACC, 0, sub_100023AE8, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100023ACC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000240AC(a1);
}

uint64_t sub_100023AE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10008A070();
  *a1 = result;
  return result;
}

uint64_t *sub_100023B2C()
{
  return &qword_1000A50E0;
}

uint64_t sub_100023B38()
{
  return sub_100010238(&qword_1000A50E0);
}

uint64_t sub_100023B48(uint64_t a1, uint64_t a2)
{
  return sub_10001029C(a1, a2, &qword_1000A50E0, &off_1000A50E8);
}

uint64_t (*sub_100023B58())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100023BB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v25 = sub_100089110();
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A53F0);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000697C(&qword_1000A53F8);
  uint64_t v23 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000697C(&qword_1000A5400);
  uint64_t v26 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A5408);
  uint64_t v10 = sub_10000B798(&qword_1000A5410);
  uint64_t v11 = sub_10001845C(&qword_1000A5418, &qword_1000A5410);
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  swift_getOpaqueTypeConformance2();
  sub_10008A360();
  sub_1000890F0();
  uint64_t v12 = sub_10001845C(&qword_1000A5420, &qword_1000A53F0);
  sub_100089B30();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v14 = v25;
  v13(v2, v25);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  sub_1000890F0();
  uint64_t v28 = v3;
  uint64_t v29 = v12;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v16 = v21;
  sub_100089B20();
  v13(v2, v14);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v16);
  uint64_t v28 = v16;
  uint64_t v29 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v17 = v24;
  sub_100089B40();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v9, v17);
}

uint64_t sub_100024028()
{
  return sub_1000238D0(2);
}

uint64_t sub_100024044()
{
  return Label.init(title:icon:)(sub_100024098, 0, sub_10002410C, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100024098@<X0>(uint64_t a1@<X8>)
{
  return sub_1000240AC(a1);
}

uint64_t sub_1000240AC@<X0>(uint64_t a1@<X8>)
{
  sub_100089990();
  uint64_t result = sub_100089E20();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10002410C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10008A070();
  *a1 = result;
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

uint64_t sub_100024180()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002419C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000241B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000241D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000241F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002420C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024228()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024244()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024260()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002427C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024298()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000242B4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000242D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000242EC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024308()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024324()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024340()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002435C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024378()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024394()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000243B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000243CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000243E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024404()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024420()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024468);
}

uint64_t sub_10002446C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100024480);
}

uint64_t sub_1000244A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000244B4);
}

uint64_t sub_1000244B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000244CC);
}

ValueMetadata *type metadata accessor for WorldClockNonNumericWidgetSingle()
{
  return &type metadata for WorldClockNonNumericWidgetSingle;
}

uint64_t sub_1000244E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (void *)(a2 + v8);
    sub_10000F024(a1 + v8, &qword_1000A4A58);
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_10008A280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      void *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100024638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_10000F024(a1 + v8, &qword_1000A4A58);
    uint64_t v11 = sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10008A280();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10002478C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000247A0);
}

uint64_t sub_1000247A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000247B8);
}

ValueMetadata *type metadata accessor for WorldClockSquareWidgetSingle()
{
  return &type metadata for WorldClockSquareWidgetSingle;
}

uint64_t sub_1000247CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000247E0);
}

uint64_t sub_1000247E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000247F8);
}

ValueMetadata *type metadata accessor for WorldClockDigitalWidgetSingle()
{
  return &type metadata for WorldClockDigitalWidgetSingle;
}

uint64_t sub_10002480C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024820);
}

uint64_t sub_100024824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100024838);
}

void *sub_10002483C(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4A58);
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_10008A280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100024910(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4A58);
    uint64_t v4 = sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = sub_10008A280();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000249EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024A00);
}

uint64_t sub_100024A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100024A18);
}

uint64_t sub_100024A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024A30);
}

uint64_t sub_100024A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100024A48);
}

uint64_t *sub_100024A4C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(sub_10000697C(&qword_1000A4A58) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = sub_10008A280();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100024B58(uint64_t a1)
{
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_10008A280();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_release();
  }
}

void *sub_100024BFC(void *a1, void *a2)
{
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_10008A280();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100024CB8(void *a1, const void *a2)
{
  uint64_t v4 = sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_10008A280();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100024D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024D90);
}

uint64_t sub_100024D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000697C(&qword_1000A4A60);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100024E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100024E18);
}

uint64_t sub_100024E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000697C(&qword_1000A4A60);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_100024E90()
{
  sub_10000EA9C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_100024F1C(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for WorldClockEntry();
    *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
    *((unsigned char *)a1 + *(int *)(v8 + 24)) = *((unsigned char *)a2 + *(int *)(v8 + 24));
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10008A280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10002509C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_10008A280();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    return v7(v5, v6);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100025198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_10008A280();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    void *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000252C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_10008A280();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000253F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100025404);
}

uint64_t sub_100025408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for WorldClockEntry();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_10000697C(&qword_1000A4A60);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100025504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100025518);
}

uint64_t sub_10002551C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for WorldClockEntry();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_10000697C(&qword_1000A4A60);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_100025624()
{
  type metadata accessor for WorldClockEntry();
  if (v0 <= 0x3F)
  {
    sub_10000EA9C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for DateTimeWidget()
{
  return &type metadata for DateTimeWidget;
}

ValueMetadata *type metadata accessor for NonNumericWidget()
{
  return &type metadata for NonNumericWidget;
}

ValueMetadata *type metadata accessor for SquareWidget()
{
  return &type metadata for SquareWidget;
}

ValueMetadata *type metadata accessor for DigitalClockWidget()
{
  return &type metadata for DigitalClockWidget;
}

ValueMetadata *type metadata accessor for WorldClockCircularAnalogueComplication()
{
  return &type metadata for WorldClockCircularAnalogueComplication;
}

ValueMetadata *type metadata accessor for WorldClockWidget()
{
  return &type metadata for WorldClockWidget;
}

ValueMetadata *type metadata accessor for DigitalClockWidgetBundle()
{
  return &type metadata for DigitalClockWidgetBundle;
}

ValueMetadata *type metadata accessor for AnalogClockWidgetBundle()
{
  return &type metadata for AnalogClockWidgetBundle;
}

ValueMetadata *type metadata accessor for AnalogCityWidgetBundle()
{
  return &type metadata for AnalogCityWidgetBundle;
}

ValueMetadata *type metadata accessor for ControlCenterExtensionBundle()
{
  return &type metadata for ControlCenterExtensionBundle;
}

ValueMetadata *type metadata accessor for AlarmControl()
{
  return &type metadata for AlarmControl;
}

ValueMetadata *type metadata accessor for StopwatchControl()
{
  return &type metadata for StopwatchControl;
}

ValueMetadata *type metadata accessor for TimersControl()
{
  return &type metadata for TimersControl;
}

uint64_t sub_1000257BC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000258AC()
{
  return sub_100026544(&qword_1000A58A8, &qword_1000A58B0, (void (*)(void))sub_1000258E8);
}

unint64_t sub_1000258E8()
{
  unint64_t result = qword_1000A58B8;
  if (!qword_1000A58B8)
  {
    sub_10000B798(&qword_1000A58C0);
    type metadata accessor for CityInlineComplication(255);
    sub_100018C3C(&qword_1000A58C8, (void (*)(uint64_t))type metadata accessor for CityInlineComplication);
    swift_getOpaqueTypeConformance2();
    type metadata accessor for WorldClockWidgetViewSingle(255);
    type metadata accessor for ClockWidgetEnvironmentObject();
    sub_100018C3C(&qword_1000A58D0, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewSingle);
    sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A58B8);
  }
  return result;
}

uint64_t sub_100025A7C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100025B70()
{
  unint64_t result = qword_1000A58D8;
  if (!qword_1000A58D8)
  {
    sub_10000B798(&qword_1000A58E0);
    type metadata accessor for WorldClockWidgetViewSingle(255);
    type metadata accessor for ClockWidgetEnvironmentObject();
    sub_100018C3C(&qword_1000A58D0, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewSingle);
    sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A58D8);
  }
  return result;
}

uint64_t sub_100025C94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100025DF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100025F54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100026044()
{
  return sub_100026544(&qword_1000A58E8, &qword_1000A58F0, (void (*)(void))sub_100026080);
}

unint64_t sub_100026080()
{
  unint64_t result = qword_1000A58F8;
  if (!qword_1000A58F8)
  {
    sub_10000B798(&qword_1000A5900);
    sub_1000260FC();
    sub_1000262B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A58F8);
  }
  return result;
}

unint64_t sub_1000260FC()
{
  unint64_t result = qword_1000A5908;
  if (!qword_1000A5908)
  {
    sub_10000B798(&qword_1000A5910);
    type metadata accessor for ClockRectangularComplication(255);
    sub_100018C3C(&qword_1000A5918, (void (*)(uint64_t))type metadata accessor for ClockRectangularComplication);
    swift_getOpaqueTypeConformance2();
    sub_1000261D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5908);
  }
  return result;
}

unint64_t sub_1000261D8()
{
  unint64_t result = qword_1000A5920;
  if (!qword_1000A5920)
  {
    sub_10000B798(&qword_1000A5928);
    type metadata accessor for ClockCircularDigitalComplication(255);
    sub_100018C3C(&qword_1000A5930, (void (*)(uint64_t))type metadata accessor for ClockCircularDigitalComplication);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5920);
  }
  return result;
}

unint64_t sub_1000262B4()
{
  unint64_t result = qword_1000A5938;
  if (!qword_1000A5938)
  {
    sub_10000B798(&qword_1000A5940);
    sub_100018C3C(&qword_1000A58C8, (void (*)(uint64_t))type metadata accessor for CityInlineComplication);
    type metadata accessor for WorldClockWidgetViewSingle(255);
    type metadata accessor for ClockWidgetEnvironmentObject();
    sub_100018C3C(&qword_1000A58D0, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewSingle);
    sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5938);
  }
  return result;
}

uint64_t sub_100026418()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100026508()
{
  return sub_100026544(&qword_1000A5948, &qword_1000A5950, (void (*)(void))sub_1000265BC);
}

uint64_t sub_100026544(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000265BC()
{
  unint64_t result = qword_1000A5958;
  if (!qword_1000A5958)
  {
    sub_10000B798(&qword_1000A5960);
    type metadata accessor for WorldClockRectangularSummary(255);
    sub_100018C3C(&qword_1000A5968, (void (*)(uint64_t))type metadata accessor for WorldClockRectangularSummary);
    swift_getOpaqueTypeConformance2();
    type metadata accessor for WorldClockWidgetViewMulti(255);
    type metadata accessor for ClockWidgetEnvironmentObject();
    sub_100018C3C(&qword_1000A5970, (void (*)(uint64_t))type metadata accessor for WorldClockWidgetViewMulti);
    sub_100018C3C((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5958);
  }
  return result;
}

uint64_t sub_100026750()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000268B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100026A10()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100026B70()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100026CD0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100026DC0()
{
  return sub_10001845C(&qword_1000A5978, &qword_1000A5980);
}

uint64_t sub_100026DFC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100026E48()
{
  return sub_10001845C(&qword_1000A5988, &qword_1000A5388);
}

uint64_t sub_100026E84()
{
  return sub_10001845C(&qword_1000A5990, &qword_1000A5380);
}

uint64_t sub_100026EC0()
{
  return sub_10001845C(&qword_1000A5998, &qword_1000A5378);
}

uint64_t sub_100026EFC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100026FEC()
{
  unint64_t result = qword_1000A59B0;
  if (!qword_1000A59B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A59B0);
  }
  return result;
}

uint64_t sub_100027040()
{
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100027078(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000697C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000270E4@<X0>(uint64_t a1@<X8>)
{
  sub_1000893B0();
  uint64_t v2 = type metadata accessor for DateTimeEntry();
  uint64_t result = sub_100089570();
  *(unsigned char *)(a1 + *(int *)(v2 + 24)) = 1;
  return result;
}

uint64_t sub_100027134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for DateTimeEntry();
  uint64_t v10 = a4 + *(int *)(v9 + 20);
  uint64_t v11 = sub_100089580();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a2, v11);
  *(unsigned char *)(a4 + *(int *)(v9 + 24)) = a3;
  return result;
}

uint64_t type metadata accessor for DateTimeEntry()
{
  uint64_t result = qword_1000A99A0;
  if (!qword_1000A99A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100027250(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3 = type metadata accessor for DateTimeEntry();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000893B0();
  sub_100089570();
  v6[*(int *)(v4 + 32)] = 0;
  a2(v6);
  return sub_10002733C((uint64_t)v6);
}

uint64_t sub_1000272F8@<X0>(uint64_t a1@<X8>)
{
  sub_1000893B0();
  uint64_t v2 = type metadata accessor for DateTimeEntry();
  uint64_t result = sub_100089570();
  *(unsigned char *)(a1 + *(int *)(v2 + 24)) = 0;
  return result;
}

uint64_t sub_10002733C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DateTimeEntry();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100027398(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3 = sub_10008A310();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_10000697C(&qword_1000A5A20);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000697C(&qword_1000A5A28);
  uint64_t v8 = type metadata accessor for DateTimeEntry();
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100098400;
  unint64_t v11 = v10 + v9;
  sub_1000893B0();
  sub_100089570();
  *(unsigned char *)(v11 + *(int *)(v8 + 24)) = 0;
  sub_10008A300();
  sub_1000279C0(&qword_1000A5A30, (void (*)(uint64_t))type metadata accessor for DateTimeEntry);
  sub_10008A370();
  a2(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v12 = type metadata accessor for WidgetUtilities();
  unint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  sub_10008A5C0(20);
  swift_bridgeObjectRelease();
  unint64_t v15 = 0xD000000000000012;
  unint64_t v16 = 0x800000010008AF90;
  char v13 = sub_10002F50C();
  v17._countAndFlagsBits = sub_10002F6F0(v13);
  sub_10008A440(v17);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t))(v12 + 80))(v15, v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002764C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_100027690()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_1000276D4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_100027718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DateTimeEntry() + 20);
  uint64_t v4 = sub_100089580();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100027790(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DateTimeEntry() + 20);
  uint64_t v4 = sub_100089580();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_100027808())(void)
{
  return nullsub_1;
}

uint64_t sub_100027850()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for DateTimeEntry() + 24));
}

uint64_t sub_100027874(char a1)
{
  uint64_t result = type metadata accessor for DateTimeEntry();
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000278A4())(void)
{
  return nullsub_1;
}

unint64_t sub_1000278EC()
{
  sub_10008A5C0(31);
  swift_bridgeObjectRelease();
  type metadata accessor for DateTimeEntry();
  sub_100089580();
  sub_1000279C0(qword_1000A5A38, (void (*)(uint64_t))&type metadata accessor for TimeZone);
  v1._countAndFlagsBits = sub_10008A640();
  sub_10008A440(v1);
  swift_bridgeObjectRelease();
  return 0xD00000000000001DLL;
}

uint64_t sub_1000279C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100027A08()
{
  return sub_1000279C0(&qword_1000A5A30, (void (*)(uint64_t))type metadata accessor for DateTimeEntry);
}

uint64_t sub_100027A50()
{
  sub_10008A5C0(31);
  v1._object = (void *)0x800000010008B7D0;
  v1._countAndFlagsBits = 0xD00000000000001DLL;
  sub_10008A440(v1);
  sub_100089580();
  sub_1000279C0(qword_1000A5A38, (void (*)(uint64_t))&type metadata accessor for TimeZone);
  v2._countAndFlagsBits = sub_10008A640();
  sub_10008A440(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  sub_10008A440(v3);
  return 0;
}

uint64_t type metadata accessor for DateTimeProvider()
{
  return self;
}

void *sub_100027B60(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_100089580();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_100027C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_100089580();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_100027D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100027DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100027EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100027F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100028054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100028068);
}

uint64_t sub_100028068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = sub_100089580();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
      if (v14 >= 2) {
        return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10002818C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000281A0);
}

uint64_t sub_1000281A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1000893C0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_100089580();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000282B0()
{
  uint64_t result = sub_1000893C0();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_100089580();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100028380(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, a3);
}

uint64_t sub_1000283F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000899F0();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v9(v8, a1, v4, v6);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v10 == enum case for ContentSizeCategory.extraSmall(_:)
    || v10 == enum case for ContentSizeCategory.small(_:)
    || v10 == enum case for ContentSizeCategory.medium(_:)
    || v10 == enum case for ContentSizeCategory.large(_:)
    || v10 == enum case for ContentSizeCategory.extraLarge(_:)
    || v10 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v10 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:)
    || v10 == enum case for ContentSizeCategory.accessibilityMedium(_:)
    || v10 == enum case for ContentSizeCategory.accessibilityLarge(_:)
    || v10 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(a2, a1, v4);
  }
  if (v10 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v10 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v5 + 104))(a2, enum case for ContentSizeCategory.accessibilityExtraLarge(_:), v4);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v9)(a2, a1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_100028618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000899F0();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  int v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v8);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v11 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v11 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v11 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return sub_100089CF0();
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return v14;
}

double sub_10002878C()
{
  return 136.0;
}

double sub_100028798()
{
  return *(double *)v0;
}

void sub_1000287A0(double a1)
{
  double *v1 = a1;
}

uint64_t sub_1000287AC(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5B88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002880C()
{
  return swift_retain();
}

uint64_t sub_100028814(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_100028840())()
{
  return nullsub_1;
}

double sub_100028860()
{
  return 5.0;
}

double sub_100028868()
{
  return *(double *)(v0 + 16);
}

void sub_100028870(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*sub_100028878())()
{
  return nullsub_1;
}

double sub_100028898()
{
  return 1.0;
}

double sub_1000288A0()
{
  return *(double *)(v0 + 24);
}

void sub_1000288A8(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*sub_1000288B0())()
{
  return nullsub_1;
}

double sub_1000288D0()
{
  return *(double *)(v0 + 32);
}

void sub_1000288D8(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*sub_1000288E0())()
{
  return nullsub_1;
}

void *sub_100028900()
{
  return &unk_100098ED0;
}

double sub_10002890C()
{
  return 0.8967;
}

void sub_100028918()
{
  qword_1000ABF78 = 0x3FF0000000000000;
}

uint64_t *sub_100028928()
{
  if (qword_1000A99B0 != -1) {
    swift_once();
  }
  return &qword_1000ABF78;
}

double sub_100028974()
{
  if (qword_1000A99B0 != -1) {
    swift_once();
  }
  return *(double *)&qword_1000ABF78;
}

double sub_1000289C0()
{
  return *(double *)(v0 + 40);
}

void sub_1000289C8(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*sub_1000289D0())()
{
  return nullsub_1;
}

double sub_1000289F0()
{
  return 4.0;
}

double sub_1000289F8()
{
  return *(double *)(v0 + 48);
}

void sub_100028A00(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*sub_100028A08())()
{
  return nullsub_1;
}

double sub_100028A28()
{
  return 2.0;
}

double sub_100028A30()
{
  return *(double *)(v0 + 56);
}

void sub_100028A38(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*sub_100028A40())()
{
  return nullsub_1;
}

uint64_t sub_100028A60()
{
  return 1;
}

double sub_100028A68@<D0>(_OWORD *a1@<X8>)
{
  sub_100029AF4((uint64_t)v5);
  long long v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  double result = *(double *)&v6;
  long long v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

uint64_t sub_100028AA8()
{
  uint64_t v0 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v0 - 8);
  long long v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100089D00();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v4 + 104))(v7, enum case for Font.TextStyle.subheadline(_:), v3, v5);
  uint64_t v8 = enum case for Font.Design.rounded(_:);
  uint64_t v9 = sub_100089C20();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v2, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v2, 0, 1, v9);
  sub_100089C80();
  sub_1000287AC((uint64_t)v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  sub_100089C50();
  uint64_t v11 = sub_100089C90();
  swift_release();
  return v11;
}

double sub_100028CA4@<D0>(double *a1@<X8>, double a2@<D0>)
{
  sub_100029AF4((uint64_t)v7);
  long long v4 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *((_OWORD *)a1 + 1) = v4;
  double result = *(double *)&v8;
  long long v6 = v9;
  *((_OWORD *)a1 + 2) = v8;
  *((_OWORD *)a1 + 3) = v6;
  *a1 = a2;
  return result;
}

uint64_t sub_100028CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100028FB0(a1, a2, a3, (uint64_t (*)(void))&static Font.headline.getter);
}

uint64_t sub_100028D14()
{
  return sub_100029414((void (*)(__n128))&static Font.Weight.regular.getter);
}

double sub_100028D2C()
{
  return 2.65;
}

void *sub_100028D3C()
{
  return &unk_100098ED8;
}

uint64_t sub_100028D48(uint64_t a1)
{
  uint64_t v3 = sub_1000899F0();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  long long v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v7, a1, v3, v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v8 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v8 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return sub_100089BF0();
  }
  uint64_t v11 = *(void *)(v1 + 8);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_retain();
  v12(v7, v3);
  return v11;
}

double sub_100028E98@<D0>(_OWORD *a1@<X8>)
{
  sub_100029D10((uint64_t)v5);
  long long v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  double result = *(double *)&v6;
  long long v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

double sub_100028ED8()
{
  uint64_t v0 = sub_1000166F4();
  swift_beginAccess();
  double result = 56.0;
  if (*v0) {
    return 50.0;
  }
  return result;
}

uint64_t sub_100028F30@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>)
{
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = result;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  *(double *)(a2 + 56) = a9;
  return result;
}

double sub_100028F48@<D0>(double *a1@<X8>, double a2@<D0>)
{
  sub_100029D10((uint64_t)v7);
  long long v4 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *((_OWORD *)a1 + 1) = v4;
  double result = *(double *)&v8;
  long long v6 = v9;
  *((_OWORD *)a1 + 2) = v8;
  *((_OWORD *)a1 + 3) = v6;
  *a1 = a2;
  return result;
}

uint64_t sub_100028F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100028FB0(a1, a2, a3, (uint64_t (*)(void))&static Font.subheadline.getter);
}

uint64_t sub_100028FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = sub_1000899F0();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 + 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, a1, v7, v9);
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v13 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return a4();
  }
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_retain();
  v16(v11, v7);
  return v12;
}

double sub_100029108()
{
  return 64.0;
}

uint64_t sub_100029114()
{
  return sub_100029414((void (*)(__n128))&static Font.Weight.semibold.getter);
}

void *sub_10002912C()
{
  return &unk_100098EE0;
}

double sub_100029138()
{
  return 0.7742;
}

void *sub_100029144()
{
  return &unk_100098EE8;
}

double sub_100029150()
{
  return 0.8888;
}

double sub_10002915C()
{
  return 3.4;
}

double sub_10002916C()
{
  return 2.2;
}

uint64_t sub_100029178(uint64_t a1)
{
  uint64_t v3 = sub_1000899F0();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v7, a1, v3, v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v8 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v8 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return sub_100089CB0();
  }
  uint64_t v11 = *(void *)(v1 + 8);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_retain();
  v12(v7, v3);
  return v11;
}

double sub_1000292C8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100089C60();
  uint64_t v5 = enum case for Font.Design.default(_:);
  uint64_t v6 = sub_100089C20();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v4, v5, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v6);
  uint64_t v8 = sub_100089C70();
  sub_1000287AC((uint64_t)v4);
  *(void *)a1 = 0x4050000000000000;
  *(void *)(a1 + 8) = v8;
  double result = 2.0;
  *(_OWORD *)(a1 + 16) = xmmword_100098E60;
  *(_OWORD *)(a1 + 32) = xmmword_100098E70;
  *(void *)(a1 + 48) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_100029414(void (*a1)(__n128))
{
  uint64_t v2 = sub_10000697C(&qword_1000A5B88);
  __n128 v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v3);
  uint64_t v6 = enum case for Font.Design.default(_:);
  uint64_t v7 = sub_100089C20();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v5, v6, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  uint64_t v9 = sub_100089C70();
  sub_1000287AC((uint64_t)v5);
  return v9;
}

uint64_t sub_100029544@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = result;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  return result;
}

double sub_10002955C@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100089C60();
  uint64_t v7 = enum case for Font.Design.default(_:);
  uint64_t v8 = sub_100089C20();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v6, v7, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  uint64_t v10 = sub_100089C70();
  sub_1000287AC((uint64_t)v6);
  *(void *)(a1 + 8) = v10;
  double result = 2.0;
  *(_OWORD *)(a1 + 16) = xmmword_100098E60;
  *(_OWORD *)(a1 + 32) = xmmword_100098E70;
  *(void *)(a1 + 48) = 0x3FF0000000000000;
  *(double *)a1 = a2;
  return result;
}

uint64_t sub_1000296B4(uint64_t a1)
{
  uint64_t v3 = sub_1000899F0();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v7, a1, v3, v5);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v9 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v9 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v9 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return sub_100089CB0();
  }
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_retain();
  v12(v7, v3);
  return v8;
}

void *sub_100029804()
{
  return &unk_100098EF0;
}

uint64_t sub_100029810()
{
  return 4;
}

void *sub_100029818()
{
  return &unk_100098EF8;
}

uint64_t sub_100029824()
{
  return 5;
}

void *sub_10002982C()
{
  return &unk_100098F00;
}

double sub_100029838()
{
  return 0.7273;
}

void *sub_100029844()
{
  return &unk_100098F08;
}

double sub_100029850()
{
  return 0.7;
}

double sub_100029864()
{
  return 74.0;
}

double sub_100029874()
{
  return 112.0;
}

double sub_100029880()
{
  return 3.5;
}

double sub_100029888()
{
  return 0.9;
}

double sub_100029894()
{
  return *(double *)(v0 + 64);
}

void sub_10002989C(double a1)
{
  *(double *)(v1 + 64) = a1;
}

uint64_t (*sub_1000298A4())()
{
  return nullsub_1;
}

double sub_1000298C4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100089CD0();
  *(void *)a1 = 0x4050000000000000;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_100098E60;
  *(_OWORD *)(a1 + 32) = xmmword_100098E80;
  double result = 3.5;
  *(_OWORD *)(a1 + 48) = xmmword_100098E90;
  *(void *)(a1 + 64) = 0x3FECCCCCCCCCCCCDLL;
  return result;
}

uint64_t sub_100029920@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = result;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  *(double *)(a2 + 56) = a9;
  *(double *)(a2 + 64) = a10;
  return result;
}

double sub_10002993C@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(void *)(a1 + 8) = sub_100089CD0();
  *(_OWORD *)(a1 + 16) = xmmword_100098E60;
  *(_OWORD *)(a1 + 32) = xmmword_100098E80;
  double result = 3.5;
  *(_OWORD *)(a1 + 48) = xmmword_100098E90;
  *(void *)(a1 + 64) = 0x3FECCCCCCCCCCCCDLL;
  *(double *)a1 = a2;
  return result;
}

uint64_t sub_1000299A4(uint64_t a1)
{
  uint64_t v3 = sub_1000899F0();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v7, a1, v3, v5);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v9 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v9 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v9 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return sub_100089CF0();
  }
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_retain();
  v12(v7, v3);
  return v8;
}

double sub_100029AF4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100089D00();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  int v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v6 + 104))(v9, enum case for Font.TextStyle.subheadline(_:), v5, v7);
  uint64_t v10 = enum case for Font.Design.rounded(_:);
  uint64_t v11 = sub_100089C20();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v4, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v4, 0, 1, v11);
  sub_100089C80();
  sub_1000287AC((uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  sub_100089C50();
  uint64_t v13 = sub_100089C90();
  swift_release();
  *(void *)a1 = 0x4061000000000000;
  *(void *)(a1 + 8) = v13;
  __asm { FMOV            V1.2D, #8.0 }
  *(_OWORD *)(a1 + 16) = xmmword_100098EA0;
  *(_OWORD *)(a1 + 32) = _Q1;
  double result = 4.0;
  *(_OWORD *)(a1 + 48) = xmmword_100098EB0;
  return result;
}

double sub_100029D10@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000166F4();
  swift_beginAccess();
  if (*v5) {
    double v6 = 50.0;
  }
  else {
    double v6 = 56.0;
  }
  sub_100089C50();
  uint64_t v7 = enum case for Font.Design.default(_:);
  uint64_t v8 = sub_100089C20();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v4, v7, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  uint64_t v10 = sub_100089C70();
  sub_1000287AC((uint64_t)v4);
  *(double *)a1 = v6;
  *(void *)(a1 + 8) = v10;
  __asm { FMOV            V1.2D, #4.0 }
  *(_OWORD *)(a1 + 16) = xmmword_100098EC0;
  *(_OWORD *)(a1 + 32) = _Q1;
  double result = 2.0;
  *(_OWORD *)(a1 + 48) = xmmword_100098E60;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SmallSizeDimentions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SmallSizeDimentions()
{
  return swift_release();
}

__n128 initializeWithTake for SmallSizeDimentions(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SmallSizeDimentions()
{
  return &type metadata for SmallSizeDimentions;
}

uint64_t _s16WorldClockWidget19SmallSizeDimentionsVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_retain();
  return a1;
}

void *_s16WorldClockWidget19SmallSizeDimentionsVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t _s16WorldClockWidget19SmallSizeDimentionsVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t _s16WorldClockWidget19SmallSizeDimentionsVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10002A068(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalogueCircularDimensions()
{
  return &type metadata for AnalogueCircularDimensions;
}

uint64_t initializeWithCopy for SmallMultiSizeDimentions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

void *assignWithCopy for SmallMultiSizeDimentions(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 initializeWithTake for SmallMultiSizeDimentions(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SmallMultiSizeDimentions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SmallMultiSizeDimentions(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SmallMultiSizeDimentions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SmallMultiSizeDimentions()
{
  return &type metadata for SmallMultiSizeDimentions;
}

uint64_t initializeWithCopy for MediumSizeDimentions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  return a1;
}

void *assignWithCopy for MediumSizeDimentions(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for MediumSizeDimentions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for MediumSizeDimentions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediumSizeDimentions(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediumSizeDimentions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediumSizeDimentions()
{
  return &type metadata for MediumSizeDimentions;
}

const char *sub_10002A4C4()
{
  return "default";
}

uint64_t sub_10002A4D0()
{
  return 0x746C7561666564;
}

uint64_t sub_10002A4E8(char a1)
{
  sub_10008A5C0(16);
  swift_bridgeObjectRelease();
  unint64_t v2 = (void *)0xEA00000000006B63;
  v3._countAndFlagsBits = 0x6F6C63646C726F77;
  switch(a1)
  {
    case 1:
      unint64_t v2 = (void *)0xE500000000000000;
      v3._countAndFlagsBits = 0x6D72616C61;
      break;
    case 2:
      unint64_t v2 = (void *)0xE500000000000000;
      v3._countAndFlagsBits = 0x72656D6974;
      break;
    case 3:
      unint64_t v2 = (void *)0xE900000000000068;
      v3._countAndFlagsBits = 0x63746177706F7473;
      break;
    default:
      break;
  }
  v3._object = v2;
  sub_10008A440(v3);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x746C75616665643ALL;
  v5._object = (void *)0xE800000000000000;
  sub_10008A440(v5);
  return 0x2D6B636F6C63;
}

uint64_t sub_10002A608(char a1)
{
  uint64_t result = 0x6F6C63646C726F77;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6D72616C61;
      break;
    case 2:
      uint64_t result = 0x72656D6974;
      break;
    case 3:
      uint64_t result = 0x63746177706F7473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10002A69C()
{
  uint64_t v0 = sub_10000697C(&qword_1000A5B90);
  sub_10002E708(v0, qword_1000ABF80);
  sub_10002AD84(v0, (uint64_t)qword_1000ABF80);
  sub_10000697C(&qword_1000A5CA8);
  uint64_t v1 = *(void *)(sub_10000697C(&qword_1000A5CB0) - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100097F60;
  unint64_t v5 = v4 + v3;
  *(unsigned char *)(v4 + v3) = 0;
  sub_10008A5C0(16);
  swift_bridgeObjectRelease();
  sub_10002DA70();
  sub_100088EC0();
  *(unsigned char *)(v5 + v2) = 1;
  sub_10008A5C0(16);
  swift_bridgeObjectRelease();
  sub_100088EC0();
  *(unsigned char *)(v5 + 2 * v2) = 2;
  sub_10008A5C0(16);
  swift_bridgeObjectRelease();
  sub_100088EC0();
  *(unsigned char *)(v5 + 3 * v2) = 3;
  sub_10008A5C0(16);
  swift_bridgeObjectRelease();
  sub_100088EC0();
  sub_10002A924(v4);
  return sub_100088ED0();
}

unint64_t sub_10002A924(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5CB0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (unsigned __int8 *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000697C(&qword_1000A5CB8);
  uint64_t v6 = sub_10008A620();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F148(v12, (uint64_t)v5, &qword_1000A5CB0);
    unsigned __int8 v14 = *v5;
    unint64_t result = sub_10002CF60(*v5);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v7[6] + result) = v14;
    uint64_t v18 = v7[7];
    uint64_t v19 = sub_10000697C(&qword_1000A5CC0);
    unint64_t result = (*(uint64_t (**)(unint64_t, unsigned __int8 *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v9, v19);
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002AB24(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5C98);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (unsigned __int8 *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000697C(&qword_1000A5CA0);
  uint64_t v6 = sub_10008A620();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F148(v12, (uint64_t)v5, &qword_1000A5C98);
    unsigned __int8 v14 = *v5;
    unint64_t result = sub_10002CF60(*v5);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v7[6] + result) = v14;
    uint64_t v18 = v7[7];
    uint64_t v19 = sub_100088EB0();
    unint64_t result = (*(uint64_t (**)(unint64_t, unsigned __int8 *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v9, v19);
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002AD1C()
{
  if (qword_1000A99C0 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000697C(&qword_1000A5B90);

  return sub_10002AD84(v0, (uint64_t)qword_1000ABF80);
}

uint64_t sub_10002AD84(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10002ADBC@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000A99C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000697C(&qword_1000A5B90);
  uint64_t v3 = sub_10002AD84(v2, (uint64_t)qword_1000ABF80);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10002AE80(uint64_t a1)
{
  if (qword_1000A99C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000697C(&qword_1000A5B90);
  uint64_t v3 = sub_10002AD84(v2, (uint64_t)qword_1000ABF80);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*sub_10002AF7C())()
{
  if (qword_1000A99C0 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000697C(&qword_1000A5B90);
  sub_10002AD84(v0, (uint64_t)qword_1000ABF80);
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_10002B018()
{
  uint64_t v0 = sub_10000697C(&qword_1000A5BA0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = sub_100089100();
  uint64_t v3 = *(void *)(v12[0] - 8);
  __chkstk_darwin(v12[0]);
  unint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100089480();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_10008A3E0();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = sub_100089110();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = sub_100088F60();
  sub_10002E708(v10, qword_1000ABF98);
  sub_10002AD84(v10, (uint64_t)qword_1000ABF98);
  sub_10008A3D0();
  sub_100089450();
  (*(void (**)(char *, void, void))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v12[0]);
  sub_100089120();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v2, 1, 1, v8);
  return sub_100088F50();
}

uint64_t sub_10002B2F8()
{
  return sub_10002C5C4(&qword_1000A99C8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000ABF98);
}

uint64_t sub_10002B330@<X0>(uint64_t a1@<X8>)
{
  return sub_10002C658(&qword_1000A99C8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000ABF98, a1);
}

uint64_t sub_10002B368(uint64_t a1)
{
  return sub_10002C740(a1, &qword_1000A99C8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000ABF98);
}

uint64_t (*sub_10002B3A0())()
{
  if (qword_1000A99C8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_100088F60();
  sub_10002AD84(v0, (uint64_t)qword_1000ABF98);
  swift_beginAccess();
  return j_j__swift_endAccess;
}

_UNKNOWN **sub_10002B438()
{
  return &off_1000A2DB8;
}

uint64_t sub_10002B444(unsigned __int8 *a1, char *a2)
{
  return sub_10002B450(*a1, *a2);
}

uint64_t sub_10002B450(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006B63;
  uint64_t v3 = 0x6F6C63646C726F77;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6F6C63646C726F77;
  unint64_t v6 = 0xEA00000000006B63;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x6D72616C61;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x72656D6974;
      break;
    case 3:
      uint64_t v5 = 0x63746177706F7473;
      unint64_t v6 = 0xE900000000000068;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      if (v5 == 0x6D72616C61) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x72656D6974;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE900000000000068;
      if (v5 == 0x63746177706F7473) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_10008A650();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int sub_10002B5E0()
{
  return sub_10008A6A0();
}

uint64_t sub_10002B6BC()
{
  sub_10008A420();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002B780()
{
  return sub_10008A6A0();
}

uint64_t sub_10002B858@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10002DA24(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_10002B888(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000006B63;
  uint64_t v3 = 0x6F6C63646C726F77;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6D72616C61;
      goto LABEL_3;
    case 2:
      *a1 = 0x72656D6974;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x63746177706F7473;
      a1[1] = 0xE900000000000068;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10002B924()
{
  sub_10002E6A0();
  uint64_t v2 = sub_100088E70();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return sub_10002E6F4(v3, v0, v2, v1);
}

uint64_t sub_10002B9BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10002CB60(&qword_1000A99C8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000ABF98, a1);
}

uint64_t sub_10002B9F4(uint64_t a1)
{
  unint64_t v2 = sub_10002DA70();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10002BA40(uint64_t a1)
{
  unint64_t v2 = sub_10002E104();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_10002BA8C(void *a1@<X8>)
{
  *a1 = &off_1000A2DE0;
}

uint64_t sub_10002BA9C()
{
  sub_100088E10();
  return v1;
}

uint64_t sub_10002BAD0()
{
  return sub_100088E20();
}

uint64_t (*sub_10002BB04(void *a1))()
{
  unint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_100088E00();
  return sub_10002BB60;
}

uint64_t sub_10002BB64()
{
  uint64_t v17 = sub_100088F20();
  uint64_t v0 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A5B98);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = sub_10000697C(&qword_1000A5BA0);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100089110();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10000697C(&qword_1000A5BA8);
  sub_1000890F0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  char v18 = 4;
  uint64_t v14 = sub_100088DF0();
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v8, 1, 1, v14);
  v15(v5, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v17);
  sub_10002DA70();
  return sub_100088E40();
}

uint64_t sub_10002BE58()
{
  return sub_100088E30();
}

void *sub_10002BE7C()
{
  return &unk_100099020;
}

uint64_t sub_10002BE8C(int a1)
{
  int v20 = a1;
  uint64_t v19 = sub_100088F20();
  uint64_t v1 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000697C(&qword_1000A5B98);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = sub_10000697C(&qword_1000A5BA0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100089110();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10000697C(&qword_1000A5BA8);
  sub_1000890F0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  char v22 = 4;
  uint64_t v15 = sub_100088DF0();
  char v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v9, 1, 1, v15);
  v16(v6, 1, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v19);
  sub_10002DA70();
  uint64_t v17 = sub_100088E40();
  char v21 = v20;
  swift_retain();
  sub_100088E20();
  swift_release();
  return v17;
}

uint64_t sub_10002C1A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v1 = sub_10000697C(&qword_1000A5BA0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100089100();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100089480();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = sub_10008A3E0();
  __chkstk_darwin(v9 - 8);
  uint64_t v17 = sub_100089110();
  uint64_t v10 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_10008A3D0();
  sub_100089450();
  uint64_t v11 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v12(v7, enum case for LocalizedStringResource.BundleDescription.main(_:), v4);
  sub_100089120();
  sub_10008A3D0();
  sub_100089450();
  v12(v7, v11, v4);
  sub_100089120();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v3, 0, 1, v17);
  uint64_t v13 = v18;
  sub_100088E60();
  uint64_t v14 = sub_100088E50();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 0, 1, v14);
}

uint64_t sub_10002C520()
{
  uint64_t v0 = sub_100089110();
  sub_10002E708(v0, qword_1000ABFB0);
  sub_10002AD84(v0, (uint64_t)qword_1000ABFB0);
  return sub_1000890F0();
}

uint64_t sub_10002C58C()
{
  return sub_10002C5C4(qword_1000A99D0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000ABFB0);
}

uint64_t sub_10002C5C4(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return sub_10002AD84(v5, a3);
}

uint64_t sub_10002C620@<X0>(uint64_t a1@<X8>)
{
  return sub_10002C658(qword_1000A99D0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000ABFB0, a1);
}

uint64_t sub_10002C658@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_10002AD84(v7, a3);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t sub_10002C708(uint64_t a1)
{
  return sub_10002C740(a1, qword_1000A99D0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000ABFB0);
}

uint64_t sub_10002C740(uint64_t a1, void *a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v7 = a3(0);
  uint64_t v8 = sub_10002AD84(v7, a4);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v8, a1, v7);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, v7);
}

uint64_t (*sub_10002C82C())()
{
  if (qword_1000A99D0[0] != -1) {
    swift_once();
  }
  uint64_t v0 = sub_100089110();
  sub_10002AD84(v0, (uint64_t)qword_1000ABFB0);
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_10002C8C0()
{
  uint64_t v0 = sub_10000697C(&qword_1000A5BB8);
  __chkstk_darwin(v0 - 8);
  sub_10002DDDC();
  sub_100088EF0();
  return sub_100088EE0();
}

uint64_t sub_10002C998@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100088E10();
  *a1 = v3;
  return result;
}

uint64_t sub_10002C9D4()
{
  return sub_100088E20();
}

uint64_t (*sub_10002CA0C(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_100088E00();
  return sub_10002BB60;
}

void sub_10002CA68(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t sub_10002CAB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100026FEC();
  unint64_t v5 = sub_10002E6A0();

  return static URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_10002CB28@<X0>(uint64_t a1@<X8>)
{
  return sub_10002CB60(qword_1000A99D0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000ABFB0, a1);
}

uint64_t sub_10002CB60@<X0>(void *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_10002AD84(v7, a3);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t sub_10002CC14(uint64_t a1)
{
  unint64_t v2 = sub_100026FEC();

  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_10002CC54()
{
  uint64_t v0 = sub_10000697C(&qword_1000A5BB8);
  __chkstk_darwin(v0 - 8);
  sub_100088EF0();
  return sub_100088EE0();
}

uint64_t sub_10002CD28(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  unint64_t v5 = sub_100026FEC();
  unint64_t v6 = sub_10002E64C();
  unint64_t v7 = sub_10002E6A0();
  *unint64_t v4 = v2;
  v4[1] = sub_10002CDF4;
  return URLRepresentableIntent<>.perform()(a2, v5, v6, v7);
}

uint64_t sub_10002CDF4()
{
  uint64_t v2 = *v1;
  uint64_t result = swift_task_dealloc();
  if (v0)
  {
    unint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
  return result;
}

uint64_t sub_10002CEFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002DAC4();
  *a1 = result;
  return result;
}

uint64_t sub_10002CF24(uint64_t a1)
{
  unint64_t v2 = sub_10002DDDC();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_10002CF60(unsigned __int8 a1)
{
  sub_10008A670();
  sub_10008A420();
  swift_bridgeObjectRelease();
  Swift::Int v2 = sub_10008A6A0();

  return sub_10002D060(a1, v2);
}

unint64_t sub_10002D060(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEA00000000006B63;
      uint64_t v8 = 0x6F6C63646C726F77;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x6D72616C61;
          break;
        case 2:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x72656D6974;
          break;
        case 3:
          uint64_t v8 = 0x63746177706F7473;
          unint64_t v7 = 0xE900000000000068;
          break;
        default:
          break;
      }
      uint64_t v9 = 0x6F6C63646C726F77;
      unint64_t v10 = 0xEA00000000006B63;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xE500000000000000;
          if (v8 == 0x6D72616C61) {
            goto LABEL_14;
          }
          goto LABEL_15;
        case 2:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v9 = 0x72656D6974;
          goto LABEL_11;
        case 3:
          unint64_t v10 = 0xE900000000000068;
          if (v8 == 0x63746177706F7473) {
            goto LABEL_14;
          }
          goto LABEL_15;
        default:
LABEL_11:
          if (v8 != v9) {
            goto LABEL_15;
          }
LABEL_14:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_15:
          char v11 = sub_10008A650();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_10002D268()
{
  uint64_t v0 = sub_10000697C(&qword_1000A5C88);
  __chkstk_darwin(v0 - 8);
  uint64_t v35 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10000697C(&qword_1000A5BA0);
  __chkstk_darwin(v2 - 8);
  uint64_t v51 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100089100();
  uint64_t v4 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100089480();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10008A3E0();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100089110();
  uint64_t v13 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  sub_10000697C(&qword_1000A5C90);
  uint64_t v14 = sub_10000697C(&qword_1000A5C98);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v43 = *(void *)(v15 + 72);
  uint64_t v16 = v14 - 8;
  uint64_t v47 = v14 - 8;
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = swift_allocObject();
  uint64_t v36 = v18;
  uint64_t v37 = v12;
  *(_OWORD *)(v18 + 16) = xmmword_100097F60;
  uint64_t v34 = v18 + v17 + *(int *)(v16 + 56);
  *(unsigned char *)(v18 + v17) = 0;
  unint64_t v19 = v18 + v17;
  unint64_t v38 = v18 + v17;
  sub_10008A3D0();
  sub_100089450();
  unsigned int v42 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  int v20 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  uint64_t v41 = v4 + 104;
  uint64_t v50 = v20;
  uint64_t v46 = v6;
  uint64_t v21 = v49;
  ((void (*)(char *))v20)(v6);
  sub_100089120();
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v40 = v13 + 56;
  uint64_t v22 = v48;
  v39(v51, 1, 1, v48);
  uint64_t v23 = v35;
  sub_100088E80();
  uint64_t v45 = sub_100088E90();
  uint64_t v24 = *(void *)(v45 - 8);
  uint64_t v44 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
  uint64_t v25 = v24 + 56;
  v44(v23, 0, 1, v45);
  v33[3] = v25;
  sub_100088EA0();
  uint64_t v26 = v43;
  uint64_t v34 = v19 + v43 + *(int *)(v47 + 56);
  *(unsigned char *)(v19 + v43) = 1;
  sub_10008A3D0();
  v33[1] = v9;
  sub_100089450();
  uint64_t v27 = v42;
  v50(v46, v42, v21);
  sub_100089120();
  uint64_t v28 = v39;
  v39(v51, 1, 1, v22);
  sub_100088E80();
  v44(v23, 0, 1, v45);
  sub_100088EA0();
  uint64_t v34 = 2 * v26;
  v33[2] = v38 + 2 * v26 + *(int *)(v47 + 56);
  *(unsigned char *)(v38 + 2 * v26) = 3;
  sub_10008A3D0();
  sub_100089450();
  v50(v46, v27, v49);
  sub_100089120();
  uint64_t v29 = v51;
  v28(v51, 1, 1, v48);
  sub_100088E80();
  unint64_t v30 = v44;
  uint64_t v31 = v45;
  v44(v23, 0, 1, v45);
  sub_100088EA0();
  *(unsigned char *)(v38 + v34 + v43) = 2;
  sub_10008A3D0();
  sub_100089450();
  v50(v46, v42, v49);
  sub_100089120();
  v39(v29, 1, 1, v48);
  sub_100088E80();
  v30(v23, 0, 1, v31);
  sub_100088EA0();
  return sub_10002AB24(v36);
}

uint64_t sub_10002DA24(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1000A2D38;
  v6._object = a2;
  unint64_t v4 = sub_10008A630(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

unint64_t sub_10002DA70()
{
  unint64_t result = qword_1000A5BB0;
  if (!qword_1000A5BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5BB0);
  }
  return result;
}

uint64_t sub_10002DAC4()
{
  uint64_t v18 = sub_100088F20();
  uint64_t v0 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A5B98);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = sub_10000697C(&qword_1000A5BA0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100089110();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10000697C(&qword_1000A5BA8);
  sub_1000890F0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  char v20 = 4;
  uint64_t v14 = sub_100088DF0();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v8, 1, 1, v14);
  v15(v5, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v18);
  sub_10002DA70();
  uint64_t v16 = sub_100088E40();
  char v19 = 3;
  swift_retain();
  sub_100088E20();
  swift_release();
  return v16;
}

unint64_t sub_10002DDDC()
{
  unint64_t result = qword_1000A5BC0;
  if (!qword_1000A5BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5BC0);
  }
  return result;
}

unint64_t sub_10002DE34()
{
  unint64_t result = qword_1000A5BC8;
  if (!qword_1000A5BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5BC8);
  }
  return result;
}

unint64_t sub_10002DE8C()
{
  unint64_t result = qword_1000A5BD0;
  if (!qword_1000A5BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5BD0);
  }
  return result;
}

unint64_t sub_10002DEE4()
{
  unint64_t result = qword_1000A5BD8;
  if (!qword_1000A5BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5BD8);
  }
  return result;
}

unint64_t sub_10002DF3C()
{
  unint64_t result = qword_1000A5BE0;
  if (!qword_1000A5BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5BE0);
  }
  return result;
}

void *sub_10002DF90()
{
  return &protocol witness table for String;
}

unint64_t sub_10002DFA4()
{
  unint64_t result = qword_1000A5BE8;
  if (!qword_1000A5BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5BE8);
  }
  return result;
}

unint64_t sub_10002DFFC()
{
  unint64_t result = qword_1000A5BF0;
  if (!qword_1000A5BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5BF0);
  }
  return result;
}

unint64_t sub_10002E054()
{
  unint64_t result = qword_1000A5BF8;
  if (!qword_1000A5BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5BF8);
  }
  return result;
}

unint64_t sub_10002E0AC()
{
  unint64_t result = qword_1000A5C00;
  if (!qword_1000A5C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C00);
  }
  return result;
}

unint64_t sub_10002E104()
{
  unint64_t result = qword_1000A5C08;
  if (!qword_1000A5C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C08);
  }
  return result;
}

uint64_t sub_10002E158()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10002E1AC()
{
  unint64_t result = qword_1000A5C18;
  if (!qword_1000A5C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C18);
  }
  return result;
}

unint64_t sub_10002E204()
{
  unint64_t result = qword_1000A5C20;
  if (!qword_1000A5C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C20);
  }
  return result;
}

unint64_t sub_10002E25C()
{
  unint64_t result = qword_1000A5C28;
  if (!qword_1000A5C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C28);
  }
  return result;
}

uint64_t sub_10002E2B0()
{
  return sub_10001845C(&qword_1000A5C30, &qword_1000A5C38);
}

unint64_t sub_10002E2F0()
{
  unint64_t result = qword_1000A5C40;
  if (!qword_1000A5C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C40);
  }
  return result;
}

unint64_t sub_10002E34C()
{
  unint64_t result = qword_1000A5C48;
  if (!qword_1000A5C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C48);
  }
  return result;
}

unint64_t sub_10002E3A4()
{
  unint64_t result = qword_1000A5C50;
  if (!qword_1000A5C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C50);
  }
  return result;
}

unint64_t sub_10002E3FC()
{
  unint64_t result = qword_1000A5C58;
  if (!qword_1000A5C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C58);
  }
  return result;
}

uint64_t sub_10002E450()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ClockDestination(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClockDestination(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002E5C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockDestination()
{
  return &type metadata for ClockDestination;
}

ValueMetadata *type metadata accessor for OpenTabIntent()
{
  return &type metadata for OpenTabIntent;
}

uint64_t sub_10002E610()
{
  return sub_10001845C(&qword_1000A5C68, &qword_1000A5C70);
}

unint64_t sub_10002E64C()
{
  unint64_t result = qword_1000A5C78;
  if (!qword_1000A5C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C78);
  }
  return result;
}

unint64_t sub_10002E6A0()
{
  unint64_t result = qword_1000A5C80;
  if (!qword_1000A5C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5C80);
  }
  return result;
}

uint64_t sub_10002E6F4(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t *sub_10002E708(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10002E76C(uint64_t a1)
{
  sub_10008A500();
  uint64_t v6 = sub_10008A380();
  uint64_t result = sub_10008A4E0();
  if (result < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a1)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    do
    {
      if (!v4 || v4 % a1)
      {
        if (v3 == v4)
        {
          sub_10008A520();
          sub_10008A5B0();
          swift_getWitnessTable();
          sub_10008A510();
          sub_10008A500();
          sub_10008A4F0();
          return v6;
        }
      }
      else
      {
        uint64_t result = v4 - a1;
        if (__OFSUB__(v4, a1)) {
          goto LABEL_15;
        }
        if (v4 < result) {
          goto LABEL_16;
        }
        sub_10008A520();
        sub_10008A5B0();
        swift_getWitnessTable();
        sub_10008A510();
        sub_10008A500();
        uint64_t result = sub_10008A4F0();
        if (v3 == v4) {
          return v6;
        }
      }
    }
    while (!__OFADD__(v4++, 1));
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10002E938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v33 = a2;
  uint64_t v32 = sub_1000893C0();
  uint64_t v2 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v29 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100089520();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v8 - 8);
  uint64_t v28 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000697C(&qword_1000A5CC8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100088FF0();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = __chkstk_darwin(v16);
  char v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v15, 1, 1, v4, v18);
  uint64_t v21 = sub_100089580();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v12, 1, 1, v21);
  sub_100088FE0();
  sub_100088F80();
  sub_100089500();
  uint64_t v22 = (uint64_t)v28;
  uint64_t v23 = v31;
  sub_1000894F0();
  uint64_t v24 = v29;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v25 = v20;
  uint64_t v26 = v32;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v24, v23, v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v22, 1, v26) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v33, v24, v26);
    return sub_10000F024(v22, &qword_1000A47F8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v24, v26);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v33, v22, v26);
  }
}

uint64_t sub_10002EDDC()
{
  uint64_t v0 = sub_100089580();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000893B0();
  uint64_t v8 = sub_100089540();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  v9(v7, v4);
  sub_100089570();
  sub_1000893B0();
  uint64_t v10 = sub_100089540();
  v9(v7, v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (!__OFSUB__(v8, v10)) {
    return sub_100089340();
  }
  __break(1u);
  return result;
}

uint64_t sub_10002EFB0(uint64_t a1)
{
  v13[1] = a1;
  uint64_t v1 = sub_100089580();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000893C0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000893B0();
  uint64_t v9 = sub_100089540();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v8, v5);
  sub_100089570();
  sub_1000893B0();
  uint64_t v11 = sub_100089540();
  v10(v8, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (!__OFSUB__(v9, v11)) {
    return sub_100089340();
  }
  __break(1u);
  return result;
}

uint64_t sub_10002F184()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v1 = sub_10008A3F0();
  [v0 setDateFormat:v1];

  Class isa = sub_100089550().super.isa;
  [v0 setTimeZone:isa];

  Class v3 = sub_100089360().super.isa;
  id v4 = [v0 stringFromDate:v3];

  uint64_t v5 = sub_10008A400();
  return v5;
}

void *sub_10002F274()
{
  return &unk_100099520;
}

double sub_10002F280()
{
  return 1.0;
}

void *sub_10002F28C()
{
  return &unk_100099530;
}

double sub_10002F298()
{
  return 1.2;
}

void *sub_10002F2AC()
{
  return &unk_100099540;
}

double sub_10002F2B8()
{
  return 1.0;
}

void *sub_10002F2C4()
{
  return &unk_100099550;
}

double sub_10002F2D0()
{
  return 1.57079633;
}

void *sub_10002F2DC()
{
  return &unk_100099558;
}

double sub_10002F2E8()
{
  return 4.71238898;
}

uint64_t sub_10002F2F4(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A4B70);
  __chkstk_darwin(v2 - 8);
  id v4 = (uint64_t *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_1000899F0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CapMaxContentSizeCategory();
  __n128 v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, v5, v10);
  sub_1000169C8(v4);
  sub_100016E9C((uint64_t)v4, (uint64_t)v8, (uint64_t)v12);
  sub_100089F70();
  return sub_10002F4B0((uint64_t)v12);
}

uint64_t sub_10002F4B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CapMaxContentSizeCategory();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002F50C()
{
  uint64_t v0 = sub_100089480();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = self;
  sub_100089450();
  sub_100089410();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  NSString v5 = sub_10008A3F0();
  swift_bridgeObjectRelease();
  id v6 = [v4 numberingSystemForLocaleID:v5];

  if (v6)
  {
    uint64_t v7 = sub_10008A400();
    uint64_t v9 = v8;

    if (v9)
    {
      BOOL v10 = v7 == 1650553441 && v9 == 0xE400000000000000;
      if (v10 || (sub_10008A650() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v7 == 1635149156 && v9 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      char v13 = sub_10008A650();
      swift_bridgeObjectRelease();
      if (v13) {
        return 2;
      }
    }
  }
  return 0;
}

uint64_t sub_10002F6F0(char a1)
{
  return *(void *)&aLatn_0[8 * a1];
}

uint64_t sub_10002F70C(char *a1, char *a2)
{
  return sub_10002F718(*a1, *a2);
}

uint64_t sub_10002F718(char a1, char a2)
{
  if (*(void *)&aLatn_0[8 * a1] == *(void *)&aLatn_0[8 * a2]) {
    char v2 = 1;
  }
  else {
    char v2 = sub_10008A650();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

Swift::Int sub_10002F780()
{
  return sub_10002F788();
}

Swift::Int sub_10002F788()
{
  return sub_10008A6A0();
}

uint64_t sub_10002F7E8()
{
  return sub_10002F7F0();
}

uint64_t sub_10002F7F0()
{
  sub_10008A420();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002F830()
{
  return sub_10002F838();
}

Swift::Int sub_10002F838()
{
  return sub_10008A6A0();
}

uint64_t sub_10002F894@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100032F08(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_10002F8C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002F6F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10002F8F0()
{
  byte_1000AA468 = 1;
  qword_1000AA470 = 0xE500000000000000;
}

uint64_t sub_10002F90C()
{
  uint64_t v0 = sub_100089660();
  sub_10002E708(v0, qword_1000ABFC8);
  sub_10002AD84(v0, (uint64_t)qword_1000ABFC8);
  if (qword_1000AA460 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return sub_100089650();
}

uint64_t sub_10002F9E0()
{
  return sub_100031750(&qword_1000AA478, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)qword_1000ABFC8);
}

uint64_t sub_10002FA18@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000AA478 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100089660();
  uint64_t v3 = sub_10002AD84(v2, (uint64_t)qword_1000ABFC8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void sub_10002FAC0(uint64_t a1, unint64_t a2)
{
  if (qword_1000AA478 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_100089660();
  sub_10002AD84(v4, (uint64_t)qword_1000ABFC8);
  swift_bridgeObjectRetain_n();
  NSString v5 = sub_100089640();
  os_log_type_t v6 = sub_10008A570();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_10000F1AC(a1, a2, &v8);
    sub_10008A590();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "WorldClockWidget: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10002FC68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v2 = sub_100089520();
  __chkstk_darwin(v2 - 8);
  uint64_t v48 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100089580();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  __chkstk_darwin(v4);
  uint64_t v45 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A5CD0);
  __chkstk_darwin(v6 - 8);
  uint64_t v44 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100089320();
  __chkstk_darwin(v8 - 8);
  uint64_t v43 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100089260();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  unint64_t v38 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100089280();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v37 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100089250();
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_1000891A0();
  uint64_t v15 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000891D0();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1000891E0();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100089300();
  __chkstk_darwin(v26 - 8);
  sub_1000892F0();
  v51._countAndFlagsBits = 0;
  v51._object = (void *)0xE000000000000000;
  sub_1000892E0(v51);
  sub_1000891C0();
  sub_100089190();
  sub_1000891B0();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v34);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  sub_1000892B0();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  v52._countAndFlagsBits = 58;
  v52._object = (void *)0xE100000000000000;
  sub_1000892E0(v52);
  sub_100089240();
  sub_1000892C0();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
  v53._countAndFlagsBits = 0;
  v53._object = (void *)0xE000000000000000;
  sub_1000892E0(v53);
  uint64_t v28 = v38;
  uint64_t v27 = v39;
  uint64_t v29 = v41;
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v38, enum case for Date.FormatStyle.Symbol.DayPeriod.Width.abbreviated(_:), v41);
  uint64_t v30 = v37;
  sub_100089270();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  sub_1000892D0();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v42);
  v54._countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  sub_1000892E0(v54);
  sub_100089310();
  uint64_t v31 = sub_100089480();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v44, 1, 1, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v49, v47);
  sub_100089500();
  return sub_100089350();
}

uint64_t sub_10003030C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v2 = sub_100089520();
  __chkstk_darwin(v2 - 8);
  uint64_t v36 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100089580();
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v33 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A5CD0);
  __chkstk_darwin(v6 - 8);
  uint64_t v32 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100089320();
  __chkstk_darwin(v8 - 8);
  uint64_t v31 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100089250();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_1000891A0();
  uint64_t v13 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000891D0();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000891E0();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100089300();
  __chkstk_darwin(v24 - 8);
  sub_1000892F0();
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  sub_1000892E0(v39);
  sub_1000891C0();
  sub_100089190();
  sub_1000891B0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v28);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  sub_1000892B0();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  v40._countAndFlagsBits = 58;
  v40._object = (void *)0xE100000000000000;
  sub_1000892E0(v40);
  sub_100089240();
  sub_1000892C0();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  sub_1000892E0(v41);
  sub_100089310();
  uint64_t v25 = sub_100089480();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v32, 1, 1, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, v37, v35);
  sub_100089500();
  return sub_100089350();
}

uint64_t sub_10003082C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v32 = a2;
  uint64_t v31 = sub_100089490();
  uint64_t v29 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100089520();
  __chkstk_darwin(v4 - 8);
  uint64_t v28 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100089580();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  __chkstk_darwin(v6);
  uint64_t v25 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A5CD0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100089320();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = sub_100089260();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100089280();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100089300();
  __chkstk_darwin(v20 - 8);
  sub_1000892F0();
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  sub_1000892E0(v33);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for Date.FormatStyle.Symbol.DayPeriod.Width.abbreviated(_:), v12);
  sub_100089270();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_1000892D0();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  sub_1000892E0(v34);
  sub_100089310();
  sub_100089450();
  uint64_t v21 = sub_100089480();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 0, 1, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v30, v27);
  uint64_t v22 = v29;
  uint64_t v23 = v31;
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v3, enum case for Calendar.Identifier.gregorian(_:), v31);
  sub_1000894A0();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v3, v23);
  return sub_100089350();
}

uint64_t sub_100030CEC()
{
  uint64_t v0 = sub_100089420();
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v1 = 0;
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100030D48()
{
  uint64_t v0 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v9[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v5 = &v9[-v4];
  sub_100089530();
  uint64_t v6 = sub_100089580();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v2, 1, v6) == 1)
  {
    sub_100089560();
    sub_10000F024((uint64_t)v2, qword_1000A4BF8);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v5, v2, v6);
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  return sub_100089D90();
}

uint64_t sub_100030EC8()
{
  uint64_t v19 = sub_100089DD0();
  uint64_t v0 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - v7;
  sub_100089530();
  uint64_t v9 = sub_100089580();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_100089560();
    sub_10000F024((uint64_t)v5, qword_1000A4BF8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v8, v5, v9);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  uint64_t v11 = sub_100089D90();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  sub_100089DC0();
  uint64_t v16 = sub_100089E00();
  sub_10000B7E0(v11, v13, v15);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v19);
  return v16;
}

uint64_t sub_100031154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  uint64_t v2 = sub_100089070();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  __chkstk_darwin(v2);
  uint64_t v35 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100089330();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  uint64_t v47 = v5;
  __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100089250();
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100089210();
  uint64_t v10 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100089220();
  uint64_t v13 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  char v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000892A0();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v35 - v21;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v35 - v24;
  uint64_t v45 = sub_100089090();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v38 = (char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100088F70();
  sub_100089200();
  sub_1000891F0();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v40);
  sub_100089180();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v39);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v19, v16);
  sub_100089230();
  sub_100089290();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
  v27(v22, v16);
  uint64_t v28 = v44;
  sub_100089170();
  v27(v25, v16);
  uint64_t v29 = (uint64_t)v38;
  sub_100033254(&qword_1000A5CD8, (void (*)(uint64_t))&type metadata accessor for Date.AttributedStyle);
  uint64_t v30 = v28;
  uint64_t v31 = v46;
  sub_1000893A0();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v31);
  if (qword_1000AA480 != -1) {
    swift_once();
  }
  uint64_t v32 = sub_100089480();
  sub_10002AD84(v32, (uint64_t)qword_1000ABFE0);
  if ((sub_1000317AC() & 1) == 0)
  {
    uint64_t v33 = (uint64_t)v35;
    sub_100089080();
    sub_100031E88(v33, v29);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v33, v37);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v49, v29, v45);
}

uint64_t sub_100031718()
{
  return sub_100031750(&qword_1000AA480, (uint64_t (*)(void))&type metadata accessor for Locale, (uint64_t)qword_1000ABFE0);
}

uint64_t sub_100031750(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return sub_10002AD84(v5, a3);
}

uint64_t sub_1000317AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000697C(&qword_1000A5CD0);
  __chkstk_darwin(v2 - 8);
  uint64_t v37 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100089480();
  uint64_t v44 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v38 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v37 - v6;
  uint64_t v7 = sub_100089460();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v40 = (char *)&v37 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v37 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v37 - v16;
  sub_100089470();
  uint64_t v39 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  v39(v14, enum case for Locale.HourCycle.oneToTwentyFour(_:), v7);
  sub_100033254(&qword_1000A5CE0, (void (*)(uint64_t))&type metadata accessor for Locale.HourCycle);
  sub_10008A470();
  sub_10008A470();
  if (v47 == v45 && v48 == v46) {
    char v18 = 1;
  }
  else {
    char v18 = sub_10008A650();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v14, v7);
  v19(v17, v7);
  uint64_t v21 = v43;
  uint64_t v20 = v44;
  uint64_t v22 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v1, v42);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
    return 1;
  }
  sub_100089470();
  v39(v41, enum case for Locale.HourCycle.zeroToTwentyThree(_:), v7);
  sub_10008A470();
  sub_10008A470();
  if (v47 == v45 && v48 == v46) {
    char v23 = 1;
  }
  else {
    char v23 = sub_10008A650();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19(v41, v7);
  v19(v40, v7);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v44 + 8);
  v24(v43, v22);
  if (v23) {
    return 1;
  }
  uint64_t v25 = self;
  NSString v26 = sub_10008A3F0();
  uint64_t v27 = v38;
  sub_100089450();
  Class isa = sub_100089430().super.isa;
  v24(v27, v22);
  id v29 = [v25 dateFormatFromTemplate:v26 options:0 locale:isa];

  if (!v29) {
    return 1;
  }
  uint64_t v30 = sub_10008A400();
  uint64_t v32 = v31;

  uint64_t v47 = v30;
  uint64_t v48 = v32;
  uint64_t v45 = 97;
  unint64_t v46 = 0xE100000000000000;
  uint64_t v33 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v37, 1, 1, v22);
  sub_100032F54();
  sub_10008A5A0();
  uint64_t v35 = v34 & 1;
  sub_10000F024(v33, &qword_1000A5CD0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t sub_100031D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100031D9C(a1, a2, a3, &qword_1000A5E38);
}

uint64_t sub_100031D40(uint64_t a1, uint64_t a2)
{
  return sub_100031E00(a1, a2, &qword_1000A5E38);
}

void sub_100031D4C()
{
}

void sub_100031D74()
{
}

uint64_t sub_100031D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100031D9C(a1, a2, a3, &qword_1000A5E30);
}

uint64_t sub_100031D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_10008A3C0() & 1;
}

uint64_t sub_100031DF4(uint64_t a1, uint64_t a2)
{
  return sub_100031E00(a1, a2, &qword_1000A5E30);
}

uint64_t sub_100031E00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10008A3A0();
}

void sub_100031E44()
{
}

void sub_100031E6C()
{
}

uint64_t sub_100031E88(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A5DD8);
  __chkstk_darwin(v3 - 8);
  uint64_t v63 = &v60[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v62 = sub_10000697C(&qword_1000A5DE0);
  __chkstk_darwin(v62);
  uint64_t v61 = &v60[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000697C(&qword_1000A5DE8);
  __chkstk_darwin(v6 - 8);
  uint64_t v76 = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v75 = sub_100089000();
  uint64_t v8 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v70 = &v60[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v74 = &v60[-v11];
  uint64_t v90 = sub_100089050();
  uint64_t v12 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v93 = &v60[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v83 = sub_100089060();
  uint64_t v14 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  char v88 = &v60[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  uint64_t v91 = &v60[-v17];
  uint64_t v18 = sub_10000697C(&qword_1000A5DF0);
  __chkstk_darwin(v18 - 8);
  char v87 = &v60[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = sub_100089070();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  char v23 = &v60[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = sub_10000697C(&qword_1000A5DF8);
  uint64_t v25 = v24 - 8;
  __n128 v26 = __chkstk_darwin(v24);
  uint64_t v28 = &v60[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v80 = *(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v21 + 16);
  v80(v23, a1, v20, v26);
  sub_100033254(&qword_1000A5E00, (void (*)(uint64_t))&type metadata accessor for AttributedString.Runs);
  uint64_t v81 = v23;
  sub_10008A460();
  id v29 = &v28[*(int *)(v25 + 44)];
  uint64_t v30 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16);
  uint64_t v89 = v14 + 16;
  uint64_t v84 = (void (**)(unsigned char *, uint64_t))(v14 + 8);
  uint64_t v31 = v28;
  uint64_t v82 = v21 + 16;
  uint64_t v78 = (void (**)(unsigned char *, uint64_t))(v21 + 8);
  uint64_t v79 = (void (**)(unsigned char *))(v12 + 16);
  uint64_t v85 = (void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v86 = v30;
  uint64_t v77 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v73 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32);
  uint64_t v72 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v69 = (void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v68 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16);
  uint64_t v67 = (uint64_t (**)(unsigned char *, uint64_t))(v8 + 88);
  int v66 = enum case for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.amPM(_:);
  uint64_t v65 = (void (**)(unsigned char *, uint64_t))(v8 + 8);
  for (i = (void (**)(unsigned char *, uint64_t))(v12 + 8); ; (*i)(v93, v90))
  {
    uint64_t v32 = v83;
    v86(v91, v29, v83);
    sub_100033254(&qword_1000A5E08, (void (*)(uint64_t))&type metadata accessor for AttributedString.Runs);
    uint64_t v33 = v29;
    char v34 = v88;
    sub_10008A530();
    sub_100033254(&qword_1000A5E10, (void (*)(uint64_t))&type metadata accessor for AttributedString.Runs.Index);
    char v35 = sub_10008A3C0();
    uint64_t v36 = (uint64_t)v31;
    uint64_t v37 = *v84;
    (*v84)(v34, v32);
    v37(v91, v32);
    if (v35) {
      break;
    }
    id v29 = v33;
    uint64_t v38 = (void (*)(char *, void))sub_10008A550();
    uint64_t v39 = v87;
    uint64_t v40 = v90;
    (*v79)(v87);
    v38(v92, 0);
    uint64_t v41 = v81;
    ((void (*)(unsigned char *, uint64_t, uint64_t))v80)(v81, v36, v20);
    sub_10008A540();
    (*v78)(v41, v20);
    (*v85)(v39, 0, 1, v40);
    if ((*v77)(v39, 1, v40) == 1) {
      return sub_10000F024(v36, &qword_1000A5DF8);
    }
    (*v73)(v93, v39, v40);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(void *)&v60[-16] = v43;
    swift_getKeyPath();
    sub_1000332A0();
    uint64_t v44 = (uint64_t)v76;
    sub_100089030();
    swift_release();
    uint64_t v45 = v75;
    if ((*v72)(v44, 1, v75) == 1)
    {
      sub_10000F024(v44, &qword_1000A5DE8);
    }
    else
    {
      unint64_t v46 = v74;
      (*v69)(v74, v44, v45);
      uint64_t v47 = v70;
      (*v68)(v70, v46, v45);
      int v48 = (*v67)(v47, v45);
      if (v48 == v66)
      {
        uint64_t v49 = v29;
        uint64_t v50 = v61;
        sub_100089040();
        uint64_t v51 = swift_getKeyPath();
        __chkstk_darwin(v51);
        *(void *)&v60[-16] = v52;
        swift_getKeyPath();
        Swift::String v53 = v63;
        sub_100089DC0();
        uint64_t v54 = sub_100089DD0();
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 0, 1, v54);
        sub_100033384();
        uint64_t v55 = v45;
        uint64_t v56 = (void (*)(char *, void))sub_1000890A0();
        sub_100033324();
        sub_1000890C0();
        v56(v92, 0);
        uint64_t v57 = (uint64_t)v50;
        id v29 = v49;
        sub_10000F024(v57, &qword_1000A5DE0);
        (*v65)(v74, v55);
      }
      else
      {
        uint64_t v58 = *v65;
        (*v65)(v74, v45);
        v58(v70, v45);
      }
    }
    uint64_t v31 = (unsigned char *)v36;
  }
  (*v85)(v87, 1, 1, v90);
  return sub_10000F024(v36, &qword_1000A5DF8);
}

uint64_t sub_100032900()
{
  uint64_t v0 = sub_100089480();
  sub_10002E708(v0, qword_1000ABFE0);
  sub_10002AD84(v0, (uint64_t)qword_1000ABFE0);
  if (*(void *)(sub_100089420() + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return sub_100089400();
  }
  else
  {
    swift_bridgeObjectRelease();
    return sub_100089450();
  }
}

uint64_t sub_100032998@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000AA480 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100089480();
  uint64_t v3 = sub_10002AD84(v2, (uint64_t)qword_1000ABFE0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

unint64_t sub_100032A40()
{
  uint64_t v0 = sub_10000697C(&qword_1000A5CD0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100089480();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = self;
  NSString v8 = sub_10008A3F0();
  sub_100089450();
  Class isa = sub_100089430().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  unint64_t v10 = (unint64_t)[v7 dateFormatFromTemplate:v8 options:0 locale:isa];

  if (v10)
  {
    uint64_t v11 = sub_10008A400();
    uint64_t v13 = v12;

    v16[2] = v11;
    v16[3] = v13;
    v16[0] = 97;
    v16[1] = 0xE100000000000000;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    sub_100032F54();
    sub_10008A5A0();
    unint64_t v10 = (v14 & 1) == 0;
    sub_10000F024((uint64_t)v2, &qword_1000A5CD0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_100032C64()
{
  if (sub_1000317AC()) {
    return 2;
  }
  Class isa = sub_100089430().super.isa;
  id v2 = [(objc_class *)isa positionOfDayPeriodInFormattedTime];

  if ((unint64_t)v2 <= 2) {
    return (2 - v2);
  }
  else {
    return 2;
  }
}

void *sub_100032CBC()
{
  return &unk_100099560;
}

uint64_t sub_100032CC8()
{
  return 0x20000;
}

uint64_t sub_100032CD0(uint64_t a1)
{
  return sub_100032D70(81.0, a1, &qword_1000ABFF8);
}

uint64_t *sub_100032CE8()
{
  if (qword_1000AA488 != -1) {
    swift_once();
  }
  return &qword_1000ABFF8;
}

uint64_t sub_100032D34()
{
  return sub_100015E70(&qword_1000AA488);
}

uint64_t sub_100032D58(uint64_t a1)
{
  return sub_100032D70(98.0, a1, &qword_1000AC000);
}

uint64_t sub_100032D70(CGFloat a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (__CFString *)sub_10008A3F0();
  CTFontCreateWithNameAndOptions(v5, a1, 0, 0x20000uLL);

  uint64_t result = sub_100089D10();
  *a3 = result;
  return result;
}

uint64_t *sub_100032DE8()
{
  if (qword_1000AA490 != -1) {
    swift_once();
  }
  return &qword_1000AC000;
}

uint64_t sub_100032E34()
{
  return sub_100015E70(&qword_1000AA490);
}

uint64_t sub_100032E58()
{
  id v0 = [self systemOrangeColor];
  uint64_t result = sub_100089F80();
  qword_1000AC008 = result;
  return result;
}

uint64_t *sub_100032E98()
{
  if (qword_1000AA498 != -1) {
    swift_once();
  }
  return &qword_1000AC008;
}

uint64_t sub_100032EE4()
{
  return sub_100015E70(qword_1000AA498);
}

uint64_t sub_100032F08(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1000A2F38;
  v6._object = a2;
  unint64_t v4 = sub_10008A630(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

unint64_t sub_100032F54()
{
  unint64_t result = qword_1000A5CE8;
  if (!qword_1000A5CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5CE8);
  }
  return result;
}

unint64_t sub_100032FAC()
{
  unint64_t result = qword_1000A5CF0;
  if (!qword_1000A5CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5CF0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NumberingSystem(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NumberingSystem(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003315CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NumberingSystem()
{
  return &type metadata for NumberingSystem;
}

uint64_t type metadata accessor for WidgetUtilities()
{
  return self;
}

uint64_t sub_1000331B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_100033254(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000332A0()
{
  unint64_t result = qword_1000A5E18;
  if (!qword_1000A5E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5E18);
  }
  return result;
}

uint64_t sub_1000332F4()
{
  return 8;
}

uint64_t sub_100033300()
{
  return swift_release();
}

uint64_t sub_100033308(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_100033314(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_100033324()
{
  unint64_t result = qword_1000A5E20;
  if (!qword_1000A5E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5E20);
  }
  return result;
}

uint64_t sub_100033378()
{
  return 8;
}

unint64_t sub_100033384()
{
  unint64_t result = qword_1000A5E28;
  if (!qword_1000A5E28)
  {
    sub_10000B798(&qword_1000A5DE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5E28);
  }
  return result;
}

uint64_t sub_1000333EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100049F18(v1, a1, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
}

uint64_t sub_100033420(uint64_t a1)
{
  return sub_10004A5AC(a1, v1, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
}

uint64_t sub_100033450@<X0>(uint64_t a1@<X8>)
{
  return sub_1000366CC((void (*)(void))type metadata accessor for WorldClockWidgetViewSingle, a1);
}

uint64_t type metadata accessor for WorldClockWidgetViewSingle(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB580);
}

uint64_t sub_100033488(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000898F0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = sub_10008A560();
  uint64_t v9 = sub_100089B70();
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = sub_10000F1AC(1819242306, 0xE400000000000000, &v12);
    _os_log_impl((void *)&_mh_execute_header, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000898E0();
  swift_getAtKeyPath();
  sub_100033AFC(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

uint64_t sub_100033660@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v23 = a4;
  uint64_t v9 = v5;
  uint64_t v11 = sub_1000898F0();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(a1);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F148(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = sub_10008A560();
    uint64_t v21 = sub_100089B70();
    if (os_log_type_enabled(v21, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v22 + 4) = sub_10000F1AC(a3, v23, &v24);
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1000898E0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1000338E8(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000898F0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    os_log_type_t v8 = sub_10008A560();
    uint64_t v9 = sub_100089B70();
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = sub_10000F1AC(0xD00000000000001CLL, 0x800000010008BE70, &v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1000898E0();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v13;
  }
  return a1;
}

uint64_t sub_100033AC4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100059DA4(&qword_1000A4A58, a1);
}

uint64_t sub_100033AD8()
{
  return sub_10003675C(type metadata accessor for WorldClockWidgetViewSingle);
}

uint64_t sub_100033AF0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100033AFC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100033B08()
{
  sub_100089890();
  sub_10004A694(&qword_1000A7A88, (void (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey);
  sub_100089900();
  return v1;
}

uint64_t sub_100033B84@<X0>(unsigned char *a1@<X8>)
{
  sub_100089890();
  sub_10004A694(&qword_1000A7A88, (void (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey);
  uint64_t result = sub_100089900();
  *a1 = v3;
  return result;
}

uint64_t sub_100033C14@<X0>(uint64_t a1@<X8>)
{
  return sub_1000367E4((void (*)(void))type metadata accessor for WorldClockWidgetViewSingle, a1);
}

uint64_t sub_100033C2C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100059DA4(&qword_1000A5E40, a1);
}

uint64_t sub_100033C40()
{
  return sub_1000898B0();
}

uint64_t sub_100033C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100057830(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_100033C90()
{
  char v1 = *(unsigned char *)(v0 + *(int *)(type metadata accessor for WorldClockWidgetViewSingle(0) + 32) + 8);
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_1000338E8(v2, v1);
  swift_release();
  return v3;
}

uint64_t sub_100033CE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10008A260();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000697C(&qword_1000A5E48);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033EC0(v1);
  uint64_t v10 = sub_100034EC0();
  type metadata accessor for WorldClockWidgetViewSingle(0);
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v6);
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(sub_10000697C(&qword_1000A5E50) + 36));
  uint64_t v12 = type metadata accessor for AccentedWidgetBackground(0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v11 + *(int *)(v12 + 20), v6, v3);
  uint64_t *v11 = v10;
  sub_10000F148((uint64_t)v9, a1, &qword_1000A5E48);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_10000F024((uint64_t)v9, &qword_1000A5E48);
}

uint64_t sub_100033EC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WorldClockWidgetViewSingle(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = sub_10000697C(&qword_1000A7A78);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t (**)(uint64_t))((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for WorldClockEntry() + 24)) == 1)
  {
    uint64_t v11 = a1 + *(int *)(v2 + 24);
    uint64_t v12 = *(void *)v11;
    char v13 = *(unsigned char *)(v11 + 8);
    sub_100033AF0(*(void *)v11, v13);
    char v14 = sub_100033488(v12, v13);
    sub_100033AFC(v12, v13);
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)&v10[*(int *)(v8 + 24)]);
    char *v10 = 0;
    v10[1] = v14 & 1;
    sub_100049F18((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7028);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7020, &qword_1000A7028);
    sub_100089AB0();
    return sub_100049F80((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_100049F18(a1, (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WorldClockWidgetViewSingle);
    unint64_t v16 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v17 = swift_allocObject();
    sub_10004A544((uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for WorldClockWidgetViewSingle);
    *uint64_t v7 = sub_100071F2C;
    v7[1] = (uint64_t (*)(uint64_t))v17;
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7028);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7020, &qword_1000A7028);
    return sub_100089AB0();
  }
}

uint64_t sub_1000342B0@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = &a4[*(int *)(type metadata accessor for PlaceholderViewSingle(0) + 24)];
  uint64_t v6 = sub_10008A260();
  uint64_t v7 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a3, v6);
}

uint64_t sub_100034334@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WorldClockWidgetViewSingle(0);
  __chkstk_darwin(v4);
  uint64_t v80 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A4B98);
  __chkstk_darwin(v6 - 8);
  uint64_t v77 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_1000899F0();
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10008A260();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v14);
  unint64_t v16 = (uint64_t *)((char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = sub_10000697C(&qword_1000A7050);
  __chkstk_darwin(v73);
  char v87 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000697C(&qword_1000A7590);
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v76 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000697C(&qword_1000A7A80);
  __chkstk_darwin(v74);
  uint64_t v75 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100089730();
  double v21 = v20;
  uint64_t v22 = v4;
  uint64_t v23 = *(int *)(v4 + 24);
  uint64_t v88 = a1;
  uint64_t v24 = a1 + v23;
  uint64_t v25 = *(void *)(a1 + v23);
  char v26 = *(unsigned char *)(v24 + 8);
  sub_100033AF0(v25, v26);
  char v27 = sub_100033488(v25, v26);
  sub_100033AFC(v25, v26);
  uint64_t v81 = a2;
  if (v27) {
    uint64_t v28 = (double *)sub_100028900();
  }
  else {
    uint64_t v28 = (double *)sub_100028928();
  }
  double v29 = v21 * *v28;
  uint64_t v30 = sub_1000287A8();
  double v31 = sub_100028860();
  double v32 = sub_100028898();
  double v33 = sub_100016338();
  double v34 = sub_100016338();
  double v35 = sub_1000289F0();
  double v36 = sub_100028A28();
  sub_100028CA0(v30, (uint64_t)v92, v29, v31, v32, v33, v34, v35, v36);
  sub_100010E90((uint64_t)v13);
  uint64_t v90 = &type metadata for SmallSizeDimentions;
  uint64_t v91 = &off_1000A2770;
  uint64_t v37 = (_OWORD *)swift_allocObject();
  *(void *)&long long v89 = v37;
  long long v38 = v92[1];
  v37[1] = v92[0];
  v37[2] = v38;
  long long v39 = v92[3];
  v37[3] = v92[2];
  v37[4] = v39;
  sub_100033AF0(v25, v26);
  sub_100070D68((uint64_t)v92);
  char v40 = sub_100033488(v25, v26);
  sub_100033AFC(v25, v26);
  uint64_t v41 = v22;
  uint64_t v42 = v82;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, v82);
  *unint64_t v16 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4FF0);
  swift_storeEnumTagMultiPayload();
  sub_10004A544((uint64_t)v13, (uint64_t)v16 + v14[5], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_100049F00(&v89, (uint64_t)v16 + v14[6]);
  *((unsigned char *)v16 + v14[7]) = 0;
  *((unsigned char *)v16 + v14[8]) = 0;
  *((unsigned char *)v16 + v14[9]) = 0;
  *((unsigned char *)v16 + v14[10]) = 0;
  uint64_t v43 = (char *)v16 + v14[11];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  *(void *)uint64_t v43 = sub_1000896B0();
  v43[8] = v44 & 1;
  *((unsigned char *)v16 + v14[12]) = v40 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))((char *)v16 + v14[13], v42, v84);
  uint64_t v45 = v85;
  uint64_t v46 = v86;
  (*(void (**)(char *, void, uint64_t))(v85 + 104))(v9, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v86);
  sub_10004A694(&qword_1000A5EC8, (void (*)(uint64_t))type metadata accessor for SmallWorldClockView);
  uint64_t v47 = (uint64_t)v87;
  sub_10002F2F4((uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v46);
  sub_100049F80((uint64_t)v16, type metadata accessor for SmallWorldClockView);
  id v48 = [self widgetURL];
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = (uint64_t)v77;
    sub_100089130();

    uint64_t v51 = sub_100089150();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 0, 1, v51);
  }
  else
  {
    uint64_t v52 = sub_100089150();
    uint64_t v50 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v77, 1, 1, v52);
  }
  uint64_t v53 = v81;
  uint64_t v54 = (uint64_t)v80;
  uint64_t v55 = v76;
  sub_10006E024();
  sub_100089E90();
  sub_10000F024(v50, &qword_1000A4B98);
  sub_10000F024(v47, &qword_1000A7050);
  uint64_t v56 = *(void *)v24;
  char v57 = *(unsigned char *)(v24 + 8);
  sub_100033AF0(*(void *)v24, v57);
  char v58 = sub_100033488(v56, v57);
  sub_100033AFC(v56, v57);
  sub_100049F18(v88, v54, type metadata accessor for WorldClockWidgetViewSingle);
  if ((v58 & 1) == 0)
  {
    sub_100049F80(v54, type metadata accessor for WorldClockWidgetViewSingle);
    uint64_t v62 = v79;
    uint64_t v63 = v78;
    uint64_t v64 = (uint64_t)v75;
    uint64_t v65 = v74;
    goto LABEL_11;
  }
  char v59 = *(unsigned char *)(v54 + *(int *)(v41 + 32) + 8);
  uint64_t v60 = swift_retain();
  sub_1000338E8(v60, v59);
  swift_release();
  BOOL v61 = sub_100086B70();
  swift_release();
  sub_100049F80(v54, type metadata accessor for WorldClockWidgetViewSingle);
  uint64_t v62 = v79;
  uint64_t v63 = v78;
  uint64_t v64 = (uint64_t)v75;
  uint64_t v65 = v74;
  if (!v61)
  {
LABEL_11:
    double v66 = 1.0;
    goto LABEL_12;
  }
  double v66 = 1.13;
LABEL_12:
  sub_10008A1E0();
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  sub_100070A6C((uint64_t)v92);
  (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v64, v55, v62);
  uint64_t v71 = (double *)(v64 + *(int *)(v65 + 36));
  *uint64_t v71 = v66;
  v71[1] = v66;
  *((void *)v71 + 2) = v68;
  *((void *)v71 + 3) = v70;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v55, v62);
  return sub_100027078(v64, v53, &qword_1000A7A80);
}

uint64_t sub_100034D20@<X0>(uint64_t *a1@<X8>)
{
  return sub_100059DA4(&qword_1000A4FF0, a1);
}

uint64_t sub_100034D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  sub_100027078(a1, a9, &qword_1000A4B70);
  uint64_t v18 = (int *)type metadata accessor for SmallWorldClockView(0);
  sub_10004A544(a2, a9 + v18[5], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_100049F00(a3, a9 + v18[6]);
  *(unsigned char *)(a9 + v18[7]) = a4;
  *(unsigned char *)(a9 + v18[8]) = a5;
  *(unsigned char *)(a9 + v18[9]) = a6;
  *(unsigned char *)(a9 + v18[10]) = a7;
  uint64_t v19 = a9 + v18[11];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  *(void *)uint64_t v19 = sub_1000896B0();
  *(unsigned char *)(v19 + 8) = v20 & 1;
  *(unsigned char *)(a9 + v18[12]) = a8;
  uint64_t v21 = a9 + v18[13];
  uint64_t v22 = sub_10008A260();
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32);

  return v23(v21, a10, v22);
}

uint64_t sub_100034EC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for WorldClockWidgetViewSingle(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = *(unsigned char *)(v0 + *(int *)(v8 + 40) + 8);
  uint64_t v10 = swift_retain();
  sub_1000338E8(v10, v9);
  swift_release();
  BOOL v11 = sub_100086B70();
  swift_release();
  sub_100049F18(v1, (uint64_t)v7, type metadata accessor for WorldClockWidgetViewSingle);
  if (!v11)
  {
    sub_100049F80((uint64_t)v7, type metadata accessor for WorldClockWidgetViewSingle);
    goto LABEL_6;
  }
  char v12 = v7[*(int *)(type metadata accessor for WorldClockEntry() + 24)];
  sub_100049F80((uint64_t)v7, type metadata accessor for WorldClockWidgetViewSingle);
  if (v12)
  {
LABEL_6:
    sub_100014D5C();
    return swift_retain();
  }
  sub_100010E90((uint64_t)v4);
  BOOL v13 = sub_100082834();
  sub_100049F80((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  if (!v13) {
    return sub_100089FD0();
  }
  sub_100015408();
  return swift_retain();
}

uint64_t sub_100035080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccentedWidgetBackground(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = (char *)v6 + *(int *)(v7 + 20);
  uint64_t v9 = sub_10008A260();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, a2, v9);
  *uint64_t v6 = a1;
  swift_retain();
  sub_100089F70();
  return sub_100049F80((uint64_t)v6, type metadata accessor for AccentedWidgetBackground);
}

uint64_t sub_1000351A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  sub_10004A544(a1, a8, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  uint64_t v15 = (int *)type metadata accessor for WorldClockWidgetViewSingle(0);
  sub_100027078(a2, a8 + v15[5], &qword_1000A4A60);
  uint64_t v16 = a8 + v15[6];
  *(void *)uint64_t v16 = a3;
  *(unsigned char *)(v16 + 8) = a4 & 1;
  uint64_t result = sub_100027078(a5, a8 + v15[7], &qword_1000A59C0);
  uint64_t v18 = a8 + v15[8];
  *(void *)uint64_t v18 = a6;
  *(unsigned char *)(v18 + 8) = a7 & 1;
  return result;
}

uint64_t sub_100035274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10008A260();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000697C(&qword_1000A5E48);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033EC0(v1);
  uint64_t v10 = sub_100034EC0();
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v6);
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(sub_10000697C(&qword_1000A5E50) + 36));
  uint64_t v12 = type metadata accessor for AccentedWidgetBackground(0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v11 + *(int *)(v12 + 20), v6, v3);
  uint64_t *v11 = v10;
  sub_10000F148((uint64_t)v9, a1, &qword_1000A5E48);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_10000F024((uint64_t)v9, &qword_1000A5E48);
}

uint64_t sub_100035450@<X0>(uint64_t a1@<X8>)
{
  return sub_100049F18(v1, a1, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
}

uint64_t sub_100035484(uint64_t a1)
{
  return sub_10004A5AC(a1, v1, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
}

uint64_t sub_1000354B4()
{
  uint64_t v1 = sub_100089B10();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A5E58);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = sub_100089A10();
  *((void *)v7 + 1) = 0x4000000000000000;
  v7[16] = 0;
  uint64_t v8 = sub_10000697C(&qword_1000A5E60);
  sub_100035654(v0, (uint64_t)&v7[*(int *)(v8 + 44)]);
  sub_100089B00();
  sub_10001845C(&qword_1000A5E68, &qword_1000A5E58);
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_10000F024((uint64_t)v7, &qword_1000A5E58);
}

uint64_t sub_100035654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a1;
  uint64_t v60 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A7A08);
  __chkstk_darwin(v3 - 8);
  char v59 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A4FD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v56 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ClockDateText(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v58 = (uint64_t)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v57 = (uint64_t)&v53 - v10;
  uint64_t v11 = sub_10000697C(&qword_1000A7A10);
  __chkstk_darwin(v11 - 8);
  BOOL v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000697C(&qword_1000A7A18);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000697C(&qword_1000A7A20);
  __chkstk_darwin(v18 - 8);
  uint64_t v53 = (uint64_t)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000697C(&qword_1000A7A28);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000697C(&qword_1000A7A30);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24);
  char v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v55 = (uint64_t)&v53 - v29;
  *(void *)BOOL v13 = sub_100089930();
  *((void *)v13 + 1) = 0x4008000000000000;
  v13[16] = 0;
  uint64_t v30 = sub_10000697C(&qword_1000A7A38);
  sub_100035C34(a1, (uint64_t)&v13[*(int *)(v30 + 44)]);
  uint64_t v31 = sub_100089CF0();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000F148((uint64_t)v13, (uint64_t)v17, &qword_1000A7A10);
  double v33 = (uint64_t *)&v17[*(int *)(v15 + 44)];
  uint64_t *v33 = KeyPath;
  v33[1] = v31;
  sub_10000F024((uint64_t)v13, &qword_1000A7A10);
  uint64_t v34 = sub_10008A1C0();
  uint64_t v35 = v53;
  sub_1000364B4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v53, 0.0, 1, 0.0, 1, v34, v36, &qword_1000A7A18, &qword_1000A7A20);
  sub_10000F024((uint64_t)v17, &qword_1000A7A18);
  uint64_t v37 = sub_10008A000();
  uint64_t v38 = swift_getKeyPath();
  sub_10000F148(v35, (uint64_t)v23, &qword_1000A7A20);
  long long v39 = (uint64_t *)&v23[*(int *)(v21 + 44)];
  uint64_t *v39 = v38;
  v39[1] = v37;
  sub_10000F024(v35, &qword_1000A7A20);
  uint64_t v40 = swift_getKeyPath();
  sub_10000F148((uint64_t)v23, (uint64_t)v27, &qword_1000A7A28);
  uint64_t v41 = &v27[*(int *)(v25 + 44)];
  *(void *)uint64_t v41 = v40;
  *((void *)v41 + 1) = 1;
  v41[16] = 0;
  sub_10000F024((uint64_t)v23, &qword_1000A7A28);
  uint64_t v42 = v55;
  sub_100027078((uint64_t)v27, v55, &qword_1000A7A30);
  uint64_t v43 = v56;
  sub_100049F18(v54, v56, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  uint64_t v44 = type metadata accessor for WorldClockCity();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 0, 1, v44);
  uint64_t v45 = type metadata accessor for AlarmEntry();
  uint64_t v46 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v59, 1, 1, v45);
  uint64_t v47 = v57;
  sub_1000748F0(v43, v46, v57);
  sub_10000F148(v42, (uint64_t)v27, &qword_1000A7A30);
  uint64_t v48 = v47;
  uint64_t v49 = v58;
  sub_100049F18(v47, v58, type metadata accessor for ClockDateText);
  uint64_t v50 = v60;
  sub_10000F148((uint64_t)v27, v60, &qword_1000A7A30);
  uint64_t v51 = sub_10000697C(&qword_1000A7A40);
  sub_100049F18(v49, v50 + *(int *)(v51 + 48), type metadata accessor for ClockDateText);
  sub_100049F80(v48, type metadata accessor for ClockDateText);
  sub_10000F024(v42, &qword_1000A7A30);
  sub_100049F80(v49, type metadata accessor for ClockDateText);
  return sub_10000F024((uint64_t)v27, &qword_1000A7A30);
}

uint64_t sub_100035C34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000697C(&qword_1000A7A48);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v22 - v8;
  uint64_t v10 = (void *)(a1 + *(int *)(type metadata accessor for WorldClockCity() + 24));
  uint64_t v11 = v10[1];
  v22[0] = *v10;
  v22[1] = v11;
  sub_100032F54();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_100089E40();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  *(void *)uint64_t v9 = sub_100089920();
  *((void *)v9 + 1) = 0;
  unsigned char v9[16] = 0;
  uint64_t v19 = sub_10000697C(&qword_1000A7A50);
  sub_100035DE4((uint64_t)&v9[*(int *)(v19 + 44)]);
  sub_10000F148((uint64_t)v9, (uint64_t)v6, &qword_1000A7A48);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v14;
  *(unsigned char *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v16;
  uint64_t v20 = sub_10000697C(&qword_1000A7A58);
  sub_10000F148((uint64_t)v6, a2 + *(int *)(v20 + 48), &qword_1000A7A48);
  sub_10005D5A0(v12, v14, v18);
  swift_bridgeObjectRetain();
  sub_10000F024((uint64_t)v9, &qword_1000A7A48);
  sub_10000F024((uint64_t)v6, &qword_1000A7A48);
  sub_10000B7E0(v12, v14, v18);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100035DE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v1 = sub_100089DD0();
  uint64_t v54 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v53 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000697C(&qword_1000A7A60);
  __chkstk_darwin(v3 - 8);
  uint64_t v58 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v50 - v6;
  sub_100083A28(1);
  uint64_t v60 = v8;
  uint64_t v61 = v9;
  sub_100032F54();
  uint64_t v10 = sub_100089E40();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  char v15 = sub_100005184();
  sub_100083A28(v15 & 1);
  uint64_t v60 = v16;
  uint64_t v61 = v17;
  uint64_t v18 = sub_100089D80();
  uint64_t v57 = v19;
  int v55 = v20;
  uint64_t v22 = v21;
  sub_10000B7E0(v10, v12, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL v23 = sub_100084064();
  uint64_t v59 = v18;
  if (v23)
  {
    uint64_t v51 = v1;
    sub_100083D9C();
    uint64_t v24 = v56;
    uint64_t v25 = v53;
    sub_100089990();
    uint64_t v27 = sub_100089E20();
    uint64_t v29 = v28;
    char v31 = v30 & 1;
    sub_100089DC0();
    uint64_t v32 = sub_100089E00();
    uint64_t v50 = v7;
    double v33 = v25;
    uint64_t v34 = v32;
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    uint64_t v52 = v22;
    char v40 = v39 & 1;
    sub_10000B7E0(v27, v29, v31);
    swift_bridgeObjectRelease();
    uint64_t v41 = v33;
    uint64_t v7 = v50;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v41, v51);
    uint64_t v60 = v34;
    uint64_t v61 = v36;
    char v62 = v40;
    uint64_t v63 = v38;
    sub_100089F10();
    char v42 = v40;
    uint64_t v22 = v52;
    sub_10000B7E0(v34, v36, v42);
    swift_bridgeObjectRelease();
    uint64_t v43 = sub_10000697C(&qword_1000A7A68);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v7, 0, 1, v43);
    uint64_t v45 = v57;
    uint64_t v44 = (uint64_t)v58;
  }
  else
  {
    uint64_t v26 = sub_10000697C(&qword_1000A7A68);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v7, 1, 1, v26);
    uint64_t v45 = v57;
    uint64_t v44 = (uint64_t)v58;
    uint64_t v24 = v56;
  }
  char v46 = v55 & 1;
  sub_10000F148((uint64_t)v7, v44, &qword_1000A7A60);
  uint64_t v47 = v59;
  *(void *)uint64_t v24 = v59;
  *(void *)(v24 + 8) = v45;
  *(unsigned char *)(v24 + 16) = v46;
  *(void *)(v24 + 24) = v22;
  uint64_t v48 = sub_10000697C(&qword_1000A7A70);
  sub_10000F148(v44, v24 + *(int *)(v48 + 48), &qword_1000A7A60);
  sub_10005D5A0(v47, v45, v46);
  swift_bridgeObjectRetain();
  sub_10000F024((uint64_t)v7, &qword_1000A7A60);
  sub_10000F024(v44, &qword_1000A7A60);
  sub_10000B7E0(v47, v45, v46);
  return swift_bridgeObjectRelease();
}

double sub_100036238@<D0>(char a1@<W0>, int64x2_t *a2@<X8>)
{
  if (a1)
  {
    uint64_t v3 = sub_100089990();
    int64x2_t v7 = vdupq_n_s64(0x9EuLL);
    uint64_t v8 = "Time-Zone Widget: Abbreviation for 'minute' shown behind (trailing) a number for how many minutes the other tim"
         "e zone is apart from the current one, '+45 MIN'";
  }
  else
  {
    uint64_t v3 = sub_100089990();
    int64x2_t v7 = vdupq_n_s64(0x9BuLL);
    uint64_t v8 = "Time-Zone Widget: Abbreviation for 'hours' shown behind (trailing) a number for how many hours the other time z"
         "one is apart from the current one, '+10 HRS'";
  }
  v7.i64[0] = (uint64_t)v8;
  a2->i64[0] = v3;
  a2->i64[1] = v4;
  a2[1].i8[0] = v5 & 1;
  a2[1].i64[1] = v6;
  a2[2] = v7;
  a2[3].i8[0] = 2;
  return *(double *)v7.i64;
}

uint64_t sub_1000362C0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20 = a19;
  char v21 = a18;
  uint64_t v22 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_10008A560();
    char v31 = (void *)sub_100089B70();
    sub_100089630();

    char v21 = a18;
    uint64_t v20 = a19;
    uint64_t v22 = a17;
  }
  sub_1000897B0();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = v22;
  *(unsigned char *)(a9 + 16) = v21 & 1;
  *(void *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 80) = v36;
  sub_10005D5A0(a16, v22, v21 & 1);

  return swift_bridgeObjectRetain();
}

__n128 sub_1000364B4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_10008A560();
    uint64_t v28 = (void *)sub_100089B70();
    sub_100089630();

    uint64_t v19 = a17;
  }
  sub_1000897B0();
  sub_10000F148(v17, a9, a16);
  uint64_t v29 = (_OWORD *)(a9 + *(int *)(sub_10000697C(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  _OWORD *v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  v29[2] = v33;
  v29[3] = v34;
  return result;
}

uint64_t sub_100036684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004A544(a1, a2, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
}

uint64_t sub_1000366B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000366CC((void (*)(void))type metadata accessor for WorldClockWidgetViewMulti, a1);
}

uint64_t sub_1000366CC@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  return sub_100033660(&qword_1000A4A58, (uint64_t (*)(void))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a2);
}

uint64_t sub_100036744()
{
  return sub_10003675C(type metadata accessor for WorldClockWidgetViewMulti);
}

uint64_t sub_10003675C(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  uint64_t v3 = *(void *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  sub_100033AF0(*(void *)v2, v4);
  char v5 = sub_100033488(v3, v4);
  sub_100033AFC(v3, v4);
  return v5 & 1;
}

uint64_t sub_1000367CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000367E4((void (*)(void))type metadata accessor for WorldClockWidgetViewMulti, a1);
}

uint64_t sub_1000367E4@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  return sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, a2);
}

uint64_t sub_100036858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v122 = a1;
  uint64_t v110 = type metadata accessor for MediumWorldClockView(0);
  __chkstk_darwin(v110);
  uint64_t v102 = (uint64_t)&v94 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000697C(&qword_1000A5E70);
  uint64_t v100 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v101 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v103 = (char *)&v94 - v5;
  uint64_t v112 = sub_10000697C(&qword_1000A5E78);
  __chkstk_darwin(v112);
  Swift::String v115 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000697C(&qword_1000A4B98);
  __chkstk_darwin(v7 - 8);
  uint64_t v99 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v105 = (char *)&v94 - v10;
  uint64_t v118 = type metadata accessor for SmallMultiWorldClockView(0);
  __chkstk_darwin(v118);
  uint64_t v107 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_10000697C(&qword_1000A5E80);
  uint64_t v109 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v104 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v108 = (char *)&v94 - v14;
  uint64_t v119 = sub_10008A280();
  uint64_t v117 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v106 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v94 - v17;
  uint64_t v121 = sub_10000697C(&qword_1000A5E88);
  __chkstk_darwin(v121);
  uint64_t v113 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v116 = (uint64_t)&v94 - v21;
  uint64_t v120 = sub_10000697C(&qword_1000A5E90);
  __chkstk_darwin(v120);
  BOOL v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10008A260();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for PlaceholderViewMulti(0);
  __chkstk_darwin(v28);
  char v30 = (uint64_t *)((char *)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = type metadata accessor for WorldClockEntry();
  uint64_t v32 = v1;
  int v33 = *(unsigned __int8 *)(v1 + *(int *)(v31 + 24));
  uint64_t v34 = type metadata accessor for WorldClockWidgetViewMulti(0);
  if (v33 == 1)
  {
    uint64_t v35 = v32 + *(int *)(v34 + 24);
    uint64_t v36 = *(void *)v35;
    char v37 = *(unsigned char *)(v35 + 8);
    sub_100033AF0(*(void *)v35, v37);
    LODWORD(v119) = sub_100033488(v36, v37);
    sub_100033AFC(v36, v37);
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v27);
    uint64_t *v30 = swift_getKeyPath();
    sub_10000697C(&qword_1000A4A58);
    swift_storeEnumTagMultiPayload();
    *((unsigned char *)v30 + *(int *)(v28 + 20)) = v119 & 1;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))((char *)v30 + *(int *)(v28 + 24), v27, v24);
    sub_100049F18((uint64_t)v30, (uint64_t)v23, type metadata accessor for PlaceholderViewMulti);
    swift_storeEnumTagMultiPayload();
    sub_10004A694(&qword_1000A5EA0, (void (*)(uint64_t))type metadata accessor for PlaceholderViewMulti);
    sub_10006F9A4(&qword_1000A5EA8, &qword_1000A5E88, (void (*)(void))sub_10004A6DC);
    sub_100089AB0();
    return sub_100049F80((uint64_t)v30, type metadata accessor for PlaceholderViewMulti);
  }
  else
  {
    uint64_t v98 = v28;
    uint64_t v96 = v23;
    uint64_t v97 = v34;
    sub_100033660(&qword_1000A4A58, (uint64_t (*)(void))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, (uint64_t)v18);
    uint64_t v39 = v117;
    uint64_t v40 = v119;
    char v95 = *(uint64_t (**)(char *, uint64_t))(v117 + 88);
    int v41 = v95(v18, v119);
    int v42 = enum case for WidgetFamily.systemSmall(_:);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v39 + 8);
    v43(v18, v40);
    if (v41 == v42)
    {
      uint64_t v44 = *(void *)(v32 + *(int *)(v31 + 20));
      uint64_t v45 = v32 + *(int *)(v97 + 24);
      uint64_t v46 = *(void *)v45;
      char v47 = *(unsigned char *)(v45 + 8);
      swift_bridgeObjectRetain();
      sub_100033AF0(v46, v47);
      char v48 = sub_100033488(v46, v47);
      sub_100033AFC(v46, v47);
      uint64_t v49 = (uint64_t)v107;
      sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)&v107[*(int *)(v118 + 28)]);
      *(void *)uint64_t v49 = v44;
      *(unsigned char *)(v49 + 8) = 0;
      *(unsigned char *)(v49 + 9) = v48 & 1;
      id v50 = [self widgetURL];
      if (v50)
      {
        uint64_t v51 = v50;
        uint64_t v52 = (uint64_t)v105;
        sub_100089130();

        uint64_t v53 = sub_100089150();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
      }
      else
      {
        uint64_t v74 = sub_100089150();
        uint64_t v52 = (uint64_t)v105;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v105, 1, 1, v74);
      }
      uint64_t v73 = (uint64_t)v96;
      uint64_t v75 = v110;
      uint64_t v72 = v116;
      uint64_t v76 = v104;
      uint64_t v77 = sub_10004A694(&qword_1000A5EB8, (void (*)(uint64_t))type metadata accessor for SmallMultiWorldClockView);
      uint64_t v78 = v118;
      sub_100089E90();
      sub_10000F024(v52, &qword_1000A4B98);
      sub_100049F80(v49, type metadata accessor for SmallMultiWorldClockView);
      uint64_t v79 = v108;
      uint64_t v80 = v109;
      uint64_t v81 = v114;
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v108, v76, v114);
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v115, v79, v81);
      swift_storeEnumTagMultiPayload();
      uint64_t v123 = v78;
      uint64_t v124 = v77;
      swift_getOpaqueTypeConformance2();
      uint64_t v82 = sub_10004A694(&qword_1000A5EC0, (void (*)(uint64_t))type metadata accessor for MediumWorldClockView);
      uint64_t v123 = v75;
      uint64_t v124 = v82;
      swift_getOpaqueTypeConformance2();
      uint64_t v83 = (uint64_t)v113;
      sub_100089AB0();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v81);
      uint64_t v84 = sub_10000697C(&qword_1000A5E98);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v83, 0, 1, v84);
      sub_100027078(v83, v72, &qword_1000A5E88);
    }
    else
    {
      uint64_t v54 = v97;
      uint64_t v55 = v106;
      sub_100033660(&qword_1000A4A58, (uint64_t (*)(void))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v106);
      uint64_t v56 = v119;
      int v57 = v95((char *)v55, v119);
      int v58 = enum case for WidgetFamily.systemMedium(_:);
      v43((char *)v55, v56);
      if (v57 == v58)
      {
        uint64_t v59 = v102;
        sub_100049F18(v32, v102, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
        uint64_t v60 = v32 + *(int *)(v54 + 24);
        uint64_t v61 = *(void *)v60;
        char v62 = *(unsigned char *)(v60 + 8);
        sub_100033AF0(*(void *)v60, v62);
        char v63 = sub_100033488(v61, v62);
        sub_100033AFC(v61, v62);
        uint64_t v64 = (int *)v110;
        sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, v59 + *(int *)(v110 + 32));
        *(unsigned char *)(v59 + v64[5]) = 0;
        uint64_t v65 = v64[6];
        sub_10000697C(&qword_1000A50B8);
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = xmmword_100097F60;
        *(void *)(v66 + 32) = sub_100089FA0();
        *(void *)(v66 + 40) = sub_100089FF0();
        *(void *)(v66 + 48) = sub_100089FB0();
        *(void *)(v66 + 56) = sub_100089FC0();
        uint64_t v123 = v66;
        sub_10008A4B0();
        *(void *)(v59 + v65) = v123;
        *(unsigned char *)(v59 + v64[7]) = v63 & 1;
        id v67 = [self widgetURL];
        if (v67)
        {
          uint64_t v68 = v67;
          uint64_t v69 = (uint64_t)v99;
          sub_100089130();

          uint64_t v70 = sub_100089150();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, 0, 1, v70);
        }
        else
        {
          uint64_t v85 = sub_100089150();
          uint64_t v69 = (uint64_t)v99;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v99, 1, 1, v85);
        }
        uint64_t v73 = (uint64_t)v96;
        uint64_t v86 = v111;
        uint64_t v87 = v100;
        uint64_t v88 = sub_10004A694(&qword_1000A5EC0, (void (*)(uint64_t))type metadata accessor for MediumWorldClockView);
        long long v89 = v101;
        sub_100089E90();
        sub_10000F024(v69, &qword_1000A4B98);
        sub_100049F80(v59, type metadata accessor for MediumWorldClockView);
        uint64_t v90 = v103;
        (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v103, v89, v86);
        (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v115, v90, v86);
        swift_storeEnumTagMultiPayload();
        uint64_t v91 = sub_10004A694(&qword_1000A5EB8, (void (*)(uint64_t))type metadata accessor for SmallMultiWorldClockView);
        uint64_t v123 = v118;
        uint64_t v124 = v91;
        swift_getOpaqueTypeConformance2();
        uint64_t v123 = (uint64_t)v64;
        uint64_t v124 = v88;
        swift_getOpaqueTypeConformance2();
        uint64_t v92 = (uint64_t)v113;
        sub_100089AB0();
        (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v86);
        uint64_t v93 = sub_10000697C(&qword_1000A5E98);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v92, 0, 1, v93);
        uint64_t v72 = v116;
        sub_100027078(v92, v116, &qword_1000A5E88);
      }
      else
      {
        uint64_t v71 = sub_10000697C(&qword_1000A5E98);
        uint64_t v72 = v116;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v116, 1, 1, v71);
        uint64_t v73 = (uint64_t)v96;
      }
    }
    sub_10000F148(v72, v73, &qword_1000A5E88);
    swift_storeEnumTagMultiPayload();
    sub_10004A694(&qword_1000A5EA0, (void (*)(uint64_t))type metadata accessor for PlaceholderViewMulti);
    sub_10006F9A4(&qword_1000A5EA8, &qword_1000A5E88, (void (*)(void))sub_10004A6DC);
    sub_100089AB0();
    return sub_10000F024(v72, &qword_1000A5E88);
  }
}

uint64_t sub_100037918@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_100027078(a1, a4, &qword_1000A4A60);
  uint64_t v7 = type metadata accessor for PlaceholderViewMulti(0);
  *(unsigned char *)(a4 + *(int *)(v7 + 20)) = a2;
  uint64_t v8 = a4 + *(int *)(v7 + 24);
  uint64_t v9 = sub_10008A260();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);

  return v10(v8, a3, v9);
}

uint64_t sub_1000379B8@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(unsigned char *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 9) = a3;
  uint64_t v6 = a5 + *(int *)(type metadata accessor for SmallMultiWorldClockView(0) + 28);
  uint64_t v7 = sub_10008A260();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32);

  return v8(v6, a4, v7);
}

uint64_t sub_100037A40@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_10004A544(a1, a5, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  uint64_t v9 = (int *)type metadata accessor for MediumWorldClockView(0);
  *(unsigned char *)(a5 + v9[5]) = a2;
  uint64_t v10 = v9[6];
  sub_10000697C(&qword_1000A50B8);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100097F60;
  *(void *)(v11 + 32) = sub_100089FA0();
  *(void *)(v11 + 40) = sub_100089FF0();
  *(void *)(v11 + 48) = sub_100089FB0();
  *(void *)(v11 + 56) = sub_100089FC0();
  sub_10008A4B0();
  *(void *)(a5 + v10) = v11;
  *(unsigned char *)(a5 + v9[7]) = a3;
  uint64_t v12 = a5 + v9[8];
  uint64_t v13 = sub_10008A260();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);

  return v14(v12, a4, v13);
}

uint64_t sub_100037B6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_10004A544(a1, a6, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  uint64_t v11 = (int *)type metadata accessor for WorldClockWidgetViewMulti(0);
  sub_100027078(a2, a6 + v11[5], &qword_1000A4A60);
  uint64_t v12 = a6 + v11[6];
  *(void *)uint64_t v12 = a3;
  *(unsigned char *)(v12 + 8) = a4 & 1;
  return sub_100027078(a5, a6 + v11[7], &qword_1000A59C0);
}

uint64_t sub_100037C1C()
{
  return *v0;
}

uint64_t sub_100037C24(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t sub_100037C2C()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t sub_100037C34(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*sub_100037C3C())()
{
  return nullsub_1;
}

uint64_t sub_100037C5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100038210(type metadata accessor for PlaceholderViewSingle, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, a1);
}

uint64_t sub_100037C88(uint64_t a1)
{
  return sub_1000382B8(a1, type metadata accessor for PlaceholderViewSingle);
}

uint64_t (*sub_100037CA0())(void)
{
  return nullsub_1;
}

uint64_t sub_100037CE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v26 = sub_1000899F0();
  uint64_t v2 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10008A260();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)&v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000840A4((uint64_t)v11);
  sub_100028A68(v31);
  uint64_t v29 = &type metadata for SmallSizeDimentions;
  char v30 = &off_1000A2770;
  uint64_t v15 = (_OWORD *)swift_allocObject();
  *(void *)&long long v28 = v15;
  long long v16 = v31[1];
  v15[1] = v31[0];
  v15[2] = v16;
  long long v17 = v31[3];
  v15[3] = v31[2];
  v15[4] = v17;
  char v18 = *v1;
  int v25 = v1[1];
  uint64_t v19 = type metadata accessor for PlaceholderViewSingle(0);
  (*(void (**)(unsigned char *, char *, uint64_t))(v6 + 16))(v8, &v1[*(int *)(v19 + 24)], v5);
  *uint64_t v14 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4FF0);
  swift_storeEnumTagMultiPayload();
  sub_10004A544((uint64_t)v11, (uint64_t)v14 + v12[5], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_100049F00(&v28, (uint64_t)v14 + v12[6]);
  *((unsigned char *)v14 + v12[7]) = 1;
  *((unsigned char *)v14 + v12[8]) = 0;
  *((unsigned char *)v14 + v12[9]) = v18;
  *((unsigned char *)v14 + v12[10]) = 0;
  uint64_t v20 = (char *)v14 + v12[11];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  *(void *)uint64_t v20 = sub_1000896B0();
  v20[8] = v21 & 1;
  *((unsigned char *)v14 + v12[12]) = v25;
  (*(void (**)(char *, unsigned char *, uint64_t))(v6 + 32))((char *)v14 + v12[13], v8, v5);
  uint64_t v22 = v26;
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v26);
  sub_10004A694(&qword_1000A5EC8, (void (*)(uint64_t))type metadata accessor for SmallWorldClockView);
  sub_10002F2F4((uint64_t)v4);
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v22);
  return sub_100049F80((uint64_t)v14, type metadata accessor for SmallWorldClockView);
}

uint64_t sub_1000380F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100033660(&qword_1000A4A58, (uint64_t (*)(void))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

uint64_t sub_100038148()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PlaceholderViewMulti(0) + 20));
}

uint64_t sub_10003816C(char a1)
{
  uint64_t result = type metadata accessor for PlaceholderViewMulti(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10003819C())(void)
{
  return nullsub_1;
}

uint64_t sub_1000381E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100038210(type metadata accessor for PlaceholderViewMulti, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, a1);
}

uint64_t sub_100038210@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 24);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v8(a3, v6, v7);
}

uint64_t sub_1000382A0(uint64_t a1)
{
  return sub_1000382B8(a1, type metadata accessor for PlaceholderViewMulti);
}

uint64_t sub_1000382B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = sub_10008A260();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_100038334())(void)
{
  return nullsub_1;
}

uint64_t sub_10003837C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v2 = sub_1000893C0();
  __chkstk_darwin(v2 - 8);
  uint64_t v49 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for MediumWorldClockView(0);
  __chkstk_darwin(v56);
  uint64_t v50 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000697C(&qword_1000A5ED0);
  __chkstk_darwin(v52);
  uint64_t v55 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A5ED8);
  __chkstk_darwin(v6 - 8);
  uint64_t v54 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000697C(&qword_1000A5EE0);
  __chkstk_darwin(v53);
  *(void *)&long long v51 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10008A280();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v49 - v14;
  sub_100033660(&qword_1000A4A58, (uint64_t (*)(void))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, (uint64_t)&v49 - v14);
  long long v16 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  int v17 = v16(v15, v9);
  int v18 = enum case for WidgetFamily.systemSmall(_:);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v15, v9);
  if (v17 == v18)
  {
    uint64_t v20 = sub_10008A1B0();
    uint64_t v21 = v51;
    *(void *)long long v51 = v20;
    *(void *)(v21 + 8) = v22;
    uint64_t v23 = sub_10000697C(&qword_1000A5EF8);
    sub_100038B30(v1, v21 + *(int *)(v23 + 44));
    sub_10000F148(v21, v55, &qword_1000A5EE0);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A5EF0, &qword_1000A5EE0);
    sub_10004A694(&qword_1000A5EC0, (void (*)(uint64_t))type metadata accessor for MediumWorldClockView);
    uint64_t v24 = v54;
    sub_100089AB0();
    sub_10000F024(v21, &qword_1000A5EE0);
    uint64_t v25 = sub_10000697C(&qword_1000A5EE8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
    uint64_t v26 = (uint64_t)v24;
    return sub_100027078(v26, v57, &qword_1000A5ED8);
  }
  uint64_t v27 = v55;
  long long v28 = (int *)v56;
  sub_100033660(&qword_1000A4A58, (uint64_t (*)(void))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, (uint64_t)v12);
  int v29 = v16(v12, v9);
  int v30 = enum case for WidgetFamily.systemMedium(_:);
  v19(v12, v9);
  if (v29 == v30)
  {
    sub_10000697C(&qword_1000A4BE8);
    uint64_t v31 = *(void *)(type metadata accessor for WorldClockCity() - 8);
    uint64_t v32 = *(void *)(v31 + 72);
    unint64_t v33 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    uint64_t v34 = swift_allocObject();
    long long v51 = xmmword_100097F60;
    *(_OWORD *)(v34 + 16) = xmmword_100097F60;
    uint64_t v35 = v34 + v33;
    sub_1000840A4(v35);
    sub_1000840A4(v35 + v32);
    sub_1000840A4(v35 + 2 * v32);
    sub_1000840A4(v35 + 3 * v32);
    uint64_t v36 = (uint64_t)v49;
    sub_1000893B0();
    char v37 = sub_100005184();
    uint64_t v38 = v50;
    sub_10000FE34(v36, v34, v37 & 1, v50);
    uint64_t v39 = type metadata accessor for PlaceholderViewMulti(0);
    LOBYTE(v35) = *(unsigned char *)(v1 + *(int *)(v39 + 20));
    uint64_t v40 = v1 + *(int *)(v39 + 24);
    uint64_t v41 = v38 + v28[8];
    uint64_t v42 = sub_10008A260();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v41, v40, v42);
    *(unsigned char *)(v38 + v28[5]) = 1;
    uint64_t v43 = v28[6];
    sub_10000697C(&qword_1000A50B8);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = v51;
    *(void *)(v44 + 32) = sub_100089FA0();
    *(void *)(v44 + 40) = sub_100089FF0();
    *(void *)(v44 + 48) = sub_100089FB0();
    *(void *)(v44 + 56) = sub_100089FC0();
    uint64_t v58 = v44;
    sub_10008A4B0();
    *(void *)(v38 + v43) = v58;
    *(unsigned char *)(v38 + v28[7]) = v35;
    sub_100049F18(v38, v27, type metadata accessor for MediumWorldClockView);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A5EF0, &qword_1000A5EE0);
    sub_10004A694(&qword_1000A5EC0, (void (*)(uint64_t))type metadata accessor for MediumWorldClockView);
    uint64_t v45 = v54;
    sub_100089AB0();
    sub_100049F80(v38, type metadata accessor for MediumWorldClockView);
    uint64_t v46 = sub_10000697C(&qword_1000A5EE8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 0, 1, v46);
    uint64_t v26 = (uint64_t)v45;
    return sub_100027078(v26, v57, &qword_1000A5ED8);
  }
  uint64_t v48 = sub_10000697C(&qword_1000A5EE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v57, 1, 1, v48);
}

uint64_t sub_100038B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SmallMultiWorldClockView(0);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v10 = &v24[-v9];
  uint64_t v11 = *sub_100014D5C();
  swift_retain();
  int v25 = sub_100089B90();
  sub_10000697C(&qword_1000A4BE8);
  uint64_t v12 = *(void *)(type metadata accessor for WorldClockCity() - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100097F60;
  uint64_t v16 = v15 + v14;
  sub_1000840A4(v16);
  sub_1000840A4(v16 + v13);
  sub_1000840A4(v16 + 2 * v13);
  sub_1000840A4(v16 + 3 * v13);
  uint64_t v17 = type metadata accessor for PlaceholderViewMulti(0);
  char v18 = *(unsigned char *)(a1 + *(int *)(v17 + 20));
  uint64_t v19 = a1 + *(int *)(v17 + 24);
  uint64_t v20 = &v10[*(int *)(v5 + 36)];
  uint64_t v21 = sub_10008A260();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, v19, v21);
  *(void *)uint64_t v10 = v15;
  v10[8] = 1;
  v10[9] = v18;
  sub_100049F18((uint64_t)v10, (uint64_t)v7, type metadata accessor for SmallMultiWorldClockView);
  *(void *)a2 = v11;
  *(unsigned char *)(a2 + 8) = v25;
  uint64_t v22 = sub_10000697C(&qword_1000A7A00);
  sub_100049F18((uint64_t)v7, a2 + *(int *)(v22 + 48), type metadata accessor for SmallMultiWorldClockView);
  swift_retain();
  sub_100049F80((uint64_t)v10, type metadata accessor for SmallMultiWorldClockView);
  sub_100049F80((uint64_t)v7, type metadata accessor for SmallMultiWorldClockView);
  return swift_release();
}

uint64_t sub_100038DA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010008B250, a1);
}

uint64_t sub_100038DF0@<X0>(uint64_t a1@<X8>)
{
  return sub_10004A968(type metadata accessor for SmallWorldClockView, a1);
}

uint64_t sub_100038E08@<X0>(uint64_t a1@<X8>)
{
  return sub_10003E768(type metadata accessor for SmallWorldClockView, a1);
}

uint64_t sub_100038E20()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 28));
}

uint64_t sub_100038E44(char a1)
{
  uint64_t result = type metadata accessor for SmallWorldClockView(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100038E74())(void)
{
  return nullsub_1;
}

uint64_t sub_100038EBC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 32));
}

uint64_t sub_100038EE0(char a1)
{
  uint64_t result = type metadata accessor for SmallWorldClockView(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100038F10())(void)
{
  return nullsub_1;
}

uint64_t sub_100038F58()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 36));
}

uint64_t sub_100038F7C(char a1)
{
  uint64_t result = type metadata accessor for SmallWorldClockView(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100038FAC())(void)
{
  return nullsub_1;
}

uint64_t sub_100038FF4()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 40));
}

uint64_t sub_100039018(char a1)
{
  uint64_t result = type metadata accessor for SmallWorldClockView(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_100039048())(void)
{
  return nullsub_1;
}

uint64_t sub_100039090()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 48));
}

uint64_t sub_1000390B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 52);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10003912C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v86 = a1;
  uint64_t v79 = type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v79);
  uint64_t v85 = (uint64_t)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v81 = (uint64_t)&v74 - v5;
  uint64_t v6 = sub_10000697C(&qword_1000A5F00);
  __chkstk_darwin(v6 - 8);
  uint64_t v78 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100089B10();
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000697C(&qword_1000A5F08);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_10000697C(&qword_1000A5F10);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000697C(&qword_1000A5F18);
  uint64_t v16 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  char v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000697C(&qword_1000A5F20);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000697C(&qword_1000A5F28);
  uint64_t v23 = v22 - 8;
  __chkstk_darwin(v22);
  uint64_t v74 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_10000697C(&qword_1000A5F30);
  __chkstk_darwin(v80);
  uint64_t v84 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000697C(&qword_1000A5F38);
  __chkstk_darwin(v82);
  uint64_t v83 = (uint64_t)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t *v12 = sub_10008A1B0();
  v12[1] = v27;
  uint64_t v28 = sub_10000697C(&qword_1000A5F40);
  sub_1000399DC(v2, (char *)v12 + *(int *)(v28 + 44));
  sub_10008A1B0();
  sub_100089720();
  sub_10000F148((uint64_t)v12, (uint64_t)v15, &qword_1000A5F08);
  int v29 = &v15[*(int *)(v13 + 36)];
  long long v30 = v90;
  *(_OWORD *)int v29 = v89;
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = v91;
  sub_10000F024((uint64_t)v12, &qword_1000A5F08);
  sub_100089B00();
  unint64_t v31 = sub_10004A8B0();
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v9, v77);
  sub_10000F024((uint64_t)v15, &qword_1000A5F10);
  uint64_t v87 = v13;
  unint64_t v88 = v31;
  uint64_t v32 = v79;
  swift_getOpaqueTypeConformance2();
  uint64_t v33 = v75;
  sub_100089F10();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v33);
  uint64_t v34 = (uint64_t)v78;
  sub_100016570();
  uint64_t v35 = sub_100089A40();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 0, 1, v35);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v37 = *(int *)(v23 + 44);
  uint64_t v38 = (uint64_t)v74;
  uint64_t v39 = (uint64_t *)&v74[v37];
  uint64_t v40 = sub_10000697C(&qword_1000A5F58);
  sub_10000F148(v34, (uint64_t)v39 + *(int *)(v40 + 28), &qword_1000A5F00);
  uint64_t *v39 = KeyPath;
  sub_10000F148((uint64_t)v21, v38, &qword_1000A5F20);
  sub_10000F024(v34, &qword_1000A5F00);
  sub_10000F024((uint64_t)v21, &qword_1000A5F20);
  LOBYTE(v33) = sub_100089BA0();
  unsigned __int8 v41 = sub_100089BC0();
  char v42 = sub_100089BD0();
  sub_100089BD0();
  if (sub_100089BD0() != v33) {
    char v42 = sub_100089BD0();
  }
  sub_100089BD0();
  if (sub_100089BD0() != v41) {
    char v42 = sub_100089BD0();
  }
  uint64_t v43 = (uint64_t)v84;
  uint64_t v44 = v81;
  uint64_t v45 = *(int *)(v32 + 40);
  char v46 = *(unsigned char *)(v2 + v45);
  sub_100049F18(v2, v81, type metadata accessor for SmallWorldClockView);
  if (v46)
  {
    sub_100049F80(v44, type metadata accessor for SmallWorldClockView);
  }
  else
  {
    char v47 = *(unsigned char *)(v44 + *(int *)(v32 + 48));
    sub_100049F80(v44, type metadata accessor for SmallWorldClockView);
    if (v47)
    {
      sub_10001632C();
      goto LABEL_10;
    }
  }
  sub_1000162F8();
LABEL_10:
  sub_100089690();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  sub_10000F148(v38, v43, &qword_1000A5F28);
  uint64_t v56 = v43 + *(int *)(v80 + 36);
  *(unsigned char *)uint64_t v56 = v42;
  *(void *)(v56 + 8) = v49;
  *(void *)(v56 + 16) = v51;
  *(void *)(v56 + 24) = v53;
  *(void *)(v56 + 32) = v55;
  *(unsigned char *)(v56 + 40) = 0;
  sub_10000F024(v38, &qword_1000A5F28);
  unsigned __int8 v57 = sub_100089BB0();
  unsigned __int8 v58 = sub_100089BE0();
  char v59 = sub_100089BD0();
  sub_100089BD0();
  if (sub_100089BD0() != v57) {
    char v59 = sub_100089BD0();
  }
  sub_100089BD0();
  if (sub_100089BD0() != v58) {
    char v59 = sub_100089BD0();
  }
  uint64_t v60 = v85;
  char v61 = *(unsigned char *)(v2 + v45);
  sub_100049F18(v2, v85, type metadata accessor for SmallWorldClockView);
  if (v61)
  {
    sub_100049F80(v60, type metadata accessor for SmallWorldClockView);
LABEL_18:
    sub_1000162F8();
    goto LABEL_19;
  }
  char v62 = *(unsigned char *)(v60 + *(int *)(v32 + 48));
  sub_100049F80(v60, type metadata accessor for SmallWorldClockView);
  if ((v62 & 1) == 0) {
    goto LABEL_18;
  }
  sub_100016340();
LABEL_19:
  sub_100089690();
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  uint64_t v71 = v83;
  sub_10000F148(v43, v83, &qword_1000A5F30);
  uint64_t v72 = v71 + *(int *)(v82 + 36);
  *(unsigned char *)uint64_t v72 = v59;
  *(void *)(v72 + 8) = v64;
  *(void *)(v72 + 16) = v66;
  *(void *)(v72 + 24) = v68;
  *(void *)(v72 + 32) = v70;
  *(unsigned char *)(v72 + 40) = 0;
  sub_10000F024(v43, &qword_1000A5F30);
  return sub_100027078(v71, v86, &qword_1000A5F38);
}

uint64_t sub_1000399DC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  long long v147 = a2;
  uint64_t v150 = type metadata accessor for Clock(0);
  uint64_t v145 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  v129 = (BOOL *)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v128 = (uint64_t)&v115 - v5;
  uint64_t v6 = sub_10000697C(&qword_1000A79C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v146 = (uint64_t)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v151 = (uint64_t)&v115 - v9;
  uint64_t v143 = sub_10008A260();
  uint64_t v141 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v124 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for WorldClockCity();
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v122 = (uint64_t)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for ClockText(0);
  __chkstk_darwin(v127);
  uint64_t v126 = (BOOL *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000697C(&qword_1000A79D0);
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v125 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000697C(&qword_1000A79D8);
  __chkstk_darwin(v16 - 8);
  uint64_t v144 = (uint64_t)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v157 = (uint64_t)&v115 - v19;
  uint64_t v20 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v20 - 8);
  uint64_t v130 = (char *)&v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v115 - v23;
  uint64_t v149 = sub_100089580();
  uint64_t v156 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v140 = (uint64_t)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v115 - v27;
  int v29 = (int *)type metadata accessor for ClockFace(0);
  __chkstk_darwin(v29);
  unint64_t v31 = (double *)((char *)&v115 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = sub_10000697C(&qword_1000A79E0);
  uint64_t v154 = *(void *)(v32 - 8);
  uint64_t v155 = v32;
  __chkstk_darwin(v32);
  uint64_t v142 = (char *)&v115 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v135 = (char *)&v115 - v35;
  __chkstk_darwin(v36);
  long long v153 = (char *)&v115 - v37;
  uint64_t v38 = (int *)type metadata accessor for SmallWorldClockView(0);
  uint64_t v39 = (void *)(a1 + v38[6]);
  uint64_t v40 = v39[3];
  uint64_t v41 = v39[4];
  long long v152 = v39;
  sub_10005CC44(v39, v40);
  double v42 = (*(double (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
  BOOL v131 = sub_10003AA6C();
  uint64_t v43 = a1 + v38[5];
  v134 = (void (*)(void, void, void))v28;
  sub_100083900((uint64_t)v28);
  uint64_t v44 = v38[7];
  uint64_t v123 = v38[8];
  int v132 = *(unsigned __int8 *)(a1 + v123);
  uint64_t v148 = v44;
  int v133 = *(unsigned __int8 *)(a1 + v44);
  uint64_t v120 = *(int *)(v12 + 28);
  LODWORD(v40) = *(unsigned __int8 *)(v43 + v120);
  uint64_t v45 = sub_1000893C0();
  uint64_t v46 = *(void *)(v45 - 8);
  if (v40 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(v24, v43, v45);
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v47 = 1;
  }
  uint64_t v137 = v43;
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
  uint64_t v119 = v46 + 56;
  uint64_t v118 = v48;
  v48(v24, v47, 1, v45);
  sub_10004A84C((uint64_t)v152, (uint64_t)v159);
  sub_10000697C(&qword_1000A5F60);
  int v49 = swift_dynamicCast();
  uint64_t v121 = v45;
  uint64_t v136 = v46;
  uint64_t v50 = (uint64_t)v24;
  if (v49)
  {
    swift_release();
    char v51 = *(unsigned char *)(a1 + v38[11] + 8);
    uint64_t v52 = swift_retain();
    sub_1000338E8(v52, v51);
    swift_release();
    char v53 = sub_100086578();
    swift_release();
  }
  else
  {
    char v53 = 1;
  }
  uint64_t v117 = v38[10];
  char v54 = *(unsigned char *)(a1 + v117);
  uint64_t v55 = v38[12];
  char v56 = *(unsigned char *)(a1 + v55);
  *(void *)((char *)v31 + v29[14]) = swift_getKeyPath();
  sub_10000697C(&qword_1000A5E40);
  swift_storeEnumTagMultiPayload();
  double *v31 = v42;
  *((unsigned char *)v31 + 8) = v131;
  unsigned __int8 v57 = (char *)v31 + v29[6];
  unsigned __int8 v58 = *(void (**)(void, void, void))(v156 + 32);
  char v59 = v134;
  v156 += 32;
  v134 = v58;
  v58(v57, v59, v149);
  *((unsigned char *)v31 + v29[7]) = v132;
  *((unsigned char *)v31 + v29[8]) = v133;
  sub_100027078(v50, (uint64_t)v31 + v29[9], &qword_1000A47F8);
  *((unsigned char *)v31 + v29[10]) = v53;
  *((unsigned char *)v31 + v29[11]) = v54;
  uint64_t v60 = v29[12];
  *((unsigned char *)v31 + v60) = sub_10002F50C();
  *((unsigned char *)v31 + v29[13]) = v56;
  sub_10004A694(&qword_1000A79E8, (void (*)(uint64_t))type metadata accessor for ClockFace);
  char v61 = v135;
  sub_100089EC0();
  sub_100049F80((uint64_t)v31, type metadata accessor for ClockFace);
  (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v153, v61, v155);
  char v62 = *(unsigned char *)(a1 + v148);
  uint64_t v116 = v55;
  if (v62)
  {
    uint64_t v63 = 1;
    uint64_t v64 = v157;
    uint64_t v65 = v139;
    uint64_t v66 = v138;
  }
  else
  {
    BOOL v67 = sub_10003AA6C();
    uint64_t v68 = v122;
    sub_100049F18(v137, v122, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
    sub_10004A84C((uint64_t)v152, (uint64_t)&v158);
    int v133 = *(unsigned __int8 *)(a1 + v38[9]);
    LODWORD(v135) = *(unsigned __int8 *)(a1 + v55);
    uint64_t v69 = v141;
    uint64_t v70 = v124;
    uint64_t v71 = v143;
    (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v124, a1 + v38[13], v143);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v73 = (int *)v127;
    uint64_t v74 = v126;
    *(void *)&v126[*(int *)(v127 + 32)] = KeyPath;
    sub_10000697C(&qword_1000A4FF0);
    swift_storeEnumTagMultiPayload();
    BOOL *v74 = v67;
    sub_10004A544(v68, (uint64_t)&v74[v73[5]], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
    sub_100049F00(&v158, (uint64_t)&v74[v73[6]]);
    v74[v73[7]] = v133;
    v74[v73[9]] = (char)v135;
    (*(void (**)(BOOL *, char *, uint64_t))(v69 + 32))(&v74[v73[10]], v70, v71);
    uint64_t v75 = &v74[v73[11]];
    type metadata accessor for ClockWidgetEnvironmentObject();
    sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    *(void *)uint64_t v75 = sub_1000896B0();
    v75[8] = v76 & 1;
    sub_10004A694(&qword_1000A79F0, (void (*)(uint64_t))type metadata accessor for ClockText);
    uint64_t v77 = v125;
    sub_100089E60();
    sub_100049F80((uint64_t)v74, type metadata accessor for ClockText);
    uint64_t v66 = v138;
    uint64_t v64 = v157;
    uint64_t v65 = v139;
    (*(void (**)(uint64_t, char *, uint64_t))(v138 + 32))(v157, v77, v139);
    uint64_t v63 = 0;
  }
  uint64_t v78 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v64, v63, 1, v65);
  char v79 = *(unsigned char *)(a1 + v38[11] + 8);
  uint64_t v80 = swift_retain();
  sub_1000338E8(v80, v79);
  swift_release();
  char v81 = sub_100086578();
  swift_release();
  LOBYTE(v158) = v81;
  v159[0] = 0;
  sub_100017734();
  char v82 = sub_10008A3C0();
  uint64_t v83 = v136;
  if ((v82 & 1) == 0)
  {
    BOOL v84 = sub_10003AA6C();
    uint64_t v85 = v137;
    sub_100083900(v140);
    sub_10004A84C((uint64_t)v152, (uint64_t)&v158);
    LODWORD(v152) = *(unsigned __int8 *)(a1 + v148);
    uint64_t v86 = 1;
    uint64_t v87 = v121;
    if (*(unsigned char *)(v85 + v120) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v130, v85, v121);
      uint64_t v86 = 0;
    }
    uint64_t v88 = (uint64_t)v130;
    v118(v130, v86, 1, v87);
    char v89 = *(unsigned char *)(a1 + v123);
    char v90 = sub_10003AA6C();
    uint64_t v91 = sub_100015948(v90);
    uint64_t v92 = sub_100015808(v90);
    uint64_t v93 = sub_100015948(v90);
    char v94 = *(unsigned char *)(a1 + v117);
    char v95 = *(unsigned char *)(a1 + v116);
    uint64_t v96 = a1 + v38[13];
    uint64_t v97 = (int *)v150;
    uint64_t v98 = v129;
    (*(void (**)(BOOL *, uint64_t, uint64_t))(v141 + 16))(&v129[*(int *)(v150 + 56)], v96, v143);
    *uint64_t v98 = v84;
    v134(&v98[v97[5]], v140, v149);
    sub_100049F00(&v158, (uint64_t)&v98[v97[6]]);
    v98[v97[7]] = (char)v152;
    sub_100027078(v88, (uint64_t)&v98[v97[8]], &qword_1000A47F8);
    v98[v97[9]] = v89;
    v98[v97[10]] = 1;
    uint64_t v99 = &v98[v97[11]];
    *(_OWORD *)uint64_t v99 = xmmword_1000997F0;
    *((void *)v99 + 2) = 0x3F916872B020C49CLL;
    *((void *)v99 + 3) = v91;
    *((void *)v99 + 4) = v92;
    v99[40] = 1;
    *((void *)v99 + 6) = v93;
    *((void *)v99 + 7) = 0x3FC3333333333333;
    v98[v97[12]] = v94;
    v98[v97[13]] = v95;
    uint64_t v100 = &v98[v97[15]];
    type metadata accessor for ClockWidgetEnvironmentObject();
    sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
    *(void *)uint64_t v100 = sub_1000896B0();
    v100[8] = v101 & 1;
    uint64_t v102 = v128;
    sub_10004A544((uint64_t)v98, v128, type metadata accessor for Clock);
    sub_10004A544(v102, v151, type metadata accessor for Clock);
    uint64_t v78 = 0;
    uint64_t v64 = v157;
  }
  uint64_t v103 = v151;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v145 + 56))(v151, v78, 1, v150);
  uint64_t v105 = v153;
  uint64_t v104 = v154;
  uint64_t v106 = *(void (**)(char *, char *, uint64_t))(v154 + 16);
  uint64_t v107 = v142;
  uint64_t v108 = v155;
  v106(v142, v153, v155);
  uint64_t v109 = v144;
  sub_10000F148(v64, v144, &qword_1000A79D8);
  uint64_t v110 = v146;
  sub_10000F148(v103, v146, &qword_1000A79C8);
  uint64_t v111 = v147;
  v106(v147, v107, v108);
  uint64_t v112 = sub_10000697C(&qword_1000A79F8);
  sub_10000F148(v109, (uint64_t)&v111[*(int *)(v112 + 48)], &qword_1000A79D8);
  sub_10000F148(v110, (uint64_t)&v111[*(int *)(v112 + 64)], &qword_1000A79C8);
  sub_10000F024(v103, &qword_1000A79C8);
  sub_10000F024(v157, &qword_1000A79D8);
  uint64_t v113 = *(void (**)(char *, uint64_t))(v104 + 8);
  v113(v105, v108);
  sub_10000F024(v110, &qword_1000A79C8);
  sub_10000F024(v109, &qword_1000A79D8);
  return ((uint64_t (*)(char *, uint64_t))v113)(v107, v108);
}

BOOL sub_10003AA6C()
{
  uint64_t v1 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = sub_10008A260();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008A230();
  char v17 = sub_10008A220();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  v25(v16, v13);
  sub_100049F18(v0, (uint64_t)v12, type metadata accessor for SmallWorldClockView);
  if (v17)
  {
    int v18 = v12[v1[12]];
    sub_100049F80((uint64_t)v12, type metadata accessor for SmallWorldClockView);
    sub_100049F18(v0, (uint64_t)v9, type metadata accessor for SmallWorldClockView);
    if (v18 == 1)
    {
      sub_100049F80((uint64_t)v9, type metadata accessor for SmallWorldClockView);
      return 0;
    }
  }
  else
  {
    sub_100049F80((uint64_t)v12, type metadata accessor for SmallWorldClockView);
    sub_100049F18(v0, (uint64_t)v9, type metadata accessor for SmallWorldClockView);
  }
  char v19 = v9[v1[10]];
  sub_100049F18((uint64_t)v9, (uint64_t)v6, type metadata accessor for SmallWorldClockView);
  if (v19)
  {
    sub_100049F80((uint64_t)v6, type metadata accessor for SmallWorldClockView);
    sub_100049F18((uint64_t)v9, (uint64_t)v3, type metadata accessor for SmallWorldClockView);
LABEL_8:
    sub_100049F80((uint64_t)v3, type metadata accessor for SmallWorldClockView);
    sub_100049F80((uint64_t)v9, type metadata accessor for SmallWorldClockView);
    return (*(unsigned char *)(v0 + v1[9]) & 1) != 0 || sub_100082834();
  }
  char v20 = v6[v1[12]];
  sub_100049F80((uint64_t)v6, type metadata accessor for SmallWorldClockView);
  sub_100049F18((uint64_t)v9, (uint64_t)v3, type metadata accessor for SmallWorldClockView);
  if (v20) {
    goto LABEL_8;
  }
  sub_10008A250();
  char v22 = sub_10008A220();
  v25(v16, v13);
  sub_100049F80((uint64_t)v3, type metadata accessor for SmallWorldClockView);
  sub_100049F80((uint64_t)v9, type metadata accessor for SmallWorldClockView);
  if (v22) {
    return 0;
  }
  return (*(unsigned char *)(v0 + v1[9]) & 1) != 0 || sub_100082834();
}

uint64_t sub_10003AE50()
{
  uint64_t v1 = type metadata accessor for SmallWorldClockView(0);
  sub_10004A84C(v0 + *(int *)(v1 + 24), (uint64_t)v6);
  sub_10000697C(&qword_1000A5F60);
  if ((swift_dynamicCast() & 1) == 0) {
    return 1;
  }
  swift_release();
  char v2 = *(unsigned char *)(v0 + *(int *)(v1 + 44) + 8);
  uint64_t v3 = swift_retain();
  sub_1000338E8(v3, v2);
  swift_release();
  uint64_t v4 = sub_100086578();
  swift_release();
  return v4;
}

uint64_t sub_10003AF0C@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11)
{
  *(double *)a9 = a10;
  *(unsigned char *)(a9 + 8) = a1;
  int v18 = (int *)type metadata accessor for ClockFace(0);
  uint64_t v19 = a9 + v18[6];
  uint64_t v20 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a2, v20);
  *(unsigned char *)(a9 + v18[7]) = a3;
  *(unsigned char *)(a9 + v18[8]) = a4;
  sub_100027078(a5, a9 + v18[9], &qword_1000A47F8);
  *(unsigned char *)(a9 + v18[10]) = a6;
  *(unsigned char *)(a9 + v18[11]) = a7;
  uint64_t v21 = v18[12];
  *(unsigned char *)(a9 + v21) = sub_10002F50C();
  *(unsigned char *)(a9 + v18[13]) = a8;
  return sub_100027078(a11, a9 + v18[14], &qword_1000A59C0);
}

uint64_t sub_10003B034@<X0>(char a1@<W0>, uint64_t a2@<X1>, long long *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, unsigned char *a8@<X8>)
{
  *a8 = a1;
  uint64_t v15 = (int *)type metadata accessor for ClockText(0);
  sub_10004A544(a2, (uint64_t)&a8[v15[5]], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_100049F00(a3, (uint64_t)&a8[v15[6]]);
  a8[v15[7]] = a4;
  sub_100027078(a5, (uint64_t)&a8[v15[8]], &qword_1000A4B70);
  a8[v15[9]] = a6;
  uint64_t v16 = &a8[v15[10]];
  uint64_t v17 = sub_10008A260();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a7, v17);
  int v18 = &a8[v15[11]];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  uint64_t result = sub_1000896B0();
  *(void *)int v18 = result;
  v18[8] = v20 & 1;
  return result;
}

uint64_t sub_10003B19C@<X0>(char a1@<W0>, uint64_t a2@<X1>, long long *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, _OWORD *a8@<X7>, unsigned char *a9@<X8>, char a10, char a11, uint64_t a12)
{
  *a9 = a1;
  char v20 = (int *)type metadata accessor for Clock(0);
  uint64_t v21 = &a9[v20[5]];
  uint64_t v22 = sub_100089580();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, a2, v22);
  sub_100049F00(a3, (uint64_t)&a9[v20[6]]);
  a9[v20[7]] = a4;
  sub_100027078(a5, (uint64_t)&a9[v20[8]], &qword_1000A47F8);
  a9[v20[9]] = a6;
  a9[v20[10]] = a7;
  uint64_t v23 = &a9[v20[11]];
  long long v24 = a8[1];
  _OWORD *v23 = *a8;
  v23[1] = v24;
  long long v25 = a8[3];
  void v23[2] = a8[2];
  v23[3] = v25;
  a9[v20[12]] = a10;
  a9[v20[13]] = a11;
  uint64_t v26 = &a9[v20[14]];
  uint64_t v27 = sub_10008A260();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v26, a12, v27);
  uint64_t v28 = &a9[v20[15]];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  uint64_t result = sub_1000896B0();
  *(void *)uint64_t v28 = result;
  v28[8] = v30 & 1;
  return result;
}

double sub_10003B384()
{
  return 0.0585;
}

double sub_10003B390()
{
  return 0.036;
}

double sub_10003B39C()
{
  return 0.017;
}

uint64_t sub_10003B3A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = a6;
  *(void *)(a3 + 24) = result;
  *(void *)(a3 + 32) = a2;
  return result;
}

double sub_10003B3B8()
{
  return 0.15;
}

uint64_t sub_10003B3C8@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v5 = *(void *)(result + 16);
  *(_OWORD *)a4 = *(_OWORD *)result;
  *(void *)(a4 + 16) = v5;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)(result + 24);
  *(unsigned char *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = a3;
  *(double *)(a4 + 56) = a5;
  return result;
}

uint64_t sub_10003B3F4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10003B3FC()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_10003B404(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t sub_10003B40C()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t sub_10003B414(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

uint64_t (*sub_10003B41C())()
{
  return nullsub_1;
}

uint64_t sub_10003B43C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SmallMultiWorldClockView(0) + 28);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10003B4B4(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SmallMultiWorldClockView(0) + 28);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_10003B52C())(void)
{
  return nullsub_1;
}

uint64_t sub_10003B574@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v3 = type metadata accessor for SmallMultiWorldClockView(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  sub_100049F18(v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallMultiWorldClockView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_10004A544((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for SmallMultiWorldClockView);
  *a1 = sub_10005C29C;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return result;
}

uint64_t sub_10003B690@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000697C(&qword_1000A7938);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000697C(&qword_1000A7940);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *unint64_t v6 = sub_10008A1B0();
  v6[1] = v11;
  uint64_t v12 = sub_10000697C(&qword_1000A7948);
  sub_10003B864(a1, (uint64_t)v6 + *(int *)(v12 + 44));
  char v13 = sub_100089B90();
  sub_10000F148((uint64_t)v6, (uint64_t)v10, &qword_1000A7938);
  v10[*(int *)(v8 + 44)] = v13;
  sub_10000F024((uint64_t)v6, &qword_1000A7938);
  uint64_t v14 = *sub_100014D5C();
  uint64_t v15 = a1 + *(int *)(type metadata accessor for SmallMultiWorldClockView(0) + 28);
  uint64_t v16 = (uint64_t *)(a2 + *(int *)(sub_10000697C(&qword_1000A7950) + 36));
  uint64_t v17 = (char *)v16 + *(int *)(type metadata accessor for AccentedWidgetBackground(0) + 20);
  uint64_t v18 = sub_10008A260();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v17, v15, v18);
  *uint64_t v16 = v14;
  sub_10000F148((uint64_t)v10, a2, &qword_1000A7940);
  swift_retain();
  return sub_10000F024((uint64_t)v10, &qword_1000A7940);
}

uint64_t sub_10003B864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A7958);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A7960);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A7968);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000697C(&qword_1000A7970);
  __chkstk_darwin(v47);
  char v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v5 = sub_100089A10();
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  sub_10000697C(&qword_1000A7978);
  sub_10003BBFC(a1);
  unsigned __int8 v14 = sub_100089BA0();
  unsigned __int8 v15 = sub_100089BC0();
  char v16 = sub_100089BD0();
  sub_100089BD0();
  if (sub_100089BD0() != v14) {
    char v16 = sub_100089BD0();
  }
  sub_100089BD0();
  if (sub_100089BD0() != v15) {
    char v16 = sub_100089BD0();
  }
  if (*(unsigned char *)(a1 + 9)) {
    sub_100016358();
  }
  else {
    sub_1000162F8();
  }
  sub_100089690();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  sub_10000F148((uint64_t)v5, (uint64_t)v8, &qword_1000A7958);
  long long v25 = &v8[*(int *)(v6 + 36)];
  *long long v25 = v16;
  *((void *)v25 + 1) = v18;
  *((void *)v25 + 2) = v20;
  *((void *)v25 + 3) = v22;
  *((void *)v25 + 4) = v24;
  v25[40] = 0;
  sub_10000F024((uint64_t)v5, &qword_1000A7958);
  char v26 = sub_100089BB0();
  if (*(unsigned char *)(a1 + 9) == 1) {
    sub_1000164C4();
  }
  else {
    sub_1000162F8();
  }
  sub_100089690();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  sub_10000F148((uint64_t)v8, (uint64_t)v11, &qword_1000A7960);
  uint64_t v35 = &v11[*(int *)(v9 + 36)];
  *uint64_t v35 = v26;
  *((void *)v35 + 1) = v28;
  *((void *)v35 + 2) = v30;
  *((void *)v35 + 3) = v32;
  *((void *)v35 + 4) = v34;
  v35[40] = 0;
  sub_10000F024((uint64_t)v8, &qword_1000A7960);
  char v36 = sub_100089BE0();
  if (*(unsigned char *)(a1 + 9) == 1) {
    sub_1000163D4();
  }
  else {
    sub_1000162F8();
  }
  sub_100089690();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  sub_10000F148((uint64_t)v11, (uint64_t)v13, &qword_1000A7968);
  uint64_t v45 = &v13[*(int *)(v47 + 36)];
  *uint64_t v45 = v36;
  *((void *)v45 + 1) = v38;
  *((void *)v45 + 2) = v40;
  *((void *)v45 + 3) = v42;
  *((void *)v45 + 4) = v44;
  v45[40] = 0;
  sub_10000F024((uint64_t)v11, &qword_1000A7968);
  return sub_100027078((uint64_t)v13, v48, &qword_1000A7970);
}

uint64_t sub_10003BBFC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SmallMultiWorldClockView(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  sub_10003BE4C(*(void *)a1);
  sub_100089730();
  double v6 = v5;
  if (*(unsigned char *)(a1 + 9) == 1) {
    uint64_t v7 = (double *)sub_10002912C();
  }
  else {
    uint64_t v7 = (double *)sub_100029144();
  }
  double v8 = v6 * 0.5 * *v7;
  uint64_t v9 = sub_100029114();
  double v10 = sub_100028A28();
  double v11 = sub_100028898();
  double v12 = sub_10002915C();
  double v13 = sub_10002916C();
  double v14 = sub_100028898();
  sub_100029544(v9, (uint64_t)v21, v8, v10, v11, v12, v13, v14);
  type metadata accessor for WorldClockCity();
  uint64_t v15 = sub_10002E76C(2);
  swift_bridgeObjectRelease();
  sub_100049F18(a1, (uint64_t)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallMultiWorldClockView);
  unint64_t v16 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  long long v18 = v21[1];
  *(_OWORD *)(v17 + 24) = v21[0];
  *(_OWORD *)(v17 + 40) = v18;
  *(_OWORD *)(v17 + 56) = v21[2];
  *(void *)(v17 + 72) = v22;
  sub_10004A544((uint64_t)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for SmallMultiWorldClockView);
  sub_10000697C(&qword_1000A7980);
  sub_100071A98();
  return sub_10008A150();
}

void *sub_10003BE4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WorldClockCity();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  double v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  double v8 = (char *)&v21 - v7;
  unint64_t v9 = 0;
  uint64_t v22 = a1;
  unint64_t v10 = *(void *)(a1 + 16);
  double v11 = &_swiftEmptyArrayStorage;
  do
  {
    if (v9 >= v10)
    {
      sub_10008435C((uint64_t)v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v11 = (void *)sub_10005C2C8(0, v11[2] + 1, 1, v11);
      }
      unint64_t v19 = v11[2];
      unint64_t v18 = v11[3];
      if (v19 >= v18 >> 1) {
        double v11 = (void *)sub_10005C2C8(v18 > 1, v19 + 1, 1, v11);
      }
      v11[2] = v19 + 1;
      uint64_t v12 = (uint64_t)v11
          + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
          + *(void *)(v3 + 72) * v19;
      uint64_t v13 = (uint64_t)v5;
    }
    else
    {
      unint64_t v14 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v15 = *(void *)(v3 + 72);
      sub_100049F18(v22 + v14 + v15 * v9, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v11 = (void *)sub_10005C2C8(0, v11[2] + 1, 1, v11);
      }
      unint64_t v17 = v11[2];
      unint64_t v16 = v11[3];
      if (v17 >= v16 >> 1) {
        double v11 = (void *)sub_10005C2C8(v16 > 1, v17 + 1, 1, v11);
      }
      v11[2] = v17 + 1;
      uint64_t v12 = (uint64_t)v11 + v14 + v17 * v15;
      uint64_t v13 = (uint64_t)v8;
    }
    sub_10004A544(v13, v12, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
    ++v9;
  }
  while (v9 != 4);
  return v11;
}

void sub_10003C0AC(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v9 = type metadata accessor for SmallMultiWorldClockView(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000697C(&qword_1000A7998);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000697C(&qword_1000A7980);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)(a2 + 16) <= a1)
  {
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v38 = v17;
  uint64_t v39 = a5;
  uint64_t v20 = *(void *)(a2 + 32 + 8 * a1);
  swift_bridgeObjectRetain();
  *(void *)uint64_t v15 = sub_100089930();
  *((void *)v15 + 1) = 0;
  v15[16] = 1;
  sub_10000697C(&qword_1000A79A0);
  uint64_t v41 = v20;
  sub_100049F18(v40, (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallMultiWorldClockView);
  unint64_t v21 = (*(unsigned __int8 *)(v10 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  long long v24 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v23 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v23 + 32) = v24;
  *(_OWORD *)(v23 + 48) = *(_OWORD *)(a3 + 32);
  *(void *)(v23 + 64) = *(void *)(a3 + 48);
  sub_10004A544((uint64_t)v12, v23 + v21, type metadata accessor for SmallMultiWorldClockView);
  *(void *)(v23 + v22) = v20;
  swift_bridgeObjectRetain_n();
  sub_100070D68(a3);
  sub_10000697C(&qword_1000A78E8);
  sub_10000697C(&qword_1000A79A8);
  sub_10001845C(&qword_1000A78F8, &qword_1000A78E8);
  sub_100070904(&qword_1000A79B0, &qword_1000A79A8);
  sub_10004A694(&qword_1000A7920, (void (*)(uint64_t))type metadata accessor for WorldClockCity);
  sub_10008A140();
  uint64_t v25 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LOBYTE(v21) = sub_10005BE88(v20, v25);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v21) {
    char v26 = sub_100089BB0();
  }
  else {
    char v26 = sub_100089BA0();
  }
  char v27 = v26;
  uint64_t v28 = v39;
  if (*(unsigned char *)(v40 + 9) == 1) {
    sub_1000162F8();
  }
  else {
    sub_100016320();
  }
  sub_100089690();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  sub_10000F148((uint64_t)v15, (uint64_t)v19, &qword_1000A7998);
  uint64_t v37 = &v19[*(int *)(v38 + 36)];
  char *v37 = v27;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  sub_10000F024((uint64_t)v15, &qword_1000A7998);
  sub_100027078((uint64_t)v19, v28, &qword_1000A7980);
}

uint64_t sub_10003C4CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v74 = a4;
  uint64_t v80 = a5;
  uint64_t v75 = sub_10000697C(&qword_1000A79C0);
  __chkstk_darwin(v75);
  uint64_t v78 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A4FD0);
  __chkstk_darwin(v9 - 8);
  uint64_t v64 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v73 = (uint64_t)&v63 - v12;
  __chkstk_darwin(v13);
  uint64_t v72 = (char *)&v63 - v14;
  uint64_t v69 = sub_10008A260();
  uint64_t v15 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v17;
  uint64_t v18 = type metadata accessor for WorldClockCity();
  uint64_t v67 = v18;
  uint64_t v70 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for SmallWorldClockView(0);
  unint64_t v22 = (int *)(v21 - 8);
  __chkstk_darwin(v21);
  long long v24 = (uint64_t *)((char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v76 = sub_10000697C(&qword_1000A79A8);
  __chkstk_darwin(v76);
  uint64_t v77 = (uint64_t)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for WorldClockCity;
  uint64_t v68 = a1;
  sub_100049F18(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  char v82 = &type metadata for SmallMultiSizeDimentions;
  uint64_t v83 = &off_1000A2920;
  uint64_t v26 = swift_allocObject();
  *(void *)&long long v81 = v26;
  long long v27 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a2 + 32);
  *(void *)(v26 + 64) = *(void *)(a2 + 48);
  char v28 = *(unsigned char *)(a3 + 8);
  LOBYTE(v18) = *(unsigned char *)(a1 + *(int *)(v18 + 52));
  int v66 = *(unsigned __int8 *)(a3 + 9);
  uint64_t v29 = *(int *)(type metadata accessor for SmallMultiWorldClockView(0) + 28);
  uint64_t v79 = a3;
  uint64_t v30 = v17;
  uint64_t v31 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v30, a3 + v29, v69);
  *long long v24 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4FF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = (uint64_t)v24 + v22[7];
  uint64_t v63 = v20;
  sub_10004A544((uint64_t)v20, v32, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_100049F00(&v81, (uint64_t)v24 + v22[8]);
  *((unsigned char *)v24 + v22[9]) = v28;
  uint64_t v33 = v70;
  *((unsigned char *)v24 + v22[10]) = v18;
  *((unsigned char *)v24 + v22[11]) = 0;
  uint64_t v34 = 1;
  *((unsigned char *)v24 + v22[12]) = 1;
  uint64_t v35 = (char *)v24 + v22[13];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_100070D68(a2);
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  *(void *)uint64_t v35 = sub_1000896B0();
  v35[8] = v36 & 1;
  *((unsigned char *)v24 + v22[14]) = v66;
  uint64_t v37 = v22[15];
  uint64_t v38 = (uint64_t)v72;
  uint64_t v39 = v31;
  uint64_t v40 = v67;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))((char *)v24 + v37, v65, v39);
  sub_100049F18(v68, v38, (uint64_t (*)(void))v71);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
  v41(v38, 0, 1, v40);
  uint64_t v42 = v73;
  if (*(void *)(v74 + 16))
  {
    sub_100049F18(v74 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80)), v73, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
    uint64_t v34 = 0;
  }
  v41(v42, v34, 1, v40);
  uint64_t v43 = v78;
  uint64_t v44 = v78 + *(int *)(v75 + 48);
  sub_10000F148(v38, v78, &qword_1000A4FD0);
  sub_10000F148(v42, v44, &qword_1000A4FD0);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  if (v45(v43, 1, v40) == 1)
  {
    sub_10000F024(v42, &qword_1000A4FD0);
    sub_10000F024(v38, &qword_1000A4FD0);
    if (v45(v44, 1, v40) == 1)
    {
      sub_10000F024(v43, &qword_1000A4FD0);
LABEL_10:
      char v50 = sub_100089BE0();
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  uint64_t v46 = v42;
  uint64_t v47 = v64;
  sub_10000F148(v43, v64, &qword_1000A4FD0);
  if (v45(v44, 1, v40) == 1)
  {
    sub_10000F024(v46, &qword_1000A4FD0);
    sub_10000F024(v38, &qword_1000A4FD0);
    sub_100049F80(v47, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
LABEL_8:
    sub_10000F024(v43, &qword_1000A79C0);
    goto LABEL_11;
  }
  uint64_t v48 = (uint64_t)v63;
  sub_10004A544(v44, (uint64_t)v63, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_10004A694(&qword_1000A79B8, (void (*)(uint64_t))type metadata accessor for WorldClockCity);
  char v49 = sub_10008A3C0();
  sub_100049F80(v48, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_10000F024(v46, &qword_1000A4FD0);
  sub_10000F024(v38, &qword_1000A4FD0);
  sub_100049F80(v47, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_10000F024(v43, &qword_1000A4FD0);
  if (v49) {
    goto LABEL_10;
  }
LABEL_11:
  char v50 = sub_100089BC0();
LABEL_12:
  char v51 = v50;
  if (*(unsigned char *)(v79 + 9) == 1) {
    sub_1000162F8();
  }
  else {
    sub_100016320();
  }
  sub_100089690();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v60 = v77;
  sub_100049F18((uint64_t)v24, v77, type metadata accessor for SmallWorldClockView);
  uint64_t v61 = v60 + *(int *)(v76 + 36);
  *(unsigned char *)uint64_t v61 = v51;
  *(void *)(v61 + 8) = v53;
  *(void *)(v61 + 16) = v55;
  *(void *)(v61 + 24) = v57;
  *(void *)(v61 + 32) = v59;
  *(unsigned char *)(v61 + 40) = 0;
  sub_100049F80((uint64_t)v24, type metadata accessor for SmallWorldClockView);
  return sub_100027078(v60, v80, &qword_1000A79A8);
}

uint64_t sub_10003CD14@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  sub_100049F18(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallMultiWorldClockView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_10004A544((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for SmallMultiWorldClockView);
  *a2 = sub_10005C29C;
  a2[1] = (uint64_t (*)(uint64_t))v7;
  return result;
}

uint64_t sub_10003CE28()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumWorldClockView(0) + 20));
}

uint64_t sub_10003CE4C(char a1)
{
  uint64_t result = type metadata accessor for MediumWorldClockView(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10003CE7C())(void)
{
  return nullsub_1;
}

uint64_t sub_10003CEC4()
{
  sub_10000697C(&qword_1000A50B8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100097F60;
  *(void *)(v0 + 32) = sub_100089FA0();
  *(void *)(v0 + 40) = sub_100089FF0();
  *(void *)(v0 + 48) = sub_100089FB0();
  *(void *)(v0 + 56) = sub_100089FC0();
  sub_10008A4B0();
  return v0;
}

uint64_t sub_10003CF40()
{
  type metadata accessor for MediumWorldClockView(0);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10003CF74()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumWorldClockView(0) + 28));
}

uint64_t sub_10003CF98(char a1)
{
  uint64_t result = type metadata accessor for MediumWorldClockView(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10003CFC8())(void)
{
  return nullsub_1;
}

uint64_t sub_10003D010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MediumWorldClockView(0) + 32);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10003D088(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MediumWorldClockView(0) + 32);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_10003D100())(void)
{
  return nullsub_1;
}

uint64_t sub_10003D148@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v3 = type metadata accessor for MediumWorldClockView(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  sub_100049F18(v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MediumWorldClockView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_10004A544((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for MediumWorldClockView);
  *a1 = sub_10005C4A0;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return result;
}

uint64_t sub_10003D264@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000697C(&qword_1000A78B0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000697C(&qword_1000A78B8);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100089730();
  double v12 = v11;
  double v14 = v13;
  *unint64_t v6 = sub_10008A1B0();
  v6[1] = v15;
  uint64_t v16 = sub_10000697C(&qword_1000A78C0);
  sub_10003D450(a1, (uint64_t)v6 + *(int *)(v16 + 44), v12, v14);
  char v17 = sub_100089B90();
  sub_10000F148((uint64_t)v6, (uint64_t)v10, &qword_1000A78B0);
  v10[*(int *)(v8 + 44)] = v17;
  sub_10000F024((uint64_t)v6, &qword_1000A78B0);
  uint64_t v18 = *sub_100014D5C();
  uint64_t v19 = a1 + *(int *)(type metadata accessor for MediumWorldClockView(0) + 32);
  uint64_t v20 = (uint64_t *)(a2 + *(int *)(sub_10000697C(&qword_1000A78C8) + 36));
  uint64_t v21 = (char *)v20 + *(int *)(type metadata accessor for AccentedWidgetBackground(0) + 20);
  uint64_t v22 = sub_10008A260();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, v19, v22);
  uint64_t *v20 = v18;
  sub_10000F148((uint64_t)v10, a2, &qword_1000A78B8);
  swift_retain();
  return sub_10000F024((uint64_t)v10, &qword_1000A78B8);
}

uint64_t sub_10003D450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v74 = a2;
  uint64_t v7 = type metadata accessor for MediumWorldClockView(0);
  uint64_t v8 = v7 - 8;
  uint64_t v67 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v68 = v9;
  uint64_t v70 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000697C(&qword_1000A78D0);
  __chkstk_darwin(v10 - 8);
  uint64_t v73 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  double v14 = (double *)((char *)&v66 - v13);
  uint64_t v15 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  __chkstk_darwin(v15);
  char v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10008A260();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000697C(&qword_1000A78D8);
  __chkstk_darwin(v22);
  uint64_t v72 = (uint64_t)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v66 - v25;
  __chkstk_darwin(v27);
  uint64_t v71 = (uint64_t)&v66 - v28;
  uint64_t v29 = *(int *)(v8 + 40);
  uint64_t v69 = a1;
  uint64_t v30 = a1 + v29;
  sub_10008A240();
  LOBYTE(a1) = sub_10008A220();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if (a1)
  {
    uint64_t v31 = sub_100089FE0();
  }
  else
  {
    uint64_t v31 = *sub_100014D5C();
    swift_retain();
  }
  char v32 = sub_100089B90();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(&v17[*(int *)(v15 + 24)], v30, v18);
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)char v17 = _Q0;
  sub_100049F18((uint64_t)v17, (uint64_t)&v26[*(int *)(v22 + 36)], type metadata accessor for ClockWidgetAccentableOpacity);
  *(void *)uint64_t v26 = v31;
  v26[8] = v32;
  sub_100049F80((uint64_t)v17, type metadata accessor for ClockWidgetAccentableOpacity);
  uint64_t v38 = v71;
  sub_100027078((uint64_t)v26, v71, &qword_1000A78D8);
  uint64_t v39 = (double *)sub_10002982C();
  double v40 = *v39 * a3;
  double v41 = (1.0 - *v39) * a3;
  double v42 = v41 / (double)*(uint64_t *)sub_100029818();
  double v43 = v40 / (double)*(uint64_t *)sub_100029804();
  double v44 = *(double *)sub_100029844() * a4;
  *(void *)double v14 = sub_100089930();
  v14[1] = v42;
  *((unsigned char *)v14 + 16) = 0;
  sub_10000697C(&qword_1000A78E0);
  uint64_t v45 = sub_100029860();
  double v46 = sub_100028A28();
  double v47 = sub_100028898();
  double v48 = sub_100029864();
  double v49 = sub_100029874();
  double v50 = sub_100029880();
  double v51 = sub_10002916C();
  double v52 = sub_100029888();
  sub_100029920(v45, (uint64_t)v76, v43, v46, v47, v48, v49, v50, v51, v52);
  uint64_t v75 = *(void *)(v69 + *(int *)(type metadata accessor for WorldClockEntry() + 20));
  uint64_t v53 = v70;
  sub_100049F18(v69, v70, type metadata accessor for MediumWorldClockView);
  unint64_t v54 = (*(unsigned __int8 *)(v67 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
  unint64_t v55 = (v68 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v56 = (v55 + 79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v57 = swift_allocObject();
  sub_10004A544(v53, v57 + v54, type metadata accessor for MediumWorldClockView);
  unint64_t v58 = v57 + v55;
  long long v59 = v76[3];
  *(_OWORD *)(v58 + 32) = v76[2];
  *(_OWORD *)(v58 + 48) = v59;
  *(void *)(v58 + 64) = v77;
  long long v60 = v76[1];
  *(_OWORD *)unint64_t v58 = v76[0];
  *(_OWORD *)(v58 + 16) = v60;
  *(double *)(v57 + v56) = v43;
  *(double *)(v57 + ((v56 + 15) & 0xFFFFFFFFFFFFFFF8)) = v44;
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A78E8);
  sub_10000697C(&qword_1000A78F0);
  sub_10001845C(&qword_1000A78F8, &qword_1000A78E8);
  sub_1000717B4();
  sub_10004A694(&qword_1000A7920, (void (*)(uint64_t))type metadata accessor for WorldClockCity);
  sub_10008A140();
  uint64_t v61 = v72;
  sub_10000F148(v38, v72, &qword_1000A78D8);
  uint64_t v62 = v73;
  sub_10000F148((uint64_t)v14, v73, &qword_1000A78D0);
  uint64_t v63 = v74;
  sub_10000F148(v61, v74, &qword_1000A78D8);
  uint64_t v64 = sub_10000697C(&qword_1000A7928);
  sub_10000F148(v62, v63 + *(int *)(v64 + 48), &qword_1000A78D0);
  sub_10000F024((uint64_t)v14, &qword_1000A78D0);
  sub_10000F024(v38, &qword_1000A78D8);
  sub_10000F024(v62, &qword_1000A78D0);
  return sub_10000F024(v61, &qword_1000A78D8);
}

uint64_t sub_10003DB24()
{
  uint64_t v0 = sub_10008A260();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MediumWorldClockView(0);
  sub_10008A240();
  char v4 = sub_10008A220();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v4) {
    return sub_100089FE0();
  }
  sub_100014D5C();
  return swift_retain();
}

uint64_t sub_10003DC1C(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (double *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (char *)v8 + *(int *)(v9 + 24);
  uint64_t v11 = sub_10008A260();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, a1, v11);
  double *v8 = a2;
  v8[1] = a3;
  sub_100089F70();
  return sub_100049F80((uint64_t)v8, type metadata accessor for ClockWidgetAccentableOpacity);
}

uint64_t sub_10003DD3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v60 = sub_10000697C(&qword_1000A7930);
  __chkstk_darwin(v60);
  uint64_t v61 = (uint64_t)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10008A260();
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  __chkstk_darwin(v9);
  unint64_t v54 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for WorldClockCity();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8);
  double v14 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (int *)type metadata accessor for MediumClockFaceView(0);
  __chkstk_darwin(v15);
  char v17 = (void *)((char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = sub_10000697C(&qword_1000A7910);
  __chkstk_darwin(v59);
  uint64_t v57 = (uint64_t)v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v58 = (uint64_t)v53 - v20;
  uint64_t v21 = *(void *)(a2 + *(int *)(type metadata accessor for WorldClockEntry() + 20));
  uint64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    v53[1] = a4;
    uint64_t v23 = v21 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v24 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain();
    while ((sub_100084DB4(v23, a1) & 1) == 0)
    {
      v23 += v24;
      if (!--v22)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    sub_100049F18(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
    *((void *)&v63 + 1) = &type metadata for MediumSizeDimentions;
    *(void *)&long long v64 = &off_1000A29F8;
    uint64_t v39 = swift_allocObject();
    *(void *)&long long v62 = v39;
    long long v40 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v39 + 48) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v39 + 64) = v40;
    *(void *)(v39 + 80) = *(void *)(a3 + 64);
    long long v41 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v39 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(v39 + 32) = v41;
    double v42 = (int *)type metadata accessor for MediumWorldClockView(0);
    char v43 = *(unsigned char *)(a2 + v42[5]);
    char v44 = *(unsigned char *)(a2 + v42[7]);
    uint64_t v45 = a2 + v42[8];
    double v47 = v54;
    uint64_t v46 = v55;
    uint64_t v48 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v45, v56);
    *char v17 = swift_getKeyPath();
    sub_10000697C(&qword_1000A4FF0);
    swift_storeEnumTagMultiPayload();
    sub_10004A544((uint64_t)v14, (uint64_t)v17 + v15[5], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
    sub_100049F00(&v62, (uint64_t)v17 + v15[6]);
    *((unsigned char *)v17 + v15[7]) = v43;
    *((unsigned char *)v17 + v15[8]) = 0;
    *(uint64_t *)((char *)v17 + v15[9]) = 0x3FE199999999999ALL;
    *((unsigned char *)v17 + v15[10]) = v44;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))((char *)v17 + v15[11], v47, v48);
    sub_100070D68(a3);
    sub_10008A1B0();
    sub_100089720();
    uint64_t v49 = v57;
    sub_100049F18((uint64_t)v17, v57, type metadata accessor for MediumClockFaceView);
    double v50 = (_OWORD *)(v49 + *(int *)(v59 + 36));
    long long v51 = v63;
    *double v50 = v62;
    v50[1] = v51;
    v50[2] = v64;
    sub_100049F80((uint64_t)v17, type metadata accessor for MediumClockFaceView);
    uint64_t v38 = v58;
    sub_100027078(v49, v58, &qword_1000A7910);
    sub_10000F148(v38, v61, &qword_1000A7910);
    swift_storeEnumTagMultiPayload();
    sub_100071828();
  }
  else
  {
LABEL_6:
    sub_10008435C((uint64_t)v14);
    *((void *)&v63 + 1) = &type metadata for MediumSizeDimentions;
    *(void *)&long long v64 = &off_1000A29F8;
    uint64_t v25 = swift_allocObject();
    *(void *)&long long v62 = v25;
    long long v26 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v25 + 48) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v25 + 64) = v26;
    *(void *)(v25 + 80) = *(void *)(a3 + 64);
    long long v27 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v25 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(v25 + 32) = v27;
    uint64_t v28 = (int *)type metadata accessor for MediumWorldClockView(0);
    char v29 = *(unsigned char *)(a2 + v28[5]);
    char v30 = *(unsigned char *)(a2 + v28[7]);
    uint64_t v31 = a2 + v28[8];
    uint64_t v33 = v54;
    uint64_t v32 = v55;
    uint64_t v34 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v31, v56);
    *char v17 = swift_getKeyPath();
    sub_10000697C(&qword_1000A4FF0);
    swift_storeEnumTagMultiPayload();
    sub_10004A544((uint64_t)v14, (uint64_t)v17 + v15[5], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
    sub_100049F00(&v62, (uint64_t)v17 + v15[6]);
    *((unsigned char *)v17 + v15[7]) = v29;
    *((unsigned char *)v17 + v15[8]) = 1;
    *(uint64_t *)((char *)v17 + v15[9]) = 0x3FE199999999999ALL;
    *((unsigned char *)v17 + v15[10]) = v30;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))((char *)v17 + v15[11], v33, v34);
    sub_100070D68(a3);
    sub_10008A1B0();
    sub_100089720();
    uint64_t v35 = v57;
    sub_100049F18((uint64_t)v17, v57, type metadata accessor for MediumClockFaceView);
    char v36 = (_OWORD *)(v35 + *(int *)(v59 + 36));
    long long v37 = v63;
    *char v36 = v62;
    v36[1] = v37;
    v36[2] = v64;
    sub_100049F80((uint64_t)v17, type metadata accessor for MediumClockFaceView);
    uint64_t v38 = v58;
    sub_100027078(v35, v58, &qword_1000A7910);
    sub_10000F148(v38, v61, &qword_1000A7910);
    swift_storeEnumTagMultiPayload();
    sub_100071828();
  }
  sub_100089AB0();
  return sub_10000F024(v38, &qword_1000A7910);
}

uint64_t sub_10003E474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_100027078(a1, a8, &qword_1000A4B70);
  uint64_t v15 = (int *)type metadata accessor for MediumClockFaceView(0);
  sub_10004A544(a2, a8 + v15[5], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_100049F00(a3, a8 + v15[6]);
  *(unsigned char *)(a8 + v15[7]) = a4;
  *(unsigned char *)(a8 + v15[8]) = a5;
  *(void *)(a8 + v15[9]) = 0x3FE199999999999ALL;
  *(unsigned char *)(a8 + v15[10]) = a6;
  uint64_t v16 = a8 + v15[11];
  uint64_t v17 = sub_10008A260();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32);

  return v18(v16, a7, v17);
}

uint64_t sub_10003E590@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  sub_100049F18(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MediumWorldClockView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_10004A544((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for MediumWorldClockView);
  *a2 = sub_10005C4A0;
  a2[1] = (uint64_t (*)(uint64_t))v7;
  return result;
}

uint64_t sub_10003E6A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10004A968(type metadata accessor for MediumClockFaceView, a1);
}

uint64_t sub_10003E6BC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MediumClockFaceView(0);
  return sub_10004A5AC(a1, v1 + *(int *)(v3 + 20), (uint64_t (*)(void))type metadata accessor for WorldClockCity);
}

uint64_t (*sub_10003E708())(void)
{
  return nullsub_1;
}

uint64_t sub_10003E750@<X0>(uint64_t a1@<X8>)
{
  return sub_10003E768(type metadata accessor for MediumClockFaceView, a1);
}

uint64_t sub_10003E768@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);

  return sub_10004A84C(v4, a2);
}

uint64_t sub_10003E7B4()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 28));
}

uint64_t sub_10003E7D8(char a1)
{
  uint64_t result = type metadata accessor for MediumClockFaceView(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10003E808())(void)
{
  return nullsub_1;
}

uint64_t sub_10003E850()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 32));
}

uint64_t sub_10003E874(char a1)
{
  uint64_t result = type metadata accessor for MediumClockFaceView(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10003E8A4())(void)
{
  return nullsub_1;
}

double sub_10003E8EC()
{
  return 0.55;
}

double sub_10003E8F8()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 36));
}

uint64_t sub_10003E91C()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 40));
}

uint64_t sub_10003E940@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 44);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10003E9B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v2 = sub_100089B10();
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A5F00);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A5F68);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000697C(&qword_1000A5F70);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000697C(&qword_1000A5F78);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v27 = v14;
  uint64_t v28 = v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = sub_100089A00();
  *((void *)v10 + 1) = 0;
  v10[16] = 1;
  uint64_t v18 = (uint64_t)&v10[*(int *)(sub_10000697C(&qword_1000A5F80) + 44)];
  uint64_t v26 = v1;
  sub_10003ED80(v1, v18);
  type metadata accessor for MediumClockFaceView(0);
  sub_100016570();
  uint64_t v19 = sub_100089A40();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v7, 0, 1, v19);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  uint64_t v22 = sub_10000697C(&qword_1000A5F58);
  sub_10000F148((uint64_t)v7, (uint64_t)v21 + *(int *)(v22 + 28), &qword_1000A5F00);
  *uint64_t v21 = KeyPath;
  sub_10000F148((uint64_t)v10, (uint64_t)v13, &qword_1000A5F68);
  sub_10000F024((uint64_t)v7, &qword_1000A5F00);
  sub_10000F024((uint64_t)v10, &qword_1000A5F68);
  sub_100089B00();
  unint64_t v23 = sub_10005C50C();
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
  sub_10000F024((uint64_t)v13, &qword_1000A5F70);
  uint64_t v32 = v11;
  unint64_t v33 = v23;
  swift_getOpaqueTypeConformance2();
  uint64_t v24 = v27;
  sub_100089F10();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v24);
}

uint64_t sub_10003ED80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v231 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A7810);
  __chkstk_darwin(v3 - 8);
  v224 = (char *)&v199 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = sub_10000697C(&qword_1000A7818);
  __chkstk_darwin(v220);
  v225 = (char *)&v199 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = sub_10000697C(&qword_1000A7820);
  __chkstk_darwin(v221);
  uint64_t v226 = (uint64_t)&v199 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v223 = sub_10000697C(&qword_1000A7828);
  __chkstk_darwin(v223);
  uint64_t v202 = (uint64_t)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v201 = (uint64_t)&v199 - v9;
  __chkstk_darwin(v10);
  uint64_t v228 = (uint64_t)&v199 - v11;
  __chkstk_darwin(v12);
  uint64_t v227 = (uint64_t)&v199 - v13;
  uint64_t v14 = sub_10000697C(&qword_1000A7830);
  __chkstk_darwin(v14 - 8);
  uint64_t v229 = (uint64_t)&v199 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v230 = (uint64_t)&v199 - v17;
  uint64_t v212 = sub_10000697C(&qword_1000A5000) - 8;
  __chkstk_darwin(v212);
  v209 = (uint64_t *)((char *)&v199 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_1000899F0();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v199 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v199 - v24;
  uint64_t v207 = sub_10000697C(&qword_1000A7838) - 8;
  __chkstk_darwin(v207);
  v206 = (char *)&v199 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v213 = sub_10000697C(&qword_1000A7840) - 8;
  __chkstk_darwin(v213);
  uint64_t v210 = (uint64_t)&v199 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = sub_10000697C(&qword_1000A7848);
  __chkstk_darwin(v215);
  uint64_t v211 = (uint64_t)&v199 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v216 = sub_10000697C(&qword_1000A7850);
  __chkstk_darwin(v216);
  uint64_t v222 = (uint64_t)&v199 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v208 = (char *)&v199 - v31;
  __chkstk_darwin(v32);
  v214 = (char *)&v199 - v33;
  __chkstk_darwin(v34);
  uint64_t v240 = (uint64_t)&v199 - v35;
  uint64_t v36 = sub_10000697C(&qword_1000A7858);
  __chkstk_darwin(v36 - 8);
  uint64_t v219 = (uint64_t)&v199 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  long long v40 = (uint64_t *)((char *)&v199 - v39);
  __chkstk_darwin(v41);
  char v43 = (char *)&v199 - v42;
  *long long v40 = sub_10008A1B0();
  v40[1] = v44;
  uint64_t v45 = sub_10000697C(&qword_1000A7860);
  sub_100040388(a1, (uint64_t)v40 + *(int *)(v45 + 44));
  v218 = v43;
  sub_100027078((uint64_t)v40, (uint64_t)v43, &qword_1000A7858);
  v233 = &type metadata accessor for ContentSizeCategory;
  unint64_t v234 = 0x800000010008B250;
  sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010008B250, (uint64_t)v25);
  uint64_t v204 = v20;
  uint64_t v46 = *(void (**)(void))(v20 + 104);
  uint64_t v239 = v20 + 104;
  v237 = (void (*)(char *, void, uint64_t))v46;
  v235 = v22;
  unsigned int v217 = enum case for ContentSizeCategory.extraExtraLarge(_:);
  uint64_t v243 = v19;
  v46(v22);
  v242 = v25;
  BOOL v47 = sub_100017294((uint64_t)v25, (uint64_t)v22);
  uint64_t v48 = *(void (**)(void, void))(v20 + 8);
  uint64_t v238 = v20 + 8;
  v236 = v48;
  v48(v22, v19);
  v48(v25, v19);
  v241 = (int *)type metadata accessor for MediumClockFaceView(0);
  uint64_t v49 = a1 + v241[5];
  uint64_t v50 = type metadata accessor for WorldClockCity();
  uint64_t v205 = v50;
  uint64_t v51 = 24;
  if (v47) {
    uint64_t v51 = 28;
  }
  uint64_t v52 = *(void *)(v49 + *(int *)(v50 + v51));
  uint64_t v53 = swift_bridgeObjectRetain();
  *(void *)&long long v302 = v52;
  *((void *)&v302 + 1) = v53;
  unint64_t v232 = sub_100032F54();
  uint64_t v54 = sub_100089E40();
  uint64_t v56 = v55;
  char v58 = v57 & 1;
  sub_100089C60();
  uint64_t v59 = sub_100089D60();
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  char v65 = v64 & 1;
  sub_10000B7E0(v54, v56, v58);
  swift_bridgeObjectRelease();
  uint64_t v66 = (void *)(a1 + v241[6]);
  uint64_t v244 = a1;
  uint64_t v67 = v66[3];
  uint64_t v68 = v66[4];
  sub_10005CC44(v66, v67);
  double v69 = (*(double (**)(uint64_t, uint64_t))(v68 + 24))(v67, v68);
  uint64_t v70 = sub_10008A1B0();
  sub_1000362C0(0.0, 1, 0.0, 1, v69, 0, 0.0, 1, (uint64_t)v312, 0.0, 1, 0.0, 1, v70, v71, v59, v61, v65, v63);
  sub_10000B7E0(v59, v61, v65);
  swift_bridgeObjectRelease();
  long long v299 = v312[6];
  long long v300 = v312[7];
  long long v301 = v312[8];
  long long v295 = v312[2];
  long long v296 = v312[3];
  long long v298 = v312[5];
  long long v297 = v312[4];
  long long v294 = v312[1];
  long long v293 = v312[0];
  uint64_t v72 = v66[3];
  uint64_t v73 = v66[4];
  sub_10005CC44(v66, v72);
  uint64_t v74 = (uint64_t)v242;
  uint64_t v75 = v233;
  unint64_t v76 = v234;
  sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))v233, 0xD000000000000013, v234, (uint64_t)v242);
  uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 208))(v74, v72, v73);
  uint64_t v78 = v236;
  v236(v74, v243);
  uint64_t KeyPath = swift_getKeyPath();
  long long v308 = v299;
  long long v309 = v300;
  long long v310 = v301;
  long long v304 = v295;
  long long v305 = v296;
  long long v307 = v298;
  long long v306 = v297;
  long long v303 = v294;
  long long v302 = v293;
  *(void *)&long long v311 = KeyPath;
  *((void *)&v311 + 1) = v77;
  uint64_t v203 = swift_getKeyPath();
  uint64_t v80 = v66[3];
  uint64_t v81 = v66[4];
  v200 = v66;
  sub_10005CC44(v66, v80);
  uint64_t v82 = (uint64_t)v235;
  sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))v75, 0xD000000000000013, v76, (uint64_t)v235);
  uint64_t v83 = (uint64_t)v242;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 200))(v82, v80, v81);
  uint64_t v84 = v243;
  uint64_t v85 = v78;
  v78(v82, v243);
  uint64_t v86 = v209;
  uint64_t v87 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))((char *)v209 + *(int *)(v212 + 36), v83, v84);
  uint64_t *v86 = v203;
  uint64_t v88 = v206;
  sub_10000F148((uint64_t)v86, (uint64_t)&v206[*(int *)(v207 + 44)], &qword_1000A5000);
  long long v89 = v309;
  v88[6] = v308;
  v88[7] = v89;
  long long v90 = v311;
  v88[8] = v310;
  v88[9] = v90;
  long long v91 = v305;
  v88[2] = v304;
  v88[3] = v91;
  long long v92 = v307;
  v88[4] = v306;
  v88[5] = v92;
  long long v93 = v303;
  _OWORD *v88 = v302;
  v88[1] = v93;
  sub_1000712CC((uint64_t)&v302);
  sub_10000F024((uint64_t)v86, &qword_1000A5000);
  v85(v87, v84);
  sub_100071328((uint64_t)&v302);
  uint64_t v94 = sub_10008A000();
  uint64_t v95 = swift_getKeyPath();
  uint64_t v96 = v210;
  sub_10000F148((uint64_t)v88, v210, &qword_1000A7838);
  uint64_t v97 = (uint64_t *)(v96 + *(int *)(v213 + 44));
  uint64_t *v97 = v95;
  v97[1] = v94;
  sub_10000F024((uint64_t)v88, &qword_1000A7838);
  uint64_t v98 = swift_getKeyPath();
  uint64_t v99 = v211;
  sub_10000F148(v96, v211, &qword_1000A7840);
  uint64_t v100 = v99 + *(int *)(v215 + 36);
  *(void *)uint64_t v100 = v98;
  *(void *)(v100 + 8) = 1;
  *(unsigned char *)(v100 + 16) = 0;
  sub_10000F024(v96, &qword_1000A7840);
  sub_100071384();
  uint64_t v101 = (uint64_t)v208;
  sub_100089F50();
  sub_10000F024(v99, &qword_1000A7848);
  uint64_t v102 = v244 + v241[5];
  uint64_t v103 = (uint64_t *)(v102 + *(int *)(v205 + 24));
  uint64_t v105 = *v103;
  uint64_t v104 = v103[1];
  *(void *)&long long v283 = v105;
  *((void *)&v283 + 1) = v104;
  uint64_t v106 = (uint64_t)v214;
  sub_100089760();
  sub_10000F024(v101, &qword_1000A7850);
  sub_100027078(v106, v240, &qword_1000A7850);
  sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))v233, 0xD000000000000013, v234, v87);
  uint64_t v107 = (uint64_t)v235;
  v237(v235, enum case for ContentSizeCategory.accessibilityLarge(_:), v84);
  uint64_t v108 = v107;
  LOBYTE(v107) = sub_10005C698(v87, v107);
  v85(v108, v84);
  v85(v87, v84);
  if (v107)
  {
    uint64_t v109 = sub_10008325C();
    uint64_t v111 = v110;
    char v113 = v112 & 1;
    sub_100089C60();
    uint64_t v114 = sub_100089D60();
    uint64_t v116 = v115;
    uint64_t v216 = v102;
    uint64_t v118 = v117;
    char v120 = v119 & 1;
    sub_10000B7E0(v109, v111, v113);
    swift_bridgeObjectRelease();
    uint64_t v121 = v200;
    uint64_t v122 = v200[3];
    uint64_t v123 = v200[4];
    sub_10005CC44(v200, v122);
    double v124 = (*(double (**)(uint64_t, uint64_t))(v123 + 24))(v122, v123);
    uint64_t v125 = sub_10008A1B0();
    sub_1000362C0(0.0, 1, 0.0, 1, v124, 0, 0.0, 1, (uint64_t)&v283, 0.0, 1, 0.0, 1, v125, v126, v114, v116, v120, v118);
    sub_10000B7E0(v114, v116, v120);
    swift_bridgeObjectRelease();
    long long v280 = v289;
    long long v281 = v290;
    long long v282 = v291;
    long long v276 = v285;
    long long v277 = v286;
    long long v278 = v287;
    long long v279 = v288;
    long long v274 = v283;
    long long v275 = v284;
    uint64_t v127 = v121[3];
    uint64_t v128 = v121[4];
    sub_10005CC44(v121, v127);
    uint64_t v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v128 + 48))(v127, v128);
    uint64_t v130 = swift_getKeyPath();
    long long v270 = v280;
    long long v271 = v281;
    long long v272 = v282;
    long long v266 = v276;
    long long v267 = v277;
    long long v268 = v278;
    long long v269 = v279;
    long long v264 = v274;
    long long v265 = v275;
    *(void *)&long long v273 = v130;
    *((void *)&v273 + 1) = v129;
    uint64_t v131 = (uint64_t)v242;
    uint64_t v132 = v243;
    v237(v242, v217, v243);
    v235 = (char *)sub_10000697C(&qword_1000A7888);
    unint64_t v234 = sub_10005D09C(&qword_1000A7880, &qword_1000A7888, &qword_1000A6270, &qword_1000A6278);
    uint64_t v133 = (uint64_t)v224;
    sub_10002F2F4(v131);
    v236(v131, v132);
    long long v289 = v270;
    long long v290 = v271;
    long long v291 = v272;
    long long v292 = v273;
    long long v285 = v266;
    long long v286 = v267;
    long long v287 = v268;
    long long v288 = v269;
    long long v283 = v264;
    long long v284 = v265;
    sub_100071328((uint64_t)&v283);
    uint64_t v134 = sub_100089FC0();
    v233 = (uint64_t (**)(void))v241[9];
    uint64_t v135 = *(uint64_t *)((char *)v233 + v244);
    v214 = (char *)(v244 + v241[11]);
    uint64_t v136 = v214;
    uint64_t v137 = (uint64_t *)&v225[*(int *)(v220 + 36)];
    uint64_t v138 = (uint64_t)v225;
    v241 = (int *)type metadata accessor for ClockWidgetAccentableForegroundColor(0);
    uint64_t v139 = (char *)v137 + v241[6];
    uint64_t v213 = sub_10008A260();
    uint64_t v140 = *(void *)(v213 - 8);
    uint64_t v212 = *(void *)(v140 + 16);
    uint64_t v215 = v140 + 16;
    ((void (*)(char *, char *, uint64_t))v212)(v139, v136, v213);
    *uint64_t v137 = v134;
    v137[1] = v135;
    uint64_t v141 = v138;
    sub_100027078(v133, v138, &qword_1000A7810);
    uint64_t v142 = swift_getKeyPath();
    uint64_t v143 = v138;
    uint64_t v144 = v226;
    sub_10000F148(v143, v226, &qword_1000A7818);
    uint64_t v145 = v144 + *(int *)(v221 + 36);
    *(void *)uint64_t v145 = v142;
    *(void *)(v145 + 8) = 1;
    *(unsigned char *)(v145 + 16) = 0;
    sub_10000F024(v141, &qword_1000A7818);
    uint64_t v146 = swift_getKeyPath();
    uint64_t v147 = v228;
    sub_10000F148(v144, v228, &qword_1000A7820);
    uint64_t v148 = (uint64_t *)(v147 + *(int *)(v223 + 36));
    *uint64_t v148 = v146;
    v148[1] = 0x3FE0000000000000;
    sub_10000F024(v144, &qword_1000A7820);
    sub_100027078(v147, v227, &qword_1000A7828);
    char v149 = sub_100005184();
    sub_100083A28(v149 & 1);
    *(void *)&long long v264 = v150;
    *((void *)&v264 + 1) = v151;
    uint64_t v152 = sub_100089E40();
    uint64_t v154 = v153;
    LOBYTE(v141) = v155 & 1;
    sub_100089C60();
    uint64_t v156 = sub_100089D60();
    uint64_t v158 = v157;
    uint64_t v160 = v159;
    LOBYTE(v133) = v161 & 1;
    sub_10000B7E0(v152, v154, v141);
    swift_bridgeObjectRelease();
    uint64_t v162 = v121[3];
    uint64_t v163 = v121[4];
    sub_10005CC44(v121, v162);
    double v164 = (*(double (**)(uint64_t, uint64_t))(v163 + 24))(v162, v163);
    uint64_t v165 = sub_10008A1B0();
    sub_1000362C0(0.0, 1, 0.0, 1, v164, 0, 0.0, 1, (uint64_t)&v264, 0.0, 1, 0.0, 1, v165, v166, v156, v158, v133, v160);
    sub_10000B7E0(v156, v158, v133);
    swift_bridgeObjectRelease();
    long long v261 = v270;
    long long v262 = v271;
    long long v263 = v272;
    long long v257 = v266;
    long long v258 = v267;
    long long v259 = v268;
    long long v260 = v269;
    long long v255 = v264;
    long long v256 = v265;
    uint64_t v167 = v121[3];
    uint64_t v168 = v121[4];
    sub_10005CC44(v121, v167);
    uint64_t v169 = (*(uint64_t (**)(uint64_t, uint64_t))(v168 + 48))(v167, v168);
    uint64_t v170 = swift_getKeyPath();
    long long v251 = v261;
    long long v252 = v262;
    long long v253 = v263;
    long long v247 = v257;
    long long v248 = v258;
    long long v249 = v259;
    long long v250 = v260;
    long long v245 = v255;
    long long v246 = v256;
    *(void *)&long long v254 = v170;
    *((void *)&v254 + 1) = v169;
    uint64_t v171 = (uint64_t)v242;
    uint64_t v172 = v243;
    v237(v242, v217, v243);
    uint64_t v173 = (uint64_t)v224;
    sub_10002F2F4(v171);
    v236(v171, v172);
    long long v270 = v251;
    long long v271 = v252;
    long long v272 = v253;
    long long v273 = v254;
    long long v266 = v247;
    long long v267 = v248;
    long long v268 = v249;
    long long v269 = v250;
    long long v264 = v245;
    long long v265 = v246;
    sub_100071328((uint64_t)&v264);
    uint64_t v174 = sub_100089FC0();
    uint64_t v175 = *(uint64_t *)((char *)v233 + v244);
    uint64_t v176 = (uint64_t)v225;
    v177 = (uint64_t *)&v225[*(int *)(v220 + 36)];
    ((void (*)(char *, char *, uint64_t))v212)((char *)v177 + v241[6], v214, v213);
    uint64_t *v177 = v174;
    v177[1] = v175;
    sub_100027078(v173, v176, &qword_1000A7810);
    uint64_t v178 = swift_getKeyPath();
    uint64_t v179 = v226;
    sub_10000F148(v176, v226, &qword_1000A7818);
    uint64_t v180 = v179 + *(int *)(v221 + 36);
    *(void *)uint64_t v180 = v178;
    *(void *)(v180 + 8) = 1;
    *(unsigned char *)(v180 + 16) = 0;
    sub_10000F024(v176, &qword_1000A7818);
    uint64_t v181 = swift_getKeyPath();
    uint64_t v182 = v201;
    sub_10000F148(v179, v201, &qword_1000A7820);
    v183 = (uint64_t *)(v182 + *(int *)(v223 + 36));
    uint64_t *v183 = v181;
    v183[1] = 0x3FE0000000000000;
    sub_10000F024(v179, &qword_1000A7820);
    uint64_t v184 = v228;
    sub_100027078(v182, v228, &qword_1000A7828);
    uint64_t v185 = v227;
    sub_10000F148(v227, v182, &qword_1000A7828);
    uint64_t v186 = v202;
    sub_10000F148(v184, v202, &qword_1000A7828);
    uint64_t v187 = v229;
    sub_10000F148(v182, v229, &qword_1000A7828);
    uint64_t v188 = sub_10000697C(&qword_1000A78A0);
    sub_10000F148(v186, v187 + *(int *)(v188 + 48), &qword_1000A7828);
    sub_10000F024(v184, &qword_1000A7828);
    sub_10000F024(v185, &qword_1000A7828);
    sub_10000F024(v186, &qword_1000A7828);
    sub_10000F024(v182, &qword_1000A7828);
    uint64_t v189 = sub_10000697C(&qword_1000A7890);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v189 - 8) + 56))(v187, 0, 1, v189);
    uint64_t v190 = v230;
    sub_100027078(v187, v230, &qword_1000A7830);
  }
  else
  {
    uint64_t v191 = sub_10000697C(&qword_1000A7890);
    uint64_t v190 = v230;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v191 - 8) + 56))(v230, 1, 1, v191);
    uint64_t v187 = v229;
  }
  uint64_t v193 = (uint64_t)v218;
  uint64_t v192 = v219;
  sub_10000F148((uint64_t)v218, v219, &qword_1000A7858);
  uint64_t v194 = v240;
  uint64_t v195 = v222;
  sub_10000F148(v240, v222, &qword_1000A7850);
  sub_10000F148(v190, v187, &qword_1000A7830);
  uint64_t v196 = v231;
  sub_10000F148(v192, v231, &qword_1000A7858);
  uint64_t v197 = sub_10000697C(&qword_1000A7898);
  sub_10000F148(v195, v196 + *(int *)(v197 + 48), &qword_1000A7850);
  sub_10000F148(v187, v196 + *(int *)(v197 + 64), &qword_1000A7830);
  sub_10000F024(v190, &qword_1000A7830);
  sub_10000F024(v194, &qword_1000A7850);
  sub_10000F024(v193, &qword_1000A7858);
  sub_10000F024(v187, &qword_1000A7830);
  sub_10000F024(v195, &qword_1000A7850);
  return sub_10000F024(v192, &qword_1000A7858);
}

uint64_t sub_100040388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v103 = a2;
  uint64_t v110 = type metadata accessor for Clock(0);
  __chkstk_darwin(v110);
  uint64_t v104 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v102 = (char *)&v94 - v5;
  __chkstk_darwin(v6);
  uint64_t v111 = (uint64_t)&v94 - v7;
  uint64_t v8 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v8 - 8);
  uint64_t v114 = (uint64_t)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  char v113 = (char *)&v94 - v11;
  uint64_t v119 = sub_100089580();
  uint64_t v123 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v118 = (uint64_t)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v112 = (char *)&v94 - v14;
  uint64_t v15 = (int *)type metadata accessor for MediumClockFaceView(0);
  __chkstk_darwin(v15);
  uint64_t v108 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v107 = (uint64_t)&v94 - v18;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v94 - v20;
  uint64_t v22 = sub_10008A260();
  uint64_t v117 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (int *)type metadata accessor for ClockFace(0);
  __chkstk_darwin(v25);
  uint64_t v109 = (uint64_t)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v29 = (double *)((char *)&v94 - v28);
  __chkstk_darwin(v30);
  uint64_t v120 = (uint64_t)&v94 - v31;
  uint64_t v32 = (void *)(a1 + v15[6]);
  uint64_t v34 = v32[3];
  uint64_t v33 = v32[4];
  uint64_t v101 = v32;
  sub_10005CC44(v32, v34);
  double v35 = (*(double (**)(uint64_t, uint64_t))(v33 + 24))(v34, v33);
  uint64_t v36 = a1;
  uint64_t v37 = v24;
  uint64_t v38 = v36 + v15[11];
  sub_10008A230();
  uint64_t v121 = v38;
  LOBYTE(v38) = sub_10008A220();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v117 + 8);
  uint64_t v122 = v22;
  uint64_t v40 = v22;
  uint64_t v41 = v36;
  uint64_t v115 = v39;
  uint64_t v116 = v117 + 8;
  v39(v24, v40);
  sub_100049F18(v36, (uint64_t)v21, type metadata accessor for MediumClockFaceView);
  if (v38)
  {
    char v42 = v21[v15[10]];
    sub_100049F80((uint64_t)v21, type metadata accessor for MediumClockFaceView);
    char v43 = v15;
    uint64_t v44 = (uint64_t)v112;
    if (v42)
    {
      LODWORD(v106) = 0;
      goto LABEL_6;
    }
  }
  else
  {
    sub_100049F80((uint64_t)v21, type metadata accessor for MediumClockFaceView);
    char v43 = v15;
    uint64_t v44 = (uint64_t)v112;
  }
  LODWORD(v106) = sub_100082834();
LABEL_6:
  uint64_t v45 = v41 + v43[5];
  sub_100083900(v44);
  uint64_t v99 = v43[8];
  int v105 = *(unsigned __int8 *)(v41 + v99);
  uint64_t v98 = *(int *)(type metadata accessor for WorldClockCity() + 20);
  char v46 = *(unsigned char *)(v45 + v98);
  uint64_t v47 = sub_1000893C0();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = v48;
  uint64_t v50 = 1;
  char v112 = (char *)v47;
  if (v46)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v113, v45, v47);
    uint64_t v47 = (uint64_t)v112;
    uint64_t v50 = 0;
  }
  uint64_t v95 = v49;
  uint64_t v51 = (uint64_t)v113;
  uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v97(v113, v50, 1, v47);
  uint64_t v100 = v43[10];
  char v52 = *(unsigned char *)(v41 + v100);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v54 = v25[14];
  uint64_t v96 = v43;
  *(void *)((char *)v29 + v54) = KeyPath;
  sub_10000697C(&qword_1000A5E40);
  swift_storeEnumTagMultiPayload();
  double *v29 = v35;
  *((unsigned char *)v29 + 8) = v106 & 1;
  uint64_t v55 = (char *)v29 + v25[6];
  uint64_t v56 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v123 + 32);
  v123 += 32;
  uint64_t v106 = v56;
  v56(v55, v44, v119);
  *((unsigned char *)v29 + v25[7]) = v105;
  *((unsigned char *)v29 + v25[8]) = 0;
  sub_100027078(v51, (uint64_t)v29 + v25[9], &qword_1000A47F8);
  *((unsigned char *)v29 + v25[10]) = 1;
  *((unsigned char *)v29 + v25[11]) = 0;
  uint64_t v57 = v25[12];
  *((unsigned char *)v29 + v57) = sub_10002F50C();
  *((unsigned char *)v29 + v25[13]) = v52;
  sub_10004A544((uint64_t)v29, v120, type metadata accessor for ClockFace);
  sub_10008A230();
  char v58 = sub_10008A220();
  v115(v37, v122);
  uint64_t v59 = v107;
  sub_100049F18(v41, v107, type metadata accessor for MediumClockFaceView);
  if (v58)
  {
    uint64_t v60 = v96;
    char v61 = *(unsigned char *)(v59 + v96[10]);
    sub_100049F80(v59, type metadata accessor for MediumClockFaceView);
    uint64_t v62 = (uint64_t)v104;
    uint64_t v63 = v114;
    uint64_t v64 = (uint64_t)v101;
    uint64_t v65 = v98;
    if (v61)
    {
      LODWORD(v113) = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v60 = v96;
    sub_100049F80(v59, type metadata accessor for MediumClockFaceView);
    uint64_t v62 = (uint64_t)v104;
    uint64_t v63 = v114;
    uint64_t v64 = (uint64_t)v101;
    uint64_t v65 = v98;
  }
  LODWORD(v113) = sub_100082834();
LABEL_13:
  sub_100083900(v118);
  sub_10004A84C(v64, (uint64_t)&v124);
  char v66 = *(unsigned char *)(v45 + v65);
  uint64_t v67 = (uint64_t)v108;
  LODWORD(v107) = *(unsigned __int8 *)(v41 + v60[7]);
  if (v66)
  {
    uint64_t v68 = v112;
    (*(void (**)(uint64_t, uint64_t, char *))(v95 + 16))(v63, v45, v112);
    double v69 = v68;
    uint64_t v70 = 0;
    uint64_t v71 = v99;
  }
  else
  {
    uint64_t v70 = 1;
    uint64_t v71 = v99;
    double v69 = v112;
  }
  v97((char *)v63, v70, 1, (uint64_t)v69);
  char v72 = *(unsigned char *)(v41 + v71);
  sub_10008A230();
  char v73 = sub_10008A220();
  v115(v37, v122);
  sub_100049F18(v41, v67, type metadata accessor for MediumClockFaceView);
  if ((v73 & 1) == 0)
  {
    sub_100049F80(v67, type metadata accessor for MediumClockFaceView);
    uint64_t v75 = v103;
    unint64_t v76 = v102;
    uint64_t v77 = v100;
    uint64_t v78 = v106;
    goto LABEL_20;
  }
  char v74 = *(unsigned char *)(v67 + v60[10]);
  sub_100049F80(v67, type metadata accessor for MediumClockFaceView);
  uint64_t v75 = v103;
  unint64_t v76 = v102;
  uint64_t v77 = v100;
  uint64_t v78 = v106;
  if ((v74 & 1) == 0)
  {
LABEL_20:
    BOOL v79 = sub_100082834();
    goto LABEL_21;
  }
  BOOL v79 = 0;
LABEL_21:
  char v80 = v79;
  uint64_t v81 = sub_100015948(v79);
  uint64_t v82 = sub_100015808(v80);
  uint64_t v83 = sub_100015948(v80);
  char v84 = *(unsigned char *)(v41 + v77);
  uint64_t v85 = (int *)v110;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v117 + 16))(&v76[*(int *)(v110 + 56)], v121, v122);
  unsigned char *v76 = v113 & 1;
  v78(&v76[v85[5]], v118, v119);
  sub_100049F00(&v124, (uint64_t)&v76[v85[6]]);
  v76[v85[7]] = v107;
  sub_100027078(v114, (uint64_t)&v76[v85[8]], &qword_1000A47F8);
  v76[v85[9]] = v72;
  v76[v85[10]] = 1;
  uint64_t v86 = &v76[v85[11]];
  *(_OWORD *)uint64_t v86 = xmmword_1000997F0;
  *((void *)v86 + 2) = 0x3F916872B020C49CLL;
  *((void *)v86 + 3) = v81;
  *((void *)v86 + 4) = v82;
  v86[40] = 1;
  *((void *)v86 + 6) = v83;
  *((void *)v86 + 7) = 0x3FC3333333333333;
  v76[v85[12]] = 0;
  v76[v85[13]] = v84;
  uint64_t v87 = &v76[v85[15]];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  *(void *)uint64_t v87 = sub_1000896B0();
  v87[8] = v88 & 1;
  uint64_t v89 = v111;
  sub_10004A544((uint64_t)v76, v111, type metadata accessor for Clock);
  uint64_t v90 = v120;
  uint64_t v91 = v109;
  sub_100049F18(v120, v109, type metadata accessor for ClockFace);
  sub_100049F18(v89, v62, type metadata accessor for Clock);
  sub_100049F18(v91, v75, type metadata accessor for ClockFace);
  uint64_t v92 = sub_10000697C(&qword_1000A78A8);
  sub_100049F18(v62, v75 + *(int *)(v92 + 48), type metadata accessor for Clock);
  sub_100049F80(v89, type metadata accessor for Clock);
  sub_100049F80(v90, type metadata accessor for ClockFace);
  sub_100049F80(v62, type metadata accessor for Clock);
  return sub_100049F80(v91, type metadata accessor for ClockFace);
}

BOOL sub_100040F3C()
{
  uint64_t v1 = type metadata accessor for MediumClockFaceView(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008A230();
  char v8 = sub_10008A220();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100049F18(v0, (uint64_t)v3, type metadata accessor for MediumClockFaceView);
  if ((v8 & 1) == 0)
  {
    sub_100049F80((uint64_t)v3, type metadata accessor for MediumClockFaceView);
    return sub_100082834();
  }
  char v9 = v3[*(int *)(v1 + 40)];
  sub_100049F80((uint64_t)v3, type metadata accessor for MediumClockFaceView);
  if ((v9 & 1) == 0) {
    return sub_100082834();
  }
  return 0;
}

double sub_1000410F0@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100015948(a1);
  uint64_t v5 = sub_100015808(a1);
  uint64_t v6 = sub_100015948(a1);
  double result = 0.0585;
  *(_OWORD *)a2 = xmmword_1000997F0;
  *(void *)(a2 + 16) = 0x3F916872B020C49CLL;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = 0x3FC3333333333333;
  return result;
}

uint64_t sub_100041170(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v6);
  char v8 = (double *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (char *)v8 + *(int *)(v9 + 24);
  uint64_t v11 = sub_10008A260();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, a2, v11);
  *(void *)char v8 = a1;
  v8[1] = a3;
  swift_retain();
  sub_100089F70();
  return sub_100049F80((uint64_t)v8, type metadata accessor for ClockWidgetAccentableForegroundColor);
}

uint64_t sub_1000412A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100038210(type metadata accessor for ClockFace, (uint64_t (*)(void))&type metadata accessor for TimeZone, a1);
}

uint64_t sub_1000412D4()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 28));
}

uint64_t sub_1000412F8(char a1)
{
  uint64_t result = type metadata accessor for ClockFace(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100041328())(void)
{
  return nullsub_1;
}

uint64_t sub_100041370()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 32));
}

uint64_t sub_100041394(char a1)
{
  uint64_t result = type metadata accessor for ClockFace(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000413C4())(void)
{
  return nullsub_1;
}

uint64_t sub_10004140C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ClockFace(0);
  return sub_10000F148(v1 + *(int *)(v3 + 36), a1, &qword_1000A47F8);
}

uint64_t sub_10004144C()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 40));
}

uint64_t sub_100041470(char a1)
{
  uint64_t result = type metadata accessor for ClockFace(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000414A0())(void)
{
  return nullsub_1;
}

uint64_t sub_1000414E8()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 44));
}

uint64_t sub_10004150C(char a1)
{
  uint64_t result = type metadata accessor for ClockFace(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_10004153C())(void)
{
  return nullsub_1;
}

uint64_t sub_100041588()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 48));
}

uint64_t sub_1000415AC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 52));
}

uint64_t sub_1000415D0(char a1)
{
  uint64_t result = type metadata accessor for ClockFace(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_100041600())(void)
{
  return nullsub_1;
}

uint64_t sub_100041648@<X0>(uint64_t a1@<X8>)
{
  return sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, a1);
}

uint64_t sub_1000416B4()
{
  uint64_t v1 = sub_10000697C(&qword_1000A5FA0);
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v3 = sub_10008A1B0();
  v3[1] = v4;
  uint64_t v5 = sub_10000697C(&qword_1000A5FA8);
  sub_1000417A8(v0, (uint64_t)v3 + *(int *)(v5 + 44));
  sub_10001845C(&qword_1000A5FB0, &qword_1000A5FA0);
  sub_100089F10();
  return sub_10000F024((uint64_t)v3, &qword_1000A5FA0);
}

uint64_t sub_1000417A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v271 = a2;
  uint64_t v241 = sub_10000697C(&qword_1000A7120);
  __chkstk_darwin(v241);
  uint64_t v203 = (uint64_t *)((char *)&v202 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v242 = sub_10000697C(&qword_1000A7710);
  uint64_t v205 = *(void *)(v242 - 8);
  __chkstk_darwin(v242);
  uint64_t v202 = (char *)&v202 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v204 = (char *)&v202 - v6;
  uint64_t v217 = sub_10000697C(&qword_1000A7110);
  __chkstk_darwin(v217);
  uint64_t v207 = (uint64_t *)((char *)&v202 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v220 = sub_10000697C(&qword_1000A7718);
  uint64_t v209 = *(void *)(v220 - 8);
  __chkstk_darwin(v220);
  v206 = (char *)&v202 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v208 = (char *)&v202 - v10;
  uint64_t v215 = sub_10000697C(&qword_1000A7720);
  __chkstk_darwin(v215);
  uint64_t v216 = (char *)&v202 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = sub_10000697C(&qword_1000A7728);
  __chkstk_darwin(v235);
  v218 = (char *)&v202 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = sub_10000697C(&qword_1000A5FD8);
  __chkstk_darwin(v214);
  uint64_t v211 = (uint64_t)&v202 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = sub_10000697C(&qword_1000A7730);
  uint64_t v213 = *(void *)(v219 - 8);
  __chkstk_darwin(v219);
  uint64_t v210 = (char *)&v202 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v212 = (char *)&v202 - v16;
  uint64_t v230 = sub_10000697C(&qword_1000A70E8);
  __chkstk_darwin(v230);
  uint64_t v222 = (uint64_t *)((char *)&v202 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v231 = sub_10000697C(&qword_1000A7738);
  uint64_t v223 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  uint64_t v221 = (char *)&v202 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v225 = (char *)&v202 - v20;
  uint64_t v237 = sub_10000697C(&qword_1000A7740);
  __chkstk_darwin(v237);
  uint64_t v239 = (uint64_t)&v202 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v232 = sub_10000697C(&qword_1000A7748);
  __chkstk_darwin(v232);
  uint64_t v234 = (uint64_t)&v202 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v226 = sub_10000697C(&qword_1000A7750);
  __chkstk_darwin(v226);
  uint64_t v228 = (uint64_t)&v202 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = sub_10000697C(&qword_1000A7758);
  __chkstk_darwin(v233);
  uint64_t v229 = (char *)&v202 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = sub_10000697C(&qword_1000A7760);
  __chkstk_darwin(v238);
  v236 = (char *)&v202 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = sub_10000697C(&qword_1000A70D8);
  __chkstk_darwin(v227);
  v224 = (uint64_t *)((char *)&v202 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = sub_10000697C(&qword_1000A7768);
  uint64_t v268 = *(void *)(v27 - 8);
  uint64_t v269 = v27;
  __chkstk_darwin(v27);
  uint64_t v240 = (char *)&v202 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v246 = (uint64_t)&v202 - v30;
  uint64_t v31 = sub_10000697C(&qword_1000A7770);
  __chkstk_darwin(v31 - 8);
  uint64_t v270 = (uint64_t)&v202 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  long long v267 = (char *)&v202 - v34;
  uint64_t v274 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  __chkstk_darwin(v274);
  uint64_t v244 = (char *)&v202 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v265 = sub_10000697C(&qword_1000A7778);
  __chkstk_darwin(v265);
  uint64_t v243 = (char *)&v202 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v245 = (uint64_t)&v202 - v38;
  uint64_t v262 = sub_10000697C(&qword_1000A7780);
  __chkstk_darwin(v262);
  uint64_t v264 = (uint64_t)&v202 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = sub_10000697C(&qword_1000A7788);
  __chkstk_darwin(v263);
  uint64_t v257 = (uint64_t)&v202 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000697C(&qword_1000A7130);
  __chkstk_darwin(v41 - 8);
  uint64_t v248 = (uint64_t)&v202 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v254 = sub_10000697C(&qword_1000A76B0);
  uint64_t v253 = *(void *)(v254 - 8);
  __chkstk_darwin(v254);
  long long v247 = (char *)&v202 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000697C(&qword_1000A76B8);
  __chkstk_darwin(v44 - 8);
  uint64_t v255 = (uint64_t)&v202 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  uint64_t v256 = (uint64_t)&v202 - v47;
  uint64_t v273 = sub_10008A260();
  uint64_t v258 = *(void *)(v273 - 8);
  __chkstk_darwin(v273);
  uint64_t v272 = (uint64_t)&v202 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_1000897A0();
  __chkstk_darwin(v49);
  uint64_t v51 = (_OWORD *)((char *)&v202 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v52 = sub_10000697C(&qword_1000A7790);
  __chkstk_darwin(v52);
  uint64_t v54 = (char *)&v202 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v250 = sub_10000697C(&qword_1000A7798);
  __chkstk_darwin(v250);
  uint64_t v56 = (char *)&v202 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = sub_10000697C(&qword_1000A77A0);
  __chkstk_darwin(v251);
  char v58 = (char *)&v202 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59);
  long long v275 = (char *)&v202 - v60;
  char v61 = (int *)type metadata accessor for ClockFace(0);
  __chkstk_darwin(v61);
  uint64_t v260 = (uint64_t)&v202 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63);
  uint64_t v249 = (uint64_t)&v202 - v64;
  __chkstk_darwin(v65);
  uint64_t v252 = (uint64_t)&v202 - v66;
  __chkstk_darwin(v67);
  double v69 = (char *)&v202 - v68;
  uint64_t v70 = sub_10000697C(&qword_1000A77A8);
  __chkstk_darwin(v70 - 8);
  uint64_t v266 = (uint64_t)&v202 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v72);
  uint64_t v276 = (uint64_t)&v202 - v73;
  uint64_t v259 = v61[10];
  BOOL v74 = sub_100017148(*(unsigned char *)(a1 + v259), 4);
  sub_100049F18(a1, (uint64_t)v69, type metadata accessor for ClockFace);
  long long v261 = v61;
  if (v74)
  {
    sub_100049F80((uint64_t)v69, type metadata accessor for ClockFace);
  }
  else
  {
    BOOL v75 = sub_100017148(v69[v61[10]], 0);
    sub_100049F80((uint64_t)v69, type metadata accessor for ClockFace);
    if (!v75)
    {
      uint64_t v101 = sub_1000441D8();
      sub_10008A1B0();
      sub_100089720();
      long long v275 = (char *)v279;
      LODWORD(v257) = BYTE8(v279);
      uint64_t v256 = v280;
      LODWORD(v255) = BYTE8(v280);
      long long v102 = v281;
      uint64_t v103 = v272;
      sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, v272);
      uint64_t v104 = v273;
      int v105 = v244;
      uint64_t v106 = v258;
      (*(void (**)(char *, uint64_t, uint64_t))(v258 + 16))(&v244[*(int *)(v274 + 24)], v103, v273);
      _OWORD *v105 = xmmword_100099800;
      uint64_t v107 = (uint64_t)v243;
      sub_100049F18((uint64_t)v105, (uint64_t)&v243[*(int *)(v265 + 36)], type metadata accessor for ClockWidgetAccentableOpacity);
      *(void *)uint64_t v107 = v101;
      *(_WORD *)(v107 + 8) = 256;
      *(void *)(v107 + 16) = v275;
      *(unsigned char *)(v107 + 24) = v257;
      *(void *)(v107 + 32) = v256;
      *(unsigned char *)(v107 + 40) = v255;
      *(_OWORD *)(v107 + 48) = v102;
      swift_retain();
      sub_100049F80((uint64_t)v105, type metadata accessor for ClockWidgetAccentableOpacity);
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v103, v104);
      swift_release();
      uint64_t v108 = &qword_1000A7778;
      uint64_t v109 = v245;
      sub_100027078(v107, v245, &qword_1000A7778);
      sub_10000F148(v109, v264, &qword_1000A7778);
      swift_storeEnumTagMultiPayload();
      sub_10001845C(&qword_1000A77B0, &qword_1000A7788);
      sub_100070F4C();
      sub_100089AB0();
      uint64_t v110 = v109;
      goto LABEL_13;
    }
  }
  unint64_t v76 = (char *)v51 + *(int *)(v49 + 20);
  uint64_t v77 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v78 = sub_1000899B0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v78 - 8) + 104))(v76, v77, v78);
  __asm { FMOV            V0.2D, #20.0 }
  *uint64_t v51 = _Q0;
  uint64_t v84 = sub_100043EAC();
  sub_100049F18((uint64_t)v51, (uint64_t)v54, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(void *)&v54[*(int *)(v52 + 52)] = v84;
  *(_WORD *)&v54[*(int *)(v52 + 56)] = 256;
  sub_100049F80((uint64_t)v51, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10008A1B0();
  sub_100089720();
  sub_10000F148((uint64_t)v54, (uint64_t)v56, &qword_1000A7790);
  uint64_t v85 = a1;
  uint64_t v86 = &v56[*(int *)(v250 + 36)];
  long long v87 = v280;
  *(_OWORD *)uint64_t v86 = v279;
  *((_OWORD *)v86 + 1) = v87;
  *((_OWORD *)v86 + 2) = v281;
  sub_10000F024((uint64_t)v54, &qword_1000A7790);
  uint64_t v250 = (uint64_t)"ClockWidgetEnvironmentObject";
  uint64_t v88 = v272;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, v272);
  uint64_t v89 = &v58[*(int *)(v251 + 36)];
  uint64_t v90 = v273;
  uint64_t v91 = &v89[*(int *)(v274 + 24)];
  uint64_t v92 = v258;
  uint64_t v251 = *(void *)(v258 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v251)(v91, v88, v273);
  *(_OWORD *)uint64_t v89 = xmmword_100099800;
  sub_10000F148((uint64_t)v56, (uint64_t)v58, &qword_1000A7798);
  uint64_t v93 = v90;
  a1 = v85;
  uint64_t v258 = *(void *)(v92 + 8);
  ((void (*)(uint64_t, uint64_t))v258)(v88, v93);
  sub_10000F024((uint64_t)v56, &qword_1000A7798);
  sub_100027078((uint64_t)v58, (uint64_t)v275, &qword_1000A77A0);
  LOBYTE(v89) = sub_100017148(*(unsigned char *)(v85 + v259), 0);
  uint64_t v94 = v252;
  sub_100049F18(v85, v252, type metadata accessor for ClockFace);
  if (v89)
  {
    int v95 = *(unsigned __int8 *)(v94 + v61[7]);
    uint64_t v96 = v94;
    uint64_t v97 = v249;
    sub_10004A544(v96, v249, type metadata accessor for ClockFace);
    if (v95 == 1)
    {
      sub_100049F80(v97, type metadata accessor for ClockFace);
      uint64_t v98 = v254;
    }
    else
    {
      char v111 = *(unsigned char *)(v97 + v61[8]);
      sub_100049F80(v97, type metadata accessor for ClockFace);
      uint64_t v98 = v254;
      if ((v111 & 1) == 0)
      {
        uint64_t v99 = 1;
        uint64_t v100 = v256;
        goto LABEL_12;
      }
    }
    uint64_t v112 = v248;
    sub_100047F08(0, a1, v248);
    uint64_t v113 = v272;
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, v250 | 0x8000000000000000, v272);
    uint64_t v114 = (uint64_t)v247;
    uint64_t v115 = &v247[*(int *)(v98 + 36)];
    uint64_t v116 = v273;
    ((void (*)(char *, uint64_t, uint64_t))v251)(&v115[*(int *)(v274 + 24)], v113, v273);
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)uint64_t v115 = _Q0;
    sub_10000F148(v112, v114, &qword_1000A7130);
    ((void (*)(uint64_t, uint64_t))v258)(v113, v116);
    sub_10000F024(v112, &qword_1000A7130);
    uint64_t v118 = v114;
    uint64_t v100 = v256;
    sub_100027078(v118, v256, &qword_1000A76B0);
    uint64_t v99 = 0;
  }
  else
  {
    sub_100049F80(v94, type metadata accessor for ClockFace);
    uint64_t v99 = 1;
    uint64_t v100 = v256;
    uint64_t v98 = v254;
  }
LABEL_12:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v253 + 56))(v100, v99, 1, v98);
  uint64_t v108 = &qword_1000A77A0;
  uint64_t v119 = (uint64_t)v275;
  sub_10000F148((uint64_t)v275, (uint64_t)v58, &qword_1000A77A0);
  uint64_t v120 = v255;
  sub_10000F148(v100, v255, &qword_1000A76B8);
  uint64_t v121 = v257;
  sub_10000F148((uint64_t)v58, v257, &qword_1000A77A0);
  uint64_t v122 = sub_10000697C(&qword_1000A7808);
  sub_10000F148(v120, v121 + *(int *)(v122 + 48), &qword_1000A76B8);
  sub_10000F024(v120, &qword_1000A76B8);
  sub_10000F024((uint64_t)v58, &qword_1000A77A0);
  sub_10000F148(v121, v264, &qword_1000A7788);
  swift_storeEnumTagMultiPayload();
  sub_10001845C(&qword_1000A77B0, &qword_1000A7788);
  sub_100070F4C();
  sub_100089AB0();
  sub_10000F024(v121, &qword_1000A7788);
  sub_10000F024(v100, &qword_1000A76B8);
  uint64_t v110 = v119;
LABEL_13:
  sub_10000F024(v110, v108);
  uint64_t v123 = (uint64_t)v267;
  long long v124 = v261;
  char v125 = *(unsigned char *)(a1 + v261[7]);
  uint64_t v126 = v260;
  sub_100049F18(a1, v260, type metadata accessor for ClockFace);
  if ((v125 & 1) == 0)
  {
    char v128 = *(unsigned char *)(v126 + v124[8]);
    sub_100049F80(v126, type metadata accessor for ClockFace);
    if (v128)
    {
      uint64_t v127 = 1;
      goto LABEL_28;
    }
    char v129 = *(unsigned char *)(a1 + v259);
    if (sub_100017148(v129, 2))
    {
      uint64_t v130 = sub_10008A1B0();
      uint64_t v131 = (uint64_t)v224;
      uint64_t *v224 = v130;
      *(void *)(v131 + 8) = v132;
      uint64_t v133 = sub_10000697C(&qword_1000A5FB8);
      sub_100044D00(a1, v131 + *(int *)(v133 + 44));
      sub_10000F148(v131, v228, &qword_1000A70D8);
      swift_storeEnumTagMultiPayload();
      sub_10001845C(&qword_1000A70D0, &qword_1000A70D8);
      uint64_t v134 = sub_10001845C(&qword_1000A70E0, &qword_1000A70E8);
      uint64_t v277 = v230;
      uint64_t v278 = v134;
      swift_getOpaqueTypeConformance2();
      uint64_t v135 = (uint64_t)v229;
      sub_100089AB0();
      sub_10000F148(v135, v234, &qword_1000A7758);
      swift_storeEnumTagMultiPayload();
      sub_100071098();
      sub_100071194();
      uint64_t v136 = (uint64_t)v236;
      sub_100089AB0();
      sub_10000F024(v135, &qword_1000A7758);
      sub_10000F148(v136, v239, &qword_1000A7760);
      swift_storeEnumTagMultiPayload();
      sub_10006E780(&qword_1000A77F0, &qword_1000A7760, (void (*)(void))sub_100071098, (void (*)(void))sub_100071194);
      uint64_t v137 = sub_10001845C(&qword_1000A7118, &qword_1000A7120);
      uint64_t v277 = v241;
      uint64_t v278 = v137;
      swift_getOpaqueTypeConformance2();
      uint64_t v138 = v240;
      sub_100089AB0();
      sub_10000F024(v136, &qword_1000A7760);
      sub_10000F024(v131, &qword_1000A70D8);
      uint64_t v139 = sub_10000697C(&qword_1000A77E0);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v138, 0, 1, v139);
      uint64_t v140 = (uint64_t)v138;
      goto LABEL_26;
    }
    if (sub_100017148(v129, 1))
    {
      uint64_t v141 = sub_10008A1B0();
      uint64_t v142 = (uint64_t)v222;
      *uint64_t v222 = v141;
      *(void *)(v142 + 8) = v143;
      uint64_t v144 = sub_10000697C(&qword_1000A5FC0);
      sub_1000462F0(v142 + *(int *)(v144 + 44));
      uint64_t v145 = sub_10001845C(&qword_1000A70E0, &qword_1000A70E8);
      uint64_t v146 = v221;
      uint64_t v147 = v230;
      sub_100089E70();
      sub_10000F024(v142, &qword_1000A70E8);
      uint64_t v148 = v223;
      char v149 = v225;
      uint64_t v150 = v231;
      (*(void (**)(char *, char *, uint64_t))(v223 + 32))(v225, v146, v231);
      (*(void (**)(uint64_t, char *, uint64_t))(v148 + 16))(v228, v149, v150);
      swift_storeEnumTagMultiPayload();
      sub_10001845C(&qword_1000A70D0, &qword_1000A70D8);
      uint64_t v277 = v147;
      uint64_t v278 = v145;
      swift_getOpaqueTypeConformance2();
      uint64_t v151 = (uint64_t)v229;
      sub_100089AB0();
      sub_10000F148(v151, v234, &qword_1000A7758);
      swift_storeEnumTagMultiPayload();
      sub_100071098();
      sub_100071194();
      uint64_t v152 = (uint64_t)v236;
      sub_100089AB0();
      sub_10000F024(v151, &qword_1000A7758);
      sub_10000F148(v152, v239, &qword_1000A7760);
      swift_storeEnumTagMultiPayload();
      sub_10006E780(&qword_1000A77F0, &qword_1000A7760, (void (*)(void))sub_100071098, (void (*)(void))sub_100071194);
      uint64_t v153 = sub_10001845C(&qword_1000A7118, &qword_1000A7120);
      uint64_t v277 = v241;
      uint64_t v278 = v153;
      swift_getOpaqueTypeConformance2();
      uint64_t v154 = v240;
      sub_100089AB0();
      sub_10000F024(v152, &qword_1000A7760);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v225, v150);
    }
    else if (sub_100017148(v129, 3))
    {
      uint64_t v155 = v211;
      sub_1000446B4(v211);
      uint64_t v156 = sub_10005D64C(&qword_1000A70F0, &qword_1000A5FD8, (void (*)(void))sub_10006E5AC);
      uint64_t v157 = v210;
      uint64_t v158 = v214;
      sub_100089E70();
      sub_10000F024(v155, &qword_1000A5FD8);
      uint64_t v159 = v213;
      uint64_t v160 = v212;
      uint64_t v161 = v219;
      (*(void (**)(char *, char *, uint64_t))(v213 + 32))(v212, v157, v219);
      (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v216, v160, v161);
      swift_storeEnumTagMultiPayload();
      uint64_t v277 = v158;
      uint64_t v278 = v156;
      swift_getOpaqueTypeConformance2();
      long long v275 = (char *)&protocol conformance descriptor for ZStack<A>;
      uint64_t v162 = sub_10001845C(&qword_1000A7108, &qword_1000A7110);
      uint64_t v277 = v217;
      uint64_t v278 = v162;
      swift_getOpaqueTypeConformance2();
      uint64_t v163 = (uint64_t)v218;
      sub_100089AB0();
      sub_10000F148(v163, v234, &qword_1000A7728);
      swift_storeEnumTagMultiPayload();
      sub_100071098();
      sub_100071194();
      uint64_t v164 = (uint64_t)v236;
      sub_100089AB0();
      sub_10000F024(v163, &qword_1000A7728);
      sub_10000F148(v164, v239, &qword_1000A7760);
      swift_storeEnumTagMultiPayload();
      sub_10006E780(&qword_1000A77F0, &qword_1000A7760, (void (*)(void))sub_100071098, (void (*)(void))sub_100071194);
      uint64_t v165 = sub_10001845C(&qword_1000A7118, &qword_1000A7120);
      uint64_t v277 = v241;
      uint64_t v278 = v165;
      swift_getOpaqueTypeConformance2();
      uint64_t v154 = v240;
      sub_100089AB0();
      sub_10000F024(v164, &qword_1000A7760);
      (*(void (**)(char *, uint64_t))(v159 + 8))(v160, v161);
    }
    else
    {
      if (!sub_100017148(v129, 4))
      {
        if (!sub_100017148(v129, 0))
        {
          uint64_t v201 = sub_10000697C(&qword_1000A77E0);
          uint64_t v181 = v246;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v201 - 8) + 56))(v246, 1, 1, v201);
          goto LABEL_27;
        }
        uint64_t v189 = sub_10008A1B0();
        uint64_t v190 = (uint64_t)v203;
        *uint64_t v203 = v189;
        *(void *)(v190 + 8) = v191;
        uint64_t v192 = sub_10000697C(&qword_1000A5FE8);
        sub_1000472E8(a1, v190 + *(int *)(v192 + 44));
        uint64_t v193 = sub_10001845C(&qword_1000A7118, &qword_1000A7120);
        uint64_t v194 = v202;
        uint64_t v195 = v241;
        sub_100089E70();
        sub_10000F024(v190, &qword_1000A7120);
        uint64_t v196 = v205;
        uint64_t v197 = v204;
        uint64_t v198 = v242;
        (*(void (**)(char *, char *, uint64_t))(v205 + 32))(v204, v194, v242);
        (*(void (**)(uint64_t, char *, uint64_t))(v196 + 16))(v239, v197, v198);
        swift_storeEnumTagMultiPayload();
        sub_10006E780(&qword_1000A77F0, &qword_1000A7760, (void (*)(void))sub_100071098, (void (*)(void))sub_100071194);
        uint64_t v277 = v195;
        uint64_t v278 = v193;
        swift_getOpaqueTypeConformance2();
        uint64_t v199 = v240;
        sub_100089AB0();
        (*(void (**)(char *, uint64_t))(v196 + 8))(v197, v198);
        uint64_t v200 = sub_10000697C(&qword_1000A77E0);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v200 - 8) + 56))(v199, 0, 1, v200);
        uint64_t v140 = (uint64_t)v199;
LABEL_26:
        uint64_t v181 = v246;
        sub_100027078(v140, v246, &qword_1000A7768);
LABEL_27:
        sub_100027078(v181, v123, &qword_1000A7768);
        uint64_t v127 = 0;
        goto LABEL_28;
      }
      uint64_t v166 = sub_10008A1B0();
      uint64_t v167 = (uint64_t)v207;
      *uint64_t v207 = v166;
      *(void *)(v167 + 8) = v168;
      uint64_t v169 = sub_10000697C(&qword_1000A5FE0);
      sub_1000469E4(a1, v167 + *(int *)(v169 + 44));
      long long v275 = (char *)&protocol conformance descriptor for ZStack<A>;
      uint64_t v170 = sub_10001845C(&qword_1000A7108, &qword_1000A7110);
      uint64_t v171 = v206;
      uint64_t v172 = v217;
      sub_100089E70();
      sub_10000F024(v167, &qword_1000A7110);
      uint64_t v173 = v209;
      uint64_t v174 = v208;
      uint64_t v175 = v220;
      (*(void (**)(char *, char *, uint64_t))(v209 + 32))(v208, v171, v220);
      (*(void (**)(char *, char *, uint64_t))(v173 + 16))(v216, v174, v175);
      swift_storeEnumTagMultiPayload();
      uint64_t v176 = sub_10005D64C(&qword_1000A70F0, &qword_1000A5FD8, (void (*)(void))sub_10006E5AC);
      uint64_t v277 = v214;
      uint64_t v278 = v176;
      swift_getOpaqueTypeConformance2();
      uint64_t v277 = v172;
      uint64_t v278 = v170;
      swift_getOpaqueTypeConformance2();
      uint64_t v177 = (uint64_t)v218;
      sub_100089AB0();
      sub_10000F148(v177, v234, &qword_1000A7728);
      swift_storeEnumTagMultiPayload();
      sub_100071098();
      sub_100071194();
      uint64_t v178 = (uint64_t)v236;
      sub_100089AB0();
      sub_10000F024(v177, &qword_1000A7728);
      sub_10000F148(v178, v239, &qword_1000A7760);
      swift_storeEnumTagMultiPayload();
      sub_10006E780(&qword_1000A77F0, &qword_1000A7760, (void (*)(void))sub_100071098, (void (*)(void))sub_100071194);
      uint64_t v179 = sub_10001845C(&qword_1000A7118, &qword_1000A7120);
      uint64_t v277 = v241;
      uint64_t v278 = v179;
      swift_getOpaqueTypeConformance2();
      uint64_t v154 = v240;
      sub_100089AB0();
      sub_10000F024(v178, &qword_1000A7760);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v174, v175);
    }
    uint64_t v180 = sub_10000697C(&qword_1000A77E0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v180 - 8) + 56))(v154, 0, 1, v180);
    uint64_t v140 = (uint64_t)v154;
    goto LABEL_26;
  }
  sub_100049F80(v126, type metadata accessor for ClockFace);
  uint64_t v127 = 1;
LABEL_28:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v268 + 56))(v123, v127, 1, v269);
  uint64_t v182 = v276;
  uint64_t v183 = v266;
  sub_10000F148(v276, v266, &qword_1000A77A8);
  uint64_t v184 = v270;
  sub_10000F148(v123, v270, &qword_1000A7770);
  uint64_t v185 = v271;
  sub_10000F148(v183, v271, &qword_1000A77A8);
  uint64_t v186 = sub_10000697C(&qword_1000A77E8);
  uint64_t v187 = v185 + *(int *)(v186 + 48);
  *(void *)uint64_t v187 = 0;
  *(unsigned char *)(v187 + 8) = 1;
  sub_10000F148(v184, v185 + *(int *)(v186 + 64), &qword_1000A7770);
  sub_10000F024(v123, &qword_1000A7770);
  sub_10000F024(v182, &qword_1000A77A8);
  sub_10000F024(v184, &qword_1000A7770);
  return sub_10000F024(v183, &qword_1000A77A8);
}

uint64_t sub_100043EAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ClockFace(0);
  __chkstk_darwin(v2);
  uint64_t v21 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - v9;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)&v20 - v9);
  sub_10008A240();
  char v11 = sub_10008A220();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  v12(v10, v4);
  if (v11) {
    return sub_100089FE0();
  }
  uint64_t v14 = (uint64_t)v21;
  int v15 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 32));
  int v16 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 52));
  if (v15 == 1)
  {
    if (!v16) {
      goto LABEL_11;
    }
    return sub_100015808(1);
  }
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v10);
  if (v16)
  {
    sub_10008A250();
    char v17 = sub_10008A220();
    v12(v7, v4);
    v12(v10, v4);
    sub_100049F18(v1, v14, type metadata accessor for ClockFace);
    if (v17)
    {
      char v18 = *(unsigned char *)(v14 + 8);
      sub_100049F80(v14, type metadata accessor for ClockFace);
      if (v18) {
        return sub_100015808(1);
      }
    }
    else
    {
      sub_100049F80(v14, type metadata accessor for ClockFace);
    }
  }
  else
  {
    sub_10008A230();
    char v19 = sub_10008A220();
    v12(v7, v4);
    v12(v10, v4);
    if ((v19 & 1) == 0)
    {
LABEL_11:
      sub_100014F5C();
      return swift_retain();
    }
  }
  return sub_100089FD0();
}

uint64_t sub_1000441D0@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return sub_100047F08(a1, v2, a2);
}

uint64_t sub_1000441D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ClockFace(0);
  __chkstk_darwin(v2);
  uint64_t v35 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v36 = (uint64_t)v32 - v5;
  uint64_t v6 = sub_10008A260();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v32 - v11;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v32 - v11);
  sub_10008A240();
  char v13 = sub_10008A220();
  int v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v15 = v7 + 8;
  uint64_t v14 = v16;
  v16(v9, v6);
  v16(v12, v6);
  if (v13) {
    return sub_10008A000();
  }
  v32[1] = v15;
  unint64_t v33 = (unint64_t)"ClockWidgetEnvironmentObject";
  uint64_t v34 = v14;
  int v18 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 52));
  v32[0] = v1;
  uint64_t v19 = v1;
  uint64_t v20 = (uint64_t)v35;
  uint64_t v21 = v36;
  sub_100049F18(v19, v36, type metadata accessor for ClockFace);
  if (v18 == 1)
  {
    sub_100049F80(v21, type metadata accessor for ClockFace);
    unint64_t v23 = v33;
    uint64_t v22 = v34;
    uint64_t v24 = v6;
    goto LABEL_5;
  }
  int v26 = *(unsigned __int8 *)(v21 + *(int *)(v2 + 44));
  uint64_t v27 = v21;
  uint64_t v28 = v20;
  sub_100049F18(v27, v20, type metadata accessor for ClockFace);
  uint64_t v22 = v34;
  uint64_t v24 = v6;
  if (v26 == 1)
  {
    unint64_t v23 = v33;
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, v33 | 0x8000000000000000, (uint64_t)v12);
    sub_10008A250();
    uint64_t v29 = v28;
    char v30 = sub_10008A220();
    v22(v9, v6);
    v22(v12, v6);
    sub_100049F80(v29, type metadata accessor for ClockFace);
    sub_100049F80(v36, type metadata accessor for ClockFace);
    if (v30)
    {
LABEL_5:
      sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, v23 | 0x8000000000000000, (uint64_t)v12);
      sub_10008A250();
      char v25 = sub_10008A220();
      v22(v9, v24);
      v22(v12, v24);
      if (v25) {
        return sub_100015808(*(unsigned char *)(v32[0] + 8));
      }
      else {
        return sub_100015808(0);
      }
    }
  }
  else
  {
    sub_100049F80(v28, type metadata accessor for ClockFace);
    sub_100049F80(v36, type metadata accessor for ClockFace);
    unint64_t v23 = v33;
  }
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, v23 | 0x8000000000000000, (uint64_t)v12);
  sub_10008A230();
  char v31 = sub_10008A220();
  v22(v9, v6);
  v22(v12, v6);
  if (v31) {
    return sub_100089FD0();
  }
  sub_100014F5C();
  return swift_retain();
}

uint64_t sub_100044674@<X0>(uint64_t *a1@<X8>)
{
  return sub_100044CAC(&qword_1000A5FB8, (uint64_t (*)(uint64_t))sub_100044D00, a1);
}

uint64_t sub_100044694@<X0>(uint64_t *a1@<X8>)
{
  return sub_100044CAC(&qword_1000A5FC0, (uint64_t (*)(uint64_t))sub_1000462F0, a1);
}

uint64_t sub_1000446B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v38 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v38);
  uint64_t v37 = (uint64_t *)((char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = sub_10008A260();
  uint64_t v40 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v33 - v6;
  uint64_t v8 = sub_10000697C(&qword_1000A5FC8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10008A050();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10000697C(&qword_1000A5FD0);
  __chkstk_darwin(v35);
  uint64_t v36 = (uint64_t *)((char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10008A0A0();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for Image.ResizingMode.stretch(_:), v11);
  sub_10008A090();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v16 = enum case for Image.TemplateRenderingMode.template(_:);
  uint64_t v17 = sub_10008A080();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v10, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v10, 0, 1, v17);
  uint64_t v19 = sub_10008A060();
  swift_release();
  sub_10000F024((uint64_t)v10, &qword_1000A5FC8);
  uint64_t v20 = type metadata accessor for ClockFace(0);
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v7);
  sub_10008A240();
  char v21 = sub_10008A220();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v40 + 8);
  unint64_t v23 = v4;
  uint64_t v24 = v34;
  v22(v23, v34);
  v22(v7, v24);
  if (v21)
  {
    uint64_t v25 = sub_10008A000();
  }
  else
  {
    if (*(unsigned char *)(v1 + *(int *)(v20 + 52))) {
      char v26 = *(unsigned char *)(v1 + 8);
    }
    else {
      char v26 = 0;
    }
    uint64_t v25 = sub_100015B28(v26);
  }
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v7);
  uint64_t v27 = v37;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))((char *)v37 + *(int *)(v38 + 24), v7, v24);
  uint64_t *v27 = v25;
  v27[1] = 0x3FF0000000000000;
  uint64_t v28 = v36;
  sub_100049F18((uint64_t)v27, (uint64_t)v36 + *(int *)(v35 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  *uint64_t v28 = v19;
  swift_retain();
  sub_100049F80((uint64_t)v27, type metadata accessor for ClockWidgetAccentableForegroundColor);
  v22(v7, v24);
  swift_release();
  sub_10008A1B0();
  sub_100089720();
  uint64_t v29 = v39;
  sub_10000F148((uint64_t)v28, v39, &qword_1000A5FD0);
  char v30 = (_OWORD *)(v29 + *(int *)(sub_10000697C(&qword_1000A5FD8) + 36));
  long long v31 = v42;
  _OWORD *v30 = v41;
  v30[1] = v31;
  v30[2] = v43;
  return sub_10000F024((uint64_t)v28, &qword_1000A5FD0);
}

uint64_t sub_100044C6C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100044CAC(&qword_1000A5FE0, (uint64_t (*)(uint64_t))sub_1000469E4, a1);
}

uint64_t sub_100044C8C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100044CAC(&qword_1000A5FE8, (uint64_t (*)(uint64_t))sub_1000472E8, a1);
}

uint64_t sub_100044CAC@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  *a3 = sub_10008A1B0();
  a3[1] = v7;
  sub_10000697C(a1);
  return a2(v3);
}

uint64_t sub_100044D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v108 = a1;
  uint64_t v97 = a2;
  uint64_t v91 = sub_10000697C(&qword_1000A76E0);
  __chkstk_darwin(v91);
  uint64_t v93 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000697C(&qword_1000A76E8);
  __chkstk_darwin(v92);
  uint64_t v96 = (uint64_t)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v95 = (uint64_t)&v80 - v5;
  uint64_t v87 = sub_10000697C(&qword_1000A76F0);
  __chkstk_darwin(v87);
  uint64_t v94 = (uint64_t)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v88 = (char *)&v80 - v8;
  __chkstk_darwin(v9);
  uint64_t v107 = (uint64_t)&v80 - v10;
  uint64_t v115 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v115);
  uint64_t v12 = (uint64_t *)((char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v106 = sub_10008A260();
  uint64_t v13 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10008A050();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_10000697C(&qword_1000A5FD0);
  __chkstk_darwin(v114);
  uint64_t v84 = (uint64_t *)((char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  unint64_t v23 = (uint64_t *)((char *)&v80 - v22);
  uint64_t v98 = sub_10000697C(&qword_1000A5FD8);
  __chkstk_darwin(v98);
  uint64_t v85 = (uint64_t)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v80 - v26;
  __chkstk_darwin(v28);
  uint64_t v105 = (uint64_t)&v80 - v29;
  sub_10008A0A0();
  char v30 = *(void (**)(void))(v17 + 104);
  unsigned int v102 = enum case for Image.ResizingMode.stretch(_:);
  uint64_t v101 = v17 + 104;
  uint64_t v100 = (void (*)(char *, void, uint64_t))v30;
  v30(v19);
  uint64_t v31 = sub_10008A090();
  swift_release();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v86 = v19;
  uint64_t v104 = v16;
  uint64_t v103 = v17 + 8;
  uint64_t v99 = v32;
  v32(v19, v16);
  uint64_t v33 = v108;
  uint64_t v34 = sub_100045B34();
  uint64_t v113 = v33 + *(int *)(type metadata accessor for ClockFace(0) + 56);
  unint64_t v112 = 0x800000010008BE90;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v15);
  uint64_t v35 = (char *)v12 + *(int *)(v115 + 24);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v37 = v106;
  uint64_t v111 = v13 + 16;
  uint64_t v110 = v36;
  v36(v35, (uint64_t)v15, v106);
  uint64_t *v12 = v34;
  v12[1] = 0x3FF0000000000000;
  sub_100049F18((uint64_t)v12, (uint64_t)v23 + *(int *)(v114 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  uint64_t *v23 = v31;
  swift_retain();
  sub_100049F80((uint64_t)v12, type metadata accessor for ClockWidgetAccentableForegroundColor);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  uint64_t v81 = v15;
  uint64_t v116 = v13 + 8;
  uint64_t v109 = v38;
  v38((uint64_t)v15, v37);
  swift_release();
  sub_10008A1B0();
  sub_100089720();
  sub_10000F148((uint64_t)v23, (uint64_t)v27, &qword_1000A5FD0);
  uint64_t v39 = &v27[*(int *)(v98 + 36)];
  long long v40 = v118;
  *(_OWORD *)uint64_t v39 = v117;
  *((_OWORD *)v39 + 1) = v40;
  *((_OWORD *)v39 + 2) = v119;
  uint64_t v89 = v23;
  sub_10000F024((uint64_t)v23, &qword_1000A5FD0);
  uint64_t v90 = v27;
  sub_100027078((uint64_t)v27, v105, &qword_1000A5FD8);
  sub_10008A0A0();
  long long v41 = v86;
  uint64_t v42 = v104;
  v100(v86, v102, v104);
  uint64_t v43 = sub_10008A090();
  swift_release();
  v99(v41, v42);
  uint64_t v44 = sub_100045B34();
  uint64_t v45 = (uint64_t)v81;
  char v80 = &type metadata accessor for WidgetRenderingMode;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, v112, (uint64_t)v81);
  uint64_t v46 = v106;
  v110((char *)v12 + *(int *)(v115 + 24), v45, v106);
  uint64_t *v12 = v44;
  v12[1] = 0x3FF0000000000000;
  uint64_t v47 = v84;
  uint64_t v48 = (uint64_t)v84 + *(int *)(v114 + 36);
  uint64_t v83 = type metadata accessor for ClockWidgetAccentableForegroundColor;
  sub_100049F18((uint64_t)v12, v48, type metadata accessor for ClockWidgetAccentableForegroundColor);
  *uint64_t v47 = v43;
  swift_retain();
  uint64_t v82 = type metadata accessor for ClockWidgetAccentableForegroundColor;
  sub_100049F80((uint64_t)v12, type metadata accessor for ClockWidgetAccentableForegroundColor);
  v109(v45, v46);
  swift_release();
  sub_10008A1B0();
  sub_100089720();
  uint64_t v49 = v85;
  sub_10000F148((uint64_t)v47, v85, &qword_1000A5FD0);
  uint64_t v50 = (_OWORD *)(v49 + *(int *)(v98 + 36));
  long long v51 = v121;
  *uint64_t v50 = v120;
  v50[1] = v51;
  v50[2] = v122;
  sub_10000F024((uint64_t)v47, &qword_1000A5FD0);
  unint64_t v52 = v112;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, v112, v45);
  uint64_t v53 = (uint64_t)v88;
  uint64_t v54 = &v88[*(int *)(v87 + 36)];
  uint64_t v98 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  v110(&v54[*(int *)(v98 + 24)], v45, v46);
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)uint64_t v54 = _Q0;
  sub_10000F148(v49, v53, &qword_1000A5FD8);
  v109(v45, v46);
  sub_10000F024(v49, &qword_1000A5FD8);
  sub_100027078(v53, v107, &qword_1000A76F0);
  sub_10008A0A0();
  uint64_t v60 = v104;
  v100(v41, v102, v104);
  uint64_t v61 = sub_10008A090();
  swift_release();
  v99(v41, v60);
  uint64_t v62 = sub_100045FA0();
  uint64_t v63 = v80;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))v80, 0xD000000000000013, v52, v45);
  uint64_t v64 = v110;
  v110((char *)v12 + *(int *)(v115 + 24), v45, v46);
  uint64_t *v12 = v62;
  v12[1] = 0x3FF0000000000000;
  uint64_t v65 = v89;
  sub_100049F18((uint64_t)v12, (uint64_t)v89 + *(int *)(v114 + 36), v83);
  *uint64_t v65 = v61;
  swift_retain();
  sub_100049F80((uint64_t)v12, v82);
  uint64_t v66 = v109;
  v109(v45, v46);
  swift_release();
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))v63, 0xD000000000000013, v112, v45);
  uint64_t v67 = (uint64_t)v93;
  uint64_t v68 = &v93[*(int *)(v91 + 36)];
  v64(&v68[*(int *)(v98 + 24)], v45, v46);
  *(_OWORD *)uint64_t v68 = xmmword_100099810;
  sub_10000F148((uint64_t)v65, v67, &qword_1000A5FD0);
  v66(v45, v46);
  sub_10000F024((uint64_t)v65, &qword_1000A5FD0);
  sub_10008A1B0();
  sub_100089720();
  uint64_t v69 = v96;
  sub_10000F148(v67, v96, &qword_1000A76E0);
  uint64_t v70 = (_OWORD *)(v69 + *(int *)(v92 + 36));
  long long v71 = v124;
  *uint64_t v70 = v123;
  v70[1] = v71;
  v70[2] = v125;
  sub_10000F024(v67, &qword_1000A76E0);
  uint64_t v72 = v95;
  sub_100027078(v69, v95, &qword_1000A76E8);
  uint64_t v73 = v105;
  uint64_t v74 = (uint64_t)v90;
  sub_10000F148(v105, (uint64_t)v90, &qword_1000A5FD8);
  uint64_t v75 = v107;
  uint64_t v76 = v94;
  sub_10000F148(v107, v94, &qword_1000A76F0);
  sub_10000F148(v72, v69, &qword_1000A76E8);
  uint64_t v77 = v97;
  sub_10000F148(v74, v97, &qword_1000A5FD8);
  uint64_t v78 = sub_10000697C(&qword_1000A76F8);
  sub_10000F148(v76, v77 + *(int *)(v78 + 48), &qword_1000A76F0);
  sub_10000F148(v69, v77 + *(int *)(v78 + 64), &qword_1000A76E8);
  sub_10000F024(v72, &qword_1000A76E8);
  sub_10000F024(v75, &qword_1000A76F0);
  sub_10000F024(v73, &qword_1000A5FD8);
  sub_10000F024(v69, &qword_1000A76E8);
  sub_10000F024(v76, &qword_1000A76F0);
  return sub_10000F024(v74, &qword_1000A5FD8);
}

uint64_t sub_100045B34()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10008A260();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v8 = &v25[-v7];
  uint64_t v9 = type metadata accessor for ClockFace(0);
  __chkstk_darwin(v9);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v14 = &v25[-v13];
  int v16 = *(unsigned __int8 *)(v0 + *(int *)(v15 + 52));
  sub_100049F18(v1, (uint64_t)&v25[-v13], type metadata accessor for ClockFace);
  if (v16 == 1)
  {
    sub_100049F80((uint64_t)v14, type metadata accessor for ClockFace);
    goto LABEL_3;
  }
  int v20 = v14[*(int *)(v9 + 44)];
  sub_100049F18((uint64_t)v14, (uint64_t)v11, type metadata accessor for ClockFace);
  if (v20 != 1)
  {
    sub_100049F80((uint64_t)v11, type metadata accessor for ClockFace);
    sub_100049F80((uint64_t)v14, type metadata accessor for ClockFace);
    goto LABEL_9;
  }
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v8);
  sub_10008A250();
  int v26 = sub_10008A220();
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v21(v5, v2);
  v21(v8, v2);
  sub_100049F80((uint64_t)v11, type metadata accessor for ClockFace);
  sub_100049F80((uint64_t)v14, type metadata accessor for ClockFace);
  if ((v26 & 1) == 0)
  {
LABEL_9:
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v8);
    sub_10008A230();
    char v22 = sub_10008A220();
    unint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
    v23(v5, v2);
    v23(v8, v2);
    if (v22)
    {
      sub_1000151D8();
      return swift_retain();
    }
    goto LABEL_11;
  }
LABEL_3:
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v8);
  sub_10008A250();
  char v17 = sub_10008A220();
  uint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v18(v5, v2);
  v18(v8, v2);
  if ((v17 & 1) == 0)
  {
LABEL_11:
    char v19 = 0;
    return sub_100015948(v19);
  }
  char v19 = *(unsigned char *)(v1 + 8);
  return sub_100015948(v19);
}

unint64_t sub_100045F1C()
{
  unint64_t v1 = 0xD000000000000013;
  uint64_t v2 = type metadata accessor for ClockFace(0);
  if (*(unsigned char *)(v0 + *(int *)(v2 + 48)))
  {
    if (*(unsigned char *)(v0 + *(int *)(v2 + 48)) == 1) {
      return 0xD00000000000001ALL;
    }
    else {
      return 0xD00000000000001ELL;
    }
  }
  return v1;
}

uint64_t sub_100045FA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ClockFace(0);
  __chkstk_darwin(v2);
  uint64_t v23 = (uint64_t)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = sub_10008A260();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - v12;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)&v22 - v12);
  sub_10008A240();
  char v14 = sub_10008A220();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  v15(v13, v7);
  if (v14) {
    return sub_10008A000();
  }
  int v17 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 52));
  sub_100049F18(v1, (uint64_t)v6, type metadata accessor for ClockFace);
  if (v17 != 1)
  {
    int v19 = v6[*(int *)(v2 + 44)];
    sub_100049F18((uint64_t)v6, v23, type metadata accessor for ClockFace);
    if (v19 == 1)
    {
      uint64_t v20 = v23;
      sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v13);
      sub_10008A250();
      char v21 = sub_10008A220();
      v15(v10, v7);
      v15(v13, v7);
      sub_100049F80(v20, type metadata accessor for ClockFace);
      sub_100049F80((uint64_t)v6, type metadata accessor for ClockFace);
      if (v21)
      {
        char v18 = *(unsigned char *)(v1 + 8);
        return sub_100015A88(v18);
      }
    }
    else
    {
      sub_100049F80(v23, type metadata accessor for ClockFace);
      sub_100049F80((uint64_t)v6, type metadata accessor for ClockFace);
    }
    char v18 = 0;
    return sub_100015A88(v18);
  }
  sub_100049F80((uint64_t)v6, type metadata accessor for ClockFace);
  char v18 = *(unsigned char *)(v1 + 8);
  return sub_100015A88(v18);
}

uint64_t sub_1000462F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v24 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v24);
  uint64_t v2 = (uint64_t *)((char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = sub_10008A260();
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  __chkstk_darwin(v3);
  uint64_t v25 = (uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10008A050();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000697C(&qword_1000A5FD0);
  __chkstk_darwin(v22);
  uint64_t v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = sub_10000697C(&qword_1000A5FD8);
  __chkstk_darwin(v23);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClockFace(0);
  sub_10008A0A0();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v5);
  uint64_t v13 = sub_10008A090();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v14 = sub_100045B34();
  uint64_t v15 = v25;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, v25);
  uint64_t v17 = v26;
  uint64_t v16 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)v2 + *(int *)(v24 + 24), v15, v27);
  uint64_t *v2 = v14;
  v2[1] = 0x3FF0000000000000;
  sub_100049F18((uint64_t)v2, (uint64_t)v10 + *(int *)(v22 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  uint64_t *v10 = v13;
  swift_retain();
  sub_100049F80((uint64_t)v2, type metadata accessor for ClockWidgetAccentableForegroundColor);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  swift_release();
  sub_10008A1B0();
  sub_100089720();
  sub_10000F148((uint64_t)v10, (uint64_t)v12, &qword_1000A5FD0);
  char v18 = &v12[*(int *)(v23 + 36)];
  long long v19 = v30;
  *(_OWORD *)char v18 = v29;
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v31;
  sub_10000F024((uint64_t)v10, &qword_1000A5FD0);
  return sub_100027078((uint64_t)v12, v28, &qword_1000A5FD8);
}

uint64_t sub_100046784()
{
  uint64_t v1 = type metadata accessor for ClockFace(0);
  if (!*(unsigned char *)(v0 + *(int *)(v1 + 48))) {
    return 0x737265626D756ELL;
  }
  if (*(unsigned char *)(v0 + *(int *)(v1 + 48)) == 1) {
    return 0x2D737265626D756ELL;
  }
  return 0xD000000000000012;
}

unint64_t sub_100046810()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0xD000000000000014;
  }
  else {
    return 0xD000000000000015;
  }
}

uint64_t sub_100046850()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10008A260();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = type metadata accessor for ClockFace(0);
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v8);
  sub_10008A240();
  char v10 = sub_10008A220();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v5, v2);
  v11(v8, v2);
  if (v10) {
    return sub_10008A000();
  }
  if (*(unsigned char *)(v1 + *(int *)(v9 + 52)) == 1) {
    char v13 = *(unsigned char *)(v1 + 8);
  }
  else {
    char v13 = 0;
  }
  return sub_100015B28(v13);
}

uint64_t sub_1000469E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v74 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v74);
  uint64_t v4 = (uint64_t *)((char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v70 = sub_10008A260();
  uint64_t v77 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v64 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10008A050();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000697C(&qword_1000A5FD0);
  __chkstk_darwin(v75);
  uint64_t v69 = (uint64_t *)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v66 = (uint64_t *)((char *)&v51 - v12);
  uint64_t v67 = sub_10000697C(&qword_1000A5FD8);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v71 = (uint64_t)&v51 - v15;
  __chkstk_darwin(v16);
  uint64_t v68 = (uint64_t)&v51 - v17;
  __chkstk_darwin(v18);
  uint64_t v65 = (uint64_t)&v51 - v19;
  __chkstk_darwin(v20);
  uint64_t v76 = (uint64_t)&v51 - v21;
  uint64_t v22 = type metadata accessor for ClockFace(0);
  sub_10008A0A0();
  unsigned int v61 = enum case for Image.ResizingMode.stretch(_:);
  uint64_t v23 = *(void (**)(void))(v7 + 104);
  uint64_t v62 = v7 + 104;
  uint64_t v63 = (void (*)(char *, void, uint64_t))v23;
  v23(v9);
  uint64_t v24 = sub_10008A090();
  swift_release();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v59 = v7 + 8;
  uint64_t v60 = v25;
  v25(v9, v6);
  uint64_t v26 = sub_100045B34();
  uint64_t v58 = a1 + *(int *)(v22 + 56);
  unint64_t v57 = 0x800000010008BE90;
  uint64_t v56 = &type metadata accessor for WidgetRenderingMode;
  uint64_t v27 = v64;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, v64);
  uint64_t v28 = (char *)v4 + *(int *)(v74 + 24);
  uint64_t v29 = v77;
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
  uint64_t v55 = v77 + 16;
  uint64_t v30 = v70;
  v54(v28, v27, v70);
  *uint64_t v4 = v26;
  v4[1] = 0x3FF0000000000000;
  long long v31 = v66;
  uint64_t v32 = (uint64_t)v66 + *(int *)(v75 + 36);
  uint64_t v53 = type metadata accessor for ClockWidgetAccentableForegroundColor;
  sub_100049F18((uint64_t)v4, v32, type metadata accessor for ClockWidgetAccentableForegroundColor);
  uint64_t *v31 = v24;
  swift_retain();
  unint64_t v52 = type metadata accessor for ClockWidgetAccentableForegroundColor;
  sub_100049F80((uint64_t)v4, type metadata accessor for ClockWidgetAccentableForegroundColor);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  uint64_t v77 = v29 + 8;
  long long v51 = v33;
  v33(v27, v30);
  swift_release();
  sub_10008A1B0();
  sub_100089720();
  uint64_t v34 = v65;
  sub_10000F148((uint64_t)v31, v65, &qword_1000A5FD0);
  uint64_t v35 = v67;
  uint64_t v36 = (_OWORD *)(v34 + *(int *)(v67 + 36));
  long long v37 = v79;
  *uint64_t v36 = v78;
  v36[1] = v37;
  v36[2] = v80;
  sub_10000F024((uint64_t)v31, &qword_1000A5FD0);
  sub_100027078(v34, v76, &qword_1000A5FD8);
  sub_10008A0A0();
  uint64_t v38 = v6;
  v63(v9, v61, v6);
  uint64_t v39 = sub_10008A090();
  swift_release();
  v60(v9, v38);
  uint64_t v40 = sub_100045FA0();
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))v56, 0xD000000000000013, v57, v27);
  v54((char *)v4 + *(int *)(v74 + 24), v27, v30);
  *uint64_t v4 = v40;
  v4[1] = 0x3FD3333333333333;
  long long v41 = v69;
  sub_100049F18((uint64_t)v4, (uint64_t)v69 + *(int *)(v75 + 36), v53);
  *long long v41 = v39;
  swift_retain();
  sub_100049F80((uint64_t)v4, v52);
  v51(v27, v30);
  swift_release();
  sub_10008A1B0();
  sub_100089720();
  uint64_t v42 = v71;
  sub_10000F148((uint64_t)v41, v71, &qword_1000A5FD0);
  uint64_t v43 = (_OWORD *)(v42 + *(int *)(v35 + 36));
  long long v44 = v82;
  *uint64_t v43 = v81;
  v43[1] = v44;
  v43[2] = v83;
  sub_10000F024((uint64_t)v41, &qword_1000A5FD0);
  uint64_t v45 = v68;
  sub_100027078(v42, v68, &qword_1000A5FD8);
  uint64_t v46 = v76;
  sub_10000F148(v76, v42, &qword_1000A5FD8);
  uint64_t v47 = v72;
  sub_10000F148(v45, v72, &qword_1000A5FD8);
  uint64_t v48 = v73;
  sub_10000F148(v42, v73, &qword_1000A5FD8);
  uint64_t v49 = sub_10000697C(&qword_1000A76D8);
  sub_10000F148(v47, v48 + *(int *)(v49 + 48), &qword_1000A5FD8);
  sub_10000F024(v45, &qword_1000A5FD8);
  sub_10000F024(v46, &qword_1000A5FD8);
  sub_10000F024(v47, &qword_1000A5FD8);
  return sub_10000F024(v42, &qword_1000A5FD8);
}

unint64_t sub_100047264()
{
  unint64_t v1 = 0xD000000000000011;
  uint64_t v2 = type metadata accessor for ClockFace(0);
  if (*(unsigned char *)(v0 + *(int *)(v2 + 48)))
  {
    if (*(unsigned char *)(v0 + *(int *)(v2 + 48)) == 1) {
      return 0xD000000000000018;
    }
    else {
      return 0xD00000000000001CLL;
    }
  }
  return v1;
}

uint64_t sub_1000472E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v99 = a1;
  uint64_t v97 = a2;
  uint64_t v2 = sub_10000697C(&qword_1000A7130);
  __chkstk_darwin(v2 - 8);
  uint64_t v84 = (uint64_t)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000697C(&qword_1000A76B0);
  uint64_t v87 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  long long v83 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for ClockFace(0);
  __chkstk_darwin(v98);
  uint64_t v95 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A76B8);
  __chkstk_darwin(v6 - 8);
  uint64_t v86 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v85 = (char *)&v78 - v9;
  uint64_t v94 = type metadata accessor for ClockWidgetAccentableForegroundColor(0) - 8;
  __chkstk_darwin(v94);
  uint64_t v11 = (uint64_t *)((char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_10008A260();
  uint64_t v92 = *(void *)(v12 - 8);
  uint64_t v93 = v12;
  __chkstk_darwin(v12);
  long long v79 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v78 - v15;
  uint64_t v17 = sub_10000697C(&qword_1000A5FC8);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10008A050();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000697C(&qword_1000A76C0);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24);
  uint64_t v27 = (double *)((char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v91 = sub_10000697C(&qword_1000A76C8) - 8;
  __chkstk_darwin(v91);
  uint64_t v96 = (uint64_t)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v90 = (uint64_t)&v78 - v30;
  __chkstk_darwin(v31);
  uint64_t v100 = (uint64_t)&v78 - v32;
  sub_10008A0A0();
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v23, enum case for Image.ResizingMode.stretch(_:), v20);
  sub_10008A090();
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  uint64_t v33 = enum case for Image.TemplateRenderingMode.template(_:);
  uint64_t v34 = sub_10008A080();
  uint64_t v35 = *(void *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 104))(v19, v33, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v19, 0, 1, v34);
  uint64_t v36 = sub_10008A060();
  swift_release();
  sub_10000F024((uint64_t)v19, &qword_1000A5FC8);
  uint64_t v38 = v98;
  uint64_t v37 = v99;
  uint64_t v89 = *(int *)(v98 + 52);
  if (*(unsigned char *)(v99 + v89)) {
    double v39 = 0.66;
  }
  else {
    double v39 = 0.15;
  }
  uint64_t v40 = sub_100047D6C();
  uint64_t v41 = v37 + *(int *)(v38 + 56);
  uint64_t v42 = v37;
  unint64_t v80 = (unint64_t)"ClockWidgetEnvironmentObject";
  uint64_t v81 = v41;
  unint64_t v78 = 0x800000010008BE90;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v16);
  uint64_t v43 = v93;
  long long v44 = (char *)v11 + *(int *)(v94 + 32);
  uint64_t v45 = v92;
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 16);
  uint64_t v94 = v92 + 16;
  long long v82 = v46;
  v46(v44, (uint64_t)v16, v93);
  uint64_t *v11 = v40;
  v11[1] = 0x3FC3333333333333;
  uint64_t v47 = (uint64_t)v95;
  uint64_t v48 = *(int *)(v25 + 44);
  uint64_t v49 = (uint64_t)v16;
  sub_100049F18((uint64_t)v11, (uint64_t)v27 + v48, type metadata accessor for ClockWidgetAccentableForegroundColor);
  *(void *)uint64_t v27 = v36;
  v27[1] = v39;
  swift_retain();
  uint64_t v50 = (uint64_t)v11;
  uint64_t v51 = v43;
  sub_100049F80(v50, type metadata accessor for ClockWidgetAccentableForegroundColor);
  unint64_t v52 = *(void (**)(char *, uint64_t))(v45 + 8);
  v52(v16, v43);
  swift_release();
  sub_10008A1B0();
  sub_100089720();
  uint64_t v53 = v90;
  sub_10000F148((uint64_t)v27, v90, &qword_1000A76C0);
  uint64_t v54 = (_OWORD *)(v53 + *(int *)(v91 + 44));
  long long v55 = v102;
  _OWORD *v54 = v101;
  v54[1] = v55;
  v54[2] = v103;
  sub_10000F024((uint64_t)v27, &qword_1000A76C0);
  sub_100027078(v53, v100, &qword_1000A76C8);
  LODWORD(v53) = *(unsigned __int8 *)(v42 + v89);
  sub_100049F18(v42, v47, type metadata accessor for ClockFace);
  if (v53 != 1)
  {
    sub_100049F80(v47, type metadata accessor for ClockFace);
    uint64_t v59 = v88;
    uint64_t v60 = v87;
    uint64_t v61 = (uint64_t)v86;
    uint64_t v62 = (uint64_t)v85;
    goto LABEL_8;
  }
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, v78, v49);
  uint64_t v56 = v79;
  sub_10008A230();
  char v57 = sub_10008A220();
  v52(v56, v51);
  v52((char *)v49, v51);
  sub_100049F80(v47, type metadata accessor for ClockFace);
  uint64_t v58 = v97;
  uint64_t v59 = v88;
  uint64_t v60 = v87;
  uint64_t v61 = (uint64_t)v86;
  uint64_t v62 = (uint64_t)v85;
  if ((v57 & 1) == 0)
  {
LABEL_8:
    uint64_t v98 = (uint64_t)v52;
    uint64_t v64 = v84;
    sub_100047F08(1, v99, v84);
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, v80 | 0x8000000000000000, v49);
    uint64_t v65 = (uint64_t)v83;
    uint64_t v66 = &v83[*(int *)(v59 + 36)];
    uint64_t v67 = type metadata accessor for ClockWidgetAccentableOpacity(0);
    v82(&v66[*(int *)(v67 + 24)], v49, v51);
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)uint64_t v66 = _Q0;
    sub_10000F148(v64, v65, &qword_1000A7130);
    ((void (*)(uint64_t, uint64_t))v98)(v49, v51);
    uint64_t v73 = v64;
    uint64_t v58 = v97;
    sub_10000F024(v73, &qword_1000A7130);
    sub_100027078(v65, v62, &qword_1000A76B0);
    uint64_t v63 = 0;
    goto LABEL_9;
  }
  uint64_t v63 = 1;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v62, v63, 1, v59);
  uint64_t v74 = v100;
  uint64_t v75 = v96;
  sub_10000F148(v100, v96, &qword_1000A76C8);
  sub_10000F148(v62, v61, &qword_1000A76B8);
  sub_10000F148(v75, v58, &qword_1000A76C8);
  uint64_t v76 = sub_10000697C(&qword_1000A76D0);
  sub_10000F148(v61, v58 + *(int *)(v76 + 48), &qword_1000A76B8);
  sub_10000F024(v62, &qword_1000A76B8);
  sub_10000F024(v74, &qword_1000A76C8);
  sub_10000F024(v61, &qword_1000A76B8);
  return sub_10000F024(v75, &qword_1000A76C8);
}

uint64_t sub_100047D6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10008A260();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = type metadata accessor for ClockFace(0);
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v8);
  sub_10008A240();
  char v10 = sub_10008A220();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v5, v2);
  v11(v8, v2);
  if (v10)
  {
    sub_100014F5C();
    return swift_retain();
  }
  else
  {
    if (*(unsigned char *)(v1 + *(int *)(v9 + 52)) == 1) {
      char v13 = *(unsigned char *)(v1 + 8);
    }
    else {
      char v13 = 0;
    }
    return sub_100015B28(v13);
  }
}

uint64_t sub_100047F08@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v238 = a2;
  LODWORD(v235) = a1;
  uint64_t v234 = a3;
  uint64_t v214 = sub_10000697C(&qword_1000A7200);
  __chkstk_darwin(v214);
  uint64_t v200 = (char *)&v197 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = sub_10000697C(&qword_1000A71F0);
  __chkstk_darwin(v215);
  uint64_t v209 = (char *)&v197 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = sub_10000697C(&qword_1000A71E0);
  __chkstk_darwin(v233);
  uint64_t v216 = (char *)&v197 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v217 = (char *)&v197 - v7;
  uint64_t v231 = sub_10000697C(&qword_1000A7700);
  __chkstk_darwin(v231);
  uint64_t v232 = (uint64_t)&v197 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A5FC8);
  __chkstk_darwin(v9 - 8);
  uint64_t v222 = (char *)&v197 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = sub_10008A050();
  uint64_t v218 = *(void *)(v230 - 8);
  __chkstk_darwin(v230);
  uint64_t v221 = (char *)&v197 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = sub_10008A350();
  uint64_t v199 = *(void *)(v203 - 8);
  __chkstk_darwin(v203);
  uint64_t v213 = (char *)&v197 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v236 = type metadata accessor for ClockFace(0);
  __chkstk_darwin(v236);
  uint64_t v210 = (uint64_t)&v197 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v211 = (uint64_t)&v197 - v15;
  uint64_t v229 = sub_10008A260();
  uint64_t v228 = *(void *)(v229 - 8);
  __chkstk_darwin(v229);
  uint64_t v226 = (char *)&v197 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v227 = (uint64_t)&v197 - v18;
  uint64_t v19 = sub_1000897A0();
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (_OWORD *)((char *)&v197 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v223 = sub_10000697C(&qword_1000A71C0);
  __chkstk_darwin(v223);
  uint64_t v225 = (uint64_t)&v197 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = sub_10000697C(&qword_1000A71B0);
  __chkstk_darwin(v224);
  uint64_t v201 = (uint64_t)&v197 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v202 = (uint64_t)&v197 - v26;
  uint64_t v219 = sub_10000697C(&qword_1000A71A0);
  __chkstk_darwin(v219);
  uint64_t v207 = (uint64_t)&v197 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v208 = (uint64_t)&v197 - v29;
  uint64_t v220 = sub_10000697C(&qword_1000A7190);
  __chkstk_darwin(v220);
  uint64_t v198 = (char *)&v197 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v205 = (uint64_t)&v197 - v32;
  uint64_t v204 = sub_10000697C(&qword_1000A7180);
  __chkstk_darwin(v204);
  uint64_t v197 = (char *)&v197 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = sub_10000697C(&qword_1000A7170);
  __chkstk_darwin(v206);
  uint64_t v35 = (char *)&v197 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000697C(&qword_1000A7158);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v197 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000697C(&qword_1000A7708);
  uint64_t v212 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v197 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v237 = sub_10000697C(&qword_1000A7150);
  __chkstk_darwin(v237);
  uint64_t v43 = (char *)&v197 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v46 = (char *)&v197 - v45;
  uint64_t v47 = (char *)v22 + *(int *)(v20 + 28);
  uint64_t v48 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v49 = sub_1000899B0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 104))(v47, v48, v49);
  __asm { FMOV            V0.2D, #20.0 }
  *uint64_t v22 = _Q0;
  sub_10005CAB0();
  swift_bridgeObjectRetain();
  sub_10008A1E0();
  if ((v235 & 1) == 0)
  {
    uint64_t v86 = v209;
    sub_100089740();
    uint64_t v87 = v225;
    sub_100049F18((uint64_t)v22, v225, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    uint64_t v88 = v223;
    uint64_t v89 = v87 + *(int *)(v223 + 52);
    long long v90 = v240;
    *(_OWORD *)uint64_t v89 = v239;
    *(_OWORD *)(v89 + 16) = v90;
    *(void *)(v89 + 32) = v241;
    *(_WORD *)(v87 + *(int *)(v88 + 56)) = 256;
    sub_100049F80((uint64_t)v22, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    uint64_t v91 = (uint64_t *)sub_10002F28C();
    uint64_t v92 = *v91;
    uint64_t v93 = v91[1];
    sub_10008A1E0();
    uint64_t v95 = v94;
    uint64_t v97 = v96;
    uint64_t v98 = v201;
    sub_10000F148(v87, v201, &qword_1000A71C0);
    uint64_t v99 = (void *)(v98 + *(int *)(v224 + 36));
    *uint64_t v99 = v92;
    v99[1] = v93;
    v99[2] = v95;
    v99[3] = v97;
    sub_10000F024(v87, &qword_1000A71C0);
    uint64_t v100 = v236;
    uint64_t v101 = v238;
    uint64_t v102 = v227;
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, v227);
    long long v103 = v226;
    sub_10008A230();
    char v104 = sub_10008A220();
    uint64_t v105 = *(void (**)(char *, uint64_t))(v228 + 8);
    uint64_t v106 = v103;
    uint64_t v107 = v229;
    v105(v106, v229);
    v105((char *)v102, v107);
    uint64_t v108 = v210;
    sub_100049F18(v101, v210, type metadata accessor for ClockFace);
    uint64_t v109 = v98;
    if (v104)
    {
      char v110 = *(unsigned char *)(v108 + *(int *)(v100 + 52));
      sub_100049F80(v108, type metadata accessor for ClockFace);
      uint64_t v111 = (uint64_t)v222;
      uint64_t v112 = v218;
      uint64_t v113 = v221;
      uint64_t v114 = (uint64_t)v86;
      uint64_t v115 = (uint64_t)v200;
      uint64_t v116 = v220;
      uint64_t v117 = (uint64_t)v198;
      if ((v110 & 1) == 0)
      {
        long long v118 = (uint64_t *)sub_10002F2AC();
LABEL_13:
        uint64_t v162 = *v118;
        uint64_t v161 = v118[1];
        sub_10008A1E0();
        uint64_t v164 = v163;
        uint64_t v166 = v165;
        uint64_t v167 = v109;
        uint64_t v168 = v109;
        uint64_t v169 = v207;
        sub_10000F148(v168, v207, &qword_1000A71B0);
        uint64_t v170 = (void *)(v169 + *(int *)(v219 + 36));
        *uint64_t v170 = v162;
        v170[1] = v161;
        v170[2] = v164;
        v170[3] = v166;
        sub_10000F024(v167, &qword_1000A71B0);
        sub_10000F148(v169, v117, &qword_1000A71A0);
        uint64_t v171 = v117 + *(int *)(v116 + 36);
        *(void *)uint64_t v171 = 0x4000000000000000;
        *(unsigned char *)(v171 + 8) = 0;
        sub_10000F024(v169, &qword_1000A71A0);
        sub_10008A1B0();
        sub_100089720();
        sub_10000F148(v117, v115, &qword_1000A7190);
        uint64_t v172 = (_OWORD *)(v115 + *(int *)(v214 + 36));
        long long v173 = v243;
        *uint64_t v172 = v242;
        v172[1] = v173;
        v172[2] = v244;
        sub_10000F024(v117, &qword_1000A7190);
        uint64_t v174 = *(void *)sub_10002F2C4();
        sub_10008A1E0();
        uint64_t v176 = v175;
        uint64_t v178 = v177;
        sub_10000F148(v115, v114, &qword_1000A7200);
        uint64_t v179 = (void *)(v114 + *(int *)(v215 + 36));
        *uint64_t v179 = v174;
        v179[1] = v176;
        v179[2] = v178;
        sub_10000F024(v115, &qword_1000A7200);
        uint64_t v236 = sub_10008A1B0();
        uint64_t v235 = v180;
        sub_10008A0A0();
        uint64_t v181 = v230;
        (*(void (**)(char *, void, uint64_t))(v112 + 104))(v113, enum case for Image.ResizingMode.stretch(_:), v230);
        sub_10008A090();
        swift_release();
        (*(void (**)(char *, uint64_t))(v112 + 8))(v113, v181);
        uint64_t v182 = enum case for Image.TemplateRenderingMode.template(_:);
        uint64_t v183 = sub_10008A080();
        uint64_t v184 = *(void *)(v183 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v184 + 104))(v111, v182, v183);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v184 + 56))(v111, 0, 1, v183);
        uint64_t v230 = sub_10008A060();
        swift_release();
        sub_10000F024(v111, &qword_1000A5FC8);
        sub_10008A1B0();
        sub_100089720();
        uint64_t v185 = v245;
        LOBYTE(v184) = v246;
        uint64_t v186 = v247;
        char v187 = v248;
        uint64_t v188 = v249;
        uint64_t v189 = v250;
        uint64_t v190 = v114;
        uint64_t v191 = v114;
        uint64_t v192 = (uint64_t)v216;
        sub_10000F148(v191, (uint64_t)v216, &qword_1000A71F0);
        uint64_t v193 = v192 + *(int *)(v233 + 36);
        uint64_t v194 = v235;
        *(void *)uint64_t v193 = v236;
        *(void *)(v193 + 8) = v194;
        *(void *)(v193 + 16) = v230;
        *(void *)(v193 + 24) = v185;
        *(unsigned char *)(v193 + 32) = v184;
        *(void *)(v193 + 40) = v186;
        *(unsigned char *)(v193 + 48) = v187;
        *(void *)(v193 + 56) = v188;
        *(void *)(v193 + 64) = v189;
        sub_10000F024(v190, &qword_1000A71F0);
        uint64_t v158 = &qword_1000A71E0;
        uint64_t v195 = (uint64_t)v217;
        sub_100027078(v192, (uint64_t)v217, &qword_1000A71E0);
        sub_10000F148(v195, v232, &qword_1000A71E0);
        swift_storeEnumTagMultiPayload();
        sub_10006E808();
        sub_10006EA70();
        sub_100089AB0();
        uint64_t v160 = v195;
        return sub_10000F024(v160, v158);
      }
    }
    else
    {
      sub_100049F80(v108, type metadata accessor for ClockFace);
      uint64_t v111 = (uint64_t)v222;
      uint64_t v112 = v218;
      uint64_t v113 = v221;
      uint64_t v114 = (uint64_t)v86;
      uint64_t v115 = (uint64_t)v200;
      uint64_t v116 = v220;
      uint64_t v117 = (uint64_t)v198;
    }
    long long v118 = (uint64_t *)sub_10002F274();
    goto LABEL_13;
  }
  uint64_t v209 = v35;
  uint64_t v210 = v36;
  uint64_t v214 = (uint64_t)v38;
  uint64_t v215 = (uint64_t)v43;
  uint64_t v216 = v41;
  uint64_t v217 = v46;
  uint64_t v235 = v39;
  sub_100089740();
  uint64_t v55 = v225;
  sub_100049F18((uint64_t)v22, v225, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v56 = v223;
  uint64_t v57 = v55 + *(int *)(v223 + 52);
  long long v58 = v240;
  *(_OWORD *)uint64_t v57 = v239;
  *(_OWORD *)(v57 + 16) = v58;
  *(void *)(v57 + 32) = v241;
  *(_WORD *)(v55 + *(int *)(v56 + 56)) = 256;
  sub_100049F80((uint64_t)v22, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v59 = (uint64_t *)sub_10002F28C();
  uint64_t v60 = *v59;
  uint64_t v61 = v59[1];
  sub_10008A1E0();
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  uint64_t v66 = v202;
  sub_10000F148(v55, v202, &qword_1000A71C0);
  uint64_t v67 = (void *)(v66 + *(int *)(v224 + 36));
  void *v67 = v60;
  v67[1] = v61;
  v67[2] = v63;
  v67[3] = v65;
  sub_10000F024(v55, &qword_1000A71C0);
  uint64_t v68 = v236;
  uint64_t v69 = v238;
  uint64_t v70 = v227;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, v227);
  uint64_t v71 = v226;
  sub_10008A230();
  char v72 = sub_10008A220();
  uint64_t v73 = *(void (**)(char *, uint64_t))(v228 + 8);
  uint64_t v74 = v71;
  uint64_t v75 = v229;
  v73(v74, v229);
  v73((char *)v70, v75);
  uint64_t v76 = v211;
  sub_100049F18(v69, v211, type metadata accessor for ClockFace);
  if ((v72 & 1) == 0)
  {
    sub_100049F80(v76, type metadata accessor for ClockFace);
    uint64_t v78 = v218;
    uint64_t v79 = v199;
    uint64_t v80 = v219;
    uint64_t v81 = v214;
    uint64_t v82 = v210;
    uint64_t v83 = (uint64_t)v209;
    uint64_t v84 = (uint64_t)v197;
    goto LABEL_9;
  }
  char v77 = *(unsigned char *)(v76 + *(int *)(v68 + 52));
  sub_100049F80(v76, type metadata accessor for ClockFace);
  uint64_t v78 = v218;
  uint64_t v79 = v199;
  uint64_t v80 = v219;
  uint64_t v81 = v214;
  uint64_t v82 = v210;
  uint64_t v83 = (uint64_t)v209;
  uint64_t v84 = (uint64_t)v197;
  if (v77)
  {
LABEL_9:
    uint64_t v85 = (uint64_t *)sub_10002F274();
    goto LABEL_10;
  }
  uint64_t v85 = (uint64_t *)sub_10002F2AC();
LABEL_10:
  uint64_t v120 = *v85;
  uint64_t v119 = v85[1];
  sub_10008A1E0();
  uint64_t v122 = v121;
  uint64_t v124 = v123;
  uint64_t v125 = v208;
  sub_10000F148(v66, v208, &qword_1000A71B0);
  uint64_t v126 = (void *)(v125 + *(int *)(v80 + 36));
  *uint64_t v126 = v120;
  v126[1] = v119;
  v126[2] = v122;
  v126[3] = v124;
  sub_10000F024(v66, &qword_1000A71B0);
  uint64_t v127 = v205;
  sub_10000F148(v125, v205, &qword_1000A71A0);
  uint64_t v128 = v127 + *(int *)(v220 + 36);
  *(void *)uint64_t v128 = 0x4000000000000000;
  *(unsigned char *)(v128 + 8) = 0;
  sub_10000F024(v125, &qword_1000A71A0);
  sub_10000F148(v127, v84, &qword_1000A7190);
  *(_DWORD *)(v84 + *(int *)(v204 + 36)) = 3;
  sub_10000F024(v127, &qword_1000A7190);
  sub_10008A1B0();
  sub_100089720();
  sub_10000F148(v84, v83, &qword_1000A7180);
  char v129 = (_OWORD *)(v83 + *(int *)(v206 + 36));
  long long v130 = v243;
  _OWORD *v129 = v242;
  v129[1] = v130;
  v129[2] = v244;
  sub_10000F024(v84, &qword_1000A7180);
  uint64_t v131 = *(void *)sub_10002F2DC();
  sub_10008A1E0();
  uint64_t v133 = v132;
  uint64_t v135 = v134;
  sub_10000F148(v83, v81, &qword_1000A7170);
  uint64_t v136 = (void *)(v81 + *(int *)(v82 + 36));
  void *v136 = v131;
  v136[1] = v133;
  v136[2] = v135;
  sub_10000F024(v83, &qword_1000A7170);
  uint64_t v137 = v81;
  uint64_t v138 = v213;
  uint64_t v139 = v203;
  (*(void (**)(char *, void, uint64_t))(v79 + 104))(v213, enum case for _ClockHandRotationEffect.Period.secondHand(_:), v203);
  sub_10008A1E0();
  sub_10005D64C(&qword_1000A7160, &qword_1000A7158, (void (*)(void))sub_10006E910);
  uint64_t v140 = (uint64_t)v216;
  sub_100089E80();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v138, v139);
  sub_10000F024(v137, &qword_1000A7158);
  uint64_t v236 = sub_10008A1B0();
  uint64_t v229 = v141;
  sub_10008A0A0();
  uint64_t v142 = v221;
  uint64_t v143 = v230;
  (*(void (**)(char *, void, uint64_t))(v78 + 104))(v221, enum case for Image.ResizingMode.stretch(_:), v230);
  sub_10008A090();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v142, v143);
  uint64_t v144 = enum case for Image.TemplateRenderingMode.template(_:);
  uint64_t v145 = sub_10008A080();
  uint64_t v146 = *(void *)(v145 - 8);
  uint64_t v147 = (uint64_t)v222;
  (*(void (**)(char *, uint64_t, uint64_t))(v146 + 104))(v222, v144, v145);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v146 + 56))(v147, 0, 1, v145);
  uint64_t v230 = sub_10008A060();
  swift_release();
  sub_10000F024(v147, &qword_1000A5FC8);
  sub_10008A1B0();
  sub_100089720();
  uint64_t v148 = v245;
  LOBYTE(v145) = v246;
  uint64_t v149 = v247;
  char v150 = v248;
  uint64_t v152 = v249;
  uint64_t v151 = v250;
  uint64_t v153 = v212;
  uint64_t v154 = v215;
  uint64_t v155 = v235;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v212 + 16))(v215, v140, v235);
  uint64_t v156 = v154 + *(int *)(v237 + 36);
  uint64_t v157 = v229;
  *(void *)uint64_t v156 = v236;
  *(void *)(v156 + 8) = v157;
  *(void *)(v156 + 16) = v230;
  *(void *)(v156 + 24) = v148;
  *(unsigned char *)(v156 + 32) = v145;
  *(void *)(v156 + 40) = v149;
  *(unsigned char *)(v156 + 48) = v150;
  *(void *)(v156 + 56) = v152;
  *(void *)(v156 + 64) = v151;
  (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v140, v155);
  uint64_t v158 = &qword_1000A7150;
  uint64_t v159 = (uint64_t)v217;
  sub_100027078(v154, (uint64_t)v217, &qword_1000A7150);
  sub_10000F148(v159, v232, &qword_1000A7150);
  swift_storeEnumTagMultiPayload();
  sub_10006E808();
  sub_10006EA70();
  sub_100089AB0();
  uint64_t v160 = v159;
  return sub_10000F024(v160, v158);
}

uint64_t sub_100049680()
{
  sub_10005CAB0();

  return swift_bridgeObjectRetain();
}

double sub_1000496A8()
{
  return *(double *)(v0 + 8);
}

uint64_t sub_1000496B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100038210(type metadata accessor for ClockWidgetAccentableOpacity, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, a1);
}

uint64_t sub_1000496DC(uint64_t a1)
{
  return sub_1000382B8(a1, type metadata accessor for ClockWidgetAccentableOpacity);
}

uint64_t (*sub_1000496F4())(void)
{
  return nullsub_1;
}

uint64_t sub_10004973C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v18 = sub_10008A260();
  uint64_t v1 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000697C(&qword_1000A5FF0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A5FF8);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000697C(&qword_1000A6000);
  sub_10001845C(&qword_1000A6008, &qword_1000A6000);
  sub_100089E70();
  type metadata accessor for ClockWidgetAccentableOpacity(0);
  uint64_t v12 = v17[1];
  sub_10008A240();
  char v13 = sub_10008A220();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v18);
  uint64_t v14 = 8;
  if (v13) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)(v12 + v14);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v7, v4);
  *(void *)&v11[*(int *)(v9 + 44)] = v15;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_100027078((uint64_t)v11, v19, &qword_1000A5FF8);
}

uint64_t sub_1000499C8@<X0>(uint64_t a1@<X0>, double *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *a2 = a3;
  a2[1] = a4;
  uint64_t v5 = (char *)a2 + *(int *)(type metadata accessor for ClockWidgetAccentableOpacity(0) + 24);
  uint64_t v6 = sub_10008A260();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a1, v6);
}

uint64_t sub_100049A4C()
{
  return swift_retain();
}

uint64_t sub_100049A54@<X0>(uint64_t a1@<X8>)
{
  return sub_10004D99C(type metadata accessor for AccentedWidgetBackground, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, a1);
}

uint64_t sub_100049A80(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AccentedWidgetBackground(0) + 20);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_100049AF8())(void)
{
  return nullsub_1;
}

uint64_t sub_100049B40(uint64_t a1)
{
  v7[1] = a1;
  uint64_t v2 = sub_100089B60();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100089B50();
  uint64_t v8 = v1;
  sub_10008A1B0();
  sub_10000697C(&qword_1000A6010);
  sub_10000697C(&qword_1000A6018);
  sub_10001845C(&qword_1000A6020, &qword_1000A6010);
  sub_10005CE90(&qword_1000A6028, &qword_1000A6018);
  sub_100089F20();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100049CE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccentedWidgetBackground(0);
  sub_10008A240();
  char v8 = sub_10008A220();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    id v9 = [self clearColor];
    uint64_t v10 = sub_100089F80();
  }
  else
  {
    uint64_t v10 = *a1;
    swift_retain();
  }
  uint64_t result = sub_100089B90();
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100049E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for AccentedWidgetBackground(0) + 20);
  uint64_t v5 = sub_10008A260();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

uint64_t type metadata accessor for AccentedWidgetBackground(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB630);
}

uint64_t type metadata accessor for PlaceholderViewSingle(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB5B0);
}

uint64_t type metadata accessor for SmallWorldClockView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB5D0);
}

uint64_t sub_100049F00(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100049F18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100049F80(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100049FE0(uint64_t a1)
{
  v7[1] = a1;
  uint64_t v2 = sub_100089B60();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100089B50();
  uint64_t v8 = v1;
  sub_10008A1B0();
  sub_10000697C(&qword_1000A6010);
  sub_10000697C(&qword_1000A6018);
  sub_10001845C(&qword_1000A6020, &qword_1000A6010);
  sub_10005CE90(&qword_1000A6028, &qword_1000A6018);
  sub_100089F20();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10004A188@<X0>(uint64_t a1@<X8>)
{
  return sub_100038210(type metadata accessor for ClockWidgetAccentableForegroundColor, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, a1);
}

uint64_t sub_10004A1B4(uint64_t a1)
{
  return sub_1000382B8(a1, type metadata accessor for ClockWidgetAccentableForegroundColor);
}

uint64_t (*sub_10004A1CC())(void)
{
  return nullsub_1;
}

uint64_t sub_10004A214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v3 = sub_10008A260();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000697C(&qword_1000A6030);
  __chkstk_darwin(v22);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000697C(&qword_1000A6038);
  __chkstk_darwin(v23);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  sub_10008A240();
  char v11 = sub_10008A220();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  uint64_t v21 = v2;
  if (v11)
  {
    uint64_t v13 = sub_10008A000();
  }
  else
  {
    uint64_t v13 = *v2;
    swift_retain();
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = sub_10000697C(&qword_1000A6040);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v24, v15);
  uint64_t v16 = (uint64_t *)&v8[*(int *)(v22 + 36)];
  *uint64_t v16 = KeyPath;
  v16[1] = v13;
  sub_10008A240();
  char v17 = sub_10008A220();
  v12(v6, v3);
  double v18 = 1.0;
  if (v17) {
    double v18 = *((double *)v21 + 1);
  }
  sub_10000F148((uint64_t)v8, (uint64_t)v10, &qword_1000A6030);
  *(double *)&v10[*(int *)(v23 + 36)] = v18;
  sub_10000F024((uint64_t)v8, &qword_1000A6030);
  return sub_100027078((uint64_t)v10, v25, &qword_1000A6038);
}

uint64_t sub_10004A4BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(void *)a3 = a1;
  *(double *)(a3 + 8) = a4;
  uint64_t v5 = a3 + *(int *)(type metadata accessor for ClockWidgetAccentableForegroundColor(0) + 24);
  uint64_t v6 = sub_10008A260();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a2, v6);
}

uint64_t sub_10004A544(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004A5AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for WorldClockWidgetViewMulti(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB5A0);
}

uint64_t type metadata accessor for MediumWorldClockView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB5F0);
}

uint64_t type metadata accessor for SmallMultiWorldClockView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB5E0);
}

uint64_t type metadata accessor for PlaceholderViewMulti(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB5C0);
}

uint64_t sub_10004A694(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004A6DC()
{
  unint64_t result = qword_1000A5EB0;
  if (!qword_1000A5EB0)
  {
    sub_10000B798(&qword_1000A5E98);
    type metadata accessor for SmallMultiWorldClockView(255);
    sub_10004A694(&qword_1000A5EB8, (void (*)(uint64_t))type metadata accessor for SmallMultiWorldClockView);
    swift_getOpaqueTypeConformance2();
    type metadata accessor for MediumWorldClockView(255);
    sub_10004A694(&qword_1000A5EC0, (void (*)(uint64_t))type metadata accessor for MediumWorldClockView);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5EB0);
  }
  return result;
}

uint64_t sub_10004A814()
{
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10004A84C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10004A8B0()
{
  unint64_t result = qword_1000A5F48;
  if (!qword_1000A5F48)
  {
    sub_10000B798(&qword_1000A5F10);
    sub_10001845C(&qword_1000A5F50, &qword_1000A5F08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5F48);
  }
  return result;
}

uint64_t sub_10004A950@<X0>(uint64_t a1@<X8>)
{
  return sub_10004A968(type metadata accessor for ClockText, a1);
}

uint64_t sub_10004A968@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return sub_100049F18(v2 + *(int *)(v4 + 20), a2, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
}

uint64_t sub_10004A9BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003E768(type metadata accessor for ClockText, a1);
}

uint64_t sub_10004A9D4()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockText(0) + 28));
}

uint64_t sub_10004A9F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010008B250, a1);
}

uint64_t sub_10004AA64()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockText(0) + 36));
}

uint64_t sub_10004AA88(char a1)
{
  uint64_t result = type metadata accessor for ClockText(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10004AAB8())(void)
{
  return nullsub_1;
}

uint64_t sub_10004AB00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClockText(0) + 40);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10004AB78(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClockText(0) + 40);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_10004ABF0())(void)
{
  return nullsub_1;
}

uint64_t sub_10004AC38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v65 = a1;
  uint64_t v2 = sub_1000899F0();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&KeyPath - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&KeyPath - v6;
  uint64_t v8 = sub_10000697C(&qword_1000A6048);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v58 = v10;
  uint64_t v11 = sub_10000697C(&qword_1000A6050);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v59 = (char *)&KeyPath - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000697C(&qword_1000A6058) - 8;
  __chkstk_darwin(v63);
  uint64_t v62 = (uint64_t)&KeyPath - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(&qword_1000A6060);
  __chkstk_darwin(v15 - 8);
  uint64_t v64 = (uint64_t)&KeyPath - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v1;
  sub_10004B1EC(v1, (uint64_t)v10);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = type metadata accessor for ClockText(0);
  double v18 = (void *)(v1 + *(int *)(v17 + 24));
  uint64_t v20 = v18[3];
  uint64_t v19 = v18[4];
  sub_10005CC44(v18, v20);
  sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010008B250, (uint64_t)v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 200))(v4, v20, v19);
  uint64_t v21 = v60;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v60 + 8);
  uint64_t v23 = v4;
  uint64_t v24 = v61;
  v22(v23, v61);
  uint64_t v25 = (uint64_t)v59;
  uint64_t v26 = (uint64_t *)&v59[*(int *)(v12 + 44)];
  uint64_t v27 = sub_10000697C(&qword_1000A5000);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)v26 + *(int *)(v27 + 28), v7, v24);
  *uint64_t v26 = KeyPath;
  uint64_t v28 = (uint64_t)v58;
  sub_10000F148((uint64_t)v58, v25, &qword_1000A6048);
  v22(v7, v24);
  sub_10000F024(v28, &qword_1000A6048);
  char v29 = *(unsigned char *)(v57 + *(int *)(v17 + 44) + 8);
  uint64_t v30 = swift_retain();
  sub_1000338E8(v30, v29);
  swift_release();
  LOBYTE(v28) = sub_100086B70();
  swift_release();
  uint64_t v31 = v18[3];
  uint64_t v32 = v18[4];
  sub_10005CC44(v18, v31);
  (*(void (**)(uint64_t, uint64_t))(v32 + 24))(v31, v32);
  double v34 = 0.256;
  if (v28) {
    double v34 = 0.298;
  }
  double v35 = v33 * v34;
  uint64_t v36 = swift_retain();
  sub_1000338E8(v36, v29);
  swift_release();
  BOOL v37 = sub_100086B70();
  swift_release();
  uint64_t v38 = v18[3];
  uint64_t v39 = v18[4];
  sub_10005CC44(v18, v38);
  (*(void (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);
  double v41 = 0.252;
  if (v37) {
    double v41 = 0.295;
  }
  double v42 = v40 * v41;
  char v43 = sub_100089B90();
  uint64_t v44 = v62;
  sub_10000F148(v25, v62, &qword_1000A6050);
  uint64_t v45 = v44 + *(int *)(v63 + 44);
  *(unsigned char *)uint64_t v45 = v43;
  *(double *)(v45 + 8) = v35;
  *(void *)(v45 + 16) = 0;
  *(double *)(v45 + 24) = v42;
  *(void *)(v45 + 32) = 0;
  *(unsigned char *)(v45 + 40) = 0;
  sub_10000F024(v25, &qword_1000A6050);
  uint64_t v46 = v18[3];
  uint64_t v47 = v18[4];
  sub_10005CC44(v18, v46);
  double v48 = (*(double (**)(uint64_t, uint64_t))(v47 + 24))(v46, v47);
  uint64_t v49 = v18[3];
  uint64_t v50 = v18[4];
  sub_10005CC44(v18, v49);
  double v51 = (*(double (**)(uint64_t, uint64_t))(v50 + 24))(v49, v50);
  uint64_t v52 = sub_10008A1B0();
  uint64_t v53 = v64;
  sub_1000364B4(0.0, 1, 0.0, 1, v48, 0, 0.0, 1, v64, 0.0, 1, v51, 0, v52, v54, &qword_1000A6058, &qword_1000A6060);
  sub_10000F024(v44, &qword_1000A6058);
  return sub_100027078(v53, v65, &qword_1000A6060);
}

uint64_t sub_10004B1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v26[1] = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A7288);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A7638);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A7278);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for ClockText(0);
  char v13 = *(unsigned char *)(a1 + *(int *)(v12 + 44) + 8);
  uint64_t v14 = swift_retain();
  sub_1000338E8(v14, v13);
  swift_release();
  BOOL v15 = sub_100086C00();
  swift_release();
  if (v15)
  {
    uint64_t *v11 = sub_10008A1B0();
    v11[1] = v16;
    uint64_t v17 = sub_10000697C(&qword_1000A7648);
    sub_10004B528(a1, (uint64_t)v11 + *(int *)(v17 + 44));
    double v18 = &qword_1000A7278;
    sub_10000F148((uint64_t)v11, (uint64_t)v8, &qword_1000A7278);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A7270, &qword_1000A7278);
    sub_10006F174();
    sub_100089AB0();
    uint64_t v19 = (uint64_t)v11;
  }
  else
  {
    *(void *)uint64_t v5 = sub_100089A00();
    *((void *)v5 + 1) = 0;
    v5[16] = 1;
    uint64_t v20 = sub_10000697C(&qword_1000A7640);
    sub_10004CDD8(a1, (uint64_t)&v5[*(int *)(v20 + 44)]);
    uint64_t v21 = a1 + *(int *)(v12 + 40);
    uint64_t v22 = &v5[*(int *)(v3 + 36)];
    uint64_t v23 = &v22[*(int *)(type metadata accessor for ClockWidgetAccentableOpacity(0) + 24)];
    uint64_t v24 = sub_10008A260();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, v21, v24);
    *(_OWORD *)uint64_t v22 = xmmword_100099820;
    double v18 = &qword_1000A7288;
    sub_10000F148((uint64_t)v5, (uint64_t)v8, &qword_1000A7288);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A7270, &qword_1000A7278);
    sub_10006F174();
    sub_100089AB0();
    uint64_t v19 = (uint64_t)v5;
  }
  return sub_10000F024(v19, v18);
}

uint64_t sub_10004B528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A7650);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v36 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v9 = sub_10000697C(&qword_1000A7658);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v35 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v34 = a1;
  sub_10004B7DC((uint64_t)&v34 - v13);
  uint64_t v15 = a1 + *(int *)(type metadata accessor for ClockText(0) + 40);
  uint64_t v16 = &v14[*(int *)(v10 + 44)];
  uint64_t v17 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  double v18 = &v16[*(int *)(v17 + 24)];
  uint64_t v19 = sub_10008A260();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
  v20(v18, v15, v19);
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)uint64_t v16 = _Q0;
  *(void *)uint64_t v8 = sub_100089A00();
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  uint64_t v26 = sub_10000697C(&qword_1000A7660);
  sub_10004BCBC(v34, (uint64_t)&v8[*(int *)(v26 + 44)]);
  uint64_t v27 = &v8[*(int *)(v4 + 44)];
  v20(&v27[*(int *)(v17 + 24)], v15, v19);
  *(_OWORD *)uint64_t v27 = xmmword_100099820;
  uint64_t v28 = v35;
  sub_10000F148((uint64_t)v14, v35, &qword_1000A7658);
  uint64_t v29 = v36;
  sub_10000F148((uint64_t)v8, v36, &qword_1000A7650);
  uint64_t v30 = v37;
  sub_10000F148(v28, v37, &qword_1000A7658);
  uint64_t v31 = sub_10000697C(&qword_1000A7668);
  uint64_t v32 = v30 + *(int *)(v31 + 48);
  *(void *)uint64_t v32 = 0;
  *(unsigned char *)(v32 + 8) = 1;
  sub_10000F148(v29, v30 + *(int *)(v31 + 64), &qword_1000A7650);
  sub_10000F024((uint64_t)v8, &qword_1000A7650);
  sub_10000F024((uint64_t)v14, &qword_1000A7658);
  sub_10000F024(v29, &qword_1000A7650);
  return sub_10000F024(v28, &qword_1000A7658);
}

uint64_t sub_10004B7DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v56 = a1;
  uint64_t v3 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A6068);
  __chkstk_darwin(v6 - 8);
  uint64_t v55 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ClockText(0);
  uint64_t v54 = v1 + *(int *)(v8 + 20);
  sub_100083900((uint64_t)v5);
  uint64_t v9 = sub_100089580();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 0, 1, v9);
  uint64_t v10 = sub_100089D90();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  sub_10004D718((uint64_t (*)(uint64_t))sub_100015BC8);
  uint64_t v51 = sub_100089D70();
  uint64_t v52 = v15;
  uint64_t v17 = v16;
  char v19 = v18;
  swift_release();
  sub_10000B7E0(v10, v12, v14);
  swift_bridgeObjectRelease();
  uint64_t v53 = v8;
  uint64_t v20 = v2;
  if (*(unsigned char *)(v2 + *(int *)(v8 + 36)) == 1) {
    sub_100032CE8();
  }
  else {
    sub_100032DE8();
  }
  char v21 = v19 & 1;
  swift_retain();
  uint64_t v22 = v51;
  uint64_t v23 = sub_100089DB0();
  uint64_t v25 = v24;
  char v27 = v26;
  uint64_t v50 = v28;
  swift_release();
  char v29 = v27 & 1;
  sub_10000B7E0(v22, v17, v21);
  swift_bridgeObjectRelease();
  uint64_t v30 = (void *)(v20 + *(int *)(v53 + 24));
  uint64_t v31 = v30[3];
  uint64_t v32 = v30[4];
  sub_10005CC44(v30, v31);
  double v33 = (*(double (**)(uint64_t, uint64_t))(v32 + 24))(v31, v32) * 0.78;
  uint64_t v34 = v30[3];
  uint64_t v35 = v30[4];
  sub_10005CC44(v30, v34);
  double v36 = (*(double (**)(uint64_t, uint64_t))(v35 + 24))(v34, v35) * 0.78;
  uint64_t v37 = sub_10008A1B0();
  sub_1000362C0(0.0, 1, 0.0, 1, v33, 0, 0.0, 1, (uint64_t)&v83, 0.0, 1, v36, 0, v37, v38, v23, v25, v29, v50);
  sub_10000B7E0(v23, v25, v29);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  char v40 = sub_100089B80();
  char v74 = 1;
  uint64_t v41 = swift_getKeyPath();
  v76[6] = v89;
  v76[7] = v90;
  v76[8] = v91;
  v76[2] = v85;
  v76[3] = v86;
  _OWORD v76[4] = v87;
  v76[5] = v88;
  v76[0] = v83;
  v76[1] = v84;
  LOWORD(v77) = 256;
  *(_DWORD *)((char *)&v77 + 2) = v72;
  WORD3(v77) = v73;
  *((void *)&v77 + 1) = KeyPath;
  *(void *)&long long v78 = 0x3FE3333333333333;
  BYTE8(v78) = v40;
  HIDWORD(v78) = *(_DWORD *)&v75[3];
  *(_DWORD *)((char *)&v78 + 9) = *(_DWORD *)v75;
  long long v79 = 0u;
  long long v80 = 0u;
  LOBYTE(v81) = v74;
  *((void *)&v81 + 1) = v41;
  char v82 = 1;
  long long v69 = 0u;
  long long v70 = v81;
  char v71 = 1;
  long long v65 = v91;
  long long v66 = v77;
  long long v67 = v78;
  long long v68 = 0u;
  long long v61 = v87;
  long long v62 = v88;
  long long v63 = v89;
  long long v64 = v90;
  long long v57 = v83;
  long long v58 = v84;
  long long v59 = v85;
  long long v60 = v86;
  uint64_t v42 = type metadata accessor for WidgetUtilities();
  uint64_t v43 = type metadata accessor for WorldClockCity();
  uint64_t v44 = (*(uint64_t (**)(void, void))(v42 + 120))(*(void *)(v54 + *(int *)(v43 + 32)), *(void *)(v54 + *(int *)(v43 + 32) + 8));
  uint64_t v46 = v45;
  LOBYTE(v34) = v47 & 1;
  sub_10000697C(&qword_1000A6070);
  sub_10005CC88();
  uint64_t v48 = (uint64_t)v55;
  sub_100089EF0();
  sub_10000B7E0(v44, v46, v34);
  swift_bridgeObjectRelease();
  sub_10005CF00((uint64_t)v76);
  return sub_100027078(v48, v56, &qword_1000A6068);
}

uint64_t sub_10004BCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A6128);
  __chkstk_darwin(v3 - 8);
  uint64_t v68 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000697C(&qword_1000A7670);
  __chkstk_darwin(v67);
  uint64_t v70 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v69 = (uint64_t)&v66 - v7;
  uint64_t v8 = sub_10000697C(&qword_1000A7678);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v72 = (uint64_t)&v66 - v12;
  uint64_t v13 = sub_10000697C(&qword_1000A60E0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000697C(&qword_1000A7680);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v71 = (uint64_t)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  char v21 = (char *)&v66 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v66 - v23;
  sub_10004C2B8((uint64_t)v15);
  char v25 = sub_100089BB0();
  uint64_t v26 = *(int *)(type metadata accessor for ClockText(0) + 24);
  uint64_t v66 = a1;
  char v27 = (void *)(a1 + v26);
  uint64_t v28 = *(void *)(a1 + v26 + 24);
  uint64_t v29 = *(void *)(a1 + v26 + 32);
  sub_10005CC44((void *)(a1 + v26), v28);
  (*(void (**)(uint64_t, uint64_t))(v29 + 24))(v28, v29);
  uint64_t v30 = v27[3];
  uint64_t v31 = v27[4];
  sub_10005CC44(v27, v30);
  (*(void (**)(uint64_t, uint64_t))(v31 + 192))(v30, v31);
  sub_100089690();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  sub_10000F148((uint64_t)v15, (uint64_t)v21, &qword_1000A60E0);
  char v40 = &v21[*(int *)(v17 + 44)];
  *char v40 = v25;
  *((void *)v40 + 1) = v33;
  *((void *)v40 + 2) = v35;
  *((void *)v40 + 3) = v37;
  *((void *)v40 + 4) = v39;
  v40[40] = 0;
  sub_10000F024((uint64_t)v15, &qword_1000A60E0);
  sub_100027078((uint64_t)v21, (uint64_t)v24, &qword_1000A7680);
  uint64_t v41 = v27[3];
  uint64_t v42 = v27[4];
  sub_10005CC44(v27, v41);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v42 + 192))(v41, v42))
  {
    uint64_t v43 = v68;
    sub_10004C884(v68);
    char v44 = sub_100089BA0();
    uint64_t v45 = v27[3];
    uint64_t v46 = v27[4];
    sub_10005CC44(v27, v45);
    (*(void (**)(uint64_t, uint64_t))(v46 + 24))(v45, v46);
    sub_100089690();
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    uint64_t v55 = v70;
    sub_10000F148(v43, v70, &qword_1000A6128);
    uint64_t v56 = v55 + *(int *)(v67 + 36);
    *(unsigned char *)uint64_t v56 = v44;
    *(void *)(v56 + 8) = v48;
    *(void *)(v56 + 16) = v50;
    *(void *)(v56 + 24) = v52;
    *(void *)(v56 + 32) = v54;
    *(unsigned char *)(v56 + 40) = 0;
    sub_10000F024(v43, &qword_1000A6128);
    uint64_t v57 = v69;
    sub_100027078(v55, v69, &qword_1000A7670);
    sub_10000F148(v57, v55, &qword_1000A7670);
    *(void *)uint64_t v10 = 0;
    v10[8] = 1;
    uint64_t v58 = sub_10000697C(&qword_1000A7698);
    sub_10000F148(v55, (uint64_t)&v10[*(int *)(v58 + 48)], &qword_1000A7670);
    sub_10000F024(v57, &qword_1000A7670);
    sub_10000F024(v55, &qword_1000A7670);
    uint64_t v59 = sub_10000697C(&qword_1000A7688);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v10, 0, 1, v59);
    uint64_t v60 = v72;
    sub_100027078((uint64_t)v10, v72, &qword_1000A7678);
  }
  else
  {
    uint64_t v61 = sub_10000697C(&qword_1000A7688);
    uint64_t v60 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v72, 1, 1, v61);
  }
  uint64_t v62 = v71;
  sub_10000F148((uint64_t)v24, v71, &qword_1000A7680);
  sub_10000F148(v60, (uint64_t)v10, &qword_1000A7678);
  uint64_t v63 = v73;
  sub_10000F148(v62, v73, &qword_1000A7680);
  uint64_t v64 = sub_10000697C(&qword_1000A7690);
  sub_10000F148((uint64_t)v10, v63 + *(int *)(v64 + 48), &qword_1000A7678);
  sub_10000F024(v60, &qword_1000A7678);
  sub_10000F024((uint64_t)v24, &qword_1000A7680);
  sub_10000F024((uint64_t)v10, &qword_1000A7678);
  return sub_10000F024(v62, &qword_1000A7680);
}

uint64_t sub_10004C2B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v70 = a1;
  uint64_t v3 = sub_1000899F0();
  uint64_t v64 = *(void *)(v3 - 8);
  uint64_t v65 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A60E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = (int *)type metadata accessor for ClockText(0);
  uint64_t v8 = v1 + v71[5];
  uint64_t v66 = v8;
  uint64_t v67 = type metadata accessor for WorldClockCity();
  uint64_t v9 = (void *)(v8 + *(int *)(v67 + 28));
  uint64_t v10 = v9[1];
  *(void *)&v88[0] = *v9;
  *((void *)&v88[0] + 1) = v10;
  unint64_t v68 = sub_100032F54();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_100089E40();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  sub_10004D718((uint64_t (*)(uint64_t))sub_1000158A8);
  uint64_t v61 = sub_100089D70();
  uint64_t v62 = v16;
  uint64_t v18 = v17;
  char v20 = v19;
  swift_release();
  sub_10000B7E0(v11, v13, v15);
  swift_bridgeObjectRelease();
  uint64_t v21 = v71[6];
  uint64_t v63 = v2;
  uint64_t v22 = *(void *)(v2 + v21 + 24);
  uint64_t v23 = *(void *)(v2 + v21 + 32);
  sub_10005CC44((void *)(v2 + v21), v22);
  sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010008B250, (uint64_t)v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 208))(v5, v22, v23);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v5, v65);
  uint64_t v24 = v61;
  uint64_t v25 = sub_100089DB0();
  uint64_t v27 = v26;
  LOBYTE(v22) = v28;
  swift_release();
  LOBYTE(v10) = v22 & 1;
  sub_10000B7E0(v24, v18, v20 & 1);
  swift_bridgeObjectRelease();
  sub_100089C60();
  uint64_t v29 = sub_100089D60();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  char v35 = v34 & 1;
  sub_10000B7E0(v25, v27, v10);
  swift_bridgeObjectRelease();
  uint64_t v36 = v63 + v71[11];
  LOBYTE(v25) = *(unsigned char *)(v36 + 8);
  uint64_t v37 = swift_retain();
  sub_1000338E8(v37, v25);
  swift_release();
  LOBYTE(v10) = sub_100086C00();
  swift_release();
  if (v10) {
    double v38 = INFINITY;
  }
  else {
    double v38 = 17.0;
  }
  uint64_t v39 = sub_10008A1B0();
  sub_1000362C0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)&v95, 0.0, 1, v38, 0, v39, v40, v29, v31, v35, v33);
  sub_10000B7E0(v29, v31, v35);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  char v42 = *(unsigned char *)(v36 + 8);
  uint64_t v43 = swift_retain();
  sub_1000338E8(v43, v42);
  swift_release();
  BOOL v44 = sub_100086C00();
  swift_release();
  double v45 = 1.0;
  if (v44) {
    double v46 = 0.8;
  }
  else {
    double v46 = 1.0;
  }
  char v94 = 0;
  sub_10008A1E0();
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v51 = swift_retain();
  sub_1000338E8(v51, v42);
  swift_release();
  BOOL v52 = sub_100086C00();
  swift_release();
  if (!v52) {
    double v45 = 0.6;
  }
  char v53 = v94;
  uint64_t v54 = swift_getKeyPath();
  v88[6] = v101;
  v88[7] = v102;
  v88[8] = v103;
  v88[2] = v97;
  v88[3] = v98;
  v88[4] = v99;
  v88[5] = v100;
  v88[0] = v95;
  v88[1] = v96;
  *(void *)&long long v89 = KeyPath;
  *((void *)&v89 + 1) = 1;
  LOBYTE(v90) = v53;
  *((double *)&v90 + 1) = v46;
  *(double *)&long long v91 = v46;
  *((void *)&v91 + 1) = v48;
  *(void *)&long long v92 = v50;
  *((void *)&v92 + 1) = v54;
  double v93 = v45;
  long long v78 = v99;
  long long v79 = v100;
  long long v76 = v97;
  long long v77 = v98;
  long long v82 = v103;
  long long v83 = v89;
  long long v80 = v101;
  long long v81 = v102;
  double v87 = v45;
  long long v85 = v91;
  long long v86 = v92;
  long long v84 = v90;
  long long v74 = v95;
  long long v75 = v96;
  uint64_t v55 = (uint64_t *)(v66 + *(int *)(v67 + 24));
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  uint64_t v72 = v57;
  uint64_t v73 = v56;
  sub_10000697C(&qword_1000A60E8);
  sub_10005CF60();
  uint64_t v58 = (uint64_t)v69;
  sub_100089F00();
  sub_10005D160((uint64_t)v88);
  return sub_100027078(v58, v70, &qword_1000A60E0);
}

uint64_t sub_10004C884@<X0>(uint64_t a1@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v2 = sub_1000899F0();
  uint64_t v58 = *(void *)(v2 - 8);
  uint64_t v59 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t)&v53[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10000697C(&qword_1000A6128);
  __chkstk_darwin(v5 - 8);
  uint64_t v62 = &v53[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v64 = (int *)type metadata accessor for ClockText(0);
  uint64_t v60 = v1 + v64[5];
  sub_100083A28(1);
  *(void *)&long long v77 = v7;
  *((void *)&v77 + 1) = v8;
  unint64_t v61 = sub_100032F54();
  uint64_t v9 = sub_100089E40();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  sub_10004D718((uint64_t (*)(uint64_t))sub_1000158A8);
  uint64_t v14 = sub_100089D70();
  uint64_t v55 = v15;
  uint64_t v56 = v16;
  char v18 = v17;
  swift_release();
  int v54 = v18 & 1;
  sub_10000B7E0(v9, v11, v13);
  swift_bridgeObjectRelease();
  uint64_t v19 = v64[6];
  uint64_t v57 = v1;
  char v20 = (void *)(v1 + v19);
  uint64_t v21 = *(void *)(v1 + v19 + 24);
  uint64_t v22 = *(void *)(v1 + v19 + 32);
  sub_10005CC44((void *)(v57 + v19), *(void *)(v57 + v19 + 24));
  sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010008B250, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 208))(v4, v21, v22);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v4, v59);
  uint64_t v23 = v14;
  uint64_t v24 = v55;
  LOBYTE(v21) = v54;
  uint64_t v25 = sub_100089DB0();
  uint64_t v27 = v26;
  LOBYTE(v4) = v28;
  uint64_t v59 = v29;
  swift_release();
  char v30 = v4 & 1;
  sub_10000B7E0(v23, v24, v21);
  swift_bridgeObjectRelease();
  sub_100089C60();
  uint64_t v31 = sub_100089D60();
  uint64_t v33 = v32;
  char v35 = v34;
  uint64_t v37 = v36;
  sub_10000B7E0(v25, v27, v30);
  swift_bridgeObjectRelease();
  uint64_t v38 = v20[3];
  uint64_t v39 = v20[4];
  sub_10005CC44(v20, v38);
  double v40 = (*(double (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);
  LOBYTE(v38) = *(unsigned char *)(v57 + v64[11] + 8);
  uint64_t v41 = swift_retain();
  sub_1000338E8(v41, v38);
  swift_release();
  BOOL v42 = sub_100086C00();
  swift_release();
  if (v42)
  {
    double v43 = INFINITY;
  }
  else
  {
    uint64_t v44 = v20[3];
    uint64_t v45 = v20[4];
    sub_10005CC44(v20, v44);
    double v43 = (*(double (**)(uint64_t, uint64_t))(v45 + 24))(v44, v45);
  }
  uint64_t v46 = sub_10008A1B0();
  sub_1000362C0(0.0, 1, 0.0, 1, v40, 0, 0.0, 1, (uint64_t)&v77, 0.0, 1, v43, 0, v46, v47, v31, v33, v35 & 1, v37);
  sub_10000B7E0(v31, v33, v35 & 1);
  swift_bridgeObjectRelease();
  v76[6] = v83;
  v76[7] = v84;
  v76[8] = v85;
  v76[2] = v79;
  v76[3] = v80;
  _OWORD v76[4] = v81;
  v76[5] = v82;
  v76[0] = v77;
  v76[1] = v78;
  long long v73 = v83;
  long long v74 = v84;
  long long v75 = v85;
  long long v69 = v79;
  long long v70 = v80;
  long long v71 = v81;
  long long v72 = v82;
  long long v67 = v77;
  long long v68 = v78;
  char v48 = sub_100005184();
  sub_100083A28(v48 & 1);
  uint64_t v65 = v49;
  uint64_t v66 = v50;
  sub_10000697C(&qword_1000A60B8);
  sub_10005CE90(&qword_1000A60B0, &qword_1000A60B8);
  uint64_t v51 = (uint64_t)v62;
  sub_100089F00();
  swift_bridgeObjectRelease();
  sub_10005D1C0((uint64_t)v76);
  return sub_100027078(v51, v63, &qword_1000A6128);
}

uint64_t sub_10004CDD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A6128);
  __chkstk_darwin(v3 - 8);
  uint64_t v91 = (uint64_t)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_10000697C(&qword_1000A7670);
  __chkstk_darwin(v90);
  uint64_t v93 = (uint64_t)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v89 = (uint64_t)&v87 - v7;
  __chkstk_darwin(v8);
  uint64_t v92 = (uint64_t)&v87 - v9;
  uint64_t v10 = sub_10000697C(&qword_1000A7678);
  __chkstk_darwin(v10 - 8);
  long long v97 = (uint64_t *)((char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v96 = (uint64_t)&v87 - v13;
  uint64_t v14 = sub_10000697C(&qword_1000A60E0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000697C(&qword_1000A7680);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000697C(&qword_1000A76A0);
  __chkstk_darwin(v20);
  uint64_t v95 = (uint64_t)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v87 - v23;
  __chkstk_darwin(v25);
  uint64_t v94 = (uint64_t)&v87 - v26;
  sub_10004C2B8((uint64_t)v16);
  char v27 = sub_100089BA0();
  uint64_t v87 = type metadata accessor for ClockText(0);
  uint64_t v88 = a1;
  char v28 = (void *)(a1 + *(int *)(v87 + 24));
  uint64_t v30 = v28[3];
  uint64_t v29 = v28[4];
  sub_10005CC44(v28, v30);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v29 + 192))(v30, v29))
  {
    uint64_t v31 = v28[3];
    uint64_t v32 = v28[4];
    sub_10005CC44(v28, v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 24))(v31, v32);
  }
  sub_100089690();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_10000F148((uint64_t)v16, (uint64_t)v19, &qword_1000A60E0);
  uint64_t v41 = &v19[*(int *)(v17 + 36)];
  *uint64_t v41 = v27;
  *((void *)v41 + 1) = v34;
  *((void *)v41 + 2) = v36;
  *((void *)v41 + 3) = v38;
  *((void *)v41 + 4) = v40;
  v41[40] = 0;
  sub_10000F024((uint64_t)v16, &qword_1000A60E0);
  char v42 = sub_100089BB0();
  uint64_t v43 = v28[3];
  uint64_t v44 = v28[4];
  sub_10005CC44(v28, v43);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v44 + 192))(v43, v44) & 1) == 0)
  {
    uint64_t v45 = v28[3];
    uint64_t v46 = v28[4];
    sub_10005CC44(v28, v45);
    (*(void (**)(uint64_t, uint64_t))(v46 + 24))(v45, v46);
  }
  sub_100089690();
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  sub_10000F148((uint64_t)v19, (uint64_t)v24, &qword_1000A7680);
  uint64_t v55 = &v24[*(int *)(v20 + 36)];
  char *v55 = v42;
  *((void *)v55 + 1) = v48;
  *((void *)v55 + 2) = v50;
  *((void *)v55 + 3) = v52;
  *((void *)v55 + 4) = v54;
  v55[40] = 0;
  sub_10000F024((uint64_t)v19, &qword_1000A7680);
  uint64_t v56 = v94;
  sub_100027078((uint64_t)v24, v94, &qword_1000A76A0);
  uint64_t v57 = v28[3];
  uint64_t v58 = v28[4];
  sub_10005CC44(v28, v57);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v58 + 192))(v57, v58))
  {
    uint64_t v59 = v91;
    uint64_t v60 = v88;
    sub_10004C884(v91);
    char v61 = sub_100089BA0();
    uint64_t v62 = v28[3];
    uint64_t v63 = v28[4];
    sub_10005CC44(v28, v62);
    (*(void (**)(uint64_t, uint64_t))(v63 + 24))(v62, v63);
    LOBYTE(v62) = *(unsigned char *)(v60 + *(int *)(v87 + 44) + 8);
    uint64_t v64 = swift_retain();
    sub_1000338E8(v64, v62);
    swift_release();
    sub_100086B70();
    swift_release();
    sub_100089690();
    uint64_t v66 = v65;
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    uint64_t v73 = v89;
    sub_10000F148(v59, v89, &qword_1000A6128);
    uint64_t v74 = v73 + *(int *)(v90 + 36);
    *(unsigned char *)uint64_t v74 = v61;
    *(void *)(v74 + 8) = v66;
    *(void *)(v74 + 16) = v68;
    *(void *)(v74 + 24) = v70;
    *(void *)(v74 + 32) = v72;
    *(unsigned char *)(v74 + 40) = 0;
    sub_10000F024(v59, &qword_1000A6128);
    uint64_t v75 = v73;
    uint64_t v76 = v92;
    sub_100027078(v75, v92, &qword_1000A7670);
    uint64_t v77 = v93;
    sub_10000F148(v76, v93, &qword_1000A7670);
    uint64_t v78 = (uint64_t)v97;
    void *v97 = 0;
    *(unsigned char *)(v78 + 8) = 1;
    uint64_t v79 = sub_10000697C(&qword_1000A7698);
    sub_10000F148(v77, v78 + *(int *)(v79 + 48), &qword_1000A7670);
    sub_10000F024(v76, &qword_1000A7670);
    sub_10000F024(v77, &qword_1000A7670);
    uint64_t v80 = sub_10000697C(&qword_1000A7688);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v78, 0, 1, v80);
    uint64_t v81 = v96;
    sub_100027078(v78, v96, &qword_1000A7678);
  }
  else
  {
    uint64_t v82 = sub_10000697C(&qword_1000A7688);
    uint64_t v81 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v96, 1, 1, v82);
    uint64_t v78 = (uint64_t)v97;
  }
  uint64_t v83 = v95;
  sub_10000F148(v56, v95, &qword_1000A76A0);
  sub_10000F148(v81, v78, &qword_1000A7678);
  uint64_t v84 = v98;
  sub_10000F148(v83, v98, &qword_1000A76A0);
  uint64_t v85 = sub_10000697C(&qword_1000A76A8);
  sub_10000F148(v78, v84 + *(int *)(v85 + 48), &qword_1000A7678);
  sub_10000F024(v81, &qword_1000A7678);
  sub_10000F024(v56, &qword_1000A76A0);
  sub_10000F024(v78, &qword_1000A7678);
  return sub_10000F024(v83, &qword_1000A76A0);
}

uint64_t sub_10004D58C()
{
  return sub_10004D718((uint64_t (*)(uint64_t))sub_1000158A8);
}

uint64_t sub_10004D5A4()
{
  uint64_t v1 = sub_1000899F0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (void *)(v0 + *(int *)(type metadata accessor for ClockText(0) + 24));
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  sub_10005CC44(v5, v6);
  sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010008B250, (uint64_t)v4);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 208))(v4, v6, v7);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t sub_10004D700()
{
  return sub_10004D718((uint64_t (*)(uint64_t))sub_100015BC8);
}

uint64_t sub_10004D718(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = type metadata accessor for ClockText(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10008A260();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008A240();
  char v10 = sub_10008A220();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v7 + 8);
  v11(v9, v6);
  if (v10) {
    return sub_10008A000();
  }
  sub_10008A230();
  char v13 = sub_10008A220();
  v11(v9, v6);
  sub_100049F18((uint64_t)v1, (uint64_t)v5, type metadata accessor for ClockText);
  if (v13)
  {
    char v14 = v5[*(int *)(v3 + 36)];
    sub_100049F80((uint64_t)v5, type metadata accessor for ClockText);
    if (v14) {
      goto LABEL_9;
    }
  }
  else
  {
    sub_100049F80((uint64_t)v5, type metadata accessor for ClockText);
  }
  if (v1[*(int *)(v3 + 36)] != 1)
  {
LABEL_9:
    uint64_t v15 = 0;
    return a1(v15);
  }
  uint64_t v15 = *v1;
  return a1(v15);
}

uint64_t sub_10004D920()
{
  if (*(unsigned char *)(v0 + *(int *)(type metadata accessor for ClockText(0) + 36)) == 1) {
    sub_100032CE8();
  }
  else {
    sub_100032DE8();
  }

  return swift_retain();
}

uint64_t sub_10004D970@<X0>(uint64_t a1@<X8>)
{
  return sub_10004D99C(type metadata accessor for Clock, (uint64_t (*)(void))&type metadata accessor for TimeZone, a1);
}

uint64_t sub_10004D99C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v8(a3, v6, v7);
}

uint64_t sub_10004DA2C@<X0>(uint64_t a1@<X8>)
{
  return sub_10003E768(type metadata accessor for Clock, a1);
}

uint64_t sub_10004DA44()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 28));
}

uint64_t sub_10004DA68(char a1)
{
  uint64_t result = type metadata accessor for Clock(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10004DA98())(void)
{
  return nullsub_1;
}

uint64_t sub_10004DAE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Clock(0);
  return sub_10000F148(v1 + *(int *)(v3 + 32), a1, &qword_1000A47F8);
}

uint64_t sub_10004DB20()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 36));
}

uint64_t sub_10004DB44(char a1)
{
  uint64_t result = type metadata accessor for Clock(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10004DB74())(void)
{
  return nullsub_1;
}

uint64_t sub_10004DBBC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 40));
}

uint64_t sub_10004DBE0(char a1)
{
  uint64_t result = type metadata accessor for Clock(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_10004DC10())(void)
{
  return nullsub_1;
}

uint64_t sub_10004DC58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Clock(0) + 44);

  return sub_10005D200(v3, a1);
}

uint64_t sub_10004DC9C()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 48));
}

uint64_t sub_10004DCC0(char a1)
{
  uint64_t result = type metadata accessor for Clock(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_10004DCF0())(void)
{
  return nullsub_1;
}

uint64_t sub_10004DD38()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 52));
}

uint64_t sub_10004DD5C(char a1)
{
  uint64_t result = type metadata accessor for Clock(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_10004DD8C())(void)
{
  return nullsub_1;
}

uint64_t sub_10004DDD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Clock(0) + 56);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10004DE50(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Clock(0) + 56);
  uint64_t v4 = sub_10008A260();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_10004DEC8())(void)
{
  return nullsub_1;
}

uint64_t sub_10004DF10()
{
  return sub_1000896B0();
}

uint64_t sub_10004DF80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v2 = sub_1000899E0();
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  __chkstk_darwin(v2);
  uint64_t v71 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v70 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100089B10();
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v69 = v6;
  __chkstk_darwin(v6);
  uint64_t v64 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A6130);
  __chkstk_darwin(v8 - 8);
  char v10 = (uint64_t *)((char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10000697C(&qword_1000A6138);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000697C(&qword_1000A6140);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000697C(&qword_1000A6148);
  __chkstk_darwin(v61);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000697C(&qword_1000A6150);
  uint64_t v67 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v60 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000697C(&qword_1000A6158);
  __chkstk_darwin(v66);
  uint64_t v62 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v63 = (char *)&v57 - v22;
  *(void *)uint64_t v16 = sub_100089A00();
  *((void *)v16 + 1) = 0;
  v16[16] = 1;
  uint64_t v58 = &v16[*(int *)(sub_10000697C(&qword_1000A6160) + 44)];
  uint64_t *v10 = sub_10008A1B0();
  v10[1] = v23;
  uint64_t v24 = (uint64_t)v10 + *(int *)(sub_10000697C(&qword_1000A6168) + 44);
  uint64_t v59 = v1;
  sub_10004E734(v1, v24);
  uint64_t v25 = type metadata accessor for Clock(0);
  uint64_t v26 = (void *)(v1 + *(int *)(v25 + 24));
  uint64_t v28 = v26[3];
  uint64_t v27 = v26[4];
  sub_10005CC44(v26, v28);
  double v29 = (*(double (**)(uint64_t, uint64_t))(v27 + 24))(v28, v27);
  uint64_t v31 = v26[3];
  uint64_t v30 = v26[4];
  sub_10005CC44(v26, v31);
  double v32 = (*(double (**)(uint64_t, uint64_t))(v30 + 24))(v31, v30);
  uint64_t v33 = sub_10008A1B0();
  sub_1000364B4(0.0, 1, 0.0, 1, v29, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, v32, 0, v33, v34, &qword_1000A6130, &qword_1000A6138);
  sub_10000F024((uint64_t)v10, &qword_1000A6130);
  sub_100027078((uint64_t)v13, (uint64_t)v58, &qword_1000A6138);
  sub_10008A1B0();
  sub_100089720();
  sub_10000F148((uint64_t)v16, (uint64_t)v18, &qword_1000A6140);
  uint64_t v35 = v61;
  uint64_t v36 = &v18[*(int *)(v61 + 36)];
  long long v37 = v78;
  *(_OWORD *)uint64_t v36 = v77;
  *((_OWORD *)v36 + 1) = v37;
  *((_OWORD *)v36 + 2) = v79;
  sub_10000F024((uint64_t)v16, &qword_1000A6140);
  uint64_t v38 = v64;
  sub_100089AF0();
  unint64_t v39 = sub_10005D210();
  uint64_t v40 = v60;
  uint64_t v41 = v35;
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v38, v69);
  sub_10000F024((uint64_t)v18, &qword_1000A6148);
  uint64_t v42 = v59 + *(int *)(v25 + 20);
  uint64_t v43 = sub_100089580();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v70, v42, v43);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
  uint64_t v46 = sub_100089D50();
  uint64_t v48 = v47;
  LOBYTE(v35) = v49 & 1;
  uint64_t v75 = v41;
  unint64_t v76 = v39;
  swift_getOpaqueTypeConformance2();
  uint64_t v50 = (uint64_t)v62;
  uint64_t v51 = v65;
  sub_100089EF0();
  sub_10000B7E0(v46, v48, v35);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v40, v51);
  uint64_t v52 = v71;
  sub_1000899C0();
  uint64_t v53 = (uint64_t)v63;
  sub_100089770();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v52, v73);
  sub_10000F024(v50, &qword_1000A6158);
  uint64_t v54 = v74;
  sub_10000F148(v53, v74, &qword_1000A6158);
  uint64_t v55 = v54 + *(int *)(sub_10000697C(&qword_1000A6180) + 36);
  *(void *)uint64_t v55 = 0;
  *(unsigned char *)(v55 + 8) = 0;
  return sub_10000F024(v53, &qword_1000A6158);
}

uint64_t sub_10004E734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v302 = a2;
  uint64_t v3 = sub_10000697C(&qword_1000A7598);
  __chkstk_darwin(v3 - 8);
  uint64_t v297 = (uint64_t)&v243 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v293 = sub_10008A260();
  uint64_t v292 = *(void *)(v293 - 8);
  __chkstk_darwin(v293);
  uint64_t v254 = (char *)&v243 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v304 = (int *)type metadata accessor for Clock(0);
  __chkstk_darwin(v304);
  uint64_t v298 = (uint64_t)&v243 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v272 = sub_10000697C(&qword_1000A75A0);
  __chkstk_darwin(v272);
  long long v295 = (char *)&v243 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v270 = sub_100089580();
  uint64_t v269 = *(void *)(v270 - 8);
  __chkstk_darwin(v270);
  uint64_t v277 = (char *)&v243 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v288 = sub_10000697C(&qword_1000A75A8);
  uint64_t v286 = *(void *)(v288 - 8);
  __chkstk_darwin(v288);
  uint64_t v257 = (char *)&v243 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v273 = (uint64_t)&v243 - v11;
  uint64_t v12 = sub_10000697C(&qword_1000A75B0);
  __chkstk_darwin(v12 - 8);
  long long v299 = (char *)&v243 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v296 = (uint64_t)&v243 - v15;
  uint64_t v291 = sub_10000697C(&qword_1000A75B8);
  __chkstk_darwin(v291);
  uint64_t v266 = (char *)&v243 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v282 = sub_10000697C(&qword_1000A75C0);
  uint64_t v294 = *(void *)(v282 - 8);
  __chkstk_darwin(v282);
  uint64_t v255 = (char *)&v243 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v256 = (char *)&v243 - v19;
  __chkstk_darwin(v20);
  uint64_t v265 = (char *)&v243 - v21;
  __chkstk_darwin(v22);
  uint64_t v276 = (char *)&v243 - v23;
  uint64_t v281 = sub_10008A350();
  uint64_t v285 = *(void *)(v281 - 8);
  __chkstk_darwin(v281);
  long long v267 = (double *)((char *)&v243 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  uint64_t v268 = (char *)&v243 - v26;
  __chkstk_darwin(v27);
  uint64_t v271 = (char *)&v243 - v28;
  uint64_t v260 = sub_10000697C(&qword_1000A6188);
  __chkstk_darwin(v260);
  uint64_t v262 = (uint64_t)&v243 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v259 = sub_1000897A0();
  __chkstk_darwin(v259);
  long long v261 = (char *)&v243 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = sub_10000697C(&qword_1000A6190);
  __chkstk_darwin(v263);
  uint64_t v264 = (char *)&v243 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = sub_10000697C(&qword_1000A75C8);
  *(void *)&long long v300 = *(void *)(v275 - 8);
  __chkstk_darwin(v275);
  uint64_t v274 = (char *)&v243 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  *(void *)&long long v283 = (char *)&v243 - v34;
  uint64_t v35 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v35 - 8);
  long long v280 = (double *)((char *)&v243 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v289 = sub_10000697C(&qword_1000A75D0);
  __chkstk_darwin(v289);
  uint64_t v290 = (uint64_t)&v243 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v284 = sub_10000697C(&qword_1000A75D8);
  __chkstk_darwin(v284);
  unint64_t v39 = (char *)&v243 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000697C(&qword_1000A75E0);
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v243 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000697C(&qword_1000A75E8);
  __chkstk_darwin(v43);
  uint64_t v45 = (char *)&v243 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000697C(&qword_1000A6198);
  __chkstk_darwin(v46 - 8);
  uint64_t v48 = (char *)&v243 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  uint64_t v51 = (char *)&v243 - v50;
  uint64_t v52 = sub_10000697C(&qword_1000A75F0);
  __chkstk_darwin(v52 - 8);
  uint64_t v54 = (char *)&v243 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  uint64_t v57 = (char *)&v243 - v56;
  uint64_t v58 = sub_1000893C0();
  __chkstk_darwin(v58);
  __chkstk_darwin(v59);
  uint64_t v63 = a1;
  uint64_t v65 = (char *)&v243 - v64;
  if (*(unsigned char *)(v63 + v304[9]))
  {
    uint64_t v66 = sub_10000697C(&qword_1000A7620);
    uint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56);
    uint64_t v68 = v66;
    uint64_t v69 = v302;
    return v67(v69, 1, 1, v68);
  }
  uint64_t v244 = v62;
  uint64_t v247 = v48;
  char v248 = v42;
  uint64_t v249 = v40;
  uint64_t v250 = v39;
  uint64_t v251 = v51;
  uint64_t v252 = v45;
  uint64_t v253 = v43;
  uint64_t v278 = v61;
  long long v301 = v57;
  uint64_t v279 = v60;
  long long v287 = v54;
  uint64_t v71 = v304;
  uint64_t v72 = (void *)(v63 + v304[6]);
  uint64_t v303 = v63;
  uint64_t v74 = v72[3];
  uint64_t v73 = v72[4];
  sub_10005CC44(v72, v74);
  uint64_t v75 = v74;
  uint64_t v76 = v303;
  double v77 = (*(double (**)(uint64_t, uint64_t))(v73 + 24))(v75, v73) * 0.5;
  uint64_t v78 = v76 + v71[11];
  double v79 = *(double *)v78;
  double v80 = *(double *)(v78 + 8);
  double v81 = *(double *)(v78 + 16);
  sub_1000509E0((uint64_t)v65);
  uint64_t v82 = v71[7];
  _ZF = *(unsigned char *)(v76 + v82) == 1;
  uint64_t v258 = v65;
  uint64_t v245 = v72;
  uint64_t v246 = v82;
  if (_ZF)
  {
    uint64_t v84 = (uint64_t)v251;
    sub_100050DF4((uint64_t)v65, (uint64_t)v251);
    sub_100051428((uint64_t)v65, (uint64_t)&v305);
    char v85 = (char)v305;
    unint64_t v86 = v306;
    long long v300 = v307;
    double v87 = v308;
    char v88 = v309;
    long long v283 = v310;
    uint64_t v89 = v311;
    uint64_t v90 = v312;
    uint64_t v91 = (uint64_t)v247;
    sub_10000F148(v84, (uint64_t)v247, &qword_1000A6198);
    uint64_t v92 = (uint64_t)v248;
    sub_10000F148(v91, (uint64_t)v248, &qword_1000A6198);
    uint64_t v93 = v92 + *(int *)(sub_10000697C(&qword_1000A7630) + 48);
    *(unsigned char *)uint64_t v93 = v85;
    *(void *)(v93 + 8) = v86;
    *(_OWORD *)(v93 + 16) = v300;
    *(double *)(v93 + 32) = v87;
    *(unsigned char *)(v93 + 40) = v88;
    *(_OWORD *)(v93 + 48) = v283;
    *(void *)(v93 + 64) = v89;
    *(void *)(v93 + 72) = v90;
    swift_retain();
    sub_10000F024(v91, &qword_1000A6198);
    sub_10000F148(v92, (uint64_t)v250, &qword_1000A75E0);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A7608, &qword_1000A75E0);
    uint64_t v94 = (uint64_t)v252;
    sub_100089AB0();
    sub_10000F024(v92, &qword_1000A75E0);
    sub_10000F148(v94, v290, &qword_1000A75E8);
    swift_storeEnumTagMultiPayload();
    sub_100070EB4();
    sub_10001845C(&qword_1000A7610, &qword_1000A75B8);
    sub_100089AB0();
    sub_10000F024(v94, &qword_1000A75E8);
    swift_release();
    uint64_t v95 = v303;
    sub_10000F024(v84, &qword_1000A6198);
  }
  else
  {
    uint64_t v96 = (void (*)(void, void, void))v280;
    sub_10000F148(v76 + v304[8], (uint64_t)v280, &qword_1000A47F8);
    uint64_t v97 = v278;
    uint64_t v98 = v279;
    int v99 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v278 + 48))(v96, 1, v279);
    if (v99 == 1)
    {
      sub_10000F024((uint64_t)v96, &qword_1000A47F8);
      uint64_t v100 = sub_100051834();
      uint64_t v101 = v72[3];
      uint64_t v102 = v72[4];
      sub_10005CC44(v72, v101);
      double v103 = (*(double (**)(uint64_t, uint64_t))(v102 + 24))(v101, v102);
      uint64_t v104 = v72[3];
      uint64_t v105 = v72[4];
      sub_10005CC44(v72, v104);
      uint64_t v106 = *(double (**)(uint64_t, uint64_t))(v105 + 72);
      swift_retain();
      double v107 = v106(v104, v105);
      char v108 = *(unsigned char *)(v78 + 40);
      uint64_t v109 = *(void *)(v78 + 56);
      char v110 = v261;
      uint64_t v111 = &v261[*(int *)(v259 + 20)];
      uint64_t v112 = enum case for RoundedCornerStyle.continuous(_:);
      uint64_t v113 = sub_1000899B0();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v113 - 8) + 104))(v111, v112, v113);
      __asm { FMOV            V0.2D, #2.0 }
      *char v110 = _Q0;
      uint64_t v118 = v262;
      sub_100049F18((uint64_t)v110, v262, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      *(_WORD *)(v118 + *(int *)(v260 + 36)) = 256;
      uint64_t v119 = (uint64_t)v264;
      sub_10000F148(v118, (uint64_t)&v264[*(int *)(v263 + 36)], &qword_1000A6188);
      *(unsigned char *)uint64_t v119 = 0;
      *(void *)(v119 + 8) = v100;
      *(double *)(v119 + 16) = v107;
      *(void *)(v119 + 24) = 0x3FE0B020C49BA5E3;
      *(double *)(v119 + 32) = v103;
      *(unsigned char *)(v119 + 40) = v108;
      *(void *)(v119 + 48) = v109;
      swift_retain();
      sub_10000F024(v118, &qword_1000A6188);
      sub_100049F80((uint64_t)v110, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      swift_release_n();
      uint64_t v120 = v285;
      long long v280 = *(double **)(v285 + 104);
      uint64_t v121 = v271;
      uint64_t v122 = v281;
      ((void (*)(char *, void, uint64_t))v280)(v271, enum case for _ClockHandRotationEffect.Period.hourHand(_:), v281);
      uint64_t v284 = v303 + v304[5];
      sub_10008A1E0();
      sub_10006F588();
      uint64_t v123 = v274;
      sub_100089E80();
      uint64_t v263 = *(void *)(v120 + 8);
      ((void (*)(char *, uint64_t))v263)(v121, v122);
      sub_10000F024(v119, &qword_1000A6190);
      (*(void (**)(void, char *, uint64_t))(v300 + 32))(v283, v123, v275);
      uint64_t v124 = sub_100051834();
      uint64_t v125 = v72[3];
      uint64_t v126 = v72[4];
      sub_10005CC44(v72, v125);
      double v127 = (*(double (**)(uint64_t, uint64_t))(v126 + 24))(v125, v126);
      uint64_t v128 = v72[3];
      uint64_t v129 = v72[4];
      sub_10005CC44(v72, v128);
      double v130 = (*(double (**)(uint64_t, uint64_t))(v129 + 72))(v128, v129);
      char v131 = *(unsigned char *)(v78 + 40);
      uint64_t v132 = *(void *)(v78 + 56);
      LOBYTE(v305) = 0;
      unint64_t v306 = v124;
      *(double *)&long long v307 = v130;
      *((void *)&v307 + 1) = 0x3FECCCCCCCCCCCCDLL;
      double v308 = v127;
      char v309 = v131;
      *(void *)&long long v310 = v132;
      ((void (*)(char *, void, uint64_t))v280)(v121, enum case for _ClockHandRotationEffect.Period.minuteHand(_:), v122);
      sub_10008A1E0();
      sub_10006F628();
      uint64_t v133 = v265;
      sub_100089E80();
      ((void (*)(char *, uint64_t))v263)(v121, v122);
      swift_release();
      uint64_t v134 = v294;
      uint64_t v135 = v276;
      uint64_t v136 = v282;
      (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v276, v133, v282);
      uint64_t v137 = *(void (**)(char *, char *, uint64_t))(v300 + 16);
      uint64_t v138 = v274;
      uint64_t v139 = v275;
      v137(v274, (char *)v283, v275);
      uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
      v140(v133, v135, v136);
      uint64_t v141 = (uint64_t)v266;
      v137(v266, v138, v139);
      uint64_t v142 = sub_10000697C(&qword_1000A75F8);
      v140((char *)(v141 + *(int *)(v142 + 48)), v133, v136);
      uint64_t v143 = *(void (**)(char *, uint64_t))(v134 + 8);
      v143(v133, v136);
      uint64_t v144 = *(void (**)(char *, uint64_t))(v300 + 8);
      *(void *)&long long v300 = v300 + 8;
      v144(v138, v139);
      sub_10000F148(v141, v290, &qword_1000A75B8);
      swift_storeEnumTagMultiPayload();
      sub_100070EB4();
      sub_10001845C(&qword_1000A7610, &qword_1000A75B8);
      sub_100089AB0();
      sub_10000F024(v141, &qword_1000A75B8);
      v143(v276, v136);
      v144((char *)v283, v139);
      uint64_t v95 = v303;
      uint64_t v145 = v304;
      uint64_t v146 = (uint64_t)v299;
      uint64_t v147 = v296;
      uint64_t v148 = v295;
      goto LABEL_12;
    }
    uint64_t v149 = v244;
    (*(void (**)(uint64_t, void, uint64_t))(v97 + 32))(v244, v96, v98);
    uint64_t v150 = (uint64_t)v251;
    sub_100050DF4(v149, (uint64_t)v251);
    sub_100051428(v149, (uint64_t)&v305);
    char v151 = (char)v305;
    unint64_t v152 = v306;
    long long v300 = v307;
    double v153 = v308;
    char v154 = v309;
    long long v283 = v310;
    uint64_t v155 = v311;
    uint64_t v156 = v312;
    uint64_t v157 = (uint64_t)v247;
    sub_10000F148(v150, (uint64_t)v247, &qword_1000A6198);
    uint64_t v158 = (uint64_t)v248;
    sub_10000F148(v157, (uint64_t)v248, &qword_1000A6198);
    uint64_t v159 = v158 + *(int *)(sub_10000697C(&qword_1000A7630) + 48);
    *(unsigned char *)uint64_t v159 = v151;
    *(void *)(v159 + 8) = v152;
    *(_OWORD *)(v159 + 16) = v300;
    *(double *)(v159 + 32) = v153;
    *(unsigned char *)(v159 + 40) = v154;
    *(_OWORD *)(v159 + 48) = v283;
    *(void *)(v159 + 64) = v155;
    *(void *)(v159 + 72) = v156;
    swift_retain();
    sub_10000F024(v157, &qword_1000A6198);
    uint64_t v160 = v97;
    sub_10000F148(v158, (uint64_t)v250, &qword_1000A75E0);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A7608, &qword_1000A75E0);
    uint64_t v161 = v98;
    uint64_t v162 = (uint64_t)v252;
    sub_100089AB0();
    sub_10000F024(v158, &qword_1000A75E0);
    sub_10000F148(v162, v290, &qword_1000A75E8);
    swift_storeEnumTagMultiPayload();
    sub_100070EB4();
    sub_10001845C(&qword_1000A7610, &qword_1000A75B8);
    sub_100089AB0();
    sub_10000F024(v162, &qword_1000A75E8);
    swift_release();
    uint64_t v95 = v303;
    sub_10000F024(v150, &qword_1000A6198);
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v149, v161);
  }
  uint64_t v146 = (uint64_t)v299;
  uint64_t v147 = v296;
  uint64_t v148 = v295;
  uint64_t v145 = v304;
  uint64_t v134 = v294;
LABEL_12:
  uint64_t v163 = v293;
  uint64_t v164 = v292;
  uint64_t v165 = v298;
  double v166 = v77 * v79;
  double v167 = v77 * v81;
  uint64_t v168 = sub_100051E0C();
  uint64_t v296 = v145[10];
  _ZF = *(unsigned char *)(v95 + v296) == 1;
  *(void *)&long long v300 = v168;
  if (_ZF)
  {
    if (*(unsigned char *)(v95 + v246) != 1)
    {
      int v194 = *(unsigned __int8 *)(v95 + v145[13]);
      sub_100049F18(v95, v165, type metadata accessor for Clock);
      if (v194 == 1)
      {
        uint64_t v195 = v254;
        sub_10008A230();
        char v196 = sub_10008A220();
        (*(void (**)(char *, uint64_t))(v164 + 8))(v195, v163);
        sub_100049F80(v298, type metadata accessor for Clock);
        if (v196)
        {
          uint64_t v197 = sub_10000697C(&qword_1000A7628);
          uint64_t v187 = v273;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v197 - 8) + 56))(v273, 1, 1, v197);
          uint64_t v189 = v288;
          uint64_t v190 = (uint64_t)v287;
          uint64_t v191 = v286;
LABEL_34:
          uint64_t v192 = v296;
          uint64_t v193 = (uint64_t)v301;
LABEL_35:
          sub_100027078(v187, v147, &qword_1000A75A8);
          uint64_t v188 = 0;
          goto LABEL_36;
        }
      }
      else
      {
        sub_100049F80(v165, type metadata accessor for Clock);
      }
      uint64_t v199 = v134;
      uint64_t v200 = sub_1000523D0();
      char v201 = *(unsigned char *)(v95 + v145[15] + 8);
      uint64_t v202 = swift_retain();
      sub_1000338E8(v202, v201);
      swift_release();
      int v203 = sub_100086578();
      swift_release();
      if (v203 == 3) {
        double v204 = 0.93;
      }
      else {
        double v204 = dbl_100099830[v203 == 4];
      }
      uint64_t v205 = v245;
      uint64_t v206 = v245[3];
      uint64_t v207 = v245[4];
      sub_10005CC44(v245, v206);
      double v208 = (*(double (**)(uint64_t, uint64_t))(v207 + 24))(v206, v207);
      uint64_t v209 = v205[3];
      uint64_t v210 = v205[4];
      sub_10005CC44(v205, v209);
      double v211 = (*(double (**)(uint64_t, uint64_t))(v210 + 96))(v209, v210);
      LOBYTE(v305) = 1;
      unint64_t v306 = v200;
      *(double *)&long long v307 = v211;
      *((double *)&v307 + 1) = v204;
      double v308 = v208;
      char v309 = 1;
      *(void *)&long long v310 = 0x3FC3333333333333;
      uint64_t v212 = v285;
      uint64_t v213 = v271;
      uint64_t v214 = v281;
      (*(void (**)(char *, void, uint64_t))(v285 + 104))(v271, enum case for _ClockHandRotationEffect.Period.secondHand(_:), v281);
      sub_10008A1E0();
      unint64_t v215 = sub_10006F628();
      uint64_t v216 = v255;
      sub_100089E80();
      (*(void (**)(char *, uint64_t))(v212 + 8))(v213, v214);
      swift_release();
      uint64_t v217 = v256;
      uint64_t v218 = v282;
      (*(void (**)(char *, char *, uint64_t))(v199 + 32))(v256, v216, v282);
      (*(void (**)(char *, char *, uint64_t))(v199 + 16))(v148, v217, v218);
      swift_storeEnumTagMultiPayload();
      sub_10000697C(&qword_1000A7300);
      sub_10005D64C(&qword_1000A72F8, &qword_1000A7300, (void (*)(void))sub_10006F628);
      long long v305 = &type metadata for Clock.ClockHand;
      unint64_t v306 = v215;
      swift_getOpaqueTypeConformance2();
      uint64_t v219 = (uint64_t)v257;
      uint64_t v95 = v303;
      sub_100089AB0();
      uint64_t v220 = v217;
      uint64_t v221 = v218;
      uint64_t v146 = (uint64_t)v299;
      uint64_t v193 = (uint64_t)v301;
      (*(void (**)(char *, uint64_t))(v199 + 8))(v220, v221);
      uint64_t v222 = sub_10000697C(&qword_1000A7628);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v222 - 8) + 56))(v219, 0, 1, v222);
      uint64_t v187 = v273;
      sub_100027078(v219, v273, &qword_1000A75A8);
      uint64_t v189 = v288;
      uint64_t v190 = (uint64_t)v287;
      uint64_t v191 = v286;
      uint64_t v192 = v296;
      goto LABEL_35;
    }
    uint64_t v298 = sub_1000159E8(1);
    char v169 = *(unsigned char *)(v95 + v145[15] + 8);
    uint64_t v170 = swift_retain();
    sub_1000338E8(v170, v169);
    swift_release();
    int v171 = sub_100086578();
    swift_release();
    if (v171 == 3) {
      double v172 = 0.93;
    }
    else {
      double v172 = dbl_100099830[v171 == 4];
    }
    long long v173 = v245;
    uint64_t v174 = v245[3];
    uint64_t v175 = v245[4];
    sub_10005CC44(v245, v174);
    double v176 = (*(double (**)(uint64_t, uint64_t))(v175 + 24))(v174, v175);
    uint64_t v177 = v173[3];
    uint64_t v178 = v173[4];
    sub_10005CC44(v173, v177);
    double v179 = (*(double (**)(uint64_t, uint64_t))(v178 + 96))(v177, v178);
    sub_100089570();
    int v180 = enum case for _ClockHandRotationEffect.Period.secondHand(_:);
    uint64_t v181 = v285;
    uint64_t v182 = v268;
    uint64_t v183 = v281;
    (*(void (**)(char *, void, uint64_t))(v285 + 104))(v268, enum case for _ClockHandRotationEffect.Period.secondHand(_:), v281);
    uint64_t v184 = v267;
    (*(void (**)(double *, char *, uint64_t))(v181 + 16))(v267, v182, v183);
    int v185 = (*(uint64_t (**)(double *, uint64_t))(v181 + 88))(v184, v183);
    double v243 = v80;
    if (v185 == enum case for _ClockHandRotationEffect.Period.custom(_:))
    {
      (*(void (**)(double *, uint64_t))(v181 + 96))(v184, v183);
      double v186 = *v184;
      uint64_t v95 = v303;
      uint64_t v187 = v273;
    }
    else
    {
      if (v185 == enum case for _ClockHandRotationEffect.Period.hourHand(_:))
      {
        *(double *)&uint64_t v198 = 43200.0;
      }
      else
      {
        if (v185 != enum case for _ClockHandRotationEffect.Period.minuteHand(_:))
        {
          uint64_t v95 = v303;
          uint64_t v187 = v273;
          uint64_t v181 = v285;
          if (v185 == v180)
          {
            double v186 = 60.0;
          }
          else
          {
            (*(void (**)(double *, uint64_t))(v285 + 8))(v184, v183);
            double v186 = 0.0;
          }
          goto LABEL_33;
        }
        *(double *)&uint64_t v198 = 3600.0;
      }
      double v186 = *(double *)&v198;
      uint64_t v95 = v303;
      uint64_t v187 = v273;
      uint64_t v181 = v285;
    }
LABEL_33:
    uint64_t v191 = v286;
    (*(void (**)(char *, uint64_t))(v181 + 8))(v182, v183);
    uint64_t v223 = v277;
    double v224 = (double)sub_100089540();
    sub_100089160();
    long double v226 = fmod(v225 + v224, v186);
    long double v227 = (v226 + v226) * 3.14159265 / v186;
    (*(void (**)(char *, uint64_t))(v269 + 8))(v223, v270);
    sub_10008A1E0();
    *uint64_t v148 = 1;
    *((void *)v148 + 1) = v298;
    *((double *)v148 + 2) = v179;
    *((double *)v148 + 3) = v172;
    *((double *)v148 + 4) = v176;
    v148[40] = 1;
    *((void *)v148 + 6) = 0x3FC3333333333333;
    *((long double *)v148 + 7) = v227;
    *((void *)v148 + 8) = v228;
    *((void *)v148 + 9) = v229;
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7300);
    sub_10005D64C(&qword_1000A72F8, &qword_1000A7300, (void (*)(void))sub_10006F628);
    unint64_t v230 = sub_10006F628();
    long long v305 = &type metadata for Clock.ClockHand;
    unint64_t v306 = v230;
    swift_getOpaqueTypeConformance2();
    sub_100089AB0();
    uint64_t v231 = sub_10000697C(&qword_1000A7628);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v231 - 8) + 56))(v187, 0, 1, v231);
    uint64_t v189 = v288;
    uint64_t v190 = (uint64_t)v287;
    double v80 = v243;
    goto LABEL_34;
  }
  uint64_t v188 = 1;
  uint64_t v189 = v288;
  uint64_t v190 = (uint64_t)v287;
  uint64_t v191 = v286;
  uint64_t v192 = v296;
  uint64_t v193 = (uint64_t)v301;
LABEL_36:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v191 + 56))(v147, v188, 1, v189);
  if (*(unsigned char *)(v95 + v192) == 1)
  {
    double v232 = v77 - v77 * v80;
    uint64_t v233 = sub_1000523D0();
    LODWORD(v304) = 256;
  }
  else
  {
    uint64_t v233 = 0;
    LODWORD(v304) = 0;
    double v232 = 0.0;
  }
  uint64_t v234 = sub_10005265C();
  uint64_t v235 = *sub_100014EAC();
  sub_10000F148(v193, v190, &qword_1000A75F0);
  sub_10000F148(v147, v146, &qword_1000A75B0);
  uint64_t v236 = v146;
  uint64_t v237 = v297;
  sub_10000F148(v190, v297, &qword_1000A75F0);
  uint64_t v238 = (int *)sub_10000697C(&qword_1000A7618);
  uint64_t v239 = v237 + v238[12];
  *(double *)uint64_t v239 = v77 - v166;
  *(void *)(v239 + 8) = v300;
  *(_WORD *)(v239 + 16) = 256;
  sub_10000F148(v236, v237 + v238[16], &qword_1000A75B0);
  uint64_t v240 = v237 + v238[20];
  *(double *)uint64_t v240 = v232;
  *(void *)(v240 + 8) = v233;
  *(_WORD *)(v240 + 16) = (_WORD)v304;
  uint64_t v241 = v237 + v238[24];
  *(double *)uint64_t v241 = v77 - v167;
  *(void *)(v241 + 8) = v234;
  *(_WORD *)(v241 + 16) = 256;
  *(void *)(v241 + 24) = v235;
  *(void *)(v241 + 32) = 0x3FF0000000000000;
  *(void *)(v241 + 40) = 0;
  *(void *)(v241 + 48) = 0;
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain();
  sub_10000F024(v147, &qword_1000A75B0);
  sub_10000F024((uint64_t)v301, &qword_1000A75F0);
  (*(void (**)(char *, uint64_t))(v278 + 8))(v258, v279);
  swift_release();
  swift_release();
  swift_release();
  sub_10000F024(v236, &qword_1000A75B0);
  swift_release();
  sub_10000F024((uint64_t)v287, &qword_1000A75F0);
  uint64_t v242 = sub_10000697C(&qword_1000A7620);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v242 - 8) + 56))(v237, 0, 1, v242);
  return sub_100027078(v237, v302, &qword_1000A7598);
}

uint64_t sub_1000509E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v1 = sub_100089520();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000697C(&qword_1000A5CC8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100088FF0();
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v2 + 56))(v13, 1, 1, v1, v16);
  uint64_t v19 = sub_100089580();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 1, 1, v19);
  sub_100088FE0();
  sub_100088FA0();
  sub_100088FB0();
  sub_100088F80();
  sub_100088F90();
  sub_100088FC0();
  sub_100088FD0();
  sub_100089500();
  sub_1000894E0();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v20 = sub_1000893C0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v7, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v24, v7, v20);
  }
  return result;
}

uint64_t sub_100050DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v3 = sub_10008A350();
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  __chkstk_darwin(v3);
  uint64_t v67 = (double *)((char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v58 - v6;
  uint64_t v71 = sub_100089580();
  uint64_t v61 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v68 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000697C(&qword_1000A6188) - 8;
  __chkstk_darwin(v64);
  uint64_t v62 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000897A0();
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v59 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000697C(&qword_1000A6190) - 8;
  __chkstk_darwin(v60);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100051834();
  uint64_t v15 = (int *)type metadata accessor for Clock(0);
  __n128 v16 = (void *)(v2 + v15[6]);
  uint64_t v58 = v2;
  uint64_t v18 = v16[3];
  uint64_t v17 = v16[4];
  sub_10005CC44(v16, v18);
  double v19 = (*(double (**)(uint64_t, uint64_t))(v17 + 24))(v18, v17);
  uint64_t v20 = v16[3];
  uint64_t v21 = v16[4];
  sub_10005CC44(v16, v20);
  uint64_t v22 = *(double (**)(uint64_t, uint64_t))(v21 + 72);
  swift_retain();
  double v23 = v22(v20, v21);
  uint64_t v24 = v2 + v15[11];
  char v25 = *(unsigned char *)(v24 + 40);
  uint64_t v26 = *(void *)(v24 + 56);
  uint64_t v27 = v59;
  uint64_t v28 = &v59[*(int *)(v10 + 28)];
  uint64_t v29 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v30 = sub_1000899B0();
  uint64_t v31 = v29;
  uint64_t v32 = v65;
  uint64_t v33 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v31, v30);
  __asm { FMOV            V0.2D, #2.0 }
  _OWORD *v27 = _Q0;
  uint64_t v39 = v62;
  sub_100049F18((uint64_t)v27, v62, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v39 + *(int *)(v64 + 44)) = 256;
  uint64_t v40 = v67;
  sub_10000F148(v39, (uint64_t)&v13[*(int *)(v60 + 44)], &qword_1000A6188);
  *uint64_t v13 = 0;
  *((void *)v13 + 1) = v14;
  *((double *)v13 + 2) = v23;
  *((void *)v13 + 3) = 0x3FE0B020C49BA5E3;
  *((double *)v13 + 4) = v19;
  v13[40] = v25;
  *((void *)v13 + 6) = v26;
  swift_retain();
  sub_10000F024(v39, &qword_1000A6188);
  sub_100049F80((uint64_t)v27, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v41 = v68;
  swift_release_n();
  uint64_t v42 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v41, v58 + v15[5], v71);
  int v43 = enum case for _ClockHandRotationEffect.Period.hourHand(_:);
  uint64_t v44 = v63;
  (*(void (**)(char *, void, uint64_t))(v32 + 104))(v63, enum case for _ClockHandRotationEffect.Period.hourHand(_:), v33);
  (*(void (**)(double *, char *, uint64_t))(v32 + 16))(v40, v44, v33);
  int v45 = (*(uint64_t (**)(double *, uint64_t))(v32 + 88))(v40, v33);
  if (v45 == enum case for _ClockHandRotationEffect.Period.custom(_:))
  {
    (*(void (**)(double *, uint64_t))(v32 + 96))(v40, v33);
    double v46 = *v40;
  }
  else if (v45 == v43)
  {
    double v46 = 43200.0;
  }
  else if (v45 == enum case for _ClockHandRotationEffect.Period.minuteHand(_:))
  {
    double v46 = 3600.0;
  }
  else if (v45 == enum case for _ClockHandRotationEffect.Period.secondHand(_:))
  {
    double v46 = 60.0;
  }
  else
  {
    (*(void (**)(double *, uint64_t))(v32 + 8))(v40, v33);
    double v46 = 0.0;
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v44, v33);
  double v47 = (double)sub_100089540();
  sub_100089160();
  long double v49 = fmod(v48 + v47, v46);
  long double v50 = (v49 + v49) * 3.14159265 / v46;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v71);
  sub_10008A1E0();
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v55 = v70;
  sub_10000F148((uint64_t)v13, v70, &qword_1000A6190);
  uint64_t v56 = v55 + *(int *)(sub_10000697C(&qword_1000A6198) + 36);
  *(long double *)uint64_t v56 = v50;
  *(void *)(v56 + 8) = v52;
  *(void *)(v56 + 16) = v54;
  return sub_10000F024((uint64_t)v13, &qword_1000A6190);
}

uint64_t sub_100051428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v45 = sub_10008A350();
  uint64_t v4 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (double *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  int v43 = (char *)&v42 - v7;
  uint64_t v8 = sub_100089580();
  uint64_t v42 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_100051834();
  uint64_t v11 = (int *)type metadata accessor for Clock(0);
  uint64_t v12 = (void *)(v2 + v11[6]);
  uint64_t v13 = v12[3];
  uint64_t v14 = v12[4];
  sub_10005CC44(v12, v13);
  double v15 = (*(double (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
  uint64_t v16 = v12[3];
  uint64_t v17 = v12[4];
  sub_10005CC44(v12, v16);
  uint64_t v18 = *(double (**)(uint64_t, uint64_t))(v17 + 72);
  uint64_t v19 = v16;
  uint64_t v20 = v8;
  uint64_t v21 = v43;
  uint64_t v22 = v17;
  double v23 = v10;
  uint64_t v24 = v45;
  double v25 = v18(v19, v22);
  uint64_t v26 = v2 + v11[11];
  char v27 = *(unsigned char *)(v26 + 40);
  uint64_t v28 = *(void *)(v26 + 56);
  uint64_t v29 = v11[5];
  uint64_t v30 = v42;
  uint64_t v31 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v23, v2 + v29, v20);
  int v32 = enum case for _ClockHandRotationEffect.Period.minuteHand(_:);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v21, enum case for _ClockHandRotationEffect.Period.minuteHand(_:), v24);
  (*(void (**)(double *, char *, uint64_t))(v4 + 16))(v31, v21, v24);
  int v33 = (*(uint64_t (**)(double *, uint64_t))(v4 + 88))(v31, v24);
  if (v33 == enum case for _ClockHandRotationEffect.Period.custom(_:))
  {
    (*(void (**)(double *, uint64_t))(v4 + 96))(v31, v24);
    double v34 = *v31;
  }
  else if (v33 == enum case for _ClockHandRotationEffect.Period.hourHand(_:))
  {
    double v34 = 43200.0;
  }
  else if (v33 == v32)
  {
    double v34 = 3600.0;
  }
  else if (v33 == enum case for _ClockHandRotationEffect.Period.secondHand(_:))
  {
    double v34 = 60.0;
  }
  else
  {
    (*(void (**)(double *, uint64_t))(v4 + 8))(v31, v24);
    double v34 = 0.0;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v21, v24);
  double v35 = (double)sub_100089540();
  sub_100089160();
  long double v37 = fmod(v36 + v35, v34);
  long double v38 = (v37 + v37) * 3.14159265 / v34;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v20);
  uint64_t result = sub_10008A1E0();
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = v46;
  *(double *)(a2 + 16) = v25;
  *(void *)(a2 + 24) = 0x3FECCCCCCCCCCCCDLL;
  *(double *)(a2 + 32) = v15;
  *(unsigned char *)(a2 + 40) = v27;
  *(void *)(a2 + 48) = v28;
  *(long double *)(a2 + 56) = v38;
  *(void *)(a2 + 64) = v40;
  *(void *)(a2 + 72) = v41;
  return result;
}

uint64_t sub_100051834()
{
  uint64_t v1 = type metadata accessor for Clock(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = sub_10008A260();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008A240();
  char v11 = sub_10008A220();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v12(v10, v7);
  if (v11) {
    return sub_10008A000();
  }
  int v14 = *(unsigned __int8 *)(v0 + *(int *)(v1 + 52));
  sub_100049F18(v0, (uint64_t)v6, type metadata accessor for Clock);
  if (v14 == 1)
  {
    sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
    return swift_retain();
  }
  int v15 = v6[*(int *)(v1 + 48)];
  sub_100049F18((uint64_t)v6, (uint64_t)v3, type metadata accessor for Clock);
  if (v15 == 1)
  {
    sub_10008A250();
    char v16 = sub_10008A220();
    v12(v10, v7);
    sub_100049F80((uint64_t)v3, type metadata accessor for Clock);
    sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
    if (v16) {
      return swift_retain();
    }
  }
  else
  {
    sub_100049F80((uint64_t)v3, type metadata accessor for Clock);
    sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
  }
  return sub_100015948(0);
}

uint64_t sub_100051AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v32 = a1;
  uint64_t v31 = sub_10000697C(&qword_1000A6188) - 8;
  __chkstk_darwin(v31);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000897A0();
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  char v11 = (_OWORD *)((char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for Clock(0);
  uint64_t v13 = (void *)(v3 + *(int *)(v12 + 24));
  uint64_t v14 = v13[3];
  uint64_t v15 = v13[4];
  sub_10005CC44(v13, v14);
  char v16 = *(double (**)(uint64_t, uint64_t))(v15 + 72);
  swift_retain();
  double v17 = v16(v14, v15);
  uint64_t v18 = v30[1] + *(int *)(v12 + 44);
  LOBYTE(v14) = *(unsigned char *)(v18 + 40);
  uint64_t v19 = *(void *)(v18 + 56);
  uint64_t v20 = (char *)v11 + *(int *)(v9 + 28);
  uint64_t v21 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v22 = sub_1000899B0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v20, v21, v22);
  __asm { FMOV            V0.2D, #2.0 }
  _OWORD *v11 = _Q0;
  sub_100049F18((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v7[*(int *)(v31 + 44)] = 256;
  uint64_t v28 = sub_10000697C(&qword_1000A6190);
  sub_10000F148((uint64_t)v7, a2 + *(int *)(v28 + 36), &qword_1000A6188);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = v32;
  *(double *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = 0x3FE0B020C49BA5E3;
  *(double *)(a2 + 32) = a3;
  *(unsigned char *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v19;
  swift_retain();
  sub_10000F024((uint64_t)v7, &qword_1000A6188);
  sub_100049F80((uint64_t)v11, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return swift_release();
}

void sub_100051D38(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v7 = type metadata accessor for Clock(0);
  uint64_t v8 = (void *)(v3 + *(int *)(v7 + 24));
  uint64_t v9 = v8[3];
  uint64_t v10 = v8[4];
  sub_10005CC44(v8, v9);
  char v11 = *(double (**)(uint64_t, uint64_t))(v10 + 72);
  swift_retain();
  double v12 = v11(v9, v10);
  uint64_t v13 = v3 + *(int *)(v7 + 44);
  char v14 = *(unsigned char *)(v13 + 40);
  uint64_t v15 = *(void *)(v13 + 56);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = a1;
  *(double *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = 0x3FECCCCCCCCCCCCDLL;
  *(double *)(a2 + 32) = a3;
  *(unsigned char *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v15;
}

uint64_t sub_100051E0C()
{
  uint64_t v1 = type metadata accessor for Clock(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = sub_10008A260();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008A240();
  char v11 = sub_10008A220();
  double v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v12(v10, v7);
  if ((v11 & 1) == 0)
  {
    int v13 = *(unsigned __int8 *)(v0 + *(int *)(v1 + 52));
    sub_100049F18(v0, (uint64_t)v6, type metadata accessor for Clock);
    if (v13 == 1)
    {
      sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
      return swift_retain();
    }
    int v14 = v6[*(int *)(v1 + 48)];
    sub_100049F18((uint64_t)v6, (uint64_t)v3, type metadata accessor for Clock);
    if (v14 == 1)
    {
      sub_10008A250();
      char v15 = sub_10008A220();
      v12(v10, v7);
      sub_100049F80((uint64_t)v3, type metadata accessor for Clock);
      sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
      if (v15) {
        return swift_retain();
      }
    }
    else
    {
      sub_100049F80((uint64_t)v3, type metadata accessor for Clock);
      sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
    }
  }
  return sub_10008A000();
}

double sub_100052094()
{
  char v1 = *(unsigned char *)(v0 + *(int *)(type metadata accessor for Clock(0) + 60) + 8);
  uint64_t v2 = swift_retain();
  sub_1000338E8(v2, v1);
  swift_release();
  int v3 = sub_100086578();
  swift_release();
  double result = dbl_100099830[v3 == 4];
  if (v3 == 3) {
    return 0.93;
  }
  return result;
}

void sub_100052120(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v9 = (void *)(v4 + *(int *)(type metadata accessor for Clock(0) + 24));
  uint64_t v10 = v9[3];
  uint64_t v11 = v9[4];
  sub_10005CC44(v9, v10);
  double v12 = *(double (**)(uint64_t, uint64_t))(v11 + 96);
  swift_retain();
  double v13 = v12(v10, v11);
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = a1;
  *(double *)(a2 + 16) = v13;
  *(double *)(a2 + 24) = a3;
  *(double *)(a2 + 32) = a4;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = 0x3FC3333333333333;
}

double sub_1000521D4(uint64_t a1)
{
  uint64_t v2 = sub_10008A350();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v6, a1, v2, v4);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == enum case for _ClockHandRotationEffect.Period.custom(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v6, v2);
    return *(double *)v6;
  }
  else if (v7 == enum case for _ClockHandRotationEffect.Period.hourHand(_:))
  {
    return 43200.0;
  }
  else if (v7 == enum case for _ClockHandRotationEffect.Period.minuteHand(_:))
  {
    return 3600.0;
  }
  else if (v7 == enum case for _ClockHandRotationEffect.Period.secondHand(_:))
  {
    return 60.0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return 0.0;
  }
}

long double sub_10005236C(long double a1)
{
  double v2 = (double)sub_100089540();
  sub_100089160();
  long double v4 = fmod(v3 + v2, a1);
  return (v4 + v4) * 3.14159265 / a1;
}

uint64_t sub_1000523D0()
{
  uint64_t v1 = type metadata accessor for Clock(0);
  __chkstk_darwin(v1);
  double v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = sub_10008A260();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008A240();
  char v11 = sub_10008A220();
  double v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v12(v10, v7);
  if (v11) {
    return sub_10008A000();
  }
  int v14 = v0[*(int *)(v1 + 52)];
  sub_100049F18((uint64_t)v0, (uint64_t)v6, type metadata accessor for Clock);
  if (v14 != 1)
  {
    int v16 = v6[*(int *)(v1 + 48)];
    sub_100049F18((uint64_t)v6, (uint64_t)v3, type metadata accessor for Clock);
    if (v16 == 1)
    {
      sub_10008A250();
      char v17 = sub_10008A220();
      v12(v10, v7);
      sub_100049F80((uint64_t)v3, type metadata accessor for Clock);
      sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
      if (v17)
      {
        char v15 = *v0;
        return sub_1000159E8(v15);
      }
    }
    else
    {
      sub_100049F80((uint64_t)v3, type metadata accessor for Clock);
      sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
    }
    char v15 = 0;
    return sub_1000159E8(v15);
  }
  sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
  char v15 = *v0;
  return sub_1000159E8(v15);
}

uint64_t sub_10005265C()
{
  uint64_t v1 = type metadata accessor for Clock(0);
  __chkstk_darwin(v1);
  double v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = sub_10008A260();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008A240();
  char v11 = sub_10008A220();
  double v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v12(v10, v7);
  if (v11) {
    return sub_10008A000();
  }
  int v14 = *(unsigned __int8 *)(v0 + *(int *)(v1 + 52));
  sub_100049F18(v0, (uint64_t)v6, type metadata accessor for Clock);
  if (v14 == 1)
  {
    sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
    return swift_retain();
  }
  int v15 = v6[*(int *)(v1 + 48)];
  sub_100049F18((uint64_t)v6, (uint64_t)v3, type metadata accessor for Clock);
  if (v15 == 1)
  {
    sub_10008A250();
    char v16 = sub_10008A220();
    v12(v10, v7);
    sub_100049F80((uint64_t)v3, type metadata accessor for Clock);
    sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
    if (v16) {
      return swift_retain();
    }
  }
  else
  {
    sub_100049F80((uint64_t)v3, type metadata accessor for Clock);
    sub_100049F80((uint64_t)v6, type metadata accessor for Clock);
  }
  return sub_100089FD0();
}

uint64_t sub_1000528EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  *(unsigned char *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = a5;
  *(double *)(a4 + 24) = a6;
  *(double *)(a4 + 32) = a7;
  *(unsigned char *)(a4 + 40) = a3;
  *(double *)(a4 + 48) = a8;
  return result;
}

uint64_t sub_100052908()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_100052910(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

void *sub_100052918()
{
  return &unk_100099870;
}

double sub_100052924(double a1, double a2)
{
  return a2;
}

void sub_10005292C(double a1)
{
  *(double *)(v1 + 8) = a1;
}

double sub_100052934@<D0>(uint64_t a1@<X8>)
{
  sub_100089D40();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

void sub_10005299C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6)
{
  CGFloat MidX = CGRectGetMidX(*(CGRect *)&a1);
  v16.origin.x = a1;
  v16.origin.y = a2;
  v16.size.width = a3;
  v16.size.height = a4;
  double MidY = CGRectGetMidY(v16);
  v14.x = MidX;
  v14.y = MidY;
  sub_100089D20(v14);
  v15.y = MidY + a5 * -0.5 * a6;
  v15.x = MidX;
  sub_100089D30(v15);
}

double sub_100052A38@<D0>(uint64_t a1@<X8>)
{
  sub_100089D40();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_100052AAC()
{
  return Shape.sizeThatFits(_:)();
}

uint64_t (*sub_100052AC4(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_100089670();
  return sub_100052B34;
}

uint64_t sub_100052B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10006FFFC();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100052BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10006FFFC();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100052C04(uint64_t a1)
{
  unint64_t v2 = sub_10006FFFC();

  return Shape.body.getter(a1, v2);
}

uint64_t sub_100052C50(char a1)
{
  return a1 & 1;
}

double sub_100052C58(double a1, double a2, double a3)
{
  return a3;
}

double sub_100052C60@<D0>(uint64_t a1@<X8>)
{
  sub_100089D40();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

void sub_100052CD0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, uint64_t a8, char a9)
{
  CGFloat MidX = CGRectGetMidX(*(CGRect *)&a1);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  double MidY = CGRectGetMidY(v23);
  double v19 = a5 * 0.5;
  double v20 = MidY * -0.15;
  if ((a9 & 1) == 0) {
    double v20 = v19 * a7;
  }
  v21.y = MidY - v20;
  v21.x = MidX;
  sub_100089D20(v21);
  v22.y = MidY - v19 * a6;
  v22.x = MidX;
  sub_100089D30(v22);
}

double sub_100052D90@<D0>(uint64_t a1@<X8>)
{
  sub_100089D40();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

void sub_100052E0C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_100052E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10006FF90();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100052EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10006FF90();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100052F1C(uint64_t a1)
{
  unint64_t v2 = sub_10006FF90();

  return Shape.body.getter(a1, v2);
}

double sub_100052F68@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10008A1B0();
  uint64_t v5 = v4;
  sub_100053008(v1, (uint64_t)v14);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v5;
  long long v6 = v14[11];
  *(_OWORD *)(a1 + 176) = v14[10];
  *(_OWORD *)(a1 + 192) = v6;
  long long v7 = v14[13];
  *(_OWORD *)(a1 + 208) = v14[12];
  *(_OWORD *)(a1 + 224) = v7;
  long long v8 = v14[7];
  *(_OWORD *)(a1 + 112) = v14[6];
  *(_OWORD *)(a1 + 128) = v8;
  long long v9 = v14[9];
  *(_OWORD *)(a1 + 144) = v14[8];
  *(_OWORD *)(a1 + 160) = v9;
  long long v10 = v14[3];
  *(_OWORD *)(a1 + 48) = v14[2];
  *(_OWORD *)(a1 + 64) = v10;
  long long v11 = v14[5];
  *(_OWORD *)(a1 + 80) = v14[4];
  *(_OWORD *)(a1 + 96) = v11;
  double result = *(double *)v14;
  long long v13 = v14[1];
  *(_OWORD *)(a1 + 16) = v14[0];
  *(_OWORD *)(a1 + 32) = v13;
  return result;
}

uint64_t sub_100053008@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v33 = *a1;
  if (v33 == 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v6 = *((void *)a1 + 4);
    uint64_t v7 = *((void *)a1 + 6);
    uint64_t v34 = *((void *)a1 + 1);
    double v8 = 0.0;
  }
  else
  {
    uint64_t v6 = *((void *)a1 + 4);
    uint64_t v7 = *((void *)a1 + 6);
    uint64_t v34 = *((void *)a1 + 1);
    double v8 = 1.0;
    if (a1[40])
    {
      sub_100070D68((uint64_t)a1);
      sub_1000896C0();
      uint64_t v29 = v63;
      uint64_t v27 = v65;
      uint64_t v28 = v64;
      uint64_t v26 = v66;
      uint64_t v36 = v67;
      uint64_t v9 = sub_10008A1B0();
      uint64_t v31 = v10;
      uint64_t v32 = v9;
      uint64_t v30 = 256;
      uint64_t v4 = v6;
      uint64_t v5 = v7;
      uint64_t v35 = v34;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v26 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
    }
  }
  uint64_t v11 = *((void *)a1 + 3);
  sub_100070D68((uint64_t)a1);
  sub_1000896C0();
  uint64_t v12 = v68;
  uint64_t v13 = v69;
  uint64_t v14 = v70;
  uint64_t v15 = sub_10008A1B0();
  uint64_t v17 = v16;
  uint64_t v18 = *sub_100014EAC();
  *(void *)&long long v37 = v6;
  BYTE8(v37) = v33;
  *(void *)&long long v38 = v11;
  *((void *)&v38 + 1) = v7;
  long long v39 = v68;
  uint64_t v19 = *((void *)&v68 + 1);
  long long v40 = v69;
  uint64_t v20 = *((void *)&v69 + 1);
  *(void *)&long long v41 = v70;
  *((void *)&v41 + 1) = v34;
  LOWORD(v42) = 256;
  *((void *)&v42 + 1) = v15;
  *(void *)&long long v43 = v17;
  *((void *)&v43 + 1) = v18;
  long long v44 = *(unint64_t *)&v8;
  uint64_t v45 = 0;
  long long v21 = v37;
  *(_OWORD *)(a2 + 104) = v38;
  long long v22 = v42;
  *(_OWORD *)(a2 + 152) = v41;
  long long v23 = v39;
  *(_OWORD *)(a2 + 136) = v40;
  *(_OWORD *)(a2 + 88) = v21;
  long long v24 = v43;
  *(_OWORD *)(a2 + 200) = v44;
  *(_OWORD *)(a2 + 184) = v24;
  *(_OWORD *)(a2 + 168) = v22;
  *(void *)(a2 + 216) = 0;
  *(_OWORD *)(a2 + 120) = v23;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v29;
  *(void *)(a2 + 24) = v28;
  *(void *)(a2 + 32) = v27;
  *(void *)(a2 + 40) = v26;
  *(void *)(a2 + 48) = v36;
  *(void *)(a2 + 56) = v35;
  *(void *)(a2 + 64) = v30;
  *(void *)(a2 + 72) = v32;
  *(void *)(a2 + 80) = v31;
  uint64_t v46 = v6;
  char v47 = v33;
  uint64_t v48 = v11;
  uint64_t v49 = v7;
  uint64_t v50 = v12;
  uint64_t v51 = v19;
  uint64_t v52 = v13;
  uint64_t v53 = v20;
  uint64_t v54 = v14;
  uint64_t v55 = v34;
  __int16 v56 = 256;
  uint64_t v57 = v15;
  uint64_t v58 = v17;
  uint64_t v59 = v18;
  double v60 = v8;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  sub_100070D94(v4, v5, v29, v28, v27, v26);
  sub_100070DD8((uint64_t)&v37);
  swift_retain();
  sub_100070E24((uint64_t)&v46);
  return sub_100070E70(v4, v5, v29, v28, v27, v26);
}

double sub_10005336C@<D0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v15[0] = *(_OWORD *)v1;
  v15[1] = v3;
  v15[2] = *(_OWORD *)(v1 + 32);
  uint64_t v16 = *(void *)(v1 + 48);
  uint64_t v4 = sub_10008A1B0();
  uint64_t v6 = v5;
  sub_100053008((unsigned __int8 *)v15, (uint64_t)v17);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  long long v7 = v17[11];
  *(_OWORD *)(a1 + 176) = v17[10];
  *(_OWORD *)(a1 + 192) = v7;
  long long v8 = v17[13];
  *(_OWORD *)(a1 + 208) = v17[12];
  *(_OWORD *)(a1 + 224) = v8;
  long long v9 = v17[7];
  *(_OWORD *)(a1 + 112) = v17[6];
  *(_OWORD *)(a1 + 128) = v9;
  long long v10 = v17[9];
  *(_OWORD *)(a1 + 144) = v17[8];
  *(_OWORD *)(a1 + 160) = v10;
  long long v11 = v17[3];
  *(_OWORD *)(a1 + 48) = v17[2];
  *(_OWORD *)(a1 + 64) = v11;
  long long v12 = v17[5];
  *(_OWORD *)(a1 + 80) = v17[4];
  *(_OWORD *)(a1 + 96) = v12;
  double result = *(double *)v17;
  long long v14 = v17[1];
  *(_OWORD *)(a1 + 16) = v17[0];
  *(_OWORD *)(a1 + 32) = v14;
  return result;
}

uint64_t sub_100053410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  swift_retain();

  return swift_retain();
}

__n128 sub_10005345C(uint64_t a1)
{
  swift_release();
  swift_release();
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v4;
  *(void *)(v1 + 32) = *(void *)(a1 + 32);
  return result;
}

uint64_t sub_1000534A0()
{
  return swift_retain();
}

uint64_t sub_1000534A8(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t sub_1000534D4()
{
  return swift_retain();
}

uint64_t sub_1000534DC(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_10005350C()
{
  return swift_retain();
}

uint64_t sub_100053514(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 32) = a1;
  return result;
}

double sub_100053540@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10008A000();
  uint64_t v3 = sub_100089FD0();
  uint64_t v4 = sub_10008A000();
  double result = 0.0585;
  *(_OWORD *)a1 = xmmword_1000997F0;
  *(void *)(a1 + 16) = 0x3F916872B020C49CLL;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = 0x3FC3333333333333;
  return result;
}

double sub_1000535B4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10008A000();
  uint64_t v3 = sub_100089FD0();
  double result = 0.0585;
  *(_OWORD *)a1 = xmmword_1000997F0;
  *(void *)(a1 + 16) = 0x3F916872B020C49CLL;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_100053608@<X0>(uint64_t a1@<X8>)
{
  return sub_10005502C((void (*)(void))type metadata accessor for DigitalClockWidgetView, a1);
}

uint64_t sub_100053620@<X0>(uint64_t a1@<X8>)
{
  return sub_1000550DC(&qword_1000A61A0, (void (*)(uint64_t, __n128))sub_10005365C, (void (*)(void))type metadata accessor for DigitalClockWidgetView, &qword_1000A61A8, a1);
}

uint64_t sub_10005365C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DigitalClockWidgetView(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = sub_10000697C(&qword_1000A7558);
  __chkstk_darwin(v5);
  long long v7 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  long long v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    char v12 = *(unsigned char *)(a1 + 16);
    sub_100033AF0(v11, v12);
    char v13 = sub_100033488(v11, v12);
    sub_100033AFC(v11, v12);
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)&v10[*(int *)(v8 + 24)]);
    char *v10 = 1;
    v10[1] = v13 & 1;
    sub_100049F18((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7340);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7338, &qword_1000A7340);
    sub_100089AB0();
    return sub_100049F80((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_100049F18(a1, (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DigitalClockWidgetView);
    unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v16 = swift_allocObject();
    sub_10004A544((uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for DigitalClockWidgetView);
    *long long v7 = sub_100070CBC;
    v7[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v16;
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7340);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7338, &qword_1000A7340);
    return sub_100089AB0();
  }
}

uint64_t sub_100053A3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100053EE0(type metadata accessor for DigitalClockWidgetView, a1);
}

uint64_t sub_100053A54@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100053F80(a1, a2, a3, a4, type metadata accessor for DigitalClockWidgetView, a5);
}

uint64_t sub_100053A6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100055F8C(&qword_1000A61A0, (void (*)(uint64_t, __n128))sub_10005365C, &qword_1000A61A8, a1);
}

uint64_t sub_100053A94@<X0>(uint64_t a1@<X8>)
{
  return sub_10005502C((void (*)(void))type metadata accessor for DateTimeWidgetView, a1);
}

uint64_t sub_100053AAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000550DC(&qword_1000A61B0, (void (*)(uint64_t, __n128))sub_100053AE8, (void (*)(void))type metadata accessor for DateTimeWidgetView, &qword_1000A61B8, a1);
}

uint64_t sub_100053AE8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DateTimeWidgetView(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = sub_10000697C(&qword_1000A7588);
  __chkstk_darwin(v5);
  long long v7 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  long long v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    char v12 = *(unsigned char *)(a1 + 16);
    sub_100033AF0(v11, v12);
    char v13 = sub_100033488(v11, v12);
    sub_100033AFC(v11, v12);
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)&v10[*(int *)(v8 + 24)]);
    char *v10 = 1;
    v10[1] = v13 & 1;
    sub_100049F18((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7370);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7368, &qword_1000A7370);
    sub_100089AB0();
    return sub_100049F80((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_100049F18(a1, (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DateTimeWidgetView);
    unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v16 = swift_allocObject();
    sub_10004A544((uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for DateTimeWidgetView);
    *long long v7 = sub_100070C88;
    v7[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v16;
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7370);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7368, &qword_1000A7370);
    return sub_100089AB0();
  }
}

uint64_t sub_100053EC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100053EE0(type metadata accessor for DateTimeWidgetView, a1);
}

uint64_t sub_100053EE0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = swift_getKeyPath();
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(a1(0) + 24));
  *uint64_t v4 = swift_getKeyPath();
  sub_10000697C(&qword_1000A5E40);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100053F68@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100053F80(a1, a2, a3, a4, type metadata accessor for DateTimeWidgetView, a5);
}

uint64_t sub_100053F80@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  *(unsigned char *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3 & 1;
  uint64_t v8 = a5(0);
  return sub_100027078(a4, a6 + *(int *)(v8 + 24), &qword_1000A59C0);
}

uint64_t sub_100053FD8@<X0>(uint64_t a1@<X8>)
{
  return sub_100055F8C(&qword_1000A61B0, (void (*)(uint64_t, __n128))sub_100053AE8, &qword_1000A61B8, a1);
}

uint64_t sub_100054000()
{
  return swift_getKeyPath();
}

uint64_t sub_100054024@<X0>(uint64_t a1@<X8>)
{
  return sub_10005502C((void (*)(void))type metadata accessor for NonNumericWidgetView, a1);
}

uint64_t sub_10005403C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10008A260();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000697C(&qword_1000A61B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005421C(v1);
  uint64_t v10 = *sub_100014D5C();
  type metadata accessor for NonNumericWidgetView(0);
  swift_retain();
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v6);
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(sub_10000697C(&qword_1000A61B8) + 36));
  uint64_t v12 = type metadata accessor for AccentedWidgetBackground(0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v11 + *(int *)(v12 + 20), v6, v3);
  uint64_t *v11 = v10;
  sub_10000F148((uint64_t)v9, a1, &qword_1000A61B0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_10000F024((uint64_t)v9, &qword_1000A61B0);
}

uint64_t sub_10005421C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NonNumericWidgetView(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = sub_10000697C(&qword_1000A7588);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    char v12 = *(unsigned char *)(a1 + 16);
    sub_100033AF0(v11, v12);
    char v13 = sub_100033488(v11, v12);
    sub_100033AFC(v11, v12);
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)&v10[*(int *)(v8 + 24)]);
    char *v10 = 1;
    v10[1] = v13 & 1;
    sub_100049F18((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7370);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7368, &qword_1000A7370);
    sub_100089AB0();
    return sub_100049F80((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_100049F18(a1, (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NonNumericWidgetView);
    unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v16 = swift_allocObject();
    sub_10004A544((uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for NonNumericWidgetView);
    *uint64_t v7 = sub_100070BD4;
    v7[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v16;
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7370);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7368, &qword_1000A7370);
    return sub_100089AB0();
  }
}

uint64_t sub_1000545FC@<X0>(uint64_t a1@<X1>, void (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v58 = a3;
  uint64_t v4 = sub_10000697C(&qword_1000A4B98);
  __chkstk_darwin(v4 - 8);
  uint64_t v57 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_1000899F0();
  uint64_t v6 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10008A260();
  uint64_t v50 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v49 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v10 - 8);
  char v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v13);
  unint64_t v15 = (uint64_t *)((char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v54 = sub_10000697C(&qword_1000A7050);
  __chkstk_darwin(v54);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000697C(&qword_1000A7590);
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v52 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100089730();
  double v20 = v19;
  uint64_t v21 = *(void *)(a1 + 8);
  char v22 = *(unsigned char *)(a1 + 16);
  sub_100033AF0(v21, v22);
  char v23 = sub_100033488(v21, v22);
  sub_100033AFC(v21, v22);
  if (v23) {
    long long v24 = (double *)sub_100028900();
  }
  else {
    long long v24 = (double *)sub_100028928();
  }
  double v25 = v20 * *v24;
  uint64_t v26 = sub_1000287A8();
  double v27 = sub_100028860();
  double v28 = sub_100028898();
  double v29 = sub_100016338();
  double v30 = sub_100016338();
  double v31 = sub_1000289F0();
  double v32 = sub_100028A28();
  sub_100028CA0(v26, (uint64_t)v62, v25, v27, v28, v29, v30, v31, v32);
  sub_10008435C((uint64_t)v12);
  double v60 = &type metadata for SmallSizeDimentions;
  uint64_t v61 = &off_1000A2770;
  int v33 = (_OWORD *)swift_allocObject();
  *(void *)&long long v59 = v33;
  long long v34 = v62[1];
  v33[1] = v62[0];
  v33[2] = v34;
  long long v35 = v62[3];
  v33[3] = v62[2];
  void v33[4] = v35;
  sub_100033AF0(v21, v22);
  sub_100070D68((uint64_t)v62);
  LOBYTE(v26) = sub_100033488(v21, v22);
  sub_100033AFC(v21, v22);
  v48(0);
  uint64_t v36 = v49;
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, v49);
  *unint64_t v15 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4FF0);
  swift_storeEnumTagMultiPayload();
  sub_10004A544((uint64_t)v12, (uint64_t)v15 + v13[5], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_100049F00(&v59, (uint64_t)v15 + v13[6]);
  *((unsigned char *)v15 + v13[7]) = 0;
  *((unsigned char *)v15 + v13[8]) = 0;
  *((unsigned char *)v15 + v13[9]) = 1;
  *((unsigned char *)v15 + v13[10]) = 0;
  long long v37 = (char *)v15 + v13[11];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  *(void *)long long v37 = sub_1000896B0();
  v37[8] = v38 & 1;
  *((unsigned char *)v15 + v13[12]) = v26 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))((char *)v15 + v13[13], v36, v51);
  uint64_t v39 = v53;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v53);
  sub_10004A694(&qword_1000A5EC8, (void (*)(uint64_t))type metadata accessor for SmallWorldClockView);
  sub_10002F2F4((uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v39);
  sub_100049F80((uint64_t)v15, type metadata accessor for SmallWorldClockView);
  id v40 = [self widgetURL];
  if (v40)
  {
    long long v41 = v40;
    uint64_t v42 = (uint64_t)v57;
    sub_100089130();

    uint64_t v43 = sub_100089150();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 0, 1, v43);
  }
  else
  {
    uint64_t v44 = sub_100089150();
    uint64_t v42 = (uint64_t)v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v57, 1, 1, v44);
  }
  sub_10006E024();
  uint64_t v45 = v52;
  sub_100089E90();
  sub_100070A6C((uint64_t)v62);
  sub_10000F024(v42, &qword_1000A4B98);
  sub_10000F024((uint64_t)v17, &qword_1000A7050);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v55 + 32))(v58, v45, v56);
}

uint64_t sub_100054DA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100053EE0(type metadata accessor for NonNumericWidgetView, a1);
}

uint64_t sub_100054DC0@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100053F80(a1, a2, a3, a4, type metadata accessor for NonNumericWidgetView, a5);
}

uint64_t sub_100054DD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10008A260();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000697C(&qword_1000A61B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005421C(v1);
  uint64_t v10 = *sub_100014D5C();
  swift_retain();
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v6);
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(sub_10000697C(&qword_1000A61B8) + 36));
  uint64_t v12 = type metadata accessor for AccentedWidgetBackground(0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v11 + *(int *)(v12 + 20), v6, v3);
  uint64_t *v11 = v10;
  sub_10000F148((uint64_t)v9, a1, &qword_1000A61B0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_10000F024((uint64_t)v9, &qword_1000A61B0);
}

uint64_t sub_100054FBC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  char v2 = *(unsigned char *)(v0 + 16);
  sub_100033AF0(v1, v2);
  char v3 = sub_100033488(v1, v2);
  sub_100033AFC(v1, v2);
  return v3 & 1;
}

uint64_t sub_100055014@<X0>(uint64_t a1@<X8>)
{
  return sub_10005502C((void (*)(void))type metadata accessor for SquareWidgetView, a1);
}

uint64_t sub_10005502C@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  return sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, a2);
}

uint64_t sub_1000550A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000550DC(&qword_1000A61A0, (void (*)(uint64_t, __n128))sub_1000552C8, (void (*)(void))type metadata accessor for SquareWidgetView, &qword_1000A61A8, a1);
}

uint64_t sub_1000550DC@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t, __n128)@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_10008A260();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(a1);
  __n128 v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v5, v16);
  uint64_t v19 = sub_100089FE0();
  a3(0);
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v14);
  double v20 = (uint64_t *)(a5 + *(int *)(sub_10000697C(a4) + 36));
  uint64_t v21 = type metadata accessor for AccentedWidgetBackground(0);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)v20 + *(int *)(v21 + 20), v14, v11);
  uint64_t *v20 = v19;
  sub_10000F148((uint64_t)v18, a5, a1);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return sub_10000F024((uint64_t)v18, a1);
}

uint64_t sub_1000552C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SquareWidgetView(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = sub_10000697C(&qword_1000A7558);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    char v12 = *(unsigned char *)(a1 + 16);
    sub_100033AF0(v11, v12);
    char v13 = sub_100033488(v11, v12);
    sub_100033AFC(v11, v12);
    sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)&v10[*(int *)(v8 + 24)]);
    char *v10 = 1;
    v10[1] = v13 & 1;
    sub_100049F18((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7340);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7338, &qword_1000A7340);
    sub_100089AB0();
    return sub_100049F80((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_100049F18(a1, (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SquareWidgetView);
    unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v16 = swift_allocObject();
    sub_10004A544((uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for SquareWidgetView);
    *uint64_t v7 = sub_1000708D8;
    v7[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v16;
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7340);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7338, &qword_1000A7340);
    return sub_100089AB0();
  }
}

uint64_t sub_1000556A8@<X0>(uint64_t a1@<X1>, void (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v70 = a3;
  uint64_t v4 = sub_10000697C(&qword_1000A4B98);
  __chkstk_darwin(v4 - 8);
  long long v69 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_1000899F0();
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10008A260();
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v10 - 8);
  char v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v13);
  unint64_t v15 = (uint64_t *)((char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v61 = sub_10000697C(&qword_1000A7560);
  __chkstk_darwin(v61);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000697C(&qword_1000A7568);
  __chkstk_darwin(v63);
  uint64_t v66 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000697C(&qword_1000A7570);
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v62 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100089730();
  double v21 = v20;
  uint64_t v22 = *(void *)(a1 + 8);
  char v23 = *(unsigned char *)(a1 + 16);
  sub_100033AF0(v22, v23);
  char v24 = sub_100033488(v22, v23);
  sub_100033AFC(v22, v23);
  if (v24) {
    double v25 = (double *)sub_100028900();
  }
  else {
    double v25 = (double *)sub_100028928();
  }
  double v26 = v21 * *v25;
  uint64_t v27 = sub_1000287A8();
  double v28 = sub_100028860();
  double v29 = sub_100028898();
  double v30 = sub_100016338();
  double v31 = sub_100016338();
  double v32 = sub_1000289F0();
  double v33 = sub_100028A28();
  sub_100028CA0(v27, (uint64_t)v74, v26, v28, v29, v30, v31, v32, v33);
  sub_10008435C((uint64_t)v12);
  uint64_t v72 = &type metadata for SmallSizeDimentions;
  uint64_t v73 = &off_1000A2770;
  long long v34 = (_OWORD *)swift_allocObject();
  *(void *)&long long v71 = v34;
  long long v35 = v74[1];
  v34[1] = v74[0];
  v34[2] = v35;
  long long v36 = v74[3];
  v34[3] = v74[2];
  v34[4] = v36;
  sub_100033AF0(v22, v23);
  sub_100070D68((uint64_t)v74);
  LOBYTE(v27) = sub_100033488(v22, v23);
  sub_100033AFC(v22, v23);
  v58(0);
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v9);
  *unint64_t v15 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4FF0);
  swift_storeEnumTagMultiPayload();
  sub_10004A544((uint64_t)v12, (uint64_t)v15 + v13[5], (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_100049F00(&v71, (uint64_t)v15 + v13[6]);
  *((unsigned char *)v15 + v13[7]) = 0;
  *((unsigned char *)v15 + v13[8]) = 0;
  *((unsigned char *)v15 + v13[9]) = 1;
  *((unsigned char *)v15 + v13[10]) = 0;
  long long v37 = (char *)v15 + v13[11];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  *(void *)long long v37 = sub_1000896B0();
  v37[8] = v38 & 1;
  *((unsigned char *)v15 + v13[12]) = v27 & 1;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))((char *)v15 + v13[13], v9, v60);
  uint64_t v39 = *(void *)(a1 + 8);
  LOBYTE(v37) = *(unsigned char *)(a1 + 16);
  sub_100033AF0(v39, (char)v37);
  char v40 = sub_100033488(v39, (char)v37);
  sub_100033AFC(v39, (char)v37);
  if (v40) {
    double v41 = 1.13;
  }
  else {
    double v41 = 1.0;
  }
  sub_10008A1E0();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  sub_100049F18((uint64_t)v15, (uint64_t)v17, type metadata accessor for SmallWorldClockView);
  uint64_t v46 = &v17[*(int *)(v61 + 36)];
  *(double *)uint64_t v46 = v41;
  *((double *)v46 + 1) = v41;
  *((void *)v46 + 2) = v43;
  *((void *)v46 + 3) = v45;
  sub_100049F80((uint64_t)v15, type metadata accessor for SmallWorldClockView);
  uint64_t v47 = v67;
  uint64_t v48 = v68;
  (*(void (**)(char *, void, uint64_t))(v67 + 104))(v7, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v68);
  sub_100070904(&qword_1000A7578, &qword_1000A7560);
  uint64_t v49 = (uint64_t)v66;
  sub_10002F2F4((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v48);
  sub_10000F024((uint64_t)v17, &qword_1000A7560);
  id v50 = [self widgetURL];
  if (v50)
  {
    uint64_t v51 = v50;
    uint64_t v52 = (uint64_t)v69;
    sub_100089130();

    uint64_t v53 = sub_100089150();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
  }
  else
  {
    uint64_t v54 = sub_100089150();
    uint64_t v52 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v69, 1, 1, v54);
  }
  sub_1000709A8();
  uint64_t v55 = v62;
  sub_100089E90();
  sub_100070A6C((uint64_t)v74);
  sub_10000F024(v52, &qword_1000A4B98);
  sub_10000F024(v49, &qword_1000A7568);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v64 + 32))(v70, v55, v65);
}

uint64_t sub_100055F34@<X0>(uint64_t a1@<X8>)
{
  return sub_100053EE0(type metadata accessor for SquareWidgetView, a1);
}

uint64_t sub_100055F4C@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100053F80(a1, a2, a3, a4, type metadata accessor for SquareWidgetView, a5);
}

uint64_t sub_100055F64@<X0>(uint64_t a1@<X8>)
{
  return sub_100055F8C(&qword_1000A61A0, (void (*)(uint64_t, __n128))sub_1000552C8, &qword_1000A61A8, a1);
}

uint64_t sub_100055F8C@<X0>(uint64_t *a1@<X2>, void (*a2)(uint64_t, __n128)@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_10008A260();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000697C(a1);
  __n128 v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v4, v14);
  uint64_t v17 = sub_100089FE0();
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v12);
  uint64_t v18 = (uint64_t *)(a4 + *(int *)(sub_10000697C(a3) + 36));
  uint64_t v19 = type metadata accessor for AccentedWidgetBackground(0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v18 + *(int *)(v19 + 20), v12, v9);
  uint64_t *v18 = v17;
  sub_10000F148((uint64_t)v16, a4, a1);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return sub_10000F024((uint64_t)v16, a1);
}

uint64_t sub_10005616C()
{
  uint64_t v0 = sub_10008A170();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (long long *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000697C(&qword_1000A61C0);
  sub_10008A180();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100097E50;
  long long v8 = xmmword_100099840;
  *uint64_t v3 = xmmword_100099840;
  uint64_t v5 = enum case for GridItem.Size.flexible(_:);
  uint64_t v6 = *(void (**)(long long *, uint64_t, uint64_t))(v1 + 104);
  v6(v3, enum case for GridItem.Size.flexible(_:), v0);
  sub_10008A1A0();
  sub_10008A190();
  *uint64_t v3 = v8;
  v6(v3, v5, v0);
  sub_10008A1A0();
  sub_10008A190();
  *uint64_t v3 = v8;
  v6(v3, v5, v0);
  sub_10008A1A0();
  sub_10008A190();
  return v4;
}

uint64_t sub_1000563A8()
{
  type metadata accessor for WorldClockRectangularSummary(0);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000563DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v23 = sub_100089B10();
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100089AD0();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_10000697C(&qword_1000A61C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000697C(&qword_1000A61D0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  __chkstk_darwin(v9);
  char v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WorldClockRectangularSummary(0);
  uint64_t v25 = v1;
  swift_bridgeObjectRetain();
  sub_100089A00();
  LODWORD(v26) = 0;
  sub_10004A694(&qword_1000A61D8, (void (*)(uint64_t))&type metadata accessor for PinnedScrollableViews);
  sub_10008A6B0();
  sub_10000697C(&qword_1000A61E0);
  sub_10005D360();
  sub_10008A1D0();
  uint64_t v24 = v1;
  uint64_t v13 = sub_10000697C(&qword_1000A6200);
  uint64_t v14 = sub_10001845C(&qword_1000A6208, &qword_1000A61C8);
  uint64_t v15 = sub_10001845C(&qword_1000A6210, &qword_1000A6200);
  sub_100089F60();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100089B00();
  uint64_t v26 = v5;
  uint64_t v27 = v13;
  uint64_t v28 = v14;
  uint64_t v29 = v15;
  swift_getOpaqueTypeConformance2();
  uint64_t v16 = v19;
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v12, v16);
}

uint64_t sub_1000567E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WorldClockRectangularSummary(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  long long v8 = xmmword_100099850;
  swift_getKeyPath();
  sub_100049F18(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WorldClockRectangularSummary);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_10004A544((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, type metadata accessor for WorldClockRectangularSummary);
  sub_10000697C(&qword_1000A74A8);
  sub_10000697C(&qword_1000A61F8);
  sub_10007057C();
  sub_10001845C(&qword_1000A61F0, &qword_1000A61F8);
  return sub_10008A130();
}

uint64_t sub_1000569A8@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v158 = a2;
  uint64_t v152 = a3;
  uint64_t v4 = sub_10000697C(&qword_1000A7510);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v128 - v8;
  uint64_t v149 = sub_100089F90();
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v147 = (char *)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_10000697C(&qword_1000A73D0);
  __chkstk_darwin(v135);
  uint64_t v144 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_100089480();
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v138 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v13 - 8);
  uint64_t v130 = (uint64_t)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_10000697C(&qword_1000A73D8);
  __chkstk_darwin(v131);
  uint64_t v136 = (char *)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_10000697C(&qword_1000A74D0);
  __chkstk_darwin(v133);
  uint64_t v137 = (uint64_t)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_10000697C(&qword_1000A7518);
  __chkstk_darwin(v132);
  uint64_t v139 = (uint64_t)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000697C(&qword_1000A7520);
  __chkstk_darwin(v134);
  uint64_t v145 = (uint64_t)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_10000697C(&qword_1000A7528);
  __chkstk_darwin(v140);
  uint64_t v146 = (uint64_t)&v128 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_10000697C(&qword_1000A7530);
  __chkstk_darwin(v141);
  uint64_t v21 = (char *)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v128 - v23;
  uint64_t v25 = sub_10000697C(&qword_1000A7538);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v128 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  double v30 = (char *)&v128 - v29;
  uint64_t v31 = type metadata accessor for WorldClockCity();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  long long v34 = (char *)&v128 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *a1;
  uint64_t v36 = type metadata accessor for WorldClockEntry();
  double v153 = v6;
  char v151 = v9;
  uint64_t v156 = v21;
  uint64_t v150 = v27;
  char v154 = v30;
  uint64_t v155 = v24;
  if (v35 < 0 || (uint64_t v37 = *(void *)(v158 + *(int *)(v36 + 20)), v35 >= *(void *)(v37 + 16))) {
    sub_10008435C((uint64_t)v34);
  }
  else {
    sub_100049F18(v37+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v35, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  }
  uint64_t v129 = v31;
  char v38 = &v34[*(int *)(v31 + 28)];
  uint64_t v39 = *((void *)v38 + 1);
  uint64_t v161 = *(void *)v38;
  uint64_t v162 = v39;
  unint64_t v158 = sub_100032F54();
  swift_bridgeObjectRetain();
  uint64_t v40 = sub_100089E40();
  uint64_t v42 = v41;
  char v44 = v43 & 1;
  sub_100089CF0();
  uint64_t v45 = sub_100089DB0();
  uint64_t v47 = v46;
  char v49 = v48;
  uint64_t v157 = v34;
  swift_release();
  char v50 = v49 & 1;
  sub_10000B7E0(v40, v42, v44);
  swift_bridgeObjectRelease();
  uint64_t v51 = sub_100089DA0();
  uint64_t v53 = v52;
  LOBYTE(v40) = v54 & 1;
  sub_10000B7E0(v45, v47, v50);
  swift_bridgeObjectRelease();
  sub_10008A000();
  uint64_t v55 = sub_100089D70();
  uint64_t v57 = v56;
  char v59 = v58;
  uint64_t v61 = v60;
  swift_release();
  LOBYTE(v42) = v59 & 1;
  sub_10000B7E0(v51, v53, v40);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v63 = swift_getKeyPath();
  uint64_t v161 = v55;
  uint64_t v162 = v57;
  char v163 = v42;
  uint64_t v164 = v61;
  uint64_t v165 = KeyPath;
  uint64_t v166 = 1;
  LOBYTE(v167) = 0;
  uint64_t v168 = v63;
  uint64_t v169 = 0x3FE3333333333333;
  uint64_t v64 = &v157[*(int *)(v129 + 24)];
  uint64_t v66 = *(void *)v64;
  uint64_t v65 = *((void *)v64 + 1);
  uint64_t v159 = v66;
  uint64_t v160 = v65;
  sub_10000697C(&qword_1000A7490);
  sub_1000704A0();
  sub_100089F00();
  sub_10000B7E0(v55, v57, v42);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v67 = v130;
  sub_100083900(v130);
  uint64_t v68 = sub_100089580();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 0, 1, v68);
  uint64_t v69 = sub_100089D90();
  uint64_t v71 = v70;
  uint64_t v73 = v72;
  LOBYTE(v57) = v74 & 1;
  uint64_t v75 = swift_getKeyPath();
  uint64_t v76 = v138;
  sub_100089440();
  uint64_t v77 = (uint64_t)v144;
  uint64_t v78 = v142;
  uint64_t v79 = v143;
  (*(void (**)(char *, char *, uint64_t))(v142 + 16))(&v144[*(int *)(v135 + 28)], v76, v143);
  *(void *)uint64_t v77 = v75;
  uint64_t v80 = (uint64_t)v136;
  sub_10000F148(v77, (uint64_t)&v136[*(int *)(v131 + 36)], &qword_1000A73D0);
  *(void *)uint64_t v80 = v69;
  *(void *)(v80 + 8) = v71;
  *(unsigned char *)(v80 + 16) = v57;
  *(void *)(v80 + 24) = v73;
  sub_10005D5A0(v69, v71, v57);
  swift_bridgeObjectRetain();
  sub_10000F024(v77, &qword_1000A73D0);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v79);
  sub_10000B7E0(v69, v71, v57);
  swift_bridgeObjectRelease();
  uint64_t v81 = sub_100089C00();
  uint64_t v82 = swift_getKeyPath();
  uint64_t v83 = v137;
  sub_10000F148(v80, v137, &qword_1000A73D8);
  uint64_t v84 = (uint64_t *)(v83 + *(int *)(v133 + 36));
  *uint64_t v84 = v82;
  v84[1] = v81;
  sub_10000F024(v80, &qword_1000A73D8);
  uint64_t v85 = swift_getKeyPath();
  uint64_t v86 = v139;
  sub_10000F148(v83, v139, &qword_1000A74D0);
  uint64_t v87 = v86 + *(int *)(v132 + 36);
  *(void *)uint64_t v87 = v85;
  *(void *)(v87 + 8) = 1;
  *(unsigned char *)(v87 + 16) = 0;
  sub_10000F024(v83, &qword_1000A74D0);
  uint64_t v88 = sub_10008A000();
  uint64_t v89 = swift_getKeyPath();
  uint64_t v90 = v145;
  sub_10000F148(v86, v145, &qword_1000A7518);
  uint64_t v91 = (uint64_t *)(v90 + *(int *)(v134 + 36));
  *uint64_t v91 = v89;
  v91[1] = v88;
  sub_10000F024(v86, &qword_1000A7518);
  (*(void (**)(char *, void, uint64_t))(v148 + 104))(v147, enum case for Color.RGBColorSpace.sRGBLinear(_:), v149);
  uint64_t v92 = sub_10008A030();
  uint64_t v93 = v146;
  sub_10000F148(v90, v146, &qword_1000A7520);
  uint64_t v94 = (uint64_t *)(v93 + *(int *)(v140 + 36));
  *uint64_t v94 = v92;
  v94[1] = 0x3FF0000000000000;
  v94[2] = 0;
  v94[3] = 0;
  sub_10000F024(v90, &qword_1000A7520);
  uint64_t v95 = swift_getKeyPath();
  uint64_t v96 = (uint64_t)v156;
  sub_10000F148(v93, (uint64_t)v156, &qword_1000A7528);
  uint64_t v97 = v96 + *(int *)(v141 + 36);
  *(void *)uint64_t v97 = v95;
  *(unsigned char *)(v97 + 8) = 1;
  sub_10000F024(v93, &qword_1000A7528);
  sub_100027078(v96, (uint64_t)v155, &qword_1000A7530);
  sub_100083A28(1);
  uint64_t v161 = v98;
  uint64_t v162 = v99;
  uint64_t v100 = sub_100089E40();
  uint64_t v102 = v101;
  LOBYTE(v86) = v103 & 1;
  sub_100089C00();
  uint64_t v104 = sub_100089DB0();
  uint64_t v106 = v105;
  LOBYTE(v76) = v107;
  swift_release();
  sub_10000B7E0(v100, v102, v86);
  swift_bridgeObjectRelease();
  sub_10008A000();
  uint64_t v108 = sub_100089D70();
  uint64_t v110 = v109;
  LOBYTE(v77) = v111;
  uint64_t v113 = v112;
  swift_release();
  LOBYTE(v77) = v77 & 1;
  sub_10000B7E0(v104, v106, v76 & 1);
  swift_bridgeObjectRelease();
  uint64_t v114 = swift_getKeyPath();
  uint64_t v115 = swift_getKeyPath();
  uint64_t v161 = v108;
  uint64_t v162 = v110;
  char v163 = v77;
  uint64_t v164 = v113;
  uint64_t v165 = v114;
  uint64_t v166 = 0x3FE3333333333333;
  uint64_t v167 = v115;
  uint64_t v168 = 1;
  LOBYTE(v169) = 0;
  char v116 = sub_100005184();
  sub_100083A28(v116 & 1);
  uint64_t v159 = v117;
  uint64_t v160 = v118;
  sub_10000697C(&qword_1000A7540);
  sub_100070800();
  uint64_t v119 = (uint64_t)v151;
  sub_100089F00();
  swift_bridgeObjectRelease();
  sub_10000B7E0(v108, v110, v77);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v120 = (uint64_t)v154;
  uint64_t v121 = (uint64_t)v150;
  sub_10000F148((uint64_t)v154, (uint64_t)v150, &qword_1000A7538);
  uint64_t v122 = (uint64_t)v155;
  uint64_t v123 = (uint64_t)v156;
  sub_10000F148((uint64_t)v155, (uint64_t)v156, &qword_1000A7530);
  uint64_t v124 = (uint64_t)v153;
  sub_10000F148(v119, (uint64_t)v153, &qword_1000A7510);
  uint64_t v125 = v152;
  sub_10000F148(v121, v152, &qword_1000A7538);
  uint64_t v126 = sub_10000697C(&qword_1000A7550);
  sub_10000F148(v123, v125 + *(int *)(v126 + 48), &qword_1000A7530);
  sub_10000F148(v124, v125 + *(int *)(v126 + 64), &qword_1000A7510);
  sub_10000F024(v119, &qword_1000A7510);
  sub_10000F024(v122, &qword_1000A7530);
  sub_10000F024(v120, &qword_1000A7538);
  sub_100049F80((uint64_t)v157, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  sub_10000F024(v124, &qword_1000A7510);
  sub_10000F024(v123, &qword_1000A7530);
  return sub_10000F024(v121, &qword_1000A7538);
}

uint64_t sub_1000577E0()
{
  return sub_100089880();
}

uint64_t sub_100057804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100057830(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

uint64_t sub_100057830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_100057900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WorldClockRectangularSummary(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  *(void *)a2 = sub_10008A1B0();
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  sub_10000697C(&qword_1000A74A0);
  long long v11 = xmmword_100099850;
  swift_getKeyPath();
  sub_100049F18(a1, (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WorldClockRectangularSummary);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  sub_10004A544((uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, type metadata accessor for WorldClockRectangularSummary);
  sub_10000697C(&qword_1000A74A8);
  sub_10000697C(&qword_1000A74B0);
  sub_10007057C();
  sub_10001845C(&qword_1000A74C8, &qword_1000A74B0);
  return sub_10008A130();
}

uint64_t sub_100057AF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for WorldClockCity();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v11 = type metadata accessor for WorldClockEntry();
  if (v10 < 0 || (uint64_t v12 = *(void *)(a2 + *(int *)(v11 + 20)), v10 >= *(void *)(v12 + 16))) {
    sub_10008435C((uint64_t)v9);
  }
  else {
    sub_100049F18(v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v10, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  }
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  uint64_t v13 = sub_10000697C(&qword_1000A74B0);
  sub_100057C4C((uint64_t)v9, a3 + *(int *)(v13 + 36));
  return sub_100049F80((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
}

uint64_t sub_100057C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v133 = a2;
  uint64_t v134 = a1;
  uint64_t v131 = sub_100089F90();
  uint64_t v129 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v128 = (char *)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000697C(&qword_1000A73D0) - 8;
  __chkstk_darwin(v123);
  uint64_t v120 = (uint64_t *)((char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v119 = sub_100089480();
  uint64_t v117 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v115 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v110 = (uint64_t)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_10000697C(&qword_1000A73D8) - 8;
  __chkstk_darwin(v114);
  uint64_t v113 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000697C(&qword_1000A74D0) - 8;
  __chkstk_darwin(v121);
  uint64_t v116 = (uint64_t)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_10000697C(&qword_1000A74D8) - 8;
  __chkstk_darwin(v122);
  uint64_t v118 = (uint64_t)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_10000697C(&qword_1000A74E0) - 8;
  __chkstk_darwin(v125);
  uint64_t v124 = (uint64_t)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000697C(&qword_1000A74E8) - 8;
  __chkstk_darwin(v126);
  uint64_t v135 = (uint64_t)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v137 = (uint64_t)&v109 - v14;
  uint64_t v15 = sub_10000697C(&qword_1000A74F0);
  __chkstk_darwin(v15 - 8);
  uint64_t v132 = (uint64_t)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v130 = (uint64_t)&v109 - v18;
  __chkstk_darwin(v19);
  double v127 = (char *)&v109 - v20;
  __chkstk_darwin(v21);
  uint64_t v136 = (uint64_t)&v109 - v22;
  uint64_t v112 = type metadata accessor for WorldClockCity();
  uint64_t v23 = (uint64_t *)(a1 + *(int *)(v112 + 28));
  uint64_t v24 = v23[1];
  uint64_t v141 = *v23;
  uint64_t v142 = v24;
  unint64_t v138 = sub_100032F54();
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_100089E40();
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  sub_100089CF0();
  uint64_t v30 = sub_100089DB0();
  uint64_t v32 = v31;
  char v34 = v33;
  swift_release();
  char v35 = v34 & 1;
  sub_10000B7E0(v25, v27, v29);
  swift_bridgeObjectRelease();
  uint64_t v36 = sub_100089DA0();
  uint64_t v38 = v37;
  LOBYTE(v27) = v39 & 1;
  sub_10000B7E0(v30, v32, v35);
  swift_bridgeObjectRelease();
  sub_10008A000();
  uint64_t v40 = sub_100089D70();
  uint64_t v42 = v41;
  char v44 = v43;
  uint64_t v46 = v45;
  swift_release();
  sub_10000B7E0(v36, v38, v27);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v141 = v40;
  uint64_t v142 = v42;
  char v143 = v44 & 1;
  uint64_t v144 = v46;
  uint64_t v145 = KeyPath;
  uint64_t v146 = 0x3FE3333333333333;
  char v48 = (uint64_t *)(v134 + *(int *)(v112 + 24));
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  uint64_t v139 = v50;
  uint64_t v140 = v49;
  uint64_t v112 = sub_10000697C(&qword_1000A74F8);
  uint64_t v111 = sub_10005D5B0(&qword_1000A7500, &qword_1000A74F8, &qword_1000A60C0, &qword_1000A60C8);
  sub_100089F00();
  sub_10000B7E0(v40, v42, v44 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v51 = v110;
  sub_100083900(v110);
  uint64_t v52 = sub_100089580();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 0, 1, v52);
  uint64_t v53 = sub_100089D90();
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  LOBYTE(v42) = v58 & 1;
  uint64_t v59 = swift_getKeyPath();
  uint64_t v60 = v115;
  sub_100089440();
  uint64_t v61 = v120;
  uint64_t v62 = v117;
  uint64_t v63 = v119;
  (*(void (**)(char *, char *, uint64_t))(v117 + 16))((char *)v120 + *(int *)(v123 + 36), v60, v119);
  uint64_t v64 = (uint64_t)v61;
  uint64_t *v61 = v59;
  uint64_t v65 = (uint64_t)v113;
  sub_10000F148(v64, (uint64_t)&v113[*(int *)(v114 + 44)], &qword_1000A73D0);
  *(void *)uint64_t v65 = v53;
  *(void *)(v65 + 8) = v55;
  *(unsigned char *)(v65 + 16) = v42;
  *(void *)(v65 + 24) = v57;
  sub_10005D5A0(v53, v55, v42);
  swift_bridgeObjectRetain();
  sub_10000F024(v64, &qword_1000A73D0);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v63);
  sub_10000B7E0(v53, v55, v42);
  swift_bridgeObjectRelease();
  uint64_t v66 = sub_100089C00();
  uint64_t v67 = swift_getKeyPath();
  uint64_t v68 = v116;
  sub_10000F148(v65, v116, &qword_1000A73D8);
  uint64_t v69 = (uint64_t *)(v68 + *(int *)(v121 + 44));
  *uint64_t v69 = v67;
  v69[1] = v66;
  sub_10000F024(v65, &qword_1000A73D8);
  uint64_t v70 = sub_10008A000();
  uint64_t v71 = swift_getKeyPath();
  uint64_t v72 = v118;
  sub_10000F148(v68, v118, &qword_1000A74D0);
  uint64_t v73 = (uint64_t *)(v72 + *(int *)(v122 + 44));
  uint64_t *v73 = v71;
  v73[1] = v70;
  sub_10000F024(v68, &qword_1000A74D0);
  (*(void (**)(char *, void, uint64_t))(v129 + 104))(v128, enum case for Color.RGBColorSpace.sRGBLinear(_:), v131);
  uint64_t v74 = sub_10008A030();
  uint64_t v75 = v124;
  sub_10000F148(v72, v124, &qword_1000A74D8);
  uint64_t v76 = (uint64_t *)(v75 + *(int *)(v125 + 44));
  uint64_t *v76 = v74;
  v76[1] = 0x3FF0000000000000;
  v76[2] = 0;
  v76[3] = 0;
  sub_10000F024(v72, &qword_1000A74D8);
  uint64_t v77 = swift_getKeyPath();
  uint64_t v78 = v135;
  sub_10000F148(v75, v135, &qword_1000A74E0);
  uint64_t v79 = v78 + *(int *)(v126 + 44);
  *(void *)uint64_t v79 = v77;
  *(unsigned char *)(v79 + 8) = 1;
  sub_10000F024(v75, &qword_1000A74E0);
  sub_100027078(v78, v137, &qword_1000A74E8);
  sub_100083A28(1);
  uint64_t v141 = v80;
  uint64_t v142 = v81;
  uint64_t v82 = sub_100089E40();
  uint64_t v84 = v83;
  LOBYTE(v68) = v85 & 1;
  sub_100089C00();
  uint64_t v86 = sub_100089DB0();
  uint64_t v88 = v87;
  LOBYTE(v60) = v89;
  swift_release();
  LOBYTE(v72) = v60 & 1;
  sub_10000B7E0(v82, v84, v68);
  swift_bridgeObjectRelease();
  sub_10008A000();
  uint64_t v90 = sub_100089D70();
  uint64_t v92 = v91;
  LOBYTE(v60) = v93;
  uint64_t v95 = v94;
  swift_release();
  LOBYTE(v60) = v60 & 1;
  sub_10000B7E0(v86, v88, v72);
  swift_bridgeObjectRelease();
  uint64_t v96 = swift_getKeyPath();
  uint64_t v141 = v90;
  uint64_t v142 = v92;
  char v143 = (char)v60;
  uint64_t v144 = v95;
  uint64_t v145 = v96;
  uint64_t v146 = 0x3FE3333333333333;
  char v97 = sub_100005184();
  sub_100083A28(v97 & 1);
  uint64_t v139 = v98;
  uint64_t v140 = v99;
  uint64_t v100 = (uint64_t)v127;
  sub_100089F00();
  swift_bridgeObjectRelease();
  sub_10000B7E0(v90, v92, (char)v60);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v101 = v136;
  uint64_t v102 = v130;
  sub_10000F148(v136, v130, &qword_1000A74F0);
  uint64_t v103 = v137;
  uint64_t v104 = v135;
  sub_10000F148(v137, v135, &qword_1000A74E8);
  uint64_t v105 = v132;
  sub_10000F148(v100, v132, &qword_1000A74F0);
  uint64_t v106 = v133;
  sub_10000F148(v102, v133, &qword_1000A74F0);
  uint64_t v107 = sub_10000697C(&qword_1000A7508);
  sub_10000F148(v104, v106 + *(int *)(v107 + 48), &qword_1000A74E8);
  sub_10000F148(v105, v106 + *(int *)(v107 + 64), &qword_1000A74F0);
  sub_10000F024(v100, &qword_1000A74F0);
  sub_10000F024(v103, &qword_1000A74E8);
  sub_10000F024(v101, &qword_1000A74F0);
  sub_10000F024(v105, &qword_1000A74F0);
  sub_10000F024(v104, &qword_1000A74E8);
  return sub_10000F024(v102, &qword_1000A74F0);
}

uint64_t sub_100058860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10008A170();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (long long *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10004A544(a1, a2, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  uint64_t v13 = *(int *)(type metadata accessor for WorldClockRectangularSummary(0) + 20);
  sub_10000697C(&qword_1000A61C0);
  sub_10008A180();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100097E50;
  long long v14 = xmmword_100099840;
  *uint64_t v7 = xmmword_100099840;
  uint64_t v9 = enum case for GridItem.Size.flexible(_:);
  uint64_t v10 = *(void (**)(long long *, uint64_t, uint64_t))(v5 + 104);
  v10(v7, enum case for GridItem.Size.flexible(_:), v4);
  sub_10008A1A0();
  sub_10008A190();
  *uint64_t v7 = v14;
  v10(v7, v9, v4);
  sub_10008A1A0();
  sub_10008A190();
  *uint64_t v7 = v14;
  v10(v7, v9, v4);
  sub_10008A1A0();
  uint64_t result = sub_10008A190();
  *(void *)(a2 + v13) = v8;
  return result;
}

uint64_t sub_100058ADC@<X0>(uint64_t a1@<X8>)
{
  return sub_100033660(&qword_1000A4FF0, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010008B250, a1);
}

uint64_t sub_100058B48@<X0>(uint64_t a1@<X8>)
{
  return sub_10003E768(type metadata accessor for ClockCircularAnalogueComplication, a1);
}

uint64_t sub_100058B60()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularAnalogueComplication(0) + 28));
}

uint64_t sub_100058B84(char a1)
{
  uint64_t result = type metadata accessor for ClockCircularAnalogueComplication(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100058BB4())(void)
{
  return nullsub_1;
}

uint64_t sub_100058BFC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularAnalogueComplication(0) + 32));
}

uint64_t sub_100058C20(char a1)
{
  uint64_t result = type metadata accessor for ClockCircularAnalogueComplication(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100058C50())(void)
{
  return nullsub_1;
}

uint64_t sub_100058C98()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularAnalogueComplication(0) + 36));
}

uint64_t sub_100058CBC(char a1)
{
  uint64_t result = type metadata accessor for ClockCircularAnalogueComplication(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100058CEC())(void)
{
  return nullsub_1;
}

uint64_t sub_100058D34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v2 = sub_100089B10();
  uint64_t v28 = *(void *)(v2 - 8);
  uint64_t v29 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A6218);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000697C(&qword_1000A6220);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000697C(&qword_1000A6228);
  uint64_t v11 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000697C(&qword_1000A6230);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010E90((uint64_t)v19);
  *uint64_t v7 = sub_10008A1B0();
  v7[1] = v20;
  uint64_t v21 = sub_10000697C(&qword_1000A6238);
  sub_10005910C(v1, (uint64_t)v19, (char *)v7 + *(int *)(v21 + 44));
  sub_10008A1B0();
  sub_100089720();
  sub_10000F148((uint64_t)v7, (uint64_t)v10, &qword_1000A6218);
  uint64_t v22 = &v10[*(int *)(v8 + 36)];
  long long v23 = v34;
  *(_OWORD *)uint64_t v22 = v33;
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = v35;
  sub_10000F024((uint64_t)v7, &qword_1000A6218);
  sub_100089B00();
  unint64_t v24 = sub_10005D420();
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v29);
  sub_10000F024((uint64_t)v10, &qword_1000A6220);
  type metadata accessor for ClockCircularAnalogueComplication(0);
  uint64_t v31 = v8;
  unint64_t v32 = v24;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = v27;
  sub_100089F10();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v25);
  sub_100027078((uint64_t)v16, v30, &qword_1000A6230);
  return sub_100049F80((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
}

uint64_t sub_10005910C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v78 = a3;
  uint64_t v4 = (int *)type metadata accessor for Clock(0);
  __chkstk_darwin(v4);
  uint64_t v79 = (uint64_t)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v70 - v7;
  uint64_t v9 = sub_10000697C(&qword_1000A7440);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000697C(&qword_1000A7448);
  __chkstk_darwin(v71);
  uint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000697C(&qword_1000A7450);
  __chkstk_darwin(v14 - 8);
  uint64_t v83 = (uint64_t)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v82 = (uint64_t)&v70 - v17;
  uint64_t v18 = sub_10008A050();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10008A210();
  uint64_t v76 = *(void *)(v22 - 8);
  uint64_t v77 = v22;
  __chkstk_darwin(v22);
  uint64_t v75 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v81 = (char *)&v70 - v25;
  sub_10008A200();
  uint64_t v26 = type metadata accessor for ClockCircularAnalogueComplication(0);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v80 = v26;
  uint64_t v29 = a1;
  uint64_t v70 = *(int *)(v26 + 28);
  if ((*(unsigned char *)(a1 + v70) & 1) == 0)
  {
    sub_10008A0A0();
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, enum case for Image.ResizingMode.stretch(_:), v18);
    uint64_t v27 = sub_10008A090();
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    uint64_t v28 = 0x3FE8000000000000;
  }
  uint64_t v72 = v27;
  uint64_t v73 = v28;
  *(void *)uint64_t v11 = sub_100089A00();
  *((void *)v11 + 1) = 0;
  v11[16] = 1;
  uint64_t v30 = sub_10000697C(&qword_1000A7458);
  sub_100059924(a1, v74, (uint64_t)&v11[*(int *)(v30 + 44)]);
  uint64_t v31 = (void *)(a1 + *(int *)(v80 + 24));
  uint64_t v33 = v31[3];
  uint64_t v32 = v31[4];
  sub_10005CC44((void *)(v29 + *(int *)(v80 + 24)), v33);
  double v34 = (*(double (**)(uint64_t, uint64_t))(v32 + 24))(v33, v32) * 0.446;
  char v35 = sub_100089B90();
  sub_10000F148((uint64_t)v11, (uint64_t)v13, &qword_1000A7440);
  uint64_t v36 = &v13[*(int *)(v71 + 36)];
  *uint64_t v36 = v35;
  *((void *)v36 + 1) = 0;
  *((void *)v36 + 2) = 0;
  *((double *)v36 + 3) = v34;
  *((void *)v36 + 4) = 0;
  v36[40] = 0;
  sub_10000F024((uint64_t)v11, &qword_1000A7440);
  uint64_t v37 = v31[3];
  uint64_t v38 = v31[4];
  sub_10005CC44(v31, v37);
  double v39 = (*(double (**)(uint64_t, uint64_t))(v38 + 24))(v37, v38);
  uint64_t v40 = v31[3];
  uint64_t v41 = v31[4];
  sub_10005CC44(v31, v40);
  double v42 = (*(double (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
  uint64_t v43 = sub_10008A1B0();
  uint64_t v44 = v83;
  sub_1000364B4(0.0, 1, 0.0, 1, v39, 0, 0.0, 1, v83, 0.0, 1, v42, 0, v43, v45, &qword_1000A7448, &qword_1000A7450);
  sub_10000F024((uint64_t)v13, &qword_1000A7448);
  uint64_t v46 = v82;
  sub_100027078(v44, v82, &qword_1000A7450);
  sub_100083900((uint64_t)&v8[v4[5]]);
  sub_10004A84C((uint64_t)v31, (uint64_t)&v8[v4[6]]);
  LOBYTE(v39) = *(unsigned char *)(v29 + v70);
  uint64_t v47 = &v8[v4[8]];
  uint64_t v48 = sub_1000893C0();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
  char v49 = *(unsigned char *)(v29 + *(int *)(v80 + 32));
  uint64_t v50 = sub_10008A000();
  uint64_t v51 = sub_100089FD0();
  uint64_t v52 = sub_10008A000();
  sub_10008A250();
  unsigned char *v8 = 1;
  v8[v4[7]] = LOBYTE(v39);
  v8[v4[9]] = v49;
  v8[v4[10]] = 0;
  uint64_t v53 = &v8[v4[11]];
  *(_OWORD *)uint64_t v53 = xmmword_100099860;
  *((void *)v53 + 2) = 0x3FA999999999999ALL;
  *((void *)v53 + 3) = v50;
  *((void *)v53 + 4) = v51;
  v53[40] = 0;
  *((void *)v53 + 6) = v52;
  *((void *)v53 + 7) = 0;
  v8[v4[12]] = 0;
  v8[v4[13]] = 1;
  uint64_t v54 = &v8[v4[15]];
  type metadata accessor for ClockWidgetEnvironmentObject();
  sub_10004A694((unint64_t *)&qword_1000A5258, (void (*)(uint64_t))type metadata accessor for ClockWidgetEnvironmentObject);
  *(void *)uint64_t v54 = sub_1000896B0();
  v54[8] = v55 & 1;
  uint64_t v57 = v75;
  uint64_t v56 = v76;
  char v58 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  uint64_t v59 = v77;
  v58(v75, v81, v77);
  uint64_t v60 = v46;
  uint64_t v61 = (uint64_t)v8;
  uint64_t v62 = v83;
  sub_10000F148(v60, v83, &qword_1000A7450);
  uint64_t v63 = v79;
  sub_100049F18(v61, v79, type metadata accessor for Clock);
  uint64_t v64 = v78;
  v58(v78, v57, v59);
  uint64_t v65 = (int *)sub_10000697C(&qword_1000A7460);
  uint64_t v66 = (uint64_t *)&v64[v65[12]];
  uint64_t v67 = v73;
  *uint64_t v66 = v72;
  v66[1] = v67;
  sub_10000F148(v62, (uint64_t)&v64[v65[16]], &qword_1000A7450);
  sub_100049F18(v63, (uint64_t)&v64[v65[20]], type metadata accessor for Clock);
  swift_retain();
  sub_100049F80(v61, type metadata accessor for Clock);
  sub_10000F024(v82, &qword_1000A7450);
  uint64_t v68 = *(void (**)(char *, uint64_t))(v56 + 8);
  v68(v81, v59);
  sub_100049F80(v63, type metadata accessor for Clock);
  sub_10000F024(v83, &qword_1000A7450);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v68)(v57, v59);
}

uint64_t sub_100059924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for ClockCircularAnalogueComplication(0) + 28)))
  {
    uint64_t v9 = sub_10000697C(&qword_1000A7498);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    return v10(a3, 1, 1, v9);
  }
  else
  {
    uint64_t v46 = type metadata accessor for WorldClockCity();
    uint64_t v12 = (uint64_t *)(a2 + *(int *)(v46 + 28));
    uint64_t v13 = v12[1];
    uint64_t v51 = *v12;
    uint64_t v52 = v13;
    unint64_t v47 = sub_100032F54();
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100089E40();
    uint64_t v45 = a2;
    uint64_t v16 = v15;
    char v18 = v17 & 1;
    sub_100089C60();
    uint64_t v19 = sub_100089D60();
    uint64_t v44 = v20;
    uint64_t v48 = v21;
    int v43 = v22 & 1;
    sub_10000B7E0(v14, v16, v18);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    v39[1] = KeyPath;
    uint64_t v24 = swift_getKeyPath();
    uint64_t v41 = sub_10008A000();
    uint64_t v40 = swift_getKeyPath();
    sub_100089C30();
    uint64_t v25 = enum case for Font.Design.default(_:);
    uint64_t v26 = sub_100089C20();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v42 = a3;
    uint64_t v28 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 104))(v8, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v8, 0, 1, v26);
    uint64_t v29 = sub_100089C70();
    v39[0] = v29;
    sub_10000F024((uint64_t)v8, &qword_1000A5B88);
    uint64_t v30 = swift_getKeyPath();
    uint64_t v31 = v19;
    uint64_t v51 = v19;
    uint64_t v32 = v44;
    uint64_t v52 = v44;
    char v33 = v43;
    char v53 = v43;
    uint64_t v54 = v48;
    uint64_t v55 = KeyPath;
    uint64_t v56 = 1;
    char v57 = 0;
    uint64_t v58 = v24;
    uint64_t v59 = 0x3FE3333333333333;
    uint64_t v60 = v40;
    uint64_t v61 = v41;
    uint64_t v62 = v30;
    uint64_t v63 = v29;
    double v34 = (uint64_t *)(v45 + *(int *)(v46 + 24));
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    uint64_t v49 = v36;
    uint64_t v50 = v35;
    sub_10000697C(&qword_1000A7468);
    sub_100070360();
    uint64_t v37 = v42;
    sub_100089F00();
    sub_10000B7E0(v31, v32, v33);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v38 = sub_10000697C(&qword_1000A7498);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 0, 1, v38);
  }
}

double sub_100059D40@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10008A000();
  uint64_t v3 = sub_100089FD0();
  uint64_t v4 = sub_10008A000();
  double result = 0.1;
  *(_OWORD *)a1 = xmmword_100099860;
  *(void *)(a1 + 16) = 0x3FA999999999999ALL;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_100059DA4@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  sub_10000697C(a1);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100059DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  sub_10004A544(a1, a7, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  uint64_t v13 = (int *)type metadata accessor for ClockCircularAnalogueComplication(0);
  sub_100027078(a2, a7 + v13[5], &qword_1000A4B70);
  uint64_t result = sub_100049F00(a3, a7 + v13[6]);
  *(unsigned char *)(a7 + v13[7]) = a4;
  *(unsigned char *)(a7 + v13[8]) = a5;
  *(unsigned char *)(a7 + v13[9]) = a6;
  return result;
}

uint64_t sub_100059EAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClockCircularDigitalComplication(0) + 20);

  return sub_10004A84C(v3, a1);
}

uint64_t sub_100059EF0()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularDigitalComplication(0) + 24));
}

uint64_t sub_100059F14(char a1)
{
  uint64_t result = type metadata accessor for ClockCircularDigitalComplication(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100059F44())(void)
{
  return nullsub_1;
}

uint64_t sub_100059F8C()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularDigitalComplication(0) + 28));
}

uint64_t sub_100059FB0(char a1)
{
  uint64_t result = type metadata accessor for ClockCircularDigitalComplication(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100059FE0())(void)
{
  return nullsub_1;
}

uint64_t sub_10005A028()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularDigitalComplication(0) + 32));
}

uint64_t sub_10005A04C(char a1)
{
  uint64_t result = type metadata accessor for ClockCircularDigitalComplication(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10005A07C())(void)
{
  return nullsub_1;
}

uint64_t sub_10005A0C8@<X0>(uint64_t a1@<X8>)
{
  void v22[2] = a1;
  uint64_t v1 = type metadata accessor for WorldClockCity();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010E90((uint64_t)v4);
  uint64_t v5 = (uint64_t *)&v4[*(int *)(v2 + 36)];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  swift_bridgeObjectRetain();
  sub_100049F80((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  uint64_t v23 = v6;
  uint64_t v24 = v7;
  v22[1] = sub_100032F54();
  uint64_t v8 = sub_100089E40();
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t v14 = v13;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v16 = sub_100089CB0();
  uint64_t v17 = swift_getKeyPath();
  uint64_t v23 = v8;
  uint64_t v24 = v10;
  char v25 = v12 & 1;
  uint64_t v26 = v14;
  uint64_t v27 = KeyPath;
  uint64_t v28 = 1;
  char v29 = 0;
  uint64_t v30 = v17;
  uint64_t v31 = v16;
  sub_100010E90((uint64_t)v4);
  char v18 = &v4[*(int *)(v2 + 32)];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  swift_bridgeObjectRetain();
  sub_100049F80((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  v22[3] = v20;
  v22[4] = v19;
  sub_10000697C(&qword_1000A6250);
  sub_10005D4E0();
  sub_100089F00();
  swift_bridgeObjectRelease();
  sub_10000B7E0(v23, v24, v25);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10005A2A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100089480();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100031718();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  char v13 = sub_1000317AC();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v13)
  {
    uint64_t v31 = 0;
    char v32 = 1;
    uint64_t result = sub_100089AB0();
  }
  else
  {
    sub_100010E90((uint64_t)v4);
    sub_100083900((uint64_t)v7);
    sub_100049F80((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
    uint64_t v15 = sub_100089580();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 0, 1, v15);
    uint64_t v16 = sub_100089D50();
    uint64_t v18 = v17;
    char v20 = v19 & 1;
    sub_100089CB0();
    uint64_t v21 = sub_100089DB0();
    uint64_t v23 = v22;
    char v25 = v24;
    uint64_t v27 = v26;
    swift_release();
    sub_10000B7E0(v16, v18, v20);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v33 = v21;
    uint64_t v34 = v23;
    char v35 = v25 & 1;
    uint64_t v36 = v27;
    uint64_t v37 = KeyPath;
    char v38 = 1;
    sub_10005D5A0(v21, v23, v25 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10000697C(&qword_1000A6280);
    sub_10005D5B0(&qword_1000A6288, &qword_1000A6280, &qword_1000A60D0, &qword_1000A60D8);
    uint64_t v31 = sub_10008A120();
    char v32 = 0;
    sub_100089AB0();
    sub_10000B7E0(v21, v23, v25 & 1);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  char v29 = v34;
  *(void *)a1 = v33;
  *(unsigned char *)(a1 + 8) = v29;
  return result;
}

uint64_t sub_10005A648@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v32 = a1;
  uint64_t v3 = sub_100089B10();
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A6290);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000697C(&qword_1000A6298);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000697C(&qword_1000A62A0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000697C(&qword_1000A62A8);
  uint64_t v16 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t *v8 = sub_10008A1B0();
  v8[1] = v19;
  uint64_t v20 = sub_10000697C(&qword_1000A62B0);
  sub_10005AA14(v2, (char *)v8 + *(int *)(v20 + 44));
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000F148((uint64_t)v8, (uint64_t)v12, &qword_1000A6290);
  uint64_t v22 = (uint64_t *)&v12[*(int *)(v10 + 44)];
  *uint64_t v22 = KeyPath;
  v22[1] = 0x3FE8000000000000;
  sub_10000F024((uint64_t)v8, &qword_1000A6290);
  sub_10008A1B0();
  sub_100089720();
  sub_10000F148((uint64_t)v12, (uint64_t)v15, &qword_1000A6298);
  uint64_t v23 = &v15[*(int *)(v13 + 36)];
  long long v24 = v36;
  *(_OWORD *)uint64_t v23 = v35;
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v37;
  sub_10000F024((uint64_t)v12, &qword_1000A6298);
  sub_100089B00();
  uint64_t v25 = sub_10005D64C(&qword_1000A62B8, &qword_1000A62A0, (void (*)(void))sub_10005D6C8);
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v31);
  sub_10000F024((uint64_t)v15, &qword_1000A62A0);
  type metadata accessor for ClockCircularDigitalComplication(0);
  uint64_t v33 = v13;
  uint64_t v34 = v25;
  swift_getOpaqueTypeConformance2();
  uint64_t v26 = v29;
  sub_100089F10();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v26);
}

uint64_t sub_10005AA14@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_10000697C(&qword_1000A73F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = sub_10008A210();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v22 - v15;
  sub_10008A200();
  *(void *)uint64_t v9 = sub_100089A00();
  *((void *)v9 + 1) = 0;
  unsigned char v9[16] = 0;
  uint64_t v17 = sub_10000697C(&qword_1000A73F8);
  sub_10005AC3C(a1, &v9[*(int *)(v17 + 44)]);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v18(v13, v16, v10);
  sub_10000F148((uint64_t)v9, (uint64_t)v6, &qword_1000A73F0);
  v18(a2, v13, v10);
  uint64_t v19 = sub_10000697C(&qword_1000A7400);
  sub_10000F148((uint64_t)v6, (uint64_t)&a2[*(int *)(v19 + 48)], &qword_1000A73F0);
  sub_10000F024((uint64_t)v9, &qword_1000A73F0);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v16, v10);
  sub_10000F024((uint64_t)v6, &qword_1000A73F0);
  return ((uint64_t (*)(char *, uint64_t))v20)(v13, v10);
}

uint64_t sub_10005AC3C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v97 = a1;
  uint64_t v92 = sub_10000697C(&qword_1000A7408);
  __chkstk_darwin(v92);
  char v93 = (char **)((char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = sub_10000697C(&qword_1000A7410);
  __chkstk_darwin(v3 - 8);
  uint64_t v95 = (uint64_t)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v94 = (char *)&v75 - v6;
  uint64_t v85 = sub_10000697C(&qword_1000A73D0);
  __chkstk_darwin(v85);
  uint64_t v88 = (uint64_t *)((char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v8 - 8);
  uint64_t v79 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v10 - 8);
  uint64_t v80 = (uint64_t)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000697C(&qword_1000A7418);
  __chkstk_darwin(v87);
  uint64_t v81 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v86 = (uint64_t)&v75 - v14;
  uint64_t v15 = sub_10000697C(&qword_1000A7388);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000697C(&qword_1000A7420);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000697C(&qword_1000A7428);
  __chkstk_darwin(v21 - 8);
  uint64_t v91 = (uint64_t)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v75 - v24;
  uint64_t v26 = sub_100089480();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v75 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v75 - v31;
  uint64_t v33 = sub_100031718();
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  uint64_t v77 = v27 + 16;
  uint64_t v76 = v34;
  v34(v32, (char *)v33, v26);
  int v35 = sub_100032C64();
  long long v36 = *(void (**)(char *, uint64_t))(v27 + 8);
  uint64_t v82 = v27 + 8;
  uint64_t v83 = v26;
  uint64_t v78 = v36;
  v36(v32, v26);
  int v84 = v35;
  uint64_t v89 = v15;
  uint64_t v90 = v25;
  uint64_t v75 = v17;
  if (v35)
  {
    sub_10005A2A4((uint64_t)&v98);
    char v37 = v99;
    *(void *)uint64_t v20 = v98;
    v20[8] = v37;
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7398);
    sub_10006FCDC();
    sub_10006FC2C();
    sub_100089AB0();
  }
  else
  {
    sub_10005A0C8((uint64_t)v17);
    sub_10000F148((uint64_t)v17, (uint64_t)v20, &qword_1000A7388);
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7398);
    sub_10006FCDC();
    sub_10006FC2C();
    sub_100089AB0();
    sub_10000F024((uint64_t)v17, &qword_1000A7388);
  }
  uint64_t v38 = v79;
  sub_100010E90(v79);
  uint64_t v39 = v80;
  sub_100083900(v80);
  sub_100049F80(v38, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  uint64_t v40 = sub_100089580();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
  uint64_t v41 = sub_100089D90();
  uint64_t v43 = v42;
  char v45 = v44 & 1;
  sub_100089C00();
  uint64_t v46 = sub_100089DB0();
  uint64_t v48 = v47;
  LOBYTE(v38) = v49;
  swift_release();
  sub_10000B7E0(v41, v43, v45);
  swift_bridgeObjectRelease();
  sub_100089C40();
  uint64_t v50 = sub_100089D60();
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  char v56 = v55 & 1;
  sub_10000B7E0(v46, v48, v38 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v58 = swift_getKeyPath();
  sub_100089440();
  uint64_t v59 = v88;
  uint64_t v60 = v83;
  v76((char *)v88 + *(int *)(v85 + 28), v29, v83);
  *uint64_t v59 = v58;
  uint64_t v61 = (uint64_t)v81;
  sub_10000F148((uint64_t)v59, (uint64_t)&v81[*(int *)(v87 + 36)], &qword_1000A73D0);
  *(void *)uint64_t v61 = v50;
  *(void *)(v61 + 8) = v52;
  *(unsigned char *)(v61 + 16) = v56;
  *(void *)(v61 + 24) = v54;
  *(void *)(v61 + 32) = KeyPath;
  *(unsigned char *)(v61 + 40) = 1;
  sub_10005D5A0(v50, v52, v56);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000F024((uint64_t)v59, &qword_1000A73D0);
  v78(v29, v60);
  sub_10000B7E0(v50, v52, v56);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v62 = v86;
  sub_100027078(v61, v86, &qword_1000A7418);
  sub_10000F148(v62, v61, &qword_1000A7418);
  sub_1000702A0();
  uint64_t v63 = sub_10008A120();
  sub_10000F024(v62, &qword_1000A7418);
  if (v84)
  {
    uint64_t v67 = (uint64_t)v75;
    sub_10005A0C8((uint64_t)v75);
    sub_10000F148(v67, (uint64_t)v93, &qword_1000A7388);
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7398);
    sub_10006FC2C();
    sub_10006FCDC();
    uint64_t v66 = (uint64_t)v94;
    sub_100089AB0();
    sub_10000F024(v67, &qword_1000A7388);
  }
  else
  {
    sub_10005A2A4((uint64_t)&v98);
    char v64 = v99;
    uint64_t v65 = v93;
    void *v93 = v98;
    *((unsigned char *)v65 + 8) = v64;
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7398);
    sub_10006FC2C();
    sub_10006FCDC();
    uint64_t v66 = (uint64_t)v94;
    sub_100089AB0();
  }
  uint64_t v69 = (uint64_t)v90;
  uint64_t v68 = v91;
  sub_10000F148((uint64_t)v90, v91, &qword_1000A7428);
  uint64_t v70 = v95;
  sub_10000F148(v66, v95, &qword_1000A7410);
  uint64_t v71 = v96;
  void *v96 = 0;
  *((unsigned char *)v71 + 8) = 1;
  uint64_t v72 = (int *)sub_10000697C(&qword_1000A7438);
  sub_10000F148(v68, (uint64_t)v71 + v72[12], &qword_1000A7428);
  *(void *)((char *)v71 + v72[16]) = v63;
  sub_10000F148(v70, (uint64_t)v71 + v72[20], &qword_1000A7410);
  uint64_t v73 = (char *)v71 + v72[24];
  *(void *)uint64_t v73 = 0;
  v73[8] = 1;
  swift_retain();
  sub_10000F024(v66, &qword_1000A7410);
  sub_10000F024(v69, &qword_1000A7428);
  sub_10000F024(v70, &qword_1000A7410);
  swift_release();
  return sub_10000F024(v68, &qword_1000A7428);
}

uint64_t sub_10005B618@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  sub_10004A544(a1, a6, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
  uint64_t v11 = (int *)type metadata accessor for ClockCircularDigitalComplication(0);
  uint64_t result = sub_100049F00(a2, a6 + v11[5]);
  *(unsigned char *)(a6 + v11[6]) = a3;
  *(unsigned char *)(a6 + v11[7]) = a4;
  *(unsigned char *)(a6 + v11[8]) = a5;
  return result;
}

uint64_t sub_10005B6AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v1 = sub_100089B10();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A62D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100089930();
  sub_10005B910(&v16);
  uint64_t v10 = v16;
  unint64_t v11 = v17;
  sub_10008A1B0();
  sub_100089720();
  uint64_t v16 = v9;
  unint64_t v17 = 0;
  char v18 = 1;
  uint64_t v19 = v10;
  unint64_t v20 = v11;
  uint64_t v21 = v26;
  char v22 = v27;
  uint64_t v23 = v28;
  char v24 = v29;
  long long v25 = v30;
  sub_100089B00();
  uint64_t v12 = sub_10000697C(&qword_1000A62D8);
  unint64_t v13 = sub_10005D78C();
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_release();
  swift_release();
  uint64_t v16 = v12;
  unint64_t v17 = v13;
  swift_getOpaqueTypeConformance2();
  sub_100089F10();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005B910@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v1 = sub_10000697C(&qword_1000A73D0);
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  char v44 = (uint64_t *)((char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_100089480();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  __chkstk_darwin(v4);
  uint64_t v46 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for WorldClockCity();
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100089980();
  __chkstk_darwin(v13 - 8);
  uint64_t v51 = sub_10000697C(&qword_1000A73D8);
  __chkstk_darwin(v51);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v45 = (uint64_t)&v44 - v17;
  uint64_t v47 = sub_10008A070();
  sub_100089970();
  v52._countAndFlagsBits = 0;
  v52._object = (void *)0xE000000000000000;
  sub_100089960(v52);
  sub_100010E90((uint64_t)v12);
  char v18 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  uint64_t v19 = *v18;
  unint64_t v20 = (void *)v18[1];
  swift_bridgeObjectRetain();
  sub_100049F80((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  v53._countAndFlagsBits = v19;
  v53._object = v20;
  sub_100089950(v53);
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 32;
  v54._object = (void *)0xE100000000000000;
  sub_100089960(v54);
  sub_100010E90((uint64_t)v12);
  sub_100083900((uint64_t)v8);
  sub_100049F80((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
  uint64_t v21 = sub_100089580();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 0, 1, v21);
  uint64_t v22 = sub_100089D90();
  uint64_t v24 = v23;
  LOBYTE(v8) = v25 & 1;
  sub_100089940();
  sub_10000B7E0(v22, v24, (char)v8);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 0;
  v55._object = (void *)0xE000000000000000;
  sub_100089960(v55);
  sub_1000899A0();
  uint64_t v26 = sub_100089E20();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  LOBYTE(v8) = v31 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v33 = v46;
  sub_100089440();
  uint64_t v34 = v44;
  int v35 = (char *)v44 + *(int *)(v2 + 36);
  uint64_t v36 = v48;
  char v37 = v33;
  uint64_t v38 = v33;
  uint64_t v39 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v35, v37, v49);
  uint64_t *v34 = KeyPath;
  sub_10000F148((uint64_t)v34, (uint64_t)&v15[*(int *)(v51 + 36)], &qword_1000A73D0);
  *(void *)uint64_t v15 = v26;
  *((void *)v15 + 1) = v28;
  v15[16] = (char)v8;
  *((void *)v15 + 3) = v30;
  sub_10005D5A0(v26, v28, (char)v8);
  swift_bridgeObjectRetain();
  sub_10000F024((uint64_t)v34, &qword_1000A73D0);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v39);
  sub_10000B7E0(v26, v28, (char)v8);
  swift_bridgeObjectRelease();
  uint64_t v40 = v45;
  sub_100027078((uint64_t)v15, v45, &qword_1000A73D8);
  sub_10000F148(v40, (uint64_t)v15, &qword_1000A73D8);
  sub_10005D5B0(&qword_1000A73E0, &qword_1000A73D8, &qword_1000A73E8, &qword_1000A73D0);
  uint64_t v41 = sub_10008A120();
  uint64_t result = sub_10000F024(v40, &qword_1000A73D8);
  uint64_t v43 = v50;
  *uint64_t v50 = v47;
  v43[1] = v41;
  return result;
}

uint64_t sub_10005BE54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004A544(a1, a2, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
}

uint64_t sub_10005BE88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_100049F18(a1 + v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
        sub_100049F18(a2 + v12, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
        sub_10004A694(&qword_1000A79B8, (void (*)(uint64_t))type metadata accessor for WorldClockCity);
        char v15 = sub_10008A3C0();
        sub_100049F80((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
        sub_100049F80((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10005C06C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100089860();
  *a1 = result;
  return result;
}

uint64_t sub_10005C098()
{
  return sub_100089870();
}

uint64_t sub_10005C0C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000897E0();
  *a1 = result;
  return result;
}

uint64_t sub_10005C0F0()
{
  return sub_1000897F0();
}

uint64_t sub_10005C11C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1000898C0();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10005C150()
{
  return sub_1000898D0();
}

uint64_t sub_10005C180()
{
  return sub_100089820();
}

uint64_t sub_10005C1A4(uint64_t a1)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5F00);
  __chkstk_darwin(v2 - 8);
  sub_10000F148(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1000A5F00);
  return sub_100089830();
}

uint64_t type metadata accessor for ClockFace(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB610);
}

uint64_t type metadata accessor for ClockText(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB650);
}

uint64_t type metadata accessor for Clock(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB660);
}

uint64_t sub_10005C29C(uint64_t a1)
{
  return sub_100071F58(a1, type metadata accessor for SmallMultiWorldClockView, (uint64_t (*)(uint64_t, uint64_t))sub_10003B690);
}

size_t sub_10005C2C8(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000697C(&qword_1000A4BE8);
  uint64_t v10 = *(void *)(type metadata accessor for WorldClockCity() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for WorldClockCity() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

uint64_t sub_10005C4A0(uint64_t a1)
{
  return sub_100071F58(a1, type metadata accessor for MediumWorldClockView, (uint64_t (*)(uint64_t, uint64_t))sub_10003D264);
}

uint64_t type metadata accessor for ClockWidgetAccentableOpacity(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB620);
}

uint64_t type metadata accessor for MediumClockFaceView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB600);
}

unint64_t sub_10005C50C()
{
  unint64_t result = qword_1000A5F88;
  if (!qword_1000A5F88)
  {
    sub_10000B798(&qword_1000A5F70);
    sub_10001845C(&qword_1000A5F90, &qword_1000A5F68);
    sub_10001845C(&qword_1000A5F98, &qword_1000A5F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5F88);
  }
  return result;
}

uint64_t type metadata accessor for ClockWidgetAccentableForegroundColor(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB640);
}

uint64_t sub_10005C5F0@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100089800();
  *a1 = v3;
  return result;
}

uint64_t sub_10005C61C()
{
  return sub_100089810();
}

uint64_t sub_10005C644@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100089840();
  *a1 = result;
  return result;
}

uint64_t sub_10005C670()
{
  return sub_100089850();
}

BOOL sub_10005C698(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v3 = sub_1000899F0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
  v11((char *)&v19 - v9, a2, v3, v8);
  unint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v4 + 88);
  int v13 = v12(v10, v3);
  unint64_t v14 = 0;
  int v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      unint64_t v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      unint64_t v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:)) {
      goto LABEL_7;
    }
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      unint64_t v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      unint64_t v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      unint64_t v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      unint64_t v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      unint64_t v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      unint64_t v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      unint64_t v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
LABEL_7:
        unint64_t v14 = 3;
        goto LABEL_24;
      }
      unint64_t v14 = 11;
    }
  }
LABEL_24:
  ((void (*)(char *, uint64_t, uint64_t))v11)(v6, v20, v3);
  int v16 = v12(v6, v3);
  if (v16 == v15)
  {
    unint64_t v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    unint64_t v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    unint64_t v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        unint64_t v17 = 4;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        unint64_t v17 = 5;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        unint64_t v17 = 6;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        unint64_t v17 = 7;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        unint64_t v17 = 8;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        unint64_t v17 = 9;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        unint64_t v17 = 10;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        unint64_t v17 = 11;
        return v14 >= v17;
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    unint64_t v17 = 3;
  }
  return v14 >= v17;
}

uint64_t sub_10005CAB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10008A260();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  __n128 v8 = (char *)&v13 - v7;
  type metadata accessor for ClockFace(0);
  sub_100033660(&qword_1000A5E40, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008BE90, (uint64_t)v8);
  sub_10008A240();
  char v9 = sub_10008A220();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  v10(v8, v2);
  if (v9)
  {
    uint64_t v11 = sub_100015FBC();
  }
  else if (*(unsigned char *)(v1 + 8) == 1)
  {
    uint64_t v11 = sub_10001611C();
  }
  else
  {
    uint64_t v11 = sub_10001623C();
  }
  return *v11;
}

uint64_t sub_10005CC3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100049CE8(*(uint64_t **)(v1 + 16), a1);
}

void *sub_10005CC44(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10005CC88()
{
  unint64_t result = qword_1000A6078;
  if (!qword_1000A6078)
  {
    sub_10000B798(&qword_1000A6070);
    sub_10005D64C(&qword_1000A6080, &qword_1000A6088, (void (*)(void))sub_10005CD54);
    sub_10001845C(&qword_1000A60D0, &qword_1000A60D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6078);
  }
  return result;
}

unint64_t sub_10005CD54()
{
  unint64_t result = qword_1000A6090;
  if (!qword_1000A6090)
  {
    sub_10000B798(&qword_1000A6098);
    sub_10005CDF4();
    sub_10001845C(&qword_1000A60C0, &qword_1000A60C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6090);
  }
  return result;
}

unint64_t sub_10005CDF4()
{
  unint64_t result = qword_1000A60A0;
  if (!qword_1000A60A0)
  {
    sub_10000B798(&qword_1000A60A8);
    sub_10005CE90(&qword_1000A60B0, &qword_1000A60B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A60A0);
  }
  return result;
}

uint64_t sub_10005CE90(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005CF00(uint64_t a1)
{
  return a1;
}

unint64_t sub_10005CF60()
{
  unint64_t result = qword_1000A60F0;
  if (!qword_1000A60F0)
  {
    sub_10000B798(&qword_1000A60E8);
    sub_10005D000();
    sub_10001845C(&qword_1000A60C0, &qword_1000A60C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A60F0);
  }
  return result;
}

unint64_t sub_10005D000()
{
  unint64_t result = qword_1000A60F8;
  if (!qword_1000A60F8)
  {
    sub_10000B798(&qword_1000A6100);
    sub_10005D09C(&qword_1000A6108, &qword_1000A6110, &qword_1000A6118, &qword_1000A6120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A60F8);
  }
  return result;
}

uint64_t sub_10005D09C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    sub_10005CE90(&qword_1000A60B0, &qword_1000A60B8);
    sub_10001845C(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005D160(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005D1C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005D200(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for ClockUIConfig(a2, a1);
}

unint64_t sub_10005D210()
{
  unint64_t result = qword_1000A6170;
  if (!qword_1000A6170)
  {
    sub_10000B798(&qword_1000A6148);
    sub_10001845C(&qword_1000A6178, &qword_1000A6140);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6170);
  }
  return result;
}

uint64_t type metadata accessor for DigitalClockWidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB670);
}

uint64_t type metadata accessor for DateTimeWidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB680);
}

uint64_t type metadata accessor for NonNumericWidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB690);
}

uint64_t type metadata accessor for SquareWidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB6A0);
}

uint64_t type metadata accessor for WorldClockRectangularSummary(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB6B0);
}

uint64_t sub_10005D358()
{
  return sub_1000567E0(*(void *)(v0 + 16));
}

unint64_t sub_10005D360()
{
  unint64_t result = qword_1000A61E8;
  if (!qword_1000A61E8)
  {
    sub_10000B798(&qword_1000A61E0);
    sub_10001845C(&qword_1000A61F0, &qword_1000A61F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A61E8);
  }
  return result;
}

uint64_t sub_10005D3F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100057900(*(void *)(v1 + 16), a1);
}

uint64_t type metadata accessor for ClockCircularAnalogueComplication(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB6C0);
}

unint64_t sub_10005D420()
{
  unint64_t result = qword_1000A6240;
  if (!qword_1000A6240)
  {
    sub_10000B798(&qword_1000A6220);
    sub_10001845C(&qword_1000A6248, &qword_1000A6218);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6240);
  }
  return result;
}

uint64_t type metadata accessor for ClockCircularDigitalComplication(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB6D0);
}

unint64_t sub_10005D4E0()
{
  unint64_t result = qword_1000A6258;
  if (!qword_1000A6258)
  {
    sub_10000B798(&qword_1000A6250);
    sub_10005D5B0(&qword_1000A6260, &qword_1000A6268, &qword_1000A6118, &qword_1000A6120);
    sub_10001845C(&qword_1000A6270, &qword_1000A6278);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6258);
  }
  return result;
}

uint64_t sub_10005D5A0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10005D5B0(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    sub_10001845C(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005D64C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005D6C8()
{
  unint64_t result = qword_1000A62C0;
  if (!qword_1000A62C0)
  {
    sub_10000B798(&qword_1000A6298);
    sub_10001845C(&qword_1000A62C8, &qword_1000A6290);
    sub_10001845C(&qword_1000A60C0, &qword_1000A60C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A62C0);
  }
  return result;
}

unint64_t sub_10005D78C()
{
  unint64_t result = qword_1000A62E0;
  if (!qword_1000A62E0)
  {
    sub_10000B798(&qword_1000A62D8);
    sub_10001845C(&qword_1000A62E8, &qword_1000A62F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A62E0);
  }
  return result;
}

uint64_t sub_10005D82C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D848()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D864()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D880()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D89C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D8B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D8D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D8F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D90C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D928()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D944()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D960()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D97C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005D998()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10005D9B8()
{
  unint64_t result = qword_1000A62F8;
  if (!qword_1000A62F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A62F8);
  }
  return result;
}

unint64_t sub_10005DA10()
{
  unint64_t result = qword_1000A6300;
  if (!qword_1000A6300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6300);
  }
  return result;
}

unint64_t sub_10005DA68()
{
  unint64_t result = qword_1000A6308;
  if (!qword_1000A6308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6308);
  }
  return result;
}

uint64_t sub_10005DABC()
{
  return sub_10001845C(&qword_1000A6310, &qword_1000A6318);
}

unint64_t sub_10005DAFC()
{
  unint64_t result = qword_1000A6320;
  if (!qword_1000A6320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6320);
  }
  return result;
}

unint64_t sub_10005DB54()
{
  unint64_t result = qword_1000A6328;
  if (!qword_1000A6328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6328);
  }
  return result;
}

uint64_t sub_10005DBA8()
{
  return sub_10001845C(&qword_1000A6330, &qword_1000A6338);
}

uint64_t sub_10005DBE4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005DC00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005DC1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005DC38()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005DC54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005DC70()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005DC8C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005DCA8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005DCC4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005DCE0()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_10005DCFC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for WorldClockEntry();
    *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
    *((unsigned char *)a1 + *(int *)(v8 + 24)) = *((unsigned char *)a2 + *(int *)(v8 + 24));
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10008A280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    int v15 = (char *)a1 + v14;
    int v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)v16;
    char v18 = v16[8];
    sub_100033AF0(*(void *)v16, v18);
    *(void *)int v15 = v17;
    v15[8] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = sub_10008A260();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      void *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = a3[8];
    uint64_t v24 = (char *)a1 + v23;
    char v25 = (char *)a2 + v23;
    uint64_t v26 = *(void *)v25;
    LOBYTE(v25) = v25[8];
    *(void *)uint64_t v24 = v26;
    v24[8] = (char)v25;
  }
  swift_retain();
  return a1;
}

uint64_t sub_10005DF50(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[5];
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_10008A280();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  sub_100033AFC(*(void *)(a1 + a2[6]), *(unsigned char *)(a1 + a2[6] + 8));
  uint64_t v7 = a1 + a2[7];
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_10008A260();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10005E0CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_10008A280();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    void *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  sub_100033AF0(*(void *)v14, v16);
  *(void *)uint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v16;
  uint64_t v17 = a3[7];
  char v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_10008A260();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  else
  {
    void *v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  LOBYTE(v23) = *((unsigned char *)v23 + 8);
  *(void *)uint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = (_BYTE)v23;
  swift_retain();
  return a1;
}

uint64_t sub_10005E2D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (void *)(a2 + v8);
    sub_10000F024(a1 + v8, &qword_1000A4A58);
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_10008A280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      void *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  sub_100033AF0(*(void *)v14, v16);
  uint64_t v17 = *(void *)v13;
  char v18 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v16;
  sub_100033AFC(v17, v18);
  if (a1 != a2)
  {
    uint64_t v19 = a3[7];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (void *)(a2 + v19);
    sub_10000F024(a1 + v19, &qword_1000A5E40);
    sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = sub_10008A260();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      void *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v23 = a3[8];
  uint64_t v24 = a1 + v23;
  char v25 = (uint64_t *)(a2 + v23);
  uint64_t v26 = *v25;
  LOBYTE(v25) = *((unsigned char *)v25 + 8);
  *(void *)uint64_t v24 = v26;
  *(unsigned char *)(v24 + 8) = (_BYTE)v25;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10005E530(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_10008A280();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = (void *)(a1 + v14);
  char v18 = (const void *)(a2 + v14);
  uint64_t v19 = sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_10008A260();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  return a1;
}

uint64_t sub_10005E73C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_10000F024(a1 + v8, &qword_1000A4A58);
    uint64_t v11 = sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10008A280();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  LOBYTE(v15) = *((unsigned char *)v15 + 8);
  uint64_t v17 = *(void *)v14;
  char v18 = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = (_BYTE)v15;
  sub_100033AFC(v17, v18);
  if (a1 != a2)
  {
    uint64_t v19 = a3[7];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (const void *)(a2 + v19);
    sub_10000F024(a1 + v19, &qword_1000A5E40);
    uint64_t v22 = sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = sub_10008A260();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v27 = *v26;
  LOBYTE(v26) = *((unsigned char *)v26 + 8);
  *(void *)uint64_t v25 = v27;
  *(unsigned char *)(v25 + 8) = (_BYTE)v26;
  swift_release();
  return a1;
}

uint64_t sub_10005E99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E9B0);
}

uint64_t sub_10005E9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E9C8);
}

void sub_10005E9CC()
{
  type metadata accessor for WorldClockEntry();
  if (v0 <= 0x3F)
  {
    sub_100067010(319, (unint64_t *)&qword_1000A4AC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F)
    {
      sub_100067010(319, (unint64_t *)&unk_1000A6398, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

char *sub_10005EB38(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for WorldClockCity();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = sub_1000893C0();
    uint64_t v30 = *(void *)(v7 - 8);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
    v8(a1, a2, v7);
    a1[v6[5]] = a2[v6[5]];
    uint64_t v9 = v6[6];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    uint64_t v13 = v6[7];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    uint64_t v17 = v6[8];
    char v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)char v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    uint64_t v21 = v6[9];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v22, v23, v7);
    v8(&a1[v6[10]], &a2[v6[10]], v7);
    uint64_t v24 = v6[11];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(&a2[v24], 1, v7))
    {
      uint64_t v27 = sub_10000697C(&qword_1000A47F8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      v8(v25, v26, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v25, 0, 1, v7);
    }
    a1[v6[12]] = a2[v6[12]];
    a1[v6[13]] = a2[v6[13]];
  }
  return a1;
}

uint64_t sub_10005EDA0(uint64_t a1)
{
  uint64_t v2 = sub_1000893C0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(a1, v2);
  uint64_t v4 = (int *)type metadata accessor for WorldClockCity();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7(a1 + v4[9], v2);
  v7(a1 + v4[10], v2);
  uint64_t v5 = a1 + v4[11];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v7)(v5, v2);
  }
  return result;
}

char *sub_10005EF14(char *a1, char *a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v5 = *(void (**)(void *, const void *, uint64_t))(v27 + 16);
  v5(a1, a2, v4);
  uint64_t v6 = (int *)type metadata accessor for WorldClockCity();
  a1[v6[5]] = a2[v6[5]];
  uint64_t v7 = v6[6];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = *((void *)v9 + 1);
  *(void *)uint64_t v8 = *(void *)v9;
  *((void *)v8 + 1) = v10;
  uint64_t v11 = v6[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = v14;
  uint64_t v15 = v6[8];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = v18;
  uint64_t v19 = v6[9];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5(v20, v21, v4);
  v5(&a1[v6[10]], &a2[v6[10]], v4);
  uint64_t v22 = v6[11];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(&a2[v22], 1, v4))
  {
    uint64_t v25 = sub_10000697C(&qword_1000A47F8);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v5(v23, v24, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v4);
  }
  a1[v6[12]] = a2[v6[12]];
  a1[v6[13]] = a2[v6[13]];
  return a1;
}

char *sub_10005F12C(char *a1, char *a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  uint64_t v7 = (int *)type metadata accessor for WorldClockCity();
  a1[v7[5]] = a2[v7[5]];
  uint64_t v8 = v7[6];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = v7[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v7[8];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6(&a1[v7[9]], &a2[v7[9]], v4);
  uint64_t v24 = v6;
  v6(&a1[v7[10]], &a2[v7[10]], v4);
  uint64_t v17 = v7[11];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v6) = v20(&a1[v17], 1, v4);
  int v21 = v20(v19, 1, v4);
  if (!v6)
  {
    if (!v21)
    {
      v24(v18, v19, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v4);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_10000697C(&qword_1000A47F8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v18, v19, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
LABEL_7:
  a1[v7[12]] = a2[v7[12]];
  a1[v7[13]] = a2[v7[13]];
  return a1;
}

char *sub_10005F3DC(char *a1, char *a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  uint64_t v7 = (int *)type metadata accessor for WorldClockCity();
  a1[v7[5]] = a2[v7[5]];
  *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
  *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
  *(_OWORD *)&a1[v7[8]] = *(_OWORD *)&a2[v7[8]];
  v6(&a1[v7[9]], &a2[v7[9]], v4);
  v6(&a1[v7[10]], &a2[v7[10]], v4);
  uint64_t v8 = v7[11];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(&a2[v8], 1, v4))
  {
    uint64_t v11 = sub_10000697C(&qword_1000A47F8);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v6(v9, v10, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  a1[v7[12]] = a2[v7[12]];
  a1[v7[13]] = a2[v7[13]];
  return a1;
}

uint64_t sub_10005F5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  uint64_t v7 = (int *)type metadata accessor for WorldClockCity();
  *(unsigned char *)(a1 + v7[5]) = *(unsigned char *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  void *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = v7[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = v7[8];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v6(a1 + v7[9], a2 + v7[9], v4);
  v6(a1 + v7[10], a2 + v7[10], v4);
  uint64_t v23 = v7[11];
  uint64_t v24 = (const void *)(a2 + v23);
  char v31 = (void *)(a1 + v23);
  uint64_t v25 = *(uint64_t (**)(void))(v5 + 48);
  int v26 = v25();
  int v27 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v25)(v24, 1, v4);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v31, v24, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v31, 0, 1, v4);
      goto LABEL_9;
    }
    size_t v28 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v29 = v31;
  }
  else
  {
    if (!v27)
    {
      v6((uint64_t)v31, (uint64_t)v24, v4);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v31, v4);
    size_t v28 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v29 = v31;
  }
  memcpy(v29, v24, v28);
LABEL_9:
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  return a1;
}

uint64_t sub_10005F850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005F864);
}

uint64_t sub_10005F864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006DB28(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
}

uint64_t sub_10005F87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005F890);
}

uint64_t sub_10005F890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006DBC4(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
}

uint64_t type metadata accessor for ClockRectangularComplication(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000AB590);
}

uint64_t sub_10005F8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006DC70(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockCity);
}

void *sub_10005F8E0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for WorldClockEntry();
    *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
    *((unsigned char *)a1 + *(int *)(v8 + 24)) = *((unsigned char *)a2 + *(int *)(v8 + 24));
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10008A280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)v16;
    char v18 = v16[8];
    sub_100033AF0(*(void *)v16, v18);
    *(void *)uint64_t v15 = v17;
    v15[8] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = sub_10008A260();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      void *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10005FB20(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[5];
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_10008A280();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  sub_100033AFC(*(void *)(a1 + a2[6]), *(unsigned char *)(a1 + a2[6] + 8));
  uint64_t v7 = a1 + a2[7];
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_10008A260();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v9(v7, v8);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_10005FCA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_10008A280();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    void *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  sub_100033AF0(*(void *)v14, v16);
  *(void *)uint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v16;
  uint64_t v17 = a3[7];
  char v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_10008A260();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  else
  {
    void *v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10005FE90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (void *)(a2 + v8);
    sub_10000F024(a1 + v8, &qword_1000A4A58);
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_10008A280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      void *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  sub_100033AF0(*(void *)v14, v16);
  uint64_t v17 = *(void *)v13;
  char v18 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v16;
  sub_100033AFC(v17, v18);
  if (a1 != a2)
  {
    uint64_t v19 = a3[7];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (void *)(a2 + v19);
    sub_10000F024(a1 + v19, &qword_1000A5E40);
    sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = sub_10008A260();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      void *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000600C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_10008A280();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = (void *)(a1 + v14);
  char v18 = (const void *)(a2 + v14);
  uint64_t v19 = sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_10008A260();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000602B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_10000F024(a1 + v8, &qword_1000A4A58);
    uint64_t v11 = sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10008A280();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  LOBYTE(v15) = *((unsigned char *)v15 + 8);
  uint64_t v17 = *(void *)v14;
  char v18 = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = (_BYTE)v15;
  sub_100033AFC(v17, v18);
  if (a1 != a2)
  {
    uint64_t v19 = a3[7];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (const void *)(a2 + v19);
    sub_10000F024(a1 + v19, &qword_1000A5E40);
    uint64_t v22 = sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = sub_10008A260();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000604EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100060500);
}

uint64_t sub_100060504(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for WorldClockEntry();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000697C(&qword_1000A4A60);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 254)
  {
    unsigned int v14 = *(unsigned __int8 *)(a1 + a3[6] + 8);
    if (v14 > 1) {
      return (v14 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v15 = sub_10000697C(&qword_1000A59C0);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[7];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_100060688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006069C);
}

uint64_t sub_1000606A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for WorldClockEntry();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = sub_10000697C(&qword_1000A4A60);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 254)
  {
    *(unsigned char *)(a1 + a4[6] + 8) = -(char)a2;
  }
  else
  {
    uint64_t v15 = sub_10000697C(&qword_1000A59C0);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[7];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void sub_100060828()
{
  type metadata accessor for WorldClockEntry();
  if (v0 <= 0x3F)
  {
    sub_100067010(319, (unint64_t *)&qword_1000A4AC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F)
    {
      sub_100067010(319, (unint64_t *)&unk_1000A6398, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_100060994(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_10008A260();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_WORD *sub_100060A64(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *sub_100060AE0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = sub_10008A260();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_WORD *sub_100060B64(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *sub_100060BE0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = sub_10008A260();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_100060C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100060C78);
}

uint64_t sub_100060C78(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_10008A260();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 24)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100060D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100060D3C);
}

unsigned char *sub_100060D3C(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_10008A260();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 24)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100060DE0()
{
  return sub_100067448();
}

void *sub_100060DF0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_10008A280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_10008A260();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_100060F50(uint64_t a1, uint64_t a2)
{
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_10008A280();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = sub_10008A260();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

void *sub_100061024(void *a1, void *a2, uint64_t a3)
{
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_10008A280();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

void *sub_100061134(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4A58);
    sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_10008A280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

char *sub_100061260(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_10008A280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *sub_100061378(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4A58);
    uint64_t v6 = sub_10000697C(&qword_1000A4A58);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_10008A280();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000614A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000614BC);
}

uint64_t sub_1000614BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4A60);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = sub_10008A260();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1000615F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006160C);
}

uint64_t sub_10006160C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000697C(&qword_1000A4A60);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  else
  {
    uint64_t v11 = sub_10008A260();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_100061738()
{
  sub_100067010(319, (unint64_t *)&qword_1000A4AC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    sub_10008A260();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_100061838(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v50 = a3;
    uint64_t v9 = a3[5];
    unsigned int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1000893C0();
    uint64_t v49 = *(void *)(v12 - 8);
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    v48(v10, v11, v12);
    uint64_t v13 = (int *)type metadata accessor for WorldClockCity();
    v10[v13[5]] = v11[v13[5]];
    uint64_t v14 = v13[6];
    uint64_t v15 = &v10[v14];
    uint64_t v16 = &v11[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = v13[7];
    uint64_t v19 = &v10[v18];
    uint64_t v20 = &v11[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = v21;
    uint64_t v22 = v13[8];
    uint64_t v23 = &v10[v22];
    uint64_t v24 = &v11[v22];
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    uint64_t v26 = v13[9];
    int v27 = &v10[v26];
    size_t v28 = &v11[v26];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v27, v28, v12);
    v48(&v10[v13[10]], &v11[v13[10]], v12);
    uint64_t v29 = v13[11];
    uint64_t v30 = &v10[v29];
    char v31 = &v11[v29];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(&v11[v29], 1, v12))
    {
      uint64_t v32 = sub_10000697C(&qword_1000A47F8);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      v48(v30, v31, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v30, 0, 1, v12);
    }
    v10[v13[12]] = v11[v13[12]];
    v10[v13[13]] = v11[v13[13]];
    uint64_t v33 = v50[6];
    long long v34 = *(_OWORD *)((char *)a2 + v33 + 24);
    *(_OWORD *)((char *)a1 + v33 + 24) = v34;
    (**(void (***)(void))(v34 - 8))();
    uint64_t v35 = v50[8];
    *((unsigned char *)a1 + v50[7]) = *((unsigned char *)a2 + v50[7]);
    *((unsigned char *)a1 + v35) = *((unsigned char *)a2 + v35);
    uint64_t v36 = v50[10];
    *((unsigned char *)a1 + v50[9]) = *((unsigned char *)a2 + v50[9]);
    *((unsigned char *)a1 + v36) = *((unsigned char *)a2 + v36);
    uint64_t v37 = v50[11];
    uint64_t v38 = v50[12];
    uint64_t v39 = (char *)a1 + v37;
    uint64_t v40 = (char *)a2 + v37;
    uint64_t v41 = *(void *)v40;
    v39[8] = v40[8];
    LOBYTE(v40) = *((unsigned char *)a2 + v38);
    *(void *)uint64_t v39 = v41;
    uint64_t v42 = v50[13];
    uint64_t v43 = (char *)a2 + v42;
    char v44 = (char *)a1 + v42;
    *((unsigned char *)a1 + v38) = (_BYTE)v40;
    uint64_t v45 = sub_10008A260();
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16);
    swift_retain();
    v46(v44, v43, v45);
  }
  return a1;
}

uint64_t sub_100061C30(uint64_t a1, int *a2)
{
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1000899F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = (int *)type metadata accessor for WorldClockCity();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v5 + v9[9], v6);
  v8(v5 + v9[10], v6);
  uint64_t v10 = v5 + v9[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  sub_10000F380(a1 + a2[6]);
  swift_release();
  uint64_t v11 = a1 + a2[13];
  uint64_t v12 = sub_10008A260();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);

  return v13(v11, v12);
}

void *sub_100061E4C(void *a1, void *a2, int *a3)
{
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000899F0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v48 = a3;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1000893C0();
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v46(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorldClockCity();
  v8[v11[5]] = v9[v11[5]];
  uint64_t v12 = v11[6];
  uint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  uint64_t v16 = v11[7];
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = v19;
  uint64_t v20 = v11[8];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = v23;
  uint64_t v24 = v11[9];
  uint64_t v25 = &v8[v24];
  uint64_t v26 = &v9[v24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46(v25, v26, v10);
  v46(&v8[v11[10]], &v9[v11[10]], v10);
  uint64_t v27 = v11[11];
  size_t v28 = &v8[v27];
  uint64_t v29 = &v9[v27];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(&v9[v27], 1, v10))
  {
    uint64_t v30 = sub_10000697C(&qword_1000A47F8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v46(v28, v29, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v28, 0, 1, v10);
  }
  v8[v11[12]] = v9[v11[12]];
  v8[v11[13]] = v9[v11[13]];
  uint64_t v31 = v48[6];
  long long v32 = *(_OWORD *)((char *)a2 + v31 + 24);
  *(_OWORD *)((char *)a1 + v31 + 24) = v32;
  (**(void (***)(void))(v32 - 8))();
  uint64_t v33 = v48[8];
  *((unsigned char *)a1 + v48[7]) = *((unsigned char *)a2 + v48[7]);
  *((unsigned char *)a1 + v33) = *((unsigned char *)a2 + v33);
  uint64_t v34 = v48[10];
  *((unsigned char *)a1 + v48[9]) = *((unsigned char *)a2 + v48[9]);
  *((unsigned char *)a1 + v34) = *((unsigned char *)a2 + v34);
  uint64_t v35 = v48[11];
  uint64_t v36 = v48[12];
  uint64_t v37 = (char *)a1 + v35;
  uint64_t v38 = (char *)a2 + v35;
  uint64_t v39 = *(void *)v38;
  v37[8] = v38[8];
  LOBYTE(v38) = *((unsigned char *)a2 + v36);
  *(void *)uint64_t v37 = v39;
  uint64_t v40 = v48[13];
  uint64_t v41 = (char *)a2 + v40;
  uint64_t v42 = (char *)a1 + v40;
  *((unsigned char *)a1 + v36) = (_BYTE)v38;
  uint64_t v43 = sub_10008A260();
  char v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
  swift_retain();
  v44(v42, v41, v43);
  return a1;
}

void *sub_1000621F4(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4FF0);
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v40 = a3;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1000893C0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  uint64_t v13 = (int *)type metadata accessor for WorldClockCity();
  v8[v13[5]] = v9[v13[5]];
  uint64_t v14 = v13[6];
  uint64_t v15 = &v8[v14];
  uint64_t v16 = &v9[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = v13[7];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = v13[8];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12(&v8[v13[9]], &v9[v13[9]], v10);
  v12(&v8[v13[10]], &v9[v13[10]], v10);
  uint64_t v23 = v13[11];
  uint64_t v24 = &v9[v23];
  uint64_t v39 = &v8[v23];
  uint64_t v25 = *(uint64_t (**)(void))(v11 + 48);
  int v26 = v25();
  int v27 = ((uint64_t (*)(char *, uint64_t, uint64_t))v25)(v24, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v39, v24, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v39, 0, 1, v10);
      goto LABEL_14;
    }
    size_t v28 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v29 = v39;
  }
  else
  {
    if (!v27)
    {
      v12(v39, v24, v10);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v39, v10);
    size_t v28 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v29 = v39;
  }
  memcpy(v29, v24, v28);
LABEL_14:
  v8[v13[12]] = v9[v13[12]];
  v8[v13[13]] = v9[v13[13]];
  sub_100062644((void *)((char *)a1 + v40[6]), (void *)((char *)a2 + v40[6]));
  *((unsigned char *)a1 + v40[7]) = *((unsigned char *)a2 + v40[7]);
  *((unsigned char *)a1 + v40[8]) = *((unsigned char *)a2 + v40[8]);
  *((unsigned char *)a1 + v40[9]) = *((unsigned char *)a2 + v40[9]);
  *((unsigned char *)a1 + v40[10]) = *((unsigned char *)a2 + v40[10]);
  uint64_t v30 = v40[11];
  uint64_t v31 = (char *)a1 + v30;
  long long v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)v32;
  LOBYTE(v32) = v32[8];
  *(void *)uint64_t v31 = v33;
  v31[8] = (char)v32;
  swift_retain();
  swift_release();
  *((unsigned char *)a1 + v40[12]) = *((unsigned char *)a2 + v40[12]);
  uint64_t v34 = v40[13];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 24))(v35, v36, v37);
  return a1;
}

uint64_t *sub_100062644(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

char *sub_100062874(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000899F0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  int v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000893C0();
  uint64_t v32 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v12(v9, v10, v11);
  uint64_t v13 = (int *)type metadata accessor for WorldClockCity();
  v9[v13[5]] = v10[v13[5]];
  *(_OWORD *)&v9[v13[6]] = *(_OWORD *)&v10[v13[6]];
  *(_OWORD *)&v9[v13[7]] = *(_OWORD *)&v10[v13[7]];
  *(_OWORD *)&v9[v13[8]] = *(_OWORD *)&v10[v13[8]];
  v12(&v9[v13[9]], &v10[v13[9]], v11);
  v12(&v9[v13[10]], &v10[v13[10]], v11);
  uint64_t v14 = v13[11];
  __dst = &v9[v14];
  uint64_t v15 = &v10[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(&v10[v14], 1, v11))
  {
    uint64_t v16 = sub_10000697C(&qword_1000A47F8);
    memcpy(__dst, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v12(__dst, v15, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v11);
  }
  v9[v13[12]] = v10[v13[12]];
  v9[v13[13]] = v10[v13[13]];
  uint64_t v17 = a3[6];
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  long long v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  *((void *)v19 + 4) = *((void *)v20 + 4);
  a1[v18] = a2[v18];
  uint64_t v22 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v22] = a2[v22];
  uint64_t v23 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  int v27 = &a1[v26];
  size_t v28 = &a2[v26];
  uint64_t v29 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  return a1;
}

char *sub_100062BA8(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4FF0);
    uint64_t v6 = sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000899F0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  Swift::String v53 = a3;
  uint64_t v8 = a3[5];
  int v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000893C0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v14 = (int *)type metadata accessor for WorldClockCity();
  v9[v14[5]] = v10[v14[5]];
  uint64_t v15 = v14[6];
  uint64_t v16 = &v9[v15];
  uint64_t v17 = &v10[v15];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = v19;
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = v14[7];
  long long v21 = &v9[v20];
  uint64_t v22 = &v10[v20];
  uint64_t v24 = *(void *)v22;
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)long long v21 = v24;
  *((void *)v21 + 1) = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v14[8];
  uint64_t v26 = &v9[v25];
  int v27 = &v10[v25];
  uint64_t v29 = *(void *)v27;
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = v29;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v13(&v9[v14[9]], &v10[v14[9]], v11);
  v13(&v9[v14[10]], &v10[v14[10]], v11);
  uint64_t v30 = v14[11];
  uint64_t v31 = &v10[v30];
  uint64_t v32 = *(uint64_t (**)(void))(v12 + 48);
  Swift::String v52 = &v9[v30];
  int v33 = v32();
  int v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v31, 1, v11);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v52, v31, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v52, 0, 1, v11);
      goto LABEL_13;
    }
    size_t v35 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v36 = v52;
  }
  else
  {
    if (!v34)
    {
      v13(v52, v31, v11);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v52, v11);
    size_t v35 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v36 = v52;
  }
  memcpy(v36, v31, v35);
LABEL_13:
  v9[v14[12]] = v10[v14[12]];
  v9[v14[13]] = v10[v14[13]];
  uint64_t v37 = v53[6];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  sub_10000F380((uint64_t)&a1[v37]);
  long long v40 = *((_OWORD *)v39 + 1);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v40;
  *((void *)v38 + 4) = *((void *)v39 + 4);
  uint64_t v41 = v53[8];
  a1[v53[7]] = a2[v53[7]];
  a1[v41] = a2[v41];
  uint64_t v42 = v53[10];
  a1[v53[9]] = a2[v53[9]];
  a1[v42] = a2[v42];
  uint64_t v43 = v53[11];
  char v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v46 = *(void *)v45;
  LOBYTE(v45) = v45[8];
  *(void *)char v44 = v46;
  v44[8] = (char)v45;
  swift_release();
  uint64_t v47 = v53[13];
  a1[v53[12]] = a2[v53[12]];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  uint64_t v50 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 40))(v48, v49, v50);
  return a1;
}

uint64_t sub_100062FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062FEC);
}

uint64_t sub_100062FEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4B70);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for WorldClockCity();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6] + 24);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = sub_10008A260();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[13];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_100063174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063188);
}

uint64_t sub_100063188(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10000697C(&qword_1000A4B70);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for WorldClockCity();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = sub_10008A260();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[13];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void sub_100063310()
{
  sub_100067010(319, (unint64_t *)&qword_1000A5070, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    type metadata accessor for WorldClockCity();
    if (v1 <= 0x3F)
    {
      sub_10008A260();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_100063468(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = sub_10008A260();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100063554(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_10008A260();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1000635CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_10008A260();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t sub_10006366C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100063710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100063794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100063830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100063844);
}

uint64_t sub_100063844(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10008A260();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000638F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063908);
}

void *sub_100063908(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10008A260();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000639B0()
{
  uint64_t result = sub_10008A260();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100063A58(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for WorldClockEntry();
    *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
    *((unsigned char *)a1 + *(int *)(v8 + 24)) = *((unsigned char *)a2 + *(int *)(v8 + 24));
    uint64_t v9 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
    uint64_t v10 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_10008A260();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_100063BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = sub_10008A260();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_100063C88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_10008A260();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t sub_100063DA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_100063EC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t sub_100063FBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_1000640C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000640D8);
}

uint64_t sub_1000640D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for WorldClockEntry();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_10008A260();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 32);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100064204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100064218);
}

uint64_t sub_100064218(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for WorldClockEntry();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_10008A260();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_100064344()
{
  uint64_t result = type metadata accessor for WorldClockEntry();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_10008A260();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_100064424(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    char v44 = a3;
    uint64_t v9 = a3[5];
    unint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1000893C0();
    uint64_t v43 = *(void *)(v12 - 8);
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v42(v10, v11, v12);
    uint64_t v13 = (int *)type metadata accessor for WorldClockCity();
    v10[v13[5]] = v11[v13[5]];
    uint64_t v14 = v13[6];
    uint64_t v15 = &v10[v14];
    uint64_t v16 = &v11[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = v13[7];
    uint64_t v19 = &v10[v18];
    uint64_t v20 = &v11[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = v21;
    uint64_t v22 = v13[8];
    uint64_t v23 = &v10[v22];
    uint64_t v24 = &v11[v22];
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    uint64_t v26 = v13[9];
    int v27 = &v10[v26];
    uint64_t v28 = &v11[v26];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42(v27, v28, v12);
    v42(&v10[v13[10]], &v11[v13[10]], v12);
    uint64_t v29 = v13[11];
    uint64_t v30 = &v10[v29];
    uint64_t v31 = &v11[v29];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(&v11[v29], 1, v12))
    {
      uint64_t v32 = sub_10000697C(&qword_1000A47F8);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      v42(v30, v31, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v30, 0, 1, v12);
    }
    v10[v13[12]] = v11[v13[12]];
    v10[v13[13]] = v11[v13[13]];
    uint64_t v33 = v44[6];
    long long v34 = *(_OWORD *)((char *)a2 + v33 + 24);
    *(_OWORD *)((char *)a1 + v33 + 24) = v34;
    (**(void (***)(void))(v34 - 8))();
    uint64_t v35 = v44[8];
    *((unsigned char *)a1 + v44[7]) = *((unsigned char *)a2 + v44[7]);
    *((unsigned char *)a1 + v35) = *((unsigned char *)a2 + v35);
    uint64_t v36 = v44[10];
    *(void *)((char *)a1 + v44[9]) = *(void *)((char *)a2 + v44[9]);
    *((unsigned char *)a1 + v36) = *((unsigned char *)a2 + v36);
    uint64_t v37 = v44[11];
    uint64_t v38 = (char *)a1 + v37;
    uint64_t v39 = (char *)a2 + v37;
    uint64_t v40 = sub_10008A260();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
  }
  return a1;
}

uint64_t sub_1000647EC(uint64_t a1, int *a2)
{
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1000899F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = (int *)type metadata accessor for WorldClockCity();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v5 + v9[9], v6);
  v8(v5 + v9[10], v6);
  uint64_t v10 = v5 + v9[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  sub_10000F380(a1 + a2[6]);
  uint64_t v11 = a1 + a2[11];
  uint64_t v12 = sub_10008A260();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);

  return v13(v11, v12);
}

void *sub_1000649FC(void *a1, void *a2, int *a3)
{
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000899F0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v42 = a3;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1000893C0();
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v40(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorldClockCity();
  v8[v11[5]] = v9[v11[5]];
  uint64_t v12 = v11[6];
  uint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  uint64_t v16 = v11[7];
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = v19;
  uint64_t v20 = v11[8];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = v23;
  uint64_t v24 = v11[9];
  uint64_t v25 = &v8[v24];
  uint64_t v26 = &v9[v24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40(v25, v26, v10);
  v40(&v8[v11[10]], &v9[v11[10]], v10);
  uint64_t v27 = v11[11];
  uint64_t v28 = &v8[v27];
  uint64_t v29 = &v9[v27];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(&v9[v27], 1, v10))
  {
    uint64_t v30 = sub_10000697C(&qword_1000A47F8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v40(v28, v29, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v28, 0, 1, v10);
  }
  v8[v11[12]] = v9[v11[12]];
  v8[v11[13]] = v9[v11[13]];
  uint64_t v31 = v42[6];
  long long v32 = *(_OWORD *)((char *)a2 + v31 + 24);
  *(_OWORD *)((char *)a1 + v31 + 24) = v32;
  (**(void (***)(void))(v32 - 8))();
  uint64_t v33 = v42[8];
  *((unsigned char *)a1 + v42[7]) = *((unsigned char *)a2 + v42[7]);
  *((unsigned char *)a1 + v33) = *((unsigned char *)a2 + v33);
  uint64_t v34 = v42[10];
  *(void *)((char *)a1 + v42[9]) = *(void *)((char *)a2 + v42[9]);
  *((unsigned char *)a1 + v34) = *((unsigned char *)a2 + v34);
  uint64_t v35 = v42[11];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  uint64_t v38 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
  return a1;
}

void *sub_100064D70(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4FF0);
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1000893C0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  uint64_t v13 = (int *)type metadata accessor for WorldClockCity();
  v8[v13[5]] = v9[v13[5]];
  uint64_t v14 = v13[6];
  uint64_t v15 = &v8[v14];
  uint64_t v16 = &v9[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = v13[7];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = v13[8];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12(&v8[v13[9]], &v9[v13[9]], v10);
  v12(&v8[v13[10]], &v9[v13[10]], v10);
  uint64_t v23 = v13[11];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v27 = v26(&v8[v23], 1, v10);
  int v28 = v26(v25, 1, v10);
  if (!v27)
  {
    if (!v28)
    {
      v12(v24, v25, v10);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
    goto LABEL_11;
  }
  if (v28)
  {
LABEL_11:
    uint64_t v29 = sub_10000697C(&qword_1000A47F8);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
LABEL_12:
  v8[v13[12]] = v9[v13[12]];
  v8[v13[13]] = v9[v13[13]];
  sub_100062644((void *)((char *)a1 + v36[6]), (void *)((char *)v35 + v36[6]));
  *((unsigned char *)a1 + v36[7]) = *((unsigned char *)v35 + v36[7]);
  *((unsigned char *)a1 + v36[8]) = *((unsigned char *)v35 + v36[8]);
  *(void *)((char *)a1 + v36[9]) = *(void *)((char *)v35 + v36[9]);
  *((unsigned char *)a1 + v36[10]) = *((unsigned char *)v35 + v36[10]);
  uint64_t v30 = v36[11];
  uint64_t v31 = (char *)a1 + v30;
  long long v32 = (char *)v35 + v30;
  uint64_t v33 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  return a1;
}

char *sub_100065164(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000899F0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v30 = a3;
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000893C0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  uint64_t v14 = (int *)type metadata accessor for WorldClockCity();
  v9[v14[5]] = v10[v14[5]];
  *(_OWORD *)&v9[v14[6]] = *(_OWORD *)&v10[v14[6]];
  *(_OWORD *)&v9[v14[7]] = *(_OWORD *)&v10[v14[7]];
  *(_OWORD *)&v9[v14[8]] = *(_OWORD *)&v10[v14[8]];
  v13(&v9[v14[9]], &v10[v14[9]], v11);
  v13(&v9[v14[10]], &v10[v14[10]], v11);
  uint64_t v15 = v14[11];
  __dst = &v9[v15];
  uint64_t v16 = &v10[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&v10[v15], 1, v11))
  {
    uint64_t v17 = sub_10000697C(&qword_1000A47F8);
    memcpy(__dst, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(__dst, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v9[v14[12]] = v10[v14[12]];
  v9[v14[13]] = v10[v14[13]];
  uint64_t v18 = v30[6];
  uint64_t v19 = v30[7];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  long long v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((void *)v20 + 4) = *((void *)v21 + 4);
  a1[v19] = a2[v19];
  uint64_t v23 = v30[9];
  a1[v30[8]] = a2[v30[8]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  uint64_t v24 = v30[11];
  a1[v30[10]] = a2[v30[10]];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  return a1;
}

char *sub_100065480(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4FF0);
    uint64_t v6 = sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000899F0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v8 = a3[5];
  uint64_t v48 = a1;
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000893C0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v14 = (int *)type metadata accessor for WorldClockCity();
  v9[v14[5]] = v10[v14[5]];
  uint64_t v15 = v14[6];
  uint64_t v16 = &v9[v15];
  uint64_t v17 = &v10[v15];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = v19;
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = v14[7];
  uint64_t v21 = &v9[v20];
  long long v22 = &v10[v20];
  uint64_t v24 = *(void *)v22;
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)uint64_t v21 = v24;
  *((void *)v21 + 1) = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v14[8];
  uint64_t v26 = &v9[v25];
  uint64_t v27 = &v10[v25];
  uint64_t v29 = *(void *)v27;
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = v29;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v13(&v9[v14[9]], &v10[v14[9]], v11);
  v13(&v9[v14[10]], &v10[v14[10]], v11);
  uint64_t v30 = v14[11];
  uint64_t v31 = &v10[v30];
  long long v32 = *(uint64_t (**)(void))(v12 + 48);
  uint64_t v49 = &v9[v30];
  int v33 = v32();
  int v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v31, 1, v11);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v49, v31, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v49, 0, 1, v11);
      goto LABEL_13;
    }
    size_t v35 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v36 = v49;
  }
  else
  {
    if (!v34)
    {
      v13(v49, v31, v11);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v49, v11);
    size_t v35 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v36 = v49;
  }
  memcpy(v36, v31, v35);
LABEL_13:
  v9[v14[12]] = v10[v14[12]];
  v9[v14[13]] = v10[v14[13]];
  uint64_t v37 = v51[6];
  uint64_t v38 = &v48[v37];
  uint64_t v39 = &v50[v37];
  sub_10000F380((uint64_t)&v48[v37]);
  long long v40 = *((_OWORD *)v39 + 1);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v40;
  *((void *)v38 + 4) = *((void *)v39 + 4);
  uint64_t v41 = v51[8];
  v48[v51[7]] = v50[v51[7]];
  v48[v41] = v50[v41];
  uint64_t v42 = v51[10];
  *(void *)&v48[v51[9]] = *(void *)&v50[v51[9]];
  v48[v42] = v50[v42];
  uint64_t v43 = v51[11];
  char v44 = &v48[v43];
  uint64_t v45 = &v50[v43];
  uint64_t v46 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 40))(v44, v45, v46);
  return v48;
}

uint64_t sub_100065884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100065898);
}

uint64_t sub_100065898(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4B70);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for WorldClockCity();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6] + 24);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = sub_10008A260();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[11];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_100065A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100065A34);
}

uint64_t sub_100065A34(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10000697C(&qword_1000A4B70);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for WorldClockCity();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = sub_10008A260();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[11];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void sub_100065BBC()
{
  sub_100067010(319, (unint64_t *)&qword_1000A5070, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    type metadata accessor for WorldClockCity();
    if (v1 <= 0x3F)
    {
      sub_10008A260();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_100065D14(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a3[6];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = sub_100089580();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)v4 + v11) = *((unsigned char *)a2 + v11);
    uint64_t v12 = a3[9];
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_1000893C0();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_10000697C(&qword_1000A47F8);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v19 = a3[11];
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *((unsigned char *)v4 + v19) = *((unsigned char *)a2 + v19);
    uint64_t v20 = a3[13];
    *((unsigned char *)v4 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    *((unsigned char *)v4 + v20) = *((unsigned char *)a2 + v20);
    uint64_t v21 = a3[14];
    long long v22 = (void *)((char *)v4 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = sub_10008A260();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    }
    else
    {
      *long long v22 = *v23;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_100065FAC(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = sub_1000893C0();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = a1 + a2[14];
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_10008A260();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    return v11(v9, v10);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100066130(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[9];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_1000893C0();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000697C(&qword_1000A47F8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[14];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = sub_10008A260();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  }
  else
  {
    void *v20 = *v21;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100066370(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v10 = a3[9];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = sub_1000893C0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_10000697C(&qword_1000A47F8);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  if (a1 != a2)
  {
    uint64_t v19 = a3[14];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (void *)(a2 + v19);
    sub_10000F024(a1 + v19, &qword_1000A5E40);
    sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = sub_10008A260();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      void *v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100066638(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[9];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_1000893C0();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000697C(&qword_1000A47F8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[14];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = sub_10008A260();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v20, v21, v23);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100066888(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[9];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_1000893C0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = sub_10000697C(&qword_1000A47F8);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  uint64_t v21 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  if (a1 != a2)
  {
    uint64_t v22 = a3[14];
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (const void *)(a2 + v22);
    sub_10000F024(a1 + v22, &qword_1000A5E40);
    uint64_t v25 = sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v26 = sub_10008A260();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 32))(v23, v24, v26);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100066B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100066B68);
}

uint64_t sub_100066B68(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  uint64_t v10 = sub_100089580();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(v10 - 8);
    uint64_t v13 = a3[6];
LABEL_9:
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v15(a1 + v13, a2, v11);
  }
  uint64_t v14 = sub_10000697C(&qword_1000A47F8);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v11 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_9;
  }
  uint64_t v16 = sub_10000697C(&qword_1000A59C0);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[14];

  return v17(v19, a2, v18);
}

uint64_t sub_100066CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100066CFC);
}

uint64_t sub_100066CFC(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = a2 + 1;
    return result;
  }
  uint64_t v8 = sub_100089580();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_10000697C(&qword_1000A47F8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_7;
  }
  uint64_t v14 = sub_10000697C(&qword_1000A59C0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[14];

  return v15(v17, a2, a2, v16);
}

void sub_100066E78()
{
  sub_100089580();
  if (v0 <= 0x3F)
  {
    sub_100067010(319, (unint64_t *)&qword_1000A49B8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v1 <= 0x3F)
    {
      sub_100067010(319, (unint64_t *)&unk_1000A6398, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_100067010(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t *sub_100067074(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 24);
    int v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_10008A260();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_100067140(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_10008A260();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_OWORD *sub_1000671A8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  int v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_100067224(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  int v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1000672AC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  int v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_100067328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006733C);
}

uint64_t sub_10006733C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = sub_10008A260();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_1000673AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000673C0);
}

uint64_t sub_1000673C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = sub_10008A260();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_100067434()
{
  return sub_100067448();
}

uint64_t sub_100067448()
{
  uint64_t result = sub_10008A260();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000674D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_10008A260();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_retain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_1000675BC(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_10008A260();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100067634(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10008A260();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_retain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_1000676CC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_100067760(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_1000677DC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100067868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006787C);
}

uint64_t sub_10006787C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10008A260();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10006792C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067940);
}

void *sub_100067940(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10008A260();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000679E8()
{
  uint64_t result = sub_10008A260();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100067A84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_10008A260();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_retain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100067B70(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_10008A260();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100067BE8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_10008A260();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_retain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_100067C80(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_100067D1C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100067D98(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10008A260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100067E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100067E40);
}

uint64_t sub_100067E40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10008A260();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100067EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067F04);
}

void *sub_100067F04(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10008A260();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100067FAC()
{
  return sub_100067448();
}

void *sub_100067FC8(unsigned char *a1, void *a2, int *a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v29 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v5 = a3[5];
    uint64_t v6 = &a1[v5];
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_1000893C0();
    uint64_t v45 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    uint64_t v46 = *(void *)(v8 - 8);
    v45(v6, v7, v8);
    uint64_t v9 = (int *)type metadata accessor for WorldClockCity();
    v6[v9[5]] = v7[v9[5]];
    uint64_t v10 = v9[6];
    uint64_t v11 = &v6[v10];
    uint64_t v12 = &v7[v10];
    uint64_t v13 = *((void *)v12 + 1);
    void *v11 = *(void *)v12;
    v11[1] = v13;
    uint64_t v14 = v9[7];
    uint64_t v15 = &v6[v14];
    uint64_t v16 = &v7[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *uint64_t v15 = *(void *)v16;
    v15[1] = v17;
    uint64_t v18 = v9[8];
    uint64_t v19 = &v6[v18];
    uint64_t v20 = &v7[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *uint64_t v19 = *(void *)v20;
    v19[1] = v21;
    uint64_t v22 = v9[9];
    uint64_t v23 = &v6[v22];
    uint64_t v24 = &v7[v22];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45(v23, v24, v8);
    v45(&v6[v9[10]], &v7[v9[10]], v8);
    uint64_t v25 = v9[11];
    uint64_t v26 = &v6[v25];
    uint64_t v27 = &v7[v25];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(&v7[v25], 1, v8))
    {
      uint64_t v28 = sub_10000697C(&qword_1000A47F8);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      v45(v26, v27, v8);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v46 + 56))(v26, 0, 1, v8);
    }
    v6[v9[12]] = v7[v9[12]];
    v6[v9[13]] = v7[v9[13]];
    uint64_t v30 = a3[6];
    long long v31 = *(_OWORD *)((char *)a2 + v30 + 24);
    *(_OWORD *)((char *)v3 + v30 + 24) = v31;
    (**(void (***)(void))(v31 - 8))();
    uint64_t v32 = a3[8];
    *((unsigned char *)v3 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    int v33 = (void *)((char *)v3 + v32);
    int v34 = (void *)((char *)a2 + v32);
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v35 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
    }
    else
    {
      void *v33 = *v34;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v36 = a3[10];
    *((unsigned char *)v3 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    uint64_t v37 = (char *)v3 + v36;
    uint64_t v38 = (char *)a2 + v36;
    uint64_t v39 = sub_10008A260();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
    uint64_t v40 = a3[11];
    uint64_t v41 = (char *)v3 + v40;
    uint64_t v42 = (char *)a2 + v40;
    uint64_t v43 = *(void *)v42;
    LOBYTE(v42) = v42[8];
    *(void *)uint64_t v41 = v43;
    v41[8] = (char)v42;
  }
  swift_retain();
  return v3;
}

uint64_t sub_100068378(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_1000893C0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = (int *)type metadata accessor for WorldClockCity();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7(v4 + v8[9], v5);
  v7(v4 + v8[10], v5);
  uint64_t v9 = v4 + v8[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v9, 1, v5)) {
    v7(v9, v5);
  }
  sub_10000F380(a1 + a2[6]);
  uint64_t v10 = a1 + a2[8];
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1000899F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = a1 + a2[10];
  uint64_t v13 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);

  return swift_release();
}

unsigned char *sub_10006859C(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v3 = a3[5];
  uint64_t v4 = &a1[v3];
  uint64_t v5 = &a2[v3];
  uint64_t v6 = sub_1000893C0();
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v43 + 16);
  v7(v4, v5, v6);
  uint64_t v8 = (int *)type metadata accessor for WorldClockCity();
  v4[v8[5]] = v5[v8[5]];
  uint64_t v9 = v8[6];
  uint64_t v10 = &v4[v9];
  uint64_t v11 = &v5[v9];
  uint64_t v12 = v11[1];
  void *v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = v8[7];
  uint64_t v14 = &v4[v13];
  uint64_t v15 = &v5[v13];
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = v8[8];
  uint64_t v18 = &v4[v17];
  uint64_t v19 = &v5[v17];
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = v8[9];
  uint64_t v22 = &v4[v21];
  uint64_t v23 = &v5[v21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(v22, v23, v6);
  v7(&v4[v8[10]], &v5[v8[10]], v6);
  uint64_t v24 = v8[11];
  uint64_t v25 = &v4[v24];
  uint64_t v26 = &v5[v24];
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v43 + 48))(&v5[v24], 1, v6))
  {
    uint64_t v27 = sub_10000697C(&qword_1000A47F8);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    v7(v25, v26, v6);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v43 + 56))(v25, 0, 1, v6);
  }
  v4[v8[12]] = v5[v8[12]];
  v4[v8[13]] = v5[v8[13]];
  uint64_t v28 = a3[6];
  long long v29 = *(_OWORD *)&a2[v28 + 24];
  *(_OWORD *)&a1[v28 + 24] = v29;
  (**(void (***)(void))(v29 - 8))();
  uint64_t v30 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  long long v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v33 = sub_1000899F0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
  }
  else
  {
    void *v31 = *v32;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = sub_10008A260();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
  uint64_t v38 = a3[11];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = *(void *)v40;
  LOBYTE(v40) = v40[8];
  *(void *)uint64_t v39 = v41;
  v39[8] = (_BYTE)v40;
  swift_retain();
  return a1;
}

unsigned char *sub_100068904(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v3 = a3[5];
  uint64_t v4 = &a1[v3];
  uint64_t v5 = &a2[v3];
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 24);
  v8(v4, v5, v6);
  uint64_t v9 = (int *)type metadata accessor for WorldClockCity();
  v4[v9[5]] = v5[v9[5]];
  uint64_t v10 = v9[6];
  uint64_t v11 = &v4[v10];
  uint64_t v12 = &v5[v10];
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = v9[7];
  uint64_t v14 = &v4[v13];
  uint64_t v15 = &v5[v13];
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = v9[8];
  uint64_t v17 = &v4[v16];
  uint64_t v18 = &v5[v16];
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8(&v4[v9[9]], &v5[v9[9]], v6);
  v8(&v4[v9[10]], &v5[v9[10]], v6);
  uint64_t v19 = v9[11];
  uint64_t v20 = &v4[v19];
  uint64_t v21 = &v5[v19];
  uint64_t v22 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  int v23 = v22(&v4[v19], 1, v6);
  int v24 = v22(v21, 1, v6);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v20, v21, v6);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v20, v6);
LABEL_6:
    uint64_t v25 = sub_10000697C(&qword_1000A47F8);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  v8(v20, v21, v6);
LABEL_7:
  v4[v9[12]] = v5[v9[12]];
  v4[v9[13]] = v5[v9[13]];
  sub_100062644((uint64_t *)&a1[a3[6]], (uint64_t *)&a2[a3[6]]);
  a1[a3[7]] = a2[a3[7]];
  if (a1 != a2)
  {
    uint64_t v26 = a3[8];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    sub_10000F024((uint64_t)&a1[v26], &qword_1000A4FF0);
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
    }
    else
    {
      void *v27 = *v28;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  a1[a3[9]] = a2[a3[9]];
  uint64_t v30 = a3[10];
  long long v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = sub_10008A260();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  uint64_t v34 = a3[11];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = *(void *)v36;
  LOBYTE(v36) = v36[8];
  *(void *)uint64_t v35 = v37;
  v35[8] = (_BYTE)v36;
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *sub_100068D00(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = sub_1000893C0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32);
  v10(v6, v7, v8);
  uint64_t v11 = (int *)type metadata accessor for WorldClockCity();
  v6[v11[5]] = v7[v11[5]];
  *(_OWORD *)&v6[v11[6]] = *(_OWORD *)&v7[v11[6]];
  *(_OWORD *)&v6[v11[7]] = *(_OWORD *)&v7[v11[7]];
  *(_OWORD *)&v6[v11[8]] = *(_OWORD *)&v7[v11[8]];
  v10(&v6[v11[9]], &v7[v11[9]], v8);
  v10(&v6[v11[10]], &v7[v11[10]], v8);
  uint64_t v12 = v11[11];
  __dst = &v6[v12];
  uint64_t v13 = &v7[v12];
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(&v7[v12], 1, v8))
  {
    uint64_t v14 = sub_10000697C(&qword_1000A47F8);
    memcpy(__dst, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v10(__dst, v13, v8);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
  }
  v6[v11[12]] = v7[v11[12]];
  v6[v11[13]] = v7[v11[13]];
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  long long v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  char v20 = a2[v16];
  *((void *)v17 + 4) = *((void *)v18 + 4);
  a1[v16] = v20;
  uint64_t v21 = a3[8];
  uint64_t v22 = &a1[v21];
  int v23 = &a2[v21];
  uint64_t v24 = sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = sub_1000899F0();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  uint64_t v26 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = sub_10008A260();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  uint64_t v30 = a3[11];
  long long v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)long long v31 = *(void *)v32;
  v31[8] = v32[8];
  return a1;
}

unsigned char *sub_10006901C(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v3 = a3[5];
  uint64_t v4 = &a1[v3];
  uint64_t v5 = &a2[v3];
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 40);
  v8(v4, v5, v6);
  uint64_t v9 = (int *)type metadata accessor for WorldClockCity();
  v4[v9[5]] = v5[v9[5]];
  uint64_t v10 = v9[6];
  uint64_t v11 = &v4[v10];
  uint64_t v12 = (uint64_t *)&v5[v10];
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  void *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = v9[7];
  uint64_t v16 = &v4[v15];
  uint64_t v17 = (uint64_t *)&v5[v15];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = v9[8];
  uint64_t v21 = &v4[v20];
  uint64_t v22 = (uint64_t *)&v5[v20];
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v8(&v4[v9[9]], &v5[v9[9]], v6);
  v8(&v4[v9[10]], &v5[v9[10]], v6);
  uint64_t v25 = v9[11];
  uint64_t v26 = &v5[v25];
  uint64_t v50 = &v4[v25];
  uint64_t v27 = *(uint64_t (**)(void))(v7 + 48);
  int v28 = v27();
  int v29 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v27)(v26, 1, v6);
  if (v28)
  {
    if (v29)
    {
      size_t v30 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
      long long v31 = v50;
LABEL_6:
      memcpy(v31, v26, v30);
      goto LABEL_9;
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v50, v26, v6);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(v50, 0, 1, v6);
  }
  else
  {
    if (v29)
    {
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v50, v6);
      size_t v30 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
      long long v31 = v50;
      goto LABEL_6;
    }
    v8(v50, v26, v6);
  }
LABEL_9:
  v4[v9[12]] = v5[v9[12]];
  v4[v9[13]] = v5[v9[13]];
  uint64_t v32 = a3[6];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  sub_10000F380((uint64_t)&a1[v32]);
  long long v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((void *)v33 + 4) = *((void *)v34 + 4);
  a1[a3[7]] = a2[a3[7]];
  if (a1 != a2)
  {
    uint64_t v36 = a3[8];
    uint64_t v37 = &a1[v36];
    uint64_t v38 = &a2[v36];
    sub_10000F024((uint64_t)&a1[v36], &qword_1000A4FF0);
    uint64_t v39 = sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v40 = sub_1000899F0();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v40 - 8) + 32))(v37, v38, v40);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
  }
  uint64_t v41 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v44 = sub_10008A260();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v44 - 8) + 40))(v42, v43, v44);
  uint64_t v45 = a3[11];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  uint64_t v48 = *(void *)v47;
  LOBYTE(v47) = v47[8];
  *(void *)uint64_t v46 = v48;
  v46[8] = (_BYTE)v47;
  swift_release();
  return a1;
}

uint64_t sub_10006941C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100069430);
}

uint64_t sub_100069430(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for WorldClockCity();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v13(a1 + v9, a2, v7);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + a3[6] + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v12 = sub_10000697C(&qword_1000A4B70);
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
    {
      uint64_t v7 = v12;
      uint64_t v8 = *(void *)(v12 - 8);
      uint64_t v9 = a3[8];
      goto LABEL_9;
    }
    uint64_t v14 = sub_10008A260();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[10];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_1000695B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000695C8);
}

uint64_t sub_1000695C8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for WorldClockCity();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 24) = (a2 - 1);
    return result;
  }
  uint64_t v12 = sub_10000697C(&qword_1000A4B70);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t v14 = sub_10008A260();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a4[10];

  return v15(v17, a2, a2, v16);
}

void sub_10006974C()
{
  type metadata accessor for WorldClockCity();
  if (v0 <= 0x3F)
  {
    sub_100067010(319, (unint64_t *)&qword_1000A5070, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F)
    {
      sub_10008A260();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_1000698A0(unsigned char *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_100089580();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    long long v12 = *(_OWORD *)((char *)a2 + v11 + 24);
    *(_OWORD *)((char *)v4 + v11 + 24) = v12;
    (**(void (***)(void))(v12 - 8))();
    uint64_t v13 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_1000893C0();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_10000697C(&qword_1000A47F8);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v20 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v20) = *((unsigned char *)a2 + v20);
    uint64_t v21 = a3[11];
    uint64_t v22 = a3[12];
    uint64_t v23 = (char *)v4 + v21;
    uint64_t v24 = (char *)a2 + v21;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    uint64_t v25 = *((void *)v24 + 3);
    *((void *)v23 + 2) = *((void *)v24 + 2);
    *((void *)v23 + 3) = v25;
    *((void *)v23 + 4) = *((void *)v24 + 4);
    v23[40] = v24[40];
    uint64_t v27 = *((void *)v24 + 6);
    uint64_t v26 = *((void *)v24 + 7);
    *((void *)v23 + 6) = v27;
    *((void *)v23 + 7) = v26;
    *((unsigned char *)v4 + v22) = *((unsigned char *)a2 + v22);
    uint64_t v28 = a3[14];
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    int v29 = (char *)v4 + v28;
    uint64_t v37 = (char *)a2 + v28;
    uint64_t v30 = sub_10008A260();
    long long v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v31(v29, v37, v30);
    uint64_t v32 = a3[15];
    uint64_t v33 = (char *)v4 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = *(void *)v34;
    LOBYTE(v34) = v34[8];
    *(void *)uint64_t v33 = v35;
    v33[8] = (char)v34;
  }
  swift_retain();
  return v4;
}

uint64_t sub_100069BA4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_100089580();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_10000F380(a1 + a2[6]);
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = sub_1000893C0();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_release();
  swift_release();
  swift_release();
  uint64_t v9 = a1 + a2[14];
  uint64_t v10 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);

  return swift_release();
}

unsigned char *sub_100069D18(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_100089580();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  long long v11 = *(_OWORD *)&a2[v10 + 24];
  *(_OWORD *)&a1[v10 + 24] = v11;
  (**(void (***)(void))(v11 - 8))();
  uint64_t v12 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = sub_1000893C0();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000697C(&qword_1000A47F8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v18] = a2[v18];
  uint64_t v19 = a3[11];
  uint64_t v20 = a3[12];
  uint64_t v21 = &a1[v19];
  uint64_t v22 = &a2[v19];
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  uint64_t v23 = *((void *)v22 + 3);
  *((void *)v21 + 2) = *((void *)v22 + 2);
  *((void *)v21 + 3) = v23;
  *((void *)v21 + 4) = *((void *)v22 + 4);
  v21[40] = v22[40];
  uint64_t v25 = *((void *)v22 + 6);
  uint64_t v24 = *((void *)v22 + 7);
  *((void *)v21 + 6) = v25;
  *((void *)v21 + 7) = v24;
  a1[v20] = a2[v20];
  uint64_t v26 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  uint64_t v27 = &a1[v26];
  uint64_t v35 = &a2[v26];
  uint64_t v28 = sub_10008A260();
  int v29 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v28 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v29(v27, v35, v28);
  uint64_t v30 = a3[15];
  long long v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *(void *)v32;
  LOBYTE(v32) = v32[8];
  *(void *)long long v31 = v33;
  v31[8] = (_BYTE)v32;
  swift_retain();
  return a1;
}

unsigned char *sub_100069FD0(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_100089580();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  sub_100062644((uint64_t *)&a1[a3[6]], (uint64_t *)&a2[a3[6]]);
  a1[a3[7]] = a2[a3[7]];
  uint64_t v10 = a3[8];
  long long v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = sub_1000893C0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_10000697C(&qword_1000A47F8);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v19 = a3[11];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)uint64_t v20 = *(void *)&a2[v19];
  *((void *)v20 + 1) = *(void *)&a2[v19 + 8];
  *((void *)v20 + 2) = *(void *)&a2[v19 + 16];
  *((void *)v20 + 3) = *(void *)&a2[v19 + 24];
  swift_retain();
  swift_release();
  *((void *)v20 + 4) = *((void *)v21 + 4);
  swift_retain();
  swift_release();
  v20[40] = v21[40];
  *((void *)v20 + 6) = *((void *)v21 + 6);
  swift_retain();
  swift_release();
  *((void *)v20 + 7) = *((void *)v21 + 7);
  a1[a3[12]] = a2[a3[12]];
  a1[a3[13]] = a2[a3[13]];
  uint64_t v22 = a3[14];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = sub_10008A260();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  uint64_t v26 = a3[15];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *(void *)v28;
  LOBYTE(v28) = v28[8];
  *(void *)uint64_t v27 = v29;
  v27[8] = (_BYTE)v28;
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *sub_10006A2DC(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_100089580();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  long long v14 = *(_OWORD *)v13;
  long long v15 = *((_OWORD *)v13 + 1);
  *((void *)v12 + 4) = *((void *)v13 + 4);
  LOBYTE(v13) = a2[v11];
  *(_OWORD *)uint64_t v12 = v14;
  *((_OWORD *)v12 + 1) = v15;
  a1[v11] = (_BYTE)v13;
  uint64_t v16 = a3[8];
  int v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = sub_1000893C0();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_10000697C(&qword_1000A47F8);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v22 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v22] = a2[v22];
  uint64_t v23 = a3[11];
  uint64_t v24 = a3[12];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  long long v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  long long v28 = v26[3];
  v25[2] = v26[2];
  v25[3] = v28;
  a1[v24] = a2[v24];
  uint64_t v29 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  uint64_t v30 = &a1[v29];
  long long v31 = &a2[v29];
  uint64_t v32 = sub_10008A260();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
  uint64_t v33 = a3[15];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  v34[8] = v35[8];
  return a1;
}

unsigned char *sub_10006A510(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_100089580();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  sub_10000F380((uint64_t)&a1[v10]);
  long long v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((void *)v11 + 4) = *((void *)v12 + 4);
  uint64_t v14 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  long long v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_1000893C0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_10000697C(&qword_1000A47F8);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  uint64_t v23 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v23] = a2[v23];
  uint64_t v24 = a3[11];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&a2[v24];
  *((void *)v25 + 2) = *(void *)&a2[v24 + 16];
  *((void *)v25 + 3) = *(void *)&a2[v24 + 24];
  swift_release();
  *((void *)v25 + 4) = *((void *)v26 + 4);
  swift_release();
  v25[40] = v26[40];
  *((void *)v25 + 6) = *((void *)v26 + 6);
  swift_release();
  *((void *)v25 + 7) = *((void *)v26 + 7);
  uint64_t v27 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v27] = a2[v27];
  uint64_t v28 = a3[14];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = sub_10008A260();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  uint64_t v32 = a3[15];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = *(void *)v34;
  LOBYTE(v34) = v34[8];
  *(void *)uint64_t v33 = v35;
  v33[8] = (_BYTE)v34;
  swift_release();
  return a1;
}

uint64_t sub_10006A7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006A810);
}

uint64_t sub_10006A810(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100089580();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_9:
    long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v13(a1 + v9, a2, v7);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + a3[6] + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v12 = sub_10000697C(&qword_1000A47F8);
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
    {
      uint64_t v7 = v12;
      uint64_t v8 = *(void *)(v12 - 8);
      uint64_t v9 = a3[8];
      goto LABEL_9;
    }
    uint64_t v14 = sub_10008A260();
    long long v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[14];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_10006A994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006A9A8);
}

uint64_t sub_10006A9A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_100089580();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 24) = (a2 - 1);
    return result;
  }
  uint64_t v12 = sub_10000697C(&qword_1000A47F8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t v14 = sub_10008A260();
  long long v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a4[14];

  return v15(v17, a2, a2, v16);
}

void sub_10006AB2C()
{
  sub_100089580();
  if (v0 <= 0x3F)
  {
    sub_100067010(319, (unint64_t *)&qword_1000A49B8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v1 <= 0x3F)
    {
      sub_10008A260();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t initializeWithCopy for Clock.ClockHand(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Clock.ClockHand(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Clock.ClockHand(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for Clock.ClockHand()
{
  return &type metadata for Clock.ClockHand;
}

__n128 initializeBufferWithCopyOfBuffer for Clock.ClockHand.ClockHandConnector(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Clock.ClockHand.ClockHandConnector(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Clock.ClockHand.ClockHandConnector(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Clock.ClockHand.ClockHandConnector()
{
  return &type metadata for Clock.ClockHand.ClockHandConnector;
}

__n128 initializeWithCopy for Clock.ClockHand.ClockHandShape(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Clock.ClockHand.ClockHandShape(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Clock.ClockHand.ClockHandShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Clock.ClockHand.ClockHandShape()
{
  return &type metadata for Clock.ClockHand.ClockHandShape;
}

uint64_t destroy for ClockUIConfig()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ClockUIConfig(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ClockUIConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for ClockUIConfig(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockUIConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockUIConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockUIConfig()
{
  return &type metadata for ClockUIConfig;
}

uint64_t destroy for ClockUIConfig.RingConfig()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ClockUIConfig.RingConfig(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ClockUIConfig.RingConfig(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for ClockUIConfig.RingConfig(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClockUIConfig.RingConfig(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockUIConfig.RingConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockUIConfig.RingConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockUIConfig.RingConfig()
{
  return &type metadata for ClockUIConfig.RingConfig;
}

uint64_t sub_10006B364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B378);
}

uint64_t sub_10006B37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B390);
}

void sub_10006B398()
{
  sub_100067010(319, (unint64_t *)&unk_1000A6398, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10006B468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  sub_100033AF0(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  sub_100033AFC(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_10000F024(a1 + v10, &qword_1000A5E40);
    sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_10008A260();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      void *v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10006B57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  sub_100033AFC(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (const void *)(a2 + v10);
    sub_10000F024(a1 + v10, &qword_1000A5E40);
    uint64_t v13 = sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_10008A260();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10006B68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B6A0);
}

uint64_t sub_10006B6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B6B8);
}

uint64_t sub_10006B6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B6D0);
}

uint64_t sub_10006B6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B6E8);
}

unsigned char *sub_10006B6EC(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (unsigned char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[1];
    char v8 = *((unsigned char *)a2 + 16);
    sub_100033AF0(v7, v8);
    *((void *)v4 + 1) = v7;
    v4[16] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = &v4[v9];
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_10000697C(&qword_1000A5E40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10008A260();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_10006B834(uint64_t a1, uint64_t a2)
{
  sub_100033AFC(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_10008A260();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_10006B8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  sub_100033AF0(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_10008A260();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    void *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10006B9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_10008A260();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10006BAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006BAD8);
}

uint64_t sub_10006BADC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_10000697C(&qword_1000A59C0);
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 24)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10006BB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006BBA4);
}

unsigned char *sub_10006BBA8(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *__n128 result = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_10000697C(&qword_1000A59C0);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 24)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

void *sub_10006BC50(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for WorldClockEntry();
    *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
    *((unsigned char *)a1 + *(int *)(v8 + 24)) = *((unsigned char *)a2 + *(int *)(v8 + 24));
    *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10006BD4C(uint64_t a1)
{
  uint64_t v2 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10006BDD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10006BE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10006BF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10006BFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10006C094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C0A8);
}

uint64_t sub_10006C0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for WorldClockEntry();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10006C168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C17C);
}

uint64_t sub_10006C17C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for WorldClockEntry();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10006C238()
{
  uint64_t result = type metadata accessor for WorldClockEntry();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10006C2D0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for WorldClockEntry();
    *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
    *((unsigned char *)a1 + *(int *)(v8 + 24)) = *((unsigned char *)a2 + *(int *)(v8 + 24));
    uint64_t v9 = a3[5];
    unint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    long long v15 = *(_OWORD *)((char *)a2 + v14 + 24);
    *(_OWORD *)((char *)a1 + v14 + 24) = v15;
    (**(void (***)(void))(v15 - 8))();
    uint64_t v16 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_10006C4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000899F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  return sub_10000F380(a1 + *(int *)(a2 + 24));
}

uint64_t sub_10006C5B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (void *)(a2 + v8);
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1000899F0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    void *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a3[6];
  long long v13 = *(_OWORD *)(a2 + v12 + 24);
  *(_OWORD *)(a1 + v12 + 24) = v13;
  (**(void (***)(void))(v13 - 8))();
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006C758(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)(a1 + v8);
    unint64_t v10 = (void *)(a2 + v8);
    sub_10000F024(a1 + v8, &qword_1000A4FF0);
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      void *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  sub_100062644((uint64_t *)(a1 + a3[6]), (uint64_t *)(a2 + a3[6]));
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006C8E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_1000899F0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = (long long *)(a2 + v13);
  long long v17 = *v16;
  long long v18 = v16[1];
  *(void *)(v15 + 32) = *((void *)v16 + 4);
  *(_OWORD *)uint64_t v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v19 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  return a1;
}

uint64_t sub_10006CA50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)(a1 + v8);
    unint64_t v10 = (const void *)(a2 + v8);
    sub_10000F024(a1 + v8, &qword_1000A4FF0);
    uint64_t v11 = sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_1000899F0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  sub_10000F380(a1 + v13);
  long long v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  uint64_t v17 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006CBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006CC04);
}

uint64_t sub_10006CC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for WorldClockEntry();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000697C(&qword_1000A4B70);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 24);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10006CD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006CD34);
}

uint64_t sub_10006CD34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for WorldClockEntry();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_10000697C(&qword_1000A4B70);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10006CE4C()
{
  type metadata accessor for WorldClockEntry();
  if (v0 <= 0x3F)
  {
    sub_100067010(319, (unint64_t *)&qword_1000A5070, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_10006CF5C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for WorldClockEntry();
    *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
    *((unsigned char *)a1 + *(int *)(v8 + 24)) = *((unsigned char *)a2 + *(int *)(v8 + 24));
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    long long v12 = *(_OWORD *)((char *)a2 + v9 + 24);
    *(_OWORD *)((char *)a1 + v9 + 24) = v12;
    uint64_t v13 = v12;
    uint64_t v14 = **(void (***)(char *, char *, uint64_t))(v12 - 8);
    swift_bridgeObjectRetain();
    v14(v10, v11, v13);
    uint64_t v15 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_10006D0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  return sub_10000F380(a1 + *(int *)(a2 + 20));
}

uint64_t sub_10006D150(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(a2 + v8 + 24);
  *(_OWORD *)(a1 + v8 + 24) = v11;
  uint64_t v12 = v11;
  uint64_t v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  swift_bridgeObjectRetain();
  v13(v9, v10, v12);
  uint64_t v14 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006D278(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  sub_100062644((uint64_t *)(a1 + a3[5]), (uint64_t *)(a2 + a3[5]));
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006D358(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)(v10 + 32) = *(void *)(v11 + 32);
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t sub_10006D420(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  sub_10000F380(a1 + v8);
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  uint64_t v12 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006D508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006D51C);
}

uint64_t sub_10006D51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for WorldClockEntry();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10006D5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006D5F4);
}

uint64_t sub_10006D5F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for WorldClockEntry();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10006D6B4()
{
  uint64_t result = type metadata accessor for WorldClockEntry();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10006D758(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for WorldClockEntry();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_1000893C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(void *)((char *)a1 + *(int *)(v6 + 20)) = *(void *)((char *)a2 + *(int *)(v6 + 20));
    *((unsigned char *)a1 + *(int *)(v6 + 24)) = *((unsigned char *)a2 + *(int *)(v6 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10006D83C(uint64_t a1)
{
  uint64_t v2 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for WorldClockEntry();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10006D8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  *(unsigned char *)(a1 + *(int *)(v5 + 24)) = *(unsigned char *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10006D940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v5 + 24)) = *(unsigned char *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t sub_10006D9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  *(unsigned char *)(a1 + *(int *)(v5 + 24)) = *(unsigned char *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t sub_10006DA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for WorldClockEntry();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(v5 + 24)) = *(unsigned char *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t sub_10006DAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006DB10);
}

uint64_t sub_10006DB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006DB28(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
}

uint64_t sub_10006DB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t sub_10006DB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006DBAC);
}

uint64_t sub_10006DBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006DBC4(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for WorldClockEntry);
}

uint64_t sub_10006DBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata accessor for CityInlineComplication(uint64_t a1)
{
  return sub_100022C28(a1, qword_1000AB6E0);
}

uint64_t sub_10006DC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006DC70(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockEntry);
}

uint64_t sub_10006DC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10006DD04()
{
  unint64_t result = qword_1000A6FF8;
  if (!qword_1000A6FF8)
  {
    sub_10000B798(&qword_1000A5E50);
    sub_10006F9A4(&qword_1000A7000, &qword_1000A5E48, (void (*)(void))sub_10006DDE8);
    sub_10004A694(&qword_1000A7030, (void (*)(uint64_t))type metadata accessor for AccentedWidgetBackground);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A6FF8);
  }
  return result;
}

unint64_t sub_10006DDE8()
{
  unint64_t result = qword_1000A7008;
  if (!qword_1000A7008)
  {
    sub_10000B798(&qword_1000A7010);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7020, &qword_1000A7028);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7008);
  }
  return result;
}

uint64_t sub_10006DEB8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10006DF3C()
{
  unint64_t result = qword_1000A7038;
  if (!qword_1000A7038)
  {
    sub_10000B798(&qword_1000A7040);
    sub_10004A694(&qword_1000A5EA0, (void (*)(uint64_t))type metadata accessor for PlaceholderViewMulti);
    sub_10006F9A4(&qword_1000A5EA8, &qword_1000A5E88, (void (*)(void))sub_10004A6DC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7038);
  }
  return result;
}

unint64_t sub_10006E024()
{
  unint64_t result = qword_1000A7048;
  if (!qword_1000A7048)
  {
    sub_10000B798(&qword_1000A7050);
    sub_10004A694(&qword_1000A5EC8, (void (*)(uint64_t))type metadata accessor for SmallWorldClockView);
    sub_10004A694(&qword_1000A5DD0, (void (*)(uint64_t))type metadata accessor for CapMaxContentSizeCategory);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7048);
  }
  return result;
}

uint64_t sub_10006E100()
{
  return sub_10006F9A4(&qword_1000A7058, &qword_1000A5ED8, (void (*)(void))sub_10006E150);
}

unint64_t sub_10006E150()
{
  unint64_t result = qword_1000A7060;
  if (!qword_1000A7060)
  {
    sub_10000B798(&qword_1000A5EE8);
    sub_10001845C(&qword_1000A5EF0, &qword_1000A5EE0);
    sub_10004A694(&qword_1000A5EC0, (void (*)(uint64_t))type metadata accessor for MediumWorldClockView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7060);
  }
  return result;
}

uint64_t sub_10006E220()
{
  return sub_10005D64C(&qword_1000A7068, &qword_1000A5F38, (void (*)(void))sub_10006E264);
}

uint64_t sub_10006E264()
{
  return sub_10005D64C(&qword_1000A7070, &qword_1000A5F30, (void (*)(void))sub_10006E294);
}

unint64_t sub_10006E294()
{
  unint64_t result = qword_1000A7078;
  if (!qword_1000A7078)
  {
    sub_10000B798(&qword_1000A5F28);
    sub_10006FEAC(&qword_1000A7080, &qword_1000A5F20, &qword_1000A5F10, (void (*)(void))sub_10004A8B0);
    sub_10001845C(&qword_1000A5F98, &qword_1000A5F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7078);
  }
  return result;
}

uint64_t sub_10006E360()
{
  return sub_10001845C(&qword_1000A7090, &qword_1000A7098);
}

uint64_t sub_10006E39C()
{
  return sub_10001845C(&qword_1000A70A0, &qword_1000A70A8);
}

uint64_t sub_10006E3D8()
{
  return sub_10006FEAC(&qword_1000A70B0, &qword_1000A70B8, &qword_1000A5F70, (void (*)(void))sub_10005C50C);
}

unint64_t sub_10006E420()
{
  unint64_t result = qword_1000A70C0;
  if (!qword_1000A70C0)
  {
    sub_10000B798(&qword_1000A70C8);
    sub_10001845C(&qword_1000A5FB0, &qword_1000A5FA0);
    sub_10004A694(&qword_1000A7088, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A70C0);
  }
  return result;
}

uint64_t sub_10006E4F0()
{
  return sub_10001845C(&qword_1000A70D0, &qword_1000A70D8);
}

uint64_t sub_10006E52C()
{
  return sub_10001845C(&qword_1000A70E0, &qword_1000A70E8);
}

uint64_t sub_10006E568()
{
  return sub_10005D64C(&qword_1000A70F0, &qword_1000A5FD8, (void (*)(void))sub_10006E5AC);
}

unint64_t sub_10006E5AC()
{
  unint64_t result = qword_1000A70F8;
  if (!qword_1000A70F8)
  {
    sub_10000B798(&qword_1000A5FD0);
    sub_10004A694(&qword_1000A7100, (void (*)(uint64_t))type metadata accessor for ClockWidgetAccentableForegroundColor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A70F8);
  }
  return result;
}

uint64_t sub_10006E658()
{
  return sub_10001845C(&qword_1000A7108, &qword_1000A7110);
}

uint64_t sub_10006E694()
{
  return sub_10001845C(&qword_1000A7118, &qword_1000A7120);
}

unint64_t sub_10006E6D4()
{
  unint64_t result = qword_1000A7128;
  if (!qword_1000A7128)
  {
    sub_10000B798(&qword_1000A7130);
    sub_10006E780(&qword_1000A7138, &qword_1000A7140, (void (*)(void))sub_10006E808, (void (*)(void))sub_10006EA70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7128);
  }
  return result;
}

uint64_t sub_10006E780(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006E808()
{
  unint64_t result = qword_1000A7148;
  if (!qword_1000A7148)
  {
    sub_10000B798(&qword_1000A7150);
    sub_10000B798(&qword_1000A7158);
    sub_10005D64C(&qword_1000A7160, &qword_1000A7158, (void (*)(void))sub_10006E910);
    swift_getOpaqueTypeConformance2();
    sub_10001845C(&qword_1000A71C8, &qword_1000A71D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7148);
  }
  return result;
}

uint64_t sub_10006E910()
{
  return sub_10005D64C(&qword_1000A7168, &qword_1000A7170, (void (*)(void))sub_10006E940);
}

uint64_t sub_10006E940()
{
  return sub_10005D64C(&qword_1000A7178, &qword_1000A7180, (void (*)(void))sub_10006E970);
}

uint64_t sub_10006E970()
{
  return sub_10005D64C(&qword_1000A7188, &qword_1000A7190, (void (*)(void))sub_10006E9A0);
}

uint64_t sub_10006E9A0()
{
  return sub_10005D64C(&qword_1000A7198, &qword_1000A71A0, (void (*)(void))sub_10006E9D0);
}

unint64_t sub_10006E9D0()
{
  unint64_t result = qword_1000A71A8;
  if (!qword_1000A71A8)
  {
    sub_10000B798(&qword_1000A71B0);
    sub_10001845C(&qword_1000A71B8, &qword_1000A71C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A71A8);
  }
  return result;
}

unint64_t sub_10006EA70()
{
  unint64_t result = qword_1000A71D8;
  if (!qword_1000A71D8)
  {
    sub_10000B798(&qword_1000A71E0);
    sub_10005D64C(&qword_1000A71E8, &qword_1000A71F0, (void (*)(void))sub_10006EB3C);
    sub_10001845C(&qword_1000A71C8, &qword_1000A71D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A71D8);
  }
  return result;
}

uint64_t sub_10006EB3C()
{
  return sub_10005D64C(&qword_1000A71F8, &qword_1000A7200, (void (*)(void))sub_10006E970);
}

unint64_t sub_10006EB70()
{
  unint64_t result = qword_1000A7208;
  if (!qword_1000A7208)
  {
    sub_10000B798(&qword_1000A5FF8);
    sub_10000B798(&qword_1000A6000);
    sub_10001845C(&qword_1000A6008, &qword_1000A6000);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7208);
  }
  return result;
}

uint64_t sub_10006EC4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006ED10()
{
  return sub_10005D64C(&qword_1000A7210, &qword_1000A6038, (void (*)(void))sub_10006ED54);
}

unint64_t sub_10006ED54()
{
  unint64_t result = qword_1000A7218;
  if (!qword_1000A7218)
  {
    sub_10000B798(&qword_1000A6030);
    sub_10001845C(&qword_1000A7220, &qword_1000A6040);
    sub_10001845C(&qword_1000A7228, &qword_1000A7230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7218);
  }
  return result;
}

uint64_t sub_10006EE18(uint64_t a1)
{
  return sub_10006EEF0(a1, (void (*)(uint64_t))type metadata accessor for ClockWidgetAccentableOpacity, &qword_1000A7238, (void (*)(uint64_t))type metadata accessor for ClockWidgetAccentableOpacity);
}

uint64_t sub_10006EE60(uint64_t a1)
{
  return sub_10006EEF0(a1, (void (*)(uint64_t))type metadata accessor for ClockWidgetAccentableForegroundColor, &qword_1000A7100, (void (*)(uint64_t))type metadata accessor for ClockWidgetAccentableForegroundColor);
}

uint64_t sub_10006EEA8(uint64_t a1)
{
  return sub_10006EEF0(a1, (void (*)(uint64_t))type metadata accessor for AccentedWidgetBackground, &qword_1000A7030, (void (*)(uint64_t))type metadata accessor for AccentedWidgetBackground);
}

uint64_t sub_10006EEF0(uint64_t a1, void (*a2)(uint64_t), unint64_t *a3, void (*a4)(uint64_t))
{
  return swift_getWitnessTable();
}

uint64_t sub_10006EF88()
{
  return sub_10005D64C(&qword_1000A7240, &qword_1000A6060, (void (*)(void))sub_10006EFCC);
}

uint64_t sub_10006EFCC()
{
  return sub_10005D64C(&qword_1000A7248, &qword_1000A6058, (void (*)(void))sub_10006EFFC);
}

unint64_t sub_10006EFFC()
{
  unint64_t result = qword_1000A7250;
  if (!qword_1000A7250)
  {
    sub_10000B798(&qword_1000A6050);
    sub_10006F9A4(&qword_1000A7258, &qword_1000A6048, (void (*)(void))sub_10006F0D4);
    sub_10001845C(&qword_1000A50B0, &qword_1000A5000);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7250);
  }
  return result;
}

unint64_t sub_10006F0D4()
{
  unint64_t result = qword_1000A7260;
  if (!qword_1000A7260)
  {
    sub_10000B798(&qword_1000A7268);
    sub_10001845C(&qword_1000A7270, &qword_1000A7278);
    sub_10006F174();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7260);
  }
  return result;
}

unint64_t sub_10006F174()
{
  unint64_t result = qword_1000A7280;
  if (!qword_1000A7280)
  {
    sub_10000B798(&qword_1000A7288);
    sub_10001845C(&qword_1000A7290, &qword_1000A7298);
    sub_10004A694(&qword_1000A7238, (void (*)(uint64_t))type metadata accessor for ClockWidgetAccentableOpacity);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7280);
  }
  return result;
}

unint64_t sub_10006F248()
{
  unint64_t result = qword_1000A72A0;
  if (!qword_1000A72A0)
  {
    sub_10000B798(&qword_1000A60E0);
    sub_10005CF60();
    sub_10004A694(&qword_1000A7088, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A72A0);
  }
  return result;
}

unint64_t sub_10006F2F8()
{
  unint64_t result = qword_1000A72A8;
  if (!qword_1000A72A8)
  {
    sub_10000B798(&qword_1000A6128);
    sub_10005CE90(&qword_1000A60B0, &qword_1000A60B8);
    sub_10004A694(&qword_1000A7088, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A72A8);
  }
  return result;
}

unint64_t sub_10006F3C8()
{
  unint64_t result = qword_1000A72B0;
  if (!qword_1000A72B0)
  {
    sub_10000B798(&qword_1000A6068);
    sub_10005CC88();
    sub_10004A694(&qword_1000A7088, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A72B0);
  }
  return result;
}

unint64_t sub_10006F478()
{
  unint64_t result = qword_1000A72B8;
  if (!qword_1000A72B8)
  {
    sub_10000B798(&qword_1000A6180);
    sub_10006FEAC(&qword_1000A72C0, &qword_1000A6158, &qword_1000A6148, (void (*)(void))sub_10005D210);
    sub_10001845C(&qword_1000A72C8, &qword_1000A72D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A72B8);
  }
  return result;
}

uint64_t sub_10006F544()
{
  return sub_10005D64C(&qword_1000A72D8, &qword_1000A6198, (void (*)(void))sub_10006F588);
}

unint64_t sub_10006F588()
{
  unint64_t result = qword_1000A72E0;
  if (!qword_1000A72E0)
  {
    sub_10000B798(&qword_1000A6190);
    sub_10006F628();
    sub_10001845C(&qword_1000A72F0, &qword_1000A6188);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A72E0);
  }
  return result;
}

unint64_t sub_10006F628()
{
  unint64_t result = qword_1000A72E8;
  if (!qword_1000A72E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A72E8);
  }
  return result;
}

uint64_t sub_10006F67C()
{
  return sub_10005D64C(&qword_1000A72F8, &qword_1000A7300, (void (*)(void))sub_10006F628);
}

uint64_t sub_10006F6C8()
{
  return sub_10001845C(&qword_1000A7308, &qword_1000A7310);
}

unint64_t sub_10006F708()
{
  unint64_t result = qword_1000A7318;
  if (!qword_1000A7318)
  {
    sub_10000B798(&qword_1000A61A8);
    sub_10006F9A4(&qword_1000A7320, &qword_1000A61A0, (void (*)(void))sub_10006F7EC);
    sub_10004A694(&qword_1000A7030, (void (*)(uint64_t))type metadata accessor for AccentedWidgetBackground);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7318);
  }
  return result;
}

unint64_t sub_10006F7EC()
{
  unint64_t result = qword_1000A7328;
  if (!qword_1000A7328)
  {
    sub_10000B798(&qword_1000A7330);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7338, &qword_1000A7340);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7328);
  }
  return result;
}

unint64_t sub_10006F8C0()
{
  unint64_t result = qword_1000A7348;
  if (!qword_1000A7348)
  {
    sub_10000B798(&qword_1000A61B8);
    sub_10006F9A4(&qword_1000A7350, &qword_1000A61B0, (void (*)(void))sub_10006FA10);
    sub_10004A694(&qword_1000A7030, (void (*)(uint64_t))type metadata accessor for AccentedWidgetBackground);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7348);
  }
  return result;
}

uint64_t sub_10006F9A4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006FA10()
{
  unint64_t result = qword_1000A7358;
  if (!qword_1000A7358)
  {
    sub_10000B798(&qword_1000A7360);
    sub_10004A694(&qword_1000A7018, (void (*)(uint64_t))type metadata accessor for PlaceholderViewSingle);
    sub_10001845C(&qword_1000A7368, &qword_1000A7370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7358);
  }
  return result;
}

uint64_t sub_10006FAE0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006FBE4()
{
  return sub_10006FEAC(&qword_1000A7378, &qword_1000A6230, &qword_1000A6220, (void (*)(void))sub_10005D420);
}

unint64_t sub_10006FC2C()
{
  unint64_t result = qword_1000A7380;
  if (!qword_1000A7380)
  {
    sub_10000B798(&qword_1000A7388);
    sub_10005D4E0();
    sub_10004A694(&qword_1000A7088, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7380);
  }
  return result;
}

unint64_t sub_10006FCDC()
{
  unint64_t result = qword_1000A7390;
  if (!qword_1000A7390)
  {
    sub_10000B798(&qword_1000A7398);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7390);
  }
  return result;
}

unint64_t sub_10006FD54()
{
  unint64_t result = qword_1000A73A0;
  if (!qword_1000A73A0)
  {
    sub_10000B798(&qword_1000A73A8);
    sub_10000B798(&qword_1000A62A0);
    sub_10005D64C(&qword_1000A62B8, &qword_1000A62A0, (void (*)(void))sub_10005D6C8);
    swift_getOpaqueTypeConformance2();
    sub_10004A694(&qword_1000A7088, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A73A0);
  }
  return result;
}

uint64_t sub_10006FE68()
{
  return sub_10006FEAC(&qword_1000A73B0, &qword_1000A73B8, &qword_1000A62D8, (void (*)(void))sub_10005D78C);
}

uint64_t sub_10006FEAC(unint64_t *a1, uint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    sub_10000B798(a3);
    a4();
    swift_getOpaqueTypeConformance2();
    sub_10004A694(&qword_1000A7088, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006FF90()
{
  unint64_t result = qword_1000A73C0;
  if (!qword_1000A73C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A73C0);
  }
  return result;
}

void sub_10006FFE4(uint64_t a1)
{
  sub_100052CD0(*(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 64), *(double *)(v1 + 72), a1, *(unsigned char *)(v1 + 56));
}

unint64_t sub_10006FFFC()
{
  unint64_t result = qword_1000A73C8;
  if (!qword_1000A73C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A73C8);
  }
  return result;
}

void sub_100070050()
{
  sub_10005299C(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_100070064()
{
  uint64_t v1 = (int *)(type metadata accessor for MediumWorldClockView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v6 + v1[10];
  uint64_t v9 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000701AC()
{
  uint64_t v1 = (int *)(type metadata accessor for SmallMultiWorldClockView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[9];
  uint64_t v8 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v4, v5);
}

unint64_t sub_1000702A0()
{
  unint64_t result = qword_1000A7430;
  if (!qword_1000A7430)
  {
    sub_10000B798(&qword_1000A7418);
    sub_10005D5B0(&qword_1000A6288, &qword_1000A6280, &qword_1000A60D0, &qword_1000A60D8);
    sub_10001845C(&qword_1000A73E8, &qword_1000A73D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7430);
  }
  return result;
}

unint64_t sub_100070360()
{
  unint64_t result = qword_1000A7470;
  if (!qword_1000A7470)
  {
    sub_10000B798(&qword_1000A7468);
    sub_100070400();
    sub_10001845C(&qword_1000A6270, &qword_1000A6278);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7470);
  }
  return result;
}

unint64_t sub_100070400()
{
  unint64_t result = qword_1000A7478;
  if (!qword_1000A7478)
  {
    sub_10000B798(&qword_1000A7480);
    sub_1000704A0();
    sub_10001845C(&qword_1000A7228, &qword_1000A7230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7478);
  }
  return result;
}

unint64_t sub_1000704A0()
{
  unint64_t result = qword_1000A7488;
  if (!qword_1000A7488)
  {
    sub_10000B798(&qword_1000A7490);
    sub_10005D5B0(&qword_1000A6260, &qword_1000A6268, &qword_1000A6118, &qword_1000A6120);
    sub_10001845C(&qword_1000A60C0, &qword_1000A60C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7488);
  }
  return result;
}

uint64_t sub_100070564(uint64_t a1)
{
  return sub_10007076C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100057AF8);
}

unint64_t sub_10007057C()
{
  unint64_t result = qword_1000A74B8;
  if (!qword_1000A74B8)
  {
    sub_10000B798(&qword_1000A74A8);
    sub_1000705F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A74B8);
  }
  return result;
}

unint64_t sub_1000705F8()
{
  unint64_t result = qword_1000A74C0;
  if (!qword_1000A74C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A74C0);
  }
  return result;
}

uint64_t sub_100070650()
{
  uint64_t v1 = *(void *)(type metadata accessor for WorldClockRectangularSummary(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100070754(uint64_t a1)
{
  return sub_10007076C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000569A8);
}

uint64_t sub_10007076C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for WorldClockRectangularSummary(0) - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

unint64_t sub_100070800()
{
  unint64_t result = qword_1000A7548;
  if (!qword_1000A7548)
  {
    sub_10000B798(&qword_1000A7540);
    sub_10005D5B0(&qword_1000A7500, &qword_1000A74F8, &qword_1000A60C0, &qword_1000A60C8);
    sub_10001845C(&qword_1000A6118, &qword_1000A6120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7548);
  }
  return result;
}

uint64_t sub_1000708C0()
{
  return sub_100070AB0(type metadata accessor for SquareWidgetView);
}

uint64_t sub_1000708D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100070CE8(type metadata accessor for SquareWidgetView, (void (*)(void))type metadata accessor for SquareWidgetView, a1);
}

uint64_t sub_100070904(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    sub_10004A694(&qword_1000A5EC8, (void (*)(uint64_t))type metadata accessor for SmallWorldClockView);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000709A8()
{
  unint64_t result = qword_1000A7580;
  if (!qword_1000A7580)
  {
    sub_10000B798(&qword_1000A7568);
    sub_100070904(&qword_1000A7578, &qword_1000A7560);
    sub_10004A694(&qword_1000A5DD0, (void (*)(uint64_t))type metadata accessor for CapMaxContentSizeCategory);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7580);
  }
  return result;
}

uint64_t sub_100070A6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100070A98()
{
  return sub_100070AB0(type metadata accessor for NonNumericWidgetView);
}

uint64_t sub_100070AB0(uint64_t (*a1)(void))
{
  uint64_t v2 = (int *)(a1(0) - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(*(void *)v2 + 64);
  sub_100033AFC(*(void *)(v1 + v4 + 8), *(unsigned char *)(v1 + v4 + 16));
  uint64_t v6 = v1 + v4 + v2[8];
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_10008A260();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v1, v4 + v5, v3 | 7);
}

uint64_t sub_100070BD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100070BF0(type metadata accessor for NonNumericWidgetView, (void (*)(void))type metadata accessor for NonNumericWidgetView, a1);
}

uint64_t sub_100070BF0@<X0>(uint64_t (*a1)(void)@<X1>, void (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1(0) - 8);
  return sub_1000545FC(v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a2, a3);
}

uint64_t sub_100070C70()
{
  return sub_100070AB0(type metadata accessor for DateTimeWidgetView);
}

uint64_t sub_100070C88@<X0>(uint64_t a1@<X8>)
{
  return sub_100070BF0(type metadata accessor for DateTimeWidgetView, (void (*)(void))type metadata accessor for DateTimeWidgetView, a1);
}

uint64_t sub_100070CA4()
{
  return sub_100070AB0(type metadata accessor for DigitalClockWidgetView);
}

uint64_t sub_100070CBC@<X0>(uint64_t a1@<X8>)
{
  return sub_100070CE8(type metadata accessor for DigitalClockWidgetView, (void (*)(void))type metadata accessor for DigitalClockWidgetView, a1);
}

uint64_t sub_100070CE8@<X0>(uint64_t (*a1)(void)@<X1>, void (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1(0) - 8);
  return sub_1000556A8(v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a2, a3);
}

uint64_t sub_100070D68(uint64_t a1)
{
  return a1;
}

uint64_t sub_100070D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_100070DD8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100070E24(uint64_t a1)
{
  return a1;
}

uint64_t sub_100070E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t sub_100070EB4()
{
  unint64_t result = qword_1000A7600;
  if (!qword_1000A7600)
  {
    sub_10000B798(&qword_1000A75E8);
    sub_10001845C(&qword_1000A7608, &qword_1000A75E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7600);
  }
  return result;
}

unint64_t sub_100070F4C()
{
  unint64_t result = qword_1000A77B8;
  if (!qword_1000A77B8)
  {
    sub_10000B798(&qword_1000A7778);
    sub_100070FF8();
    sub_10004A694(&qword_1000A7238, (void (*)(uint64_t))type metadata accessor for ClockWidgetAccentableOpacity);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A77B8);
  }
  return result;
}

unint64_t sub_100070FF8()
{
  unint64_t result = qword_1000A77C0;
  if (!qword_1000A77C0)
  {
    sub_10000B798(&qword_1000A77C8);
    sub_10001845C(&qword_1000A77D0, &qword_1000A77D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A77C0);
  }
  return result;
}

unint64_t sub_100071098()
{
  unint64_t result = qword_1000A77F8;
  if (!qword_1000A77F8)
  {
    sub_10000B798(&qword_1000A7758);
    sub_10001845C(&qword_1000A70D0, &qword_1000A70D8);
    sub_10000B798(&qword_1000A70E8);
    sub_10001845C(&qword_1000A70E0, &qword_1000A70E8);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A77F8);
  }
  return result;
}

unint64_t sub_100071194()
{
  unint64_t result = qword_1000A7800;
  if (!qword_1000A7800)
  {
    sub_10000B798(&qword_1000A7728);
    sub_10000B798(&qword_1000A5FD8);
    sub_10005D64C(&qword_1000A70F0, &qword_1000A5FD8, (void (*)(void))sub_10006E5AC);
    swift_getOpaqueTypeConformance2();
    sub_10000B798(&qword_1000A7110);
    sub_10001845C(&qword_1000A7108, &qword_1000A7110);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7800);
  }
  return result;
}

uint64_t sub_1000712CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100071328(uint64_t a1)
{
  return a1;
}

unint64_t sub_100071384()
{
  unint64_t result = qword_1000A7868;
  if (!qword_1000A7868)
  {
    sub_10000B798(&qword_1000A7848);
    sub_100071424();
    sub_10001845C(&qword_1000A6118, &qword_1000A6120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7868);
  }
  return result;
}

unint64_t sub_100071424()
{
  unint64_t result = qword_1000A7870;
  if (!qword_1000A7870)
  {
    sub_10000B798(&qword_1000A7840);
    sub_1000714C4();
    sub_10001845C(&qword_1000A7228, &qword_1000A7230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7870);
  }
  return result;
}

unint64_t sub_1000714C4()
{
  unint64_t result = qword_1000A7878;
  if (!qword_1000A7878)
  {
    sub_10000B798(&qword_1000A7838);
    sub_10005D09C(&qword_1000A7880, &qword_1000A7888, &qword_1000A6270, &qword_1000A6278);
    sub_10001845C(&qword_1000A50B0, &qword_1000A5000);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7878);
  }
  return result;
}

uint64_t sub_100071584()
{
  uint64_t v1 = (int *)(type metadata accessor for MediumWorldClockView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 79) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v6 + v1[10];
  uint64_t v9 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000716F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for MediumWorldClockView(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);

  return sub_10003DD3C(a1, v2 + v6, v7, a2);
}

unint64_t sub_1000717B4()
{
  unint64_t result = qword_1000A7900;
  if (!qword_1000A7900)
  {
    sub_10000B798(&qword_1000A78F0);
    sub_100071828();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7900);
  }
  return result;
}

unint64_t sub_100071828()
{
  unint64_t result = qword_1000A7908;
  if (!qword_1000A7908)
  {
    sub_10000B798(&qword_1000A7910);
    sub_10004A694(&qword_1000A7918, (void (*)(uint64_t))type metadata accessor for MediumClockFaceView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7908);
  }
  return result;
}

uint64_t sub_1000718D4()
{
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10007190C()
{
  uint64_t v1 = (int *)(type metadata accessor for SmallMultiWorldClockView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 80) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[9];
  uint64_t v7 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return _swift_deallocObject(v0, v4, v5);
}

void sub_100071A10(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SmallMultiWorldClockView(0) - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  sub_10003C0AC(a1, v6, v2 + 24, v7, a2);
}

unint64_t sub_100071A98()
{
  unint64_t result = qword_1000A7988;
  if (!qword_1000A7988)
  {
    sub_10000B798(&qword_1000A7980);
    sub_10001845C(&qword_1000A7990, &qword_1000A7998);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7988);
  }
  return result;
}

uint64_t sub_100071B38()
{
  uint64_t v1 = (int *)(type metadata accessor for SmallMultiWorldClockView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 72) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[9];
  uint64_t v7 = sub_10008A260();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100071C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SmallMultiWorldClockView(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10003C4CC(a1, v2 + 16, v2 + v6, v7, a2);
}

uint64_t sub_100071CF8()
{
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100071D30()
{
  uint64_t v1 = (int *)type metadata accessor for WorldClockWidgetViewSingle(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = sub_1000893C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  type metadata accessor for WorldClockEntry();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v3 + v1[5];
  sub_10000697C(&qword_1000A4A58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_10008A280();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  sub_100033AFC(*(void *)(v5 + v1[6]), *(unsigned char *)(v5 + v1[6] + 8));
  uint64_t v9 = v5 + v1[7];
  sub_10000697C(&qword_1000A5E40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_10008A260();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100071F2C(uint64_t a1)
{
  return sub_100071F58(a1, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t (*)(uint64_t, uint64_t))sub_100034334);
}

uint64_t sub_100071F58(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t sub_100072010@<X0>(uint64_t a1@<X8>)
{
  return sub_100072480(v1, a1, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
}

uint64_t sub_100072044()
{
  uint64_t v1 = sub_100089B10();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AlarmSmallWidgetView(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5 - 8);
  sub_100072480(v0, (uint64_t)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AlarmSmallWidgetView);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  sub_100073BFC((uint64_t)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, type metadata accessor for AlarmSmallWidgetView);
  v11[0] = sub_1000724EC;
  v11[1] = v9;
  sub_100089B00();
  sub_10000697C(&qword_1000A7A90);
  sub_10001845C(&qword_1000A7A98, &qword_1000A7A90);
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return swift_release();
}

uint64_t type metadata accessor for AlarmSmallWidgetView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000ABA20);
}

void *sub_10007227C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for AlarmEntry() + 32)) == 1)
  {
    sub_100081CE8((uint64_t)v13);
  }
  else
  {
    uint64_t v4 = sub_10008A1B0();
    uint64_t v6 = v5;
    uint64_t v7 = *sub_100014D5C();
    swift_retain();
    uint64_t v8 = sub_100089A10();
    sub_1000724F0(a1, __src);
    __src[352] = 0;
    memcpy(&v11[7], __src, 0x159uLL);
    char v9 = sub_100089B90();
    __src[360] = 1;
    v13[0] = (unint64_t)v8;
    LOBYTE(v13[1]) = 0;
    memcpy((char *)&v13[1] + 1, v11, 0x160uLL);
    BYTE8(v13[23]) = v9;
    memset(&v13[24], 0, 32);
    LOBYTE(v13[26]) = 1;
    memcpy(__dst, v13, sizeof(__dst));
    v14[0] = (unint64_t)v8;
    LOBYTE(v14[1]) = 0;
    memcpy((char *)&v14[1] + 1, v11, 0x160uLL);
    BYTE8(v14[23]) = v9;
    memset(&v14[24], 0, 32);
    LOBYTE(v14[26]) = 1;
    swift_retain();
    sub_100081CF0((uint64_t)v13);
    sub_100081FAC((uint64_t)v14);
    swift_release();
    *(void *)&v13[0] = v4;
    *((void *)&v13[0] + 1) = v6;
    *(void *)&v13[1] = v7;
    memcpy((char *)&v13[1] + 8, __dst, 0x1A1uLL);
    sub_100081C88((uint64_t)v13);
  }
  sub_100027078((uint64_t)v13, (uint64_t)v11, &qword_1000A7FE8);
  sub_10000697C(&qword_1000A7FF0);
  sub_100081C94();
  sub_10001845C(&qword_1000A8000, &qword_1000A7FF0);
  sub_100089AB0();
  return memcpy(a2, v14, 0x1BAuLL);
}

uint64_t sub_100072480(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000724F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v185 = a2;
  uint64_t v3 = sub_100089CA0();
  uint64_t v172 = *(void *)(v3 - 8);
  uint64_t v173 = v3;
  __chkstk_darwin(v3);
  int v171 = &v158[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_100089DF0();
  __chkstk_darwin(v5 - 8);
  uint64_t v162 = &v158[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v7 - 8);
  char v163 = &v158[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t)&v158[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v179 = sub_100089930();
  uint64_t v186 = a1;
  sub_100073844((uint64_t)v208);
  uint64_t v182 = *((void *)&v208[0] + 1);
  uint64_t v183 = *((void *)&v208[1] + 1);
  uint64_t v188 = *(void *)&v208[0];
  uint64_t v184 = *((void *)&v208[2] + 1);
  uint64_t v189 = *(void *)&v208[2];
  int v180 = LOBYTE(v208[1]);
  int v181 = LOBYTE(v208[3]);
  uint64_t v190 = *((void *)&v208[3] + 1);
  *(void *)&v208[0] = sub_100008DA8();
  *((void *)&v208[0] + 1) = v12;
  unint64_t v164 = sub_100032F54();
  uint64_t v13 = sub_100089E40();
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  sub_100089C60();
  uint64_t v18 = enum case for Font.Design.default(_:);
  uint64_t v19 = sub_100089C20();
  uint64_t v20 = *(void *)(v19 - 8);
  int v21 = *(void (**)(uint64_t, void, uint64_t))(v20 + 104);
  LODWORD(v168) = v18;
  uint64_t v165 = v21;
  uint64_t v166 = v20 + 104;
  v21(v11, v18, v19);
  uint64_t v22 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
  uint64_t KeyPath = v20 + 56;
  uint64_t v170 = v19;
  uint64_t v167 = v22;
  v22(v11, 0, 1, v19);
  sub_100089C70();
  uint64_t v174 = v11;
  sub_10000F024(v11, &qword_1000A5B88);
  uint64_t v23 = sub_100089DB0();
  uint64_t v25 = v24;
  LOBYTE(v11) = v26;
  swift_release();
  sub_10000B7E0(v13, v15, v17);
  swift_bridgeObjectRelease();
  sub_1000155BC();
  swift_retain();
  uint64_t v27 = sub_100089D70();
  uint64_t v29 = v28;
  int v175 = v30;
  uint64_t v32 = v31;
  swift_release();
  uint64_t v33 = v186;
  sub_10000B7E0(v23, v25, v11 & 1);
  swift_bridgeObjectRelease();
  LODWORD(v11) = sub_100089BB0();
  sub_100089690();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  char v42 = sub_100007D2C();
  uint64_t v187 = v32;
  uint64_t v177 = v29;
  uint64_t v178 = v27;
  int v176 = v11;
  if ((v42 & 1) == 0)
  {
    if (!sub_100008B88())
    {
      sub_100082268((uint64_t)v208);
      goto LABEL_8;
    }
    *(void *)&v208[0] = sub_100008CAC();
    *((void *)&v208[0] + 1) = v97;
    uint64_t v98 = sub_100089E40();
    uint64_t v100 = v99;
    char v102 = v101 & 1;
    sub_100089C30();
    uint64_t v103 = v174;
    uint64_t v104 = v170;
    v165(v174, v168, v170);
    v167(v103, 0, 1, v104);
    sub_100089C70();
    sub_10000F024(v103, &qword_1000A5B88);
    uint64_t v105 = sub_100089DB0();
    uint64_t v107 = v106;
    char v109 = v108;
    swift_release();
    sub_10000B7E0(v98, v100, v102);
    swift_bridgeObjectRelease();
    sub_10008A000();
    uint64_t v167 = (void (*)(uint64_t, void, uint64_t, uint64_t))sub_100089D70();
    uint64_t v170 = v110;
    LOBYTE(v98) = v111;
    uint64_t v174 = v112;
    swift_release();
    LODWORD(v168) = v98 & 1;
    sub_10000B7E0(v105, v107, v109 & 1);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v166 = swift_getKeyPath();
    *(void *)&v208[0] = sub_100008C58();
    *((void *)&v208[0] + 1) = v113;
    uint64_t v114 = sub_100089E40();
    uint64_t v116 = v115;
    char v118 = v117 & 1;
    sub_100089CB0();
    uint64_t v120 = v171;
    uint64_t v119 = v172;
    uint64_t v121 = v173;
    (*(void (**)(unsigned char *, void, uint64_t))(v172 + 104))(v171, enum case for Font.Leading.tight(_:), v173);
    sub_100089CC0();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v119 + 8))(v120, v121);
    uint64_t v122 = sub_100089DB0();
    uint64_t v124 = v123;
    LOBYTE(v120) = v125;
    swift_release();
    sub_10000B7E0(v114, v116, v118);
    swift_bridgeObjectRelease();
    sub_100089FC0();
    int v171 = (unsigned char *)sub_100089D70();
    uint64_t v172 = v126;
    uint64_t v165 = v127;
    char v129 = v128;
    swift_release();
    sub_10000B7E0(v122, v124, v120 & 1);
    swift_bridgeObjectRelease();
    uint64_t v186 = swift_getKeyPath();
    uint64_t v173 = swift_getKeyPath();
    LOBYTE(v122) = v168;
    v192[0] = v168;
    LOBYTE(v195[0]) = v168;
    LOBYTE(v193[0]) = v129 & 1;
    LOBYTE(v121) = v129 & 1;
    LODWORD(v164) = v129 & 1;
    *(_DWORD *)uint64_t v205 = v202[0];
    *(_DWORD *)&v205[3] = *(_DWORD *)((char *)v202 + 3);
    LODWORD(v232) = v201[0];
    *(_DWORD *)((char *)&v232 + 3) = *(_DWORD *)((char *)v201 + 3);
    *(_DWORD *)&v204[3] = *(_DWORD *)&v200[3];
    *(_DWORD *)double v204 = *(_DWORD *)v200;
    *(_DWORD *)((char *)v203 + 3) = *(_DWORD *)&v199[3];
    v203[0] = *(_DWORD *)v199;
    uint64_t v130 = v167;
    uint64_t v131 = v170;
    sub_10005D5A0((uint64_t)v167, v170, v168);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v132 = v166;
    swift_retain();
    uint64_t v133 = v171;
    uint64_t v134 = v165;
    sub_10005D5A0((uint64_t)v171, (uint64_t)v165, v121);
    uint64_t v135 = v172;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10005D5A0((uint64_t)v130, v131, v122);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v136 = v132;
    swift_retain();
    uint64_t v137 = (uint64_t)v134;
    uint64_t v138 = (uint64_t)v134;
    LOBYTE(v134) = v164;
    sub_10005D5A0((uint64_t)v133, v138, v164);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v139 = v173;
    swift_retain();
    sub_10000B7E0((uint64_t)v133, v137, (char)v134);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v140 = v130;
    uint64_t v141 = v170;
    sub_10000B7E0((uint64_t)v130, v170, v192[0]);
    swift_release();
    uint64_t v142 = KeyPath;
    swift_release();
    uint64_t v143 = v174;
    swift_bridgeObjectRelease();
    uint64_t v209 = (uint64_t)v140;
    uint64_t v210 = v141;
    char v211 = v168;
    *(_DWORD *)uint64_t v212 = *(_DWORD *)v205;
    *(_DWORD *)&v212[3] = *(_DWORD *)&v205[3];
    uint64_t v213 = v143;
    uint64_t v214 = v142;
    char v215 = 1;
    *(_DWORD *)uint64_t v216 = v232;
    *(_DWORD *)&v216[3] = *(_DWORD *)((char *)&v232 + 3);
    uint64_t v217 = v136;
    uint64_t v218 = 0x3FE0000000000000;
    uint64_t v219 = v133;
    uint64_t v144 = v165;
    uint64_t v220 = v165;
    LOBYTE(v133) = v164;
    LOBYTE(v221) = v164;
    HIDWORD(v221) = *(_DWORD *)&v204[3];
    *(_DWORD *)((char *)&v221 + 1) = *(_DWORD *)v204;
    uint64_t v222 = v135;
    unint64_t v223 = v186;
    LOBYTE(v224) = 0;
    HIDWORD(v224) = *(_DWORD *)((char *)v203 + 3);
    *(_DWORD *)((char *)&v224 + 1) = v203[0];
    uint64_t v225 = v139;
    uint64_t v226 = 0x3FE0000000000000;
    sub_100082300((uint64_t)&v209);
    sub_100027078((uint64_t)&v209, (uint64_t)v208, &qword_1000A8010);
    sub_10000697C(&qword_1000A8018);
    sub_10000697C(&qword_1000A8020);
    sub_10001845C(&qword_1000A8028, &qword_1000A8018);
    sub_10001845C(&qword_1000A8030, &qword_1000A8020);
    sub_100089AB0();
    sub_10000B7E0((uint64_t)v171, (uint64_t)v144, (char)v133);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10000B7E0((uint64_t)v167, v170, v168);
    swift_release();
    swift_release();
LABEL_6:
    swift_bridgeObjectRelease();
    v208[8] = v206[8];
    v208[9] = v206[9];
    LOBYTE(v208[10]) = v207;
    v208[4] = v206[4];
    v208[5] = v206[5];
    v208[6] = v206[6];
    v208[7] = v206[7];
    v208[0] = v206[0];
    v208[1] = v206[1];
    v208[2] = v206[2];
    v208[3] = v206[3];
    nullsub_1(v208);
LABEL_8:
    sub_100027078((uint64_t)v208, (uint64_t)v238, &qword_1000A8008);
    uint64_t v146 = v189;
    uint64_t v145 = v190;
    uint64_t v147 = v184;
    uint64_t v148 = v188;
    uint64_t v149 = v182;
    char v150 = v175 & 1;
    LODWORD(v186) = v175 & 1;
    char v152 = v180;
    char v151 = v181;
    v204[0] = v180;
    LOBYTE(v203[0]) = v181;
    sub_100027078((uint64_t)v238, (uint64_t)v205, &qword_1000A8008);
    sub_100027078((uint64_t)v205, (uint64_t)v206, &qword_1000A8008);
    *(void *)&v208[0] = v179;
    *((void *)&v208[0] + 1) = 0x4014000000000000;
    LOBYTE(v208[1]) = 0;
    *((void *)&v208[1] + 1) = v148;
    *(void *)&v208[2] = v149;
    BYTE8(v208[2]) = v152;
    *(void *)&v208[3] = v183;
    *((void *)&v208[3] + 1) = v146;
    *(void *)&v208[4] = v147;
    BYTE8(v208[4]) = v151;
    *(void *)&v208[5] = v145;
    uint64_t v154 = v177;
    uint64_t v153 = v178;
    *((void *)&v208[5] + 1) = v178;
    *(void *)&v208[6] = v177;
    BYTE8(v208[6]) = v150;
    *(void *)&v208[7] = v187;
    BYTE8(v208[7]) = v176;
    *(void *)&v208[8] = v35;
    *((void *)&v208[8] + 1) = v37;
    *(void *)&v208[9] = v39;
    *((void *)&v208[9] + 1) = v41;
    LOBYTE(v208[10]) = 0;
    sub_100027078((uint64_t)v206, (uint64_t)&v208[10] + 8, &qword_1000A8008);
    *(void *)&v208[21] = 0;
    BYTE8(v208[21]) = 1;
    memcpy(v185, v208, 0x159uLL);
    sub_100027078((uint64_t)v205, (uint64_t)&v209, &qword_1000A8008);
    sub_10005D5A0(v148, v149, v152);
    swift_bridgeObjectRetain();
    uint64_t v155 = v189;
    sub_10005D5A0(v189, v147, v151);
    swift_bridgeObjectRetain();
    char v156 = v186;
    sub_10005D5A0(v153, v154, v186);
    swift_bridgeObjectRetain();
    sub_10008228C((uint64_t)v206, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100081E3C);
    sub_10008228C((uint64_t)&v209, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000820F8);
    sub_10000B7E0(v153, v154, v156);
    swift_bridgeObjectRelease();
    char v157 = v203[0];
    sub_10000B7E0(v188, v149, v204[0]);
    swift_bridgeObjectRelease();
    sub_10000B7E0(v155, v147, v157);
    return swift_bridgeObjectRelease();
  }
  uint64_t v43 = type metadata accessor for AlarmEntry();
  uint64_t v44 = v163;
  sub_10000F148(v33 + *(int *)(v43 + 24), (uint64_t)v163, &qword_1000A47F8);
  uint64_t v45 = sub_1000893C0();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v44, 1, v45);
  if (result != 1)
  {
    sub_100089DE0();
    uint64_t v47 = sub_100089E10();
    uint64_t v49 = v48;
    char v51 = v50 & 1;
    sub_100089C30();
    uint64_t v52 = v174;
    uint64_t v53 = v170;
    v165(v174, v168, v170);
    v167(v52, 0, 1, v53);
    sub_100089C70();
    sub_10000F024(v52, &qword_1000A5B88);
    uint64_t v54 = sub_100089DB0();
    uint64_t v56 = v55;
    char v58 = v57;
    swift_release();
    sub_10000B7E0(v47, v49, v51);
    swift_bridgeObjectRelease();
    sub_10008A000();
    uint64_t v168 = sub_100089D70();
    uint64_t v174 = v59;
    char v61 = v60;
    uint64_t v186 = v62;
    swift_release();
    LODWORD(v167) = v61 & 1;
    sub_10000B7E0(v54, v56, v58 & 1);
    swift_bridgeObjectRelease();
    sub_10008A1C0();
    sub_100089720();
    LODWORD(KeyPath) = v233;
    uint64_t v160 = v232;
    uint64_t v161 = v234;
    LODWORD(v170) = v235;
    uint64_t v162 = v237;
    char v163 = v236;
    uint64_t v166 = swift_getKeyPath();
    sub_100089990();
    uint64_t v63 = sub_100089E20();
    uint64_t v65 = v64;
    LOBYTE(v54) = v66 & 1;
    sub_100089CB0();
    uint64_t v68 = v171;
    uint64_t v67 = v172;
    uint64_t v69 = v173;
    (*(void (**)(unsigned char *, void, uint64_t))(v172 + 104))(v171, enum case for Font.Leading.tight(_:), v173);
    sub_100089CC0();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v67 + 8))(v68, v69);
    uint64_t v70 = sub_100089DB0();
    uint64_t v72 = v71;
    LOBYTE(v56) = v73;
    swift_release();
    char v74 = v56 & 1;
    sub_10000B7E0(v63, v65, v54);
    swift_bridgeObjectRelease();
    sub_100089FC0();
    unint64_t v75 = sub_100089D70();
    unint64_t v164 = v75;
    uint64_t v165 = v76;
    LOBYTE(v56) = v77;
    uint64_t v172 = v78;
    swift_release();
    int v79 = v56 & 1;
    sub_10000B7E0(v70, v72, v74);
    swift_bridgeObjectRelease();
    int v171 = (unsigned char *)swift_getKeyPath();
    uint64_t v80 = swift_getKeyPath();
    LOBYTE(v56) = (_BYTE)v167;
    char v191 = (char)v167;
    char v198 = (char)v167;
    char v197 = KeyPath;
    char v196 = v170;
    char v194 = v79;
    LOBYTE(v70) = v79;
    LODWORD(v173) = v79;
    *(_DWORD *)uint64_t v205 = *(_DWORD *)v200;
    *(_DWORD *)&v205[3] = *(_DWORD *)&v200[3];
    *(_DWORD *)double v204 = *(_DWORD *)v199;
    *(_DWORD *)&v204[3] = *(_DWORD *)&v199[3];
    *(_DWORD *)((char *)v203 + 3) = *(_DWORD *)((char *)v195 + 3);
    v203[0] = v195[0];
    int v159 = v79;
    *(_DWORD *)((char *)v202 + 3) = *(_DWORD *)((char *)v193 + 3);
    v202[0] = v193[0];
    *(_DWORD *)((char *)v201 + 3) = *(_DWORD *)&v192[3];
    v201[0] = *(_DWORD *)v192;
    uint64_t v81 = v168;
    uint64_t v82 = v174;
    sub_10005D5A0(v168, v174, (char)v167);
    swift_bridgeObjectRetain();
    uint64_t v83 = v166;
    swift_retain();
    int v84 = v165;
    sub_10005D5A0(v75, (uint64_t)v165, v70);
    uint64_t v85 = v172;
    swift_bridgeObjectRetain();
    uint64_t v86 = v171;
    swift_retain();
    swift_retain();
    sub_10005D5A0(v81, v82, v56);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v87 = v164;
    uint64_t v88 = (uint64_t)v84;
    uint64_t v89 = (uint64_t)v84;
    LOBYTE(v84) = v173;
    sub_10005D5A0(v164, v89, v173);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10000B7E0(v87, v88, (char)v84);
    uint64_t v90 = v80;
    swift_release();
    uint64_t v91 = v86;
    swift_release();
    uint64_t v92 = v85;
    swift_bridgeObjectRelease();
    uint64_t v93 = v174;
    sub_10000B7E0(v81, v174, v191);
    swift_release();
    uint64_t v94 = v186;
    swift_bridgeObjectRelease();
    uint64_t v209 = v81;
    uint64_t v210 = v93;
    LOBYTE(v86) = (_BYTE)v167;
    char v211 = (char)v167;
    *(_DWORD *)uint64_t v212 = *(_DWORD *)v205;
    *(_DWORD *)&v212[3] = *(_DWORD *)&v205[3];
    uint64_t v213 = v94;
    uint64_t v214 = v160;
    char v215 = KeyPath;
    *(_DWORD *)uint64_t v216 = *(_DWORD *)v204;
    *(_DWORD *)&v216[3] = *(_DWORD *)&v204[3];
    uint64_t v217 = v161;
    LOBYTE(v218) = v170;
    HIDWORD(v218) = *(_DWORD *)((char *)v203 + 3);
    *(_DWORD *)((char *)&v218 + 1) = v203[0];
    uint64_t v95 = v164;
    uint64_t v219 = v163;
    uint64_t v220 = (void (*)(void, void, void))v162;
    uint64_t v221 = v83;
    uint64_t v222 = 0x3FE0000000000000;
    unint64_t v223 = v164;
    uint64_t v96 = v165;
    double v224 = v165;
    LOBYTE(v225) = v159;
    HIDWORD(v225) = *(_DWORD *)((char *)v202 + 3);
    *(_DWORD *)((char *)&v225 + 1) = v202[0];
    uint64_t v226 = v92;
    long double v227 = v91;
    char v228 = 1;
    *(_DWORD *)&v229[3] = *(_DWORD *)((char *)v201 + 3);
    *(_DWORD *)uint64_t v229 = v201[0];
    uint64_t v230 = v90;
    uint64_t v231 = 0x3FE0000000000000;
    sub_10008230C((uint64_t)&v209);
    sub_100027078((uint64_t)&v209, (uint64_t)v208, &qword_1000A8010);
    sub_10000697C(&qword_1000A8018);
    sub_10000697C(&qword_1000A8020);
    sub_10001845C(&qword_1000A8028, &qword_1000A8018);
    sub_10001845C(&qword_1000A8030, &qword_1000A8020);
    sub_100089AB0();
    sub_10000B7E0(v95, (uint64_t)v96, v173);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10000B7E0(v168, v174, (char)v86);
    swift_release();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_100073844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v2 - 8);
  uint64_t v43 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008AEC();
  uint64_t v4 = sub_100089E50();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  sub_100089CE0();
  uint64_t v9 = sub_100089DB0();
  uint64_t v11 = v10;
  char v13 = v12;
  swift_release();
  sub_10000B7E0(v4, v6, v8);
  swift_bridgeObjectRelease();
  sub_10008A000();
  uint64_t v14 = sub_100089D70();
  uint64_t v45 = v15;
  uint64_t v46 = v14;
  char v17 = v16;
  uint64_t v47 = v18;
  swift_release();
  int v44 = v17 & 1;
  sub_10000B7E0(v9, v11, v13 & 1);
  swift_bridgeObjectRelease();
  sub_100089990();
  uint64_t v19 = sub_100089E20();
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  sub_100089C60();
  uint64_t v24 = enum case for Font.Design.default(_:);
  uint64_t v25 = sub_100089C20();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v43, v24, v25);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v25);
  sub_100089C70();
  sub_10000F024(v27, &qword_1000A5B88);
  uint64_t v28 = sub_100089DB0();
  uint64_t v30 = v29;
  LOBYTE(v26) = v31;
  swift_release();
  sub_10000B7E0(v19, v21, v23);
  swift_bridgeObjectRelease();
  sub_10008A000();
  uint64_t v32 = sub_100089D70();
  uint64_t v34 = v33;
  LOBYTE(v19) = v35;
  uint64_t v37 = v36;
  swift_release();
  sub_10000B7E0(v28, v30, v26 & 1);
  swift_bridgeObjectRelease();
  char v38 = v44;
  char v48 = v44;
  uint64_t v40 = v45;
  uint64_t v39 = v46;
  *(void *)a1 = v46;
  *(void *)(a1 + 8) = v40;
  *(unsigned char *)(a1 + 16) = v38;
  *(void *)(a1 + 24) = v47;
  *(void *)(a1 + 32) = v32;
  *(void *)(a1 + 40) = v34;
  *(unsigned char *)(a1 + 48) = v19 & 1;
  *(void *)(a1 + 56) = v37;
  uint64_t v41 = v39;
  sub_10005D5A0(v39, v40, v38);
  swift_bridgeObjectRetain();
  sub_10005D5A0(v32, v34, v19 & 1);
  swift_bridgeObjectRetain();
  sub_10000B7E0(v32, v34, v19 & 1);
  swift_bridgeObjectRelease();
  sub_10000B7E0(v41, v40, v48);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100073BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100073BFC(a1, a2, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
}

uint64_t sub_100073BFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100073C64(uint64_t a1)
{
  uint64_t v3 = sub_100089B10();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v9);
  sub_100072480(v1, (uint64_t)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AlarmSmallWidgetView);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  sub_100073BFC((uint64_t)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for AlarmSmallWidgetView);
  v13[0] = sub_1000724EC;
  v13[1] = v11;
  sub_100089B00();
  sub_10000697C(&qword_1000A7A90);
  sub_10001845C(&qword_1000A7A98, &qword_1000A7A90);
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return swift_release();
}

uint64_t sub_100073E78()
{
  uint64_t v1 = sub_100089B10();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A7AA0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = sub_100089A10();
  *((void *)v7 + 1) = 0;
  v7[16] = 0;
  uint64_t v8 = sub_10000697C(&qword_1000A7AA8);
  sub_100074014(v0, (uint64_t)&v7[*(int *)(v8 + 44)]);
  sub_100089B00();
  sub_10001845C(&qword_1000A7AB0, &qword_1000A7AA0);
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_10000F024((uint64_t)v7, &qword_1000A7AA0);
}

uint64_t sub_100074014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = sub_10000697C(&qword_1000A7FC8);
  __chkstk_darwin(v47);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v48 = type metadata accessor for ClockDateText(0);
  __chkstk_darwin(v48);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000697C(&qword_1000A7FD0);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v52 = (uint64_t)&v46 - v15;
  uint64_t v54 = sub_100089910();
  sub_100074718((uint64_t)&v77);
  uint64_t v16 = v78;
  uint64_t v17 = v79;
  uint64_t v18 = v80;
  uint64_t v19 = v81;
  uint64_t v57 = v82;
  uint64_t v58 = v77;
  uint64_t v20 = v83;
  uint64_t v21 = v84;
  uint64_t v22 = v85;
  uint64_t v55 = v87;
  uint64_t v56 = v86;
  uint64_t v61 = v90;
  uint64_t v62 = v89;
  char v107 = 0;
  int v59 = v88;
  char v106 = v88;
  unsigned __int8 v105 = v91;
  int v53 = v91;
  uint64_t v60 = sub_100089CF0();
  uint64_t KeyPath = swift_getKeyPath();
  *((void *)&v50 + 1) = sub_10008A000();
  *(void *)&long long v50 = swift_getKeyPath();
  uint64_t v49 = swift_getKeyPath();
  char v108 = 0;
  uint64_t v23 = type metadata accessor for AlarmEntry();
  sub_10000F148(a1 + *(int *)(v23 + 20), (uint64_t)v10, &qword_1000A47F8);
  uint64_t v24 = sub_1000893C0();
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v10, 1, v24);
  sub_10000F024((uint64_t)v10, &qword_1000A47F8);
  if (v25 == 1)
  {
    *(void *)uint64_t v5 = 0x4038000000000000;
    v5[8] = 0;
    swift_storeEnumTagMultiPayload();
    sub_100081AC8(&qword_1000A7FD8, (void (*)(uint64_t))type metadata accessor for ClockDateText);
    sub_100089AB0();
  }
  else
  {
    uint64_t v26 = type metadata accessor for WorldClockCity();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v7, 1, 1, v26);
    uint64_t v27 = (uint64_t)&v7[*(int *)(v48 + 20)];
    sub_100072480(a1, v27, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v27, 0, 1, v23);
    sub_100072480((uint64_t)v7, (uint64_t)v5, type metadata accessor for ClockDateText);
    swift_storeEnumTagMultiPayload();
    sub_100081AC8(&qword_1000A7FD8, (void (*)(uint64_t))type metadata accessor for ClockDateText);
    sub_100089AB0();
    sub_10007F300((uint64_t)v7, type metadata accessor for ClockDateText);
  }
  char v28 = v108;
  uint64_t v29 = v52;
  sub_10000F148(v52, (uint64_t)v13, &qword_1000A7FD0);
  *(void *)&long long v63 = v54;
  *((void *)&v63 + 1) = 0x4008000000000000;
  LOBYTE(v64) = 0;
  *(_DWORD *)((char *)&v64 + 1) = v111[0];
  DWORD1(v64) = *(_DWORD *)((char *)v111 + 3);
  *((void *)&v64 + 1) = v58;
  *(void *)&long long v65 = v16;
  *((void *)&v65 + 1) = v17;
  *(void *)&long long v66 = v18;
  *((void *)&v66 + 1) = v19;
  *(void *)&long long v67 = v57;
  *((void *)&v67 + 1) = v20;
  *(void *)&long long v68 = v21;
  *((void *)&v68 + 1) = v22;
  *(void *)&long long v69 = v56;
  *((void *)&v69 + 1) = v55;
  LOBYTE(v70) = v59;
  *(_DWORD *)((char *)&v70 + 1) = *(_DWORD *)v110;
  DWORD1(v70) = *(_DWORD *)&v110[3];
  *((void *)&v70 + 1) = v62;
  *(void *)&long long v71 = v61;
  BYTE8(v71) = v53;
  *(_DWORD *)((char *)&v71 + 9) = *(_DWORD *)v109;
  HIDWORD(v71) = *(_DWORD *)&v109[3];
  long long v48 = xmmword_10009A7B0;
  long long v72 = xmmword_10009A7B0;
  uint64_t v31 = *((void *)&v50 + 1);
  uint64_t v30 = KeyPath;
  *(void *)&long long v73 = KeyPath;
  *((void *)&v73 + 1) = v60;
  uint64_t v32 = v49;
  uint64_t v33 = v50;
  long long v74 = v50;
  *(void *)&long long v75 = v49;
  *((void *)&v75 + 1) = 1;
  char v76 = v28;
  long long v34 = v73;
  long long v35 = v50;
  long long v36 = v75;
  *(unsigned char *)(a2 + 208) = v28;
  *(_OWORD *)(a2 + 176) = v35;
  *(_OWORD *)(a2 + 192) = v36;
  long long v37 = v64;
  *(_OWORD *)a2 = v63;
  *(_OWORD *)(a2 + 16) = v37;
  long long v38 = v65;
  long long v39 = v66;
  long long v40 = v68;
  *(_OWORD *)(a2 + 64) = v67;
  *(_OWORD *)(a2 + 80) = v40;
  *(_OWORD *)(a2 + 32) = v38;
  *(_OWORD *)(a2 + 48) = v39;
  long long v41 = v69;
  long long v42 = v70;
  long long v43 = v71;
  *(_OWORD *)(a2 + 144) = v72;
  *(_OWORD *)(a2 + 160) = v34;
  *(_OWORD *)(a2 + 112) = v42;
  *(_OWORD *)(a2 + 128) = v43;
  *(_OWORD *)(a2 + 96) = v41;
  uint64_t v44 = sub_10000697C(&qword_1000A7FE0);
  sub_10000F148((uint64_t)v13, a2 + *(int *)(v44 + 48), &qword_1000A7FD0);
  sub_100081B10((uint64_t)&v63);
  sub_10000F024(v29, &qword_1000A7FD0);
  sub_10000F024((uint64_t)v13, &qword_1000A7FD0);
  uint64_t v77 = v54;
  uint64_t v78 = 0x4008000000000000;
  LOBYTE(v79) = 0;
  *(_DWORD *)((char *)&v79 + 1) = v111[0];
  HIDWORD(v79) = *(_DWORD *)((char *)v111 + 3);
  uint64_t v80 = v58;
  uint64_t v81 = v16;
  uint64_t v82 = v17;
  uint64_t v83 = v18;
  uint64_t v84 = v19;
  uint64_t v85 = v57;
  uint64_t v86 = v20;
  uint64_t v87 = v21;
  uint64_t v88 = v22;
  uint64_t v89 = v56;
  uint64_t v90 = v55;
  unsigned __int8 v91 = v59;
  *(_DWORD *)&v92[3] = *(_DWORD *)&v110[3];
  *(_DWORD *)uint64_t v92 = *(_DWORD *)v110;
  uint64_t v93 = v62;
  uint64_t v94 = v61;
  char v95 = v53;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v109[3];
  *(_DWORD *)uint64_t v96 = *(_DWORD *)v109;
  long long v97 = v48;
  uint64_t v98 = v30;
  uint64_t v99 = v60;
  uint64_t v100 = v33;
  uint64_t v101 = v31;
  uint64_t v102 = v32;
  uint64_t v103 = 1;
  char v104 = v28;
  return sub_100081BCC((uint64_t)&v77);
}

uint64_t sub_100074718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100089F90();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *sub_100014CC4();
  swift_retain();
  sub_10008A1E0();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGBLinear(_:), v2);
  uint64_t v11 = sub_10008A030();
  v20[0] = sub_100008DA8();
  v20[1] = v12;
  sub_100032F54();
  uint64_t v13 = sub_100089E40();
  uint64_t v15 = v14;
  *(void *)a1 = v6;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL);
  char v17 = v16 & 1;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = 0x3FF0000000000000;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(unsigned char *)(a1 + 88) = v16 & 1;
  *(void *)(a1 + 96) = v18;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  swift_retain();
  swift_retain();
  sub_10005D5A0(v13, v15, v17);
  swift_bridgeObjectRetain();
  sub_10000B7E0(v13, v15, v17);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000748F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100027078(a1, a3, &qword_1000A4FD0);
  uint64_t v5 = type metadata accessor for ClockDateText(0);
  return sub_100027078(a2, a3 + *(int *)(v5 + 20), &qword_1000A7A08);
}

uint64_t type metadata accessor for ClockDateText(uint64_t a1)
{
  return sub_100022C28(a1, qword_1000ABA60);
}

uint64_t sub_100074964()
{
  uint64_t v1 = sub_10000697C(&qword_1000A7AB8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v3 = sub_100089930();
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  uint64_t v4 = sub_10000697C(&qword_1000A7AC0);
  sub_100074A8C(v0, (uint64_t)&v3[*(int *)(v4 + 44)]);
  v7[0] = sub_100074E94();
  v7[1] = v5;
  sub_10001845C(&qword_1000A7AC8, &qword_1000A7AB8);
  sub_100032F54();
  sub_100089F00();
  swift_bridgeObjectRelease();
  return sub_10000F024((uint64_t)v3, &qword_1000A7AB8);
}

uint64_t sub_100074A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = sub_100089090();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000893C0();
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000697C(&qword_1000A7FB8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v35 - v14;
  uint64_t v42 = sub_100008AEC();
  sub_100089F10();
  swift_release();
  if (sub_100008B88())
  {
    uint64_t v16 = type metadata accessor for AlarmEntry();
    sub_10000F148(a1 + *(int *)(v16 + 20), (uint64_t)v6, &qword_1000A47F8);
    uint64_t v17 = v35;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v9, v6, v7);
      uint64_t v28 = type metadata accessor for WidgetUtilities();
      (*(void (**)(char *))(v28 + 136))(v9);
      uint64_t v37 = sub_100089E30();
      uint64_t v38 = v29;
      uint64_t v39 = v30 & 1;
      uint64_t v40 = v31;
      char v41 = 0;
      sub_100089AB0();
      uint64_t v23 = v42;
      uint64_t v24 = v43;
      uint64_t v25 = v44;
      uint64_t v26 = v45;
      char v27 = v46;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v7);
      goto LABEL_6;
    }
    sub_10000F024((uint64_t)v6, &qword_1000A47F8);
  }
  char v18 = sub_1000089E4();
  uint64_t v42 = sub_100008F48(v18);
  uint64_t v43 = v19;
  sub_100032F54();
  uint64_t v37 = sub_100089E40();
  uint64_t v38 = v20;
  uint64_t v39 = v21 & 1;
  uint64_t v40 = v22;
  char v41 = 1;
  sub_100089AB0();
  uint64_t v23 = v42;
  uint64_t v24 = v43;
  uint64_t v25 = v44;
  uint64_t v26 = v45;
  char v27 = v46;
LABEL_6:
  sub_10000F148((uint64_t)v15, (uint64_t)v12, &qword_1000A7FB8);
  uint64_t v32 = v36;
  sub_10000F148((uint64_t)v12, v36, &qword_1000A7FB8);
  uint64_t v33 = v32 + *(int *)(sub_10000697C(&qword_1000A7FC0) + 48);
  *(void *)uint64_t v33 = v23;
  *(void *)(v33 + 8) = v24;
  *(void *)(v33 + 16) = v25;
  *(void *)(v33 + 24) = v26;
  *(unsigned char *)(v33 + 32) = v27;
  sub_100081470(v23, v24, v25);
  sub_10000F024((uint64_t)v15, &qword_1000A7FB8);
  sub_100081510(v23, v24, v25);
  return sub_10000F024((uint64_t)v12, &qword_1000A7FB8);
}

uint64_t sub_100074E94()
{
  sub_10000697C(&qword_1000A7AD0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100098260;
  uint64_t v1 = self;
  uint64_t v2 = (objc_class *)[v1 mainBundle];
  v13._countAndFlagsBits = 0x800000010008BEB0;
  v16._countAndFlagsBits = 0x616C41207478654ELL;
  v16._object = (void *)0xEA00000000006D72;
  v18.value._countAndFlagsBits = 0;
  v18.value._object = 0;
  v3.super.Class isa = v2;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  uint64_t v4 = sub_1000890B0(v16, v18, v3, v20, v13);
  uint64_t v6 = v5;

  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = v6;
  *(void *)(v0 + 48) = sub_100008CAC();
  *(void *)(v0 + 56) = v7;
  if (sub_100008B88())
  {
    v14._object = (void *)v0;
    uint64_t v8 = (objc_class *)[v1 mainBundle];
    v14._countAndFlagsBits = 0xEE00616D6D6F6320;
    v17._countAndFlagsBits = 8236;
    v17._object = (void *)0xE200000000000000;
    v19.value._countAndFlagsBits = 0;
    v19.value._object = 0;
    v9.super.Class isa = v8;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    sub_1000890B0(v17, v19, v9, v21, v14);

    sub_10000697C(&qword_1000A7AD8);
    sub_10001845C(&qword_1000A7AE0, &qword_1000A7AD8);
    uint64_t v10 = sub_10008A3B0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (sub_100008B88())
    {
      return sub_100008CAC();
    }
    else
    {
      char v12 = sub_1000089E4();
      return sub_100008F48(v12);
    }
  }
}

uint64_t sub_1000750D4()
{
  if (sub_100008B88())
  {
    return sub_100008CAC();
  }
  else
  {
    char v1 = sub_1000089E4();
    return sub_100008F48(v1);
  }
}

uint64_t sub_100075120@<X0>(uint64_t a1@<X8>)
{
  return sub_100075160(type metadata accessor for AlarmComplicationCircularView, (uint64_t)type metadata accessor for AlarmEntry, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100072480, a1);
}

uint64_t sub_100075160@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 20), a4, a2);
}

uint64_t type metadata accessor for AlarmComplicationCircularView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000ABA50);
}

uint64_t sub_1000751D8(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 20);

  return sub_10000BD60(a1, v3);
}

uint64_t (*sub_10007521C())(void)
{
  return nullsub_1;
}

uint64_t sub_100075264@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 24);

  return sub_10004A84C(v3, a1);
}

uint64_t sub_1000752A8()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 28));
}

uint64_t sub_1000752CC(char a1)
{
  uint64_t result = type metadata accessor for AlarmComplicationCircularView(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000752FC())(void)
{
  return nullsub_1;
}

uint64_t sub_100075344()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 32));
}

uint64_t sub_100075368(char a1)
{
  uint64_t result = type metadata accessor for AlarmComplicationCircularView(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100075398())(void)
{
  return nullsub_1;
}

uint64_t sub_1000753E0()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 36));
}

uint64_t sub_100075404(char a1)
{
  uint64_t result = type metadata accessor for AlarmComplicationCircularView(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100075434())(void)
{
  return nullsub_1;
}

uint64_t sub_10007547C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v24[1] = a1;
  uint64_t v3 = sub_100089B10();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000697C(&qword_1000A7AE8);
  __chkstk_darwin(v7 - 8);
  NSBundle v9 = (void *)((char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000697C(&qword_1000A7AF0);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000697C(&qword_1000A7AF8);
  __chkstk_darwin(v14);
  Swift::String v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t *v9 = sub_10008A1B0();
  v9[1] = v17;
  uint64_t v18 = sub_10000697C(&qword_1000A7B00);
  sub_100075734(v2, (char *)v9 + *(int *)(v18 + 44));
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000F148((uint64_t)v9, (uint64_t)v13, &qword_1000A7AE8);
  Swift::String v20 = (uint64_t *)&v13[*(int *)(v11 + 44)];
  uint64_t *v20 = KeyPath;
  v20[1] = 0x3FE8000000000000;
  sub_10000F024((uint64_t)v9, &qword_1000A7AE8);
  sub_10008A1B0();
  sub_100089720();
  sub_10000F148((uint64_t)v13, (uint64_t)v16, &qword_1000A7AF0);
  Swift::String v21 = &v16[*(int *)(v14 + 36)];
  long long v22 = v26;
  *(_OWORD *)Swift::String v21 = v25;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v27;
  sub_10000F024((uint64_t)v13, &qword_1000A7AF0);
  sub_100089B00();
  sub_10007A534();
  sub_100089F30();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_10000F024((uint64_t)v16, &qword_1000A7AF8);
}

uint64_t sub_100075734@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  long long v63 = a2;
  uint64_t v57 = sub_10000697C(&qword_1000A7B58);
  __chkstk_darwin(v57);
  uint64_t v56 = (char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000697C(&qword_1000A7F88);
  __chkstk_darwin(v58);
  uint64_t v5 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A7F90);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000697C(&qword_1000A7F98);
  __chkstk_darwin(v59);
  uint64_t v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000697C(&qword_1000A7E58);
  __chkstk_darwin(v11);
  Swift::String v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000697C(&qword_1000A7FA0);
  __chkstk_darwin(v14 - 8);
  Swift::String v16 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v64 = (uint64_t)v50 - v18;
  uint64_t v19 = sub_10008A210();
  uint64_t v61 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v62 = (char *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v60 = (char *)v50 - v22;
  sub_10008A200();
  uint64_t v23 = a1 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 20);
  if (sub_100008B88())
  {
    sub_100075E84((uint64_t)v13);
    sub_10000F148((uint64_t)v13, (uint64_t)v8, &qword_1000A7E58);
    swift_storeEnumTagMultiPayload();
    sub_10000697C(&qword_1000A7E68);
    sub_100080A84();
    uint64_t v56 = (char *)v19;
    sub_10001845C(&qword_1000A7E60, &qword_1000A7E68);
    sub_100089AB0();
    sub_10000F148((uint64_t)v10, (uint64_t)v5, &qword_1000A7F98);
    swift_storeEnumTagMultiPayload();
    sub_100081A28();
    sub_100080BFC();
    uint64_t v19 = (uint64_t)v56;
    sub_100089AB0();
    sub_10000F024((uint64_t)v10, &qword_1000A7F98);
    uint64_t v24 = (uint64_t)v13;
    long long v25 = &qword_1000A7E58;
LABEL_6:
    sub_10000F024(v24, v25);
    goto LABEL_7;
  }
  uint64_t v53 = v11;
  uint64_t v54 = v10;
  uint64_t v55 = v5;
  if (*(unsigned char *)(v23 + *(int *)(type metadata accessor for AlarmEntry() + 68)) != 1)
  {
    uint64_t v40 = (uint64_t)v56;
    sub_100076278();
    sub_10000F148(v40, (uint64_t)v55, &qword_1000A7B58);
    swift_storeEnumTagMultiPayload();
    sub_100081A28();
    sub_100080BFC();
    sub_100089AB0();
    uint64_t v24 = v40;
    long long v25 = &qword_1000A7B58;
    goto LABEL_6;
  }
  uint64_t v26 = sub_100089A00();
  sub_1000779D4((uint64_t)&v65);
  uint64_t v27 = v65;
  char v28 = v66;
  char v30 = v67;
  uint64_t v29 = v68;
  uint64_t v32 = v69;
  uint64_t v31 = v70;
  uint64_t v33 = v71;
  int v34 = v72;
  uint64_t v35 = v73;
  v50[0] = v73;
  uint64_t v36 = v74;
  char v37 = v75;
  *(void *)uint64_t v8 = v26;
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  *((void *)v8 + 3) = v27;
  v8[32] = v28;
  *((void *)v8 + 5) = v30;
  *((void *)v8 + 6) = v29;
  uint64_t v56 = v30;
  *((void *)v8 + 7) = v32;
  *((void *)v8 + 8) = v31;
  v50[1] = v32;
  uint64_t v38 = v31;
  *((void *)v8 + 9) = v33;
  uint64_t v52 = v33;
  v8[80] = v34;
  int v51 = v34;
  *((void *)v8 + 11) = v35;
  *((void *)v8 + 12) = v36;
  v8[104] = v37;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10005D5A0(v38, v33, v34);
  swift_bridgeObjectRetain();
  sub_10000697C(&qword_1000A7E68);
  sub_100080A84();
  sub_10001845C(&qword_1000A7E60, &qword_1000A7E68);
  uint64_t v39 = (uint64_t)v54;
  sub_100089AB0();
  sub_10000F148(v39, (uint64_t)v55, &qword_1000A7F98);
  swift_storeEnumTagMultiPayload();
  sub_100081A28();
  sub_100080BFC();
  sub_100089AB0();
  sub_10000F024(v39, &qword_1000A7F98);
  swift_release();
  swift_release();
  swift_release();
  sub_10000B7E0(v38, v52, v51);
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v41 = v61;
  uint64_t v42 = v62;
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  uint64_t v44 = v60;
  v43(v62, v60, v19);
  uint64_t v45 = v64;
  sub_10000F148(v64, (uint64_t)v16, &qword_1000A7FA0);
  char v46 = v63;
  v43(v63, v42, v19);
  uint64_t v47 = sub_10000697C(&qword_1000A7FB0);
  sub_10000F148((uint64_t)v16, (uint64_t)&v46[*(int *)(v47 + 48)], &qword_1000A7FA0);
  sub_10000F024(v45, &qword_1000A7FA0);
  long long v48 = *(void (**)(char *, uint64_t))(v41 + 8);
  v48(v44, v19);
  sub_10000F024((uint64_t)v16, &qword_1000A7FA0);
  return ((uint64_t (*)(char *, uint64_t))v48)(v42, v19);
}

uint64_t sub_100075E84@<X0>(uint64_t a1@<X8>)
{
  v22[1] = a1;
  uint64_t v1 = sub_10000697C(&qword_1000A7B20);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000697C(&qword_1000A7B28);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000697C(&qword_1000A7B30);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100089480();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100031718();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  char v15 = sub_1000317AC();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v16 = sub_100089A00();
  if (v15)
  {
    *(void *)uint64_t v9 = v16;
    *((void *)v9 + 1) = 0;
    unsigned char v9[16] = 0;
    uint64_t v17 = sub_10000697C(&qword_1000A7B50);
    sub_10007731C(v22[0], &v9[*(int *)(v17 + 44)]);
    uint64_t v18 = &qword_1000A7B30;
    sub_10000F148((uint64_t)v9, (uint64_t)v6, &qword_1000A7B30);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A7B40, &qword_1000A7B30);
    sub_10001845C(&qword_1000A7B48, &qword_1000A7B20);
    sub_100089AB0();
    uint64_t v19 = (uint64_t)v9;
  }
  else
  {
    *(void *)uint64_t v3 = v16;
    *((void *)v3 + 1) = 0;
    v3[16] = 0;
    uint64_t v20 = sub_10000697C(&qword_1000A7B38);
    sub_100076524(&v3[*(int *)(v20 + 44)]);
    uint64_t v18 = &qword_1000A7B20;
    sub_10000F148((uint64_t)v3, (uint64_t)v6, &qword_1000A7B20);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A7B40, &qword_1000A7B30);
    sub_10001845C(&qword_1000A7B48, &qword_1000A7B20);
    sub_100089AB0();
    uint64_t v19 = (uint64_t)v3;
  }
  return sub_10000F024(v19, v18);
}

__n128 sub_1000761EC@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100089A00();
  sub_1000779D4((uint64_t)&v12);
  uint64_t v3 = v12;
  char v4 = v13;
  uint64_t v5 = v16;
  char v6 = v17;
  uint64_t v7 = v18;
  uint64_t v8 = v19;
  char v9 = v20;
  __n128 result = v14;
  long long v11 = v15;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v4;
  *(__n128 *)(a1 + 40) = result;
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v8;
  *(unsigned char *)(a1 + 104) = v9;
  return result;
}

uint64_t sub_100076278()
{
  uint64_t v0 = sub_1000899E0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000697C(&qword_1000A7B58);
  __chkstk_darwin(v4);
  char v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AlarmComplicationCircularView(0);
  uint64_t v7 = sub_100008AEC();
  uint64_t v8 = sub_100089C10();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = v7;
  uint64_t v14 = KeyPath;
  uint64_t v15 = v8;
  sub_1000899D0();
  sub_10000697C(&qword_1000A7B60);
  sub_10008198C(&qword_1000A7B68, &qword_1000A7B60, &qword_1000A6270, &qword_1000A6278);
  sub_100089F40();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v13 = sub_100008F48(0);
  uint64_t v14 = v10;
  sub_100032F54();
  sub_100089760();
  swift_bridgeObjectRelease();
  return sub_10000F024((uint64_t)v6, &qword_1000A7B58);
}

uint64_t sub_10007648C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000764CC(&qword_1000A7B50, (uint64_t (*)(uint64_t))sub_10007731C, a1);
}

uint64_t sub_1000764AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000764CC(&qword_1000A7B38, (uint64_t (*)(uint64_t))sub_100076524, a1);
}

uint64_t sub_1000764CC@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = sub_100089A00();
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  sub_10000697C(a1);
  return a2(v3);
}

uint64_t sub_100076524@<X0>(void *a1@<X8>)
{
  uint64_t v139 = a1;
  uint64_t v138 = sub_10000697C(&qword_1000A7F18);
  __chkstk_darwin(v138);
  char v129 = &v119[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v133 = sub_10000697C(&qword_1000A7F20);
  __chkstk_darwin(v133);
  uint64_t v137 = &v119[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v136 = sub_10000697C(&qword_1000A7F28);
  __chkstk_darwin(v136);
  double v127 = &v119[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v130 = sub_1000899E0();
  uint64_t v4 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  char v6 = &v119[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v131 = sub_10000697C(&qword_1000A7F30);
  __chkstk_darwin(v131);
  char v128 = &v119[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v132 = &v119[-v9];
  __chkstk_darwin(v10);
  uint64_t v12 = &v119[-v11];
  __chkstk_darwin(v13);
  uint64_t v15 = &v119[-v14];
  uint64_t v16 = sub_100089480();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = &v119[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = sub_10000697C(&qword_1000A7F38);
  __chkstk_darwin(v20 - 8);
  uint64_t v135 = &v119[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  uint64_t v134 = &v119[-v23];
  uint64_t v24 = sub_100031718();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16))(v19, v24, v16);
  char v25 = sub_100032C64();
  (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v19, v16);
  type metadata accessor for AlarmComplicationCircularView(0);
  uint64_t v140 = v12;
  uint64_t v141 = v15;
  if (v25)
  {
    uint64_t v142 = sub_100008D54();
    uint64_t v143 = v67;
    sub_100032F54();
    uint64_t v68 = sub_100089E40();
    uint64_t v70 = v69;
    char v72 = v71 & 1;
    sub_100089CB0();
    uint64_t v125 = sub_100089DB0();
    char v129 = v73;
    char v75 = v74;
    uint64_t v126 = v76;
    swift_release();
    int v124 = v75 & 1;
    sub_10000B7E0(v68, v70, v72);
    swift_bridgeObjectRelease();
    uint64_t v142 = sub_100008D00();
    uint64_t v143 = v77;
    uint64_t v78 = sub_100089E40();
    uint64_t v80 = v79;
    char v82 = v81 & 1;
    sub_100089C00();
    uint64_t v122 = sub_100089DB0();
    uint64_t v121 = v83;
    char v85 = v84;
    uint64_t v123 = v86;
    swift_release();
    int v120 = v85 & 1;
    sub_10000B7E0(v78, v80, v82);
    swift_bridgeObjectRelease();
    uint64_t v87 = sub_100008AEC();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v89 = sub_100089CB0();
    uint64_t v90 = swift_getKeyPath();
    uint64_t v142 = v87;
    uint64_t v143 = KeyPath;
    uint64_t v144 = 0x3FECCCCCCCCCCCCDLL;
    uint64_t v145 = v90;
    uint64_t v146 = v89;
    sub_1000899D0();
    sub_10000697C(&qword_1000A7F40);
    sub_1000818CC();
    uint64_t v91 = (uint64_t)v128;
    sub_100089F40();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v130);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100089990();
    uint64_t v92 = sub_100089E20();
    uint64_t v94 = v93;
    char v96 = v95 & 1;
    uint64_t v97 = (uint64_t)v132;
    sub_100089750();
    sub_10000B7E0(v92, v94, v96);
    swift_bridgeObjectRelease();
    sub_10000F024(v91, &qword_1000A7F30);
    uint64_t v98 = (uint64_t)v140;
    sub_100089780();
    sub_10000F024(v97, &qword_1000A7F30);
    uint64_t v99 = v98;
    uint64_t v100 = v98;
    uint64_t v101 = (uint64_t)v141;
    sub_100027078(v100, (uint64_t)v141, &qword_1000A7F30);
    LOBYTE(v94) = v124;
    LOBYTE(v142) = v124;
    sub_10000F148(v101, v99, &qword_1000A7F30);
    uint64_t v102 = v125;
    uint64_t v103 = (uint64_t)v127;
    char v104 = v129;
    void *v127 = v125;
    *(void *)(v103 + 8) = v104;
    *(unsigned char *)(v103 + 16) = v94;
    uint64_t v105 = v122;
    *(void *)(v103 + 24) = v126;
    *(void *)(v103 + 32) = v105;
    uint64_t v106 = v121;
    *(void *)(v103 + 40) = v121;
    char v107 = v120;
    *(unsigned char *)(v103 + 48) = v120;
    *(void *)(v103 + 56) = v123;
    uint64_t v108 = sub_10000697C(&qword_1000A7F80);
    sub_10000F148(v99, v103 + *(int *)(v108 + 64), &qword_1000A7F30);
    uint64_t v109 = v102;
    sub_10005D5A0(v102, (uint64_t)v104, v94);
    swift_bridgeObjectRetain();
    uint64_t v110 = v106;
    sub_10005D5A0(v105, v106, v107);
    swift_bridgeObjectRetain();
    uint64_t v111 = v109;
    uint64_t v112 = v109;
    uint64_t v113 = v129;
    sub_10005D5A0(v112, (uint64_t)v129, v94);
    swift_bridgeObjectRetain();
    sub_10005D5A0(v105, v110, v107);
    swift_bridgeObjectRetain();
    sub_10000F024((uint64_t)v140, &qword_1000A7F30);
    sub_10000B7E0(v105, v110, v107);
    swift_bridgeObjectRelease();
    sub_10000B7E0(v111, (uint64_t)v113, v142);
    swift_bridgeObjectRelease();
    sub_10000F148(v103, (uint64_t)v137, &qword_1000A7F28);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A7F68, &qword_1000A7F28);
    sub_10001845C(&qword_1000A7F70, &qword_1000A7F18);
    uint64_t v66 = (uint64_t)v134;
    sub_100089AB0();
    sub_10000F024(v103, &qword_1000A7F28);
    sub_10000F024((uint64_t)v141, &qword_1000A7F30);
    sub_10000B7E0(v105, v110, v107);
    swift_bridgeObjectRelease();
    sub_10000B7E0(v125, (uint64_t)v129, v124);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = sub_100008AEC();
    uint64_t v27 = swift_getKeyPath();
    uint64_t v28 = sub_100089CB0();
    uint64_t v29 = swift_getKeyPath();
    uint64_t v142 = v26;
    uint64_t v143 = v27;
    uint64_t v144 = 0x3FECCCCCCCCCCCCDLL;
    uint64_t v145 = v29;
    uint64_t v146 = v28;
    sub_1000899D0();
    sub_10000697C(&qword_1000A7F40);
    sub_1000818CC();
    uint64_t v30 = (uint64_t)v132;
    sub_100089F40();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v130);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100089990();
    uint64_t v31 = sub_100089E20();
    uint64_t v33 = v32;
    char v35 = v34 & 1;
    sub_100089750();
    sub_10000B7E0(v31, v33, v35);
    swift_bridgeObjectRelease();
    sub_10000F024(v30, &qword_1000A7F30);
    sub_100027078((uint64_t)v12, (uint64_t)v15, &qword_1000A7F30);
    uint64_t v142 = sub_100008D00();
    uint64_t v143 = v36;
    sub_100032F54();
    uint64_t v37 = sub_100089E40();
    uint64_t v39 = v38;
    LOBYTE(v33) = v40 & 1;
    sub_100089C00();
    uint64_t v131 = sub_100089DB0();
    uint64_t v130 = v41;
    char v43 = v42;
    uint64_t v132 = v44;
    swift_release();
    int v45 = v43 & 1;
    sub_10000B7E0(v37, v39, v33);
    swift_bridgeObjectRelease();
    uint64_t v142 = sub_100008D54();
    uint64_t v143 = v46;
    uint64_t v47 = sub_100089E40();
    uint64_t v49 = v48;
    char v51 = v50 & 1;
    sub_100089CB0();
    uint64_t v52 = sub_100089DB0();
    uint64_t v54 = v53;
    LOBYTE(v30) = v55;
    uint64_t v57 = v56;
    swift_release();
    LOBYTE(v31) = v30 & 1;
    sub_10000B7E0(v47, v49, v51);
    swift_bridgeObjectRelease();
    uint64_t v58 = (uint64_t)v140;
    sub_10000F148((uint64_t)v141, (uint64_t)v140, &qword_1000A7F30);
    int v59 = v45;
    LOBYTE(v142) = v45;
    uint64_t v60 = v129;
    sub_10000F148(v58, (uint64_t)v129, &qword_1000A7F30);
    uint64_t v61 = sub_10000697C(&qword_1000A7F60);
    uint64_t v62 = &v60[*(int *)(v61 + 48)];
    uint64_t v63 = v131;
    uint64_t v64 = v130;
    *(void *)uint64_t v62 = v131;
    *((void *)v62 + 1) = v64;
    v62[16] = v59;
    *((void *)v62 + 3) = v132;
    uint64_t v65 = &v60[*(int *)(v61 + 64)];
    *(void *)uint64_t v65 = v52;
    *((void *)v65 + 1) = v54;
    v65[16] = v31;
    *((void *)v65 + 3) = v57;
    LODWORD(v128) = v59;
    sub_10005D5A0(v63, v64, v59);
    swift_bridgeObjectRetain();
    sub_10005D5A0(v52, v54, v31);
    swift_bridgeObjectRetain();
    sub_10005D5A0(v63, v64, v59);
    swift_bridgeObjectRetain();
    sub_10005D5A0(v52, v54, v31);
    swift_bridgeObjectRetain();
    sub_10000B7E0(v52, v54, v31);
    swift_bridgeObjectRelease();
    sub_10000B7E0(v63, v64, v142);
    swift_bridgeObjectRelease();
    sub_10000F024((uint64_t)v140, &qword_1000A7F30);
    sub_10000F148((uint64_t)v60, (uint64_t)v137, &qword_1000A7F18);
    swift_storeEnumTagMultiPayload();
    sub_10001845C(&qword_1000A7F68, &qword_1000A7F28);
    sub_10001845C(&qword_1000A7F70, &qword_1000A7F18);
    uint64_t v66 = (uint64_t)v134;
    sub_100089AB0();
    sub_10000F024((uint64_t)v60, &qword_1000A7F18);
    sub_10000B7E0(v52, v54, v31);
    swift_bridgeObjectRelease();
    sub_10000B7E0(v131, v130, (char)v128);
    swift_bridgeObjectRelease();
    sub_10000F024((uint64_t)v141, &qword_1000A7F30);
  }
  uint64_t v114 = v135;
  sub_10000F148(v66, (uint64_t)v135, &qword_1000A7F38);
  uint64_t v115 = v139;
  void *v139 = 0;
  *((unsigned char *)v115 + 8) = 1;
  uint64_t v116 = sub_10000697C(&qword_1000A7F78);
  sub_10000F148((uint64_t)v114, (uint64_t)v115 + *(int *)(v116 + 48), &qword_1000A7F38);
  char v117 = (char *)v115 + *(int *)(v116 + 64);
  *(void *)char v117 = 0;
  v117[8] = 1;
  sub_10000F024(v66, &qword_1000A7F38);
  return sub_10000F024((uint64_t)v114, &qword_1000A7F38);
}

uint64_t sub_10007731C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v2 = sub_1000899E0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000697C(&qword_1000A7B58);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - v10;
  __chkstk_darwin(v12);
  uint64_t v39 = (uint64_t)&v36 - v13;
  type metadata accessor for AlarmComplicationCircularView(0);
  uint64_t v14 = sub_100008AEC();
  uint64_t v15 = sub_100089CB0();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = v14;
  uint64_t v41 = KeyPath;
  uint64_t v42 = v15;
  sub_1000899D0();
  sub_10000697C(&qword_1000A7B60);
  sub_10008198C(&qword_1000A7B68, &qword_1000A7B60, &qword_1000A6270, &qword_1000A6278);
  sub_100089F40();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_release();
  swift_release();
  swift_release();
  sub_100089990();
  uint64_t v17 = sub_100089E20();
  uint64_t v19 = v18;
  LOBYTE(v2) = v20 & 1;
  sub_100089750();
  sub_10000B7E0(v17, v19, v2);
  swift_bridgeObjectRelease();
  sub_10000F024((uint64_t)v8, &qword_1000A7B58);
  uint64_t v21 = (uint64_t)v11;
  uint64_t v22 = (uint64_t)v11;
  uint64_t v23 = v39;
  sub_100027078(v21, v39, &qword_1000A7B58);
  sub_100077700(v37, (uint64_t)&v40);
  uint64_t v24 = v40;
  uint64_t v25 = v41;
  uint64_t v26 = v42;
  uint64_t v27 = v43;
  LOBYTE(v5) = v44;
  uint64_t v28 = sub_100089C00();
  uint64_t v29 = swift_getKeyPath();
  uint64_t v30 = v22;
  uint64_t v36 = v22;
  sub_10000F148(v23, v22, &qword_1000A7B58);
  uint64_t v31 = v38;
  *uint64_t v38 = 0;
  *((unsigned char *)v31 + 8) = 1;
  uint64_t v32 = (int *)sub_10000697C(&qword_1000A7F10);
  sub_10000F148(v30, (uint64_t)v31 + v32[12], &qword_1000A7B58);
  uint64_t v33 = (char *)v31 + v32[16];
  *(void *)uint64_t v33 = v24;
  *((void *)v33 + 1) = v25;
  *((void *)v33 + 2) = v26;
  *((void *)v33 + 3) = v27;
  v33[32] = (char)v5;
  *((void *)v33 + 5) = v29;
  *((void *)v33 + 6) = v28;
  char v34 = (char *)v31 + v32[20];
  *(void *)char v34 = 0;
  v34[8] = 1;
  sub_100081470(v24, v25, v26);
  swift_retain();
  swift_retain();
  sub_10000F024(v39, &qword_1000A7B58);
  sub_100081510(v24, v25, v26);
  swift_release();
  swift_release();
  return sub_10000F024(v36, &qword_1000A7B58);
}

uint64_t sub_100077700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100089090();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000893C0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 20);
  uint64_t v13 = type metadata accessor for AlarmEntry();
  sub_10000F148(v12 + *(int *)(v13 + 20), (uint64_t)v7, &qword_1000A47F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000F024((uint64_t)v7, &qword_1000A47F8);
    *(void *)&long long v33 = sub_100008CAC();
    *((void *)&v33 + 1) = v14;
    sub_100032F54();
    uint64_t v28 = sub_100089E40();
    uint64_t v29 = v15;
    uint64_t v30 = v16 & 1;
    uint64_t v31 = v17;
    char v32 = 1;
    uint64_t result = sub_100089AB0();
    long long v19 = v33;
    long long v20 = v34;
    char v21 = v35;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    uint64_t v22 = type metadata accessor for WidgetUtilities();
    (*(void (**)(char *))(v22 + 136))(v11);
    uint64_t v28 = sub_100089E30();
    uint64_t v29 = v23;
    uint64_t v30 = v24 & 1;
    uint64_t v31 = v25;
    char v32 = 0;
    sub_100089AB0();
    long long v26 = v34;
    long long v27 = v33;
    char v21 = v35;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    long long v20 = v26;
    long long v19 = v27;
  }
  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + 16) = v20;
  *(unsigned char *)(a2 + 32) = v21;
  return result;
}

uint64_t sub_1000779D4@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AlarmComplicationCircularView(0);
  uint64_t v22 = sub_100008AEC();
  uint64_t v21 = sub_100089C00();
  uint64_t KeyPath = swift_getKeyPath();
  sub_100008F48(7);
  sub_100032F54();
  uint64_t v2 = sub_100089E40();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  sub_100089C00();
  uint64_t v7 = sub_100089DB0();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_10000B7E0(v2, v4, v6);
  swift_bridgeObjectRelease();
  sub_100008F48(6);
  uint64_t v12 = sub_100089D80();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  sub_10000B7E0(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = KeyPath;
  *(void *)(a1 + 32) = v21;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10005D5A0(v12, v14, v18);
  swift_bridgeObjectRetain();
  sub_10000B7E0(v12, v14, v18);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100077BCC@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_10000697C(&qword_1000A4FF0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100077C24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  sub_100027078(a1, a7, &qword_1000A4B70);
  uint64_t v13 = (int *)type metadata accessor for AlarmComplicationCircularView(0);
  sub_100073BFC(a2, a7 + v13[5], (uint64_t (*)(void))type metadata accessor for AlarmEntry);
  uint64_t result = sub_100049F00(a3, a7 + v13[6]);
  *(unsigned char *)(a7 + v13[7]) = a4;
  *(unsigned char *)(a7 + v13[8]) = a5;
  *(unsigned char *)(a7 + v13[9]) = a6;
  return result;
}

void *sub_100077CDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10008A1B0();
  uint64_t v4 = v3;
  sub_100077D34((uint64_t)v6);
  *a1 = v2;
  a1[1] = v4;
  return memcpy(a1 + 2, v6, 0x189uLL);
}

uint64_t sub_100077D34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *sub_100014D5C();
  swift_retain();
  char v3 = sub_100089B90();
  uint64_t v4 = sub_100089A10();
  sub_100077E3C((uint64_t)__src);
  v7[360] = 0;
  memcpy(&v7[7], __src, 0x161uLL);
  v8[0] = v4;
  v8[1] = 0;
  LOBYTE(v8[2]) = 0;
  memcpy((char *)&v8[2] + 1, v7, 0x168uLL);
  memcpy(&v9[7], v8, 0x179uLL);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  memcpy((void *)(a1 + 9), v9, 0x180uLL);
  v10[0] = v4;
  v10[1] = 0;
  char v11 = 0;
  memcpy(v12, v7, sizeof(v12));
  swift_retain();
  sub_10008154C((uint64_t)v8);
  sub_100081698((uint64_t)v10);
  return swift_release();
}

uint64_t sub_100077E3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100089CA0();
  uint64_t v108 = *(void *)(v2 - 8);
  uint64_t v109 = v2;
  __chkstk_darwin(v2);
  uint64_t v105 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_100089930();
  sub_10007890C((uint64_t)&v160);
  uint64_t v120 = v161;
  uint64_t v121 = v160;
  unsigned __int8 v7 = v162;
  uint64_t v118 = v165;
  uint64_t v119 = v164;
  uint64_t v117 = v166;
  unsigned __int8 v8 = v167;
  uint64_t v123 = v168;
  int v124 = sub_100089BA0();
  unsigned __int8 v138 = 0;
  unsigned __int8 v136 = v7;
  unsigned __int8 v134 = v8;
  unsigned __int8 v131 = 1;
  sub_100089990();
  uint64_t v9 = sub_100089E20();
  uint64_t v11 = v10;
  LODWORD(v116) = v12 & 1;
  sub_100089C60();
  uint64_t v13 = enum case for Font.Design.default(_:);
  LODWORD(v112) = enum case for Font.Design.default(_:);
  uint64_t v14 = sub_100089C20();
  uint64_t v104 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(char *, void, uint64_t))(v15 + 104);
  uint64_t v111 = v15 + 104;
  uint64_t v113 = v16;
  v16(v6, v13, v14);
  char v17 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56);
  uint64_t KeyPath = v15 + 56;
  uint64_t v110 = v17;
  v17((uint64_t)v6, 0, 1, v14);
  uint64_t v102 = v6;
  sub_100089C70();
  sub_10000F024((uint64_t)v6, &qword_1000A5B88);
  LOBYTE(v6) = v116;
  uint64_t v18 = sub_100089DB0();
  uint64_t v20 = v19;
  char v22 = v21;
  uint64_t v106 = v23;
  swift_release();
  char v24 = v22 & 1;
  sub_10000B7E0(v9, v11, (char)v6);
  swift_bridgeObjectRelease();
  sub_1000155BC();
  swift_retain();
  uint64_t v115 = sub_100089D70();
  uint64_t v116 = v25;
  char v27 = v26;
  uint64_t v114 = v28;
  swift_release();
  int v107 = v27 & 1;
  sub_10000B7E0(v18, v20, v24);
  swift_bridgeObjectRelease();
  LODWORD(v106) = sub_100089BB0();
  sub_100089690();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  sub_100089990();
  uint64_t v37 = sub_100089E20();
  uint64_t v39 = v38;
  char v41 = v40 & 1;
  sub_100089C30();
  uint64_t v42 = (uint64_t)v102;
  uint64_t v43 = v104;
  v113(v102, v112, v104);
  v110(v42, 0, 1, v43);
  sub_100089C70();
  sub_10000F024(v42, &qword_1000A5B88);
  uint64_t v44 = sub_100089DB0();
  uint64_t v46 = v45;
  char v48 = v47;
  uint64_t v112 = v49;
  swift_release();
  sub_10000B7E0(v37, v39, v41);
  swift_bridgeObjectRelease();
  sub_10008A000();
  uint64_t v113 = (void (*)(char *, void, uint64_t))sub_100089D70();
  uint64_t v104 = v50;
  LOBYTE(v39) = v51;
  uint64_t v111 = v52;
  swift_release();
  LODWORD(v110) = v39 & 1;
  sub_10000B7E0(v44, v46, v48 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v112 = swift_getKeyPath();
  sub_100089990();
  uint64_t v53 = sub_100089E20();
  uint64_t v55 = v54;
  uint64_t v102 = v56;
  char v58 = v57 & 1;
  sub_100089CB0();
  uint64_t v60 = v108;
  uint64_t v59 = v109;
  uint64_t v61 = v105;
  (*(void (**)(char *, void, uint64_t))(v108 + 104))(v105, enum case for Font.Leading.tight(_:), v109);
  sub_100089CC0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v59);
  uint64_t v62 = sub_100089DB0();
  uint64_t v64 = v63;
  LOBYTE(v61) = v65;
  uint64_t v108 = v66;
  swift_release();
  sub_10000B7E0(v53, v55, v58);
  swift_bridgeObjectRelease();
  sub_100089FC0();
  uint64_t v67 = sub_100089D70();
  uint64_t v97 = v67;
  uint64_t v109 = v68;
  char v70 = v69;
  uint64_t v105 = v71;
  swift_release();
  int v99 = v70 & 1;
  sub_10000B7E0(v62, v64, v61 & 1);
  swift_bridgeObjectRelease();
  uint64_t v108 = swift_getKeyPath();
  uint64_t v72 = swift_getKeyPath();
  uint64_t v98 = v72;
  int v73 = *(_DWORD *)v137;
  v130[0] = *(_DWORD *)v137;
  *(_DWORD *)((char *)v130 + 3) = *(_DWORD *)&v137[3];
  *(_DWORD *)(a1 + 257) = *(_DWORD *)v152;
  int v74 = *(_DWORD *)v135;
  v129[0] = *(_DWORD *)v135;
  *(_DWORD *)((char *)v129 + 3) = *(_DWORD *)&v135[3];
  *(_DWORD *)(a1 + 297) = *(_DWORD *)v150;
  int v75 = *(_DWORD *)v133;
  v128[0] = *(_DWORD *)v133;
  *(_DWORD *)((char *)v128 + 3) = *(_DWORD *)&v133[3];
  *(_DWORD *)((char *)v127 + 3) = *(_DWORD *)&v132[3];
  *(_DWORD *)(a1 + 324) = *(_DWORD *)&v149[3];
  *(_DWORD *)(a1 + 321) = *(_DWORD *)v149;
  v127[0] = *(_DWORD *)v132;
  DWORD1(v140) = *(_DWORD *)&v137[3];
  *(_DWORD *)((char *)&v140 + 1) = v73;
  HIDWORD(v141) = *(_DWORD *)&v135[3];
  *(_DWORD *)((char *)&v141 + 9) = v74;
  HIDWORD(v143) = *(_DWORD *)&v133[3];
  unsigned __int8 v76 = v138;
  *(_DWORD *)((char *)&v143 + 9) = v75;
  HIDWORD(v144) = *(_DWORD *)&v132[3];
  LOBYTE(v75) = v136;
  int v100 = v138;
  int v101 = v136;
  *(_DWORD *)((char *)&v144 + 9) = *(_DWORD *)v132;
  *(_DWORD *)(a1 + 153) = *(_DWORD *)v158;
  *(_DWORD *)(a1 + 156) = *(_DWORD *)&v158[3];
  *(_DWORD *)(a1 + 169) = *(_DWORD *)v157;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)&v157[3];
  *(_DWORD *)(a1 + 209) = *(_DWORD *)v155;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)&v155[3];
  *(_DWORD *)(a1 + 233) = *(_DWORD *)v153;
  *(_DWORD *)(a1 + 236) = *(_DWORD *)&v153[3];
  *(_DWORD *)(a1 + 260) = *(_DWORD *)&v152[3];
  *(_DWORD *)(a1 + 300) = *(_DWORD *)&v150[3];
  unsigned __int8 v77 = v134;
  LODWORD(v102) = v134;
  char v156 = 0;
  LOBYTE(v74) = (_BYTE)v110;
  char v154 = (char)v110;
  char v151 = v70 & 1;
  *(unsigned char *)(a1 + 168) = v106;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 232) = v74;
  *(unsigned char *)(a1 + 296) = v70 & 1;
  unsigned __int8 v78 = v131;
  LODWORD(v106) = v131;
  char v148 = 1;
  *(unsigned char *)(a1 + 256) = 1;
  *(unsigned char *)(a1 + 320) = 1;
  *(void *)(a1 + 264) = v112;
  *(void *)(a1 + 272) = 0x3FE0000000000000;
  *(void *)(a1 + 328) = v72;
  *(void *)(a1 + 336) = 0x3FE0000000000000;
  *(unsigned char *)(a1 + 352) = v148;
  *(void *)&long long v139 = v122;
  *((void *)&v139 + 1) = 0x4014000000000000;
  LOBYTE(v140) = v76;
  *((void *)&v140 + 1) = v121;
  *(void *)&long long v141 = v120;
  BYTE8(v141) = v75;
  *(void *)&long long v142 = v119;
  *((void *)&v142 + 1) = v118;
  *(void *)&long long v143 = v117;
  BYTE8(v143) = v77;
  *(void *)&long long v144 = v123;
  BYTE8(v144) = v124;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v79 = v139;
  long long v80 = v140;
  long long v81 = v142;
  *(_OWORD *)(a1 + 32) = v141;
  *(_OWORD *)(a1 + 48) = v81;
  *(_OWORD *)a1 = v79;
  *(_OWORD *)(a1 + 16) = v80;
  long long v82 = v143;
  long long v83 = v144;
  long long v84 = v145;
  long long v85 = v146;
  *(unsigned char *)(a1 + 128) = v78;
  *(_OWORD *)(a1 + 96) = v84;
  *(_OWORD *)(a1 + 112) = v85;
  *(_OWORD *)(a1 + 64) = v82;
  *(_OWORD *)(a1 + 80) = v83;
  uint64_t v86 = v115;
  uint64_t v87 = v116;
  *(void *)(a1 + 136) = v115;
  *(void *)(a1 + 144) = v87;
  LOBYTE(v73) = v107;
  *(unsigned char *)(a1 + 152) = v107;
  uint64_t v88 = (void (*)(void, void, void))v113;
  *(void *)(a1 + 160) = v114;
  *(void *)(a1 + 176) = v30;
  *(void *)(a1 + 184) = v32;
  *(void *)(a1 + 192) = v34;
  *(void *)(a1 + 200) = v36;
  uint64_t v89 = KeyPath;
  uint64_t v90 = v104;
  *(void *)(a1 + 216) = v88;
  *(void *)(a1 + 224) = v90;
  *(void *)(a1 + 240) = v111;
  *(void *)(a1 + 248) = v89;
  uint64_t v91 = v109;
  *(void *)(a1 + 280) = v67;
  *(void *)(a1 + 288) = v91;
  uint64_t v92 = v108;
  *(void *)(a1 + 304) = v105;
  *(void *)(a1 + 312) = v92;
  *(void *)(a1 + 344) = 0;
  char v126 = v73;
  char v125 = v74;
  unsigned __int8 v147 = v78;
  char v159 = v73;
  LOBYTE(a1) = v73;
  sub_1000817E4((uint64_t)&v139);
  sub_10005D5A0(v86, v87, a1);
  swift_bridgeObjectRetain();
  sub_10005D5A0((uint64_t)v88, v90, (char)v110);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v93 = v97;
  uint64_t v94 = v109;
  LOBYTE(v87) = v99;
  sub_10005D5A0(v97, v109, v99);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10000B7E0(v93, v94, v87);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000B7E0((uint64_t)v113, v90, v125);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000B7E0(v115, v116, v126);
  swift_bridgeObjectRelease();
  uint64_t v160 = v122;
  uint64_t v161 = 0x4014000000000000;
  unsigned __int8 v162 = v100;
  *(_DWORD *)char v163 = v130[0];
  *(_DWORD *)&v163[3] = *(_DWORD *)((char *)v130 + 3);
  uint64_t v164 = v121;
  uint64_t v165 = v120;
  LOBYTE(v166) = v101;
  *(_DWORD *)((char *)&v166 + 1) = v129[0];
  HIDWORD(v166) = *(_DWORD *)((char *)v129 + 3);
  uint64_t v167 = v119;
  uint64_t v168 = v118;
  uint64_t v169 = v117;
  char v170 = (char)v102;
  *(_DWORD *)&v171[3] = *(_DWORD *)((char *)v128 + 3);
  *(_DWORD *)int v171 = v128[0];
  uint64_t v172 = v123;
  char v173 = v124;
  *(_DWORD *)&v174[3] = *(_DWORD *)((char *)v127 + 3);
  *(_DWORD *)uint64_t v174 = v127[0];
  long long v175 = 0u;
  long long v176 = 0u;
  char v177 = v106;
  return sub_100081858((uint64_t)&v160);
}

uint64_t sub_10007890C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000697C(&qword_1000A5B88);
  __chkstk_darwin(v2 - 8);
  char v47 = &v45[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for AlarmEntry();
  __chkstk_darwin(v4 - 8);
  char v6 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000774C((uint64_t)v6);
  sub_100008B24();
  sub_10007F300((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
  uint64_t v7 = sub_100089E50();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  sub_100089CE0();
  uint64_t v12 = sub_100089DB0();
  uint64_t v14 = v13;
  char v16 = v15;
  swift_release();
  sub_10000B7E0(v7, v9, v11);
  swift_bridgeObjectRelease();
  sub_10008A000();
  uint64_t v17 = sub_100089D70();
  uint64_t v48 = v18;
  uint64_t v49 = v17;
  char v20 = v19;
  uint64_t v50 = v21;
  swift_release();
  int v46 = v20 & 1;
  sub_10000B7E0(v12, v14, v16 & 1);
  swift_bridgeObjectRelease();
  sub_100089990();
  uint64_t v22 = sub_100089E20();
  uint64_t v24 = v23;
  LOBYTE(v9) = v25 & 1;
  sub_100089C60();
  uint64_t v26 = enum case for Font.Design.default(_:);
  uint64_t v27 = sub_100089C20();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = (uint64_t)v47;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v28 + 104))(v47, v26, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v27);
  sub_100089C70();
  sub_10000F024(v29, &qword_1000A5B88);
  uint64_t v30 = sub_100089DB0();
  uint64_t v32 = v31;
  LOBYTE(v28) = v33;
  swift_release();
  LOBYTE(v26) = v28 & 1;
  sub_10000B7E0(v22, v24, v9);
  swift_bridgeObjectRelease();
  sub_10008A000();
  uint64_t v34 = sub_100089D70();
  uint64_t v36 = v35;
  LOBYTE(v22) = v37;
  uint64_t v39 = v38;
  swift_release();
  sub_10000B7E0(v30, v32, v26);
  swift_bridgeObjectRelease();
  char v40 = v46;
  char v51 = v46;
  uint64_t v42 = v48;
  uint64_t v41 = v49;
  *(void *)a1 = v49;
  *(void *)(a1 + 8) = v42;
  *(unsigned char *)(a1 + 16) = v40;
  *(void *)(a1 + 24) = v50;
  *(void *)(a1 + 32) = v34;
  *(void *)(a1 + 40) = v36;
  *(unsigned char *)(a1 + 48) = v22 & 1;
  *(void *)(a1 + 56) = v39;
  uint64_t v43 = v41;
  sub_10005D5A0(v41, v42, v40);
  swift_bridgeObjectRetain();
  sub_10005D5A0(v34, v36, v22 & 1);
  swift_bridgeObjectRetain();
  sub_10000B7E0(v34, v36, v22 & 1);
  swift_bridgeObjectRelease();
  sub_10000B7E0(v43, v42, v51);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100078CF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100078D74((uint64_t (*)(void))type metadata accessor for WorldClockCity, a1);
}

uint64_t sub_100078D10@<X0>(uint64_t a1@<X8>)
{
  return sub_10000F148(v1, a1, &qword_1000A4FD0);
}

uint64_t sub_100078D38(uint64_t a1)
{
  return sub_10007A674(a1, v1, &qword_1000A4FD0);
}

uint64_t sub_100078D5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100078D74((uint64_t (*)(void))type metadata accessor for AlarmEntry, a1);
}

uint64_t sub_100078D74@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t sub_100078DE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100075160(type metadata accessor for ClockDateText, (uint64_t)&qword_1000A7A08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000F148, a1);
}

uint64_t sub_100078E1C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ClockDateText(0);
  return sub_10007A674(a1, v1 + *(int *)(v3 + 20), &qword_1000A7A08);
}

uint64_t (*sub_100078E5C())(void)
{
  return nullsub_1;
}

uint64_t sub_100078EA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v1 = sub_100089F90();
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000697C(&qword_1000A7B70);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000697C(&qword_1000A7B78);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  char v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000697C(&qword_1000A7B80);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000697C(&qword_1000A7B88);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000697C(&qword_1000A7B90) - 8;
  __chkstk_darwin(v38);
  char v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)char v6 = sub_100089930();
  *((void *)v6 + 1) = 0;
  v6[16] = 0;
  uint64_t v21 = sub_10000697C(&qword_1000A7B98);
  sub_1000792A4(v37, (uint64_t)&v6[*(int *)(v21 + 44)]);
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v3, enum case for Color.RGBColorSpace.sRGBLinear(_:), v1);
  uint64_t v22 = sub_10008A030();
  sub_10000F148((uint64_t)v6, (uint64_t)v10, &qword_1000A7B70);
  uint64_t v23 = (uint64_t *)&v10[*(int *)(v8 + 44)];
  uint64_t *v23 = v22;
  v23[1] = 0x3FF0000000000000;
  void v23[2] = 0;
  v23[3] = 0;
  sub_10000F024((uint64_t)v6, &qword_1000A7B70);
  uint64_t v24 = sub_100089C10();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000F148((uint64_t)v10, (uint64_t)v14, &qword_1000A7B78);
  uint64_t v26 = (uint64_t *)&v14[*(int *)(v12 + 44)];
  *uint64_t v26 = KeyPath;
  v26[1] = v24;
  sub_10000F024((uint64_t)v10, &qword_1000A7B78);
  uint64_t v27 = sub_10008A000();
  uint64_t v28 = swift_getKeyPath();
  sub_10000F148((uint64_t)v14, (uint64_t)v18, &qword_1000A7B80);
  uint64_t v29 = (uint64_t *)&v18[*(int *)(v16 + 44)];
  uint64_t *v29 = v28;
  v29[1] = v27;
  sub_10000F024((uint64_t)v14, &qword_1000A7B80);
  uint64_t v30 = sub_1000166F4();
  swift_beginAccess();
  if (*v30) {
    double v31 = 0.8;
  }
  else {
    double v31 = 1.0;
  }
  uint64_t v32 = swift_getKeyPath();
  sub_10000F148((uint64_t)v18, (uint64_t)v20, &qword_1000A7B88);
  char v33 = &v20[*(int *)(v38 + 44)];
  *(void *)char v33 = v32;
  *((double *)v33 + 1) = v31;
  sub_10000F024((uint64_t)v18, &qword_1000A7B88);
  return sub_100027078((uint64_t)v20, v39, &qword_1000A7B90);
}

uint64_t sub_1000792A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v87 = a2;
  uint64_t v3 = sub_100089090();
  __chkstk_darwin(v3 - 8);
  char v70 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v80 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_1000893C0();
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v72 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000697C(&qword_1000A7EB0);
  __chkstk_darwin(v88);
  uint64_t v86 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000697C(&qword_1000A7EB8);
  __chkstk_darwin(v83);
  long long v82 = (uint64_t *)((char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v85 = sub_10000697C(&qword_1000A7EC0);
  __chkstk_darwin(v85);
  long long v84 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000697C(&qword_1000A73D0);
  __chkstk_darwin(v75);
  unsigned __int8 v78 = (uint64_t *)((char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v79 = sub_100089480();
  uint64_t v77 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  unsigned __int8 v76 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000697C(&qword_1000A7EC8);
  __chkstk_darwin(v89);
  uint64_t v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v81 = (uint64_t)&v68 - v16;
  uint64_t v17 = sub_10000697C(&qword_1000A7A08);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for AlarmEntry();
  uint64_t v20 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000697C(&qword_1000A4FD0);
  __chkstk_darwin(v23 - 8);
  char v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for WorldClockCity();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F148(a1, (uint64_t)v25, &qword_1000A4FD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    uint64_t v30 = v80;
    uint64_t v31 = v86;
    sub_10000F024((uint64_t)v25, &qword_1000A4FD0);
    uint64_t v32 = type metadata accessor for ClockDateText(0);
    sub_10000F148(a1 + *(int *)(v32 + 20), (uint64_t)v19, &qword_1000A7A08);
    uint64_t v33 = v74;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v74) == 1)
    {
      sub_10000F024((uint64_t)v19, &qword_1000A7A08);
      uint64_t v34 = v31;
LABEL_7:
      sub_100089990();
      *(void *)uint64_t v34 = sub_100089E20();
      *(void *)(v34 + 8) = v54;
      *(unsigned char *)(v34 + 16) = v55 & 1;
      *(void *)(v34 + 24) = v56;
      swift_storeEnumTagMultiPayload();
      sub_100081320(&qword_1000A7ED0, &qword_1000A7EC0, (void (*)(void))sub_1000811E8);
      return sub_100089AB0();
    }
    uint64_t v49 = (uint64_t)v22;
    sub_100073BFC((uint64_t)v19, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
    uint64_t v50 = v30;
    sub_10000F148((uint64_t)&v22[*(int *)(v33 + 20)], v30, &qword_1000A47F8);
    uint64_t v51 = v71;
    uint64_t v52 = v30;
    uint64_t v53 = v73;
    uint64_t v34 = v31;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v52, 1, v73) == 1)
    {
      sub_10007F300(v49, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
      sub_10000F024(v50, &qword_1000A47F8);
      goto LABEL_7;
    }
    char v58 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v72, v50, v53);
    uint64_t v59 = *(void (**)(char *))(type metadata accessor for WidgetUtilities() + 136);
    uint64_t v81 = v49;
    v59(v58);
    uint64_t v60 = sub_100089E30();
    uint64_t v62 = v61;
    uint64_t v63 = v82;
    *long long v82 = v60;
    v63[1] = v61;
    char v65 = v64 & 1;
    *((unsigned char *)v63 + 16) = v64 & 1;
    v63[3] = v66;
    uint64_t v80 = v66;
    swift_storeEnumTagMultiPayload();
    sub_10005D5A0(v60, v62, v65);
    sub_1000811E8();
    swift_bridgeObjectRetain();
    uint64_t v67 = (uint64_t)v84;
    sub_100089AB0();
    sub_10000F148(v67, v34, &qword_1000A7EC0);
    swift_storeEnumTagMultiPayload();
    sub_100081320(&qword_1000A7ED0, &qword_1000A7EC0, (void (*)(void))sub_1000811E8);
    sub_100089AB0();
    sub_10000F024(v67, &qword_1000A7EC0);
    sub_10000B7E0(v60, v62, v65);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v72, v73);
    char v47 = type metadata accessor for AlarmEntry;
    uint64_t v48 = v81;
  }
  else
  {
    char v69 = v29;
    sub_100073BFC((uint64_t)v25, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
    sub_100079DE0((uint64_t)v29, &v90);
    uint64_t v80 = *((void *)&v90 + 1);
    uint64_t v35 = v90;
    uint64_t v36 = v91;
    uint64_t v37 = v92;
    LODWORD(v74) = v94;
    uint64_t v38 = v93;
    uint64_t KeyPath = swift_getKeyPath();
    char v40 = v76;
    sub_100089440();
    uint64_t v41 = v77;
    uint64_t v42 = v78;
    uint64_t v43 = v79;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))((char *)v78 + *(int *)(v75 + 28), v40, v79);
    uint64_t *v42 = KeyPath;
    sub_10000F148((uint64_t)v42, (uint64_t)&v14[*(int *)(v89 + 36)], &qword_1000A73D0);
    uint64_t v44 = v80;
    *(void *)uint64_t v14 = v35;
    *((void *)v14 + 1) = v44;
    *((void *)v14 + 2) = v36;
    *((void *)v14 + 3) = v37;
    v14[32] = v38;
    LOBYTE(KeyPath) = v74;
    v14[33] = v74;
    sub_10008140C(v35, v44, v36, v37, v38, KeyPath);
    sub_10000F024((uint64_t)v42, &qword_1000A73D0);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v43);
    sub_1000814AC(v35, v80, v36, v37, v38, KeyPath);
    uint64_t v45 = v81;
    sub_100027078((uint64_t)v14, v81, &qword_1000A7EC8);
    sub_10000F148(v45, (uint64_t)v82, &qword_1000A7EC8);
    swift_storeEnumTagMultiPayload();
    sub_1000811E8();
    uint64_t v46 = (uint64_t)v84;
    sub_100089AB0();
    sub_10000F148(v46, v86, &qword_1000A7EC0);
    swift_storeEnumTagMultiPayload();
    sub_100081320(&qword_1000A7ED0, &qword_1000A7EC0, (void (*)(void))sub_1000811E8);
    sub_100089AB0();
    sub_10000F024(v46, &qword_1000A7EC0);
    sub_10000F024(v45, &qword_1000A7EC8);
    char v47 = type metadata accessor for WorldClockCity;
    uint64_t v48 = (uint64_t)v69;
  }
  return sub_10007F300(v48, (uint64_t (*)(void))v47);
}

double sub_100079DE0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v2 = sub_100089980();
  __chkstk_darwin(v2 - 8);
  uint64_t v59 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100089480();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t v14 = sub_100031718();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15(v13, v14, v7);
  char v16 = sub_1000317AC();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v13, v7);
  if (v16)
  {
    sub_100083900((uint64_t)v6);
    uint64_t v18 = sub_100089580();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 0, 1, v18);
    uint64_t v19 = sub_100089D90();
    uint64_t v21 = v19;
    uint64_t v22 = v20;
    *(void *)&long long v62 = v19;
    *((void *)&v62 + 1) = v20;
    char v24 = v23 & 1;
    *(void *)&long long v63 = v23 & 1;
    *((void *)&v63 + 1) = v25;
    LOBYTE(v64) = 0;
LABEL_6:
    sub_10005D5A0(v19, v20, v24);
    swift_bridgeObjectRetain();
    sub_100089AB0();
    long long v62 = v65;
    long long v63 = v66;
    __int16 v64 = v67;
    sub_10000697C(&qword_1000A7F08);
    sub_1000813A0();
    sub_100089AB0();
    sub_10000B7E0(v21, v22, v24);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v15(v10, v14, v7);
  char v26 = sub_100032C64();
  v17(v10, v7);
  sub_100089970();
  v69._countAndFlagsBits = 0;
  v69._object = (void *)0xE000000000000000;
  sub_100089960(v69);
  uint64_t v27 = type metadata accessor for WidgetUtilities();
  uint64_t v28 = (uint64_t *)(v60 + *(int *)(type metadata accessor for WorldClockCity() + 32));
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  if (v26)
  {
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 128))(v29, v30);
    uint64_t v45 = v44;
    char v47 = v46 & 1;
    sub_100089940();
    sub_10000B7E0(v43, v45, v47);
    swift_bridgeObjectRelease();
    v72._countAndFlagsBits = 32;
    v72._object = (void *)0xE100000000000000;
    sub_100089960(v72);
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 120))(v29, v30);
    uint64_t v50 = v49;
    LOBYTE(v43) = v51 & 1;
    sub_100089940();
    sub_10000B7E0(v48, v50, v43);
    swift_bridgeObjectRelease();
    v73._countAndFlagsBits = 0;
    v73._object = (void *)0xE000000000000000;
    sub_100089960(v73);
    sub_1000899A0();
    uint64_t v19 = sub_100089E20();
    uint64_t v21 = v19;
    uint64_t v22 = v20;
    *(void *)&long long v62 = v19;
    *((void *)&v62 + 1) = v20;
    char v24 = v52 & 1;
    *(void *)&long long v63 = v52 & 1;
    *((void *)&v63 + 1) = v53;
    LOBYTE(v64) = 1;
    goto LABEL_6;
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 120))(v29, v30);
  uint64_t v33 = v32;
  char v35 = v34 & 1;
  sub_100089940();
  sub_10000B7E0(v31, v33, v35);
  swift_bridgeObjectRelease();
  v70._countAndFlagsBits = 32;
  v70._object = (void *)0xE100000000000000;
  sub_100089960(v70);
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 128))(v29, v30);
  uint64_t v38 = v37;
  LOBYTE(v31) = v39 & 1;
  sub_100089940();
  sub_10000B7E0(v36, v38, v31);
  swift_bridgeObjectRelease();
  v71._countAndFlagsBits = 0;
  v71._object = (void *)0xE000000000000000;
  sub_100089960(v71);
  sub_1000899A0();
  *(void *)&long long v62 = sub_100089E20();
  *((void *)&v62 + 1) = v40;
  *(void *)&long long v63 = v41 & 1;
  *((void *)&v63 + 1) = v42;
  __int16 v64 = 256;
  sub_10000697C(&qword_1000A7F08);
  sub_1000813A0();
  sub_100089AB0();
LABEL_7:
  double result = *(double *)&v65;
  long long v55 = v66;
  unsigned __int8 v56 = v67;
  char v57 = v68;
  char v58 = v61;
  _OWORD *v61 = v65;
  v58[1] = v55;
  *((unsigned char *)v58 + 32) = v56;
  *((unsigned char *)v58 + 33) = v57;
  return result;
}

uint64_t sub_10007A3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_10007A474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for WorldClockCity();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  uint64_t v3 = a1 + *(int *)(type metadata accessor for ClockDateText(0) + 20);
  uint64_t v4 = type metadata accessor for AlarmEntry();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 1, 1, v4);
}

unint64_t sub_10007A534()
{
  unint64_t result = qword_1000A7B08;
  if (!qword_1000A7B08)
  {
    sub_10000B798(&qword_1000A7AF8);
    sub_10007A5B0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7B08);
  }
  return result;
}

unint64_t sub_10007A5B0()
{
  unint64_t result = qword_1000A7B10;
  if (!qword_1000A7B10)
  {
    sub_10000B798(&qword_1000A7AF0);
    sub_10001845C(&qword_1000A7B18, &qword_1000A7AE8);
    sub_10001845C(&qword_1000A60C0, &qword_1000A60C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7B10);
  }
  return result;
}

uint64_t sub_10007A674(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000697C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007A6D8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007A6F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007A710()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007A72C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007A748()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007A764()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007A798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007A7AC);
}

uint64_t sub_10007A7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007A7C4);
}

uint64_t sub_10007A7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007A7E0);
}

uint64_t sub_10007A7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007A7F8);
}

uint64_t type metadata accessor for AlarmComplicationRectangularView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000ABA30);
}

char *sub_10007A81C(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for AlarmEntry();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = sub_1000893C0();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = v6[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v40(&a2[v10], 1, v7))
    {
      uint64_t v13 = sub_10000697C(&qword_1000A47F8);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    uint64_t v15 = v6[6];
    char v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    if (v40(&a2[v15], 1, v7))
    {
      uint64_t v18 = sub_10000697C(&qword_1000A47F8);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v9(v16, v17, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
    }
    a1[v6[7]] = a2[v6[7]];
    a1[v6[8]] = a2[v6[8]];
    uint64_t v19 = v6[9];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    uint64_t v22 = *((void *)v21 + 1);
    char *v20 = *(void *)v21;
    v20[1] = v22;
    uint64_t v23 = v6[10];
    char v24 = &a1[v23];
    uint64_t v25 = &a2[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *char v24 = *(void *)v25;
    v24[1] = v26;
    uint64_t v27 = v6[11];
    uint64_t v28 = &a1[v27];
    uint64_t v29 = &a2[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *uint64_t v28 = *(void *)v29;
    v28[1] = v30;
    uint64_t v31 = v6[12];
    uint64_t v32 = &a1[v31];
    uint64_t v33 = &a2[v31];
    uint64_t v34 = *((void *)v33 + 1);
    char *v32 = *(void *)v33;
    v32[1] = v34;
    a1[v6[13]] = a2[v6[13]];
    a1[v6[14]] = a2[v6[14]];
    uint64_t v35 = v6[15];
    uint64_t v36 = &a1[v35];
    uint64_t v37 = &a2[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *uint64_t v36 = *(void *)v37;
    v36[1] = v38;
    a1[v6[16]] = a2[v6[16]];
    a1[v6[17]] = a2[v6[17]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10007AB40(uint64_t a1)
{
  uint64_t v2 = sub_1000893C0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, v2);
  uint64_t v5 = type metadata accessor for AlarmEntry();
  uint64_t v6 = a1 + *(int *)(v5 + 20);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v7(v6, 1, v2)) {
    v4(v6, v2);
  }
  uint64_t v8 = a1 + *(int *)(v5 + 24);
  if (!v7(v8, 1, v2)) {
    v4(v8, v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_10007ACBC(char *a1, char *a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  uint64_t v7 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v8 = v7[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  char v39 = v6;
  if (v11(&a2[v8], 1, v4))
  {
    uint64_t v12 = sub_10000697C(&qword_1000A47F8);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    uint64_t v13 = v5;
  }
  else
  {
    v6(v9, v10, v4);
    uint64_t v13 = v5;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  uint64_t v14 = v7[6];
  uint64_t v15 = &a1[v14];
  char v16 = &a2[v14];
  if (v11(&a2[v14], 1, v4))
  {
    uint64_t v17 = sub_10000697C(&qword_1000A47F8);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v39(v15, v16, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v4);
  }
  a1[v7[7]] = a2[v7[7]];
  a1[v7[8]] = a2[v7[8]];
  uint64_t v18 = v7[9];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  uint64_t v22 = v7[10];
  uint64_t v23 = &a1[v22];
  char v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  uint64_t v26 = v7[11];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v29;
  uint64_t v30 = v7[12];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v33;
  a1[v7[13]] = a2[v7[13]];
  a1[v7[14]] = a2[v7[14]];
  uint64_t v34 = v7[15];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = v37;
  a1[v7[16]] = a2[v7[16]];
  a1[v7[17]] = a2[v7[17]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10007AF90(char *a1, char *a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v36 = *(void (**)(void *, const void *, uint64_t))(v5 + 24);
  v36(a1, a2, v4);
  uint64_t v6 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v7 = v6[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  int v11 = v10(&a1[v7], 1, v4);
  int v12 = v10(v9, 1, v4);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v9, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_6:
    uint64_t v13 = sub_10000697C(&qword_1000A47F8);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  v36(v8, v9, v4);
LABEL_7:
  uint64_t v14 = v6[6];
  uint64_t v15 = &a1[v14];
  char v16 = &a2[v14];
  int v17 = v10(&a1[v14], 1, v4);
  int v18 = v10(v16, 1, v4);
  if (!v17)
  {
    if (!v18)
    {
      v36(v15, v16, v4);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v19 = sub_10000697C(&qword_1000A47F8);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v15, v16, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
LABEL_13:
  a1[v6[7]] = a2[v6[7]];
  a1[v6[8]] = a2[v6[8]];
  uint64_t v20 = v6[9];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = v6[10];
  char v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)char v24 = *(void *)v25;
  *((void *)v24 + 1) = *((void *)v25 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v6[11];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = v6[12];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v6[13]] = a2[v6[13]];
  a1[v6[14]] = a2[v6[14]];
  uint64_t v32 = v6[15];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v6[16]] = a2[v6[16]];
  a1[v6[17]] = a2[v6[17]];
  return a1;
}

char *sub_10007B378(char *a1, char *a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  uint64_t v7 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v8 = v7[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  int v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v19 = v6;
  if (v11(&a2[v8], 1, v4))
  {
    uint64_t v12 = sub_10000697C(&qword_1000A47F8);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    uint64_t v13 = v5;
  }
  else
  {
    v6(v9, v10, v4);
    uint64_t v13 = v5;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  uint64_t v14 = v7[6];
  uint64_t v15 = &a1[v14];
  char v16 = &a2[v14];
  if (v11(&a2[v14], 1, v4))
  {
    uint64_t v17 = sub_10000697C(&qword_1000A47F8);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v19(v15, v16, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v4);
  }
  a1[v7[7]] = a2[v7[7]];
  a1[v7[8]] = a2[v7[8]];
  *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
  *(_OWORD *)&a1[v7[10]] = *(_OWORD *)&a2[v7[10]];
  *(_OWORD *)&a1[v7[11]] = *(_OWORD *)&a2[v7[11]];
  *(_OWORD *)&a1[v7[12]] = *(_OWORD *)&a2[v7[12]];
  a1[v7[13]] = a2[v7[13]];
  a1[v7[14]] = a2[v7[14]];
  *(_OWORD *)&a1[v7[15]] = *(_OWORD *)&a2[v7[15]];
  a1[v7[16]] = a2[v7[16]];
  a1[v7[17]] = a2[v7[17]];
  return a1;
}

char *sub_10007B600(char *a1, char *a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  char v46 = *(void (**)(void *, const void *, uint64_t))(v5 + 40);
  v46(a1, a2, v4);
  uint64_t v6 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v7 = v6[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  int v11 = v10(&a1[v7], 1, v4);
  int v12 = v10(v9, 1, v4);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v9, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_6:
    uint64_t v13 = sub_10000697C(&qword_1000A47F8);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  v46(v8, v9, v4);
LABEL_7:
  uint64_t v14 = v6[6];
  uint64_t v15 = &a1[v14];
  char v16 = &a2[v14];
  int v17 = v10(&a1[v14], 1, v4);
  int v18 = v10(v16, 1, v4);
  if (!v17)
  {
    if (!v18)
    {
      v46(v15, v16, v4);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v19 = sub_10000697C(&qword_1000A47F8);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v15, v16, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
LABEL_13:
  a1[v6[7]] = a2[v6[7]];
  a1[v6[8]] = a2[v6[8]];
  uint64_t v20 = v6[9];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = (uint64_t *)&a2[v20];
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *(void *)uint64_t v21 = v24;
  *((void *)v21 + 1) = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v6[10];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = (uint64_t *)&a2[v25];
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *(void *)uint64_t v26 = v29;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = v6[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = (uint64_t *)&a2[v30];
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *(void *)uint64_t v31 = v34;
  *((void *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = v6[12];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = (uint64_t *)&a2[v35];
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *(void *)uint64_t v36 = v39;
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  a1[v6[13]] = a2[v6[13]];
  a1[v6[14]] = a2[v6[14]];
  uint64_t v40 = v6[15];
  char v41 = &a1[v40];
  uint64_t v42 = (uint64_t *)&a2[v40];
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *(void *)char v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  a1[v6[16]] = a2[v6[16]];
  a1[v6[17]] = a2[v6[17]];
  return a1;
}

uint64_t sub_10007B998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007B9AC);
}

uint64_t sub_10007B9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmEntry();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10007BA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007BA30);
}

uint64_t sub_10007BA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmEntry();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AlarmInlineComplicationView(uint64_t a1)
{
  return sub_100022C28(a1, (uint64_t *)&unk_1000ABA40);
}

uint64_t sub_10007BAC4()
{
  uint64_t result = type metadata accessor for AlarmEntry();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10007BB50(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    uint64_t v8 = (void *)(v7 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = a1;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    int v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1000893C0();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v14(v10, v11, v12);
    uint64_t v15 = (int *)type metadata accessor for AlarmEntry();
    uint64_t v16 = v15[5];
    int v17 = &v10[v16];
    int v18 = &v11[v16];
    char v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    if (v51(&v11[v16], 1, v12))
    {
      uint64_t v19 = sub_10000697C(&qword_1000A47F8);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      v14(v17, v18, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
    }
    uint64_t v20 = v15[6];
    uint64_t v21 = &v10[v20];
    uint64_t v22 = &v11[v20];
    if (v51(&v11[v20], 1, v12))
    {
      uint64_t v23 = sub_10000697C(&qword_1000A47F8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v14(v21, v22, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
    }
    v10[v15[7]] = v11[v15[7]];
    v10[v15[8]] = v11[v15[8]];
    uint64_t v24 = v15[9];
    uint64_t v25 = &v10[v24];
    uint64_t v26 = &v11[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *(void *)uint64_t v25 = *(void *)v26;
    *((void *)v25 + 1) = v27;
    uint64_t v28 = v15[10];
    uint64_t v29 = &v10[v28];
    uint64_t v30 = &v11[v28];
    uint64_t v52 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v52;
    uint64_t v31 = v15[11];
    uint64_t v32 = &v10[v31];
    uint64_t v33 = &v11[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    uint64_t v35 = v15[12];
    uint64_t v36 = &v10[v35];
    uint64_t v37 = &v11[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)uint64_t v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    v10[v15[13]] = v11[v15[13]];
    v10[v15[14]] = v11[v15[14]];
    uint64_t v39 = v15[15];
    uint64_t v40 = &v10[v39];
    char v41 = &v11[v39];
    uint64_t v42 = *((void *)v41 + 1);
    *(void *)uint64_t v40 = *(void *)v41;
    *((void *)v40 + 1) = v42;
    v10[v15[16]] = v11[v15[16]];
    v10[v15[17]] = v11[v15[17]];
    uint64_t v43 = a3[6];
    uint64_t v44 = (char *)v53 + v43;
    uint64_t v45 = (char *)a2 + v43;
    long long v46 = *(_OWORD *)((char *)a2 + v43 + 24);
    *(_OWORD *)((char *)v53 + v43 + 24) = v46;
    uint64_t v47 = v46;
    uint64_t v48 = **(void (***)(char *, char *, uint64_t))(v46 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v44, v45, v47);
    uint64_t v8 = v53;
    uint64_t v49 = a3[8];
    *((unsigned char *)v53 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)v53 + v49) = *((unsigned char *)a2 + v49);
    *((unsigned char *)v53 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return v8;
}

uint64_t sub_10007BFB4(uint64_t a1, uint64_t a2)
{
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1000899F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = type metadata accessor for AlarmEntry();
  uint64_t v10 = v5 + *(int *)(v9 + 20);
  int v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v11(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v12 = v5 + *(int *)(v9 + 24);
  if (!v11(v12, 1, v6)) {
    v8(v12, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10000F380(a1 + *(int *)(a2 + 24));
}

void *sub_10007C1A8(void *a1, void *a2, int *a3)
{
  sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1000899F0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v50 = a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1000893C0();
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  uint64_t v12 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v13 = v12[5];
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v48(&v8[v13], 1, v9))
  {
    uint64_t v16 = sub_10000697C(&qword_1000A47F8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v11(v14, v15, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = v12[6];
  int v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  if (v48(&v8[v17], 1, v9))
  {
    uint64_t v20 = sub_10000697C(&qword_1000A47F8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v11(v18, v19, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  }
  v7[v12[7]] = v8[v12[7]];
  v7[v12[8]] = v8[v12[8]];
  uint64_t v21 = v12[9];
  uint64_t v22 = &v7[v21];
  uint64_t v23 = &v8[v21];
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = v24;
  uint64_t v25 = v12[10];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = &v8[v25];
  uint64_t v49 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = v49;
  uint64_t v28 = v12[11];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v31;
  uint64_t v32 = v12[12];
  uint64_t v33 = &v7[v32];
  uint64_t v34 = &v8[v32];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  v7[v12[13]] = v8[v12[13]];
  v7[v12[14]] = v8[v12[14]];
  uint64_t v36 = v12[15];
  uint64_t v37 = &v7[v36];
  uint64_t v38 = &v8[v36];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  v7[v12[16]] = v8[v12[16]];
  v7[v12[17]] = v8[v12[17]];
  uint64_t v40 = a3[6];
  char v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)v50 + v40;
  long long v43 = *(_OWORD *)((char *)v50 + v40 + 24);
  *(_OWORD *)((char *)a1 + v40 + 24) = v43;
  uint64_t v44 = v43;
  uint64_t v47 = **(void (***)(char *, char *, uint64_t))(v43 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47(v41, v42, v44);
  uint64_t v45 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)v50 + a3[7]);
  *((unsigned char *)a1 + v45) = *((unsigned char *)v50 + v45);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)v50 + a3[9]);
  return a1;
}

void *sub_10007C5BC(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4FF0);
    sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1000899F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  long long v46 = a3;
  uint64_t v47 = a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1000893C0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v44(v8, v9, v10);
  uint64_t v12 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v13 = v12[5];
  uint64_t v14 = &v8[v13];
  uint64_t v15 = &v9[v13];
  uint64_t v45 = v11;
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v17 = v16(&v8[v13], 1, v10);
  int v18 = v16(v15, 1, v10);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v15, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_11:
    uint64_t v19 = sub_10000697C(&qword_1000A47F8);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  v44(v14, v15, v10);
LABEL_12:
  uint64_t v20 = v12[6];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  int v23 = v16(&v8[v20], 1, v10);
  int v24 = v16(v22, 1, v10);
  if (!v23)
  {
    uint64_t v26 = v46;
    uint64_t v25 = v47;
    if (!v24)
    {
      v44(v21, v22, v10);
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v21, v10);
    goto LABEL_17;
  }
  uint64_t v26 = v46;
  uint64_t v25 = v47;
  if (v24)
  {
LABEL_17:
    uint64_t v27 = sub_10000697C(&qword_1000A47F8);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v21, v22, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v21, 0, 1, v10);
LABEL_18:
  v8[v12[7]] = v9[v12[7]];
  v8[v12[8]] = v9[v12[8]];
  uint64_t v28 = v12[9];
  uint64_t v29 = &v8[v28];
  uint64_t v30 = &v9[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = v12[10];
  uint64_t v32 = &v8[v31];
  uint64_t v33 = &v9[v31];
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = v12[11];
  uint64_t v35 = &v8[v34];
  uint64_t v36 = &v9[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v12[12];
  uint64_t v38 = &v8[v37];
  uint64_t v39 = &v9[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[v12[13]] = v9[v12[13]];
  v8[v12[14]] = v9[v12[14]];
  uint64_t v40 = v12[15];
  char v41 = &v8[v40];
  uint64_t v42 = &v9[v40];
  *(void *)char v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[v12[16]] = v9[v12[16]];
  v8[v12[17]] = v9[v12[17]];
  sub_100062644((void *)((char *)a1 + v26[6]), (void *)((char *)v25 + v26[6]));
  *((unsigned char *)a1 + v26[7]) = *((unsigned char *)v25 + v26[7]);
  *((unsigned char *)a1 + v26[8]) = *((unsigned char *)v25 + v26[8]);
  *((unsigned char *)a1 + v26[9]) = *((unsigned char *)v25 + v26[9]);
  return a1;
}

char *sub_10007CAA4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000899F0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v32 = a2;
  uint64_t v8 = a3[5];
  uint64_t v31 = a1;
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000893C0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  uint64_t v14 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v15 = v14[5];
  uint64_t v16 = &v9[v15];
  int v17 = &v10[v15];
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v30(&v10[v15], 1, v11))
  {
    uint64_t v18 = sub_10000697C(&qword_1000A47F8);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v13(v16, v17, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  uint64_t v19 = v14[6];
  uint64_t v20 = &v9[v19];
  uint64_t v21 = &v10[v19];
  if (v30(&v10[v19], 1, v11))
  {
    uint64_t v22 = sub_10000697C(&qword_1000A47F8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v13(v20, v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
  }
  v9[v14[7]] = v10[v14[7]];
  v9[v14[8]] = v10[v14[8]];
  *(_OWORD *)&v9[v14[9]] = *(_OWORD *)&v10[v14[9]];
  *(_OWORD *)&v9[v14[10]] = *(_OWORD *)&v10[v14[10]];
  *(_OWORD *)&v9[v14[11]] = *(_OWORD *)&v10[v14[11]];
  *(_OWORD *)&v9[v14[12]] = *(_OWORD *)&v10[v14[12]];
  v9[v14[13]] = v10[v14[13]];
  v9[v14[14]] = v10[v14[14]];
  *(_OWORD *)&v9[v14[15]] = *(_OWORD *)&v10[v14[15]];
  v9[v14[16]] = v10[v14[16]];
  v9[v14[17]] = v10[v14[17]];
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = &v31[v23];
  uint64_t v26 = &v32[v23];
  long long v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *((void *)v25 + 4) = *((void *)v26 + 4);
  v31[v24] = v32[v24];
  uint64_t v28 = a3[9];
  v31[a3[8]] = v32[a3[8]];
  v31[v28] = v32[v28];
  return v31;
}

char *sub_10007CE1C(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000F024((uint64_t)a1, &qword_1000A4FF0);
    uint64_t v6 = sub_10000697C(&qword_1000A4FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000899F0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v61 = a3;
  long long v62 = a2;
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000893C0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v59(v9, v10, v11);
  uint64_t v13 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v14 = v13[5];
  uint64_t v15 = &v9[v14];
  uint64_t v16 = &v10[v14];
  uint64_t v60 = v12;
  int v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v18 = v17(&v9[v14], 1, v11);
  int v19 = v17(v16, 1, v11);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
LABEL_10:
    uint64_t v20 = sub_10000697C(&qword_1000A47F8);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_11;
  }
  v59(v15, v16, v11);
LABEL_11:
  uint64_t v21 = v13[6];
  uint64_t v22 = &v9[v21];
  uint64_t v23 = &v10[v21];
  int v24 = v17(&v9[v21], 1, v11);
  int v25 = v17(v23, 1, v11);
  if (!v24)
  {
    uint64_t v26 = v62;
    if (!v25)
    {
      v59(v22, v23, v11);
      goto LABEL_17;
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v22, v11);
    goto LABEL_16;
  }
  uint64_t v26 = v62;
  if (v25)
  {
LABEL_16:
    uint64_t v27 = sub_10000697C(&qword_1000A47F8);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v22, v23, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v22, 0, 1, v11);
LABEL_17:
  v9[v13[7]] = v10[v13[7]];
  v9[v13[8]] = v10[v13[8]];
  uint64_t v28 = v13[9];
  uint64_t v29 = &v9[v28];
  uint64_t v30 = &v10[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v13[10];
  uint64_t v34 = &v9[v33];
  uint64_t v35 = &v10[v33];
  uint64_t v37 = *(void *)v35;
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v13[11];
  uint64_t v39 = &v9[v38];
  uint64_t v40 = &v10[v38];
  uint64_t v42 = *(void *)v40;
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = v13[12];
  uint64_t v44 = &v9[v43];
  uint64_t v45 = &v10[v43];
  uint64_t v47 = *(void *)v45;
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = v47;
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  v9[v13[13]] = v10[v13[13]];
  v9[v13[14]] = v10[v13[14]];
  uint64_t v48 = v13[15];
  uint64_t v49 = &v9[v48];
  uint64_t v50 = &v10[v48];
  uint64_t v52 = *(void *)v50;
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = v52;
  *((void *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  v9[v13[16]] = v10[v13[16]];
  v9[v13[17]] = v10[v13[17]];
  uint64_t v53 = v61[6];
  uint64_t v54 = &a1[v53];
  long long v55 = &v26[v53];
  sub_10000F380((uint64_t)&a1[v53]);
  long long v56 = *((_OWORD *)v55 + 1);
  *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
  *((_OWORD *)v54 + 1) = v56;
  *((void *)v54 + 4) = *((void *)v55 + 4);
  uint64_t v57 = v61[8];
  a1[v61[7]] = v26[v61[7]];
  a1[v57] = v26[v57];
  a1[v61[9]] = v26[v61[9]];
  return a1;
}

uint64_t sub_10007D2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007D2E4);
}

uint64_t sub_10007D2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4B70);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for AlarmEntry();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 24);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10007D400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007D414);
}

uint64_t sub_10007D414(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000697C(&qword_1000A4B70);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for AlarmEntry();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10007D52C()
{
  sub_100080824(319, (unint64_t *)&qword_1000A5070, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AlarmEntry();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for AlarmPlaceholder()
{
  return &type metadata for AlarmPlaceholder;
}

uint64_t *sub_10007D64C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (int *)type metadata accessor for WorldClockCity();
    uint64_t v8 = (unsigned int (**)(void *, uint64_t, int *))*((void *)v7 - 1);
    if (v8[6](a2, 1, v7))
    {
      uint64_t v9 = sub_10000697C(&qword_1000A4FD0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      __dst = (void (**)(uint64_t *, void, uint64_t, int *))v8;
      uint64_t v11 = sub_1000893C0();
      uint64_t v71 = *(void *)(v11 - 8);
      Swift::String v69 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v71 + 16);
      v69(a1, a2, v11);
      *((unsigned char *)a1 + v7[5]) = *((unsigned char *)a2 + v7[5]);
      uint64_t v12 = v7[6];
      uint64_t v13 = (uint64_t *)((char *)a1 + v12);
      uint64_t v14 = (uint64_t *)((char *)a2 + v12);
      uint64_t v15 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v15;
      uint64_t v16 = v7[7];
      int v17 = (uint64_t *)((char *)a1 + v16);
      int v18 = (uint64_t *)((char *)a2 + v16);
      uint64_t v19 = v18[1];
      *int v17 = *v18;
      v17[1] = v19;
      uint64_t v20 = v7[8];
      uint64_t v21 = (uint64_t *)((char *)a1 + v20);
      uint64_t v22 = (uint64_t *)((char *)a2 + v20);
      uint64_t v23 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v23;
      uint64_t v24 = v7[9];
      int v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v69((uint64_t *)v25, (uint64_t *)v26, v11);
      v69((uint64_t *)((char *)a1 + v7[10]), (uint64_t *)((char *)a2 + v7[10]), v11);
      uint64_t v27 = v7[11];
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))((char *)a2 + v27, 1, v11))
      {
        uint64_t v30 = sub_10000697C(&qword_1000A47F8);
        memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        v69((uint64_t *)v28, (uint64_t *)v29, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v28, 0, 1, v11);
      }
      *((unsigned char *)a1 + v7[12]) = *((unsigned char *)a2 + v7[12]);
      *((unsigned char *)a1 + v7[13]) = *((unsigned char *)a2 + v7[13]);
      __dst[7](a1, 0, 1, v7);
    }
    uint64_t v31 = *(int *)(a3 + 20);
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = (int *)type metadata accessor for AlarmEntry();
    uint64_t v35 = *((void *)v34 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = sub_10000697C(&qword_1000A7A08);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      uint64_t v72 = v35;
      uint64_t v37 = sub_1000893C0();
      uint64_t v38 = *(void *)(v37 - 8);
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
      v39(v32, v33, v37);
      uint64_t v40 = v34[5];
      __dsta = &v32[v40];
      uint64_t v41 = &v33[v40];
      Swift::String v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
      if (v70(&v33[v40], 1, v37))
      {
        uint64_t v42 = sub_10000697C(&qword_1000A47F8);
        memcpy(__dsta, v41, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        v39(__dsta, v41, v37);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dsta, 0, 1, v37);
      }
      uint64_t v43 = v34[6];
      uint64_t v44 = &v32[v43];
      uint64_t v45 = &v33[v43];
      if (v70(&v33[v43], 1, v37))
      {
        uint64_t v46 = sub_10000697C(&qword_1000A47F8);
        memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        v39(v44, v45, v37);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v44, 0, 1, v37);
      }
      v32[v34[7]] = v33[v34[7]];
      v32[v34[8]] = v33[v34[8]];
      uint64_t v47 = v34[9];
      uint64_t v48 = &v32[v47];
      uint64_t v49 = &v33[v47];
      uint64_t v50 = *((void *)v49 + 1);
      *(void *)uint64_t v48 = *(void *)v49;
      *((void *)v48 + 1) = v50;
      uint64_t v51 = v34[10];
      uint64_t v52 = &v32[v51];
      uint64_t v53 = &v33[v51];
      uint64_t v54 = *((void *)v53 + 1);
      *(void *)uint64_t v52 = *(void *)v53;
      *((void *)v52 + 1) = v54;
      uint64_t v55 = v34[11];
      long long v56 = &v32[v55];
      uint64_t v57 = &v33[v55];
      uint64_t v58 = *((void *)v57 + 1);
      *(void *)long long v56 = *(void *)v57;
      *((void *)v56 + 1) = v58;
      uint64_t v59 = v34[12];
      uint64_t v60 = &v32[v59];
      uint64_t v61 = &v33[v59];
      uint64_t v62 = *((void *)v61 + 1);
      *(void *)uint64_t v60 = *(void *)v61;
      *((void *)v60 + 1) = v62;
      v32[v34[13]] = v33[v34[13]];
      v32[v34[14]] = v33[v34[14]];
      uint64_t v63 = v34[15];
      __int16 v64 = &v32[v63];
      long long v65 = &v33[v63];
      uint64_t v66 = *((void *)v65 + 1);
      *(void *)__int16 v64 = *(void *)v65;
      *((void *)v64 + 1) = v66;
      v32[v34[16]] = v33[v34[16]];
      v32[v34[17]] = v33[v34[17]];
      unsigned __int8 v67 = *(void (**)(char *, void, uint64_t, int *))(v72 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v67(v32, 0, 1, v34);
    }
  }
  return a1;
}

uint64_t sub_10007DCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for WorldClockCity();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48))(a1, 1, v4))
  {
    uint64_t v5 = sub_1000893C0();
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v7(a1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7(a1 + v4[9], v5);
    v7(a1 + v4[10], v5);
    uint64_t v8 = a1 + v4[11];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
      v7(v8, v5);
    }
  }
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t v10 = type metadata accessor for AlarmEntry();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = sub_1000893C0();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v14(v9, v12);
    uint64_t v15 = v9 + *(int *)(v10 + 20);
    uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (!v16(v15, 1, v12)) {
      v14(v15, v12);
    }
    uint64_t v17 = v9 + *(int *)(v10 + 24);
    if (!v16(v17, 1, v12)) {
      v14(v17, v12);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *sub_10007DFEC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for WorldClockCity();
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_10000697C(&qword_1000A4FD0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v70 = v7;
    __dst = a3;
    uint64_t v9 = sub_1000893C0();
    uint64_t v68 = *(void *)(v9 - 8);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
    v10(a1, a2, v9);
    a1[v6[5]] = a2[v6[5]];
    uint64_t v11 = v6[6];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = *((void *)v13 + 1);
    *(void *)uint64_t v12 = *(void *)v13;
    *((void *)v12 + 1) = v14;
    uint64_t v15 = v6[7];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    uint64_t v18 = *((void *)v17 + 1);
    *(void *)uint64_t v16 = *(void *)v17;
    *((void *)v16 + 1) = v18;
    uint64_t v19 = v6[8];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    uint64_t v23 = v6[9];
    uint64_t v24 = &a1[v23];
    int v25 = &a2[v23];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v24, v25, v9);
    v10(&a1[v6[10]], &a2[v6[10]], v9);
    uint64_t v26 = v6[11];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(&a2[v26], 1, v9))
    {
      uint64_t v29 = sub_10000697C(&qword_1000A47F8);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      v10(v27, v28, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v27, 0, 1, v9);
    }
    a1[v6[12]] = a2[v6[12]];
    a1[v6[13]] = a2[v6[13]];
    (*(void (**)(char *, void, uint64_t, int *))(v70 + 56))(a1, 0, 1, v6);
    a3 = __dst;
  }
  uint64_t v30 = a3[5];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v34 = *((void *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = sub_10000697C(&qword_1000A7A08);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    uint64_t v71 = v34;
    uint64_t v36 = sub_1000893C0();
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v38(v31, v32, v36);
    uint64_t v39 = v33[5];
    __dsta = &v31[v39];
    uint64_t v40 = &v32[v39];
    Swift::String v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    if (v69(&v32[v39], 1, v36))
    {
      uint64_t v41 = sub_10000697C(&qword_1000A47F8);
      memcpy(__dsta, v40, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      v38(__dsta, v40, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dsta, 0, 1, v36);
    }
    uint64_t v42 = v33[6];
    uint64_t v43 = &v31[v42];
    uint64_t v44 = &v32[v42];
    if (v69(&v32[v42], 1, v36))
    {
      uint64_t v45 = sub_10000697C(&qword_1000A47F8);
      memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      v38(v43, v44, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v43, 0, 1, v36);
    }
    v31[v33[7]] = v32[v33[7]];
    v31[v33[8]] = v32[v33[8]];
    uint64_t v46 = v33[9];
    uint64_t v47 = &v31[v46];
    uint64_t v48 = &v32[v46];
    uint64_t v49 = *((void *)v48 + 1);
    *(void *)uint64_t v47 = *(void *)v48;
    *((void *)v47 + 1) = v49;
    uint64_t v50 = v33[10];
    uint64_t v51 = &v31[v50];
    uint64_t v52 = &v32[v50];
    uint64_t v53 = *((void *)v52 + 1);
    *(void *)uint64_t v51 = *(void *)v52;
    *((void *)v51 + 1) = v53;
    uint64_t v54 = v33[11];
    uint64_t v55 = &v31[v54];
    long long v56 = &v32[v54];
    uint64_t v57 = *((void *)v56 + 1);
    *(void *)uint64_t v55 = *(void *)v56;
    *((void *)v55 + 1) = v57;
    uint64_t v58 = v33[12];
    uint64_t v59 = &v31[v58];
    uint64_t v60 = &v32[v58];
    uint64_t v61 = *((void *)v60 + 1);
    *(void *)uint64_t v59 = *(void *)v60;
    *((void *)v59 + 1) = v61;
    v31[v33[13]] = v32[v33[13]];
    v31[v33[14]] = v32[v33[14]];
    uint64_t v62 = v33[15];
    uint64_t v63 = &v31[v62];
    __int16 v64 = &v32[v62];
    uint64_t v65 = *((void *)v64 + 1);
    *(void *)uint64_t v63 = *(void *)v64;
    *((void *)v63 + 1) = v65;
    v31[v33[16]] = v32[v33[16]];
    v31[v33[17]] = v32[v33[17]];
    uint64_t v66 = *(void (**)(char *, void, uint64_t, int *))(v71 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66(v31, 0, 1, v33);
  }
  return a1;
}

char *sub_10007E61C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for WorldClockCity();
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_10007F300((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
      goto LABEL_7;
    }
    uint64_t v119 = a3;
    uint64_t v30 = sub_1000893C0();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v31 + 24);
    v32(a1, a2, v30);
    a1[v6[5]] = a2[v6[5]];
    uint64_t v33 = v6[6];
    uint64_t v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = *((void *)v35 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v36 = v6[7];
    uint64_t v37 = &a1[v36];
    uint64_t v38 = &a2[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    *((void *)v37 + 1) = *((void *)v38 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v39 = v6[8];
    uint64_t v40 = &a1[v39];
    uint64_t v41 = &a2[v39];
    *(void *)uint64_t v40 = *(void *)v41;
    *((void *)v40 + 1) = *((void *)v41 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v32(&a1[v6[9]], &a2[v6[9]], v30);
    v32(&a1[v6[10]], &a2[v6[10]], v30);
    uint64_t v42 = v6[11];
    uint64_t v123 = a1;
    uint64_t v43 = &a1[v42];
    uint64_t v44 = &a2[v42];
    uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    int v46 = v45(&a1[v42], 1, v30);
    int v47 = v45(v44, 1, v30);
    if (v46)
    {
      if (!v47)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v43, v44, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v43, 0, 1, v30);
LABEL_16:
        a3 = v119;
        a1 = v123;
        v123[v6[12]] = a2[v6[12]];
        v123[v6[13]] = a2[v6[13]];
        goto LABEL_17;
      }
    }
    else
    {
      if (!v47)
      {
        v32(v43, v44, v30);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v31 + 8))(v43, v30);
    }
    uint64_t v48 = sub_10000697C(&qword_1000A47F8);
    memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v29 = sub_10000697C(&qword_1000A4FD0);
    memcpy(a1, a2, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_17;
  }
  uint64_t v118 = a3;
  uint64_t v122 = v7;
  uint64_t v11 = sub_1000893C0();
  uint64_t v116 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v116 + 16);
  v12(a1, a2, v11);
  a1[v6[5]] = a2[v6[5]];
  uint64_t v13 = v6[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  uint64_t v16 = v6[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  uint64_t v19 = v6[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = *((void *)v21 + 1);
  uint64_t v22 = v6[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v23, v24, v11);
  v12(&a1[v6[10]], &a2[v6[10]], v11);
  uint64_t v25 = v6[11];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(&a2[v25], 1, v11))
  {
    uint64_t v28 = sub_10000697C(&qword_1000A47F8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v12(v26, v27, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v26, 0, 1, v11);
  }
  a1[v6[12]] = a2[v6[12]];
  a1[v6[13]] = a2[v6[13]];
  (*(void (**)(char *, void, uint64_t, int *))(v122 + 56))(a1, 0, 1, v6);
  a3 = v118;
LABEL_17:
  uint64_t v49 = *(int *)(a3 + 20);
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v52 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v53 = *((void *)v52 - 1);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, int *))(v53 + 48);
  int v55 = v54(v50, 1, v52);
  int v56 = v54(v51, 1, v52);
  if (!v55)
  {
    if (v56)
    {
      sub_10007F300((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
      goto LABEL_23;
    }
    int v124 = a1;
    uint64_t v65 = sub_1000893C0();
    uint64_t v66 = *(void *)(v65 - 8);
    uint64_t v121 = *(void (**)(char *, char *, uint64_t))(v66 + 24);
    v121(v50, v51, v65);
    uint64_t v67 = v52[5];
    uint64_t v68 = &v50[v67];
    Swift::String v69 = &v51[v67];
    uint64_t v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
    int v71 = v70(&v50[v67], 1, v65);
    int v72 = v70(v69, 1, v65);
    if (v71)
    {
      if (!v72)
      {
        (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v68, v69, v65);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v68, 0, 1, v65);
        goto LABEL_35;
      }
    }
    else
    {
      if (!v72)
      {
        v121(v68, v69, v65);
LABEL_35:
        uint64_t v94 = v52[6];
        char v95 = &v50[v94];
        uint64_t v96 = &v51[v94];
        int v97 = v70(&v50[v94], 1, v65);
        int v98 = v70(v96, 1, v65);
        if (v97)
        {
          if (!v98)
          {
            (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v95, v96, v65);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v95, 0, 1, v65);
LABEL_41:
            a1 = v124;
            v50[v52[7]] = v51[v52[7]];
            v50[v52[8]] = v51[v52[8]];
            uint64_t v100 = v52[9];
            int v101 = &v50[v100];
            uint64_t v102 = &v51[v100];
            *(void *)int v101 = *(void *)v102;
            *((void *)v101 + 1) = *((void *)v102 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v103 = v52[10];
            uint64_t v104 = &v50[v103];
            uint64_t v105 = &v51[v103];
            *(void *)uint64_t v104 = *(void *)v105;
            *((void *)v104 + 1) = *((void *)v105 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v106 = v52[11];
            int v107 = &v50[v106];
            uint64_t v108 = &v51[v106];
            *(void *)int v107 = *(void *)v108;
            *((void *)v107 + 1) = *((void *)v108 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v109 = v52[12];
            uint64_t v110 = &v50[v109];
            uint64_t v111 = &v51[v109];
            *(void *)uint64_t v110 = *(void *)v111;
            *((void *)v110 + 1) = *((void *)v111 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v50[v52[13]] = v51[v52[13]];
            v50[v52[14]] = v51[v52[14]];
            uint64_t v112 = v52[15];
            uint64_t v113 = &v50[v112];
            uint64_t v114 = &v51[v112];
            *(void *)uint64_t v113 = *(void *)v114;
            *((void *)v113 + 1) = *((void *)v114 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v50[v52[16]] = v51[v52[16]];
            v50[v52[17]] = v51[v52[17]];
            return a1;
          }
        }
        else
        {
          if (!v98)
          {
            v121(v95, v96, v65);
            goto LABEL_41;
          }
          (*(void (**)(char *, uint64_t))(v66 + 8))(v95, v65);
        }
        uint64_t v99 = sub_10000697C(&qword_1000A47F8);
        memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
        goto LABEL_41;
      }
      (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v65);
    }
    uint64_t v93 = sub_10000697C(&qword_1000A47F8);
    memcpy(v68, v69, *(void *)(*(void *)(v93 - 8) + 64));
    goto LABEL_35;
  }
  if (v56)
  {
LABEL_23:
    uint64_t v64 = sub_10000697C(&qword_1000A7A08);
    memcpy(v50, v51, *(void *)(*(void *)(v64 - 8) + 64));
    return a1;
  }
  uint64_t v120 = v53;
  uint64_t v57 = sub_1000893C0();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v59(v50, v51, v57);
  uint64_t v60 = v52[5];
  uint64_t v61 = &v50[v60];
  uint64_t v62 = &v51[v60];
  uint64_t v117 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
  if (v117(&v51[v60], 1, v57))
  {
    uint64_t v63 = sub_10000697C(&qword_1000A47F8);
    memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    v59(v61, v62, v57);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v61, 0, 1, v57);
  }
  uint64_t v73 = v52[6];
  uint64_t v74 = &v50[v73];
  uint64_t v75 = &v51[v73];
  if (v117(&v51[v73], 1, v57))
  {
    uint64_t v76 = sub_10000697C(&qword_1000A47F8);
    memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
  }
  else
  {
    v59(v74, v75, v57);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v74, 0, 1, v57);
  }
  v50[v52[7]] = v51[v52[7]];
  v50[v52[8]] = v51[v52[8]];
  uint64_t v77 = v52[9];
  unsigned __int8 v78 = &v50[v77];
  uint64_t v79 = &v51[v77];
  *(void *)unsigned __int8 v78 = *(void *)v79;
  *((void *)v78 + 1) = *((void *)v79 + 1);
  uint64_t v80 = v52[10];
  uint64_t v81 = &v50[v80];
  long long v82 = &v51[v80];
  *(void *)uint64_t v81 = *(void *)v82;
  *((void *)v81 + 1) = *((void *)v82 + 1);
  uint64_t v83 = v52[11];
  long long v84 = &v50[v83];
  uint64_t v85 = &v51[v83];
  *(void *)long long v84 = *(void *)v85;
  *((void *)v84 + 1) = *((void *)v85 + 1);
  uint64_t v86 = v52[12];
  uint64_t v87 = &v50[v86];
  uint64_t v88 = &v51[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  *((void *)v87 + 1) = *((void *)v88 + 1);
  v50[v52[13]] = v51[v52[13]];
  v50[v52[14]] = v51[v52[14]];
  uint64_t v89 = v52[15];
  long long v90 = &v50[v89];
  uint64_t v91 = &v51[v89];
  *(void *)long long v90 = *(void *)v91;
  *((void *)v90 + 1) = *((void *)v91 + 1);
  v50[v52[16]] = v51[v52[16]];
  v50[v52[17]] = v51[v52[17]];
  uint64_t v92 = *(void (**)(char *, void, uint64_t, int *))(v120 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v92(v50, 0, 1, v52);
  return a1;
}

uint64_t sub_10007F300(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *sub_10007F360(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for WorldClockCity();
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_10000697C(&qword_1000A4FD0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = sub_1000893C0();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v11(a1, a2, v9);
    a1[v6[5]] = a2[v6[5]];
    *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
    *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
    *(_OWORD *)&a1[v6[8]] = *(_OWORD *)&a2[v6[8]];
    v11(&a1[v6[9]], &a2[v6[9]], v9);
    v11(&a1[v6[10]], &a2[v6[10]], v9);
    uint64_t v12 = v6[11];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      uint64_t v15 = sub_10000697C(&qword_1000A47F8);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    a1[v6[12]] = a2[v6[12]];
    a1[v6[13]] = a2[v6[13]];
    (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v20 = *((void *)v19 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_10000697C(&qword_1000A7A08);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v34 = v20;
    uint64_t v22 = sub_1000893C0();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v24(v17, v18, v22);
    uint64_t v25 = v19[5];
    __dst = &v17[v25];
    uint64_t v26 = &v18[v25];
    uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v33(&v18[v25], 1, v22))
    {
      uint64_t v27 = sub_10000697C(&qword_1000A47F8);
      memcpy(__dst, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      v24(__dst, v26, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    uint64_t v28 = v19[6];
    uint64_t v29 = &v17[v28];
    uint64_t v30 = &v18[v28];
    if (v33(&v18[v28], 1, v22))
    {
      uint64_t v31 = sub_10000697C(&qword_1000A47F8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v24(v29, v30, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v29, 0, 1, v22);
    }
    v17[v19[7]] = v18[v19[7]];
    v17[v19[8]] = v18[v19[8]];
    *(_OWORD *)&v17[v19[9]] = *(_OWORD *)&v18[v19[9]];
    *(_OWORD *)&v17[v19[10]] = *(_OWORD *)&v18[v19[10]];
    *(_OWORD *)&v17[v19[11]] = *(_OWORD *)&v18[v19[11]];
    *(_OWORD *)&v17[v19[12]] = *(_OWORD *)&v18[v19[12]];
    v17[v19[13]] = v18[v19[13]];
    v17[v19[14]] = v18[v19[14]];
    *(_OWORD *)&v17[v19[15]] = *(_OWORD *)&v18[v19[15]];
    v17[v19[16]] = v18[v19[16]];
    v17[v19[17]] = v18[v19[17]];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

char *sub_10007F908(char *a1, char *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for WorldClockCity();
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_10007F300((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for WorldClockCity);
      goto LABEL_7;
    }
    uint64_t v19 = sub_1000893C0();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v20 + 40);
    v21(a1, a2, v19);
    a1[v6[5]] = a2[v6[5]];
    uint64_t v22 = v6[6];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = (uint64_t *)&a2[v22];
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    *(void *)uint64_t v23 = v26;
    *((void *)v23 + 1) = v25;
    swift_bridgeObjectRelease();
    uint64_t v27 = v6[7];
    uint64_t v28 = &a1[v27];
    uint64_t v29 = (uint64_t *)&a2[v27];
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    *(void *)uint64_t v28 = v31;
    *((void *)v28 + 1) = v30;
    swift_bridgeObjectRelease();
    uint64_t v32 = v6[8];
    uint64_t v33 = &a1[v32];
    uint64_t v34 = (uint64_t *)&a2[v32];
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    *(void *)uint64_t v33 = v36;
    *((void *)v33 + 1) = v35;
    swift_bridgeObjectRelease();
    v21(&a1[v6[9]], &a2[v6[9]], v19);
    v21(&a1[v6[10]], &a2[v6[10]], v19);
    uint64_t v37 = v6[11];
    uint64_t v38 = &a2[v37];
    uint64_t v104 = &a1[v37];
    uint64_t v39 = *(uint64_t (**)(void))(v20 + 48);
    int v40 = v39();
    int v41 = ((uint64_t (*)(char *, uint64_t, uint64_t))v39)(v38, 1, v19);
    if (v40)
    {
      if (!v41)
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v104, v38, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v104, 0, 1, v19);
        goto LABEL_18;
      }
      size_t v42 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
      uint64_t v43 = v104;
    }
    else
    {
      if (!v41)
      {
        v21(v104, v38, v19);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v104, v19);
      size_t v42 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
      uint64_t v43 = v104;
    }
    memcpy(v43, v38, v42);
LABEL_18:
    a1[v6[12]] = a2[v6[12]];
    a1[v6[13]] = a2[v6[13]];
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v18 = sub_10000697C(&qword_1000A4FD0);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_19;
  }
  __dst = a3;
  uint64_t v11 = sub_1000893C0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(a1, a2, v11);
  a1[v6[5]] = a2[v6[5]];
  *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  *(_OWORD *)&a1[v6[8]] = *(_OWORD *)&a2[v6[8]];
  v13(&a1[v6[9]], &a2[v6[9]], v11);
  v13(&a1[v6[10]], &a2[v6[10]], v11);
  uint64_t v14 = v6[11];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    uint64_t v17 = sub_10000697C(&qword_1000A47F8);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  a1[v6[12]] = a2[v6[12]];
  a1[v6[13]] = a2[v6[13]];
  (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  a3 = __dst;
LABEL_19:
  uint64_t v44 = a3[5];
  uint64_t v45 = &a1[v44];
  int v46 = &a2[v44];
  int v47 = (int *)type metadata accessor for AlarmEntry();
  uint64_t v48 = (void *)*((void *)v47 - 1);
  uint64_t v49 = (uint64_t (*)(unsigned char *, uint64_t, int *))v48[6];
  int v50 = v49(v45, 1, v47);
  int v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (v51)
    {
      sub_10007F300((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for AlarmEntry);
      goto LABEL_25;
    }
    uint64_t v59 = sub_1000893C0();
    uint64_t v60 = *(void *)(v59 - 8);
    __srca = *(void **)(v60 + 40);
    ((void (*)(char *, char *, uint64_t))__srca)(v45, v46, v59);
    uint64_t v61 = v47[5];
    uint64_t v62 = &v45[v61];
    uint64_t v63 = &v46[v61];
    uint64_t v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
    int v65 = v64(&v45[v61], 1, v59);
    int v66 = v64(v63, 1, v59);
    if (v65)
    {
      if (!v66)
      {
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v62, v63, v59);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v62, 0, 1, v59);
        goto LABEL_37;
      }
    }
    else
    {
      if (!v66)
      {
        ((void (*)(char *, char *, uint64_t))__srca)(v62, v63, v59);
LABEL_37:
        uint64_t v72 = v47[6];
        uint64_t v73 = &v45[v72];
        uint64_t v74 = &v46[v72];
        int v75 = v64(&v45[v72], 1, v59);
        int v76 = v64(v74, 1, v59);
        if (v75)
        {
          if (!v76)
          {
            (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v73, v74, v59);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v73, 0, 1, v59);
LABEL_43:
            v45[v47[7]] = v46[v47[7]];
            v45[v47[8]] = v46[v47[8]];
            uint64_t v78 = v47[9];
            uint64_t v79 = &v45[v78];
            uint64_t v80 = (uint64_t *)&v46[v78];
            uint64_t v82 = *v80;
            uint64_t v81 = v80[1];
            *uint64_t v79 = v82;
            v79[1] = v81;
            swift_bridgeObjectRelease();
            uint64_t v83 = v47[10];
            long long v84 = &v45[v83];
            uint64_t v85 = (uint64_t *)&v46[v83];
            uint64_t v87 = *v85;
            uint64_t v86 = v85[1];
            *long long v84 = v87;
            v84[1] = v86;
            swift_bridgeObjectRelease();
            uint64_t v88 = v47[11];
            uint64_t v89 = &v45[v88];
            long long v90 = (uint64_t *)&v46[v88];
            uint64_t v92 = *v90;
            uint64_t v91 = v90[1];
            *uint64_t v89 = v92;
            v89[1] = v91;
            swift_bridgeObjectRelease();
            uint64_t v93 = v47[12];
            uint64_t v94 = &v45[v93];
            char v95 = (uint64_t *)&v46[v93];
            uint64_t v97 = *v95;
            uint64_t v96 = v95[1];
            *uint64_t v94 = v97;
            v94[1] = v96;
            swift_bridgeObjectRelease();
            v45[v47[13]] = v46[v47[13]];
            v45[v47[14]] = v46[v47[14]];
            uint64_t v98 = v47[15];
            uint64_t v99 = &v45[v98];
            uint64_t v100 = (uint64_t *)&v46[v98];
            uint64_t v102 = *v100;
            uint64_t v101 = v100[1];
            *uint64_t v99 = v102;
            v99[1] = v101;
            swift_bridgeObjectRelease();
            v45[v47[16]] = v46[v47[16]];
            v45[v47[17]] = v46[v47[17]];
            return a1;
          }
        }
        else
        {
          if (!v76)
          {
            ((void (*)(char *, char *, uint64_t))__srca)(v73, v74, v59);
            goto LABEL_43;
          }
          (*(void (**)(char *, uint64_t))(v60 + 8))(v73, v59);
        }
        uint64_t v77 = sub_10000697C(&qword_1000A47F8);
        memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
        goto LABEL_43;
      }
      (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v59);
    }
    uint64_t v71 = sub_10000697C(&qword_1000A47F8);
    memcpy(v62, v63, *(void *)(*(void *)(v71 - 8) + 64));
    goto LABEL_37;
  }
  if (v51)
  {
LABEL_25:
    uint64_t v58 = sub_10000697C(&qword_1000A7A08);
    memcpy(v45, v46, *(void *)(*(void *)(v58 - 8) + 64));
    return a1;
  }
  __src = (void (**)(void *, void, uint64_t, int *))v48;
  uint64_t v52 = sub_1000893C0();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  v54(v45, v46, v52);
  uint64_t v55 = v47[5];
  __dsta = &v45[v55];
  int v56 = &v46[v55];
  uint64_t v105 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v53 + 48);
  if (v105(&v46[v55], 1, v52))
  {
    uint64_t v57 = sub_10000697C(&qword_1000A47F8);
    memcpy(__dsta, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    v54(__dsta, v56, v52);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(__dsta, 0, 1, v52);
  }
  uint64_t v67 = v47[6];
  uint64_t v68 = &v45[v67];
  Swift::String v69 = &v46[v67];
  if (v105(&v46[v67], 1, v52))
  {
    uint64_t v70 = sub_10000697C(&qword_1000A47F8);
    memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
  }
  else
  {
    v54(v68, v69, v52);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v68, 0, 1, v52);
  }
  v45[v47[7]] = v46[v47[7]];
  v45[v47[8]] = v46[v47[8]];
  *(_OWORD *)&v45[v47[9]] = *(_OWORD *)&v46[v47[9]];
  *(_OWORD *)&v45[v47[10]] = *(_OWORD *)&v46[v47[10]];
  *(_OWORD *)&v45[v47[11]] = *(_OWORD *)&v46[v47[11]];
  *(_OWORD *)&v45[v47[12]] = *(_OWORD *)&v46[v47[12]];
  v45[v47[13]] = v46[v47[13]];
  v45[v47[14]] = v46[v47[14]];
  *(_OWORD *)&v45[v47[15]] = *(_OWORD *)&v46[v47[15]];
  v45[v47[16]] = v46[v47[16]];
  v45[v47[17]] = v46[v47[17]];
  __src[7](v45, 0, 1, v47);
  return a1;
}

uint64_t sub_1000804C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000804DC);
}

uint64_t sub_1000804DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000697C(&qword_1000A4FD0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_10000697C(&qword_1000A7A08);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1000805DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000805F0);
}

uint64_t sub_1000805F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000697C(&qword_1000A4FD0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_10000697C(&qword_1000A7A08);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_1000806FC()
{
  sub_100080824(319, &qword_1000A7E08, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockCity, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F)
  {
    sub_100080824(319, (unint64_t *)&unk_1000A7E10, (uint64_t (*)(uint64_t))type metadata accessor for AlarmEntry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100080824(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_100080888(uint64_t a1)
{
  return sub_1000808D8(a1, &qword_1000A7A90, &qword_1000A7A98);
}

uint64_t sub_1000808B0(uint64_t a1)
{
  return sub_1000808D8(a1, &qword_1000A7AA0, &qword_1000A7AB0);
}

uint64_t sub_1000808D8(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100080954()
{
  unint64_t result = qword_1000A7E40;
  if (!qword_1000A7E40)
  {
    sub_10000B798(&qword_1000A7E48);
    sub_10001845C(&qword_1000A7AC8, &qword_1000A7AB8);
    sub_100081AC8(&qword_1000A7088, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7E40);
  }
  return result;
}

uint64_t sub_100080A24()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100080A84()
{
  unint64_t result = qword_1000A7E50;
  if (!qword_1000A7E50)
  {
    sub_10000B798(&qword_1000A7E58);
    sub_10001845C(&qword_1000A7B40, &qword_1000A7B30);
    sub_10001845C(&qword_1000A7B48, &qword_1000A7B20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7E50);
  }
  return result;
}

uint64_t sub_100080B44()
{
  return sub_10001845C(&qword_1000A7B48, &qword_1000A7B20);
}

uint64_t sub_100080B80()
{
  return sub_10001845C(&qword_1000A7B40, &qword_1000A7B30);
}

uint64_t sub_100080BBC()
{
  return sub_10001845C(&qword_1000A7E60, &qword_1000A7E68);
}

unint64_t sub_100080BFC()
{
  unint64_t result = qword_1000A7E70;
  if (!qword_1000A7E70)
  {
    sub_10000B798(&qword_1000A7B58);
    sub_10008198C(&qword_1000A7B68, &qword_1000A7B60, &qword_1000A6270, &qword_1000A6278);
    sub_100081AC8(&qword_1000A7088, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7E70);
  }
  return result;
}

uint64_t sub_100080CC8()
{
  return sub_10001845C(&qword_1000A7E78, &qword_1000A7E80);
}

unint64_t sub_100080D08()
{
  unint64_t result = qword_1000A7E88;
  if (!qword_1000A7E88)
  {
    sub_10000B798(&qword_1000A7B90);
    sub_100080DA8();
    sub_10001845C(&qword_1000A60C0, &qword_1000A60C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7E88);
  }
  return result;
}

unint64_t sub_100080DA8()
{
  unint64_t result = qword_1000A7E90;
  if (!qword_1000A7E90)
  {
    sub_10000B798(&qword_1000A7B88);
    sub_100080E48();
    sub_10001845C(&qword_1000A7228, &qword_1000A7230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7E90);
  }
  return result;
}

unint64_t sub_100080E48()
{
  unint64_t result = qword_1000A7E98;
  if (!qword_1000A7E98)
  {
    sub_10000B798(&qword_1000A7B80);
    sub_100080EE8();
    sub_10001845C(&qword_1000A6270, &qword_1000A6278);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7E98);
  }
  return result;
}

unint64_t sub_100080EE8()
{
  unint64_t result = qword_1000A7EA0;
  if (!qword_1000A7EA0)
  {
    sub_10000B798(&qword_1000A7B78);
    sub_10001845C(&qword_1000A7EA8, &qword_1000A7B70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7EA0);
  }
  return result;
}

uint64_t sub_100080F8C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AlarmSmallWidgetView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v12 = *(void *)(v1 + 64);
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v0 + v3, v4);
  uint64_t v7 = type metadata accessor for AlarmEntry();
  uint64_t v8 = v0 + v3 + *(int *)(v7 + 20);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v9(v8, 1, v4)) {
    v6(v8, v4);
  }
  uint64_t v10 = v0 + v3 + *(int *)(v7 + 24);
  if (!v9(v10, 1, v4)) {
    v6(v10, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v12, v2 | 7);
}

void *sub_100081178@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for AlarmSmallWidgetView(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10007227C(v4, a1);
}

unint64_t sub_1000811E8()
{
  unint64_t result = qword_1000A7ED8;
  if (!qword_1000A7ED8)
  {
    sub_10000B798(&qword_1000A7EC8);
    sub_100081288();
    sub_10001845C(&qword_1000A73E8, &qword_1000A73D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7ED8);
  }
  return result;
}

unint64_t sub_100081288()
{
  unint64_t result = qword_1000A7EE0;
  if (!qword_1000A7EE0)
  {
    sub_10000B798(&qword_1000A7EE8);
    sub_100081320(&qword_1000A7EF0, &qword_1000A7EF8, (void (*)(void))sub_1000813A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7EE0);
  }
  return result;
}

uint64_t sub_100081320(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000813A0()
{
  unint64_t result = qword_1000A7F00;
  if (!qword_1000A7F00)
  {
    sub_10000B798(&qword_1000A7F08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7F00);
  }
  return result;
}

uint64_t sub_10008140C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    sub_10005D5A0(a1, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  else
  {
    return sub_100081470(a1, a2, a3);
  }
}

uint64_t sub_100081470(uint64_t a1, uint64_t a2, char a3)
{
  sub_10005D5A0(a1, a2, a3 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000814AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    sub_10000B7E0(a1, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return sub_100081510(a1, a2, a3);
  }
}

uint64_t sub_100081510(uint64_t a1, uint64_t a2, char a3)
{
  sub_10000B7E0(a1, a2, a3 & 1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10008154C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  char v7 = *(unsigned char *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 248);
  uint64_t v11 = *(void *)(a1 + 240);
  char v9 = *(unsigned char *)(a1 + 256);
  uint64_t v13 = *(void *)(a1 + 312);
  uint64_t v14 = *(void *)(a1 + 304);
  char v12 = *(unsigned char *)(a1 + 320);
  sub_10005D5A0(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  swift_bridgeObjectRetain();
  sub_10005D5A0(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_10005D5A0(v5, v6, v7);
  swift_bridgeObjectRetain();
  sub_10005D5A0(v11, v10, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10005D5A0(v14, v13, v12);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100081698(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  char v7 = *(unsigned char *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 248);
  uint64_t v11 = *(void *)(a1 + 240);
  char v9 = *(unsigned char *)(a1 + 256);
  uint64_t v13 = *(void *)(a1 + 312);
  uint64_t v14 = *(void *)(a1 + 304);
  char v12 = *(unsigned char *)(a1 + 320);
  sub_10000B7E0(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  swift_bridgeObjectRelease();
  sub_10000B7E0(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_10000B7E0(v5, v6, v7);
  swift_bridgeObjectRelease();
  sub_10000B7E0(v11, v10, v9);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000B7E0(v14, v13, v12);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000817E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  sub_10005D5A0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_10005D5A0(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100081858(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  sub_10000B7E0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_10000B7E0(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1000818CC()
{
  unint64_t result = qword_1000A7F48;
  if (!qword_1000A7F48)
  {
    sub_10000B798(&qword_1000A7F40);
    sub_10008198C(&qword_1000A7F50, &qword_1000A7F58, &qword_1000A60C0, &qword_1000A60C8);
    sub_10001845C(&qword_1000A6270, &qword_1000A6278);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7F48);
  }
  return result;
}

uint64_t sub_10008198C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B798(a2);
    sub_10001845C(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100081A28()
{
  unint64_t result = qword_1000A7FA8;
  if (!qword_1000A7FA8)
  {
    sub_10000B798(&qword_1000A7F98);
    sub_100080A84();
    sub_10001845C(&qword_1000A7E60, &qword_1000A7E68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7FA8);
  }
  return result;
}

uint64_t sub_100081AC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100081B10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  swift_retain();
  swift_retain();
  sub_10005D5A0(v2, v3, v4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100081BCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  swift_release();
  swift_release();
  sub_10000B7E0(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_100081C88(uint64_t result)
{
  *(unsigned char *)(result + 441) = 1;
  return result;
}

unint64_t sub_100081C94()
{
  unint64_t result = qword_1000A7FF8;
  if (!qword_1000A7FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A7FF8);
  }
  return result;
}

uint64_t sub_100081CE8(uint64_t result)
{
  *(unsigned char *)(result + 441) = 0;
  return result;
}

uint64_t sub_100081CF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 120);
  uint64_t v13 = *(void *)(a1 + 112);
  char v5 = *(unsigned char *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 200);
  uint64_t v24 = *(void *)(a1 + 192);
  uint64_t v21 = *(void *)(a1 + 216);
  uint64_t v22 = *(void *)(a1 + 208);
  uint64_t v19 = *(void *)(a1 + 232);
  uint64_t v20 = *(void *)(a1 + 224);
  uint64_t v17 = *(void *)(a1 + 248);
  uint64_t v18 = *(void *)(a1 + 240);
  long long v16 = *(_OWORD *)(a1 + 256);
  long long v15 = *(_OWORD *)(a1 + 272);
  long long v14 = *(_OWORD *)(a1 + 288);
  long long v10 = *(_OWORD *)(a1 + 320);
  long long v11 = *(_OWORD *)(a1 + 304);
  uint64_t v7 = *(void *)(a1 + 336);
  uint64_t v6 = *(void *)(a1 + 344);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 352);
  sub_10005D5A0(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  swift_bridgeObjectRetain();
  sub_10005D5A0(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_10005D5A0(v13, v12, v5);
  swift_bridgeObjectRetain();
  sub_100081E3C(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v7,
    v6,
    v8);
  return a1;
}

uint64_t sub_100081E3C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21)
{
  if (a21 != 255)
  {
    return sub_100081EAC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21 & 1);
  }
  return result;
}

uint64_t sub_100081EAC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_10005D5A0(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if (a21)
  {
    swift_retain();
    sub_10005D5A0(a9, a10, a11 & 1);
  }
  else
  {
    sub_10005D5A0(a13, a14, a15 & 1);
  }
  swift_bridgeObjectRetain();
  swift_retain();

  return swift_retain();
}

uint64_t sub_100081FAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 120);
  uint64_t v13 = *(void *)(a1 + 112);
  char v5 = *(unsigned char *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 200);
  uint64_t v24 = *(void *)(a1 + 192);
  uint64_t v21 = *(void *)(a1 + 216);
  uint64_t v22 = *(void *)(a1 + 208);
  uint64_t v19 = *(void *)(a1 + 232);
  uint64_t v20 = *(void *)(a1 + 224);
  uint64_t v17 = *(void *)(a1 + 248);
  uint64_t v18 = *(void *)(a1 + 240);
  long long v16 = *(_OWORD *)(a1 + 256);
  long long v15 = *(_OWORD *)(a1 + 272);
  long long v14 = *(_OWORD *)(a1 + 288);
  long long v10 = *(_OWORD *)(a1 + 320);
  long long v11 = *(_OWORD *)(a1 + 304);
  uint64_t v7 = *(void *)(a1 + 336);
  uint64_t v6 = *(void *)(a1 + 344);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 352);
  sub_10000B7E0(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  swift_bridgeObjectRelease();
  sub_10000B7E0(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_10000B7E0(v13, v12, v5);
  swift_bridgeObjectRelease();
  sub_1000820F8(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v7,
    v6,
    v8);
  return a1;
}

uint64_t sub_1000820F8(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21)
{
  if (a21 != 255)
  {
    return sub_100082168(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21 & 1);
  }
  return result;
}

uint64_t sub_100082168(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_10000B7E0(a1, a2, a3 & 1);
  swift_release();
  if (a21)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_10000B7E0(a9, a10, a11 & 1);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000B7E0(a13, a14, a15 & 1);
  }
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

double sub_100082268(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 160) = -1;
  return result;
}

uint64_t sub_10008228C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 160);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    v4);
  return a1;
}

uint64_t sub_100082300(uint64_t result)
{
  *(unsigned char *)(result + 160) = 1;
  return result;
}

uint64_t sub_10008230C(uint64_t result)
{
  *(unsigned char *)(result + 160) = 0;
  return result;
}

uint64_t sub_100082314()
{
  uint64_t v0 = sub_1000893F0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000893E0();
  uint64_t v4 = sub_1000893D0();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_1000823F0()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for WorldClockCity() + 20));
}

uint64_t type metadata accessor for WorldClockCity()
{
  uint64_t result = qword_1000ABC90;
  if (!qword_1000ABC90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100082460(char a1)
{
  uint64_t result = type metadata accessor for WorldClockCity();
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100082490())(void)
{
  return nullsub_1;
}

uint64_t sub_1000824D8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for WorldClockCity() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100082518()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for WorldClockCity() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100082558()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for WorldClockCity() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100082598@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WorldClockCity() + 36);
  uint64_t v4 = sub_1000893C0();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100082610@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WorldClockCity() + 40);
  uint64_t v4 = sub_1000893C0();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100082688@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WorldClockCity() + 44);

  return sub_100009884(v3, a1);
}

uint64_t sub_1000826CC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for WorldClockCity() + 48));
}

uint64_t sub_1000826F0(char a1)
{
  uint64_t result = type metadata accessor for WorldClockCity();
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_100082720())(void)
{
  return nullsub_1;
}

uint64_t sub_100082768()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for WorldClockCity() + 52));
}

uint64_t sub_10008278C(char a1)
{
  uint64_t result = type metadata accessor for WorldClockCity();
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_1000827BC())(void)
{
  return nullsub_1;
}

void *sub_100082804()
{
  return &unk_10009ABF0;
}

uint64_t sub_100082810()
{
  return 11565;
}

void *sub_10008281C()
{
  return &unk_10009AC00;
}

uint64_t sub_100082828()
{
  return 0;
}

BOOL sub_100082834()
{
  uint64_t v1 = type metadata accessor for WorldClockCity();
  __chkstk_darwin(v1);
  uint64_t v88 = (uint64_t)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v86 = (uint64_t)&v70 - v4;
  __chkstk_darwin(v5);
  uint64_t v81 = (uint64_t)&v70 - v6;
  __chkstk_darwin(v7);
  uint64_t v80 = (uint64_t)&v70 - v8;
  uint64_t v9 = sub_1000893C0();
  __chkstk_darwin(v9);
  uint64_t v87 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  long long v90 = (char *)&v70 - v12;
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  uint64_t v82 = (char *)&v70 - v15;
  __chkstk_darwin(v16);
  uint64_t v79 = (char *)&v70 - v17;
  __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v70 - v21;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v70 - v24;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v70 - v27;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v70 - v30;
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v70 - v33;
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v70 - v36;
  __chkstk_darwin(v38);
  if ((*(unsigned char *)(v0 + *(int *)(v1 + 48)) & 1) == 0)
  {
    uint64_t v71 = v42;
    uint64_t v72 = v41;
    uint64_t v78 = v43;
    uint64_t v45 = v0;
    uint64_t v83 = (uint64_t)&v70 - v40;
    uint64_t v89 = (char *)v39;
    sub_10002E938(-2, (uint64_t)&v70 - v40);
    sub_10002E938(-1, (uint64_t)v37);
    BOOL v77 = 1;
    long long v84 = v34;
    sub_10002E938(1, (uint64_t)v34);
    int v76 = v31;
    sub_10002E938(2, (uint64_t)v31);
    uint64_t v46 = v1;
    uint64_t v47 = v72;
    sub_10002E938(-2, (uint64_t)v28);
    sub_10002E938(-1, (uint64_t)v25);
    uint64_t v85 = v22;
    sub_10002E938(1, (uint64_t)v22);
    sub_10002E938(2, (uint64_t)v89);
    uint64_t v74 = v28;
    BOOL v48 = sub_100082FCC(v83, (uint64_t)v28, v0);
    uint64_t v49 = v80;
    sub_10000FDD0(v45, v80);
    int v50 = *(void (**)(uint64_t, char *, uint64_t))(v47 + 16);
    uint64_t v73 = v37;
    v50(v78, v37, v9);
    uint64_t v51 = (uint64_t)v79;
    int v75 = v25;
    uint64_t v70 = v50;
    v50((uint64_t)v79, v25, v9);
    uint64_t v52 = v45;
    uint64_t v53 = v78;
    if (!v48) {
      BOOL v77 = sub_100082FCC(v78, v51, v49);
    }
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v54(v51, v9);
    v54(v53, v9);
    sub_100083200(v49);
    uint64_t v55 = v81;
    sub_10000FDD0(v52, v81);
    uint64_t v56 = (uint64_t)v82;
    if (v77)
    {
      sub_100083200(v55);
      uint64_t v57 = v86;
      sub_10000FDD0(v52, v86);
      uint64_t v58 = v70;
      v70(v56, v84, v9);
      uint64_t v59 = v71;
      v58(v71, v85, v9);
      uint64_t v60 = (uint64_t)v87;
    }
    else
    {
      LODWORD(v80) = sub_100082FCC(v55 + *(int *)(v46 + 36), v55 + *(int *)(v46 + 40), v55);
      sub_100083200(v55);
      uint64_t v57 = v86;
      sub_10000FDD0(v52, v86);
      uint64_t v58 = v70;
      v70(v56, v84, v9);
      uint64_t v59 = v71;
      v58(v71, v85, v9);
      uint64_t v60 = (uint64_t)v87;
      if ((v80 & 1) == 0)
      {
        LODWORD(v81) = sub_100082FCC(v56, v59, v57);
        v54(v59, v9);
        v54(v56, v9);
        sub_100083200(v57);
        uint64_t v67 = v52;
        uint64_t v62 = v88;
        sub_10000FDD0(v67, v88);
        uint64_t v68 = (uint64_t)v90;
        v58((uint64_t)v90, v76, v9);
        v58(v60, v89, v9);
        BOOL v44 = (v81 & 1) != 0 || sub_100082FCC(v68, v60, v62);
        uint64_t v64 = (uint64_t)v89;
        int v65 = v85;
        int v66 = v75;
        uint64_t v63 = v76;
        goto LABEL_13;
      }
    }
    v54(v59, v9);
    v54(v56, v9);
    sub_100083200(v57);
    uint64_t v61 = v52;
    uint64_t v62 = v88;
    sub_10000FDD0(v61, v88);
    uint64_t v63 = v76;
    v58((uint64_t)v90, v76, v9);
    uint64_t v64 = (uint64_t)v89;
    v58(v60, v89, v9);
    BOOL v44 = 1;
    int v65 = v85;
    int v66 = v75;
LABEL_13:
    v54(v60, v9);
    v54((uint64_t)v90, v9);
    sub_100083200(v62);
    v54(v64, v9);
    v54((uint64_t)v65, v9);
    v54((uint64_t)v66, v9);
    v54((uint64_t)v74, v9);
    v54((uint64_t)v63, v9);
    v54((uint64_t)v84, v9);
    v54((uint64_t)v73, v9);
    v54(v83, v9);
    return v44;
  }
  return 1;
}

BOOL sub_100082FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v5 = sub_1000893C0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v25 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v23 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = sub_100089390();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v18(v16, a1, v5);
  uint64_t v26 = a3;
  v18(v13, a3, v5);
  if (v17) {
    BOOL v19 = sub_100089390() == -1;
  }
  else {
    BOOL v19 = 1;
  }
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v13, v5);
  v20(v16, v5);
  v18(v10, v24, v5);
  uint64_t v21 = v25;
  v18(v25, v26, v5);
  if (v19) {
    BOOL v19 = sub_100089390() == 1;
  }
  v20(v21, v5);
  v20(v10, v5);
  return v19;
}

uint64_t sub_100083200(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WorldClockCity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008325C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100089520();
  uint64_t v39 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_1000893C0();
  uint64_t v5 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v34 - v9;
  __chkstk_darwin(v11);
  uint64_t v40 = (char *)v34 - v12;
  uint64_t v13 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100089580();
  uint64_t v16 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v34 - v20;
  uint64_t v22 = type metadata accessor for WorldClockCity();
  if (*(unsigned char *)(v1 + *(int *)(v22 + 48)) == 1)
  {
    uint64_t v43 = 11565;
    unint64_t v44 = 0xE200000000000000;
LABEL_7:
    sub_100032F54();
    return sub_100089E40();
  }
  if (*(unsigned char *)(v1 + *(int *)(v22 + 52)) == 1)
  {
LABEL_6:
    uint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    goto LABEL_7;
  }
  uint64_t v38 = v21;
  sub_100089530();
  uint64_t v23 = v42;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v42) == 1)
  {
    sub_10000F024((uint64_t)v15, qword_1000A4BF8);
    goto LABEL_6;
  }
  uint64_t v36 = v2;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v38, v15, v23);
  uint64_t v26 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v1, v41);
  sub_1000893B0();
  uint64_t v37 = sub_100089540();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v7, v26);
  sub_100089570();
  sub_1000893B0();
  uint64_t v28 = sub_100089540();
  uint64_t v35 = v27;
  v27(v7, v26);
  v34[0] = *(void *)(v16 + 8);
  v34[1] = v16 + 8;
  ((void (*)(char *, uint64_t))v34[0])(v18, v42);
  if (__OFSUB__(v37, v28))
  {
    __break(1u);
  }
  else
  {
    sub_100089340();
    uint64_t v29 = v35;
    v35(v10, v41);
    sub_100089500();
    sub_1000894B0();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v31 = v36;
    v30(v4, v36);
    sub_100089500();
    sub_1000894B0();
    v30(v4, v31);
    uint64_t v28 = sub_100089390();
    uint64_t v32 = v41;
    v29(v7, v41);
    v29(v10, v32);
    if (v28 == -1)
    {
      sub_100089990();
      uint64_t v24 = sub_100089E20();
      v29(v40, v32);
      ((void (*)(char *, uint64_t))v34[0])(v38, v42);
      return v24;
    }
    uint64_t v33 = v42;
    if (!v28 || v28 == 1)
    {
      sub_100089990();
      uint64_t v24 = sub_100089E20();
      v29(v40, v32);
      ((void (*)(char *, uint64_t))v34[0])(v38, v33);
      return v24;
    }
  }
  type metadata accessor for ComparisonResult();
  uint64_t v43 = v28;
  uint64_t result = sub_10008A660();
  __break(1u);
  return result;
}

uint64_t sub_100083900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WorldClockCity();
  sub_100089530();
  uint64_t v5 = sub_100089580();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  }
  sub_100089560();
  return sub_10000F024((uint64_t)v4, qword_1000A4BF8);
}

void sub_100083A28(char a1)
{
  uint64_t v3 = sub_1000893C0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100089580();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = type metadata accessor for WorldClockCity();
  if ((*(unsigned char *)(v1 + *(int *)(v17 + 48)) & 1) == 0 && (*(unsigned char *)(v1 + *(int *)(v17 + 52)) & 1) == 0)
  {
    sub_100089530();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_10000F024((uint64_t)v9, qword_1000A4BF8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
      id v25 = self;
      sub_1000893B0();
      Class isa = sub_100089360().super.isa;
      uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
      v18(v6, v3);
      sub_1000893B0();
      uint64_t v27 = sub_100089540();
      v18(v6, v3);
      sub_100089570();
      sub_1000893B0();
      uint64_t v19 = sub_100089540();
      v18(v6, v3);
      uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
      v20(v13, v10);
      if (__OFSUB__(v27, v19))
      {
        __break(1u);
      }
      else
      {
        uint64_t v21 = a1 & 1;
        Class v22 = isa;
        id v23 = [v25 dayAndTimeZoneOffsetStringFromDate:isa withTimeZoneOffset:v27 - v19 timeZoneAbbreviation:0 spaceBeforeTimeDesignator:0 hoursOnly:1 numericOnly:v21];

        if (v23)
        {
          sub_10008A400();

          v20(v16, v10);
          return;
        }
      }
      __break(1u);
    }
  }
}

uint64_t sub_100083D9C()
{
  uint64_t v0 = sub_1000893C0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000697C(qword_1000A4BF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100089580();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - v12;
  type metadata accessor for WorldClockCity();
  sub_100089530();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000F024((uint64_t)v6, qword_1000A4BF8);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  sub_1000893B0();
  uint64_t v15 = sub_100089540();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v1 + 8);
  v16(v3, v0);
  sub_100089570();
  sub_1000893B0();
  uint64_t v17 = sub_100089540();
  v16(v3, v0);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t result = v18(v10, v7);
  BOOL v19 = __OFSUB__(v15, v17);
  uint64_t v20 = v15 - v17;
  if (v19)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (v20 < 0)
  {
    BOOL v19 = __OFSUB__(0, v20);
    uint64_t v20 = -v20;
    if (v19) {
      goto LABEL_9;
    }
  }
  v18(v13, v7);
  return v20 < 3600;
}

BOOL sub_100084064()
{
  sub_100083A28(1);
  uint64_t v0 = sub_10008A430();
  swift_bridgeObjectRelease();
  return v0 > 0;
}

uint64_t sub_1000840A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for WorldClockCity();
  uint64_t v3 = a1 + v2[11];
  sub_1000893B0();
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, v3, v4);
  v6(a1 + v2[9], v3, v4);
  v6(a1 + v2[10], v3, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  *(unsigned char *)(a1 + v2[5]) = 0;
  uint64_t v8 = (void *)(a1 + v2[6]);
  void *v8 = 11565;
  v8[1] = 0xE200000000000000;
  uint64_t v9 = (void *)(a1 + v2[7]);
  void *v9 = 11565;
  v9[1] = 0xE200000000000000;
  uint64_t v10 = (void *)(a1 + v2[8]);
  void *v10 = 11565;
  v10[1] = 0xE200000000000000;
  *(unsigned char *)(a1 + v2[12]) = 1;
  *(unsigned char *)(a1 + v2[13]) = 0;
  return result;
}

uint64_t sub_1000841F0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  uint64_t v20 = sub_1000893C0();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32);
  v21(a9, a1, v20);
  Class v22 = (int *)type metadata accessor for WorldClockCity();
  *(unsigned char *)(a9 + v22[5]) = a2;
  id v23 = (void *)(a9 + v22[6]);
  void *v23 = a3;
  v23[1] = a4;
  uint64_t v24 = (void *)(a9 + v22[7]);
  *uint64_t v24 = a5;
  v24[1] = a6;
  id v25 = (void *)(a9 + v22[8]);
  *id v25 = a7;
  v25[1] = a8;
  v21(a9 + v22[9], a10, v20);
  v21(a9 + v22[10], a11, v20);
  uint64_t result = sub_100006914(a12, a9 + v22[11]);
  *(unsigned char *)(a9 + v22[12]) = a13;
  *(unsigned char *)(a9 + v22[13]) = a14;
  return result;
}

uint64_t sub_10008435C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v8 = sub_1000893C0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v15 = self;
  uint64_t v16 = &AlarmDataProvider;
  id v17 = [v15 widgetOverrideDate];
  if (!v17)
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v20(v7, 1, 1, v8);
    goto LABEL_5;
  }
  uint64_t v18 = v17;
  uint64_t v32 = v4;
  sub_100089380();

  BOOL v19 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v19(v7, v11, v8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v20(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    uint64_t v4 = v32;
    uint64_t v16 = &AlarmDataProvider;
LABEL_5:
    sub_1000893B0();
    sub_10000F024((uint64_t)v7, &qword_1000A47F8);
    goto LABEL_7;
  }
  v19(v14, v7, v8);
  uint64_t v4 = v32;
  uint64_t v16 = &AlarmDataProvider;
LABEL_7:
  id v21 = [v15 v16[23].base_props];
  if (v21)
  {
    Class v22 = v21;
    sub_100089380();

    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v4, v11, v8);
    char v23 = 1;
    v20(v4, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) != 1) {
      goto LABEL_12;
    }
  }
  else
  {
    v20(v4, 1, 1, v8);
  }
  char v23 = 0;
LABEL_12:
  sub_10000F024((uint64_t)v4, &qword_1000A47F8);
  uint64_t v24 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 16);
  v24(a1, v14, v8);
  id v25 = (int *)type metadata accessor for WorldClockCity();
  v24(a1 + v25[9], v14, v8);
  v24(a1 + v25[10], v14, v8);
  uint64_t v26 = a1 + v25[11];
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v26, v14, v8);
  uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v20)(v26, 0, 1, v8);
  *(unsigned char *)(a1 + v25[5]) = v23;
  uint64_t v28 = (void *)(a1 + v25[6]);
  *uint64_t v28 = 0;
  v28[1] = 0xE000000000000000;
  uint64_t v29 = (void *)(a1 + v25[7]);
  void *v29 = 0;
  v29[1] = 0xE000000000000000;
  uint64_t v30 = (void *)(a1 + v25[8]);
  void *v30 = 0;
  v30[1] = 0xE000000000000000;
  *(unsigned char *)(a1 + v25[12]) = 0;
  *(unsigned char *)(a1 + v25[13]) = 1;
  return result;
}

uint64_t sub_100084778()
{
  uint64_t v1 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = 0;
  v19[1] = 0xE000000000000000;
  sub_10008A5C0(148);
  v20._countAndFlagsBits = 0xD000000000000021;
  v20._object = (void *)0x800000010008BF40;
  sub_10008A440(v20);
  uint64_t v4 = (int *)type metadata accessor for WorldClockCity();
  uint64_t v5 = (uint64_t *)(v0 + v4[6]);
  uint64_t v6 = *v5;
  uint64_t v7 = (void *)v5[1];
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v6;
  v21._object = v7;
  sub_10008A440(v21);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x800000010008BF70;
  v22._countAndFlagsBits = 0xD000000000000010;
  sub_10008A440(v22);
  uint64_t v8 = (uint64_t *)(v0 + v4[7]);
  uint64_t v9 = *v8;
  uint64_t v10 = (void *)v8[1];
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = v9;
  v23._object = v10;
  sub_10008A440(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x6F7A656D6974202CLL;
  v24._object = (void *)0xEB000000003A656ELL;
  sub_10008A440(v24);
  uint64_t v11 = (uint64_t *)(v0 + v4[8]);
  uint64_t v12 = *v11;
  uint64_t v13 = (void *)v11[1];
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = v12;
  v25._object = v13;
  sub_10008A440(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x7369726E7573202CLL;
  v26._object = (void *)0xEF203A6574614465;
  sub_10008A440(v26);
  sub_1000893C0();
  sub_100086528(&qword_1000A4810, (void (*)(uint64_t))&type metadata accessor for Date);
  v27._countAndFlagsBits = sub_10008A640();
  sub_10008A440(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x7465736E7573202CLL;
  v28._object = (void *)0xEE00203A65746144;
  sub_10008A440(v28);
  v29._countAndFlagsBits = sub_10008A640();
  sub_10008A440(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x694D7478656E202CLL;
  v30._object = (void *)0xEF3A746867696E64;
  sub_10008A440(v30);
  sub_100009884(v0 + v4[11], (uint64_t)v3);
  v31._countAndFlagsBits = sub_10008A410();
  sub_10008A440(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0xD000000000000011;
  v32._object = (void *)0x800000010008BF90;
  sub_10008A440(v32);
  if (*(unsigned char *)(v0 + v4[12])) {
    v14._countAndFlagsBits = 1702195828;
  }
  else {
    v14._countAndFlagsBits = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + v4[12])) {
    uint64_t v15 = (void *)0xE400000000000000;
  }
  else {
    uint64_t v15 = (void *)0xE500000000000000;
  }
  v14._object = v15;
  sub_10008A440(v14);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x6E616C427369202CLL;
  v33._object = (void *)0xEB00000000203A6BLL;
  sub_10008A440(v33);
  if (*(unsigned char *)(v0 + v4[13])) {
    v16._countAndFlagsBits = 1702195828;
  }
  else {
    v16._countAndFlagsBits = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + v4[13])) {
    id v17 = (void *)0xE400000000000000;
  }
  else {
    id v17 = (void *)0xE500000000000000;
  }
  v16._object = v17;
  sub_10008A440(v16);
  swift_bridgeObjectRelease();
  return v19[0];
}

void sub_100084AD8()
{
  uint64_t v1 = sub_1000893C0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100086528(&qword_1000A8038, (void (*)(uint64_t))&type metadata accessor for Date);
  sub_10008A390();
  uint64_t v8 = (int *)type metadata accessor for WorldClockCity();
  sub_10008A690(*(unsigned char *)(v0 + v8[5]));
  swift_bridgeObjectRetain();
  sub_10008A420();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10008A420();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10008A420();
  swift_bridgeObjectRelease();
  sub_10008A390();
  sub_10008A390();
  sub_100009884(v0 + v8[11], (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_10008A690(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_10008A690(1u);
    sub_10008A390();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  sub_10008A690(*(unsigned char *)(v0 + v8[12]));
  sub_10008A690(*(unsigned char *)(v0 + v8[13]));
}

Swift::Int sub_100084DB8()
{
  return sub_10008A6A0();
}

uint64_t sub_100084DF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1000893F0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000893E0();
  uint64_t v6 = sub_1000893D0();
  uint64_t v8 = v7;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v8;
  return result;
}

Swift::Int sub_100084ED8()
{
  return sub_10008A6A0();
}

uint64_t sub_100084F14()
{
  return sub_100084778();
}

void *sub_100084F30@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100084F40(void *a1@<X8>)
{
  *a1 = *v1;
}

void type metadata accessor for ComparisonResult()
{
  if (!qword_1000A80E0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1000A80E0);
    }
  }
}

uint64_t sub_100084FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000697C(&qword_1000A80E8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000697C(&qword_1000A47F8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  Swift::String v16 = (char *)&v43 - v15;
  __chkstk_darwin(v17);
  BOOL v19 = (char *)&v43 - v18;
  if ((sub_100089370() & 1) == 0) {
    goto LABEL_3;
  }
  uint64_t v46 = v5;
  uint64_t v20 = type metadata accessor for WorldClockCity();
  if (*(unsigned __int8 *)(a1 + *(int *)(v20 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v20 + 20))) {
    goto LABEL_3;
  }
  Swift::String v23 = (int *)v20;
  uint64_t v24 = *(int *)(v20 + 24);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a1 + v24 + 8);
  Swift::String v27 = (void *)(a2 + v24);
  BOOL v28 = v25 == *v27 && v26 == v27[1];
  if (v28 || (v29 = sub_10008A650(), char v21 = 0, (v29 & 1) != 0))
  {
    if ((uint64_t v30 = v23[7],
          uint64_t v31 = *(void *)(a1 + v30),
          uint64_t v32 = *(void *)(a1 + v30 + 8),
          Swift::String v33 = (void *)(a2 + v30),
          v31 == *v33)
      && v32 == v33[1]
      || (v34 = sub_10008A650(), char v21 = 0, (v34 & 1) != 0))
    {
      if ((uint64_t v35 = v23[8],
            uint64_t v36 = *(void *)(a1 + v35),
            uint64_t v37 = *(void *)(a1 + v35 + 8),
            uint64_t v38 = (void *)(a2 + v35),
            v36 == *v38)
        && v37 == v38[1]
        || (v39 = sub_10008A650(), char v21 = 0, (v39 & 1) != 0))
      {
        if ((sub_100089370() & 1) == 0 || (sub_100089370() & 1) == 0) {
          goto LABEL_3;
        }
        sub_100009884(a1 + v23[11], (uint64_t)v19);
        sub_100009884(a2 + v23[11], (uint64_t)v16);
        uint64_t v40 = (uint64_t)&v10[*(int *)(v8 + 48)];
        sub_100009884((uint64_t)v19, (uint64_t)v10);
        uint64_t v45 = v40;
        sub_100009884((uint64_t)v16, v40);
        unint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
        if (v44((uint64_t)v10, 1, v4) == 1)
        {
          sub_10000F024((uint64_t)v16, &qword_1000A47F8);
          sub_10000F024((uint64_t)v19, &qword_1000A47F8);
          if (v44(v45, 1, v4) == 1)
          {
            sub_10000F024((uint64_t)v10, &qword_1000A47F8);
            goto LABEL_25;
          }
        }
        else
        {
          sub_100009884((uint64_t)v10, (uint64_t)v13);
          if (v44(v45, 1, v4) != 1)
          {
            uint64_t v41 = v46;
            (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v7, v45, v4);
            sub_100086528(&qword_1000A80F0, (void (*)(uint64_t))&type metadata accessor for Date);
            LODWORD(v45) = sub_10008A3C0();
            uint64_t v42 = *(void (**)(char *, uint64_t))(v41 + 8);
            v42(v7, v4);
            sub_10000F024((uint64_t)v16, &qword_1000A47F8);
            sub_10000F024((uint64_t)v19, &qword_1000A47F8);
            v42(v13, v4);
            sub_10000F024((uint64_t)v10, &qword_1000A47F8);
            if (v45)
            {
LABEL_25:
              if (*(unsigned __int8 *)(a1 + v23[12]) == *(unsigned __int8 *)(a2 + v23[12]))
              {
                char v21 = *(unsigned char *)(a1 + v23[13]) ^ *(unsigned char *)(a2 + v23[13]) ^ 1;
                return v21 & 1;
              }
            }
LABEL_3:
            char v21 = 0;
            return v21 & 1;
          }
          sub_10000F024((uint64_t)v16, &qword_1000A47F8);
          sub_10000F024((uint64_t)v19, &qword_1000A47F8);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v4);
        }
        sub_10000F024((uint64_t)v10, &qword_1000A80E8);
        goto LABEL_3;
      }
    }
  }
  return v21 & 1;
}

void *sub_100085484()
{
  return &protocol witness table for String;
}

uint64_t sub_100085490()
{
  return sub_100086528(&qword_1000A79B8, (void (*)(uint64_t))type metadata accessor for WorldClockCity);
}

char *sub_1000854D8(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000893C0();
    uint64_t v31 = *(void *)(v7 - 8);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = &a1[v13];
    Swift::String v16 = &a2[v13];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = &a1[v14];
    BOOL v19 = &a2[v14];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    uint64_t v21 = a3[9];
    Swift::String v22 = &a1[v21];
    Swift::String v23 = &a2[v21];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v22, v23, v7);
    v8(&a1[a3[10]], &a2[a3[10]], v7);
    uint64_t v24 = a3[11];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(&a2[v24], 1, v7))
    {
      uint64_t v27 = sub_10000697C(&qword_1000A47F8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      v8(v25, v26, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v25, 0, 1, v7);
    }
    uint64_t v29 = a3[13];
    a1[a3[12]] = a2[a3[12]];
    a1[v29] = a2[v29];
  }
  return a1;
}

uint64_t sub_10008572C(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1000893C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(a1 + a2[9], v4);
  v8(a1 + a2[10], v4);
  uint64_t v6 = a1 + a2[11];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  }
  return result;
}

char *sub_100085898(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(v29 + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = &a1[v13];
  uint64_t v18 = &a2[v13];
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = v19;
  uint64_t v20 = a3[9];
  uint64_t v21 = &a1[v20];
  Swift::String v22 = &a2[v20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(v21, v22, v6);
  v7(&a1[a3[10]], &a2[a3[10]], v6);
  uint64_t v23 = a3[11];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(&a2[v23], 1, v6))
  {
    uint64_t v26 = sub_10000697C(&qword_1000A47F8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    v7(v24, v25, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v24, 0, 1, v6);
  }
  uint64_t v27 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v27] = a2[v27];
  return a1;
}

uint64_t sub_100085A9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  void *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8(a1 + a3[9], a2 + a3[9], v6);
  v8(a1 + a3[10], a2 + a3[10], v6);
  uint64_t v18 = a3[11];
  uint64_t v19 = (const void *)(a2 + v18);
  uint64_t v26 = (void *)(a1 + v18);
  uint64_t v20 = *(uint64_t (**)(void))(v7 + 48);
  int v21 = v20();
  int v22 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v20)(v19, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v26, v19, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v26, 0, 1, v6);
      goto LABEL_9;
    }
    size_t v23 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v24 = v26;
  }
  else
  {
    if (!v22)
    {
      v8((uint64_t)v26, (uint64_t)v19, v6);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v26, v6);
    size_t v23 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v24 = v26;
  }
  memcpy(v24, v19, v23);
LABEL_9:
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

char *sub_100085D60(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v8(&a1[a3[9]], &a2[a3[9]], v6);
  v8(&a1[a3[10]], &a2[a3[10]], v6);
  uint64_t v11 = a3[11];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v11], 1, v6))
  {
    uint64_t v14 = sub_10000697C(&qword_1000A47F8);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v8(v12, v13, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  uint64_t v15 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v15] = a2[v15];
  return a1;
}

uint64_t sub_100085F24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  void *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v19);
  int v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  void *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  v8(a1 + a3[9], a2 + a3[9], v6);
  v8(a1 + a3[10], a2 + a3[10], v6);
  uint64_t v24 = a3[11];
  uint64_t v25 = (const void *)(a2 + v24);
  Swift::String v33 = (void *)(a1 + v24);
  uint64_t v26 = *(uint64_t (**)(void))(v7 + 48);
  int v27 = v26();
  int v28 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v26)(v25, 1, v6);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v33, v25, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v33, 0, 1, v6);
      goto LABEL_9;
    }
    size_t v29 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v30 = v33;
  }
  else
  {
    if (!v28)
    {
      v8((uint64_t)v33, (uint64_t)v25, v6);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v33, v6);
    size_t v29 = *(void *)(*(void *)(sub_10000697C(&qword_1000A47F8) - 8) + 64);
    uint64_t v30 = v33;
  }
  memcpy(v30, v25, v29);
LABEL_9:
  uint64_t v31 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v31) = *(unsigned char *)(a2 + v31);
  return a1;
}

uint64_t sub_1000861B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000861C4);
}

uint64_t sub_1000861C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000893C0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_10000697C(&qword_1000A47F8);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 44);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1000862F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008630C);
}

uint64_t sub_10008630C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000893C0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_10000697C(&qword_1000A47F8);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 44);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_100086440()
{
  sub_1000893C0();
  if (v0 <= 0x3F)
  {
    sub_10000AE44();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_100086528(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100086570@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100086578()
{
  swift_getKeyPath();
  sub_100086728();
  sub_1000895A0();
  swift_release();
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_1000865FC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100086728();
  sub_1000895A0();
  swift_release();
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_100086688()
{
  return swift_release();
}

unint64_t sub_100086728()
{
  unint64_t result = qword_1000A5258;
  if (!qword_1000A5258)
  {
    type metadata accessor for ClockWidgetEnvironmentObject();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A5258);
  }
  return result;
}

uint64_t type metadata accessor for ClockWidgetEnvironmentObject()
{
  uint64_t result = qword_1000ABDB0;
  if (!qword_1000ABDB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000867CC()
{
  return swift_release();
}

uint64_t sub_10008686C()
{
  return sub_1000895A0();
}

uint64_t sub_1000868C4()
{
  return sub_100086E34();
}

uint64_t sub_1000868DC()
{
  return sub_100089590();
}

void (*sub_10008696C(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_getKeyPath();
  v3[4] = OBJC_IVAR____TtC16WorldClockWidget28ClockWidgetEnvironmentObject___observationRegistrar;
  *uint64_t v3 = v1;
  v3[5] = sub_100086728();
  sub_1000895A0();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_1000895C0();
  swift_release();
  swift_beginAccess();
  return sub_100086A64;
}

void sub_100086A64(void **a1)
{
  uint64_t v1 = *a1;
  swift_endAccess();
  void *v1 = v1[3];
  swift_getKeyPath();
  sub_1000895B0();
  swift_release();

  free(v1);
}

uint64_t sub_100086AE0()
{
  return 2;
}

uint64_t sub_100086AE8(char a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1000895D0();
  *(unsigned char *)(v2 + 16) = a1;
  return v2;
}

uint64_t sub_100086B34(char a1)
{
  sub_1000895D0();
  *(unsigned char *)(v1 + 16) = a1;
  return v1;
}

BOOL sub_100086B70()
{
  swift_getKeyPath();
  sub_100086728();
  sub_1000895A0();
  swift_release();
  swift_beginAccess();
  return (*(unsigned char *)(v0 + 16) & 0xFB) == 0;
}

BOOL sub_100086C00()
{
  swift_getKeyPath();
  sub_100086728();
  sub_1000895A0();
  swift_release();
  swift_beginAccess();
  return *(unsigned char *)(v0 + 16) == 0;
}

uint64_t sub_100086C8C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16WorldClockWidget28ClockWidgetEnvironmentObject___observationRegistrar;
  uint64_t v2 = sub_1000895E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100086CF0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16WorldClockWidget28ClockWidgetEnvironmentObject___observationRegistrar;
  uint64_t v2 = sub_1000895E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_100086D90()
{
  return type metadata accessor for ClockWidgetEnvironmentObject();
}

uint64_t sub_100086D98()
{
  uint64_t result = sub_1000895E0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100086E34()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

id sub_100086E88()
{
  type metadata accessor for ResourceBundleClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = [self bundleForClass:ObjCClassFromMetadata];
  qword_1000ABDC8 = (uint64_t)result;
  return result;
}

uint64_t sub_100086EDC()
{
  uint64_t v0 = sub_100089600();
  sub_10002E708(v0, qword_1000AC010);
  sub_10002AD84(v0, (uint64_t)qword_1000AC010);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_1000895F0();
}

uint64_t sub_100086F84()
{
  return sub_100088C28(&qword_1000ABDD0, (uint64_t (*)(void))&type metadata accessor for ColorResource, (uint64_t)qword_1000AC010);
}

uint64_t sub_100086FBC@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABDD0, (uint64_t (*)(void))&type metadata accessor for ColorResource, (uint64_t)qword_1000AC010, a1);
}

uint64_t sub_100086FF4()
{
  uint64_t v0 = sub_100089600();
  sub_10002E708(v0, qword_1000AC028);
  sub_10002AD84(v0, (uint64_t)qword_1000AC028);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_1000895F0();
}

uint64_t sub_10008709C()
{
  return sub_100088C28(&qword_1000ABDD8, (uint64_t (*)(void))&type metadata accessor for ColorResource, (uint64_t)qword_1000AC028);
}

uint64_t sub_1000870D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABDD8, (uint64_t (*)(void))&type metadata accessor for ColorResource, (uint64_t)qword_1000AC028, a1);
}

uint64_t sub_10008710C()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC040);
  sub_10002AD84(v0, (uint64_t)qword_1000AC040);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_1000871B4()
{
  return sub_100088C28(&qword_1000ABDE0, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC040);
}

uint64_t sub_1000871EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABDE0, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC040, a1);
}

uint64_t sub_100087224()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC058);
  sub_10002AD84(v0, (uint64_t)qword_1000AC058);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_1000872CC()
{
  return sub_100088C28(&qword_1000ABDE8, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC058);
}

uint64_t sub_100087304@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABDE8, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC058, a1);
}

uint64_t sub_10008733C()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC070);
  sub_10002AD84(v0, (uint64_t)qword_1000AC070);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_1000873E4()
{
  return sub_100088C28(&qword_1000ABDF0, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC070);
}

uint64_t sub_10008741C@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABDF0, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC070, a1);
}

uint64_t sub_100087454()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC088);
  sub_10002AD84(v0, (uint64_t)qword_1000AC088);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_1000874FC()
{
  return sub_100088C28(&qword_1000ABDF8, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC088);
}

uint64_t sub_100087534@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABDF8, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC088, a1);
}

uint64_t sub_10008756C()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC0A0);
  sub_10002AD84(v0, (uint64_t)qword_1000AC0A0);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100087614()
{
  return sub_100088C28(&qword_1000ABE00, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC0A0);
}

uint64_t sub_10008764C@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE00, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC0A0, a1);
}

uint64_t sub_100087684()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC0B8);
  sub_10002AD84(v0, (uint64_t)qword_1000AC0B8);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_10008772C()
{
  return sub_100088C28(&qword_1000ABE08, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC0B8);
}

uint64_t sub_100087764@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE08, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC0B8, a1);
}

uint64_t sub_10008779C()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC0D0);
  sub_10002AD84(v0, (uint64_t)qword_1000AC0D0);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100087844()
{
  return sub_100088C28(&qword_1000ABE10, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC0D0);
}

uint64_t sub_10008787C@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE10, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC0D0, a1);
}

uint64_t sub_1000878B4()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC0E8);
  sub_10002AD84(v0, (uint64_t)qword_1000AC0E8);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_10008795C()
{
  return sub_100088C28(&qword_1000ABE18, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC0E8);
}

uint64_t sub_100087994@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE18, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC0E8, a1);
}

uint64_t sub_1000879CC()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC100);
  sub_10002AD84(v0, (uint64_t)qword_1000AC100);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100087A74()
{
  return sub_100088C28(&qword_1000ABE20, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC100);
}

uint64_t sub_100087AAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE20, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC100, a1);
}

uint64_t sub_100087AE4()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC118);
  sub_10002AD84(v0, (uint64_t)qword_1000AC118);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100087B8C()
{
  return sub_100088C28(&qword_1000ABE28, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC118);
}

uint64_t sub_100087BC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE28, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC118, a1);
}

uint64_t sub_100087BFC()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC130);
  sub_10002AD84(v0, (uint64_t)qword_1000AC130);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100087CA4()
{
  return sub_100088C28(&qword_1000ABE30, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC130);
}

uint64_t sub_100087CDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE30, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC130, a1);
}

uint64_t sub_100087D14()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC148);
  sub_10002AD84(v0, (uint64_t)qword_1000AC148);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100087DBC()
{
  return sub_100088C28(&qword_1000ABE38, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC148);
}

uint64_t sub_100087DF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE38, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC148, a1);
}

uint64_t sub_100087E2C()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC160);
  sub_10002AD84(v0, (uint64_t)qword_1000AC160);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100087ED4()
{
  return sub_100088C28(&qword_1000ABE40, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC160);
}

uint64_t sub_100087F0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE40, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC160, a1);
}

uint64_t sub_100087F44()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC178);
  sub_10002AD84(v0, (uint64_t)qword_1000AC178);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100087FEC()
{
  return sub_100088C28(&qword_1000ABE48, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC178);
}

uint64_t sub_100088024@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE48, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC178, a1);
}

uint64_t sub_10008805C()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC190);
  sub_10002AD84(v0, (uint64_t)qword_1000AC190);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100088104()
{
  return sub_100088C28(&qword_1000ABE50, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC190);
}

uint64_t sub_10008813C@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE50, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC190, a1);
}

uint64_t sub_100088174()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC1A8);
  sub_10002AD84(v0, (uint64_t)qword_1000AC1A8);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_10008821C()
{
  return sub_100088C28(&qword_1000ABE58, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC1A8);
}

uint64_t sub_100088254@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE58, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC1A8, a1);
}

uint64_t sub_10008828C()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC1C0);
  sub_10002AD84(v0, (uint64_t)qword_1000AC1C0);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100088334()
{
  return sub_100088C28(&qword_1000ABE60, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC1C0);
}

uint64_t sub_10008836C@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE60, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC1C0, a1);
}

uint64_t sub_1000883A4()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC1D8);
  sub_10002AD84(v0, (uint64_t)qword_1000AC1D8);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_10008844C()
{
  return sub_100088C28(&qword_1000ABE68, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC1D8);
}

uint64_t sub_100088484@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE68, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC1D8, a1);
}

uint64_t sub_1000884BC()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC1F0);
  sub_10002AD84(v0, (uint64_t)qword_1000AC1F0);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100088564()
{
  return sub_100088C28(&qword_1000ABE70, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC1F0);
}

uint64_t sub_10008859C@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE70, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC1F0, a1);
}

uint64_t sub_1000885D4()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC208);
  sub_10002AD84(v0, (uint64_t)qword_1000AC208);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_10008867C()
{
  return sub_100088C28(&qword_1000ABE78, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC208);
}

uint64_t sub_1000886B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE78, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC208, a1);
}

uint64_t sub_1000886EC()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC220);
  sub_10002AD84(v0, (uint64_t)qword_1000AC220);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100088794()
{
  return sub_100088C28(&qword_1000ABE80, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC220);
}

uint64_t sub_1000887CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE80, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC220, a1);
}

uint64_t sub_100088804()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC238);
  sub_10002AD84(v0, (uint64_t)qword_1000AC238);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_1000888A8()
{
  return sub_100088C28(&qword_1000ABE88, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC238);
}

uint64_t sub_1000888E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE88, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC238, a1);
}

uint64_t sub_100088918()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC250);
  sub_10002AD84(v0, (uint64_t)qword_1000AC250);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_1000889C8()
{
  return sub_100088C28(&qword_1000ABE90, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC250);
}

uint64_t sub_100088A00@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE90, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC250, a1);
}

uint64_t sub_100088A38()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC268);
  sub_10002AD84(v0, (uint64_t)qword_1000AC268);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100088AE0()
{
  return sub_100088C28(&qword_1000ABE98, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC268);
}

uint64_t sub_100088B18@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABE98, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC268, a1);
}

uint64_t sub_100088B50()
{
  uint64_t v0 = sub_100089620();
  sub_10002E708(v0, qword_1000AC280);
  sub_10002AD84(v0, (uint64_t)qword_1000AC280);
  if (qword_1000ABDC0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1000ABDC8;
  return sub_100089610();
}

uint64_t sub_100088BF0()
{
  return sub_100088C28(&qword_1000ABEA0, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC280);
}

uint64_t sub_100088C28(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return sub_10002AD84(v5, a3);
}

uint64_t sub_100088C84@<X0>(uint64_t a1@<X8>)
{
  return sub_100088CBC(&qword_1000ABEA0, (uint64_t (*)(void))&type metadata accessor for ImageResource, (uint64_t)qword_1000AC280, a1);
}

uint64_t sub_100088CBC@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_10002AD84(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t sub_100088D80()
{
  return static AppIntentInternal.sideEffect.getter();
}

uint64_t sub_100088D90()
{
  return static AppIntentInternal.shortcutsMetadata.getter();
}

uint64_t sub_100088DA0()
{
  return static AppIntentInternal.attributionBundleIdentifier.getter();
}

uint64_t sub_100088DC0()
{
  return static AppIntent.authenticationPolicy.getter();
}

uint64_t sub_100088DF0()
{
  return type metadata accessor for IntentDialog();
}

uint64_t sub_100088E00()
{
  return IntentParameter.wrappedValue.modify();
}

uint64_t sub_100088E10()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_100088E20()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t sub_100088E30()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_100088E40()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

uint64_t sub_100088E50()
{
  return type metadata accessor for IntentDescription();
}

uint64_t sub_100088E60()
{
  return IntentDescription.init(_:categoryName:searchKeywords:)();
}

uint64_t sub_100088E70()
{
  return URLRepresentableEnum.urlRepresentationParameter.getter();
}

uint64_t sub_100088E80()
{
  return DisplayRepresentation.Image.init(systemName:isTemplate:)();
}

uint64_t sub_100088E90()
{
  return type metadata accessor for DisplayRepresentation.Image();
}

uint64_t sub_100088EA0()
{
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t sub_100088EB0()
{
  return type metadata accessor for DisplayRepresentation();
}

uint64_t sub_100088EC0()
{
  return EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)();
}

uint64_t sub_100088ED0()
{
  return EnumURLRepresentation.init(_:)();
}

uint64_t sub_100088EE0()
{
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_100088EF0()
{
  return ParameterSummaryString.init(stringLiteral:)();
}

uint64_t sub_100088F20()
{
  return type metadata accessor for InputConnectionBehavior();
}

uint64_t sub_100088F40()
{
  return static PersistentlyIdentifiable.persistentIdentifier.getter();
}

uint64_t sub_100088F50()
{
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t sub_100088F60()
{
  return type metadata accessor for TypeDisplayRepresentation();
}

uint64_t sub_100088F70()
{
  return static FormatStyle<>.dateTime.getter();
}

uint64_t sub_100088F80()
{
  return DateComponents.day.setter();
}

uint64_t sub_100088F90()
{
  return DateComponents.hour.setter();
}

uint64_t sub_100088FA0()
{
  return DateComponents.year.setter();
}

uint64_t sub_100088FB0()
{
  return DateComponents.month.setter();
}

uint64_t sub_100088FC0()
{
  return DateComponents.minute.setter();
}

uint64_t sub_100088FD0()
{
  return DateComponents.second.setter();
}

uint64_t sub_100088FE0()
{
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t sub_100088FF0()
{
  return type metadata accessor for DateComponents();
}

uint64_t sub_100089000()
{
  return type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
}

uint64_t sub_100089010()
{
  return AttributeScopes.FoundationAttributes.dateField.getter();
}

uint64_t sub_100089020()
{
  return AttributeScopes.SwiftUIAttributes.textScale.getter();
}

uint64_t sub_100089030()
{
  return AttributedString.Runs.Run.subscript.getter();
}

uint64_t sub_100089040()
{
  return AttributedString.Runs.Run.range.getter();
}

uint64_t sub_100089050()
{
  return type metadata accessor for AttributedString.Runs.Run();
}

uint64_t sub_100089060()
{
  return type metadata accessor for AttributedString.Runs.Index();
}

uint64_t sub_100089070()
{
  return type metadata accessor for AttributedString.Runs();
}

uint64_t sub_100089080()
{
  return AttributedString.runs.getter();
}

uint64_t sub_100089090()
{
  return type metadata accessor for AttributedString();
}

uint64_t sub_1000890A0()
{
  return AttributedString.subscript.modify();
}

uint64_t sub_1000890B0(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  return NSLocalizedString(_:tableName:bundle:value:comment:)(_, tableName, bundle, value, comment)._countAndFlagsBits;
}

uint64_t sub_1000890C0()
{
  return AttributedSubstring.subscript.setter();
}

uint64_t sub_1000890D0()
{
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t sub_1000890E0()
{
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t sub_1000890F0()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_100089100()
{
  return type metadata accessor for LocalizedStringResource.BundleDescription();
}

uint64_t sub_100089110()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t sub_100089120()
{
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t sub_100089130()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100089140()
{
  return URL.init(string:)();
}

uint64_t sub_100089150()
{
  return type metadata accessor for URL();
}

uint64_t sub_100089160()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t sub_100089170()
{
  return Date.FormatStyle.attributed.getter();
}

uint64_t sub_100089180()
{
  return Date.FormatStyle.hour(_:)();
}

uint64_t sub_100089190()
{
  return static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.zeroBased.getter();
}

uint64_t sub_1000891A0()
{
  return type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle();
}

uint64_t sub_1000891B0()
{
  return static Date.FormatStyle.Symbol.VerbatimHour.defaultDigits(clock:hourCycle:)();
}

uint64_t sub_1000891C0()
{
  return static Date.FormatStyle.Symbol.VerbatimHour.Clock.twelveHour.getter();
}

uint64_t sub_1000891D0()
{
  return type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.Clock();
}

uint64_t sub_1000891E0()
{
  return type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour();
}

uint64_t sub_1000891F0()
{
  return static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)();
}

uint64_t sub_100089200()
{
  return static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter();
}

uint64_t sub_100089210()
{
  return type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle();
}

uint64_t sub_100089220()
{
  return type metadata accessor for Date.FormatStyle.Symbol.Hour();
}

uint64_t sub_100089230()
{
  return static Date.FormatStyle.Symbol.Minute.defaultDigits.getter();
}

uint64_t sub_100089240()
{
  return static Date.FormatStyle.Symbol.Minute.twoDigits.getter();
}

uint64_t sub_100089250()
{
  return type metadata accessor for Date.FormatStyle.Symbol.Minute();
}

uint64_t sub_100089260()
{
  return type metadata accessor for Date.FormatStyle.Symbol.DayPeriod.Width();
}

uint64_t sub_100089270()
{
  return static Date.FormatStyle.Symbol.DayPeriod.standard(_:)();
}

uint64_t sub_100089280()
{
  return type metadata accessor for Date.FormatStyle.Symbol.DayPeriod();
}

uint64_t sub_100089290()
{
  return Date.FormatStyle.minute(_:)();
}

uint64_t sub_1000892A0()
{
  return type metadata accessor for Date.FormatStyle();
}

uint64_t sub_1000892B0()
{
  return Date.FormatString.StringInterpolation.appendInterpolation(hour:)();
}

uint64_t sub_1000892C0()
{
  return Date.FormatString.StringInterpolation.appendInterpolation(minute:)();
}

uint64_t sub_1000892D0()
{
  return Date.FormatString.StringInterpolation.appendInterpolation(dayPeriod:)();
}

void sub_1000892E0(Swift::String a1)
{
}

uint64_t sub_1000892F0()
{
  return Date.FormatString.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t sub_100089300()
{
  return type metadata accessor for Date.FormatString.StringInterpolation();
}

uint64_t sub_100089310()
{
  return Date.FormatString.init(stringInterpolation:)();
}

uint64_t sub_100089320()
{
  return type metadata accessor for Date.FormatString();
}

uint64_t sub_100089330()
{
  return type metadata accessor for Date.AttributedStyle();
}

uint64_t sub_100089340()
{
  return Date.addingTimeInterval(_:)();
}

uint64_t sub_100089350()
{
  return Date.VerbatimFormatStyle.init(format:locale:timeZone:calendar:)();
}

NSDate sub_100089360()
{
  return Date._bridgeToObjectiveC()();
}

uint64_t sub_100089370()
{
  return static Date.== infix(_:_:)();
}

uint64_t sub_100089380()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100089390()
{
  return Date.compare(_:)();
}

uint64_t sub_1000893A0()
{
  return Date.formatted<A>(_:)();
}

uint64_t sub_1000893B0()
{
  return Date.init()();
}

uint64_t sub_1000893C0()
{
  return type metadata accessor for Date();
}

uint64_t sub_1000893D0()
{
  return UUID.uuidString.getter();
}

uint64_t sub_1000893E0()
{
  return UUID.init()();
}

uint64_t sub_1000893F0()
{
  return type metadata accessor for UUID();
}

uint64_t sub_100089400()
{
  return Locale.init(identifier:)();
}

uint64_t sub_100089410()
{
  return Locale.identifier.getter();
}

uint64_t sub_100089420()
{
  return static Locale.preferredLanguages.getter();
}

NSLocale sub_100089430()
{
  return Locale._bridgeToObjectiveC()();
}

uint64_t sub_100089440()
{
  return static Locale.autoupdatingCurrent.getter();
}

uint64_t sub_100089450()
{
  return static Locale.current.getter();
}

uint64_t sub_100089460()
{
  return type metadata accessor for Locale.HourCycle();
}

uint64_t sub_100089470()
{
  return Locale.hourCycle.getter();
}

uint64_t sub_100089480()
{
  return type metadata accessor for Locale();
}

uint64_t sub_100089490()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t sub_1000894A0()
{
  return Calendar.init(identifier:)();
}

uint64_t sub_1000894B0()
{
  return Calendar.startOfDay(for:)();
}

uint64_t sub_1000894C0()
{
  return Calendar.isDateInYesterday(_:)();
}

uint64_t sub_1000894D0()
{
  return static Calendar._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000894E0()
{
  return Calendar.date(from:)();
}

uint64_t sub_1000894F0()
{
  return Calendar.date(byAdding:to:wrappingComponents:)();
}

uint64_t sub_100089500()
{
  return static Calendar.current.getter();
}

uint64_t sub_100089510()
{
  return Calendar.timeZone.setter();
}

uint64_t sub_100089520()
{
  return type metadata accessor for Calendar();
}

uint64_t sub_100089530()
{
  return TimeZone.init(identifier:)();
}

uint64_t sub_100089540()
{
  return TimeZone.secondsFromGMT(for:)();
}

NSTimeZone sub_100089550()
{
  return TimeZone._bridgeToObjectiveC()();
}

uint64_t sub_100089560()
{
  return static TimeZone.autoupdatingCurrent.getter();
}

uint64_t sub_100089570()
{
  return static TimeZone.current.getter();
}

uint64_t sub_100089580()
{
  return type metadata accessor for TimeZone();
}

uint64_t sub_100089590()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t sub_1000895A0()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_1000895B0()
{
  return ObservationRegistrar.didSet<A, B>(_:keyPath:)();
}

uint64_t sub_1000895C0()
{
  return ObservationRegistrar.willSet<A, B>(_:keyPath:)();
}

uint64_t sub_1000895D0()
{
  return ObservationRegistrar.init()();
}

uint64_t sub_1000895E0()
{
  return type metadata accessor for ObservationRegistrar();
}

uint64_t sub_1000895F0()
{
  return ColorResource.init(name:bundle:)();
}

uint64_t sub_100089600()
{
  return type metadata accessor for ColorResource();
}

uint64_t sub_100089610()
{
  return ImageResource.init(name:bundle:)();
}

uint64_t sub_100089620()
{
  return type metadata accessor for ImageResource();
}

uint64_t sub_100089630()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_100089640()
{
  return Logger.logObject.getter();
}

uint64_t sub_100089650()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100089660()
{
  return type metadata accessor for Logger();
}

uint64_t sub_100089670()
{
  return Animatable<>.animatableData.modify();
}

uint64_t sub_100089680()
{
  return static Animatable<>._makeAnimatable(value:inputs:)();
}

uint64_t sub_100089690()
{
  return EdgeInsets.init(_all:)();
}

uint64_t sub_1000896A0()
{
  return type metadata accessor for Environment.Content();
}

uint64_t sub_1000896B0()
{
  return Environment.init<A>(_:)();
}

uint64_t sub_1000896C0()
{
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
}

uint64_t sub_1000896D0()
{
  return TupleWidget.init(_:)();
}

uint64_t sub_1000896E0()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t sub_1000896F0()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t sub_100089700()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100089710()
{
  return static WidgetBundle.main()();
}

uint64_t sub_100089720()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t sub_100089730()
{
  return GeometryProxy.size.getter();
}

uint64_t sub_100089740()
{
  return AngularGradient.init(gradient:center:angle:)();
}

uint64_t sub_100089750()
{
  return ModifiedContent<>.accessibilityLabel(_:)();
}

uint64_t sub_100089760()
{
  return ModifiedContent<>.accessibilityLabel<A>(_:)();
}

uint64_t sub_100089770()
{
  return ModifiedContent<>.accessibilityAddTraits(_:)();
}

uint64_t sub_100089780()
{
  return ModifiedContent<>.accessibilitySortPriority(_:)();
}

uint64_t sub_100089790()
{
  return type metadata accessor for ModifiedContent();
}

uint64_t sub_1000897A0()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t sub_1000897B0()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t sub_1000897C0()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_1000897D0()
{
  return EnvironmentValues.sizeCategory.setter();
}

uint64_t sub_1000897E0()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t sub_1000897F0()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_100089800()
{
  return EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_100089810()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_100089820()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_100089830()
{
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t sub_100089840()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t sub_100089850()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_100089860()
{
  return EnvironmentValues.font.getter();
}

uint64_t sub_100089870()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_100089880()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_100089890()
{
  return type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey();
}

uint64_t sub_1000898A0()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_1000898B0()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_1000898C0()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t sub_1000898D0()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1000898E0()
{
  return EnvironmentValues.init()();
}

uint64_t sub_1000898F0()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t sub_100089900()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t sub_100089910()
{
  return static VerticalAlignment.lastTextBaseline.getter();
}

uint64_t sub_100089920()
{
  return static VerticalAlignment.firstTextBaseline.getter();
}

uint64_t sub_100089930()
{
  return static VerticalAlignment.center.getter();
}

uint64_t sub_100089940()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
}

void sub_100089950(Swift::String a1)
{
}

void sub_100089960(Swift::String a1)
{
}

uint64_t sub_100089970()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t sub_100089980()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t sub_100089990()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t sub_1000899A0()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t sub_1000899B0()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t sub_1000899C0()
{
  return static AccessibilityTraits.updatesFrequently.getter();
}

uint64_t sub_1000899D0()
{
  return static AccessibilityTraits.isImage.getter();
}

uint64_t sub_1000899E0()
{
  return type metadata accessor for AccessibilityTraits();
}

uint64_t sub_1000899F0()
{
  return type metadata accessor for ContentSizeCategory();
}

uint64_t sub_100089A00()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t sub_100089A10()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t sub_100089A20()
{
  return static SymbolRenderingMode.monochrome.getter();
}

uint64_t sub_100089A30()
{
  return static SymbolRenderingMode.multicolor.getter();
}

uint64_t sub_100089A40()
{
  return type metadata accessor for SymbolRenderingMode();
}

uint64_t sub_100089A50()
{
  return static WidgetBundleBuilder.buildBlock<A>(_:)();
}

uint64_t sub_100089A60()
{
  return WidgetConfiguration.description(_:)();
}

uint64_t sub_100089A70()
{
  return WidgetConfiguration.supportedFamilies(_:)();
}

uint64_t sub_100089A80()
{
  return WidgetConfiguration.supportsVibrantContent(_:)();
}

uint64_t sub_100089A90()
{
  return WidgetConfiguration.configurationDisplayName(_:)();
}

uint64_t sub_100089AA0()
{
  return WidgetConfiguration.preferredBackgroundStyle(_:)();
}

uint64_t sub_100089AB0()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_100089AC0()
{
  return ControlWidgetTemplate.tint(_:)();
}

uint64_t sub_100089AD0()
{
  return type metadata accessor for PinnedScrollableViews();
}

uint64_t sub_100089AE0()
{
  return _ControlWidgetAdaptor.init(_:)();
}

uint64_t sub_100089AF0()
{
  return static AccessibilityChildBehavior.ignore.getter();
}

uint64_t sub_100089B00()
{
  return static AccessibilityChildBehavior.combine.getter();
}

uint64_t sub_100089B10()
{
  return type metadata accessor for AccessibilityChildBehavior();
}

uint64_t sub_100089B20()
{
  return ControlWidgetConfiguration.description(_:)();
}

uint64_t sub_100089B30()
{
  return ControlWidgetConfiguration.displayName(_:)();
}

uint64_t sub_100089B40()
{
  return ControlWidgetConfiguration.showsInSystemSpaces()();
}

uint64_t sub_100089B50()
{
  return static ContainerBackgroundPlacement.widget.getter();
}

uint64_t sub_100089B60()
{
  return type metadata accessor for ContainerBackgroundPlacement();
}

uint64_t sub_100089B70()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t sub_100089B80()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t sub_100089B90()
{
  return static Edge.Set.all.getter();
}

uint64_t sub_100089BA0()
{
  return static Edge.Set.top.getter();
}

uint64_t sub_100089BB0()
{
  return static Edge.Set.bottom.getter();
}

uint64_t sub_100089BC0()
{
  return static Edge.Set.leading.getter();
}

uint64_t sub_100089BD0()
{
  return Edge.Set.init(rawValue:)();
}

uint64_t sub_100089BE0()
{
  return static Edge.Set.trailing.getter();
}

uint64_t sub_100089BF0()
{
  return static Font.subheadline.getter();
}

uint64_t sub_100089C00()
{
  return static Font.body.getter();
}

uint64_t sub_100089C10()
{
  return static Font.title.getter();
}

uint64_t sub_100089C20()
{
  return type metadata accessor for Font.Design();
}

uint64_t sub_100089C30()
{
  return static Font.Weight.thin.getter();
}

uint64_t sub_100089C40()
{
  return static Font.Weight.medium.getter();
}

uint64_t sub_100089C50()
{
  return static Font.Weight.regular.getter();
}

uint64_t sub_100089C60()
{
  return static Font.Weight.semibold.getter();
}

uint64_t sub_100089C70()
{
  return static Font.system(size:weight:design:)();
}

uint64_t sub_100089C80()
{
  return static Font.system(_:design:weight:)();
}

uint64_t sub_100089C90()
{
  return Font.weight(_:)();
}

uint64_t sub_100089CA0()
{
  return type metadata accessor for Font.Leading();
}

uint64_t sub_100089CB0()
{
  return static Font.caption.getter();
}

uint64_t sub_100089CC0()
{
  return Font.leading(_:)();
}

uint64_t sub_100089CD0()
{
  return static Font.caption2.getter();
}

uint64_t sub_100089CE0()
{
  return static Font.footnote.getter();
}

uint64_t sub_100089CF0()
{
  return static Font.headline.getter();
}

uint64_t sub_100089D00()
{
  return type metadata accessor for Font.TextStyle();
}

uint64_t sub_100089D10()
{
  return Font.init(_:)();
}

void sub_100089D20(CGPoint to)
{
}

void sub_100089D30(CGPoint to)
{
}

uint64_t sub_100089D40()
{
  return Path.init(_:)();
}

uint64_t sub_100089D50()
{
  return Text.init(dateFormat:timeZone:)();
}

uint64_t sub_100089D60()
{
  return Text.fontWeight(_:)();
}

uint64_t sub_100089D70()
{
  return Text.foregroundColor(_:)();
}

uint64_t sub_100089D80()
{
  return Text.accessibilityLabel<A>(_:)();
}

uint64_t sub_100089D90()
{
  return Text.init(dateFormatTemplate:timeZone:)();
}

uint64_t sub_100089DA0()
{
  return Text.bold()();
}

uint64_t sub_100089DB0()
{
  return Text.font(_:)();
}

uint64_t sub_100089DC0()
{
  return static Text.Scale.secondary.getter();
}

uint64_t sub_100089DD0()
{
  return type metadata accessor for Text.Scale();
}

uint64_t sub_100089DE0()
{
  return static Text.DateStyle.timer.getter();
}

uint64_t sub_100089DF0()
{
  return type metadata accessor for Text.DateStyle();
}

uint64_t sub_100089E00()
{
  return Text.textScale(_:isEnabled:)();
}

uint64_t sub_100089E10()
{
  return Text.init(_:style:)();
}

uint64_t sub_100089E20()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t sub_100089E30()
{
  return Text.init(_:)();
}

uint64_t sub_100089E40()
{
  return Text.init<A>(_:)();
}

uint64_t sub_100089E50()
{
  return Text.init(_:)();
}

uint64_t sub_100089E60()
{
  return View.hideViewOnSnapshot()();
}

uint64_t sub_100089E70()
{
  return View.widgetAccentable(_:)();
}

uint64_t sub_100089E80()
{
  return View._clockHandRotationEffect(_:in:anchor:)();
}

uint64_t sub_100089E90()
{
  return View.widgetURL(_:)();
}

uint64_t sub_100089EA0()
{
  return static View._makeView(view:inputs:)();
}

uint64_t sub_100089EB0()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t sub_100089EC0()
{
  return View.unredacted()();
}

uint64_t sub_100089ED0()
{
  return View.environment<A>(_:)();
}

uint64_t sub_100089EE0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100089EF0()
{
  return View.accessibilityLabel(_:)();
}

uint64_t sub_100089F00()
{
  return View.accessibilityLabel<A>(_:)();
}

uint64_t sub_100089F10()
{
  return View.accessibilityHidden(_:)();
}

uint64_t sub_100089F20()
{
  return View.containerBackground<A>(for:alignment:content:)();
}

uint64_t sub_100089F30()
{
  return View.accessibilityElement(children:)();
}

uint64_t sub_100089F40()
{
  return View.accessibilityRemoveTraits(_:)();
}

uint64_t sub_100089F50()
{
  return View.accessibilitySortPriority(_:)();
}

uint64_t sub_100089F60()
{
  return View.accessibilityRepresentation<A>(representation:)();
}

uint64_t sub_100089F70()
{
  return View.modifier<A>(_:)();
}

uint64_t sub_100089F80()
{
  return Color.init(uiColor:)();
}

uint64_t sub_100089F90()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t sub_100089FA0()
{
  return static Color.red.getter();
}

uint64_t sub_100089FB0()
{
  return static Color.blue.getter();
}

uint64_t sub_100089FC0()
{
  return static Color.gray.getter();
}

uint64_t sub_100089FD0()
{
  return static Color.black.getter();
}

uint64_t sub_100089FE0()
{
  return static Color.clear.getter();
}

uint64_t sub_100089FF0()
{
  return static Color.green.getter();
}

uint64_t sub_10008A000()
{
  return static Color.white.getter();
}

uint64_t sub_10008A010()
{
  return Color.opacity(_:)();
}

uint64_t sub_10008A020()
{
  return Color.init(_:red:green:blue:opacity:)();
}

uint64_t sub_10008A030()
{
  return Color.init(_:white:opacity:)();
}

uint64_t sub_10008A040()
{
  return Image.init(systemName:)();
}

uint64_t sub_10008A050()
{
  return type metadata accessor for Image.ResizingMode();
}

uint64_t sub_10008A060()
{
  return Image.renderingMode(_:)();
}

uint64_t sub_10008A070()
{
  return Image.init(_internalSystemName:)();
}

uint64_t sub_10008A080()
{
  return type metadata accessor for Image.TemplateRenderingMode();
}

uint64_t sub_10008A090()
{
  return Image.resizable(capInsets:resizingMode:)();
}

uint64_t sub_10008A0A0()
{
  return Image.init(_:bundle:)();
}

uint64_t sub_10008A0E0()
{
  return Shape.layoutDirectionBehavior.getter();
}

uint64_t sub_10008A100()
{
  return static Shape.role.getter();
}

uint64_t sub_10008A120()
{
  return AnyView.init<A>(_:)();
}

uint64_t sub_10008A130()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_10008A140()
{
  return ForEach<>.init(_:content:)();
}

uint64_t sub_10008A150()
{
  return ForEach<>.init(_:content:)();
}

uint64_t sub_10008A160()
{
  return Gradient.init(colors:)();
}

uint64_t sub_10008A170()
{
  return type metadata accessor for GridItem.Size();
}

uint64_t sub_10008A180()
{
  return type metadata accessor for GridItem();
}

uint64_t sub_10008A190()
{
  return GridItem.init(_:spacing:alignment:)();
}

uint64_t sub_10008A1A0()
{
  return static Alignment.bottomLeading.getter();
}

uint64_t sub_10008A1B0()
{
  return static Alignment.center.getter();
}

uint64_t sub_10008A1C0()
{
  return static Alignment.leading.getter();
}

uint64_t sub_10008A1D0()
{
  return LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
}

uint64_t sub_10008A1E0()
{
  return static UnitPoint.center.getter();
}

uint64_t sub_10008A1F0()
{
  return ControlWidgetButton.init<>(action:label:)();
}

uint64_t sub_10008A200()
{
  return AccessoryWidgetBackground.init()();
}

uint64_t sub_10008A210()
{
  return type metadata accessor for AccessoryWidgetBackground();
}

uint64_t sub_10008A220()
{
  return static WidgetRenderingMode.== infix(_:_:)();
}

uint64_t sub_10008A230()
{
  return static WidgetRenderingMode.vibrant.getter();
}

uint64_t sub_10008A240()
{
  return static WidgetRenderingMode.accented.getter();
}

uint64_t sub_10008A250()
{
  return static WidgetRenderingMode.fullColor.getter();
}

uint64_t sub_10008A260()
{
  return type metadata accessor for WidgetRenderingMode();
}

uint64_t sub_10008A270()
{
  return type metadata accessor for WidgetBackgroundStyle();
}

uint64_t sub_10008A280()
{
  return type metadata accessor for WidgetFamily();
}

uint64_t sub_10008A290()
{
  return TimelineEntry.relevance.getter();
}

uint64_t sub_10008A2C0()
{
  return IntentConfiguration.init<A>(kind:intent:provider:content:)();
}

uint64_t sub_10008A2D0()
{
  return StaticConfiguration.init<A>(kind:provider:content:)();
}

uint64_t sub_10008A2E0()
{
  return static TimelineReloadPolicy.after(_:)();
}

uint64_t sub_10008A2F0()
{
  return static TimelineReloadPolicy.atEnd.getter();
}

uint64_t sub_10008A300()
{
  return static TimelineReloadPolicy.never.getter();
}

uint64_t sub_10008A310()
{
  return type metadata accessor for TimelineReloadPolicy();
}

uint64_t sub_10008A350()
{
  return type metadata accessor for _ClockHandRotationEffect.Period();
}

uint64_t sub_10008A360()
{
  return StaticControlConfiguration.init(kind:content:)();
}

uint64_t sub_10008A370()
{
  return Timeline.init(entries:policy:)();
}

uint64_t sub_10008A380()
{
  return Array.init()();
}

uint64_t sub_10008A390()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_10008A3A0()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t sub_10008A3B0()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t sub_10008A3C0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_10008A3D0()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t sub_10008A3E0()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString sub_10008A3F0()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10008A400()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10008A410()
{
  return String.init<A>(describing:)();
}

uint64_t sub_10008A420()
{
  return String.hash(into:)();
}

uint64_t sub_10008A430()
{
  return String.count.getter();
}

void sub_10008A440(Swift::String a1)
{
}

Swift::Int sub_10008A450()
{
  return String.UTF8View._foreignCount()();
}

uint64_t sub_10008A460()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t sub_10008A470()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_10008A480()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_10008A490()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10008A4A0()
{
  return Array.description.getter();
}

uint64_t sub_10008A4B0()
{
  return specialized Array._endMutation()();
}

uint64_t sub_10008A4C0()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_10008A4D0()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_10008A4E0()
{
  return Array.count.getter();
}

uint64_t sub_10008A4F0()
{
  return Array.append(_:)();
}

uint64_t sub_10008A500()
{
  return type metadata accessor for Array();
}

uint64_t sub_10008A510()
{
  return Array.init<A>(_:)();
}

uint64_t sub_10008A520()
{
  return Array.subscript.getter();
}

uint64_t sub_10008A530()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t sub_10008A540()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t sub_10008A550()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t sub_10008A560()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_10008A570()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10008A580()
{
  return type metadata accessor for Optional();
}

uint64_t sub_10008A590()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10008A5A0()
{
  return StringProtocol.range<A>(of:options:range:locale:)();
}

uint64_t sub_10008A5B0()
{
  return type metadata accessor for ArraySlice();
}

void sub_10008A5C0(Swift::Int a1)
{
}

uint64_t sub_10008A5D0()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t sub_10008A5E0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_10008A5F0()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t sub_10008A600()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t sub_10008A610()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_10008A620()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

Swift::Int sub_10008A630(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases, string);
}

uint64_t sub_10008A640()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_10008A650()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10008A660()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t sub_10008A670()
{
  return Hasher.init(_seed:)();
}

void sub_10008A680(Swift::UInt a1)
{
}

void sub_10008A690(Swift::UInt8 a1)
{
}

Swift::Int sub_10008A6A0()
{
  return Hasher._finalize()();
}

uint64_t sub_10008A6B0()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CTFontRef CTFontCreateWithNameAndOptions(CFStringRef name, CGFloat size, const CGAffineTransform *matrix, CTFontOptions options)
{
  return _CTFontCreateWithNameAndOptions(name, size, matrix, options);
}

uint64_t NSExtensionMain()
{
  return _NSExtensionMain();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

long double fmod(long double __x, long double __y)
{
  return _fmod(__x, __y);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}