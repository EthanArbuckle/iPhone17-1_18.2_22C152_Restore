uint64_t sub_100443ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v7;

  v4 = (void *)*v3;
  v4[26] = a1;
  v4[27] = a2;
  v4[28] = v2;
  swift_task_dealloc();
  if (v2)
  {
    v5 = sub_100444368;
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = sub_100443FF8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100443FF8()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  sub_100172484(v0[26], v0[27]);
  FastSync.NoteContentMessage.init(recordBatchData:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  type metadata accessor for FastSync.Notes();
  sub_100449994(&qword_1006A76A8, (void (*)(uint64_t))&type metadata accessor for FastSync.NoteContentMessage);
  FastSync.MessageContainer.init<A>(message:)();
  v5 = (void *)swift_task_alloc();
  v0[29] = v5;
  void *v5 = v0;
  v5[1] = sub_100444148;
  uint64_t v6 = v0[14];
  return sub_100445404(v6);
}

uint64_t sub_100444148()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10044475C;
  }
  else {
    uint64_t v2 = sub_10044425C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10044425C()
{
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v6 = v0[12];
  sub_10017253C(v0[26], v0[27]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = (void *)swift_task_alloc();
  v0[23] = v7;
  void *v7 = v0;
  v7[1] = sub_100443928;
  uint64_t v8 = v0[19];
  return AsyncStream.Iterator.next(isolation:)(v0 + 4, 0, 0, v8);
}

uint64_t sub_100444368()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 40) = *(void *)(v0 + 224);
  uint64_t v1 = *(unsigned int *)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  sub_10002F214(&qword_1006A3D90);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v5 = *(void *)(v0 + 24);
  *uint64_t v2 = *(void *)(v0 + 16);
  v2[1] = v5;
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 104))(v2, v1, v4);
  if (qword_10069B048 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = type metadata accessor for Logger();
  sub_10003293C(v10, (uint64_t)qword_1006A73A0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v11(v7, v6, v8);
  v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = *(void *)(v0 + 72);
  uint64_t v15 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v0 + 64);
  if (v14)
  {
    os_log_type_t type = v13;
    v18 = (uint8_t *)swift_slowAlloc();
    v32 = (void *)swift_slowAlloc();
    *(_DWORD *)v18 = 138412290;
    sub_100449994(&qword_1006A76A0, (void (*)(uint64_t))&type metadata accessor for FastSyncError);
    swift_allocError();
    v11(v19, v15, v17);
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v32 = v20;
    v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v21(v15, v17);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "%@", v18, 0xCu);
    sub_10002F214(&qword_10069FD50);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v21(*(void *)(v0 + 80), *(void *)(v0 + 64));
  }
  uint64_t v22 = *(void *)(v0 + 176);
  uint64_t v23 = *(void *)(v0 + 56);

  v24 = *(os_unfair_lock_s **)(v23 + v22);
  v25 = v24 + 4;
  v26 = v24 + 6;
  os_unfair_lock_lock(v24 + 6);
  sub_100448BE4(v25);
  uint64_t v27 = *(void *)(v0 + 88);
  uint64_t v28 = *(void *)(v0 + 64);
  os_unfair_lock_unlock(v26);
  swift_errorRelease();
  v21(v27, v28);
  v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v29;
  void *v29 = v0;
  v29[1] = sub_100443928;
  uint64_t v30 = *(void *)(v0 + 152);
  return AsyncStream.Iterator.next(isolation:)(v0 + 32, 0, 0, v30);
}

uint64_t sub_10044475C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 96);
  sub_10017253C(*(void *)(v0 + 208), *(void *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  *(void *)(v0 + 40) = *(void *)(v0 + 240);
  uint64_t v7 = *(unsigned int *)(v0 + 248);
  uint64_t v8 = *(void **)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  sub_10002F214(&qword_1006A3D90);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v11 = *(void *)(v0 + 24);
  *uint64_t v8 = *(void *)(v0 + 16);
  v8[1] = v11;
  (*(void (**)(void *, uint64_t, uint64_t))(v9 + 104))(v8, v7, v10);
  if (qword_10069B048 != -1) {
    swift_once();
  }
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 64);
  uint64_t v15 = *(void *)(v0 + 72);
  uint64_t v16 = type metadata accessor for Logger();
  sub_10003293C(v16, (uint64_t)qword_1006A73A0);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v17(v13, v12, v14);
  v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v22 = *(void *)(v0 + 72);
  uint64_t v21 = *(void *)(v0 + 80);
  uint64_t v23 = *(void *)(v0 + 64);
  if (v20)
  {
    os_log_type_t type = v19;
    v24 = (uint8_t *)swift_slowAlloc();
    v38 = (void *)swift_slowAlloc();
    *(_DWORD *)v24 = 138412290;
    sub_100449994(&qword_1006A76A0, (void (*)(uint64_t))&type metadata accessor for FastSyncError);
    swift_allocError();
    v17(v25, v21, v23);
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v38 = v26;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v27(v21, v23);
    _os_log_impl((void *)&_mh_execute_header, v18, type, "%@", v24, 0xCu);
    sub_10002F214(&qword_10069FD50);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v27(*(void *)(v0 + 80), *(void *)(v0 + 64));
  }
  uint64_t v28 = *(void *)(v0 + 176);
  uint64_t v29 = *(void *)(v0 + 56);

  uint64_t v30 = *(os_unfair_lock_s **)(v29 + v28);
  v31 = v30 + 4;
  v32 = v30 + 6;
  os_unfair_lock_lock(v30 + 6);
  sub_100448BE4(v31);
  uint64_t v33 = *(void *)(v0 + 88);
  uint64_t v34 = *(void *)(v0 + 64);
  os_unfair_lock_unlock(v32);
  swift_errorRelease();
  v27(v33, v34);
  v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v35;
  void *v35 = v0;
  v35[1] = sub_100443928;
  uint64_t v36 = *(void *)(v0 + 152);
  return AsyncStream.Iterator.next(isolation:)(v0 + 32, 0, 0, v36);
}

uint64_t sub_100444B90(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for OSSignpostError();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_100444CC8, 0, 0);
}

uint64_t sub_100444CC8()
{
  if (qword_10069B058 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSSignposter();
  v0[14] = sub_10003293C(v1, (uint64_t)qword_1006A73D0);
  static OSSignpostID.exclusive.getter();
  uint64_t v2 = OSSignposter.logHandle.getter();
  os_signpost_type_t v3 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v4 = v0[12];
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[10];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    unint64_t v8 = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v4, v0[13], v5);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    os_signpost_id_t v10 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, v3, v10, "Serialize", "", v9, 2u);
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v11 = v0[10];

    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    unint64_t v8 = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[13];
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[10];
  uint64_t v16 = v0[5];
  v0[15] = v7;
  v0[16] = v8;
  v7(v12, v13, v14);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v0[17] = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v0[18] = v17;
  v0[19] = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v13, v14);
  uint64_t v18 = *(void *)(v16 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudDatabase);
  sub_100031418(0, &qword_1006A7630);
  swift_bridgeObjectRetain();
  os_log_type_t v19 = (void *)CKSerializeRecordModificationsOperation.init(recordsToSave:recordIDsToDelete:)();
  v0[20] = v19;
  [v19 setQualityOfService:25];
  uint64_t v20 = swift_task_alloc();
  v0[21] = v20;
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v18;
  uint64_t v21 = swift_task_alloc();
  v0[22] = v21;
  *(void *)(v21 + 16) = v19;
  uint64_t v22 = (void *)swift_task_alloc();
  v0[23] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_100444FD8;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v0 + 2, &unk_1006A7638, v20, sub_1004492BC, v21, 0, 0, &type metadata for Data);
}

uint64_t sub_100444FD8()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10044533C;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = sub_1004450FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004450FC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  os_signpost_type_t v3 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v4 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v22 = v1;
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v7 = *(void *)(v0 + 48);
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v6, v7) == enum case for OSSignpostError.doubleEnd(_:))
    {
      unint64_t v8 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 56) + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
      unint64_t v8 = "";
    }
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    uint64_t v21 = v2;
    uint64_t v14 = *(void *)(v0 + 88);
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v15 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 120))(v13, v14, v15);
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    os_signpost_id_t v17 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v17, "Serialize", v8, v16, 2u);
    swift_slowDealloc();

    uint64_t v18 = v14;
    uint64_t v2 = v21;
    v12(v18, v15);
    swift_release();
    v12(v13, v15);
    uint64_t v1 = v22;
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 88);
    uint64_t v11 = *(void *)(v0 + 72);

    v9(v10, v11);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v19(v1, v2);
}

uint64_t sub_10044533C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100445404(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for OSSignpostError();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_10044553C, 0, 0);
}

uint64_t sub_10044553C()
{
  if (qword_10069B058 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSSignposter();
  v0[12] = sub_10003293C(v1, (uint64_t)qword_1006A73D0);
  static OSSignpostID.exclusive.getter();
  uint64_t v2 = OSSignposter.logHandle.getter();
  os_signpost_type_t v3 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[7];
    uint64_t v6 = v0[8];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    unint64_t v8 = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v4, v0[11], v5);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    os_signpost_id_t v10 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, v3, v10, "Send", "", v9, 2u);
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v11 = v0[8];

    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    unint64_t v8 = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  uint64_t v13 = v0[10];
  uint64_t v12 = v0[11];
  uint64_t v14 = v0[7];
  uint64_t v15 = v0[8];
  uint64_t v16 = v0[3];
  v0[13] = v7;
  v0[14] = v8;
  v7(v13, v12, v14);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v0[15] = OSSignpostIntervalState.init(id:isOpen:)();
  os_signpost_id_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v0[16] = v17;
  v0[17] = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v12, v14);
  id v18 = [*(id *)(v16 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration) fastSyncMaximumMessageSizeBytes];
  os_log_type_t v19 = (void *)swift_task_alloc();
  v0[18] = v19;
  uint64_t v20 = sub_10002F214(&qword_1006A7658);
  uint64_t v21 = sub_10001DFB0(&qword_1006A7680, &qword_1006A7658);
  uint64_t v22 = sub_10001DFB0(&qword_1006A7688, &qword_1006A7658);
  *os_log_type_t v19 = v0;
  v19[1] = sub_100445820;
  uint64_t v23 = v0[2];
  return GroupSessionMessenger.ic_sendChunked<A>(_:size:)(v23, v18, v20, v21, v22);
}

uint64_t sub_100445820()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100445B54;
  }
  else {
    uint64_t v2 = sub_100445934;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100445934()
{
  uint64_t v1 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v2 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 32);
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v4 + 88))(v3, v5) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v6 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
      uint64_t v6 = "";
    }
    os_signpost_id_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 104))(v11, v12, v13);
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    os_signpost_id_t v15 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, v2, v15, "Send", v6, v14, 2u);
    swift_slowDealloc();

    v10(v12, v13);
    swift_release();
    v10(v11, v13);
  }
  else
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 56);

    v7(v8, v9);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100445B54()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100445BEC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for OSSignpostError();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100445D24, 0, 0);
}

uint64_t sub_100445D24()
{
  if (qword_10069B058 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSSignposter();
  v0[12] = sub_10003293C(v1, (uint64_t)qword_1006A73D0);
  static OSSignpostID.exclusive.getter();
  os_signpost_type_t v2 = OSSignposter.logHandle.getter();
  os_signpost_type_t v3 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[7];
    uint64_t v6 = v0[8];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    unint64_t v8 = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v4, v0[11], v5);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    os_signpost_id_t v10 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, v3, v10, "Send", "", v9, 2u);
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v11 = v0[8];

    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    unint64_t v8 = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  uint64_t v13 = v0[10];
  uint64_t v12 = v0[11];
  uint64_t v14 = v0[7];
  uint64_t v15 = v0[8];
  uint64_t v16 = v0[3];
  v0[13] = v7;
  v0[14] = v8;
  v7(v13, v12, v14);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v0[15] = OSSignpostIntervalState.init(id:isOpen:)();
  os_signpost_id_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v0[16] = v17;
  v0[17] = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v12, v14);
  id v18 = [*(id *)(v16 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration) fastSyncMaximumMessageSizeBytes];
  os_log_type_t v19 = (void *)swift_task_alloc();
  v0[18] = v19;
  uint64_t v20 = sub_10002F214((uint64_t *)&unk_1006A75E0);
  uint64_t v21 = sub_10001DFB0(&qword_1006A7648, (uint64_t *)&unk_1006A75E0);
  uint64_t v22 = sub_10001DFB0(&qword_1006A7650, (uint64_t *)&unk_1006A75E0);
  *os_log_type_t v19 = v0;
  v19[1] = sub_100446008;
  uint64_t v23 = v0[2];
  return GroupSessionMessenger.ic_sendChunked<A>(_:size:)(v23, v18, v20, v21, v22);
}

uint64_t sub_100446008()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    os_signpost_type_t v2 = sub_100449A94;
  }
  else {
    os_signpost_type_t v2 = sub_100449A90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10044611C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  uint64_t v5 = sub_10002F214(&qword_1006A7658);
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  v4[7] = sub_10002F214(&qword_1006A3138);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FastSync.SelectionMessage();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  sub_10002F214(&qword_1006A7660);
  v4[14] = swift_task_alloc();
  uint64_t v7 = sub_10002F214(&qword_1006A3110);
  v4[15] = v7;
  v4[16] = *(void *)(v7 - 8);
  v4[17] = swift_task_alloc();
  return _swift_task_switch(sub_10044631C, 0, 0);
}

uint64_t sub_10044631C()
{
  sub_10002F214(&qword_10069BA80);
  AsyncStream.makeAsyncIterator()();
  v0[18] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  uint64_t v1 = (void *)swift_task_alloc();
  v0[19] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100446410;
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_100446410()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10044650C, 0, 0);
}

uint64_t sub_10044650C()
{
  v32 = v0;
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
    if (qword_10069B048 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10003293C(v4, (uint64_t)qword_1006A73A0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Selection publisher task finished", v7, 2u);
      swift_slowDealloc();
    }

    goto LABEL_9;
  }
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[13], v1, v2);
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v9 = v0[16];
    uint64_t v8 = v0[17];
    uint64_t v10 = v0[15];
    (*(void (**)(void, void))(v0[10] + 8))(v0[13], v0[9]);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  if (qword_10069B050 != -1) {
    swift_once();
  }
  uint64_t v13 = v0[8];
  uint64_t v14 = sub_10003293C(v0[7], (uint64_t)qword_1006A73B8);
  sub_10002F034(v14, v13, &qword_1006A3138);
  uint64_t v15 = type metadata accessor for Logger();
  v0[20] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) == 1)
  {
    uint64_t v17 = v0[10];
    sub_10002B754(v0[8], &qword_1006A3138);
    (*(void (**)(void, void, void))(v17 + 16))(v0[11], v0[13], v0[9]);
  }
  else
  {
    id v18 = *(void (**)(void, void, void))(v0[10] + 16);
    v18(v0[12], v0[13], v0[9]);
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = v0[12];
    uint64_t v24 = v0[9];
    uint64_t v23 = v0[10];
    if (v21)
    {
      os_log_type_t type = v20;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      sub_100449994(&qword_1006A3118, (void (*)(uint64_t))&type metadata accessor for FastSync.SelectionMessage);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v25 + 4) = sub_10045DA1C(v26, v27, &v31);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      _os_log_impl((void *)&_mh_execute_header, v19, type, "Sending selection message: %s", (uint8_t *)v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    }
    (*(void (**)(void, uint64_t))(v16 + 8))(v0[8], v15);
    v18(v0[11], v0[13], v0[9]);
  }
  type metadata accessor for FastSync.Notes();
  sub_100449994(&qword_1006A7668, (void (*)(uint64_t))&type metadata accessor for FastSync.SelectionMessage);
  FastSync.MessageContainer.init<A>(message:)();
  uint64_t v28 = (void *)swift_task_alloc();
  v0[21] = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_100446A78;
  uint64_t v29 = v0[6];
  return sub_100445404(v29);
}

uint64_t sub_100446A78()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100446C60;
  }
  else {
    uint64_t v2 = sub_100446B8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100446B8C()
{
  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  (*(void (**)(void, void))(v0[10] + 8))(v0[13], v0[9]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[19] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100446410;
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_100446C60()
{
  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  if (qword_10069B048 != -1) {
    swift_once();
  }
  sub_10003293C(v0[20], (uint64_t)qword_1006A73A0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error sending selection message: %@", v3, 0xCu);
    sub_10002F214(&qword_10069FD50);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[18];
  uint64_t v7 = v0[3];

  uint64_t v8 = *(os_unfair_lock_s **)(v7 + v6);
  uint64_t v9 = v8 + 4;
  uint64_t v10 = v8 + 6;
  os_unfair_lock_lock(v8 + 6);
  sub_100448BE4(v9);
  os_unfair_lock_unlock(v10);
  swift_errorRelease();
  (*(void (**)(void, void))(v0[10] + 8))(v0[13], v0[9]);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[19] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100446410;
  uint64_t v12 = v0[14];
  uint64_t v13 = v0[15];
  return AsyncStream.Iterator.next(isolation:)(v12, 0, 0, v13);
}

uint64_t sub_100446F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v5 = sub_10002F214((uint64_t *)&unk_1006A75E0);
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = sub_10002F214(&qword_1006A3138);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FastSync.PaperKitMessage();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  uint64_t v7 = sub_10002F214((uint64_t *)&unk_1006A75F0);
  v4[16] = v7;
  v4[17] = *(void *)(v7 - 8);
  v4[18] = swift_task_alloc();
  return _swift_task_switch(sub_10044711C, 0, 0);
}

uint64_t sub_10044711C()
{
  sub_10002F214(&qword_10069BAB8);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  v0[19] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration;
  v0[20] = v1;
  os_log_type_t v2 = (void *)swift_task_alloc();
  v0[21] = v2;
  *os_log_type_t v2 = v0;
  v2[1] = sub_100447224;
  uint64_t v3 = v0[16];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v3);
}

uint64_t sub_100447224()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100447320, 0, 0);
}

uint64_t sub_100447320()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  v0[22] = v1;
  v0[23] = v2;
  if (v2 >> 60 == 15)
  {
    (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
    if (qword_10069B048 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10003293C(v3, (uint64_t)qword_1006A73A0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "PaperKit publisher task finished", v6, 2u);
      swift_slowDealloc();
    }

    goto LABEL_9;
  }
  if (static Task<>.isCancelled.getter())
  {
    (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
    sub_1001A3F54(v1, v2);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  if ([*(id *)(v0[5] + v0[19]) fastSyncPaperKitEnablePCSEncryption])
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v0[24] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100447894;
    uint64_t v10 = v0[5];
    v9[3] = v2;
    v9[4] = v10;
    v9[2] = v1;
    return _swift_task_switch(sub_10044893C, 0, 0);
  }
  else
  {
    if (qword_10069B050 != -1) {
      swift_once();
    }
    uint64_t v11 = v0[10];
    uint64_t v12 = sub_10003293C(v0[9], (uint64_t)qword_1006A73B8);
    sub_10002F034(v12, v11, &qword_1006A3138);
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) == 1)
    {
      sub_10002B754(v0[10], &qword_1006A3138);
    }
    else
    {
      sub_100172484(v1, v2);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 134217984;
        id v18 = (uint8_t *)v17;
        uint64_t v19 = 0;
        switch(v2 >> 62)
        {
          case 1uLL:
            LODWORD(v19) = HIDWORD(v1) - v1;
            if (__OFSUB__(HIDWORD(v1), v1))
            {
              __break(1u);
LABEL_33:
              __break(1u);
              JUMPOUT(0x100447884);
            }
            uint64_t v19 = (int)v19;
LABEL_27:
            *(void *)(v17 + 4) = v19;
            sub_1001A3F54(v1, v2);
            _os_log_impl((void *)&_mh_execute_header, v15, v16, "Sending PaperKit message (PCS=OFF) with length: %ld", v18, 0xCu);
            swift_slowDealloc();

            break;
          case 2uLL:
            uint64_t v21 = *(void *)(v1 + 16);
            uint64_t v20 = *(void *)(v1 + 24);
            BOOL v22 = __OFSUB__(v20, v21);
            uint64_t v19 = v20 - v21;
            if (!v22) {
              goto LABEL_27;
            }
            goto LABEL_33;
          case 3uLL:
            goto LABEL_27;
          default:
            uint64_t v19 = BYTE6(v2);
            goto LABEL_27;
        }
      }
      else
      {

        sub_1001A3F54(v1, v2);
      }
      (*(void (**)(void, uint64_t))(v14 + 8))(v0[10], v13);
    }
    sub_100172484(v1, v2);
    FastSync.PaperKitMessage.init(data:)();
    (*(void (**)(void, void, void))(v0[13] + 16))(v0[14], v0[15], v0[12]);
    type metadata accessor for FastSync.PaperKit();
    sub_100449994(&qword_1006A7600, (void (*)(uint64_t))&type metadata accessor for FastSync.PaperKitMessage);
    FastSync.MessageContainer.init<A>(message:)();
    uint64_t v23 = (void *)swift_task_alloc();
    v0[32] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100447F0C;
    uint64_t v24 = v0[8];
    return sub_100445BEC(v24);
  }
}

uint64_t sub_100447894(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10044812C;
  }
  else {
    uint64_t v4 = sub_1004479A8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004479A8()
{
  uint64_t v1 = (void *)v0[25];
  sub_10002F214(&qword_10069BA00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100529F20;
  *(void *)(v2 + 32) = v1;
  uint64_t v6 = v2;
  specialized Array._endMutation()();
  v0[27] = v6;
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[28] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100447A94;
  return sub_100444B90(v6);
}

uint64_t sub_100447A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[29] = a1;
  v4[30] = a2;
  v4[31] = v2;
  swift_task_dealloc();
  if (v2)
  {
    os_log_type_t v5 = sub_1004483B8;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v5 = sub_100447BB4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100447BB4()
{
  if (qword_10069B050 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = sub_10003293C(*(void *)(v0 + 72), (uint64_t)qword_1006A73B8);
  sub_10002F034(v2, v1, &qword_1006A3138);
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3) == 1)
  {
    sub_10002B754(*(void *)(v0 + 88), &qword_1006A3138);
  }
  else
  {
    sub_100172484(*(void *)(v0 + 232), *(void *)(v0 + 240));
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    unint64_t v8 = *(void *)(v0 + 240);
    if (v7)
    {
      unint64_t v9 = v8 >> 62;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 134217984;
      uint64_t v11 = v10;
      uint64_t v12 = 0;
      switch(v9)
      {
        case 1uLL:
          int v14 = *(_DWORD *)(v0 + 232);
          int v15 = *(_DWORD *)(v0 + 236);
          BOOL v16 = __OFSUB__(v15, v14);
          LODWORD(v12) = v15 - v14;
          if (v16)
          {
            __break(1u);
LABEL_18:
            __break(1u);
            JUMPOUT(0x100447EFCLL);
          }
          uint64_t v12 = (int)v12;
LABEL_12:
          uint64_t v20 = *(void *)(v0 + 232);
          unint64_t v19 = *(void *)(v0 + 240);
          *(void *)(v0 + 32) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10017253C(v20, v19);
          _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sending PaperKit message (PCS=ON) with length: %ld", v11, 0xCu);
          swift_slowDealloc();

          break;
        case 2uLL:
          uint64_t v17 = *(void *)(*(void *)(v0 + 232) + 16);
          uint64_t v18 = *(void *)(*(void *)(v0 + 232) + 24);
          BOOL v16 = __OFSUB__(v18, v17);
          uint64_t v12 = v18 - v17;
          if (!v16) {
            goto LABEL_12;
          }
          goto LABEL_18;
        case 3uLL:
          goto LABEL_12;
        default:
          uint64_t v12 = *(unsigned __int8 *)(v0 + 246);
          goto LABEL_12;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v0 + 232);

      sub_10017253C(v13, v8);
    }
    (*(void (**)(void, uint64_t))(v4 + 8))(*(void *)(v0 + 88), v3);
  }
  uint64_t v21 = *(void **)(v0 + 200);
  FastSync.PaperKitMessage.init(data:)();

  (*(void (**)(void, void, void))(*(void *)(v0 + 104) + 16))(*(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 96));
  type metadata accessor for FastSync.PaperKit();
  sub_100449994(&qword_1006A7600, (void (*)(uint64_t))&type metadata accessor for FastSync.PaperKitMessage);
  FastSync.MessageContainer.init<A>(message:)();
  BOOL v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v22;
  *BOOL v22 = v0;
  v22[1] = sub_100447F0C;
  uint64_t v23 = *(void *)(v0 + 64);
  return sub_100445BEC(v23);
}

uint64_t sub_100447F0C()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100448654;
  }
  else {
    uint64_t v2 = sub_100448020;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100448020()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[6];
  sub_1001A3F54(v0[22], v0[23]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  BOOL v7 = (void *)swift_task_alloc();
  v0[21] = v7;
  void *v7 = v0;
  v7[1] = sub_100447224;
  uint64_t v8 = v0[16];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v8);
}

uint64_t sub_10044812C()
{
  if (qword_10069B048 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10003293C(v1, (uint64_t)qword_1006A73A0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v4 + 4) = v6;
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error sending PaperKit message: %@", (uint8_t *)v4, 0xCu);
    sub_10002F214(&qword_10069FD50);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[5];

  unint64_t v9 = *(os_unfair_lock_s **)(v8 + v7);
  uint64_t v10 = v9 + 4;
  uint64_t v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  sub_100448BE4(v10);
  uint64_t v13 = v0[22];
  unint64_t v12 = v0[23];
  os_unfair_lock_unlock(v11);
  sub_1001A3F54(v13, v12);
  swift_errorRelease();
  int v14 = (void *)swift_task_alloc();
  v0[21] = v14;
  *int v14 = v0;
  v14[1] = sub_100447224;
  uint64_t v15 = v0[16];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v15);
}

uint64_t sub_1004483B8()
{
  uint64_t v1 = (void *)v0[25];
  swift_bridgeObjectRelease();

  if (qword_10069B048 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10003293C(v2, (uint64_t)qword_1006A73A0);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v5 + 4) = v7;
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error sending PaperKit message: %@", (uint8_t *)v5, 0xCu);
    sub_10002F214(&qword_10069FD50);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[20];
  uint64_t v9 = v0[5];

  uint64_t v10 = *(os_unfair_lock_s **)(v9 + v8);
  uint64_t v11 = v10 + 4;
  unint64_t v12 = v10 + 6;
  os_unfair_lock_lock(v10 + 6);
  sub_100448BE4(v11);
  uint64_t v14 = v0[22];
  unint64_t v13 = v0[23];
  os_unfair_lock_unlock(v12);
  sub_1001A3F54(v14, v13);
  swift_errorRelease();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[21] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100447224;
  uint64_t v16 = v0[16];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v16);
}

uint64_t sub_100448654()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  if (qword_10069B048 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10003293C(v4, (uint64_t)qword_1006A73A0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v7 + 4) = v9;
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error sending PaperKit message: %@", (uint8_t *)v7, 0xCu);
    sub_10002F214(&qword_10069FD50);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = v0[20];
  uint64_t v11 = v0[5];

  unint64_t v12 = *(os_unfair_lock_s **)(v11 + v10);
  unint64_t v13 = v12 + 4;
  uint64_t v14 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  sub_100448BE4(v13);
  uint64_t v16 = v0[22];
  unint64_t v15 = v0[23];
  os_unfair_lock_unlock(v14);
  sub_1001A3F54(v16, v15);
  swift_errorRelease();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[21] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100447224;
  uint64_t v18 = v0[16];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v18);
}

uint64_t sub_100448918(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10044893C, 0, 0);
}

uint64_t sub_10044893C()
{
  unsigned int v1 = [*(id *)(v0[4]+ OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration) fastSyncPaperKitEnableEphemeralRecords];
  unint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  if (v1)
  {
    v5._countAndFlagsBits = EditNoteActivity.noteID.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    sub_100031418(0, &qword_1006A75A0);
    os_log_type_t v6 = *(void **)(v3 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_encryptionParentRecordID);
    id v7 = [v6 zoneID];
    v8._countAndFlagsBits = 0xD000000000000010;
    v8._object = (void *)0x800000010055DFB0;
    Class isa = CKRecordID.init(recordName:zoneID:)(v8, (CKRecordZoneID)v7).super.isa;
    sub_100031418(0, &qword_1006A7640);
    uint64_t v10 = isa;
    v11._countAndFlagsBits = 4935760;
    v11._object = (void *)0xE300000000000000;
    v12.super.Class isa = CKRecord.init(recordType:recordID:)(v11, (CKRecordID)v10).super.isa;
    id v13 = [objc_allocWithZone((Class)CKReference) initWithRecordID:v6 action:0];
    [(objc_class *)v12.super.isa setParent:v13];

    id v14 = [(objc_class *)v12.super.isa encryptedValues];
    swift_getObjectType();
    sub_100172484(v4, v2);
    CKRecordKeyValueSetting.subscript.setter();

    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v15 = *(void **)(v3 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitTemplateRecord);
    id v16 = [v15 encryptedValues];
    swift_getObjectType();
    sub_100172484(v4, v2);
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    v12.super.Class isa = (Class)v15;
  }
  uint64_t v17 = (uint64_t (*)(Class))v0[1];
  return v17(v12.super.isa);
}

void *sub_100448BD8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_100448BE4(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t RealtimeCollaborationMessageController.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_activity;
  uint64_t v2 = type metadata accessor for EditNoteActivity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_encryptionParentRecordID));
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t RealtimeCollaborationMessageController.__deallocating_deinit()
{
  RealtimeCollaborationMessageController.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_100448DA0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100448DDC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10017B61C;
  return sub_10042BEC4(a1, v4, v5, v6);
}

uint64_t sub_100448E90()
{
  return type metadata accessor for RealtimeCollaborationMessageController();
}

uint64_t type metadata accessor for RealtimeCollaborationMessageController()
{
  uint64_t result = qword_1006A7498;
  if (!qword_1006A7498) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100448EE4()
{
  uint64_t result = type metadata accessor for EditNoteActivity();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t *sub_100448FB4@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  *uint64_t result = (uint64_t)&_swiftEmptyArrayStorage;
  *a2 = v2;
  return result;
}

void sub_100448FCC(void **a1)
{
  sub_10042C8F0(a1, *(void **)(v1 + 16));
}

uint64_t sub_100448FEC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10017B61C;
  return sub_100443618(a1, v4, v5, v6);
}

uint64_t sub_1004490A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100161724;
  return sub_10044611C(a1, v4, v5, v6);
}

uint64_t sub_10044915C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10017B61C;
  return sub_100446F48(a1, v4, v5, v6);
}

uint64_t sub_100449210(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100161724;
  return sub_1004A6138(a1, v5, v4);
}

id sub_1004492BC()
{
  return sub_1004A6560(*(void **)(v0 + 16));
}

uint64_t sub_1004492C4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1004492E4(uint64_t a1)
{
  uint64_t v45 = a1;
  uint64_t v1 = type metadata accessor for OSSignpostError();
  uint64_t v42 = *(void *)(v1 - 8);
  uint64_t v43 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v46 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  __chkstk_darwin(v8);
  CKRecord v12 = (char *)&v39 - v11;
  if (qword_10069B058 != -1) {
    swift_once();
  }
  v41 = v3;
  uint64_t v13 = type metadata accessor for OSSignposter();
  uint64_t v14 = sub_10003293C(v13, (uint64_t)qword_1006A73D0);
  static OSSignpostID.exclusive.getter();
  v44 = (void (*)(char *, uint64_t))v14;
  unint64_t v15 = OSSignposter.logHandle.getter();
  os_signpost_type_t v16 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v17(v10, v12, v4);
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, v16, v19, "Sort", "", v18, 2u);
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  else
  {

    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  }
  uint64_t v40 = v17;
  v17(v10, v12, v4);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v20 = v12;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v20, v4);
  BOOL v22 = self;
  sub_100031418(0, &qword_1006A7640);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v24 = [v22 sortedRecords:isa];

  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = OSSignposter.logHandle.getter();
  unint64_t v27 = v46;
  OSSignpostIntervalState.signpostID.getter();
  LODWORD(v45) = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v39 = v25;
    v44 = v21;
    swift_retain();
    uint64_t v28 = v41;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v30 = v42;
    uint64_t v29 = v43;
    if ((*(unsigned int (**)(char *, uint64_t))(v42 + 88))(v28, v43) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v31 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
      uint64_t v31 = "";
    }
    v32 = v27;
    uint64_t v33 = v27;
    uint64_t v34 = v4;
    v40(v10, v32, v4);
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    os_signpost_id_t v36 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, (os_signpost_type_t)v45, v36, "Sort", v31, v35, 2u);
    swift_slowDealloc();

    v37 = v44;
    v44(v33, v34);
    swift_release();
    v37(v10, v34);
    return v39;
  }
  else
  {

    v21(v27, v4);
    swift_release();
  }
  return v25;
}

uint64_t sub_1004497E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10017B61C;
  return sub_10042CB90(a1, v4, v5, v6);
}

uint64_t sub_1004498A0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004498E0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10017B61C;
  return sub_100440EFC(a1, v4, v5, v6);
}

uint64_t sub_100449994(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004499DC(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10017B61C;
  return sub_1004A65DC(a1, v5, v4);
}

uint64_t sub_100449A88()
{
  return sub_1004A695C(*(void *)(v0 + 16));
}

void *sub_100449A9C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      id v7 = [v5 objectID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100449BE0(uint64_t *a1)
{
  void (*v3)(void **__return_ptr, void *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  void *v22;
  void *v23;
  id v24;
  unsigned __int8 v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(id *__return_ptr, void *);
  void (*v30)(void *__return_ptr, void *);
  uint64_t v31;
  void (*v32)(void *__return_ptr, void *);
  uint64_t v33;
  uint64_t (*v34)(id *);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *);
  void *v38;
  void v39[17];
  void v40[7];
  id v41;

  uint64_t v2 = *a1;
  uint64_t v3 = (void (*)(void **__return_ptr, void *))a1[1];
  uint64_t v4 = a1[2];
  v37 = (uint64_t (*)(void *))a1[3];
  id v5 = a1[4];
  uint64_t v30 = (void (*)(void *__return_ptr, void *))a1[5];
  uint64_t v31 = a1[6];
  v32 = (void (*)(void *__return_ptr, void *))a1[7];
  uint64_t v33 = a1[8];
  uint64_t v34 = (uint64_t (*)(id *))a1[9];
  v35 = a1[10];
  if ((*a1 & 0xC000000000000001) != 0)
  {
    sub_10044CB7C((uint64_t)a1);
    __CocoaSet.makeIterator()();
    sub_100031418(0, (unint64_t *)&qword_10069E810);
    sub_1001A3EEC();
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v40[1];
    os_signpost_id_t v36 = v40[2];
    uint64_t v6 = v40[3];
    id v7 = v40[4];
    uint64_t v8 = v40[5];
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
    os_signpost_id_t v36 = v2 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      CKRecord v12 = ~(-1 << v11);
    }
    else {
      CKRecord v12 = -1;
    }
    uint64_t v8 = v12 & *(void *)(v2 + 56);
    sub_10044CB7C((uint64_t)a1);
    uint64_t v6 = v10;
    id v7 = 0;
  }
  uint64_t v28 = a1[12];
  uint64_t v29 = (void (*)(id *__return_ptr, void *))a1[11];
  unint64_t v27 = v6;
  uint64_t v13 = (unint64_t)(v6 + 64) >> 6;
  while (v2 < 0)
  {
    os_signpost_type_t v16 = __CocoaSet.Iterator.next()();
    if (!v16) {
      goto LABEL_29;
    }
    v38 = (void *)v16;
    sub_100031418(0, (unint64_t *)&qword_10069E810);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v17 = (id)v39[0];
    swift_unknownObjectRelease();
    if (!v17) {
      goto LABEL_29;
    }
LABEL_25:
    v39[0] = v17;
    v3(&v38, v39);

    BOOL v22 = v38;
    v40[0] = v38;
    if ((v37(v40) & 1) == 0) {
      goto LABEL_26;
    }
    v39[0] = v22;
    v30(v40, v39);

    uint64_t v23 = (void *)v40[0];
    v39[0] = v40[0];
    v32(v40, v39);

    BOOL v22 = (void *)v40[0];
    v41 = (id)v40[0];
    if (v34(&v41))
    {
      v39[0] = v22;
      v29(&v41, v39);

      id v24 = v41;
      uint64_t v25 = [v41 isSharedViaICloud];

      if (v25) {
        goto LABEL_29;
      }
    }
    else
    {
LABEL_26:
    }
  }
  if (v8)
  {
    uint64_t v14 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v15 = v14 | (v7 << 6);
    goto LABEL_24;
  }
  uint64_t v18 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v18 >= v13)
    {
      uint64_t v8 = 0;
LABEL_29:
      v39[0] = v2;
      v39[1] = v36;
      v39[2] = v27;
      v39[3] = v7;
      v39[4] = v8;
      v39[5] = v3;
      v39[6] = v4;
      v39[7] = v37;
      v39[8] = v5;
      v39[9] = v30;
      v39[10] = v31;
      v39[11] = v32;
      v39[12] = v33;
      v39[13] = v34;
      v39[14] = v35;
      v39[15] = v29;
      v39[16] = v28;
      sub_10044CC08((uint64_t)v39);
      return;
    }
    os_signpost_id_t v19 = *(void *)(v36 + 8 * v18);
    if (v19) {
      goto LABEL_23;
    }
    uint64_t v20 = v7 + 2;
    if (v7 + 2 >= v13)
    {
      uint64_t v8 = 0;
      ++v7;
      goto LABEL_29;
    }
    os_signpost_id_t v19 = *(void *)(v36 + 8 * v20);
    if (v19) {
      goto LABEL_19;
    }
    uint64_t v21 = v7 + 3;
    if (v7 + 3 >= v13) {
      goto LABEL_42;
    }
    os_signpost_id_t v19 = *(void *)(v36 + 8 * v21);
    if (!v19)
    {
      uint64_t v20 = v7 + 4;
      if (v7 + 4 >= v13) {
        goto LABEL_43;
      }
      os_signpost_id_t v19 = *(void *)(v36 + 8 * v20);
      if (v19)
      {
LABEL_19:
        uint64_t v18 = v20;
LABEL_23:
        uint64_t v8 = (v19 - 1) & v19;
        unint64_t v15 = __clz(__rbit64(v19)) + (v18 << 6);
        id v7 = v18;
LABEL_24:
        uint64_t v17 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
        if (!v17) {
          goto LABEL_29;
        }
        goto LABEL_25;
      }
      uint64_t v21 = v7 + 5;
      if (v7 + 5 >= v13)
      {
LABEL_42:
        uint64_t v8 = 0;
        id v7 = v20;
        goto LABEL_29;
      }
      os_signpost_id_t v19 = *(void *)(v36 + 8 * v21);
      if (!v19)
      {
        uint64_t v18 = v7 + 6;
        if (v7 + 6 >= v13)
        {
LABEL_43:
          uint64_t v8 = 0;
          id v7 = v21;
          goto LABEL_29;
        }
        os_signpost_id_t v19 = *(void *)(v36 + 8 * v18);
        if (!v19)
        {
          uint64_t v26 = v7 + 7;
          while (v13 != v26)
          {
            os_signpost_id_t v19 = *(void *)(v36 + 8 * v26++);
            if (v19)
            {
              uint64_t v18 = v26 - 1;
              goto LABEL_23;
            }
          }
          uint64_t v8 = 0;
          id v7 = v13 - 1;
          goto LABEL_29;
        }
        goto LABEL_23;
      }
    }
    uint64_t v18 = v21;
    goto LABEL_23;
  }
  __break(1u);
}

void sub_10044A08C(id a1@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  id v5 = [a1 managedObjectContext];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [v5 objectWithID:v4];
  }
  else
  {
    id v7 = 0;
  }
  *a3 = v7;
}

id sub_10044A108@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  self;
  id result = (id)swift_dynamicCastObjCClass();
  id v5 = result;
  if (result) {
    id result = v3;
  }
  *a2 = v5;
  return result;
}

BOOL sub_10044A15C(void *a1)
{
  return *a1 != 0;
}

id sub_10044A16C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = *a1;
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10044A180(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  id v1 = [self mainBundle];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 localizedStringForKey:v2 value:0 table:0];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

void sub_10044A28C(unint64_t a1)
{
  uint64_t v2 = a1;
  unint64_t i = (unint64_t)_swiftEmptyArrayStorage;
  v141 = _swiftEmptyArrayStorage;
  uint64_t v4 = (void *)(a1 >> 62);
  if (a1 >> 62) {
    goto LABEL_130;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  uint64_t v137 = v2;
  uint64_t v138 = v5;
  v134 = v4;
  if (v5)
  {
    if (v5 >= 1)
    {
      uint64_t v6 = 0;
      unint64_t v7 = v2 & 0xC000000000000001;
      while (1)
      {
        if (v7) {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v13 = *(id *)(v2 + 8 * v6 + 32);
        }
        CKRecord v12 = v13;
        id v14 = [v13 standardizedContent];
        if (!v14) {
          goto LABEL_14;
        }
        unint64_t v15 = v14;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v16 = [v12 managedObjectContext];
        if (!v16) {
          break;
        }
        uint64_t v8 = v16;
        uint64_t v9 = self;
        NSString v10 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unint64_t v1 = (unint64_t)[v9 notesContainingHashtagWithStandarizedContent:v10 context:v8];

        sub_100031418(0, (unint64_t *)&qword_10069E810);
        sub_1001A3EEC();
        uint64_t v11 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

        CKRecord v12 = (void *)v1;
        uint64_t v2 = v137;
LABEL_7:

        ++v6;
        sub_10022AD38((uint64_t)v11);
        uint64_t v5 = v138;
        if (v138 == v6)
        {
          swift_bridgeObjectRelease();
          uint64_t v4 = v141;
          goto LABEL_20;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v2 = v137;
LABEL_14:
      if ((i & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
      {
        sub_100157AB0(i);
        uint64_t v11 = v17;
      }
      else
      {
        uint64_t v11 = &_swiftEmptySetSingleton;
      }
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_132;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = _swiftEmptyArrayStorage;
LABEL_20:
  uint64_t v18 = sub_1002695C8((unint64_t)v4);
  swift_bridgeObjectRelease();
  if ((v18 & 0xC000000000000001) != 0) {
    uint64_t v133 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v133 = *(void *)(v18 + 16);
  }
  swift_bridgeObjectRelease();
  v141 = (void *)i;
  if (v5)
  {
    unint64_t v136 = v2 & 0xC000000000000001;
    uint64_t v135 = v2 + 32;
    swift_bridgeObjectRetain();
    unint64_t v1 = 0;
    while (1)
    {
      if (v136) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v135 + 8 * v1);
      }
      uint64_t v21 = v20;
      BOOL v22 = __OFADD__(v1++, 1);
      if (v22)
      {
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_3;
      }
      id v23 = [v20 standardizedContent];
      if (!v23) {
        goto LABEL_43;
      }
      unint64_t i = (unint64_t)v23;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v24 = [v21 account];
      if (!v24)
      {
        swift_bridgeObjectRelease();
LABEL_43:
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
          && _CocoaArrayWrapper.endIndex.getter())
        {
          sub_100157AB0((unint64_t)_swiftEmptyArrayStorage);
          os_signpost_id_t v19 = v34;
        }
        else
        {

          os_signpost_id_t v19 = &_swiftEmptySetSingleton;
        }
        goto LABEL_26;
      }
      uint64_t v25 = v24;
      unint64_t i = self;
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v27 = [(id)i visibleSmartFoldersForHashtagStandardizedContent:v26 account:v25];

      sub_100031418(0, (unint64_t *)&unk_1006A53A0);
      uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((unint64_t)v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v28)
        {
LABEL_48:
          swift_bridgeObjectRelease();
          uint64_t v33 = (uint64_t)_swiftEmptyArrayStorage;
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v28 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v28) {
          goto LABEL_48;
        }
      }
      v140 = _swiftEmptyArrayStorage;
      uint64_t v4 = &v140;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v28 < 0) {
        goto LABEL_128;
      }
      uint64_t v29 = 0;
      do
      {
        if ((v2 & 0xC000000000000001) != 0) {
          id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v30 = *(id *)(v2 + 8 * v29 + 32);
        }
        uint64_t v31 = v30;
        ++v29;
        id v32 = [v30 objectID];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v28 != v29);
      uint64_t v33 = (uint64_t)v140;
      swift_bridgeObjectRelease();
      uint64_t v5 = v138;
LABEL_49:
      if ((unint64_t)v33 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v4 = *(void **)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t i = sub_100031418(0, (unint64_t *)&qword_10069E810);
      sub_1001A3EEC();
      v140 = (void *)Set.init(minimumCapacity:)();
      if ((unint64_t)v33 >> 62)
      {
        if (v33 < 0) {
          uint64_t v4 = (void *)v33;
        }
        else {
          uint64_t v4 = (void *)(v33 & 0xFFFFFFFFFFFFFF8);
        }
        swift_bridgeObjectRetain();
        uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v2)
        {
LABEL_58:
          if (v2 < 1) {
            goto LABEL_129;
          }
          if ((v33 & 0xC000000000000001) != 0)
          {
            for (unint64_t i = 0; i != v2; ++i)
            {
              v35 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
              sub_100393BB0(&v139, v35);
            }
          }
          else
          {
            for (uint64_t j = 0; j != v2; ++j)
            {
              v37 = *(void **)(v33 + 8 * j + 32);
              sub_100393BB0(&v139, v37);
            }
          }
        }
      }
      else
      {
        uint64_t v2 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v2) {
          goto LABEL_58;
        }
      }

      swift_bridgeObjectRelease();
      os_signpost_id_t v19 = v140;
      uint64_t v2 = v137;
LABEL_26:
      uint64_t v4 = &v141;
      sub_10022AD38((uint64_t)v19);
      if (v1 == v5)
      {
        swift_bridgeObjectRelease();
        unint64_t i = (unint64_t)v141;
        break;
      }
    }
  }
  uint64_t v38 = sub_1002695C8(i);
  swift_bridgeObjectRelease();
  if ((v38 & 0xC000000000000001) != 0) {
    uint64_t v4 = (void *)__CocoaSet.count.getter();
  }
  else {
    uint64_t v4 = *(void **)(v38 + 16);
  }
  swift_bridgeObjectRelease();
  if (v134)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v39) {
      return;
    }
  }
  else
  {
    uint64_t v39 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v39) {
      return;
    }
  }
  if (v39 != 2)
  {
    if (v39 == 1)
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
LABEL_132:
        id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_78;
      }
      if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v40 = *(id *)(v2 + 32);
LABEL_78:
        v41 = v40;
        id v42 = [v40 displayText];

        if (!v42) {
          return;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v44 = [v43 ic_withHashtagPrefix];

        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v47 = v46;

        if ((uint64_t)v4 > 0)
        {
          sub_10002F214((uint64_t *)&unk_1006A1950);
          uint64_t v48 = swift_allocObject();
          if (v133 <= 0)
          {
            *(_OWORD *)(v48 + 16) = xmmword_100527F30;
            *(void *)(v48 + 56) = &type metadata for String;
            unint64_t v111 = sub_1001BBFD8();
            *(void *)(v48 + 32) = v45;
            *(void *)(v48 + 40) = v47;
            *(void *)(v48 + 96) = &type metadata for Int;
            *(void *)(v48 + 104) = &protocol witness table for Int;
            *(void *)(v48 + 64) = v111;
            *(void *)(v48 + 72) = v4;
          }
          else
          {
            *(_OWORD *)(v48 + 16) = xmmword_100529A00;
            *(void *)(v48 + 56) = &type metadata for String;
            unint64_t v49 = sub_1001BBFD8();
            *(void *)(v48 + 32) = v45;
            *(void *)(v48 + 40) = v47;
            *(void *)(v48 + 96) = &type metadata for Int;
            *(void *)(v48 + 104) = &protocol witness table for Int;
            *(void *)(v48 + 64) = v49;
            *(void *)(v48 + 72) = v133;
            *(void *)(v48 + 136) = &type metadata for Int;
            *(void *)(v48 + 144) = &protocol witness table for Int;
            *(void *)(v48 + 112) = v4;
          }
          id v50 = [self mainBundle];
          NSString v51 = String._bridgeToObjectiveC()();
          id v52 = [v50 localizedStringForKey:v51 value:0 table:0];

          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v55 = v54;

          swift_bridgeObjectRetain();
          sub_10015DE40(v48, v53, v55);
          swift_bridgeObjectRelease_n();
          swift_setDeallocating();
          sub_10002F214(&qword_10069C1A8);
          goto LABEL_117;
        }
        if (v133 > 0)
        {
          sub_10002F214((uint64_t *)&unk_1006A1950);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100527F30;
          *(void *)(inited + 56) = &type metadata for String;
          unint64_t v84 = sub_1001BBFD8();
          *(void *)(inited + 32) = v45;
          *(void *)(inited + 40) = v47;
          *(void *)(inited + 96) = &type metadata for Int;
          *(void *)(inited + 104) = &protocol witness table for Int;
          *(void *)(inited + 64) = v84;
          *(void *)(inited + 72) = v133;
          id v85 = [self mainBundle];
          NSString v86 = String._bridgeToObjectiveC()();
          id v87 = [v85 localizedStringForKey:v86 value:0 table:0];

          uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v90 = v89;

          swift_bridgeObjectRetain();
          sub_10015DE40(inited, v88, v90);
          swift_bridgeObjectRelease_n();
          swift_setDeallocating();
          sub_10002F214(&qword_10069C1A8);
          goto LABEL_125;
        }
        goto LABEL_114;
      }
      __break(1u);
      goto LABEL_134;
    }
    if ((v2 & 0xC000000000000001) == 0)
    {
      if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
        goto LABEL_141;
      }
      id v65 = *(id *)(v2 + 32);
LABEL_94:
      v66 = v65;
      id v67 = [v65 displayText];

      if (!v67) {
        return;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v68 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v69 = [v68 ic_withHashtagPrefix];

      uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v72 = v71;

      if ((uint64_t)v4 <= 0)
      {
        if (v133 <= 0) {
          goto LABEL_114;
        }
        sub_10002F214((uint64_t *)&unk_1006A1950);
        uint64_t v106 = swift_initStackObject();
        *(_OWORD *)(v106 + 16) = xmmword_100529A00;
        *(void *)(v106 + 56) = &type metadata for String;
        unint64_t v107 = sub_1001BBFD8();
        *(void *)(v106 + 32) = v70;
        *(void *)(v106 + 64) = v107;
        *(void *)(v106 + 40) = v72;
        if (!__OFSUB__(v39, 1))
        {
          *(void *)(v106 + 96) = &type metadata for Int;
          *(void *)(v106 + 104) = &protocol witness table for Int;
          *(void *)(v106 + 72) = v39 - 1;
          *(void *)(v106 + 136) = &type metadata for Int;
          *(void *)(v106 + 144) = &protocol witness table for Int;
          *(void *)(v106 + 112) = v133;
          id v108 = [self mainBundle];
          NSString v109 = String._bridgeToObjectiveC()();
          id v110 = [v108 localizedStringForKey:v109 value:0 table:0];
LABEL_122:
          id v121 = v110;

          uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v124 = v123;

          swift_bridgeObjectRetain();
          sub_10015DE40(v106, v122, v124);
          swift_bridgeObjectRelease_n();
          swift_setDeallocating();
          sub_10002F214(&qword_10069C1A8);
          goto LABEL_125;
        }
        goto LABEL_140;
      }
      sub_10002F214((uint64_t *)&unk_1006A1950);
      BOOL v22 = __OFSUB__(v39, 1);
      uint64_t v73 = v39 - 1;
      char v74 = v22;
      if (v133 <= 0)
      {
        uint64_t v112 = swift_initStackObject();
        *(_OWORD *)(v112 + 16) = xmmword_100529A00;
        *(void *)(v112 + 56) = &type metadata for String;
        unint64_t v113 = sub_1001BBFD8();
        *(void *)(v112 + 32) = v70;
        *(void *)(v112 + 64) = v113;
        *(void *)(v112 + 40) = v72;
        if ((v74 & 1) == 0)
        {
          *(void *)(v112 + 96) = &type metadata for Int;
          *(void *)(v112 + 104) = &protocol witness table for Int;
          *(void *)(v112 + 72) = v73;
          *(void *)(v112 + 136) = &type metadata for Int;
          *(void *)(v112 + 144) = &protocol witness table for Int;
          *(void *)(v112 + 112) = v4;
          id v114 = [self mainBundle];
          NSString v115 = String._bridgeToObjectiveC()();
          id v116 = [v114 localizedStringForKey:v115 value:0 table:0];

          uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v119 = v118;

          swift_bridgeObjectRetain();
          sub_10015DE40(v112, v117, v119);
          swift_bridgeObjectRelease_n();
LABEL_124:
          swift_setDeallocating();
          sub_10002F214(&qword_10069C1A8);
          goto LABEL_125;
        }
LABEL_141:
        __break(1u);
        return;
      }
      uint64_t v75 = swift_initStackObject();
      *(_OWORD *)(v75 + 16) = xmmword_10052AC50;
      *(void *)(v75 + 56) = &type metadata for String;
      unint64_t v76 = sub_1001BBFD8();
      *(void *)(v75 + 32) = v70;
      *(void *)(v75 + 64) = v76;
      *(void *)(v75 + 40) = v72;
      if ((v74 & 1) == 0)
      {
        *(void *)(v75 + 96) = &type metadata for Int;
        *(void *)(v75 + 104) = &protocol witness table for Int;
        *(void *)(v75 + 72) = v73;
        *(void *)(v75 + 136) = &type metadata for Int;
        *(void *)(v75 + 144) = &protocol witness table for Int;
        *(void *)(v75 + 112) = v133;
        *(void *)(v75 + 176) = &type metadata for Int;
        *(void *)(v75 + 184) = &protocol witness table for Int;
        *(void *)(v75 + 152) = v4;
        id v77 = [self mainBundle];
        NSString v78 = String._bridgeToObjectiveC()();
        id v79 = [v77 localizedStringForKey:v78 value:0 table:0];

        uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v82 = v81;

        swift_bridgeObjectRetain();
        sub_10015DE40(v75, v80, v82);
        swift_bridgeObjectRelease_n();
        swift_setDeallocating();
        sub_10002F214(&qword_10069C1A8);
LABEL_125:
        swift_arrayDestroy();
        return;
      }
      goto LABEL_138;
    }
LABEL_136:
    id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_94;
  }
  unint64_t v1 = v2 & 0xC000000000000001;
  if ((v2 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v56 = *(id *)(v2 + 32);
      goto LABEL_88;
    }
    __break(1u);
    goto LABEL_136;
  }
LABEL_134:
  id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_88:
  v57 = v56;
  id v58 = [v56 displayText];

  if (!v58) {
    return;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v60 = [v59 ic_withHashtagPrefix];

  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v63 = v62;

  if (v1)
  {
    id v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_107;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
    goto LABEL_139;
  }
  id v64 = *(id *)(v2 + 40);
LABEL_107:
  v91 = v64;
  id v92 = [v64 displayText];

  if (v92)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v93 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v94 = [v93 ic_withHashtagPrefix];

    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v97 = v96;

    if ((uint64_t)v4 > 0)
    {
      sub_10002F214((uint64_t *)&unk_1006A1950);
      if (v133 > 0)
      {
        uint64_t v98 = swift_allocObject();
        *(_OWORD *)(v98 + 16) = xmmword_10052AC50;
        *(void *)(v98 + 56) = &type metadata for String;
        unint64_t v99 = sub_1001BBFD8();
        *(void *)(v98 + 32) = v61;
        *(void *)(v98 + 40) = v63;
        *(void *)(v98 + 96) = &type metadata for String;
        *(void *)(v98 + 104) = v99;
        *(void *)(v98 + 64) = v99;
        *(void *)(v98 + 72) = v95;
        *(void *)(v98 + 80) = v97;
        *(void *)(v98 + 136) = &type metadata for Int;
        *(void *)(v98 + 144) = &protocol witness table for Int;
        *(void *)(v98 + 112) = v133;
        *(void *)(v98 + 176) = &type metadata for Int;
        *(void *)(v98 + 184) = &protocol witness table for Int;
        *(void *)(v98 + 152) = v4;
        id v100 = [self mainBundle];
        NSString v101 = String._bridgeToObjectiveC()();
        id v102 = [v100 localizedStringForKey:v101 value:0 table:0];

        uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v105 = v104;

        swift_bridgeObjectRetain();
        sub_10015DE40(v98, v103, v105);
        swift_bridgeObjectRelease_n();
        swift_setDeallocating();
        sub_10002F214(&qword_10069C1A8);
LABEL_117:
        swift_arrayDestroy();
        swift_deallocClassInstance();
        return;
      }
      uint64_t v125 = swift_initStackObject();
      *(_OWORD *)(v125 + 16) = xmmword_100529A00;
      *(void *)(v125 + 56) = &type metadata for String;
      unint64_t v126 = sub_1001BBFD8();
      *(void *)(v125 + 32) = v61;
      *(void *)(v125 + 40) = v63;
      *(void *)(v125 + 96) = &type metadata for String;
      *(void *)(v125 + 104) = v126;
      *(void *)(v125 + 64) = v126;
      *(void *)(v125 + 72) = v95;
      *(void *)(v125 + 80) = v97;
      *(void *)(v125 + 136) = &type metadata for Int;
      *(void *)(v125 + 144) = &protocol witness table for Int;
      *(void *)(v125 + 112) = v4;
      id v127 = [self mainBundle];
      NSString v128 = String._bridgeToObjectiveC()();
      id v129 = [v127 localizedStringForKey:v128 value:0 table:0];

      uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v132 = v131;

      swift_bridgeObjectRetain();
      sub_10015DE40(v125, v130, v132);
      swift_bridgeObjectRelease_n();
      goto LABEL_124;
    }
    if (v133 > 0)
    {
      sub_10002F214((uint64_t *)&unk_1006A1950);
      uint64_t v106 = swift_initStackObject();
      *(_OWORD *)(v106 + 16) = xmmword_100529A00;
      *(void *)(v106 + 56) = &type metadata for String;
      unint64_t v120 = sub_1001BBFD8();
      *(void *)(v106 + 32) = v61;
      *(void *)(v106 + 40) = v63;
      *(void *)(v106 + 96) = &type metadata for String;
      *(void *)(v106 + 104) = v120;
      *(void *)(v106 + 64) = v120;
      *(void *)(v106 + 72) = v95;
      *(void *)(v106 + 80) = v97;
      *(void *)(v106 + 136) = &type metadata for Int;
      *(void *)(v106 + 144) = &protocol witness table for Int;
      *(void *)(v106 + 112) = v133;
      id v108 = [self mainBundle];
      NSString v109 = String._bridgeToObjectiveC()();
      id v110 = [v108 localizedStringForKey:v109 value:0 table:0];
      goto LABEL_122;
    }
    swift_bridgeObjectRelease();
  }
LABEL_114:
  swift_bridgeObjectRelease();
}

uint64_t sub_10044B7C0(uint64_t a1, uint64_t a2, char a3)
{
  if (a2 < 1) {
    return 0;
  }
  id v5 = [self mainBundle];
  NSString v6 = String._bridgeToObjectiveC()();
  id v8 = [v5 localizedStringForKey:v6 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = static String.localizedStringWithFormat(_:_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  sub_10002F214(&qword_10069D1E0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100524D10;
  *(void *)(v12 + 32) = v9;
  *(void *)(v12 + 40) = v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    id v14 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v17 = *(v14 - 1);
      uint64_t v19 = *v14;
      if (a3)
      {
        swift_bridgeObjectRetain();
        NSString v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v16 = [v15 ic_quotedString];

        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        unint64_t v21 = *(void *)(v12 + 16);
        unint64_t v20 = *(void *)(v12 + 24);
        int64_t v22 = v21 + 1;
        if (v21 >= v20 >> 1)
        {
          BOOL v25 = v20 > 1;
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v21 = *(void *)(v12 + 16);
        unint64_t v24 = *(void *)(v12 + 24);
        int64_t v22 = v21 + 1;
        swift_bridgeObjectRetain();
        if (v21 >= v24 >> 1)
        {
          BOOL v25 = v24 > 1;
LABEL_12:
          uint64_t v26 = v25;
          uint64_t v12 = (uint64_t)sub_1001A847C((void *)v26, v22, 1, (void *)v12);
        }
      }
      *(void *)(v12 + 16) = v22;
      uint64_t v23 = v12 + 16 * v21;
      *(void *)(v23 + 32) = v17;
      *(void *)(v23 + 40) = v19;
      v14 += 2;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_10002F214(&qword_10069FCC8);
  sub_100274D40();
  uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_10044BA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 1) {
    return 0;
  }
  if (a2)
  {
    id v5 = self;
    swift_bridgeObjectRetain();
    id v6 = [v5 mainBundle];
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v6 localizedStringForKey:v7 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10002F214((uint64_t *)&unk_1006A1950);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100524D10;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_1001BBFD8();
    *(void *)(v9 + 32) = a1;
    *(void *)(v9 + 40) = a2;
    a1 = static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_10044BC24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 >= 1 && a2 >= 1)
  {
    id v3 = [self mainBundle];
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 localizedStringForKey:v4 value:0 table:0];

    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v2;
}

void sub_10044BD54(void *a1)
{
  id v2 = [a1 standardizedContent];
  if (v2)
  {
    id v3 = v2;
    id v4 = [a1 managedObjectContext];
    if (v4)
    {
      id v5 = v4;
      id v6 = [self notesContainingHashtagWithStandarizedContent:v3 context:v4];

      sub_100031418(0, (unint64_t *)&qword_10069E810);
      sub_1001A3EEC();
      static Set._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_100157AB0((unint64_t)_swiftEmptyArrayStorage);
  }
}

void sub_10044BE80(void *a1)
{
  id v2 = [a1 standardizedContent];
  if (v2)
  {
    id v3 = v2;
    id v4 = [a1 account];
    if (v4)
    {
      id v5 = v4;
      id v6 = [self visibleSmartFoldersForHashtagStandardizedContent:v3 account:v4];

      sub_100031418(0, (unint64_t *)&unk_1006A53A0);
      unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v8 = sub_100449A9C(v7);
      swift_bridgeObjectRelease();
      sub_1002695C8((unint64_t)v8);

      swift_bridgeObjectRelease();
      return;
    }
  }
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_100157AB0((unint64_t)_swiftEmptyArrayStorage);
  }
}

char *sub_10044BFDC(void *a1)
{
  id v2 = (char *)[a1 displayText];
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v4 = [v3 ic_withHashtagPrefix];

    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    sub_10044BD54(a1);
    if ((v8 & 0xC000000000000001) != 0) {
      uint64_t v9 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    swift_bridgeObjectRelease();
    sub_10044BE80(a1);
    if ((v10 & 0xC000000000000001) != 0) {
      uint64_t v11 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    swift_bridgeObjectRelease();
    if (v11 <= 0)
    {
      if (v9 <= 0)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      sub_10002F214((uint64_t *)&unk_1006A1950);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100527F30;
      *(void *)(inited + 56) = &type metadata for String;
      unint64_t v21 = sub_1001BBFD8();
      *(void *)(inited + 32) = v5;
      *(void *)(inited + 40) = v7;
      *(void *)(inited + 96) = &type metadata for Int;
      *(void *)(inited + 104) = &protocol witness table for Int;
      *(void *)(inited + 64) = v21;
      *(void *)(inited + 72) = v9;
      id v22 = [self mainBundle];
      NSString v23 = String._bridgeToObjectiveC()();
      id v24 = [v22 localizedStringForKey:v23 value:0 table:0];

      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;

      swift_bridgeObjectRetain();
      id v2 = sub_10015DE40(inited, v25, v27);
      swift_bridgeObjectRelease_n();
      swift_setDeallocating();
      sub_10002F214(&qword_10069C1A8);
    }
    else
    {
      sub_10002F214((uint64_t *)&unk_1006A1950);
      if (v9 <= 0)
      {
        uint64_t v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_100527F30;
        *(void *)(v28 + 56) = &type metadata for String;
        unint64_t v29 = sub_1001BBFD8();
        *(void *)(v28 + 32) = v5;
        *(void *)(v28 + 40) = v7;
        *(void *)(v28 + 96) = &type metadata for Int;
        *(void *)(v28 + 104) = &protocol witness table for Int;
        *(void *)(v28 + 64) = v29;
        *(void *)(v28 + 72) = v11;
        id v30 = [self mainBundle];
        NSString v31 = String._bridgeToObjectiveC()();
        id v32 = [v30 localizedStringForKey:v31 value:0 table:0];

        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v35 = v34;

        swift_bridgeObjectRetain();
        id v2 = sub_10015DE40(v28, v33, v35);
      }
      else
      {
        uint64_t v12 = swift_initStackObject();
        *(_OWORD *)(v12 + 16) = xmmword_100529A00;
        *(void *)(v12 + 56) = &type metadata for String;
        unint64_t v13 = sub_1001BBFD8();
        *(void *)(v12 + 32) = v5;
        *(void *)(v12 + 40) = v7;
        *(void *)(v12 + 96) = &type metadata for Int;
        *(void *)(v12 + 104) = &protocol witness table for Int;
        *(void *)(v12 + 64) = v13;
        *(void *)(v12 + 72) = v9;
        *(void *)(v12 + 136) = &type metadata for Int;
        *(void *)(v12 + 144) = &protocol witness table for Int;
        *(void *)(v12 + 112) = v11;
        id v14 = [self mainBundle];
        NSString v15 = String._bridgeToObjectiveC()();
        id v16 = [v14 localizedStringForKey:v15 value:0 table:0];

        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        swift_bridgeObjectRetain();
        id v2 = sub_10015DE40(v12, v17, v19);
      }
      swift_bridgeObjectRelease_n();
      swift_setDeallocating();
      sub_10002F214(&qword_10069C1A8);
    }
    swift_arrayDestroy();
  }
  return v2;
}

uint64_t sub_10044C4CC(void *a1)
{
  uint64_t v3 = (uint64_t)sub_10044BFDC(a1);
  if (v2)
  {
    uint64_t v4 = v2;
    sub_10002F214(&qword_10069D1E0);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100524D10;
    *(void *)(v5 + 32) = v3;
    *(void *)(v5 + 40) = v4;
    sub_10044BD54(a1);
    uint64_t v7 = v6;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    v22[0] = v7;
    v22[1] = (uint64_t)sub_10044CB74;
    v22[2] = v8;
    v22[3] = (uint64_t)sub_10044CC9C;
    v22[4] = 0;
    v22[5] = (uint64_t)sub_10044CCA0;
    v22[6] = 0;
    v22[7] = (uint64_t)sub_10044A108;
    v22[8] = 0;
    v22[9] = (uint64_t)sub_10044A15C;
    v22[10] = 0;
    v22[11] = (uint64_t)sub_10044A16C;
    v22[12] = 0;
    id v9 = a1;
    sub_100449BE0(v22);
    char v11 = v10;
    swift_release();
    swift_bridgeObjectRelease();
    if (v11)
    {
      id v12 = [self mainBundle];
      NSString v13 = String._bridgeToObjectiveC()();
      id v14 = [v12 localizedStringForKey:v13 value:0 table:0];

      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      unint64_t v19 = *(void *)(v5 + 16);
      unint64_t v18 = *(void *)(v5 + 24);
      if (v19 >= v18 >> 1) {
        uint64_t v5 = (uint64_t)sub_1001A847C((void *)(v18 > 1), v19 + 1, 1, (void *)v5);
      }
      *(void *)(v5 + 16) = v19 + 1;
      uint64_t v20 = v5 + 16 * v19;
      *(void *)(v20 + 32) = v15;
      *(void *)(v20 + 40) = v17;
    }
    sub_10002F214(&qword_10069FCC8);
    sub_100274D40();
    uint64_t v3 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
  }
  return v3;
}

char *sub_10044C720(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [a1 displayText];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v8 ic_withHashtagPrefix];

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  sub_10044BD54(a1);
  if ((v13 & 0xC000000000000001) != 0) {
    uint64_t v14 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v14 = *(void *)(v13 + 16);
  }
  swift_bridgeObjectRelease();
  sub_10044BE80(a1);
  if ((v15 & 0xC000000000000001) != 0) {
    uint64_t v16 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v16 = *(void *)(v15 + 16);
  }
  swift_bridgeObjectRelease();
  if (v16 <= 0 && v14 <= 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_10002F214((uint64_t *)&unk_1006A1950);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100527F30;
  *(void *)(inited + 56) = &type metadata for String;
  unint64_t v18 = sub_1001BBFD8();
  *(void *)(inited + 32) = v10;
  *(void *)(inited + 40) = v12;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = v18;
  *(void *)(inited + 64) = v18;
  *(void *)(inited + 72) = a2;
  *(void *)(inited + 80) = a3;
  unint64_t v19 = self;
  swift_bridgeObjectRetain();
  id v20 = [v19 mainBundle];
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 localizedStringForKey:v21 value:0 table:0];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  swift_bridgeObjectRetain();
  uint64_t v26 = sub_10015DE40(inited, v23, v25);
  swift_bridgeObjectRelease_n();
  swift_setDeallocating();
  sub_10002F214(&qword_10069C1A8);
  swift_arrayDestroy();
  return v26;
}

uint64_t sub_10044CB3C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10044CB74(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_10044A08C(*(id *)(v2 + 16), a1, a2);
}

uint64_t sub_10044CB7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10044CC08(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10044CCA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = (void *)a2[1];
    a1[1] = (uint64_t)v5;
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    NSString v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    id v11 = v5;
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10044CD90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_10044CE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  id v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_10044CEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t sub_10044CF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10044CFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10044D054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10044D068);
}

uint64_t sub_10044D068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10044D118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10044D12C);
}

uint64_t sub_10044D12C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for BulkModifyNoteTags()
{
  uint64_t result = qword_1006A7858;
  if (!qword_1006A7858) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10044D220()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10044D2C4(uint64_t a1, uint64_t a2)
{
  v3[197] = v2;
  v3[191] = a2;
  v3[185] = a1;
  uint64_t v4 = *(void *)(type metadata accessor for BulkModifyNoteTags() - 8);
  v3[203] = v4;
  v3[209] = *(void *)(v4 + 64);
  v3[215] = swift_task_alloc();
  v3[221] = swift_task_alloc();
  v3[227] = swift_task_alloc();
  v3[233] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NoteEntity(0);
  v3[234] = v5;
  v3[235] = *(void *)(v5 - 8);
  v3[236] = swift_task_alloc();
  return _swift_task_switch(sub_10044D414, 0, 0);
}

uint64_t sub_10044D414()
{
  uint64_t v1 = *(void *)(v0 + 1480);
  id v2 = [*(id *)(*(void *)(v0 + 1576) + 8) modernManagedObjectContext];
  *(void *)(v0 + 1896) = v2;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 1904) = KeyPath;
  unint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 1880);
    uint64_t v6 = *(void *)(v0 + 1872);
    uint64_t v7 = *(void *)(v0 + 1480);
    unint64_t v39 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    id v41 = v2;
    uint64_t v8 = v7 + v39;
    uint64_t v9 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    uint64_t v42 = KeyPath;
    swift_retain_n();
    swift_bridgeObjectRetain();
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(v0 + 1888);
      sub_100452DDC(v8, v11, type metadata accessor for NoteEntity);
      char v12 = *(unsigned char *)(v11 + *(int *)(v6 + 24));
      uint64_t v13 = sub_100452F2C(v11, type metadata accessor for NoteEntity);
      if (v12) {
        break;
      }
      ++v10;
      v8 += v9;
      if (v4 == v10) {
        goto LABEL_8;
      }
    }
    if (v4 == v10)
    {
LABEL_8:
      uint64_t KeyPath = v42;
      swift_release();
      uint64_t v17 = 0;
LABEL_21:
      id v2 = v41;
      goto LABEL_22;
    }
    uint64_t v17 = 0;
    uint64_t v40 = v7 + v39;
    while (2)
    {
      BOOL v18 = __OFADD__(v17++, 1);
      if (v18)
      {
LABEL_36:
        __break(1u);
      }
      else
      {
        BOOL v18 = __OFADD__(v10++, 1);
        if (!v18)
        {
          if (v10 != v4)
          {
            uint64_t v19 = v40 + v9 * v10;
            while (1)
            {
              if (v10 >= v4)
              {
                __break(1u);
LABEL_35:
                __break(1u);
                goto LABEL_36;
              }
              uint64_t v20 = *(void *)(v0 + 1888);
              sub_100452DDC(v19, v20, type metadata accessor for NoteEntity);
              char v21 = *(unsigned char *)(v20 + *(int *)(v6 + 24));
              uint64_t v13 = sub_100452F2C(v20, type metadata accessor for NoteEntity);
              if (v21) {
                break;
              }
              unint64_t v22 = v10 + 1;
              if (__OFADD__(v10, 1)) {
                goto LABEL_35;
              }
              ++v10;
              v19 += v9;
              if (v22 == v4) {
                goto LABEL_20;
              }
            }
            if (v4 != v10) {
              continue;
            }
          }
LABEL_20:
          uint64_t KeyPath = v42;
          swift_release();
          goto LABEL_21;
        }
      }
      break;
    }
    __break(1u);
    return _swift_asyncLet_get_throwing(v13, v14, v15, v16);
  }
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
LABEL_22:
  sub_100452DDC(*(void *)(v0 + 1576), *(void *)(v0 + 1864), (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
  uint64_t v23 = *(unsigned char **)(v0 + 1864);
  if (v17 >= (uint64_t)v4)
  {
    sub_100452F2C(*(void *)(v0 + 1864), (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
    goto LABEL_27;
  }
  if (*v23)
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_100452F2C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
    if (v24) {
      goto LABEL_31;
    }
LABEL_27:
    uint64_t v25 = *(void *)(v0 + 1816);
    uint64_t v37 = *(void *)(v0 + 1768);
    uint64_t v26 = *(void *)(v0 + 1624);
    uint64_t v27 = *(void *)(v0 + 1576);
    uint64_t v38 = *(void *)(v0 + 1528);
    uint64_t v28 = *(void *)(v0 + 1480);
    sub_100452DDC(v27, v25, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
    int v29 = *(_DWORD *)(v26 + 80);
    *(_DWORD *)(v0 + 2008) = v29;
    uint64_t v30 = v29;
    unint64_t v31 = (v29 + 56) & ~(unint64_t)v29;
    id v32 = (void *)swift_allocObject();
    *(void *)(v0 + 1912) = v32;
    v32[2] = v28;
    v32[3] = sub_10044EBF4;
    v32[4] = KeyPath;
    v32[5] = sub_10044EC20;
    v32[6] = 0;
    sub_100452F8C(v25, (uint64_t)v32 + v31, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10001DFF4(&qword_1006A78B0);
    swift_asyncLet_begin();
    sub_100452DDC(v27, v37, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
    uint64_t v33 = (void *)swift_allocObject();
    *(void *)(v0 + 1920) = v33;
    v33[2] = v38;
    v33[3] = sub_10044EC38;
    v33[4] = 0;
    sub_100452F8C(v37, (uint64_t)v33 + ((v30 + 40) & ~v30), (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10001DFF4(&qword_1006A78C8);
    swift_asyncLet_begin();
    uint64_t v15 = sub_10044DA04;
    uint64_t v13 = v0 + 656;
    uint64_t v14 = v0 + 1432;
    uint64_t v16 = v0 + 1392;
    return _swift_asyncLet_get_throwing(v13, v14, v15, v16);
  }
  swift_bridgeObjectRelease();
  sub_100452F2C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
LABEL_31:
  sub_100173F8C();
  swift_allocError();
  *uint64_t v34 = 1;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release_n();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

uint64_t sub_10044DA04()
{
  v1[241] = v0;
  if (v0)
  {
    return _swift_asyncLet_finish(v1 + 2, v1 + 173, sub_10044E1C4, v1 + 180);
  }
  else
  {
    v1[242] = v1[179];
    swift_bridgeObjectRetain();
    return _swift_asyncLet_get_throwing(v1 + 2, v1 + 173, sub_10044DAD0, v1 + 192);
  }
}

uint64_t sub_10044DAD0()
{
  *(void *)(v1 + 1944) = v0;
  if (v0) {
    id v2 = sub_10044E368;
  }
  else {
    id v2 = sub_10044DB04;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10044DB04()
{
  uint64_t v1 = *(void *)(v0 + 1936);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 2008);
  uint64_t v3 = *(void **)(v0 + 1896);
  uint64_t v4 = *(void *)(v0 + 1720);
  uint64_t v5 = *(void *)(v0 + 1672);
  uint64_t v6 = *(void *)(v0 + 1528);
  uint64_t v7 = *(void *)(v0 + 1384);
  sub_100452DDC(*(void *)(v0 + 1576), v4, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
  uint64_t v8 = (v2 + 32) & ~v2;
  unint64_t v9 = (v5 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 1952) = v10;
  *(void *)(v10 + 16) = v1;
  *(void *)(v10 + 24) = v7;
  sub_100452F8C(v4, v10 + v8, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
  *(void *)(v10 + v9) = v3;
  *(void *)(v10 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = v3;
  char v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 1960) = v12;
  uint64_t v13 = sub_10002F214((uint64_t *)&unk_1006A78D0);
  void *v12 = v0;
  v12[1] = sub_10044DCAC;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 1336, sub_100452B78, v10, v13);
}

uint64_t sub_10044DCAC()
{
  *(void *)(*(void *)v1 + 1968) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10044E58C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10044DDC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10044DDC8()
{
  uint64_t v1 = v0[197];
  uint64_t v2 = v0[167];
  v0[247] = v2;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10069C5C8 + dword_10069C5C8);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[248] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10044DE88;
  return v6(v2, v3, 1);
}

uint64_t sub_10044DE88(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1992) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10044E7B0, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 2000) = a1;
    return _swift_asyncLet_finish(v4 + 16, v4 + 1384, sub_10044E004, v4 + 1584);
  }
}

uint64_t sub_10044E004()
{
  return _swift_task_switch(sub_10044E020, 0, 0);
}

uint64_t sub_10044E020()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_10044E0A0, v0 + 1296);
}

uint64_t sub_10044E0A0()
{
  return _swift_task_switch(sub_10044E0BC, 0, 0);
}

uint64_t sub_10044E0BC()
{
  uint64_t v1 = (void *)v0[237];
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v3 = v0[250];
  return v2(v3);
}

uint64_t sub_10044E1C4()
{
  return _swift_task_switch(sub_10044E1E0, 0, 0);
}

uint64_t sub_10044E1E0()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_10044E260, v0 + 1488);
}

uint64_t sub_10044E260()
{
  return _swift_task_switch(sub_10044E27C, 0, 0);
}

uint64_t sub_10044E27C()
{
  uint64_t v1 = *(void **)(v0 + 1896);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10044E368()
{
  swift_bridgeObjectRelease();
  return _swift_asyncLet_finish(v0 + 16, v0 + 1384, sub_10044E3E8, v0 + 1344);
}

uint64_t sub_10044E3E8()
{
  return _swift_task_switch(sub_10044E404, 0, 0);
}

uint64_t sub_10044E404()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_10044E484, v0 + 1632);
}

uint64_t sub_10044E484()
{
  return _swift_task_switch(sub_10044E4A0, 0, 0);
}

uint64_t sub_10044E4A0()
{
  uint64_t v1 = *(void **)(v0 + 1896);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10044E58C()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 16, v0 + 1384, sub_10044E60C, v0 + 1728);
}

uint64_t sub_10044E60C()
{
  return _swift_task_switch(sub_10044E628, 0, 0);
}

uint64_t sub_10044E628()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_10044E6A8, v0 + 1776);
}

uint64_t sub_10044E6A8()
{
  return _swift_task_switch(sub_10044E6C4, 0, 0);
}

uint64_t sub_10044E6C4()
{
  uint64_t v1 = *(void **)(v0 + 1896);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10044E7B0()
{
  swift_bridgeObjectRelease();
  return _swift_asyncLet_finish(v0 + 16, v0 + 1384, sub_10044E830, v0 + 1824);
}

uint64_t sub_10044E830()
{
  return _swift_task_switch(sub_10044E84C, 0, 0);
}

uint64_t sub_10044E84C()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_10044E8CC, v0 + 1680);
}

uint64_t sub_10044E8CC()
{
  return _swift_task_switch(sub_10044E8E8, 0, 0);
}

uint64_t sub_10044E8E8()
{
  uint64_t v1 = *(void **)(v0 + 1896);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10044E9D4(char *a1, char *a2)
{
  return sub_100275EA4(*a1, *a2);
}

Swift::Int sub_10044E9E0()
{
  return Hasher._finalize()();
}

uint64_t sub_10044EA58()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10044EABC()
{
  return Hasher._finalize()();
}

uint64_t sub_10044EB30@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10062CF60, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10044EB90(uint64_t *a1@<X8>)
{
  uint64_t v2 = 6579297;
  if (*v1) {
    uint64_t v2 = 0x65766F6D6572;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10044EBC4()
{
  if (*v0) {
    return 0x65766F6D6572;
  }
  else {
    return 6579297;
  }
}

uint64_t sub_10044EBF4()
{
  swift_getAtKeyPath();
  return v1;
}

uint64_t sub_10044EC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10044EC50(a1, (uint64_t (*)(void))&type metadata accessor for NoteID, a2);
}

uint64_t sub_10044EC38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10044EC50(a1, (uint64_t (*)(void))&type metadata accessor for TagID, a2);
}

uint64_t sub_10044EC50@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a3, a1, v5);
}

uint64_t sub_10044ECC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_10044ECE4, 0, 0);
}

uint64_t sub_10044ECE4()
{
  uint64_t v1 = *(void *)(v0[4] + 8);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006A7910 + dword_1006A7910);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10044ED98;
  uint64_t v3 = v0[3];
  return v5(v3, v1);
}

uint64_t sub_10044ED98(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return _swift_task_switch(sub_10044EEE4, 0, 0);
  }
}

uint64_t sub_10044EEE4()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10044EF08()
{
  uint64_t v1 = (int *)(type metadata accessor for BulkModifyNoteTags() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;

  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10044F014(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for BulkModifyNoteTags() - 8);
  uint64_t v5 = v1 + 16;
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[3] = v5;
  v7[4] = v6;
  v7[1] = sub_100161724;
  v7[2] = a1;
  return _swift_task_switch(sub_10044ECE4, 0, 0);
}

uint64_t sub_10044F108(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v3 = type metadata accessor for Logger();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NoteID();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NoteEntity(0);
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  sub_10002F214(&qword_10069B1D0);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  sub_10002F214(&qword_1006A7920);
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_10044F310, 0, 0);
}

uint64_t sub_10044F310()
{
  uint64_t v1 = (uint64_t *)v0[5];
  v0[3] = _swiftEmptyArrayStorage;
  uint64_t v2 = *v1;
  v0[21] = *v1;
  v0[22] = v1[1];
  uint64_t v3 = v1[2];
  v0[2] = v2;
  v0[23] = v3;
  v0[24] = v1[3];
  v0[25] = v1[4];
  v0[26] = *(void *)(v2 + 16);
  sub_100282AD4((uint64_t)(v0 + 2));
  uint64_t v4 = v0[26];
  swift_retain();
  uint64_t result = swift_retain();
  if (v4)
  {
    uint64_t v6 = 0;
    while (v4 != v6)
    {
      uint64_t v7 = (uint64_t (*)(uint64_t))v0[22];
      uint64_t v8 = v0[17];
      uint64_t v9 = v6 + 1;
      sub_100452DDC(v0[21]+ ((*(unsigned __int8 *)(v0[15] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[15] + 80))+ *(void *)(v0[15] + 72) * v6, v8, type metadata accessor for NoteEntity);
      if (v7(v8))
      {
        sub_100452F8C(v0[17], v0[19], type metadata accessor for NoteEntity);
        uint64_t v11 = 0;
        goto LABEL_10;
      }
      uint64_t v10 = v0[26];
      uint64_t result = sub_100452F2C(v0[17], type metadata accessor for NoteEntity);
      uint64_t v6 = v9;
      if (v9 == v10)
      {
        uint64_t v9 = v0[26];
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v9 = 0;
LABEL_8:
    uint64_t v11 = 1;
LABEL_10:
    v0[27] = v9;
    uint64_t v13 = v0[18];
    uint64_t v12 = v0[19];
    uint64_t v14 = v0[14];
    uint64_t v15 = v0[15];
    uint64_t v16 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v12, v11, 1, v14);
    sub_10002F1B0(v12, v13, &qword_10069B1D0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      uint64_t v17 = (void (*)(uint64_t))v0[24];
      uint64_t v18 = v0[16];
      sub_100452F8C(v0[18], v18, type metadata accessor for NoteEntity);
      v17(v18);
      sub_100452F2C(v18, type metadata accessor for NoteEntity);
      uint64_t v16 = 0;
    }
    uint64_t v19 = v0[20];
    uint64_t v20 = v0[10];
    uint64_t v21 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v16, 1, v20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      sub_1001DA3A0((uint64_t)(v0 + 2));
      swift_release();
      swift_release();
      uint64_t v22 = v0[3];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = (uint64_t (*)(uint64_t))v0[1];
      return v23(v22);
    }
    else
    {
      (*(void (**)(void, void, void))(v0[11] + 32))(v0[13], v0[20], v0[10]);
      uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006A3B80 + dword_1006A3B80);
      char v24 = (void *)swift_task_alloc();
      v0[28] = v24;
      void *v24 = v0;
      v24[1] = sub_10044F708;
      uint64_t v25 = v0[13];
      uint64_t v26 = v0[6];
      return v27(v25, v26);
    }
  }
  return result;
}

uint64_t sub_10044F708(uint64_t a1)
{
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10044F808, 0, 0);
}

uint64_t sub_10044F808()
{
  uint64_t v62 = v0;
  uint64_t v1 = *(void **)(v0 + 232);
  if (v1)
  {
    id v2 = [*(id *)(v0 + 48) managedObjectContextForObjectID:*(void *)(v0 + 232)];
    *(void *)(v0 + 240) = v2;
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = swift_allocObject();
      *(void *)(v0 + 248) = v4;
      *(void *)(v4 + 16) = v3;
      *(void *)(v4 + 24) = v1;
      v3;
      id v5 = v1;
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 256) = v6;
      uint64_t v7 = sub_10002F214((uint64_t *)&unk_10069E1F0);
      *uint64_t v6 = v0;
      v6[1] = sub_10044FFE4;
      uint64_t v8 = sub_10045303C;
      uint64_t v9 = v0 + 32;
      uint64_t v10 = v4;
      return NSManagedObjectContext.perform<A>(_:)(v9, v8, v10, v7);
    }
    uint64_t v27 = *(void *)(v0 + 104);
    uint64_t v28 = *(void *)(v0 + 80);
    uint64_t v29 = *(void *)(v0 + 88);
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = 0;
    id v31 = v1;
    sub_100188C80(v30, 225, v31);

    swift_release();
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    sub_1001DA3A0(v0 + 16);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 80);
    uint64_t v14 = *(void *)(v0 + 88);
    static Logger.link.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v12, v13);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v21 = *(void *)(v0 + 88);
    uint64_t v22 = *(void *)(v0 + 64);
    uint64_t v58 = *(void *)(v0 + 56);
    uint64_t v59 = *(void *)(v0 + 72);
    if (v17)
    {
      uint64_t v23 = swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      *(void *)(v23 + 4) = sub_10045DA1C(0x69746E4565746F4ELL, 0xEA00000000007974, v61);
      *(_WORD *)(v23 + 12) = 2080;
      sub_100452FF4(&qword_10069C5D0, (void (*)(uint64_t))&type metadata accessor for NoteID);
      uint64_t v24 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter();
      *(void *)(v23 + 14) = sub_10045DA1C(v24, v25, v61);
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v26(v18, v20);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v59, v58);
      uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t))v26)(v19, v20);
    }
    else
    {

      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v34(v18, v20);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v59, v58);
      uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t))v34)(v19, v20);
    }
    unint64_t v36 = *(void *)(v0 + 208);
    unint64_t v35 = *(void *)(v0 + 216);
    if (v35 != v36)
    {
      if (v35 <= v36) {
        uint64_t v37 = *(void *)(v0 + 208);
      }
      else {
        uint64_t v37 = *(void *)(v0 + 216);
      }
      while (v37 != v35)
      {
        uint64_t v38 = *(uint64_t (**)(uint64_t))(v0 + 176);
        uint64_t v39 = *(void *)(v0 + 136);
        unint64_t v40 = v35 + 1;
        sub_100452DDC(*(void *)(v0 + 168)+ ((*(unsigned __int8 *)(*(void *)(v0 + 120) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 120) + 80))+ *(void *)(*(void *)(v0 + 120) + 72) * v35, v39, type metadata accessor for NoteEntity);
        if (v38(v39))
        {
          sub_100452F8C(*(void *)(v0 + 136), *(void *)(v0 + 152), type metadata accessor for NoteEntity);
          uint64_t v42 = 0;
          unint64_t v35 = v40;
          goto LABEL_22;
        }
        uint64_t v41 = *(void *)(v0 + 208);
        uint64_t v9 = sub_100452F2C(*(void *)(v0 + 136), type metadata accessor for NoteEntity);
        unint64_t v35 = v40;
        if (v40 == v41)
        {
          unint64_t v35 = *(void *)(v0 + 208);
          goto LABEL_20;
        }
      }
      __break(1u);
      return NSManagedObjectContext.perform<A>(_:)(v9, v8, v10, v7);
    }
LABEL_20:
    uint64_t v42 = 1;
LABEL_22:
    *(void *)(v0 + 216) = v35;
    uint64_t v44 = *(void *)(v0 + 144);
    uint64_t v43 = *(void *)(v0 + 152);
    uint64_t v45 = *(void *)(v0 + 112);
    uint64_t v46 = *(void *)(v0 + 120);
    uint64_t v47 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v43, v42, 1, v45);
    sub_10002F1B0(v43, v44, &qword_10069B1D0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) != 1)
    {
      uint64_t v48 = *(void (**)(uint64_t))(v0 + 192);
      uint64_t v49 = *(void *)(v0 + 128);
      sub_100452F8C(*(void *)(v0 + 144), v49, type metadata accessor for NoteEntity);
      v48(v49);
      sub_100452F2C(v49, type metadata accessor for NoteEntity);
      uint64_t v47 = 0;
    }
    uint64_t v50 = *(void *)(v0 + 160);
    uint64_t v51 = *(void *)(v0 + 80);
    uint64_t v52 = *(void *)(v0 + 88);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v50, v47, 1, v51);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51) == 1)
    {
      sub_1001DA3A0(v0 + 16);
      swift_release();
      swift_release();
      uint64_t v53 = *(void *)(v0 + 24);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v54 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v54(v53);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 88) + 32))(*(void *)(v0 + 104), *(void *)(v0 + 160), *(void *)(v0 + 80));
      id v60 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006A3B80 + dword_1006A3B80);
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v0 + 224) = v55;
      *uint64_t v55 = v0;
      v55[1] = sub_10044F708;
      uint64_t v56 = *(void *)(v0 + 104);
      uint64_t v57 = *(void *)(v0 + 48);
      return v60(v56, v57);
    }
  }
}

uint64_t sub_10044FFE4()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    id v2 = sub_100450520;
  }
  else
  {
    swift_release();
    id v2 = sub_100450114;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100450114()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v0[3] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[3] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_22;
  }
  while (1)
  {
    id v2 = (void *)v0[29];
    uint64_t v1 = (void *)v0[30];
    uint64_t v3 = v0[13];
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[11];
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    unint64_t v7 = v0[26];
    unint64_t v6 = v0[27];
    if (v6 == v7) {
      break;
    }
    if (v6 <= v7) {
      uint64_t v8 = v0[26];
    }
    else {
      uint64_t v8 = v0[27];
    }
    while (v8 != v6)
    {
      uint64_t v9 = (uint64_t (*)(uint64_t))v0[22];
      uint64_t v10 = v0[17];
      unint64_t v11 = v6 + 1;
      sub_100452DDC(v0[21]+ ((*(unsigned __int8 *)(v0[15] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[15] + 80))+ *(void *)(v0[15] + 72) * v6, v10, type metadata accessor for NoteEntity);
      if (v9(v10))
      {
        sub_100452F8C(v0[17], v0[19], type metadata accessor for NoteEntity);
        uint64_t v13 = 0;
        unint64_t v6 = v11;
        goto LABEL_12;
      }
      uint64_t v12 = v0[26];
      sub_100452F2C(v0[17], type metadata accessor for NoteEntity);
      unint64_t v6 = v11;
      if (v11 == v12)
      {
        unint64_t v6 = v0[26];
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_22:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
LABEL_10:
  uint64_t v13 = 1;
LABEL_12:
  v0[27] = v6;
  uint64_t v15 = v0[18];
  uint64_t v14 = v0[19];
  uint64_t v16 = v0[14];
  uint64_t v17 = v0[15];
  uint64_t v18 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v14, v13, 1, v16);
  sub_10002F1B0(v14, v15, &qword_10069B1D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    uint64_t v19 = (void (*)(uint64_t))v0[24];
    uint64_t v20 = v0[16];
    sub_100452F8C(v0[18], v20, type metadata accessor for NoteEntity);
    v19(v20);
    sub_100452F2C(v20, type metadata accessor for NoteEntity);
    uint64_t v18 = 0;
  }
  uint64_t v21 = v0[20];
  uint64_t v22 = v0[10];
  uint64_t v23 = v0[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, v18, 1, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_1001DA3A0((uint64_t)(v0 + 2));
    swift_release();
    swift_release();
    uint64_t v24 = v0[3];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v25 = (uint64_t (*)(uint64_t))v0[1];
    return v25(v24);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[11] + 32))(v0[13], v0[20], v0[10]);
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006A3B80 + dword_1006A3B80);
    uint64_t v27 = (void *)swift_task_alloc();
    v0[28] = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_10044F708;
    uint64_t v28 = v0[13];
    uint64_t v29 = v0[6];
    return v30(v28, v29);
  }
}

uint64_t sub_100450520()
{
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1001DA3A0(v0 + 16);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100450634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TagID();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for TagEntity();
  v4[16] = v7;
  v4[17] = *(void *)(v7 - 8);
  v4[18] = swift_task_alloc();
  sub_10002F214(&qword_10069B528);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  sub_10002F214((uint64_t *)&unk_1006A78F0);
  v4[21] = swift_task_alloc();
  return _swift_task_switch(sub_100450830, 0, 0);
}

uint64_t sub_100450830()
{
  v0[2] = _swiftEmptyArrayStorage;
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[5];
  uint64_t v3 = *(void *)(v2 + 16);
  v0[22] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v3)
  {
    sub_100452DDC(v2 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), v0[20], (uint64_t (*)(void))type metadata accessor for TagEntity);
    uint64_t v4 = 0;
    uint64_t v1 = v0[17];
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 1;
  }
  v0[23] = v5;
  uint64_t v7 = v0[19];
  uint64_t v6 = v0[20];
  uint64_t v8 = v0[16];
  uint64_t v9 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, v4, 1, v8);
  sub_10002F1B0(v6, v7, &qword_10069B528);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v7, 1, v8) != 1)
  {
    uint64_t v10 = v0[18];
    unint64_t v11 = (void (*)(uint64_t))v0[6];
    sub_100452F8C(v0[19], v10, (uint64_t (*)(void))type metadata accessor for TagEntity);
    v11(v10);
    sub_100452F2C(v10, (uint64_t (*)(void))type metadata accessor for TagEntity);
    uint64_t v9 = 0;
  }
  uint64_t v12 = v0[21];
  uint64_t v13 = v0[12];
  uint64_t v14 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v9, 1, v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v15 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
    return v16(v15);
  }
  else
  {
    uint64_t v18 = (void *)v0[8];
    (*(void (**)(void, void, void))(v0[13] + 32))(v0[15], v0[21], v0[12]);
    id v19 = [v18 modernManagedObjectContext];
    v0[24] = v19;
    uint64_t v20 = self;
    TagID.displayText.getter();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v20 standardizedHashtagRepresentationForDisplayText:v21];

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    uint64_t v26 = (void *)swift_allocObject();
    v0[25] = v26;
    v26[2] = v23;
    v26[3] = v25;
    v26[4] = v19;
    v19;
    uint64_t v27 = (void *)swift_task_alloc();
    v0[26] = v27;
    uint64_t v28 = sub_10002F214(&qword_10069D520);
    *uint64_t v27 = v0;
    v27[1] = sub_100450C14;
    return NSManagedObjectContext.perform<A>(_:)(v0 + 3, sub_10016F108, v26, v28);
  }
}

uint64_t sub_100450C14()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100450D2C, 0, 0);
}

uint64_t sub_100450D2C()
{
  uint64_t v64 = v0;

  uint64_t v1 = *(void **)(v0 + 24);
  *(void *)(v0 + 216) = v1;
  if (v1)
  {
    id v2 = [*(id *)(v0 + 64) managedObjectContextForObjectID:v1];
    *(void *)(v0 + 224) = v2;
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = swift_allocObject();
      *(void *)(v0 + 232) = v4;
      *(void *)(v4 + 16) = v3;
      *(void *)(v4 + 24) = v1;
      v3;
      id v5 = v1;
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v6;
      uint64_t v7 = sub_100031418(0, (unint64_t *)&qword_1006A49F0);
      *uint64_t v6 = v0;
      v6[1] = sub_10045152C;
      uint64_t v8 = sub_100452EFC;
      uint64_t v9 = v0 + 32;
      uint64_t v10 = (void *)v4;
      goto LABEL_21;
    }
    uint64_t v28 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 96);
    uint64_t v30 = *(void *)(v0 + 104);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = 0;
    id v32 = v1;
    sub_10016A03C(v31, 225, v32);

    swift_release();
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 120);
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 104);
    static Logger.link.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 96);
    uint64_t v21 = *(void *)(v0 + 104);
    uint64_t v22 = *(void *)(v0 + 80);
    uint64_t v23 = *(void *)(v0 + 88);
    uint64_t v62 = *(void *)(v0 + 72);
    if (v17)
    {
      uint64_t v61 = *(void *)(v0 + 88);
      uint64_t v24 = swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315394;
      *(void *)(v24 + 4) = sub_10045DA1C(0x7469746E45676154, 0xE900000000000079, v63);
      *(_WORD *)(v24 + 12) = 2080;
      sub_100452FF4((unint64_t *)&unk_1006A7900, (void (*)(uint64_t))&type metadata accessor for TagID);
      uint64_t v25 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter();
      *(void *)(v24 + 14) = sub_10045DA1C(v25, v26, v63);
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v27(v18, v20);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v61, v62);
      uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t))v27)(v19, v20);
    }
    else
    {

      unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v35(v18, v20);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v62);
      uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t))v35)(v19, v20);
    }
    unint64_t v36 = *(void *)(v0 + 176);
    unint64_t v37 = *(void *)(v0 + 184);
    if (v37 == v36)
    {
      uint64_t v38 = 1;
    }
    else
    {
      if (v37 >= v36)
      {
        __break(1u);
        return NSManagedObjectContext.perform<A>(_:)(v9, v8, v10, v7);
      }
      sub_100452DDC(*(void *)(v0 + 40)+ ((*(unsigned __int8 *)(*(void *)(v0 + 136) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 136) + 80))+ *(void *)(*(void *)(v0 + 136) + 72) * v37, *(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for TagEntity);
      uint64_t v38 = 0;
      ++v37;
    }
    *(void *)(v0 + 184) = v37;
    uint64_t v40 = *(void *)(v0 + 152);
    uint64_t v39 = *(void *)(v0 + 160);
    uint64_t v41 = *(void *)(v0 + 128);
    uint64_t v42 = *(void *)(v0 + 136);
    uint64_t v43 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v39, v38, 1, v41);
    sub_10002F1B0(v39, v40, &qword_10069B528);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) != 1)
    {
      uint64_t v44 = *(void *)(v0 + 144);
      uint64_t v45 = *(void (**)(uint64_t))(v0 + 48);
      sub_100452F8C(*(void *)(v0 + 152), v44, (uint64_t (*)(void))type metadata accessor for TagEntity);
      v45(v44);
      sub_100452F2C(v44, (uint64_t (*)(void))type metadata accessor for TagEntity);
      uint64_t v43 = 0;
    }
    uint64_t v46 = *(void *)(v0 + 168);
    uint64_t v47 = *(void *)(v0 + 96);
    uint64_t v48 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v46, v43, 1, v47);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) != 1)
    {
      uint64_t v51 = *(void **)(v0 + 64);
      (*(void (**)(void, void, void))(*(void *)(v0 + 104) + 32))(*(void *)(v0 + 120), *(void *)(v0 + 168), *(void *)(v0 + 96));
      id v52 = [v51 modernManagedObjectContext];
      *(void *)(v0 + 192) = v52;
      uint64_t v53 = self;
      TagID.displayText.getter();
      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v55 = [v53 standardizedHashtagRepresentationForDisplayText:v54];

      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v58 = v57;

      uint64_t v59 = (void *)swift_allocObject();
      *(void *)(v0 + 200) = v59;
      v59[2] = v56;
      v59[3] = v58;
      v59[4] = v52;
      v52;
      id v60 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v60;
      uint64_t v7 = sub_10002F214(&qword_10069D520);
      *id v60 = v0;
      v60[1] = sub_100450C14;
      uint64_t v8 = sub_10016F108;
      uint64_t v9 = v0 + 24;
      uint64_t v10 = v59;
LABEL_21:
      return NSManagedObjectContext.perform<A>(_:)(v9, v8, v10, v7);
    }
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v49 = *(void *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v50(v49);
  }
}

uint64_t sub_10045152C()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    id v2 = sub_100451A9C;
  }
  else
  {
    swift_release();
    id v2 = sub_10045165C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10045165C()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  id v2 = (void *)v0[27];
  uint64_t v1 = (void *)v0[28];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[13];
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  unint64_t v10 = v0[22];
  unint64_t v11 = v0[23];
  if (v11 == v10)
  {
    uint64_t v12 = 1;
  }
  else
  {
    if (v11 >= v10)
    {
      __break(1u);
      return NSManagedObjectContext.perform<A>(_:)(v6, v7, v8, v9);
    }
    sub_100452DDC(v0[5]+ ((*(unsigned __int8 *)(v0[17] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[17] + 80))+ *(void *)(v0[17] + 72) * v11, v0[20], (uint64_t (*)(void))type metadata accessor for TagEntity);
    uint64_t v12 = 0;
    ++v11;
  }
  v0[23] = v11;
  uint64_t v14 = v0[19];
  uint64_t v13 = v0[20];
  uint64_t v15 = v0[16];
  uint64_t v16 = v0[17];
  uint64_t v17 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v13, v12, 1, v15);
  sub_10002F1B0(v13, v14, &qword_10069B528);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    uint64_t v18 = v0[18];
    uint64_t v19 = (void (*)(uint64_t))v0[6];
    sub_100452F8C(v0[19], v18, (uint64_t (*)(void))type metadata accessor for TagEntity);
    v19(v18);
    sub_100452F2C(v18, (uint64_t (*)(void))type metadata accessor for TagEntity);
    uint64_t v17 = 0;
  }
  uint64_t v20 = v0[21];
  uint64_t v21 = v0[12];
  uint64_t v22 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, v17, 1, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
  {
    unint64_t v26 = (void *)v0[8];
    (*(void (**)(void, void, void))(v0[13] + 32))(v0[15], v0[21], v0[12]);
    id v27 = [v26 modernManagedObjectContext];
    v0[24] = v27;
    uint64_t v28 = self;
    TagID.displayText.getter();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v30 = [v28 standardizedHashtagRepresentationForDisplayText:v29];

    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    uint64_t v34 = (void *)swift_allocObject();
    v0[25] = v34;
    v34[2] = v31;
    v34[3] = v33;
    v34[4] = v27;
    v27;
    unint64_t v35 = (void *)swift_task_alloc();
    v0[26] = v35;
    uint64_t v9 = sub_10002F214(&qword_10069D520);
    void *v35 = v0;
    v35[1] = sub_100450C14;
    uint64_t v7 = sub_10016F108;
    uint64_t v6 = (uint64_t)(v0 + 3);
    uint64_t v8 = v34;
    return NSManagedObjectContext.perform<A>(_:)(v6, v7, v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v23 = v0[2];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(uint64_t))v0[1];
  return v24(v23);
}

uint64_t sub_100451A9C()
{
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100451B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_100451BC0, 0, 0);
}

uint64_t sub_100451BC0()
{
  uint64_t v1 = *(void *)(v0[6] + 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006A78E0 + dword_1006A78E0);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100451C78;
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[3];
  return v7(v5, v3, v4, v1);
}

uint64_t sub_100451C78(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    return _swift_task_switch(sub_100451DC4, 0, 0);
  }
}

uint64_t sub_100451DC4()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100451DE8()
{
  uint64_t v1 = (int *)(type metadata accessor for BulkModifyNoteTags() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v3;

  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100451EEC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for BulkModifyNoteTags() - 8);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 8) = sub_10017B61C;
  *(void *)(v7 + 40) = v5;
  *(void *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 24) = v8;
  *(void *)(v7 + 16) = a1;
  return _swift_task_switch(sub_100451BC0, 0, 0);
}

uint64_t sub_100451FEC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unint64_t v7 = v6;
  id v70 = a4;
  id v87 = a3;
  id v69 = a6;
  uint64_t v82 = type metadata accessor for BulkModifyNoteTags();
  __chkstk_darwin(v82);
  uint64_t v12 = (uint64_t)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for NoteID();
  uint64_t v75 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  v83 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v71 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v85 = (char *)v67 - v18;
  uint64_t v95 = &_swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_61;
  }
  uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  if (v19)
  {
    unint64_t v68 = v7;
    unint64_t v21 = 0;
    unint64_t v91 = a1 & 0xC000000000000001;
    uint64_t v79 = a1 & 0xFFFFFFFFFFFFFF8;
    NSString v78 = (char *)(a1 + 32);
    uint64_t v22 = a2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v84 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0) {
      uint64_t v22 = a2;
    }
    v67[1] = v22;
    unint64_t v7 = a2 & 0xC000000000000001;
    uint64_t v73 = v75 + 32;
    id v77 = (void (**)(char *, unsigned __int8 *, uint64_t))(v71 + 16);
    unint64_t v76 = (void (**)(char *, uint64_t))(v71 + 8);
    *(void *)&long long v20 = 138543362;
    long long v72 = v20;
    NSString v86 = v17;
    unint64_t v89 = a1;
    uint64_t v90 = v12;
    uint64_t v88 = v19;
    uint64_t v80 = a5;
    uint64_t v81 = v14;
    while (1)
    {
      if (v91)
      {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v21 >= *(void *)(v79 + 16)) {
          goto LABEL_60;
        }
        id v24 = *(id *)&v78[8 * v21];
      }
      uint64_t v25 = v24;
      BOOL v26 = __OFADD__(v21, 1);
      unint64_t v27 = v21 + 1;
      if (v26)
      {
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_3;
      }
      unint64_t v93 = v27;
      self;
      uint64_t v28 = swift_dynamicCastObjCClass();
      if (!v28)
      {
        (*v77)(v85, &v87[*(int *)(v82 + 24)], v14);
        uint64_t v38 = v25;
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = swift_slowAlloc();
          uint64_t v42 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = v72;
          id v43 = [v38 objectID];
          *(void *)(v41 + 4) = v43;
          *uint64_t v42 = v43;

          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Object with ID %{public}@ was not an ICNote", (uint8_t *)v41, 0xCu);
          sub_10002F214(&qword_10069FD50);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v39 = v38;
        }
        uint64_t v17 = v86;

        (*v76)(v85, v14);
        goto LABEL_8;
      }
      a1 = v28;
      id v92 = v25;
      if ((unint64_t)a2 >> 62)
      {
        id v45 = v25;
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        if (!v12)
        {
LABEL_7:
          id v23 = v92;

          swift_bridgeObjectRelease();
LABEL_8:
          uint64_t v12 = v90;
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = *(void *)(v84 + 16);
        id v29 = v25;
        swift_bridgeObjectRetain();
        if (!v12) {
          goto LABEL_7;
        }
      }
      if (v12 < 1) {
        goto LABEL_59;
      }
      a5 = 0;
      uint64_t v17 = 0;
      uint64_t v14 = *v87;
      do
      {
        if (v7)
        {
          id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          id v30 = *(id *)(a2 + 8 * (void)v17 + 32);
          if (v14)
          {
LABEL_24:
            unsigned int v31 = [(id)a1 removeHashtag:v30];

            if (!v31) {
              goto LABEL_21;
            }
            goto LABEL_20;
          }
        }
        id v32 = [(id)a1 addHashtagToNoteBodyIfMissing:v30];

        if (!v32) {
          goto LABEL_21;
        }

LABEL_20:
        BOOL v26 = __OFADD__(a5++, 1);
        if (v26)
        {
          __break(1u);
          goto LABEL_58;
        }
LABEL_21:
        ++v17;
      }
      while ((char *)v12 != v17);
      swift_bridgeObjectRelease();
      if (a5 <= 0)
      {
        id v44 = v92;

        a5 = v80;
        uint64_t v14 = v81;
        uint64_t v17 = v86;
        goto LABEL_8;
      }
      sub_100031418(0, (unint64_t *)&qword_10069FD10);
      ICSearchIndexableNote<>.entityIdentifier.getter();
      unint64_t v33 = (unint64_t)v95;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a5 = v80;
      uint64_t v14 = v81;
      uint64_t v17 = v86;
      uint64_t v12 = v90;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        unint64_t v33 = sub_1001A9264(0, *(void *)(v33 + 16) + 1, 1, v33);
      }
      unint64_t v36 = *(void *)(v33 + 16);
      unint64_t v35 = *(void *)(v33 + 24);
      if (v36 >= v35 >> 1) {
        unint64_t v33 = sub_1001A9264(v35 > 1, v36 + 1, 1, v33);
      }
      *(void *)(v33 + 16) = v36 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v75 + 32))(v33+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(void *)(v75 + 72) * v36, v83, v74);
      id v37 = v92;

      uint64_t v95 = (void *)v33;
LABEL_9:
      a1 = v89;
      unint64_t v21 = v93;
      if (v93 == v88)
      {
        swift_bridgeObjectRelease();
        unint64_t v7 = v68;
        goto LABEL_44;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_44:
  id v46 = v70;
  if ([v70 hasChanges])
  {
    v96[0] = 0;
    unsigned int v47 = [v46 save:v96];
    id v48 = v96[0];
    if (!v47)
    {
      id v65 = v96[0];
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      return swift_willThrow();
    }
    uint64_t v49 = (uint64_t)v87;
    uint64_t v50 = v71;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v71 + 16))(v17, &v87[*(int *)(v82 + 24)], v14);
    uint64_t v51 = v95;
    sub_100452DDC(v49, v12, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v52 = v48;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    int v55 = v54;
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = swift_slowAlloc();
      LODWORD(v93) = v55;
      uint64_t v57 = v56;
      uint64_t v58 = (void *)swift_slowAlloc();
      uint64_t v81 = v14;
      v96[0] = v58;
      *(_DWORD *)uint64_t v57 = 134349571;
      NSString v86 = v17;
      unint64_t v68 = v7;
      unint64_t v59 = v51[2];
      swift_bridgeObjectRelease();
      unint64_t v94 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2082;
      if (*(unsigned char *)v12) {
        uint64_t v60 = 0x65766F6D6572;
      }
      else {
        uint64_t v60 = 6579297;
      }
      if (*(unsigned char *)v12) {
        unint64_t v61 = 0xE600000000000000;
      }
      else {
        unint64_t v61 = 0xE300000000000000;
      }
      unint64_t v94 = sub_10045DA1C(v60, v61, (uint64_t *)v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100452F2C(v12, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);
      *(_WORD *)(v57 + 22) = 2085;
      type metadata accessor for TagEntity();
      swift_bridgeObjectRetain();
      uint64_t v62 = Array.description.getter();
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      unint64_t v94 = sub_10045DA1C(v62, v64, (uint64_t *)v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v93, "Updated %{public}ld notes to %{public}s tags: %{sensitive}s", (uint8_t *)v57, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v50 + 8))(v86, v81);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100452F2C(v12, (uint64_t (*)(void))type metadata accessor for BulkModifyNoteTags);

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v17, v14);
    }
  }
  uint64_t result = swift_beginAccess();
  *id v69 = v95;
  return result;
}

uint64_t sub_100452A48()
{
  uint64_t v1 = (int *)(type metadata accessor for BulkModifyNoteTags() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3;

  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t sub_100452B78@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for BulkModifyNoteTags() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100451FEC(*(void *)(v1 + 16), *(void *)(v1 + 24), (unsigned __int8 *)(v1 + v4), *(void **)(v1 + v5), *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), a1);
}

id sub_100452C20(void *a1, uint64_t a2)
{
  v7[0] = 0;
  id v2 = [a1 existingObjectWithID:a2 error:v7];
  id v3 = v7[0];
  if (v2)
  {
    v7[1] = &OBJC_PROTOCOL___ICSearchIndexableNote;
    id v4 = (id)swift_dynamicCastObjCProtocolUnconditional();
    id v5 = v3;
  }
  else
  {
    id v4 = v7[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

id sub_100452CFC(void *a1, uint64_t a2)
{
  id v7 = 0;
  id v2 = [a1 existingObjectWithID:a2 error:&v7];
  id v3 = v7;
  if (v2)
  {
    self;
    id v4 = (id)swift_dynamicCastObjCClassUnconditional();
    id v5 = v3;
  }
  else
  {
    id v4 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

uint64_t sub_100452DDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100452E44()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100452E84()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100452EBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_100452EFC@<X0>(void *a1@<X8>)
{
  id result = sub_100452CFC(*(void **)(v1 + 16), *(void *)(v1 + 24));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100452F2C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100452F8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100452FF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10045303C@<X0>(void *a1@<X8>)
{
  id result = sub_100452C20(*(void **)(v1 + 16), *(void *)(v1 + 24));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BulkModifyNoteTags.ChangeOperation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100453138);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BulkModifyNoteTags.ChangeOperation()
{
  return &type metadata for BulkModifyNoteTags.ChangeOperation;
}

unint64_t sub_100453174()
{
  unint64_t result = qword_1006A7928;
  if (!qword_1006A7928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7928);
  }
  return result;
}

uint64_t sub_1004531CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100032974(v0, qword_1006A7930);
  sub_10003293C(v0, (uint64_t)qword_1006A7930);
  return static Logger.application.getter();
}

uint64_t sub_100453354()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_10002F214(&qword_1006A7A80);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(v3);
  id v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR___ICAppStoreRatingObserver_isObserving;
  if ((v1[OBJC_IVAR___ICAppStoreRatingObserver_isObserving] & 1) == 0)
  {
    uint64_t v31 = ObjectType;
    if (qword_10069B060 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10003293C(v9, (uint64_t)qword_1006A7930);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v30 = v3;
      aBlock[0] = v13;
      id v29 = v7;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v14 = _typeName(_:qualified:)();
      unint64_t v32 = sub_10045DA1C(v14, v15, aBlock);
      id v7 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: startObserving", v12, 0xCu);
      swift_arrayDestroy();
      uint64_t v3 = v30;
      swift_slowDealloc();
      swift_slowDealloc();
    }

    v1[v8] = 1;
    id v16 = [self defaultCenter];
    [v16 addObserver:v1 selector:"sceneWillEnterForeground" name:UISceneWillEnterForegroundNotification object:0];
    [v16 addObserver:v1 selector:"noteEditorDidEditNote" name:ICNoteEditorViewControllerDidEditNote object:0];

    id v17 = [*(id *)(*(void *)&v1[OBJC_IVAR___ICAppStoreRatingObserver_appStoreRatingController]+ OBJC_IVAR___ICAppStoreRatingController_windowScene) keyWindow];
    if (v17)
    {
      uint64_t v18 = v17;
      id v19 = sub_100453C7C();
      [v18 addGestureRecognizer:v19];

      id v20 = sub_100453D50();
      [v18 addGestureRecognizer:v20];
    }
    id v21 = sub_100453F38();
    uint64_t v22 = *(void **)&v1[OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController];
    *(void *)&v1[OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController] = v21;

    id v23 = *(void **)&v1[OBJC_IVAR___ICAppStoreRatingObserver_managedObjectContext];
    uint64_t v24 = swift_allocObject();
    uint64_t v25 = v31;
    *(void *)(v24 + 16) = v1;
    *(void *)(v24 + 24) = v25;
    aBlock[4] = (uint64_t)sub_1004549FC;
    aBlock[5] = v24;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100262E2C;
    aBlock[3] = (uint64_t)&unk_10063C358;
    BOOL v26 = _Block_copy(aBlock);
    unint64_t v27 = v1;
    swift_release();
    [v23 performBlock:v26];
    _Block_release(v26);
    swift_getKeyPath();
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_100454A64();
    uint64_t v28 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    *(void *)&v27[OBJC_IVAR___ICAppStoreRatingObserver_didRequestRatingObservation] = v28;
    return swift_release();
  }
  return result;
}

uint64_t sub_100453818(unsigned __int8 *a1, void *a2)
{
  uint64_t v4 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  uint64_t result = __chkstk_darwin(v4 - 8);
  id v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v6) = *a1;
  *(unsigned char *)(*a2 + OBJC_IVAR___ICAppStoreRatingController_didRequestRating) = v6;
  if (v6 == 1)
  {
    static Date.now.getter();
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
    return sub_100490B80((uint64_t)v7);
  }
  return result;
}

void sub_100453900(unsigned char *a1)
{
  if (*a1 == 1)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v2 = (void *)Strong;
      sub_100453960();
    }
  }
}

uint64_t sub_100453960()
{
  uint64_t v1 = v0;
  uint64_t result = swift_getObjectType();
  uint64_t v3 = OBJC_IVAR___ICAppStoreRatingObserver_isObserving;
  if (*(unsigned char *)(v0 + OBJC_IVAR___ICAppStoreRatingObserver_isObserving) == 1)
  {
    if (qword_10069B060 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10003293C(v4, (uint64_t)qword_1006A7930);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)id v7 = 136315138;
      uint64_t v8 = _typeName(_:qualified:)();
      sub_10045DA1C(v8, v9, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: stopObserving", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(unsigned char *)(v1 + v3) = 0;
    id v10 = [self defaultCenter];
    [v10 removeObserver:v1];

    id v11 = [*(id *)(*(void *)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_appStoreRatingController)+ OBJC_IVAR___ICAppStoreRatingController_windowScene) keyWindow];
    if (v11)
    {
      uint64_t v12 = v11;
      id v13 = sub_100453C7C();
      [v12 removeGestureRecognizer:v13];

      id v14 = sub_100453D50();
      [v12 removeGestureRecognizer:v14];
    }
    unint64_t v15 = *(void **)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController);
    *(void *)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController) = 0;

    *(void *)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_didRequestRatingObservation) = 0;
    return swift_release();
  }
  return result;
}

id sub_100453C7C()
{
  uint64_t v1 = OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___tapGestureRecognizer;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___tapGestureRecognizer);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___tapGestureRecognizer);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UITapGestureRecognizer) initWithTarget:v0 action:"didRecognizeGesture"];
    [v4 setRequiresExclusiveTouchType:0];
    [v4 setCancelsTouchesInView:0];
    [v4 setDelaysTouchesEnded:0];
    [v4 setDelegate:v0];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_100453D50()
{
  uint64_t v1 = OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___panGestureRecognizer;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___panGestureRecognizer);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___panGestureRecognizer);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UIPanGestureRecognizer) initWithTarget:v0 action:"didRecognizeGesture"];
    [v4 setRequiresExclusiveTouchType:0];
    [v4 setCancelsTouchesInView:0];
    [v4 setDelegate:v0];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_100453F38()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  id v3 = [v2 newFetchRequestForNotes];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 predicateForNotesInAccountWithIdentifier:v4];

  uint64_t v6 = *(void *)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_managedObjectContext);
  id v7 = [v2 predicateForVisibleNotesInContext:v6];
  sub_10002F214(&qword_10069BA00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100524CE0;
  *(void *)(v8 + 32) = v5;
  *(void *)(v8 + 40) = v7;
  specialized Array._endMutation()();
  sub_100031418(0, &qword_1006A1560);
  id v9 = v5;
  id v10 = v7;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [self andPredicateWithSubpredicates:isa];

  [v3 setPredicate:v12];
  id v13 = [objc_allocWithZone((Class)NSFetchedResultsController) initWithFetchRequest:v3 managedObjectContext:v6 sectionNameKeyPath:0 cacheName:0];
  [v13 setDelegate:v1];

  return v13;
}

void sub_10045410C(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController;
  id v3 = *(void **)(a1 + OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController);
  if (v3)
  {
    id v17 = 0;
    if ([v3 performFetch:&v17])
    {
      NSString v4 = *(void **)(a1 + v2);
      id v5 = v17;
      if (v4)
      {
        id v6 = [v4 fetchedObjects];
        if (v6)
        {
          id v7 = v6;
          sub_100031418(0, (unint64_t *)&qword_10069FD10);
          unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v8 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          sub_100490234(v9);
        }
      }
    }
    else
    {
      id v10 = v17;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_10069B060 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10003293C(v11, (uint64_t)qword_1006A7930);
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        id v14 = (uint8_t *)swift_slowAlloc();
        id v17 = (id)swift_slowAlloc();
        *(_DWORD *)id v14 = 136315138;
        uint64_t v15 = _typeName(_:qualified:)();
        sub_10045DA1C(v15, v16, (uint64_t *)&v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: setUpNoteCountIndexer", v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      swift_errorRelease();
    }
  }
}

uint64_t type metadata accessor for AppStoreRatingObserver()
{
  return self;
}

id sub_100454764(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v6 = v5;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v6[OBJC_IVAR___ICAppStoreRatingObserver_isObserving] = 0;
  *(void *)&v6[OBJC_IVAR___ICAppStoreRatingObserver_didRequestRatingObservation] = 0;
  *(void *)&v6[OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___tapGestureRecognizer] = 0;
  *(void *)&v6[OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___panGestureRecognizer] = 0;
  *(void *)&v6[OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController] = 0;
  os_log_type_t v13 = &v6[OBJC_IVAR___ICAppStoreRatingObserver_accountIdentifier];
  *os_log_type_t v13 = a1;
  v13[1] = a2;
  *(void *)&v6[OBJC_IVAR___ICAppStoreRatingObserver_managedObjectContext] = a3;
  id v14 = self;
  uint64_t v15 = v6;
  id v16 = a3;
  id v17 = [v14 sharedConfiguration];
  if (qword_10069AFF0 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_1006CE100;
  objc_allocWithZone((Class)type metadata accessor for AppStoreRatingController());
  swift_retain();
  id v19 = sub_1004939C0(v17, v18, a4, a5);

  swift_release();
  *(void *)&v15[OBJC_IVAR___ICAppStoreRatingObserver_appStoreRatingController] = v19;

  v21.receiver = v15;
  v21.super_class = ObjectType;
  return [super init];
}

id sub_1004548F0()
{
  id result = *(id *)(v0 + OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController);
  if (result)
  {
    id result = [result fetchedObjects];
    if (result)
    {
      uint64_t v2 = result;
      sub_100031418(0, (unint64_t *)&qword_10069FD10);
      unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v3 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      return (id)sub_100490234(v4);
    }
  }
  return result;
}

uint64_t sub_1004549C4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1004549FC()
{
  sub_10045410C(*(void *)(v0 + 16));
}

void *sub_100454A04@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(*result + OBJC_IVAR___ICAppStoreRatingController_didRequestRating);
  return result;
}

uint64_t sub_100454A24()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100454A5C(unsigned char *a1)
{
}

unint64_t sub_100454A64()
{
  unint64_t result = qword_1006A7A88;
  if (!qword_1006A7A88)
  {
    sub_10001DFF4(&qword_1006A7A80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7A88);
  }
  return result;
}

id sub_100454AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100454B68(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for AccountEntity, (uint64_t (*)(void))type metadata accessor for AccountEntity, sub_100456CD4);
}

id sub_100454B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100454B68(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for AttachmentEntity, (uint64_t (*)(void))type metadata accessor for AttachmentEntity, sub_100456C14);
}

id sub_100454B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  BOOL v26 = a6;
  unint64_t v27 = a5;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a4(0);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  id v17 = (char *)&v26 - v16;
  v28[0] = a1;
  v28[1] = a2;
  v28[2] = a3;
  AppDependency.wrappedValue.getter();
  uint64_t v18 = (void *)v28[4];
  IntentParameter.wrappedValue.getter();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v17[*(int *)(v15 + 28)], v10);
  sub_100456C74((uint64_t)v17, v27);
  URL._bridgeToObjectiveC()(v19);
  objc_super v21 = v20;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  id v22 = [v18 managedObjectIDForURIRepresentation:v21];

  if (!v22)
  {
    __chkstk_darwin(v23);
    *(&v26 - 2) = (uint64_t (*)(void))v28;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = 0;
    sub_100455D50(v24, 230, v26);
    swift_release();
    swift_willThrow();
  }
  return v22;
}

id sub_100454DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100454B68(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for FolderEntity, (uint64_t (*)(void))type metadata accessor for FolderEntity, sub_100456BB4);
}

id sub_100454DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100454B68(a1, a2, a3, type metadata accessor for NoteEntity, type metadata accessor for NoteEntity, sub_100456B54);
}

id sub_100454E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100454B68(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for TableEntity, (uint64_t (*)(void))type metadata accessor for TableEntity, sub_100456AF4);
}

id sub_100454EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TagEntity();
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = a1;
  v20[1] = a2;
  AppDependency.wrappedValue.getter();
  uint64_t v12 = (void *)v20[3];
  IntentParameter.wrappedValue.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v11[*(int *)(v9 + 28)], v4);
  sub_100456C74((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for TagEntity);
  URL._bridgeToObjectiveC()(v13);
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v16 = [v12 managedObjectIDForURIRepresentation:v15];

  if (!v16)
  {
    __chkstk_darwin(v17);
    v20[-2] = v20;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 0;
    sub_100455D50(v18, 230, sub_100456AB4);
    swift_release();
    swift_willThrow();
  }
  return v16;
}

id sub_1004550E8(uint64_t a1, uint64_t a2)
{
  swift_retain();
  swift_retain();
  id v6 = sub_100454EA4(a1, a2);
  swift_release();
  swift_release();
  if (!v2)
  {
    AppDependency.wrappedValue.getter();
    id v7 = [v16 managedObjectContextForObjectID:v6];

    sub_10002F214(&qword_10069BA00);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100529F20;
    *(void *)(inited + 32) = v6;
    unint64_t v17 = inited;
    specialized Array._endMutation()();
    if (v17 >> 62)
    {
      id v11 = v6;
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v12) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v10 = v6;
      if (!v9)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        id v13 = objc_allocWithZone((Class)ICTagSelection);
        sub_100229C2C();
        sub_100456D34((unint64_t *)&qword_10069FFE0, (void (*)(uint64_t))sub_100229C2C);
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v3 = [v13 initWithManagedObjectContext:v7 includedObjectIDs:isa];

        return v3;
      }
    }
    sub_100157AB0(v17);
    goto LABEL_6;
  }
  return v3;
}

uint64_t OpenTagIntent.target.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TagEntity();
  __chkstk_darwin(v2 - 8);
  sub_10016B494(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  IntentParameter.wrappedValue.setter();
  return sub_100456C74(a1, (uint64_t (*)(void))type metadata accessor for TagEntity);
}

void *OpenTagIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static OpenTagIntent.persistentIdentifier;
}

uint64_t sub_100455374()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static OpenTagIntent.title);
  sub_10003293C(v6, (uint64_t)static OpenTagIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t OpenTagIntent.title.unsafeMutableAddressor()
{
  if (qword_10069B068 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();

  return sub_10003293C(v0, (uint64_t)static OpenTagIntent.title);
}

uint64_t static OpenTagIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B068 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003293C(v2, (uint64_t)static OpenTagIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void *OpenTagIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenTagIntent.openAppWhenRun;
}

uint64_t static OpenTagIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

uint64_t static OpenTagIntent.parameterSummary.getter()
{
  uint64_t v0 = sub_10002F214(&qword_1006A7A98);
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_10002F214(&qword_1006A7AA0);
  __chkstk_darwin(v1);
  sub_100035A5C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0x656874206E65704FLL;
  v2._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A7AA8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._countAndFlagsBits = 1734439968;
  v3._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_100455AF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TagEntity();
  __chkstk_darwin(v2 - 8);
  sub_10016B494(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  IntentParameter.wrappedValue.setter();
  return sub_100456C74(a1, (uint64_t (*)(void))type metadata accessor for TagEntity);
}

uint64_t sub_100455B98()
{
  uint64_t v0 = sub_10002F214(&qword_1006A7A98);
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_10002F214(&qword_1006A7AA0);
  __chkstk_darwin(v1);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0x656874206E65704FLL;
  v2._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A7AA8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._countAndFlagsBits = 1734439968;
  v3._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_100455D28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _s11MobileNotes13OpenTagIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_100455D50(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = (void **)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    id v5 = *(id *)(a1 + 16);
  }
  else
  {
    type metadata accessor for ICError(0);
    sub_10002F214((uint64_t *)&unk_10069E1D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100524D10;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v8;
    uint64_t v9 = a3();
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v9;
    *(void *)(inited + 56) = v10;
    sub_1001B50CC(inited);
    sub_100456D34((unint64_t *)&qword_10069E4D0, type metadata accessor for ICError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_beginAccess();
    uint64_t v11 = *v4;
    *uint64_t v4 = v14;
    id v5 = v14;

    uint64_t v3 = 0;
  }
  id v12 = v3;
  return v5;
}

uint64_t sub_100455E98(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - v9;
  uint64_t v11 = a3(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v19 - v12;
  v19[0] = 0;
  v19[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v14._object = (void *)0x800000010055CED0;
  v14._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v14);
  v15._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x6174206874697720;
  v16._object = (void *)0xED00002074656772;
  String.append(_:)(v16);
  IntentParameter.wrappedValue.getter();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  sub_100456C74((uint64_t)v13, a5);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v17._countAndFlagsBits = 46;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return v19[0];
}

uint64_t sub_1004560A0()
{
  uint64_t v0 = type metadata accessor for TagID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TagEntity();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v7._object = (void *)0x800000010055CED0;
  v7._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v7);
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6174206874697720;
  v9._object = (void *)0xED00002074656772;
  String.append(_:)(v9);
  IntentParameter.wrappedValue.getter();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  sub_100456C74((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TagEntity);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v10._countAndFlagsBits = 46;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v12[0];
}

uint64_t _s11MobileNotes13OpenTagIntentVACycfC_0()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v31 = *(void *)(v0 - 8);
  uint64_t v32 = v0;
  __chkstk_darwin(v0);
  uint64_t v30 = (char *)v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v29 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v28 = (char *)v26 - v5;
  uint64_t v6 = sub_10002F214(&qword_10069B528);
  __chkstk_darwin(v6 - 8);
  unint64_t v27 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v8 - 8);
  v26[0] = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Locale();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for LocalizedStringResource();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  v26[1] = sub_10002F214(&qword_10069B530);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v18 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  id v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v19(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v19(v13, v18, v10);
  uint64_t v20 = v26[0];
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
  uint64_t v21 = type metadata accessor for TagEntity();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v27, 1, 1, v21);
  uint64_t v22 = type metadata accessor for IntentDialog();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  v23(v28, 1, 1, v22);
  v23(v29, 1, 1, v22);
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v30, enum case for InputConnectionBehavior.default(_:), v32);
  sub_100456D34((unint64_t *)&unk_1006A3B60, (void (*)(uint64_t))type metadata accessor for TagEntity);
  uint64_t v24 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  sub_10002F214((uint64_t *)&unk_10069CE60);
  unint64_t v33 = 0xD000000000000021;
  unint64_t v34 = 0x8000000100549290;
  AnyHashable.init<A>(_:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  return v24;
}

uint64_t sub_10045689C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1004568C8()
{
  return sub_100456D34(&qword_1006A7AB0, (void (*)(uint64_t))type metadata accessor for TagEntity);
}

unint64_t sub_100456910(uint64_t a1)
{
  unint64_t result = sub_100456938();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100456938()
{
  unint64_t result = qword_1006A7AE0;
  if (!qword_1006A7AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7AE0);
  }
  return result;
}

unint64_t sub_100456990()
{
  unint64_t result = qword_1006A7AE8;
  if (!qword_1006A7AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7AE8);
  }
  return result;
}

uint64_t sub_1004569E4()
{
  return sub_100456D34(&qword_1006A33D8, (void (*)(uint64_t))type metadata accessor for TagEntity);
}

uint64_t sub_100456A30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100456A4C()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for OpenTagIntent()
{
  return &type metadata for OpenTagIntent;
}

uint64_t sub_100456A78()
{
  return sub_10001DFB0(&qword_1006A7B08, &qword_1006A7B10);
}

uint64_t sub_100456AB4()
{
  return sub_1004560A0();
}

uint64_t sub_100456ABC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100456AF4()
{
  return sub_100455E98(*(void *)(v0 + 16), (uint64_t (*)(void))&type metadata accessor for TableID, (uint64_t (*)(void))type metadata accessor for TableEntity, (uint64_t)&type metadata for OpenTableIntent, (uint64_t (*)(void))type metadata accessor for TableEntity);
}

uint64_t sub_100456B54()
{
  return sub_100455E98(*(void *)(v0 + 16), (uint64_t (*)(void))&type metadata accessor for NoteID, type metadata accessor for NoteEntity, (uint64_t)&type metadata for OpenNoteIntent, type metadata accessor for NoteEntity);
}

uint64_t sub_100456BB4()
{
  return sub_100455E98(*(void *)(v0 + 16), (uint64_t (*)(void))&type metadata accessor for FolderID, (uint64_t (*)(void))type metadata accessor for FolderEntity, (uint64_t)&type metadata for OpenFolderIntent, (uint64_t (*)(void))type metadata accessor for FolderEntity);
}

uint64_t sub_100456C14()
{
  return sub_100455E98(*(void *)(v0 + 16), (uint64_t (*)(void))&type metadata accessor for AttachmentID, (uint64_t (*)(void))type metadata accessor for AttachmentEntity, (uint64_t)&type metadata for OpenAttachmentIntent, (uint64_t (*)(void))type metadata accessor for AttachmentEntity);
}

uint64_t sub_100456C74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100456CD4()
{
  return sub_100455E98(*(void *)(v0 + 16), (uint64_t (*)(void))&type metadata accessor for AccountID, (uint64_t (*)(void))type metadata accessor for AccountEntity, (uint64_t)&type metadata for OpenAccountIntent, (uint64_t (*)(void))type metadata accessor for AccountEntity);
}

uint64_t sub_100456D34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ICCloudSyncingObject.MoveAction.Types.init(fromParentObject:toParentObject:)(void *a1, void *a2)
{
  return sub_10045803C(a1, a2);
}

uint64_t ICCloudSyncingObject.MoveAction.type.getter()
{
  return *(void *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_type);
}

id ICCloudSyncingObject.MoveAction.object.getter()
{
  return *(id *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
}

id ICCloudSyncingObject.MoveAction.fromParentObject.getter()
{
  return *(id *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
}

id ICCloudSyncingObject.MoveAction.toParentObject.getter()
{
  return *(id *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
}

uint64_t ICCloudSyncingObject.MoveAction.isCopy.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy);
}

id ICCloudSyncingObject.MoveAction.__allocating_init(type:object:fromParentObject:toParentObject:isCopy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = objc_allocWithZone(v5);
  *(void *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_type] = a1;
  *(void *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_object] = a2;
  *(void *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject] = a3;
  *(void *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject] = a4;
  v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy] = a5;
  v13.receiver = v11;
  v13.super_class = v5;
  return [super init];
}

id ICCloudSyncingObject.MoveAction.init(type:object:fromParentObject:toParentObject:isCopy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_type] = a1;
  *(void *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_object] = a2;
  *(void *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject] = a3;
  *(void *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject] = a4;
  v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy] = a5;
  v13.receiver = v5;
  v13.super_class = ObjectType;
  return [super init];
}

id ICCloudSyncingObject.MoveAction.__allocating_init(object:fromParentObject:toParentObject:isCopy:)(void *a1, void *a2, void *a3, char a4)
{
  id v9 = objc_allocWithZone(v4);
  if (!a2)
  {

    a1 = a3;
LABEL_8:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  if (!a3)
  {

    goto LABEL_8;
  }
  id v10 = a3;
  id v11 = a2;
  uint64_t v12 = sub_10045803C(v11, v10);
  if (v13)
  {

    goto LABEL_8;
  }
  id v14 = [v9 initWithType:v12 object:a1 fromParentObject:v11 toParentObject:v10 isCopy:a4 & 1];

  return v14;
}

id ICCloudSyncingObject.MoveAction.init(object:fromParentObject:toParentObject:isCopy:)(void *a1, void *a2, void *a3, char a4)
{
  uint64_t v6 = a1;
  if (!a2)
  {

    uint64_t v6 = a3;
LABEL_8:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  if (!a3)
  {

    goto LABEL_8;
  }
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = sub_10045803C(v8, v9);
  if (v11)
  {

    goto LABEL_8;
  }
  id v12 = [v4 initWithType:v10 object:v6 fromParentObject:v8 toParentObject:v9 isCopy:a4 & 1];

  return v12;
}

id ICCloudSyncingObject.MoveAction.__allocating_init(folder:toParentObject:isCopy:)(void *a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  id v8 = objc_allocWithZone(v4);
  id v9 = [a1 parent];
  if (!v9) {
    id v9 = [a1 account];
  }
  id v10 = [v8 initWithObject:a1 fromParentObject:v9 toParentObject:a2 isCopy:a3 & 1];

  return v10;
}

id ICCloudSyncingObject.MoveAction.init(folder:toParentObject:isCopy:)(void *a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 parent];
  if (!v8) {
    id v8 = [a1 account];
  }
  id v9 = [v4 initWithObject:a1 fromParentObject:v8 toParentObject:a2 isCopy:a3 & 1];

  return v9;
}

id ICCloudSyncingObject.MoveAction.__allocating_init(note:toFolder:isCopy:)(void *a1, void *a2, char a3)
{
  id v7 = objc_allocWithZone(v3);
  id v8 = [a1 folder];
  id v9 = [v7 initWithObject:a1 fromParentObject:v8 toParentObject:a2 isCopy:a3 & 1];

  return v9;
}

id ICCloudSyncingObject.MoveAction.init(note:toFolder:isCopy:)(void *a1, void *a2, char a3)
{
  id v7 = [a1 folder];
  id v8 = [v3 initWithObject:a1 fromParentObject:v7 toParentObject:a2 isCopy:a3 & 1];

  return v8;
}

void ICCloudSyncingObject.MoveAction.init()()
{
}

Swift::Void __swiftcall ICCloudSyncingObject.persistParticipantActivityEvents(oldShare:newShare:)(CKShare_optional oldShare, CKShare_optional newShare)
{
  uint64_t v3 = *(void **)&oldShare.is_nil;
  Class isa = oldShare.value.super.super.isa;
  uint64_t v38 = sub_10002F214(&qword_1006A7B40);
  uint64_t v5 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  id v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002F214(&qword_1006A7B48);
  uint64_t v9 = __chkstk_darwin(v8);
  char v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v37 = (char *)&v32 - v12;
  if (isa)
  {
    id v13 = [(objc_class *)isa ic_nonCurrentUserParticipants];
    sub_100031418(0, &qword_1006A4840);
    unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v14 & 0x8000000000000000) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_9;
    }
  }
  if ((v14 & 0x4000000000000000) == 0)
  {
    uint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8;
    if (!v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v15 = (uint64_t)sub_1001A9DC8(v14);
  swift_bridgeObjectRelease();
  if (!v3)
  {
LABEL_10:
    unint64_t v17 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v32 = v2;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }
LABEL_7:
  id v16 = [v3 ic_nonCurrentUserParticipants];
  sub_100031418(0, &qword_1006A4840);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v32 = v2;
  if ((v17 & 0x8000000000000000) != 0) {
    goto LABEL_18;
  }
LABEL_11:
  if ((v17 & 0x4000000000000000) == 0)
  {
    uint64_t v18 = v17 & 0xFFFFFFFFFFFFFF8;
    goto LABEL_13;
  }
LABEL_18:
  uint64_t v18 = (uint64_t)sub_1001A9DC8(v17);
  swift_bridgeObjectRelease();
LABEL_13:
  v39[0] = v18;
  v39[4] = v15;
  sub_10002F214(&qword_1006A0090);
  sub_10001DFB0(&qword_1006A7B50, &qword_1006A0090);
  sub_1004586BC();
  BidirectionalCollection<>.difference<A>(from:)();
  swift_release();
  swift_release();
  uint64_t v19 = v38;
  unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v35 = v5 + 16;
  v34(v11, v7, v38);
  sub_10001DFB0(&qword_1006A7B60, &qword_1006A7B40);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v36 = v5 + 8;
  unint64_t v33 = v20;
  v20(v7, v19);
  *(void *)&v11[*(int *)(v8 + 36)] = v39[0];
  uint64_t v21 = (uint64_t)v37;
  sub_100458724((uint64_t)v11, (uint64_t)v37);
  uint64_t v22 = (uint64_t *)(v21 + *(int *)(v8 + 36));
  uint64_t v23 = *v22;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v24 = v32;
  if (v23 != v39[0])
  {
    do
    {
      uint64_t v25 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      unint64_t v27 = *(void **)(v26 + 8);
      int v28 = *(unsigned __int8 *)(v26 + 25);
      id v29 = v27;
      v25(v39, 0);
      v34(v7, v37, v38);
      dispatch thunk of Collection.formIndex(after:)();
      v33(v7, v38);
      uint64_t v30 = &selRef_persistRemoveParticipantActivityEventForObject_participant_;
      if (!v28) {
        uint64_t v30 = &selRef_persistAddParticipantActivityEventForObject_participant_;
      }

      uint64_t v21 = (uint64_t)v37;
      uint64_t v31 = *v22;
      dispatch thunk of Collection.endIndex.getter();
    }
    while (v31 != v39[0]);
  }
  sub_10002B754(v21, &qword_1006A7B48);
}

Swift::Void __swiftcall ICCloudSyncingObject.persistJoinActivityEvent()()
{
}

Swift::Void __swiftcall ICCloudSyncingObject.persistLeaveActivityEvent()()
{
}

uint64_t sub_100457CE8(unsigned int *a1)
{
  uint64_t v18 = a1;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PersistedActivityEvent.Activities();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002F214(&qword_1006A1100);
  __chkstk_darwin(v9 - 8);
  char v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ActivityEventParticipant();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = v1;
  ActivityEventParticipant.init(cloudSyncingObject:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_10002B754((uint64_t)v11, &qword_1006A1100);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v15, v12);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *v18, v5);
  Date.init()();

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_10045803C(void *a1, void *a2)
{
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClass();
  if (v4 && [v4 isTrashFolder]
    || (self, (uint64_t v5 = (void *)swift_dynamicCastObjCClass()) != 0)
    && [v5 isTrashFolder])
  {

    return 0;
  }
  if ([a1 isSharedViaICloud] && objc_msgSend(a2, "isSharedViaICloud"))
  {
    id v7 = [a1 sharedRootObject];
    id v8 = [a2 sharedRootObject];
    uint64_t v9 = v8;
    if (v7)
    {
      if (v8)
      {
        sub_100031418(0, (unint64_t *)&qword_1006A5380);
        id v10 = v7;
        char v11 = static NSObject.== infix(_:_:)();

        if ((v11 & 1) == 0) {
          return 2;
        }
        return 3;
      }

      uint64_t v9 = a2;
    }
    else
    {

      if (!v9) {
        return 3;
      }
    }

    return 2;
  }
  if ([a1 isSharedViaICloud])
  {
    unsigned int v12 = [a2 isSharedViaICloud];

    if (v12) {
      return 0;
    }
    else {
      return 4;
    }
  }
  else
  {

    return 1;
  }
}

void _sSo20ICCloudSyncingObjectC11MobileNotesE29undoablyPersistActivityEvents3for03oldC003newC0yAbCE10MoveActionC_ABSgAJtFZ_0(uint64_t a1, void *a2, void *a3)
{
  switch(*(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_type))
  {
    case 0:
      return;
    case 1:
      if (!a3) {
        return;
      }
      uint64_t v4 = *(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
      id v30 = a3;
      if (*(unsigned char *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) != 1) {
        goto LABEL_28;
      }
      uint64_t v5 = *(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
      id v6 = a3;
      id v7 = [v6 persistCopyActivityEventForObject:v6 originalObject:v5 fromParentObject:0 toParentObject:v4];
      goto LABEL_29;
    case 2:
      id v30 = a3;
      if (a2)
      {
        unsigned int v12 = *(void **)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
        id v13 = a2;
        id v14 = [v12 sharedRootObject];
        if (v14)
        {
          uint64_t v15 = v14;
          if (*(unsigned char *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1) {
            id v16 = [v14 persistCopyActivityEventForObject:v13 originalObject:*(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object) fromParentObject:v12 toParentObject:0];
          }
          else {
            id v16 = [v14 persistMoveActivityEventForObject:v13 fromParentObject:v12 toParentObject:0];
          }
          id v25 = v16;
          id v26 = [self shared];
          [v26 registerUndoForCloudSyncingObjectActivityEvent:v25 cloudSyncingObject:v15];

          id v13 = v26;
        }

        a3 = v30;
      }
      if (!a3) {
        return;
      }
      uint64_t v4 = *(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
      if (*(unsigned char *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
      {
        uint64_t v27 = *(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
        id v28 = a3;
        id v7 = [v28 persistCopyActivityEventForObject:v28 originalObject:v27 fromParentObject:0 toParentObject:v4];
      }
      else
      {
LABEL_28:
        id v29 = a3;
        id v7 = [v29 persistMoveActivityEventForObject:v29 fromParentObject:0 toParentObject:v4];
      }
      goto LABEL_29;
    case 3:
      if (!a3) {
        return;
      }
      uint64_t v17 = *(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
      uint64_t v18 = *(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
      id v30 = a3;
      if (*(unsigned char *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
      {
        uint64_t v19 = *(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
        id v20 = a3;
        id v7 = [v20 persistCopyActivityEventForObject:v20 originalObject:v19 fromParentObject:v17 toParentObject:v18];
      }
      else
      {
        id v21 = a3;
        id v7 = [v21 persistMoveActivityEventForObject:v21 fromParentObject:v17 toParentObject:v18];
      }
LABEL_29:
      id v23 = v7;
      id v24 = [self shared];
      [v24 registerUndoForCloudSyncingObjectActivityEvent:v23 cloudSyncingObject:v30];
      goto LABEL_30;
    case 4:
      if (!a2) {
        return;
      }
      id v8 = *(void **)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
      id v30 = a2;
      id v9 = [v8 sharedRootObject];
      if (v9)
      {
        id v10 = v9;
        if (*(unsigned char *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1) {
          id v11 = [v9 persistCopyActivityEventForObject:v30 originalObject:*(void *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object) fromParentObject:v8 toParentObject:0];
        }
        else {
          id v11 = [v9 persistMoveActivityEventForObject:v30 fromParentObject:v8 toParentObject:0];
        }
        id v23 = v11;
        id v24 = [self shared];
        [v24 registerUndoForCloudSyncingObjectActivityEvent:v23 cloudSyncingObject:v10];

LABEL_30:
        uint64_t v22 = v24;
      }
      else
      {
        uint64_t v22 = v30;
      }

      return;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1004586A8);
  }
}

unint64_t sub_1004586BC()
{
  unint64_t result = qword_1006A7B58;
  if (!qword_1006A7B58)
  {
    sub_100031418(255, &qword_1006A4840);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7B58);
  }
  return result;
}

uint64_t sub_100458724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002F214(&qword_1006A7B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100458798()
{
  unint64_t result = qword_1006A7B68;
  if (!qword_1006A7B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7B68);
  }
  return result;
}

uint64_t type metadata accessor for ICCloudSyncingObject.MoveAction()
{
  return self;
}

ValueMetadata *type metadata accessor for ICCloudSyncingObject.MoveAction.Types()
{
  return &type metadata for ICCloudSyncingObject.MoveAction.Types;
}

uint64_t OpenNoteIntent.target.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NoteEntity(0);
  __chkstk_darwin(v2 - 8);
  sub_10018991C(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  IntentParameter.wrappedValue.setter();
  return sub_100189980(a1);
}

void *OpenNoteIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static OpenNoteIntent.persistentIdentifier;
}

uint64_t sub_1004588C0()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static OpenNoteIntent.title);
  sub_10003293C(v6, (uint64_t)static OpenNoteIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t OpenNoteIntent.title.unsafeMutableAddressor()
{
  if (qword_10069B070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();

  return sub_10003293C(v0, (uint64_t)static OpenNoteIntent.title);
}

uint64_t static OpenNoteIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B070 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003293C(v2, (uint64_t)static OpenNoteIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void *OpenNoteIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenNoteIntent.openAppWhenRun;
}

uint64_t static OpenNoteIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

uint64_t static OpenNoteIntent.parameterSummary.getter()
{
  uint64_t v0 = sub_10002F214(&qword_1006A7BA0);
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_10002F214(&qword_1006A7BA8);
  __chkstk_darwin(v1);
  sub_100035854();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0x656874206E65704FLL;
  v2._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A6A08);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._countAndFlagsBits = 0x65746F6E20;
  v3._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_100459048(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NoteEntity(0);
  __chkstk_darwin(v2 - 8);
  sub_10018991C(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  IntentParameter.wrappedValue.setter();
  return sub_100189980(a1);
}

uint64_t sub_1004590D8()
{
  uint64_t v0 = sub_10002F214(&qword_1006A7BA0);
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_10002F214(&qword_1006A7BA8);
  __chkstk_darwin(v1);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0x656874206E65704FLL;
  v2._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A6A08);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._countAndFlagsBits = 0x65746F6E20;
  v3._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_10045926C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _s11MobileNotes14OpenNoteIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t _s11MobileNotes14OpenNoteIntentVACycfC_0()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v31 = *(void *)(v0 - 8);
  uint64_t v32 = v0;
  __chkstk_darwin(v0);
  id v30 = (char *)v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v29 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v28 = (char *)v26 - v5;
  uint64_t v6 = sub_10002F214(&qword_10069B1D0);
  __chkstk_darwin(v6 - 8);
  uint64_t v27 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v8 - 8);
  v26[0] = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Locale();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for LocalizedStringResource();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  v26[1] = sub_10002F214(&qword_10069B1D8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v18 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v19(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v19(v13, v18, v10);
  uint64_t v20 = v26[0];
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
  uint64_t v21 = type metadata accessor for NoteEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v27, 1, 1, v21);
  uint64_t v22 = type metadata accessor for IntentDialog();
  id v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  v23(v28, 1, 1, v22);
  v23(v29, 1, 1, v22);
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v30, enum case for InputConnectionBehavior.default(_:), v32);
  sub_100459ACC((unint64_t *)&qword_10069B1E0);
  uint64_t v24 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  sub_10002F214((uint64_t *)&unk_10069B130);
  unint64_t v33 = 0xD000000000000024;
  unint64_t v34 = 0x8000000100549260;
  AnyHashable.init<A>(_:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  sub_10002F214((uint64_t *)&unk_10069CE60);
  unint64_t v33 = 0xD000000000000021;
  unint64_t v34 = 0x8000000100549290;
  AnyHashable.init<A>(_:)();
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  return v24;
}

uint64_t sub_1004598DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100459908()
{
  return sub_100459ACC(&qword_1006A7BB0);
}

unint64_t sub_10045993C(uint64_t a1)
{
  unint64_t result = sub_100459964();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100459964()
{
  unint64_t result = qword_1006A7BE0;
  if (!qword_1006A7BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7BE0);
  }
  return result;
}

unint64_t sub_1004599BC()
{
  unint64_t result = qword_1006A7BE8;
  if (!qword_1006A7BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7BE8);
  }
  return result;
}

uint64_t sub_100459A10()
{
  return sub_100459ACC(&qword_1006A3BD8);
}

uint64_t sub_100459A48()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100459A64()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for OpenNoteIntent()
{
  return &type metadata for OpenNoteIntent;
}

uint64_t sub_100459A90()
{
  return sub_10001DFB0(&qword_1006A7C08, &qword_1006A7C10);
}

uint64_t sub_100459ACC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NoteEntity(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_100459B10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = v13;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v14[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource] = 0;
  *(void *)&v14[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolder] = a1;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = ObjectType;
  id v21 = objc_allocWithZone((Class)UICollectionViewCompositionalLayoutConfiguration);
  id v44 = a1;
  id v22 = a1;
  id v23 = [v21 init];
  id v24 = objc_allocWithZone((Class)UICollectionViewCompositionalLayout);
  aBlock[4] = sub_10045A38C;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10028D8FC;
  aBlock[3] = &unk_10063C540;
  id v25 = _Block_copy(aBlock);
  id v26 = [v24 initWithSectionProvider:v25 configuration:v23];

  _Block_release(v25);
  swift_release();
  v49.receiver = v14;
  v49.super_class = ObjectType;
  id v27 = [super initWithFrame:v26 collectionViewLayout:0.0, 0.0, 0.0, 0.0];

  id v28 = self;
  id v29 = v27;
  id v43 = v22;
  uint64_t v41 = (char *)v29;
  uint64_t v47 = a4;
  sub_10002E71C(a4);
  sub_10002E71C(a6);
  sub_10002E71C(a8);
  sub_10002E71C(a10);
  sub_10002E71C(a12);
  id v30 = [v28 sharedContext];
  if (v30)
  {
    uint64_t v31 = v30;
    id v32 = [v30 managedObjectContext];
  }
  else
  {
    id v32 = 0;
  }
  id v33 = objc_allocWithZone((Class)type metadata accessor for SmartFolderComposerDataSource());
  unint64_t v34 = sub_1003E6134(v41, v44, (uint64_t)v32, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  sub_10002E70C(a12);
  sub_10002E70C(a10);
  sub_10002E70C(a8);
  sub_10002E70C(a6);
  sub_10002E70C(v47);

  uint64_t v35 = *(void **)&v41[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
  *(void *)&v41[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource] = v34;

  uint64_t v36 = self;
  id v37 = v41;
  id v38 = [v36 ICGroupedBackgroundColor];
  [v37 setBackgroundColor:v38];

  uint64_t v39 = v37;
  [v39 setShowsVerticalScrollIndicator:0];
  sub_10002E70C(a12);
  sub_10002E70C(a10);
  sub_10002E70C(a8);
  sub_10002E70C(a6);
  sub_10002E70C(v47);

  return v39;
}

uint64_t sub_100459F88(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v3 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UICollectionLayoutListConfiguration();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a1)
  {
    case 0:
      (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v7);
      UICollectionLayoutListConfiguration.init(appearance:)();
      sub_1003C9B60();
      uint64_t v15 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
      [v15 contentInsets];
      [v15 setContentInsets:0.0];
      goto LABEL_9;
    case 1:
      (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v7);
      UICollectionLayoutListConfiguration.init(appearance:)();
      goto LABEL_8;
    case 2:
      return sub_10045A394(v18);
    case 3:
      if (!ICInternalSettingsSmartFoldersCanIncludeRecentlyDeletedNotes()) {
        goto LABEL_6;
      }
      (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v7);
      UICollectionLayoutListConfiguration.init(appearance:)();
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for UICollectionLayoutListConfiguration.FooterMode.supplementary(_:), v3);
      UICollectionLayoutListConfiguration.footerMode.setter();
LABEL_8:
      sub_1003C9B60();
      uint64_t v15 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
LABEL_9:
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      break;
    default:
LABEL_6:
      uint64_t v15 = 0;
      break;
  }
  return (uint64_t)v15;
}

uint64_t type metadata accessor for SmartFolderComposerCollectionView()
{
  return self;
}

uint64_t sub_10045A37C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10045A38C(uint64_t a1, uint64_t a2)
{
  return sub_100459F88(a1, a2);
}

uint64_t sub_10045A394(uint64_t a1)
{
  uint64_t v32 = a1;
  uint64_t v1 = type metadata accessor for UIListSeparatorConfiguration();
  uint64_t v30 = *(void *)(v1 - 8);
  uint64_t v31 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  id v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - v4;
  uint64_t v27 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
  uint64_t v6 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode();
  uint64_t v9 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for UICollectionLayoutListConfiguration();
  uint64_t v16 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v12);
  UICollectionLayoutListConfiguration.init(appearance:)();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for UICollectionLayoutListConfiguration.FooterMode.supplementary(_:), v26);
  UICollectionLayoutListConfiguration.footerMode.setter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for UICollectionLayoutListConfiguration.HeaderMode.supplementary(_:), v27);
  UICollectionLayoutListConfiguration.headerMode.setter();
  UICollectionLayoutListConfiguration.separatorConfiguration.getter();
  uint64_t v19 = (void (*)(char *, void))UIListSeparatorConfiguration.bottomSeparatorInsets.modify();
  *(void *)(v20 + 8) = 0;
  v19(v33, 0);
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v29, v5, v31);
  UICollectionLayoutListConfiguration.separatorConfiguration.setter();
  sub_1003C9B60();
  uint64_t v23 = static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v28);
  return v23;
}

uint64_t static ManagedEntity.entities<A>(for:in:includeContents:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = v7;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a4;
  *(unsigned char *)(v8 + 248) = a3;
  *(void *)(v8 + 24) = a1;
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v8 + 80) = v11;
  *(void *)(v8 + 88) = *(void *)(v11 - 8);
  *(void *)(v8 + 96) = swift_task_alloc();
  *(void *)(v8 + 104) = swift_task_alloc();
  *(void *)(v8 + 112) = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(v8 + 120) = AssociatedTypeWitness;
  *(void *)(v8 + 128) = *(void *)(AssociatedTypeWitness - 8);
  *(void *)(v8 + 136) = swift_task_alloc();
  *(void *)(v8 + 144) = swift_task_alloc();
  type metadata accessor for Optional();
  *(void *)(v8 + 152) = swift_task_alloc();
  *(void *)(v8 + 160) = *(void *)(a5 - 8);
  *(void *)(v8 + 168) = swift_task_alloc();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  *(void *)(v8 + 176) = v13;
  *(void *)(v8 + 184) = *(void *)(v13 - 8);
  *(void *)(v8 + 192) = swift_task_alloc();
  return _swift_task_switch(sub_10045AA40, 0, 0);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;

  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = v7;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a2;
  *(void *)(v8 + 48) = a4;
  *(unsigned char *)(v8 + 176) = a3;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 88) = swift_task_alloc();
  *(void *)(v8 + 96) = *(void *)(a5 - 8);
  *(void *)(v8 + 104) = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(v8 + 112) = AssociatedTypeWitness;
  *(void *)(v8 + 120) = *(void *)(AssociatedTypeWitness - 8);
  *(void *)(v8 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_10045BB70, 0, 0);
}

uint64_t sub_10045AA40()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  v0[2] = static Array._allocateUninitialized(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[16];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
    uint64_t v8 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
    return v9(v8);
  }
  else
  {
    uint64_t v17 = v0[7];
    (*(void (**)(void, void, void))(v0[16] + 32))(v0[18], v0[19], v0[15]);
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 56) + **(int **)(v17 + 56));
    uint64_t v11 = (void *)swift_task_alloc();
    v0[25] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10045ACD4;
    uint64_t v12 = v0[18];
    uint64_t v13 = v0[7];
    uint64_t v14 = v0[4];
    uint64_t v15 = v0[5];
    return v16(v12, v14, v15, v13);
  }
}

uint64_t sub_10045ACD4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 216) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10045B800;
  }
  else
  {
    uint64_t v4 = sub_10045ADF0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10045ADF0()
{
  uint64_t v59 = v0;
  uint64_t v1 = *(void **)(v0 + 208);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 216);
    id v3 = sub_10045D730(*(void *)(v0 + 208), *(id *)(v0 + 32));
    *(void *)(v0 + 224) = v3;
    if (v2)
    {
      uint64_t v5 = *(void *)(v0 + 184);
      uint64_t v4 = *(void *)(v0 + 192);
      uint64_t v6 = *(void *)(v0 + 176);
      uint64_t v7 = *(void *)(v0 + 144);
      uint64_t v8 = *(void *)(v0 + 120);
      uint64_t v9 = *(void *)(v0 + 128);

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
      return v10();
    }
    else
    {
      id v29 = v3;
      uint64_t v30 = *(void **)(v0 + 32);
      os_log_type_t v54 = (uint64_t (*)(uint64_t, id, id, uint64_t, id))(*(void *)(*(void *)(v0 + 56) + 48)
                                                                 + **(int **)(*(void *)(v0 + 56) + 48));
      id v31 = v1;
      id v32 = v29;
      id v33 = v30;
      unint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 232) = v34;
      *unint64_t v34 = v0;
      v34[1] = sub_10045B454;
      uint64_t v35 = *(void *)(v0 + 104);
      uint64_t v36 = *(unsigned __int8 *)(v0 + 248);
      return v54(v35, v31, v32, v36, v33);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v13 = *(void *)(v0 + 144);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v15 = *(void *)(v0 + 128);
    static Logger.link.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v12, v13, v14);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 136);
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 120);
    uint64_t v22 = *(void *)(v0 + 128);
    if (v18)
    {
      uint64_t v52 = *(void *)(v0 + 88);
      uint64_t v53 = *(void *)(v0 + 80);
      uint64_t v56 = *(void *)(v0 + 96);
      uint64_t v51 = *(void *)(v0 + 144);
      uint64_t v23 = swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v24 = _typeName(_:qualified:)();
      *(void *)(v23 + 4) = sub_10045DA1C(v24, v25, v58);
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_getAssociatedConformanceWitness();
      uint64_t v26 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter();
      *(void *)(v23 + 14) = sub_10045DA1C(v26, v27, v58);
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v28(v19, v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v56, v53);
      v28(v51, v21);
    }
    else
    {
      uint64_t v38 = *(void *)(v0 + 88);
      uint64_t v37 = *(void *)(v0 + 96);
      uint64_t v39 = *(void *)(v0 + 80);

      os_log_type_t v40 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v40(v19, v21);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      v40(v20, v21);
    }
    uint64_t v41 = *(void *)(v0 + 152);
    uint64_t v42 = *(void *)(v0 + 120);
    uint64_t v43 = *(void *)(v0 + 128);
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42) == 1)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
      uint64_t v44 = *(void *)(v0 + 16);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v45 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v45(v44);
    }
    else
    {
      uint64_t v57 = *(void *)(v0 + 56);
      (*(void (**)(void, void, void))(*(void *)(v0 + 128) + 32))(*(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 120));
      int v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 + 56) + **(int **)(v57 + 56));
      id v46 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v46;
      void *v46 = v0;
      v46[1] = sub_10045ACD4;
      uint64_t v47 = *(void *)(v0 + 144);
      uint64_t v48 = *(void *)(v0 + 56);
      uint64_t v49 = *(void *)(v0 + 32);
      uint64_t v50 = *(void *)(v0 + 40);
      return v55(v47, v49, v50, v48);
    }
  }
}

uint64_t sub_10045B454()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10045B8F4;
  }
  else
  {
    uint64_t v2 = sub_10045B570;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10045B570()
{
  uint64_t v1 = (void *)v0[28];
  uint64_t v2 = (void *)v0[26];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[16];
  type metadata accessor for Array();
  Array.append(_:)();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  uint64_t v6 = v0[19];
  uint64_t v7 = v0[15];
  uint64_t v8 = v0[16];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
    uint64_t v9 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v9);
  }
  else
  {
    uint64_t v18 = v0[7];
    (*(void (**)(void, void, void))(v0[16] + 32))(v0[18], v0[19], v0[15]);
    os_log_type_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 56) + **(int **)(v18 + 56));
    uint64_t v12 = (void *)swift_task_alloc();
    v0[25] = v12;
    void *v12 = v0;
    v12[1] = sub_10045ACD4;
    uint64_t v13 = v0[18];
    uint64_t v14 = v0[7];
    uint64_t v15 = v0[4];
    uint64_t v16 = v0[5];
    return v17(v13, v15, v16, v14);
  }
}

uint64_t sub_10045B800()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[22];
  (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10045B8F4()
{
  uint64_t v1 = *(void **)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10045BB70()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  *(void *)(v0 + 16) = static Array._allocateUninitialized(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  dispatch thunk of Sequence.makeIterator()();
  *(void *)(v0 + 136) = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v5 = *(void **)(v0 + 24);
  if (v5)
  {
    while (1)
    {
      *(void *)(v0 + 144) = v5;
      if (![v5 isTemporaryID]) {
        break;
      }

      dispatch thunk of IteratorProtocol.next()();
      uint64_t v5 = *(void **)(v0 + 24);
      if (!v5) {
        goto LABEL_4;
      }
    }
    id v9 = sub_10045D730((uint64_t)v5, *(id *)(v0 + 40));
    *(void *)(v0 + 152) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = *(void **)(v0 + 40);
    uint64_t v18 = (uint64_t (*)(uint64_t, id, id, uint64_t, id))(*(void *)(*(void *)(v0 + 64) + 48)
                                                               + **(int **)(*(void *)(v0 + 64) + 48));
    id v12 = v5;
    id v13 = v10;
    id v14 = v11;
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_10045BEBC;
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v17 = *(unsigned __int8 *)(v0 + 176);
    return v18(v16, v12, v13, v17, v14);
  }
  else
  {
LABEL_4:
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    uint64_t v6 = *(void *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v7(v6);
  }
}

uint64_t sub_10045BEBC()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10045C2E0;
  }
  else
  {
    uint64_t v2 = sub_10045BFD8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10045BFD8()
{
  uint64_t v2 = *(void **)(v0 + 144);
  uint64_t v1 = *(void **)(v0 + 152);
  type metadata accessor for Array();
  Array.append(_:)();

  dispatch thunk of IteratorProtocol.next()();
  uint64_t v3 = *(void **)(v0 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 168);
    while (1)
    {
      *(void *)(v0 + 144) = v3;
      if (![v3 isTemporaryID]) {
        break;
      }

      dispatch thunk of IteratorProtocol.next()();
      uint64_t v3 = *(void **)(v0 + 24);
      if (!v3) {
        goto LABEL_5;
      }
    }
    id v8 = sub_10045D730((uint64_t)v3, *(id *)(v0 + 40));
    *(void *)(v0 + 152) = v8;
    if (v4)
    {
      uint64_t v10 = *(void *)(v0 + 120);
      uint64_t v9 = *(void *)(v0 + 128);
      uint64_t v11 = *(void *)(v0 + 112);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v12 = *(uint64_t (**)(void))(v0 + 8);
      return v12();
    }
    else
    {
      id v13 = v8;
      id v14 = *(void **)(v0 + 40);
      uint64_t v21 = (uint64_t (*)(uint64_t, id, id, uint64_t, id))(*(void *)(*(void *)(v0 + 64) + 48)
                                                                 + **(int **)(*(void *)(v0 + 64) + 48));
      id v15 = v3;
      id v16 = v13;
      id v17 = v14;
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 160) = v18;
      void *v18 = v0;
      v18[1] = sub_10045BEBC;
      uint64_t v19 = *(void *)(v0 + 88);
      uint64_t v20 = *(unsigned __int8 *)(v0 + 176);
      return v21(v19, v15, v16, v20, v17);
    }
  }
  else
  {
LABEL_5:
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    uint64_t v5 = *(void *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v6(v5);
  }
}

uint64_t sub_10045C2E0()
{
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void ManagedEntity.object(in:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  URL._bridgeToObjectiveC()(v10);
  id v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v13 = [a1 managedObjectIDForURIRepresentation:v12];

  if (v13)
  {
    id v14 = [a1 managedObjectContextForObjectID:v13];
    if (v14)
    {
      id v15 = v14;
      id v16 = [v14 objectWithID:v13];

      swift_getAssociatedTypeWitness();
      swift_dynamicCastUnknownClassUnconditional();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static ManagedEntity.managedObjects<A>(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  uint64_t v10 = type metadata accessor for Logger();
  v7[12] = v10;
  v7[13] = *(void *)(v10 - 8);
  v7[14] = swift_task_alloc();
  v7[15] = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[16] = AssociatedTypeWitness;
  v7[17] = *(void *)(AssociatedTypeWitness - 8);
  v7[18] = swift_task_alloc();
  v7[19] = swift_task_alloc();
  type metadata accessor for Optional();
  v7[20] = swift_task_alloc();
  v7[21] = *(void *)(a4 - 8);
  v7[22] = swift_task_alloc();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  v7[23] = v12;
  v7[24] = *(void *)(v12 - 8);
  v7[25] = swift_task_alloc();
  return _swift_task_switch(sub_10045C7B4, 0, 0);
}

uint64_t sub_10045C7B4()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[5];
  v0[26] = swift_getAssociatedTypeWitness();
  v0[2] = static Array._allocateUninitialized(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v5 = v0[20];
  uint64_t v6 = v0[16];
  uint64_t v7 = v0[17];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    uint64_t v8 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
    return v9(v8);
  }
  else
  {
    uint64_t v17 = v0[9];
    (*(void (**)(void, void, void))(v0[17] + 32))(v0[19], v0[20], v0[16]);
    id v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 56) + **(int **)(v17 + 56));
    uint64_t v11 = (void *)swift_task_alloc();
    v0[27] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10045CA50;
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[9];
    uint64_t v14 = v0[6];
    uint64_t v15 = v0[7];
    return v16(v12, v14, v15, v13);
  }
}

uint64_t sub_10045CA50(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 224) = a1;
  *(void *)(v3 + 232) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10045D548;
  }
  else
  {
    uint64_t v4 = sub_10045CB6C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10045CB6C()
{
  uint64_t v56 = v0;
  uint64_t v1 = *(void **)(v0 + 224);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 232);
    id v3 = sub_10045D730(*(void *)(v0 + 224), *(id *)(v0 + 48));
    *(void *)(v0 + 240) = v3;
    if (v2)
    {
      uint64_t v5 = *(void *)(v0 + 192);
      uint64_t v4 = *(void *)(v0 + 200);
      uint64_t v6 = *(void *)(v0 + 184);
      uint64_t v7 = *(void *)(v0 + 152);
      uint64_t v8 = *(void *)(v0 + 128);
      uint64_t v9 = *(void *)(v0 + 136);

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
      return v10();
    }
    else
    {
      id v29 = v3;
      uint64_t v30 = swift_allocObject();
      *(void *)(v0 + 248) = v30;
      long long v31 = *(_OWORD *)(v0 + 72);
      *(_OWORD *)(v30 + 16) = *(_OWORD *)(v0 + 56);
      *(_OWORD *)(v30 + 32) = v31;
      *(void *)(v30 + 48) = v29;
      *(void *)(v30 + 56) = v1;
      v29;
      id v32 = v1;
      id v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 256) = v33;
      *id v33 = v0;
      v33[1] = sub_10045D194;
      uint64_t v34 = *(void *)(v0 + 208);
      return NSManagedObjectContext.perform<A>(_:)(v0 + 24, sub_10045DEB8, v30, v34);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 144);
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v15 = *(void *)(v0 + 136);
    static Logger.link.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v12, v13, v14);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 144);
    uint64_t v20 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 128);
    uint64_t v22 = *(void *)(v0 + 136);
    if (v18)
    {
      uint64_t v50 = *(void *)(v0 + 104);
      uint64_t v51 = *(void *)(v0 + 96);
      uint64_t v53 = *(void *)(v0 + 112);
      uint64_t v49 = *(void *)(v0 + 152);
      uint64_t v23 = swift_slowAlloc();
      v55[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v24 = _typeName(_:qualified:)();
      *(void *)(v23 + 4) = sub_10045DA1C(v24, v25, v55);
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_getAssociatedConformanceWitness();
      uint64_t v26 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter();
      *(void *)(v23 + 14) = sub_10045DA1C(v26, v27, v55);
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v28(v19, v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v53, v51);
      v28(v49, v21);
    }
    else
    {
      uint64_t v36 = *(void *)(v0 + 104);
      uint64_t v35 = *(void *)(v0 + 112);
      uint64_t v37 = *(void *)(v0 + 96);

      uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v38(v19, v21);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      v38(v20, v21);
    }
    uint64_t v39 = *(void *)(v0 + 160);
    uint64_t v40 = *(void *)(v0 + 128);
    uint64_t v41 = *(void *)(v0 + 136);
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40) == 1)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
      uint64_t v42 = *(void *)(v0 + 16);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v43 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v43(v42);
    }
    else
    {
      uint64_t v54 = *(void *)(v0 + 72);
      (*(void (**)(void, void, void))(*(void *)(v0 + 136) + 32))(*(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 128));
      uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 + 56) + **(int **)(v54 + 56));
      uint64_t v44 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v44;
      *uint64_t v44 = v0;
      v44[1] = sub_10045CA50;
      uint64_t v45 = *(void *)(v0 + 152);
      uint64_t v46 = *(void *)(v0 + 72);
      uint64_t v47 = *(void *)(v0 + 48);
      uint64_t v48 = *(void *)(v0 + 56);
      return v52(v45, v47, v48, v46);
    }
  }
}

uint64_t sub_10045D194()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = sub_10045D62C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10045D2C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10045D2C4()
{
  v0[4] = v0[3];
  uint64_t v1 = (void *)v0[30];
  uint64_t v2 = (void *)v0[28];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[17];
  type metadata accessor for Array();
  Array.append(_:)();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[16];
  uint64_t v8 = v0[17];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    uint64_t v9 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v9);
  }
  else
  {
    uint64_t v18 = v0[9];
    (*(void (**)(void, void, void))(v0[17] + 32))(v0[19], v0[20], v0[16]);
    os_log_type_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 56) + **(int **)(v18 + 56));
    uint64_t v12 = (void *)swift_task_alloc();
    v0[27] = v12;
    void *v12 = v0;
    v12[1] = sub_10045CA50;
    uint64_t v13 = v0[19];
    uint64_t v14 = v0[9];
    uint64_t v15 = v0[6];
    uint64_t v16 = v0[7];
    return v17(v13, v15, v16, v14);
  }
}

uint64_t sub_10045D548()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  (*(void (**)(void, void))(v0[17] + 8))(v0[19], v0[16]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10045D62C()
{
  uint64_t v1 = *(void **)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

id sub_10045D730(uint64_t a1, id a2)
{
  id v2 = [a2 managedObjectContextForObjectID:a1];
  if (!v2)
  {
    __chkstk_darwin(0);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    sub_100455D50(v3, 225, sub_10045DEDC);
    swift_release();
    swift_willThrow();
  }
  return v2;
}

id sub_10045D820@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v8 = 0;
  id v4 = [a1 existingObjectWithID:a2 error:&v8];
  id v5 = v8;
  if (v4)
  {
    swift_getAssociatedTypeWitness();
    *a3 = swift_dynamicCastUnknownClassUnconditional();
    return v5;
  }
  else
  {
    id v7 = v8;
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
}

uint64_t sub_10045D924(void *a1)
{
  _StringGuts.grow(_:)(87);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000010054C180;
  v4._countAndFlagsBits = 0xD000000000000053;
  String.append(_:)(v4);
  id v5 = [a1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.append(_:)(v10);
  return 0;
}

unint64_t sub_10045DA1C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = sub_10045DAF0(v12, 0, 0, 1, a1, a2);
  unint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100032E28((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100032E28((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100018FE8((uint64_t)v12);
  return v7;
}

unint64_t sub_10045DAF0(unint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          unint64_t result = 0;
          *((unsigned char *)__dst + v10) = 0;
          *a1 = (unint64_t)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    unint64_t result = (unint64_t)sub_10045DBF0(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    unint64_t result = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    unint64_t result = _StringObject.sharedUTF8.getter();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

char *sub_10045DBF0(uint64_t a1, unint64_t a2)
{
  Swift::String v2 = (char *)sub_10045DC88(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v2 = sub_10045DD8C(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    Swift::String v2 = sub_10045DD8C((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

void *sub_10045DC88(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10045DD24(v2, 0);
      unint64_t result = (void *)_StringGuts.copyUTF8(into:)();
      if (v5) {
        break;
      }
      if (result == (void *)v2) {
        return v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10045DD24(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10002F214(&qword_1006A7C68);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_10045DD8C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002F214(&qword_1006A7C68);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10045DE78()
{
  return _swift_deallocObject(v0, 64, 7);
}

id sub_10045DEB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10045D820(*(void **)(v1 + 48), *(void *)(v1 + 56), a1);
}

uint64_t sub_10045DEDC()
{
  return sub_10045D924(*(void **)(v0 + 32));
}

uint64_t sub_10045DEE8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10045DF20()
{
  id v1 = sub_10045E1B4(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___allAction);
  uint64_t v2 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection;
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection);
  BOOL v4 = v3 && ![v3 joinOperator];
  [v1 setState:v4];

  id v7 = sub_10045E1B4(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___anyAction);
  char v5 = *(void **)(v0 + v2);
  BOOL v6 = v5 && [v5 joinOperator] == (id)1;
  [v7 setState:v6];
}

uint64_t sub_10045E038()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection);
  if (!v1) {
    return 0;
  }
  id v2 = [v1 summaryWithJoinOperatorMenu];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

UIMenu sub_10045E0A8()
{
  sub_100031418(0, (unint64_t *)&unk_1006A4D40);
  sub_10002F214(&qword_10069BA00);
  uint64_t preferredElementSize = swift_allocObject();
  *(_OWORD *)(preferredElementSize + 16) = xmmword_100524CE0;
  *(void *)(preferredElementSize + 32) = sub_10045E1B4(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___allAction);
  *(void *)(preferredElementSize + 40) = sub_10045E1B4(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___anyAction);
  specialized Array._endMutation()();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v3.value.super.Class isa = 0;
  v3.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v1, (Swift::String_optional)0, v3, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize, (Swift::OpaquePointer)preferredElementSize);
}

id sub_10045E1B4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  UIImage_optional v3 = *(void **)&v1[*a1];
  if (v3)
  {
    id v4 = *(id *)&v1[*a1];
  }
  else
  {
    char v5 = v1;
    sub_100031418(0, (unint64_t *)&unk_10069B9F0);
    id v6 = (id)NSStringFromICFilterSelectionJoinOperator();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)(swift_allocObject() + 16) = v1;
    id v7 = v1;
    int64_t v8 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    int64_t v9 = *(void **)&v1[v2];
    *(void *)&v5[v2] = v8;
    id v4 = v8;

    UIImage_optional v3 = 0;
  }
  id v10 = v3;
  return v4;
}

id sub_10045E2C0(uint64_t a1, char *a2)
{
  id v3 = *(id *)&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection];
  if (v3) {
    id v3 = [v3 setJoinOperator:0];
  }
  sub_10045DF20(v3);
  id result = [a2 setNeedsUpdateConfiguration];
  char v5 = *(void (**)(void))&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged];
  if (v5)
  {
    swift_retain();
    v5(0);
    return (id)sub_10002E70C((uint64_t)v5);
  }
  return result;
}

id sub_10045E364(uint64_t a1, char *a2)
{
  id v3 = *(id *)&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection];
  if (v3) {
    id v3 = [v3 setJoinOperator:1];
  }
  sub_10045DF20(v3);
  id result = [a2 setNeedsUpdateConfiguration];
  char v5 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged];
  if (v5)
  {
    swift_retain();
    v5(1);
    return (id)sub_10002E70C((uint64_t)v5);
  }
  return result;
}

id sub_10045E4AC(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection] = 0;
  id v4 = &v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___allAction] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___anyAction] = 0;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  [super initWithCoder:a1];

  return v5;
}

void sub_10045E55C()
{
  sub_10002E70C(*(void *)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged));
  Swift::String v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___anyAction);
}

uint64_t type metadata accessor for FolderComposerFilterJoinCell()
{
  return self;
}

uint64_t sub_10045E654()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10045E68C(uint64_t a1)
{
  return sub_10045E364(a1, *(char **)(v1 + 16));
}

id sub_10045E694(uint64_t a1)
{
  return sub_10045E2C0(a1, *(char **)(v1 + 16));
}

uint64_t sub_10045E6A0()
{
  return 9;
}

uint64_t sub_10045E6A8()
{
  id v0 = [self mainBundle];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 localizedStringForKey:v1 value:0 table:0];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

unint64_t sub_10045E760()
{
  return sub_10045E844();
}

uint64_t type metadata accessor for FolderComposerFilterCellPinnedNotes()
{
  return self;
}

unint64_t sub_10045E844()
{
  unint64_t result = qword_1006A7CE0;
  if (!qword_1006A7CE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1006A7CE0);
  }
  return result;
}

void sub_10045F0D0()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  id v9 = Strong;
  id v2 = [Strong traitCollection];
  unsigned int v3 = [v2 ic_hasCompactWidth];

  if (v3) {
    [v9 setEditing:0 animated:1];
  }
  id v4 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v4)
  {
    [v4 noteEditorActionMenuWillShow:v0];
    swift_unknownObjectRelease();
  }
  uint64_t v5 = swift_unknownObjectWeakLoadStrong();
  if (v5)
  {
    id v6 = (void *)v5;
    self;
    objc_super v7 = (void *)swift_dynamicCastObjCClass();
    if (!v7)
    {
      id v8 = v9;
      id v9 = v6;
      goto LABEL_12;
    }
    id v8 = [v7 eventReporter];

    if (v8)
    {
      [v8 submitNoteActionMenuEventForNoteEditorWithUsageType:1 activityType:0];
LABEL_12:
    }
  }
}

void *sub_10045F274()
{
  if (!*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_invitation))
  {
    id v6 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
    if (!v6 || [v6 isEmpty])
    {
      sub_10045F4F4();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      return _swiftEmptyArrayStorage;
    }
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
LABEL_5:
    sub_10045F5C4();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_10045F6E8();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    Class isa = sub_10045F950().super.super.isa;
    sub_10002F214(&qword_1006A1BA0);
    Array.appendNonNil(_:)();

    return _swiftEmptyArrayStorage;
  }
  id v2 = Strong;
  unint64_t result = [Strong view];
  if (result)
  {
    id v4 = result;
    unsigned __int8 v5 = [result ic_isInSecureWindow];

    if (v5) {
      return _swiftEmptyArrayStorage;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_10045F4F4()
{
  id v4 = sub_100460A90();
  sub_10002F214(&qword_1006A1BA0);
  Array.appendNonNil(_:)();

  uint64_t v0 = self;
  sub_100031418(0, (unint64_t *)&qword_1006A4D30);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = [v0 ic_inlineMenuWithChildren:isa v4 _swiftEmptyArrayStorage];

  return v2;
}

id sub_10045F5C4()
{
  id v0 = sub_10045FE1C();
  sub_10002F214(&qword_1006A1BA0);
  Array.appendNonNil(_:)();

  id v1 = sub_10046009C();
  Array.appendNonNil(_:)();

  id v6 = sub_100460264();
  Array.appendNonNil(_:)();

  id v2 = self;
  sub_100031418(0, (unint64_t *)&qword_1006A4D30);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [v2 ic_inlineMenuWithElementSize:1 children:isa v6 _swiftEmptyArrayStorage];

  return v4;
}

id sub_10045F6E8()
{
  id v1 = sub_100460660();
  sub_10002F214(&qword_1006A1BA0);
  Array.appendNonNil(_:)();

  id v18 = sub_1004608B4();
  Array.appendNonNil(_:)();

  id v2 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_isMathEnabled);
    id v4 = objc_allocWithZone((Class)ICCalculatePreviewBehaviorMenu);
    id v5 = v2;
    id v6 = [v4 initWithNote:v5 isMathEnabled:v3];
    id v7 = [v6 makeMenu];
  }
  else
  {
    id v7 = 0;
  }
  Array.appendNonNil(_:)();

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v9 = Strong;
    Class v10 = sub_1002FCEDC(Strong);
  }
  else
  {
    Class v10 = 0;
  }
  Array.appendNonNil(_:)();

  id v11 = sub_100460A90();
  Array.appendNonNil(_:)();

  id v12 = sub_100460E10();
  Array.appendNonNil(_:)();

  id v13 = sub_100461040();
  Array.appendNonNil(_:)();

  id v19 = sub_100461260();
  Array.appendNonNil(_:)();

  uint64_t v14 = self;
  sub_100031418(0, (unint64_t *)&qword_1006A4D30);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = [v14 ic_inlineMenuWithChildren:isa v19];

  return v16;
}

UIMenu sub_10045F950()
{
  id v0 = sub_1004615B8();
  sub_10002F214(&qword_1006A1BA0);
  Array.appendNonNil(_:)();

  id v1 = sub_10046041C();
  Array.appendNonNil(_:)();

  id v2 = sub_100461768();
  Array.appendNonNil(_:)();

  id v3 = sub_1004619C0();
  Array.appendNonNil(_:)();

  id v4 = sub_100461BDC();
  Array.appendNonNil(_:)();

  id v5 = sub_100461D54();
  Array.appendNonNil(_:)();

  id v6 = sub_100461EE0();
  Array.appendNonNil(_:)();

  id v7 = sub_10046206C();
  Array.appendNonNil(_:)();

  id v8 = sub_1004622A8();
  Array.appendNonNil(_:)();

  id v9 = sub_100462450();
  Array.appendNonNil(_:)();

  id v10 = sub_1004625A8();
  Array.appendNonNil(_:)();

  id v11 = sub_10046272C();
  Array.appendNonNil(_:)();

  id v28 = sub_100462848();
  Array.appendNonNil(_:)();

  if (ICDebugModeEnabled())
  {
    id v12 = [self standardUserDefaults];
    [v12 _ICDebugWindowEnabled];

    sub_100031418(0, &qword_1006A4528);
    v27._rawValue = 0;
    id v13 = (void *)UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [self systemImageNamed:v14 _swiftEmptyArrayStorage];

    [v13 setImage:v15];
  }
  else
  {
    id v13 = 0;
  }
  Array.appendNonNil(_:)();

  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_6;
    }
  }
  else if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_6:
    id v16 = [self mainBundle];
    NSString v17 = String._bridgeToObjectiveC()();
    id v18 = [v16 localizedStringForKey:v17 value:0 table:0];

    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    NSString v22 = String._bridgeToObjectiveC()();
    uint64_t v23 = (objc_class *)[self systemImageNamed:v22];

    sub_100031418(0, (unint64_t *)&unk_1006A4D40);
    v24._countAndFlagsBits = v19;
    v24._object = v21;
    v29.value.super.Class isa = v23;
    v29.is_nil = 0;
    return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v24, (Swift::String_optional)0, v29, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)_swiftEmptyArrayStorage, v27);
  }
  swift_bridgeObjectRelease();
  return 0;
}

id sub_10045FE1C()
{
  id v1 = *(void **)&v0[OBJC_IVAR___ICNoteEditorActionMenu_note];
  if (!v1) {
    return 0;
  }
  id v2 = self;
  id v3 = v1;
  if (objc_msgSend(v2, "ic_isVision"))
  {

    return 0;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v0;
  id v6 = objc_allocWithZone((Class)ICScanDocumentsNoteActivity);
  uint64_t v21 = sub_100462C5C;
  uint64_t v22 = v5;
  NSString v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_100262E2C;
  uint64_t v20 = &unk_10063CB00;
  id v7 = _Block_copy(&v17);
  id v8 = v0;
  swift_release();
  id v9 = [v6 initWithScanDocumentsBlock:v7];
  _Block_release(v7);
  if (*(void *)&v8[OBJC_IVAR___ICNoteEditorActionMenu_completion])
  {
    uint64_t v10 = *(void *)&v8[OBJC_IVAR___ICNoteEditorActionMenu_completion + 8];
    uint64_t v21 = *(void *(**)())&v8[OBJC_IVAR___ICNoteEditorActionMenu_completion];
    uint64_t v22 = v10;
    NSString v17 = _NSConcreteStackBlock;
    uint64_t v18 = 1107296256;
    uint64_t v19 = sub_1002A43E4;
    uint64_t v20 = &unk_10063CB28;
    id v11 = _Block_copy(&v17);
    swift_retain();
    swift_release();
  }
  else
  {
    id v11 = 0;
  }
  id v4 = [v9 actionWithCompletion:v11];
  _Block_release(v11);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unsigned int v13 = [Strong noteEditorActionMenuCanScanDocuments:v8];
    swift_unknownObjectRelease();
    int v14 = v13 ^ 1;
  }
  else
  {
    int v14 = 1;
  }
  if ([v3 isPasswordProtectedAndLocked]) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = [v3 isEditable] ^ 1 | v14;
  }
  [v4 setIc_disabled:v15];

  return v4;
}

id sub_10046009C()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    self;
    id v4 = (id)swift_dynamicCastObjCClass();
    id v5 = v1;
    if (v4) {
      id v4 = [v4 eventReporter];
    }
  }
  else
  {
    id v7 = v1;
    id v4 = 0;
  }
  id v8 = [objc_allocWithZone((Class)ICPinNoteActivity) initWithNote:v1 eventReporter:v4];

  uint64_t v9 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
  if (v9)
  {
    uint64_t v10 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v13[4] = v9;
    v13[5] = v10;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_1002A43E4;
    v13[3] = &unk_10063CAB0;
    id v11 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  else
  {
    id v11 = 0;
  }
  id v6 = [v8 actionWithCompletion:v11];
  _Block_release(v11);
  [v6 setIc_disabled:[v1 isPinnable] ^ 1];

  return v6;
}

id sub_100460264()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  if (![v2 isLockable]
    || (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong()) != 0
    && (id v4 = Strong, v5 = objc_msgSend(Strong, "ic_behavior"), v4, v5 == (id)1))
  {

    return 0;
  }
  id v7 = (void *)swift_unknownObjectWeakLoadStrong();
  id v8 = objc_allocWithZone((Class)ICLockNoteActivity);
  id v9 = v2;
  id v10 = [v8 initWithNote:v9 presentingViewController:v7];

  [v10 setContextPath:1];
  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v11 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v14[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v14[5] = v11;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_1002A43E4;
    v14[3] = &unk_10063CA88;
    id v12 = _Block_copy(v14);
    swift_retain();
    swift_release();
  }
  else
  {
    id v12 = 0;
  }
  id v6 = [v10 actionWithCompletion:v12];

  _Block_release(v12);
  return v6;
}

id sub_10046041C()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v0;
  id v3 = v1;
  if (!ICInternalSettingsIsAlexandriaEnabled() || ![v3 allowsExporting])
  {

    return 0;
  }
  sub_10002F214(&qword_10069BA00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100529F20;
  *(void *)(v4 + 32) = v3;
  v17[0] = v4;
  specialized Array._endMutation()();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  id v6 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
  id v7 = objc_allocWithZone((Class)ICExportArchiveActivity);
  sub_100031418(0, (unint64_t *)&qword_1006A5380);
  id v8 = v3;
  id v9 = v6;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v7 initWithObjects:isa, Strong, v9, 0, v17[0]];

  uint64_t v12 = *(void *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
  if (v12)
  {
    uint64_t v13 = *(void *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v17[4] = v12;
    v17[5] = v13;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_1002A43E4;
    v17[3] = &unk_10063CA60;
    int v14 = _Block_copy(v17);
    swift_retain();
    swift_release();
  }
  else
  {
    int v14 = 0;
  }
  id v15 = [v11 actionWithCompletion:v14];
  _Block_release(v14);
  [v15 setIc_disabled:[v8 isSharable] ^ 1];

  return v15;
}

id sub_100460660()
{
  id v1 = *(void **)&v0[OBJC_IVAR___ICNoteEditorActionMenu_note];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  id v3 = objc_allocWithZone((Class)ICFindInNoteActivity);
  uint64_t v18 = sub_100462C38;
  uint64_t v19 = v2;
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  id v16 = sub_100262E2C;
  NSString v17 = &unk_10063CA10;
  uint64_t v4 = _Block_copy(&v14);
  id v5 = v0;
  id v6 = v1;
  swift_release();
  id v7 = [v3 initWithPerformActivity:v4];
  _Block_release(v4);
  if (*(void *)&v5[OBJC_IVAR___ICNoteEditorActionMenu_completion])
  {
    uint64_t v8 = *(void *)&v5[OBJC_IVAR___ICNoteEditorActionMenu_completion + 8];
    uint64_t v18 = *(void *(**)())&v5[OBJC_IVAR___ICNoteEditorActionMenu_completion];
    uint64_t v19 = v8;
    int v14 = _NSConcreteStackBlock;
    uint64_t v15 = 1107296256;
    id v16 = sub_1002A43E4;
    NSString v17 = &unk_10063CA38;
    id v9 = _Block_copy(&v14);
    swift_retain();
    swift_release();
  }
  else
  {
    id v9 = 0;
  }
  id v10 = [v7 actionWithCompletion:v9];
  _Block_release(v9);
  if (([v6 isPasswordProtectedAndLocked] & 1) != 0
    || ([v6 isDeletedOrInTrash] & 1) != 0
    || ([v6 isEmpty] & 1) != 0
    || (id v11 = [v6 identifier]) == 0)
  {
    uint64_t v12 = 1;
  }
  else
  {

    uint64_t v12 = 0;
  }
  [v10 setIc_disabled:v12];

  return v10;
}

id sub_1004608B4()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  id v3 = v1;
  if (Strong)
  {
    id v4 = [Strong traitCollection];

    id v5 = [v4 ic_behavior];
    if (v5 == (id)1)
    {

      return 0;
    }
  }
  id v7 = (void *)swift_unknownObjectWeakLoadStrong();
  id v8 = objc_allocWithZone((Class)ICMoveNoteActivity);
  id v9 = v3;
  id v10 = [v8 initWithNote:v9 presentingViewController:v7];

  uint64_t v11 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
  if (v11)
  {
    uint64_t v12 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v15[4] = v11;
    v15[5] = v12;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_1002A43E4;
    v15[3] = &unk_10063C9C0;
    uint64_t v13 = _Block_copy(v15);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v13 = 0;
  }
  id v6 = [v10 actionWithCompletion:v13];
  _Block_release(v13);
  [v6 setIc_disabled:[v9 isMovable] ^ 1];

  return v6;
}

id sub_100460A90()
{
  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_invitation)) {
    return 0;
  }
  uint64_t v2 = OBJC_IVAR___ICNoteEditorActionMenu_note;
  id v3 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = swift_unknownObjectWeakLoadStrong();
  uint64_t v19 = v2;
  if (v5)
  {
    id v6 = (void *)v5;
    self;
    id v7 = (id)swift_dynamicCastObjCClass();
    id v8 = v3;
    if (v7) {
      id v7 = [v7 eventReporter];
    }
  }
  else
  {
    id v8 = v3;
    id v7 = 0;
  }
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v10 = objc_allocWithZone((Class)ICLinesAndGridsNoteActivity);
  Swift::String v24 = sub_100462BE0;
  uint64_t v25 = v9;
  aBlock = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_100462BE8;
  uint64_t v23 = &unk_10063C970;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v12 = [v10 initWithNote:v8 presentingViewController:Strong eventReporter:v7 shouldCreateNewNoteBlock:v11];

  _Block_release(v11);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v13 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    Swift::String v24 = *(id (**)())(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    uint64_t v25 = v13;
    aBlock = _NSConcreteStackBlock;
    uint64_t v21 = 1107296256;
    uint64_t v22 = sub_1002A43E4;
    uint64_t v23 = &unk_10063C998;
    int v14 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    int v14 = 0;
  }
  id v1 = [v12 actionWithCompletion:v14];
  _Block_release(v14);
  uint64_t v15 = *(void **)(v0 + v19);
  if (v15)
  {
    id v16 = v15;
    if ([v16 isPasswordProtectedAndLocked]) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = [v16 isEditable] ^ 1;
    }
    [v1 setIc_disabled:v17];
  }
  return v1;
}

id sub_100460D6C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  id v1 = (void *)Strong;
  uint64_t v2 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v2)
  {

    return 0;
  }
  id v3 = [v2 noteEditorActionMenuShouldCreateNewNote:v1];
  swift_unknownObjectRelease();

  return v3;
}

id sub_100460E10()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  id v2 = objc_allocWithZone((Class)ICSetPreferredAttachmentSizeActivity);
  id v3 = v1;
  id v4 = [v2 initWithNote:v3];
  if (([v3 isPasswordProtectedAndLocked] & 1) != 0
    || ([v3 isEditable] & 1) == 0)
  {
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    if (v8)
    {
      uint64_t v9 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      uint64_t v17 = v8;
      uint64_t v18 = v9;
      uint64_t v13 = _NSConcreteStackBlock;
      uint64_t v14 = 1107296256;
      uint64_t v15 = sub_1002A43E4;
      id v16 = &unk_10063C8F8;
      id v10 = _Block_copy(&v13);
      swift_retain();
      swift_release();
    }
    else
    {
      id v10 = 0;
    }
    id v11 = [v4 actionWithCompletion:v10];
    _Block_release(v10);
    [v11 setIc_disabled:1];
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    if (v5)
    {
      uint64_t v6 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      uint64_t v17 = v5;
      uint64_t v18 = v6;
      uint64_t v13 = _NSConcreteStackBlock;
      uint64_t v14 = 1107296256;
      uint64_t v15 = sub_1002A43E4;
      id v16 = &unk_10063C920;
      id v7 = _Block_copy(&v13);
      swift_retain();
      swift_release();
    }
    else
    {
      id v7 = 0;
    }
    id v11 = [v4 menuWithCompletion:v7];

    _Block_release(v7);
    id v3 = v4;
  }

  return v11;
}

id sub_100461040()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  id v3 = (void *)Strong;
  id v4 = v1;
  id result = [v3 view];
  if (result)
  {
    uint64_t v6 = result;
    id v7 = [result window];

    if (v7)
    {
      id v8 = [v7 traitCollection];
      unsigned __int8 v9 = [v8 ic_isDark];

      if ((v9 & 1) != 0
        && (objc_msgSend(self, "ic_alwaysShowLightContent") & 1) == 0
        && (objc_msgSend(self, "ic_isVision") & 1) == 0)
      {
        id v11 = [objc_allocWithZone((Class)ICLightContentActivity) initWithNote:v4];
        if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
        {
          uint64_t v12 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
          v14[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
          v14[5] = v12;
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 1107296256;
          v14[2] = sub_1002A43E4;
          v14[3] = &unk_10063C8D0;
          uint64_t v13 = _Block_copy(v14);
          swift_retain();
          swift_release();
        }
        else
        {
          uint64_t v13 = 0;
        }
        id v10 = [v11 actionWithCompletion:v13];

        _Block_release(v13);
        return v10;
      }
    }
    else
    {
    }
    return 0;
  }
  __break(1u);
  return result;
}

id sub_100461260()
{
  id v1 = *(void **)&v0[OBJC_IVAR___ICNoteEditorActionMenu_note];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  id v3 = objc_allocWithZone((Class)ICDeleteNoteActivity);
  id v16 = sub_100462BA0;
  uint64_t v17 = v2;
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  uint64_t v14 = sub_100262E2C;
  uint64_t v15 = &unk_10063C880;
  id v4 = _Block_copy(&v12);
  uint64_t v5 = v0;
  id v6 = v1;
  id v7 = [v3 initWithDeleteBlock:v4];
  _Block_release(v4);
  swift_release();
  if (*(void *)&v5[OBJC_IVAR___ICNoteEditorActionMenu_completion])
  {
    uint64_t v8 = *(void *)&v5[OBJC_IVAR___ICNoteEditorActionMenu_completion + 8];
    id v16 = *(void (**)())&v5[OBJC_IVAR___ICNoteEditorActionMenu_completion];
    uint64_t v17 = v8;
    uint64_t v12 = _NSConcreteStackBlock;
    uint64_t v13 = 1107296256;
    uint64_t v14 = sub_1002A43E4;
    uint64_t v15 = &unk_10063C8A8;
    unsigned __int8 v9 = _Block_copy(&v12);
    swift_retain();
    swift_release();
  }
  else
  {
    unsigned __int8 v9 = 0;
  }
  id v10 = [v7 actionWithCompletion:v9];
  _Block_release(v9);
  [v10 setIc_destructive:1];
  [v10 setIc_disabled:[v6 isDeletable] ^ 1];

  return v10;
}

void sub_100461468(uint64_t a1)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    self;
    id v4 = (void *)swift_dynamicCastObjCClass();
    if (v4)
    {
      id v5 = [v4 eventReporter];

      if (!v5) {
        goto LABEL_6;
      }
      [v5 pushContextPathDataWithContextPathEnum:1];
      id v3 = v5;
    }
  }
LABEL_6:
  id v6 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v6)
  {
    [v6 noteEditorActionMenuShouldDeleteNote:a1];
    swift_unknownObjectRelease();
  }
  id v7 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v7)
  {
    uint64_t v8 = v7;
    self;
    unsigned __int8 v9 = (void *)swift_dynamicCastObjCClass();
    if (v9) {
      id v10 = [v9 eventReporter];
    }
    else {
      id v10 = 0;
    }

    id v7 = v10;
  }
  id v11 = v7;
  [v7 popContextPathData];
}

id sub_1004615B8()
{
  if (([self isInternalInstall] & 1) == 0
    && !ICDebugModeEnabled())
  {
    return 0;
  }
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  id v3 = [v2 identifier];
  if (v3)
  {
    id v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v5 = objc_allocWithZone((Class)ICCopyUUIDActivity);
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v7 = [v5 initWithUUIDString:v6];

    if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
    {
      uint64_t v8 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      v12[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
      v12[5] = v8;
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 1107296256;
      void v12[2] = sub_1002A43E4;
      unint64_t v12[3] = &unk_10063C830;
      unsigned __int8 v9 = _Block_copy(v12);
      swift_retain();
      swift_release();
    }
    else
    {
      unsigned __int8 v9 = 0;
    }
    id v10 = [v7 actionWithCompletion:v9];

    _Block_release(v9);
  }
  else
  {

    return 0;
  }
  return v10;
}

id sub_100461768()
{
  if (([self isInternalInstall] & 1) == 0
    && !ICDebugModeEnabled())
  {
    return 0;
  }
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  id v3 = [v2 attachmentsInOrder];
  sub_100031418(0, &qword_10069BDF0);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v5)
  {

    return 0;
  }
  id v6 = [v2 attachmentsInOrder];
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  id v8 = objc_allocWithZone((Class)ICInspectAttachmentsNoteActivity);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithAttachments:isa presentingViewController:Strong];

  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v11 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v15[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v15[5] = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_1002A43E4;
    v15[3] = &unk_10063C808;
    uint64_t v12 = _Block_copy(v15);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v12 = 0;
  }
  id v13 = [v10 actionWithCompletion:v12];

  _Block_release(v12);
  return v13;
}

id sub_1004619C0()
{
  if (![self archiveExportingEnabled]) {
    return 0;
  }
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  id v3 = [v2 visibleAttachmentsWithType:11];
  sub_100031418(0, &qword_10069BDF0);
  sub_1001BC094();
  uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v4 & 0xC000000000000001) != 0) {
    id v5 = (id)__CocoaSet.count.getter();
  }
  else {
    id v5 = *(id *)(v4 + 16);
  }
  swift_bridgeObjectRelease();
  if (v5)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
    id v8 = objc_allocWithZone((Class)ICArchiveNoteDocScansActivity);
    id v9 = v2;
    id v10 = [v8 initWithNote:v9 presentingViewController:Strong presentingBarButtonItem:v7];

    if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
    {
      uint64_t v11 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      v14[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
      v14[5] = v11;
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 1107296256;
      v14[2] = sub_1002A43E4;
      v14[3] = &unk_10063C7E0;
      uint64_t v12 = _Block_copy(v14);
      swift_retain();
      swift_release();
    }
    else
    {
      uint64_t v12 = 0;
    }
    id v5 = [v10 actionWithCompletion:v12];

    _Block_release(v12);
  }
  else
  {
  }
  return v5;
}

id sub_100461BDC()
{
  if (!ICDebugModeEnabled()) {
    return 0;
  }
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
  id v4 = objc_allocWithZone((Class)ICChangeNoteDatesActivity);
  id v5 = v1;
  id v6 = [v4 initWithNote:v5 presentingViewController:Strong presentingBarButtonItem:v3];

  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v11[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v11[5] = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1002A43E4;
    v11[3] = &unk_10063C7B8;
    id v8 = _Block_copy(v11);
    swift_retain();
    swift_release();
  }
  else
  {
    id v8 = 0;
  }
  id v9 = [v6 actionWithCompletion:v8];

  _Block_release(v8);
  return v9;
}

id sub_100461D54()
{
  if (![self isInternalInstall]) {
    return 0;
  }
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
  id v4 = objc_allocWithZone((Class)ICDrawingRegressionTestsActivity);
  id v5 = v1;
  id v6 = [v4 initWithNote:v5 presentingViewController:Strong presentingBarButtonItem:v3];

  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v11[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v11[5] = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1002A43E4;
    v11[3] = &unk_10063C790;
    id v8 = _Block_copy(v11);
    swift_retain();
    swift_release();
  }
  else
  {
    id v8 = 0;
  }
  id v9 = [v6 actionWithCompletion:v8];

  _Block_release(v8);
  return v9;
}

id sub_100461EE0()
{
  id v1 = [self standardUserDefaults];
  unsigned int v2 = [v1 BOOLForKey:kICEnableDuplicateNoteDefaultsKey];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v3) {
    return 0;
  }
  id v4 = v3;
  if (![v4 isDuplicatable])
  {

    return 0;
  }
  id v5 = [objc_allocWithZone((Class)ICDuplicateNoteActivity) initWithNote:v4];
  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v6 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v10[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v10[5] = v6;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_1002A43E4;
    v10[3] = &unk_10063C768;
    uint64_t v7 = _Block_copy(v10);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = [v5 actionWithCompletion:v7];

  _Block_release(v7);
  return v8;
}

id sub_10046206C()
{
  if (![self isInternalInstall]) {
    return 0;
  }
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  id v2 = objc_allocWithZone((Class)ICHandwritingDebugNoteActivity);
  uint64_t v14 = sub_100462B7C;
  uint64_t v15 = v1;
  id v10 = _NSConcreteStackBlock;
  uint64_t v11 = 1107296256;
  uint64_t v12 = sub_100262E2C;
  id v13 = &unk_10063C718;
  uint64_t v3 = _Block_copy(&v10);
  id v4 = v0;
  id v5 = [v2 initWithShowHandwritingDebugBlock:v3];
  _Block_release(v3);
  swift_release();
  if (*(void *)&v4[OBJC_IVAR___ICNoteEditorActionMenu_completion])
  {
    uint64_t v6 = *(void *)&v4[OBJC_IVAR___ICNoteEditorActionMenu_completion + 8];
    uint64_t v14 = *(void *(**)())&v4[OBJC_IVAR___ICNoteEditorActionMenu_completion];
    uint64_t v15 = v6;
    id v10 = _NSConcreteStackBlock;
    uint64_t v11 = 1107296256;
    uint64_t v12 = sub_1002A43E4;
    id v13 = &unk_10063C740;
    uint64_t v7 = _Block_copy(&v10);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = [v5 actionWithCompletion:v7];

  _Block_release(v7);
  return v8;
}

void *sub_100462234(uint64_t a1, SEL *a2)
{
  id result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    [result *a2:a1];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

id sub_1004622A8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  if (![v2 isEditable]
    || (uint64_t v3 = self, ([v3 isInternalInstall] & 1) == 0)
    && ![v3 isSeedInstall])
  {

    return 0;
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  id v5 = objc_allocWithZone((Class)ICHandwritingFeedbackNoteActivity);
  id v6 = v2;
  id v7 = [v5 initWithNote:v6 presentingViewController:Strong];

  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v12[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v12[5] = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    void v12[2] = sub_1002A43E4;
    unint64_t v12[3] = &unk_10063C6C8;
    id v9 = _Block_copy(v12);
    swift_retain();
    swift_release();
  }
  else
  {
    id v9 = 0;
  }
  id v10 = [v7 actionWithCompletion:v9];

  _Block_release(v9);
  return v10;
}

id sub_100462450()
{
  if (!ICDebugModeEnabled()) {
    return 0;
  }
  id v1 = *(id *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (v1)
  {
    updated = (objc_class *)type metadata accessor for UpdatePaperThumbnailsActivity();
    uint64_t v3 = (char *)objc_allocWithZone(updated);
    *(void *)&v3[OBJC_IVAR___ICUpdatePaperThumbnailsActivity_note] = v1;
    v10.receiver = v3;
    v10.super_class = updated;
    id v4 = v1;
    id v5 = [super init];
    if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
    {
      uint64_t v6 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      v9[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
      v9[5] = v6;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 1107296256;
      v9[2] = sub_1002A43E4;
      v9[3] = &unk_10063C6A0;
      id v7 = _Block_copy(v9);
      swift_retain();
      swift_release();
    }
    else
    {
      id v7 = 0;
    }
    id v1 = [v5 actionWithCompletion:v7];

    _Block_release(v7);
  }
  return v1;
}

id sub_1004625A8()
{
  if (!ICDebugModeEnabled()) {
    return 0;
  }
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  if (![v2 isSharedViaICloud]
    || ([v2 isSharedReadOnly] & 1) != 0)
  {

    return 0;
  }
  id v5 = (objc_class *)type metadata accessor for ClearActivityCachesActivity();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR___ICClearActivityCachesActivity_note] = v2;
  v12.receiver = v6;
  v12.super_class = v5;
  id v7 = v2;
  id v8 = [super init];
  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v9 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v11[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v11[5] = v9;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1002A43E4;
    v11[3] = &unk_10063C678;
    objc_super v10 = _Block_copy(v11);
    swift_retain();
    swift_release();
  }
  else
  {
    objc_super v10 = 0;
  }
  id v3 = [v8 actionWithCompletion:v10];

  _Block_release(v10);
  return v3;
}

id sub_10046272C()
{
  if (!ICInternalSettingsGetBundleBoolSettingValue()) {
    return 0;
  }
  id v1 = [objc_allocWithZone((Class)ICSetQuickNoteActivity) init];
  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v6[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v6[5] = v2;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1107296256;
    v6[2] = sub_1002A43E4;
    v6[3] = &unk_10063C650;
    id v3 = _Block_copy(v6);
    swift_retain();
    swift_release();
  }
  else
  {
    id v3 = 0;
  }
  id v4 = [v1 actionWithCompletion:v3];

  _Block_release(v3);
  return v4;
}

id sub_100462848()
{
  if (!ICDebugModeEnabled()) {
    return 0;
  }
  id v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  if (![v2 isInICloudAccount])
  {

    return 0;
  }
  id v3 = (objc_class *)type metadata accessor for SimulateQuotaExceededActivity();
  id v4 = (char *)objc_allocWithZone(v3);
  *(void *)&v4[OBJC_IVAR___ICSimulateQuotaExceededActivity_note] = v2;
  v12.receiver = v4;
  v12.super_class = v3;
  id v5 = v2;
  id v6 = [super init];
  if (*(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v11[4] = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v11[5] = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1002A43E4;
    v11[3] = &unk_10063C628;
    id v8 = _Block_copy(v11);
    swift_retain();
    swift_release();
  }
  else
  {
    id v8 = 0;
  }
  id v9 = [v6 actionWithCompletion:v8];

  _Block_release(v8);
  return v9;
}

id sub_1004629E8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoteEditorActionMenu();
  return [super dealloc];
}

uint64_t sub_100462ABC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
  sub_10002E71C(v1);
  return v1;
}

uint64_t sub_100462AFC()
{
  return swift_unknownObjectWeakLoadStrong();
}

void *sub_100462B0C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
  id v2 = v1;
  return v1;
}

uint64_t sub_100462B44()
{
  return _swift_deallocObject(v0, 24, 7);
}

void *sub_100462B7C()
{
  return sub_100462234(*(void *)(v0 + 16), (SEL *)&selRef_noteEditorActionMenuShouldShowHandwritingDebug_);
}

void sub_100462BA0()
{
  sub_100461468(*(void *)(v0 + 16));
}

uint64_t sub_100462BA8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

id sub_100462BE0()
{
  return sub_100460D6C();
}

id sub_100462BE8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  id v3 = (void *)v1(v2);
  swift_release();

  return v3;
}

void *sub_100462C38()
{
  return sub_100462234(*(void *)(v0 + 16), (SEL *)&selRef_noteEditorActionMenuShouldFindInNote_);
}

void *sub_100462C5C()
{
  return sub_100462234(*(void *)(v0 + 16), (SEL *)&selRef_noteEditorActionMenuShouldScanDocuments_);
}

uint64_t sub_100462C80()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t FolderEntity.init(for:in:)(uint64_t a1, void *a2, void *a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v3[5] = type metadata accessor for FolderEntity();
  v3[6] = swift_task_alloc();
  id v6 = a2;
  id v7 = a3;
  return _swift_task_switch(sub_100462E68, 0, 0);
}

uint64_t sub_100462E68()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = (void *)v0[4];
  uint64_t v3 = swift_allocObject();
  v0[7] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = v2;
  id v5 = v1;
  id v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *id v6 = v0;
  v6[1] = sub_100462F54;
  uint64_t v8 = v0[5];
  uint64_t v7 = v0[6];
  return NSManagedObjectContext.perform<A>(_:)(v7, sub_10016F044, v3, v8);
}

uint64_t sub_100462F54()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1002E8144;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100463070;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100463070()
{
  uint64_t v1 = v0[6];
  uint64_t v3 = (void *)v0[3];
  uint64_t v2 = (void *)v0[4];
  uint64_t v4 = v0[2];

  sub_10029D25C(v1, v4);
  swift_task_dealloc();
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t static FolderEntity.managedObjectID(for:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006A7D70 + dword_1006A7D70);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1001942B8;
  return v7(a1, a2);
}

void FolderEntity.init<A>(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  ICFolderObject<>.entityIdentifier.getter();
  id v4 = [a1 objectID];
  id v5 = [v4 URIRepresentation];

  id v6 = (int *)type metadata accessor for FolderEntity();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = [a1 localizedTitle];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  uint64_t v11 = (uint64_t *)(a2 + v6[6]);
  *uint64_t v11 = v8;
  v11[1] = v10;
  id v12 = [a1 account];
  id v13 = [v12 localizedName];

  if (v13)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  uint64_t v17 = (uint64_t *)(a2 + v6[7]);
  *uint64_t v17 = v14;
  v17[1] = v16;
  self;
  uint64_t v18 = swift_dynamicCastObjCClass();
  if (v18)
  {
    uint64_t v19 = (void *)v18;
    id v20 = a1;
    *(unsigned char *)(a2 + v6[9]) = [v19 folderType] == 2;
    LOBYTE(v19) = [v19 isSharedViaICloud];

    *(unsigned char *)(a2 + v6[8]) = (_BYTE)v19;
  }
  else
  {

    *(unsigned char *)(a2 + v6[9]) = 0;
    *(unsigned char *)(a2 + v6[8]) = 0;
  }
}

uint64_t sub_100463370()
{
  uint64_t result = _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
  static FolderEntity.defaultQuery = result;
  *(void *)algn_1006CE278 = v1;
  byte_1006CE280 = v2 & 1;
  byte_1006CE281 = v3 & 1;
  byte_1006CE282 = v4 & 1;
  byte_1006CE283 = v5 & 1;
  return result;
}

uint64_t *FolderEntity.defaultQuery.unsafeMutableAddressor()
{
  if (qword_10069B078 != -1) {
    swift_once();
  }
  return &static FolderEntity.defaultQuery;
}

uint64_t static FolderEntity.defaultQuery.getter()
{
  if (qword_10069B078 != -1) {
    swift_once();
  }
  uint64_t v0 = static FolderEntity.defaultQuery;
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t sub_1004634BC()
{
  uint64_t v0 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v0 - 8);
  char v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v3 = *(void *)(v12[0] - 8);
  __chkstk_darwin(v12[0]);
  char v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = type metadata accessor for TypeDisplayRepresentation();
  sub_100032974(v10, static FolderEntity.typeDisplayRepresentation);
  sub_10003293C(v10, (uint64_t)static FolderEntity.typeDisplayRepresentation);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, void))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v12[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v8);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t FolderEntity.typeDisplayRepresentation.unsafeMutableAddressor()
{
  if (qword_10069B080 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();

  return sub_10003293C(v0, (uint64_t)static FolderEntity.typeDisplayRepresentation);
}

uint64_t static FolderEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B080 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = sub_10003293C(v2, (uint64_t)static FolderEntity.typeDisplayRepresentation);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t FolderEntity.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FolderID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t FolderEntity.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FolderID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t FolderEntity.managedObjectURI.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FolderEntity() + 20);
  uint64_t v4 = type metadata accessor for URL();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t FolderEntity.managedObjectURI.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FolderEntity() + 20);
  uint64_t v4 = type metadata accessor for URL();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*FolderEntity.managedObjectURI.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t FolderEntity.title.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for FolderEntity() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FolderEntity.title.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for FolderEntity() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FolderEntity.title.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t FolderEntity.accountTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for FolderEntity() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FolderEntity.accountTitle.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for FolderEntity() + 28));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FolderEntity.accountTitle.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t FolderEntity.isSharedFolder.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FolderEntity() + 32));
}

uint64_t FolderEntity.isSharedFolder.setter(char a1)
{
  uint64_t result = type metadata accessor for FolderEntity();
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*FolderEntity.isSharedFolder.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t FolderEntity.isSmartFolder.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FolderEntity() + 36));
}

uint64_t FolderEntity.isSmartFolder.setter(char a1)
{
  uint64_t result = type metadata accessor for FolderEntity();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*FolderEntity.isSmartFolder.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

void FolderEntity.hash(into:)()
{
  type metadata accessor for FolderID();
  sub_100466020(&qword_10069C8B8, (void (*)(uint64_t))&type metadata accessor for FolderID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for FolderEntity();
  type metadata accessor for URL();
  sub_100466020((unint64_t *)&unk_10069BA10, (void (*)(uint64_t))&type metadata accessor for URL);
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 32)));
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 36)));
}

Swift::Int FolderEntity.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100463F40()
{
  return Hasher._finalize()();
}

uint64_t sub_100463F7C@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B078 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1006CE278;
  char v3 = byte_1006CE280;
  char v4 = byte_1006CE281;
  char v5 = byte_1006CE282;
  char v6 = byte_1006CE283;
  *(void *)a1 = static FolderEntity.defaultQuery;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;
  *(unsigned char *)(a1 + 18) = v5;
  *(unsigned char *)(a1 + 19) = v6;
  swift_retain();

  return swift_retain();
}

uint64_t sub_100464014(uint64_t a1)
{
  uint64_t v2 = sub_100466020((unint64_t *)&qword_1006A3B50, (void (*)(uint64_t))type metadata accessor for FolderEntity);

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t FolderEntity.debugDescription.getter()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  type metadata accessor for FolderID();
  sub_100466020(&qword_10069CE00, (void (*)(uint64_t))&type metadata accessor for FolderID);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000011;
}

uint64_t FolderEntity.displayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_10069D360);
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  __chkstk_darwin(v10);
  uint64_t v11 = (int *)type metadata accessor for FolderEntity();
  if (*(unsigned char *)(v1 + v11[8]) != 1) {
    v17[1] = a1;
  }
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v12);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v1 + v11[6]));
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
  LocalizedStringResource.init(stringInterpolation:)();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v14);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v1 + v11[7]));
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  LocalizedStringResource.init(stringInterpolation:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t sub_100464538(uint64_t a1)
{
  uint64_t v2 = sub_100466020(&qword_1006A7DD8, (void (*)(uint64_t))type metadata accessor for FolderEntity);

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t FolderEntity.init(for:in:includeContents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1004645D8, 0, 0);
}

uint64_t sub_1004645D8()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = (void *)v0[4];
  uint64_t v3 = swift_allocObject();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = v1;
  id v5 = v2;
  char v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  uint64_t v7 = type metadata accessor for FolderEntity();
  *char v6 = v0;
  v6[1] = sub_1002E82EC;
  uint64_t v8 = v0[2];
  return NSManagedObjectContext.perform<A>(_:)(v8, sub_100466C60, v3, v7);
}

uint64_t type metadata accessor for FolderEntity()
{
  uint64_t result = qword_1006A7EA8;
  if (!qword_1006A7EA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10046471C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = 0;
  id v4 = [a1 existingObjectWithID:a2 error:v9];
  id v5 = v9[0];
  if (v4)
  {
    v9[1] = &OBJC_PROTOCOL___ICFolderObject;
    char v6 = (void *)swift_dynamicCastObjCProtocolUnconditional();
    id v7 = v5;
    sub_1004A3274(v6, a3);
  }
  else
  {
    id v8 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t sub_100464804()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t FolderEntity.init(for:in:includeContents:noteContext:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a3;
  v5[5] = a5;
  v5[2] = a1;
  v5[3] = a2;
  v5[6] = type metadata accessor for FolderEntity();
  v5[7] = swift_task_alloc();
  id v8 = a2;
  id v9 = a3;
  return _swift_task_switch(sub_1004648F8, 0, 0);
}

uint64_t sub_1004648F8()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = (void *)v0[4];
  uint64_t v3 = swift_allocObject();
  v0[8] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = v2;
  id v5 = v1;
  char v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *char v6 = v0;
  v6[1] = sub_1004649E4;
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  return NSManagedObjectContext.perform<A>(_:)(v7, sub_100466C60, v3, v8);
}

uint64_t sub_1004649E4()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1002E8A84;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100464B00;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100464B00()
{
  uint64_t v1 = v0[7];
  uint64_t v3 = (void *)v0[4];
  uint64_t v2 = (void *)v0[5];
  uint64_t v4 = v0[2];
  id v5 = (void *)v0[3];

  sub_10029D25C(v1, v4);
  swift_task_dealloc();
  char v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

void sub_100464BA0(void *a1@<X1>, void *a2@<X8>)
{
  FolderID.managedIdentifier.getter();
  id v4 = a1;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [self folderWithIdentifier:v5 context:v4];

  if (v6)
  {
    id v7 = [v6 objectID];
  }
  else
  {
    id v7 = 0;
  }
  *a2 = v7;
}

void sub_100464C70(void *a1@<X0>, void *a2@<X8>)
{
  FolderID.managedIdentifier.getter();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a1 legacyFolderWithIdentifier:v4];

  if (v5)
  {
    id v6 = [v5 objectID];
    swift_unknownObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  *a2 = v6;
}

uint64_t sub_100464D20(uint64_t a1, void *a2, void *a3)
{
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10017B61C;
  return FolderEntity.init(for:in:)(a1, a2, a3);
}

uint64_t sub_100464DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a3;
  v5[5] = a5;
  v5[2] = a1;
  v5[3] = a2;
  return _swift_task_switch(sub_100464DF4, 0, 0);
}

uint64_t sub_100464DF4()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = (void *)v0[4];
  uint64_t v3 = swift_allocObject();
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = v1;
  id v5 = v2;
  id v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *id v6 = v0;
  v6[1] = sub_1002E8FEC;
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[2];
  return NSManagedObjectContext.perform<A>(_:)(v8, sub_100466C60, v3, v7);
}

uint64_t sub_100464EE0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_100161724;
  return FolderEntity.init(for:in:includeContents:noteContext:)(a1, a2, a3, 0, a5);
}

uint64_t sub_100464F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006A7D70 + dword_1006A7D70);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1001947D4;
  return v7(a1, a2);
}

uint64_t _s11MobileNotes12FolderEntityV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((static FolderID.== infix(_:_:)() & 1) == 0
    || (id v4 = (int *)type metadata accessor for FolderEntity(), (static URL.== infix(_:_:)() & 1) == 0))
  {
LABEL_14:
    char v11 = 0;
    return v11 & 1;
  }
  uint64_t v5 = v4[6];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v11 = 0, (v10 & 1) != 0))
  {
    uint64_t v12 = v4[7];
    uint64_t v13 = *(void *)(a1 + v12);
    uint64_t v14 = *(void *)(a1 + v12 + 8);
    Swift::String v15 = (void *)(a2 + v12);
    BOOL v16 = v13 == *v15 && v14 == v15[1];
    if (v16 || (char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), v11 = 0, (v17 & 1) != 0))
    {
      if (*(unsigned __int8 *)(a1 + v4[8]) == *(unsigned __int8 *)(a2 + v4[8]))
      {
        char v11 = *(unsigned char *)(a1 + v4[9]) ^ *(unsigned char *)(a2 + v4[9]) ^ 1;
        return v11 & 1;
      }
      goto LABEL_14;
    }
  }
  return v11 & 1;
}

uint64_t sub_100465140(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v3 = type metadata accessor for FolderID();
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  v2[9] = *(void *)(v4 + 64);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = sub_10002F214(&qword_10069D370);
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_1004652A8, 0, 0);
}

uint64_t sub_1004652A8()
{
  uint64_t v51 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  FolderID.contextType.getter();
  uint64_t v2 = type metadata accessor for ManagedEntityContextType();
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = *(void **)(v0 + 48);
    FolderID.managedIdentifier.getter();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v4 managedObjectIDForURIString:v5];

    if (v6)
    {
LABEL_18:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v47 = *(uint64_t (**)(id))(v0 + 8);
      return v47(v6);
    }
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 40);
    static Logger.link.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v10, v8);
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v15 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v17 = *(void *)(v0 + 96);
    uint64_t v19 = *(void *)(v0 + 56);
    uint64_t v18 = *(void *)(v0 + 64);
    if (v13)
    {
      uint64_t v49 = *(void *)(v0 + 96);
      id v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)id v20 = 136315138;
      sub_100466020(&qword_10069CE00, (void (*)(uint64_t))&type metadata accessor for FolderID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 32) = sub_10045DA1C(v21, v22, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "FolderEntity: Unable to resolve managed object ID for entity ID: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v49);
    }
    else
    {
      (*(void (**)(void, void))(v18 + 8))(*(void *)(v0 + 88), *(void *)(v0 + 56));

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v17);
    }
LABEL_17:
    id v6 = 0;
    goto LABEL_18;
  }
  int v23 = (*(uint64_t (**)(void, uint64_t))(v3 + 88))(*(void *)(v0 + 128), v2);
  if (v23 == enum case for ManagedEntityContextType.modern(_:))
  {
    uint64_t v25 = *(void *)(v0 + 72);
    uint64_t v24 = *(void *)(v0 + 80);
    uint64_t v26 = *(void *)(v0 + 56);
    uint64_t v27 = *(void *)(v0 + 64);
    uint64_t v28 = *(void *)(v0 + 40);
    id v29 = [*(id *)(v0 + 48) modernManagedObjectContext];
    *(void *)(v0 + 136) = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v24, v28, v26);
    unint64_t v30 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v31 = swift_allocObject();
    *(void *)(v0 + 144) = v31;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))(v31 + v30, v24, v26);
    *(void *)(v31 + ((v25 + v30 + 7) & 0xFFFFFFFFFFFFFFF8)) = v29;
    v29;
    id v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v32;
    uint64_t v33 = sub_10002F214(&qword_10069D520);
    void *v32 = v0;
    v32[1] = sub_1004658D8;
    uint64_t v34 = sub_100466BC8;
    uint64_t v35 = v0 + 24;
    uint64_t v36 = v31;
LABEL_10:
    return NSManagedObjectContext.perform<A>(_:)(v35, v34, v36, v33);
  }
  if (v23 == enum case for ManagedEntityContextType.html(_:))
  {
    id v37 = [*(id *)(v0 + 48) htmlManagedObjectContext];
    *(void *)(v0 + 160) = v37;
    if (!v37) {
      goto LABEL_17;
    }
    uint64_t v38 = v37;
    uint64_t v39 = *(void *)(v0 + 80);
    uint64_t v40 = *(void *)(v0 + 56);
    uint64_t v41 = *(void *)(v0 + 64);
    uint64_t v42 = *(void **)(v0 + 48);
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 16))(v39, *(void *)(v0 + 40), v40);
    unint64_t v43 = (*(unsigned __int8 *)(v41 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    uint64_t v44 = swift_allocObject();
    *(void *)(v0 + 168) = v44;
    *(void *)(v44 + 16) = v42;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 32))(v44 + v43, v39, v40);
    v38;
    id v45 = v42;
    uint64_t v46 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v46;
    uint64_t v33 = sub_10002F214(&qword_10069D520);
    void *v46 = v0;
    v46[1] = sub_100465A88;
    uint64_t v34 = sub_100466AB4;
    uint64_t v35 = v0 + 16;
    uint64_t v36 = v44;
    goto LABEL_10;
  }
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t sub_1004658D8()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004659F0, 0, 0);
}

uint64_t sub_1004659F0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100465A88()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 160);
  swift_task_dealloc();
  swift_release();

  return _swift_task_switch(sub_100465BB8, 0, 0);
}

uint64_t sub_100465BB8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100465C50()
{
  return sub_100466020((unint64_t *)&unk_1006A7D90, (void (*)(uint64_t))type metadata accessor for FolderEntity);
}

uint64_t sub_100465C98()
{
  return sub_100466020((unint64_t *)&unk_1006A35F0, (void (*)(uint64_t))type metadata accessor for FolderEntity);
}

uint64_t sub_100465CE0()
{
  return sub_100466020(&qword_1006A7DA0, (void (*)(uint64_t))type metadata accessor for FolderEntity);
}

uint64_t sub_100465D28()
{
  return sub_100466020(&qword_1006A7DA8, (void (*)(uint64_t))type metadata accessor for FolderEntity);
}

uint64_t sub_100465D70()
{
  return sub_100466020(&qword_10069C618, (void (*)(uint64_t))&type metadata accessor for FolderID);
}

uint64_t sub_100465DB8()
{
  return sub_100466020(&qword_1006A7DB0, (void (*)(uint64_t))type metadata accessor for FolderEntity);
}

uint64_t sub_100465E00()
{
  return sub_100466020((unint64_t *)&unk_1006A7DB8, (void (*)(uint64_t))type metadata accessor for FolderEntity);
}

uint64_t sub_100465E48()
{
  return sub_100466020((unint64_t *)&unk_1006A2DC0, (void (*)(uint64_t))type metadata accessor for FolderEntity);
}

uint64_t sub_100465E90()
{
  return sub_100466020(&qword_10069C8B8, (void (*)(uint64_t))&type metadata accessor for FolderID);
}

unint64_t sub_100465EDC()
{
  unint64_t result = qword_1006A7DC8;
  if (!qword_1006A7DC8)
  {
    sub_10001DFF4(&qword_1006A7DD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7DC8);
  }
  return result;
}

uint64_t sub_100465F38()
{
  return sub_100466020(&qword_1006A7DD8, (void (*)(uint64_t))type metadata accessor for FolderEntity);
}

uint64_t sub_100465F80()
{
  return sub_100466020(&qword_1006A7DE0, (void (*)(uint64_t))type metadata accessor for FolderEntity);
}

uint64_t sub_100465FC8(uint64_t a1)
{
  uint64_t result = sub_100466020((unint64_t *)&qword_1006A3B50, (void (*)(uint64_t))type metadata accessor for FolderEntity);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100466020(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for FolderEntity(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for FolderID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = a3[7];
    uint64_t v14 = (void *)((char *)a1 + v12);
    uint64_t v15 = (void *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = (void *)((char *)a1 + v13);
    uint64_t v18 = (void *)((char *)a2 + v13);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)a1 + v20) = *((unsigned char *)a2 + v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FolderEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FolderID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FolderEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FolderID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = (void *)(a1 + v12);
  uint64_t v17 = (void *)(a2 + v12);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FolderEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FolderID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  void *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for FolderEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FolderID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for FolderEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FolderID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  void *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for FolderEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004666C8);
}

uint64_t sub_1004666C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FolderID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for FolderEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004667F4);
}

uint64_t sub_1004667F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FolderID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for URL();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_100466908()
{
  uint64_t result = type metadata accessor for FolderID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004669E8()
{
  uint64_t v1 = type metadata accessor for FolderID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100466AB4(void *a1@<X8>)
{
  type metadata accessor for FolderID();
  sub_100464C70(*(void **)(v1 + 16), a1);
}

uint64_t sub_100466B24()
{
  uint64_t v1 = type metadata accessor for FolderID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100466BC8(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for FolderID() - 8);
  sub_100464BA0(*(void **)(v1+ ((*(void *)(v3 + 64)+ ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)), a1);
}

void sub_100466C60(uint64_t a1@<X8>)
{
}

uint64_t sub_100466C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10002B754(a1, &qword_1006A09A0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  type metadata accessor for NoteEntity(0);
  return swift_task_create();
}

uint64_t sub_100466E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10002B754(a1, &qword_1006A09A0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_10002F214(&qword_10069E5E0);
  return swift_task_create();
}

uint64_t sub_100466F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10002B754(a1, &qword_1006A09A0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

char *sub_100467118()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for GroupActivityDebugStatusController());
  uint64_t result = sub_100467250();
  qword_1006CE2A0 = (uint64_t)result;
  return result;
}

uint64_t sub_1004671DC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

char *sub_100467250()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = sub_10002F214(&qword_1006A09A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002F214(&qword_1006A7F58);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR___ICGroupActivityDebugStatusController_observeNotificationsTask] = 0;
  *(void *)&v1[OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities] = _swiftEmptyArrayStorage;
  uint64_t v10 = &v1[OBJC_IVAR___ICGroupActivityDebugStatusController__states];
  uint64_t v11 = v1;
  unint64_t v21 = sub_100167F0C((uint64_t)_swiftEmptyArrayStorage);
  sub_10002F214(&qword_1006A7F48);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v9, v6);

  v20.receiver = v11;
  v20.super_class = ObjectType;
  id v12 = [super init];
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
  type metadata accessor for MainActor();
  uint64_t v14 = (char *)v12;
  uint64_t v15 = static MainActor.shared.getter();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  v16[4] = v14;
  uint64_t v17 = sub_10030B6A4((uint64_t)v5, (uint64_t)&unk_1006A7F68, (uint64_t)v16);

  *(void *)&v14[OBJC_IVAR___ICGroupActivityDebugStatusController_observeNotificationsTask] = v17;
  swift_release();
  return v14;
}

uint64_t sub_1004674C0()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1003123C4;
  return sub_10046756C();
}

uint64_t sub_10046756C()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for Notification();
  v1[21] = v2;
  v1[22] = *(void *)(v2 - 8);
  v1[23] = swift_task_alloc();
  sub_10002F214(qword_10069F2D8);
  v1[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v1[25] = v3;
  v1[26] = *(void *)(v3 - 8);
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_1004676B8, 0, 0);
}

uint64_t sub_1004676B8()
{
  id v1 = [self defaultCenter];
  if (qword_10069AEC0 != -1) {
    swift_once();
  }
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  uint64_t v2 = sub_10046B190((unint64_t *)&qword_1006A7590, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[28] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100467814;
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[25];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v5, v2);
}

uint64_t sub_100467814()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100467AB0;
  }
  else {
    uint64_t v2 = sub_100467928;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100467928()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[22];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[23], v1, v2);
    unint64_t v6 = Notification.userInfo.getter();
    v0[30] = v6;
    if (v6)
    {
      uint64_t v9 = swift_bridgeObjectRetain();
      unint64_t v6 = sub_10046AB9C(v9);
      v0[31] = v6;
      v0[32] = v7;
      v0[33] = v8;
      v0[34] = v10;
      if (v7)
      {
        v0[35] = type metadata accessor for MainActor();
        v0[36] = static MainActor.shared.getter();
        uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v13 = v12;
        unint64_t v6 = (unint64_t)sub_100467B34;
        uint64_t v7 = v11;
        uint64_t v8 = v13;
        return _swift_task_switch(v6, v7, v8);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return _swift_task_switch(v6, v7, v8);
  }
  (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100467AB0()
{
  *(void *)(v0 + 152) = *(void *)(v0 + 232);
  sub_10002F214(&qword_1006A3D90);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t sub_100467B34()
{
  swift_release();
  return _swift_task_switch(sub_100467B9C, 0, 0);
}

uint64_t sub_100467B9C()
{
  *(void *)(v0 + 296) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100467C28, v2, v1);
}

uint64_t sub_100467C28()
{
  swift_release();
  return _swift_task_switch(sub_100467C90, 0, 0);
}

uint64_t sub_100467C90()
{
  *(void *)(v0 + 120) = 0xD000000000000015;
  uint64_t v1 = *(void *)(v0 + 240);
  *(void *)(v0 + 128) = 0x8000000100558400;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v1 + 16) && (unint64_t v2 = sub_100033028(v0 + 16), (v3 & 1) != 0))
  {
    sub_100032E28(*(void *)(*(void *)(v0 + 240) + 56) + 32 * v2, v0 + 88);
  }
  else
  {
    *(_OWORD *)(v0 + 88) = 0u;
    *(_OWORD *)(v0 + 104) = 0u;
  }
  uint64_t v4 = swift_bridgeObjectRelease();
  if (*(void *)(v0 + 112))
  {
    sub_100033134(v0 + 16);
    sub_100032E84((_OWORD *)(v0 + 88), (_OWORD *)(v0 + 56));
    swift_dynamicCast();
    *(void *)(v0 + 304) = *(void *)(v0 + 136);
    *(unsigned char *)(v0 + 145) = *(unsigned char *)(v0 + 144);
    *(void *)(v0 + 312) = static MainActor.shared.getter();
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v9 = v8;
    uint64_t v4 = (uint64_t)sub_100467E10;
    uint64_t v5 = v7;
    uint64_t v6 = v9;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100467E10()
{
  unint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 256);
  char v6 = *(unsigned char *)(v0 + 145);
  swift_release();
  sub_100467FD8(v1, v6, v5, v4, v3, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100467ECC, 0, 0);
}

uint64_t sub_100467ECC()
{
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  sub_1002C0384(*(void *)(v0 + 304), *(unsigned char *)(v0 + 145));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_10046B190((unint64_t *)&qword_1006A7590, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v5;
  void *v5 = v0;
  v5[1] = sub_100467814;
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 200);
  return dispatch thunk of AsyncIteratorProtocol.next()(v6, v7, v4);
}

uint64_t sub_100467FD8(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = sub_10002F214(&qword_1006A09A0);
  __chkstk_darwin(v14 - 8);
  uint64_t v53 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v16 = v59[0];
  uint64_t v17 = *(void *)(v59[0] + 16);
  uint64_t v57 = a5;
  if (v17 && (unint64_t v18 = sub_1002B64E0(a3, a4, a5, a6), (v19 & 1) != 0))
  {
    uint64_t v20 = *(void *)(v16 + 56) + 24 * v18;
    unint64_t v21 = *(void *)v20;
    uint64_t v22 = a3;
    unint64_t v23 = a1;
    uint64_t v24 = *(void *)(v20 + 16);
    char v25 = *(unsigned char *)(v20 + 8);
    sub_10016ECFC(*(void *)v20, v25);
    uint64_t v54 = v24;
    a1 = v23;
    a3 = v22;
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v26 = v25;
    a5 = v57;
    sub_1002C0384(v21, v26);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v54 = 0;
  }
  id v55 = v7;
  uint64_t v27 = (uint64_t *)&v7[OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities];
  swift_beginAccess();
  uint64_t v28 = a4;
  char v29 = sub_1002D66D8(a3, a4, a5, a6, *v27);
  uint64_t v30 = a6;
  if ((v29 & 1) == 0)
  {
    uint64_t v31 = a5;
    swift_beginAccess();
    id v32 = (void *)*v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v27 = (uint64_t)v32;
    char v34 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      id v32 = sub_1001A94D4(0, v32[2] + 1, 1, v32);
      *uint64_t v27 = (uint64_t)v32;
    }
    unint64_t v36 = v32[2];
    unint64_t v35 = v32[3];
    if (v36 >= v35 >> 1)
    {
      id v32 = sub_1001A94D4((void *)(v35 > 1), v36 + 1, 1, v32);
      *uint64_t v27 = (uint64_t)v32;
    }
    v32[2] = v36 + 1;
    id v37 = &v32[4 * v36];
    v37[4] = a3;
    v37[5] = v28;
    a5 = v31;
    v37[6] = v31;
    v37[7] = v30;
    swift_endAccess();
    a2 = v34;
  }
  uint64_t v56 = a3;
  switch(a2)
  {
    case 1:
      if (a1 >= 2) {
        goto LABEL_12;
      }
      goto LABEL_16;
    case 2:
      goto LABEL_16;
    case 4:
      if (a1 == 1) {
        goto LABEL_12;
      }
LABEL_16:
      unint64_t v38 = a1;
      char v39 = a2;
      if (v54)
      {
        swift_retain();
        sub_10002F214(&qword_1006A3D90);
        Task.cancel()();
        swift_release_n();
      }
      uint64_t v46 = 0;
      uint64_t v42 = v28;
      break;
    default:
LABEL_12:
      unint64_t v38 = a1;
      char v39 = a2;
      uint64_t v40 = type metadata accessor for TaskPriority();
      uint64_t v41 = (uint64_t)v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v53, 1, 1, v40);
      type metadata accessor for MainActor();
      uint64_t v42 = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v43 = v55;
      uint64_t v44 = static MainActor.shared.getter();
      id v45 = (void *)swift_allocObject();
      v45[2] = v44;
      v45[3] = &protocol witness table for MainActor;
      v45[4] = v43;
      v45[5] = a3;
      v45[6] = v28;
      v45[7] = a5;
      v45[8] = v30;
      uint64_t v46 = sub_100466F90(v41, (uint64_t)&unk_1006A7F80, (uint64_t)v45);
      swift_release();
      break;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10016ECFC(v38, v39);
  swift_retain();
  uint64_t v47 = (void (*)(uint64_t *, void))static Published.subscript.modify();
  uint64_t v49 = v48;
  char v50 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v58 = *v49;
  *uint64_t v49 = 0x8000000000000000;
  sub_1002BD3A8(v38, v39, v46, v56, v42, v57, v30, v50);
  *uint64_t v49 = v58;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47(v59, 0);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1004685C0()
{
  return type metadata accessor for GroupActivityDebugStatusController();
}

uint64_t type metadata accessor for GroupActivityDebugStatusController()
{
  uint64_t result = qword_1006A7F30;
  if (!qword_1006A7F30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100468614()
{
  sub_1004686BC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1004686BC()
{
  if (!qword_1006A7F40)
  {
    sub_10001DFF4(&qword_1006A7F48);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1006A7F40);
    }
  }
}

uint64_t destroy for GroupActivityDebugStatusController.ActivityState(uint64_t a1)
{
  sub_1002C0384(*(void *)a1, *(unsigned char *)(a1 + 8));

  return swift_release();
}

uint64_t _s11MobileNotes34GroupActivityDebugStatusControllerC13ActivityStateVwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10016ECFC(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GroupActivityDebugStatusController.ActivityState(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10016ECFC(*(void *)a2, v5);
  unint64_t v6 = *(void *)a1;
  *(void *)a1 = v4;
  char v7 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  sub_1002C0384(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GroupActivityDebugStatusController.ActivityState(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t v5 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_1002C0384(v5, v6);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivityDebugStatusController.ActivityState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupActivityDebugStatusController.ActivityState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupActivityDebugStatusController.ActivityState()
{
  return &type metadata for GroupActivityDebugStatusController.ActivityState;
}

uint64_t destroy for GroupActivityDebugStatusController.GroupActivityIdentifier()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for GroupActivityDebugStatusController.GroupActivityIdentifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GroupActivityDebugStatusController.GroupActivityIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for GroupActivityDebugStatusController.GroupActivityIdentifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GroupActivityDebugStatusController.GroupActivityIdentifier()
{
  return &type metadata for GroupActivityDebugStatusController.GroupActivityIdentifier;
}

uint64_t sub_100468A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (*(void *)(v15 + 16) && (unint64_t v8 = sub_1002B64E0(a1, a2, a3, a4), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(v15 + 56) + 24 * v8;
    unint64_t v11 = *(void *)v10;
    char v12 = *(unsigned char *)(v10 + 8);
    sub_10016ECFC(*(void *)v10, v12);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v13 = sub_1003225F4(v11, v12);
    sub_1002C0384(v11, v12);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0x6E776F6E6B6E55;
  }
  return v13;
}

uint64_t sub_100468BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (*(void *)(v14 + 16) && (unint64_t v8 = sub_1002B64E0(a1, a2, a3, a4), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(v14 + 56) + 24 * v8;
    unint64_t v11 = *(void *)v10;
    uint64_t v12 = *(unsigned __int8 *)(v10 + 8);
    sub_10016ECFC(*(void *)v10, *(unsigned char *)(v10 + 8));
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    switch(v12)
    {
      case 1:
        if (v11)
        {
          if (v11 == 1)
          {
            sub_1002C0384(1uLL, 1);
            swift_release();
            uint64_t result = 0x657669746341;
          }
          else
          {
            sub_1002C0384(v11, 1);
            swift_release();
            uint64_t result = 0x6164696C61766E49;
          }
        }
        else
        {
LABEL_14:
          sub_1002C0384(v11, v12);
          swift_release();
          uint64_t result = 0x746E6573657250;
        }
        break;
      case 2:
        sub_1002C0384(v11, 2);
        swift_release();
        uint64_t result = 0x676E697972746552;
        break;
      case 3:
        sub_1002C0384(v11, 3);
        swift_release();
        uint64_t result = 1952867660;
        break;
      case 4:
        switch(v11)
        {
          case 1uLL:
            swift_release();
            uint64_t result = 0xD000000000000013;
            break;
          case 2uLL:
            goto LABEL_14;
          case 3uLL:
            swift_release();
            uint64_t result = 0x676E697661654CLL;
            break;
          default:
            swift_release();
            uint64_t result = 0x676E697472617453;
            break;
        }
        break;
      default:
        sub_1002C0384(v11, 0);
        swift_release();
        uint64_t result = 0x20676E696E696F4ALL;
        break;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0x6E776F6E6B6E55;
  }
  return result;
}

uint64_t sub_100468F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[13] = a4;
  uint64_t v9 = type metadata accessor for ContinuousClock();
  v8[18] = v9;
  v8[19] = *(void *)(v9 - 8);
  v8[20] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant();
  v8[21] = v10;
  v8[22] = *(void *)(v10 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  type metadata accessor for MainActor();
  v8[25] = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[26] = v12;
  v8[27] = v11;
  return _swift_task_switch(sub_100469074, v12, v11);
}

uint64_t sub_100469074()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  static ContinuousClock.Instant.now.getter();
  ContinuousClock.Instant.advanced(by:)();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 224) = v4;
  *(void *)(v0 + 232) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v1, v2);
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 72) = 0;
  *(unsigned char *)(v0 + 88) = 1;
  static Clock<>.continuous.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v5;
  uint64_t v6 = sub_10046B190(&qword_1006A7F88, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  void *v5 = v0;
  v5[1] = sub_1004691D0;
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v9 = *(void *)(v0 + 144);
  return static Task<>.sleep<A>(until:tolerance:clock:)(v7, v0 + 72, v8, v9, v6);
}

uint64_t sub_1004691D0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[28];
  if (v0)
  {
    uint64_t v4 = v2[24];
    uint64_t v5 = v2[21];
    (*(void (**)(void, void))(v2[19] + 8))(v2[20], v2[18]);
    v3(v4, v5);
    uint64_t v6 = v2[26];
    uint64_t v7 = v2[27];
    uint64_t v8 = sub_1004696C0;
  }
  else
  {
    uint64_t v9 = v2[24];
    uint64_t v10 = v2[21];
    (*(void (**)(void, void))(v2[19] + 8))(v2[20], v2[18]);
    v3(v9, v10);
    uint64_t v6 = v2[26];
    uint64_t v7 = v2[27];
    uint64_t v8 = sub_10046934C;
  }
  return _swift_task_switch(v8, v6, v7);
}

uint64_t sub_10046934C()
{
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v1 = v0[12];
  if (*(void *)(v1 + 16) && (unint64_t v2 = sub_1002B64E0(v0[14], v0[15], v0[16], v0[17]), (v3 & 1) != 0))
  {
    uint64_t v4 = *(void *)(v1 + 56) + 24 * v2;
    unint64_t v5 = *(void *)v4;
    uint64_t v6 = *(unsigned __int8 *)(v4 + 8);
    sub_10016ECFC(*(void *)v4, *(unsigned char *)(v4 + 8));
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    switch(v6)
    {
      case 1:
        if (v5)
        {
          if (v5 != 1) {
            goto LABEL_4;
          }
          unint64_t v23 = 1;
        }
        else
        {
          unint64_t v23 = 0;
        }
        char v24 = 1;
        goto LABEL_15;
      case 2:
        unint64_t v23 = v5;
        char v24 = 2;
LABEL_15:
        sub_1002C0384(v23, v24);
        break;
      case 4:
        switch(v5)
        {
          case 1uLL:
            goto LABEL_5;
          default:
            goto LABEL_16;
        }
      default:
LABEL_4:
        sub_1002C0384(v5, v6);
LABEL_5:
        uint64_t v8 = v0[16];
        uint64_t v7 = v0[17];
        uint64_t v10 = v0[14];
        uint64_t v9 = v0[15];
        uint64_t v11 = v0[13];
        swift_release();
        uint64_t v12 = v11 + OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = sub_10046AEA8(v12, v10, v9, v8, v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v14 = *(void *)(*(void *)v12 + 16);
        if (v14 < v13)
        {
          __break(1u);
          JUMPOUT(0x10046969CLL);
        }
        uint64_t v16 = v0[16];
        uint64_t v15 = v0[17];
        uint64_t v18 = v0[14];
        uint64_t v17 = v0[15];
        sub_1002E41F8(v13, v14);
        swift_endAccess();
        swift_getKeyPath();
        swift_getKeyPath();
        char v19 = (void (*)(void *, void))static Published.subscript.modify();
        unint64_t v20 = sub_100469DD8(v18, v17, v16, v15);
        sub_10046B14C(v20, v21, v22);
        v19(v0 + 2, 0);
        swift_release();
        break;
    }
LABEL_16:
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1004696C0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Int sub_10046974C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1004697F8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1004698AC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100469954@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100469960(uint64_t *a1, uint64_t *a2)
{
  return sub_10046AA04(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

unint64_t sub_100469980()
{
  unint64_t result = qword_1006A7F50;
  if (!qword_1006A7F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A7F50);
  }
  return result;
}

uint64_t sub_1004699D4@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100469A54(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

double sub_100469ACC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1002B6300(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *id v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002BD98C();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_10016EFCC((long long *)(*(void *)(v9 + 56) + 40 * v6), a2);
    sub_100469EEC(v6, v9);
    *id v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_100469C00@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1002B62FC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *id v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002BE280();
      uint64_t v9 = v11;
    }

    sub_100032E84((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_10046A208(v6, v9);
    *id v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_100469CF8(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1002B6DD4(a1, a2);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *id v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002BEC24();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_10046A3FC(v6, v9);
  *id v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100469DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1002B64E0(a1, a2, a3, a4);
  LOBYTE(a4) = v11;
  swift_bridgeObjectRelease();
  if ((a4 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v5;
  uint64_t v16 = *v5;
  uint64_t *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002BF7E8();
    uint64_t v13 = v16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(*(void *)(v13 + 56) + 24 * v10);
  sub_10046A7C8(v10, v13);
  uint64_t *v5 = v13;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_100469EEC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v37 = (result + 1) & v12;
      unint64_t v38 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v39 = v5 + 16;
      unint64_t v36 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v11;
        uint64_t v19 = v15;
        v38(v8, *(void *)(a2 + 48) + v14 * v11, v4);
        sub_10046B190((unint64_t *)&qword_1006A4DD0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v36)(v8, v4);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v17 * a1;
            uint64_t v9 = v16;
            if (v17 * a1 < v18 || (uint64_t v14 = v17, result >= v24 + v18 + v17))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v25 = *(void *)(a2 + 56);
            unint64_t v26 = v25 + 40 * a1;
            uint64_t v27 = (long long *)(v25 + 40 * v11);
            if (a1 != v11 || (a1 = v11, v26 >= (unint64_t)v27 + 40))
            {
              long long v28 = *v27;
              long long v29 = v27[1];
              *(void *)(v26 + 32) = *((void *)v27 + 4);
              *(_OWORD *)unint64_t v26 = v28;
              *(_OWORD *)(v26 + 16) = v29;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v15;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10046A208(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        id v11 = v10;
        String.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();

        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          int64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            long long v9 = v19[1];
            _OWORD *v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10046A3FC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10046A5D4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Swift::UInt v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        Swift::Int v12 = (void *)(v11 + 8 * v3);
        unint64_t v13 = (void *)(v11 + 8 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          void *v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for FastSyncPresenceController.EditorDebounceState(0) - 8)
                        + 72);
        int64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10046A7C8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(a2 + 48) + 32 * v6 + 24);
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        if (v10)
        {
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          Hasher._combine(_:)(0);
        }
        Swift::Int v11 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_14:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 32 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 32 * v6);
          if (v3 != v6 || v14 >= v15 + 2)
          {
            long long v16 = v15[1];
            *uint64_t v14 = *v15;
            v14[1] = v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = v17 + 24 * v3;
          uint64_t v19 = (long long *)(v17 + 24 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= (unint64_t)v19 + 24))
          {
            long long v9 = *v19;
            *(void *)(v18 + 16) = *((void *)v19 + 2);
            *(_OWORD *)unint64_t v18 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10046AA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_10046AAA8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10046AAE8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100161724;
  return sub_1004674C0();
}

unint64_t sub_10046AB9C(uint64_t a1)
{
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v2 = sub_100033028((uint64_t)v8), (v3 & 1) != 0))
  {
    sub_100032E28(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v9);
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  sub_100033134((uint64_t)v8);
  if (!*((void *)&v10 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10002B754((uint64_t)&v9, &qword_10069B4D0);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v4 = 0xD000000000000011;
  strcpy((char *)&v9, "RCCNoteTitle");
  BYTE13(v9) = 0;
  HIWORD(v9) = -5120;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_100033028((uint64_t)v8), (v6 & 1) != 0))
  {
    sub_100032E28(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v9);
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100033134((uint64_t)v8);
  if (*((void *)&v10 + 1)) {
    swift_dynamicCast();
  }
  else {
    sub_10002B754((uint64_t)&v9, &qword_10069B4D0);
  }
  return v4;
}

uint64_t sub_10046AD7C()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10046ADCC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  Swift::Int v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *Swift::Int v11 = v2;
  v11[1] = sub_100161724;
  return sub_100468F0C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10046AEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (v6)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t result = v5[v9 + 4];
      uint64_t v13 = v5[v9 + 6];
      uint64_t v12 = v5[v9 + 7];
      BOOL v14 = result == a2 && v5[v9 + 5] == a3;
      if (v14 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v12)
        {
          if (a5)
          {
            BOOL v15 = v13 == a4 && v12 == a5;
            if (v15 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
LABEL_17:
              unint64_t v16 = v10 + 1;
              if (!__OFADD__(v10, 1))
              {
                uint64_t v36 = a5;
                unint64_t v17 = v5[2];
                while (1)
                {
                  if (v16 == v17) {
                    return v10;
                  }
                  if (v16 >= v17)
                  {
                    __break(1u);
LABEL_48:
                    __break(1u);
LABEL_49:
                    __break(1u);
LABEL_50:
                    __break(1u);
                    break;
                  }
                  uint64_t v20 = &v5[v9];
                  uint64_t result = v5[v9 + 8];
                  uint64_t v22 = v5[v9 + 10];
                  uint64_t v21 = v5[v9 + 11];
                  BOOL v23 = result == a2 && v5[v9 + 9] == a3;
                  if (v23 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                  {
                    if (v21)
                    {
                      if (v36)
                      {
                        if (v22 == a4 && v21 == v36) {
                          goto LABEL_21;
                        }
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if (result) {
                          goto LABEL_21;
                        }
                      }
                    }
                    else if (!v36)
                    {
                      goto LABEL_21;
                    }
                  }
                  if (v16 != v10)
                  {
                    if (v10 >= v17) {
                      goto LABEL_49;
                    }
                    uint64_t v25 = &v5[4 * v10 + 4];
                    uint64_t v26 = v25[1];
                    uint64_t v27 = v25[3];
                    uint64_t v32 = v25[2];
                    uint64_t v28 = v20[9];
                    uint64_t v35 = v20[8];
                    uint64_t v29 = v20[11];
                    uint64_t v33 = *v25;
                    uint64_t v34 = v20[10];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v5 = sub_1002E0894(v5);
                    }
                    uint64_t v30 = &v5[4 * v10];
                    v30[4] = v35;
                    v30[5] = v28;
                    v30[6] = v34;
                    v30[7] = v29;
                    swift_bridgeObjectRelease();
                    uint64_t result = swift_bridgeObjectRelease();
                    if (v16 >= v5[2]) {
                      goto LABEL_50;
                    }
                    unint64_t v18 = &v5[v9];
                    v18[8] = v33;
                    v18[9] = v26;
                    v18[10] = v32;
                    v18[11] = v27;
                    swift_bridgeObjectRelease();
                    uint64_t result = swift_bridgeObjectRelease();
                    *(void *)a1 = v5;
                  }
                  if (__OFADD__(v10++, 1)) {
                    goto LABEL_48;
                  }
LABEL_21:
                  ++v16;
                  unint64_t v17 = v5[2];
                  v9 += 4;
                }
              }
              __break(1u);
              return result;
            }
          }
        }
        else if (!a5)
        {
          goto LABEL_17;
        }
      }
      ++v10;
      v9 += 4;
      if (v6 == v10) {
        return v5[2];
      }
    }
  }
  return 0;
}

unint64_t sub_10046B14C(unint64_t result, char a2, uint64_t a3)
{
  if (a3 != 1)
  {
    sub_1002C0384(result, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10046B190(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10046B1D8()
{
  return _swift_task_switch(sub_10046B1F4, 0, 0);
}

uint64_t sub_10046B1F4()
{
  type metadata accessor for SiriVocabulary.Corpus();
  swift_asyncLet_begin();
  swift_asyncLet_begin();
  swift_asyncLet_begin();
  swift_asyncLet_begin();
  sub_10002F214(&qword_10069BA00);
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 2808) = v1;
  *(_OWORD *)(v1 + 16) = xmmword_100524CD0;
  return _swift_asyncLet_get_throwing(v0 + 656, v0 + 2760, sub_10046B384, v0 + 2768);
}

uint64_t sub_10046B384()
{
  *(void *)(v1 + 2856) = v0;
  if (v0) {
    uint64_t v2 = sub_10046B8E4;
  }
  else {
    uint64_t v2 = sub_10046B3B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10046B3B8()
{
  *(void *)(*(void *)(v0 + 2808) + 32) = *(void *)(v0 + 2760);
  swift_retain();
  return _swift_asyncLet_get_throwing(v0 + 1936, v0 + 2616, sub_10046B440, v0 + 3008);
}

uint64_t sub_10046B440()
{
  *(void *)(v1 + 2904) = v0;
  if (v0) {
    uint64_t v2 = sub_10046BA50;
  }
  else {
    uint64_t v2 = sub_10046B474;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10046B474()
{
  *(void *)(*(void *)(v0 + 2808) + 40) = *(void *)(v0 + 2616);
  swift_retain();
  return _swift_asyncLet_get_throwing(v0 + 1296, v0 + 2664, sub_10046B4FC, v0 + 2720);
}

uint64_t sub_10046B4FC()
{
  *(void *)(v1 + 2952) = v0;
  if (v0) {
    uint64_t v2 = sub_10046BBC8;
  }
  else {
    uint64_t v2 = sub_10046B530;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10046B530()
{
  *(void *)(*(void *)(v0 + 2808) + 48) = *(void *)(v0 + 2664);
  swift_retain();
  return _swift_asyncLet_get_throwing(v0 + 16, v0 + 2712, sub_10046B5B8, v0 + 3488);
}

uint64_t sub_10046B5B8()
{
  *(void *)(v1 + 3000) = v0;
  if (v0) {
    uint64_t v2 = sub_10046BD48;
  }
  else {
    uint64_t v2 = sub_10046B5EC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10046B5EC()
{
  uint64_t v1 = v0[351];
  *(void *)(v1 + 56) = v0[339];
  uint64_t v4 = v1;
  specialized Array._endMutation()();
  v0[381] = v4;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[387] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10046B6B4;
  return static SiriVocabulary.setCorporaByPriority(_:)(v4);
}

uint64_t sub_10046B6B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10046BED0, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swift_asyncLet_finish(v2 + 16, v2 + 2712, sub_10046B814, v2 + 3344);
  }
}

uint64_t sub_10046B814()
{
  return _swift_task_switch(sub_10046B830, 0, 0);
}

uint64_t sub_10046B830()
{
  return _swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_10046B850, v0 + 3248);
}

uint64_t sub_10046B850()
{
  return _swift_task_switch(sub_10046B86C, 0, 0);
}

uint64_t sub_10046B86C()
{
  return _swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_10046B88C, v0 + 2672);
}

uint64_t sub_10046B88C()
{
  return _swift_task_switch(sub_10046B8A8, 0, 0);
}

uint64_t sub_10046B8A8()
{
  return _swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_10046B8C8, v0 + 2576);
}

uint64_t sub_10046B8C8()
{
  return _swift_task_switch(sub_100318888, 0, 0);
}

uint64_t sub_10046B8E4()
{
  *(void *)(*(void *)(v0 + 2808) + 16) = 0;
  swift_release();
  return _swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_10046B968, v0 + 2816);
}

uint64_t sub_10046B968()
{
  return _swift_task_switch(sub_10046B984, 0, 0);
}

uint64_t sub_10046B984()
{
  return _swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_10046B9A4, v0 + 2864);
}

uint64_t sub_10046B9A4()
{
  return _swift_task_switch(sub_10046B9C0, 0, 0);
}

uint64_t sub_10046B9C0()
{
  return _swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_10046B9E0, v0 + 2912);
}

uint64_t sub_10046B9E0()
{
  return _swift_task_switch(sub_10046B9FC, 0, 0);
}

uint64_t sub_10046B9FC()
{
  return _swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_10046BA1C, v0 + 2960);
}

uint64_t sub_10046BA1C()
{
  return _swift_task_switch(sub_10046BA38, 0, 0);
}

uint64_t sub_10046BA38()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046BA50()
{
  uint64_t v1 = *(void *)(v0 + 2808);
  swift_release();
  *(void *)(v1 + 16) = 0;
  swift_release();
  return _swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_10046BAE0, v0 + 3056);
}

uint64_t sub_10046BAE0()
{
  return _swift_task_switch(sub_10046BAFC, 0, 0);
}

uint64_t sub_10046BAFC()
{
  return _swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_10046BB1C, v0 + 3104);
}

uint64_t sub_10046BB1C()
{
  return _swift_task_switch(sub_10046BB38, 0, 0);
}

uint64_t sub_10046BB38()
{
  return _swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_10046BB58, v0 + 3152);
}

uint64_t sub_10046BB58()
{
  return _swift_task_switch(sub_10046BB74, 0, 0);
}

uint64_t sub_10046BB74()
{
  return _swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_10046BB94, v0 + 3200);
}

uint64_t sub_10046BB94()
{
  return _swift_task_switch(sub_10046BBB0, 0, 0);
}

uint64_t sub_10046BBB0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046BBC8()
{
  uint64_t v1 = *(void *)(v0 + 2808);
  swift_release();
  swift_release();
  *(void *)(v1 + 16) = 0;
  swift_release();
  return _swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_10046BC60, v0 + 3296);
}

uint64_t sub_10046BC60()
{
  return _swift_task_switch(sub_10046BC7C, 0, 0);
}

uint64_t sub_10046BC7C()
{
  return _swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_10046BC9C, v0 + 2624);
}

uint64_t sub_10046BC9C()
{
  return _swift_task_switch(sub_10046BCB8, 0, 0);
}

uint64_t sub_10046BCB8()
{
  return _swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_10046BCD8, v0 + 3392);
}

uint64_t sub_10046BCD8()
{
  return _swift_task_switch(sub_10046BCF4, 0, 0);
}

uint64_t sub_10046BCF4()
{
  return _swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_10046BD14, v0 + 3440);
}

uint64_t sub_10046BD14()
{
  return _swift_task_switch(sub_10046BD30, 0, 0);
}

uint64_t sub_10046BD30()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046BD48()
{
  uint64_t v1 = *(void *)(v0 + 2808);
  swift_release();
  swift_release();
  swift_release();
  *(void *)(v1 + 16) = 0;
  swift_release();
  return _swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_10046BDE8, v0 + 3536);
}

uint64_t sub_10046BDE8()
{
  return _swift_task_switch(sub_10046BE04, 0, 0);
}

uint64_t sub_10046BE04()
{
  return _swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_10046BE24, v0 + 3584);
}

uint64_t sub_10046BE24()
{
  return _swift_task_switch(sub_10046BE40, 0, 0);
}

uint64_t sub_10046BE40()
{
  return _swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_10046BE60, v0 + 3632);
}

uint64_t sub_10046BE60()
{
  return _swift_task_switch(sub_10046BE7C, 0, 0);
}

uint64_t sub_10046BE7C()
{
  return _swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_10046BE9C, v0 + 3680);
}

uint64_t sub_10046BE9C()
{
  return _swift_task_switch(sub_10046BEB8, 0, 0);
}

uint64_t sub_10046BEB8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046BED0()
{
  swift_bridgeObjectRelease();
  return _swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_10046BF50, v0 + 3728);
}

uint64_t sub_10046BF50()
{
  return _swift_task_switch(sub_10046BF6C, 0, 0);
}

uint64_t sub_10046BF6C()
{
  return _swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_10046BF8C, v0 + 3776);
}

uint64_t sub_10046BF8C()
{
  return _swift_task_switch(sub_10046BFA8, 0, 0);
}

uint64_t sub_10046BFA8()
{
  return _swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_10046BFC8, v0 + 3824);
}

uint64_t sub_10046BFC8()
{
  return _swift_task_switch(sub_10046BFE4, 0, 0);
}

uint64_t sub_10046BFE4()
{
  return _swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_10046C004, v0 + 3872);
}

uint64_t sub_10046C004()
{
  return _swift_task_switch(sub_10046C020, 0, 0);
}

uint64_t sub_10046C020()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046C038(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100175D64;
  return sub_10046C0C8();
}

uint64_t sub_10046C0C8()
{
  uint64_t v1 = type metadata accessor for AccountEntity();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for SiriVocabulary.DynamicTerm();
  v0[6] = v2;
  v0[7] = *(void *)(v2 - 8);
  v0[8] = swift_task_alloc();
  return _swift_task_switch(sub_10046C1F0, 0, 0);
}

uint64_t sub_10046C1F0()
{
  uint64_t VACycfC_0 = _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
  uint64_t v3 = v2;
  char v5 = v4;
  v0[9] = VACycfC_0;
  v0[10] = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10046C2A8;
  return VisibleAccountsQuery.suggestedEntities()(VACycfC_0, v3, v5 & 1);
}

uint64_t sub_10046C2A8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    char v4 = sub_10046DFB4;
  }
  else
  {
    swift_release();
    swift_release();
    char v4 = sub_10046C3CC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10046C3CC()
{
  uint64_t v1 = v0[12];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[7];
    uint64_t v4 = v0[3];
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_100169EAC(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    unint64_t v17 = v0;
    uint64_t v16 = *(void *)(v4 + 72);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      int64_t v18 = v2;
      uint64_t v8 = v0[4];
      uint64_t v7 = v0[5];
      sub_10046DA68(v5, v7, (uint64_t (*)(void))type metadata accessor for AccountEntity);
      sub_10046DA68(v7, v8, (uint64_t (*)(void))type metadata accessor for AccountEntity);
      sub_10046DAD0(&qword_1006A2940, (void (*)(uint64_t))type metadata accessor for AccountEntity);
      swift_bridgeObjectRetain();
      SiriVocabulary.DynamicTerm.init<A>(_:entity:)();
      sub_10046DB18(v7, (uint64_t (*)(void))type metadata accessor for AccountEntity);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100169EAC(0, v6[2] + 1, 1);
        uint64_t v6 = v19;
      }
      unint64_t v10 = v6[2];
      unint64_t v9 = v6[3];
      uint64_t v0 = v17;
      if (v10 >= v9 >> 1)
      {
        sub_100169EAC(v9 > 1, v10 + 1, 1);
        uint64_t v6 = v19;
      }
      uint64_t v11 = v17[8];
      uint64_t v12 = v17[6];
      v6[2] = v10 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v10, v11, v12);
      uint64_t v19 = v6;
      v5 += v16;
      --v2;
    }
    while (v18 != 1);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for SiriVocabulary.Corpus();
  swift_allocObject();
  uint64_t v13 = SiriVocabulary.Corpus.init(contents:capacity:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

uint64_t sub_10046C670(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  int64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *int64_t v2 = v1;
  v2[1] = sub_100175F50;
  return sub_10046C700();
}

uint64_t sub_10046C700()
{
  uint64_t v1 = type metadata accessor for FolderEntity();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for SiriVocabulary.DynamicTerm();
  v0[6] = v2;
  v0[7] = *(void *)(v2 - 8);
  v0[8] = swift_task_alloc();
  return _swift_task_switch(sub_10046C828, 0, 0);
}

uint64_t sub_10046C828()
{
  uint64_t VACycfC_0 = _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
  uint64_t v3 = v2;
  int v5 = v4;
  v0[9] = VACycfC_0;
  v0[10] = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10046C8E0;
  return VisibleFoldersQuery.suggestedEntities()(VACycfC_0, v3, v5 & 0x1010101);
}

uint64_t sub_10046C8E0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    int v4 = sub_10046CCA8;
  }
  else
  {
    swift_release();
    swift_release();
    int v4 = sub_10046CA04;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10046CA04()
{
  uint64_t v1 = v0[12];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[7];
    uint64_t v4 = v0[3];
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_100169EAC(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    unint64_t v17 = v0;
    uint64_t v16 = *(void *)(v4 + 72);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      int64_t v18 = v2;
      uint64_t v8 = v0[4];
      uint64_t v7 = v0[5];
      sub_10046DA68(v5, v7, (uint64_t (*)(void))type metadata accessor for FolderEntity);
      sub_10046DA68(v7, v8, (uint64_t (*)(void))type metadata accessor for FolderEntity);
      sub_10046DAD0((unint64_t *)&qword_1006A3B50, (void (*)(uint64_t))type metadata accessor for FolderEntity);
      swift_bridgeObjectRetain();
      SiriVocabulary.DynamicTerm.init<A>(_:entity:)();
      sub_10046DB18(v7, (uint64_t (*)(void))type metadata accessor for FolderEntity);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100169EAC(0, v6[2] + 1, 1);
        uint64_t v6 = v19;
      }
      unint64_t v10 = v6[2];
      unint64_t v9 = v6[3];
      uint64_t v0 = v17;
      if (v10 >= v9 >> 1)
      {
        sub_100169EAC(v9 > 1, v10 + 1, 1);
        uint64_t v6 = v19;
      }
      uint64_t v11 = v17[8];
      uint64_t v12 = v17[6];
      v6[2] = v10 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v10, v11, v12);
      uint64_t v19 = v6;
      v5 += v16;
      --v2;
    }
    while (v18 != 1);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for SiriVocabulary.Corpus();
  swift_allocObject();
  uint64_t v13 = SiriVocabulary.Corpus.init(contents:capacity:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

uint64_t sub_10046CCA8()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10046CD3C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  int64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *int64_t v2 = v1;
  v2[1] = sub_100175D64;
  return sub_10046CDCC();
}

uint64_t sub_10046CDCC()
{
  uint64_t v1 = type metadata accessor for TagEntity();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for SiriVocabulary.DynamicTerm();
  v0[6] = v2;
  v0[7] = *(void *)(v2 - 8);
  v0[8] = swift_task_alloc();
  return _swift_task_switch(sub_10046CEF4, 0, 0);
}

uint64_t sub_10046CEF4()
{
  uint64_t VACycfC_0 = _s11MobileNotes18VisibleTablesQueryVACycfC_0();
  uint64_t v3 = v2;
  v0[9] = VACycfC_0;
  v0[10] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10046CF9C;
  return VisibleTagsQuery.suggestedEntities()(VACycfC_0, v3);
}

uint64_t sub_10046CF9C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_10046DFB4;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v4 = sub_10046D0C0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10046D0C0()
{
  uint64_t v1 = v0[12];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[7];
    uint64_t v4 = v0[3];
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_100169EAC(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    unint64_t v17 = v0;
    uint64_t v16 = *(void *)(v4 + 72);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      int64_t v18 = v2;
      uint64_t v8 = v0[4];
      uint64_t v7 = v0[5];
      sub_10046DA68(v5, v7, (uint64_t (*)(void))type metadata accessor for TagEntity);
      sub_10046DA68(v7, v8, (uint64_t (*)(void))type metadata accessor for TagEntity);
      sub_10046DAD0((unint64_t *)&unk_1006A3B60, (void (*)(uint64_t))type metadata accessor for TagEntity);
      swift_bridgeObjectRetain();
      SiriVocabulary.DynamicTerm.init<A>(_:entity:)();
      sub_10046DB18(v7, (uint64_t (*)(void))type metadata accessor for TagEntity);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100169EAC(0, v6[2] + 1, 1);
        uint64_t v6 = v19;
      }
      unint64_t v10 = v6[2];
      unint64_t v9 = v6[3];
      uint64_t v0 = v17;
      if (v10 >= v9 >> 1)
      {
        sub_100169EAC(v9 > 1, v10 + 1, 1);
        uint64_t v6 = v19;
      }
      uint64_t v11 = v17[8];
      uint64_t v12 = v17[6];
      v6[2] = v10 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v10, v11, v12);
      uint64_t v19 = v6;
      v5 += v16;
      --v2;
    }
    while (v18 != 1);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for SiriVocabulary.Corpus();
  swift_allocObject();
  uint64_t v13 = SiriVocabulary.Corpus.init(contents:capacity:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

uint64_t sub_10046D364(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  int64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *int64_t v2 = v1;
  v2[1] = sub_100175D64;
  return sub_10046D3F4();
}

uint64_t sub_10046D3F4()
{
  uint64_t v1 = type metadata accessor for NoteEntity(0);
  v0[4] = v1;
  v0[5] = *(void *)(v1 - 8);
  v0[6] = swift_task_alloc();
  v0[7] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for SiriVocabulary.DynamicTerm();
  v0[8] = v2;
  v0[9] = *(void *)(v2 - 8);
  v0[10] = swift_task_alloc();
  return _swift_task_switch(sub_10046D51C, 0, 0);
}

uint64_t sub_10046D51C()
{
  uint64_t v1 = sub_10023F590();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  v0[11] = v1;
  v0[12] = v2;
  v0[13] = v4;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10046D5E8;
  return VisibleNotesQuery.suggestedEntities()(v1, v3, v5, v7 & 0x101010101);
}

uint64_t sub_10046D5E8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_10046D9C4;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v4 = sub_10046D720;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10046D720()
{
  uint64_t v1 = v0[15];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[9];
    uint64_t v4 = v0[5];
    int64_t v18 = _swiftEmptyArrayStorage;
    sub_100169EAC(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v16 = *(void *)(v4 + 72);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      int64_t v17 = v2;
      uint64_t v8 = v0[6];
      uint64_t v7 = v0[7];
      sub_10046DA68(v5, v7, type metadata accessor for NoteEntity);
      EntityProperty.wrappedValue.getter();
      sub_10046DA68(v7, v8, type metadata accessor for NoteEntity);
      sub_10046DAD0((unint64_t *)&qword_10069B1E0, (void (*)(uint64_t))type metadata accessor for NoteEntity);
      SiriVocabulary.DynamicTerm.init<A>(_:entity:)();
      sub_10046DB18(v7, type metadata accessor for NoteEntity);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100169EAC(0, v6[2] + 1, 1);
        uint64_t v6 = v18;
      }
      unint64_t v10 = v6[2];
      unint64_t v9 = v6[3];
      if (v10 >= v9 >> 1)
      {
        sub_100169EAC(v9 > 1, v10 + 1, 1);
        uint64_t v6 = v18;
      }
      uint64_t v11 = v0[10];
      uint64_t v12 = v0[8];
      v6[2] = v10 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v10, v11, v12);
      int64_t v18 = v6;
      v5 += v16;
      --v2;
    }
    while (v17 != 1);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for SiriVocabulary.Corpus();
  swift_allocObject();
  uint64_t v13 = SiriVocabulary.Corpus.init(contents:capacity:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

uint64_t sub_10046D9C4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10046DA68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10046DAD0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10046DB18(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10046DB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_10046DBE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_10046DC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10046DCAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10046DD10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10046DD74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10046DDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10046DDEC);
}

uint64_t sub_10046DDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10046DE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10046DE6C);
}

uint64_t sub_10046DE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AppIntentsVocabularyManager()
{
  uint64_t result = qword_1006A8090;
  if (!qword_1006A8090) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10046DF28()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10046DFB8()
{
  return 10;
}

unint64_t sub_10046DFC0()
{
  return sub_10046E0A4();
}

uint64_t type metadata accessor for FolderComposerFilterCellLockedNotes()
{
  return self;
}

unint64_t sub_10046E0A4()
{
  unint64_t result = qword_1006A80F0[0];
  if (!qword_1006A80F0[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_1006A80F0);
  }
  return result;
}

void sub_10046E0E4()
{
  v1[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10046E81C();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t *sub_10046E194(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      uint64_t v9 = *(int *)(sub_10002F214(&qword_1006A3188) + 48);
      unint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_10002F214(&qword_1006A3180);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10046E2DC(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    swift_release();
    uint64_t v3 = a1 + *(int *)(sub_10002F214(&qword_1006A3188) + 48);
    uint64_t v4 = sub_10002F214(&qword_1006A3180);
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(v3, v4);
  }
  else if (!result)
  {
    return swift_release();
  }
  return result;
}

void *sub_10046E39C(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_retain();
    uint64_t v7 = *(int *)(sub_10002F214(&qword_1006A3188) + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_10002F214(&qword_1006A3180);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10046E4A0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      uint64_t v7 = *(int *)(sub_10002F214(&qword_1006A3188) + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = sub_10002F214(&qword_1006A3180);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_10046E5F8(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_10002F214(&qword_1006A3188) + 48);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_10002F214(&qword_1006A3180);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10046E6D4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_10002F214(&qword_1006A3188) + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = sub_10002F214(&qword_1006A3180);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t _s9JoinStateOMa()
{
  return sub_100183A74();
}

void sub_10046E81C()
{
  if (!qword_1006A8178)
  {
    sub_10001DFF4(&qword_1006A3D90);
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1006A8178);
    }
  }
}

void *CreateAttachmentIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static CreateAttachmentIntent.persistentIdentifier;
}

unint64_t static CreateAttachmentIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_10046E8B4()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static CreateAttachmentIntent.title);
  sub_10003293C(v6, (uint64_t)static CreateAttachmentIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t CreateAttachmentIntent.title.unsafeMutableAddressor()
{
  if (qword_10069B090 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();

  return sub_10003293C(v0, (uint64_t)static CreateAttachmentIntent.title);
}

uint64_t static CreateAttachmentIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B090 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003293C(v2, (uint64_t)static CreateAttachmentIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void *CreateAttachmentIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static CreateAttachmentIntent.assistantOnly;
}

uint64_t static CreateAttachmentIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

__n128 CreateAttachmentIntent.init()@<Q0>(uint64_t a1@<X8>)
{
  sub_1004701A4((char **)v4);
  long long v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(void *)(a1 + 64) = v5;
  __n128 result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t CreateAttachmentIntent.file.setter(uint64_t a1)
{
  uint64_t v2 = sub_10002F214(&qword_10069B538);
  __chkstk_darwin(v2 - 8);
  sub_10002F034(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10069B538);
  IntentParameter.wrappedValue.setter();
  return sub_10002B754(a1, &qword_10069B538);
}

uint64_t CreateAttachmentIntent.url.setter(uint64_t a1)
{
  uint64_t v2 = sub_10002F214(&qword_10069B310);
  __chkstk_darwin(v2 - 8);
  sub_10002F034(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10069B310);
  IntentParameter.wrappedValue.setter();
  return sub_10002B754(a1, &qword_10069B310);
}

uint64_t CreateAttachmentIntent.note.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t CreateAttachmentIntent.note.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NoteEntity(0);
  __chkstk_darwin(v2 - 8);
  sub_100254244(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NoteEntity);
  IntentParameter.wrappedValue.setter();
  return sub_1002542AC(a1, type metadata accessor for NoteEntity);
}

uint64_t CreateAttachmentIntent.insertionRange.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t CreateAttachmentIntent.insertionRange.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 32) = result;
  *(void *)(v3 + 40) = a2;
  *(unsigned char *)(v3 + 48) = a3 & 1;
  return result;
}

uint64_t CreateAttachmentIntent.loggingConfiguration.getter()
{
  AppDependency.wrappedValue.getter();
  return v1;
}

uint64_t CreateAttachmentIntent.loggingConfiguration.setter()
{
  return AppDependency.wrappedValue.setter();
}

uint64_t (*CreateAttachmentIntent.loggingConfiguration.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AppDependency.wrappedValue.modify();
  return sub_10015ACE0;
}

uint64_t CreateAttachmentIntent.$loggingConfiguration.getter()
{
  return AppDependency.projectedValue.getter();
}

uint64_t CreateAttachmentIntent.perform()(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  v2[12] = type metadata accessor for AttachmentEntity();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for NoteID();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  type metadata accessor for NoteEntity(0);
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_10046F354, 0, 0);
}

uint64_t sub_10046F354()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  AppDependency.wrappedValue.getter();
  uint64_t v5 = (void *)v0[5];
  v0[21] = [v5 modernManagedObjectContext];

  IntentParameter.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_1002542AC(v1, type metadata accessor for NoteEntity);
  AppDependency.wrappedValue.getter();
  uint64_t v6 = v0[6];
  v0[22] = v6;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006A3B80 + dword_1006A3B80);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[23] = v7;
  void *v7 = v0;
  v7[1] = sub_10046F4B8;
  uint64_t v8 = v0[19];
  return v10(v8, v6);
}

uint64_t sub_10046F4B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 176);
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  uint64_t v4 = *(void *)(*(void *)v1 + 144);
  uint64_t v5 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return _swift_task_switch(sub_10046F630, 0, 0);
}

uint64_t sub_10046F630()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = (void *)v0[21];
  uint64_t v3 = v0[11];
  uint64_t v4 = swift_allocObject();
  v0[25] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  long long v5 = *(_OWORD *)(v3 + 16);
  long long v6 = *(_OWORD *)(v3 + 32);
  long long v7 = *(_OWORD *)(v3 + 48);
  *(void *)(v4 + 96) = *(void *)(v3 + 64);
  *(_OWORD *)(v4 + 64) = v6;
  *(_OWORD *)(v4 + 80) = v7;
  *(_OWORD *)(v4 + 48) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)v3;
  id v8 = v1;
  id v9 = v2;
  sub_10047106C(v3);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[26] = v10;
  uint64_t v11 = sub_10002F214(&qword_10069D520);
  *uint64_t v10 = v0;
  v10[1] = sub_1002526A0;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 7, sub_10047104C, v4, v11);
}

void sub_10046F764(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v63 = a3;
  uint64_t v7 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v60 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IntentFile();
  uint64_t v61 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10002F214(&qword_10069B538);
  __chkstk_darwin(v12 - 8);
  BOOL v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10002F214(&qword_10069B310);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  int64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v54 - v19;
  uint64_t v62 = type metadata accessor for URL();
  uint64_t v21 = __chkstk_darwin(v62);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v54 - v24;
  if (!a1) {
    goto LABEL_6;
  }
  uint64_t v57 = v23;
  uint64_t v58 = a4;
  uint64_t v59 = v22;
  id v26 = a1;
  uint64_t v56 = a2;
  id v27 = [a2 objectWithID:v26];
  self;
  uint64_t v28 = (void *)swift_dynamicCastObjCClass();
  if (!v28)
  {

LABEL_6:
    type metadata accessor for ICError(0);
    uint64_t v64 = 227;
    sub_1001B50CC((uint64_t)_swiftEmptyArrayStorage);
    sub_100254810((unint64_t *)&qword_10069E4D0, type metadata accessor for ICError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return;
  }
  uint64_t v29 = v28;
  if ([v28 isPasswordProtectedAndLocked])
  {
    sub_100173F8C();
    swift_allocError();
    char v31 = 11;
LABEL_11:
    *uint64_t v30 = v31;
    swift_willThrow();

    return;
  }
  if (![v29 isEditable])
  {
    sub_100173F8C();
    swift_allocError();
    char v31 = 12;
    goto LABEL_11;
  }
  id v54 = v29;
  id v55 = v26;
  uint64_t v32 = v63;
  IntentParameter.wrappedValue.getter();
  uint64_t v33 = v61;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v14, 1, v9))
  {
    sub_10002B754((uint64_t)v14, &qword_10069B538);
    uint64_t v34 = v59;
    uint64_t v35 = v62;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v20, 1, 1, v62);
LABEL_13:
    sub_10002B754((uint64_t)v20, &qword_10069B310);
    IntentParameter.wrappedValue.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v18, 1, v35) == 1)
    {
      sub_10002B754((uint64_t)v18, &qword_10069B310);
      IntentParameter.projectedValue.getter();
      uint64_t v36 = type metadata accessor for IntentDialog();
      uint64_t v37 = (uint64_t)v60;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v60, 1, 1, v36);
      type metadata accessor for AppIntentError();
      sub_100254810((unint64_t *)&unk_1006A2DB0, (void (*)(uint64_t))&type metadata accessor for AppIntentError);
      swift_allocError();
      IntentParameter.needsValueError(_:)();
      swift_release();
      sub_10002B754(v37, (uint64_t *)&unk_10069C9B0);
      swift_willThrow();

      return;
    }
    uint64_t v25 = v57;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v57, v18, v35);
    URL._bridgeToObjectiveC()(v38);
    uint64_t v40 = v39;
    id v41 = [v54 addURLAttachmentWithURL:v39];

    goto LABEL_16;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v11, v14, v9);
  sub_10002B754((uint64_t)v14, &qword_10069B538);
  IntentFile.fileURL.getter();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v9);
  uint64_t v34 = v59;
  uint64_t v35 = v62;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v20, 1, v62) == 1) {
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v25, v20, v35);
  if (!URL.startAccessingSecurityScopedResource()())
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v35);

    *uint64_t v58 = 0;
    return;
  }
  URL._bridgeToObjectiveC()(v47);
  uint64_t v49 = v48;
  id v41 = [v54 addAttachmentWithFileURL:v48];

  URL.stopAccessingSecurityScopedResource()();
LABEL_16:
  uint64_t v42 = v58;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v35);
  if (v41)
  {
    id v43 = objc_allocWithZone((Class)ICAttachmentInsertionController);
    id v44 = v41;
    id v45 = [v43 initWithNote:v54];
    sub_100254858(v32 + 32, (uint64_t)v66);
    sub_100254858((uint64_t)v66, (uint64_t)v67);
    if (v68) {
      id v46 = [v45 addAttachment:v44];
    }
    else {
      [v45 addAttachment:v44 atTextRange:v67[0], v67[1]];
    }
    char v50 = v56;

    id v65 = 0;
    if ([v50 save:&v65])
    {
      id v51 = v65;
      id v52 = [v44 objectID];

      *uint64_t v42 = v52;
    }
    else
    {
      id v53 = v65;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {

    *uint64_t v42 = 0;
  }
}

uint64_t sub_10046FFF0(uint64_t a1)
{
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v2 + 64) = v4;
  *(void *)(v2 + 80) = *(void *)(v1 + 64);
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v5;
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 88) = v6;
  *long long v6 = v2;
  v6[1] = sub_1004700B0;
  return CreateAttachmentIntent.perform()(a1);
}

uint64_t sub_1004700B0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1004701A4@<X0>(char **a1@<X8>)
{
  v66 = a1;
  uint64_t v1 = sub_10002F214(&qword_10069B1D0);
  __chkstk_darwin(v1 - 8);
  id v65 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10002F214(&qword_10069B310);
  __chkstk_darwin(v3 - 8);
  uint64_t v63 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002F214(&qword_10069B538);
  __chkstk_darwin(v5 - 8);
  uint64_t v61 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for InputConnectionBehavior();
  uint64_t v83 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v82 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v64 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v70 = (char *)&v59 - v11;
  uint64_t v12 = sub_10002F214((uint64_t *)&unk_10069E280);
  __chkstk_darwin(v12 - 8);
  uint64_t v62 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v14 - 8);
  uint64_t v59 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Locale();
  __chkstk_darwin(v20 - 8);
  uint64_t v21 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v21 - 8);
  uint64_t v22 = type metadata accessor for LocalizedStringResource();
  uint64_t v81 = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  id v67 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10002F214((uint64_t *)&unk_10069B250);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v25 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v27 = v17 + 104;
  id v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
  uint64_t v71 = v16;
  v26(v19, enum case for LocalizedStringResource.BundleDescription.main(_:), v16);
  uint64_t v72 = v27;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v26(v19, v25, v16);
  uint64_t v28 = v59;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v75 = *(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
  uint64_t v80 = v23 + 56;
  v75(v28, 0, 1, v22);
  uint64_t v29 = type metadata accessor for String.IntentInputOptions();
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v62, 1, 1, v29);
  uint64_t v78 = type metadata accessor for IntentDialog();
  uint64_t v30 = *(void *)(v78 - 8);
  id v77 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
  uint64_t v79 = v30 + 56;
  char v31 = v70;
  v77(v70, 1, 1, v78);
  unsigned int v73 = enum case for InputConnectionBehavior.default(_:);
  uint64_t v74 = *(void (**)(char *))(v83 + 104);
  v83 += 104;
  v74(v82);
  uint64_t v32 = v31;
  uint64_t v62 = (char *)IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  uint64_t v60 = sub_10002F214(&qword_10069B540);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  unsigned int v68 = v25;
  uint64_t v33 = v71;
  id v69 = v26;
  v26(v19, v25, v71);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v26(v19, v25, v33);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v75(v28, 0, 1, v81);
  uint64_t v34 = type metadata accessor for IntentFile();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v61, 1, 1, v34);
  v77(v32, 1, 1, v78);
  sub_10002F214(&qword_10069B548);
  type metadata accessor for UTType();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100524D10;
  static UTType.item.getter();
  uint64_t v35 = v76;
  ((void (*)(char *, void, uint64_t))v74)(v82, v73, v76);
  uint64_t v61 = (char *)IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)();
  uint64_t v60 = sub_10002F214(&qword_10069B318);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v36 = v68;
  uint64_t v37 = v71;
  unint64_t v38 = v69;
  v69(v19, v68, v71);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v38(v19, v36, v37);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v75(v28, 0, 1, v81);
  uint64_t v39 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v63, 1, 1, v39);
  uint64_t v40 = v70;
  v77(v70, 1, 1, v78);
  ((void (*)(char *, void, uint64_t))v74)(v82, v73, v35);
  id v41 = v40;
  uint64_t v63 = (char *)IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)();
  uint64_t v60 = sub_10002F214(&qword_10069B1D8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v42 = v68;
  uint64_t v43 = v71;
  id v44 = v69;
  v69(v19, v68, v71);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v44(v19, v42, v43);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v75(v28, 0, 1, v81);
  uint64_t v45 = type metadata accessor for NoteEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v65, 1, 1, v45);
  id v46 = v41;
  uint64_t v47 = v77;
  uint64_t v48 = v78;
  v77(v46, 1, 1, v78);
  v47(v64, 1, 1, v48);
  uint64_t v86 = sub_10023F448();
  uint64_t v87 = v49;
  uint64_t v88 = v50;
  char v89 = v51 & 1;
  uint64x2_t v52 = (uint64x2_t)vdupq_n_s64(v51);
  int16x8_t v53 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v52, (uint64x2_t)xmmword_100524D00), (int32x4_t)vshlq_u64(v52, (uint64x2_t)xmmword_100524CF0));
  *(int8x8_t *)v53.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v53), (int8x8_t)0x1000100010001);
  unsigned __int32 v90 = vmovn_s16(v53).u32[0];
  ((void (*)(char *, void, uint64_t))v74)(v82, v73, v76);
  sub_1001579C0();
  uint64_t v54 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)();
  sub_10002F214((uint64_t *)&unk_10069CE60);
  unint64_t v84 = 0xD000000000000021;
  unint64_t v85 = 0x8000000100549290;
  AnyHashable.init<A>(_:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t v55 = AppDependency.__allocating_init(key:manager:)();
  sub_10002F214((uint64_t *)&unk_10069B130);
  unint64_t v84 = 0xD000000000000024;
  unint64_t v85 = 0x8000000100549260;
  AnyHashable.init<A>(_:)();
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  uint64_t v57 = v66;
  uint64_t v58 = v61;
  void *v66 = v62;
  v57[1] = v58;
  v57[2] = v63;
  v57[3] = (char *)v54;
  v57[4] = 0;
  v57[5] = 0;
  *((unsigned char *)v57 + 48) = 1;
  v57[7] = (char *)v55;
  v57[8] = (char *)result;
  return result;
}

uint64_t sub_100470FDC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

void sub_10047104C(void *a1@<X8>)
{
  sub_10046F764(*(void **)(v1 + 16), *(void **)(v1 + 24), v1 + 32, a1);
}

uint64_t sub_10047106C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1004710E0()
{
  unint64_t result = qword_1006A8188;
  if (!qword_1006A8188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8188);
  }
  return result;
}

unint64_t sub_100471138()
{
  unint64_t result = qword_1006A8190;
  if (!qword_1006A8190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8190);
  }
  return result;
}

unint64_t sub_100471190()
{
  unint64_t result = qword_1006A8198;
  if (!qword_1006A8198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8198);
  }
  return result;
}

unint64_t sub_1004711E8()
{
  unint64_t result = qword_1006A81A0;
  if (!qword_1006A81A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A81A0);
  }
  return result;
}

uint64_t sub_10047123C()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t sub_100471270()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for CreateAttachmentIntent()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for CreateAttachmentIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CreateAttachmentIntent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CreateAttachmentIntent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CreateAttachmentIntent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CreateAttachmentIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CreateAttachmentIntent()
{
  return &type metadata for CreateAttachmentIntent;
}

uint64_t sub_10047159C()
{
  return sub_100471604(&qword_1006A0898);
}

uint64_t sub_1004715D0()
{
  return sub_100471604(&qword_1006A08A8);
}

uint64_t sub_100471604(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001DFF4(&qword_1006A08A0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10047164C()
{
  return 7;
}

objc_class *sub_100471654()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menu;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menu);
  if (v2)
  {
    uint64_t v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menu);
  }
  else
  {
    uint64_t v4 = v0;
    sub_100031418(0, (unint64_t *)&unk_1006A4D40);
    sub_10002F214(&qword_10069BA00);
    UIMenuElementSize preferredElementSize = swift_allocObject();
    *(_OWORD *)(preferredElementSize + 16) = xmmword_100524CE0;
    *(void *)(preferredElementSize + 32) = sub_100471B10();
    *(void *)(preferredElementSize + 40) = sub_100471C84();
    specialized Array._endMutation()();
    v6._countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v16.value.super.Class isa = 0;
    v16.is_nil = 0;
    Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v6, (Swift::String_optional)0, v16, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v14).super.super.isa;
    UIMenuElementSize v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100524CE0;
    *(void *)(v8 + 32) = sub_10047190C();
    *(void *)(v8 + 40) = isa;
    specialized Array._endMutation()();
    v9._countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    v17.value.super.Class isa = 0;
    v17.is_nil = 0;
    v10.super.super.Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v9, (Swift::String_optional)0, v17, 0, 0xFFFFFFFFFFFFFFFFLL, v8, v15).super.super.isa;
    uint64_t v11 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v10;
    uint64_t v3 = v10.super.super.isa;

    uint64_t v2 = 0;
  }
  id v12 = v2;
  return v3;
}

void sub_1004717C4()
{
  uint64_t v1 = (void *)sub_10047190C();
  uint64_t v2 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
  BOOL v3 = 1;
  if (*(void *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection))
  {
    self;
    if (swift_dynamicCastObjCClass()) {
      BOOL v3 = 0;
    }
  }
  [v1 setState:v3];

  id v4 = sub_100471B10();
  BOOL v6 = 0;
  if (*(void *)(v0 + v2))
  {
    self;
    uint64_t v5 = (void *)swift_dynamicCastObjCClass();
    if (v5)
    {
      if (![v5 inclusionType]) {
        BOOL v6 = 1;
      }
    }
  }
  [v4 setState:v6];

  id v9 = sub_100471C84();
  BOOL v8 = 0;
  if (*(void *)(v0 + v2))
  {
    self;
    uint64_t v7 = (void *)swift_dynamicCastObjCClass();
    if (v7)
    {
      if ([v7 inclusionType] == (id)1) {
        BOOL v8 = 1;
      }
    }
  }
  [v9 setState:v8];
}

id sub_10047190C()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff];
  }
  else
  {
    id v4 = v0;
    sub_100031418(0, (unint64_t *)&unk_10069B9F0);
    id v5 = [self mainBundle];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 localizedStringForKey:v6 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(swift_allocObject() + 16) = v0;
    BOOL v8 = v0;
    id v9 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    UIMenu v10 = *(void **)&v0[v1];
    *(void *)&v4[v1] = v9;
    id v3 = v9;

    uint64_t v2 = 0;
  }
  id v11 = v2;
  return v3;
}

void sub_100471A74(uint64_t a1, char *a2)
{
  id v3 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(void *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  [a2 setNeedsUpdateConfiguration];
  sub_1004717C4();
  id v4 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v4)
  {
    uint64_t v5 = swift_retain();
    v4(v5);
    sub_10002E70C((uint64_t)v4);
  }
}

id sub_100471B10()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude];
  }
  else
  {
    id v4 = v0;
    sub_100031418(0, (unint64_t *)&unk_10069B9F0);
    id v5 = [self mainBundle];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 localizedStringForKey:v6 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(swift_allocObject() + 16) = v0;
    BOOL v8 = v0;
    id v9 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    UIMenu v10 = *(void **)&v0[v1];
    *(void *)&v4[v1] = v9;
    id v3 = v9;

    uint64_t v2 = 0;
  }
  id v11 = v2;
  return v3;
}

id sub_100471C84()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude];
  }
  else
  {
    id v4 = v0;
    sub_100031418(0, (unint64_t *)&unk_10069B9F0);
    id v5 = [self mainBundle];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 localizedStringForKey:v6 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(swift_allocObject() + 16) = v0;
    BOOL v8 = v0;
    id v9 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    UIMenu v10 = *(void **)&v0[v1];
    *(void *)&v4[v1] = v9;
    id v3 = v9;

    uint64_t v2 = 0;
  }
  id v11 = v2;
  return v3;
}

uint64_t sub_100471DF8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0
    && (id v4 = [self sharedContext]) != 0
    && (v5 = v4, id v6 = [v4 managedObjectContext], v5, v6))
  {
    uint64_t v7 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
    if (*(void *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection])
    {
      self;
      BOOL v8 = (void *)swift_dynamicCastObjCClass();
      if (v8)
      {
        id v9 = [v8 folderIdentifiers];
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
    }
    id v15 = objc_allocWithZone((Class)ICFoldersFilterTypeSelection);
    id v16 = v6;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = [v15 initWithManagedObjectContext:v16 inclusionType:a1 folderIdentifiers:isa];

    uint64_t v19 = *(void **)&v2[v7];
    *(void *)&v2[v7] = v18;
    id v20 = v18;

    [v2 setNeedsUpdateConfiguration];
  }
  else
  {
    UIMenu v10 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
    *(void *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

    id v11 = [v2 setNeedsUpdateConfiguration];
  }
  uint64_t result = sub_1004717C4(v11);
  uint64_t v13 = *(void (**)(uint64_t))&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v13)
  {
    uint64_t v14 = swift_retain();
    v13(v14);
    return sub_10002E70C((uint64_t)v13);
  }
  return result;
}

id sub_100472094(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menu] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FolderComposerFilterCellFolders();
  [super initWithCoder:a1];

  return v3;
}

void sub_10047213C()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude));
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude);
}

id sub_10047219C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellFolders();
  return [super dealloc];
}

uint64_t type metadata accessor for FolderComposerFilterCellFolders()
{
  return self;
}

objc_class *sub_100472260()
{
  return sub_100471654();
}

void sub_100472284()
{
}

uint64_t sub_1004722A8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004722E0()
{
  return sub_100471DF8(1, 0);
}

uint64_t sub_10047230C()
{
  return sub_100471DF8(0, 0);
}

void sub_100472338(uint64_t a1)
{
  sub_100471A74(a1, *(char **)(v1 + 16));
}

uint64_t type metadata accessor for UpdatePaperThumbnailsActivity()
{
  return self;
}

id sub_10047262C()
{
  uint64_t v1 = v0;
  type metadata accessor for SystemPaperThumbnailService();
  objc_super v2 = (void *)static SystemPaperThumbnailService.shared.getter();
  SystemPaperThumbnailService.invalidate(for:)();

  id v3 = (void *)static SystemPaperThumbnailService.shared.getter();
  SystemPaperThumbnailService.invalidate(for:)();

  id v4 = (void *)static SystemPaperThumbnailService.shared.getter();
  SystemPaperThumbnailService.updateIfNeeded(for:completion:)();

  objc_super v5 = (void *)static SystemPaperThumbnailService.shared.getter();
  SystemPaperThumbnailService.updateIfNeeded(for:completion:)();

  return [v1 activityDidFinish:1];
}

uint64_t sub_1004726FC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void *initializeBufferWithCopyOfBuffer for GroupActivitiesDebugSection(void *a1, void *a2)
{
  id v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

void destroy for GroupActivitiesDebugSection(uint64_t a1)
{
}

void *assignWithCopy for GroupActivitiesDebugSection(void *a1, void *a2)
{
  *a1 = *a2;
  id v3 = (void *)a2[1];
  id v4 = (void *)a1[1];
  a1[1] = v3;
  id v5 = v3;

  return a1;
}

void *assignWithTake for GroupActivitiesDebugSection(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  id v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

ValueMetadata *type metadata accessor for GroupActivitiesDebugSection()
{
  return &type metadata for GroupActivitiesDebugSection;
}

uint64_t sub_1004727F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10047280C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = &a2[OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities];
  swift_beginAccess();
  if (*(void *)(*(void *)v6 + 16))
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = a2;
    swift_bridgeObjectRetain();
    BOOL v8 = a2;
    sub_10002F214(&qword_1006A8228);
    sub_10002F214(&qword_1006A8230);
    sub_10001DFB0(&qword_1006A8238, &qword_1006A8228);
    sub_100473AE8();
    sub_100473C28();
    ForEach<>.init(_:content:)();
    uint64_t v9 = sub_10002F214(&qword_1006A8270);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a3, 0, 1, v9);
  }
  else
  {
    uint64_t v11 = sub_10002F214(&qword_1006A8270);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
}

void *sub_1004729BC@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  BOOL v8 = (void *)a1[3];
  uint64_t v9 = static HorizontalAlignment.leading.getter();
  sub_100472B08(v5, v6, v7, v8, a2, __src);
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(a2) = static Edge.Set.horizontal.getter();
  [self deviceIsMac];
  v20[296] = 0;
  memcpy(&v20[7], __src, 0x121uLL);
  char v21 = 0;
  EdgeInsets.init(_all:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  LOBYTE(v6) = v21;
  char v22 = 0;
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = 0x4000000000000000;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = memcpy((void *)(a3 + 17), v20, 0x128uLL);
  *(void *)(a3 + 320) = KeyPath;
  *(void *)(a3 + 328) = 1;
  *(unsigned char *)(a3 + 336) = v6;
  *(unsigned char *)(a3 + 344) = (_BYTE)a2;
  *(void *)(a3 + 352) = v12;
  *(void *)(a3 + 360) = v14;
  *(void *)(a3 + 368) = v16;
  *(void *)(a3 + 376) = v18;
  *(unsigned char *)(a3 + 384) = v22;
  return result;
}

void *sub_100472B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X5>, void *a6@<X8>)
{
  if (a4)
  {
    uint64_t v49 = static VerticalAlignment.firstTextBaseline.getter();
    sub_10047335C(a3, a4, a5, a1, a2, a3, (uint64_t)a4, (uint64_t)v65);
    char v68 = 1;
    *(_OWORD *)((char *)&v67[10] + 7) = v65[10];
    *(_OWORD *)((char *)&v67[11] + 7) = v65[11];
    *(_OWORD *)((char *)&v67[12] + 7) = v65[12];
    *(void *)((char *)&v67[13] + 7) = v66;
    *(_OWORD *)((char *)&v67[6] + 7) = v65[6];
    *(_OWORD *)((char *)&v67[7] + 7) = v65[7];
    *(_OWORD *)((char *)&v67[8] + 7) = v65[8];
    *(_OWORD *)((char *)&v67[9] + 7) = v65[9];
    *(_OWORD *)((char *)&v67[2] + 7) = v65[2];
    *(_OWORD *)((char *)&v67[3] + 7) = v65[3];
    *(_OWORD *)((char *)&v67[4] + 7) = v65[4];
    *(_OWORD *)((char *)&v67[5] + 7) = v65[5];
    *(_OWORD *)((char *)v67 + 7) = v65[0];
    *(_OWORD *)((char *)&v67[1] + 7) = v65[1];
    long long v79 = v67[10];
    long long v80 = v67[11];
    v81[0] = v67[12];
    *(_OWORD *)((char *)v81 + 15) = *(_OWORD *)((char *)&v67[12] + 15);
    long long v75 = v67[6];
    long long v76 = v67[7];
    long long v77 = v67[8];
    long long v78 = v67[9];
    long long v71 = v67[2];
    long long v72 = v67[3];
    long long v73 = v67[4];
    long long v74 = v67[5];
    long long v69 = v67[0];
    long long v70 = v67[1];
    __dst[0] = a1;
    __dst[1] = a2;
    sub_10017B588();
    swift_bridgeObjectRetain();
    uint64_t v11 = Text.init<A>(_:)();
    uint64_t v13 = v12;
    char v15 = v14 & 1;
    static Font.caption.getter();
    Font.monospacedDigit()();
    swift_release();
    uint64_t v16 = Text.font(_:)();
    uint64_t v18 = v17;
    char v20 = v19;
    uint64_t v46 = v21;
    swift_release();
    sub_1001839EC(v11, v13, v15);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    long long v62 = v79;
    long long v63 = v80;
    *(_OWORD *)uint64_t v64 = v81[0];
    *(_OWORD *)&v64[15] = *(_OWORD *)((char *)v81 + 15);
    long long v58 = v75;
    long long v59 = v76;
    long long v60 = v77;
    long long v61 = v78;
    long long v54 = v71;
    long long v55 = v72;
    long long v56 = v73;
    long long v57 = v74;
    long long v52 = v69;
    long long v53 = v70;
    *(_OWORD *)((char *)&v83[10] + 1) = v79;
    *(_OWORD *)((char *)&v83[11] + 1) = v80;
    *(_OWORD *)((char *)&v83[12] + 1) = v81[0];
    v83[13] = *(_OWORD *)((char *)v81 + 15);
    *(_OWORD *)((char *)&v83[6] + 1) = v75;
    *(_OWORD *)((char *)&v83[7] + 1) = v76;
    *(_OWORD *)((char *)&v83[8] + 1) = v77;
    *(_OWORD *)((char *)&v83[9] + 1) = v78;
    *(_OWORD *)((char *)&v83[2] + 1) = v71;
    *(_OWORD *)((char *)&v83[3] + 1) = v72;
    *(_OWORD *)((char *)&v83[4] + 1) = v73;
    *(_OWORD *)((char *)&v83[5] + 1) = v74;
    v82[0] = v49;
    v82[1] = 0;
    LOBYTE(v83[0]) = 1;
    *(_OWORD *)((char *)v83 + 1) = v69;
    *(_OWORD *)((char *)&v83[1] + 1) = v70;
    long long v99 = v83[11];
    long long v100 = v83[12];
    long long v101 = *(_OWORD *)((char *)v81 + 15);
    long long v95 = v83[7];
    long long v96 = v83[8];
    long long v98 = v83[10];
    long long v97 = v83[9];
    long long v91 = v83[3];
    long long v92 = v83[4];
    long long v94 = v83[6];
    long long v93 = v83[5];
    long long v87 = (unint64_t)v49;
    long long v88 = v83[0];
    long long v90 = v83[2];
    long long v89 = v83[1];
    char v85 = v20 & 1;
    v86[0] = *(_DWORD *)v84;
    *(_DWORD *)((char *)v86 + 3) = *(_DWORD *)&v84[3];
    sub_100473D4C((uint64_t)v82);
    sub_1001839DC(v16, v18, v20 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100473E60((uint64_t)v65);
    sub_1001839DC(v16, v18, v20 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1001839EC(v16, v18, v20 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    long long v114 = v62;
    long long v115 = v63;
    *(_OWORD *)id v116 = *(_OWORD *)v64;
    *(_OWORD *)&v116[15] = *(_OWORD *)&v64[15];
    long long v110 = v58;
    long long v111 = v59;
    long long v112 = v60;
    long long v113 = v61;
    long long v106 = v54;
    long long v107 = v55;
    long long v108 = v56;
    long long v109 = v57;
    long long v104 = v52;
    v102[0] = v49;
    v102[1] = 0;
    char v103 = 1;
    long long v105 = v53;
    sub_100473F74((uint64_t)v102);
    long long v130 = v99;
    long long v131 = v100;
    long long v132 = v101;
    long long v126 = v95;
    long long v127 = v96;
    long long v129 = v98;
    long long v128 = v97;
    long long v122 = v91;
    long long v123 = v92;
    long long v125 = v94;
    long long v124 = v93;
    long long v118 = v87;
    long long v119 = v88;
    long long v121 = v90;
    long long v120 = v89;
    uint64_t v133 = v16;
    uint64_t v134 = v18;
    char v135 = v20 & 1;
    *(_DWORD *)unint64_t v136 = v86[0];
    *(_DWORD *)&v136[3] = *(_DWORD *)((char *)v86 + 3);
    uint64_t v137 = v46;
    uint64_t v138 = KeyPath;
    uint64_t v139 = 0x3FE0000000000000;
    sub_10047408C((uint64_t)&v118);
    sub_100473CE4((uint64_t)&v118, (uint64_t)__dst);
    sub_10002F214(&qword_1006A8280);
    sub_10002F214(&qword_1006A8288);
    sub_10001DFB0(&qword_1006A8290, &qword_1006A8280);
    sub_10001DFB0(&qword_1006A8298, &qword_1006A8288);
    _ConditionalContent<>.init(storage:)();
    sub_1001839EC(v16, v18, v20 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    sub_100474094((uint64_t)v65);
  }
  else
  {
    sub_10017B588();
    swift_bridgeObjectRetain();
    uint64_t v23 = Text.init<A>(_:)();
    uint64_t v25 = v24;
    char v27 = v26 & 1;
    static Font.body.getter();
    Font.monospacedDigit()();
    swift_release();
    uint64_t v28 = Text.font(_:)();
    uint64_t v47 = v29;
    uint64_t v48 = v28;
    char v31 = v30;
    uint64_t v50 = v32;
    swift_release();
    sub_1001839EC(v23, v25, v27);
    swift_bridgeObjectRelease();
    uint64_t v33 = swift_getKeyPath();
    id v34 = a5;
    uint64_t v35 = sub_100468A7C(a1, a2, a3, 0);
    uint64_t v37 = v36;

    __dst[0] = v35;
    __dst[1] = v37;
    uint64_t v38 = Text.init<A>(_:)();
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    char v44 = v43 & 1;
    sub_1001839DC(v48, v47, v31 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1001839DC(v38, v40, v44);
    swift_bridgeObjectRetain();
    sub_1001839DC(v48, v47, v31 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1001839DC(v38, v40, v44);
    swift_bridgeObjectRetain();
    sub_1001839EC(v38, v40, v44);
    swift_bridgeObjectRelease();
    sub_1001839EC(v48, v47, v31 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)&long long v118 = v48;
    *((void *)&v118 + 1) = v47;
    LOBYTE(v119) = v31 & 1;
    *((void *)&v119 + 1) = v50;
    *(void *)&long long v120 = v33;
    *((void *)&v120 + 1) = 0x3FE0000000000000;
    *(void *)&long long v121 = v38;
    *((void *)&v121 + 1) = v40;
    LOBYTE(v122) = v44;
    *((void *)&v122 + 1) = v42;
    sub_100473CD8((uint64_t)&v118);
    sub_100473CE4((uint64_t)&v118, (uint64_t)__dst);
    sub_10002F214(&qword_1006A8280);
    sub_10002F214(&qword_1006A8288);
    sub_10001DFB0(&qword_1006A8290, &qword_1006A8280);
    sub_10001DFB0(&qword_1006A8298, &qword_1006A8288);
    _ConditionalContent<>.init(storage:)();
    sub_1001839EC(v38, v40, v44);
    swift_bridgeObjectRelease();
    sub_1001839EC(v48, v47, v31 & 1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  memcpy(__dst, __src, 0x121uLL);
  return memcpy(a6, __dst, 0x121uLL);
}

uint64_t sub_10047335C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v11 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
  v13._countAndFlagsBits = a1;
  v13._object = a2;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v13);
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  static Font.Weight.medium.getter();
  uint64_t v20 = Text.fontWeight(_:)();
  uint64_t v57 = v21;
  uint64_t v58 = v20;
  uint64_t v56 = v22;
  char v55 = v23 & 1;
  sub_1001839EC(v15, v17, v19);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  char v53 = static Axis.Set.horizontal.getter();
  sub_100473858(a3, a4, a5, a6, a7, (uint64_t)v74);
  uint64_t v24 = *(void *)v74;
  uint64_t v39 = *(void *)&v74[8];
  uint64_t v25 = *(void *)&v74[24];
  char v40 = v74[33];
  char v41 = v74[32];
  uint64_t v26 = *(void *)&v74[40];
  uint64_t v50 = *(void *)&v74[64];
  uint64_t v48 = *(void *)&v74[72];
  uint64_t v44 = *(void *)&v74[48];
  uint64_t v46 = *(void *)&v74[80];
  uint64_t v27 = *(void *)&v74[96];
  uint64_t v52 = *(void *)&v74[104];
  uint64_t v28 = *(void *)&v74[112];
  LOBYTE(a2) = v74[88];
  char v29 = v74[16];
  char v37 = v74[16];
  char v38 = v74[56];
  uint64_t v42 = static Color.secondary.getter();
  uint64_t v30 = swift_getKeyPath();
  LOBYTE(v65) = v53;
  *(_DWORD *)((char *)&v65 + 1) = *(_DWORD *)v64;
  DWORD1(v65) = *(_DWORD *)&v64[3];
  *((void *)&v65 + 1) = v24;
  *(void *)&long long v66 = v39;
  BYTE8(v66) = v29;
  *(_DWORD *)((char *)&v66 + 9) = *(_DWORD *)v63;
  HIDWORD(v66) = *(_DWORD *)&v63[3];
  *(void *)&long long v67 = v25;
  BYTE8(v67) = v41;
  BYTE9(v67) = v40;
  *(_DWORD *)((char *)&v67 + 10) = v61;
  HIWORD(v67) = v62;
  *(void *)&long long v68 = v26;
  *((void *)&v68 + 1) = v44;
  LOBYTE(v69) = v38;
  *(_DWORD *)((char *)&v69 + 1) = *(_DWORD *)v60;
  DWORD1(v69) = *(_DWORD *)&v60[3];
  *((void *)&v69 + 1) = v50;
  *(void *)&long long v70 = v48;
  *((void *)&v70 + 1) = v46;
  LOBYTE(v71) = (_BYTE)a2;
  *(_DWORD *)((char *)&v71 + 1) = *(_DWORD *)v59;
  DWORD1(v71) = *(_DWORD *)&v59[3];
  *((void *)&v71 + 1) = v27;
  *(void *)&long long v72 = v52;
  *((void *)&v72 + 1) = v28;
  *(void *)&long long v73 = v30;
  *((void *)&v73 + 1) = v42;
  char v79 = v55;
  char v77 = 0;
  char v75 = 0;
  *(_OWORD *)&v74[135] = v73;
  *(_OWORD *)&v74[119] = v72;
  *(_OWORD *)&v74[103] = v71;
  *(_OWORD *)&v74[87] = v70;
  *(_OWORD *)&v74[7] = v65;
  *(_OWORD *)&v74[71] = v69;
  *(_OWORD *)&v74[55] = v68;
  *(_OWORD *)&v74[39] = v67;
  *(_OWORD *)&v74[23] = v66;
  *(_DWORD *)(a8 + 17) = *(_DWORD *)v78;
  *(_DWORD *)(a8 + 20) = *(_DWORD *)&v78[3];
  *(_DWORD *)(a8 + 49) = *(_DWORD *)v76;
  *(_DWORD *)(a8 + 52) = *(_DWORD *)&v76[3];
  *(unsigned char *)(a8 + 16) = v79;
  *(void *)(a8 + 40) = 2;
  *(unsigned char *)(a8 + 48) = v77;
  *(void *)(a8 + 56) = 0x4010000000000000;
  *(unsigned char *)(a8 + 64) = v75;
  uint64_t v105 = v39;
  *(_OWORD *)(a8 + 193) = *(_OWORD *)&v74[128];
  *(void *)(a8 + 208) = *(void *)&v74[143];
  *(void *)a8 = v58;
  *(void *)(a8 + 8) = v56;
  *(void *)(a8 + 24) = v57;
  *(void *)(a8 + 32) = KeyPath;
  long long v31 = *(_OWORD *)&v74[112];
  *(_OWORD *)(a8 + 161) = *(_OWORD *)&v74[96];
  *(_OWORD *)(a8 + 177) = v31;
  long long v32 = *(_OWORD *)&v74[48];
  *(_OWORD *)(a8 + 97) = *(_OWORD *)&v74[32];
  *(_OWORD *)(a8 + 113) = v32;
  long long v33 = *(_OWORD *)&v74[80];
  *(_OWORD *)(a8 + 129) = *(_OWORD *)&v74[64];
  *(_OWORD *)(a8 + 145) = v33;
  long long v34 = *(_OWORD *)&v74[16];
  uint64_t v35 = v105;
  *(_OWORD *)(a8 + 65) = *(_OWORD *)v74;
  *(_OWORD *)(a8 + 81) = v34;
  char v80 = v53;
  *(_DWORD *)uint64_t v81 = *(_DWORD *)v64;
  *(_DWORD *)&v81[3] = *(_DWORD *)&v64[3];
  uint64_t v82 = v24;
  uint64_t v83 = v35;
  char v84 = v37;
  *(_DWORD *)char v85 = *(_DWORD *)v63;
  *(_DWORD *)&v85[3] = *(_DWORD *)&v63[3];
  uint64_t v86 = v25;
  char v87 = v41;
  char v88 = v40;
  __int16 v90 = v62;
  int v89 = v61;
  uint64_t v91 = v26;
  uint64_t v92 = v44;
  char v93 = v38;
  *(_DWORD *)long long v94 = *(_DWORD *)v60;
  *(_DWORD *)&v94[3] = *(_DWORD *)&v60[3];
  uint64_t v95 = v50;
  uint64_t v96 = v48;
  uint64_t v97 = v46;
  char v98 = (char)a2;
  *(_DWORD *)long long v99 = *(_DWORD *)v59;
  *(_DWORD *)&v99[3] = *(_DWORD *)&v59[3];
  uint64_t v100 = v27;
  uint64_t v101 = v52;
  uint64_t v102 = v28;
  uint64_t v103 = v30;
  uint64_t v104 = v42;
  sub_1001839DC(v58, v56, v55);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1004741B4((uint64_t)&v65);
  sub_10047428C((uint64_t)&v80);
  sub_1001839EC(v58, v56, v55);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100473858@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  id v11 = a1;
  sub_100468A7C(a2, a3, a4, a5);

  sub_10017B588();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v35 = v13;
  uint64_t v36 = v12;
  uint64_t v34 = v14;
  char v33 = v15 & 1;
  id v16 = v11;
  sub_100468BE4(a2, a3, a4, a5);

  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v31 = v18;
  uint64_t v32 = v19;
  char v21 = v20 & 1;
  id v22 = v16;
  sub_100468BE4(a2, a3, a4, a5);

  uint64_t v23 = Text.init<A>(_:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  LOBYTE(a2) = v28 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a6 = v36;
  *(void *)(a6 + 8) = v35;
  *(unsigned char *)(a6 + 16) = v33;
  *(void *)(a6 + 24) = v34;
  *(_WORD *)(a6 + 32) = 257;
  *(void *)(a6 + 40) = v17;
  *(void *)(a6 + 48) = v31;
  *(unsigned char *)(a6 + 56) = v21;
  *(void *)(a6 + 64) = v32;
  *(void *)(a6 + 72) = v23;
  *(void *)(a6 + 80) = v25;
  *(unsigned char *)(a6 + 88) = a2;
  *(void *)(a6 + 96) = v27;
  *(void *)(a6 + 104) = KeyPath;
  *(void *)(a6 + 112) = 0x3FE999999999999ALL;
  sub_1001839DC(v36, v35, v33);
  swift_bridgeObjectRetain();
  sub_1001839DC(v17, v31, v21);
  swift_bridgeObjectRetain();
  sub_1001839DC(v23, v25, a2);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001839EC(v23, v25, a2);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1001839EC(v17, v31, v21);
  swift_bridgeObjectRelease();
  sub_1001839EC(v36, v35, v33);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100473AA0@<X0>(uint64_t a1@<X8>)
{
  return sub_10047280C(*(void *)v1, *(char **)(v1 + 8), a1);
}

uint64_t sub_100473AA8()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *sub_100473AE0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004729BC(a1, *(void **)(v2 + 24), a2);
}

unint64_t sub_100473AE8()
{
  unint64_t result = qword_1006A8240;
  if (!qword_1006A8240)
  {
    sub_10001DFF4(&qword_1006A8230);
    sub_100473B64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8240);
  }
  return result;
}

unint64_t sub_100473B64()
{
  unint64_t result = qword_1006A8248;
  if (!qword_1006A8248)
  {
    sub_10001DFF4(&qword_1006A8250);
    sub_10001DFB0(&qword_1006A8258, &qword_1006A8260);
    sub_10001DFB0(&qword_1006A1B30, &qword_1006A1B38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8248);
  }
  return result;
}

unint64_t sub_100473C28()
{
  unint64_t result = qword_1006A8268;
  if (!qword_1006A8268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8268);
  }
  return result;
}

uint64_t sub_100473C84@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100473CB0()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_100473CD8(uint64_t result)
{
  *(unsigned char *)(result + 288) = 1;
  return result;
}

uint64_t sub_100473CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002F214(&qword_1006A8278);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100473D4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  char v4 = *(unsigned char *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  char v7 = *(unsigned char *)(a1 + 160);
  uint64_t v10 = *(void *)(a1 + 184);
  uint64_t v11 = *(void *)(a1 + 176);
  char v9 = *(unsigned char *)(a1 + 192);
  sub_1001839DC(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001839DC(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_1001839DC(v5, v6, v7);
  swift_bridgeObjectRetain();
  sub_1001839DC(v11, v10, v9);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100473E60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v6 = *(void *)(a1 + 128);
  char v7 = *(unsigned char *)(a1 + 136);
  uint64_t v10 = *(void *)(a1 + 160);
  uint64_t v11 = *(void *)(a1 + 152);
  char v9 = *(unsigned char *)(a1 + 168);
  sub_1001839DC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001839DC(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_1001839DC(v5, v6, v7);
  swift_bridgeObjectRetain();
  sub_1001839DC(v11, v10, v9);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100473F74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  char v4 = *(unsigned char *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  char v7 = *(unsigned char *)(a1 + 160);
  uint64_t v10 = *(void *)(a1 + 184);
  uint64_t v11 = *(void *)(a1 + 176);
  char v9 = *(unsigned char *)(a1 + 192);
  sub_1001839EC(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  sub_1001839EC(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_1001839EC(v5, v6, v7);
  swift_bridgeObjectRelease();
  sub_1001839EC(v11, v10, v9);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_10047408C(uint64_t result)
{
  *(unsigned char *)(result + 288) = 0;
  return result;
}

uint64_t sub_100474094(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v6 = *(void *)(a1 + 128);
  char v7 = *(unsigned char *)(a1 + 136);
  uint64_t v10 = *(void *)(a1 + 160);
  uint64_t v11 = *(void *)(a1 + 152);
  char v9 = *(unsigned char *)(a1 + 168);
  sub_1001839EC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_release();
  swift_bridgeObjectRelease();
  sub_1001839EC(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_1001839EC(v5, v6, v7);
  swift_bridgeObjectRelease();
  sub_1001839EC(v11, v10, v9);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1004741B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  char v4 = *(unsigned char *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  char v7 = *(unsigned char *)(a1 + 96);
  sub_1001839DC(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRetain();
  sub_1001839DC(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_1001839DC(v5, v6, v7);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10047428C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  char v4 = *(unsigned char *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  char v7 = *(unsigned char *)(a1 + 96);
  sub_1001839EC(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRelease();
  sub_1001839EC(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_1001839EC(v5, v6, v7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_100474364()
{
  return sub_1004743F0(&qword_1006A82A0, &qword_1006A82A8, (void (*)(void))sub_1004743B4);
}

uint64_t sub_1004743B4()
{
  return sub_1004743F0(&qword_1006A82B0, &qword_1006A8270, (void (*)(void))sub_100473AE8);
}

uint64_t sub_1004743F0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001DFF4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100474460(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  BOOL v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v23[-1] - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23[-1] - v12;
  id v22 = v2;
  if (objc_msgSend(v2, "ic_inSidebar")) {
    static UIListContentConfiguration.sidebarHeader()();
  }
  else {
    static UIListContentConfiguration.prominentInsetGroupedHeader()();
  }
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v8, v13, v4);
  uint64_t v15 = type metadata accessor for UICellConfigurationState();
  uint64_t v24 = v15;
  uint64_t v25 = &protocol witness table for UICellConfigurationState;
  id v16 = sub_10015E0F0(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v16, a1, v15);
  UIListContentConfiguration.updated(for:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v13, v4);
  sub_100018FE8((uint64_t)v23);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v11, v4);
  uint64_t v18 = (void (*)(uint64_t *, void))UIListContentConfiguration.directionalLayoutMargins.modify();
  *(void *)(v19 + 8) = 0x4030000000000000;
  v18(v23, 0);
  swift_bridgeObjectRetain();
  UIListContentConfiguration.text.setter();
  uint64_t v24 = v4;
  uint64_t v25 = &protocol witness table for UIListContentConfiguration;
  char v20 = sub_10015E0F0(v23);
  v14((char *)v20, v13, v4);
  UICollectionViewCell.contentConfiguration.setter();
  return ((uint64_t (*)(char *, uint64_t))v17)(v13, v4);
}

uint64_t type metadata accessor for TagHeaderCell()
{
  return self;
}

void sub_1004748FC(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v7 = (void *)(v4 + OBJC_IVAR___ICTagCell_displayText);
  void *v7 = a1;
  v7[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  [*(id *)(v4 + OBJC_IVAR___ICTagCell_imageView) setImage:0];
  sub_100477998(0);
  *(unsigned char *)(v4 + OBJC_IVAR___ICTagCell_includeSymbolPrefix) = a3;
  *(unsigned char *)(v4 + OBJC_IVAR___ICTagCell_hasGroupInset) = a4;
  sub_100474B60();

  sub_100476AE8();
}

NSString sub_10047499C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1006CE2C0 = (uint64_t)result;
  return result;
}

void sub_100474B60()
{
  id v1 = [v0 superview];
  if (!v1) {
    return;
  }
  id v25 = v1;
  if (v0[OBJC_IVAR___ICTagCell_hasGroupInset])
  {
    double v2 = 32.0;
  }
  else
  {
    BOOL v3 = [self ic_isVision] == 0;
    id v1 = v25;
    if (v3) {
      double v2 = 0.0;
    }
    else {
      double v2 = 24.0;
    }
  }
  [v1 bounds];
  double v4 = CGRectGetWidth(v27) - v2;
  uint64_t v5 = OBJC_IVAR___ICTagCell_maxWidthConstraint;
  uint64_t v6 = *(void **)&v0[OBJC_IVAR___ICTagCell_maxWidthConstraint];
  if (v6)
  {
    [v6 setConstant:v4];
  }
  else
  {
    id v7 = [v0 contentView];
    id v8 = [v7 widthAnchor];

    id v9 = [v8 constraintLessThanOrEqualToConstant:v4];
    uint64_t v10 = *(void **)&v0[v5];
    *(void *)&v0[v5] = v9;

    uint64_t v11 = *(void **)&v0[v5];
    if (v11) {
      [v11 setActive:1];
    }
  }
  id v12 = [self defaultMetrics];
  id v13 = [v0 traitCollection];
  double v14 = 32.0;
  [v12 scaledValueForValue:v13 compatibleWithTraitCollection:32.0];
  double v16 = v15;

  if (v16 > 32.0) {
    double v14 = v16;
  }
  uint64_t v17 = OBJC_IVAR___ICTagCell_minWidthConstraint;
  uint64_t v18 = *(void **)&v0[OBJC_IVAR___ICTagCell_minWidthConstraint];
  if (v18)
  {
    id v19 = v18;
    [v19 setConstant:v14];
LABEL_18:

    goto LABEL_19;
  }
  id v20 = [v0 contentView];
  id v21 = [v20 widthAnchor];

  id v22 = [v21 constraintGreaterThanOrEqualToConstant:v14];
  uint64_t v23 = *(void **)&v0[v17];
  *(void *)&v0[v17] = v22;

  uint64_t v24 = *(void **)&v0[v17];
  if (v24)
  {
    id v19 = v24;
    [v19 setActive:1];
    goto LABEL_18;
  }
LABEL_19:
}

void sub_100474ED8()
{
  id v1 = [v0 contentView];
  if (*(void *)&v0[OBJC_IVAR___ICTagCell_displayImage])
  {
    id v2 = sub_100475F80();
LABEL_11:
    id v3 = v2;
    goto LABEL_12;
  }
  if (v0[OBJC_IVAR___ICTagCell_isEmphasized] != 1)
  {
    if (v0[OBJC_IVAR___ICTagCell_isExcluded] == 1) {
      uint64_t v8 = OBJC_IVAR___ICTagCell_excludedBackgroundColor;
    }
    else {
      uint64_t v8 = OBJC_IVAR___ICTagCell_unemphasizedBackgroundColor;
    }
    id v2 = *(id *)&v0[v8];
    goto LABEL_11;
  }
  id v3 = [self ICTintColor];
  id v4 = [v0 traitCollection];
  id v5 = [v4 accessibilityContrast];

  if (v5 == (id)1)
  {
    id v6 = (id)ICAccessibilitySystemDarkenedColor();
    if (!v6)
    {
LABEL_36:
      __break(1u);
      return;
    }
    id v7 = v6;

    id v3 = v7;
  }
LABEL_12:
  [v1 setBackgroundColor:v3];

  id v9 = *(void **)&v0[OBJC_IVAR___ICTagCell_textLabel];
  if (v0[OBJC_IVAR___ICTagCell_isEmphasized] != 1)
  {
    int v11 = v0[OBJC_IVAR___ICTagCell_isExcluded];
    id v12 = self;
    if (v11 == 1)
    {
      id v10 = [v12 ICTintColor];
      id v13 = [v0 traitCollection];
      id v14 = [v13 accessibilityContrast];

      if (v14 != (id)1) {
        goto LABEL_21;
      }
      id v12 = (id)ICAccessibilitySystemDarkenedColor();
      if (v12)
      {
LABEL_20:
        id v17 = v12;

        id v10 = v17;
        goto LABEL_21;
      }
      __break(1u);
    }
    id v10 = [v12 secondaryLabelColor];
    id v15 = [v0 traitCollection];
    id v16 = [v15 accessibilityContrast];

    if (v16 != (id)1) {
      goto LABEL_21;
    }
    id v12 = (id)ICAccessibilitySystemDarkenedColor();
    if (!v12)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    goto LABEL_20;
  }
  id v10 = *(id *)&v0[OBJC_IVAR___ICTagCell_emphasizedTextColor];
LABEL_21:
  [v9 setTextColor:v10];

  id v18 = [v0 contentView];
  id v19 = [v18 layer];

  uint64_t v20 = OBJC_IVAR___ICTagCell_isExcluded;
  if (v0[OBJC_IVAR___ICTagCell_isExcluded] != 1 || (v0[OBJC_IVAR___ICTagCell_isPreviewing] & 1) != 0)
  {
    id v21 = 0;
    goto LABEL_28;
  }
  id v22 = [self ICTintColor];
  id v23 = [v0 traitCollection];
  id v24 = [v23 accessibilityContrast];

  if (v24 == (id)1)
  {
    id v25 = (id)ICAccessibilitySystemDarkenedColor();
    if (v25)
    {
      id v26 = v25;

      id v22 = v26;
      goto LABEL_27;
    }
    goto LABEL_35;
  }
LABEL_27:
  id v21 = [v22 CGColor];

LABEL_28:
  [v19 setBorderColor:v21];

  id v27 = [v0 contentView];
  id v28 = [v27 layer];

  if (v0[v20] != 1 || (double v29 = 2.0, v0[OBJC_IVAR___ICTagCell_isPreviewing] == 1)) {
    double v29 = 0.0;
  }
  [v28 setBorderWidth:v29];

  sub_100476AE8();
}

uint64_t TagCell.accessibilityLabel.getter()
{
  if (*(void *)(v0 + OBJC_IVAR___ICTagCell_identifier) && (self, swift_dynamicCastObjCClass()))
  {
    id v1 = [self mainBundle];
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [v1 localizedStringForKey:v2 value:0 table:0];

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR___ICTagCell_displayText);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t (*TagCell.accessibilityLabel.modify(uint64_t *a1))()
{
  if (*(void *)(v1 + OBJC_IVAR___ICTagCell_identifier) && (self, swift_dynamicCastObjCClass()))
  {
    id v3 = [self mainBundle];
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 localizedStringForKey:v4 value:0 table:0];

    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v9 = v1 + OBJC_IVAR___ICTagCell_displayText;
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR___ICTagCell_displayText);
    uint64_t v8 = *(void *)(v9 + 8);
    swift_bridgeObjectRetain();
  }
  *a1 = v6;
  a1[1] = v8;
  return j__s11MobileNotes10ActivityIDVwxx;
}

uint64_t TagCell.accessibilityValue.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR___ICTagCell_isExcluded) != 1) {
    return 0;
  }
  id v1 = [self mainBundle];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 localizedStringForKey:v2 value:0 table:0];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

uint64_t (*TagCell.accessibilityValue.modify(uint64_t *a1))()
{
  if (*(unsigned char *)(v1 + OBJC_IVAR___ICTagCell_isExcluded) == 1)
  {
    id v3 = [self mainBundle];
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 localizedStringForKey:v4 value:0 table:0];

    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return j__s11MobileNotes10ActivityIDVwxx;
}

UIAccessibilityTraits TagCell.accessibilityTraits.getter()
{
  v6.receiver = v0;
  v6.super_class = (Class)swift_getObjectType();
  unint64_t v1 = [super accessibilityTraits];
  UIAccessibilityTraits v2 = UIAccessibilityTraitButton;
  if ((UIAccessibilityTraitButton & ~v1) == 0) {
    UIAccessibilityTraits v2 = 0;
  }
  UIAccessibilityTraits v3 = v2 | v1;
  UIAccessibilityTraits v4 = -1;
  if (*((unsigned char *)v0 + OBJC_IVAR___ICTagCell_isExcluded)) {
    UIAccessibilityTraits v4 = ~UIAccessibilityTraitSelected;
  }
  return v3 & v4;
}

id TagCell.accessibilityTraits.setter(uint64_t a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)swift_getObjectType();
  return [super setAccessibilityTraits:a1];
}

void (*TagCell.accessibilityTraits.modify(objc_super **a1))(objc_super **a1, char a2)
{
  UIAccessibilityTraits v3 = (objc_super *)malloc(0x48uLL);
  *a1 = v3;
  v3[3].super_class = v1;
  uint64_t ObjectType = swift_getObjectType();
  v3[4].receiver = (id)ObjectType;
  v3->receiver = v1;
  v3->super_class = (Class)ObjectType;
  unint64_t v5 = (unint64_t)[(objc_super *)v3 accessibilityTraits];
  UIAccessibilityTraits v6 = UIAccessibilityTraitButton;
  if ((UIAccessibilityTraitButton & ~v5) == 0) {
    UIAccessibilityTraits v6 = 0;
  }
  UIAccessibilityTraits v7 = v6 | v5;
  UIAccessibilityTraits v8 = -1;
  if (*((unsigned char *)v1 + OBJC_IVAR___ICTagCell_isExcluded)) {
    UIAccessibilityTraits v8 = ~UIAccessibilityTraitSelected;
  }
  v3[3].receiver = (id)(v7 & v8);
  return sub_100475A54;
}

void sub_100475A54(objc_super **a1, char a2)
{
  UIAccessibilityTraits v2 = *a1;
  id receiver = (*a1)[3].receiver;
  Class super_class = (*a1)[3].super_class;
  objc_super v4 = (objc_class *)(*a1)[4].receiver;
  UIAccessibilityTraits v6 = *a1;
  if (a2)
  {
    v6[1].id receiver = super_class;
    UIAccessibilityTraits v7 = v6 + 1;
  }
  else
  {
    v6[2].id receiver = super_class;
    UIAccessibilityTraits v7 = v6 + 2;
  }
  v7->Class super_class = v4;
  [(objc_super *)v7 setAccessibilityTraits:receiver];

  free(v2);
}

id sub_100475AD4(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v7 = 0;
  }

  return v7;
}

uint64_t TagCell.accessibilityHint.getter()
{
  uint64_t v1 = v0;
  sub_100475DA8((uint64_t)&v10);
  if (v11)
  {
    sub_10016EFCC(&v10, (uint64_t)v12);
    uint64_t v2 = v13;
    uint64_t v3 = v14;
    sub_10015E154(v12, v13);
    char v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v0, v2, v3);
    sub_100018FE8((uint64_t)v12);
    if (v4) {
      return 0;
    }
  }
  else
  {
    sub_10002B754((uint64_t)&v10, &qword_1006A8308);
  }
  if (!*(void *)(v1 + OBJC_IVAR___ICTagCell_identifier) || (self, !swift_dynamicCastObjCClass()))
  {
    id v6 = [self mainBundle];
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v6 localizedStringForKey:v7 value:0 table:0];

    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    return v5;
  }
  return 0;
}

uint64_t TagCell.accessibilityHint.setter()
{
  return swift_bridgeObjectRelease();
}

double sub_100475DA8@<D0>(uint64_t a1@<X8>)
{
  id v10 = v1;
  sub_100031418(0, (unint64_t *)&qword_1006A4640);
  id v3 = v10;
  sub_10002F214((uint64_t *)&unk_1006A83C0);
  if (swift_dynamicCast())
  {
LABEL_2:
    sub_10002B754((uint64_t)&v7, &qword_1006A8308);
    goto LABEL_7;
  }
  uint64_t v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  sub_10002B754((uint64_t)&v7, &qword_1006A8308);
  id v4 = [v3 superview];
  if (v4)
  {
    id v5 = v4;
    do
    {

      id v10 = v5;
      id v3 = v5;
      sub_10002F214((uint64_t *)&unk_1006A83C0);
      if (swift_dynamicCast()) {
        goto LABEL_2;
      }
      uint64_t v9 = 0;
      long long v7 = 0u;
      long long v8 = 0u;
      sub_10002B754((uint64_t)&v7, &qword_1006A8308);
      id v5 = [v3 superview];
    }
    while (v5);
  }
LABEL_7:
  *(void *)&long long v7 = v3;
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t (*TagCell.accessibilityHint.modify(uint64_t *a1))()
{
  *a1 = TagCell.accessibilityHint.getter();
  a1[1] = v2;
  return destroy for ActivityID;
}

id sub_100475F80()
{
  uint64_t v1 = OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor];
  }
  else
  {
    id v4 = [self tintColor];
    id v5 = [v0 traitCollection];
    unsigned int v6 = [v5 ic_isDark];

    double v7 = 0.1;
    if (v6) {
      double v7 = 0.2;
    }
    id v8 = [v4 colorWithAlphaComponent:v7];

    uint64_t v9 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v8;
    id v3 = v8;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

void sub_1004760A0(unsigned char *a1, uint64_t a2, char a3, void *a4, void (*a5)(void))
{
  a1[*a4] = a3;
  unsigned int v6 = a1;
  a5();
}

id TagCell.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return [v9 initWithFrame:a1, a2, a3, a4];
}

id TagCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  id v5 = v4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = &v4[OBJC_IVAR___ICTagCell_displayText];
  *uint64_t v11 = 0;
  v11[1] = 0;
  v4[OBJC_IVAR___ICTagCell_includeSymbolPrefix] = 0;
  *(void *)&v4[OBJC_IVAR___ICTagCell_displayImage] = 0;
  v4[OBJC_IVAR___ICTagCell_hasGroupInset] = 1;
  v4[OBJC_IVAR___ICTagCell_isPreviewing] = 0;
  *(void *)&v4[OBJC_IVAR___ICTagCell_identifier] = 0;
  uint64_t v12 = OBJC_IVAR___ICTagCell_imageView;
  id v13 = objc_allocWithZone((Class)UIImageView);
  uint64_t v14 = v4;
  *(void *)&v5[v12] = [v13 initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v15 = OBJC_IVAR___ICTagCell_textLabel;
  *(void *)&v14[v15] = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v16 = OBJC_IVAR___ICTagCell_unemphasizedBackgroundColor;
  id v17 = self;
  *(void *)&v14[v16] = [v17 tertiarySystemFillColor];
  uint64_t v18 = OBJC_IVAR___ICTagCell_excludedBackgroundColor;
  *(void *)&v14[v18] = [v17 systemBackgroundColor];
  *(void *)&v14[OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor] = 0;
  uint64_t v19 = OBJC_IVAR___ICTagCell_emphasizedTextColor;
  *(void *)&v14[v19] = [v17 whiteColor];
  *(void *)&v14[OBJC_IVAR___ICTagCell_maxWidthConstraint] = 0;
  *(void *)&v14[OBJC_IVAR___ICTagCell_minWidthConstraint] = 0;
  v14[OBJC_IVAR___ICTagCell_isEmphasized] = 0;
  v14[OBJC_IVAR___ICTagCell_isExcluded] = 0;

  v22.id receiver = v14;
  v22.Class super_class = ObjectType;
  id v20 = [super initWithFrame:a1, a2, a3, a4];
  sub_100476370();

  return v20;
}

id sub_100476370()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002F214(&qword_1006A38E0);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = *(void **)&v0[OBJC_IVAR___ICTagCell_textLabel];
  LODWORD(v10) = 1148846080;
  [v9 setContentCompressionResistancePriority:0 forAxis:v10];
  LODWORD(v11) = 1148846080;
  [v9 setContentHuggingPriority:0 forAxis:v11];
  id v12 = [self secondaryLabelColor];
  id v13 = [v1 traitCollection];
  id v14 = [v13 accessibilityContrast];

  if (v14 != (id)1) {
    goto LABEL_4;
  }
  id result = (id)ICAccessibilitySystemDarkenedColor();
  if (result)
  {
    id v16 = result;

    id v12 = v16;
LABEL_4:
    [v9 setTextColor:v12];

    [v9 setLineBreakMode:5];
    [v9 setTextAlignment:1];
    id v17 = [v1 contentView];
    [v17 addSubview:v9];

    [v9 ic_addAnchorsToFillSuperviewWithHorizontalPadding:0 verticalPadding:12.0 usesSafeAreaLayoutGuide:8.0];
    uint64_t v18 = *(void **)&v1[OBJC_IVAR___ICTagCell_imageView];
    [v18 setContentMode:4];
    id v19 = [v1 contentView];
    [v19 addSubview:v18];

    [v18 ic_addAnchorsToFillSuperviewWithHorizontalPadding:0 verticalPadding:8.0 usesSafeAreaLayoutGuide:0];
    id v20 = [v1 contentView];
    [v20 ic_applyRoundedCornersWithRadius:8.0];

    sub_100474ED8();
    [v1 setIsAccessibilityElement:1];
    [v1 setFocusEffect:0];
    static UIBackgroundConfiguration.clear()();
    UIBackgroundConfiguration.cornerRadius.setter();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    UICollectionViewCell.backgroundConfiguration.setter();
    id v21 = [self defaultCenter];
    [v21 addObserver:v1 selector:"contentSizeCategoryDidChange:" name:UIContentSizeCategoryDidChangeNotification object:0];

    sub_100031418(0, (unint64_t *)&qword_10069C280);
    static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
    UIView.registerForTraitChanges(_:action:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    static UITraitCollection.traitsAffectingSize.getter();
    UIView.registerForTraitChanges(_:action:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  __break(1u);
  return result;
}

id TagCell.__allocating_init(coder:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithCoder:a1];

  return v3;
}

id TagCell.init(coder:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = &v2[OBJC_IVAR___ICTagCell_displayText];
  void *v5 = 0;
  v5[1] = 0;
  v2[OBJC_IVAR___ICTagCell_includeSymbolPrefix] = 0;
  *(void *)&v2[OBJC_IVAR___ICTagCell_displayImage] = 0;
  v2[OBJC_IVAR___ICTagCell_hasGroupInset] = 1;
  v2[OBJC_IVAR___ICTagCell_isPreviewing] = 0;
  *(void *)&v2[OBJC_IVAR___ICTagCell_identifier] = 0;
  uint64_t v6 = OBJC_IVAR___ICTagCell_imageView;
  id v7 = objc_allocWithZone((Class)UIImageView);
  id v8 = v2;
  *(void *)&v2[v6] = [v7 initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v9 = OBJC_IVAR___ICTagCell_textLabel;
  *(void *)&v8[v9] = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v10 = OBJC_IVAR___ICTagCell_unemphasizedBackgroundColor;
  double v11 = self;
  *(void *)&v8[v10] = [v11 tertiarySystemFillColor];
  uint64_t v12 = OBJC_IVAR___ICTagCell_excludedBackgroundColor;
  *(void *)&v8[v12] = [v11 systemBackgroundColor];
  *(void *)&v8[OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor] = 0;
  uint64_t v13 = OBJC_IVAR___ICTagCell_emphasizedTextColor;
  *(void *)&v8[v13] = [v11 whiteColor];
  *(void *)&v8[OBJC_IVAR___ICTagCell_maxWidthConstraint] = 0;
  *(void *)&v8[OBJC_IVAR___ICTagCell_minWidthConstraint] = 0;
  v8[OBJC_IVAR___ICTagCell_isEmphasized] = 0;
  v8[OBJC_IVAR___ICTagCell_isExcluded] = 0;

  v18.id receiver = v8;
  v18.Class super_class = ObjectType;
  [super initWithCoder:a1];
  id v15 = v14;
  if (v14)
  {
    id v16 = v14;
    sub_100476370();
  }
  return v15;
}

Swift::Void __swiftcall TagCell.layoutSubviews()()
{
  v1.id receiver = v0;
  v1.Class super_class = (Class)swift_getObjectType();
  [super layoutSubviews];
  sub_100474B60();
}

void sub_100476AE8()
{
  objc_super v1 = *(void **)(v0 + OBJC_IVAR___ICTagCell_textLabel);
  uint64_t v2 = self;
  id v3 = [v2 ic_preferredFontForStyle:UIFontTextStyleSubheadline symbolicTraits:2];
  if (!v3)
  {
    __break(1u);
    goto LABEL_15;
  }
  id v4 = v3;
  id v5 = [v3 ic_fontWithSingleLineA];

  if (!v5)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  [v1 setFont:v5];

  if (!*(void *)(v0 + OBJC_IVAR___ICTagCell_displayText + 8)) {
    return;
  }
  int v6 = *(unsigned __int8 *)(v0 + OBJC_IVAR___ICTagCell_includeSymbolPrefix);
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v8 = [v7 ic_withHashtagPrefix];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR___ICTagCell_isExcluded) == 1)
  {
    sub_10002F214(&qword_10069DE48);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100527F30;
    *(void *)(inited + 32) = NSFontAttributeName;
    uint64_t v10 = NSFontAttributeName;
    id v11 = [v2 ic_preferredFontForStyle:UIFontTextStyleSubheadline symbolicTraits:2];
    if (v11)
    {
      uint64_t v12 = v11;
      id v13 = [v11 ic_fontWithSingleLineA];

      if (v13)
      {
        uint64_t v14 = sub_100031418(0, (unint64_t *)&unk_1006A83B0);
        *(void *)(inited + 40) = v13;
        *(void *)(inited + 64) = v14;
        *(void *)(inited + 72) = NSStrikethroughStyleAttributeName;
        *(void *)(inited + 104) = &type metadata for Int;
        *(void *)(inited + 80) = 1;
        id v15 = NSStrikethroughStyleAttributeName;
        sub_100168480(inited);
        id v16 = objc_allocWithZone((Class)NSAttributedString);
        NSString v17 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        type metadata accessor for Key(0);
        sub_1001BBF80();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v19 = [v16 initWithString:v17 attributes:isa];

        [v1 setAttributedText:v19];
        return;
      }
LABEL_17:
      __break(1u);
      return;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  [v1 setAttributedText:0];
  id v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setText:v20];
}

uint64_t TagCell.configurationState.getter()
{
  v4.id receiver = v0;
  v4.Class super_class = (Class)swift_getObjectType();
  id v1 = [super _bridgedConfigurationState];
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();

  if (qword_10069B098 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1006CE2C0;
  AnyHashable.init<A>(_:)();
  return UICellConfigurationState.subscript.setter();
}

id TagCell.updateConfiguration(using:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UICellConfigurationState();
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  id v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  NSString v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for UICellConfigurationState.DropState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - v13;
  UICellConfigurationState.cellDropState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for UICellConfigurationState.DropState.targeted(_:), v8);
  char v15 = static UICellConfigurationState.DropState.== infix(_:_:)();
  id v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  v16(v14, v8);
  uint64_t v17 = v25;
  objc_super v18 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v18(v7, a1, v2);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v2);
    char v19 = 1;
    id v20 = v26;
    goto LABEL_13;
  }
  char v21 = UICellConfigurationState.isSelected.getter();
  v18(v5, (uint64_t)v7, v2);
  if ((v21 & 1) == 0)
  {
    char v19 = 0;
    id v20 = v26;
    goto LABEL_12;
  }
  id v20 = v26;
  if (qword_10069B098 != -1) {
    swift_once();
  }
  UICellConfigurationState.subscript.getter();
  if (!v29)
  {
    sub_10002B754((uint64_t)v28, &qword_1006A1358);
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    char v19 = 1;
    goto LABEL_12;
  }
  char v19 = v27 ^ 1;
LABEL_12:
  uint64_t v22 = *(void (**)(char *, uint64_t))(v17 + 8);
  v22(v5, v2);
  v22(v7, v2);
LABEL_13:
  v20[OBJC_IVAR___ICTagCell_isEmphasized] = v19 & 1;
  sub_100474ED8();
  if (qword_10069B098 != -1) {
    swift_once();
  }
  UICellConfigurationState.subscript.getter();
  if (!v29)
  {
    sub_10002B754((uint64_t)v28, &qword_1006A1358);
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    char v23 = 0;
    goto LABEL_20;
  }
  char v23 = v27;
LABEL_20:
  v20[OBJC_IVAR___ICTagCell_isExcluded] = v23;
  sub_100474ED8();
  return [v20 layoutIfNeeded];
}

UICollectionViewLayoutAttributes __swiftcall TagCell.preferredLayoutAttributesFitting(_:)(UICollectionViewLayoutAttributes a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_100474B60();
  v6.id receiver = v1;
  v6.Class super_class = ObjectType;
  [super preferredLayoutAttributesFittingAttributes:a1.super.isa];

  return (UICollectionViewLayoutAttributes)v4;
}

uint64_t type metadata accessor for TagCell()
{
  return self;
}

void sub_100477998(void *a1)
{
  uint64_t v2 = OBJC_IVAR___ICTagCell_displayImage;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___ICTagCell_displayImage);
  *(void *)(v1 + OBJC_IVAR___ICTagCell_displayImage) = a1;
  id v4 = a1;

  id v5 = *(void **)(v1 + v2);
  if (v5)
  {
    objc_super v6 = *(void **)(v1 + OBJC_IVAR___ICTagCell_imageView);
    id v10 = v5;
    [v6 setImage:v10];
    NSString v7 = (void *)(v1 + OBJC_IVAR___ICTagCell_displayText);
    void *v7 = 0;
    v7[1] = 0;
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void **)(v1 + OBJC_IVAR___ICTagCell_textLabel);
    [v8 setAttributedText:0];
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 setText:v9];

    sub_100476AE8();
  }
}

BOOL ContentInsetViewController.Configuration.isEqual(_:)(uint64_t a1)
{
  sub_1002510BC(a1, (uint64_t)v5);
  if (!v6)
  {
    sub_100015BE0((uint64_t)v5);
    return 0;
  }
  type metadata accessor for ContentInsetViewController.Configuration();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  BOOL v2 = _s11MobileNotes26ContentInsetViewControllerC13ConfigurationC2eeoiySbAE_AEtFZ_0(v1, (uint64_t)v4);

  return v2;
}

uint64_t type metadata accessor for ContentInsetViewController.Configuration()
{
  return self;
}

void ContentInsetViewController.Configuration.init()()
{
}

id ContentInsetViewController.Configuration.__deallocating_deinit()
{
  return sub_10047845C(type metadata accessor for ContentInsetViewController.Configuration);
}

void sub_100477DE8()
{
  uint64_t v1 = v0;
  BOOL v2 = *(void **)&v0[OBJC_IVAR___ICContentInsetViewController_configuration];
  type metadata accessor for ContentInsetViewController.Configuration();
  id v3 = v2;
  char v4 = static NSObject.== infix(_:_:)();

  if (v4) {
    return;
  }
  id v5 = *(void **)&v1[OBJC_IVAR___ICContentInsetViewController_contentViewController];
  id v6 = [v5 view];
  if (!v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  NSString v7 = v6;
  [v6 removeFromSuperview];

  id v8 = [v1 view];
  if (!v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  NSString v9 = v8;
  id v10 = [v5 view];
  if (!v10)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v11 = v10;
  [v9 addSubview:v10];

  sub_100478218();
}

Swift::Void __swiftcall ContentInsetViewController.viewDidLoad()()
{
  v1.id receiver = v0;
  v1.Class super_class = (Class)type metadata accessor for ContentInsetViewController();
  [super viewDidLoad];
  sub_1004780BC();
}

id sub_1004780BC()
{
  id result = [v0 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  BOOL v2 = result;
  id v3 = [self clearColor];
  [v2 setBackgroundColor:v3];

  char v4 = *(void **)&v0[OBJC_IVAR___ICContentInsetViewController_contentViewController];
  [v0 addChildViewController:v4];
  id result = [v4 view];
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v5 = result;
  [result setTranslatesAutoresizingMaskIntoConstraints:0];

  id result = [v0 view];
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v6 = result;
  id result = [v4 view];
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  NSString v7 = result;
  [v6 addSubview:result];

  sub_100478218();

  return [v4 didMoveToParentViewController:v0];
}

void sub_100478218()
{
  objc_super v1 = *(void **)(v0 + OBJC_IVAR___ICContentInsetViewController_contentViewController);
  id v2 = [v1 view];
  if (!v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v3 = v2;
  uint64_t v4 = OBJC_IVAR___ICContentInsetViewController_configuration;
  [v2 ic_addAnchorsToFillSuperviewWithPaddingFromDirectionalEdgeInsets:*(unsigned __int8 *)(*(void *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_usesSafeAreaLayoutGuide) usesSafeAreaLayoutGuide:*(double *)(*(void *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets) insets:*(double *)(*(void *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 8) insets:*(double *)(*(void *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 16) insets:*(double *)(*(void *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 24)];

  id v5 = [v1 view];
  if (!v5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v6 = v5;
  [v5 ic_applyRoundedCornersWithRadius:*(double *)(*(void *)(v0 + v4) + OBJC_IVAR___ICContentInsetViewControllerConfiguration_cornerRadius)];

  id v7 = [v1 view];
  if (!v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v8 = v7;
  [v7 setNeedsLayout];

  id v9 = [v1 view];
  if (!v9)
  {
LABEL_11:
    __break(1u);
    return;
  }
  id v10 = v9;
  [v9 layoutIfNeeded];
}

id ContentInsetViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone(v4) initWithNibName:v6 bundle:a3];

  return v7;
}

void ContentInsetViewController.init(nibName:bundle:)()
{
}

id ContentInsetViewController.__deallocating_deinit()
{
  return sub_10047845C(type metadata accessor for ContentInsetViewController);
}

id sub_10047845C(uint64_t (*a1)(void))
{
  v3.id receiver = v1;
  v3.Class super_class = (Class)a1();
  return [super dealloc];
}

BOOL _s11MobileNotes26ContentInsetViewControllerC13ConfigurationC2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets), *(float64x2_t *)(a2+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 16), *(float64x2_t *)(a2+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 16)))), 0xFuLL))) & 1) == 0)return 0; {
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR___ICContentInsetViewControllerConfiguration_usesSafeAreaLayoutGuide) == *(unsigned __int8 *)(a2 + OBJC_IVAR___ICContentInsetViewControllerConfiguration_usesSafeAreaLayoutGuide))
  }
    return *(double *)(a1 + OBJC_IVAR___ICContentInsetViewControllerConfiguration_cornerRadius) == *(double *)(a2 + OBJC_IVAR___ICContentInsetViewControllerConfiguration_cornerRadius);
  return 0;
}

uint64_t type metadata accessor for ContentInsetViewController()
{
  return self;
}

id sub_100478584(void *a1)
{
  uint64_t v3 = OBJC_IVAR___ICContentInsetViewController_configuration;
  long long v12 = *(_OWORD *)&NSDirectionalEdgeInsetsZero.top;
  CGFloat bottom = NSDirectionalEdgeInsetsZero.bottom;
  CGFloat trailing = NSDirectionalEdgeInsetsZero.trailing;
  NSString v6 = (objc_class *)type metadata accessor for ContentInsetViewController.Configuration();
  id v7 = objc_allocWithZone(v6);
  id v8 = (CGFloat *)&v7[OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets];
  *(_OWORD *)id v8 = v12;
  v8[2] = bottom;
  v8[3] = trailing;
  v7[OBJC_IVAR___ICContentInsetViewControllerConfiguration_usesSafeAreaLayoutGuide] = 0;
  *(void *)&v7[OBJC_IVAR___ICContentInsetViewControllerConfiguration_cornerRadius] = 0;
  v14.id receiver = v7;
  v14.Class super_class = v6;
  id v9 = v1;
  *(void *)&v1[v3] = [v14 init];
  *(void *)&v9[OBJC_IVAR___ICContentInsetViewController_contentViewController] = a1;
  id v10 = a1;

  v13.id receiver = v9;
  v13.Class super_class = (Class)type metadata accessor for ContentInsetViewController();
  return [super initWithNibName:0 bundle:0];
}

double AddFileAttachmentIntent.init()@<D0>(_OWORD *a1@<X8>)
{
  sub_100479E78((char **)v5);
  long long v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  double result = *(double *)&v6;
  long long v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

uint64_t AddFileAttachmentIntent.file.setter(uint64_t a1)
{
  uint64_t v2 = sub_10002F214(&qword_10069B538);
  __chkstk_darwin(v2 - 8);
  sub_10047AA74(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  IntentParameter.wrappedValue.setter();
  return sub_10002B754(a1, &qword_10069B538);
}

uint64_t AddFileAttachmentIntent.note.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NoteEntity(0);
  __chkstk_darwin(v2 - 8);
  sub_100254244(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NoteEntity);
  IntentParameter.wrappedValue.setter();
  return sub_1002542AC(a1, type metadata accessor for NoteEntity);
}

void *AddFileAttachmentIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static AddFileAttachmentIntent.persistentIdentifier;
}

unint64_t static AddFileAttachmentIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100478824()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static AddFileAttachmentIntent.title);
  sub_10003293C(v6, (uint64_t)static AddFileAttachmentIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t AddFileAttachmentIntent.title.unsafeMutableAddressor()
{
  if (qword_10069B0A0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();

  return sub_10003293C(v0, (uint64_t)static AddFileAttachmentIntent.title);
}

uint64_t static AddFileAttachmentIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B0A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003293C(v2, (uint64_t)static AddFileAttachmentIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t static AddFileAttachmentIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

uint64_t static AddFileAttachmentIntent.parameterSummary.getter()
{
  uint64_t v0 = sub_10002F214(&qword_1006A8448);
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_10002F214(&qword_1006A8450);
  __chkstk_darwin(v1);
  sub_1001FD570();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 543450177;
  v2._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A8458);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._countAndFlagsBits = 544175136;
  v3._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A8460);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v4);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:_:)();
}

uint64_t sub_100478FE8()
{
  swift_getKeyPath();
  sub_1001FD570();
  uint64_t v0 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)();
  swift_release();
  sub_10002F214(&qword_10069BA00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100529F20;
  *(void *)(v1 + 32) = v0;
  specialized Array._endMutation()();
  swift_retain();
  uint64_t v2 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

uint64_t AddFileAttachmentIntent.perform()(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  v2[12] = type metadata accessor for AttachmentEntity();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for NoteID();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  type metadata accessor for NoteEntity(0);
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_1004791F4, 0, 0);
}

uint64_t sub_1004791F4()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  AppDependency.wrappedValue.getter();
  uint64_t v5 = (void *)v0[5];
  v0[21] = [v5 modernManagedObjectContext];

  IntentParameter.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_1002542AC(v1, type metadata accessor for NoteEntity);
  AppDependency.wrappedValue.getter();
  uint64_t v6 = v0[6];
  v0[22] = v6;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006A3B80 + dword_1006A3B80);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[23] = v7;
  void *v7 = v0;
  v7[1] = sub_100479358;
  uint64_t v8 = v0[19];
  return v10(v8, v6);
}

uint64_t sub_100479358(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 176);
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  uint64_t v4 = *(void *)(*(void *)v1 + 144);
  uint64_t v5 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return _swift_task_switch(sub_1004794D0, 0, 0);
}

uint64_t sub_1004794D0()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = (void *)v0[21];
  uint64_t v3 = (long long *)v0[11];
  uint64_t v4 = swift_allocObject();
  v0[25] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  long long v5 = *v3;
  long long v6 = v3[1];
  long long v7 = v3[3];
  *(_OWORD *)(v4 + 64) = v3[2];
  *(_OWORD *)(v4 + 80) = v7;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = v6;
  id v8 = v1;
  id v9 = v2;
  sub_1002541E0((uint64_t)v3);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[26] = v10;
  uint64_t v11 = sub_10002F214(&qword_10069D520);
  *uint64_t v10 = v0;
  v10[1] = sub_1002526A0;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 7, sub_10047AB9C, v4, v11);
}

void sub_1004795F4(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v56 = a3;
  uint64_t v8 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  __chkstk_darwin(v8 - 8);
  long long v54 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IntentFile();
  uint64_t v55 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10002F214(&qword_10069B538);
  __chkstk_darwin(v13 - 8);
  char v15 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10002F214(&qword_10069B310);
  __chkstk_darwin(v16 - 8);
  objc_super v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = __chkstk_darwin(v19);
  char v23 = (char *)v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_6;
  }
  uint64_t v52 = v21;
  uint64_t v53 = v20;
  uint64_t v50 = a4;
  uint64_t v51 = v4;
  id v24 = a1;
  uint64_t v49 = a2;
  id v25 = [a2 objectWithID:v24];
  self;
  id v26 = (void *)swift_dynamicCastObjCClass();
  if (!v26)
  {

LABEL_6:
    type metadata accessor for ICError(0);
    uint64_t v57 = 227;
    sub_1001B50CC((uint64_t)_swiftEmptyArrayStorage);
    sub_100254810((unint64_t *)&qword_10069E4D0, type metadata accessor for ICError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return;
  }
  char v27 = v26;
  if ([v26 isPasswordProtectedAndLocked])
  {
    sub_100173F8C();
    swift_allocError();
    char v29 = 11;
LABEL_13:
    *id v28 = v29;
    swift_willThrow();

    return;
  }
  if (![v27 isEditable])
  {
    sub_100173F8C();
    swift_allocError();
    char v29 = 12;
    goto LABEL_13;
  }
  if (![v27 canAddAttachment])
  {
    sub_100173F8C();
    swift_allocError();
    char v29 = 21;
    goto LABEL_13;
  }
  id v48 = v24;
  v47[1] = *(void *)(v56 + 8);
  IntentParameter.wrappedValue.getter();
  uint64_t v30 = v55;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v15, 1, v10))
  {
    sub_10002B754((uint64_t)v15, &qword_10069B538);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v18, 1, 1, v53);
LABEL_15:
    sub_10002B754((uint64_t)v18, &qword_10069B310);
    IntentParameter.projectedValue.getter();
    uint64_t v33 = type metadata accessor for IntentDialog();
    uint64_t v34 = (uint64_t)v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v54, 1, 1, v33);
    type metadata accessor for AppIntentError();
    sub_100254810((unint64_t *)&unk_1006A2DB0, (void (*)(uint64_t))&type metadata accessor for AppIntentError);
    swift_allocError();
    IntentParameter.needsValueError(_:)();
    swift_release();
    sub_10002B754(v34, (uint64_t *)&unk_10069C9B0);
    swift_willThrow();

    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v12, v15, v10);
  sub_10002B754((uint64_t)v15, &qword_10069B538);
  IntentFile.fileURL.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
  uint64_t v32 = v52;
  uint64_t v31 = v53;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v18, 1, v53) == 1) {
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v23, v18, v31);
  if (!URL.startAccessingSecurityScopedResource()())
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v31);
    goto LABEL_21;
  }
  URL._bridgeToObjectiveC()(v35);
  char v37 = v36;
  id v38 = [v27 addAttachmentWithFileURL:v36];

  URL.stopAccessingSecurityScopedResource()();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v31);
  if (!v38)
  {
LABEL_21:

    *uint64_t v50 = 0;
    return;
  }
  id v39 = objc_allocWithZone((Class)ICAttachmentInsertionController);
  id v40 = v38;
  id v41 = [v39 initWithNote:v27];
  sub_100254858(v56 + 24, (uint64_t)v59);
  sub_100254858((uint64_t)v59, (uint64_t)v60);
  if (v61) {
    id v42 = [v41 addAttachment:v40];
  }
  else {
    id v42 = [v41 addAttachment:v40 atTextRange:v60[0], v60[1]];
  }
  char v43 = v49;

  id v58 = 0;
  if ([v43 save:&v58])
  {
    id v44 = v58;
    id v45 = [v40 objectID];

    *uint64_t v50 = v45;
  }
  else
  {
    id v46 = v58;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t sub_100479DC0(uint64_t a1)
{
  long long v4 = v1[1];
  *(_OWORD *)(v2 + 16) = *v1;
  *(_OWORD *)(v2 + 32) = v4;
  long long v5 = v1[3];
  *(_OWORD *)(v2 + 48) = v1[2];
  *(_OWORD *)(v2 + 64) = v5;
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 80) = v6;
  *long long v6 = v2;
  v6[1] = sub_1002534FC;
  return AddFileAttachmentIntent.perform()(a1);
}

uint64_t sub_100479E78@<X0>(char **a1@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v1 = sub_10002F214(&qword_10069B1D0);
  __chkstk_darwin(v1 - 8);
  long long v63 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10002F214(&qword_10069B538);
  __chkstk_darwin(v3 - 8);
  char v61 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for InputConnectionBehavior();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v77 = v5;
  uint64_t v78 = v6;
  __chkstk_darwin(v5);
  long long v76 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  __int16 v62 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v67 = (char *)&v54 - v11;
  uint64_t v12 = sub_10002F214((uint64_t *)&unk_10069E280);
  __chkstk_darwin(v12 - 8);
  long long v60 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v14 - 8);
  id v58 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Locale();
  __chkstk_darwin(v20 - 8);
  uint64_t v21 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v21 - 8);
  uint64_t v22 = type metadata accessor for LocalizedStringResource();
  uint64_t v71 = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  char v75 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10002F214((uint64_t *)&unk_10069B250);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v25 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  id v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
  uint64_t v65 = v16;
  v26(v19, enum case for LocalizedStringResource.BundleDescription.main(_:), v16);
  uint64_t v66 = v17 + 104;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v26(v19, v25, v16);
  char v27 = v58;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  id v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
  uint64_t v70 = v23 + 56;
  long long v72 = v28;
  v28(v27, 0, 1, v22);
  uint64_t v29 = type metadata accessor for String.IntentInputOptions();
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v60, 1, 1, v29);
  uint64_t v55 = type metadata accessor for IntentDialog();
  uint64_t v30 = *(void *)(v55 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
  uint64_t v68 = v30 + 56;
  long long v69 = v31;
  uint64_t v32 = v67;
  v31(v67, 1, 1, v55);
  unsigned int v73 = enum case for InputConnectionBehavior.default(_:);
  uint64_t v33 = *(void (**)(void))(v78 + 104);
  v78 += 104;
  long long v74 = (void (*)(char *, void, uint64_t))v33;
  v33(v76);
  uint64_t v34 = v32;
  long long v60 = (char *)IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  uint64_t v59 = sub_10002F214(&qword_10069B540);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  unsigned int v56 = v25;
  uint64_t v35 = v65;
  uint64_t v57 = v26;
  v26(v19, v25, v65);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v26(v19, v25, v35);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v36 = v27;
  v72(v27, 0, 1, v71);
  uint64_t v37 = type metadata accessor for IntentFile();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v61, 1, 1, v37);
  uint64_t v38 = v55;
  v69(v34, 1, 1, v55);
  sub_10002F214(&qword_10069B548);
  type metadata accessor for UTType();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100524D10;
  static UTType.item.getter();
  v74(v76, v73, v77);
  char v61 = (char *)IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)();
  uint64_t v59 = sub_10002F214(&qword_10069B1D8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v39 = v56;
  uint64_t v40 = v65;
  id v41 = v57;
  v57(v19, v56, v65);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v41(v19, v39, v40);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v72(v36, 0, 1, v71);
  uint64_t v42 = type metadata accessor for NoteEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v63, 1, 1, v42);
  char v43 = v69;
  v69(v67, 1, 1, v38);
  v43(v62, 1, 1, v38);
  uint64_t v81 = sub_10023F448();
  uint64_t v82 = v44;
  uint64_t v83 = v45;
  char v84 = v46 & 1;
  uint64x2_t v47 = (uint64x2_t)vdupq_n_s64(v46);
  int16x8_t v48 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v47, (uint64x2_t)xmmword_100524D00), (int32x4_t)vshlq_u64(v47, (uint64x2_t)xmmword_100524CF0));
  *(int8x8_t *)v48.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v48), (int8x8_t)0x1000100010001);
  unsigned __int32 v85 = vmovn_s16(v48).u32[0];
  v74(v76, v73, v77);
  sub_1001579C0();
  uint64_t v49 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)();
  sub_10002F214((uint64_t *)&unk_10069CE60);
  unint64_t v79 = 0xD000000000000021;
  unint64_t v80 = 0x8000000100549290;
  AnyHashable.init<A>(_:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t v50 = AppDependency.__allocating_init(key:manager:)();
  sub_10002F214((uint64_t *)&unk_10069B130);
  unint64_t v79 = 0xD000000000000024;
  unint64_t v80 = 0x8000000100549260;
  AnyHashable.init<A>(_:)();
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  uint64_t v52 = v64;
  uint64_t v53 = v61;
  *uint64_t v64 = v60;
  v52[1] = v53;
  v52[3] = 0;
  v52[4] = 0;
  v52[2] = (char *)v49;
  *((unsigned char *)v52 + 40) = 1;
  v52[6] = (char *)v50;
  v52[7] = (char *)result;
  return result;
}

uint64_t sub_10047AA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002F214(&qword_10069B538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10047AADC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10047AB08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10047AB34()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

void sub_10047AB9C(void *a1@<X8>)
{
  sub_1004795F4(*(void **)(v1 + 16), *(void **)(v1 + 24), v1 + 32, a1);
}

unint64_t sub_10047ABC0()
{
  unint64_t result = qword_1006A8470;
  if (!qword_1006A8470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8470);
  }
  return result;
}

unint64_t sub_10047AC1C()
{
  unint64_t result = qword_1006A8478;
  if (!qword_1006A8478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8478);
  }
  return result;
}

unint64_t sub_10047AC74()
{
  unint64_t result = qword_1006A8480;
  if (!qword_1006A8480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8480);
  }
  return result;
}

uint64_t sub_10047ACC8()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t sub_10047ACFC()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AddFileAttachmentIntent()
{
  return &type metadata for AddFileAttachmentIntent;
}

uint64_t sub_10047AD28()
{
  return sub_10001DFB0(&qword_1006A8490, &qword_1006A8498);
}

uint64_t sub_10047AD64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

double InsertAllMentionIntent.init()@<D0>(uint64_t a1@<X8>)
{
  sub_10047C754((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t InsertAllMentionIntent.target.setter(uint64_t a1)
{
  uint64_t v2 = sub_10002F214(&qword_10069B1D0);
  __chkstk_darwin(v2 - 8);
  sub_1002AF970(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  IntentParameter.wrappedValue.setter();
  return sub_10002B754(a1, &qword_10069B1D0);
}

void *InsertAllMentionIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static InsertAllMentionIntent.persistentIdentifier;
}

unint64_t static InsertAllMentionIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_10047AE98()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static InsertAllMentionIntent.title);
  sub_10003293C(v6, (uint64_t)static InsertAllMentionIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t InsertAllMentionIntent.title.unsafeMutableAddressor()
{
  if (qword_10069B0A8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();

  return sub_10003293C(v0, (uint64_t)static InsertAllMentionIntent.title);
}

uint64_t static InsertAllMentionIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B0A8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003293C(v2, (uint64_t)static InsertAllMentionIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t static InsertAllMentionIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

uint64_t InsertAllMentionIntent.insertionRange.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t InsertAllMentionIntent.insertionRange.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 8) = result;
  *(void *)(v3 + 16) = a2;
  *(unsigned char *)(v3 + 24) = a3 & 1;
  return result;
}

uint64_t InsertAllMentionIntent.perform()(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  sub_10002F214((uint64_t *)&unk_10069C9B0);
  v2[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for LocalizedStringResource.BundleDescription();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  type metadata accessor for Locale();
  v2[17] = swift_task_alloc();
  type metadata accessor for String.LocalizationValue();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  sub_10002F214(&qword_10069B1D0);
  v2[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NoteEntity(0);
  v2[24] = v5;
  v2[25] = *(void *)(v5 - 8);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_10047B6E8, 0, 0);
}

uint64_t sub_10047B6E8()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v4 = (void *)v0[12];
  AppDependency.wrappedValue.getter();
  uint64_t v5 = (void *)v0[7];
  id v6 = [v5 modernManagedObjectContext];
  v0[28] = v6;

  uint64_t v7 = swift_allocObject();
  v0[29] = v7;
  *(void *)(v7 + 16) = 0;
  v0[30] = *v4;
  IntentParameter.wrappedValue.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v8 = v0[21];
    uint64_t v18 = v0[22];
    uint64_t v19 = v0[20];
    uint64_t v20 = v0[19];
    uint64_t v9 = v0[15];
    uint64_t v10 = v0[16];
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[14];
    sub_10002B754(v0[23], &qword_10069B1D0);
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v10, enum case for LocalizedStringResource.BundleDescription.main(_:), v12);
    LocalizedStringResource.init(_:table:locale:bundle:comment:)();
    IntentParameter.projectedValue.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v8, v18, v20);
    IntentDialog.init(_:)();
    uint64_t v13 = type metadata accessor for IntentDialog();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 0, 1, v13);
    type metadata accessor for AppIntentError();
    sub_10047CDE0((unint64_t *)&unk_1006A2DB0, (void (*)(uint64_t))&type metadata accessor for AppIntentError);
    swift_allocError();
    IntentParameter.needsValueError(_:)();
    swift_release();
    sub_10002B754(v11, (uint64_t *)&unk_10069C9B0);
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    sub_1002AFA68(v0[23], v0[27]);
    AppDependency.wrappedValue.getter();
    uint64_t v16 = v0[8];
    v0[31] = v16;
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10069CE40 + dword_10069CE40);
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    v0[32] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10047BB04;
    return v21((uint64_t)v21, v16, (uint64_t)sub_1001B5934, v7);
  }
}

uint64_t sub_10047BB04()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 248);
  swift_release();

  if (v0) {
    uint64_t v4 = sub_10047C3F8;
  }
  else {
    uint64_t v4 = sub_10047BC50;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10047BC50()
{
  *(void *)(v0 + 40) = 0;
  uint64_t v1 = *(void *)(v0 + 232);
  *(void *)(v0 + 48) = 0;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 16);
  if (!v2)
  {
    uint64_t v33 = *(void *)(v0 + 216);
    uint64_t v9 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 176);
    uint64_t v30 = *(void *)(v0 + 160);
    uint64_t v31 = *(void *)(v0 + 152);
    uint64_t v32 = *(void **)(v0 + 224);
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 104);
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v11, enum case for LocalizedStringResource.BundleDescription.main(_:), v12);
    LocalizedStringResource.init(_:table:locale:bundle:comment:)();
    IntentParameter.projectedValue.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v9, v10, v31);
    IntentDialog.init(_:)();
    uint64_t v15 = type metadata accessor for IntentDialog();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
    type metadata accessor for AppIntentError();
    sub_10047CDE0((unint64_t *)&unk_1006A2DB0, (void (*)(uint64_t))&type metadata accessor for AppIntentError);
    swift_allocError();
    IntentParameter.needsValueError(_:)();
    swift_release();
    sub_10002B754(v14, (uint64_t *)&unk_10069C9B0);
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v10, v31);
    uint64_t v16 = v33;
LABEL_7:
    sub_100189980(v16);
    goto LABEL_8;
  }
  id v3 = v2;
  if (!objc_msgSend(v3, "ic_isModernNoteType"))
  {
    uint64_t v17 = *(void **)(v0 + 224);
    uint64_t v18 = *(void *)(v0 + 216);
    sub_100173F8C();
    swift_allocError();
    *uint64_t v19 = 3;
    swift_willThrow();

    uint64_t v16 = v18;
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = (void *)swift_task_alloc();
  id v7[2] = v5;
  v7[3] = v3;
  v7[4] = v0 + 40;
  v7[5] = v6;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v4)
  {
    uint64_t v8 = *(void **)(v0 + 224);
    sub_100189980(*(void *)(v0 + 216));

    swift_task_dealloc();
LABEL_8:
    sub_1003CDEF8(*(void **)(v0 + 40), *(void **)(v0 + 48));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }

  swift_task_dealloc();
  uint64_t v22 = *(void **)(v0 + 40);
  *(void *)(v0 + 272) = v22;
  if (!v22)
  {
    id v28 = *(void **)(v0 + 224);
    uint64_t v29 = *(void *)(v0 + 216);
    type metadata accessor for ICError(0);
    *(void *)(v0 + 80) = 227;
    sub_1001B50CC((uint64_t)_swiftEmptyArrayStorage);
    sub_10047CDE0((unint64_t *)&qword_10069E4D0, type metadata accessor for ICError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    uint64_t v16 = v29;
    goto LABEL_7;
  }
  uint64_t v23 = *(void **)(v0 + 48);
  *(void *)(v0 + 280) = v23;
  sub_1003CDF38(v22, v23);
  id v24 = v22;
  id v25 = v23;
  id v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v26;
  void *v26 = v0;
  v26[1] = sub_10047C174;
  uint64_t v27 = *(void *)(v0 + 208);
  return NoteEntity.init(for:in:)(v27, (uint64_t)v24, (uint64_t)v25);
}

uint64_t sub_10047C174()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10047C4EC;
  }
  else {
    uint64_t v2 = sub_10047C288;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10047C288()
{
  uint64_t v2 = *(void **)(v0 + 272);
  uint64_t v1 = *(void **)(v0 + 280);
  id v3 = *(void **)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 216);
  sub_10047CDE0((unint64_t *)&qword_10069CD70, (void (*)(uint64_t))type metadata accessor for NoteEntity);
  static IntentResult.result<A>(value:)();

  sub_100189980(v4);
  sub_100189980(v5);
  sub_1003CDEF8(*(void **)(v0 + 40), *(void **)(v0 + 48));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10047C3F8()
{
  uint64_t v1 = *(void *)(v0 + 216);

  sub_100189980(v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10047C4EC()
{
  uint64_t v2 = *(void **)(v0 + 272);
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 216);

  sub_100189980(v3);
  sub_1003CDEF8(*(void **)(v0 + 40), *(void **)(v0 + 48));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_10047C5F4(void *a1, uint64_t a2, uint64_t a3)
{
  [a1 ic_existingObjectWithID:a2];
  if (v5)
  {
    uint64_t v6 = v5;
    self;
    uint64_t v7 = (void *)swift_dynamicCastObjCClass();
    if (v7)
    {
      id v8 = sub_10047D120(v7);
      uint64_t v10 = v9;

      if (!v3)
      {
        uint64_t v11 = *(void **)a3;
        uint64_t v12 = *(void **)(a3 + 8);
        *(void *)a3 = v8;
        *(void *)(a3 + 8) = v10;
        sub_1003CDEF8(v11, v12);
      }
    }
    else
    {
    }
  }
}

uint64_t sub_10047C69C(uint64_t a1)
{
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(void *)(v2 + 48) = *(void *)(v1 + 32);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v5;
  void *v5 = v2;
  v5[1] = sub_1001C3F70;
  return InsertAllMentionIntent.perform()(a1);
}

uint64_t sub_10047C754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v1 = type metadata accessor for InputConnectionBehavior();
  uint64_t v40 = *(void *)(v1 - 8);
  uint64_t v41 = v1;
  __chkstk_darwin(v1);
  uint64_t v39 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v38 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v33 - v6;
  uint64_t v7 = sub_10002F214(&qword_10069B1D0);
  __chkstk_darwin(v7 - 8);
  uint64_t v36 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v9 - 8);
  uint64_t v34 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Locale();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v16 - 8);
  uint64_t v17 = type metadata accessor for LocalizedStringResource();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v35 = sub_10002F214(&qword_10069B210);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v19 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v20(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v20(v14, v19, v11);
  uint64_t v21 = v34;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
  uint64_t v22 = type metadata accessor for NoteEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v36, 1, 1, v22);
  uint64_t v23 = type metadata accessor for IntentDialog();
  id v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  v24(v37, 1, 1, v23);
  v24(v38, 1, 1, v23);
  uint64_t v45 = sub_10023ED64();
  uint64_t v46 = v25;
  uint64_t v47 = v26;
  uint64x2_t v28 = (uint64x2_t)vdupq_n_s64(v27);
  char v48 = v27 & 1;
  int16x8_t v29 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_100524D00), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_100524CF0));
  *(int8x8_t *)v29.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v29), (int8x8_t)0x1000100010001);
  unsigned __int32 v49 = vmovn_s16(v29).u32[0];
  (*(void (**)(char *, void, uint64_t))(v40 + 104))(v39, enum case for InputConnectionBehavior.default(_:), v41);
  sub_1001579C0();
  uint64_t v30 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)();
  sub_10002F214((uint64_t *)&unk_10069CE60);
  unint64_t v43 = 0xD000000000000021;
  unint64_t v44 = 0x8000000100549290;
  AnyHashable.init<A>(_:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  uint64_t v32 = v42;
  *(void *)(v42 + 8) = 0;
  *(void *)(v32 + 16) = 0;
  *(void *)uint64_t v32 = v30;
  *(unsigned char *)(v32 + 24) = 1;
  *(void *)(v32 + 32) = result;
  return result;
}

uint64_t sub_10047CD88()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10047CDC0()
{
  sub_10047C5F4(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10047CDE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10047CE2C()
{
  unint64_t result = qword_1006A84A8;
  if (!qword_1006A84A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A84A8);
  }
  return result;
}

unint64_t sub_10047CE84()
{
  unint64_t result = qword_1006A84B0;
  if (!qword_1006A84B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A84B0);
  }
  return result;
}

uint64_t sub_10047CED8()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t sub_10047CF0C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for InsertAllMentionIntent()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for InsertAllMentionIntent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InsertAllMentionIntent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InsertAllMentionIntent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for InsertAllMentionIntent()
{
  return &type metadata for InsertAllMentionIntent;
}

unint64_t sub_10047D0C4()
{
  unint64_t result = qword_10069CDA0;
  if (!qword_10069CDA0)
  {
    sub_10001DFF4((uint64_t *)&unk_10069E270);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069CDA0);
  }
  return result;
}

id sub_10047D120(void *a1)
{
  id v1 = a1;
  id v2 = [a1 managedObjectContext];
  if (v2)
  {
    uint64_t v3 = v2;
    if (![v1 isSharedViaICloud])
    {
      sub_100173F8C();
      swift_allocError();
      char v5 = 4;
      goto LABEL_7;
    }
    if ([v1 isPasswordProtectedAndLocked])
    {
      sub_100173F8C();
      swift_allocError();
      char v5 = 11;
LABEL_7:
      *long long v4 = v5;
LABEL_8:
      swift_willThrow();

      return v1;
    }
    if (![v1 isEditable])
    {
      sub_100173F8C();
      swift_allocError();
      char v5 = 12;
      goto LABEL_7;
    }
    id v7 = [v1 textStorage];
    if (!v7)
    {
      type metadata accessor for ICError(0);
      id v1 = (id)sub_1001B50CC((uint64_t)_swiftEmptyArrayStorage);
      sub_10047CDE0((unint64_t *)&qword_10069E4D0, type metadata accessor for ICError);
      _BridgedStoredNSError.init(_:userInfo:)();
      goto LABEL_8;
    }
    uint64_t v8 = v7;
    id v9 = [v7 length];
    id v10 = [objc_allocWithZone((Class)ICAttachmentInsertionController) initWithNote:v1];
    uint64_t v11 = self;
    NSString v12 = [v11 allKeyword];
    if (!v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    NSString v13 = [v11 allUserRecordName];
    if (!v13)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v14 = [self createMentionAttachmentIfApplicableWithMentionText:v12 userRecordName:v13 note:v1 parentAttachment:0];

    if (v14)
    {

      NSString v15 = String._bridgeToObjectiveC()();
      [v14 updateChangeCountWithReason:v15];
    }
    [v1 updateModificationDateAndChangeCountAndSaveImmediately];
    id v17 = 0;
    if ([v3 save:&v17])
    {
      id v16 = v17;
      id v1 = [v1 objectID];
    }
    else
    {
      id v1 = v17;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    type metadata accessor for ICError(0);
    sub_1001B50CC((uint64_t)_swiftEmptyArrayStorage);
    sub_10047CDE0((unint64_t *)&qword_10069E4D0, type metadata accessor for ICError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  return v1;
}

void *sub_10047D578(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, char *a7, double a8)
{
  long long v99 = a7;
  uint64_t v98 = a6;
  int v95 = a5;
  uint64_t v92 = a4;
  uint64_t v97 = a3;
  uint64_t v96 = a2;
  uint64_t v10 = _s14AudioRecordingV8FragmentVMa(0);
  uint64_t v90 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v107 = (uint64_t)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10002F214((uint64_t *)&unk_10069C990);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  int v89 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  char v93 = (char *)&v89 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v89 - v17;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v105 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  id v24 = (char *)&v89 - v23;
  id v25 = [a1 document];
  UUID.init()();
  id v26 = objc_allocWithZone((Class)ICTTAudioRecording);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64x2_t v28 = v26;
  uint64_t v29 = v19;
  id v102 = [v28 initWithDocument:v25 identity:isa];

  uint64_t v100 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v101 = v20 + 8;
  v100(v24, v19);
  uint64_t v91 = (uint64_t *)a1;
  id v30 = [a1 document];
  id v31 = [v30 replica];

  uint64_t v103 = v19;
  if (v31)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v32(v18, v24, v19);
    long long v94 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    v94(v18, 0, 1, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
    {
      uint64_t v33 = v105;
      v32(v105, v18, v29);
      uint64_t v34 = v106;
      uint64_t v35 = v104;
      uint64_t v36 = v98;
      goto LABEL_6;
    }
  }
  else
  {
    long long v94 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    v94(v18, 1, 1, v19);
  }
  uint64_t v33 = v105;
  uint64_t v34 = v106;
  uint64_t v36 = v98;
  UUID.init()();
  sub_10032FA48((uint64_t)v18);
  uint64_t v35 = v104;
LABEL_6:
  sub_10002F1B0(v34, (uint64_t)v109, &qword_1006A84C0);
  sub_10002F1B0((uint64_t)v109, (uint64_t)&v110, &qword_1006A84C0);
  uint64_t v37 = v111;
  if (v111)
  {
    uint64_t v38 = v110;
    uint64_t v39 = v112;
    unint64_t v40 = sub_100168A4C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v41 = sub_1004B7050(v40);
    uint64_t v88 = v39;
    uint64_t v42 = v99;
    id v43 = sub_1002C4608(v41, v96, v97, v95 & 0x101, v36, v99, a8, v38, v37, v88);
    if (v35)
    {
      uint64_t v45 = v102;
      uint64_t v44 = v103;
LABEL_19:
      swift_release();
      v100(v33, v44);

      swift_bridgeObjectRelease();
      return v45;
    }
    uint64_t v46 = v43;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v47 = v93;
    uint64_t v48 = v103;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v93, v33, v103);
    v94(v47, 0, 1, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v47, 1, v48) == 1)
    {
      Class v49 = 0;
    }
    else
    {
      uint64_t v50 = v47;
      Class v49 = UUID._bridgeToObjectiveC()().super.isa;
      v100(v50, v48);
    }
    uint64_t v51 = v102;
    id v52 = [objc_allocWithZone((Class)ICTTMergeableAttributedString) initWithReplicaID:v49];

    [v51 setTopLineSummary:v52];
    id v53 = [v51 topLineSummary];
    if (v53)
    {
      uint64_t v54 = v53;
      ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)((NSAttributedString)v46, 0);
    }
    uint64_t v34 = v106;
  }
  else
  {
    uint64_t v42 = v99;
  }
  sub_10002F1B0(v34 + 24, (uint64_t)v108, &qword_1006A84C0);
  sub_10002F1B0((uint64_t)v108, (uint64_t)&v113, &qword_1006A84C0);
  uint64_t v55 = v114;
  if (v114)
  {
    uint64_t v56 = v113;
    uint64_t v57 = v42;
    uint64_t v58 = v115;
    unint64_t v59 = sub_100168A4C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v60 = sub_1004B7050(v59);
    id v61 = sub_1002C4608(v60, v96, v97, v95 & 0x101, v36, v57, a8, v56, v55, v58);
    if (v35)
    {
      uint64_t v45 = v102;
      uint64_t v44 = v103;
      uint64_t v33 = v105;
      goto LABEL_19;
    }
    long long v63 = v61;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v64 = v89;
    uint64_t v33 = v105;
    uint64_t v65 = v103;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v89, v105, v103);
    v94(v64, 0, 1, v65);
    int v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v64, 1, v65);
    uint64_t v62 = v107;
    long long v67 = v102;
    if (v66 == 1)
    {
      Class v68 = 0;
    }
    else
    {
      long long v69 = v64;
      Class v68 = UUID._bridgeToObjectiveC()().super.isa;
      v100(v69, v65);
    }
    id v70 = [objc_allocWithZone((Class)ICTTMergeableAttributedString) initWithReplicaID:v68];

    [v67 setSummary:v70];
    id v71 = [v67 summary];
    if (v71)
    {
      long long v72 = v71;
      ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)((NSAttributedString)v63, 0);
    }
    uint64_t v34 = v106;
    if (*(unsigned char *)(v106 + 56)) {
      id v73 = 0;
    }
    else {
      id v73 = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v106 + 48)];
    }
    [v67 setSummaryVersion:v73];
  }
  else
  {
    uint64_t v62 = v107;
  }
  if (*(void *)(v34 + 64)) {
    long long v74 = *(char **)(v34 + 64);
  }
  else {
    long long v74 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v75 = *((void *)v74 + 2);
  if (v75)
  {
    uint64_t v104 = v35;
    unint64_t v76 = (*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
    long long v99 = v74;
    uint64_t v77 = (uint64_t)&v74[v76];
    uint64_t v78 = *(void *)(v90 + 72);
    swift_bridgeObjectRetain();
    unint64_t v79 = v91;
    uint64_t v80 = v92;
    uint64_t v81 = v102;
    do
    {
      sub_100480908(v77, v62, _s14AudioRecordingV8FragmentVMa);
      uint64_t v82 = sub_10047FD1C(v79, v80);
      id v83 = [v81 fragments];
      [v83 addObject:v82];

      uint64_t v62 = v107;
      sub_100480970(v107, _s14AudioRecordingV8FragmentVMa);
      v77 += v78;
      --v75;
    }
    while (v75);
    swift_bridgeObjectRelease();
    uint64_t v33 = v105;
    uint64_t v34 = v106;
    uint64_t v45 = v81;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v45 = v102;
  }
  int v84 = *(unsigned __int8 *)(v34 + 72);
  if (v84 == 2) {
    id v85 = 0;
  }
  else {
    id v85 = [objc_allocWithZone((Class)NSNumber) initWithBool:v84 & 1];
  }
  uint64_t v86 = v103;
  [v45 setCallRecording:v85];

  v100(v33, v86);
  return v45;
}

uint64_t sub_10047DF40(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10002F214(&qword_1006A8678);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015E154(a1, a1[3]);
  sub_100482BA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10002F1B0(v3, (uint64_t)v15, &qword_1006A84C0);
  sub_10002F1B0((uint64_t)v15, (uint64_t)v12, &qword_1006A84C0);
  char v11 = 0;
  sub_10024EC50();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    sub_10002F1B0(v3 + 24, (uint64_t)v14, &qword_1006A84C0);
    sub_10002F1B0((uint64_t)v14, (uint64_t)v12, &qword_1006A84C0);
    char v11 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10002F1B0(v3 + 64, (uint64_t)v13, &qword_1006A8680);
    sub_10002F1B0((uint64_t)v13, (uint64_t)v12, &qword_1006A8680);
    char v11 = 3;
    sub_10002F214(&qword_1006A8660);
    sub_100482BF8(&qword_1006A8688, &qword_1006A8690);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10047E208()
{
  uint64_t result = 0x53656E694C706F74;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7972616D6D7573;
      break;
    case 2:
      uint64_t result = 0x567972616D6D7573;
      break;
    case 3:
      uint64_t result = 0x746E656D67617266;
      break;
    case 4:
      uint64_t result = 0x65526C6C61437369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10047E2DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100482450(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10047E304(uint64_t a1)
{
  unint64_t v2 = sub_100482BA4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10047E340(uint64_t a1)
{
  unint64_t v2 = sub_100482BA4();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10047E37C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1004826E8(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 57) = *(_OWORD *)((char *)v7 + 9);
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10047E3C8(void *a1)
{
  return sub_10047DF40(a1);
}

void sub_10047E40C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = _s14AudioRecordingV17TranscriptSegmentVMa(0);
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v76 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  long long v74 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  char v11 = (char *)&v67 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)_s14AudioRecordingV8FragmentVMa(0);
  *a2 = 0;
  a2[1] = 0;
  uint64_t v17 = (uint64_t)a2 + v16[5];
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  uint64_t v21 = 1;
  unint64_t v73 = v17;
  uint64_t v78 = v20;
  uint64_t v79 = v18;
  uint64_t v77 = v19 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v20)(v17, 1, 1);
  uint64_t v67 = v16[6];
  *(uint64_t *)((char *)a2 + v67) = 0;
  uint64_t v22 = (char *)a2 + v16[7];
  *(void *)uint64_t v22 = 0;
  Class v68 = v22;
  v22[8] = 1;
  id v23 = [a1 identity];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v26;
  id v27 = [a1 createdDate];
  if (v27)
  {
    uint64x2_t v28 = v27;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = 0;
  }
  v78(v11, v21, 1, v79);
  sub_10021E98C((uint64_t)v11, v73);
  id v29 = [a1 transcript];
  id v30 = [v29 allObjects];

  type metadata accessor for ICTTTranscriptSegment();
  unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    long long v69 = a2;
    id v70 = a1;
    if (v32) {
      goto LABEL_5;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t v34 = _swiftEmptyArrayStorage;
    goto LABEL_28;
  }
  uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  long long v69 = a2;
  id v70 = a1;
  if (!v32) {
    goto LABEL_27;
  }
LABEL_5:
  uint64_t v80 = _swiftEmptyArrayStorage;
  sub_100169ECC(0, v32 & ~(v32 >> 63), 0);
  if (v32 < 0)
  {
    __break(1u);
    return;
  }
  uint64_t v33 = 0;
  uint64_t v34 = v80;
  unint64_t v71 = v31 & 0xC000000000000001;
  uint64_t v72 = v32;
  unint64_t v73 = v31;
  do
  {
    if (v71) {
      id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v35 = *(id *)(v31 + 8 * v33 + 32);
    }
    uint64_t v36 = v35;
    uint64_t v37 = v76;
    uint64_t v38 = (uint64_t)v6 + *(int *)(v76 + 20);
    v78((char *)v38, 1, 1, v79);
    uint64_t v39 = (char *)v6 + *(int *)(v37 + 24);
    *(void *)uint64_t v39 = 0;
    v39[8] = 1;
    unint64_t v40 = (uint64_t *)((char *)v6 + *(int *)(v37 + 28));
    *unint64_t v40 = 0;
    v40[1] = 0;
    id v41 = [v36 text];
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v45 = 0;
    }
    *uint64_t v6 = v43;
    v6[1] = v45;
    id v46 = [v36 timestamp];
    if (v46)
    {
      uint64_t v47 = v46;
      [v46 doubleValue];
      uint64_t v48 = (uint64_t)v74;
      Date.init(timeIntervalSince1970:)();
      v78((char *)v48, 0, 1, v79);
    }
    else
    {
      uint64_t v48 = (uint64_t)v74;
      v78(v74, 1, 1, v79);
    }
    sub_10021E98C(v48, v38);
    id v49 = [v36 duration];
    uint64_t v50 = v49;
    if (v49)
    {
      [v49 doubleValue];
      uint64_t v52 = v51;
    }
    else
    {
      uint64_t v52 = 0;
    }
    *(void *)uint64_t v39 = v52;
    v39[8] = v50 == 0;
    id v53 = [v36 speaker];
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v57 = v56;
    }
    else
    {

      uint64_t v55 = 0;
      uint64_t v57 = 0;
    }
    swift_bridgeObjectRelease();
    *unint64_t v40 = v55;
    v40[1] = v57;
    uint64_t v80 = v34;
    unint64_t v59 = v34[2];
    unint64_t v58 = v34[3];
    if (v59 >= v58 >> 1)
    {
      sub_100169ECC(v58 > 1, v59 + 1, 1);
      uint64_t v34 = v80;
    }
    ++v33;
    v34[2] = v59 + 1;
    sub_1004808A0((uint64_t)v6, (uint64_t)v34+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(void *)(v75 + 72) * v59, _s14AudioRecordingV17TranscriptSegmentVMa);
    unint64_t v31 = v73;
  }
  while (v72 != v33);
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v60 = v69;
  uint64_t v61 = v67;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v60 + v61) = (uint64_t)v34;
  id v62 = v70;
  id v63 = [v70 transcriptVersion];
  uint64_t v64 = v63;
  if (v63)
  {
    id v65 = [v63 integerValue];
  }
  else
  {
    id v65 = 0;
  }

  int v66 = v68;
  *Class v68 = v65;
  *((unsigned char *)v66 + 8) = v64 == 0;
}

uint64_t sub_10047EABC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10002F214(&qword_1006A8638);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10015E154(a1, a1[3]);
  sub_100482368();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = _s14AudioRecordingV8FragmentVMa(0);
    char v13 = 1;
    type metadata accessor for Date();
    sub_100482320(&qword_10069FAD0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    sub_10002F214(&qword_1006A8620);
    sub_1004823BC(&qword_1006A8640, &qword_1006A8648);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[14] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10047ED34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v3 - 8);
  uint64_t v37 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10002F214(&qword_1006A8610);
  uint64_t v36 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = _s14AudioRecordingV8FragmentVMa(0);
  uint64_t v8 = (int *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v10 = 0;
  v10[1] = 0;
  char v11 = (char *)v10 + v8[7];
  uint64_t v12 = type metadata accessor for Date();
  char v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  uint64_t v35 = (uint64_t)v11;
  v13(v11, 1, 1, v12);
  uint64_t v14 = v8[8];
  *(uint64_t *)((char *)v10 + v14) = 0;
  uint64_t v15 = (char *)v10 + v8[9];
  *(void *)uint64_t v15 = 0;
  v15[8] = 1;
  sub_10015E154(a1, a1[3]);
  sub_100482368();
  uint64_t v38 = v6;
  uint64_t v16 = v40;
  uint64_t v17 = (uint64_t)a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v16)
  {
    uint64_t v33 = (uint64_t *)v15;
    uint64_t v40 = v14;
    uint64_t v19 = (uint64_t)v37;
    uint64_t v18 = v38;
    uint64_t v21 = v35;
    uint64_t v20 = v36;
    char v45 = 0;
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v32 = a1;
    *uint64_t v10 = v22;
    v10[1] = v23;
    char v44 = 1;
    sub_100482320(&qword_10069FA08, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v19, v21);
    sub_10002F214(&qword_1006A8620);
    char v43 = 2;
    sub_1004823BC(&qword_1006A8628, &qword_1006A8630);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v25 = v40;
    uint64_t v26 = v41;
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)v10 + v25) = v26;
    char v42 = 3;
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v17 = (uint64_t)v32;
    uint64_t v28 = v27;
    LOBYTE(v26) = v29;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v39);
    unint64_t v31 = v33;
    uint64_t v30 = v34;
    *uint64_t v33 = v28;
    *((unsigned char *)v31 + 8) = v26 & 1;
    sub_100480908((uint64_t)v10, v30, _s14AudioRecordingV8FragmentVMa);
  }
  sub_100018FE8(v17);
  return sub_100480970((uint64_t)v10, _s14AudioRecordingV8FragmentVMa);
}

unint64_t sub_10047F178()
{
  unint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x4164657461657263;
      break;
    case 2:
      unint64_t result = 0x697263736E617274;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10047F214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004831C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10047F23C(uint64_t a1)
{
  unint64_t v2 = sub_100482368();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10047F278(uint64_t a1)
{
  unint64_t v2 = sub_100482368();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10047F2B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10047ED34(a1, a2);
}

uint64_t sub_10047F2CC(void *a1)
{
  return sub_10047EABC(a1);
}

void *sub_10047F2E4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  __chkstk_darwin(v11 - 8);
  type metadata accessor for ICTTTranscriptSegment();
  id v12 = a1;
  UUID.init()();
  char v13 = (void *)ICTTTranscriptSegment.__allocating_init(document:identity:)();
  if (*(void *)(v2 + 8)) {
    NSString v14 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v14 = 0;
  }
  [v13 setText:v14];

  uint64_t v15 = (int *)_s14AudioRecordingV17TranscriptSegmentVMa(0);
  sub_10002F034(v2 + v15[5], (uint64_t)v10, (uint64_t *)&unk_1006A3E20);
  id v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Date.timeIntervalSince1970.getter();
    id v16 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v17];
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  [v13 setTimestamp:v16];

  uint64_t v18 = v2 + v15[6];
  if (*(unsigned char *)(v18 + 8)) {
    id v19 = 0;
  }
  else {
    id v19 = [objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)v18];
  }
  [v13 setDuration:v19];

  if (*(void *)(v2 + v15[7] + 8)) {
    NSString v20 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v20 = 0;
  }
  [v13 setSpeaker:v20];

  return v13;
}

uint64_t sub_10047F5F4(void *a1)
{
  uint64_t v3 = sub_10002F214(&qword_1006A8608);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10015E154(a1, a1[3]);
  sub_1004822CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    _s14AudioRecordingV17TranscriptSegmentVMa(0);
    v8[14] = 1;
    type metadata accessor for Date();
    sub_100482320(&qword_10069FAD0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10047F814@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v3 - 8);
  unint64_t v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10002F214(&qword_1006A85F8);
  uint64_t v29 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = _s14AudioRecordingV17TranscriptSegmentVMa(0);
  uint64_t v8 = (int *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v10 = 0;
  v10[1] = 0;
  uint64_t v11 = (char *)v10 + v8[7];
  uint64_t v12 = type metadata accessor for Date();
  char v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  uint64_t v30 = (uint64_t)v11;
  v13(v11, 1, 1, v12);
  NSString v14 = (uint64_t *)((char *)v10 + v8[8]);
  *NSString v14 = 0;
  *((unsigned char *)v14 + 8) = 1;
  uint64_t v15 = (uint64_t *)((char *)v10 + v8[9]);
  *uint64_t v15 = 0;
  v15[1] = 0;
  sub_10015E154(a1, a1[3]);
  sub_1004822CC();
  uint64_t v32 = v6;
  id v16 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    sub_100018FE8((uint64_t)a1);
  }
  else
  {
    uint64_t v34 = v14;
    uint64_t v17 = v30;
    uint64_t v18 = (uint64_t)v31;
    char v38 = 0;
    *uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v10[1] = v19;
    char v37 = 1;
    sub_100482320(&qword_10069FA08, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v18, v17);
    char v36 = 2;
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v34;
    *uint64_t v34 = v20;
    *((unsigned char *)v21 + 8) = v22 & 1;
    char v35 = 3;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v33);
    swift_bridgeObjectRelease();
    *uint64_t v15 = v24;
    v15[1] = v26;
    sub_100480908((uint64_t)v10, v28, _s14AudioRecordingV17TranscriptSegmentVMa);
    sub_100018FE8(0);
  }
  return sub_100480970((uint64_t)v10, _s14AudioRecordingV17TranscriptSegmentVMa);
}

uint64_t sub_10047FBC0()
{
  uint64_t result = 1954047348;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D617473656D6974;
      break;
    case 2:
      uint64_t result = 0x6E6F697461727564;
      break;
    case 3:
      uint64_t result = 0x72656B61657073;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10047FC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100483394(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10047FC74(uint64_t a1)
{
  unint64_t v2 = sub_1004822CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10047FCB0(uint64_t a1)
{
  unint64_t v2 = sub_1004822CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10047FCEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10047F814(a1, a2);
}

uint64_t sub_10047FD04(void *a1)
{
  return sub_10047F5F4(a1);
}

void *sub_10047FD1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v50 = a1;
  uint64_t v5 = _s14AudioRecordingV17TranscriptSegmentVMa(0);
  uint64_t v49 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v14 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10002F214((uint64_t *)&unk_10069C990);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v47 - v19;
  uint64_t v21 = v3[1];
  uint64_t v51 = (char *)v47 - v19;
  if (v21 && *(void *)(a2 + 16))
  {
    uint64_t v22 = *v3;
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_1002B63D4(v22, v21);
    if (v24)
    {
      id v25 = [*(id *)(*(void *)(a2 + 56) + 8 * v23) identifier];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRetain();
        uint64_t v20 = v51;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = v51;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v20, 1, 1, v11);
LABEL_8:
  swift_bridgeObjectRelease();
  sub_10002F034((uint64_t)v20, (uint64_t)v18, (uint64_t *)&unk_10069C990);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v18, 1, v11) == 1)
  {
    UUID.init()();
    sub_10032FA48((uint64_t)v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v18, v11);
  }
  uint64_t v27 = v50;
  type metadata accessor for ICTTAudioRecording.Fragment();
  uint64_t v28 = v27;
  uint64_t v29 = (void *)ICTTAudioRecording.Fragment.__allocating_init(document:identity:)();
  uint64_t v30 = (int *)_s14AudioRecordingV8FragmentVMa(0);
  sub_10002F034((uint64_t)v3 + v30[5], (uint64_t)v10, (uint64_t *)&unk_1006A3E20);
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v32 = *(void *)(v31 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v10, 1, v31) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v31);
  }
  [v29 setCreatedDate:isa];

  uint64_t v34 = v30[6];
  uint64_t v50 = v3;
  if (*(uint64_t *)((char *)v3 + v34)) {
    char v35 = *(void **)((char *)v3 + v34);
  }
  else {
    char v35 = _swiftEmptyArrayStorage;
  }
  uint64_t v36 = v35[2];
  if (v36)
  {
    v47[1] = v35;
    uint64_t v48 = (uint64_t)v30;
    char v37 = v28;
    uint64_t v38 = (uint64_t)v35 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    uint64_t v39 = v29;
    uint64_t v40 = *(void *)(v49 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100480908(v38, (uint64_t)v7, _s14AudioRecordingV17TranscriptSegmentVMa);
      uint64_t v41 = sub_10047F2E4(v37);
      id v42 = [v39 transcript];
      [v42 addObject:v41];

      sub_100480970((uint64_t)v7, _s14AudioRecordingV17TranscriptSegmentVMa);
      v38 += v40;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
    char v43 = v50;
    uint64_t v20 = v51;
    uint64_t v29 = v39;
    uint64_t v30 = (int *)v48;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v43 = v50;
  }
  uint64_t v44 = (uint64_t)v43 + v30[7];
  if (*(unsigned char *)(v44 + 8)) {
    id v45 = 0;
  }
  else {
    id v45 = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)v44];
  }
  [v29 setTranscriptVersion:v45];

  sub_10032FA48((uint64_t)v20);
  return v29;
}

uint64_t sub_10048027C@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = _s14AudioRecordingV8FragmentVMa(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = [a1 fragments];
  uint64_t v13 = (uint64_t)[v12 count];

  if (v13 < 1)
  {

    uint64_t result = (uint64_t)sub_10024BEBC(a3, (void (*)(void, void, void, void, void, void))sub_10024BC98);
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    id v27 = 0;
    BOOL v28 = 0;
    uint64_t v29 = 0;
    unsigned __int8 v30 = 0;
    uint64_t v19 = 1;
LABEL_29:
    *(void *)a4 = v23;
    *(void *)(a4 + 8) = v19;
    *(void *)(a4 + 16) = v21;
    *(void *)(a4 + 24) = v24;
    *(void *)(a4 + 32) = v25;
    *(void *)(a4 + 40) = v26;
    *(void *)(a4 + 48) = v27;
    *(void *)(a4 + 56) = v28;
    *(void *)(a4 + 64) = v29;
    *(unsigned char *)(a4 + 72) = v30;
    return result;
  }
  id v14 = [a1 topLineSummary];
  uint64_t v15 = a1;
  id v58 = a2;
  if (v14)
  {
    id v16 = a2;
    sub_10024BEBC(a3, (void (*)(void, void, void, void, void, void))sub_10024BEFC);
    uint64_t v17 = v16;
    uint64_t v15 = a1;
    id v14 = sub_1002CB494(v14, v17, (uint64_t)a3);
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    sub_10024BEBC(a3, (void (*)(void, void, void, void, void, void))sub_10024BC98);
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  uint64_t v59 = (uint64_t)v14;
  sub_1002D42B4((uint64_t)v14, v19);
  id v31 = [v15 summary];
  if (v31)
  {
    id v31 = sub_1002CB494(v31, v58, (uint64_t)a3);
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    sub_10024BEBC(a3, (void (*)(void, void, void, void, void, void))sub_10024BC98);
  }
  else
  {
    sub_10024BEBC(a3, (void (*)(void, void, void, void, void, void))sub_10024BC98);
    uint64_t v33 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v55 = v33;
  sub_1002D42B4((uint64_t)v31, v33);
  id v36 = [v15 summaryVersion];
  BOOL v54 = v36 == 0;
  uint64_t v26 = v35;
  uint64_t v56 = (uint64_t)v31;
  if (v36)
  {
    char v37 = v36;
    id v53 = [v36 integerValue];
  }
  else
  {
    id v53 = 0;
  }
  uint64_t v23 = v59;
  id v57 = v15;
  id v38 = [v15 fragments];
  id v39 = [v38 allObjects];

  type metadata accessor for ICTTAudioRecording.Fragment();
  unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v40 >> 62))
  {
    uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v41) {
      goto LABEL_14;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRetain();
    id v46 = v57;
    id v47 = [v57 callRecording];
    if (v47)
    {
      uint64_t v48 = v47;
      unsigned __int8 v30 = [v47 BOOLValue];

      sub_1002D42B4(v23, v19);
      uint64_t v25 = v55;
      uint64_t v24 = v56;
      sub_1002D42B4(v56, v55);
      sub_10024BFB8(v24, v25);
      sub_10024BFB8(v23, v19);
      sub_10024BFB8(v23, v19);
      sub_10024BFB8(v24, v25);
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {

      sub_1002D42B4(v23, v19);
      uint64_t v25 = v55;
      uint64_t v24 = v56;
      sub_1002D42B4(v56, v55);
      sub_10024BFB8(v24, v25);
      sub_10024BFB8(v23, v19);
      sub_10024BFB8(v23, v19);
      sub_10024BFB8(v24, v25);
      uint64_t result = swift_bridgeObjectRelease();
      unsigned __int8 v30 = 2;
    }
    BOOL v28 = v54;
    id v27 = v53;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v41) {
    goto LABEL_24;
  }
LABEL_14:
  uint64_t v60 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100169C0C(0, v41 & ~(v41 >> 63), 0);
  if ((v41 & 0x8000000000000000) == 0)
  {
    uint64_t v50 = v26;
    uint64_t v51 = v19;
    uint64_t v52 = v21;
    uint64_t v42 = 0;
    uint64_t v29 = v60;
    do
    {
      if ((v40 & 0xC000000000000001) != 0) {
        id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v43 = *(id *)(v40 + 8 * v42 + 32);
      }
      sub_10047E40C(v43, v11);
      uint64_t v60 = v29;
      unint64_t v45 = v29[2];
      unint64_t v44 = v29[3];
      if (v45 >= v44 >> 1)
      {
        sub_100169C0C(v44 > 1, v45 + 1, 1);
        uint64_t v29 = v60;
      }
      ++v42;
      v29[2] = v45 + 1;
      sub_1004808A0((uint64_t)v11, (uint64_t)v29+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v45, _s14AudioRecordingV8FragmentVMa);
    }
    while (v41 != v42);
    swift_bridgeObjectRelease();
    uint64_t v23 = v59;
    uint64_t v19 = v51;
    uint64_t v21 = v52;
    uint64_t v26 = v50;
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t _s14AudioRecordingV8FragmentVMa(uint64_t a1)
{
  return sub_10002EFBC(a1, qword_1006A85B8);
}

uint64_t _s14AudioRecordingV17TranscriptSegmentVMa(uint64_t a1)
{
  return sub_10002EFBC(a1, qword_1006A8520);
}

uint64_t sub_1004808A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100480908(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100480970(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_1004809D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (uint64_t *)((char *)v4 + v17);
    uint64_t v21 = (uint64_t *)((char *)a2 + v17);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100480B84(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *sub_100480C58(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = (void *)((char *)a1 + v15);
  uint64_t v19 = (void *)((char *)a2 + v15);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100480DBC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100480FA4(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

void *sub_1004810EC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = a3[7];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = (void *)((char *)a1 + v17);
  uint64_t v21 = (void *)((char *)a2 + v17);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004812B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004812C4);
}

uint64_t sub_1004812C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004812DC);
}

void sub_1004812E0()
{
}

uint64_t *sub_1004812F4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1004814A0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *sub_100481570(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1004816CC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  return a1;
}

_OWORD *sub_1004818A4(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  int v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)int v13 = *(void *)v14;
  unsigned char v13[8] = v14[8];
  return a1;
}

void *sub_1004819EC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  return a1;
}

uint64_t sub_100481BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100481BC0);
}

uint64_t sub_100481BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_100481C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100481C98);
}

uint64_t sub_100481C9C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100481D48()
{
}

void sub_100481D5C()
{
  sub_100005808();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t _s14AudioRecordingVwxx(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t _s14AudioRecordingVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 32);
    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = *(void *)(a2 + 32);
  if (!v5) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_6:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s14AudioRecordingVwca(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10024D9D8(a1);
      uint64_t v5 = *((void *)a2 + 2);
      *(_OWORD *)a1 = *a2;
      *(void *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
  }
  uint64_t v7 = (_OWORD *)(a1 + 24);
  uint64_t v8 = (long long *)((char *)a2 + 24);
  uint64_t v9 = *((void *)a2 + 4);
  if (*(void *)(a1 + 32))
  {
    if (v9)
    {
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10024D9D8(a1 + 24);
      uint64_t v10 = *((void *)a2 + 5);
      _OWORD *v7 = *v8;
      *(void *)(a1 + 40) = v10;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *v8;
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    _OWORD *v7 = v11;
  }
  uint64_t v12 = *((void *)a2 + 6);
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  return a1;
}

__n128 _s14AudioRecordingVwtk(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s14AudioRecordingVwta(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10024D9D8(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
LABEL_6:
  if (!*(void *)(a1 + 32))
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  if (!v5)
  {
    sub_10024D9D8(a1 + 24);
    goto LABEL_10;
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
LABEL_11:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t _s14AudioRecordingVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s14AudioRecordingVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *_s14AudioRecordingVMa()
{
  return &_s14AudioRecordingVN;
}

unint64_t sub_1004822CC()
{
  unint64_t result = qword_1006A8600;
  if (!qword_1006A8600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8600);
  }
  return result;
}

uint64_t sub_100482320(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100482368()
{
  unint64_t result = qword_1006A8618;
  if (!qword_1006A8618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8618);
  }
  return result;
}

uint64_t sub_1004823BC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001DFF4(&qword_1006A8620);
    sub_100482320(a2, (void (*)(uint64_t))_s14AudioRecordingV17TranscriptSegmentVMa);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100482450(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x53656E694C706F74 && a2 == 0xEE007972616D6D75;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7972616D6D7573 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x567972616D6D7573 && a2 == 0xEE006E6F69737265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E656D67617266 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65526C6C61437369 && a2 == 0xEF676E6964726F63)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1004826E8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10002F214(&qword_1006A8650);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015E154(a1, a1[3]);
  sub_100482BA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100018FE8((uint64_t)a1);
    sub_10024BFB8(0, 0);
    sub_10024BFB8(0, 0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v33 = 0;
    sub_10024EF2C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v9 = v29;
    char v33 = 1;
    uint64_t v27 = v30;
    uint64_t v28 = v31;
    sub_1002D42B4(v29, v30);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v25 = a2;
    uint64_t v26 = v9;
    uint64_t v11 = v29;
    uint64_t v10 = v30;
    LOBYTE(v29) = 2;
    uint64_t v12 = v31;
    sub_1002D42B4(v11, v30);
    uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v24 = v12;
    int v32 = v13;
    sub_10002F214(&qword_1006A8660);
    char v33 = 3;
    sub_100482BF8(&qword_1006A8668, &qword_1006A8670);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v14 = v29;
    LOBYTE(v29) = 4;
    swift_bridgeObjectRetain();
    int v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v17 = v26;
    uint64_t v16 = v27;
    uint64_t v18 = v28;
    sub_1002D42B4(v26, v27);
    HIDWORD(v22) = v15;
    uint64_t v19 = v24;
    sub_1002D42B4(v11, v10);
    sub_10024BFB8(v11, v10);
    sub_10024BFB8(v17, v16);
    sub_100018FE8((uint64_t)a1);
    sub_10024BFB8(v17, v16);
    sub_10024BFB8(v11, v10);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = v25;
    uint64_t *v25 = v17;
    v21[1] = v16;
    v21[2] = v18;
    v21[3] = v11;
    v21[4] = v10;
    v21[5] = v19;
    v21[6] = v23;
    *((unsigned char *)v21 + 56) = v32 & 1;
    v21[8] = v14;
    *((unsigned char *)v21 + 72) = BYTE4(v22);
  }
  return result;
}

unint64_t sub_100482BA4()
{
  unint64_t result = qword_1006A8658;
  if (!qword_1006A8658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8658);
  }
  return result;
}

uint64_t sub_100482BF8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001DFF4(&qword_1006A8660);
    sub_100482320(a2, (void (*)(uint64_t))_s14AudioRecordingV8FragmentVMa);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s14AudioRecordingV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100482D58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14AudioRecordingV10CodingKeysOMa()
{
  return &_s14AudioRecordingV10CodingKeysON;
}

ValueMetadata *_s14AudioRecordingV8FragmentV10CodingKeysOMa()
{
  return &_s14AudioRecordingV8FragmentV10CodingKeysON;
}

unsigned char *_s14AudioRecordingV8FragmentV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100482E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14AudioRecordingV17TranscriptSegmentV10CodingKeysOMa()
{
  return &_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON;
}

unint64_t sub_100482EAC()
{
  unint64_t result = qword_1006A8698;
  if (!qword_1006A8698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8698);
  }
  return result;
}

unint64_t sub_100482F04()
{
  unint64_t result = qword_1006A86A0;
  if (!qword_1006A86A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A86A0);
  }
  return result;
}

unint64_t sub_100482F5C()
{
  unint64_t result = qword_1006A86A8;
  if (!qword_1006A86A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A86A8);
  }
  return result;
}

unint64_t sub_100482FB4()
{
  unint64_t result = qword_1006A86B0;
  if (!qword_1006A86B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A86B0);
  }
  return result;
}

unint64_t sub_10048300C()
{
  unint64_t result = qword_1006A86B8;
  if (!qword_1006A86B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A86B8);
  }
  return result;
}

unint64_t sub_100483064()
{
  unint64_t result = qword_1006A86C0;
  if (!qword_1006A86C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A86C0);
  }
  return result;
}

unint64_t sub_1004830BC()
{
  unint64_t result = qword_1006A86C8;
  if (!qword_1006A86C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A86C8);
  }
  return result;
}

unint64_t sub_100483114()
{
  unint64_t result = qword_1006A86D0;
  if (!qword_1006A86D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A86D0);
  }
  return result;
}

unint64_t sub_10048316C()
{
  unint64_t result = qword_1006A86D8;
  if (!qword_1006A86D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A86D8);
  }
  return result;
}

uint64_t sub_1004831C0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x697263736E617274 && a2 == 0xEA00000000007470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010055F660)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100483394(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x72656B61657073 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10048354C(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

double AddOrRemoveNoteLockIntent.init()@<D0>(uint64_t a1@<X8>)
{
  sub_100486B18((uint64_t *)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t AddOrRemoveNoteLockIntent.target.setter(uint64_t a1)
{
  uint64_t v2 = sub_10002F214(&qword_10069B1D0);
  __chkstk_darwin(v2 - 8);
  sub_1002AF970(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  IntentParameter.wrappedValue.setter();
  return sub_10002B754(a1, &qword_10069B1D0);
}

void *AddOrRemoveNoteLockIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static AddOrRemoveNoteLockIntent.persistentIdentifier;
}

unint64_t static AddOrRemoveNoteLockIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1004836A8()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static AddOrRemoveNoteLockIntent.title);
  sub_10003293C(v6, (uint64_t)static AddOrRemoveNoteLockIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t AddOrRemoveNoteLockIntent.title.unsafeMutableAddressor()
{
  return sub_1001B0DD8(&qword_10069B0B0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)static AddOrRemoveNoteLockIntent.title);
}

uint64_t static AddOrRemoveNoteLockIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B0E6C(&qword_10069B0B0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)static AddOrRemoveNoteLockIntent.title, a1);
}

void *AddOrRemoveNoteLockIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static AddOrRemoveNoteLockIntent.openAppWhenRun;
}

uint64_t static AddOrRemoveNoteLockIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

uint64_t static AddOrRemoveNoteLockIntent.parameterSummary.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v1 = sub_10002F214(&qword_1006A86E0);
  unint64_t v2 = sub_1001FD5C4();
  uint64_t v3 = sub_10001DFB0(&qword_1006A86E8, &qword_1006A86E0);

  return ParameterSummarySwitchCondition.init(_:_:)(KeyPath, sub_100483CB8, 0, v1, v2, v3);
}

uint64_t sub_100483CB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v1 = sub_10002F214(&qword_1006A8788);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v26 = v1;
  uint64_t v27 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v24 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v25 = (char *)v22 - v5;
  uint64_t v6 = sub_10002F214(&qword_1006A8790);
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v22 - v11;
  __chkstk_darwin(v10);
  uint64_t v23 = (char *)v22 - v13;
  char v33 = 0;
  uint64_t v30 = sub_10002F214(&qword_1006A8798);
  v22[0] = sub_1001FD5C4();
  unint64_t v29 = sub_1001FF31C();
  v22[1] = sub_10001DFB0(&qword_1006A87A0, &qword_1006A8798);
  ParameterSummaryCaseCondition.init(_:_:)();
  sub_10001DFB0(&qword_1006A87A8, &qword_1006A8790);
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)();
  uint64_t v14 = v31 + 8;
  int v15 = *(void (**)(char *, uint64_t))(v31 + 8);
  v15(v12, v6);
  uint64_t v31 = v14;
  char v32 = 1;
  ParameterSummaryCaseCondition.init(_:_:)();
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)();
  v15(v9, v6);
  uint64_t v16 = v24;
  ParameterSummaryDefaultCaseCondition.init(_:)();
  sub_10001DFB0(&qword_1006A87B0, &qword_1006A8788);
  uint64_t v17 = v25;
  uint64_t v18 = v26;
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v27 + 8);
  v19(v16, v18);
  uint64_t v20 = v23;
  static ParameterSummaryCaseBuilder.buildBlock<A, B, C>(_:_:_:)();
  v19(v17, v18);
  v15(v12, v6);
  return ((uint64_t (*)(char *, uint64_t))v15)(v20, v6);
}

uint64_t sub_100484150@<X0>(uint64_t a1@<X8>)
{
  return sub_100484194(0x6F74206B636F6C20, 0xE900000000000020, a1);
}

uint64_t sub_100484170@<X0>(uint64_t a1@<X8>)
{
  return sub_100484194(0x7266206B636F6C20, 0xEB00000000206D6FLL, a1);
}

uint64_t sub_100484194@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v18[0] = a2;
  v18[1] = a3;
  uint64_t v4 = sub_10002F214(&qword_1006A87B8);
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = sub_10002F214(&qword_1006A87C0);
  __chkstk_darwin(v5);
  uint64_t v6 = sub_10002F214(&qword_1006A8798);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v18 - v11;
  sub_1001FD5C4();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v13);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A87C8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v14._countAndFlagsBits = a1;
  v14._object = (void *)v18[0];
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  swift_getKeyPath();
  sub_10002F214((uint64_t *)&unk_1006A87D0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)();
  IntentParameterSummary.init(_:table:)();
  sub_10001DFB0(&qword_1006A87A0, &qword_1006A8798);
  static ParameterSummaryBuilder.buildExpression<A>(_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  static ParameterSummaryBuilder.buildBlock<A>(_:)();
  return ((uint64_t (*)(char *, uint64_t))v16)(v12, v6);
}

uint64_t sub_100484498@<X0>(uint64_t a1@<X8>)
{
  return sub_100484194(0x6E6F206B636F6C20, 0xE900000000000020, a1);
}

uint64_t AddOrRemoveNoteLockIntent.perform()(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  sub_10002F214((uint64_t *)&unk_10069C9B0);
  v2[20] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for LocalizedStringResource.BundleDescription();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  type metadata accessor for Locale();
  v2[24] = swift_task_alloc();
  type metadata accessor for String.LocalizationValue();
  v2[25] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  v2[26] = v4;
  v2[27] = *(void *)(v4 - 8);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NoteEntity(0);
  v2[30] = v5;
  v2[31] = *(void *)(v5 - 8);
  v2[32] = swift_task_alloc();
  sub_10002F214(&qword_10069B1D0);
  v2[33] = swift_task_alloc();
  return _swift_task_switch(sub_1004846F8, 0, 0);
}

uint64_t sub_1004846F8()
{
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = (void *)v1[4];
  *(void *)(v0 + 272) = v2;
  if (!v2)
  {
    type metadata accessor for ICError(0);
    *(void *)(v0 + 112) = 222;
    sub_1001B50CC((uint64_t)_swiftEmptyArrayStorage);
    sub_1001B58CC((unint64_t *)&qword_10069E4D0, type metadata accessor for ICError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 248);
  *(void *)(v0 + 280) = v1[2];
  id v6 = v2;
  AppDependency.wrappedValue.getter();
  uint64_t v7 = *(void **)(v0 + 104);
  *(void *)(v0 + 288) = [v7 modernManagedObjectContext];

  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 296) = v8;
  *(void *)(v8 + 16) = 0;
  *(void *)(v0 + 304) = v1[1];
  IntentParameter.wrappedValue.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
  {
    sub_10002B754(*(void *)(v0 + 264), &qword_10069B1D0);
    *(void *)(v0 + 336) = 0;
    uint64_t v9 = *(void *)(v0 + 296);
    swift_beginAccess();
    uint64_t v10 = *(void **)(v9 + 16);
    *(void *)(v0 + 344) = v10;
    if (v10)
    {
      uint64_t v11 = *(void **)(v0 + 152);
      id v12 = v10;
      unsigned int v13 = [v12 ic_isModernNoteType];
      *(void *)(v0 + 352) = *v11;
      if (v13)
      {
        Swift::String v14 = *(void **)(v0 + 288);
        Swift::String v15 = *(void **)(v0 + 272);
        *(void *)(v0 + 360) = *(void *)(*(void *)(v0 + 152) + 24);
        id v16 = v15;
        id v17 = v12;
        id v18 = v14;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        return _swift_task_switch(sub_100485280, 0, 0);
      }
      IntentParameter.wrappedValue.getter();
      int v29 = *(unsigned __int8 *)(v0 + 376);
      sub_100173F8C();
      swift_allocError();
      uint64_t v31 = *(void **)(v0 + 288);
      char v32 = *(void **)(v0 + 272);
      if (v29 == 1) {
        char v33 = 20;
      }
      else {
        char v33 = 17;
      }
      *uint64_t v30 = v33;
      swift_willThrow();

      swift_release();
    }
    else
    {
      id v39 = *(void **)(v0 + 288);
      uint64_t v22 = *(void *)(v0 + 224);
      uint64_t v23 = *(void *)(v0 + 232);
      uint64_t v36 = *(void *)(v0 + 216);
      uint64_t v37 = *(void *)(v0 + 208);
      id v38 = *(void **)(v0 + 272);
      uint64_t v24 = *(void *)(v0 + 184);
      uint64_t v25 = *(void *)(v0 + 168);
      uint64_t v26 = *(void *)(v0 + 176);
      uint64_t v27 = *(void *)(v0 + 160);
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v24, enum case for LocalizedStringResource.BundleDescription.main(_:), v25);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      IntentParameter.projectedValue.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v22, v23, v37);
      IntentDialog.init(_:)();
      uint64_t v28 = type metadata accessor for IntentDialog();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
      type metadata accessor for AppIntentError();
      sub_1001B58CC((unint64_t *)&unk_1006A2DB0, (void (*)(uint64_t))&type metadata accessor for AppIntentError);
      swift_allocError();
      IntentParameter.needsValueError(_:)();
      swift_release();
      sub_10002B754(v27, (uint64_t *)&unk_10069C9B0);
      swift_willThrow();

      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v23, v37);
      swift_release();
    }
    goto LABEL_17;
  }
  uint64_t v19 = *(void *)(v0 + 264);
  sub_10018991C(v19, *(void *)(v0 + 256));
  sub_10002B754(v19, &qword_10069B1D0);
  AppDependency.wrappedValue.getter();
  uint64_t v20 = *(void *)(v0 + 120);
  *(void *)(v0 + 312) = v20;
  unint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10069CE40 + dword_10069CE40);
  swift_retain();
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_100484D18;
  return v40((uint64_t)v40, v20, (uint64_t)sub_1001B5934, v8);
}

uint64_t sub_100484D18()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 312);
  sub_100189980(*(void *)(v2 + 256));
  swift_release();

  if (v0) {
    uint64_t v4 = sub_10048575C;
  }
  else {
    uint64_t v4 = sub_100484E88;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100484E88()
{
  *(void *)(v0 + 336) = *(void *)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 296);
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 16);
  *(void *)(v0 + 344) = v2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + 152);
    id v4 = v2;
    unsigned int v5 = [v4 ic_isModernNoteType];
    *(void *)(v0 + 352) = *v3;
    if (v5)
    {
      uint64_t v6 = *(void **)(v0 + 288);
      uint64_t v7 = *(void **)(v0 + 272);
      *(void *)(v0 + 360) = *(void *)(*(void *)(v0 + 152) + 24);
      id v8 = v7;
      id v9 = v4;
      id v10 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      return _swift_task_switch(sub_100485280, 0, 0);
    }
    IntentParameter.wrappedValue.getter();
    int v18 = *(unsigned __int8 *)(v0 + 376);
    sub_100173F8C();
    swift_allocError();
    uint64_t v20 = *(void **)(v0 + 288);
    uint64_t v21 = *(void **)(v0 + 272);
    if (v18 == 1) {
      char v22 = 20;
    }
    else {
      char v22 = 17;
    }
    *uint64_t v19 = v22;
    swift_willThrow();

    swift_release();
  }
  else
  {
    uint64_t v28 = *(void **)(v0 + 288);
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 216);
    uint64_t v26 = *(void *)(v0 + 208);
    uint64_t v27 = *(void **)(v0 + 272);
    uint64_t v13 = *(void *)(v0 + 184);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v16 = *(void *)(v0 + 160);
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v14);
    LocalizedStringResource.init(_:table:locale:bundle:comment:)();
    IntentParameter.projectedValue.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v11, v12, v26);
    IntentDialog.init(_:)();
    uint64_t v17 = type metadata accessor for IntentDialog();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 0, 1, v17);
    type metadata accessor for AppIntentError();
    sub_1001B58CC((unint64_t *)&unk_1006A2DB0, (void (*)(uint64_t))&type metadata accessor for AppIntentError);
    swift_allocError();
    IntentParameter.needsValueError(_:)();
    swift_release();
    sub_10002B754(v16, (uint64_t *)&unk_10069C9B0);
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v12, v26);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_100485280()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 2;
  uint64_t v4 = v1[42];
  uint64_t v5 = v1[43];
  uint64_t v6 = v1[36];
  uint64_t v7 = v1[34];
  uint64_t v8 = v1[19];
  v1[2] = v2;
  v1[7] = v1 + 16;
  v1[3] = sub_1004853C4;
  uint64_t v9 = swift_continuation_init();
  id v10 = (void *)swift_task_alloc();
  v10[2] = v6;
  v10[3] = v5;
  v10[4] = v8;
  v10[5] = v7;
  void v10[6] = v9;
  NSManagedObjectContext.performAndWait<A>(_:)();
  swift_task_dealloc();
  if (v4)
  {
    sub_10002F214(&qword_1006A3D90);
    swift_allocError();
    *uint64_t v11 = v4;
    swift_continuation_throwingResumeWithError();
  }
  return _swift_continuation_await(v3);
}

uint64_t sub_1004853C4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 368) = v2;
  if (v2)
  {
    swift_willThrow();
    uint64_t v3 = sub_100485538;
  }
  else
  {
    uint64_t v4 = *(void **)(v1 + 344);
    uint64_t v5 = *(void **)(v1 + 272);
    uint64_t v6 = *(void **)(v1 + 128);

    swift_release();
    swift_release();
    swift_release();
    swift_release();

    uint64_t v3 = sub_10048565C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100485538()
{
  uint64_t v1 = (void *)v0[43];
  uint64_t v2 = (void *)v0[36];
  uint64_t v3 = (void *)v0[34];
  swift_willThrow();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10048565C()
{
  uint64_t v1 = (void *)v0[43];
  uint64_t v2 = (void *)v0[36];
  uint64_t v3 = (void *)v0[34];
  static IntentResult.result<>()();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10048575C()
{
  uint64_t v1 = *(void **)(v0 + 272);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_100485838(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = [a1 ic_existingObjectWithID:a2];
  if (v7)
  {
    uint64_t v8 = v7;
    self;
    uint64_t v9 = swift_dynamicCastObjCClass();
    if (!v9)
    {

      return;
    }
    id v10 = (void *)v9;
    IntentParameter.wrappedValue.getter();
    if ((_BYTE)v18)
    {
      if (v18 == 1)
      {
        if ([v10 isPasswordProtected])
        {
          char v11 = 19;
LABEL_10:
          sub_100173F8C();
          swift_allocError();
          char *v12 = v11;
          swift_willThrow();

          return;
        }
        unsigned int v13 = 0;
      }
      else
      {
        unsigned int v13 = [v10 isPasswordProtected] ^ 1;
      }
    }
    else
    {
      if ([v10 isPasswordProtected])
      {
        char v11 = 18;
        goto LABEL_10;
      }
      unsigned int v13 = 1;
    }
    id v14 = [objc_allocWithZone((Class)ICNoteLockManager) initWithNote:v10];
    [v14 setWindow:a4];
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a5;
    *(void *)(v15 + 24) = v14;
    if (v13)
    {
      char v22 = sub_100487D68;
      uint64_t v23 = v15;
      int v18 = _NSConcreteStackBlock;
      uint64_t v19 = 1107296256;
      uint64_t v20 = sub_10048354C;
      uint64_t v21 = &unk_10063D6B8;
      uint64_t v16 = _Block_copy(&v18);
      id v17 = v14;
      swift_release();
      [v17 addLockWithCompletionHandler:v16];
    }
    else
    {
      char v22 = sub_100487D14;
      uint64_t v23 = v15;
      int v18 = _NSConcreteStackBlock;
      uint64_t v19 = 1107296256;
      uint64_t v20 = sub_10048354C;
      uint64_t v21 = &unk_10063D668;
      uint64_t v16 = _Block_copy(&v18);
      id v17 = v14;
      swift_release();
      [v17 removeLockWithCompletionHandler:v16];
    }

    _Block_release(v16);
  }
}

uint64_t sub_100485AFC()
{
  uint64_t v0 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v3 = *(void *)(v12[0] - 8);
  __chkstk_darwin(v12[0]);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = type metadata accessor for TypeDisplayRepresentation();
  sub_100032974(v10, static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation);
  sub_10003293C(v10, (uint64_t)static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, void))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v12[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v2, 1, 1, v8);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation.unsafeMutableAddressor()
{
  return sub_1001B0DD8(&qword_10069B0B8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation);
}

uint64_t static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B0E6C(&qword_10069B0B8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation, a1);
}

unint64_t sub_100485E44()
{
  uint64_t v0 = sub_10002F214((uint64_t *)&unk_10069D360);
  __chkstk_darwin(v0 - 8);
  uint64_t v41 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  char v33 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v4 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for LocalizedStringResource();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v42 = v9;
  uint64_t v43 = v10;
  __chkstk_darwin(v9);
  sub_10002F214(&qword_1006A8780);
  char v11 = (int *)(sub_10002F214(&qword_10069C4E0) - 8);
  uint64_t v12 = *(void *)(*(void *)v11 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(*(void *)v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v11 + 80);
  uint64_t v32 = 2 * v12;
  uint64_t v14 = swift_allocObject();
  uint64_t v34 = v14;
  *(_OWORD *)(v14 + 16) = xmmword_100529A00;
  unint64_t v40 = v14 + v13;
  unint64_t v28 = v14 + v13 + v11[14];
  *(unsigned char *)(v14 + v13) = 0;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  unsigned int v29 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  uint64_t v30 = v4 + 104;
  uint64_t v31 = v15;
  ((void (*)(char *))v15)(v6);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
  v43 += 56;
  id v38 = v16;
  id v17 = v33;
  v16(v33, 1, 1, v42);
  uint64_t v36 = type metadata accessor for DisplayRepresentation.Image();
  uint64_t v18 = *(void *)(v36 - 8);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v37 = v18 + 56;
  v35(v41, 1, 1, v36);
  DisplayRepresentation.init(title:subtitle:image:)();
  unint64_t v28 = v40 + v12 + v11[14];
  *(unsigned char *)(v40 + v12) = 1;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v19 = v6;
  uint64_t v20 = v6;
  uint64_t v21 = v29;
  char v22 = v31;
  v31(v20, v29, v39);
  uint64_t v23 = v19;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v24 = v17;
  v38(v17, 1, 1, v42);
  uint64_t v25 = v41;
  v35(v41, 1, 1, v36);
  DisplayRepresentation.init(title:subtitle:image:)();
  *(unsigned char *)(v40 + v32) = 2;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v22(v23, v21, v39);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v38(v24, 1, 1, v42);
  v35(v25, 1, 1, v36);
  DisplayRepresentation.init(title:subtitle:image:)();
  unint64_t result = sub_1001694AC(v34);
  static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations = result;
  return result;
}

uint64_t *AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_10069B0C0 != -1) {
    swift_once();
  }
  return &static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations;
}

uint64_t static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations.getter()
{
  if (qword_10069B0C0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations.setter(uint64_t a1)
{
  if (qword_10069B0C0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations.modify())()
{
  if (qword_10069B0C0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

_UNKNOWN **static AddOrRemoveNoteLockIntent.LockOperation.allCases.getter()
{
  return &off_10062D040;
}

uint64_t AddOrRemoveNoteLockIntent.LockOperation.rawValue.getter(char a1)
{
  if (!a1) {
    return 6579297;
  }
  if (a1 == 1) {
    return 0x65766F6D6572;
  }
  return 0x656C67676F74;
}

uint64_t sub_10048665C(char *a1, unsigned __int8 *a2)
{
  return sub_100274FDC(*a1, *a2);
}

unint64_t sub_100486668@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s11MobileNotes25AddOrRemoveNoteLockIntentV0G9OperationO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100486698(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = 0x65766F6D6572;
  if (v2 != 1) {
    uint64_t v4 = 0x656C67676F74;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 6579297;
  }
  if (!v5) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

Swift::Int sub_1004866E8()
{
  return Hasher._finalize()();
}

uint64_t sub_10048677C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004867FC()
{
  return Hasher._finalize()();
}

uint64_t sub_10048688C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B1AA8(&qword_10069B0B8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation, a1);
}

uint64_t sub_1004868C4(uint64_t a1)
{
  unint64_t v2 = sub_1001585E0();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100486910(uint64_t a1)
{
  unint64_t v2 = sub_1004876B4();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_10048695C(void *a1@<X8>)
{
  *a1 = &off_10062B5F0;
}

uint64_t sub_10048696C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B1AA8(&qword_10069B0B0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)static AddOrRemoveNoteLockIntent.title, a1);
}

uint64_t sub_1004869A4(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = sub_10002F214(&qword_1006A86E0);
  uint64_t v5 = sub_10001DFB0(&qword_1006A86E8, &qword_1006A86E0);

  return ParameterSummarySwitchCondition.init(_:_:)(KeyPath, sub_100483CB8, 0, v4, a2, v5);
}

uint64_t sub_100486A60(uint64_t a1)
{
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(void *)(v2 + 48) = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v5;
  void *v5 = v2;
  v5[1] = sub_1001C3F70;
  return AddOrRemoveNoteLockIntent.perform()(a1);
}

uint64_t sub_100486B18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v1 = sub_10002F214(&qword_10069B1D0);
  __chkstk_darwin(v1 - 8);
  uint64_t v59 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for InputConnectionBehavior();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v65 = v3;
  uint64_t v66 = v4;
  __chkstk_darwin(v3);
  uint64_t v64 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  id v58 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v63 = (char *)v45 - v9;
  uint64_t v10 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v10 - 8);
  id v62 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Locale();
  __chkstk_darwin(v16 - 8);
  uint64_t v17 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v17 - 8);
  uint64_t v61 = type metadata accessor for LocalizedStringResource();
  uint64_t v18 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  v45[1] = (char *)v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10002F214(&qword_10069B550);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v20 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  unsigned int v46 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v47 = v12;
  v21(v15, enum case for LocalizedStringResource.BundleDescription.main(_:), v12);
  uint64_t v48 = v21;
  uint64_t v49 = v13 + 104;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v21(v15, v20, v12);
  char v22 = v62;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56);
  uint64_t v52 = v18 + 56;
  id v53 = v23;
  v23(v22, 0, 1, v61);
  LOBYTE(v69) = 3;
  uint64_t v24 = type metadata accessor for IntentDialog();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v51 = v26;
  uint64_t v50 = v25 + 56;
  v26(v63, 1, 1, v24);
  uint64_t v27 = v58;
  v26(v58, 1, 1, v24);
  unsigned int v55 = enum case for InputConnectionBehavior.default(_:);
  unint64_t v28 = *(void (**)(void))(v66 + 104);
  v66 += 104;
  uint64_t v56 = (void (*)(char *, void, uint64_t))v28;
  v28(v64);
  sub_1001585E0();
  unsigned int v29 = v27;
  uint64_t v57 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
  uint64_t v54 = sub_10002F214(&qword_10069B210);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v30 = v46;
  uint64_t v31 = v47;
  uint64_t v32 = v48;
  v48(v15, v46, v47);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v32(v15, v30, v31);
  char v33 = v62;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v53(v33, 0, 1, v61);
  uint64_t v34 = type metadata accessor for NoteEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v59, 1, 1, v34);
  uint64_t v35 = v51;
  v51(v63, 1, 1, v24);
  v35(v29, 1, 1, v24);
  uint64_t v69 = sub_10023F448();
  uint64_t v70 = v36;
  uint64_t v71 = v37;
  char v72 = v38 & 1;
  uint64x2_t v39 = (uint64x2_t)vdupq_n_s64(v38);
  int16x8_t v40 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_100524D00), (int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_100524CF0));
  *(int8x8_t *)v40.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v40), (int8x8_t)0x1000100010001);
  unsigned __int32 v73 = vmovn_s16(v40).u32[0];
  v56(v64, v55, v65);
  sub_1001579C0();
  uint64_t v41 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)();
  sub_10002F214((uint64_t *)&unk_10069CE60);
  unint64_t v67 = 0xD000000000000021;
  unint64_t v68 = 0x8000000100549290;
  AnyHashable.init<A>(_:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t v42 = AppDependency.__allocating_init(key:manager:)();
  sub_10002F214((uint64_t *)&unk_10069B130);
  unint64_t v67 = 0xD000000000000024;
  unint64_t v68 = 0x8000000100549260;
  AnyHashable.init<A>(_:)();
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  unint64_t v44 = v60;
  *uint64_t v60 = v57;
  v44[1] = v41;
  v44[2] = v42;
  v44[3] = result;
  v44[4] = 0;
  return result;
}

uint64_t sub_1004873F4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10048742C()
{
  sub_100485838(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

unint64_t _s11MobileNotes25AddOrRemoveNoteLockIntentV0G9OperationO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10062CFD8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_1004874A0()
{
  unint64_t result = qword_1006A86F8;
  if (!qword_1006A86F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A86F8);
  }
  return result;
}

unint64_t sub_1004874F8()
{
  unint64_t result = qword_1006A8700;
  if (!qword_1006A8700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8700);
  }
  return result;
}

unint64_t sub_100487550()
{
  unint64_t result = qword_1006A8708;
  if (!qword_1006A8708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8708);
  }
  return result;
}

unint64_t sub_1004875A8()
{
  unint64_t result = qword_1006A8710;
  if (!qword_1006A8710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8710);
  }
  return result;
}

unint64_t sub_100487600()
{
  unint64_t result = qword_1006A8718;
  if (!qword_1006A8718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8718);
  }
  return result;
}

unint64_t sub_100487658()
{
  unint64_t result = qword_1006A8720;
  if (!qword_1006A8720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8720);
  }
  return result;
}

unint64_t sub_1004876B4()
{
  unint64_t result = qword_1006A8728;
  if (!qword_1006A8728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8728);
  }
  return result;
}

uint64_t sub_100487708()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10048775C()
{
  unint64_t result = qword_1006A8730;
  if (!qword_1006A8730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8730);
  }
  return result;
}

unint64_t sub_1004877B4()
{
  unint64_t result = qword_1006A8738;
  if (!qword_1006A8738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8738);
  }
  return result;
}

unint64_t sub_10048780C()
{
  unint64_t result = qword_1006A8740;
  if (!qword_1006A8740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8740);
  }
  return result;
}

uint64_t sub_100487860()
{
  return sub_10001DFB0(&qword_1006A8748, &qword_1006A8750);
}

unint64_t sub_1004878A0()
{
  unint64_t result = qword_1006A8758;
  if (!qword_1006A8758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8758);
  }
  return result;
}

unint64_t sub_1004878F8()
{
  unint64_t result = qword_1006A8760;
  if (!qword_1006A8760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8760);
  }
  return result;
}

uint64_t sub_10048794C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100487968()
{
  return swift_getOpaqueTypeConformance2();
}

void destroy for AddOrRemoveNoteLockIntent(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  Swift::String v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for AddOrRemoveNoteLockIntent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v6 = v5;
  return a1;
}

void *assignWithCopy for AddOrRemoveNoteLockIntent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for AddOrRemoveNoteLockIntent(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for AddOrRemoveNoteLockIntent()
{
  return &type metadata for AddOrRemoveNoteLockIntent;
}

unsigned char *storeEnumTagSinglePayload for AddOrRemoveNoteLockIntent.LockOperation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100487C2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AddOrRemoveNoteLockIntent.LockOperation()
{
  return &type metadata for AddOrRemoveNoteLockIntent.LockOperation;
}

uint64_t sub_100487C64()
{
  return sub_10001DFB0(&qword_1006A8770, &qword_1006A8778);
}

uint64_t sub_100487CA0()
{
  return sub_10001DFB0((unint64_t *)&qword_10069DE30, (uint64_t *)&unk_10069C980);
}

uint64_t sub_100487CDC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100487D14(int a1)
{
  return sub_1001B4F7C(a1, *(void *)(v1 + 16), *(id *)(v1 + 24));
}

uint64_t sub_100487D30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

char *sub_100487D6C()
{
  uint64_t v1 = OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView;
  Swift::String v2 = *(void **)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView);
  if (v2)
  {
    int v3 = *(char **)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void **)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder);
    id v6 = v5;
    uint64_t v7 = sub_100487F44();
    uint64_t v9 = v8;
    uint64_t v10 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v11 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v12 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v15 = objc_allocWithZone((Class)type metadata accessor for SmartFolderComposerCollectionView());
    uint64_t v16 = sub_100459B10(v5, v7, v9, (uint64_t)sub_10048BB64, v10, (uint64_t)sub_10048BB6C, v11, (uint64_t)sub_10048BB74, v12, (uint64_t)sub_10048BB7C, v13, (uint64_t)sub_10048BB84, v14);
    uint64_t v17 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v16;
    int v3 = v16;

    Swift::String v2 = 0;
  }
  id v18 = v2;
  return v3;
}

uint64_t sub_100487F44()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder);
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 title];
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = self;
    id v6 = [self mainBundle];
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v6 localizedStringForKey:v7 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v5 deduplicatingTitle:v9 account:*(void *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_account)];

    if (!v3) {
      return 0;
    }
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  return v4;
}

void sub_1004880C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    NSString v9 = (char *)Strong;
    if (a2)
    {
      v14[0] = a1;
      v14[1] = a2;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      sub_10017B588();
      a1 = StringProtocol.trimmingCharacters(in:)();
      a2 = v10;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_bridgeObjectRelease();
    }
    uint64_t v11 = (uint64_t *)&v9[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
    *uint64_t v11 = a1;
    v11[1] = a2;

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v12 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v12)
  {
    uint64_t v13 = v12;
    *((unsigned char *)v12 + OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges) = 1;
    [v12 setModalInPresentation:1];
    sub_1004889E0();
  }
}

void sub_100488270(char a1)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = Strong;
    *((unsigned char *)Strong + OBJC_IVAR___ICSmartFolderComposerViewController_allowsRecentlyDeleted) = a1 & 1;
    *((unsigned char *)Strong + OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges) = 1;
    [Strong setModalInPresentation:1];
    sub_1004889E0();
  }
}

void sub_1004882F8(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    uint64_t v4 = *(void **)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection);
    *(void *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection) = a1;
    id v5 = a1;

    sub_100488ADC();
  }
}

void sub_10048837C(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (unsigned char *)Strong;
    uint64_t v6 = (void *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_createTagText);
    *uint64_t v6 = a1;
    v6[1] = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 1;
    [v5 setModalInPresentation:1];
    sub_1004889E0();
  }
}

void sub_100488428(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    sub_1004884A0(a1, a2, 0, 0);
  }
}

void sub_1004884A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  id v5 = v4;
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v54[1] = a1;
    v54[2] = a2;
    swift_bridgeObjectRetain();
    static CharacterSet.whitespacesAndNewlines.getter();
    sub_10017B588();
    uint64_t v15 = StringProtocol.trimmingCharacters(in:)();
    unint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    swift_bridgeObjectRelease();
    uint64_t v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (v18)
    {
      id v19 = *(id *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_account];
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v21 = [self hashtagWithDisplayText:v20 account:v19 createIfNecessary:1];

      if (v21)
      {
        id v22 = [v21 managedObjectContext];
        [v22 ic_save];

        id v23 = [v21 standardizedContent];
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v27 = v26;

          unint64_t v28 = (void **)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers];
          swift_beginAccess();
          unsigned int v29 = *v28;
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *unint64_t v28 = v29;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unsigned int v29 = sub_1001A847C(0, v29[2] + 1, 1, v29);
            *unint64_t v28 = v29;
          }
          unint64_t v32 = v29[2];
          unint64_t v31 = v29[3];
          if (v32 >= v31 >> 1)
          {
            unsigned int v29 = sub_1001A847C((void *)(v31 > 1), v32 + 1, 1, v29);
            *unint64_t v28 = v29;
          }
          v29[2] = v32 + 1;
          char v33 = &v29[2 * v32];
          v33[4] = v25;
          v33[5] = v27;
          swift_endAccess();
          uint64_t v34 = OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges;
          v5[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 1;
          [v5 setModalInPresentation:1];
          sub_1004889E0();
          uint64_t v35 = (char *)sub_100487D6C();
          uint64_t v36 = *(void **)&v35[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
          if (v36)
          {
            uint64_t v37 = v36;
            uint64_t v38 = sub_1003E56E0();
            if (v38)
            {
              uint64x2_t v39 = (char *)v38;
              int16x8_t v40 = (char *)sub_10042419C();
              v54[0] = v27;
              uint64_t v41 = v25;
              uint64_t v42 = v40;
              [v40 setText:0];

              uint64_t v35 = v39;
              uint64_t v37 = v42;
              uint64_t v25 = v41;
              uint64_t v27 = v54[0];
            }
            uint64_t v43 = &selRef_setDateForLastTitleModification_;

            uint64_t v35 = v37;
          }
          else
          {
            uint64_t v43 = &selRef_setDateForLastTitleModification_;
          }

          unint64_t v44 = &v5[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText];
          *unint64_t v44 = 0;
          v44[1] = 0;
          swift_bridgeObjectRelease();
          v5[v34] = 1;
          [v5 v43[289]:1];
          sub_1004889E0();
          unint64_t v45 = (char *)sub_100487D6C();
          uint64_t v46 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v47 = (void *)swift_allocObject();
          void v47[2] = v46;
          v47[3] = v25;
          v47[4] = v27;
          v47[5] = a3;
          v47[6] = a4;
          uint64_t v48 = *(void **)&v45[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
          if (v48)
          {
            uint64_t v49 = swift_allocObject();
            swift_unknownObjectWeakInit();
            uint64_t v50 = (void *)swift_allocObject();
            v50[2] = v49;
            v50[3] = sub_10048BBDC;
            v50[4] = v47;
            swift_retain();
            sub_10002E71C((uint64_t)a3);
            swift_retain();
            swift_retain();
            id v51 = v48;
            sub_1003E4AB8();
            uint64_t v52 = sub_1003E56FC();
            if (v52)
            {
              id v53 = (void *)v52;
              sub_10028EAEC(1, (uint64_t)sub_100244EA8, (uint64_t)v50);
              swift_release();
              swift_release();
            }
            else
            {
              swift_release();
              swift_release();
            }
            swift_release();
            swift_release();
          }
          else
          {
            swift_retain();
            sub_10002E71C((uint64_t)a3);
            swift_release();
            swift_release();
          }
        }
        else
        {
        }
        return;
      }
    }
    else
    {
      uint64_t v12 = swift_bridgeObjectRelease();
    }
  }
  if (a3) {
    a3(v12);
  }
}

void sub_1004889E0()
{
  id v1 = sub_100243634(&OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___doneBarButtonItem, &selRef_doneActionWithSender_, 0);
  id v7 = v1;
  if ((*(unsigned char *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag) & 1) == 0
    && (unint64_t v2 = *(void *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle + 8)) != 0
    && ((v2 & 0x2000000000000000) != 0
      ? (uint64_t v3 = HIBYTE(v2) & 0xF)
      : (uint64_t v3 = *(void *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle) & 0xFFFFFFFFFFFFLL),
        v3))
  {
    if ([*(id *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection) isEmpty])
    {
      unint64_t v4 = *(void *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_createTagText + 8);
      if (v4)
      {
        if ((v4 & 0x2000000000000000) != 0) {
          uint64_t v5 = HIBYTE(v4) & 0xF;
        }
        else {
          uint64_t v5 = *(void *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_createTagText) & 0xFFFFFFFFFFFFLL;
        }
        BOOL v6 = v5 != 0;
      }
      else
      {
        BOOL v6 = 0;
      }
    }
    else
    {
      BOOL v6 = 1;
    }
    id v1 = v7;
  }
  else
  {
    BOOL v6 = 0;
  }
  [v1 setEnabled:v6];
}

void sub_100488ADC()
{
  v0[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 1;
  [v0 setModalInPresentation:1];
  sub_1004889E0();
  id v1 = (void *)sub_100487D6C();
  [v1 endEditing:1];

  BOOL v6 = (char *)sub_100487D6C();
  id v2 = [*(id *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection] selectedTagCount];
  uint64_t v3 = *(void **)&v6[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
  if (v3)
  {
    id v4 = v3;
    sub_1003E5958((uint64_t)v2);

    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = v6;
  }
}

void sub_100488BB4(void *a1)
{
  *(void *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView] = 0;
  *(void *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___cancelBarButtonItem] = 0;
  *(void *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___doneBarButtonItem] = 0;
  v1[OBJC_IVAR___ICSmartFolderComposerViewController_allowsRecentlyDeleted] = 0;
  id v2 = &v1[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText];
  *id v2 = 0;
  v2[1] = 0;
  *(void *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers] = _swiftEmptyArrayStorage;
  uint64_t v3 = &v1[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
  *uint64_t v3 = 0;
  v3[1] = 0;
  v1[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 0;
  v1[OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag] = 0;
  *(void *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_scrollViewKeyboardResizer] = 0;
  *(void *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *sub_100488CC8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView] = 0;
  *(void *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___cancelBarButtonItem] = 0;
  *(void *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___doneBarButtonItem] = 0;
  v5[OBJC_IVAR___ICSmartFolderComposerViewController_allowsRecentlyDeleted] = 0;
  uint64_t v11 = &v5[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText];
  *uint64_t v11 = 0;
  v11[1] = 0;
  *(void *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers] = _swiftEmptyArrayStorage;
  uint64_t v12 = &v5[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
  void *v12 = 0;
  v12[1] = 0;
  v5[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 0;
  v5[OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag] = 0;
  *(void *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_scrollViewKeyboardResizer] = 0;
  uint64_t v13 = OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder;
  *(void *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder] = 0;
  *(void *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_account] = a1;
  uint64_t v14 = *(void **)&v5[v13];
  *(void *)&v5[v13] = a2;
  uint64_t v15 = v5;
  id v16 = a1;
  id v17 = a2;

  uint64_t v18 = &v15[OBJC_IVAR___ICSmartFolderComposerViewController_completion];
  *(void *)uint64_t v18 = a3;
  *((void *)v18 + 1) = a4;
  id v19 = self;
  swift_retain();
  id v20 = [v19 sharedContext];
  if (v20)
  {
    id v21 = v20;
    id v22 = [v20 managedObjectContext];
  }
  else
  {
    id v22 = 0;
  }
  id v23 = [objc_allocWithZone((Class)ICTagSelection) initWithManagedObjectContext:v22];

  *(void *)&v15[OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection] = v23;
  v30.id receiver = v15;
  v30.Class super_class = ObjectType;
  uint64_t v24 = (char *)[v30 initWithNibName:0 bundle:0];
  uint64_t v25 = sub_100487F44();
  uint64_t v27 = v26;

  swift_release();
  unint64_t v28 = (uint64_t *)&v24[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
  *unint64_t v28 = v25;
  v28[1] = v27;
  swift_bridgeObjectRelease();
  return v24;
}

void sub_100488F78(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4, uint64_t a5)
{
  if (a4) {
    a4 = String._bridgeToObjectiveC()();
  }
  id v8 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, a1, a2);
}

void sub_100488FF4()
{
  id v1 = [v0 view];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = sub_100487D6C();
    [v2 addSubview:v3];

    id v4 = sub_100487D6C();
    [v4 ic_addAnchorsToFillSuperview];

    uint64_t v5 = sub_100487D6C();
    [v5 setDelegate:v0];

    uint64_t v6 = *(void *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder];
    id v7 = [self mainBundle];
    if (v6)
    {
      NSString v8 = String._bridgeToObjectiveC()();
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [v7 localizedStringForKey:v8 value:v9 table:0];

      id v7 = v8;
    }
    else
    {
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [v7 localizedStringForKey:v9 value:0 table:0];
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v0 setTitle:v11];

    id v12 = [v0 navigationItem];
    id v13 = sub_100243634(&OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___cancelBarButtonItem, &selRef_cancelActionWithSender_, 1);
    [v12 setLeftBarButtonItem:v13];

    id v14 = [v0 navigationItem];
    id v15 = sub_100243634(&OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___doneBarButtonItem, &selRef_doneActionWithSender_, 0);
    [v14 setRightBarButtonItem:v15];

    sub_1004889E0();
    id v16 = [v0 navigationController];
    if (v16)
    {
      id v17 = v16;
      id v18 = [v16 presentationController];

      if (v18)
      {
        [v18 setDelegate:v0];
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100489390(char a1)
{
  v11.id receiver = v1;
  v11.Class super_class = (Class)swift_getObjectType();
  [super viewWillAppear:a1 & 1];
  uint64_t v3 = *(void **)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_scrollViewKeyboardResizer];
  if (v3) {
    [v3 startAutoResizing];
  }
  id v4 = sub_100487D6C();
  [v4 layoutIfNeeded];

  sub_100489490();
  if (!*(void *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder])
  {
    uint64_t v5 = sub_100487D6C();
    uint64_t v6 = *(void **)&v5[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = sub_1003E4D4C();
      if (v8)
      {
        NSString v9 = (void *)v8;
        id v10 = sub_10042419C();

        [v10 becomeFirstResponder];
        uint64_t v5 = v7;
        id v7 = (char *)v10;
      }

      uint64_t v5 = v7;
    }
  }
}

void sub_100489490()
{
  id v1 = v0;
  uint64_t v2 = sub_10002F214((uint64_t *)&unk_1006A2670);
  __chkstk_darwin(v2 - 8);
  id v85 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ICQueryType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  objc_super v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = *(void **)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder];
  if (v12)
  {
    id v80 = v12;
    id v13 = [v80 smartFolderQueryObjC];
    if (v13)
    {
      id v14 = v13;
      uint64_t v88 = v4;
      dispatch thunk of ICQuery.type.getter();
      id v15 = [v80 managedObjectContext];
      id v16 = (void *)ICQueryType.tagSelection(managedObjectContext:)();

      id v17 = [v16 tagIdentifiers];
      uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        int v84 = v7;
        uint64_t v75 = v14;
        uint64_t v76 = v11;
        uint64_t v77 = v9;
        uint64_t v78 = v8;
        id v20 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        id v83 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        uint64_t v81 = (void (**)(char *, uint64_t))(v5 + 8);
        unsigned __int32 v73 = v91;
        uint64_t v89 = v19 - 1;
        id v21 = (uint64_t *)(v18 + 40);
        uint64_t v22 = (uint64_t)v85;
        uint64_t v74 = v18;
        uint64_t v82 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        while (1)
        {
          uint64_t v24 = (void *)*(v21 - 1);
          uint64_t v23 = *v21;
          swift_bridgeObjectRetain();
          uint64_t v25 = sub_100487D6C();
          uint64_t v26 = swift_allocObject();
          *(void *)(v26 + 16) = v1;
          uint64_t v27 = *(void **)&v25[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
          if (!v27)
          {
            unint64_t v32 = v1;
            swift_bridgeObjectRelease();

            swift_release();
            uint64_t v31 = v89;
            if (!v89) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          id v87 = v24;
          LOBYTE(aBlock[0]) = 2;
          unint64_t v28 = v1;
          unsigned int v29 = v27;
          dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)();
          uint64_t v30 = v88;
          if ((*v20)(v22, 1, v88) == 1)
          {
            sub_10002B754(v22, (uint64_t *)&unk_1006A2670);
            swift_bridgeObjectRelease();

            swift_release();
            uint64_t v31 = v89;
            if (!v89) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          char v33 = v84;
          (*v83)(v84, v22, v30);
          char v34 = v29[qword_1006A6308];
          uint64_t v35 = *(void **)&v29[qword_1006A62F8];
          id v86 = v29;
          if (v34)
          {
            Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
            id v37 = [v35 cellForItemAtIndexPath:isa];

            (*v81)(v33, v88);
            id v20 = v82;
            if (!v37) {
              goto LABEL_24;
            }
          }
          else
          {
            id v37 = (id)dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:cellForItemAt:)();
            (*v81)(v33, v88);
            id v20 = v82;
          }
          type metadata accessor for TagContainerCell();
          if (!swift_dynamicCastClass())
          {
            swift_bridgeObjectRelease();

            swift_release();
            goto LABEL_25;
          }
          uint64_t v38 = sub_10028DF24();
          uint64_t v39 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource;
          int16x8_t v40 = *(void **)&v38[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
          if (v40)
          {
            id v41 = [v40 indexer];
            if (v41)
            {
              uint64_t v42 = v41;
              self;
              id v79 = v42;
              uint64_t v43 = swift_dynamicCastObjCClass();
              if (v43)
              {
                unint64_t v44 = *(void **)&v38[v39];
                if (v44)
                {
                  unint64_t v45 = (void *)v43;
                  uint64_t v46 = v44;
                  id v47 = [v45 objectIDs];
                  sub_100031418(0, (unint64_t *)&qword_10069E810);
                  uint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v70 = *(void **)&v46[OBJC_IVAR____TtC11MobileNotes13TagDataSource_modernViewContext];
                  id v72 = v46;
                  uint64_t v48 = swift_allocObject();
                  swift_unknownObjectWeakInit();
                  uint64_t v49 = swift_allocObject();
                  uint64_t v50 = v71;
                  *(void *)(v49 + 16) = v48;
                  *(void *)(v49 + 24) = v50;
                  id v51 = v70;
                  id v52 = v87;
                  *(void *)(v49 + 32) = v70;
                  *(void *)(v49 + 40) = v52;
                  *(void *)(v49 + 48) = v23;
                  *(void *)(v49 + 56) = v46;
                  *(unsigned char *)(v49 + 64) = 0;
                  *(void *)(v49 + 72) = sub_10048BE44;
                  *(void *)(v49 + 80) = v26;
                  v91[2] = sub_100244874;
                  uint64_t v92 = v49;
                  aBlock[0] = _NSConcreteStackBlock;
                  aBlock[1] = 1107296256;
                  v91[0] = sub_100262E2C;
                  v91[1] = &unk_10063DA00;
                  id v53 = _Block_copy(aBlock);
                  uint64_t v71 = v92;
                  id v54 = v51;
                  swift_bridgeObjectRetain();
                  id v87 = v72;
                  id v55 = v54;
                  swift_retain();
                  swift_release();
                  [v55 performBlock:v53];
                  _Block_release(v53);
                  swift_bridgeObjectRelease();

                  swift_release();
                  goto LABEL_25;
                }
              }

              id v37 = v38;
              uint64_t v38 = (char *)v79;
            }
          }

LABEL_24:
          swift_bridgeObjectRelease();

          swift_release();
LABEL_25:
          uint64_t v22 = (uint64_t)v85;
          uint64_t v31 = v89;
          if (!v89)
          {
LABEL_27:
            swift_bridgeObjectRelease();
            uint64_t v9 = v77;
            uint64_t v8 = v78;
            objc_super v11 = v76;
            id v14 = v75;
            goto LABEL_32;
          }
LABEL_26:
          v21 += 2;
          uint64_t v89 = v31 - 1;
        }
      }
      swift_bridgeObjectRelease();
LABEL_32:
      id v57 = [v80 title];
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v60 = v59;

      uint64_t v61 = (uint64_t *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
      *uint64_t v61 = v58;
      v61[1] = v60;
      swift_bridgeObjectRelease();
      char v62 = ICQueryType.allowsDeleted.getter();
      id v63 = sub_100487D6C();
      uint64_t v64 = *(void **)&v63[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
      if (v64)
      {
        id v65 = v64;
        uint64_t v66 = sub_1003E5718();
        if (v66)
        {
          unint64_t v67 = (void *)v66;
          id v68 = sub_1004B039C();
          [v68 setOn:v62 & 1];

LABEL_38:
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          return;
        }

        id v63 = (char *)v80;
      }
      else
      {
        id v65 = v80;
      }

      goto LABEL_38;
    }
    id v56 = v80;
  }
}

void sub_100489D70(char a1)
{
  v9.id receiver = v1;
  v9.Class super_class = (Class)swift_getObjectType();
  [super viewDidAppear:a1 & 1];
  if (!*(void *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder])
  {
    uint64_t v3 = sub_100487D6C();
    uint64_t v4 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = sub_1003E4D4C();
      if (v6)
      {
        id v7 = (char *)v6;
        id v8 = sub_10042419C();
        [v8 selectAll:0];

        uint64_t v3 = v7;
        id v5 = v8;
      }

      uint64_t v3 = (char *)v5;
    }
  }
}

void sub_100489F10(char a1)
{
  if (a1)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v2 = (void *)Strong;
      sub_10048A094();
    }
    swift_beginAccess();
    uint64_t v3 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = [v3 navigationController];

      if (v5)
      {
        uint64_t v6 = swift_allocObject();
        swift_beginAccess();
        id v7 = (void *)swift_unknownObjectWeakLoadStrong();
        swift_unknownObjectWeakInit();

        aBlock[4] = sub_10048BAA8;
        aBlock[5] = v6;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_100262E2C;
        aBlock[3] = &unk_10063D8C0;
        id v8 = _Block_copy(aBlock);
        swift_release();
        [v5 dismissViewControllerAnimated:1 completion:v8];
        _Block_release(v8);
      }
    }
  }
}

id sub_10048A094()
{
  id v1 = &v0[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers];
  id result = (id)swift_beginAccess();
  if (*(void *)(*(void *)v1 + 16))
  {
    id result = [*(id *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_account] managedObjectContext];
    if (result)
    {
      uint64_t v3 = result;
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = v0;
      *(void *)(v4 + 24) = v3;
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = sub_10048BC30;
      *(void *)(v5 + 24) = v4;
      aBlock[4] = sub_100031D5C;
      aBlock[5] = v5;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_100031D30;
      aBlock[3] = &unk_10063D898;
      uint64_t v6 = _Block_copy(aBlock);
      id v7 = v0;
      id v8 = v3;
      swift_retain();
      swift_release();
      [v8 performBlockAndWait:v6];

      _Block_release(v6);
      LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      id result = (id)swift_release();
      if (v8) {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_10048A244()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    id v1 = (void *)result;
    uint64_t v2 = *(void (**)(void, void, void, void))(result
                                                               + OBJC_IVAR___ICSmartFolderComposerViewController_completion);
    swift_retain();

    v2(0, 0, 0, 0);
    return swift_release();
  }
  return result;
}

void sub_10048A360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v5;
  _OWORD v6[3] = a2;
  v6[4] = a3;
  v8[4] = sub_10048BDF8;
  v8[5] = v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100262E2C;
  v8[3] = &unk_10063D938;
  id v7 = _Block_copy(v8);
  sub_10002E71C(a2);
  swift_release();
  dispatchMainAfterDelay();
  _Block_release(v7);
}

void sub_10048A468(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    *(unsigned char *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag) = 0;
    sub_1004889E0();
  }
  if (a2) {
    a2();
  }
}

id sub_10048A4E8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR___ICSmartFolderComposerViewController_account);
  swift_beginAccess();
  id v4 = v3;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 deleteUnusedHashtagsWithStandardizedContent:isa];

  return [a2 ic_save];
}

uint64_t sub_10048A59C()
{
  id v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle + 8];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)v2;
  uint64_t v5 = *(void **)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder];
  if (v5)
  {
    swift_bridgeObjectRetain();
    id v6 = [v5 title];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    if (v7 == v4 && v3 == v9)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      swift_bridgeObjectRelease();
      return 1;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_13;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  id v12 = self;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_account];
  *(void *)&long long v31 = 0;
  LODWORD(v12) = [v12 isTitleValid:v13 account:v14 parentFolder:0 error:&v31];

  if (v12)
  {
    id v15 = (id)v31;
    return 1;
  }
  id v17 = (id)v31;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_10002F214(&qword_1006A3D90);
  sub_100031418(0, (unint64_t *)&unk_1006A2D70);
  swift_dynamicCast();
  id v18 = [v30 userInfo];
  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v19 + 16) && (unint64_t v22 = sub_1002B63D4(v20, v21), (v23 & 1) != 0))
  {
    sub_100032E28(*(void *)(v19 + 56) + 32 * v22, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v32 + 1))
  {
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_31;
    }
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v19 + 16) && (unint64_t v26 = sub_1002B63D4(v24, v25), (v27 & 1) != 0))
    {
      sub_100032E28(*(void *)(v19 + 56) + 32 * v26, (uint64_t)&v31);
    }
    else
    {
      long long v31 = 0u;
      long long v32 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v32 + 1))
    {
      if (swift_dynamicCast())
      {
        NSString v28 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v1 ic_showSingleButtonAlertWithTitle:v28 message:v29];

LABEL_32:
        goto LABEL_33;
      }
LABEL_31:
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();

  sub_10002B754((uint64_t)&v31, &qword_10069B4D0);
LABEL_33:
  swift_errorRelease();
  return 0;
}

void sub_10048A96C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    id v4 = [Strong navigationController];

    if (v4)
    {
      aBlock[4] = sub_10048BE04;
      aBlock[5] = a1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_100262E2C;
      aBlock[3] = &unk_10063D960;
      uint64_t v5 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v4 dismissViewControllerAnimated:1 completion:v5];
      _Block_release(v5);
    }
  }
}

void sub_10048AA80()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    id v2 = *(id *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection);

    id v3 = [v2 selectedTagCount];
  }
  else
  {
    id v3 = 0;
  }
  swift_beginAccess();
  uint64_t v4 = swift_unknownObjectWeakLoadStrong();
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    uint64_t v6 = OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection;
    if ([*(id *)(v4 + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection) isNonEmpty])
    {
      type metadata accessor for ICQuery();
      id v7 = *(id *)&v5[v6];
      uint64_t v8 = (void *)static ICQuery.makeQueryForNotesMatching(_:)();

      goto LABEL_9;
    }
  }
  uint64_t v8 = 0;
LABEL_9:
  swift_beginAccess();
  uint64_t v9 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v9)
  {
    uint64_t v10 = v9;
    char v11 = *(void **)&v9[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder];
    if (v11)
    {
      id v12 = v11;

      id v13 = [v12 smartFolderQueryObjC];
      if (!v8) {
        goto LABEL_12;
      }
      goto LABEL_16;
    }
  }
  id v13 = 0;
  if (!v8)
  {
LABEL_12:
    if (!v13)
    {
      uint64_t v14 = 0;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_16:
  if (!v13
    || (type metadata accessor for ICQuery(),
        id v15 = v13,
        id v16 = v8,
        char v17 = static NSObject.== infix(_:_:)(),
        v16,
        v15,
        uint64_t v14 = 0,
        (v17 & 1) == 0))
  {
LABEL_18:
    id v18 = v8;
    uint64_t v14 = v8;
  }
LABEL_19:
  swift_beginAccess();
  uint64_t v19 = swift_unknownObjectWeakLoadStrong();
  if (v19)
  {
    uint64_t v20 = (void *)v19;
    uint64_t v21 = *(void (**)(void *, id, uint64_t, uint64_t))(v19
                                                              + OBJC_IVAR___ICSmartFolderComposerViewController_completion);
    swift_retain();

    swift_beginAccess();
    uint64_t v22 = swift_unknownObjectWeakLoadStrong();
    if (v22)
    {
      char v23 = (void *)v22;
      uint64_t v25 = *(void *)(v22 + OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle);
      uint64_t v24 = *(void *)(v22 + OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle + 8);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v24 = 0;
    }
    v21(v14, v3, v25, v24);
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
  }
}

uint64_t sub_10048AD84(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a2)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = (void *)Strong;
      if (!*(void *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder))
      {
        id v7 = sub_100487D6C();
        uint64_t v8 = *(void **)&v7[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = sub_1003E4D4C();
          if (v10)
          {
            char v11 = (void *)v10;
            id v12 = sub_10042419C();

            [v12 becomeFirstResponder];
            uint64_t v6 = v7;
            id v7 = v9;
            uint64_t v9 = (char *)v12;
          }

          uint64_t v6 = v7;
          id v7 = v9;
        }

        uint64_t v6 = v7;
      }
    }
  }
  return a4(0);
}

void sub_10048AE90(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    uint64_t v9 = (char *)sub_100487D6C();

    uint64_t v10 = *(void **)&v9[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
    if (v10)
    {
      char v11 = v10;
      uint64_t v12 = sub_1003E56FC();
      if (v12)
      {
        id v13 = (char *)v12;
        uint64_t v14 = sub_10028DF24();
        sub_10038AD98(a2, a3, 1, 0, 0);

        uint64_t v9 = v13;
        char v11 = v14;
      }

      uint64_t v9 = v11;
    }
  }
  if (a4) {
    a4();
  }
}

uint64_t type metadata accessor for SmartFolderComposerViewController()
{
  return self;
}

uint64_t sub_10048B3BC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10048B3F4(uint64_t a1, void *a2, uint64_t a3)
{
  if (*((unsigned char *)a2 + OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges) == 1)
  {
    swift_retain();
    uint64_t v6 = sub_100487D6C();
    id v7 = *(void **)&v6[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
    uint64_t v44 = a1;
    id v45 = a2;
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = sub_1003E4D4C();
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        id v11 = sub_10042419C();

        LOBYTE(v10) = [v11 isFirstResponder];
        if ((v10 & 1) == 0)
        {
          char v16 = 0;
          goto LABEL_19;
        }
        uint64_t v6 = sub_100487D6C();
        uint64_t v12 = *(void **)&v6[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
        if (!v12)
        {
          char v16 = 1;
          goto LABEL_17;
        }
        id v8 = v12;
        uint64_t v13 = sub_1003E4D4C();
        if (v13)
        {
          uint64_t v14 = (void *)v13;
          id v15 = sub_10042419C();

          [v15 resignFirstResponder];
          char v16 = 1;
          uint64_t v6 = (char *)v8;
          id v8 = v15;
        }
        else
        {
          char v16 = 1;
        }
      }
      else
      {
        char v16 = 0;
      }

      uint64_t v6 = (char *)v8;
    }
    else
    {
      char v16 = 0;
    }
LABEL_17:

LABEL_19:
    id v24 = [self alertControllerWithTitle:0 message:0 preferredStyle:0];
    uint64_t v25 = self;
    id v26 = [v25 mainBundle];
    NSString v27 = String._bridgeToObjectiveC()();
    id v28 = [v26 localizedStringForKey:v27 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v30 = swift_allocObject();
    *(unsigned char *)(v30 + 16) = v16;
    *(void *)(v30 + 24) = v29;
    *(void *)(v30 + 32) = sub_10048BAA0;
    *(void *)(v30 + 40) = a3;
    swift_retain();
    swift_retain();
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v50 = sub_10048BAF0;
    uint64_t v51 = v30;
    aBlock = _NSConcreteStackBlock;
    uint64_t v47 = 1107296256;
    uint64_t v48 = sub_1002B6294;
    uint64_t v49 = &unk_10063D758;
    long long v32 = _Block_copy(&aBlock);
    swift_release();
    char v33 = self;
    id v34 = [v33 actionWithTitle:v31 style:1 handler:v32];
    _Block_release(v32);
    swift_release();

    [v24 addAction:v34];
    id v35 = [v25 mainBundle];
    NSString v36 = String._bridgeToObjectiveC()();
    id v37 = [v35 localizedStringForKey:v36 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = sub_10048BAA0;
    *(void *)(v38 + 24) = a3;
    swift_retain();
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v50 = sub_10048BB38;
    uint64_t v51 = v38;
    aBlock = _NSConcreteStackBlock;
    uint64_t v47 = 1107296256;
    uint64_t v48 = sub_1002B6294;
    uint64_t v49 = &unk_10063D7A8;
    int16x8_t v40 = _Block_copy(&aBlock);
    swift_release();
    id v41 = [v33 actionWithTitle:v39 style:2 handler:v40];
    _Block_release(v40);

    [v24 addAction:v41];
    id v42 = [v24 popoverPresentationController];
    if (v42)
    {
      uint64_t v43 = v42;
      [v42 setBarButtonItem:v44];
    }
    [v45 presentViewController:v24 animated:1 completion:v44];
    swift_release();

    return;
  }
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_retain();
  if (Strong)
  {
    sub_10048A094();
  }
  swift_beginAccess();
  id v18 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v18
    && (uint64_t v19 = v18,
        id v20 = [v18 navigationController],
        v19,
        v20))
  {
    uint64_t v21 = swift_allocObject();
    swift_beginAccess();
    uint64_t v22 = (void *)swift_unknownObjectWeakLoadStrong();
    swift_unknownObjectWeakInit();

    uint64_t v50 = sub_10048BAA8;
    uint64_t v51 = v21;
    aBlock = _NSConcreteStackBlock;
    uint64_t v47 = 1107296256;
    uint64_t v48 = sub_100262E2C;
    uint64_t v49 = &unk_10063D708;
    char v23 = _Block_copy(&aBlock);
    swift_release();
    [v20 dismissViewControllerAnimated:1 completion:v23];
    _Block_release(v23);
    swift_release();
  }
  else
  {
    swift_release();
  }
}

void sub_10048BAA0(char a1)
{
}

uint64_t sub_10048BAA8()
{
  return sub_10048A244();
}

uint64_t sub_10048BAB0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10048BAF0(uint64_t a1)
{
  return sub_10048AD84(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(void))(v1 + 32));
}

uint64_t sub_10048BB00()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10048BB38()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

void sub_10048BB64(uint64_t a1, uint64_t a2)
{
}

void sub_10048BB6C(char a1)
{
}

void sub_10048BB74(void *a1)
{
}

void sub_10048BB7C(uint64_t a1, uint64_t a2)
{
}

void sub_10048BB84(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10048BB8C()
{
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10048BBDC()
{
  sub_10048AE90(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void))(v0 + 40));
}

uint64_t sub_10048BBF0()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_10048BC30()
{
  return sub_10048A4E8(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10048BC38()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10048BC48()
{
  uint64_t result = sub_10048A59C();
  if (result)
  {
    uint64_t v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v3 = *(void *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText + 8];
    if (v3)
    {
      uint64_t v4 = *(void *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText];
      v0[OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag] = 1;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1004889E0();
      uint64_t v5 = (void *)swift_allocObject();
      _OWORD v5[2] = v0;
      v5[3] = sub_10048BD98;
      v5[4] = v2;
      uint64_t v6 = v0;
      swift_retain();
      sub_1004884A0(v4, v3, (void (*)(uint64_t))sub_10048BDE8, (uint64_t)v5);
      swift_release_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = swift_retain();
      sub_10048A96C(v7);
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void sub_10048BD98()
{
  sub_10048A96C(v0);
}

uint64_t sub_10048BDA0()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10048BDE8()
{
  sub_10048A360(v0[2], v0[3], v0[4]);
}

void sub_10048BDF8()
{
  sub_10048A468(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

void sub_10048BE04()
{
}

uint64_t sub_10048BE0C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10048BE44()
{
  uint64_t v1 = *(unsigned char **)(v0 + 16);
  v1[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 0;
  [v1 setModalInPresentation:0];
  sub_1004889E0();
}

uint64_t sub_10048BE88()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 72)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10048BEF0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10048BF28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_100488F78(a1, a2, a3, a4, *(void *)(v4 + 16));
}

void sub_10048BFF4(void *a1)
{
  v13.id receiver = v1;
  v13.Class super_class = (Class)type metadata accessor for MathNotesSceneDelegate();
  [super sceneWillEnterForeground:a1];
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = self;
    id v6 = a1;
    id v7 = [v5 sharedController];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v4;
      v12[4] = sub_10048C53C;
      v12[5] = v9;
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 1107296256;
      void v12[2] = sub_100262E2C;
      void v12[3] = &unk_10063DA78;
      uint64_t v10 = _Block_copy(v12);
      id v11 = v6;
      swift_release();
      [v8 startWindowSceneSessionWithType:2 windowScene:v4 successHandler:v10];

      _Block_release(v10);
      id v6 = v8;
    }
  }
}

void sub_10048C160(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  v5[4] = sub_10048C544;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_100262E2C;
  v5[3] = &unk_10063DAC8;
  uint64_t v3 = _Block_copy(v5);
  id v4 = a1;
  swift_release();
  performBlockOnMainThread();
  _Block_release(v3);
}

void sub_10048C22C(uint64_t a1)
{
  id v2 = [self sharedManager];
  [v2 windowSceneWillBegin:a1];
}

void sub_10048C304(void *a1)
{
  v10.id receiver = v1;
  v10.Class super_class = (Class)type metadata accessor for MathNotesSceneDelegate();
  [super sceneDidEnterBackground:a1];
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = self;
    id v6 = a1;
    id v7 = [v5 sharedManager];
    [v7 windowSceneDidEnd:v4];

    id v8 = [self sharedController];
    if (v8)
    {
      uint64_t v9 = v8;
      [v8 endWindowSceneSessionSynchronously:0 forSessionType:2 endReason:1 windowScene:v4];
    }
  }
}

id sub_10048C4AC()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for MathNotesSceneDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for MathNotesSceneDelegate()
{
  return self;
}

uint64_t sub_10048C504()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10048C53C()
{
  sub_10048C160(*(void **)(v0 + 16));
}

void sub_10048C544()
{
  sub_10048C22C(*(void *)(v0 + 16));
}

void sub_10048C54C(uint64_t a1)
{
  objc_super v2 = v1;
  uint64_t v14 = &type metadata for NotesFeature;
  unint64_t v15 = sub_100035D4C();
  v12[0] = "GreyParrot";
  v12[1] = 10;
  char v13 = 2;
  char v4 = isFeatureEnabled(_:)();
  sub_100018FE8((uint64_t)v12);
  if ((v4 & 1) == 0) {
    goto LABEL_4;
  }
  id v5 = [objc_allocWithZone((Class)ICWindowStateArchive) init];
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 setWindowIdentifier:v6];

  NSString v7 = String._bridgeToObjectiveC()();
  [v5 setToolPickerIdentifier:v7];

  UIScene.hostApplicationIdentifier.getter();
  if (v8)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 setHostApplicationIdentifier:v9];

    id v10 = [objc_allocWithZone((Class)ICWindow) initWithWindowScene:a1 behavior:1];
    id v11 = [objc_allocWithZone((Class)ICViewControllerManager) init];
    [v11 setupWithWindow:v10 stateRestoreArchive:v5 completion:0];
    [v10 makeKeyAndVisible];
    [v10 setViewControllerManager:v11];
    [v2 setIcWindow:v10];
  }
  else
  {
LABEL_4:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

int64_t sub_10048C7B8(uint64_t a1)
{
  uint64_t v33 = type metadata accessor for Participant();
  uint64_t v3 = *(void *)(v33 - 8);
  uint64_t v4 = __chkstk_darwin(v33);
  long long v32 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  NSString v31 = (char *)v27 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (int64_t)v8;
  }
  v27[0] = v1;
  id v34 = _swiftEmptyArrayStorage;
  sub_100169AAC(0, v7, 0);
  int64_t result = sub_1002AEEFC(a1);
  int64_t v10 = result;
  int v12 = v11;
  char v14 = v13 & 1;
  uint64_t v29 = a1;
  uint64_t v30 = a1 + 56;
  v27[2] = v3 + 32;
  v27[3] = v3 + 16;
  v27[1] = v3 + 8;
  uint64_t v28 = v3;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v30 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 36) != v12) {
      goto LABEL_16;
    }
    int64_t v15 = *(void *)(a1 + 48) + *(void *)(v3 + 72) * v10;
    char v16 = v31;
    uint64_t v17 = v33;
    (*(void (**)(char *, int64_t, uint64_t))(v3 + 16))(v31, v15, v33);
    id v18 = v32;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v32, v16, v17);
    uint64_t v19 = Participant.handle.getter();
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v18, v17);
    uint64_t v8 = v34;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100169AAC(0, v8[2] + 1, 1);
      uint64_t v8 = v34;
    }
    unint64_t v23 = v8[2];
    unint64_t v22 = v8[3];
    if (v23 >= v22 >> 1)
    {
      sub_100169AAC(v22 > 1, v23 + 1, 1);
      uint64_t v8 = v34;
    }
    v8[2] = v23 + 1;
    id v24 = &v8[2 * v23];
    v24[4] = v19;
    v24[5] = v21;
    a1 = v29;
    int64_t result = sub_10048F4F8(v10, v12, v14 & 1, v29);
    int64_t v10 = result;
    int v12 = v25;
    char v14 = v26 & 1;
    --v7;
    uint64_t v3 = v28;
    if (!v7)
    {
      sub_10002DA18(result, v25, v26 & 1);
      return (int64_t)v8;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10048CA80()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10048CAF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002F214(&qword_1006A0E10);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource_groupSession))
  {
    swift_retain();
    uint64_t v6 = GroupSession.activeParticipants.getter();
    sub_10048D4FC(v6);
    *(void *)(v0 + 24) = v6;
    swift_bridgeObjectRelease();
    GroupSession.$activeParticipants.getter();
    swift_allocObject();
    swift_weakInit();
    sub_10001DFB0(&qword_1006A0E18, &qword_1006A0E10);
    uint64_t v7 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + 32) = v7;
    return swift_release();
  }
  else
  {
    sub_10048D4FC((uint64_t)&_swiftEmptySetSingleton);
    *(void *)(v0 + 24) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 32) = 0;
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    v9[1] = _swiftEmptyArrayStorage;
    swift_retain();
    return static Published.subscript.setter();
  }
}

uint64_t sub_10048CD18(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = swift_bridgeObjectRetain();
    sub_10048D4FC(v4);
    *(void *)(v3 + 24) = v1;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10048CD94(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v17 = *(void *)(v5 - 8);
  uint64_t v18 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Notification();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  sub_100031418(0, (unint64_t *)&qword_10069D2D0);
  int v11 = (void *)static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v13 + ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = v16;
  aBlock[4] = sub_1004900B0;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100262E2C;
  aBlock[3] = &unk_10063DB18;
  char v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10048FFC4((unint64_t *)&qword_1006A26A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002F214((uint64_t *)&unk_1006A4830);
  sub_10001DFB0((unint64_t *)&qword_1006A26B0, (uint64_t *)&unk_1006A4830);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v7, v18);
}

uint64_t sub_10048D150(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = Notification.userInfo.getter();
  if (!v3)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    return sub_10002B754((uint64_t)&v22, &qword_10069B4D0);
  }
  uint64_t v4 = v3;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_100033028((uint64_t)v21), (v6 & 1) != 0))
  {
    sub_100032E28(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v22);
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100033134((uint64_t)v21);
  if (!*((void *)&v23 + 1)) {
    return sub_10002B754((uint64_t)&v22, &qword_10069B4D0);
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v9 = v21[0];
    uint64_t v8 = v21[1];
    id v10 = [*(id *)(a2 + 16) identifier];
    if (!v10) {
      return swift_bridgeObjectRelease();
    }
    int v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    if (v9 == v12 && v8 == v14)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v15)
    {
LABEL_17:
      uint64_t v16 = Notification.userInfo.getter();
      if (v16)
      {
        uint64_t v17 = v16;
        *(void *)&long long v22 = 0x70756F7247434352;
        *((void *)&v22 + 1) = 0xEF6E6F6973736553;
        AnyHashable.init<A>(_:)();
        if (*(void *)(v17 + 16) && (unint64_t v18 = sub_100033028((uint64_t)v21), (v19 & 1) != 0))
        {
          sub_100032E28(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v22);
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
        }
        swift_bridgeObjectRelease();
        sub_100033134((uint64_t)v21);
        if (*((void *)&v23 + 1))
        {
          sub_10002F214(&qword_1006A0DE0);
          if (swift_dynamicCast()) {
            uint64_t v20 = v21[0];
          }
          else {
            uint64_t v20 = 0;
          }
          goto LABEL_28;
        }
      }
      else
      {
        long long v22 = 0u;
        long long v23 = 0u;
      }
      sub_10002B754((uint64_t)&v22, &qword_10069B4D0);
      uint64_t v20 = 0;
LABEL_28:
      *(void *)(a2 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource_groupSession) = v20;
      swift_retain();
      swift_release();
      sub_10048CAF4();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10048D4FC(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (*(void *)(*(void *)(v1 + 24) + 16) <= *(void *)(a1 + 16) >> 3)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = swift_bridgeObjectRetain();
    sub_10048DCF8(v6);
    swift_bridgeObjectRelease();
    uint64_t v5 = a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = (uint64_t)sub_10048E55C(v4, a1);
    swift_bridgeObjectRelease();
  }
  swift_retain();
  unint64_t v7 = sub_10048F5DC(v5, v2);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1002E0F2C(0, 0, v7);
  uint64_t v8 = *(void *)(v2 + 24);
  if (*(void *)(a1 + 16) <= *(void *)(v8 + 16) >> 3)
  {
    char v15 = *(void **)(v2 + 24);
    swift_bridgeObjectRetain();
    sub_10048DCF8(a1);
    uint64_t v9 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_10048E55C(a1, v8);
  }
  int64_t v10 = sub_10048C7B8((uint64_t)v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_10026A0F8(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_10048FB70((uint64_t *)&v16, v11);
  uint64_t result = swift_bridgeObjectRelease();
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v14 >= v12) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14 >= v12)
    {
LABEL_9:
      sub_1002E4364(v12, v14);
      swift_bridgeObjectRelease();
      sub_10002F214(&qword_1006A0090);
      sub_10001DFB0(&qword_1006A8BA8, &qword_1006A0090);
      sub_10002C8EC((unint64_t *)&qword_1006A0DE8, &qword_1006A4840);
      Sequence<>.uniqued()();
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      return static Published.subscript.setter();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10048D7E8()
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource__cleanedUpParticipants;
  uint64_t v2 = sub_10002F214(&qword_1006A47C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10048D8B4()
{
  return type metadata accessor for CollaborationParticipantDataSource();
}

uint64_t sub_10048D8BC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CollaborationParticipantDataSource();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10048D8FC@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10048D980()
{
  return static Published.subscript.setter();
}

void sub_10048DA00(uint64_t a1)
{
  if ((*(void *)v1 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      return;
    }
LABEL_5:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      sub_100031418(0, (unint64_t *)&qword_1006A49F0);
      sub_10002C8EC(&qword_1006A0480, (unint64_t *)&qword_1006A49F0);
      Set.Iterator.init(_cocoa:)();
      a1 = v20;
      uint64_t v18 = v21;
      uint64_t v3 = v22;
      uint64_t v4 = v23;
      unint64_t v5 = v24;
    }
    else
    {
      uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v18 = a1 + 56;
      uint64_t v3 = ~v6;
      uint64_t v7 = -v6;
      if (v7 < 64) {
        uint64_t v8 = ~(-1 << v7);
      }
      else {
        uint64_t v8 = -1;
      }
      unint64_t v5 = v8 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
    }
    int64_t v9 = (unint64_t)(v3 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_14;
    }
    while (1)
    {
      if (v5)
      {
        uint64_t v10 = (v5 - 1) & v5;
        unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
        uint64_t v12 = v4;
      }
      else
      {
        int64_t v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          return;
        }
        if (v14 >= v9) {
          goto LABEL_36;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v14);
        uint64_t v12 = v4 + 1;
        if (!v15)
        {
          uint64_t v12 = v4 + 2;
          if (v4 + 2 >= v9) {
            goto LABEL_36;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v4 + 3;
            if (v4 + 3 >= v9) {
              goto LABEL_36;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v12 = v4 + 4;
              if (v4 + 4 >= v9) {
                goto LABEL_36;
              }
              unint64_t v15 = *(void *)(v18 + 8 * v12);
              if (!v15)
              {
                uint64_t v12 = v4 + 5;
                if (v4 + 5 >= v9) {
                  goto LABEL_36;
                }
                unint64_t v15 = *(void *)(v18 + 8 * v12);
                if (!v15)
                {
                  uint64_t v16 = v4 + 6;
                  while (v9 != v16)
                  {
                    unint64_t v15 = *(void *)(v18 + 8 * v16++);
                    if (v15)
                    {
                      uint64_t v12 = v16 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_36:
                  sub_10017B518();
                  return;
                }
              }
            }
          }
        }
LABEL_32:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
      }
      id v13 = *(id *)(*(void *)(a1 + 48) + 8 * v11);
      if (!v13) {
        goto LABEL_36;
      }
      while (1)
      {
        uint64_t v17 = (void *)sub_10039BEE0(v13);

        uint64_t v4 = v12;
        unint64_t v5 = v10;
        if ((a1 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_14:
        if (__CocoaSet.Iterator.next()())
        {
          sub_100031418(0, (unint64_t *)&qword_1006A49F0);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v13 = v19;
          swift_unknownObjectRelease();
          uint64_t v12 = v4;
          uint64_t v10 = v5;
          if (v19) {
            continue;
          }
        }
        goto LABEL_36;
      }
    }
  }
  if (*(void *)(*(void *)v1 + 16)) {
    goto LABEL_5;
  }
}

uint64_t sub_10048DCF8(uint64_t a1)
{
  uint64_t v3 = sub_10002F214(&qword_1006A0E08);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Participant();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  id v13 = (char *)&v25 - v12;
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v28 = v7 + 16;
  int64_t v26 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v27 = v7 + 32;
  uint64_t v18 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_6;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v25 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v25 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v26) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v25 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v13, *(void *)(v18 + 48) + *(void *)(v7 + 72) * v21, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v13, v6);
    sub_10039C0E8((uint64_t)v10, (uint64_t)v5);
    sub_10002B754((uint64_t)v5, &qword_1006A0E08);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10048E004(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_100031418(0, (unint64_t *)&qword_1006A49F0);
    sub_10002C8EC(&qword_1006A0480, (unint64_t *)&qword_1006A49F0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v46;
    uint64_t v4 = v47;
    uint64_t v6 = v48;
    int64_t v5 = v49;
    unint64_t v7 = v50;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v4 = a1 + 56;
    uint64_t v6 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v41 = v3;
  uint64_t v42 = v4;
  uint64_t v43 = v6;
  int64_t v44 = v5;
  unint64_t v45 = v7;
  uint64_t v11 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        uint64_t v12 = (v7 - 1) & v7;
        unint64_t v13 = __clz(__rbit64(v7)) | (v5 << 6);
LABEL_14:
        uint64_t v14 = *(void **)(*(void *)(v3 + 48) + 8 * v13);
        id v15 = v14;
        goto LABEL_15;
      }
      int64_t v25 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        __break(1u);
      }
      int64_t v26 = (unint64_t)(v6 + 64) >> 6;
      if (v25 >= v26)
      {
        uint64_t v14 = 0;
        uint64_t v12 = 0;
        goto LABEL_15;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v25);
      if (v27)
      {
LABEL_28:
        uint64_t v12 = (v27 - 1) & v27;
        unint64_t v13 = __clz(__rbit64(v27)) + (v25 << 6);
        int64_t v5 = v25;
        goto LABEL_14;
      }
      int64_t v28 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_44;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v28);
      if (v27)
      {
LABEL_32:
        int64_t v25 = v28;
        goto LABEL_28;
      }
      if (v5 + 3 < v26)
      {
        unint64_t v27 = *(void *)(v42 + 8 * (v5 + 3));
        if (v27)
        {
          int64_t v25 = v5 + 3;
          goto LABEL_28;
        }
        int64_t v28 = v5 + 4;
        if (v5 + 4 >= v26)
        {
          uint64_t v14 = 0;
          uint64_t v12 = 0;
          v5 += 3;
LABEL_15:
          int64_t v44 = v5;
          unint64_t v45 = v12;
          if (!v14) {
            goto LABEL_53;
          }
          goto LABEL_19;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v28);
        if (v27) {
          goto LABEL_32;
        }
        int64_t v25 = v5 + 5;
        if (v5 + 5 < v26)
        {
          unint64_t v27 = *(void *)(v42 + 8 * v25);
          if (v27) {
            goto LABEL_28;
          }
          int64_t v25 = v26 - 1;
          int64_t v29 = v5 + 6;
          while (v26 != v29)
          {
            unint64_t v27 = *(void *)(v42 + 8 * v29++);
            if (v27)
            {
              int64_t v25 = v29 - 1;
              goto LABEL_28;
            }
          }
LABEL_44:
          uint64_t v14 = 0;
          uint64_t v12 = 0;
          int64_t v5 = v25;
          goto LABEL_15;
        }
      }
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      int64_t v5 = v28;
      goto LABEL_15;
    }
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16
      || (uint64_t v39 = v16,
          sub_100031418(0, (unint64_t *)&qword_1006A49F0),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          uint64_t v14 = v40,
          swift_unknownObjectRelease(),
          !v40))
    {
LABEL_53:
      sub_10017B518();
      return (void *)v2;
    }
LABEL_19:
    Swift::Int v17 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v18 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v19 = v17 & ~v18;
    if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_10;
    }
    sub_100031418(0, (unint64_t *)&qword_1006A49F0);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
    char v21 = static NSObject.== infix(_:_:)();

    if (v21) {
      break;
    }
    uint64_t v22 = ~v18;
    while (1)
    {
      unint64_t v19 = (v19 + 1) & v22;
      if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        break;
      }
      id v23 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
      char v24 = static NSObject.== infix(_:_:)();

      if (v24) {
        goto LABEL_47;
      }
    }
LABEL_10:

    uint64_t v3 = v41;
    uint64_t v6 = v43;
    int64_t v5 = v44;
    unint64_t v7 = v45;
  }
LABEL_47:

  char v31 = *(unsigned char *)(v2 + 32);
  unint64_t v32 = (unint64_t)((1 << v31) + 63) >> 6;
  size_t v33 = 8 * v32;
  if ((v31 & 0x3Fu) < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v33);
    sub_10048EC20((unint64_t *)((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0)), v32, v2, v19, &v41);
    uint64_t v35 = v34;
    swift_release();
    sub_10017B518();
  }
  else
  {
    NSString v36 = (void *)swift_slowAlloc();
    memcpy(v36, (const void *)(v2 + 56), v33);
    sub_10048EC20((unint64_t *)v36, v32, v2, v19, &v41);
    uint64_t v35 = v37;
    swift_release();
    sub_10017B518();
    swift_slowDealloc();
  }
  return (void *)v35;
}

void *sub_10048E55C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002F214(&qword_1006A0E08);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  id v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  id v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  unint64_t v64 = v18;
  id v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v57 = v8 + 16;
  uint64_t v58 = (char *)(a2 + 56);
  unint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  uint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  int64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    unint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      sub_10017B518();
      sub_10002B754(v26, &qword_1006A0E08);
      return (void *)v52;
    }
    (*v51)(v59, v26, v7);
    uint64_t v31 = v52;
    sub_10048FFC4(&qword_1006A4CD8, (void (*)(uint64_t))&type metadata accessor for Participant);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    int16x8_t v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    int64_t v20 = v63;
    unint64_t v18 = v64;
    a1 = v60;
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    uint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v55;
  }
  uint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    sub_10048FFC4(&qword_1006A4CE8, (void (*)(uint64_t))&type metadata accessor for Participant);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    int16x8_t v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    unint64_t v45 = sub_10048EF98((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    sub_10017B518();
    return v45;
  }
  else
  {
    uint64_t v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    uint64_t v48 = sub_10048EF98((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    sub_10017B518();
    swift_slowDealloc();
    return v48;
  }
}

void sub_10048EC20(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v37 = a3 + 56;
  while (2)
  {
    uint64_t v34 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            uint64_t v13 = *(void **)(*(void *)(*v5 + 48) + 8 * v12);
            id v14 = v13;
            goto LABEL_8;
          }
          int64_t v27 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            goto LABEL_47;
          }
          int64_t v28 = (unint64_t)(v5[2] + 64) >> 6;
          if (v27 >= v28)
          {
            uint64_t v13 = 0;
            uint64_t v11 = 0;
            goto LABEL_8;
          }
          uint64_t v29 = v5[1];
          unint64_t v30 = *(void *)(v29 + 8 * v27);
          if (v30)
          {
LABEL_22:
            uint64_t v11 = (v30 - 1) & v30;
            unint64_t v12 = __clz(__rbit64(v30)) + (v27 << 6);
            int64_t v10 = v27;
            goto LABEL_7;
          }
          if (v10 + 2 < v28)
          {
            unint64_t v30 = *(void *)(v29 + 8 * (v10 + 2));
            if (v30)
            {
              int64_t v27 = v10 + 2;
              goto LABEL_22;
            }
            if (v10 + 3 >= v28)
            {
              uint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 2;
              goto LABEL_8;
            }
            unint64_t v30 = *(void *)(v29 + 8 * (v10 + 3));
            if (v30)
            {
              int64_t v27 = v10 + 3;
              goto LABEL_22;
            }
            int64_t v27 = v10 + 4;
            if (v10 + 4 >= v28)
            {
              uint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 3;
LABEL_8:
              v5[3] = v10;
              v5[4] = v11;
              if (!v13) {
                goto LABEL_45;
              }
              goto LABEL_12;
            }
            unint64_t v30 = *(void *)(v29 + 8 * v27);
            if (v30) {
              goto LABEL_22;
            }
            int64_t v27 = v28 - 1;
            int64_t v32 = v10 + 5;
            while (v28 != v32)
            {
              unint64_t v30 = *(void *)(v29 + 8 * v32++);
              if (v30)
              {
                int64_t v27 = v32 - 1;
                goto LABEL_22;
              }
            }
          }
          uint64_t v13 = 0;
          uint64_t v11 = 0;
          int64_t v10 = v27;
          goto LABEL_8;
        }
        if (!__CocoaSet.Iterator.next()()
          || (sub_100031418(0, (unint64_t *)&qword_1006A49F0),
              swift_unknownObjectRetain(),
              swift_dynamicCast(),
              uint64_t v13 = v38,
              swift_unknownObjectRelease(),
              !v38))
        {
LABEL_45:
          swift_retain();
          sub_10039D0F0(a1, a2, v34, a3);
          return;
        }
LABEL_12:
        Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        uint64_t v16 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v17 = v15 & ~v16;
        unint64_t v18 = v17 >> 6;
        uint64_t v19 = 1 << v17;
        if (((1 << v17) & *(void *)(v37 + 8 * (v17 >> 6))) == 0) {
          goto LABEL_3;
        }
        sub_100031418(0, (unint64_t *)&qword_1006A49F0);
        id v20 = *(id *)(*(void *)(a3 + 48) + 8 * v17);
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          break;
        }
        uint64_t v22 = ~v16;
        for (unint64_t i = v17 + 1; ; unint64_t i = v24 + 1)
        {
          unint64_t v24 = i & v22;
          if (((*(void *)(v37 + (((i & v22) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v22)) & 1) == 0) {
            break;
          }
          id v25 = *(id *)(*(void *)(a3 + 48) + 8 * v24);
          char v26 = static NSObject.== infix(_:_:)();

          if (v26)
          {

            unint64_t v18 = v24 >> 6;
            uint64_t v19 = 1 << v24;
            goto LABEL_25;
          }
        }
LABEL_3:

        uint64_t v5 = a5;
      }

LABEL_25:
      uint64_t v5 = a5;
      unint64_t v31 = a1[v18];
      a1[v18] = v31 & ~v19;
    }
    while ((v19 & v31) == 0);
    uint64_t v8 = v34 - 1;
    if (__OFSUB__(v34, 1))
    {
LABEL_47:
      __break(1u);
      return;
    }
    if (v34 != 1) {
      continue;
    }
    break;
  }
}

void *sub_10048EF98(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v49 = a2;
  uint64_t v9 = sub_10002F214(&qword_1006A0E08);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Participant();
  uint64_t v13 = __chkstk_darwin(v12);
  Swift::Int v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v13);
  uint64_t v63 = (char *)&v48 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v51 = a1;
  uint64_t v52 = v21;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v61 = v21 + 16;
  uint64_t v62 = a3;
  uint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v57 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  id v54 = a5;
  id v55 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v60 = a3 + 56;
  unint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  id v53 = v11;
  while (2)
  {
    uint64_t v50 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v28 = a5[2];
        int64_t v29 = a5[3];
        unint64_t v30 = a5[4];
        uint64_t v59 = v28;
        if (v30)
        {
          uint64_t v58 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v29 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v11, *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31, v12);
          uint64_t v32 = 0;
          goto LABEL_8;
        }
        int64_t v41 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        int64_t v42 = (unint64_t)(v28 + 64) >> 6;
        if (v41 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * v41);
        if (v43) {
          goto LABEL_17;
        }
        if (v29 + 2 >= v42) {
          goto LABEL_34;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 2));
        if (v43)
        {
          int64_t v41 = v29 + 2;
LABEL_17:
          uint64_t v58 = (v43 - 1) & v43;
          unint64_t v31 = __clz(__rbit64(v43)) + (v41 << 6);
          int64_t v29 = v41;
          goto LABEL_7;
        }
        if (v29 + 3 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          v29 += 2;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 3));
        if (v43)
        {
          int64_t v41 = v29 + 3;
          goto LABEL_17;
        }
        int64_t v41 = v29 + 4;
        if (v29 + 4 < v42)
        {
          unint64_t v43 = *(void *)(v27 + 8 * v41);
          if (v43) {
            goto LABEL_17;
          }
          int64_t v41 = v42 - 1;
          int64_t v46 = v29 + 5;
          while (v42 != v46)
          {
            unint64_t v43 = *(void *)(v27 + 8 * v46++);
            if (v43)
            {
              int64_t v41 = v46 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          int64_t v29 = v41;
          goto LABEL_8;
        }
        uint64_t v58 = 0;
        uint64_t v32 = 1;
        v29 += 3;
LABEL_8:
        (*v57)(v11, v32, 1, v12);
        *a5 = v26;
        a5[1] = v27;
        a5[2] = v59;
        a5[3] = v29;
        a5[4] = v58;
        if ((*v56)(v11, 1, v12) == 1)
        {
          sub_10002B754((uint64_t)v11, &qword_1006A0E08);
          uint64_t v47 = v62;
          swift_retain();
          return (void *)sub_10039D350(v51, v49, v50, v47);
        }
        (*v55)(v63, v11, v12);
        uint64_t v33 = v62;
        sub_10048FFC4(&qword_1006A4CD8, (void (*)(uint64_t))&type metadata accessor for Participant);
        uint64_t v34 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v35 = -1 << *(unsigned char *)(v33 + 32);
        unint64_t v36 = v34 & ~v35;
        if ((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36)) {
          break;
        }
        id v25 = *v24;
LABEL_4:
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v63, v12);
      }
      uint64_t v59 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v37 = ~v35;
      uint64_t v38 = *(void *)(v22 + 72);
      char v39 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
      while (1)
      {
        v39(v15, *(void *)(v62 + 48) + v38 * v36, v12);
        sub_10048FFC4(&qword_1006A4CE8, (void (*)(uint64_t))&type metadata accessor for Participant);
        char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v25 = *v24;
        (*v24)(v15, v12);
        if (v40) {
          break;
        }
        unint64_t v36 = (v36 + 1) & v37;
        if (((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
        {
          uint64_t v11 = v53;
          a5 = v54;
          uint64_t v22 = v52;
          goto LABEL_4;
        }
      }
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v63, v12);
      uint64_t v44 = (v36 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v22 = v52;
      uint64_t v45 = *(unint64_t *)((char *)v51 + v44);
      *(unint64_t *)((char *)v51 + v44) = v45 & ~(1 << v36);
      uint64_t v11 = v53;
      a5 = v54;
    }
    while ((v45 & (1 << v36)) == 0);
    uint64_t v23 = v50 - 1;
    if (__OFSUB__(v50, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v50 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }
}

int64_t sub_10048F4F8(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10048F5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = type metadata accessor for Participant();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v30 = (char *)&v24 - v8;
  unint64_t v33 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  uint64_t v28 = v4 + 32;
  uint64_t v29 = v4 + 16;
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v27 = v4 + 8;
  uint64_t v32 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (v12)
  {
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_22:
    uint64_t v20 = v30;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v30, *(void *)(v32 + 48) + *(void *)(v4 + 72) * v16, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v20, v3);
    id v21 = *(id *)(v31 + 16);
    Participant.handle.getter();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [v21 participantForHandle:v22];

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    if (v23)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v17 >= v26) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v25 + 8 * v17);
  ++v14;
  if (v18) {
    goto LABEL_21;
  }
  int64_t v14 = v17 + 1;
  if (v17 + 1 >= v26) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v25 + 8 * v14);
  if (v18) {
    goto LABEL_21;
  }
  int64_t v14 = v17 + 2;
  if (v17 + 2 >= v26) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v25 + 8 * v14);
  if (v18) {
    goto LABEL_21;
  }
  int64_t v14 = v17 + 3;
  if (v17 + 3 >= v26) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v25 + 8 * v14);
  if (v18)
  {
LABEL_21:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_22;
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v26)
  {
LABEL_26:
    swift_release();
    return v33;
  }
  unint64_t v18 = *(void *)(v25 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v26) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v25 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10048F93C(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = &selRef_unsupportedFolderButton;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v4 + 32);
      }
      unint64_t v7 = v6;
      id v8 = [v6 v5[183]];
      id v9 = [v8 lookupInfo];

      if (v9)
      {
        id v10 = [v9 emailAddress];

        if (v10)
        {
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v13 = v12;

          LOBYTE(v11) = sub_1004284A8(v11, v13, a2);
          uint64_t v5 = &selRef_unsupportedFolderButton;
          swift_bridgeObjectRelease();
          if (v11)
          {

            return v4;
          }
        }
      }
      id v14 = [v7 v5[183]];
      id v15 = [v14 lookupInfo];

      if (v15 && (id v16 = [v15 phoneNumber], v15, v16))
      {
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        LOBYTE(v17) = sub_1004284A8(v17, v19, a2);
        uint64_t v5 = &selRef_unsupportedFolderButton;
        swift_bridgeObjectRelease();
        if (v17) {
          return v4;
        }
      }
      else
      {
      }
      uint64_t v20 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        break;
      }
      ++v4;
      if (v20 == v3) {
        return 0;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_10048FB70(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_10048F93C(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    unint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_62;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_63:
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 != v41) {
        goto LABEL_6;
      }
    }
    else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      unint64_t v9 = v6 + 5;
      id v10 = &selRef_unsupportedFolderButton;
      while (1)
      {
        unint64_t v11 = v9 - 4;
        uint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v11 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
            goto LABEL_63;
          }
          if (v11 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_53;
          }
          id v13 = *(id *)(v12 + 8 * v9);
        }
        id v14 = v13;
        id v15 = [v13 v10[183]];
        id v16 = [v15 lookupInfo];

        if (v16)
        {
          id v17 = [v16 emailAddress];

          if (v17)
          {
            uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v20 = v19;

            LOBYTE(v18) = sub_1004284A8(v18, v20, a2);
            id v10 = &selRef_unsupportedFolderButton;
            swift_bridgeObjectRelease();
            if (v18)
            {

              goto LABEL_40;
            }
          }
        }
        id v21 = [v14 v10[183]];
        id v22 = [v21 lookupInfo];

        if (!v22) {
          break;
        }
        id v23 = [v22 phoneNumber];

        if (!v23) {
          break;
        }
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v25;

        LOBYTE(v24) = sub_1004284A8(v24, v26, a2);
        id v10 = &selRef_unsupportedFolderButton;
        swift_bridgeObjectRelease();
        if (v24) {
          goto LABEL_40;
        }
        if (v11 != v6) {
          goto LABEL_21;
        }
LABEL_39:
        if (__OFADD__(v6++, 1)) {
          goto LABEL_55;
        }
LABEL_40:
        unint64_t v37 = v9 - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_54;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v38 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v9;
        if (v37 == v38) {
          return v6;
        }
      }

      if (v11 == v6) {
        goto LABEL_39;
      }
LABEL_21:
      uint64_t v27 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v27 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_25:
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_58;
          }
          if (v11 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_59;
          }
          id v29 = *(id *)(v27 + 8 * v9);
          goto LABEL_28;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_56;
        }
        if (v6 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_57;
        }
        id v28 = *(id *)(v27 + 8 * v6 + 32);
        if ((v27 & 0xC000000000000001) == 0) {
          goto LABEL_25;
        }
      }
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v27 = *a1;
LABEL_28:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v27;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v27 < 0 || (v27 & 0x4000000000000000) != 0)
      {
        uint64_t v27 = sub_1002E082C(v27);
        *a1 = v27;
      }
      uint64_t v31 = *(void **)((v27 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
      *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v29;

      specialized Array._endMutation()();
      uint64_t v32 = *a1;
      int v33 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v32;
      if (!v33 || v32 < 0 || (v32 & 0x4000000000000000) != 0)
      {
        uint64_t v32 = sub_1002E082C(v32);
        *a1 = v32;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_60;
      }
      uint64_t v34 = v32 & 0xFFFFFFFFFFFFFF8;
      if (v11 >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_61;
      }
      uint64_t v35 = *(void **)(v34 + 8 * v9);
      *(void *)(v34 + 8 * v9) = v28;

      specialized Array._endMutation()();
      goto LABEL_39;
    }
    return v6;
  }
  unint64_t v39 = *a1;
  if (!(v39 >> 62)) {
    return *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t sub_10048FFC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10049000C()
{
  uint64_t v1 = type metadata accessor for Notification();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1004900B0()
{
  uint64_t v1 = *(void *)(type metadata accessor for Notification() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10048D150(v0 + v2, v3);
}

uint64_t sub_10049013C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100490174(uint64_t *a1)
{
  return sub_10048CD18(a1);
}

Swift::Int sub_10049017C(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100190DEC(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100492560(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_100490224()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___ICAppStoreRatingController_didRequestRating);
}

uint64_t sub_100490234(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  if (qword_10069B0C8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10003293C(v4, (uint64_t)qword_1006A8BB0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = _typeName(_:qualified:)();
    sub_10045DA1C(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: updateTotalNoteCount: %ld", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  *(void *)(v2 + OBJC_IVAR___ICAppStoreRatingController_totalNoteCount) = a1;
  return sub_100491958();
}

void sub_1004903FC()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10069B0C8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10003293C(v5, (uint64_t)qword_1006A8BB0);
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = _typeName(_:qualified:)();
    unint64_t v16 = sub_10045DA1C(v9, v10, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s: didEdit", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  static Date.now.getter();
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v4, 0, 1, v11);
  uint64_t v13 = v1 + OBJC_IVAR___ICAppStoreRatingController_lastEditDate;
  swift_beginAccess();
  sub_10021E98C((uint64_t)v4, v13);
  swift_endAccess();
  sub_100491958();
  static Date.now.getter();
  v12(v4, 0, 1, v11);
  uint64_t v14 = v1 + OBJC_IVAR___ICAppStoreRatingController_lastInteractionDate;
  swift_beginAccess();
  sub_10021E98C((uint64_t)v4, v14);
  swift_endAccess();
  id v15 = sub_1004914FC();
  [v15 requestFire];
}

uint64_t sub_1004906D4()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10069B0C8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10003293C(v6, (uint64_t)qword_1006A8BB0);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v21 = v2;
    uint64_t v23 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = _typeName(_:qualified:)();
    unint64_t v22 = sub_10045DA1C(v11, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: didLaunch", v9, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v21;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  unint64_t v13 = (unint64_t)sub_100490D5C();
  static Date.now.getter();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v13 = sub_1001A94A0(0, *(void *)(v13 + 16) + 1, 1, v13);
  }
  unint64_t v15 = *(void *)(v13 + 16);
  unint64_t v14 = *(void *)(v13 + 24);
  if (v15 >= v14 >> 1) {
    unint64_t v13 = sub_1001A94A0(v14 > 1, v15 + 1, 1, v13);
  }
  *(void *)(v13 + 16) = v15 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v13+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v15, v5, v2);
  sub_1004915C0(v13);
  swift_bridgeObjectRelease();
  unint64_t v16 = *(void **)(v1 + OBJC_IVAR___ICAppStoreRatingController_userDefaults);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v18 = String._bridgeToObjectiveC()();
  [v16 setObject:isa forKey:v18];

  return sub_100491958();
}

uint64_t sub_100490A10()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100032974(v0, qword_1006A8BB0);
  sub_10003293C(v0, (uint64_t)qword_1006A8BB0);
  return static Logger.application.getter();
}

uint64_t sub_100490B80(uint64_t a1)
{
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR___ICAppStoreRatingController_userDefaults);
  sub_10021E8BC(a1, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  }
  NSString v10 = String._bridgeToObjectiveC()();
  [v6 setObject:isa forKey:v10];
  swift_unknownObjectRelease();

  return sub_10002B754(a1, (uint64_t *)&unk_1006A3E20);
}

void *sub_100490D5C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___ICAppStoreRatingController_userDefaults);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 objectForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1001BC02C((uint64_t)v6, (uint64_t)v7);
  if (v7[3])
  {
    sub_10002F214(&qword_1006A8C40);
    if (swift_dynamicCast())
    {
      v7[0] = v5;
      swift_bridgeObjectRetain();
      sub_10049017C(v7);
      swift_bridgeObjectRelease();
      return v7[0];
    }
  }
  else
  {
    sub_10002B754((uint64_t)v7, &qword_10069B4D0);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100490FB8@<X0>(uint64_t a1@<X8>)
{
  id v3 = *(void **)(v1 + OBJC_IVAR___ICAppStoreRatingController_userDefaults);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_1001BC02C((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    uint64_t v6 = type metadata accessor for Date();
    int v7 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, v7 ^ 1u, 1, v6);
  }
  else
  {
    sub_10002B754((uint64_t)v11, &qword_10069B4D0);
    uint64_t v9 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
}

Class sub_100491274(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v5 - 8);
  int v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + *a3;
  swift_beginAccess();
  sub_10021E8BC(v8, (uint64_t)v7);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
  }

  return isa;
}

void sub_1004913BC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  }
  uint64_t v12 = (uint64_t)a1 + *a4;
  swift_beginAccess();
  id v13 = a1;
  sub_10021E98C((uint64_t)v9, v12);
  swift_endAccess();
}

id sub_1004914FC()
{
  uint64_t v1 = OBJC_IVAR___ICAppStoreRatingController____lazy_storage___interactionSelectorDelayer;
  NSString v2 = *(void **)(v0 + OBJC_IVAR___ICAppStoreRatingController____lazy_storage___interactionSelectorDelayer);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___ICAppStoreRatingController____lazy_storage___interactionSelectorDelayer);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)ICSelectorDelayer) initWithTarget:v0 selector:"didStopInteracting" delay:1 waitToFireUntilRequestsStop:1 callOnMainThread:*(double *)(v0 + OBJC_IVAR___ICAppStoreRatingController_noteEditRequirement)];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    NSString v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void sub_1004915C0(uint64_t a1)
{
  NSString v2 = v1;
  swift_getObjectType();
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = OBJC_IVAR___ICAppStoreRatingController_maximumPersistedLaunchDaysCount;
  uint64_t v10 = *(void *)&v1[OBJC_IVAR___ICAppStoreRatingController_maximumPersistedLaunchDaysCount];
  if (v10 >= v8)
  {
    swift_bridgeObjectRetain();
    return;
  }
  if (v10 >= 1)
  {
    if (qword_10069B0C8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10003293C(v11, (uint64_t)qword_1006A8BB0);
    uint64_t v12 = v1;
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    LODWORD(v38) = v14;
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v37 = v4;
      uint64_t v16 = v15;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v40 = v36;
      *(_DWORD *)uint64_t v16 = 136315394;
      os_log_t v34 = (os_log_t)(v16 + 4);
      uint64_t v17 = _typeName(_:qualified:)();
      unint64_t v39 = sub_10045DA1C(v17, v18, &v40);
      uint64_t v35 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2048;
      os_log_t v34 = v13;
      uint64_t v19 = v5;
      unint64_t v20 = *(void *)&v2[v9];

      unint64_t v39 = v20;
      uint64_t v5 = v19;
      uint64_t v7 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      os_log_t v21 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v38, "%s: Limiting persisted launch days to maximum: %ld", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v37;
      swift_slowDealloc();
    }
    else
    {
    }
    if (v8)
    {
      unint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v23 = v5;
      unint64_t v24 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v22(v7, a1 + v24, v4);
      uint64_t v25 = *(void *)&v2[v9];
      if (!__OFSUB__(v25, 1))
      {
        uint64_t v26 = sub_100426D98(v25 - 1, a1);
        uint64_t v37 = v27;
        int64_t v38 = v26;
        uint64_t v29 = v28;
        unint64_t v31 = v30;
        sub_10002F214(&qword_10069D068);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_100524D10;
        v22((char *)(v32 + v24), (unint64_t)v7, v4);
        uint64_t v40 = v32;
        swift_bridgeObjectRetain();
        sub_10022C97C(v38, v37, v29, v31);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_100491958()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_100492064();
  if (result)
  {
    uint64_t v6 = OBJC_IVAR___ICAppStoreRatingController_didRequestRating;
    if ((v0[OBJC_IVAR___ICAppStoreRatingController_didRequestRating] & 1) == 0)
    {
      if (qword_10069B0C8 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10003293C(v7, (uint64_t)qword_1006A8BB0);
      uint64_t v8 = v0;
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.info.getter();
      uint64_t v11 = &unk_1006A8000;
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v12 = swift_slowAlloc();
        uint64_t v22 = v6;
        uint64_t v13 = v12;
        unint64_t v20 = (void *)swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v24 = v21;
        *(_DWORD *)uint64_t v13 = 136315394;
        uint64_t v14 = _typeName(_:qualified:)();
        unint64_t v23 = sub_10045DA1C(v14, v15, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v13 + 12) = 2112;
        uint64_t v16 = *(void **)&v8[OBJC_IVAR___ICAppStoreRatingController_windowScene];
        unint64_t v23 = (unint64_t)v16;
        id v17 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v20 = v16;
        uint64_t v11 = (void *)&unk_1006A8000;

        _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s: Requesting App Store review in windowScene: %@", (uint8_t *)v13, 0x16u);
        sub_10002F214(&qword_10069FD50);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v6 = v22;
        swift_slowDealloc();
      }
      else
      {
      }
      [self requestReviewInScene:*(void *)&v8[v11[379]]];
      [*(id *)&v8[OBJC_IVAR___ICAppStoreRatingController_eventReporter] submitAppReviewPromptRequestEvent];
      v1[v6] = 1;
      static Date.now.getter();
      uint64_t v18 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 0, 1, v18);
      return sub_100490B80((uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_100491E88()
{
  swift_getObjectType();
  if (qword_10069B0C8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10003293C(v0, (uint64_t)qword_1006A8BB0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v4 = _typeName(_:qualified:)();
    sub_10045DA1C(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s: didStopInteracting", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return sub_100491958();
}

BOOL sub_100492064()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = _s19NoteEditRequirementV5DatesVMa();
  __chkstk_darwin(v5);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int64_t v8 = *(void *)(v0 + OBJC_IVAR___ICAppStoreRatingController_cohortRequirement);
  if (v8 != 100)
  {
    swift_retain();
    int64_t v9 = sub_1003E3428();
    swift_release();
    if (v8 < v9) {
      return 0;
    }
  }
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR___ICAppStoreRatingController_launchRequirement);
  unint64_t v11 = *(void *)(v0 + OBJC_IVAR___ICAppStoreRatingController_launchRequirement + 8);
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR___ICAppStoreRatingController_launchRequirement + 16);
  uint64_t v13 = sub_100490D5C();
  LOBYTE(v10) = sub_100426930((uint64_t)v13, v10, v11, v12);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR___ICAppStoreRatingController_noteCountRequirement);
  if (v14 && *(void *)(v0 + OBJC_IVAR___ICAppStoreRatingController_totalNoteCount) < v14) {
    return 0;
  }
  double v16 = *(double *)(v0 + OBJC_IVAR___ICAppStoreRatingController_noteEditRequirement);
  uint64_t v17 = v0 + OBJC_IVAR___ICAppStoreRatingController_lastEditDate;
  swift_beginAccess();
  sub_10021E8BC(v17, (uint64_t)v7);
  uint64_t v18 = v1 + OBJC_IVAR___ICAppStoreRatingController_lastInteractionDate;
  swift_beginAccess();
  sub_10021E8BC(v18, (uint64_t)&v7[*(int *)(v5 + 20)]);
  LOBYTE(v18) = sub_100426F18((uint64_t)v7, v16);
  sub_100492504((uint64_t)v7);
  if (v18)
  {
    uint64_t v19 = *(void *)(v1 + OBJC_IVAR___ICAppStoreRatingController_requestRequirement);
    sub_100490FB8((uint64_t)v4);
    BOOL v20 = sub_1004271EC((uint64_t)v4, v19);
    sub_10002B754((uint64_t)v4, (uint64_t *)&unk_1006A3E20);
  }
  else
  {
    return 0;
  }
  return v20;
}

void AppStoreRatingController.init()()
{
}

uint64_t sub_1004923C8()
{
  return type metadata accessor for AppStoreRatingController();
}

uint64_t type metadata accessor for AppStoreRatingController()
{
  uint64_t result = qword_1006A8C30;
  if (!qword_1006A8C30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10049241C()
{
  sub_100005808();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100492504(uint64_t a1)
{
  uint64_t v2 = _s19NoteEditRequirementV5DatesVMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Int sub_100492560(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v136 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v151 = (char *)&v132 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v146 = (char *)&v132 - v10;
  __chkstk_darwin(v9);
  v147 = (char *)&v132 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_141;
    }
    if (v12) {
      return sub_1004930B4(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_149;
  }
  Swift::Int v133 = result;
  uint64_t v140 = v1;
  if (v12 < 2)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    unint64_t v139 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    if (v12 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
      BOOL v20 = (char *)_swiftEmptyArrayStorage;
LABEL_106:
      long long v132 = v18;
      if (v21 >= 2)
      {
        Swift::Int v125 = *a1;
        do
        {
          unint64_t v126 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_136;
          }
          if (!v125) {
            goto LABEL_148;
          }
          uint64_t v127 = *(void *)&v20[16 * v126 + 32];
          uint64_t v128 = *(void *)&v20[16 * v21 + 24];
          uint64_t v129 = v140;
          sub_1004933A4(v125 + *(void *)(v4 + 72) * v127, v125 + *(void *)(v4 + 72) * *(void *)&v20[16 * v21 + 16], v125 + *(void *)(v4 + 72) * v128, v139);
          uint64_t v140 = v129;
          if (v129) {
            break;
          }
          if (v128 < v127) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v20 = sub_100190A20((uint64_t)v20);
          }
          if (v126 >= *((void *)v20 + 2)) {
            goto LABEL_138;
          }
          long long v130 = &v20[16 * v126 + 32];
          *(void *)long long v130 = v127;
          *((void *)v130 + 1) = v128;
          unint64_t v131 = *((void *)v20 + 2);
          if (v21 > v131) {
            goto LABEL_139;
          }
          memmove(&v20[16 * v21 + 16], &v20[16 * v21 + 32], 16 * (v131 - v21));
          *((void *)v20 + 2) = v131 - 1;
          unint64_t v21 = v131 - 1;
        }
        while (v131 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v132[2] = 0;
      return swift_bridgeObjectRelease();
    }
    long long v132 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    unint64_t v17 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    long long v132 = (void *)v16;
    unint64_t v139 = v16 + v17;
  }
  uint64_t v19 = 0;
  v144 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v145 = v4 + 16;
  v154 = (char **)(v4 + 32);
  BOOL v20 = (char *)_swiftEmptyArrayStorage;
  uint64_t v138 = v4;
  v148 = a1;
  uint64_t v150 = v3;
  while (1)
  {
    uint64_t v22 = v19;
    unint64_t v23 = v19 + 1;
    Swift::Int v137 = (Swift::Int)v19;
    if ((uint64_t)(v19 + 1) >= v12)
    {
      Swift::Int v36 = (Swift::Int)(v19 + 1);
      uint64_t v44 = v140;
    }
    else
    {
      Swift::Int v143 = *a1;
      Swift::Int v24 = v143;
      uint64_t v25 = v4;
      uint64_t v26 = *(void *)(v4 + 72);
      uint64_t v155 = v26;
      Swift::Int v153 = v12;
      uint64_t v27 = v19;
      uint64_t v28 = *(void (**)(char *, Swift::Int, uint64_t))(v25 + 16);
      v28(v147, v143 + v26 * (void)v23, v3);
      Swift::Int v29 = v24 + v26 * (void)v27;
      uint64_t v30 = v25;
      unint64_t v31 = v146;
      v28(v146, v29, v3);
      unint64_t v32 = sub_100493968();
      uint64_t v33 = v147;
      v149 = (char *)v32;
      int v34 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v3 = v150;
      LODWORD(v152) = v34;
      uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
      v35(v31, v150);
      v35(v33, v3);
      Swift::Int v36 = (Swift::Int)(v27 + 2);
      Swift::Int v12 = v153;
      if (v36 >= v153)
      {
        uint64_t v44 = v140;
      }
      else
      {
        uint64_t v134 = v20;
        uint64_t v142 = v155 * (void)v23;
        Swift::Int v37 = v143;
        uint64_t v38 = v155 * v36;
        while (1)
        {
          Swift::Int v39 = v36;
          uint64_t v40 = v147;
          v28(v147, v37 + v38, v3);
          uint64_t v41 = v146;
          v28(v146, v37 + v142, v3);
          int v42 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v3 = v150;
          int v43 = v42;
          v35(v41, v150);
          v35(v40, v3);
          if ((v152 ^ v43)) {
            break;
          }
          Swift::Int v36 = v39 + 1;
          v37 += v155;
          Swift::Int v12 = v153;
          if (v153 == v36)
          {
            Swift::Int v36 = v153;
            uint64_t v44 = v140;
            BOOL v20 = v134;
            goto LABEL_25;
          }
        }
        uint64_t v44 = v140;
        BOOL v20 = v134;
        Swift::Int v36 = v39;
        Swift::Int v12 = v153;
      }
LABEL_25:
      a1 = v148;
      uint64_t v22 = (char *)v137;
      if (v152)
      {
        if (v36 < v137) {
          goto LABEL_142;
        }
        if (v137 < v36)
        {
          uint64_t v134 = v20;
          uint64_t v45 = 0;
          uint64_t v46 = v155;
          uint64_t v47 = v155 * (v36 - 1);
          uint64_t v48 = v36 * v155;
          Swift::Int v49 = v137;
          uint64_t v50 = v137 * v155;
          v149 = (char *)v36;
          do
          {
            if (v49 != v36 + v45 - 1)
            {
              if (!v143) {
                goto LABEL_147;
              }
              uint64_t v51 = v44;
              unint64_t v52 = v143 + v50;
              Swift::Int v53 = v143 + v47;
              v152 = *v154;
              ((void (*)(char *, Swift::Int, uint64_t))v152)(v136, v143 + v50, v3);
              if (v50 < v47 || v52 >= v143 + v48)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v50 != v47)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              ((void (*)(Swift::Int, char *, uint64_t))v152)(v53, v136, v3);
              uint64_t v44 = v51;
              a1 = v148;
              Swift::Int v36 = (Swift::Int)v149;
              uint64_t v46 = v155;
            }
            ++v49;
            --v45;
            v47 -= v46;
            v48 -= v46;
            v50 += v46;
          }
          while (v49 < v36 + v45);
          BOOL v20 = v134;
          uint64_t v22 = (char *)v137;
          Swift::Int v12 = v153;
        }
      }
    }
    if (v36 >= v12) {
      goto LABEL_57;
    }
    if (__OFSUB__(v36, v22)) {
      goto LABEL_140;
    }
    if (v36 - (uint64_t)v22 >= v133) {
      goto LABEL_57;
    }
    if (__OFADD__(v22, v133)) {
      goto LABEL_143;
    }
    Swift::Int v54 = (uint64_t)&v22[v133] >= v12 ? v12 : (Swift::Int)&v22[v133];
    if (v54 < (uint64_t)v22) {
      break;
    }
    if (v36 != v54)
    {
      uint64_t v134 = v20;
      Swift::Int v135 = v54;
      uint64_t v55 = *(void *)(v138 + 72);
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
      uint64_t v140 = v44;
      v141 = v56;
      uint64_t v155 = v55 * (v36 - 1);
      uint64_t v142 = v55;
      Swift::Int v57 = v36 * v55;
      do
      {
        uint64_t v59 = 0;
        v149 = (char *)v36;
        Swift::Int v143 = v57;
        while (1)
        {
          v152 = v22;
          Swift::Int v60 = *a1;
          Swift::Int v61 = v57 + v59 + *a1;
          uint64_t v62 = v147;
          uint64_t v63 = v141;
          v141(v147, v61, v3);
          uint64_t v64 = v155 + v59 + v60;
          id v65 = a1;
          uint64_t v66 = v146;
          v63(v146, v64, v3);
          sub_100493968();
          LODWORD(v153) = dispatch thunk of static Comparable.< infix(_:_:)();
          unint64_t v67 = *v144;
          (*v144)(v66, v3);
          v67(v62, v3);
          if ((v153 & 1) == 0) {
            break;
          }
          uint64_t v68 = *v65;
          if (!*v65) {
            goto LABEL_145;
          }
          Swift::Int v57 = v143;
          uint64_t v69 = v68 + v155 + v59;
          uint64_t v70 = *v154;
          uint64_t v3 = v150;
          ((void (*)(char *, uint64_t, uint64_t))*v154)(v151, v68 + v143 + v59, v150);
          swift_arrayInitWithTakeFrontToBack();
          ((void (*)(uint64_t, char *, uint64_t))v70)(v69, v151, v3);
          v59 -= v142;
          uint64_t v22 = v152 + 1;
          a1 = v148;
          uint64_t v58 = v149;
          if (v149 == v152 + 1) {
            goto LABEL_50;
          }
        }
        uint64_t v58 = v149;
        uint64_t v3 = v150;
        a1 = v65;
        Swift::Int v57 = v143;
LABEL_50:
        Swift::Int v36 = (Swift::Int)(v58 + 1);
        v155 += v142;
        v57 += v142;
        uint64_t v22 = (char *)v137;
      }
      while (v36 != v135);
      Swift::Int v36 = v135;
      uint64_t v44 = v140;
      BOOL v20 = v134;
    }
LABEL_57:
    if (v36 < (uint64_t)v22) {
      goto LABEL_135;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v140 = v44;
    v149 = (char *)v36;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      BOOL v20 = sub_1001904C8(0, *((void *)v20 + 2) + 1, 1, v20);
    }
    unint64_t v73 = *((void *)v20 + 2);
    unint64_t v72 = *((void *)v20 + 3);
    unint64_t v21 = v73 + 1;
    if (v73 >= v72 >> 1) {
      BOOL v20 = sub_1001904C8((char *)(v72 > 1), v73 + 1, 1, v20);
    }
    *((void *)v20 + 2) = v21;
    uint64_t v74 = v20 + 32;
    uint64_t v75 = &v20[16 * v73 + 32];
    uint64_t v76 = v149;
    *(void *)uint64_t v75 = v137;
    *((void *)v75 + 1) = v76;
    if (v73)
    {
      while (1)
      {
        unint64_t v77 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v82 = &v74[16 * v21];
          uint64_t v83 = *((void *)v82 - 8);
          uint64_t v84 = *((void *)v82 - 7);
          BOOL v88 = __OFSUB__(v84, v83);
          uint64_t v85 = v84 - v83;
          if (v88) {
            goto LABEL_124;
          }
          uint64_t v87 = *((void *)v82 - 6);
          uint64_t v86 = *((void *)v82 - 5);
          BOOL v88 = __OFSUB__(v86, v87);
          uint64_t v80 = v86 - v87;
          char v81 = v88;
          if (v88) {
            goto LABEL_125;
          }
          unint64_t v89 = v21 - 2;
          uint64_t v90 = &v74[16 * v21 - 32];
          uint64_t v92 = *(void *)v90;
          uint64_t v91 = *((void *)v90 + 1);
          BOOL v88 = __OFSUB__(v91, v92);
          uint64_t v93 = v91 - v92;
          if (v88) {
            goto LABEL_127;
          }
          BOOL v88 = __OFADD__(v80, v93);
          uint64_t v94 = v80 + v93;
          if (v88) {
            goto LABEL_130;
          }
          if (v94 >= v85)
          {
            uint64_t v112 = &v74[16 * v77];
            uint64_t v114 = *(void *)v112;
            uint64_t v113 = *((void *)v112 + 1);
            BOOL v88 = __OFSUB__(v113, v114);
            uint64_t v115 = v113 - v114;
            if (v88) {
              goto LABEL_134;
            }
            BOOL v105 = v80 < v115;
            goto LABEL_94;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v106 = *((void *)v20 + 4);
            uint64_t v107 = *((void *)v20 + 5);
            BOOL v88 = __OFSUB__(v107, v106);
            uint64_t v99 = v107 - v106;
            char v100 = v88;
            goto LABEL_88;
          }
          uint64_t v79 = *((void *)v20 + 4);
          uint64_t v78 = *((void *)v20 + 5);
          BOOL v88 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          char v81 = v88;
        }
        if (v81) {
          goto LABEL_126;
        }
        unint64_t v89 = v21 - 2;
        int v95 = &v74[16 * v21 - 32];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v98 = __OFSUB__(v96, v97);
        uint64_t v99 = v96 - v97;
        char v100 = v98;
        if (v98) {
          goto LABEL_129;
        }
        uint64_t v101 = &v74[16 * v77];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v88 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v88) {
          goto LABEL_132;
        }
        if (__OFADD__(v99, v104)) {
          goto LABEL_133;
        }
        if (v99 + v104 >= v80)
        {
          BOOL v105 = v80 < v104;
LABEL_94:
          if (v105) {
            unint64_t v77 = v89;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v100) {
          goto LABEL_128;
        }
        long long v108 = &v74[16 * v77];
        uint64_t v110 = *(void *)v108;
        uint64_t v109 = *((void *)v108 + 1);
        BOOL v88 = __OFSUB__(v109, v110);
        uint64_t v111 = v109 - v110;
        if (v88) {
          goto LABEL_131;
        }
        if (v111 < v99) {
          goto LABEL_15;
        }
LABEL_96:
        unint64_t v116 = v77 - 1;
        if (v77 - 1 >= v21)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        Swift::Int v117 = *a1;
        if (!*a1) {
          goto LABEL_146;
        }
        long long v118 = v20;
        long long v119 = &v74[16 * v116];
        uint64_t v120 = *(void *)v119;
        long long v121 = &v74[16 * v77];
        uint64_t v122 = *((void *)v121 + 1);
        uint64_t v123 = v140;
        sub_1004933A4(v117 + *(void *)(v138 + 72) * *(void *)v119, v117 + *(void *)(v138 + 72) * *(void *)v121, v117 + *(void *)(v138 + 72) * v122, v139);
        uint64_t v140 = v123;
        if (v123) {
          goto LABEL_117;
        }
        if (v122 < v120) {
          goto LABEL_121;
        }
        if (v77 > *((void *)v118 + 2)) {
          goto LABEL_122;
        }
        *(void *)long long v119 = v120;
        *(void *)&v74[16 * v116 + 8] = v122;
        unint64_t v124 = *((void *)v118 + 2);
        if (v77 >= v124) {
          goto LABEL_123;
        }
        BOOL v20 = v118;
        unint64_t v21 = v124 - 1;
        memmove(&v74[16 * v77], v121 + 16, 16 * (v124 - 1 - v77));
        *((void *)v118 + 2) = v124 - 1;
        a1 = v148;
        if (v124 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v21 = 1;
LABEL_15:
    Swift::Int v12 = a1[1];
    uint64_t v19 = v149;
    uint64_t v4 = v138;
    if ((uint64_t)v149 >= v12)
    {
      uint64_t v18 = v132;
      goto LABEL_106;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004930B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::Int v37 = (char *)&v29 - v11;
  uint64_t result = __chkstk_darwin(v10);
  Swift::Int v36 = (char *)&v29 - v14;
  uint64_t v39 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v15 = v13 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    unint64_t v32 = (uint64_t (**)(char *, uint64_t))(v15 - 8);
    uint64_t v33 = v16;
    int v34 = a4;
    uint64_t v35 = v15;
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v44 = v17 * (v39 - 1);
    uint64_t v38 = v17;
    uint64_t v43 = v17 * v39;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v42 = v31;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v43 + v18 + *a4;
      unint64_t v21 = v36;
      uint64_t v22 = v33;
      v33(v36, v20, v7);
      unint64_t v23 = v37;
      v22(v37, v44 + v18 + v19, v7);
      sub_100493968();
      LOBYTE(v19) = dispatch thunk of static Comparable.< infix(_:_:)();
      Swift::Int v24 = *v32;
      (*v32)(v23, v7);
      uint64_t v25 = v21;
      a4 = v34;
      uint64_t result = v24(v25, v7);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v44 += v38;
        v43 += v38;
        if (++v39 == v30) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v27 = v26 + v44 + v18;
      uint64_t v28 = *v40;
      (*v40)(v41, v26 + v43 + v18, v7);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v27, v41, v7);
      v18 -= v38;
      if (v39 == ++v42) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1004933A4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v57 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v57 - 8);
  uint64_t v9 = __chkstk_darwin(v57);
  uint64_t v56 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v55 = (char *)&v47 - v11;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_71;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_72;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v32 = a4 + v18;
      unint64_t v58 = a4 + v18;
      unint64_t v60 = a2;
      unint64_t v52 = (void (*)(char *, unint64_t, uint64_t))a1;
      if (v18 >= 1 && a1 < a2)
      {
        int v34 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        uint64_t v54 = v8 + 16;
        Swift::Int v49 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v50 = v34;
        uint64_t v35 = -v13;
        unint64_t v51 = a4;
        uint64_t v48 = -v13;
        uint64_t v36 = v57;
        do
        {
          unint64_t v53 = a3 + v35;
          unint64_t v37 = a3;
          uint64_t v38 = v55;
          uint64_t v39 = v50;
          v50(v55, v32 + v35, v36);
          unint64_t v40 = a2 + v35;
          uint64_t v41 = v56;
          v39(v56, v40, v36);
          sub_100493968();
          LOBYTE(v39) = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v42 = *v49;
          (*v49)(v41, v36);
          v42(v38, v36);
          if (v39)
          {
            uint64_t v35 = v48;
            a3 = v53;
            if (v37 < a2 || v53 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v43 = v51;
            }
            else
            {
              unint64_t v43 = v51;
              if (v37 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v60 += v35;
          }
          else
          {
            unint64_t v44 = v58;
            v58 += v48;
            a3 = v53;
            BOOL v45 = v37 < v44 || v53 >= v44;
            uint64_t v35 = v48;
            if (v45)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v40 = a2;
              unint64_t v43 = v51;
            }
            else
            {
              unint64_t v43 = v51;
              if (v37 != v44) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v40 = a2;
            }
          }
          unint64_t v32 = v58;
          if (v58 <= v43) {
            break;
          }
          a2 = v40;
        }
        while (v40 > (unint64_t)v52);
      }
      goto LABEL_69;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v53 = a4 + v17;
    unint64_t v58 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      unint64_t v52 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v54 = v8 + 16;
      uint64_t v50 = (void (*)(char *, unint64_t, uint64_t))(v8 + 8);
      uint64_t v20 = v57;
      do
      {
        uint64_t v21 = v13;
        unint64_t v22 = a3;
        unint64_t v23 = v55;
        Swift::Int v24 = v52;
        v52(v55, a2, v20);
        uint64_t v25 = v56;
        v24(v56, a4, v20);
        sub_100493968();
        LOBYTE(v24) = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v26 = *(void (**)(char *, uint64_t))v50;
        (*(void (**)(char *, uint64_t))v50)(v25, v20);
        v26(v23, v20);
        unint64_t v27 = v60;
        if (v24)
        {
          uint64_t v13 = v21;
          unint64_t v28 = a2 + v21;
          if (v60 < a2 || v60 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v60 == a2) {
              unint64_t v27 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v13 = v21;
          unint64_t v30 = v59 + v21;
          if (v60 < v59 || v60 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v60 != v59) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v59 = v30;
          unint64_t v28 = a2;
        }
        unint64_t v60 = v27 + v13;
        a4 = v59;
        if (v59 >= v53) {
          break;
        }
        a2 = v28;
      }
      while (v28 < a3);
    }
LABEL_69:
    sub_1001908C4(&v60, &v59, (uint64_t *)&v58);
    return 1;
  }
LABEL_73:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100493968()
{
  unint64_t result = qword_1006A8C48;
  if (!qword_1006A8C48)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8C48);
  }
  return result;
}

id sub_1004939C0(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v4[OBJC_IVAR___ICAppStoreRatingController_didRequestRating] = 0;
  *(void *)&v4[OBJC_IVAR___ICAppStoreRatingController_totalNoteCount] = 0;
  uint64_t v10 = &v4[OBJC_IVAR___ICAppStoreRatingController_lastEditDate];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(&v4[OBJC_IVAR___ICAppStoreRatingController_lastInteractionDate], 1, 1, v11);
  *(void *)&v4[OBJC_IVAR___ICAppStoreRatingController_maximumPersistedLaunchDaysCount] = 100;
  *(void *)&v4[OBJC_IVAR___ICAppStoreRatingController____lazy_storage___interactionSelectorDelayer] = 0;
  *(void *)&v4[OBJC_IVAR___ICAppStoreRatingController_cloudConfiguration] = a1;
  *(void *)&v4[OBJC_IVAR___ICAppStoreRatingController_cohort] = a2;
  *(void *)&v4[OBJC_IVAR___ICAppStoreRatingController_userDefaults] = a3;
  *(void *)&v4[OBJC_IVAR___ICAppStoreRatingController_windowScene] = a4;
  uint64_t v31 = ObjectType;
  uint64_t v13 = v4;
  id v14 = a1;
  swift_retain();
  id v15 = a3;
  id v16 = a4;
  sub_10002F214(&qword_1006A8C50);
  String.init<A>(describing:)();
  id v17 = objc_allocWithZone((Class)ICNAEventReporter);
  id v18 = v16;
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [v17 initWithSubTrackerName:v19 windowScene:v18];

  *(void *)&v13[OBJC_IVAR___ICAppStoreRatingController_eventReporter] = v20;
  id v21 = [v14 appStoreRatingCohortPercentage];
  *(void *)&v13[OBJC_IVAR___ICAppStoreRatingController_cohortRequirement] = v21;
  id v22 = [v14 appStoreRatingLaunchCount];
  id v23 = [v14 appStoreRatingLaunchDayPeriod];
  id v24 = [v14 appStoreRatingOldestLaunchDayPeriod];
  uint64_t v25 = &v13[OBJC_IVAR___ICAppStoreRatingController_launchRequirement];
  *(void *)uint64_t v25 = v22;
  *((void *)v25 + 1) = v23;
  *((void *)v25 + 2) = v24;
  id v26 = [v14 appStoreRatingNoteCount];
  *(void *)&v13[OBJC_IVAR___ICAppStoreRatingController_noteCountRequirement] = v26;
  [v14 appStoreRatingIdleTimeInterval];
  *(void *)&v13[OBJC_IVAR___ICAppStoreRatingController_noteEditRequirement] = v27;
  id v28 = [v14 appStoreRatingRequestDayPeriod];
  *(void *)&v13[OBJC_IVAR___ICAppStoreRatingController_requestRequirement] = v28;

  v30.id receiver = v13;
  v30.Class super_class = ObjectType;
  return [super init];
}

id sub_100493C74(void *a1, uint64_t a2)
{
  sub_10002F214(&qword_10069BA00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100529F20;
  if (a1)
  {
    v11[4] = a1;
    v11[5] = a2;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1002A43E4;
    v11[3] = &unk_10063DB90;
    a1 = _Block_copy(v11);
    swift_retain();
    swift_release();
  }
  uint64_t v6 = self;
  id v7 = [v2 actionWithCompletion:a1];
  _Block_release(a1);
  *(void *)(v5 + 32) = v7;
  v11[0] = v5;
  specialized Array._endMutation()();
  sub_1003E03EC();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v6 ic_inlineMenuWithChildren:isa];

  return v9;
}

uint64_t sub_100494060(void (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    [Strong showRecentlyDeletedMathNotes];
  }
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  if (a1) {
    a1(1, v5, v7);
  }

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for RecentlyDeletedMathNotesActivity()
{
  return self;
}

uint64_t sub_100494320()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t *sub_10049435C(uint64_t *a1, uint64_t *a2, int *a3)
{
  NSString v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *NSString v4 = *a2;
    NSString v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    id v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[7];
    id v15 = (char *)v4 + v14;
    id v16 = (char *)a2 + v14;
    uint64_t v17 = *((void *)v16 + 1);
    if (v17 == 1)
    {
      long long v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)id v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v18;
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    }
    else
    {
      *(void *)id v15 = *(void *)v16;
      *((void *)v15 + 1) = v17;
      uint64_t v19 = *((void *)v16 + 3);
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = v19;
      uint64_t v20 = *((void *)v16 + 5);
      *((void *)v15 + 4) = *((void *)v16 + 4);
      *((void *)v15 + 5) = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v21 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v4 + v21) = *(uint64_t *)((char *)a2 + v21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100494550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  if (*(void *)(a1 + *(int *)(a2 + 28) + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100494660(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(v14 + 8);
  if (v15 == 1)
  {
    long long v16 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v16;
    *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  }
  else
  {
    *(void *)uint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
    uint64_t v17 = *(void *)(v14 + 24);
    *(void *)(v13 + 16) = *(void *)(v14 + 16);
    *(void *)(v13 + 24) = v17;
    uint64_t v18 = *(void *)(v14 + 40);
    *(void *)(v13 + 32) = *(void *)(v14 + 32);
    *(void *)(v13 + 40) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v19 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100494804(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (long long *)(a2 + v15);
  uint64_t v18 = *(void *)(a1 + v15 + 8);
  uint64_t v19 = *(void *)(a2 + v15 + 8);
  if (v18 == 1)
  {
    if (v19 == 1)
    {
      long long v20 = *v17;
      long long v21 = v17[2];
      *(_OWORD *)(v16 + 16) = v17[1];
      *(_OWORD *)(v16 + 32) = v21;
      *(_OWORD *)uint64_t v16 = v20;
    }
    else
    {
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = *((void *)v17 + 1);
      *(void *)(v16 + 16) = *((void *)v17 + 2);
      *(void *)(v16 + 24) = *((void *)v17 + 3);
      *(void *)(v16 + 32) = *((void *)v17 + 4);
      *(void *)(v16 + 40) = *((void *)v17 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v19 == 1)
  {
    sub_10041AED8(v16);
    long long v23 = v17[1];
    long long v22 = v17[2];
    *(_OWORD *)uint64_t v16 = *v17;
    *(_OWORD *)(v16 + 16) = v23;
    *(_OWORD *)(v16 + 32) = v22;
  }
  else
  {
    *(void *)uint64_t v16 = *(void *)v17;
    *(void *)(v16 + 8) = *((void *)v17 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v16 + 16) = *((void *)v17 + 2);
    *(void *)(v16 + 24) = *((void *)v17 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v16 + 32) = *((void *)v17 + 4);
    *(void *)(v16 + 40) = *((void *)v17 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100494ACC(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (_OWORD *)(a1 + v12);
  uint64_t v15 = (_OWORD *)(a2 + v12);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  v14[2] = v15[2];
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100494C28(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  long long v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  if (*(void *)(a1 + v15 + 8) != 1)
  {
    uint64_t v18 = v17[1];
    if (v18 != 1)
    {
      *long long v16 = *v17;
      v16[1] = v18;
      swift_bridgeObjectRelease();
      uint64_t v20 = v17[3];
      v16[2] = v17[2];
      v16[3] = v20;
      swift_bridgeObjectRelease();
      uint64_t v21 = v17[5];
      v16[4] = v17[4];
      v16[5] = v21;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_10041AED8((uint64_t)v16);
  }
  long long v19 = *((_OWORD *)v17 + 1);
  *(_OWORD *)long long v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v19;
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
LABEL_12:
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100494E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100494E60);
}

uint64_t sub_100494E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_100494F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100494F48);
}

uint64_t sub_100494F48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10002F214((uint64_t *)&unk_1006A3E20);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for ICArchiveModel()
{
  uint64_t result = qword_1006A8CE0;
  if (!qword_1006A8CE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100495058()
{
  sub_100005808();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100495110(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10002F214(&qword_1006A8D40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015E154(a1, a1[3]);
  sub_100495B28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13[0]) = *v3;
  char v14 = 0;
  sub_10024EA04();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = (int *)type metadata accessor for ICArchiveModel();
    LOBYTE(v13[0]) = 2;
    type metadata accessor for Date();
    sub_100495D1C(&qword_10069FAD0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = &v3[v9[7]];
    long long v11 = v10[1];
    v13[0] = *v10;
    v13[1] = v11;
    v13[2] = v10[2];
    char v14 = 3;
    sub_100495C34();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&v13[0] = *(void *)&v3[v9[8]];
    char v14 = 4;
    sub_10002F214(&qword_1006A0AD0);
    sub_100495C88(&qword_1006A0AD8, &qword_1006A0AE0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&v13[0] = *(void *)&v3[v9[9]];
    char v14 = 5;
    sub_10002F214(&qword_10069FCC8);
    sub_10024EF80(&qword_1006A0670);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100495458@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v3 - 8);
  *(void *)&long long v38 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10002F214(&qword_1006A8D28);
  uint64_t v37 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ICArchiveModel();
  uint64_t v8 = (int *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v10 = 0;
  *((void *)v10 + 1) = 1;
  uint64_t v11 = (uint64_t)&v10[v8[8]];
  Date.init()();
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  int v13 = (uint64_t *)&v10[v8[9]];
  *(_OWORD *)int v13 = xmmword_10052CE20;
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  uint64_t v14 = v8[10];
  *(void *)&v10[v14] = 0;
  uint64_t v15 = v8[11];
  uint64_t v42 = v10;
  *(void *)&v10[v15] = 0;
  uint64_t v16 = a1[3];
  uint64_t v41 = a1;
  sub_10015E154(a1, v16);
  sub_100495B28();
  unint64_t v40 = v6;
  uint64_t v17 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    uint64_t v27 = (uint64_t)v41;
    uint64_t v22 = (uint64_t)v42;
  }
  else
  {
    *(void *)&long long v43 = v12;
    int v34 = v13;
    uint64_t v35 = v11;
    uint64_t v19 = v37;
    uint64_t v18 = v38;
    uint64_t v33 = v14;
    char v48 = 0;
    sub_10024ED4C();
    uint64_t v20 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v22 = (uint64_t)v42;
    *uint64_t v42 = v44;
    LOBYTE(v44) = 1;
    *(void *)(v22 + 8) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v44) = 2;
    sub_100495D1C(&qword_10069FA08, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v18, v35);
    char v48 = 3;
    sub_100495B7C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v43 = v44;
    long long v38 = v45;
    uint64_t v23 = v46;
    uint64_t v24 = v47;
    uint64_t v25 = v34;
    sub_10024BC98(*v34, v34[1]);
    long long v26 = v38;
    *(_OWORD *)uint64_t v25 = v43;
    *((_OWORD *)v25 + 1) = v26;
    v25[4] = v23;
    v25[5] = v24;
    sub_10002F214(&qword_1006A0AD0);
    char v48 = 4;
    sub_100495C88(&qword_1006A0AF0, &qword_10069F9F0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v28 = v44;
    uint64_t v29 = v33;
    swift_bridgeObjectRelease();
    *(void *)(v22 + v29) = v28;
    sub_10002F214(&qword_10069FCC8);
    char v48 = 5;
    sub_10024EF80(&qword_1006A06D8);
    objc_super v30 = v40;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v30, v20);
    uint64_t v31 = v44;
    swift_bridgeObjectRelease();
    *(void *)(v22 + v15) = v31;
    sub_100495BD0(v22, v36);
    uint64_t v27 = (uint64_t)v41;
  }
  sub_100018FE8(v27);
  return sub_10041B2AC(v22);
}

unint64_t sub_10049597C()
{
  unint64_t result = 0x6E65644965707974;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6E6F697369766572;
      break;
    case 2:
      unint64_t result = 0x4164657461657263;
      break;
    case 3:
      unint64_t result = 0x4264657461657263;
      break;
    case 4:
      unint64_t result = 1936154996;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100495A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100495F70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100495A80(uint64_t a1)
{
  unint64_t v2 = sub_100495B28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100495ABC(uint64_t a1)
{
  unint64_t v2 = sub_100495B28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100495AF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100495458(a1, a2);
}

uint64_t sub_100495B10(void *a1)
{
  return sub_100495110(a1);
}

unint64_t sub_100495B28()
{
  unint64_t result = qword_1006A8D30;
  if (!qword_1006A8D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8D30);
  }
  return result;
}

unint64_t sub_100495B7C()
{
  unint64_t result = qword_1006A8D38;
  if (!qword_1006A8D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8D38);
  }
  return result;
}

uint64_t sub_100495BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ICArchiveModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100495C34()
{
  unint64_t result = qword_1006A8D48;
  if (!qword_1006A8D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8D48);
  }
  return result;
}

uint64_t sub_100495C88(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001DFF4(&qword_1006A0AD0);
    sub_100495D1C(a2, (void (*)(uint64_t))_s3TagVMa);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100495D1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ICArchiveModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100495E30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveModel.CodingKeys()
{
  return &type metadata for ICArchiveModel.CodingKeys;
}

unint64_t sub_100495E6C()
{
  unint64_t result = qword_1006A8D50;
  if (!qword_1006A8D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8D50);
  }
  return result;
}

unint64_t sub_100495EC4()
{
  unint64_t result = qword_1006A8D58;
  if (!qword_1006A8D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8D58);
  }
  return result;
}

unint64_t sub_100495F1C()
{
  unint64_t result = qword_1006A8D60;
  if (!qword_1006A8D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8D60);
  }
  return result;
}

uint64_t sub_100495F70(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4264657461657263 && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1936154996 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100555460)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void sub_100496214(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, void, id))(a4 + 16))(a4, a1 & 1, v6);
}

id sub_100496490(uint64_t a1, uint64_t a2, void *a3, char *a4, void *a5)
{
  id result = [*(id *)&a4[OBJC_IVAR___ICEditSmartFolderActivity_smartFolder] managedObjectContext];
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = (void *)swift_allocObject();
    void v12[2] = a4;
    void v12[3] = v11;
    v12[4] = a3;
    v12[5] = a1;
    void v12[6] = a2;
    v12[7] = a5;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_100496DCC;
    *(void *)(v13 + 24) = v12;
    void v20[4] = sub_100031D5C;
    v20[5] = v13;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1107296256;
    v20[2] = sub_100031D30;
    v20[3] = &unk_10063DD60;
    uint64_t v14 = _Block_copy(v20);
    swift_bridgeObjectRetain();
    id v15 = a5;
    swift_retain();
    uint64_t v16 = a4;
    id v17 = v11;
    id v18 = a3;
    swift_release();
    [v17 performBlockAndWait:v14];

    _Block_release(v14);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

id sub_100496650(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR___ICEditSmartFolderActivity_smartFolder);
  uint64_t v11 = [v10 smartFolderQueryObjC];
  uint64_t v12 = v11;
  if (v11)
  {
    id v13 = [v11 tagSelectionWithManagedObjectContext:a2];

    id v14 = [v13 includedTagIdentifiers];
    uint64_t v12 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
  {
    type metadata accessor for ICQuery();
    id v15 = a3;
    uint64_t v16 = (void *)static ICQuery.makeQueryForNotesMatching(_:)();
    [v10 setSmartFolderQueryObjC:v16];
  }
  if (a5)
  {
    NSString v17 = String._bridgeToObjectiveC()();
    [v10 setTitle:v17];
  }
  NSString v18 = String._bridgeToObjectiveC()();
  [v10 updateChangeCountWithReason:v18];

  if (v12)
  {
    if (v12[2])
    {
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [a6 deleteUnusedHashtagsWithStandardizedContent:isa];
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }

  return [a2 ic_save];
}

uint64_t type metadata accessor for EditSmartFolderActivity()
{
  return self;
}

uint64_t sub_1004969B8()
{
  id v0 = [self mainBundle];
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v0 localizedStringForKey:v1 value:v2 table:0];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

void sub_100496A94()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    NSString v2 = (void *)Strong;
    id v3 = *(void **)&v0[OBJC_IVAR___ICEditSmartFolderActivity_smartFolder];
    id v4 = [v3 account];
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v0;
    *(void *)(v5 + 24) = v4;
    id v6 = v3;
    uint64_t v7 = v0;
    id v8 = v4;
    uint64_t v9 = sub_100303D74(v6, (uint64_t)sub_100496D20, v5);
    id v10 = [v9 ic_embedInNavigationControllerForModalPresentation];
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v7;
    v14[4] = sub_100496D60;
    v14[5] = v11;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_100262E2C;
    void v14[3] = &unk_10063DCE8;
    uint64_t v12 = _Block_copy(v14);
    id v13 = v7;
    swift_release();
    [v2 presentViewController:v10 animated:1 completion:v12];
    _Block_release(v12);
  }
}

uint64_t sub_100496C40()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100496C78(char a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  id v4 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, void, id))(v3 + 16))(v3, a1 & 1, v4);
}

uint64_t sub_100496CE0()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_100496D20(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100496490(a1, a2, a3, *(char **)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_100496D28()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100496D60()
{
  return [*(id *)(v0 + 16) activityDidFinish:1];
}

uint64_t sub_100496D74()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

id sub_100496DCC()
{
  return sub_100496650(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_100496DDC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t ShowQuickNoteIntent.init()()
{
  id v0 = [self configurationForDefaultMainDisplayMonitor];
  id v1 = [self monitorWithConfiguration:v0];

  type metadata accessor for ShowQuickNoteIntent.LayoutMonitorBox();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t type metadata accessor for ShowQuickNoteIntent.LayoutMonitorBox()
{
  return self;
}

void *ShowQuickNoteIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static ShowQuickNoteIntent.persistentIdentifier;
}

unint64_t static ShowQuickNoteIntent.persistentIdentifier.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_100496EC0()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static ShowQuickNoteIntent.title);
  sub_10003293C(v6, (uint64_t)static ShowQuickNoteIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t ShowQuickNoteIntent.title.unsafeMutableAddressor()
{
  if (qword_10069B0D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();

  return sub_10003293C(v0, (uint64_t)static ShowQuickNoteIntent.title);
}

uint64_t static ShowQuickNoteIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B0D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003293C(v2, (uint64_t)static ShowQuickNoteIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t static ShowQuickNoteIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

uint64_t static ShowQuickNoteIntent.parameterSummary.getter()
{
  uint64_t v0 = sub_10002F214(&qword_1006A8DA0);
  __chkstk_darwin(v0 - 8);
  sub_1001FD51C();
  ParameterSummaryString.init(stringLiteral:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t ShowQuickNoteIntent.perform()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10049759C, 0, 0);
}

uint64_t sub_10049759C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100497630;
  return sub_100497C48();
}

uint64_t sub_100497630()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 40) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_1004977BC;
    v6[42] = *(void *)(v2 + 24);
    return _swift_task_switch(sub_1004981C4, 0, 0);
  }
}

uint64_t sub_1004977BC()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1004978EC, 0, 0);
  }
}

uint64_t sub_1004978EC()
{
  uint64_t v1 = +[UIDevice currentDevice];
  unint64_t v2 = (unint64_t)[v1 userInterfaceIdiom];

  if ((v2 & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    id v3 = (id)ICNotesAppBundleIdentifier();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v4 = objc_allocWithZone((Class)SBSSystemNotesPresentationConfiguration);
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v4 initWithSceneBundleIdentifier:v5 userActivity:0 preferredPresentationMode:0];

    id v7 = [objc_allocWithZone((Class)SBSSystemNotesPresentationHandle) initWithConfiguration:v6];
    [v7 activate];

LABEL_4:
    static IntentResult.result<>()();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  if (sub_1004986D4(v0[3])) {
    goto LABEL_4;
  }
  uint64_t v10 = (void *)swift_task_alloc();
  v0[6] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100497AB4;
  return _swift_task_switch(sub_100499514, 0, 0);
}

uint64_t sub_100497AB4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100497BE4, 0, 0);
  }
}

uint64_t sub_100497BE4()
{
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100497C48()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for ContinuousClock.Instant();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v1[12] = v3;
  v1[13] = *(void *)(v3 - 8);
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_100497D74, 0, 0);
}

uint64_t sub_100497D74()
{
  id v1 = [*(id *)(v0 + 56) currentLayout];

  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 64);
    ContinuousClock.init()();
    *(_OWORD *)(v0 + 40) = xmmword_10053A350;
    *(void *)(v0 + 24) = 0;
    *(void *)(v0 + 16) = 0;
    *(unsigned char *)(v0 + 32) = 1;
    uint64_t v7 = sub_100499820(&qword_1006A7F88, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    dispatch thunk of Clock.now.getter();
    sub_100499820(&qword_1006A8E98, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    *(void *)(v0 + 120) = v8;
    *(void *)(v0 + 128) = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v8(v4, v6);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100497FB0;
    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 96);
    return dispatch thunk of Clock.sleep(until:tolerance:)(v11, v0 + 16, v10, v7);
  }
}

uint64_t sub_100497FB0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 120))(*(void *)(v2 + 88), *(void *)(v2 + 64));
    uint64_t v3 = sub_100498108;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 104);
    uint64_t v4 = *(void *)(v2 + 112);
    uint64_t v6 = *(void *)(v2 + 96);
    (*(void (**)(void, void))(v2 + 120))(*(void *)(v2 + 88), *(void *)(v2 + 64));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v3 = sub_100497D74;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100498108()
{
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1004981A4(uint64_t a1)
{
  *(void *)(v1 + 336) = a1;
  return _swift_task_switch(sub_1004981C4, 0, 0);
}

uint64_t sub_1004981C4()
{
  if (sub_100498AC4(v0[42]))
  {
    uint64_t v1 = v0[42];
    sub_10002F214((uint64_t *)&unk_1006A49E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100527F30;
    v0[37] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v0[38] = v3;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for Bool;
    *(unsigned char *)(inited + 72) = 1;
    v0[39] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v0[40] = v4;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 168) = &type metadata for Bool;
    *(unsigned char *)(inited + 144) = 1;
    sub_100168CCC(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = [self optionsWithDictionary:isa];
    v0[43] = v6;

    sub_100498D64(v1);
    id v7 = [self serviceWithDefaultShellEndpoint];
    v0[44] = v7;
    if (v7)
    {
      uint64_t v8 = v7;
      NSString v9 = String._bridgeToObjectiveC()();
      v0[45] = v9;
      swift_bridgeObjectRelease();
      v0[2] = v0;
      v0[7] = v0 + 41;
      v0[3] = sub_1004984C8;
      uint64_t v10 = swift_continuation_init();
      v0[32] = _NSConcreteStackBlock;
      v0[33] = 0x40000000;
      v0[34] = sub_100498F1C;
      v0[35] = &unk_10063DDC0;
      v0[36] = v10;
      [v8 openApplication:v9 withOptions:v6 completion:v0 + 32];
      return _swift_continuation_await(v0 + 2);
    }

    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1004984C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 368) = v1;
  if (v1) {
    uint64_t v2 = sub_100498650;
  }
  else {
    uint64_t v2 = sub_1004985D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004985D8()
{
  uint64_t v1 = *(void **)(v0 + 352);
  uint64_t v2 = *(void **)(v0 + 360);

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100498650()
{
  uint64_t v1 = (void *)v0[45];
  uint64_t v3 = (void *)v0[43];
  uint64_t v2 = (void *)v0[44];
  swift_willThrow();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004986D4(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(a1 + 16) currentLayout];
  if (result)
  {
    uint64_t v2 = (void *)result;
    id v3 = [(id)result elements];

    sub_1004997E0();
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v4 >> 62) {
      goto LABEL_19;
    }
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v5)
    {
      uint64_t v6 = 4;
      while (1)
      {
        id v7 = (v4 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v4 + 8 * v6);
        uint64_t v8 = v7;
        uint64_t v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1)) {
          break;
        }
        id v10 = [v7 identifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        if (v11 == 0xD000000000000020 && v13 == 0x800000010055FFE0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return 1;
        }
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();

        if (v14)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        ++v6;
        if (v9 == v5) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_19:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t sub_1004988B8()
{
  uint64_t v0 = sub_10002F214(&qword_1006A8DA0);
  __chkstk_darwin(v0 - 8);
  ParameterSummaryString.init(stringLiteral:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_100498984(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  _OWORD v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100161724;
  return _swift_task_switch(sub_10049759C, 0, 0);
}

uint64_t sub_100498A34@<X0>(uint64_t *a1@<X8>)
{
  id v2 = [self configurationForDefaultMainDisplayMonitor];
  id v3 = [self monitorWithConfiguration:v2];

  type metadata accessor for ShowQuickNoteIntent.LayoutMonitorBox();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *a1 = result;
  return result;
}

uint64_t sub_100498AC4(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(a1 + 16) currentLayout];
  if (result)
  {
    id v2 = (void *)result;
    id v3 = [(id)result elements];

    sub_1004997E0();
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v4 >> 62) {
      goto LABEL_30;
    }
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v5)
    {
      uint64_t v6 = 4;
      while (1)
      {
        id v7 = (v4 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v4 + 8 * v6);
        uint64_t v8 = v7;
        uint64_t v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1)) {
          break;
        }
        id v10 = [v7 identifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v14 == v13) {
          goto LABEL_22;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_23;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v17 == v13)
        {
LABEL_22:
          swift_bridgeObjectRelease();
LABEL_23:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_24:

          return 1;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_23;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v19 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_24;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if (v20)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        ++v6;
        if (v9 == v5) {
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_30:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_21:
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

void *sub_100498D64(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 16) currentLayout];
  id v2 = v1;
  if (v1)
  {
    id v3 = [v1 elements];

    sub_1004997E0();
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v4 >> 62) {
      goto LABEL_19;
    }
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v5)
    {
      for (uint64_t i = 4; ; ++i)
      {
        id v7 = (v4 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v4 + 8 * i);
        uint64_t v8 = v7;
        uint64_t v9 = i - 3;
        if (__OFADD__(i - 4, 1)) {
          break;
        }
        if ([v7 isUIApplicationElement] && objc_msgSend(v8, "layoutRole") == (id)1)
        {
          swift_bridgeObjectRelease();
          id v10 = [v8 bundleIdentifier];
          if (v10)
          {
            uint64_t v11 = v10;
            id v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();

            return v2;
          }

          return 0;
        }

        if (v9 == v5)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      __break(1u);
LABEL_19:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return v2;
}

uint64_t sub_100498F1C(uint64_t result, void *a2, void *a3)
{
  if (a3)
  {
    sub_10002F214(&qword_1006A3D90);
    swift_allocError();
    *unint64_t v4 = a3;
    id v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(void **)(*(void *)(*(void *)(result + 32) + 64) + 40) = a2;
    id v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100498FDC()
{
  id v1 = *(void **)(v0 + 16);
  [v1 invalidate];

  return swift_deallocClassInstance();
}

uint64_t sub_10049902C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_100499130, 0, 0);
}

uint64_t sub_100499130()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_100499820(&qword_1006A7F88, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_100499820(&qword_1006A8E98, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  id v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = sub_1004992D0;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_1004992D0()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_10049948C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_10049948C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004994F8()
{
  return _swift_task_switch(sub_100499514, 0, 0);
}

uint64_t sub_100499514()
{
  id v1 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v1 initWithServiceName:v2 viewControllerClassName:v3];

  id v5 = [objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext) init];
  id v6 = [self newHandleWithDefinition:v4 configurationContext:v5];
  id v7 = [objc_allocWithZone((Class)SBSRemoteAlertActivationContext) init];
  [v6 activateWithContext:v7];

  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

unint64_t sub_100499674()
{
  unint64_t result = qword_1006A8DC8;
  if (!qword_1006A8DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8DC8);
  }
  return result;
}

unint64_t sub_1004996CC()
{
  unint64_t result = qword_1006A8DD0;
  if (!qword_1006A8DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8DD0);
  }
  return result;
}

uint64_t sub_100499720()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10049973C()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ShowQuickNoteIntent()
{
  return &type metadata for ShowQuickNoteIntent;
}

uint64_t sub_100499768()
{
  return sub_10001DFB0(&qword_1006A8E80, &qword_1006A8E88);
}

uint64_t sub_1004997A4()
{
  return sub_10001DFB0((unint64_t *)&qword_10069DE30, (uint64_t *)&unk_10069C980);
}

unint64_t sub_1004997E0()
{
  unint64_t result = qword_1006A8E90;
  if (!qword_1006A8E90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1006A8E90);
  }
  return result;
}

uint64_t sub_100499820(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100499868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = a3;
  uint64_t v5 = type metadata accessor for URL();
  *(void *)(v3 + 88) = v5;
  *(void *)(v3 + 96) = *(void *)(v5 - 8);
  *(void *)(v3 + 104) = swift_task_alloc();
  *(void *)(v3 + 112) = sub_10002F214(&qword_10069D938);
  *(void *)(v3 + 120) = swift_task_alloc();
  sub_10002F214(&qword_10069B1D0);
  *(void *)(v3 + 128) = swift_task_alloc();
  sub_10002F214(&qword_10069B310);
  *(void *)(v3 + 136) = swift_task_alloc();
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = swift_task_alloc();
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 160) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 176) = v6;
  *(unsigned char *)(v3 + 248) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 40);
  type metadata accessor for MainActor();
  *(void *)(v3 + 208) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 216) = v8;
  *(void *)(v3 + 224) = v7;
  return _swift_task_switch(sub_100499A28, v8, v7);
}

uint64_t sub_100499A28()
{
  id v1 = *(void **)(v0 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v2 = [v1 note];
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 128);
  IntentParameter.wrappedValue.getter();
  uint64_t v5 = type metadata accessor for NoteEntity(0);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 96);
  if (v6)
  {
    sub_10002B754(*(void *)(v0 + 128), &qword_10069B1D0);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v11(v7, 1, 1, v9);
  }
  else
  {
    (*(void (**)(void, uint64_t, void))(v10 + 16))(*(void *)(v0 + 152), v8 + *(int *)(v5 + 20), *(void *)(v0 + 88));
    sub_10002B754(v8, &qword_10069B1D0);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v11(v7, 0, 1, v9);
  }
  uint64_t v12 = *(void *)(v0 + 144);
  uint64_t v49 = *(void *)(v0 + 152);
  uint64_t v50 = v3;
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v15 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 96);
  id v17 = [v3 objectID];
  id v18 = [v17 URIRepresentation];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  v11(v12, 0, 1, v15);
  uint64_t v19 = v13 + *(int *)(v14 + 48);
  sub_1001BC0FC(v49, v13);
  sub_1001BC0FC(v12, v19);
  char v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v20(v13, 1, v15) == 1)
  {
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v22 = *(void *)(v0 + 88);
    sub_10002B754(*(void *)(v0 + 144), &qword_10069B310);
    sub_10002B754(v21, &qword_10069B310);
    int v23 = v20(v19, 1, v22);
    uint64_t v24 = v50;
    if (v23 == 1)
    {
      sub_10002B754(*(void *)(v0 + 120), &qword_10069B310);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v25 = *(void *)(v0 + 88);
  sub_1001BC0FC(*(void *)(v0 + 120), *(void *)(v0 + 136));
  int v26 = v20(v19, 1, v25);
  uint64_t v28 = *(void *)(v0 + 144);
  uint64_t v27 = *(void *)(v0 + 152);
  uint64_t v29 = *(void *)(v0 + 136);
  if (v26 == 1)
  {
    uint64_t v31 = *(void *)(v0 + 88);
    uint64_t v30 = *(void *)(v0 + 96);
    sub_10002B754(*(void *)(v0 + 144), &qword_10069B310);
    sub_10002B754(v27, &qword_10069B310);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    uint64_t v24 = v50;
LABEL_10:
    sub_10002B754(*(void *)(v0 + 120), &qword_10069D938);
    goto LABEL_14;
  }
  uint64_t v32 = *(void *)(v0 + 120);
  uint64_t v33 = *(void *)(v0 + 96);
  uint64_t v34 = *(void *)(v0 + 104);
  uint64_t v35 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v34, v19, v35);
  sub_10049A358();
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v37(v34, v35);
  sub_10002B754(v28, &qword_10069B310);
  sub_10002B754(v27, &qword_10069B310);
  v37(v29, v35);
  sub_10002B754(v32, &qword_10069B310);
  uint64_t v24 = v50;
  if (v36)
  {
LABEL_12:
    id v38 = [*(id *)(v0 + 80) textView];
    if (v38)
    {
      uint64_t v39 = v38;
      id v40 = [v38 selectedRange];
      uint64_t v42 = v41;

      char v43 = 0;
      *(void *)&long long v44 = v40;
      *((void *)&v44 + 1) = v42;
      goto LABEL_16;
    }
  }
LABEL_14:

LABEL_15:
  char v43 = *(unsigned char *)(v0 + 248);
  long long v44 = *(_OWORD *)(v0 + 176);
LABEL_16:
  long long v45 = *(uint64_t **)(v0 + 72);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 32) = v44;
  *(unsigned char *)(v0 + 48) = v43;
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v0 + 192);
  v45[3] = sub_10002F214((uint64_t *)&unk_10069E270);
  v45[4] = sub_10049A2FC();
  uint64_t v46 = sub_10015E0F0(v45);
  uint64_t v47 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v47;
  *uint64_t v47 = v0;
  v47[1] = sub_100499EEC;
  return InsertNoteLinkIntent.perform()((uint64_t)v46);
}

uint64_t sub_100499EEC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 224);
  uint64_t v4 = *(void *)(v2 + 216);
  if (v0) {
    uint64_t v5 = sub_10049A118;
  }
  else {
    uint64_t v5 = sub_10049A028;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10049A028()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10049A118()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1001CBD9C(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10049A214()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10049A24C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100161724;
  return sub_100499868(a1, a2, v6);
}

unint64_t sub_10049A2FC()
{
  unint64_t result = qword_1006A8EB8;
  if (!qword_1006A8EB8)
  {
    sub_10001DFF4((uint64_t *)&unk_10069E270);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8EB8);
  }
  return result;
}

unint64_t sub_10049A358()
{
  unint64_t result = qword_1006A4D60;
  if (!qword_1006A4D60)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A4D60);
  }
  return result;
}

uint64_t ChangeSettingIntent.changeOperation.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ChangeOperation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  IntentParameter.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void *ChangeSettingIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static ChangeSettingIntent.persistentIdentifier;
}

unint64_t static ChangeSettingIntent.persistentIdentifier.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_10049A4CC()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static ChangeSettingIntent.title);
  sub_10003293C(v6, (uint64_t)static ChangeSettingIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t ChangeSettingIntent.title.unsafeMutableAddressor()
{
  if (qword_10069B0D8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();

  return sub_10003293C(v0, (uint64_t)static ChangeSettingIntent.title);
}

uint64_t static ChangeSettingIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B0D8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003293C(v2, (uint64_t)static ChangeSettingIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t static ChangeSettingIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

uint64_t static ChangeSettingIntent.parameterSummary.getter()
{
  uint64_t v0 = sub_10002F214(&qword_1006A8EC0);
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_10002F214(&qword_1006A8EC8);
  __chkstk_darwin(v1);
  sub_1001FD618();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A8ED0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._countAndFlagsBits = 0x2065687420;
  v3._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A8ED8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v4._countAndFlagsBits = 0x676E697474657320;
  v4._object = (void *)0xE800000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v4);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t ChangeSettingIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[31] = a4;
  v5[32] = a5;
  v5[29] = a2;
  v5[30] = a3;
  v5[28] = a1;
  uint64_t v6 = type metadata accessor for ConfirmationActionName();
  v5[33] = v6;
  v5[34] = *(void *)(v6 - 8);
  v5[35] = swift_task_alloc();
  uint64_t v7 = sub_10002F214((uint64_t *)&unk_1006A6970);
  v5[36] = v7;
  v5[37] = *(void *)(v7 - 8);
  v5[38] = swift_task_alloc();
  sub_10002F214((uint64_t *)&unk_10069C9B0);
  v5[39] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for IntentDialog();
  v5[40] = v8;
  v5[41] = *(void *)(v8 - 8);
  v5[42] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v5[43] = v9;
  v5[44] = *(void *)(v9 - 8);
  v5[45] = swift_task_alloc();
  v5[46] = swift_task_alloc();
  v5[47] = swift_task_alloc();
  v5[48] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ChangeOperation();
  v5[49] = v10;
  v5[50] = *(void *)(v10 - 8);
  v5[51] = swift_task_alloc();
  v5[52] = swift_task_alloc();
  return _swift_task_switch(sub_10049AF2C, 0, 0);
}

uint64_t sub_10049AF2C()
{
  uint64_t v65 = v0;
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 400);
  IntentParameter.wrappedValue.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  int v5 = v4;
  int v6 = enum case for ChangeOperation.disable(_:);
  if (v4 == enum case for ChangeOperation.disable(_:))
  {
    int v61 = enum case for ChangeOperation.disable(_:);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    AppDependency.wrappedValue.getter();
    Logger.init(subsystem:category:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    int log = v5;
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      IntentParameter.wrappedValue.getter();
      unint64_t v16 = 0x8000000100555230;
      uint64_t v17 = 0xD000000000000013;
      switch(*(unsigned char *)(v0 + 467))
      {
        case 1:
          uint64_t v17 = 0xD000000000000017;
          id v18 = "auto sort checked items";
          goto LABEL_21;
        case 2:
          uint64_t v17 = 0x6361206C61636F6CLL;
          unint64_t v16 = 0xED0000746E756F63;
          break;
        case 3:
          uint64_t v17 = 0xD000000000000015;
          id v18 = "mention notifications";
          goto LABEL_21;
        case 4:
          uint64_t v17 = 0xD000000000000016;
          id v18 = "resume last quick note";
LABEL_21:
          unint64_t v16 = (unint64_t)(v18 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v41 = *(void *)(v0 + 352);
      uint64_t v55 = *(void *)(v0 + 344);
      uint64_t v57 = *(void *)(v0 + 384);
      *(void *)(v0 + 216) = sub_10045DA1C(v17, v16, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Disabling %{public}s setting", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v57, v55);
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v0 + 384);
    uint64_t v23 = *(void *)(v0 + 344);
    uint64_t v24 = *(void *)(v0 + 352);

    swift_release_n();
    goto LABEL_13;
  }
  if (v4 == enum case for ChangeOperation.enable(_:))
  {
    int log = v4;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    AppDependency.wrappedValue.getter();
    Logger.init(subsystem:category:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    int v61 = v6;
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      IntentParameter.wrappedValue.getter();
      unint64_t v10 = 0x8000000100555230;
      uint64_t v11 = 0xD000000000000013;
      switch(*(unsigned char *)(v0 + 468))
      {
        case 1:
          uint64_t v11 = 0xD000000000000017;
          uint64_t v12 = "auto sort checked items";
          goto LABEL_26;
        case 2:
          uint64_t v11 = 0x6361206C61636F6CLL;
          unint64_t v10 = 0xED0000746E756F63;
          break;
        case 3:
          uint64_t v11 = 0xD000000000000015;
          uint64_t v12 = "mention notifications";
          goto LABEL_26;
        case 4:
          uint64_t v11 = 0xD000000000000016;
          uint64_t v12 = "resume last quick note";
LABEL_26:
          unint64_t v10 = (unint64_t)(v12 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v42 = *(void *)(v0 + 352);
      uint64_t v56 = *(void *)(v0 + 344);
      uint64_t v58 = *(void *)(v0 + 376);
      *(void *)(v0 + 200) = sub_10045DA1C(v11, v10, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Enabling %{public}s setting", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v58, v56);
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v0 + 376);
    uint64_t v23 = *(void *)(v0 + 344);
    uint64_t v24 = *(void *)(v0 + 352);

    swift_release_n();
LABEL_13:
    swift_release_n();
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
LABEL_28:
    *(unsigned char *)(v0 + 470) = log != v61;
    IntentParameter.wrappedValue.getter();
    switch(*(unsigned char *)(v0 + 465))
    {
      case 2:
        swift_bridgeObjectRelease();
        if (log == v61) {
          goto LABEL_33;
        }
        goto LABEL_34;
      default:
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (log != v61 || (v43 & 1) == 0) {
          goto LABEL_34;
        }
LABEL_33:
        id v44 = [self sharedInstance];
        unsigned __int8 v45 = [v44 hasSyncingAccount];

        if (v45)
        {
LABEL_34:
          uint64_t v46 = swift_task_alloc();
          *(void *)(v0 + 432) = v46;
          *(void *)uint64_t v46 = v0;
          *(void *)(v46 + 8) = sub_10049C4F0;
          uint64_t v47 = *(void *)(v0 + 312);
          long long v48 = *(_OWORD *)(v0 + 248);
          *(_OWORD *)(v46 + 32) = *(_OWORD *)(v0 + 232);
          *(_OWORD *)(v46 + 48) = v48;
          *(void *)(v46 + 24) = v47;
          uint64_t v21 = sub_10049D1E8;
          goto LABEL_35;
        }
        sub_100173F8C();
        swift_allocError();
        *uint64_t v49 = 10;
        swift_willThrow();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
        break;
    }
LABEL_45:
    return v50();
  }
  if (v4 != enum case for ChangeOperation.toggle(_:))
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    AppDependency.wrappedValue.getter();
    Logger.init(subsystem:category:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_type_t v59 = v26;
      loga = v25;
      uint64_t v28 = *(void *)(v0 + 400);
      uint64_t v27 = *(void *)(v0 + 408);
      uint64_t v54 = *(void *)(v0 + 392);
      uint64_t v29 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      IntentParameter.wrappedValue.getter();
      uint64_t v30 = ChangeOperation.rawValue.getter();
      unint64_t v32 = v31;
      uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v33(v27, v54);
      *(void *)(v0 + 192) = sub_10045DA1C(v30, v32, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2082;
      IntentParameter.wrappedValue.getter();
      unint64_t v34 = 0x8000000100555230;
      uint64_t v35 = 0xD000000000000013;
      switch(*(unsigned char *)(v0 + 464))
      {
        case 1:
          uint64_t v35 = 0xD000000000000017;
          char v36 = "auto sort checked items";
          goto LABEL_42;
        case 2:
          uint64_t v35 = 0x6361206C61636F6CLL;
          unint64_t v34 = 0xED0000746E756F63;
          break;
        case 3:
          uint64_t v35 = 0xD000000000000015;
          char v36 = "mention notifications";
          goto LABEL_42;
        case 4:
          uint64_t v35 = 0xD000000000000016;
          char v36 = "resume last quick note";
LABEL_42:
          unint64_t v34 = (unint64_t)(v36 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v51 = *(void *)(v0 + 352);
      uint64_t v60 = *(void *)(v0 + 360);
      uint64_t v53 = *(void *)(v0 + 344);
      *(void *)(v0 + 184) = sub_10045DA1C(v35, v34, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v59, "Unknown change operation type %{public}s — unable to change %{public}s setting", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v60, v53);
      v33(*(void *)(v0 + 416), *(void *)(v0 + 392));
    }
    else
    {
      uint64_t v37 = *(void *)(v0 + 400);
      uint64_t v39 = *(void *)(v0 + 352);
      uint64_t v38 = *(void *)(v0 + 360);
      uint64_t v40 = *(void *)(v0 + 344);

      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
      (*(void (**)(void, void))(v37 + 8))(*(void *)(v0 + 416), *(void *)(v0 + 392));
    }
    static IntentResult.result<>()();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_45;
  }
  uint64_t v19 = swift_task_alloc();
  *(void *)(v0 + 424) = v19;
  *(void *)uint64_t v19 = v0;
  *(void *)(v19 + 8) = sub_10049BD64;
  long long v20 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v19 + 40) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v19 + 24) = v20;
  uint64_t v21 = sub_10049CE54;
LABEL_35:
  return _swift_task_switch(v21, 0, 0);
}

uint64_t sub_10049BD64(char a1)
{
  *(unsigned char *)(*(void *)v1 + 469) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10049BE64, 0, 0);
}

uint64_t sub_10049BE64()
{
  uint64_t v28 = v0;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  AppDependency.wrappedValue.getter();
  Logger.init(subsystem:category:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v26 = v2;
    uint64_t v3 = swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    IntentParameter.wrappedValue.getter();
    unint64_t v4 = 0x8000000100555230;
    uint64_t v5 = 0xD000000000000013;
    switch(*(unsigned char *)(v0 + 466))
    {
      case 1:
        uint64_t v5 = 0xD000000000000017;
        int v6 = "auto sort checked items";
        goto LABEL_8;
      case 2:
        unint64_t v4 = 0xED0000746E756F63;
        uint64_t v5 = 0x6361206C61636F6CLL;
        break;
      case 3:
        uint64_t v5 = 0xD000000000000015;
        int v6 = "mention notifications";
        goto LABEL_8;
      case 4:
        uint64_t v5 = 0xD000000000000016;
        int v6 = "resume last quick note";
LABEL_8:
        unint64_t v4 = (unint64_t)(v6 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    int v23 = *(unsigned __int8 *)(v0 + 469);
    uint64_t v10 = *(void *)(v0 + 352);
    uint64_t v24 = *(void *)(v0 + 344);
    uint64_t v25 = *(void *)(v0 + 368);
    *(void *)(v0 + 176) = sub_10045DA1C(v5, v4, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2082;
    if (v23) {
      uint64_t v11 = 0x64656C6261736964;
    }
    else {
      uint64_t v11 = 0x64656C62616E65;
    }
    if (v23) {
      unint64_t v12 = 0xE800000000000000;
    }
    else {
      unint64_t v12 = 0xE700000000000000;
    }
    *(void *)(v0 + 208) = sub_10045DA1C(v11, v12, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v26, "Toggling %{public}s setting to %{public}s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v25, v24);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v8 = *(void *)(v0 + 344);
    uint64_t v9 = *(void *)(v0 + 352);

    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  int v13 = *(unsigned __int8 *)(v0 + 469);
  *(unsigned char *)(v0 + 470) = v13 ^ 1;
  IntentParameter.wrappedValue.getter();
  switch(*(unsigned char *)(v0 + 465))
  {
    case 2:
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_20;
      }
      goto LABEL_21;
    default:
      int v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v14 & v13) != 1) {
        goto LABEL_21;
      }
LABEL_20:
      id v15 = [self sharedInstance];
      unsigned __int8 v16 = [v15 hasSyncingAccount];

      if (v16)
      {
LABEL_21:
        uint64_t v17 = swift_task_alloc();
        *(void *)(v0 + 432) = v17;
        *(void *)uint64_t v17 = v0;
        *(void *)(v17 + 8) = sub_10049C4F0;
        uint64_t v18 = *(void *)(v0 + 312);
        long long v19 = *(_OWORD *)(v0 + 248);
        *(_OWORD *)(v17 + 32) = *(_OWORD *)(v0 + 232);
        *(_OWORD *)(v17 + 48) = v19;
        *(void *)(v17 + 24) = v18;
        return _swift_task_switch(sub_10049D1E8, 0, 0);
      }
      else
      {
        sub_100173F8C();
        swift_allocError();
        *long long v20 = 10;
        swift_willThrow();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
        return v21();
      }
  }
}

uint64_t sub_10049C4F0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10049C5EC, 0, 0);
}

uint64_t sub_10049C5EC()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 312);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10002B754(v3, (uint64_t *)&unk_10069C9B0);
    uint64_t v4 = swift_task_alloc();
    *(void *)(v0 + 456) = v4;
    *(void *)uint64_t v4 = v0;
    *(void *)(v4 + 8) = sub_10049CA78;
    char v5 = *(unsigned char *)(v0 + 470);
    long long v6 = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v4 + 24) = v6;
    *(unsigned char *)(v4 + 89) = v5;
    return _swift_task_switch(sub_10049D588, 0, 0);
  }
  else
  {
    long long v14 = *(_OWORD *)(v0 + 248);
    long long v15 = *(_OWORD *)(v0 + 232);
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 336), v3, v1);
    *(_OWORD *)(v0 + 112) = v15;
    *(_OWORD *)(v0 + 128) = v14;
    static IntentResult.result<>(dialog:)();
    static ConfirmationActionName.continue.getter();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v7;
    unint64_t v8 = sub_1001FD618();
    uint64_t v9 = sub_10001DFB0(&qword_1006A5390, (uint64_t *)&unk_1006A6970);
    void *v7 = v0;
    v7[1] = sub_10049C820;
    uint64_t v10 = *(void *)(v0 + 304);
    uint64_t v11 = *(void *)(v0 + 280);
    uint64_t v12 = *(void *)(v0 + 288);
    return AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)(v10, v11, 1, &type metadata for ChangeSettingIntent, v12, v8, v9);
  }
}

uint64_t sub_10049C820()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 448) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[37];
    uint64_t v3 = v2[38];
    uint64_t v5 = v2[36];
    (*(void (**)(void, void))(v2[34] + 8))(v2[35], v2[33]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    long long v6 = sub_10049CD30;
  }
  else
  {
    uint64_t v8 = v2[37];
    uint64_t v7 = v2[38];
    uint64_t v9 = v2[36];
    (*(void (**)(void, void))(v2[34] + 8))(v2[35], v2[33]);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    long long v6 = sub_10049C9A4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10049C9A4()
{
  (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 456) = v1;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = sub_10049CA78;
  char v2 = *(unsigned char *)(v0 + 470);
  long long v3 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 89) = v2;
  return _swift_task_switch(sub_10049D588, 0, 0);
}

uint64_t sub_10049CA78()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10049CC40, 0, 0);
  }
}

uint64_t sub_10049CC40()
{
  static IntentResult.result<>()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10049CD30()
{
  (*(void (**)(void, void))(v0[41] + 8))(v0[42], v0[40]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10049CE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  _OWORD v4[4] = a2;
  return _swift_task_switch(sub_10049CE54, 0, 0);
}

uint64_t sub_10049CE54()
{
  IntentParameter.wrappedValue.getter();
  switch(*(unsigned char *)(v0 + 80))
  {
    case 1:
      unsigned __int8 v1 = [self checklistAutoSortEnabled];
      goto LABEL_9;
    case 2:
      unsigned __int8 v1 = sub_10049E018();
      goto LABEL_9;
    case 3:
      AppDependency.wrappedValue.getter();
      uint64_t v2 = *(void **)(v0 + 16);
      id v3 = [v2 modernManagedObjectContext];
      *(void *)(v0 + 56) = v3;

      uint64_t v4 = swift_allocObject();
      *(void *)(v0 + 64) = v4;
      *(void *)(v4 + 16) = v3;
      v3;
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v5;
      void *v5 = v0;
      v5[1] = sub_10049D044;
      return NSManagedObjectContext.perform<A>(_:)(v0 + 81, sub_1004A067C, v4, &type metadata for Bool);
    case 4:
      unsigned __int8 v1 = sub_1004A0550();
      goto LABEL_9;
    default:
      unsigned __int8 v1 = [self shouldAutoConvertToTag];
LABEL_9:
      long long v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
      uint64_t v7 = v1 & 1;
      return v6(v7);
  }
}

uint64_t sub_10049D044()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10049D15C, 0, 0);
}

uint64_t sub_10049D15C()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 81);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10049D1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return _swift_task_switch(sub_10049D1E8, 0, 0);
}

uint64_t sub_10049D1E8()
{
  IntentParameter.wrappedValue.getter();
  if (*(unsigned char *)(v0 + 88) == 2)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v1 = *(void *)(v0 + 56);
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    AppDependency.wrappedValue.getter();
    uint64_t v5 = *(void **)(v0 + 16);
    id v6 = [v5 modernManagedObjectContext];
    *(void *)(v0 + 64) = v6;

    uint64_t v7 = (void *)swift_allocObject();
    *(void *)(v0 + 72) = v7;
    _OWORD v7[2] = v6;
    v7[3] = v4;
    v7[4] = v3;
    v7[5] = v2;
    v7[6] = v1;
    v6;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v8;
    uint64_t v9 = sub_10002F214((uint64_t *)&unk_10069C9B0);
    *uint64_t v8 = v0;
    v8[1] = sub_10049D3E8;
    uint64_t v10 = *(void *)(v0 + 24);
    return NSManagedObjectContext.perform<A>(_:)(v10, sub_1004A052C, v7, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 24);
    uint64_t v12 = type metadata accessor for IntentDialog();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    int v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_10049D3E8()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10049D500, 0, 0);
}

uint64_t sub_10049D500()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10049D560(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = a3;
  *(unsigned char *)(v5 + 89) = a1;
  return _swift_task_switch(sub_10049D588, 0, 0);
}

uint64_t sub_10049D588()
{
  IntentParameter.wrappedValue.getter();
  switch(*(unsigned char *)(v0 + 88))
  {
    case 1:
      [self setChecklistAutoSortEnabled:*(unsigned __int8 *)(v0 + 89)];
      goto LABEL_12;
    case 2:
      uint64_t v1 = (void *)swift_task_alloc();
      *(void *)(v0 + 56) = v1;
      *uint64_t v1 = v0;
      v1[1] = sub_1001C3F70;
      uint64_t v2 = *(void *)(v0 + 40);
      uint64_t v3 = *(void *)(v0 + 48);
      uint64_t v4 = *(void *)(v0 + 24);
      uint64_t v5 = *(void *)(v0 + 32);
      char v6 = *(unsigned char *)(v0 + 89);
      return sub_10049E358(v6, v4, v5, v2, v3);
    case 3:
      char v8 = *(unsigned char *)(v0 + 89);
      AppDependency.wrappedValue.getter();
      uint64_t v9 = *(void **)(v0 + 16);
      id v10 = [v9 modernManagedObjectContext];
      *(void *)(v0 + 64) = v10;

      uint64_t v11 = swift_allocObject();
      *(void *)(v0 + 72) = v11;
      *(void *)(v11 + 16) = v10;
      *(unsigned char *)(v11 + 24) = v8;
      v10;
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 80) = v12;
      void *v12 = v0;
      v12[1] = sub_10049D844;
      return NSManagedObjectContext.perform<A>(_:)(v12, sub_1004A03D4, v11, (char *)&type metadata for () + 8);
    case 4:
      int v13 = self;
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      NSString v15 = String._bridgeToObjectiveC()();
      [v13 setObject:isa forKey:v15];

      goto LABEL_12;
    default:
      [self setShouldAutoConvertToTag:*(unsigned __int8 *)(v0 + 89)];
LABEL_12:
      uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
      return v16();
  }
}

uint64_t sub_10049D844()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10049D95C, 0, 0);
}

uint64_t sub_10049D95C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10049D9C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v64 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v63 = (char *)&v56 - v8;
  uint64_t v9 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v62 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = type metadata accessor for ChangeOperation();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v56 - v17;
  id v19 = [self localAccountInContext:a1];
  if (v19)
  {
    long long v20 = v19;
    uint64_t v65 = a2;
    if ((uint64_t)[v19 visibleNotesCount] <= 0) {
      goto LABEL_6;
    }
    uint64_t v61 = v2;
    IntentParameter.wrappedValue.getter();
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for ChangeOperation.enable(_:), v12);
    sub_1001BEA08(&qword_1006A8F48);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
    v22(v16, v12);
    v22(v18, v12);
    if (v21)
    {
LABEL_6:

      uint64_t v25 = type metadata accessor for IntentDialog();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v65, 1, 1, v25);
    }
    else
    {
      id v59 = self;
      id v26 = [v59 mainBundle];
      NSString v27 = String._bridgeToObjectiveC()();
      id v28 = [v26 localizedStringForKey:v27 value:0 table:0];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_10002F214((uint64_t *)&unk_1006A1950);
      uint64_t v29 = swift_allocObject();
      long long v58 = xmmword_100524D10;
      *(_OWORD *)(v29 + 16) = xmmword_100524D10;
      id v30 = [v20 localizedName];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      *(void *)(v29 + 56) = &type metadata for String;
      unint64_t v57 = sub_1001BBFD8();
      *(void *)(v29 + 64) = v57;
      *(void *)(v29 + 32) = v31;
      *(void *)(v29 + 40) = v33;
      uint64_t v60 = static String.localizedStringWithFormat(_:_:)();
      uint64_t v35 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v36 = [v59 mainBundle];
      NSString v37 = String._bridgeToObjectiveC()();
      id v38 = [v36 localizedStringForKey:v37 value:0 table:0];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = v58;
      id v40 = [v20 localizedName];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      unint64_t v44 = v57;
      *(void *)(v39 + 56) = &type metadata for String;
      *(void *)(v39 + 64) = v44;
      *(void *)(v39 + 32) = v41;
      *(void *)(v39 + 40) = v43;
      uint64_t v45 = static String.localizedStringWithFormat(_:_:)();
      uint64_t v47 = v46;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v48._countAndFlagsBits = 0;
      v48._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v48);
      v49._countAndFlagsBits = v60;
      v49._object = v35;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v49);
      swift_bridgeObjectRelease();
      v50._countAndFlagsBits = 0;
      v50._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v50);
      LocalizedStringResource.init(stringInterpolation:)();
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v51._countAndFlagsBits = 0;
      v51._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v51);
      v52._countAndFlagsBits = v45;
      v52._object = v47;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v52);
      swift_bridgeObjectRelease();
      v53._countAndFlagsBits = 0;
      v53._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v53);
      LocalizedStringResource.init(stringInterpolation:)();
      uint64_t v54 = v65;
      IntentDialog.init(full:supporting:)();

      uint64_t v55 = type metadata accessor for IntentDialog();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 0, 1, v55);
    }
  }
  else
  {
    uint64_t v23 = type metadata accessor for IntentDialog();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a2, 1, 1, v23);
  }
}

uint64_t sub_10049E018()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self sharedContext];
  if (!v4
    || (v5 = v4, id v6 = [v4 managedObjectContext],
                 v5,
                 !v6))
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    AppDependency.wrappedValue.getter();
    Logger.init(subsystem:category:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Cannot get modern managed object context — returning false for local account setting", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return 0;
  }
  id v19 = 0;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &v19;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1004A04B8;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_100031D5C;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100031D30;
  aBlock[3] = &unk_10063DF60;
  uint64_t v9 = _Block_copy(aBlock);
  id v10 = v6;
  swift_retain();
  swift_release();
  [v10 performBlockAndWait:v9];

  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v9 & 1) == 0)
  {
    uint64_t v12 = v19;
    BOOL v13 = v19 != 0;
    swift_release();
    if (v12) {

    }
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10049E358(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 72) = a4;
  *(void *)(v5 + 80) = a5;
  *(void *)(v5 + 56) = a2;
  *(void *)(v5 + 64) = a3;
  *(unsigned char *)(v5 + 128) = a1;
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v5 + 88) = v6;
  *(void *)(v5 + 96) = *(void *)(v6 - 8);
  *(void *)(v5 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_10049E420, 0, 0);
}

uint64_t sub_10049E420()
{
  uint64_t v23 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 128);
  if (v1 == (sub_10049E018() & 1))
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    AppDependency.wrappedValue.getter();
    Logger.init(subsystem:category:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 88);
    if (v7)
    {
      uint64_t v21 = *(void *)(v0 + 104);
      int v11 = *(unsigned __int8 *)(v0 + 128);
      uint64_t v20 = *(void *)(v0 + 88);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v22 = v13;
      if (v11) {
        uint64_t v14 = 0x64656C62616E65;
      }
      else {
        uint64_t v14 = 0x64656C6261736964;
      }
      if (v11) {
        unint64_t v15 = 0xE700000000000000;
      }
      else {
        unint64_t v15 = 0xE800000000000000;
      }
      *(void *)(v0 + 48) = sub_10045DA1C(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Local account is already %s, so no work is needed", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v21, v20);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  else
  {
    if (*(unsigned char *)(v0 + 128) == 1)
    {
      uint64_t v2 = swift_task_alloc();
      *(void *)(v0 + 112) = v2;
      *(void *)uint64_t v2 = v0;
      *(void *)(v2 + 8) = sub_10049E7A0;
      long long v3 = *(_OWORD *)(v0 + 56);
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(v0 + 72);
      *(_OWORD *)(v2 + 24) = v3;
      id v4 = sub_10049EA54;
    }
    else
    {
      uint64_t v16 = swift_task_alloc();
      *(void *)(v0 + 120) = v16;
      *(void *)uint64_t v16 = v0;
      *(void *)(v16 + 8) = sub_10049E8B8;
      long long v17 = *(_OWORD *)(v0 + 56);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)(v0 + 72);
      *(_OWORD *)(v16 + 24) = v17;
      id v4 = sub_10049EDC0;
    }
    return _swift_task_switch(v4, 0, 0);
  }
}

uint64_t sub_10049E7A0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10049E8B8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_10049E9D0(void **a1, uint64_t a2)
{
  id v3 = [self localAccountInContext:a2];
  uint64_t v4 = *a1;
  *a1 = v3;
}

uint64_t sub_10049EA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  _OWORD v4[4] = a2;
  return _swift_task_switch(sub_10049EA54, 0, 0);
}

uint64_t sub_10049EA54()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  AppDependency.wrappedValue.getter();
  uint64_t v5 = (void *)v0[2];
  id v6 = [v5 modernManagedObjectContext];
  v0[7] = v6;

  BOOL v7 = (void *)swift_allocObject();
  v0[8] = v7;
  _OWORD v7[2] = v6;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v2;
  v7[6] = v1;
  v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10049EBB0;
  return NSManagedObjectContext.perform<A>(_:)(v8, sub_1004A03F8, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_10049EBB0()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10049ED30;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10049ECCC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10049ECCC()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10049ED30()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10049ED9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  _OWORD v4[4] = a2;
  return _swift_task_switch(sub_10049EDC0, 0, 0);
}

uint64_t sub_10049EDC0()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  AppDependency.wrappedValue.getter();
  uint64_t v5 = (void *)v0[2];
  id v6 = [v5 modernManagedObjectContext];
  v0[7] = v6;

  BOOL v7 = (void *)swift_allocObject();
  v0[8] = v7;
  _OWORD v7[2] = v6;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v2;
  v7[6] = v1;
  v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10049EF1C;
  return NSManagedObjectContext.perform<A>(_:)(v8, sub_1004A0428, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_10049EF1C()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004A0698;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1004A069C;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10049F038(void *a1)
{
  uint64_t v2 = self;
  id v3 = [v2 localAccountInContext:a1];
  if (v3)
  {
  }
  else
  {

    id v12 = 0;
    unsigned int v4 = [a1 save:&v12];
    id v5 = v12;
    if (v4)
    {
      id v6 = self;
      id v7 = v5;
      NSString v8 = String._bridgeToObjectiveC()();
      [v6 setBool:1 forKey:v8];

      [self updateNotesOnLockScreenWhenAccountSupportingLockScreenAdded];
      AppDependency.wrappedValue.getter();
      id v9 = v12;
      id v10 = [v12 modernCrossProcessChangeCoordinator];

      [v10 postAccountDidChangeNotification];
    }
    else
    {
      id v11 = v12;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_10049F1D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a4;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v29 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = self;
  id v10 = [v9 localAccountInContext:a1];
  if (v10)
  {
    id v11 = v10;
    uint64_t v28 = v4;
    uint64_t v12 = (uint64_t)[v10 visibleNotesCount];
    if (v12 >= 1)
    {
      uint64_t v13 = (void *)v12;
      NSString v27 = a1;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      AppDependency.wrappedValue.getter();
      Logger.init(subsystem:category:)();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 134217984;
        id v31 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Local account has %ld note(s). Deleting notes and local account.", v16, 0xCu);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
      a1 = v27;
    }
    id v17 = v11;
    [v9 deleteAccount:v17];
    id v31 = 0;
    unsigned int v18 = [a1 save:&v31];
    id v19 = v31;
    if (v18)
    {
      uint64_t v20 = self;
      id v21 = v19;
      NSString v22 = String._bridgeToObjectiveC()();
      [v20 setBool:0 forKey:v22];

      [v20 setBool:1 forKey:kICDefaultsKeyDidMigrateLocalAccount];
      [self disableNotesOnLockScreenIfNecessary];
      AppDependency.wrappedValue.getter();
      id v23 = v31;
      id v24 = [v31 modernCrossProcessChangeCoordinator];

      [v24 postAccountDidChangeNotification];
    }
    else
    {
      id v25 = v31;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_10049F57C(uint64_t a1@<X0>, unsigned __int8 *a2@<X8>)
{
  id v3 = [self defaultAccountInContext:a1];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [self sharedController];
    unsigned __int8 v6 = [v5 isSubscribedToMentionNotificationsForAccount:v4];
  }
  else
  {
    unsigned __int8 v6 = 0;
  }
  *a2 = v6;
}

void sub_10049F630(uint64_t a1, char a2)
{
  id v3 = [self defaultAccountInContext:a1];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [self sharedController];
    [v5 updateSubscriptionPreferenceForMentionNotifications:a2 & 1 forAccount:v4];
  }
}

uint64_t sub_10049F6D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ChangeOperation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  IntentParameter.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t sub_10049F7C8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v7 = v1[2];
  uint64_t v6 = v1[3];
  NSString v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *NSString v8 = v2;
  v8[1] = sub_100161724;
  return ChangeSettingIntent.perform()(a1, v4, v5, v7, v6);
}

char *sub_10049F888@<X0>(char **a1@<X8>)
{
  uint64_t result = _s11MobileNotes19ChangeSettingIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

char *_s11MobileNotes19ChangeSettingIntentVACycfC_0()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v54 = v0;
  uint64_t v55 = v1;
  __chkstk_darwin(v0);
  Swift::String v53 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  Swift::String v52 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v51 = (char *)&v35 - v6;
  uint64_t v7 = sub_10002F214(&qword_10069B218);
  __chkstk_darwin(v7 - 8);
  Swift::String v49 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v9 - 8);
  Swift::String v50 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Locale();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v16 - 8);
  uint64_t v17 = type metadata accessor for LocalizedStringResource();
  uint64_t v46 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v48 = sub_10002F214(&qword_10069B220);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v19 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  unsigned int v41 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v42 = v11;
  v20(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  uint64_t v43 = v20;
  uint64_t v44 = v12 + 104;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  id v36 = v14;
  v20(v14, v19, v11);
  id v21 = v50;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  NSString v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56);
  uint64_t v45 = v18 + 56;
  uint64_t v47 = v22;
  v22(v21, 0, 1, v17);
  uint64_t v23 = type metadata accessor for ChangeOperation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v49, 1, 1, v23);
  uint64_t v24 = type metadata accessor for IntentDialog();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  NSString v37 = v26;
  uint64_t v38 = v25 + 56;
  v26(v51, 1, 1, v24);
  v26(v52, 1, 1, v24);
  unsigned int v39 = enum case for InputConnectionBehavior.default(_:);
  NSString v27 = *(void (**)(void))(v55 + 104);
  v55 += 104;
  id v40 = (void (*)(char *, void, uint64_t))v27;
  v27(v53);
  sub_1001BEA08(&qword_10069B228);
  dispatch thunk of static CaseIterable.allCases.getter();
  sub_1001BEA08(&qword_10069B230);
  uint64_t v28 = v50;
  Swift::String v49 = (char *)IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
  uint64_t v48 = sub_10002F214(&qword_10069B560);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v29 = v36;
  uint64_t v30 = v41;
  uint64_t v31 = v42;
  uint64_t v32 = v43;
  v43(v36, v41, v42);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v32(v29, v30, v31);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v47(v28, 0, 1, v46);
  LOBYTE(v58) = 5;
  uint64_t v33 = v37;
  v37(v51, 1, 1, v24);
  v33(v52, 1, 1, v24);
  v40(v53, v39, v54);
  sub_100158634();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
  sub_10002F214((uint64_t *)&unk_10069CE60);
  unint64_t v56 = 0xD000000000000021;
  unint64_t v57 = 0x8000000100549290;
  AnyHashable.init<A>(_:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  sub_10002F214((uint64_t *)&unk_10069B130);
  unint64_t v56 = 0xD000000000000024;
  unint64_t v57 = 0x8000000100549260;
  AnyHashable.init<A>(_:)();
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  return v49;
}

uint64_t sub_1004A0174@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1004A01A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1004A01D0()
{
  unint64_t result = qword_1006A8F00;
  if (!qword_1006A8F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8F00);
  }
  return result;
}

unint64_t sub_1004A0230()
{
  unint64_t result = qword_1006A8F08;
  if (!qword_1006A8F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8F08);
  }
  return result;
}

unint64_t sub_1004A0288()
{
  unint64_t result = qword_1006A8F10;
  if (!qword_1006A8F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A8F10);
  }
  return result;
}

uint64_t sub_1004A02DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1004A02F8()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ChangeSettingIntent()
{
  return &type metadata for ChangeSettingIntent;
}

uint64_t sub_1004A0324()
{
  return sub_10001DFB0(&qword_1006A8F20, &qword_1006A8F28);
}

uint64_t sub_1004A0360()
{
  return sub_10001DFB0((unint64_t *)&qword_10069DE30, (uint64_t *)&unk_10069C980);
}

uint64_t sub_1004A039C()
{
  return _swift_deallocObject(v0, 25, 7);
}

void sub_1004A03D4()
{
  sub_10049F630(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1004A03F8()
{
  return sub_1004A0454((uint64_t (*)(void, void, void, void, void))sub_10049F038);
}

uint64_t sub_1004A0428()
{
  return sub_1004A0454((uint64_t (*)(void, void, void, void, void))sub_10049F1D8);
}

uint64_t sub_1004A0454(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1004A0480()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1004A04B8()
{
  sub_10049E9D0(*(void ***)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1004A04C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004A04D4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1004A052C@<X0>(uint64_t a1@<X8>)
{
  return sub_10049D9C0(*(void *)(v1 + 16), a1);
}

uint64_t sub_1004A0550()
{
  uint64_t v0 = self;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1001BC02C((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_10002B754((uint64_t)v6, &qword_10069B4D0);
  }
  return 1;
}

uint64_t sub_1004A0644()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004A067C(unsigned __int8 *a1@<X8>)
{
  sub_10049F57C(*(void *)(v1 + 16), a1);
}

uint64_t sub_1004A06A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_1004A06C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((void *)&v12 + 1) = swift_getObjectType();
    *(void *)&long long v11 = a2;
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return sub_100015BE0((uint64_t)&v11);
}

void sub_1004A075C(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_1004A0770(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = a1;
  if (*(unsigned __int8 *)(a2 + 32) == a1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = v2 - 1;
  while (v5 != result)
  {
    int v6 = *(unsigned __int8 *)(a2 + 33 + result++);
    if (v6 == v3) {
      return result;
    }
  }
  return 0;
}

void sub_1004A07D4(uint64_t a1, unint64_t a2)
{
}

void sub_1004A07E8(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v6 = *(id *)(a2 + 32);
      }
      uint64_t v7 = v6;
      sub_100031418(0, a3);
      char v8 = static NSObject.== infix(_:_:)();

      if ((v8 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          a3 = (unint64_t *)(i + 1);
          if (__OFADD__(i, 1)) {
            break;
          }
          if (a3 == (unint64_t *)v5) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (((unint64_t)a3 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if ((unint64_t)a3 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v10 = *(id *)(a2 + 32 + 8 * (void)a3);
          }
          long long v11 = v10;
          char v12 = static NSObject.== infix(_:_:)();

          if (v12) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v5) {
          continue;
        }
      }
      return;
    }
  }
}

void sub_1004A0984(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1004A11C0();
  if (a1)
  {
    id v5 = [objc_allocWithZone((Class)NSMutableAttributedString) initWithAttributedString:a1];
    id v6 = [v5 string];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v7 = objc_allocWithZone((Class)NSString);
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [v7 initWithString:v8];

    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 rangeOfString:v10];
    uint64_t v13 = v12;

    if (v11 == (id)NSNotFound.getter() || !*(void *)&v2[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menu])
    {
      if (v2[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_preservesMenuLineHeight] == 1)
      {
        sub_100168480((uint64_t)_swiftEmptyArrayStorage);
        id v16 = [objc_allocWithZone((Class)NSMutableParagraphStyle) init];
        id v17 = sub_1004A1490();
        double v18 = sub_1001BEA4C();

        [v16 setMinimumLineHeight:v18];
        uint64_t v19 = NSBaselineOffsetAttributeName;
        uint64_t v20 = (char *)sub_1004A1490();
        uint64_t v21 = OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font;
        [*(id *)&v20[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font] lineHeight];
        double v23 = *(double *)&v20[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_minimumHeight];
        if (v22 + 8.0 >= v23)
        {

          double v26 = 4.0;
        }
        else
        {
          [*(id *)&v20[v21] lineHeight];
          double v25 = v24;

          double v26 = (v23 - v25) * 0.5;
        }
        NSString v37 = &type metadata for CGFloat;
        *(double *)&long long v36 = v26;
        sub_100032E84(&v36, v35);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_1002BC8DC(v35, v19, isUniquelyReferenced_nonNull_native);

        swift_bridgeObjectRelease();
        NSString v37 = (void *)sub_100031418(0, &qword_1006A8FB0);
        *(void *)&long long v36 = v16;
        sub_100032E84(&v36, v35);
        uint64_t v28 = NSParagraphStyleAttributeName;
        id v29 = v16;
        char v30 = swift_isUniquelyReferenced_nonNull_native();
        sub_1002BC8DC(v35, v28, v30);

        swift_bridgeObjectRelease();
        type metadata accessor for Key(0);
        sub_1001BBF80();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v32 = [v5 ic_range];
        [v5 addAttributes:isa range:v32, v33];
      }
    }
    else
    {
      id v14 = sub_1004A1490();
      id v15 = [self attributedStringWithAttachment:v14];

      [v5 replaceCharactersInRange:v11 withAttributedString:v13];
    }
    v38.id receiver = v2;
    v38.Class super_class = ObjectType;
    id v34 = v5;
    [super setAttributedText:v34];
  }
  else
  {
    __break(1u);
  }
}

id sub_1004A0D84(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  id v7 = v6;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v14 = OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menu;
  *(void *)&v7[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menu] = 0;
  v7[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_preservesMenuLineHeight] = 0;
  id v15 = &v7[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_fontSymbolicTraits];
  *(_DWORD *)id v15 = 0;
  v15[4] = 1;
  *(void *)&v7[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment] = 0;
  id v16 = *(void **)&v7[v14];
  *(void *)&v7[v14] = a1;
  id v17 = v7;
  id v18 = a1;

  uint64_t v19 = &v17[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menuReplacementSubstring];
  *(void *)uint64_t v19 = a2;
  *((void *)v19 + 1) = a3;
  *(void *)&v17[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_textStyle] = a4;
  *(_DWORD *)id v15 = a5;
  v15[4] = BYTE4(a5) & 1;
  *(void *)&v17[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_foregroundColor] = a6;
  id v20 = a4;
  id v21 = a6;

  v33.id receiver = v17;
  v33.Class super_class = ObjectType;
  id v22 = [super initWithFrame:0.0 textContainer:0.0];
  [v22 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v22 setEditable:0];
  [v22 setSelectable:0];
  [v22 setScrollEnabled:0];
  [v22 setShowsHorizontalScrollIndicator:0];
  [v22 setShowsVerticalScrollIndicator:0];
  [v22 setAdjustsFontForContentSizeCategory:0];
  [v22 setInsetsLayoutMarginsFromSafeArea:0];
  double left = UIEdgeInsetsZero.left;
  double bottom = UIEdgeInsetsZero.bottom;
  double right = UIEdgeInsetsZero.right;
  [v22 setContentInset:UIEdgeInsetsZero.top, left, bottom, right];
  [v22 setContentInsetAdjustmentBehavior:2];
  id v26 = [v22 textContainer];
  [v26 setLineFragmentPadding:0.0];

  NSString v27 = self;
  id v28 = v22;
  id v29 = [v27 clearColor];
  [v28 setBackgroundColor:v29];

  id v30 = v28;
  [v30 setTextContainerInset:UIEdgeInsetsZero.top, left, bottom, right];

  return v30;
}

void sub_1004A11C0()
{
  id v1 = [objc_allocWithZone((Class)type metadata accessor for InlineMenuButtonTextAttachment()) init];
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment];
  *(void *)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment] = v1;

  int v3 = (char *)sub_1004A1490();
  id v4 = [v0 traitCollection];
  id v5 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_traitCollection];
  *(void *)&v3[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_traitCollection] = v4;

  if (v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_fontSymbolicTraits + 4])
  {
    id v6 = (char *)sub_1004A1490();
    id v7 = [self preferredFontForTextStyle:*(void *)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_textStyle]];
  }
  else
  {
    uint64_t v8 = *(unsigned int *)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_fontSymbolicTraits];
    id v6 = (char *)sub_1004A1490();
    id v7 = [self ic_preferredFontForStyle:*(&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_textStyle]) symbolicTraits:v8];
    if (!v7)
    {
      __break(1u);
      return;
    }
  }
  id v9 = *(void **)&v6[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font];
  *(void *)&v6[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font] = v7;

  NSString v10 = (char *)sub_1004A1490();
  id v11 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_foregroundColor];
  uint64_t v12 = *(void **)&v10[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_foregroundColor];
  *(void *)&v10[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_foregroundColor] = v11;
  id v13 = v11;

  uint64_t v14 = (char *)sub_1004A1490();
  id v15 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menu];
  id v16 = *(void **)&v14[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_menu];
  *(void *)&v14[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_menu] = v15;
  id v17 = v15;

  id v28 = (char *)sub_1004A1490();
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;
  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)())
  {
    double v22 = 28.0;
    if (v20 == v21) {
      goto LABEL_12;
    }
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double v22 = 28.0;
  if ((v23 & 1) == 0)
  {
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;
    if (v24 != static String._unconditionallyBridgeFromObjectiveC(_:)() || (double v22 = 26.0, v26 != v27))
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        double v22 = 26.0;
      }
      else {
        double v22 = 0.0;
      }
    }
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(double *)&v28[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_minimumHeight] = v22;
}

id sub_1004A1490()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)type metadata accessor for InlineMenuButtonTextAttachment()) init];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1004A1618()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v24.id receiver = v0;
  v24.Class super_class = ObjectType;
  id result = [super attributedText];
  if (!result)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v3 = result;
  id v4 = [result string];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = objc_allocWithZone((Class)NSMutableAttributedString);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithString:v6];

  uint64_t v8 = sub_1004A1924();
  if (!v8) {
    return v7;
  }
  id v9 = (void *)v8;
  v21.Class super_class = ObjectType;
  uint64_t v22 = 0;
  char v23 = 1;
  v21.id receiver = v0;
  id result = [super attributedText];
  if (!result) {
    goto LABEL_12;
  }
  NSString v10 = result;
  id v11 = [result string];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = String.count.getter();
  swift_bridgeObjectRelease();
  v20.id receiver = v0;
  v20.Class super_class = ObjectType;
  id result = [super attributedText];
  if (result)
  {
    id v13 = result;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = &v22;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_1004A244C;
    *(void *)(v15 + 24) = v14;
    v19[4] = sub_1004A2448;
    v19[5] = v15;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 1107296256;
    void v19[2] = sub_1004A06C8;
    v19[3] = &unk_10063E0A0;
    id v16 = _Block_copy(v19);
    swift_retain();
    swift_release();
    [v13 enumerateAttribute:NSAttachmentAttributeName inRange:0 options:v12 usingBlock:v16];

    _Block_release(v16);
    LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
    id result = (id)swift_release();
    if ((v13 & 1) == 0)
    {
      uint64_t v17 = v22;
      char v18 = v23;
      swift_release();
      if ((v18 & 1) == 0) {
        [v7 addAttribute:UIAccessibilityTokenAttachment value:v9 range:v17];
      }

      return v7;
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1004A1924()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v23 = 0;
  char v24 = 1;
  v22.id receiver = v0;
  v22.Class super_class = ObjectType;
  id v2 = [super attributedText];
  if (!v2) {
    goto LABEL_13;
  }
  id v3 = v2;
  id v4 = [v2 string];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = String.count.getter();
  swift_bridgeObjectRelease();
  v21.id receiver = v0;
  v21.Class super_class = ObjectType;
  id v6 = [super attributedText];
  if (!v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v23;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1004A23E8;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_1004A2400;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004A06C8;
  aBlock[3] = &unk_10063E028;
  NSString v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v7 enumerateAttribute:NSAttachmentAttributeName inRange:0 options:v5 usingBlock:v10];

  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v12 = v23;
  char v13 = v24;
  swift_release();
  if (v13) {
    return 0;
  }
  id v14 = [v0 layoutManager];
  id v15 = sub_1004A1490();
  if (v12 < 0)
  {
LABEL_15:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v16 = v15;
  id v17 = [v14 viewProviderForTextAttachment:v15 characterIndex:v12];

  if (v17)
  {
    id v18 = [v17 view];

    if (v18)
    {
      self;
      uint64_t result = swift_dynamicCastObjCClass();
      if (result) {
        return result;
      }
    }
  }
  return 0;
}

uint64_t sub_1004A1CB4()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v2 = (void *)sub_1004A1924();

  if (v2)
  {
    id v3 = [self mainBundle];
    v11._uint64_t countAndFlagsBits = 0xD000000000000035;
    v11._object = (void *)0x80000001005603D0;
    v4._object = (void *)0x80000001005603A0;
    v4._uint64_t countAndFlagsBits = 0xD000000000000025;
    v5._uint64_t countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v11)._countAndFlagsBits;
  }
  else
  {
    v10.id receiver = v0;
    v10.Class super_class = ObjectType;
    [super accessibilityHint];
    if (!v7) {
      return 0;
    }
    id v3 = v7;
    uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v8 = countAndFlagsBits;

  return v8;
}

void sub_1004A1E90()
{
  uint64_t v0 = (void *)sub_1004A1924();
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = [v0 menu];
    if (!v2)
    {

      return;
    }
    id v3 = v2;
    id v4 = [v2 children];
    sub_100031418(0, (unint64_t *)&qword_1006A4D30);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v6 = [v3 selectedElements];
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8)
      {
LABEL_5:
        if ((v7 & 0xC000000000000001) != 0)
        {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v9)
          {
            __break(1u);
            goto LABEL_28;
          }
          id v10 = *(id *)(v7 + 32);
        }
        uint64_t v8 = v10;
        swift_bridgeObjectRelease();
        sub_1004A07E8((uint64_t)v8, v5, (unint64_t *)&qword_1006A4D30);
        if (v12)
        {

          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v9 = v11 + 1;
        if (!__OFADD__(v11, 1))
        {
          if (!(v5 >> 62))
          {
            uint64_t v13 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v13) {
              goto LABEL_12;
            }
            goto LABEL_30;
          }
LABEL_29:
          uint64_t v18 = v9;
          swift_bridgeObjectRetain();
          uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v9 = v18;
          if (v13)
          {
LABEL_12:
            if (v9 == 0x8000000000000000 && v13 == -1) {
              goto LABEL_34;
            }
            unint64_t v14 = v9 % v13;
            if ((v5 & 0xC000000000000001) == 0)
            {
              if ((v14 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v14 < *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                id v15 = *(id *)(v5 + 8 * v14 + 32);
                goto LABEL_18;
              }
              __break(1u);
LABEL_34:
              __break(1u);
              return;
            }
LABEL_31:
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_18:
            id v16 = v15;
            swift_bridgeObjectRelease();
            self;
            uint64_t v17 = swift_dynamicCastObjCClass();
            if (v17)
            {
              [v1 sendAction:v17];
            }
            else
            {
            }
            return;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v8 = *(void **)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8) {
        goto LABEL_5;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1004A2228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1002510BC(a1, (uint64_t)v8);
  if (v9)
  {
    sub_100031418(0, (unint64_t *)&unk_1006A5250);
    if (swift_dynamicCast())
    {

      *(void *)a5 = a2;
      *(unsigned char *)(a5 + 8) = 0;
    }
  }
  else
  {
    sub_100015BE0((uint64_t)v8);
  }
}

uint64_t type metadata accessor for InlineMenuButtonTextView()
{
  return self;
}

uint64_t sub_1004A23D8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004A23E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1004A2228(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_1004A23F0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004A2400()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1004A2428()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004A2438()
{
  return _swift_deallocObject(v0, 32, 7);
}

objc_class *sub_1004A2458()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menu;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menu);
  if (v2)
  {
    id v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menu);
  }
  else
  {
    uint64_t v4 = v0;
    sub_100031418(0, (unint64_t *)&unk_1006A4D40);
    sub_10002F214(&qword_10069BA00);
    UIMenuElementSize preferredElementSize = swift_allocObject();
    *(_OWORD *)(preferredElementSize + 16) = xmmword_100524CE0;
    *(void *)(preferredElementSize + 32) = sub_1004A281C();
    *(void *)(preferredElementSize + 40) = sub_1004A298C();
    specialized Array._endMutation()();
    v6._uint64_t countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v16.value.super.Class isa = 0;
    v16.is_nil = 0;
    Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v6, (Swift::String_optional)0, v16, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v14).super.super.isa;
    UIMenuElementSize v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100524CE0;
    *(void *)(v8 + 32) = sub_1004A26B4();
    *(void *)(v8 + 40) = isa;
    specialized Array._endMutation()();
    v9._uint64_t countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    v17.value.super.Class isa = 0;
    v17.is_nil = 0;
    v10.super.super.Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v9, (Swift::String_optional)0, v17, 0, 0xFFFFFFFFFFFFFFFFLL, v8, v15).super.super.isa;
    uint64_t v11 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v10;
    id v3 = v10.super.super.isa;

    id v2 = 0;
  }
  id v12 = v2;
  return v3;
}

void sub_1004A25C8()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  if (v1)
  {
    self;
    id v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      id v1 = [v2 inclusionType];
      unsigned int v3 = 0;
      goto LABEL_6;
    }
    id v1 = 0;
  }
  unsigned int v3 = 1;
LABEL_6:
  uint64_t v4 = (void *)sub_1004A26B4();
  [v4 setState:v3];

  id v5 = sub_1004A281C();
  Swift::String v6 = v5;
  unsigned int v7 = v3 ^ 1;
  if (v1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  [v5 setState:v8];

  id v9 = sub_1004A298C();
  id v11 = v9;
  if (v1 == (id)1) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0;
  }
  [v9 setState:v10];
}

id sub_1004A26B4()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff];
  }
  else
  {
    uint64_t v4 = v0;
    sub_100031418(0, (unint64_t *)&unk_10069B9F0);
    id v5 = [self mainBundle];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 localizedStringForKey:v6 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(swift_allocObject() + 16) = v0;
    uint64_t v8 = v0;
    id v9 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    uint64_t v10 = *(void **)&v0[v1];
    *(void *)&v4[v1] = v9;
    id v3 = v9;

    id v2 = 0;
  }
  id v11 = v2;
  return v3;
}

id sub_1004A281C()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude];
  }
  else
  {
    uint64_t v4 = v0;
    sub_100031418(0, (unint64_t *)&unk_10069B9F0);
    id v5 = [self mainBundle];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 localizedStringForKey:v6 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(swift_allocObject() + 16) = v0;
    uint64_t v8 = v0;
    id v9 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    uint64_t v10 = *(void **)&v0[v1];
    *(void *)&v4[v1] = v9;
    id v3 = v9;

    id v2 = 0;
  }
  id v11 = v2;
  return v3;
}

id sub_1004A298C()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude];
  }
  else
  {
    uint64_t v4 = v0;
    sub_100031418(0, (unint64_t *)&unk_10069B9F0);
    id v5 = [self mainBundle];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 localizedStringForKey:v6 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(swift_allocObject() + 16) = v0;
    uint64_t v8 = v0;
    id v9 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    uint64_t v10 = *(void **)&v0[v1];
    *(void *)&v4[v1] = v9;
    id v3 = v9;

    id v2 = 0;
  }
  id v11 = v2;
  return v3;
}

uint64_t sub_1004A2AFC()
{
  return sub_100031418(0, (unint64_t *)&unk_1006A9000);
}

void sub_1004A2B28(uint64_t a1, char *a2)
{
  id v3 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(void *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  [a2 setNeedsUpdateConfiguration];
  sub_1004A25C8();
  uint64_t v4 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v4)
  {
    uint64_t v5 = swift_retain();
    v4(v5);
    sub_10002E70C((uint64_t)v4);
  }
}

uint64_t sub_1004A2BC4(uint64_t a1, void *a2)
{
  (*(void (**)(void))((swift_isaMask & *a2) + 0x1D0))();
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithInclusionType:0];
  uint64_t v4 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(void *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v3;
  id v5 = v3;

  [a2 setNeedsUpdateConfiguration];
  uint64_t result = sub_1004A25C8();
  id v7 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v7)
  {
    uint64_t v8 = swift_retain();
    v7(v8);
    return sub_10002E70C((uint64_t)v7);
  }
  return result;
}

uint64_t sub_1004A2CCC(uint64_t a1, void *a2)
{
  (*(void (**)(void))((swift_isaMask & *a2) + 0x1D0))();
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithInclusionType:1];
  uint64_t v4 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(void *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v3;
  id v5 = v3;

  [a2 setNeedsUpdateConfiguration];
  uint64_t result = sub_1004A25C8();
  id v7 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v7)
  {
    uint64_t v8 = swift_retain();
    v7(v8);
    return sub_10002E70C((uint64_t)v7);
  }
  return result;
}

id sub_1004A2E74(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menu] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude] = 0;
  v5.id receiver = v1;
  v5.Class super_class = (Class)type metadata accessor for FolderComposerFilterCellInclusion();
  id v3 = [super initWithCoder:a1];

  return v3;
}

void sub_1004A2F1C()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude));
  uint64_t v1 = *(void **)(v0
                + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude);
}

id sub_1004A2F7C()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for FolderComposerFilterCellInclusion();
  [super dealloc];
}

uint64_t type metadata accessor for FolderComposerFilterCellInclusion()
{
  return self;
}

objc_class *sub_1004A3040()
{
  return sub_1004A2458();
}

void sub_1004A3064()
{
}

uint64_t sub_1004A3088()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004A30C0(uint64_t a1)
{
  return sub_1004A2CCC(a1, *(void **)(v1 + 16));
}

uint64_t sub_1004A30C8(uint64_t a1)
{
  return sub_1004A2BC4(a1, *(void **)(v1 + 16));
}

void sub_1004A30D0(uint64_t a1)
{
  sub_1004A2B28(a1, *(char **)(v1 + 16));
}

void sub_1004A30E0(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100031418(0, (unint64_t *)&unk_1006A53A0);
  ICFolderObject<>.entityIdentifier.getter();
  id v4 = [a1 objectID];
  id v5 = [v4 URIRepresentation];

  NSString v6 = (int *)type metadata accessor for FolderEntity();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = [a1 localizedTitle];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  id v11 = (uint64_t *)(a2 + v6[6]);
  *id v11 = v8;
  v11[1] = v10;
  id v12 = [a1 account];
  id v13 = [v12 localizedName];

  if (v13)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  UIImage_optional v17 = (uint64_t *)(a2 + v6[7]);
  *UIImage_optional v17 = v14;
  v17[1] = v16;
  id v18 = a1;
  *(unsigned char *)(a2 + v6[9]) = [v18 folderType] == 2;
  unsigned __int8 v19 = [v18 isSharedViaICloud];

  *(unsigned char *)(a2 + v6[8]) = v19;
}

void sub_1004A3274(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002F214(qword_1006A9080);
  ICFolderObject<>.entityIdentifier.getter();
  id v4 = [a1 objectID];
  id v5 = [v4 URIRepresentation];

  NSString v6 = (int *)type metadata accessor for FolderEntity();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = [a1 localizedTitle];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  id v11 = (uint64_t *)(a2 + v6[6]);
  *id v11 = v8;
  v11[1] = v10;
  id v12 = [a1 account];
  id v13 = [v12 localizedName];

  if (v13)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  UIImage_optional v17 = (uint64_t *)(a2 + v6[7]);
  *UIImage_optional v17 = v14;
  v17[1] = v16;
  self;
  uint64_t v18 = swift_dynamicCastObjCClass();
  if (v18)
  {
    unsigned __int8 v19 = (void *)v18;
    id v20 = a1;
    *(unsigned char *)(a2 + v6[9]) = [v19 folderType] == 2;
    LOBYTE(v19) = [v19 isSharedViaICloud];

    *(unsigned char *)(a2 + v6[8]) = (_BYTE)v19;
  }
  else
  {

    *(unsigned char *)(a2 + v6[9]) = 0;
    *(unsigned char *)(a2 + v6[8]) = 0;
  }
}

uint64_t sub_1004A3438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  *(void *)(v4 + 64) = a1;
  sub_10002F214(&qword_10069B260);
  *(void *)(v4 + 88) = swift_task_alloc();
  *(void *)(v4 + 96) = swift_task_alloc();
  *(void *)(v4 + 104) = swift_task_alloc();
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v6;
  *(void *)(v4 + 48) = *(void *)(a2 + 32);
  type metadata accessor for MainActor();
  *(void *)(v4 + 112) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v4 + 120) = v8;
  *(void *)(v4 + 128) = v7;
  return _swift_task_switch(sub_1004A3534, v8, v7);
}

uint64_t sub_1004A3534()
{
  uint64_t v1 = *(void *)(v0 + 104);
  IntentParameter.wrappedValue.getter();
  uint64_t v2 = type metadata accessor for FolderEntity();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = sub_1004A4EB8(v1);
  if (v4 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(v0 + 72))(v5);
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      *(void *)(v0 + 56) = &OBJC_PROTOCOL___ICFolderObject;
      uint64_t v8 = swift_dynamicCastObjCProtocolConditional();
      if (v8)
      {
        uint64_t v9 = (void *)v8;
        uint64_t v11 = *(void *)(v0 + 88);
        uint64_t v10 = *(void *)(v0 + 96);
        id v12 = v7;
        sub_1004A3274(v9, v10);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v10, 0, 1, v2);
        sub_1004A4F68(v10, v11);
        IntentParameter.wrappedValue.setter();
        sub_1004A4EB8(v10);
      }
    }
  }
  id v13 = *(uint64_t **)(v0 + 64);
  _OWORD v13[3] = sub_10002F214((uint64_t *)&unk_10069E270);
  v13[4] = sub_1004A4F18((unint64_t *)&qword_1006A8EB8, (uint64_t *)&unk_10069E270);
  uint64_t v14 = sub_10015E0F0(v13);
  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v15;
  *unint64_t v15 = v0;
  v15[1] = sub_1004A372C;
  return CreateNoteIntent.perform()((uint64_t)v14);
}

uint64_t sub_1004A372C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  uint64_t v4 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v5 = sub_1004A38F0;
  }
  else {
    uint64_t v5 = sub_1004A3868;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1004A3868()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004A38F0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_release();
  sub_1001CBD9C(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1004A3984(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _OWORD v4[2] = a1;
  v4[3] = a3;
  uint64_t v5 = *a2;
  _OWORD v4[4] = a4;
  v4[5] = v5;
  return _swift_task_switch(sub_1004A39AC, 0, 0);
}

uint64_t sub_1004A39AC()
{
  IntentParameter.wrappedValue.getter();
  *(_DWORD *)(v0 + 80) = ParagraphStyle.namedStyle.getter(*(unsigned char *)(v0 + 84));
  *(void *)(v0 + 48) = type metadata accessor for MainActor();
  *(void *)(v0 + 56) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1004A3A5C, v2, v1);
}

uint64_t sub_1004A3A5C()
{
  uint64_t v1 = *(unsigned int *)(v0 + 80);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 24);
  swift_release();
  v2(v1);
  return _swift_task_switch(sub_1004A3AE0, 0, 0);
}

uint64_t sub_1004A3AE0()
{
  uint64_t v1 = (uint64_t *)v0[2];
  v1[3] = sub_10002F214((uint64_t *)&unk_10069C980);
  v1[4] = sub_1004A4F18((unint64_t *)&qword_10069DE30, (uint64_t *)&unk_10069C980);
  v0[8] = sub_10015E0F0(v1);
  v0[9] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1004A3BAC, v3, v2);
}

uint64_t sub_1004A3BAC()
{
  swift_release();
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004A3C18(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  _OWORD v4[4] = a4;
  _OWORD v4[2] = a1;
  type metadata accessor for AttributedString();
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *a2;
  v4[5] = v6;
  v4[6] = v7;
  return _swift_task_switch(sub_1004A3CB4, 0, 0);
}

uint64_t sub_1004A3CB4()
{
  uint64_t v1 = (void (*)(void))v0[3];
  uint64_t v2 = (uint64_t *)v0[2];
  sub_100031418(0, &qword_1006A9040);
  IntentParameter.wrappedValue.getter();
  uint64_t v3 = NSAttributedString.init(_:)();
  v1();

  v2[3] = sub_10002F214((uint64_t *)&unk_10069C980);
  v2[4] = sub_1004A4F18((unint64_t *)&qword_10069DE30, (uint64_t *)&unk_10069C980);
  v0[7] = sub_10015E0F0(v2);
  type metadata accessor for MainActor();
  v0[8] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1004A3DDC, v5, v4);
}

uint64_t sub_1004A3DDC()
{
  swift_release();
  static IntentResult.result<>()();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1004A3E54()
{
  id v1 = [v0 interactions];
  sub_10002F214(&qword_10069E2E0);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_12;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_unknownObjectRetain();
    }
    type metadata accessor for UIAppIntentInteraction();
    uint64_t v5 = swift_dynamicCastClass();
    if (v5) {
      [v0 removeInteraction:v5];
    }
    swift_unknownObjectRelease();
  }
LABEL_12:

  swift_bridgeObjectRelease();
}

void sub_1004A3FE4(void *a1)
{
  uint64_t v2 = type metadata accessor for FolderID();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A9010);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = &type metadata for AppIntentsFeature;
  unint64_t v14 = sub_100019038();
  v11[0] = "viewActions";
  v11[1] = 11;
  char v12 = 2;
  char v6 = isFeatureEnabled(_:)();
  sub_100018FE8((uint64_t)v11);
  if (v6)
  {
    if (a1)
    {
      type metadata accessor for FolderEntity();
      swift_getObjectType();
      id v7 = a1;
      ICFolderObject<>.entityIdentifier.getter();
      sub_1000191B0((unint64_t *)&qword_1006A3B50, (void (*)(uint64_t))type metadata accessor for FolderEntity);
      EntityIdentifier.init<A>(for:identifier:)();
      uint64_t v8 = type metadata accessor for EntityIdentifier();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 0, 1, v8);
      UIView.appEntityIdentifier.setter();
    }
    else
    {
      uint64_t v9 = type metadata accessor for EntityIdentifier();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
      UIView.appEntityIdentifier.setter();
    }
  }
}

void sub_1004A4280(void *a1)
{
  uint64_t v2 = type metadata accessor for AccountID();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A9010);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = &type metadata for AppIntentsFeature;
  unint64_t v14 = sub_100019038();
  v11[0] = "viewActions";
  v11[1] = 11;
  char v12 = 2;
  char v6 = isFeatureEnabled(_:)();
  sub_100018FE8((uint64_t)v11);
  if (v6)
  {
    if (a1)
    {
      type metadata accessor for AccountEntity();
      swift_getObjectType();
      id v7 = a1;
      ICAccountObject<>.entityIdentifier.getter();
      sub_1000191B0(&qword_1006A2940, (void (*)(uint64_t))type metadata accessor for AccountEntity);
      EntityIdentifier.init<A>(for:identifier:)();
      uint64_t v8 = type metadata accessor for EntityIdentifier();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 0, 1, v8);
      UIView.appEntityIdentifier.setter();
    }
    else
    {
      uint64_t v9 = type metadata accessor for EntityIdentifier();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
      UIView.appEntityIdentifier.setter();
    }
  }
}

id sub_1004A451C(uint64_t a1)
{
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A9010);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = &type metadata for AppIntentsFeature;
  unint64_t v15 = sub_100019038();
  v12[0] = "viewActions";
  v12[1] = 11;
  char v13 = 2;
  char v6 = isFeatureEnabled(_:)();
  id result = (id)sub_100018FE8((uint64_t)v12);
  if (v6)
  {
    if (!a1) {
      goto LABEL_8;
    }
    void v11[2] = &OBJC_PROTOCOL___ICFolderObject;
    uint64_t v8 = swift_dynamicCastObjCProtocolConditional();
    if (v8) {
      return [v1 ic_annotateWithFolder:v8];
    }
    v11[1] = &OBJC_PROTOCOL___ICAccountObject;
    uint64_t v9 = swift_dynamicCastObjCProtocolConditional();
    if (v9)
    {
      return [v1 ic_annotateWithAccount:v9];
    }
    else
    {
LABEL_8:
      uint64_t v10 = type metadata accessor for EntityIdentifier();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 1, 1, v10);
      return (id)UIView.appEntityIdentifier.setter();
    }
  }
  return result;
}

void sub_1004A46F8(void *a1)
{
  uint64_t v2 = type metadata accessor for TagID();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A9010);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = &type metadata for AppIntentsFeature;
  unint64_t v14 = sub_100019038();
  v11[0] = "viewActions";
  v11[1] = 11;
  char v12 = 2;
  char v6 = isFeatureEnabled(_:)();
  sub_100018FE8((uint64_t)v11);
  if (v6)
  {
    if (a1)
    {
      type metadata accessor for TagEntity();
      id v7 = a1;
      ICHashtag.entityIdentifier.getter();
      sub_1000191B0((unint64_t *)&unk_1006A3B60, (void (*)(uint64_t))type metadata accessor for TagEntity);
      EntityIdentifier.init<A>(for:identifier:)();
      uint64_t v8 = type metadata accessor for EntityIdentifier();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 0, 1, v8);
      UIView.appEntityIdentifier.setter();
    }
    else
    {
      uint64_t v9 = type metadata accessor for EntityIdentifier();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
      UIView.appEntityIdentifier.setter();
    }
  }
}

void sub_1004A497C(void *a1)
{
  uint64_t v2 = type metadata accessor for TableID();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A9010);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = &type metadata for AppIntentsFeature;
  unint64_t v14 = sub_100019038();
  v11[0] = "viewActions";
  v11[1] = 11;
  char v12 = 2;
  char v6 = isFeatureEnabled(_:)();
  sub_100018FE8((uint64_t)v11);
  if (v6)
  {
    if (a1)
    {
      type metadata accessor for TableEntity();
      swift_getObjectType();
      id v7 = a1;
      ICTableObject<>.tableEntityIdentifier.getter();
      sub_1000191B0(&qword_1006A9020, (void (*)(uint64_t))type metadata accessor for TableEntity);
      EntityIdentifier.init<A>(for:identifier:)();
      uint64_t v8 = type metadata accessor for EntityIdentifier();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 0, 1, v8);
      UIView.appEntityIdentifier.setter();
    }
    else
    {
      uint64_t v9 = type metadata accessor for EntityIdentifier();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
      UIView.appEntityIdentifier.setter();
    }
  }
}

uint64_t sub_1004A4C18()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004A4C50(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10017B61C;
  return sub_1004A3C18(a1, a2, v7, v6);
}

uint64_t sub_1004A4D04(uint64_t a1, void *a2)
{
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = sub_10017B61C;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 40) = *a2;
  return _swift_task_switch(sub_1004A39AC, 0, 0);
}

uint64_t sub_1004A4DCC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004A4E04(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100161724;
  return sub_1004A3438(a1, a2, v7, v6);
}

uint64_t sub_1004A4EB8(uint64_t a1)
{
  uint64_t v2 = sub_10002F214(&qword_10069B260);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004A4F18(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001DFF4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004A4F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002F214(&qword_10069B260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AsyncBufferedQueue.__allocating_init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v2 = sub_1004A5EEC(a1);
  uint64_t v3 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return v2;
}

uint64_t AsyncBufferedQueue.enqueue(_:)(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v1 + 16))((char *)&v4 - v2);
  type metadata accessor for AsyncStream.Continuation();
  return AsyncStream.Continuation.yield(_:)();
}

uint64_t AsyncBufferedQueue.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t AsyncBufferedMulticastManager.makeAsyncStream(bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AsyncBufferedQueue();
  swift_allocObject();
  uint64_t v4 = sub_1004A5B80(a1);
  type metadata accessor for Array();
  uint64_t v5 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(void *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1004A5F40();
  os_unfair_lock_unlock(v5);
  return v4;
}

uint64_t BidirectionalAsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  type metadata accessor for AsyncBufferedQueue();
  swift_allocObject();
  uint64_t v2 = sub_1004A5B80(a1);
  swift_allocObject();
  sub_1004A5B80(a1);
  uint64_t v3 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return v2;
}

Swift::Void __swiftcall BidirectionalAsyncBufferedQueue.finish()()
{
}

Swift::Void __swiftcall AsyncBufferedMulticastManager.finish()()
{
  uint64_t v1 = v0;
  type metadata accessor for AsyncBufferedQueue();
  type metadata accessor for Array();
  uint64_t v2 = (uint64_t *)(v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16));
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_1004A5F5C(v2, &v4);
  os_unfair_lock_unlock(v3);
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall AsyncBufferedQueue.finish()()
{
}

uint64_t AsyncBufferedMulticastManager.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18[-v8];
  uint64_t v19 = a3;
  type metadata accessor for AsyncBufferedQueue();
  type metadata accessor for Array();
  uint64_t v10 = (void *)(a2 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)a2 + 16));
  uint64_t v11 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(void *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v11);
  sub_1004492C4(v10, &v20);
  os_unfair_lock_unlock(v11);
  if (Array.endIndex.getter())
  {
    char v12 = (void (**)(unsigned char *, uint64_t))(v7 + 8);
    uint64_t v13 = 4;
    do
    {
      uint64_t v14 = v13 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        swift_retain();
        uint64_t v16 = v13 - 3;
        if (__OFADD__(v14, 1)) {
          goto LABEL_9;
        }
      }
      else
      {
        _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v16 = v13 - 3;
        if (__OFADD__(v14, 1))
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      AsyncBufferedQueue.enqueue(_:)(a1);
      swift_release();
      (*v12)(v9, v6);
      ++v13;
    }
    while (v16 != Array.endIndex.getter());
  }
  return swift_bridgeObjectRelease();
}

uint64_t AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v2 = sub_1004A5B80(a1);
  uint64_t v3 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return v2;
}

uint64_t sub_1004A5818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  uint64_t v8 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a1, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);

  return v6(a2, 0, 1, v4);
}

uint64_t AsyncBufferedQueue.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.finish()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1 + *(void *)(*(void *)v1 + 88), v2);
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t v4 = type metadata accessor for AsyncStream();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v1;
}

uint64_t AsyncBufferedQueue.__deallocating_deinit()
{
  AsyncBufferedQueue.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_1004A5A74()
{
  AsyncBufferedQueue.makeAsyncIterator()();

  return swift_release();
}

uint64_t sub_1004A5AAC()
{
  return Array.append(_:)();
}

uint64_t sub_1004A5B30(uint64_t *a1)
{
  type metadata accessor for AsyncBufferedQueue();
  *a1 = static Array._allocateUninitialized(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1004A5B80(uint64_t a1)
{
  uint64_t v22 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v20 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  uint64_t v3 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v18 = (char *)&v17 - v4;
  uint64_t v21 = type metadata accessor for AsyncStream();
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  char v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))((char *)&v17 - v13, 1, 1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v18, v22, v20);
  uint64_t v23 = v2;
  char v24 = v14;
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v1 + *(void *)(*(void *)v1 + 96), v6, v21);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v1 + *(void *)(*(void *)v1 + 88), v12, v7);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return v1;
  }
  return result;
}

uint64_t sub_1004A5EEC(uint64_t a1)
{
  return sub_1004A5B80(a1);
}

uint64_t type metadata accessor for AsyncBufferedQueue()
{
  return sub_100183A74();
}

uint64_t sub_1004A5F40()
{
  return sub_1004A5AAC();
}

uint64_t sub_1004A5F5C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *a1;
  swift_bridgeObjectRetain();
  return sub_1004A5B30(a1);
}

void sub_1004A5FA0()
{
}

uint64_t sub_1004A6004()
{
  return swift_getWitnessTable();
}

uint64_t sub_1004A6020()
{
  uint64_t result = type metadata accessor for AsyncStream.Continuation();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AsyncStream();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1004A60F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for BidirectionalAsyncBufferedQueue()
{
  return sub_100183A74();
}

uint64_t type metadata accessor for AsyncBufferedMulticastManager()
{
  return sub_100183A74();
}

uint64_t sub_1004A6130(uint64_t a1)
{
  return sub_1004A5818(a1, *(void *)(v1 + 24));
}

uint64_t sub_1004A6138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  return _swift_task_switch(sub_1004A615C, 0, 0);
}

uint64_t sub_1004A615C()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[13];
  uint64_t v3 = (void *)v0[14];
  v0[2] = v0;
  v0[7] = v0 + 10;
  v0[3] = sub_1004A6248;
  uint64_t v4 = swift_continuation_init();
  *(void *)(swift_allocObject() + 16) = v4;
  CKSerializeRecordModificationsOperation.serializeResultBlock.setter();
  [v3 addOperation:v2];
  return _swift_continuation_await(v1);
}

uint64_t sub_1004A6248()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  else {
    *(_OWORD *)*(void *)(*v0 + 96) = *(_OWORD *)(*v0 + 80);
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t sub_1004A635C(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    swift_errorRetain();
    sub_10002F214(&qword_1006A3D90);
    swift_willThrowTypedImpl();
    _s3__C4CodeOMa_0(0);
    swift_errorRetain();
    sub_1004A6594(&qword_10069BD60, _s3__C4CodeOMa_0);
    char v9 = static _ErrorCodeProtocol.~= infix(_:_:)();
    sub_1004A6588(a1, a2, 1);
    if (v9)
    {
      sub_1004A6588(a1, a2, 1);
      type metadata accessor for CancellationError();
      sub_1004A6594(&qword_1006A3D60, (void (*)(uint64_t))&type metadata accessor for CancellationError);
      uint64_t v10 = swift_allocError();
      CancellationError.init()();
      swift_allocError();
      *uint64_t v11 = v10;
    }
    else
    {
      swift_allocError();
      uint64_t *v12 = a1;
    }
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_100172484(a1, a2);
    uint64_t v7 = *(uint64_t **)(*(void *)(a4 + 64) + 40);
    uint64_t *v7 = a1;
    v7[1] = a2;
    return swift_continuation_throwingResume();
  }
}

id sub_1004A6560(void *a1)
{
  return [a1 cancel];
}

uint64_t sub_1004A656C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004A657C(uint64_t a1, unint64_t a2, char a3)
{
  return sub_1004A635C(a1, a2, a3 & 1, *(void *)(v3 + 16));
}

uint64_t sub_1004A6588(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return sub_10017253C(a1, a2);
  }
}

uint64_t sub_1004A6594(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004A65DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  return _swift_task_switch(sub_1004A6600, 0, 0);
}

uint64_t sub_1004A6600()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[13];
  uint64_t v3 = (void *)v0[14];
  v0[2] = v0;
  v0[7] = v0 + 10;
  v0[3] = sub_1004A6248;
  uint64_t v4 = swift_continuation_init();
  *(void *)(swift_allocObject() + 16) = v4;
  CKDeserializeRecordModificationsOperation.deserializeResultBlock.setter();
  [v3 addOperation:v2];
  return _swift_continuation_await(v1);
}

uint64_t sub_1004A66EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    swift_errorRetain();
    sub_10002F214(&qword_1006A3D90);
    swift_willThrowTypedImpl();
    _s3__C4CodeOMa_0(0);
    swift_errorRetain();
    sub_1004A6594(&qword_10069BD60, _s3__C4CodeOMa_0);
    char v8 = static _ErrorCodeProtocol.~= infix(_:_:)();
    sub_1004A6910(a1, a2, 1);
    if (v8)
    {
      sub_1004A6910(a1, a2, 1);
      type metadata accessor for CancellationError();
      sub_1004A6594(&qword_1006A3D60, (void (*)(uint64_t))&type metadata accessor for CancellationError);
      uint64_t v9 = swift_allocError();
      CancellationError.init()();
      swift_allocError();
      *uint64_t v10 = v9;
    }
    else
    {
      swift_allocError();
      *uint64_t v11 = a1;
    }
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    uint64_t v6 = *(uint64_t **)(*(void *)(a4 + 64) + 40);
    *uint64_t v6 = a1;
    v6[1] = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1004A68F4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004A6904(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1004A66EC(a1, a2, a3 & 1, *(void *)(v3 + 16));
}

uint64_t sub_1004A6910(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void sub_1004A6960()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002F214(&qword_1006A9270);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FilterType(0);
  sub_1004A77F0();
  sub_1004A7844();
  NSDiffableDataSourceSnapshot.init()();
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_10062B028);
  if ((ICFilterTypeCount & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v24 = v3;
    uint64_t v6 = sub_1001A95E4(0, ICFilterTypeCount);
    int64_t v7 = v6[2];
    if (v7)
    {
      char v8 = v6 + 4;
      uint64_t v9 = (char *)&_swiftEmptyArrayStorage;
      do
      {
        uint64_t v11 = *v8++;
        uint64_t v10 = v11;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1001A834C(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v13 = *((void *)v9 + 2);
        unint64_t v12 = *((void *)v9 + 3);
        if (v13 >= v12 >> 1) {
          uint64_t v9 = sub_1001A834C((char *)(v12 > 1), v13 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v13 + 1;
        *(void *)&v9[8 * v13 + 32] = v10;
        --v7;
      }
      while (v7);
    }
    swift_release();
    char v25 = 0;
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource);
    if (v14)
    {
      id v15 = v14;
      dispatch thunk of UICollectionViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)();
    }
    uint64_t v16 = (void **)(v1 + OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_heightConstraint);
    swift_beginAccess();
    uint64_t v17 = *v16;
    uint64_t v18 = v24;
    if (v17)
    {
      swift_endAccess();
      id v19 = v17;
      id v20 = sub_1004A6C50();
      id v21 = [v20 collectionViewLayout];

      [v21 collectionViewContentSize];
      double v23 = v22;

      [v19 setConstant:v23];
      (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v2);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v2);
      swift_endAccess();
    }
  }
}

id sub_1004A6C50()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView____lazy_storage___collectionView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView____lazy_storage___collectionView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView____lazy_storage___collectionView);
  }
  else
  {
    id v4 = sub_1004A7508();
    id v5 = [objc_allocWithZone((Class)UICollectionView) initWithFrame:v4 collectionViewLayout:0.0, 0.0, 0.0, 0.0];

    [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v5 setUserInteractionEnabled:0];
    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

uint64_t sub_1004A6D18()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002F214(&qword_1006A9260);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v6 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  char v8 = &v25[-v7];
  type metadata accessor for LearnMoreSmartFoldersFiltersCell();
  type metadata accessor for FilterType(0);
  UICollectionView.CellRegistration.init(handler:)();
  sub_1004A6C50();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 16))(v6, v8, v2);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v3 + 32))(v10 + v9, v6, v2);
  id v11 = objc_allocWithZone((Class)sub_10002F214(&qword_1006A9268));
  uint64_t v12 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)();
  uint64_t v13 = OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource;
  uint64_t v14 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource];
  *(void *)&v0[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource] = v12;

  id v15 = sub_1004A6C50();
  [v15 setDataSource:*(void *)&v1[v13]];

  id v16 = sub_1004A6C50();
  [v1 addSubview:v16];

  id v17 = sub_1004A6C50();
  [v17 ic_addAnchorsToFillSuperview];

  id v18 = sub_1004A6C50();
  id v19 = [v18 heightAnchor];

  id v20 = [v19 constraintEqualToConstant:34.0];
  id v21 = (void **)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_heightConstraint];
  swift_beginAccess();
  double v22 = *v21;
  *id v21 = v20;

  swift_beginAccess();
  double v23 = *v21;
  if (*v21)
  {
    swift_endAccess();
    [v23 setActive:1];
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v8, v2);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v8, v2);
    return swift_endAccess();
  }
}

id sub_1004A70E4(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_heightConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView____lazy_storage___collectionView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource] = 0;
  v8.id receiver = v1;
  v8.Class super_class = ObjectType;
  id v4 = [super initWithCoder:a1];
  id v5 = v4;
  if (v4)
  {
    id v6 = v4;
    sub_1004A6D18();
  }
  return v5;
}

void sub_1004A71A0()
{
}

uint64_t sub_1004A71C8()
{
  return UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();
}

uint64_t type metadata accessor for LearnMoreSmartFoldersFiltersView()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for LearnMoreSmartFoldersFiltersView.FilterSection(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004A7358);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LearnMoreSmartFoldersFiltersView.FilterSection()
{
  return &type metadata for LearnMoreSmartFoldersFiltersView.FilterSection;
}

unint64_t sub_1004A7394()
{
  unint64_t result = qword_1006A9258;
  if (!qword_1006A9258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9258);
  }
  return result;
}

uint64_t sub_1004A73E8()
{
  uint64_t v1 = sub_10002F214(&qword_1006A9260);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004A747C()
{
  sub_10002F214(&qword_1006A9260);

  return sub_1004A71C8();
}

id sub_1004A7508()
{
  uint64_t v0 = self;
  id v1 = [v0 estimatedDimension:48.0];
  id v2 = [v0 estimatedDimension:34.0];
  uint64_t v3 = self;
  id v4 = [v3 sizeWithWidthDimension:v1 heightDimension:v2];

  id v5 = [self itemWithLayoutSize:v4];
  id v6 = [v0 fractionalWidthDimension:1.0];
  id v7 = [v0 estimatedDimension:34.0];
  id v8 = [v3 sizeWithWidthDimension:v6 heightDimension:v7];

  unint64_t v9 = self;
  sub_10002F214(&qword_10069BA00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100529F20;
  *(void *)(v10 + 32) = v5;
  specialized Array._endMutation()();
  sub_1004A77B0();
  id v11 = v5;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = [v9 horizontalGroupWithLayoutSize:v8 subitems:isa];

  id v14 = [self fixedSpacing:8.0];
  [v13 setInterItemSpacing:v14];

  id v15 = [self sectionWithGroup:v13];
  [v15 setInterGroupSpacing:8.0];
  id v16 = [objc_allocWithZone((Class)UICollectionViewCompositionalLayout) initWithSection:v15];

  return v16;
}

unint64_t sub_1004A77B0()
{
  unint64_t result = qword_1006A4CB8;
  if (!qword_1006A4CB8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1006A4CB8);
  }
  return result;
}

unint64_t sub_1004A77F0()
{
  unint64_t result = qword_1006A9278;
  if (!qword_1006A9278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9278);
  }
  return result;
}

unint64_t sub_1004A7844()
{
  unint64_t result = qword_1006A9280;
  if (!qword_1006A9280)
  {
    type metadata accessor for FilterType(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9280);
  }
  return result;
}

uint64_t sub_1004A789C()
{
  (*(void (**)(void))((swift_isaMask & *v0) + 0xC8))();
  id v1 = (id)ICLocalizedStringForICFilterType();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id sub_1004A791C()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView);
  }
  else
  {
    id v4 = sub_1004A95C4();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1004A7980()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView;
  id v4 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView];
  if (v4)
  {
    id v5 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView];
  }
  else
  {
    sub_100031418(0, (unint64_t *)&qword_1006A38E8);
    static UIListContentConfiguration.cell()();
    id v6 = (void *)UIListContentView.init(configuration:)();
    [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
    LODWORD(v7) = 1148846080;
    [v6 setContentCompressionResistancePriority:0 forAxis:v7];
    LODWORD(v8) = 1148846080;
    [v6 setContentCompressionResistancePriority:1 forAxis:v8];
    LODWORD(v9) = 1132068864;
    [v6 setContentHuggingPriority:0 forAxis:v9];
    id v10 = [v6 widthAnchor];
    [v1 frame];
    id v12 = [v10 constraintLessThanOrEqualToConstant:v11];

    id v13 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint];
    *(void *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint] = v12;

    id v14 = *(void **)&v1[v3];
    *(void *)&v1[v3] = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v15 = v4;
  return v5;
}

void sub_1004A7B30()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___image;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___image);
  if (v2 != (void *)1)
  {
LABEL_7:
    sub_1004A9944(v2);
    return;
  }
  (*(void (**)(void))((swift_isaMask & *v0) + 0xC8))();
  id v3 = (id)ICSymbolImageNameForICFilterType();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = (id)ICTintColorForICFilterType();
  id v5 = [self systemFontOfSize:17.0];
  id v6 = [self configurationWithFont:v5];

  id v7 = v6;
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [self _systemImageNamed:v8 withConfiguration:v7];

  if (v9)
  {
    id v10 = [self whiteColor];
    id v11 = [v9 imageWithTintColor:v10];

    if (v4)
    {
      id v12 = v4;
      id v13 = [v11 ic_imageCenteredWithBackgroundColor:v12 size:28.0, 28.0];
      swift_bridgeObjectRelease();

      id v11 = v13;
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    id v14 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v11;
    id v15 = v11;
    sub_1004A9934(v14);
    goto LABEL_7;
  }
  __break(1u);
}

id sub_1004A7D70()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel];
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UILabel) init];
    [v4 setAdjustsFontForContentSizeCategory:1];
    objc_msgSend(v4, "setTextAlignment:", 2 * (objc_msgSend(v0, "effectiveUserInterfaceLayoutDirection") != (id)1));
    LODWORD(v5) = 1148846080;
    [v4 setContentHuggingPriority:0 forAxis:v5];
    id v6 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

uint64_t sub_1004A7E40()
{
  return -1;
}

id sub_1004A7E48(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_accountObjectID] = 0;
  *(void *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;
  id v9 = &v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  *(void *)id v9 = 0;
  *((void *)v9 + 1) = 0;
  *(void *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint] = 0;
  *(void *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint] = 0;
  *(void *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___image] = 1;
  *(void *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel] = 0;
  v13.id receiver = v4;
  v13.Class super_class = (Class)type metadata accessor for FolderComposerFilterCell();
  id v10 = [super initWithFrame:a1, a2, a3, a4];
  sub_100031418(0, (unint64_t *)&qword_10069C280);
  id v11 = v10;
  static UITraitCollection.traitsAffectingSizeAndColor.getter();
  UIView.registerForTraitChanges(_:action:)();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

id sub_1004A7FB0(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_accountObjectID] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;
  id v3 = &v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___image] = 1;
  *(void *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel] = 0;
  v7.id receiver = v1;
  v7.Class super_class = (Class)type metadata accessor for FolderComposerFilterCell();
  id v4 = [super initWithCoder:a1];
  if (v4)
  {
    sub_100031418(0, (unint64_t *)&qword_10069C280);
    id v5 = v4;
    static UITraitCollection.traitsAffectingSizeAndColor.getter();
    UIView.registerForTraitChanges(_:action:)();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  return v4;
}

void sub_1004A810C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v150 = type metadata accessor for UIListContentConfiguration.TextProperties();
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (char *)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002F214(&qword_10069C1A0);
  __chkstk_darwin(v5 - 8);
  uint64_t v140 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for UICellAccessory.PopUpMenuOptions();
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v142 = (char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v141 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  unint64_t v139 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for UICellAccessory();
  uint64_t v147 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v145 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UIListContentConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v16 = (char *)&v137 - v15;
  static UIListContentConfiguration.valueCell()();
  uint64_t v17 = type metadata accessor for UICellConfigurationState();
  *((void *)&v162 + 1) = v17;
  v163 = (void (**)(void, void *))&protocol witness table for UICellConfigurationState;
  id v18 = sub_10015E0F0((uint64_t *)&v161);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v18, a1, v17);
  UIListContentConfiguration.updated(for:)();
  uint64_t v152 = v11;
  id v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v157 = v10;
  uint64_t v154 = v11 + 8;
  Swift::Int v153 = v19;
  v19(v14, v10);
  sub_100018FE8((uint64_t)&v161);
  uint64_t v20 = UIListContentConfiguration.directionalLayoutMargins.getter();
  double v22 = v21;
  double v24 = v23;
  (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0xC0))(v20);
  if (v25)
  {
    id v26 = [objc_allocWithZone((Class)NSMutableParagraphStyle) init];
    LODWORD(v27) = 1.0;
    [v26 setHyphenationFactor:v27];
    sub_10002F214(&qword_10069DE48);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100524D10;
    *(void *)(inited + 32) = NSParagraphStyleAttributeName;
    *(void *)(inited + 64) = sub_100031418(0, &qword_1006A8FB0);
    *(void *)(inited + 40) = v26;
    id v29 = NSParagraphStyleAttributeName;
    id v30 = v26;
    sub_100168480(inited);
    id v31 = objc_allocWithZone((Class)NSAttributedString);
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1001BBF80();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 initWithString:v32 attributes:isa];

    UIListContentConfiguration.attributedText.setter();
  }
  sub_1004A7B30();
  UIListContentConfiguration.image.setter();
  id v34 = (void (*)(long long *, void))UIListContentConfiguration.imageProperties.modify();
  UIListContentConfiguration.ImageProperties.cornerRadius.setter();
  v34(&v161, 0);
  uint64_t v35 = (void (*)(long long *, void))UIListContentConfiguration.imageProperties.modify();
  long long v36 = (void (*)(long long *, void))UIListContentConfiguration.ImageProperties.reservedLayoutSize.modify();
  *(void *)(v37 + 8) = 0x4036000000000000;
  v36(&v158, 0);
  v35(&v161, 0);
  objc_super v38 = (void (*)(long long *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.numberOfLines.setter();
  v38(&v161, 0);
  unsigned int v39 = (void (*)(long long *, void))UIListContentConfiguration.directionalLayoutMargins.modify();
  *(void *)(v40 + 8) = 0;
  v39(&v161, 0);
  unsigned int v41 = (void (*)(long long *, void))UIListContentConfiguration.directionalLayoutMargins.modify();
  *(void *)(v42 + 24) = 0;
  v41(&v161, 0);
  *(void *)&long long v161 = v2;
  uint64_t v43 = type metadata accessor for FolderComposerFilterCell();
  uint64_t v44 = v2;
  uint64_t v45 = sub_10002F214(&qword_1006A92F8);
  uint64_t v155 = v43;
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v160 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    goto LABEL_12;
  }
  if (!*((void *)&v159 + 1))
  {
LABEL_12:
    sub_1004A9894((uint64_t)&v158);
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    goto LABEL_16;
  }
  sub_10016EFCC(&v158, (uint64_t)&v161);
  uint64_t v46 = *((void *)&v162 + 1);
  uint64_t v47 = v163;
  sub_10015E154(&v161, *((uint64_t *)&v162 + 1));
  v47[2](v46, v47);
  uint64_t v48 = *((void *)&v162 + 1);
  Swift::String v49 = (uint64_t (**)(void, void *))v163;
  sub_10015E154(&v161, *((uint64_t *)&v162 + 1));
  Swift::String v50 = (void *)v49[1](v48, v49);
  id v51 = [v50 selectedElements];

  sub_100031418(0, (unint64_t *)&qword_1006A4D30);
  unint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v52 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v59) {
      goto LABEL_7;
    }
  }
  else if (*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_7:
    if ((v52 & 0xC000000000000001) != 0)
    {
      id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v53 = *(id *)(v52 + 32);
    }
    uint64_t v54 = v53;
    swift_bridgeObjectRelease();
    id v55 = [v54 title];

    uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v138 = v56;

    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  uint64_t v156 = 0;
  uint64_t v138 = 0;
LABEL_15:
  uint64_t v60 = *((void *)&v162 + 1);
  uint64_t v61 = (uint64_t (**)(void, void *))v163;
  sub_10015E154(&v161, *((uint64_t *)&v162 + 1));
  uint64_t v62 = (void *)v61[1](v60, v61);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v63 = v141;
  uint64_t v64 = v139;
  uint64_t v65 = v143;
  (*(void (**)(char *, void, uint64_t))(v141 + 104))(v139, enum case for UICellAccessory.DisplayedState.always(_:), v143);
  uint64_t v66 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v140, 1, 1, v66);
  swift_retain();
  unint64_t v67 = v142;
  UICellAccessory.PopUpMenuOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
  uint64_t v68 = v145;
  static UICellAccessory.popUpMenu(_:displayed:options:selectedElementDidChangeHandler:)();

  swift_release();
  (*(void (**)(char *, uint64_t))(v144 + 8))(v67, v146);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
  swift_release();
  sub_10002F214(&qword_10069C1B0);
  uint64_t v69 = v147;
  unint64_t v70 = (*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80);
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_100524D10;
  uint64_t v72 = v151;
  (*(void (**)(unint64_t, char *, uint64_t))(v69 + 16))(v71 + v70, v68, v151);
  UICollectionViewListCell.accessories.setter();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v72);
  sub_100018FE8((uint64_t)&v161);
  uint64_t v58 = v138;
  uint64_t v57 = v156;
LABEL_16:
  id v73 = sub_1004A791C();
  id v74 = [v73 superview];

  if (!v74)
  {
    uint64_t v151 = v45;
    id v78 = [v44 contentView];
    id v79 = sub_1004A791C();
    [v78 addSubview:v79];

    LODWORD(v78) = [v44 ic_isRTL];
    id v80 = [v44 contentView];
    [v80 layoutMargins];
    double v82 = v81;
    double v84 = v83;

    if (v78) {
      double v85 = v84;
    }
    else {
      double v85 = v82;
    }
    if (v85 > v22) {
      double v86 = v85;
    }
    else {
      double v86 = v22;
    }
    sub_10002F214(&qword_10069BA00);
    uint64_t v87 = swift_allocObject();
    *(_OWORD *)(v87 + 16) = xmmword_100527150;
    id v88 = sub_1004A791C();
    uint64_t v156 = v57;
    id v89 = [v88 topAnchor];

    id v90 = [v44 contentView];
    id v91 = [v90 topAnchor];

    id v92 = [v89 constraintEqualToAnchor:v91];
    *(void *)(v87 + 32) = v92;
    id v93 = sub_1004A791C();
    id v94 = [v93 leadingAnchor];

    id v95 = [v44 contentView];
    id v96 = [v95 safeAreaLayoutGuide];

    id v97 = [v96 leadingAnchor];
    id v98 = [v94 constraintEqualToAnchor:v97 constant:v86];

    *(void *)(v87 + 40) = v98;
    id v99 = sub_1004A791C();
    id v100 = [v99 trailingAnchor];

    id v101 = [v44 contentView];
    id v102 = [v101 trailingAnchor];

    id v103 = [v100 constraintEqualToAnchor:v102 constant:-v24];
    uint64_t v57 = v156;
    *(void *)(v87 + 48) = v103;
    *(void *)&long long v161 = v87;
    specialized Array._endMutation()();
    id v104 = sub_1004A791C();
    id v105 = [v104 bottomAnchor];

    uint64_t v45 = v151;
    id v106 = [v44 contentView];
    id v107 = [v106 bottomAnchor];

    id v108 = [v105 constraintEqualToAnchor:v107];
    uint64_t v109 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint;
    uint64_t v110 = *(void **)((char *)v44
                    + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint);
    *(void *)((char *)v44 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint) = v108;

    *(void *)&long long v158 = *(void *)((char *)v44 + v109);
    sub_10002F214(&qword_1006A9308);
    Array.appendNonNil(_:)();
    uint64_t v111 = self;
    sub_100031418(0, (unint64_t *)&qword_1006A5260);
    Class v112 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v111 activateConstraints:v112];

    if (ICAccessibilityAccessibilityLargerTextSizesEnabled()) {
      goto LABEL_18;
    }
LABEL_28:
    uint64_t v156 = v57;
    uint64_t v113 = v58;
    uint64_t v151 = v45;
    id v114 = sub_1004A791C();
    [v114 setSpacing:v22];

    [*(id *)((char *)v44 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint) setConstant:0.0];
    uint64_t v115 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint;
    unint64_t v116 = *(void **)((char *)v44
                    + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint);
    if (v116)
    {
      [v116 setActive:1];
      Swift::Int v117 = *(void **)((char *)v44 + v115);
      if (v117)
      {
        id v118 = v117;
        [v44 frame];
        [v118 setConstant:v119 * 0.6];
      }
    }
    id v120 = sub_1004A7D70();
    [v120 setHidden:0];

    id v121 = sub_1004A7D70();
    uint64_t v122 = v148;
    UIListContentConfiguration.textProperties.getter();
    uint64_t v123 = (void *)UIListContentConfiguration.TextProperties.font.getter();
    unint64_t v124 = *(void (**)(char *, uint64_t))(v149 + 8);
    uint64_t v125 = v150;
    v124(v122, v150);
    [v121 setFont:v123];

    id v126 = sub_1004A7D70();
    UIListContentConfiguration.secondaryTextProperties.getter();
    uint64_t v127 = (void *)UIListContentConfiguration.TextProperties.color.getter();
    v124(v122, v125);
    [v126 setTextColor:v127];

    id v128 = sub_1004A7D70();
    if (v113)
    {
      NSString v129 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v129 = 0;
    }
    uint64_t v77 = v152;
    [v128 setText:v129];

    UIListContentConfiguration.secondaryText.setter();
    goto LABEL_35;
  }
  if (!ICAccessibilityAccessibilityLargerTextSizesEnabled()) {
    goto LABEL_28;
  }
LABEL_18:
  uint64_t v75 = *(void **)((char *)v44 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint);
  if (v75) {
    [v75 setActive:0];
  }
  id v76 = sub_1004A7D70();
  [v76 setHidden:1];

  UIListContentConfiguration.secondaryText.setter();
  uint64_t v77 = v152;
LABEL_35:
  id v130 = sub_1004A7980();
  uint64_t v131 = v157;
  *((void *)&v162 + 1) = v157;
  v163 = (void (**)(void, void *))&protocol witness table for UIListContentConfiguration;
  long long v132 = sub_10015E0F0((uint64_t *)&v161);
  (*(void (**)(uint64_t *, char *, uint64_t))(v77 + 16))(v132, v16, v131);
  UIListContentView.configuration.setter();

  *(void *)&long long v158 = v44;
  Swift::Int v133 = v44;
  if (swift_dynamicCast())
  {
    uint64_t v134 = *((void *)&v162 + 1);
    Swift::Int v135 = v153;
    if (*((void *)&v162 + 1))
    {
      unint64_t v136 = v163;
      sub_10015E154(&v161, *((uint64_t *)&v162 + 1));
      v136[2](v134, v136);
      v135(v16, v157);
      sub_100018FE8((uint64_t)&v161);
      return;
    }
  }
  else
  {
    v163 = 0;
    long long v161 = 0u;
    long long v162 = 0u;
    Swift::Int v135 = v153;
  }
  v135(v16, v157);
  sub_1004A9894((uint64_t)&v161);
}

void sub_1004A9338()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong setNeedsUpdateConfiguration];
  }
}

void sub_1004A947C()
{
  v7.id receiver = v0;
  v7.Class super_class = (Class)type metadata accessor for FolderComposerFilterCell();
  [super updateConstraints];
  id v1 = sub_1004A7980();
  id v2 = [v1 textLayoutGuide];

  if (v2)
  {
    id v3 = [v0 separatorLayoutGuide];
    id v4 = [v3 leadingAnchor];

    id v5 = [v2 leadingAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];

    [v6 setActive:1];
  }
}

id sub_1004A95C4()
{
  sub_10002F214(&qword_10069BA00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100524CE0;
  *(void *)(v0 + 32) = sub_1004A7980();
  *(void *)(v0 + 40) = sub_1004A7D70();
  specialized Array._endMutation()();
  id v1 = objc_allocWithZone((Class)UIStackView);
  sub_100031418(0, (unint64_t *)&qword_1006A4640);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithArrangedSubviews:isa];

  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v3 setAxis:0];
  [v3 setAlignment:3];
  return v3;
}

id sub_1004A96D8()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for FolderComposerFilterCell();
  return [super dealloc];
}

uint64_t type metadata accessor for FolderComposerFilterCell()
{
  return self;
}

uint64_t sub_1004A9894(uint64_t a1)
{
  uint64_t v2 = sub_10002F214(&qword_1006A9300);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004A98F4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004A992C()
{
}

void sub_1004A9934(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_1004A9944(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

void sub_1004A9954(void *a1)
{
  id v3 = [a1 presentedViewController];

  if (v3)
  {
    id v4 = [a1 presentedViewController];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = a1;
      *(void *)(v6 + 24) = v1;
      aBlock[4] = sub_1004AB3A0;
      aBlock[5] = v6;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_100262E2C;
      aBlock[3] = &unk_10063E500;
      objc_super v7 = _Block_copy(aBlock);
      id v8 = a1;
      swift_release();
      [v5 dismissViewControllerAnimated:1 completion:v7];
      _Block_release(v7);
    }
  }
  else
  {
    id v9 = (id)sub_1004AB22C();
    [a1 presentViewController:v9 animated:1 completion:0];
  }
}

id sub_1004A9ABC()
{
  id v1 = [self ICTintColor];
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8))();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v20 = v1;
    uint64_t v18 = v2;
    uint64_t v4 = v2 + 56;
    double left = UIEdgeInsetsZero.left;
    uint64_t v6 = 1;
    double bottom = UIEdgeInsetsZero.bottom;
    double right = UIEdgeInsetsZero.right;
    uint64_t v19 = *(void *)(v2 + 16);
    while (1)
    {
      uint64_t v21 = v6;
      id v9 = *(id *)(v4 - 24);
      swift_bridgeObjectRetain_n();
      id v10 = v9;
      id result = [v10 text];
      if (!result) {
        break;
      }
      uint64_t v12 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10017B588();
      LOBYTE(v12) = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v12)
      {
        sub_1004AA4B4();
        id result = [v10 text];
        if (!result) {
          goto LABEL_18;
        }
        uint64_t v13 = result;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v14 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v10 setText:v14];

        [v10 setSelectable:1];
        [v10 _setInteractiveTextSelectionDisabled:1];
        [v10 setTextContainerInset:UIEdgeInsetsZero.top, left, bottom, right];
        id v15 = [v10 textContainer];
        [v15 setLineFragmentPadding:0.0];

        id result = [v10 attributedText];
        if (!result) {
          goto LABEL_19;
        }
        id v16 = result;
        __chkstk_darwin(result);
        uint64_t v17 = NSAttributedString.withMutations(_:)();

        swift_bridgeObjectRelease();
        [v10 setAttributedText:v17];
        swift_bridgeObjectRelease();

        uint64_t v3 = v19;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (v3 == v21) {
        goto LABEL_13;
      }
      v4 += 32;
      uint64_t v6 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
LABEL_13:

        return (id)swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {

    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

id sub_1004A9EB8()
{
  id result = [self configurationWithFont:*(void *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViewFont)];
  uint64_t v11 = v0;
  uint64_t v12 = result;
  unint64_t v2 = *(void *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews);
  if (!v2)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (v2 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
    {
LABEL_4:
      for (uint64_t i = 4; ; ++i)
      {
        if ((v2 & 0xC000000000000001) != 0) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v5 = *(id *)(v2 + 8 * i);
        }
        uint64_t v6 = v5;
        uint64_t v7 = i - 3;
        if (__OFADD__(i - 4, 1))
        {
          __break(1u);
          goto LABEL_13;
        }
        id result = [v5 attributedText:v11];
        if (!result) {
          break;
        }
        id v8 = result;
        swift_allocObject();
        uint64_t v9 = swift_unknownObjectWeakInit();
        __chkstk_darwin(v9);
        id v10 = NSAttributedString.withMutations(_:)();

        swift_release();
        [v6 setAttributedText:v10];

        if (v7 == v3)
        {

          return (id)swift_bridgeObjectRelease();
        }
      }
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_4;
    }
  }

  return (id)swift_bridgeObjectRelease();
}

void sub_1004AA0CC()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR___ICLearnMoreViewController_headerLabels);
  if (!v1) {
    goto LABEL_26;
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_11;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR___ICLearnMoreViewController_headerFont);
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v1 + 8 * v3 + 32);
    }
    uint64_t v6 = v5;
    ++v3;
    [v5 setFont:v4];
  }
  while (v2 != v3);
LABEL_11:
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews);
  if (!v7)
  {
LABEL_27:
    __break(1u);
    return;
  }
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8)
    {
LABEL_14:
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViewFont);
        do
        {
          if ((v7 & 0xC000000000000001) != 0) {
            id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v11 = *(id *)(v7 + 8 * v9 + 32);
          }
          uint64_t v12 = v11;
          ++v9;
          [v11 setFont:v10];
          id v13 = [v12 textContainer];
          [v13 setLineFragmentPadding:0.0];
        }
        while (v8 != v9);
        goto LABEL_21;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_14;
    }
  }
LABEL_21:

  swift_bridgeObjectRelease();
}

void sub_1004AA2C4()
{
  id v10 = [self ICTintColor];
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews);
  if (!v1)
  {
LABEL_18:
    __break(1u);
    return;
  }
  if (v1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
    {
LABEL_4:
      for (uint64_t i = 4; ; ++i)
      {
        if ((v1 & 0xC000000000000001) != 0) {
          id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v4 = *(id *)(v1 + 8 * i);
        }
        id v5 = v4;
        uint64_t v6 = i - 3;
        if (__OFADD__(i - 4, 1))
        {
          __break(1u);
          goto LABEL_13;
        }
        id v7 = [v4 attributedText];
        if (!v7) {
          break;
        }
        uint64_t v8 = v7;
        __chkstk_darwin(v7);
        uint64_t v9 = NSAttributedString.withMutations(_:)();

        [v5 setAttributedText:v9];
        if (v6 == v2)
        {
          swift_bridgeObjectRelease();

          return;
        }
      }
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease();
}

unint64_t sub_1004AA4A8()
{
  return sub_100167C90((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1004AA4B4()
{
  id v0 = [self mainBundle];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 localizedStringForKey:v1 value:0 table:0];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

Class sub_1004AA6A0(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  if (*(void *)(a1 + *a3))
  {
    sub_100031418(0, a4);
    swift_bridgeObjectRetain();
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_1004AA730(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, void *a6)
{
  if (a3)
  {
    sub_100031418(0, a4);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(void *)(a1 + *a6) = v8;

  return swift_bridgeObjectRelease();
}

id sub_1004AA914(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id result = [a1 string];
  if (result)
  {
    id v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 rangeOfString:v8];
    uint64_t v11 = v10;

    id result = (id)NSNotFound.getter();
    if (v9 != result)
    {
      NSString v12 = String._bridgeToObjectiveC()();
      [a1 addAttribute:NSLinkAttributeName value:v12 range:v9, v11];

      return [a1 addAttribute:NSForegroundColorAttributeName value:a4 range:v9, v11];
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004AAA40(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (!result) {
    return result;
  }
  double v24 = (void *)result;
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *(void *)result) + 0xE0))();
  uint64_t v5 = result;
  int64_t v6 = 0;
  uint64_t v25 = result + 64;
  uint64_t v7 = 1 << *(unsigned char *)(result + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(result + 64);
  int64_t v26 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v26) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v25 + 8 * v12);
    ++v6;
    if (!v13)
    {
      int64_t v6 = v12 + 1;
      if (v12 + 1 >= v26) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v25 + 8 * v6);
      if (!v13)
      {
        int64_t v6 = v12 + 2;
        if (v12 + 2 >= v26) {
          goto LABEL_25;
        }
        unint64_t v13 = *(void *)(v25 + 8 * v6);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v6 << 6);
LABEL_22:
    id v15 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = (void *)v15[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v18 = a3;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v20 = [self systemImageNamed:v19 withConfiguration:v18];

    if (v20)
    {
      id v21 = [self ICTintColor];
      id v22 = [v20 imageWithTintColor:v21];

      if (v22)
      {
        v23._uint64_t countAndFlagsBits = v16;
        v23._object = v17;
        NSMutableAttributedString.replace(placeholder:with:)(v23, (UIImage)v22);
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v26)
  {
LABEL_25:

    return swift_release();
  }
  unint64_t v13 = *(void *)(v25 + 8 * v14);
  if (v13)
  {
    int64_t v6 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v6 >= v26) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v25 + 8 * v6);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1004AAD10(uint64_t a1, void *a2, void *a3)
{
  sub_10002F214(&qword_10069DE48);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100527F30;
  *(void *)(inited + 32) = NSFontAttributeName;
  uint64_t v6 = sub_100031418(0, (unint64_t *)&unk_1006A83B0);
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 64) = v6;
  *(void *)(inited + 72) = NSForegroundColorAttributeName;
  *(void *)(inited + 104) = sub_100031418(0, &qword_10069C290);
  *(void *)(inited + 80) = a3;
  uint64_t v7 = NSFontAttributeName;
  id v8 = a2;
  unint64_t v9 = NSForegroundColorAttributeName;
  id v10 = a3;
  unint64_t v11 = sub_100168480(inited);
  NSMutableAttributedString.formatHashtags(with:)((Swift::OpaquePointer)v11);
  return swift_bridgeObjectRelease();
}

id sub_1004AADF8(uint64_t a1, uint64_t a2, void *a3)
{
  NSArray v4 = v3;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR___ICLearnMoreViewController_headerLabels] = 0;
  *(void *)&v3[OBJC_IVAR___ICLearnMoreViewController_textViews] = 0;
  uint64_t v7 = OBJC_IVAR___ICLearnMoreViewController_headerFont;
  id v8 = self;
  unint64_t v9 = v3;
  id v10 = [v8 preferredFontForTextStyle:UIFontTextStyleTitle3];
  Class isa = UIFont.withBoldTrait()().super.isa;

  *(void *)&v4[v7] = isa;
  uint64_t v12 = OBJC_IVAR___ICLearnMoreViewController_textViewFont;
  *(void *)&v9[v12] = [v8 preferredFontForTextStyle:UIFontTextStyleBody];

  if (a2)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v13 = 0;
  }
  v16.id receiver = v9;
  v16.Class super_class = (Class)type metadata accessor for LearnMoreViewController();
  id v14 = [super initWithNibName:v13 bundle:a3];

  return v14;
}

id sub_1004AAFB8(void *a1)
{
  id v2 = v1;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR___ICLearnMoreViewController_headerLabels] = 0;
  *(void *)&v1[OBJC_IVAR___ICLearnMoreViewController_textViews] = 0;
  uint64_t v4 = OBJC_IVAR___ICLearnMoreViewController_headerFont;
  uint64_t v5 = self;
  uint64_t v6 = v1;
  id v7 = [v5 preferredFontForTextStyle:UIFontTextStyleTitle3];
  Class isa = UIFont.withBoldTrait()().super.isa;

  *(void *)&v2[v4] = isa;
  uint64_t v9 = OBJC_IVAR___ICLearnMoreViewController_textViewFont;
  *(void *)&v6[v9] = [v5 preferredFontForTextStyle:UIFontTextStyleBody];

  v12.id receiver = v6;
  v12.Class super_class = (Class)type metadata accessor for LearnMoreViewController();
  id v10 = [super initWithCoder:a1];

  return v10;
}

id sub_1004AB104()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LearnMoreViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for LearnMoreViewController()
{
  return self;
}

uint64_t sub_1004AB1D8(uint64_t a1)
{
  return sub_1004AAD10(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1004AB1E0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004AB218(uint64_t a1)
{
  return sub_1004AAA40(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

id sub_1004AB220(void *a1)
{
  return sub_1004AA914(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1004AB22C()
{
  _typeName(_:qualified:)();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self storyboardWithName:v2 bundle:v1];

  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 instantiateViewControllerWithIdentifier:v4];

  v8[3] = sub_100031418(0, &qword_1006A0070);
  v8[0] = v5;
  uint64_t v6 = sub_1001A71D8((uint64_t)v8);

  sub_100018FE8((uint64_t)v8);
  return v6;
}

uint64_t sub_1004AB368()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1004AB3A0()
{
  id v1 = *(void **)(v0 + 16);
  id v2 = (id)sub_1004AB22C();
  [v1 presentViewController:v2 animated:1 completion:0];
}

uint64_t destroy for LearnMoreViewController.TextViewAction(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LearnMoreViewController.TextViewAction(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LearnMoreViewController.TextViewAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for LearnMoreViewController.TextViewAction(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LearnMoreViewController.TextViewAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LearnMoreViewController.TextViewAction(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LearnMoreViewController.TextViewAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LearnMoreViewController.TextViewAction()
{
  return &type metadata for LearnMoreViewController.TextViewAction;
}

unsigned char *storeEnumTagSinglePayload for LearnMoreViewController.PlaceholderType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004AB6BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LearnMoreViewController.PlaceholderType()
{
  return &type metadata for LearnMoreViewController.PlaceholderType;
}

unint64_t sub_1004AB6F8()
{
  unint64_t result = qword_1006A9368;
  if (!qword_1006A9368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9368);
  }
  return result;
}

double SetChecklistItemsCheckedIntent.init()@<D0>(uint64_t a1@<X8>)
{
  sub_1004AE968((uint64_t *)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t SetChecklistItemsCheckedIntent.note.setter(uint64_t a1)
{
  uint64_t v2 = sub_10002F214(&qword_10069B1D0);
  __chkstk_darwin(v2 - 8);
  sub_10002F034(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10069B1D0);
  IntentParameter.wrappedValue.setter();
  return sub_10002B754(a1, &qword_10069B1D0);
}

void *SetChecklistItemsCheckedIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static SetChecklistItemsCheckedIntent.persistentIdentifier;
}

unint64_t static SetChecklistItemsCheckedIntent.persistentIdentifier.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_1004AB858()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static SetChecklistItemsCheckedIntent.title);
  sub_10003293C(v6, (uint64_t)static SetChecklistItemsCheckedIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t SetChecklistItemsCheckedIntent.title.unsafeMutableAddressor()
{
  return sub_1001B0DD8(&qword_10069B0E0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetChecklistItemsCheckedIntent.title);
}

uint64_t static SetChecklistItemsCheckedIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B0E6C(&qword_10069B0E0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetChecklistItemsCheckedIntent.title, a1);
}

uint64_t static SetChecklistItemsCheckedIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

uint64_t static SetChecklistItemsCheckedIntent.parameterSummary.getter()
{
  uint64_t v0 = sub_10002F214(&qword_1006A9370);
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_10002F214(&qword_1006A9378);
  __chkstk_darwin(v1);
  sub_1001FD960();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A9388);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._uint64_t countAndFlagsBits = 0x2065687420;
  v3._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A9390);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v4._object = (void *)0x8000000100560760;
  v4._uint64_t countAndFlagsBits = 0xD000000000000014;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v4);
  swift_getKeyPath();
  sub_10002F214(&qword_1006A9398);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v5);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t SetChecklistItemsCheckedIntent.perform()(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = *(void *)(type metadata accessor for ChecklistItemEntity() - 8);
  v2[8] = v3;
  v2[9] = *(void *)(v3 + 64);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1004AC094, 0, 0);
}

uint64_t sub_1004AC094()
{
  *(void *)(v0 + 96) = *(void *)(*(void *)(v0 + 56) + 8);
  IntentParameter.wrappedValue.getter();
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 104) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 112) = v2;
  if (v2)
  {
    Swift::String v4 = *(void **)(v0 + 56);
    uint64_t v3 = *(void *)(v0 + 64);
    *(void *)(v0 + 120) = v4[4];
    *(void *)(v0 + 128) = *v4;
    *(void *)(v0 + 136) = v4[2];
    *(void *)(v0 + 144) = v4[3];
    LODWORD(v5) = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 256) = v5;
    uint64_t v5 = v5;
    uint64_t v6 = (v5 + 16) & ~v5;
    uint64_t v7 = *(void *)(v0 + 80);
    unint64_t v8 = (*(void *)(v0 + 72) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v0 + 152) = *(void *)(v3 + 72);
    *(void *)(v0 + 160) = 0;
    uint64_t v9 = *(void *)(v0 + 88);
    sub_10017E164(v1 + ((v5 + 32) & ~v5), v9);
    AppDependency.wrappedValue.getter();
    uint64_t v10 = *(void **)(v0 + 32);
    *(void *)(v0 + 168) = [v10 modernManagedObjectContext];

    sub_10017E164(v9, v7);
    uint64_t v11 = swift_allocObject();
    *(void *)(v0 + 176) = v11;
    sub_10017E36C(v7, v11 + v6);
    unint64_t v12 = v11 + v8;
    uint64_t v13 = v4[4];
    long long v14 = *((_OWORD *)v4 + 1);
    *(_OWORD *)unint64_t v12 = *(_OWORD *)v4;
    *(_OWORD *)(v12 + 16) = v14;
    *(void *)(v12 + 32) = v13;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v15;
    objc_super v16 = (char *)sub_10002F214((uint64_t *)&unk_10069C930);
    *id v15 = v0;
    v15[1] = sub_1004AC3E8;
    uint64_t v17 = sub_1004AF668;
    id v18 = (void *)(v0 + 24);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v0 + 56);
    AppDependency.wrappedValue.getter();
    id v20 = *(void **)(v0 + 40);
    *(void *)(v0 + 224) = [v20 modernManagedObjectContext];

    uint64_t v11 = swift_allocObject();
    *(void *)(v0 + 232) = v11;
    uint64_t v21 = *(void *)(v19 + 32);
    long long v22 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)v19;
    *(_OWORD *)(v11 + 32) = v22;
    *(void *)(v11 + 48) = v21;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v18;
    void *v18 = v0;
    v18[1] = sub_1004ACE60;
    objc_super v16 = (char *)&type metadata for () + 8;
    uint64_t v17 = sub_1004AF758;
  }
  return NSManagedObjectContext.perform<A>(_:)(v18, v17, v11, v16);
}

uint64_t sub_1004AC3E8()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 168);
  swift_task_dealloc();
  swift_release();

  return _swift_task_switch(sub_1004AC518, 0, 0);
}

uint64_t sub_1004AC518()
{
  uint64_t v1 = *(void **)(v0 + 24);
  *(void *)(v0 + 192) = v1;
  if (!v1) {
    goto LABEL_6;
  }
  self;
  uint64_t v2 = (void *)swift_dynamicCastObjCClass();
  if (!v2)
  {

LABEL_6:
    sub_10017E494(*(void *)(v0 + 88));
    goto LABEL_8;
  }
  uint64_t v3 = v2;
  id v4 = [v2 managedObjectContext];
  *(void *)(v0 + 200) = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 56);
    unint64_t v7 = (*(unsigned __int8 *)(v0 + 256) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 256);
    unint64_t v8 = (v7 + *(void *)(v0 + 72) + 7) & 0xFFFFFFFFFFFFFFF8;
    sub_10017E164(*(void *)(v0 + 88), v5);
    uint64_t v9 = swift_allocObject();
    *(void *)(v0 + 208) = v9;
    *(void *)(v9 + 16) = v3;
    sub_10017E36C(v5, v9 + v7);
    unint64_t v10 = v9 + v8;
    uint64_t v11 = *(void *)(v6 + 32);
    long long v12 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v6;
    *(_OWORD *)(v10 + 16) = v12;
    *(void *)(v10 + 32) = v11;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v13 = v1;
    long long v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v14;
    id v15 = (char *)sub_10002F214((uint64_t *)&unk_1006A2BA0);
    *long long v14 = v0;
    v14[1] = sub_1004AC9EC;
    objc_super v16 = sub_1004AF930;
    uint64_t v17 = (void *)(v0 + 260);
    uint64_t v18 = v9;
    goto LABEL_11;
  }
  sub_10017E494(*(void *)(v0 + 88));

LABEL_8:
  uint64_t v19 = *(void *)(v0 + 160) + 1;
  if (v19 == *(void *)(v0 + 112))
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v0 + 56);
    AppDependency.wrappedValue.getter();
    uint64_t v21 = *(void **)(v0 + 40);
    *(void *)(v0 + 224) = [v21 modernManagedObjectContext];

    uint64_t v22 = swift_allocObject();
    *(void *)(v0 + 232) = v22;
    uint64_t v23 = *(void *)(v20 + 32);
    long long v24 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)(v22 + 16) = *(_OWORD *)v20;
    *(_OWORD *)(v22 + 32) = v24;
    *(void *)(v22 + 48) = v23;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1004ACE60;
    id v15 = (char *)&type metadata for () + 8;
    objc_super v16 = sub_1004AF758;
    uint64_t v18 = v22;
  }
  else
  {
    *(void *)(v0 + 160) = v19;
    uint64_t v25 = *(unsigned __int8 *)(v0 + 256);
    uint64_t v27 = *(void *)(v0 + 80);
    uint64_t v26 = *(void *)(v0 + 88);
    uint64_t v28 = *(void *)(v0 + 56);
    uint64_t v29 = (v25 + 16) & ~v25;
    unint64_t v30 = (v29 + *(void *)(v0 + 72) + 7) & 0xFFFFFFFFFFFFFFF8;
    sub_10017E164(*(void *)(v0 + 104) + ((v25 + 32) & ~v25) + *(void *)(v0 + 152) * v19, v26);
    AppDependency.wrappedValue.getter();
    id v31 = *(void **)(v0 + 32);
    *(void *)(v0 + 168) = [v31 modernManagedObjectContext];

    sub_10017E164(v26, v27);
    uint64_t v32 = swift_allocObject();
    *(void *)(v0 + 176) = v32;
    sub_10017E36C(v27, v32 + v29);
    unint64_t v33 = v32 + v30;
    uint64_t v34 = *(void *)(v28 + 32);
    long long v35 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)unint64_t v33 = *(_OWORD *)v28;
    *(_OWORD *)(v33 + 16) = v35;
    *(void *)(v33 + 32) = v34;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    long long v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v36;
    id v15 = (char *)sub_10002F214((uint64_t *)&unk_10069C930);
    *long long v36 = v0;
    v36[1] = sub_1004AC3E8;
    objc_super v16 = sub_1004AF668;
    uint64_t v17 = (void *)(v0 + 24);
    uint64_t v18 = v32;
  }
LABEL_11:
  return NSManagedObjectContext.perform<A>(_:)(v17, v16, v18, v15);
}

uint64_t sub_1004AC9EC()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 200);
  swift_task_dealloc();
  swift_release();

  return _swift_task_switch(sub_1004ACB1C, 0, 0);
}

uint64_t sub_1004ACB1C()
{
  uint64_t v1 = *(void *)(v0 + 88);

  sub_10017E494(v1);
  uint64_t v2 = *(void *)(v0 + 160) + 1;
  if (v2 == *(void *)(v0 + 112))
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v0 + 56);
    AppDependency.wrappedValue.getter();
    id v4 = *(void **)(v0 + 40);
    *(void *)(v0 + 224) = [v4 modernManagedObjectContext];

    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 232) = v5;
    uint64_t v6 = *(void *)(v3 + 32);
    long long v7 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)v3;
    *(_OWORD *)(v5 + 32) = v7;
    *(void *)(v5 + 48) = v6;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v8;
    *unint64_t v8 = v0;
    v8[1] = sub_1004ACE60;
    uint64_t v9 = (char *)&type metadata for () + 8;
    unint64_t v10 = sub_1004AF758;
    uint64_t v11 = v5;
  }
  else
  {
    *(void *)(v0 + 160) = v2;
    uint64_t v12 = *(unsigned __int8 *)(v0 + 256);
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = (v12 + 16) & ~v12;
    unint64_t v17 = (v16 + *(void *)(v0 + 72) + 7) & 0xFFFFFFFFFFFFFFF8;
    sub_10017E164(*(void *)(v0 + 104) + ((v12 + 32) & ~v12) + *(void *)(v0 + 152) * v2, v13);
    AppDependency.wrappedValue.getter();
    uint64_t v18 = *(void **)(v0 + 32);
    *(void *)(v0 + 168) = [v18 modernManagedObjectContext];

    sub_10017E164(v13, v14);
    uint64_t v19 = swift_allocObject();
    *(void *)(v0 + 176) = v19;
    sub_10017E36C(v14, v19 + v16);
    unint64_t v20 = v19 + v17;
    uint64_t v21 = *(void *)(v15 + 32);
    long long v22 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v15;
    *(_OWORD *)(v20 + 16) = v22;
    *(void *)(v20 + 32) = v21;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v23;
    uint64_t v9 = (char *)sub_10002F214((uint64_t *)&unk_10069C930);
    *uint64_t v23 = v0;
    v23[1] = sub_1004AC3E8;
    unint64_t v10 = sub_1004AF668;
    unint64_t v8 = (void *)(v0 + 24);
    uint64_t v11 = v19;
  }
  return NSManagedObjectContext.perform<A>(_:)(v8, v10, v11, v9);
}

uint64_t sub_1004ACE60()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1004ACFF8;
  }
  else
  {
    id v4 = *(void **)(v2 + 224);
    swift_release();

    uint64_t v3 = sub_1004ACF80;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004ACF80()
{
  static IntentResult.result<>()();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004ACFF8()
{
  uint64_t v1 = *(void **)(v0 + 224);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1004AD07C(void *a1@<X8>)
{
  AppDependency.wrappedValue.getter();
  id v2 = ChecklistItemEntity.note(in:)(v3);

  *a1 = v2;
}

id sub_1004AD0E0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ChecklistItemEntity();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [a1 textStorage];
  if (!result) {
    goto LABEL_3;
  }
  uint64_t v13 = result;
  id v43 = ICTTAttributeNameParagraphStyle;
  id v14 = [v13 ic_range];
  uint64_t v40 = v15;
  id v41 = v14;
  sub_10017E164(a2, (uint64_t)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = a3[1];
  uint64_t v34 = *a3;
  uint64_t v35 = v16;
  uint64_t v17 = a3[3];
  uint64_t v36 = a3[2];
  uint64_t v37 = v17;
  uint64_t v18 = a3[4];
  uint64_t v38 = a4;
  uint64_t v39 = v18;
  unint64_t v19 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v20 = (v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = a1;
  unint64_t v21 = (v20 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  sub_10017E36C((uint64_t)v11, v23 + v19);
  unint64_t v24 = v23 + v20;
  a4 = v38;
  long long v25 = *((_OWORD *)a3 + 1);
  *(_OWORD *)unint64_t v24 = *(_OWORD *)a3;
  *(_OWORD *)(v24 + 16) = v25;
  *(void *)(v24 + 32) = a3[4];
  *(void *)(v23 + v21) = v13;
  uint64_t v26 = v33;
  *(void *)(v23 + v22) = v33;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = sub_1004B0268;
  *(void *)(v27 + 24) = v23;
  aBlock[4] = sub_10017EBEC;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004A06C8;
  aBlock[3] = &unk_10063E838;
  uint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v29 = v13;
  id v30 = v26;
  swift_retain();
  swift_release();
  id v31 = v43;
  [v29 enumerateAttribute:v43 inRange:v41 options:v40 usingBlock:v28];

  _Block_release(v28);
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  id result = (id)swift_release();
  if (v29) {
    __break(1u);
  }
  else {
LABEL_3:
  }
    *a4 = 0;
  return result;
}

void sub_1004AD3E8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v64 = a3;
  id v65 = a8;
  uint64_t v62 = a2;
  id v63 = a7;
  uint64_t v61 = a6;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002F214((uint64_t *)&unk_1006A4F60);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10002F214((uint64_t *)&unk_10069C990);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  unint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v58 - v22;
  __chkstk_darwin(v21);
  long long v25 = (char *)&v58 - v24;
  sub_10002F034(a1, (uint64_t)v68, &qword_10069B4D0);
  if (!v69)
  {
    sub_10002B754((uint64_t)v68, &qword_10069B4D0);
    return;
  }
  sub_100031418(0, (unint64_t *)&qword_10069C9A0);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  id v26 = v67;
  if ([v67 style] != 103)
  {

    return;
  }
  uint64_t v60 = a4;
  uint64_t v27 = type metadata accessor for ChecklistItemID();
  uint64_t v28 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v25, a5 + *(int *)(v27 + 20), v11);
  uint64_t v29 = 1;
  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
  v58(v25, 0, 1, v11);
  id v59 = v26;
  id v30 = [v26 uuid];
  if (v30)
  {
    id v31 = v30;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v29 = 0;
  }
  v58(v23, v29, 1, v11);
  uint64_t v32 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_10002F034((uint64_t)v25, (uint64_t)v16, (uint64_t *)&unk_10069C990);
  sub_10002F034((uint64_t)v23, v32, (uint64_t *)&unk_10069C990);
  unint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  if (v33((uint64_t)v16, 1, v11) == 1)
  {
    sub_10002B754((uint64_t)v23, (uint64_t *)&unk_10069C990);
    sub_10002B754((uint64_t)v25, (uint64_t *)&unk_10069C990);
    int v34 = v33(v32, 1, v11);
    uint64_t v35 = v60;
    uint64_t v36 = v59;
    if (v34 == 1)
    {
      sub_10002B754((uint64_t)v16, (uint64_t *)&unk_10069C990);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  sub_10002F034((uint64_t)v16, (uint64_t)v20, (uint64_t *)&unk_10069C990);
  int v37 = v33(v32, 1, v11);
  uint64_t v38 = v60;
  if (v37 == 1)
  {
    sub_10002B754((uint64_t)v23, (uint64_t *)&unk_10069C990);
    sub_10002B754((uint64_t)v25, (uint64_t *)&unk_10069C990);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v20, v11);
    uint64_t v36 = v59;
LABEL_13:
    sub_10002B754((uint64_t)v16, (uint64_t *)&unk_1006A4F60);
    goto LABEL_31;
  }
  uint64_t v39 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v13, v32, v11);
  sub_1004B0354(&qword_10069DE60, (void (*)(uint64_t))&type metadata accessor for UUID);
  LODWORD(v58) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v39 + 8);
  v40(v13, v11);
  sub_10002B754((uint64_t)v23, (uint64_t *)&unk_10069C990);
  sub_10002B754((uint64_t)v25, (uint64_t *)&unk_10069C990);
  v40(v20, v11);
  uint64_t v35 = v38;
  sub_10002B754((uint64_t)v16, (uint64_t *)&unk_10069C990);
  uint64_t v36 = v59;
  if (v58)
  {
LABEL_15:
    id v41 = [v36 mutableCopy];
    if (!v41)
    {
LABEL_30:
      unsigned char *v35 = 1;
      goto LABEL_31;
    }
    uint64_t v42 = v41;
    IntentParameter.wrappedValue.getter();
    if (v68[0])
    {
      if (v68[0] == 1)
      {
        id v43 = [v36 todo];
        if (v43)
        {
          uint64_t v44 = v43;
          id v45 = [v43 todoWithDone:0];
LABEL_28:
          id v52 = v45;

          goto LABEL_29;
        }
      }
      else
      {
        id v47 = [v36 todo];
        if (v47)
        {
          uint64_t v44 = v47;
          id v48 = [v36 todo];
          if (v48)
          {
            Swift::String v49 = v48;
            unsigned int v50 = [v48 done];

            uint64_t v51 = v50 ^ 1;
          }
          else
          {
            uint64_t v51 = 1;
          }
          id v45 = [v44 todoWithDone:v51];
          goto LABEL_28;
        }
      }
    }
    else
    {
      id v46 = [v36 todo];
      if (v46)
      {
        uint64_t v44 = v46;
        id v45 = [v46 todoWithDone:1];
        goto LABEL_28;
      }
    }
    id v52 = 0;
LABEL_29:
    [v42 setTodo:v52];

    sub_10002F214(&qword_10069DE48);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100524D10;
    uint64_t v54 = (void *)ICTTAttributeNameParagraphStyle;
    *(void *)(inited + 32) = ICTTAttributeNameParagraphStyle;
    *(void *)(inited + 64) = sub_100031418(0, (unint64_t *)&qword_10069DE50);
    *(void *)(inited + 40) = v42;
    id v55 = v54;
    id v56 = v42;
    sub_100168480(inited);
    type metadata accessor for Key(0);
    sub_1004B0354((unint64_t *)&qword_10069BE28, type metadata accessor for Key);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v63 setAttributes:isa range:v62];

    [v65 updateModificationDateAndChangeCount];
    goto LABEL_30;
  }
LABEL_31:
}

id sub_1004ADB58()
{
  AppDependency.wrappedValue.getter();
  id v0 = [v4 modernManagedObjectContext];

  id v4 = 0;
  unsigned int v1 = [v0 save:&v4];

  if (v1) {
    return v4;
  }
  id v3 = v4;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_1004ADC38()
{
  uint64_t v0 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v3 = *(void *)(v12[0] - 8);
  __chkstk_darwin(v12[0]);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = type metadata accessor for TypeDisplayRepresentation();
  sub_100032974(v10, static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation);
  sub_10003293C(v10, (uint64_t)static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, void))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v12[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v2, 1, 1, v8);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation.unsafeMutableAddressor()
{
  return sub_1001B0DD8(&qword_10069B0E8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation);
}

uint64_t static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B0E6C(&qword_10069B0E8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation, a1);
}

unint64_t sub_1004ADF80()
{
  uint64_t v0 = sub_10002F214((uint64_t *)&unk_10069D360);
  __chkstk_darwin(v0 - 8);
  uint64_t v38 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  int v37 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v4 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for LocalizedStringResource();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  uint64_t v40 = v10;
  __chkstk_darwin(v9);
  sub_10002F214(&qword_1006A9448);
  uint64_t v11 = (int *)(sub_10002F214(&qword_1006A9450) - 8);
  uint64_t v12 = *(void *)(*(void *)v11 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(*(void *)v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v11 + 80);
  uint64_t v29 = 2 * v12;
  uint64_t v14 = swift_allocObject();
  uint64_t v30 = v14;
  *(_OWORD *)(v14 + 16) = xmmword_100529A00;
  unint64_t v28 = v14 + v13;
  unint64_t v25 = v14 + v13 + v11[14];
  *(unsigned char *)(v14 + v13) = 0;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  unsigned int v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  uint64_t v27 = v4 + 104;
  unint64_t v33 = v15;
  ((void (*)(char *))v15)(v6);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
  v40 += 56;
  uint64_t v35 = v16;
  v16(v37, 1, 1, v39);
  uint64_t v32 = type metadata accessor for DisplayRepresentation.Image();
  uint64_t v17 = *(void *)(v32 - 8);
  id v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v34 = v17 + 56;
  v31(v38, 1, 1, v32);
  DisplayRepresentation.init(title:subtitle:image:)();
  unint64_t v18 = v28;
  unint64_t v25 = v28 + v12 + v11[14];
  *(unsigned char *)(v28 + v12) = 1;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v19 = v26;
  v33(v6, v26, v36);
  unint64_t v20 = v6;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v21 = v37;
  v35(v37, 1, 1, v39);
  uint64_t v22 = v38;
  v31(v38, 1, 1, v32);
  DisplayRepresentation.init(title:subtitle:image:)();
  *(unsigned char *)(v18 + v29) = 2;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v33(v20, v19, v36);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v35(v21, 1, 1, v39);
  v31(v22, 1, 1, v32);
  DisplayRepresentation.init(title:subtitle:image:)();
  unint64_t result = sub_1001694D4(v30);
  static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations = result;
  return result;
}

uint64_t *SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_10069B0F0 != -1) {
    swift_once();
  }
  return &static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations;
}

uint64_t static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations.getter()
{
  if (qword_10069B0F0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations.setter(uint64_t a1)
{
  if (qword_10069B0F0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations.modify())()
{
  if (qword_10069B0F0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

_UNKNOWN **static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.allCases.getter()
{
  return &off_10062D120;
}

unint64_t sub_1004AE760@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s11MobileNotes30SetChecklistItemsCheckedIntentV0F19ChangeOperationTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004AE790@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B1AA8(&qword_10069B0E8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation, a1);
}

uint64_t sub_1004AE7C8(uint64_t a1)
{
  unint64_t v2 = sub_1001589BC();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1004AE814(uint64_t a1)
{
  unint64_t v2 = sub_1004AFC30();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_1004AE860(void *a1@<X8>)
{
  *a1 = &off_10062B6B8;
}

uint64_t sub_1004AE870@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B1AA8(&qword_10069B0E0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetChecklistItemsCheckedIntent.title, a1);
}

uint64_t sub_1004AE8B0(uint64_t a1)
{
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(void *)(v2 + 48) = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v5;
  void *v5 = v2;
  v5[1] = sub_1001C3F70;
  return SetChecklistItemsCheckedIntent.perform()(a1);
}

uint64_t sub_1004AE968@<X0>(uint64_t *a1@<X8>)
{
  unsigned int v50 = a1;
  uint64_t v1 = sub_10002F214(&qword_10069B1D0);
  __chkstk_darwin(v1 - 8);
  Swift::String v49 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for InputConnectionBehavior();
  uint64_t v68 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v60 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10002F214((uint64_t *)&unk_10069C9B0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  id v67 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v66 = (char *)v45 - v7;
  uint64_t v8 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v8 - 8);
  uint64_t v58 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Locale();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for LocalizedStringResource();
  uint64_t v62 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v65 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10002F214(&qword_10069B570);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v19 = *(void (**)(char *))(v11 + 104);
  uint64_t v20 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  unsigned int v51 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v53 = v10;
  v19(v13);
  id v52 = v19;
  uint64_t v54 = v11 + 104;
  v45[0] = v13;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  ((void (*)(char *, uint64_t, uint64_t))v19)(v13, v20, v10);
  uint64_t v21 = v58;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56);
  uint64_t v61 = v17 + 56;
  id v63 = v22;
  v22(v21, 0, 1, v16);
  LOBYTE(v71) = 2;
  uint64_t v23 = type metadata accessor for IntentDialog();
  uint64_t v56 = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v57 = v24 + 56;
  v25(v66, 1, 1, v23);
  v25(v67, 1, 1, v23);
  unsigned int v59 = enum case for InputConnectionBehavior.default(_:);
  id v55 = *(void (**)(char *))(v68 + 104);
  v68 += 104;
  uint64_t v26 = v64;
  v55(v60);
  sub_1001589BC();
  uint64_t v48 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
  uint64_t v47 = sub_10002F214((uint64_t *)&unk_10069B160);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v27 = v45[0];
  uint64_t v28 = v51;
  uint64_t v29 = v53;
  uint64_t v30 = (void (*)(uint64_t, uint64_t, uint64_t))v52;
  ((void (*)(void, void, uint64_t))v52)(v45[0], v51, v53);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v30(v27, v28, v29);
  id v31 = v58;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v63(v31, 0, 1, v62);
  uint64_t v71 = 0;
  uint64_t v32 = v56;
  id v46 = v25;
  v25(v66, 1, 1, v56);
  v25(v67, 1, 1, v32);
  unint64_t v33 = v60;
  ((void (*)(char *, void, uint64_t))v55)(v60, v59, v26);
  sub_1004B0354(qword_1006A4EE0, (void (*)(uint64_t))type metadata accessor for ChecklistItemEntity);
  uint64_t v47 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  v45[1] = sub_10002F214(&qword_10069B210);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v34 = v51;
  uint64_t v35 = v53;
  uint64_t v36 = (void (*)(uint64_t, uint64_t, uint64_t))v52;
  ((void (*)(uint64_t, void, uint64_t))v52)(v27, v51, v53);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v36(v27, v34, v35);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  v63(v31, 0, 1, v62);
  uint64_t v37 = type metadata accessor for NoteEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v49, 1, 1, v37);
  uint64_t v38 = v56;
  uint64_t v39 = v46;
  v46(v66, 1, 1, v56);
  v39(v67, 1, 1, v38);
  ((void (*)(char *, void, uint64_t))v55)(v33, v59, v64);
  sub_1004B0354((unint64_t *)&qword_10069B1E0, (void (*)(uint64_t))type metadata accessor for NoteEntity);
  uint64_t v40 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  sub_10002F214((uint64_t *)&unk_10069B130);
  unint64_t v69 = 0xD000000000000024;
  unint64_t v70 = 0x8000000100549260;
  AnyHashable.init<A>(_:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t v41 = AppDependency.__allocating_init(key:manager:)();
  sub_10002F214((uint64_t *)&unk_10069CE60);
  unint64_t v69 = 0xD000000000000021;
  unint64_t v70 = 0x8000000100549290;
  AnyHashable.init<A>(_:)();
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  id v43 = v50;
  uint64_t v44 = v47;
  *unsigned int v50 = v48;
  v43[1] = v44;
  v43[2] = v40;
  v43[3] = v41;
  v43[4] = result;
  return result;
}

uint64_t sub_1004AF458@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1004AF484@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1004AF4B4()
{
  uint64_t v1 = (int *)(type metadata accessor for ChecklistItemEntity() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + *(int *)(type metadata accessor for ChecklistItemID() + 20);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  v8(v6 + v1[7], v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

void sub_1004AF668(void *a1@<X8>)
{
}

uint64_t sub_1004AF700()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

id sub_1004AF758()
{
  return sub_1004ADB58();
}

uint64_t sub_1004AF774()
{
  uint64_t v1 = (int *)(type metadata accessor for ChecklistItemEntity() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + *(int *)(type metadata accessor for ChecklistItemID() + 20);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  v8(v6 + v1[7], v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 40, v4);
}

id sub_1004AF930@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ChecklistItemEntity() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1004AD0E0(*(void **)(v1 + 16), v1 + v4, (void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)), a1);
}

unint64_t _s11MobileNotes30SetChecklistItemsCheckedIntentV0F19ChangeOperationTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10062D0B8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_1004AFA1C()
{
  unint64_t result = qword_1006A93A8;
  if (!qword_1006A93A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A93A8);
  }
  return result;
}

unint64_t sub_1004AFA74()
{
  unint64_t result = qword_1006A93B0;
  if (!qword_1006A93B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A93B0);
  }
  return result;
}

unint64_t sub_1004AFACC()
{
  unint64_t result = qword_1006A93B8;
  if (!qword_1006A93B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A93B8);
  }
  return result;
}

unint64_t sub_1004AFB24()
{
  unint64_t result = qword_1006A93C0;
  if (!qword_1006A93C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A93C0);
  }
  return result;
}

unint64_t sub_1004AFB7C()
{
  unint64_t result = qword_1006A93C8;
  if (!qword_1006A93C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A93C8);
  }
  return result;
}

unint64_t sub_1004AFBD4()
{
  unint64_t result = qword_1006A93D0;
  if (!qword_1006A93D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A93D0);
  }
  return result;
}

unint64_t sub_1004AFC30()
{
  unint64_t result = qword_1006A93E0;
  if (!qword_1006A93E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A93E0);
  }
  return result;
}

uint64_t sub_1004AFC84()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1004AFCD8()
{
  unint64_t result = qword_1006A93F0;
  if (!qword_1006A93F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A93F0);
  }
  return result;
}

unint64_t sub_1004AFD30()
{
  unint64_t result = qword_1006A93F8;
  if (!qword_1006A93F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A93F8);
  }
  return result;
}

unint64_t sub_1004AFD88()
{
  unint64_t result = qword_1006A9400;
  if (!qword_1006A9400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9400);
  }
  return result;
}

uint64_t sub_1004AFDDC()
{
  return sub_10001DFB0(&qword_1006A9408, &qword_1006A9410);
}

unint64_t sub_1004AFE1C()
{
  unint64_t result = qword_1006A9418;
  if (!qword_1006A9418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9418);
  }
  return result;
}

unint64_t sub_1004AFE74()
{
  unint64_t result = qword_1006A9420;
  if (!qword_1006A9420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9420);
  }
  return result;
}

uint64_t sub_1004AFEC8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1004AFEE4()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SetChecklistItemsCheckedIntent()
{
  return &type metadata for SetChecklistItemsCheckedIntent;
}

unsigned char *storeEnumTagSinglePayload for SetChecklistItemsCheckedIntent.CheckedChangeOperationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004AFFDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType()
{
  return &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType;
}

uint64_t sub_1004B0014()
{
  return sub_10001DFB0(&qword_1006A9430, (uint64_t *)&unk_1006A9438);
}

uint64_t sub_1004B0050()
{
  return sub_10001DFB0((unint64_t *)&qword_10069DE30, (uint64_t *)&unk_10069C980);
}

uint64_t sub_1004B008C()
{
  uint64_t v1 = (int *)(type metadata accessor for ChecklistItemEntity() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + *(int *)(type metadata accessor for ChecklistItemID() + 20);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  v8(v6 + v1[7], v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v12);
}

void sub_1004B0268(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for ChecklistItemEntity() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = *(void **)(v4 + v12);
  uint64_t v14 = *(void **)(v4 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1004AD3E8(a1, a2, a3, a4, v4 + v10, v4 + v11, v13, v14);
}

uint64_t sub_1004B0344()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004B0354(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1004B039C()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell____lazy_storage___switchView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell____lazy_storage___switchView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell____lazy_storage___switchView);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UISwitch) init];
    [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v4 addTarget:v0 action:"onDidChangeWithSender:" forControlEvents:4096];
    unint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_1004B0444()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v27[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UICollectionViewListCell.defaultContentConfiguration()();
  swift_bridgeObjectRetain();
  UIListContentConfiguration.text.setter();
  v27[3] = v2;
  void v27[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  id v6 = sub_10015E0F0(v27);
  (*(void (**)(uint64_t *, char *, uint64_t))(v3 + 16))(v6, v5, v2);
  UICollectionViewCell.contentConfiguration.setter();
  id v7 = sub_1004B039C();
  id v8 = [v7 superview];

  if (!v8)
  {
    id v9 = [v1 contentView];
    id v10 = sub_1004B039C();
    [v9 addSubview:v10];

    unint64_t v11 = self;
    sub_10002F214(&qword_10069BA00);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_100524CE0;
    id v13 = sub_1004B039C();
    id v14 = [v13 trailingAnchor];

    id v15 = [v1 contentView];
    id v16 = [v15 trailingAnchor];

    UIListContentConfiguration.imageToTextPadding.getter();
    id v18 = [v14 constraintEqualToAnchor:v16 constant:-v17];

    *(void *)(v12 + 32) = v18;
    id v19 = sub_1004B039C();
    id v20 = [v19 centerYAnchor];

    id v21 = [v1 contentView];
    id v22 = [v21 centerYAnchor];

    id v23 = [v20 constraintEqualToAnchor:v22];
    *(void *)(v12 + 40) = v23;
    v27[0] = v12;
    specialized Array._endMutation()();
    sub_100290024();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 activateConstraints:isa];
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for SmartFolderComposerSwitchCell()
{
  return self;
}

void *ScanDocumentIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static ScanDocumentIntent.persistentIdentifier;
}

uint64_t sub_1004B0AC4()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_100032974(v6, static ScanDocumentIntent.title);
  sub_10003293C(v6, (uint64_t)static ScanDocumentIntent.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t ScanDocumentIntent.title.unsafeMutableAddressor()
{
  if (qword_10069B0F8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for LocalizedStringResource();

  return sub_10003293C(v0, (uint64_t)static ScanDocumentIntent.title);
}

uint64_t static ScanDocumentIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10069B0F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003293C(v2, (uint64_t)static ScanDocumentIntent.title);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void *ScanDocumentIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static ScanDocumentIntent.openAppWhenRun;
}

uint64_t static ScanDocumentIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002F214(&qword_10069C900);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
}

uint64_t static ScanDocumentIntent.parameterSummary.getter()
{
  uint64_t v0 = sub_10002F214(&qword_1006A94A0);
  __chkstk_darwin(v0 - 8);
  sub_100034AB4();
  ParameterSummaryString.init(stringLiteral:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_1004B117C()
{
  uint64_t v0 = sub_10002F214(&qword_1006A94A0);
  __chkstk_darwin(v0 - 8);
  ParameterSummaryString.init(stringLiteral:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_1004B1240()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1004B125C()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ScanDocumentIntent()
{
  return &type metadata for ScanDocumentIntent;
}

uint64_t sub_1004B1288()
{
  return sub_10001DFB0(&qword_1006A94C0, &qword_1006A94C8);
}

id sub_1004B12C4(double a1, uint64_t a2, uint64_t (**a3)(void, void, int64_t, id, uint64_t, uint64_t, double), int a4, void *a5, uint64_t a6)
{
  uint64_t v179 = a6;
  id v180 = a5;
  LODWORD(v178) = a4;
  v177 = a3;
  uint64_t v185 = type metadata accessor for UUID();
  uint64_t v181 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  v182 = (char *)&v158 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002F214(&qword_1006A94F0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  v184 = (char *)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v183 = (uint64_t)&v158 - v11;
  uint64_t v12 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v172 = (uint64_t)&v158 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  v171 = (char *)&v158 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v169 = (char *)&v158 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v170 = (char *)&v158 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v167 = (char *)&v158 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v168 = (char *)&v158 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v165 = (char *)&v158 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v166 = (char *)&v158 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v173 = (uint64_t *)((char *)&v158 - v30);
  uint64_t v31 = __chkstk_darwin(v29);
  v164 = (char *)&v158 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v158 - v34;
  __chkstk_darwin(v33);
  uint64_t v174 = (uint64_t)&v158 - v36;
  uint64_t v37 = type metadata accessor for Date();
  int64_t v176 = *(void *)(v37 - 8);
  uint64_t v38 = __chkstk_darwin(v37);
  uint64_t v40 = (char *)&v158 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v38);
  id v43 = (char *)&v158 - v42;
  uint64_t v44 = __chkstk_darwin(v41);
  id v46 = (char *)&v158 - v45;
  uint64_t v47 = __chkstk_darwin(v44);
  Swift::String v49 = (char *)&v158 - v48;
  __chkstk_darwin(v47);
  unsigned int v51 = (char *)&v158 - v50;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v53 = v175;
  id v54 = v186;
  id result = (id)v177[4](*(void *)(v175 + 8), *(void *)(v175 + 16), v178 & 0x101, v180, v179, ObjectType, a1);
  if (!v54)
  {
    long long v159 = v43;
    uint64_t v160 = v46;
    v163 = v40;
    id v186 = result;
    long long v162 = (int *)type metadata accessor for ICNoteArchiveModel();
    uint64_t v56 = v174;
    sub_10002F034(v53 + v162[10], v174, (uint64_t *)&unk_1006A3E20);
    int64_t v57 = v176;
    uint64_t v58 = *(uint64_t (***)(void, void, int64_t, id, uint64_t, uint64_t, double))(v176 + 48);
    int64_t v161 = v176 + 48;
    v177 = v58;
    int v59 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v58)(v56, 1, v37);
    uint64_t v60 = v37;
    int64_t v61 = v57;
    uint64_t v158 = 0;
    if (v59 == 1)
    {
      Date.init()();
      sub_10002B754(v56, (uint64_t *)&unk_1006A3E20);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v49, v56, v60);
    }
    uint64_t v62 = (uint64_t)v35;
    uint64_t v63 = v60;
    static Date.+ infix(_:_:)();
    uint64_t v64 = *(void (**)(char *, uint64_t))(v61 + 8);
    v64(v49, v63);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    int64_t v178 = (int64_t)v64;
    uint64_t v179 = v61 + 8;
    v64(v51, v63);
    [v186 setCreationDate:isa];

    sub_10002F034(v53 + v162[11], v62, (uint64_t *)&unk_1006A3E20);
    uint64_t v66 = (unsigned int (*)(void, void, void))v177;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v177)(v62, 1, v63) == 1)
    {
      id v67 = v159;
      Date.init()();
      sub_10002B754(v62, (uint64_t *)&unk_1006A3E20);
    }
    else
    {
      id v67 = v159;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v159, v62, v63);
    }
    uint64_t v68 = v160;
    static Date.+ infix(_:_:)();
    unint64_t v69 = v67;
    unint64_t v70 = (void (*)(char *, uint64_t))v178;
    ((void (*)(char *, uint64_t))v178)(v69, v63);
    Class v71 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v174 = v63;
    v70(v68, v63);
    [v186 setModificationDate:v71];

    uint64_t v72 = v162;
    uint64_t v73 = v53;
    if (*(void *)(v53 + v162[12] + 8)) {
      NSString v74 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v74 = 0;
    }
    int64_t v75 = v176;
    id v76 = v186;
    [v186 setTitle:v74, v158];

    [v76 setIsPinned:*(unsigned char *)(v73 + v72[13]) & 1];
    [v76 setIsSystemPaper:*(unsigned char *)(v73 + v72[14]) & 1];
    [v76 setPaperStyleType:word_1005A94E0[*(char *)(v73 + v72[15])]];
    int v77 = *(unsigned __int8 *)(v73 + v72[16]);
    if (v77) {
      unsigned int v78 = 2;
    }
    else {
      unsigned int v78 = 1;
    }
    if (v77 == 2) {
      uint64_t v79 = 0;
    }
    else {
      uint64_t v79 = v78;
    }
    [v76 setPreferredBackgroundType:v79];
    uint64_t v80 = v174;
    uint64_t v81 = 0;
    switch(*(unsigned char *)(v73 + v72[17]))
    {
      case 1:
        uint64_t v81 = 1;
        break;
      case 2:
        uint64_t v81 = 2;
        break;
      case 3:
        uint64_t v81 = [v186 attachmentViewType];
        break;
      default:
        break;
    }
    [v186 setAttachmentViewType:v81];
    if (*(void *)(v73 + v72[18] + 8)) {
      NSString v82 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v82 = 0;
    }
    [v186 setHostApplicationIdentifier:v82];

    double v83 = (void (*)(void, void, void, void))v173;
    sub_10002F034(v73 + v72[19], (uint64_t)v173, (uint64_t *)&unk_1006A3E20);
    if (v66(v83, 1, v80) == 1)
    {
      double v84 = v164;
      v173 = *(void **)(v75 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v173)(v164, 1, 1, v80);
    }
    else
    {
      double v85 = v163;
      (*(void (**)(char *, void (*)(void, void, void, void), uint64_t))(v75 + 32))(v163, v83, v80);
      id v86 = v180;
      uint64_t v87 = v164;
      static Date.+ infix(_:_:)();
      id v88 = v85;
      uint64_t v66 = (unsigned int (*)(void, void, void))v177;
      ((void (*)(char *, uint64_t))v178)(v88, v80);
      v173 = *(void **)(v75 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v173)(v87, 0, 1, v80);

      double v84 = v87;
    }
    if (v66(v84, 1, v80) == 1)
    {
      Class v89 = 0;
    }
    else
    {
      Class v89 = Date._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, uint64_t))v178)(v84, v80);
    }
    uint64_t v90 = (uint64_t)v165;
    [v186 setLastOpenedDate:v89];

    sub_10002F034(v73 + v72[20], v90, (uint64_t *)&unk_1006A3E20);
    if (v66(v90, 1, v80) == 1)
    {
      id v91 = v166;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v173)(v166, 1, 1, v80);
    }
    else
    {
      id v92 = v163;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v163, v90, v174);
      id v93 = v180;
      id v94 = v166;
      static Date.+ infix(_:_:)();
      id v95 = v92;
      uint64_t v66 = (unsigned int (*)(void, void, void))v177;
      ((void (*)(char *, uint64_t))v178)(v95, v174);
      uint64_t v80 = v174;
      ((void (*)(char *, void, uint64_t, uint64_t))v173)(v94, 0, 1, v174);

      id v91 = v94;
    }
    if (v66(v91, 1, v80) == 1)
    {
      Class v96 = 0;
    }
    else
    {
      Class v96 = Date._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, uint64_t))v178)(v91, v80);
    }
    uint64_t v97 = (uint64_t)v167;
    [v186 setLastActivitySummaryViewedDate:v96];

    sub_10002F034(v73 + v72[21], v97, (uint64_t *)&unk_1006A3E20);
    if (v66(v97, 1, v80) == 1)
    {
      id v98 = v168;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v173)(v168, 1, 1, v80);
    }
    else
    {
      id v99 = v163;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v163, v97, v174);
      id v100 = v180;
      id v98 = v168;
      static Date.+ infix(_:_:)();
      ((void (*)(char *, uint64_t))v178)(v99, v174);
      uint64_t v80 = v174;
      ((void (*)(char *, void, uint64_t, uint64_t))v173)(v98, 0, 1, v174);
    }
    uint64_t v101 = (uint64_t)v169;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v177)(v98, 1, v80) == 1)
    {
      Class v102 = 0;
    }
    else
    {
      Class v102 = Date._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, uint64_t))v178)(v98, v80);
    }
    id v103 = v163;
    [v186 setLastActivityRecentUpdatesViewedDate:v102];

    sub_10002F034(v73 + v72[22], v101, (uint64_t *)&unk_1006A3E20);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v177)(v101, 1, v80) == 1)
    {
      id v104 = v170;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v173)(v170, 1, 1, v80);
      uint64_t v105 = v80;
    }
    else
    {
      int64_t v106 = v75;
      uint64_t v105 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 32))(v103, v101, v80);
      id v107 = v180;
      id v108 = v170;
      static Date.+ infix(_:_:)();
      ((void (*)(char *, uint64_t))v178)(v103, v80);
      ((void (*)(char *, void, uint64_t, uint64_t))v173)(v108, 0, 1, v80);

      id v104 = v108;
    }
    uint64_t v109 = v181;
    uint64_t v110 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v177;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v177)(v104, 1, v105) == 1)
    {
      Class v111 = 0;
    }
    else
    {
      uint64_t v112 = v109;
      uint64_t v113 = v104;
      Class v111 = Date._bridgeToObjectiveC()().super.isa;
      id v114 = v113;
      uint64_t v109 = v112;
      ((void (*)(char *, uint64_t))v178)(v114, v105);
    }
    [v186 setRecentUpdatesGenerationDate:v111];

    uint64_t v115 = v172;
    sub_10002F034(v73 + v72[23], v172, (uint64_t *)&unk_1006A3E20);
    if (v110(v115, 1, v105) == 1)
    {
      unint64_t v116 = v171;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v173)(v171, 1, 1, v105);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v176 + 32))(v103, v115, v105);
      id v117 = v180;
      unint64_t v116 = v171;
      static Date.+ infix(_:_:)();
      ((void (*)(char *, uint64_t))v178)(v103, v105);
      uint64_t v110 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v177;
      ((void (*)(char *, void, uint64_t, uint64_t))v173)(v116, 0, 1, v105);
    }
    if (v110((uint64_t)v116, 1, v105) == 1)
    {
      Class v118 = 0;
    }
    else
    {
      Class v118 = Date._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, uint64_t))v178)(v116, v105);
    }
    [v186 setLastAttributionsViewedDate:v118];

    Class v119 = *(Class *)(v73 + v72[26]);
    if (v119)
    {
      id v120 = objc_allocWithZone((Class)ICOutlineState);
      sub_1004BB338((unint64_t *)&qword_1006A4DD0, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_bridgeObjectRetain();
      Class v121 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v122 = [v120 initWithCollapsedUUIDs:v121];

      Class v119 = (Class)[v122 data];
      if (v119)
      {
        uint64_t v123 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v125 = v124;

        Class v119 = Data._bridgeToObjectiveC()().super.isa;
        sub_10017253C(v123, v125);
      }
    }
    [v186 setOutlineStateData:v119];

    uint64_t v126 = v72[28];
    uint64_t v127 = v185;
    if (*(void *)(v73 + v126)) {
      unint64_t v128 = *(void *)(v73 + v126);
    }
    else {
      unint64_t v128 = sub_100168AD0((uint64_t)_swiftEmptyArrayStorage);
    }
    id v180 = (id)v128;
    uint64_t v129 = *(void *)(v128 + 64);
    v177 = (uint64_t (**)(void, void, int64_t, id, uint64_t, uint64_t, double))(v128 + 64);
    uint64_t v130 = 1 << *(unsigned char *)(v128 + 32);
    uint64_t v131 = -1;
    if (v130 < 64) {
      uint64_t v131 = ~(-1 << v130);
    }
    unint64_t v132 = v131 & v129;
    int64_t v178 = (unint64_t)(v130 + 63) >> 6;
    uint64_t v179 = v109 + 16;
    Swift::Int v133 = (void (**)(char *, uint64_t, uint64_t))(v109 + 32);
    uint64_t v134 = (void (**)(char *, uint64_t))(v109 + 8);
    int64_t v176 = v178 - 1;
    swift_bridgeObjectRetain();
    int64_t v135 = 0;
    unint64_t v136 = (uint64_t *)&unk_1006A94F8;
    if (!v132) {
      goto LABEL_67;
    }
LABEL_65:
    unint64_t v142 = __clz(__rbit64(v132));
    v132 &= v132 - 1;
    unint64_t v143 = v142 | (v135 << 6);
    uint64_t v144 = v184;
LABEL_66:
    uint64_t v145 = v180;
    (*(void (**)(char *, unint64_t, uint64_t))(v181 + 16))(v144, *((void *)v180 + 6) + *(void *)(v181 + 72) * v143, v127);
    uint64_t v146 = (uint64_t *)(v145[7] + 16 * v143);
    uint64_t v147 = sub_10002F214(v136);
    v148 = &v144[*(int *)(v147 + 48)];
    uint64_t v149 = *v146;
    uint64_t v150 = v146[1];
    *(void *)v148 = v149;
    *((void *)v148 + 1) = v150;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v147 - 8) + 56))(v144, 0, 1, v147);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v155 = (uint64_t)v144;
      uint64_t v156 = v183;
      sub_10002F1B0(v155, v183, &qword_1006A94F0);
      uint64_t v157 = sub_10002F214(v136);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 48))(v156, 1, v157) == 1) {
        break;
      }
      uint64_t v137 = v136;
      uint64_t v138 = v182;
      (*v133)(v182, v156, v127);
      NSString v139 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class v140 = UUID._bridgeToObjectiveC()().super.isa;
      [v186 addUserID:v139 forReplicaID:v140];

      uint64_t v127 = v185;
      uint64_t v141 = v138;
      unint64_t v136 = v137;
      (*v134)(v141, v127);
      if (v132) {
        goto LABEL_65;
      }
LABEL_67:
      int64_t v151 = v135 + 1;
      uint64_t v144 = v184;
      if (__OFADD__(v135, 1))
      {
        __break(1u);
LABEL_89:
        __break(1u);
        JUMPOUT(0x1004B2668);
      }
      if (v151 < v178)
      {
        unint64_t v152 = (unint64_t)v177[v151];
        if (v152) {
          goto LABEL_70;
        }
        int64_t v153 = v135 + 2;
        ++v135;
        if (v151 + 1 < v178)
        {
          unint64_t v152 = (unint64_t)v177[v153];
          if (v152) {
            goto LABEL_73;
          }
          int64_t v135 = v151 + 1;
          if (v151 + 2 < v178)
          {
            unint64_t v152 = (unint64_t)v177[v151 + 2];
            if (v152)
            {
              v151 += 2;
              goto LABEL_70;
            }
            int64_t v153 = v151 + 3;
            int64_t v135 = v151 + 2;
            if (v151 + 3 < v178)
            {
              unint64_t v152 = (unint64_t)v177[v153];
              if (v152)
              {
LABEL_73:
                int64_t v151 = v153;
LABEL_70:
                unint64_t v132 = (v152 - 1) & v152;
                unint64_t v143 = __clz(__rbit64(v152)) + (v151 << 6);
                int64_t v135 = v151;
                goto LABEL_66;
              }
              while (1)
              {
                int64_t v151 = v153 + 1;
                if (__OFADD__(v153, 1)) {
                  goto LABEL_89;
                }
                if (v151 >= v178) {
                  break;
                }
                unint64_t v152 = (unint64_t)v177[v151];
                ++v153;
                if (v152) {
                  goto LABEL_70;
                }
              }
              int64_t v135 = v176;
            }
          }
        }
      }
      uint64_t v154 = sub_10002F214(v136);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v154 - 8) + 56))(v144, 1, 1, v154);
      unint64_t v132 = 0;
    }
    swift_release();
    return v186;
  }
  return result;
}

id sub_1004B2678(id a1, uint64_t a2, __int16 a3, uint64_t a4, char *a5, double a6)
{
  uint64_t v14 = type metadata accessor for ICNoteArchiveModel();
  uint64_t v15 = (uint64_t *)(v6 + *(int *)(v14 + 100));
  uint64_t v16 = v15[1];
  if (!v16)
  {
    uint64_t v21 = (uint64_t *)(v6 + *(int *)(v14 + 96));
    uint64_t v22 = v21[10];
    if (!v22) {
      return 0;
    }
    uint64_t v23 = v21[1];
    unint64_t v24 = v21[2];
    uint64_t v25 = v21[3];
    unint64_t v26 = v21[4];
    uint64_t v27 = v21[5];
    uint64_t v60 = a1;
    unint64_t v29 = v21[6];
    uint64_t v28 = v21[7];
    unint64_t v31 = v21[8];
    uint64_t v30 = v21[9];
    uint64_t v32 = v21[11];
    unint64_t v33 = v21[12];
    uint64_t v62 = *v21;
    void aBlock[6] = *v21;
    void aBlock[7] = v23;
    aBlock[8] = v24;
    aBlock[9] = v25;
    aBlock[10] = v26;
    aBlock[11] = v27;
    aBlock[12] = v29;
    aBlock[13] = v28;
    aBlock[14] = v31;
    aBlock[15] = v30;
    uint64_t v58 = v23;
    uint64_t v59 = v30;
    aBlock[16] = v22;
    aBlock[17] = v32;
    aBlock[18] = v33;
    unint64_t _ = v24;
    sub_100172484(v23, v24);
    unint64_t v63 = v26;
    uint64_t v64 = v25;
    unint64_t v34 = v26;
    uint64_t v35 = v27;
    sub_100172484(v25, v34);
    unint64_t v61 = v29;
    unint64_t v36 = v29;
    uint64_t v37 = v28;
    sub_100172484(v27, v36);
    sub_100172484(v28, v31);
    swift_bridgeObjectRetain();
    sub_100172484(v32, v33);
    sub_100171CD0(v60);
    id v38 = [v60 noteData];
    if (v38)
    {
      uint64_t v39 = v38;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v39 setData:isa];
    }
    a1 = [v60 noteData];
    sub_1004B7FAC(v62, v58, _, v64, v63, v35, v61, v37, v31, v59, v22, v32, v33);
    return a1;
  }
  uint64_t v17 = v15[2];
  uint64_t v18 = *v15;
  uint64_t v19 = sub_1004B7050(a2);
  id v20 = sub_1002C4608(v19, (uint64_t)a1, (uint64_t)&off_100636F98, a3 & 0x101, a4, a5, a6, v18, v16, v17);
  swift_release();
  if (v7) {
    return a1;
  }
  _a = v20;
  id result = [a1 textStorage];
  if (result)
  {
    uint64_t v42 = result;
    [result beginSkippingTimestampUpdates];
    id v43 = [v42 mergeableString];
    id v44 = [v42 ic_range];
    uint64_t v46 = v45;
    id v47 = [objc_allocWithZone((Class)NSAttributedString) init];
    [v43 replaceCharactersInRange:v44 withAttributedString:v46];

    id v48 = [v42 mergeableString];
    ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)((NSAttributedString)_a, 0);

    id v49 = [v42 mergeableString];
    id v65 = [v42 ic_range];
    uint64_t v51 = v50;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = a1;
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = sub_1004B80B0;
    *(void *)(v53 + 24) = v52;
    aBlock[4] = sub_1004B80C8;
    aBlock[5] = v53;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1004B6498;
    aBlock[3] = &unk_10063E940;
    id v54 = _Block_copy(aBlock);
    id v55 = a1;
    swift_retain();
    swift_release();
    [v49 enumerateEditsInRange:v65 usingBlock:v51, v54];

    _Block_release(v54);
    LOBYTE(v54) = swift_isEscapingClosureAtFileLocation();
    id result = (id)swift_release();
    if ((v54 & 1) == 0)
    {
      [v42 endSkippingTimestampUpdates];
      id v56 = [v55 noteData];
      if (v56)
      {
        int64_t v57 = v56;
        [v56 setNeedsToBeSaved:1];
      }
      a1 = [v55 noteData];
      swift_release();

      return a1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1004B2B4C(uint64_t a1)
{
  uint64_t v4 = sub_10002F214(&qword_1006A1110);
  __chkstk_darwin(v4 - 8);
  uint64_t v35 = (uint64_t)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002F214(&qword_1006A1118);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PersistedActivityEvent();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v31 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = _s8ActivityVMa();
  uint64_t v12 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v1 + *(int *)(type metadata accessor for ICNoteArchiveModel() + 108));
  if (!v15) {
    return 0;
  }
  uint64_t v27[2] = a1;
  unint64_t v37 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16) {
    goto LABEL_13;
  }
  v27[0] = v15;
  v27[1] = v2;
  uint64_t v17 = v15 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v18 = *(void *)(v12 + 72);
  unint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v34 = v18;
  uint64_t v28 = (void (**)(char *, uint64_t))(v10 + 8);
  unint64_t v29 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  swift_bridgeObjectRetain();
  unint64_t v36 = v14;
  do
  {
    sub_1004BB42C(v17, (uint64_t)v14, (uint64_t (*)(void))_s8ActivityVMa);
    ICInternalSettingsIsAlexandriaDemoModeEnabled();
    ICInternalSettingsIsAlexandriaDemoModeEnabled();
    sub_100283E8C((uint64_t)v8);
    if ((*v33)(v8, 1, v9) == 1)
    {
      sub_10002B754((uint64_t)v8, &qword_1006A1118);
      uint64_t v32 = sub_100031418(0, (unint64_t *)&qword_1006A5380);
      uint64_t v19 = v8;
      uint64_t v20 = v35;
      sub_100284660(v35);
      uint64_t v14 = v36;
      static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(forData:fallback:)();
      uint64_t v21 = v20;
      uint64_t v8 = v19;
      sub_10002B754(v21, &qword_1006A1110);
      sub_1004BB494((uint64_t)v14, (uint64_t (*)(void))_s8ActivityVMa);
    }
    else
    {
      uint64_t v22 = v31;
      (*v29)(v31, v8, v9);
      sub_100031418(0, (unint64_t *)&qword_1006A5380);
      uint64_t v23 = v35;
      sub_100284660(v35);
      uint64_t v24 = static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(for:fallback:)();
      uint64_t v25 = v23;
      uint64_t v14 = v36;
      sub_10002B754(v25, &qword_1006A1110);
      (*v28)(v22, v9);
      sub_1004BB494((uint64_t)v14, (uint64_t (*)(void))_s8ActivityVMa);
      if (!v24) {
        goto LABEL_8;
      }
    }
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
LABEL_8:
    v17 += v34;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
LABEL_13:
  ICCloudSyncingObject.cloudSyncingObjectActivityEvents.setter();
  return ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter();
}

void sub_1004B2FF8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v214 = a2;
  id v217 = a1;
  uint64_t v213 = type metadata accessor for UUID();
  uint64_t v192 = *(void *)(v213 - 8);
  __chkstk_darwin(v213);
  v215 = (char *)&v189 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = _s8ActivityVMa();
  uint64_t v218 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  v193 = (char *)&v189 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  v202 = (char *)&v189 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  *(void *)&long long v212 = (char *)&v189 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v201 = (char *)&v189 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v199 = (char *)&v189 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  *(void *)&long long v211 = (char *)&v189 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v189 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v189 - v21;
  *(unsigned char *)a3 = 3;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_WORD *)(a3 + 56) = 514;
  uint64_t v23 = (int *)type metadata accessor for ICNoteArchiveModel();
  uint64_t v24 = a3 + v23[10];
  uint64_t v25 = type metadata accessor for Date();
  unint64_t v26 = *(void (**)(void))(*(void *)(v25 - 8) + 56);
  uint64_t v204 = v24;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v24, 1, 1, v25);
  uint64_t v206 = a3 + v23[11];
  v26();
  uint64_t v27 = (uint64_t *)(a3 + v23[12]);
  *uint64_t v27 = 0;
  v27[1] = 0;
  v194 = v27;
  uint64_t v205 = v23[13];
  *(unsigned char *)(a3 + v205) = 2;
  *(void *)&long long v207 = v23[14];
  *(unsigned char *)(a3 + v207) = 2;
  *(void *)&long long v208 = v23[15];
  *(unsigned char *)(a3 + v208) = 7;
  *(void *)&long long v209 = v23[16];
  *(unsigned char *)(a3 + v209) = 2;
  *(void *)&long long v210 = v23[17];
  *(unsigned char *)(a3 + v210) = 3;
  uint64_t v28 = (uint64_t *)(a3 + v23[18]);
  *uint64_t v28 = 0;
  v28[1] = 0;
  uint64_t v195 = a3 + v23[19];
  v26();
  uint64_t v196 = a3 + v23[20];
  v26();
  uint64_t v197 = a3 + v23[21];
  v26();
  uint64_t v198 = a3 + v23[22];
  v26();
  uint64_t v200 = a3 + v23[23];
  v26();
  uint64_t v29 = a3 + v23[24];
  *(void *)(v29 + 96) = 0;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_OWORD *)(v29 + 80) = 0u;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)uint64_t v29 = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  uint64_t v30 = (uint64_t *)(a3 + v23[25]);
  *uint64_t v30 = 0;
  v30[1] = 0;
  v189 = v30;
  v30[2] = 0;
  uint64_t v203 = v23[26];
  *(void *)(a3 + v203) = 0;
  uint64_t v190 = v23[27];
  *(void *)(a3 + v190) = 0;
  uint64_t v31 = v23[28];
  uint64_t v216 = a3;
  uint64_t v191 = v31;
  *(void *)(a3 + v31) = 0;
  id v32 = [v217 identifier];
  if (v32)
  {
    unint64_t v33 = v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;
  }
  else
  {
    uint64_t v34 = 0;
    unint64_t v36 = 0xE000000000000000;
  }
  uint64_t v38 = v216;
  id v37 = v217;
  *(void *)(v216 + 8) = v34;
  *(void *)(v38 + 16) = v36;
  id v39 = [v37 creationDate];
  uint64_t v40 = v212;
  if (v39)
  {
    uint64_t v41 = v39;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = 1;
  }
  uint64_t v43 = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v26)(v22, v42, 1, v25);
  sub_10021E98C((uint64_t)v22, v204);
  id v44 = v217;
  id v45 = [v217 modificationDate];
  if (v45)
  {
    uint64_t v46 = v45;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = 0;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v26)(v20, v43, 1, v25);
  sub_10021E98C((uint64_t)v20, v206);
  unsigned __int8 v47 = [v44 isPinned];
  uint64_t v48 = v216;
  *(unsigned char *)(v216 + v205) = v47;
  unsigned __int8 v49 = [v44 isSystemPaper];
  *(unsigned char *)(v48 + v207) = v49;
  unsigned int v50 = [v44 paperStyleType];
  if ((v50 & 0x80000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    swift_bridgeObjectRelease();
    swift_release();
    __break(1u);
    return;
  }
  *(unsigned char *)(v48 + v208) = sub_1004B7A74((unsigned __int16)v50);
  char v51 = sub_1004B7B78((unsigned __int16)[v44 preferredBackgroundType]);
  *(unsigned char *)(v48 + v209) = v51;
  char v52 = sub_1004B793C((uint64_t)[v44 attachmentViewType]);
  *(unsigned char *)(v48 + v210) = v52;
  id v53 = [v44 hostApplicationIdentifier];
  if (v53)
  {
    id v54 = v53;
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v56;
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v57 = 0;
  }
  uint64_t v58 = v211;
  swift_bridgeObjectRelease();
  *uint64_t v28 = v55;
  v28[1] = v57;
  uint64_t v59 = v214;
  if (*(unsigned char *)(v214 + 50) & 1) != 0 || (*(unsigned char *)(v214 + 51))
  {
    id v60 = [v44 lastOpenedDate];
    if (v60)
    {
      unint64_t v61 = v60;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v62 = 0;
    }
    else
    {
      uint64_t v62 = 1;
    }
    uint64_t v63 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v58, v62, 1, v25);
    sub_10021E98C(v58, v195);
    id v64 = [v44 lastActivitySummaryViewedDate];
    if (v64)
    {
      id v65 = v64;
      uint64_t v66 = v199;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v67 = (uint64_t)v66;
      uint64_t v63 = 0;
    }
    else
    {
      uint64_t v67 = (uint64_t)v199;
    }
    uint64_t v68 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v67, v63, 1, v25);
    sub_10021E98C(v67, v196);
    id v69 = [v44 lastActivityRecentUpdatesViewedDate];
    if (v69)
    {
      unint64_t v70 = v69;
      Class v71 = v201;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v72 = (uint64_t)v71;
      uint64_t v68 = 0;
    }
    else
    {
      uint64_t v72 = (uint64_t)v201;
    }
    uint64_t v73 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v72, v68, 1, v25);
    sub_10021E98C(v72, v197);
    id v74 = [v44 recentUpdatesGenerationDate];
    if (v74)
    {
      int64_t v75 = v74;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v73 = 0;
    }
    uint64_t v76 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v40, v73, 1, v25);
    sub_10021E98C(v40, v198);
    id v77 = [v44 lastAttributionsViewedDate];
    if (v77)
    {
      unsigned int v78 = v77;
      uint64_t v79 = (uint64_t)v202;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v76 = 0;
    }
    else
    {
      uint64_t v79 = (uint64_t)v202;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v79, v76, 1, v25);
    sub_10021E98C(v79, v200);
  }
  if ((*(unsigned char *)(v59 + 52) & 1) == 0)
  {
    unsigned int v80 = [v44 isPasswordProtected];
    uint64_t v81 = v215;
    if (!v80)
    {
      id v100 = [v44 textStorage];
      if (v100)
      {
        uint64_t v101 = v100;
        id v102 = [v100 mergeableString];
        id v103 = v44;
        sub_10024BEBC((void *)v59, (void (*)(void, void, void, void, void, void))sub_10024BEFC);
        id v104 = sub_1002CB494(v102, v103, v59);
        uint64_t v106 = v105;
        uint64_t v108 = v107;
        sub_10024BEBC((void *)v59, (void (*)(void, void, void, void, void, void))sub_10024BC98);

        uint64_t v109 = v189;
        sub_10024BFB8(*v189, v189[1]);
        *uint64_t v109 = (uint64_t)v104;
        v109[1] = v106;
        v109[2] = v108;
        uint64_t v89 = v216;
        goto LABEL_59;
      }
      uint64_t v130 = (uint64_t)v81;
      uint64_t v89 = v216;
      if (qword_10069B100 != -1) {
        goto LABEL_107;
      }
      goto LABEL_50;
    }
    id v82 = [v44 noteData];
    if (v82 && (v83 = v82, id v84 = [v82 data], v83, v84))
    {
      uint64_t v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v87 = v86;
    }
    else
    {
      uint64_t v85 = 0;
      uint64_t v87 = 0xC000000000000000;
    }
    id v120 = v44;
    sub_1001722A8(v120, v85, v87, v220);
    long long v212 = v220[0];
    long long v211 = v220[1];
    long long v210 = v220[2];
    long long v209 = v220[3];
    long long v208 = v220[4];
    long long v207 = v220[5];
    uint64_t v121 = v221;

    sub_1004B7FAC(*(void *)v29, *(void *)(v29 + 8), *(void *)(v29 + 16), *(void *)(v29 + 24), *(void *)(v29 + 32), *(void *)(v29 + 40), *(void *)(v29 + 48), *(void *)(v29 + 56), *(void *)(v29 + 64), *(void *)(v29 + 72), *(void *)(v29 + 80), *(void *)(v29 + 88), *(void *)(v29 + 96));
    long long v122 = v211;
    *(_OWORD *)uint64_t v29 = v212;
    *(_OWORD *)(v29 + 16) = v122;
    long long v123 = v209;
    *(_OWORD *)(v29 + 32) = v210;
    *(_OWORD *)(v29 + 48) = v123;
    long long v124 = v207;
    *(_OWORD *)(v29 + 64) = v208;
    *(_OWORD *)(v29 + 80) = v124;
    *(void *)(v29 + 96) = v121;
    id v125 = [v120 title];
    if (v125)
    {
      uint64_t v126 = v125;
      uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v129 = v128;
    }
    else
    {
      uint64_t v127 = 0;
      uint64_t v129 = 0;
    }
    uint64_t v89 = v216;
    uint64_t v142 = v203;
    unint64_t v143 = v194;
    swift_bridgeObjectRelease();
    *unint64_t v143 = v127;
    v143[1] = v129;
    while (1)
    {
      id v144 = [v44 outlineState];
      id v145 = [v144 collapsedUUIDs];

      sub_1004BB338((unint64_t *)&qword_1006A4DD0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v146 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRelease();
      *(void *)(v89 + v142) = v146;
      if ((*(unsigned char *)(v59 + 48) & 1) == 0) {
        break;
      }
      id v147 = v44;
      unint64_t v148 = ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter();

      if (v148 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v149 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v149 = *(void *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v130 = (uint64_t)v193;
      if (!v149)
      {
        swift_bridgeObjectRelease();
        int64_t v151 = _swiftEmptyArrayStorage;
LABEL_77:
        uint64_t v155 = v190;
        swift_bridgeObjectRelease();
        *(void *)(v89 + v155) = v151;
        break;
      }
      v219 = _swiftEmptyArrayStorage;
      sub_100169DCC(0, v149 & ~(v149 >> 63), 0);
      if ((v149 & 0x8000000000000000) == 0)
      {
        uint64_t v150 = 0;
        int64_t v151 = v219;
        do
        {
          if ((v148 & 0xC000000000000001) != 0) {
            id v152 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v152 = *(id *)(v148 + 8 * v150 + 32);
          }
          sub_100282C28(v152, v130);
          v219 = v151;
          unint64_t v154 = v151[2];
          unint64_t v153 = v151[3];
          if (v154 >= v153 >> 1)
          {
            sub_100169DCC(v153 > 1, v154 + 1, 1);
            int64_t v151 = v219;
          }
          ++v150;
          v151[2] = v154 + 1;
          sub_1003DB3AC(v130, (uint64_t)v151+ ((*(unsigned __int8 *)(v218 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v218 + 80))+ *(void *)(v218 + 72) * v154);
        }
        while (v149 != v150);
        swift_bridgeObjectRelease();
        uint64_t v59 = v214;
        uint64_t v81 = v215;
        goto LABEL_77;
      }
      __break(1u);
LABEL_107:
      swift_once();
LABEL_50:
      uint64_t v131 = type metadata accessor for Logger();
      sub_10003293C(v131, (uint64_t)qword_1006A94D0);
      id v132 = v44;
      Swift::Int v133 = Logger.logObject.getter();
      os_log_type_t v134 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v133, v134))
      {
        int64_t v135 = (uint8_t *)swift_slowAlloc();
        *(void *)&v220[0] = swift_slowAlloc();
        *(_DWORD *)int64_t v135 = 136315138;
        id v136 = [v132 identifier];
        if (v136)
        {
LABEL_52:
          uint64_t v137 = v136;
          uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v140 = v139;
        }
        else
        {
LABEL_57:
          uint64_t v138 = 9732322;
          unint64_t v140 = 0xA300000000000000;
        }
        v219 = (void *)sub_10045DA1C(v138, v140, (uint64_t *)v220);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "Note doesn't have a text storage — skipping {identifier: %s}", v135, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v44 = v217;
        uint64_t v81 = v215;
LABEL_59:
        uint64_t v142 = v203;
      }
      else
      {
LABEL_62:

        uint64_t v142 = v203;
        uint64_t v81 = (char *)v130;
      }
    }
    if (*(unsigned char *)(v59 + 49))
    {
      id v156 = [v44 replicaIDToUserIDDictData];
      if (v156)
      {
        uint64_t v157 = v156;
        uint64_t v158 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v160 = v159;

        UUID.init()();
        if (v160 >> 60 == 15)
        {
          Class isa = 0;
        }
        else
        {
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1001A3F54(v158, v160);
        }
      }
      else
      {
        UUID.init()();
        Class isa = 0;
      }
      id v162 = objc_allocWithZone((Class)ICMergeableDictionary);
      Class v163 = UUID._bridgeToObjectiveC()().super.isa;
      id v164 = [v162 initWithData:isa replicaID:v163];

      (*(void (**)(char *, uint64_t))(v192 + 8))(v81, v213);
      id v165 = [v164 allKeys];
      sub_100031418(0, (unint64_t *)&qword_10069C1B8);
      unint64_t v166 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v167 = v44;
      v168 = sub_1004B730C(v166, v167);
      swift_bridgeObjectRelease();

      if (v168[2])
      {
        sub_10002F214(&qword_10069C578);
        v169 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v169 = &_swiftEmptyDictionarySingleton;
      }
      v219 = v169;
      sub_1004B7C7C((uint64_t)v168, 1, (uint64_t *)&v219);

      swift_bridgeObjectRelease();
      v170 = v219;
      uint64_t v171 = v191;
      swift_bridgeObjectRelease();
      sub_10024BEBC((void *)v59, (void (*)(void, void, void, void, void, void))sub_10024BC98);
      *(void *)(v89 + v171) = v170;
      if ((*(unsigned char *)(v59 + 51) & 1) == 0) {
        goto LABEL_80;
      }
    }
    else
    {
      sub_10024BEBC((void *)v59, (void (*)(void, void, void, void, void, void))sub_10024BC98);
      if ((*(unsigned char *)(v59 + 51) & 1) == 0)
      {
LABEL_80:

        return;
      }
    }
    id v172 = [v44 folder];
    v173 = v172;
    if (v172)
    {
      id v174 = [v172 identifier];

      if (v174)
      {
        v173 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v176 = v175;

LABEL_95:
        swift_bridgeObjectRelease();
        *(void *)(v89 + 24) = v173;
        *(void *)(v89 + 32) = v176;
        id v177 = [v44 folder];
        int64_t v178 = v177;
        if (v177)
        {
          id v179 = [v177 title];

          int64_t v178 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v181 = v180;
        }
        else
        {
          uint64_t v181 = 0;
        }
        swift_bridgeObjectRelease();
        *(void *)(v89 + 40) = v178;
        *(void *)(v89 + 48) = v181;
        id v182 = [v44 title];
        if (v182)
        {
          uint64_t v183 = v182;
          uint64_t v184 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v186 = v185;
        }
        else
        {
          uint64_t v184 = 0;
          uint64_t v186 = 0;
        }
        v187 = v194;
        swift_bridgeObjectRelease();
        uint64_t *v187 = v184;
        v187[1] = v186;
        *(unsigned char *)(v89 + 56) = [v44 markedForDeletion];
        unsigned __int8 v188 = [v44 isPasswordProtected];

        *(unsigned char *)(v89 + 57) = v188;
        return;
      }
      v173 = 0;
    }
    uint64_t v176 = 0;
    goto LABEL_95;
  }
  unsigned __int8 v88 = [v44 isPasswordProtectedAndLocked];
  uint64_t v81 = v215;
  uint64_t v89 = v216;
  if ((v88 & 1) == 0)
  {
    id v110 = [v44 textStorage];
    if (v110)
    {
      Class v111 = v110;
      id v112 = [v110 mergeableString];
      id v113 = v44;
      sub_10024BEBC((void *)v59, (void (*)(void, void, void, void, void, void))sub_10024BEFC);
      id v114 = sub_1002CB494(v112, v113, v59);
      uint64_t v116 = v115;
      uint64_t v118 = v117;
      sub_10024BEBC((void *)v59, (void (*)(void, void, void, void, void, void))sub_10024BC98);

      Class v119 = v189;
      sub_10024BFB8(*v189, v189[1]);
      *Class v119 = (uint64_t)v114;
      v119[1] = v116;
      v119[2] = v118;
      goto LABEL_59;
    }
    uint64_t v130 = (uint64_t)v81;
    if (qword_10069B100 != -1) {
      swift_once();
    }
    uint64_t v141 = type metadata accessor for Logger();
    sub_10003293C(v141, (uint64_t)qword_1006A94D0);
    id v132 = v44;
    Swift::Int v133 = Logger.logObject.getter();
    os_log_type_t v134 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v133, v134)) {
      goto LABEL_62;
    }
    int64_t v135 = (uint8_t *)swift_slowAlloc();
    *(void *)&v220[0] = swift_slowAlloc();
    *(_DWORD *)int64_t v135 = 136315138;
    id v136 = [v132 identifier];
    if (!v136) {
      goto LABEL_57;
    }
    goto LABEL_52;
  }
  sub_10024BEBC((void *)v59, (void (*)(void, void, void, void, void, void))sub_10024BC98);
  if (qword_10069B100 != -1) {
    swift_once();
  }
  uint64_t v90 = type metadata accessor for Logger();
  sub_10003293C(v90, (uint64_t)qword_1006A94D0);
  id v91 = v44;
  id v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v92, v93))
  {
    id v94 = (uint8_t *)swift_slowAlloc();
    *(void *)&v220[0] = swift_slowAlloc();
    *(_DWORD *)id v94 = 136315138;
    id v95 = [v91 identifier];
    if (v95)
    {
      Class v96 = v95;
      uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v99 = v98;
    }
    else
    {
      uint64_t v97 = 9732322;
      unint64_t v99 = 0xA300000000000000;
    }
    v219 = (void *)sub_10045DA1C(v97, v99, (uint64_t *)v220);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Pages Handoff: Note is locked — skipping {identifier: %s}", v94, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1004B4614()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100032974(v0, qword_1006A94D0);
  sub_10003293C(v0, (uint64_t)qword_1006A94D0);
  return static Logger.archiving.getter();
}

unint64_t sub_1004B4660(char a1)
{
  unint64_t result = 0x6E65644965707974;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6954746E65726170;
      break;
    case 4:
    case 5:
    case 12:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0x4164657461657263;
      break;
    case 7:
      unint64_t result = 0x6465696669646F6DLL;
      break;
    case 8:
      unint64_t result = 0x656C746974;
      break;
    case 9:
      unint64_t result = 0x64656E6E69507369;
      break;
    case 10:
      unint64_t result = 0x4E6B636975517369;
      break;
    case 11:
      unint64_t result = 0x7974537265706170;
      break;
    case 13:
      unint64_t result = 0xD000000000000012;
      break;
    case 14:
      unint64_t result = 0xD000000000000019;
      break;
    case 15:
      unint64_t result = 0x7441646577656976;
      break;
    case 16:
      unint64_t result = 0xD000000000000017;
      break;
    case 17:
      unint64_t result = 0xD000000000000015;
      break;
    case 18:
      unint64_t result = 0xD000000000000018;
      break;
    case 19:
      unint64_t result = 0xD000000000000014;
      break;
    case 20:
      unint64_t result = 0x6574707972636E65;
      break;
    case 21:
      unint64_t result = 0x746E65746E6F63;
      break;
    case 22:
      unint64_t result = 0xD000000000000017;
      break;
    case 23:
      unint64_t result = 0x6974697669746361;
      break;
    case 24:
      unint64_t result = 0xD000000000000023;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004B497C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10002F214(&qword_1006A9628);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015E154(a1, a1[3]);
  sub_1004BAF18();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = *v3;
  char v25 = 0;
  sub_10024EA04();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v18) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v9 = (int *)type metadata accessor for ICNoteArchiveModel();
    LOBYTE(v18) = 6;
    type metadata accessor for Date();
    sub_1004BB338(&qword_10069FAD0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = v3[v9[15]];
    char v25 = 11;
    sub_1004BAF6C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = v3[v9[16]];
    char v25 = 12;
    sub_1004BAFC0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = v3[v9[17]];
    char v25 = 13;
    sub_10024ECA4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 15;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 16;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 18;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 19;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = &v3[v9[24]];
    uint64_t v11 = *((void *)v10 + 12);
    long long v12 = *((_OWORD *)v10 + 1);
    long long v18 = *(_OWORD *)v10;
    long long v19 = v12;
    long long v13 = *((_OWORD *)v10 + 3);
    long long v20 = *((_OWORD *)v10 + 2);
    long long v21 = v13;
    long long v14 = *((_OWORD *)v10 + 5);
    long long v22 = *((_OWORD *)v10 + 4);
    long long v23 = v14;
    uint64_t v24 = v11;
    char v25 = 20;
    sub_1004BB014();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v15 = &v3[v9[25]];
    uint64_t v16 = *((void *)v15 + 2);
    long long v18 = *(_OWORD *)v15;
    *(void *)&long long v19 = v16;
    char v25 = 21;
    sub_10024EC50();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)&v3[v9[26]];
    char v25 = 22;
    sub_10002F214(&qword_1006A9650);
    sub_1004BB210(&qword_1006A9658, &qword_1006A2348);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)&v3[v9[27]];
    char v25 = 23;
    sub_10002F214(&qword_1006A5F20);
    sub_1004BB2A4(&qword_1006A5F28, &qword_1006A5F30);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)&v3[v9[28]];
    char v25 = 24;
    sub_10002F214(&qword_1006A9660);
    sub_1004BB068();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004B50F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v3 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v66 = (uint64_t)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v65 = (uint64_t)v62 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v64 = (uint64_t)v62 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v63 = (uint64_t)v62 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v68 = (uint64_t)v62 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  *(void *)&long long v74 = (char *)v62 - v15;
  __chkstk_darwin(v14);
  *(void *)&long long v75 = (char *)v62 - v16;
  uint64_t v77 = sub_10002F214(&qword_1006A9670);
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  long long v18 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ICNoteArchiveModel();
  long long v20 = (int *)(v19 - 8);
  __chkstk_darwin(v19);
  long long v22 = (char *)v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *long long v22 = 3;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *((_WORD *)v22 + 28) = 514;
  long long v23 = &v22[v20[12]];
  uint64_t v24 = type metadata accessor for Date();
  char v25 = *(void (**)(void))(*(void *)(v24 - 8) + 56);
  uint64_t v92 = (uint64_t)v23;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v25)(v23, 1, 1, v24);
  id v91 = &v22[v20[13]];
  v25();
  unint64_t v26 = &v22[v20[14]];
  *(void *)unint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  uint64_t v90 = v26;
  *(void *)&long long v73 = v20[15];
  v22[v73] = 2;
  *(void *)&long long v72 = v20[16];
  v22[v72] = 2;
  *(void *)&long long v71 = v20[17];
  v22[v71] = 7;
  uint64_t v70 = v20[18];
  v22[v70] = 2;
  uint64_t v69 = v20[19];
  v22[v69] = 3;
  uint64_t v27 = &v22[v20[20]];
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v86 = v27;
  uint64_t v87 = &v22[v20[21]];
  v25();
  id v84 = &v22[v20[22]];
  v25();
  id v82 = &v22[v20[23]];
  v25();
  uint64_t v81 = &v22[v20[24]];
  v25();
  unsigned int v80 = &v22[v20[25]];
  v25();
  uint64_t v28 = &v22[v20[26]];
  *((void *)v28 + 12) = 0;
  *((_OWORD *)v28 + 4) = 0u;
  *((_OWORD *)v28 + 5) = 0u;
  *((_OWORD *)v28 + 2) = 0u;
  *((_OWORD *)v28 + 3) = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  uint64_t v29 = (uint64_t *)&v22[v20[27]];
  uint64_t *v29 = 0;
  v29[1] = 0;
  v29[2] = 0;
  uint64_t v83 = v20[28];
  *(void *)&v22[v83] = 0;
  uint64_t v85 = v20[29];
  *(void *)&v22[v85] = 0;
  uint64_t v88 = v20[30];
  uint64_t v89 = a1;
  *(void *)&v22[v88] = 0;
  sub_10015E154(a1, a1[3]);
  sub_1004BAF18();
  unsigned int v78 = v18;
  uint64_t v30 = v79;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v30)
  {
    uint64_t v32 = (uint64_t)v91;
    uint64_t v31 = v92;
    sub_100018FE8((uint64_t)v89);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002B754(v31, (uint64_t *)&unk_1006A3E20);
    sub_10002B754(v32, (uint64_t *)&unk_1006A3E20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002B754((uint64_t)v87, (uint64_t *)&unk_1006A3E20);
    sub_10002B754((uint64_t)v84, (uint64_t *)&unk_1006A3E20);
    sub_10002B754((uint64_t)v82, (uint64_t *)&unk_1006A3E20);
    sub_10002B754((uint64_t)v81, (uint64_t *)&unk_1006A3E20);
    sub_10002B754((uint64_t)v80, (uint64_t *)&unk_1006A3E20);
    sub_1004B7FAC(*(void *)v28, *((void *)v28 + 1), *((void *)v28 + 2), *((void *)v28 + 3), *((void *)v28 + 4), *((void *)v28 + 5), *((void *)v28 + 6), *((void *)v28 + 7), *((void *)v28 + 8), *((void *)v28 + 9), *((void *)v28 + 10), *((void *)v28 + 11), *((void *)v28 + 12));
    sub_10024BFB8(*v29, v29[1]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v100 = 0;
    sub_10024ED4C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v34 = (uint64_t)v91;
    uint64_t v33 = v92;
    *long long v22 = v93;
    LOBYTE(v93) = 1;
    *((void *)v22 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v22 + 2) = v36;
    LOBYTE(v93) = 2;
    *((void *)v22 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v22 + 4) = v37;
    LOBYTE(v93) = 3;
    *((void *)v22 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v22 + 6) = v38;
    LOBYTE(v93) = 4;
    v22[56] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v93) = 5;
    v22[57] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v93) = 6;
    uint64_t v39 = sub_1004BB338(&qword_10069FA08, (void (*)(uint64_t))&type metadata accessor for Date);
    v62[1] = v24;
    *(void *)&long long v79 = v39;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v75, v33);
    LOBYTE(v93) = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v74, v34);
    LOBYTE(v93) = 8;
    uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(void *)&long long v75 = v41;
    uint64_t v42 = v40;
    uint64_t v43 = v90;
    swift_bridgeObjectRelease();
    uint64_t v44 = v75;
    *uint64_t v43 = v42;
    v43[1] = v44;
    LOBYTE(v93) = 9;
    v22[v73] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v93) = 10;
    v22[v72] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v100 = 11;
    sub_1004BB114();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v22[v71] = v93;
    char v100 = 12;
    sub_1004BB168();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v22[v70] = v93;
    char v100 = 13;
    sub_10024EFE4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v22[v69] = v93;
    LOBYTE(v93) = 14;
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v47 = v46;
    uint64_t v48 = (uint64_t *)v86;
    swift_bridgeObjectRelease();
    *uint64_t v48 = v45;
    v48[1] = v47;
    LOBYTE(v93) = 15;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v68, (uint64_t)v87);
    LOBYTE(v93) = 16;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v63, (uint64_t)v84);
    LOBYTE(v93) = 17;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v64, (uint64_t)v82);
    LOBYTE(v93) = 18;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v65, (uint64_t)v81);
    LOBYTE(v93) = 19;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10021E98C(v66, (uint64_t)v80);
    char v100 = 20;
    sub_1004BB1BC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v79 = v93;
    long long v75 = v94;
    long long v74 = v95;
    long long v73 = v96;
    long long v72 = v97;
    long long v71 = v98;
    uint64_t v49 = v99;
    sub_1004B7FAC(*(void *)v28, *((void *)v28 + 1), *((void *)v28 + 2), *((void *)v28 + 3), *((void *)v28 + 4), *((void *)v28 + 5), *((void *)v28 + 6), *((void *)v28 + 7), *((void *)v28 + 8), *((void *)v28 + 9), *((void *)v28 + 10), *((void *)v28 + 11), *((void *)v28 + 12));
    long long v50 = v75;
    *(_OWORD *)uint64_t v28 = v79;
    *((_OWORD *)v28 + 1) = v50;
    long long v51 = v73;
    *((_OWORD *)v28 + 2) = v74;
    *((_OWORD *)v28 + 3) = v51;
    long long v52 = v71;
    *((_OWORD *)v28 + 4) = v72;
    *((_OWORD *)v28 + 5) = v52;
    *((void *)v28 + 12) = v49;
    char v100 = 21;
    sub_10024EF2C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v79 = v93;
    uint64_t v53 = v94;
    sub_10024BFB8(*v29, v29[1]);
    *(_OWORD *)uint64_t v29 = v79;
    v29[2] = v53;
    sub_10002F214(&qword_1006A9650);
    char v100 = 22;
    sub_1004BB210(&qword_1006A9690, &qword_1006A2338);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v54 = v93;
    uint64_t v55 = v83;
    swift_bridgeObjectRelease();
    *(void *)&v22[v55] = v54;
    sub_10002F214(&qword_1006A5F20);
    char v100 = 23;
    sub_1004BB2A4(&qword_1006A5F48, &qword_1006A5F50);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v56 = v93;
    uint64_t v57 = v85;
    swift_bridgeObjectRelease();
    *(void *)&v22[v57] = v56;
    sub_10002F214(&qword_1006A9660);
    char v100 = 24;
    sub_1004BB380();
    uint64_t v58 = v77;
    uint64_t v59 = v78;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v59, v58);
    uint64_t v60 = v93;
    uint64_t v61 = v88;
    swift_bridgeObjectRelease();
    *(void *)&v22[v61] = v60;
    sub_1004BB42C((uint64_t)v22, v67, (uint64_t (*)(void))type metadata accessor for ICNoteArchiveModel);
    sub_100018FE8((uint64_t)v89);
    return sub_1004BB494((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ICNoteArchiveModel);
  }
}

unint64_t sub_1004B60F4()
{
  return sub_1004B4660(*v0);
}

uint64_t sub_1004B60FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004BBBEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004B6124(uint64_t a1)
{
  unint64_t v2 = sub_1004BAF18();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004B6160(uint64_t a1)
{
  unint64_t v2 = sub_1004BAF18();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004B619C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004B50F0(a1, a2);
}

uint64_t sub_1004B61B4(void *a1)
{
  return sub_1004B497C(a1);
}

void sub_1004B61CC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10002F214((uint64_t *)&unk_1006A3E20);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [a1 timestamp];
  if (v16)
  {
    uint64_t v17 = v16;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) != 1)
    {
      sub_10002B754((uint64_t)v15, (uint64_t *)&unk_1006A3E20);
      Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
      id v19 = [a1 replicaID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class v20 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      [a3 setNotesVersion:isa forReplicaID:v20];

      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, 1, 1, v9);
  }
  sub_10002B754((uint64_t)v15, (uint64_t *)&unk_1006A3E20);
}

void sub_1004B6498(uint64_t a1, void *a2)
{
  unint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_1004B64F4(unsigned __int8 *a1, char *a2)
{
  return sub_100275BD8(*a1, *a2);
}

Swift::Int sub_1004B6500()
{
  return sub_1002553A8();
}

uint64_t sub_1004B650C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004B6628()
{
  return sub_1002553A8();
}

unint64_t sub_1004B6630@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004BC700(*a1);
  *a2 = result;
  return result;
}

void sub_1004B6660(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1162760014;
  switch(*v1)
  {
    case 1:
      uint64_t v3 = 0x52475F4C4C414D53;
      unint64_t v2 = 0xEA00000000004449;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x475F4D554944454DLL;
      *(void *)(a1 + 8) = 0xEB00000000444952;
      return;
    case 3:
      *(void *)a1 = 0x52475F454752414CLL;
      *(void *)(a1 + 8) = 0xEA00000000004449;
      return;
    case 4:
      uint64_t v4 = 0x5F4C4C414D53;
      goto LABEL_9;
    case 5:
      strcpy((char *)a1, "MEDIUM_LINES");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      return;
    case 6:
      uint64_t v4 = 0x5F454752414CLL;
LABEL_9:
      *(void *)a1 = v4 & 0xFFFFFFFFFFFFLL | 0x494C000000000000;
      *(void *)(a1 + 8) = 0xEB0000000053454ELL;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_1004B6768(void *a1@<X8>)
{
  *a1 = &off_10062B438;
}

uint64_t sub_1004B6778()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004B67D8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1004B6828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B6F04(a1, a2, a3, a4, (void (*)(void))sub_1004BC74C, (void (*)(void))sub_1004BC604);
}

uint64_t sub_1004B6854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B6FC4(a1, a2, a3, a4, (void (*)(void))sub_1004BC74C, (void (*)(void))sub_1004BC604);
}

uint64_t sub_1004B6880(char *a1, char *a2)
{
  return sub_100275E00(*a1, *a2);
}

Swift::Int sub_1004B688C()
{
  return Hasher._finalize()();
}

uint64_t sub_1004B690C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004B6978()
{
  return Hasher._finalize()();
}

uint64_t sub_1004B69F4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10062D210, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1004B6A54(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x544C5541464544;
  if (*v1) {
    uint64_t v2 = 0x544847494CLL;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1004B6A90(void *a1@<X8>)
{
  *a1 = &off_10062B410;
}

uint64_t sub_1004B6AA0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004B6B00()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1004B6B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B6F04(a1, a2, a3, a4, (void (*)(void))sub_1004BC6AC, (void (*)(void))sub_1004BC658);
}

uint64_t sub_1004B6B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B6FC4(a1, a2, a3, a4, (void (*)(void))sub_1004BC6AC, (void (*)(void))sub_1004BC658);
}

uint64_t sub_1004B6BA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100275ABC(*a1, *a2);
}

Swift::Int sub_1004B6BB4()
{
  return Hasher._finalize()();
}

uint64_t sub_1004B6C58()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004B6CE8()
{
  return Hasher._finalize()();
}

unint64_t sub_1004B6D88@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004BC7A0(*a1);
  *a2 = result;
  return result;
}

void sub_1004B6DB8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE90000000000004CLL;
  uint64_t v5 = 0x49414E424D554854;
  if (v2 != 1)
  {
    uint64_t v5 = 0x4D554944454DLL;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x57454956455250;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_1004B6E18(void *a1@<X8>)
{
  *a1 = &off_10062B460;
}

uint64_t sub_1004B6E28()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004B6E88()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1004B6ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B6F04(a1, a2, a3, a4, (void (*)(void))sub_1004BC7EC, (void (*)(void))sub_1004BBB98);
}

uint64_t sub_1004B6F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void))
{
  a5();
  a6();

  return ArgumentDecodable<>.init(fromArgument:)();
}

uint64_t sub_1004B6F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B6FC4(a1, a2, a3, a4, (void (*)(void))sub_1004BC7EC, (void (*)(void))sub_1004BBB98);
}

uint64_t sub_1004B6FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void))
{
  a5();
  a6();

  return static ArgumentDecodable<>.typeSummary(forName:)();
}

uint64_t sub_1004B7050(uint64_t a1)
{
  sub_10002F214(&qword_1006A04C8);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v3 = 0;
  uint64_t v32 = (void *)result;
  uint64_t v33 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v4;
  uint64_t v29 = v5;
  int64_t v30 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v31 = result + 64;
  if ((v8 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  int64_t v34 = v3;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    id v16 = (uint64_t *)(*(void *)(v33 + 48) + 16 * i);
    uint64_t v17 = v16[1];
    uint64_t v35 = *v16;
    long long v18 = *(void **)(*(void *)(v33 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    id v19 = v18;
    id v20 = [v19 identifier];
    if (v20)
    {
      uint64_t v21 = v20;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v22 = [v19 typeUTI];
    if (v22)
    {
      long long v23 = v22;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    sub_100031418(0, (unint64_t *)&qword_1006A04D0);
    uint64_t v24 = ICTTAttachment.init(identifier:universalTypeIdentifier:)();

    uint64_t result = (uint64_t)v32;
    *(void *)(v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    char v25 = (void *)(v32[6] + 16 * i);
    void *v25 = v35;
    v25[1] = v17;
    *(void *)(v32[7] + 8 * i) = v24;
    uint64_t v26 = v32[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v32[2] = v28;
    int64_t v3 = v34;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_28;
    }
    if (v12 >= v30) {
      return result;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v12);
    int64_t v14 = v3 + 1;
    if (!v13)
    {
      int64_t v14 = v3 + 2;
      if (v3 + 2 >= v30) {
        return result;
      }
      unint64_t v13 = *(void *)(v29 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v3 + 3;
        if (v3 + 3 >= v30) {
          return result;
        }
        unint64_t v13 = *(void *)(v29 + 8 * v14);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v13 - 1) & v13;
    int64_t v34 = v14;
  }
  uint64_t v15 = v3 + 4;
  if (v3 + 4 >= v30) {
    return result;
  }
  unint64_t v13 = *(void *)(v29 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v30) {
      return result;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_1004B730C(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v49 = a2;
  uint64_t v5 = sub_10002F214((uint64_t *)&unk_10069C990);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v48 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v60 = (char *)v43 - v12;
  uint64_t v13 = sub_10002F214(&qword_1006A94E8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10002F214(&qword_10069C570);
  uint64_t v50 = *(void *)(v62 - 8);
  uint64_t v16 = __chkstk_darwin(v62);
  uint64_t v61 = (uint64_t)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v47 = (uint64_t)v43 - v18;
  if (a1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v19)
    {
LABEL_3:
      v43[1] = v3;
      unint64_t v59 = a1 & 0xC000000000000001;
      long long v52 = (void (**)(char *, char *, uint64_t))(v9 + 32);
      uint64_t v53 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v56 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
      uint64_t v57 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
      uint64_t v55 = (unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      id v20 = _swiftEmptyArrayStorage;
      uint64_t v21 = 4;
      uint64_t v45 = v7;
      unint64_t v46 = a1;
      uint64_t v44 = v15;
      uint64_t v58 = v19;
      while (1)
      {
        uint64_t v63 = v20;
        if (v59) {
          id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v22 = *(id *)(a1 + 8 * v21);
        }
        long long v23 = v22;
        uint64_t v9 = v21 - 3;
        if (__OFADD__(v21 - 4, 1))
        {
          __break(1u);
          goto LABEL_27;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        if ((*v57)(v7, 1, v8) != 1) {
          break;
        }
        sub_10002B754((uint64_t)v7, (uint64_t *)&unk_10069C990);
        uint64_t v24 = 1;
LABEL_19:
        uint64_t v3 = v62;
        (*v56)(v15, v24, 1, v62);

        if ((*v55)(v15, 1, v3) == 1)
        {
          sub_10002B754((uint64_t)v15, &qword_1006A94E8);
          id v20 = v63;
        }
        else
        {
          uint64_t v38 = v9;
          uint64_t v39 = v47;
          sub_10002F1B0((uint64_t)v15, v47, &qword_10069C570);
          sub_10002F1B0(v39, v61, &qword_10069C570);
          id v20 = v63;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v20 = (void *)sub_1001A8FE4(0, v20[2] + 1, 1, (unint64_t)v20);
          }
          unint64_t v41 = v20[2];
          unint64_t v40 = v20[3];
          uint64_t v3 = v41 + 1;
          if (v41 >= v40 >> 1) {
            id v20 = (void *)sub_1001A8FE4(v40 > 1, v41 + 1, 1, (unint64_t)v20);
          }
          v20[2] = v3;
          sub_10002F1B0(v61, (uint64_t)v20+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v41, &qword_10069C570);
          uint64_t v9 = v38;
        }
        ++v21;
        if (v9 == v58)
        {
          swift_bridgeObjectRelease();
          return v20;
        }
      }
      uint64_t v54 = v21 - 3;
      long long v51 = *v52;
      v51(v60, v7, v8);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v26 = [v49 userIDForReplicaID:isa];

      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      id v30 = [self CR_unknown];
      uint64_t v31 = v48;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = UUID.uuidString.getter();
      uint64_t v34 = v33;
      uint64_t v35 = *v53;
      (*v53)(v31, v8);
      if (v27 == v32 && v29 == v34)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v36 & 1) == 0)
        {
          uint64_t v15 = v44;
          uint64_t v37 = (uint64_t *)&v44[*(int *)(v62 + 48)];
          v51(v44, v60, v8);
          uint64_t v24 = 0;
          uint64_t *v37 = v27;
          v37[1] = v29;
          uint64_t v7 = v45;
          a1 = v46;
          goto LABEL_18;
        }
      }
      v35(v60, v8);
      swift_bridgeObjectRelease();
      uint64_t v24 = 1;
      uint64_t v7 = v45;
      a1 = v46;
      uint64_t v15 = v44;
LABEL_18:
      uint64_t v9 = v54;
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1004B793C(uint64_t result)
{
  if ((unsigned __int16)result >= 3u)
  {
    if (qword_10069B100 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10003293C(v1, (uint64_t)qword_1006A94D0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unknown attachment view type — returning default", v4, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ICNoteArchiveModel()
{
  uint64_t result = qword_1006A9558;
  if (!qword_1006A9558) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1004B7A74(unint64_t a1)
{
  if (a1 < 8) {
    return 0x605040302010007uLL >> (8 * a1);
  }
  if (qword_10069B100 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10003293C(v2, (uint64_t)qword_1006A94D0);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unknown paper style — returning nil", v5, 2u);
    swift_slowDealloc();
  }

  return 7;
}

uint64_t sub_1004B7B78(unsigned __int16 a1)
{
  if (a1 < 3u) {
    return 0x10002u >> (8 * a1);
  }
  if (qword_10069B100 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10003293C(v2, (uint64_t)qword_1006A94D0);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unknown preferred background color — returning nil", v5, 2u);
    swift_slowDealloc();
  }

  return 2;
}

uint64_t sub_1004B7C7C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v43 = a3;
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v42 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002F214(&qword_10069C570);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return result;
  }
  uint64_t v39 = &v12[*(int *)(result + 48)];
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v38 = *(void *)(v10 + 72);
  unint64_t v40 = (void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  uint64_t v36 = v6;
  v34[1] = v3;
  uint64_t v35 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  v34[0] = a1;
  swift_bridgeObjectRetain();
  uint64_t v37 = v12;
  while (1)
  {
    sub_10002F034(v14, (uint64_t)v12, &qword_10069C570);
    uint64_t v16 = *v40;
    uint64_t v17 = (uint64_t)v42;
    (*v40)((uint64_t)v42, v12, v41);
    uint64_t v19 = *(void *)v39;
    uint64_t v18 = *((void *)v39 + 1);
    uint64_t v20 = *v43;
    unint64_t v22 = sub_1002B6300(v17);
    uint64_t v23 = *(void *)(v20 + 16);
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    char v26 = v21;
    if (*(void *)(v20 + 24) >= v25)
    {
      if (a2)
      {
        if (v21) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_1002BEDD4();
        if (v26) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_1002BB0C4(v25, a2 & 1);
      unint64_t v27 = sub_1002B6300((uint64_t)v42);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_20;
      }
      unint64_t v22 = v27;
      if (v26)
      {
LABEL_3:
        (*v35)((uint64_t)v42, v41);
        uint64_t v15 = (void *)(*(void *)(*v43 + 56) + 16 * v22);
        swift_bridgeObjectRelease();
        *uint64_t v15 = v19;
        v15[1] = v18;
        goto LABEL_4;
      }
    }
    uint64_t v29 = (void *)*v43;
    *(void *)(*v43 + 8 * (v22 >> 6) + 64) |= 1 << v22;
    v16(v29[6] + *(void *)(v36 + 72) * v22, v42, v41);
    id v30 = (void *)(v29[7] + 16 * v22);
    *id v30 = v19;
    v30[1] = v18;
    uint64_t v31 = v29[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_19;
    }
    v29[2] = v33;
LABEL_4:
    uint64_t v12 = v37;
    v14 += v38;
    a2 = 1;
    if (!--v13) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1004B7FAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a11)
  {
    sub_10017253C(a2, a3);
    sub_10017253C(a4, a5);
    sub_10017253C(a6, a7);
    sub_10017253C(a8, a9);
    swift_bridgeObjectRelease();
    sub_10017253C(a12, a13);
  }
}

uint64_t sub_1004B8078()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004B80B0(void *a1, uint64_t a2)
{
  sub_1004B61CC(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1004B80B8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004B80C8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *sub_1004B80F0(uint64_t a1, uint64_t *a2, int *a3)
{
  os_log_type_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *os_log_type_t v4 = *a2;
    os_log_type_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = a2[5];
    uint64_t v9 = a2[6];
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    uint64_t v10 = a3[10];
    __dst = (void *)(a1 + v10);
    uint64_t v11 = (char *)a2 + v10;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      uint64_t v15 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v17 = v13;
    uint64_t v18 = a3[11];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    if (v14((char *)a2 + v18, 1, v12))
    {
      uint64_t v21 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v20, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v12);
    }
    uint64_t v22 = a3[12];
    uint64_t v23 = a3[13];
    BOOL v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    *((unsigned char *)v4 + v23) = *((unsigned char *)a2 + v23);
    uint64_t v27 = a3[15];
    *((unsigned char *)v4 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    *((unsigned char *)v4 + v27) = *((unsigned char *)a2 + v27);
    uint64_t v28 = a3[17];
    *((unsigned char *)v4 + a3[16]) = *((unsigned char *)a2 + a3[16]);
    *((unsigned char *)v4 + v28) = *((unsigned char *)a2 + v28);
    uint64_t v29 = a3[18];
    uint64_t v30 = a3[19];
    uint64_t v31 = (void *)((char *)v4 + v29);
    BOOL v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = v32[1];
    void *v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = (char *)v4 + v30;
    uint64_t v35 = (char *)a2 + v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v35, 1, v12))
    {
      uint64_t v36 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v34, v35, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v34, 0, 1, v12);
    }
    uint64_t v37 = a3[20];
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = (char *)a2 + v37;
    if (v14((char *)a2 + v37, 1, v12))
    {
      uint64_t v40 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v38, 0, 1, v12);
    }
    uint64_t v41 = a3[21];
    uint64_t v42 = (char *)v4 + v41;
    uint64_t v43 = (char *)a2 + v41;
    if (v14((char *)a2 + v41, 1, v12))
    {
      uint64_t v44 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v42, v43, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v42, 0, 1, v12);
    }
    uint64_t v45 = a3[22];
    unint64_t v46 = (char *)v4 + v45;
    uint64_t v47 = (char *)a2 + v45;
    if (v14((char *)a2 + v45, 1, v12))
    {
      uint64_t v48 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v46, v47, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v46, 0, 1, v12);
    }
    uint64_t v49 = a3[23];
    uint64_t v50 = (char *)v4 + v49;
    long long v51 = (char *)a2 + v49;
    if (v14((char *)a2 + v49, 1, v12))
    {
      uint64_t v52 = sub_10002F214((uint64_t *)&unk_1006A3E20);
      memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v50, 0, 1, v12);
    }
    uint64_t v53 = a3[24];
    uint64_t v54 = (void *)((char *)v4 + v53);
    uint64_t v55 = (uint64_t *)((char *)a2 + v53);
    if (*(uint64_t *)((char *)a2 + v53 + 80))
    {
      uint64_t v56 = v55[1];
      *uint64_t v54 = *v55;
      unint64_t v57 = v55[2];
      sub_100172484(v56, v57);
      v54[1] = v56;
      v54[2] = v57;
      uint64_t v58 = v55[3];
      unint64_t v59 = v55[4];
      sub_100172484(v58, v59);
      v54[3] = v58;
      void v54[4] = v59;
      uint64_t v60 = v55[5];
      unint64_t v61 = v55[6];
      sub_100172484(v60, v61);
      v54[5] = v60;
      v54[6] = v61;
      uint64_t v62 = v55[7];
      unint64_t v63 = v55[8];
      sub_100172484(v62, v63);
      v54[7] = v62;
      v54[8] = v63;
      uint64_t v64 = v55[10];
      v54[9] = v55[9];
      v54[10] = v64;
      uint64_t v65 = v55[11];
      unint64_t v66 = v55[12];
      swift_bridgeObjectRetain();
      sub_100172484(v65, v66);
      v54[11] = v65;
      v54[12] = v66;
    }
    else
    {
      long long v67 = *((_OWORD *)v55 + 5);
      *((_OWORD *)v54 + 4) = *((_OWORD *)v55 + 4);
      *((_OWORD *)v54 + 5) = v67;
      v54[12] = v55[12];
      long long v68 = *((_OWORD *)v55 + 1);
      *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
      *((_OWORD *)v54 + 1) = v68;
      long long v69 = *((_OWORD *)v55 + 3);
      *((_OWORD *)v54 + 2) = *((_OWORD *)v55 + 2);
      *((_OWORD *)v54 + 3) = v69;
    }
    uint64_t v70 = a3[25];
    long long v71 = (void *)((char *)v4 + v70);
    long long v72 = (uint64_t *)((char *)a2 + v70);
    uint64_t v73 = v72[1];
    if (v73)
    {
      *long long v71 = *v72;
      v71[1] = v73;
      v71[2] = v72[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)long long v71 = *(_OWORD *)v72;
      v71[2] = v72[2];
    }
    uint64_t v74 = a3[27];
    *(void *)((char *)v4 + a3[26]) = *(uint64_t *)((char *)a2 + a3[26]);
    *(void *)((char *)v4 + v74) = *(uint64_t *)((char *)a2 + v74);
    *(void *)((char *)v4 + a3[28]) = *(uint64_t *)((char *)a2 + a3[28]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1004B87EC(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[10];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = a1 + a2[11];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[19];
  if (!v7(v9, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = a1 + a2[20];
  if (!v7(v10, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = a1 + a2[21];
  if (!v7(v11, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = a1 + a2[22];
  if (!v7(v12, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v5);
  }
  uint64_t v13 = a1 + a2[23];
  if (!v7(v13, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v13, v5);
  }
  uint64_t v14 = (void *)(a1 + a2[24]);
  if (v14[10])
  {
    sub_10017253C(v14[1], v14[2]);
    sub_10017253C(v14[3], v14[4]);
    sub_10017253C(v14[5], v14[6]);
    sub_10017253C(v14[7], v14[8]);
    swift_bridgeObjectRelease();
    sub_10017253C(v14[11], v14[12]);
  }
  if (*(void *)(a1 + a2[25] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1004B8AE8(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v9 = a3[10];
  __dst = (void *)(a1 + v9);
  uint64_t v10 = (const void *)(a2 + v9);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v15 = v12;
  uint64_t v16 = a3[11];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  if (v13((const void *)(a2 + v16), 1, v11))
  {
    uint64_t v19 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v17, v18, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v11);
  }
  uint64_t v20 = a3[12];
  uint64_t v21 = a3[13];
  uint64_t v22 = (void *)(a1 + v20);
  uint64_t v23 = (void *)(a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v25 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  uint64_t v26 = a3[17];
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + v26) = *(unsigned char *)(a2 + v26);
  uint64_t v27 = a3[18];
  uint64_t v28 = a3[19];
  uint64_t v29 = (void *)(a1 + v27);
  uint64_t v30 = (void *)(a2 + v27);
  uint64_t v31 = v30[1];
  void *v29 = *v30;
  v29[1] = v31;
  BOOL v32 = (void *)(a1 + v28);
  uint64_t v33 = (const void *)(a2 + v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v33, 1, v11))
  {
    uint64_t v34 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v32, v33, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, v11);
  }
  uint64_t v35 = a3[20];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  if (v13((const void *)(a2 + v35), 1, v11))
  {
    uint64_t v38 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v36, v37, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v36, 0, 1, v11);
  }
  uint64_t v39 = a3[21];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (const void *)(a2 + v39);
  if (v13((const void *)(a2 + v39), 1, v11))
  {
    uint64_t v42 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v40, v41, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v11);
  }
  uint64_t v43 = a3[22];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (const void *)(a2 + v43);
  if (v13((const void *)(a2 + v43), 1, v11))
  {
    uint64_t v46 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v44, v45, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v11);
  }
  uint64_t v47 = a3[23];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (const void *)(a2 + v47);
  if (v13((const void *)(a2 + v47), 1, v11))
  {
    uint64_t v50 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v48, v49, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v11);
  }
  uint64_t v51 = a3[24];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  if (*(void *)(a2 + v51 + 80))
  {
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    unint64_t v55 = v53[2];
    sub_100172484(v54, v55);
    v52[1] = v54;
    v52[2] = v55;
    uint64_t v56 = v53[3];
    unint64_t v57 = v53[4];
    sub_100172484(v56, v57);
    v52[3] = v56;
    v52[4] = v57;
    uint64_t v58 = v53[5];
    unint64_t v59 = v53[6];
    sub_100172484(v58, v59);
    v52[5] = v58;
    v52[6] = v59;
    uint64_t v60 = v53[7];
    unint64_t v61 = v53[8];
    sub_100172484(v60, v61);
    v52[7] = v60;
    v52[8] = v61;
    uint64_t v62 = v53[10];
    v52[9] = v53[9];
    v52[10] = v62;
    uint64_t v63 = v53[11];
    unint64_t v64 = v53[12];
    swift_bridgeObjectRetain();
    sub_100172484(v63, v64);
    v52[11] = v63;
    v52[12] = v64;
  }
  else
  {
    long long v65 = *((_OWORD *)v53 + 5);
    *((_OWORD *)v52 + 4) = *((_OWORD *)v53 + 4);
    *((_OWORD *)v52 + 5) = v65;
    v52[12] = v53[12];
    long long v66 = *((_OWORD *)v53 + 1);
    *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
    *((_OWORD *)v52 + 1) = v66;
    long long v67 = *((_OWORD *)v53 + 3);
    *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
    *((_OWORD *)v52 + 3) = v67;
  }
  uint64_t v68 = a3[25];
  long long v69 = (void *)(a1 + v68);
  uint64_t v70 = (void *)(a2 + v68);
  uint64_t v71 = v70[1];
  if (v71)
  {
    *long long v69 = *v70;
    v69[1] = v71;
    v69[2] = v70[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)long long v69 = *(_OWORD *)v70;
    v69[2] = v70[2];
  }
  uint64_t v72 = a3[27];
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  *(void *)(a1 + v72) = *(void *)(a2 + v72);
  *(void *)(a1 + a3[28]) = *(void *)(a2 + a3[28]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1004B9194(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    uint64_t v20 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v16, v17, v9);
LABEL_13:
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  uint64_t v24 = a3[18];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  void *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[19];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  int v30 = v11((void *)(a1 + v27), 1, v9);
  int v31 = v11(v29, 1, v9);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v28, v29, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v28, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v28, v9);
LABEL_18:
    uint64_t v32 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v28, v29, v9);
LABEL_19:
  uint64_t v33 = a3[20];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  int v36 = v11((void *)(a1 + v33), 1, v9);
  int v37 = v11(v35, 1, v9);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v34, v35, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v34, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v34, v9);
LABEL_24:
    uint64_t v38 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v34, v35, v9);
LABEL_25:
  uint64_t v39 = a3[21];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  int v42 = v11((void *)(a1 + v39), 1, v9);
  int v43 = v11(v41, 1, v9);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v40, v41, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v40, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v40, v9);
LABEL_30:
    uint64_t v44 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v40, v41, v9);
LABEL_31:
  uint64_t v45 = a3[22];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (void *)(a2 + v45);
  int v48 = v11((void *)(a1 + v45), 1, v9);
  int v49 = v11(v47, 1, v9);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v46, v47, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v46, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v49)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v46, v9);
LABEL_36:
    uint64_t v50 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v46, v47, v9);
LABEL_37:
  uint64_t v51 = a3[23];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  int v54 = v11((void *)(a1 + v51), 1, v9);
  int v55 = v11(v53, 1, v9);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v52, v53, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v52, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v55)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v52, v9);
LABEL_42:
    uint64_t v56 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v52, v53, v9);
LABEL_43:
  uint64_t v57 = a3[24];
  uint64_t v58 = (void *)(a1 + v57);
  unint64_t v59 = (void *)(a2 + v57);
  uint64_t v60 = *(void *)(a1 + v57 + 80);
  uint64_t v61 = *(void *)(a2 + v57 + 80);
  if (v60)
  {
    if (v61)
    {
      *uint64_t v58 = *v59;
      uint64_t v62 = v59[1];
      unint64_t v63 = v59[2];
      sub_100172484(v62, v63);
      uint64_t v64 = v58[1];
      unint64_t v65 = v58[2];
      v58[1] = v62;
      uint64_t v58[2] = v63;
      sub_10017253C(v64, v65);
      uint64_t v66 = v59[3];
      unint64_t v67 = v59[4];
      sub_100172484(v66, v67);
      uint64_t v68 = v58[3];
      unint64_t v69 = v58[4];
      v58[3] = v66;
      v58[4] = v67;
      sub_10017253C(v68, v69);
      uint64_t v70 = v59[5];
      unint64_t v71 = v59[6];
      sub_100172484(v70, v71);
      uint64_t v72 = v58[5];
      unint64_t v73 = v58[6];
      v58[5] = v70;
      v58[6] = v71;
      sub_10017253C(v72, v73);
      uint64_t v74 = v59[7];
      unint64_t v75 = v59[8];
      sub_100172484(v74, v75);
      uint64_t v76 = v58[7];
      unint64_t v77 = v58[8];
      v58[7] = v74;
      v58[8] = v75;
      sub_10017253C(v76, v77);
      v58[9] = v59[9];
      v58[10] = v59[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v78 = v59[11];
      unint64_t v79 = v59[12];
      sub_100172484(v78, v79);
      uint64_t v80 = v58[11];
      unint64_t v81 = v58[12];
      v58[11] = v78;
      v58[12] = v79;
      sub_10017253C(v80, v81);
    }
    else
    {
      sub_1004B9CC0((uint64_t)v58);
      long long v93 = *((_OWORD *)v59 + 1);
      long long v92 = *((_OWORD *)v59 + 2);
      *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
      *((_OWORD *)v58 + 1) = v93;
      *((_OWORD *)v58 + 2) = v92;
      long long v95 = *((_OWORD *)v59 + 4);
      long long v94 = *((_OWORD *)v59 + 5);
      long long v96 = *((_OWORD *)v59 + 3);
      v58[12] = v59[12];
      *((_OWORD *)v58 + 4) = v95;
      *((_OWORD *)v58 + 5) = v94;
      *((_OWORD *)v58 + 3) = v96;
    }
  }
  else if (v61)
  {
    *uint64_t v58 = *v59;
    uint64_t v82 = v59[1];
    unint64_t v83 = v59[2];
    sub_100172484(v82, v83);
    v58[1] = v82;
    uint64_t v58[2] = v83;
    uint64_t v84 = v59[3];
    unint64_t v85 = v59[4];
    sub_100172484(v84, v85);
    v58[3] = v84;
    v58[4] = v85;
    uint64_t v86 = v59[5];
    unint64_t v87 = v59[6];
    sub_100172484(v86, v87);
    v58[5] = v86;
    v58[6] = v87;
    uint64_t v88 = v59[7];
    unint64_t v89 = v59[8];
    sub_100172484(v88, v89);
    v58[7] = v88;
    v58[8] = v89;
    v58[9] = v59[9];
    v58[10] = v59[10];
    uint64_t v90 = v59[11];
    unint64_t v91 = v59[12];
    swift_bridgeObjectRetain();
    sub_100172484(v90, v91);
    v58[11] = v90;
    v58[12] = v91;
  }
  else
  {
    long long v97 = *(_OWORD *)v59;
    long long v98 = *((_OWORD *)v59 + 2);
    *((_OWORD *)v58 + 1) = *((_OWORD *)v59 + 1);
    *((_OWORD *)v58 + 2) = v98;
    *(_OWORD *)uint64_t v58 = v97;
    long long v99 = *((_OWORD *)v59 + 3);
    long long v100 = *((_OWORD *)v59 + 4);
    long long v101 = *((_OWORD *)v59 + 5);
    v58[12] = v59[12];
    *((_OWORD *)v58 + 4) = v100;
    *((_OWORD *)v58 + 5) = v101;
    *((_OWORD *)v58 + 3) = v99;
  }
  uint64_t v102 = a3[25];
  id v103 = (void *)(a1 + v102);
  id v104 = (void *)(a2 + v102);
  uint64_t v105 = *(void *)(a1 + v102 + 8);
  uint64_t v106 = *(void *)(a2 + v102 + 8);
  if (v105)
  {
    if (v106)
    {
      *id v103 = *v104;
      v103[1] = v104[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v103[2] = v104[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10024D9D8((uint64_t)v103);
      uint64_t v107 = v104[2];
      *(_OWORD *)id v103 = *(_OWORD *)v104;
      v103[2] = v107;
    }
  }
  else if (v106)
  {
    *id v103 = *v104;
    v103[1] = v104[1];
    v103[2] = v104[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v108 = *(_OWORD *)v104;
    v103[2] = v104[2];
    *(_OWORD *)id v103 = v108;
  }
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[27]) = *(void *)(a2 + a3[27]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[28]) = *(void *)(a2 + a3[28]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004B9CC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004B9D14(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[11];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    uint64_t v16 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[17];
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[19];
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  if (v11((const void *)(a2 + v20), 1, v9))
  {
    uint64_t v23 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v21, v22, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
  }
  uint64_t v24 = a3[20];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  if (v11((const void *)(a2 + v24), 1, v9))
  {
    uint64_t v27 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v25, v26, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v25, 0, 1, v9);
  }
  uint64_t v28 = a3[21];
  uint64_t v29 = (void *)(a1 + v28);
  int v30 = (const void *)(a2 + v28);
  if (v11((const void *)(a2 + v28), 1, v9))
  {
    uint64_t v31 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v29, v30, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
  }
  uint64_t v32 = a3[22];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (const void *)(a2 + v32);
  if (v11((const void *)(a2 + v32), 1, v9))
  {
    uint64_t v35 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v33, v34, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v33, 0, 1, v9);
  }
  uint64_t v36 = a3[23];
  int v37 = (void *)(a1 + v36);
  uint64_t v38 = (const void *)(a2 + v36);
  if (v11((const void *)(a2 + v36), 1, v9))
  {
    uint64_t v39 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v37, v38, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v37, 0, 1, v9);
  }
  uint64_t v40 = a3[24];
  uint64_t v41 = a3[25];
  uint64_t v42 = a1 + v40;
  uint64_t v43 = a2 + v40;
  *(void *)(v42 + 96) = *(void *)(v43 + 96);
  long long v44 = *(_OWORD *)(v43 + 16);
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v44;
  long long v45 = *(_OWORD *)(v43 + 80);
  *(_OWORD *)(v42 + 64) = *(_OWORD *)(v43 + 64);
  *(_OWORD *)(v42 + 80) = v45;
  long long v46 = *(_OWORD *)(v43 + 48);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(v43 + 32);
  *(_OWORD *)(v42 + 48) = v46;
  uint64_t v47 = a1 + v41;
  uint64_t v48 = a2 + v41;
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
  *(void *)(v47 + 16) = *(void *)(v48 + 16);
  uint64_t v49 = a3[27];
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  *(void *)(a1 + v49) = *(void *)(a2 + v49);
  *(void *)(a1 + a3[28]) = *(void *)(a2 + a3[28]);
  return a1;
}

uint64_t sub_1004BA2B0(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v9 = a3[10];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  int v21 = v14((void *)(a1 + v18), 1, v12);
  int v22 = v14(v20, 1, v12);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v19, v20, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v19, v12);
LABEL_12:
    uint64_t v23 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v19, v20, v12);
LABEL_13:
  uint64_t v24 = a3[12];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  void *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v30 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  uint64_t v31 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[19];
  int v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  int v39 = v14((void *)(a1 + v36), 1, v12);
  int v40 = v14(v38, 1, v12);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v37, v38, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v37, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v40)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v37, v12);
LABEL_18:
    uint64_t v41 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v37, v38, v12);
LABEL_19:
  uint64_t v42 = a3[20];
  uint64_t v43 = (void *)(a1 + v42);
  long long v44 = (void *)(a2 + v42);
  int v45 = v14((void *)(a1 + v42), 1, v12);
  int v46 = v14(v44, 1, v12);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v43, v44, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v43, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v43, v12);
LABEL_24:
    uint64_t v47 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v43, v44, v12);
LABEL_25:
  uint64_t v48 = a3[21];
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (void *)(a2 + v48);
  int v51 = v14((void *)(a1 + v48), 1, v12);
  int v52 = v14(v50, 1, v12);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v49, v50, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v49, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v49, v12);
LABEL_30:
    uint64_t v53 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v49, v50, v12);
LABEL_31:
  uint64_t v54 = a3[22];
  int v55 = (void *)(a1 + v54);
  uint64_t v56 = (void *)(a2 + v54);
  int v57 = v14((void *)(a1 + v54), 1, v12);
  int v58 = v14(v56, 1, v12);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v55, v56, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v55, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v55, v12);
LABEL_36:
    uint64_t v59 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v55, v56, v12);
LABEL_37:
  uint64_t v60 = a3[23];
  uint64_t v61 = (void *)(a1 + v60);
  uint64_t v62 = (void *)(a2 + v60);
  int v63 = v14((void *)(a1 + v60), 1, v12);
  int v64 = v14(v62, 1, v12);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v61, v62, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v61, 0, 1, v12);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v64)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v61, v12);
LABEL_42:
    uint64_t v65 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v61, v62, v12);
LABEL_43:
  uint64_t v66 = a3[24];
  uint64_t v67 = a1 + v66;
  uint64_t v68 = a2 + v66;
  if (*(void *)(a1 + v66 + 80))
  {
    if (*(void *)(v68 + 80))
    {
      uint64_t v69 = *(void *)(v68 + 16);
      uint64_t v70 = *(void *)(v67 + 8);
      unint64_t v71 = *(void *)(v67 + 16);
      *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
      *(void *)(v67 + 16) = v69;
      sub_10017253C(v70, v71);
      uint64_t v72 = *(void *)(v67 + 24);
      unint64_t v73 = *(void *)(v67 + 32);
      *(_OWORD *)(v67 + 24) = *(_OWORD *)(v68 + 24);
      sub_10017253C(v72, v73);
      uint64_t v74 = *(void *)(v67 + 40);
      unint64_t v75 = *(void *)(v67 + 48);
      *(_OWORD *)(v67 + 40) = *(_OWORD *)(v68 + 40);
      sub_10017253C(v74, v75);
      uint64_t v76 = *(void *)(v67 + 56);
      unint64_t v77 = *(void *)(v67 + 64);
      *(_OWORD *)(v67 + 56) = *(_OWORD *)(v68 + 56);
      sub_10017253C(v76, v77);
      uint64_t v78 = *(void *)(v68 + 80);
      *(void *)(v67 + 72) = *(void *)(v68 + 72);
      *(void *)(v67 + 80) = v78;
      swift_bridgeObjectRelease();
      uint64_t v79 = *(void *)(v67 + 88);
      unint64_t v80 = *(void *)(v67 + 96);
      *(_OWORD *)(v67 + 88) = *(_OWORD *)(v68 + 88);
      sub_10017253C(v79, v80);
      goto LABEL_48;
    }
    sub_1004B9CC0(v67);
  }
  long long v81 = *(_OWORD *)(v68 + 80);
  *(_OWORD *)(v67 + 64) = *(_OWORD *)(v68 + 64);
  *(_OWORD *)(v67 + 80) = v81;
  *(void *)(v67 + 96) = *(void *)(v68 + 96);
  long long v82 = *(_OWORD *)(v68 + 16);
  *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
  *(_OWORD *)(v67 + 16) = v82;
  long long v83 = *(_OWORD *)(v68 + 48);
  *(_OWORD *)(v67 + 32) = *(_OWORD *)(v68 + 32);
  *(_OWORD *)(v67 + 48) = v83;
LABEL_48:
  uint64_t v84 = a3[25];
  uint64_t v85 = a1 + v84;
  uint64_t v86 = a2 + v84;
  if (!*(void *)(a1 + v84 + 8))
  {
LABEL_52:
    *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
    *(void *)(v85 + 16) = *(void *)(v86 + 16);
    goto LABEL_53;
  }
  uint64_t v87 = *(void *)(v86 + 8);
  if (!v87)
  {
    sub_10024D9D8(v85);
    goto LABEL_52;
  }
  *(void *)uint64_t v85 = *(void *)v86;
  *(void *)(v85 + 8) = v87;
  swift_bridgeObjectRelease();
  *(void *)(v85 + 16) = *(void *)(v86 + 16);
  swift_bridgeObjectRelease();
LABEL_53:
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[27]) = *(void *)(a2 + a3[27]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[28]) = *(void *)(a2 + a3[28]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004BAC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004BAC14);
}

uint64_t sub_1004BAC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1004BACC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004BACDC);
}

uint64_t sub_1004BACDC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10002F214((uint64_t *)&unk_1006A3E20);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1004BAD88()
{
  sub_100005808();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1004BAE94(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1004BB338(&qword_1006A10E0, (void (*)(uint64_t))type metadata accessor for ICNoteArchiveModel);
  uint64_t result = sub_1004BB338(&qword_1006A39A0, (void (*)(uint64_t))type metadata accessor for ICNoteArchiveModel);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1004BAF18()
{
  unint64_t result = qword_1006A9630;
  if (!qword_1006A9630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9630);
  }
  return result;
}

unint64_t sub_1004BAF6C()
{
  unint64_t result = qword_1006A9638;
  if (!qword_1006A9638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9638);
  }
  return result;
}

unint64_t sub_1004BAFC0()
{
  unint64_t result = qword_1006A9640;
  if (!qword_1006A9640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9640);
  }
  return result;
}

unint64_t sub_1004BB014()
{
  unint64_t result = qword_1006A9648;
  if (!qword_1006A9648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9648);
  }
  return result;
}

unint64_t sub_1004BB068()
{
  unint64_t result = qword_1006A9668;
  if (!qword_1006A9668)
  {
    sub_10001DFF4(&qword_1006A9660);
    sub_1004BB338(&qword_1006A2348, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9668);
  }
  return result;
}

unint64_t sub_1004BB114()
{
  unint64_t result = qword_1006A9678;
  if (!qword_1006A9678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9678);
  }
  return result;
}

unint64_t sub_1004BB168()
{
  unint64_t result = qword_1006A9680;
  if (!qword_1006A9680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9680);
  }
  return result;
}

unint64_t sub_1004BB1BC()
{
  unint64_t result = qword_1006A9688;
  if (!qword_1006A9688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9688);
  }
  return result;
}

uint64_t sub_1004BB210(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001DFF4(&qword_1006A9650);
    sub_1004BB338(a2, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004BB2A4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001DFF4(&qword_1006A5F20);
    sub_1004BB338(a2, (void (*)(uint64_t))_s8ActivityVMa);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004BB338(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004BB380()
{
  unint64_t result = qword_1006A9698;
  if (!qword_1006A9698)
  {
    sub_10001DFF4(&qword_1006A9660);
    sub_1004BB338(&qword_1006A2338, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9698);
  }
  return result;
}

uint64_t sub_1004BB42C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004BB494(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for ICNoteArchiveModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE7)
  {
    unsigned int v6 = ((a2 - 232) >> 8) + 1;
    *unint64_t result = a2 + 24;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004BB5C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 24;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.CodingKeys()
{
  return &type metadata for ICNoteArchiveModel.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ICNoteArchiveModel.Backgrounds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004BB6C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.Backgrounds()
{
  return &type metadata for ICNoteArchiveModel.Backgrounds;
}

unsigned char *storeEnumTagSinglePayload for ICNoteArchiveModel.PaperStyles(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004BB7C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.PaperStyles()
{
  return &type metadata for ICNoteArchiveModel.PaperStyles;
}

unsigned char *storeEnumTagSinglePayload for ICNoteArchiveModel.AttachmentViewTypes(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004BB8CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.AttachmentViewTypes()
{
  return &type metadata for ICNoteArchiveModel.AttachmentViewTypes;
}

uint64_t sub_1004BB908()
{
  return sub_10015D724(&qword_1006A96A0, &qword_1006A96A8);
}

unint64_t sub_1004BB934()
{
  unint64_t result = qword_1006A96B0;
  if (!qword_1006A96B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A96B0);
  }
  return result;
}

uint64_t sub_1004BB98C()
{
  return sub_10015D724(&qword_1006A96B8, &qword_1006A96C0);
}

unint64_t sub_1004BB9B8()
{
  unint64_t result = qword_1006A96C8;
  if (!qword_1006A96C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A96C8);
  }
  return result;
}

uint64_t sub_1004BBA10()
{
  return sub_10015D724(&qword_1006A96D0, &qword_1006A96D8);
}

unint64_t sub_1004BBA3C()
{
  unint64_t result = qword_1006A96E0;
  if (!qword_1006A96E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A96E0);
  }
  return result;
}

unint64_t sub_1004BBA94()
{
  unint64_t result = qword_1006A96E8;
  if (!qword_1006A96E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A96E8);
  }
  return result;
}

unint64_t sub_1004BBAEC()
{
  unint64_t result = qword_1006A96F0;
  if (!qword_1006A96F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A96F0);
  }
  return result;
}

unint64_t sub_1004BBB44()
{
  unint64_t result = qword_1006A96F8;
  if (!qword_1006A96F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A96F8);
  }
  return result;
}

unint64_t sub_1004BBB98()
{
  unint64_t result = qword_1006A9700;
  if (!qword_1006A9700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9700);
  }
  return result;
}

uint64_t sub_1004BBBEC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100554FB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6954746E65726170 && a2 == 0xEB00000000656C74 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100554FD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100554FF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6465696669646F6DLL && a2 == 0xEA00000000007441 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x64656E6E69507369 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x4E6B636975517369 && a2 == 0xEB0000000065746FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7974537265706170 && a2 == 0xEA0000000000656CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001005608E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100560900 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100560920 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x7441646577656976 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100560940 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100560960 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000100560980 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001005609A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001005609C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x6974697669746361 && a2 == 0xEA00000000007365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x80000001005609E0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 24;
    }
    else {
      return 25;
    }
  }
}

unint64_t sub_1004BC604()
{
  unint64_t result = qword_1006A9708;
  if (!qword_1006A9708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9708);
  }
  return result;
}

unint64_t sub_1004BC658()
{
  unint64_t result = qword_1006A9710;
  if (!qword_1006A9710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9710);
  }
  return result;
}

unint64_t sub_1004BC6AC()
{
  unint64_t result = qword_1006A9718;
  if (!qword_1006A9718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9718);
  }
  return result;
}

unint64_t sub_1004BC700(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10062D148, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

unint64_t sub_1004BC74C()
{
  unint64_t result = qword_1006A9720;
  if (!qword_1006A9720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9720);
  }
  return result;
}

unint64_t sub_1004BC7A0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10062D260, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_1004BC7EC()
{
  unint64_t result = qword_1006A9728;
  if (!qword_1006A9728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006A9728);
  }
  return result;
}

id sub_1004BC840()
{
  return sub_100243634(&OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController____lazy_storage___cancelBarButtonItem, &selRef_cancelActionWithSender_, 1);
}

id sub_1004BC858()
{
  return sub_100243634(&OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController____lazy_storage___doneBarButtonItem, &selRef_doneActionWithSender_, 0);
}

void sub_1004BC874(char a1)
{
  if (a1)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong
      || (Swift::String v2 = (void *)Strong,
          unint64_t v3 = *(void **)(Strong + OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection),
          id v4 = v3,
          v2,
          !v3))
    {
      id v4 = [objc_allocWithZone((Class)ICFilterSelection) init];
    }
    swift_beginAccess();
    uint64_t v5 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v5)
    {
      char v6 = v5;
      (*(void (**)(id))((swift_isaMask & *v5) + 0x70))(v4);
    }
    swift_beginAccess();
    uint64_t v7 = (char *)swift_unknownObjectWeakLoadStrong();
    if (v7)
    {
      uint64_t v8 = *(void **)&v7[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection];
      *(void *)&v7[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection] = 0;
    }
    swift_beginAccess();
    uint64_t v9 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = [v9 navigationController];

      if (v11)
      {
        [v11 dismissViewControllerAnimated:1 completion:0];
      }
    }
  }
}

id sub_1004BCBCC(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController____lazy_storage___cancelBarButtonItem] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController____lazy_storage___doneBarButtonItem] = 0;
  if (a2)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  v8.id receiver = v3;
  v8.Class super_class = (Class)type metadata accessor for FolderComposerBaseViewController();
  [super initWithNibName:v5 bundle:a3];

  return v6;
}

id sub_1004BCD3C()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for FolderComposerBaseViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for FolderComposerBaseViewController()
{
  return self;
}

uint64_t sub_1004BCF14()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004BCF4C(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0x98);
  uint64_t v7 = swift_retain();
  if (v6(v7))
  {
    uint64_t v27 = a1;
    id v8 = [self alertControllerWithTitle:0 message:0 preferredStyle:0];
    uint64_t v9 = self;
    id v10 = [v9 mainBundle];
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 localizedStringForKey:v11 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_1004BD3C0;
    *(void *)(v13 + 24) = a3;
    swift_retain();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_1004BD400;
    uint64_t v33 = v13;
    aBlock = _NSConcreteStackBlock;
    uint64_t v29 = 1107296256;
    uint64_t v30 = sub_1002B6294;
    uint64_t v31 = &unk_10063EBF8;
    int v15 = _Block_copy(&aBlock);
    swift_release();
    int v16 = self;
    id v17 = [v16 actionWithTitle:v14 style:1 handler:v15];
    _Block_release(v15);

    [v8 addAction:v17];
    id v18 = [v9 mainBundle];
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v18 localizedStringForKey:v19 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_1004BD3C0;
    *(void *)(v21 + 24) = a3;
    swift_retain();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_10048BB38;
    uint64_t v33 = v21;
    aBlock = _NSConcreteStackBlock;
    uint64_t v29 = 1107296256;
    uint64_t v30 = sub_1002B6294;
    uint64_t v31 = &unk_10063EC48;
    uint64_t v23 = _Block_copy(&aBlock);
    swift_release();
    id v24 = [v16 actionWithTitle:v22 style:2 handler:v23];
    _Block_release(v23);

    [v8 addAction:v24];
    id v25 = [v8 popoverPresentationController];
    if (v25)
    {
      uint64_t v26 = v25;
      [v25 setBarButtonItem:v27];
    }
    [a2 presentViewController:v8 animated:1 completion:0];
    swift_release();
  }
  else
  {
    sub_1004BC874(1);
    swift_release();
  }
}

void sub_1004BD3C0(char a1)
{
}

uint64_t sub_1004BD3C8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004BD400()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t sub_1004BD45C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  id v4 = (char *)a3 + *(int *)(type metadata accessor for UnsafeResumption() + 44);
  uint64_t v5 = type metadata accessor for Result();
  id v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

uint64_t sub_1004BD510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Result();
  __chkstk_darwin(v8);
  id v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))((char *)&v12 - v9, a2, a3);
  swift_storeEnumTagMultiPayload();
  return sub_1004BD45C(a1, (uint64_t)v10, a4);
}

uint64_t sub_1004BD614(uint64_t a1)
{
  return sub_1004BD630((uint64_t)v1 + *(int *)(a1 + 44), *v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1004BD630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  id v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v8);
  NSString v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Result();
  __chkstk_darwin(v15);
  id v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v21 - v16, a1, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, a4);
    return sub_1004BD908((uint64_t)v14, v22, a3, a4);
  }
  else
  {
    id v20 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v20(v10, v17, a3);
    v20(*(char **)(*(void *)(v22 + 64) + 40), v10, a3);
    return swift_continuation_throwingResume();
  }
}

uint64_t variable initialization expression of AsyncChannel.state()
{
  sub_1004D1698();
  type metadata accessor for AsyncChannel.State();
  uint64_t v0 = sub_1004D3B70();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1004BD908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v6, a1, a4);

  return swift_continuation_throwingResumeWithError();
}

uint64_t type metadata accessor for UnsafeResumption()
{
  return sub_100183A74();
}

uint64_t sub_1004BD9B4()
{
  uint64_t result = type metadata accessor for Result();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1004BDA54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  int v7 = *(_DWORD *)(v6 + 80) | v5;
  uint64_t v8 = (*(unsigned char *)(v6 + 80) | v5);
  if (*(void *)(v6 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v9 = *(void *)(v6 + 64);
  }
  if (v8 > 7 || (v7 & 0x100000) != 0 || v9 + ((v8 + 8) & (unint64_t)~v8) + 1 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v13 = ((unint64_t)a1 + v8 + 8) & ~v8;
    NSString v14 = (unsigned __int8 *)(((unint64_t)a2 + v8 + 8) & ~v8);
    unsigned int v15 = v14[v9];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *v14;
          goto LABEL_22;
        case 2:
          int v18 = *(unsigned __int16 *)v14;
          goto LABEL_22;
        case 3:
          int v18 = *(unsigned __int16 *)v14 | (v14[2] << 16);
          goto LABEL_22;
        case 4:
          int v18 = *(_DWORD *)v14;
LABEL_22:
          int v19 = (v18 | (v16 << (8 * v9))) + 2;
          unsigned int v15 = v18 + 2;
          if (v9 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 1)
    {
      (*(void (**)(uint64_t))(v6 + 16))(v13);
      *(unsigned char *)(v13 + v9) = 1;
    }
    else
    {
      (*(void (**)(uint64_t))(v4 + 16))(v13);
      *(unsigned char *)(v13 + v9) = 0;
    }
  }
  return a1;
}

uint64_t sub_1004BDC68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80) | *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16)
                                                                                                 - 8)
                                                                                     + 80);
  uint64_t v4 = (unsigned __int8 *)((a1 + v3 + 8) & ~v3);
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (*(void *)(*(void *)v2 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)v2 + 64);
  }
  unsigned int v6 = v4[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *v4;
        goto LABEL_12;
      case 2:
        int v9 = *(unsigned __int16 *)v4;
        goto LABEL_12;
      case 3:
        int v9 = *(unsigned __int16 *)v4 | (v4[2] << 16);
        goto LABEL_12;
      case 4:
        int v9 = *(_DWORD *)v4;
LABEL_12:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1) {
    uint64_t v11 = *(void *)v2;
  }
  else {
    uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v11 + 8))();
}

void *sub_1004BDDBC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80) | *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = ~v6;
  int v9 = (unsigned __int8 *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v11 = v9[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *v9;
        goto LABEL_13;
      case 2:
        int v14 = *(unsigned __int16 *)v9;
        goto LABEL_13;
      case 3:
        int v14 = *(unsigned __int16 *)v9 | (v9[2] << 16);
        goto LABEL_13;
      case 4:
        int v14 = *(_DWORD *)v9;
LABEL_13:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  unint64_t v16 = ((unint64_t)a1 + v7) & v8;
  BOOL v17 = v11 == 1;
  if (v11 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(unint64_t))(v5 + 16))(((unint64_t)a1 + v7) & v8);
  *(unsigned char *)(v16 + v10) = v17;
  return a1;
}

void *sub_1004BDF5C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80) | *(unsigned __int8 *)(v6 + 80);
  int v9 = (unsigned __int8 *)(((unint64_t)a1 + v8 + 8) & ~v8);
  uint64_t v10 = (unsigned __int8 *)(((unint64_t)a2 + v8 + 8) & ~v8);
  if (v9 != v10)
  {
    uint64_t v11 = *(void *)(v5 - 8);
    if (*(void *)(v7 + 64) <= *(void *)(v6 + 64)) {
      uint64_t v12 = *(void *)(v6 + 64);
    }
    else {
      uint64_t v12 = *(void *)(v7 + 64);
    }
    unsigned int v13 = v9[v12];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *v9;
          goto LABEL_14;
        case 2:
          int v16 = *(unsigned __int16 *)v9;
          goto LABEL_14;
        case 3:
          int v16 = *(unsigned __int16 *)v9 | (v9[2] << 16);
          goto LABEL_14;
        case 4:
          int v16 = *(_DWORD *)v9;
LABEL_14:
          int v17 = (v16 | (v14 << (8 * v12))) + 2;
          unsigned int v13 = v16 + 2;
          if (v12 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1) {
      uint64_t v18 = *(void *)(v5 - 8);
    }
    else {
      uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v13 == 1) {
      uint64_t v19 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v19 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(v9, v19);
    unsigned int v20 = v10[v12];
    unsigned int v21 = v20 - 2;
    if (v20 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v22 = v12;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *v10;
          goto LABEL_31;
        case 2:
          int v23 = *(unsigned __int16 *)v10;
          goto LABEL_31;
        case 3:
          int v23 = *(unsigned __int16 *)v10 | (v10[2] << 16);
          goto LABEL_31;
        case 4:
          int v23 = *(_DWORD *)v10;
LABEL_31:
          int v24 = (v23 | (v21 << (8 * v12))) + 2;
          unsigned int v20 = v23 + 2;
          if (v12 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    BOOL v25 = v20 == 1;
    if (v20 == 1) {
      uint64_t v26 = v11;
    }
    else {
      uint64_t v26 = v6;
    }
    if (v20 == 1) {
      uint64_t v27 = v5;
    }
    else {
      uint64_t v27 = v4;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(v9, v10, v27);
    v9[v12] = v25;
  }
  return a1;
}

void *sub_1004BE1A0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80) | *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = ~v6;
  int v9 = (unsigned __int8 *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v11 = v9[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *v9;
        goto LABEL_13;
      case 2:
        int v14 = *(unsigned __int16 *)v9;
        goto LABEL_13;
      case 3:
        int v14 = *(unsigned __int16 *)v9 | (v9[2] << 16);
        goto LABEL_13;
      case 4:
        int v14 = *(_DWORD *)v9;
LABEL_13:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  unint64_t v16 = ((unint64_t)a1 + v7) & v8;
  BOOL v17 = v11 == 1;
  if (v11 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(unint64_t))(v5 + 32))(((unint64_t)a1 + v7) & v8);
  *(unsigned char *)(v16 + v10) = v17;
  return a1;
}

void *sub_1004BE340(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80) | *(unsigned __int8 *)(v6 + 80);
  int v9 = (unsigned __int8 *)(((unint64_t)a1 + v8 + 8) & ~v8);
  uint64_t v10 = (unsigned __int8 *)(((unint64_t)a2 + v8 + 8) & ~v8);
  if (v9 != v10)
  {
    uint64_t v11 = *(void *)(v5 - 8);
    if (*(void *)(v7 + 64) <= *(void *)(v6 + 64)) {
      uint64_t v12 = *(void *)(v6 + 64);
    }
    else {
      uint64_t v12 = *(void *)(v7 + 64);
    }
    unsigned int v13 = v9[v12];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *v9;
          goto LABEL_14;
        case 2:
          int v16 = *(unsigned __int16 *)v9;
          goto LABEL_14;
        case 3:
          int v16 = *(unsigned __int16 *)v9 | (v9[2] << 16);
          goto LABEL_14;
        case 4:
          int v16 = *(_DWORD *)v9;
LABEL_14:
          int v17 = (v16 | (v14 << (8 * v12))) + 2;
          unsigned int v13 = v16 + 2;
          if (v12 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1) {
      uint64_t v18 = *(void *)(v5 - 8);
    }
    else {
      uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v13 == 1) {
      uint64_t v19 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v19 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(v9, v19);
    unsigned int v20 = v10[v12];
    unsigned int v21 = v20 - 2;
    if (v20 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v22 = v12;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *v10;
          goto LABEL_31;
        case 2:
          int v23 = *(unsigned __int16 *)v10;
          goto LABEL_31;
        case 3:
          int v23 = *(unsigned __int16 *)v10 | (v10[2] << 16);
          goto LABEL_31;
        case 4:
          int v23 = *(_DWORD *)v10;
LABEL_31:
          int v24 = (v23 | (v21 << (8 * v12))) + 2;
          unsigned int v20 = v23 + 2;
          if (v12 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    BOOL v25 = v20 == 1;
    if (v20 == 1) {
      uint64_t v26 = v11;
    }
    else {
      uint64_t v26 = v6;
    }
    if (v20 == 1) {
      uint64_t v27 = v5;
    }
    else {
      uint64_t v27 = v4;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(v9, v10, v27);
    v9[v12] = v25;
  }
  return a1;
}

uint64_t sub_1004BE584(unsigned __int16 *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  uint64_t v7 = *(unsigned __int8 *)(v3 + 80) | *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80);
  uint64_t v8 = v4 + ((v7 + 8) & ~v7) + 1;
  char v9 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_10;
  }
  unsigned int v11 = (a2 - 0x7FFFFFFF + ~(-1 << v9)) >> v9;
  if (v11 > 0xFFFE)
  {
    int v10 = *(_DWORD *)((char *)a1 + v8);
    if (!v10) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
  if (v11 <= 0xFE)
  {
    if (!v11) {
      goto LABEL_5;
    }
LABEL_10:
    int v10 = *((unsigned __int8 *)a1 + v8);
    if (!*((unsigned char *)a1 + v8)) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
  int v10 = *(unsigned __int16 *)((char *)a1 + v8);
  if (!*(unsigned __int16 *)((char *)a1 + v8))
  {
LABEL_5:
    uint64_t v5 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
LABEL_19:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v8 | v12) ^ 0x80000000;
}

void sub_1004BE73C(char *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)) {
    unint64_t v6 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80) | *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80);
  size_t v8 = v6 + ((v7 + 8) & ~v7) + 1;
  if (a3 < 0)
  {
    if (v8 <= 3)
    {
      unsigned int v10 = (a3 - 0x7FFFFFFF + ~(-1 << (8 * v8))) >> (8 * v8);
      if (v10 > 0xFFFE)
      {
        int v9 = 4;
        if (a2 < 0) {
          goto LABEL_14;
        }
        goto LABEL_21;
      }
      if (v10 >= 0xFF) {
        int v9 = 2;
      }
      else {
        int v9 = v10 != 0;
      }
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      int v9 = 1;
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_21;
      }
    }
LABEL_14:
    unsigned int v11 = a2 ^ 0x80000000;
    if (v8 < 4)
    {
      int v12 = (v11 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = a2 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v12;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v12;
        return;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v8] = v12;
        return;
      default:
        return;
    }
  }
  int v9 = 0;
  if (a2 < 0) {
    goto LABEL_14;
  }
LABEL_21:
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      goto LABEL_25;
    case 3:
LABEL_36:
      __break(1u);
      JUMPOUT(0x1004BE988);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    default:
LABEL_25:
      if (a2) {
LABEL_26:
      }
        *(void *)a1 = (a2 - 1);
      return;
  }
}

uint64_t sub_1004BE9B0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1004BEA48(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
LABEL_25:
    swift_retain();
    return v3;
  }
  unsigned int v9 = a2[v5];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v11 = v5;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_19;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_19:
        int v13 = (v12 | (v10 << (8 * v5))) + 2;
        unsigned int v9 = v12 + 2;
        if (v5 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    *(void *)__dst = *(void *)a2;
    __dst[v5] = 1;
    goto LABEL_25;
  }
  if (v9)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *))(v4 + 16))(__dst);
    *((unsigned char *)v3 + v5) = 0;
  }
  return v3;
}

unsigned __int8 *sub_1004BEBD4(unsigned __int8 *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = result[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *result;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)result;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return (unsigned __int8 *)swift_release();
  }
  if (!v3) {
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  return result;
}

unsigned char *sub_1004BECDC(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *(void *)__dst = *(void *)a2;
    __dst[v4] = 1;
    swift_retain();
  }
  else if (v5)
  {
    memcpy(__dst, a2, v4 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst);
    __dst[v4] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_1004BEE2C(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = __dst[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *__dst;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)__dst;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1)
    {
      swift_release();
    }
    else if (!v8)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
    unsigned int v13 = __src[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *__src;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)__src;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)__src;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)__dst = *(void *)__src;
      __dst[v7] = 1;
      swift_retain();
    }
    else if (v13)
    {
      memcpy(__dst, __src, v7 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

unsigned char *sub_1004BF064(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *(void *)__dst = *(void *)a2;
    __dst[v4] = 1;
  }
  else if (v5)
  {
    memcpy(__dst, a2, v4 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(__dst);
    __dst[v4] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_1004BF1B0(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = __dst[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *__dst;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)__dst;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1)
    {
      swift_release();
    }
    else if (!v8)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
    unsigned int v13 = __src[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *__src;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)__src;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)__src;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)__dst = *(void *)__src;
      __dst[v7] = 1;
    }
    else if (v13)
    {
      memcpy(__dst, __src, v7 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t sub_1004BF3E4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void sub_1004BF518(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1004BF6E0);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1004BF708(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 8;
  if (*(void *)(v2 + 64) > 8uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_1004BF7C0(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for PartialIteration()
{
  return sub_100183A74();
}

uint64_t sub_1004BF8B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v20 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unsigned int v10 = (char *)&v18 - v9;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(v3, a2);
  sub_10001DFF4(&qword_1006A3D90);
  uint64_t v11 = type metadata accessor for Result();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1004D3BD4(v11, WitnessTable);
  if (v4)
  {
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    uint64_t v14 = v19;
    uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v8);
      uint64_t v16 = 1;
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v20;
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v20, v10, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v3, v18, v6);
      uint64_t v16 = 0;
    }
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v17, v16, 1, AssociatedTypeWitness);
  }
}

uint64_t sub_1004BFB80(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  unsigned int v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v1, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    Task.cancel()();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1004BFCA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      return 0x6C616E696D726574;
    }
    uint64_t v6 = 0x676E69646E6570;
  }
  else
  {
    uint64_t v6 = 1701602409;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v6;
}

uint64_t static Task.select<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  void v6[6] = a2;
  return _swift_task_switch(sub_1004BFE00, 0, 0);
}

uint64_t sub_1004BFE00()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 40);
  uint64_t v6 = type metadata accessor for Task();
  uint64_t v7 = static Array._allocateUninitialized(_:)();
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = v7;
  type metadata accessor for TaskSelectState();
  uint64_t v8 = sub_1004D3B70();
  *(void *)(v0 + 88) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v9;
  void v9[2] = v5;
  v9[3] = v4;
  v9[4] = v3;
  v9[5] = v1;
  void v9[6] = v2;
  v9[7] = v8;
  unsigned int v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v10;
  _OWORD v10[2] = v5;
  v10[3] = v4;
  v10[4] = v3;
  v10[5] = v1;
  void v10[6] = v2;
  v10[7] = v13;
  v10[8] = v8;
  uint64_t v14 = (char *)&dword_1006A9920 + dword_1006A9920;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1004BFFB0;
  return ((uint64_t (*)(uint64_t, uint64_t (*)(), void *, void *, void *, uint64_t))v14)(v0 + 32, sub_1004C131C, v9, &unk_1006A9918, v10, v6);
}

uint64_t sub_1004BFFB0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1004C00E4, 0, 0);
}

uint64_t sub_1004C00E4()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1004C0148(uint64_t a1)
{
  if (*(void *)(v1 + 8))
  {
    uint64_t v4 = *(void *)(v1 + 8);
    type metadata accessor for Task();
    type metadata accessor for Array();
    swift_retain();
    Array.append(_:)();
    a1 = 0;
    *(void *)(v1 + 8) = v4;
  }
  else
  {
    swift_retain();
  }
  return a1;
}

uint64_t sub_1004C01E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v13[2] = a2;
  _OWORD v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  void v13[6] = a6;
  type metadata accessor for TaskSelectState();
  type metadata accessor for Task();
  type metadata accessor for Array();
  sub_1004D3A38((void (*)(uint64_t))sub_1004C1764, (uint64_t)v13, a1);
  if (Array.endIndex.getter())
  {
    uint64_t v7 = 4;
    do
    {
      uint64_t v8 = v7 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        swift_retain();
        BOOL v10 = __OFADD__(v8, 1);
        uint64_t v11 = v7 - 3;
        if (v10) {
          goto LABEL_9;
        }
      }
      else
      {
        _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v10 = __OFADD__(v8, 1);
        uint64_t v11 = v7 - 3;
        if (v10)
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      Task.cancel()();
      swift_release();
      ++v7;
    }
    while (v11 != Array.endIndex.getter());
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004C0354@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    type metadata accessor for Task();
    uint64_t v5 = static Array._allocateUninitialized(_:)();
  }
  *a2 = v5;
  *(void *)(a1 + 8) = 0;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004C03CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  void v8[6] = a5;
  v8[7] = a6;
  void v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return _swift_task_switch(sub_1004C03F8, 0, 0);
}

uint64_t sub_1004C03F8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  long long v3 = *(_OWORD *)(v0 + 64);
  long long v8 = *(_OWORD *)(v0 + 48);
  long long v4 = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v8;
  *(_OWORD *)(v2 + 40) = v3;
  *(_OWORD *)(v2 + 56) = v4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006A9E68 + dword_1006A9E68);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v5;
  type metadata accessor for Task();
  void *v5 = v0;
  v5[1] = sub_1004C0518;
  uint64_t v6 = *(void *)(v0 + 16);
  return v9(v6, 0, 0, (uint64_t)sub_1004C1560, v2);
}

uint64_t sub_1004C0518()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1004C062C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v53 = a7;
  uint64_t v54 = a3;
  uint64_t v50 = a1;
  uint64_t v13 = sub_10002F214(&qword_1006A09A0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v49 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a6 - 8);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  unsigned int v21 = (char *)&v38 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, a6);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  int v51 = v21;
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v48 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v23 = v59;
  if (v59)
  {
    uint64_t v24 = type metadata accessor for TaskPriority();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
    uint64_t v45 = v25 + 56;
    int v46 = v26;
    long long v44 = (uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
    int v40 = (void (**)(uint64_t, uint64_t))(v25 + 8);
    uint64_t v42 = a8;
    uint64_t v43 = (char *)&type metadata for () + 8;
    uint64_t v47 = a6;
    uint64_t v41 = v24;
    do
    {
      uint64_t v27 = v49;
      v46(v49, 1, 1, v24);
      uint64_t v28 = (void *)swift_allocObject();
      v28[2] = 0;
      v28[3] = 0;
      v28[4] = a4;
      void v28[5] = a5;
      v28[6] = a6;
      uint64_t v29 = (uint64_t)v27;
      v28[7] = v53;
      v28[8] = a8;
      uint64_t v30 = v54;
      v28[9] = v23;
      v28[10] = v30;
      v28[11] = v50;
      LODWORD(v27) = (*v44)(v27, 1, v24);
      swift_retain();
      swift_retain();
      if (v27 == 1)
      {
        sub_1003E0E68(v29);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v40)(v29, v24);
      }
      uint64_t v31 = v53;
      if (v28[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v32 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v34 = v33;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v34 = 0;
      }
      uint64_t v35 = swift_allocObject();
      *(void *)(v35 + 16) = &unk_1006A99C0;
      *(void *)(v35 + 24) = v28;
      if (v34 | v32)
      {
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = v32;
        uint64_t v58 = v34;
      }
      a8 = v42;
      swift_task_create();
      uint64_t v36 = swift_release();
      __chkstk_darwin(v36);
      *(&v38 - 6) = a4;
      *(&v38 - 5) = a5;
      a6 = v47;
      *(&v38 - 4) = v47;
      *(&v38 - 3) = v31;
      *(&v38 - 2) = a8;
      *(&v38 - 1) = v23;
      type metadata accessor for TaskSelectState();
      type metadata accessor for Task();
      type metadata accessor for Optional();
      sub_1004D3A38((void (*)(uint64_t))sub_1004C16F0, (uint64_t)(&v38 - 8), v54);
      if (v59)
      {
        Task.cancel()();
        swift_release();
      }
      swift_release();
      uint64_t v24 = v41;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v23 = v59;
    }
    while (v59);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v51, v52);
}

uint64_t sub_1004C0B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = v18;
  v8[10] = v19;
  v8[7] = a8;
  v8[8] = v17;
  v8[5] = a6;
  void v8[6] = a7;
  v8[3] = a4;
  void v8[4] = a5;
  uint64_t v12 = type metadata accessor for Result();
  v8[11] = v12;
  v8[12] = *(void *)(v12 - 8);
  uint64_t v13 = swift_task_alloc();
  v8[13] = v13;
  uint64_t v14 = (void *)swift_task_alloc();
  v8[14] = v14;
  *uint64_t v14 = v8;
  v14[1] = sub_1004C0C88;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))Task.result.getter)(v13, a4, a7, a8);
}

uint64_t sub_1004C0C88()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  uint64_t v2 = *(void *)(*(void *)v0 + 96);
  uint64_t v3 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1004C0DE0, 0, 0);
}

uint64_t sub_1004C0DE0()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 56);
  long long v5 = *(_OWORD *)(v0 + 72);
  *(void *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  *(_OWORD *)(v3 + 40) = v5;
  type metadata accessor for TaskSelectState();
  sub_1004D3A38((void (*)(uint64_t))sub_1004C174C, v3, v2);
  swift_task_dealloc();
  if (*(unsigned char *)(v0 + 120) == 1)
  {
    *(void *)(v0 + 16) = *(void *)(v0 + 24);
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = type metadata accessor for Task();
    swift_retain();
    sub_1004D01DC(v0 + 16, v6, v7);
  }
  swift_task_dealloc();
  long long v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1004C0F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (char *)&dword_1006A99B0 + dword_1006A99B0;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_100161724;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t))v15)(a1, a4, a5, a2, a3, 0, 0, a6);
}

uint64_t static Task.select(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  long long v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  type metadata accessor for Task();
  uint64_t v9 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  *long long v8 = v4;
  v8[1] = sub_1004C111C;
  v8[9] = a4;
  v8[10] = WitnessTable;
  v8[7] = a3;
  v8[8] = v9;
  v8[5] = v4 + 16;
  void v8[6] = a2;
  return _swift_task_switch(sub_1004BFE00, 0, 0);
}

uint64_t sub_1004C111C(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1004C1218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = sub_10017B61C;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t type metadata accessor for TaskSelectState()
{
  return sub_100183A74();
}

uint64_t sub_1004C131C()
{
  return sub_1004C01E0(v0[7], v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1004C132C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 56);
  long long v7 = *(_OWORD *)(v1 + 16);
  long long v8 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100161724;
  *(void *)(v5 + 72) = v4;
  *(_OWORD *)(v5 + 56) = v8;
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_1004C03F8, 0, 0);
}

uint64_t sub_1004C13FC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1004C1434(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004C1478(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004C14B4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1004C1510(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1004C1560(uint64_t a1)
{
  return sub_1004C062C(a1, v1[7], v1[8], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1004C1574()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1004C15BC(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[9];
  uint64_t v10 = v1[10];
  uint64_t v9 = v1[11];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100161724;
  return sub_1004C0B3C(a1, v6, v7, v8, v10, v9, v4, v5);
}

uint64_t sub_1004C16B8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004C16F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 56);
  type metadata accessor for TaskSelectState();
  uint64_t result = sub_1004C0148(v3);
  *a1 = result;
  return result;
}

unsigned char *sub_1004C174C@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 1) == 0;
  *uint64_t result = 1;
  return result;
}

uint64_t sub_1004C1764@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004C0354(a1, a2);
}

uint64_t sub_1004C178C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1003E0E68(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v10 = (void *)swift_allocObject();
  _OWORD v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  return swift_task_create();
}

uint64_t merge<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, a4);
  return sub_1004C1AB4((uint64_t)v14, (uint64_t)v12, a3, a4, a5);
}

uint64_t sub_1004C1AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for AsyncMerge2Sequence();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t sub_1004C1B7C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, unsigned char *a5@<X8>)
{
  *a5 = a2;
  a5[1] = a4;
  uint64_t v6 = &a5[*(int *)(type metadata accessor for Merge2StateMachine() + 56)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v6, a1, AssociatedTypeWitness);
  type metadata accessor for Merge2StateMachine.Partial();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialIteration();
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialIteration();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(&v6[*(int *)(TupleTypeMetadata2 + 48)], a3, v8);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1004C1D70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  unsigned char v5[24] = a1;
  uint64_t v7 = a4[5];
  v5[29] = v7;
  uint64_t v8 = a4[3];
  v5[30] = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[31] = AssociatedTypeWitness;
  uint64_t v10 = type metadata accessor for Optional();
  v5[32] = v10;
  v5[33] = *(void *)(v10 - 8);
  v5[34] = swift_task_alloc();
  v5[35] = *(void *)(AssociatedTypeWitness - 8);
  v5[36] = swift_task_alloc();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v5[37] = v11;
  v5[38] = *(void *)(v11 - 8);
  v5[39] = swift_task_alloc();
  sub_10001DFF4(&qword_1006A3D90);
  uint64_t v12 = type metadata accessor for Result();
  v5[40] = v12;
  v5[41] = *(void *)(v12 - 8);
  v5[42] = swift_task_alloc();
  uint64_t v13 = a4[4];
  v5[43] = v13;
  uint64_t v14 = a4[2];
  v5[44] = v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  v5[45] = v15;
  uint64_t v16 = type metadata accessor for Optional();
  v5[46] = v16;
  v5[47] = *(void *)(v16 - 8);
  v5[48] = swift_task_alloc();
  v5[49] = *(void *)(v15 - 8);
  v5[50] = swift_task_alloc();
  uint64_t v17 = swift_getAssociatedTypeWitness();
  v5[51] = v17;
  v5[52] = *(void *)(v17 - 8);
  v5[53] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for Result();
  v5[54] = v18;
  v5[55] = *(void *)(v18 - 8);
  v5[56] = swift_task_alloc();
  _OWORD v5[2] = v14;
  v5[3] = v8;
  v5[4] = v13;
  v5[5] = v7;
  v5[57] = type metadata accessor for Merge2StateMachine.Partial();
  v5[58] = swift_task_alloc();
  return _swift_task_switch(sub_1004C21E8, 0, 0);
}

uint64_t sub_1004C21E8()
{
  uint64_t v1 = v0[44];
  uint64_t v15 = v0[43];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[26];
  type metadata accessor for Task();
  type metadata accessor for Optional();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  uint64_t v6 = static Array._adoptStorage(_:count:)();
  void *v7 = v4;
  v7[1] = v5;
  v0[23] = sub_1004D01B0(v6);
  uint64_t v8 = (void *)swift_task_alloc();
  v8[2] = v1;
  v8[3] = v3;
  void v8[4] = v15;
  v8[5] = v2;
  type metadata accessor for Array();
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v9 = Sequence.compactMap<A>(_:)();
  v0[59] = v9;
  v0[60] = 0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  v0[22] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[61] = v10;
  uint64_t v11 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  *uint64_t v10 = v0;
  v10[1] = sub_1004C23F0;
  uint64_t v13 = v0[57];
  return static Task.select<A>(_:)((uint64_t)(v0 + 22), v13, (uint64_t)&type metadata for Never, v11, (uint64_t)&protocol witness table for Never, WitnessTable);
}

uint64_t sub_1004C23F0(uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = (void *)*v1;
  v3[62] = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[63] = v5;
  void *v5 = v4;
  v5[1] = sub_1004C257C;
  uint64_t v6 = v3[58];
  uint64_t v7 = v3[57];
  return Task<>.value.getter(v6, a1, v7);
}

uint64_t sub_1004C257C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004C2694, 0, 0);
}

uint64_t sub_1004C2694()
{
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v86 = *(void *)(v0 + 216);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v90 = *(void *)(v0 + 480);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = *(void *)(v0 + 336);
    uint64_t v5 = *(void *)(v0 + 320);
    uint64_t v4 = *(void *)(v0 + 328);
    uint64_t v6 = *(void *)(v0 + 304);
    uint64_t v7 = *(void *)(v0 + 312);
    uint64_t v8 = *(void *)(v0 + 296);
    uint64_t v80 = *(void *)(v0 + 272);
    uint64_t v9 = v1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, v1, v5);
    uint64_t v10 = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v9, v8);
    *(_DWORD *)(v0 + 564) = *(_DWORD *)(v86 + 56);
    swift_getAssociatedConformanceWitness();
    uint64_t v11 = type metadata accessor for PartialIteration();
    *(void *)(v0 + 536) = v11;
    swift_getAssociatedConformanceWitness();
    uint64_t v12 = type metadata accessor for PartialIteration();
    swift_getTupleTypeMetadata2();
    sub_1004BF8B0(v10, v12, v80);
    if (v90)
    {
      uint64_t v13 = (uint64_t *)(v0 + 336);
      unint64_t v91 = (uint64_t *)(v0 + 328);
      uint64_t v14 = (uint64_t *)(v0 + 320);
      uint64_t v15 = (void *)(v0 + 312);
      uint64_t v16 = *(void *)(v0 + 536);
      uint64_t v17 = v0 + 304;
      uint64_t v18 = (void *)(v0 + 296);
LABEL_6:
      sub_1004BFB80(v16);
      swift_willThrow();
      uint64_t v27 = *v13;
      uint64_t v28 = *v14;
      uint64_t v29 = *v91;
      (*(void (**)(void, void))(*(void *)v17 + 8))(*v15, *v18);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
      return v30();
    }
    uint64_t v31 = *(void *)(v0 + 272);
    uint64_t v32 = *(void *)(v0 + 280);
    uint64_t v33 = *(void *)(v0 + 248);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v33) == 1)
    {
      uint64_t v34 = *(void *)(v0 + 224);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 264) + 8))(v31, *(void *)(v0 + 256));
      if (*(unsigned char *)(v34 + 1) == 1)
      {
        uint64_t v76 = *(void *)(v0 + 352);
        uint64_t v82 = *(void *)(v0 + 344);
        uint64_t v35 = *(void *)(v0 + 328);
        uint64_t v37 = *(void *)(v0 + 312);
        uint64_t v36 = *(void *)(v0 + 320);
        uint64_t v39 = *(void *)(v0 + 296);
        uint64_t v38 = *(void *)(v0 + 304);
        uint64_t v40 = *(void *)(v0 + 240);
        uint64_t v72 = *(void *)(v0 + 232);
        uint64_t v74 = *(void *)(v0 + 336);
        uint64_t v87 = *(void *)(v0 + 192);
        sub_1004BFB80(v11);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v74, v36);
        *(void *)(v0 + 112) = v76;
        *(void *)(v0 + 120) = v40;
        *(void *)(v0 + 128) = v82;
        *(void *)(v0 + 136) = v72;
LABEL_13:
        uint64_t v51 = type metadata accessor for Merge2StateMachine.Either();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v87, 1, 1, v51);
LABEL_17:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_18;
      }
      uint64_t v67 = (void *)swift_task_alloc();
      *(void *)(v0 + 544) = v67;
      *uint64_t v67 = v0;
      uint64_t v68 = sub_1004C323C;
      goto LABEL_23;
    }
    uint64_t v52 = *(void *)(v0 + 336);
    uint64_t v88 = *(void *)(v0 + 344);
    uint64_t v54 = *(void *)(v0 + 320);
    uint64_t v53 = *(void *)(v0 + 328);
    uint64_t v55 = *(void *)(v0 + 288);
    uint64_t v56 = *(void *)(v0 + 240);
    uint64_t v78 = *(void *)(v0 + 232);
    uint64_t v84 = *(void *)(v0 + 352);
    uint64_t v57 = *(void *)(v0 + 192);
    (*(void (**)(void, void))(*(void *)(v0 + 304) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
    v58(v55, v31, v33);
    v58(v57, v55, v33);
    *(void *)(v0 + 144) = v84;
    *(void *)(v0 + 152) = v56;
    *(void *)(v0 + 160) = v88;
    *(void *)(v0 + 168) = v78;
    uint64_t v59 = type metadata accessor for Merge2StateMachine.Either();
LABEL_16:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v57, 0, 1, v59);
    goto LABEL_17;
  }
  uint64_t v20 = *(void *)(v0 + 440);
  uint64_t v19 = *(void *)(v0 + 448);
  uint64_t v22 = *(void *)(v0 + 424);
  uint64_t v21 = *(void *)(v0 + 432);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 416);
  uint64_t v81 = *(void *)(v0 + 384);
  uint64_t v25 = v1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v19, v1, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v22, v25, v23);
  *(_DWORD *)(v0 + 560) = *(_DWORD *)(v86 + 56);
  swift_getAssociatedConformanceWitness();
  uint64_t v26 = type metadata accessor for PartialIteration();
  *(void *)(v0 + 512) = v26;
  sub_1004BF8B0(v22, v26, v81);
  if (v90)
  {
    unint64_t v91 = (uint64_t *)(v0 + 440);
    uint64_t v14 = (uint64_t *)(v0 + 432);
    uint64_t v15 = (void *)(v0 + 424);
    uint64_t v17 = v0 + 416;
    uint64_t v18 = (void *)(v0 + 408);
    swift_getAssociatedConformanceWitness();
    uint64_t v16 = type metadata accessor for PartialIteration();
    uint64_t v13 = (uint64_t *)(v0 + 448);
    swift_getTupleTypeMetadata2();
    goto LABEL_6;
  }
  uint64_t v41 = *(void *)(v0 + 384);
  uint64_t v42 = *(void *)(v0 + 392);
  uint64_t v43 = *(void *)(v0 + 360);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v41, 1, v43) != 1)
  {
    uint64_t v61 = *(void *)(v0 + 440);
    uint64_t v60 = *(void *)(v0 + 448);
    uint64_t v62 = *(void *)(v0 + 432);
    uint64_t v63 = *(void *)(v0 + 400);
    uint64_t v89 = *(void *)(v0 + 344);
    uint64_t v64 = *(void *)(v0 + 240);
    uint64_t v79 = *(void *)(v0 + 232);
    uint64_t v85 = *(void *)(v0 + 352);
    uint64_t v57 = *(void *)(v0 + 192);
    (*(void (**)(void, void))(*(void *)(v0 + 416) + 8))(*(void *)(v0 + 424), *(void *)(v0 + 408));
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
    v65(v63, v41, v43);
    v65(v57, v63, v43);
    *(void *)(v0 + 48) = v85;
    *(void *)(v0 + 56) = v64;
    *(void *)(v0 + 64) = v89;
    *(void *)(v0 + 72) = v79;
    uint64_t v59 = type metadata accessor for Merge2StateMachine.Either();
    goto LABEL_16;
  }
  long long v44 = *(unsigned char **)(v0 + 224);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 376) + 8))(v41, *(void *)(v0 + 368));
  if (*v44 == 1)
  {
    uint64_t v45 = *(void *)(v0 + 440);
    uint64_t v77 = *(void *)(v0 + 432);
    uint64_t v83 = *(void *)(v0 + 448);
    uint64_t v46 = *(void *)(v0 + 416);
    uint64_t v47 = *(void *)(v0 + 408);
    uint64_t v71 = *(void *)(v0 + 424);
    uint64_t v73 = *(void *)(v0 + 352);
    uint64_t v75 = *(void *)(v0 + 344);
    uint64_t v49 = *(void *)(v0 + 232);
    uint64_t v48 = *(void *)(v0 + 240);
    uint64_t v87 = *(void *)(v0 + 192);
    swift_getAssociatedConformanceWitness();
    uint64_t v50 = type metadata accessor for PartialIteration();
    swift_getTupleTypeMetadata2();
    sub_1004BFB80(v50);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v71, v47);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v83, v77);
    *(void *)(v0 + 80) = v73;
    *(void *)(v0 + 88) = v48;
    *(void *)(v0 + 96) = v75;
    *(void *)(v0 + 104) = v49;
    goto LABEL_13;
  }
  uint64_t v67 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v67;
  *uint64_t v67 = v0;
  uint64_t v68 = sub_1004C3018;
LABEL_23:
  v67[1] = v68;
  uint64_t v69 = *(void *)(v0 + 216);
  uint64_t v70 = *(void *)(v0 + 192);
  return sub_1004C3738(v70, v69);
}

uint64_t sub_1004C3018()
{
  *(void *)(*(void *)v1 + 528) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004C3460;
  }
  else {
    uint64_t v2 = sub_1004C312C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C312C()
{
  uint64_t v2 = v0[55];
  uint64_t v1 = v0[56];
  uint64_t v3 = v0[54];
  (*(void (**)(void, void))(v0[52] + 8))(v0[53], v0[51]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004C323C()
{
  *(void *)(*(void *)v1 + 552) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004C35FC;
  }
  else {
    uint64_t v2 = sub_1004C3350;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C3350()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = v0[40];
  (*(void (**)(void, void))(v0[38] + 8))(v0[39], v0[37]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004C3460()
{
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = type metadata accessor for PartialIteration();
  swift_getTupleTypeMetadata2();
  sub_1004BFB80(v1);
  swift_willThrow();
  uint64_t v2 = v0[55];
  uint64_t v3 = v0[56];
  uint64_t v4 = v0[54];
  (*(void (**)(void, void))(v0[52] + 8))(v0[53], v0[51]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1004C35FC()
{
  sub_1004BFB80(v0[67]);
  swift_willThrow();
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[40];
  (*(void (**)(void, void))(v0[38] + 8))(v0[39], v0[37]);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004C3738(uint64_t a1, void *a2)
{
  v3[31] = a2;
  v3[32] = v2;
  v3[30] = a1;
  uint64_t v5 = a2[5];
  v3[33] = v5;
  uint64_t v6 = a2[3];
  v3[34] = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[35] = AssociatedTypeWitness;
  uint64_t v8 = type metadata accessor for Optional();
  v3[36] = v8;
  v3[37] = *(void *)(v8 - 8);
  v3[38] = swift_task_alloc();
  v3[39] = *(void *)(AssociatedTypeWitness - 8);
  v3[40] = swift_task_alloc();
  uint64_t v9 = a2[4];
  v3[41] = v9;
  uint64_t v10 = a2[2];
  v3[42] = v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v3[43] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  v3[44] = v12;
  v3[45] = *(void *)(v12 - 8);
  v3[46] = swift_task_alloc();
  v3[47] = *(void *)(v11 - 8);
  v3[48] = swift_task_alloc();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  v3[49] = v13;
  v3[50] = *(void *)(v13 - 8);
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  v3[54] = v14;
  v3[55] = *(void *)(v14 - 8);
  v3[56] = swift_task_alloc();
  v3[57] = swift_task_alloc();
  v3[58] = swift_task_alloc();
  v3[2] = v10;
  v3[3] = v6;
  v3[4] = v9;
  v3[5] = v5;
  type metadata accessor for Merge2StateMachine.Partial();
  v3[59] = swift_getAssociatedConformanceWitness();
  v3[60] = type metadata accessor for PartialIteration();
  v3[61] = swift_getAssociatedConformanceWitness();
  v3[62] = type metadata accessor for PartialIteration();
  v3[63] = swift_getTupleTypeMetadata2();
  v3[64] = swift_task_alloc();
  v3[65] = swift_task_alloc();
  return _swift_task_switch(sub_1004C3B9C, 0, 0);
}

uint64_t sub_1004C3B9C()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  char v3 = static Task<>.isCancelled.getter();
  uint64_t v4 = *(int *)(v1 + 56);
  *(_DWORD *)(v0 + 768) = v4;
  uint64_t v5 = (uint64_t *)(v2 + v4);
  if (v3)
  {
    uint64_t v6 = *(void *)(v0 + 496);
    uint64_t v8 = *(void *)(v0 + 328);
    uint64_t v7 = *(void *)(v0 + 336);
    uint64_t v10 = *(void *)(v0 + 264);
    uint64_t v9 = *(void *)(v0 + 272);
    uint64_t v11 = *(void *)(v0 + 240);
    sub_1004BFB80(*(void *)(v0 + 480));
    sub_1004BFB80(v6);
    *(void *)(v0 + 208) = v7;
    *(void *)(v0 + 216) = v9;
    *(void *)(v0 + 224) = v8;
    *(void *)(v0 + 232) = v10;
    uint64_t v12 = type metadata accessor for Merge2StateMachine.Either();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  uint64_t v15 = *(void *)(v0 + 520);
  uint64_t v17 = *(void *)(v0 + 504);
  uint64_t v16 = *(void *)(v0 + 512);
  uint64_t v18 = *(void *)(v0 + 496);
  uint64_t v19 = *(void *)(v0 + 480);
  uint64_t v20 = *(int *)(v17 + 48);
  *(_DWORD *)(v0 + 772) = v20;
  uint64_t v21 = v15 + v20;
  uint64_t v22 = (uint64_t *)((char *)v5 + v20);
  uint64_t v23 = *(void *)(v19 - 8);
  uint64_t v24 = v23;
  *(void *)(v0 + 528) = v23;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v23 + 16))(v15, v5, v19);
  uint64_t v25 = *(void *)(v18 - 8);
  *(void *)(v0 + 536) = v25;
  long long v98 = v22;
  uint64_t v26 = v22;
  uint64_t v27 = v25;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v25 + 16))(v21, v26, v18);
  uint64_t v28 = (uint64_t *)(v16 + *(int *)(v17 + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v16, v15, v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 32))(v28, v21, v18);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v30 = *(uint64_t **)(v0 + 512);
      uint64_t v31 = *(void *)(v0 + 496);
      uint64_t v32 = *v30;
      *(void *)(v0 + 640) = *v30;
      int v33 = swift_getEnumCaseMultiPayload();
      if (v33)
      {
        if (v33 != 1)
        {
          swift_retain();
          uint64_t v60 = (void *)swift_task_alloc();
          *(void *)(v0 + 696) = v60;
          *uint64_t v60 = v0;
          v60[1] = sub_1004C5404;
          uint64_t v49 = *(void **)(v0 + 248);
          uint64_t v50 = *(void *)(v0 + 240);
          uint64_t v51 = v32;
          uint64_t v55 = 0;
          goto LABEL_22;
        }
        uint64_t v34 = *v28;
        *(void *)(v0 + 672) = v34;
        swift_retain();
        swift_retain();
        uint64_t v35 = (void *)swift_task_alloc();
        *(void *)(v0 + 680) = v35;
        void *v35 = v0;
        uint64_t v36 = sub_1004C51C4;
      }
      else
      {
        uint64_t v56 = *(void *)(v0 + 416);
        uint64_t v57 = *(void *)(v0 + 336);
        uint64_t v93 = *(void *)(v0 + 328);
        uint64_t v96 = *(void *)(v0 + 480);
        uint64_t v58 = *(void *)(v0 + 272);
        uint64_t v90 = *(void *)(v0 + 264);
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)(v0 + 400) + 32))(v56, v28, *(void *)(v0 + 392));
        uint64_t v34 = sub_1004CFA5C(v56, v57, v58, v93, v90);
        *(void *)(v0 + 648) = v34;
        (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(v5, v96);
        uint64_t *v5 = v32;
        swift_storeEnumTagMultiPayload();
        uint64_t v59 = *(void (**)(uint64_t *, uint64_t))(v27 + 8);
        swift_retain();
        v59(v98, v31);
        *long long v98 = v34;
        swift_storeEnumTagMultiPayload();
        swift_retain();
        swift_retain();
        uint64_t v35 = (void *)swift_task_alloc();
        *(void *)(v0 + 656) = v35;
        void *v35 = v0;
        uint64_t v36 = sub_1004C4F58;
      }
      v35[1] = v36;
      uint64_t v49 = *(void **)(v0 + 248);
      uint64_t v50 = *(void *)(v0 + 240);
      uint64_t v51 = v32;
LABEL_19:
      uint64_t v55 = v34;
LABEL_22:
      return sub_1004C1D70(v50, v51, v55, v49);
    }
    int v52 = swift_getEnumCaseMultiPayload();
    if (v52)
    {
      if (v52 != 1)
      {
        uint64_t v83 = *(void *)(v0 + 328);
        uint64_t v85 = *(void *)(v0 + 264);
        uint64_t v84 = *(void *)(v0 + 272);
        uint64_t v86 = *(void *)(v0 + 240);
        *(void *)(v0 + 48) = *(void *)(v0 + 336);
        *(void *)(v0 + 56) = v84;
        *(void *)(v0 + 64) = v83;
        *(void *)(v0 + 72) = v85;
        uint64_t v87 = type metadata accessor for Merge2StateMachine.Either();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v86, 1, 1, v87);
        goto LABEL_3;
      }
      uint64_t v53 = *v28;
      *(void *)(v0 + 744) = *v28;
      swift_retain();
      uint64_t v54 = (void *)swift_task_alloc();
      *(void *)(v0 + 752) = v54;
      *uint64_t v54 = v0;
      v54[1] = sub_1004C5B08;
      uint64_t v49 = *(void **)(v0 + 248);
      uint64_t v50 = *(void *)(v0 + 240);
      uint64_t v51 = 0;
      uint64_t v55 = v53;
      goto LABEL_22;
    }
    uint64_t v79 = *(void *)(v0 + 400);
    uint64_t v78 = *(void *)(v0 + 408);
    uint64_t v80 = *(void *)(v0 + 392);
    uint64_t v81 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v79 + 32);
    *(void *)(v0 + 712) = v81;
    *(void *)(v0 + 720) = (v79 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v81(v78, v28, v80);
    uint64_t v82 = (void *)swift_task_alloc();
    *(void *)(v0 + 728) = v82;
    *uint64_t v82 = v0;
    v82[1] = sub_1004C562C;
    uint64_t v75 = *(void *)(v0 + 488);
    uint64_t v76 = *(void *)(v0 + 392);
    uint64_t v77 = *(void *)(v0 + 304);
  }
  else
  {
    uint64_t v37 = *(void *)(v0 + 496);
    int v38 = swift_getEnumCaseMultiPayload();
    if (!v38)
    {
      uint64_t v61 = *(void *)(v0 + 464);
      uint64_t v62 = *(void *)(v0 + 424);
      uint64_t v63 = *(void *)(v0 + 400);
      uint64_t v88 = *(void *)(v0 + 392);
      uint64_t v94 = *(void *)(v0 + 328);
      uint64_t v97 = *(void *)(v0 + 480);
      uint64_t v64 = *(void *)(v0 + 272);
      uint64_t v89 = *(void *)(v0 + 264);
      uint64_t v91 = *(void *)(v0 + 336);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 440) + 32))(v61, *(void *)(v0 + 512), *(void *)(v0 + 432));
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v63 + 32))(v62, v28, v88);
      uint64_t v65 = sub_1004CF844(v61, v91, v64, v94, v89);
      *(void *)(v0 + 544) = v65;
      uint64_t v66 = sub_1004CFA5C(v62, v91, v64, v94, v89);
      *(void *)(v0 + 552) = v66;
      (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(v5, v97);
      uint64_t *v5 = v65;
      swift_storeEnumTagMultiPayload();
      uint64_t v67 = *(void (**)(uint64_t *, uint64_t))(v27 + 8);
      swift_retain();
      v67(v98, v37);
      *long long v98 = v66;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_retain();
      uint64_t v68 = (void *)swift_task_alloc();
      *(void *)(v0 + 560) = v68;
      *uint64_t v68 = v0;
      v68[1] = sub_1004C4584;
      uint64_t v49 = *(void **)(v0 + 248);
      uint64_t v50 = *(void *)(v0 + 240);
      uint64_t v51 = v65;
      uint64_t v55 = v66;
      goto LABEL_22;
    }
    if (v38 == 1)
    {
      uint64_t v39 = *(void *)(v0 + 512);
      uint64_t v40 = *(void *)(v0 + 456);
      uint64_t v41 = *(void *)(v0 + 432);
      uint64_t v42 = *(void *)(v0 + 440);
      uint64_t v43 = *(void *)(v0 + 336);
      uint64_t v92 = *(void *)(v0 + 328);
      uint64_t v95 = *(void *)(v0 + 480);
      uint64_t v44 = *(void *)(v0 + 264);
      uint64_t v45 = *(void *)(v0 + 272);
      uint64_t v34 = *v28;
      *(void *)(v0 + 576) = v34;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v40, v39, v41);
      uint64_t v46 = sub_1004CF844(v40, v43, v45, v92, v44);
      *(void *)(v0 + 584) = v46;
      (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(v5, v95);
      uint64_t *v5 = v46;
      swift_storeEnumTagMultiPayload();
      uint64_t v47 = *(void (**)(uint64_t *, uint64_t))(v27 + 8);
      swift_retain();
      v47(v98, v37);
      *long long v98 = v34;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_retain();
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 592) = v48;
      *uint64_t v48 = v0;
      v48[1] = sub_1004C4810;
      uint64_t v49 = *(void **)(v0 + 248);
      uint64_t v50 = *(void *)(v0 + 240);
      uint64_t v51 = v46;
      goto LABEL_19;
    }
    uint64_t v69 = *(void *)(v0 + 512);
    uint64_t v71 = *(void *)(v0 + 440);
    uint64_t v70 = *(void *)(v0 + 448);
    uint64_t v72 = *(void *)(v0 + 432);
    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32);
    *(void *)(v0 + 608) = v73;
    *(void *)(v0 + 616) = (v71 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v73(v70, v69, v72);
    uint64_t v74 = (void *)swift_task_alloc();
    *(void *)(v0 + 624) = v74;
    *uint64_t v74 = v0;
    v74[1] = sub_1004C4A7C;
    uint64_t v75 = *(void *)(v0 + 472);
    uint64_t v76 = *(void *)(v0 + 432);
    uint64_t v77 = *(void *)(v0 + 368);
  }
  return dispatch thunk of AsyncIteratorProtocol.next()(v77, v76, v75);
}

uint64_t sub_1004C4584()
{
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1004C5D30;
  }
  else {
    uint64_t v2 = sub_1004C46B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C46B8()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[55];
  uint64_t v4 = v0[53];
  uint64_t v5 = v0[49];
  uint64_t v6 = v0[50];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1004C4810()
{
  *(void *)(*(void *)v1 + 600) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1004C5E90;
  }
  else {
    uint64_t v2 = sub_1004C4944;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C4944()
{
  uint64_t v1 = v0[57];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[55];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004C4A7C()
{
  *(void *)(*(void *)v1 + 632) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004C5FD0;
  }
  else {
    uint64_t v2 = sub_1004C4B90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C4B90()
{
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 344);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 536);
    uint64_t v5 = *(void *)(v0 + 528);
    uint64_t v6 = *(void *)(v0 + 496);
    uint64_t v7 = *(void *)(v0 + 480);
    uint64_t v9 = *(void *)(v0 + 352);
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v31 = *(void *)(v0 + 336);
    uint64_t v33 = *(void *)(v0 + 328);
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 264);
    uint64_t v35 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 256) + *(int *)(v0 + 768);
    uint64_t v11 = v10 + *(int *)(v0 + 772);
    (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v7);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v6);
    swift_storeEnumTagMultiPayload();
    *(void *)(v0 + 144) = v31;
    *(void *)(v0 + 152) = v27;
    *(void *)(v0 + 160) = v33;
    *(void *)(v0 + 168) = v29;
    uint64_t v12 = type metadata accessor for Merge2StateMachine.Either();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v35, 1, 1, v12);
  }
  else
  {
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
    uint64_t v13 = *(void *)(v0 + 536);
    uint64_t v14 = *(void *)(v0 + 528);
    uint64_t v15 = *(void *)(v0 + 480);
    uint64_t v23 = *(void *)(v0 + 448);
    uint64_t v22 = *(void *)(v0 + 432);
    uint64_t v25 = *(void *)(v0 + 384);
    uint64_t v26 = *(void *)(v0 + 496);
    uint64_t v34 = *(void *)(v0 + 336);
    uint64_t v36 = *(void *)(v0 + 328);
    uint64_t v30 = *(void *)(v0 + 272);
    uint64_t v32 = *(void *)(v0 + 264);
    uint64_t v28 = *(void *)(v0 + 240);
    uint64_t v16 = *(void *)(v0 + 256) + *(int *)(v0 + 768);
    uint64_t v17 = v16 + *(int *)(v0 + 772);
    uint64_t v18 = *(void (**)(void))(v2 + 32);
    v18();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
    v24(v16, v23, v22);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v26);
    swift_storeEnumTagMultiPayload();
    ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v28, v25, v3);
    *(void *)(v0 + 176) = v34;
    *(void *)(v0 + 184) = v30;
    *(void *)(v0 + 192) = v36;
    *(void *)(v0 + 200) = v32;
    uint64_t v19 = type metadata accessor for Merge2StateMachine.Either();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v28, 0, 1, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_1004C4F58()
{
  *(void *)(*(void *)v1 + 664) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1004C6178;
  }
  else {
    uint64_t v2 = sub_1004C508C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C508C()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[50];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004C51C4()
{
  *(void *)(*(void *)v1 + 688) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004C62B8;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_1004C52EC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C52EC()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004C5404()
{
  *(void *)(*(void *)v1 + 704) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004C63E0;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1004C5520;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C5520()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004C562C()
{
  *(void *)(*(void *)v1 + 736) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004C64F8;
  }
  else {
    uint64_t v2 = sub_1004C5740;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C5740()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 280);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 536);
    uint64_t v5 = *(void *)(v0 + 528);
    uint64_t v6 = *(void *)(v0 + 496);
    uint64_t v7 = *(void *)(v0 + 480);
    uint64_t v31 = *(void *)(v0 + 336);
    uint64_t v33 = *(void *)(v0 + 328);
    uint64_t v9 = *(void *)(v0 + 288);
    uint64_t v8 = *(void *)(v0 + 296);
    uint64_t v28 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 264);
    uint64_t v35 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 256) + *(int *)(v0 + 768);
    uint64_t v11 = v10 + *(int *)(v0 + 772);
    (*(void (**)(void, void))(*(void *)(v0 + 400) + 8))(*(void *)(v0 + 408), *(void *)(v0 + 392));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v7);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v6);
    swift_storeEnumTagMultiPayload();
    *(void *)(v0 + 80) = v31;
    *(void *)(v0 + 88) = v28;
    *(void *)(v0 + 96) = v33;
    *(void *)(v0 + 104) = v29;
    uint64_t v12 = type metadata accessor for Merge2StateMachine.Either();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v35, 1, 1, v12);
  }
  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 712);
    uint64_t v13 = *(void *)(v0 + 536);
    uint64_t v14 = *(void *)(v0 + 528);
    uint64_t v15 = *(void *)(v0 + 480);
    uint64_t v25 = *(void *)(v0 + 408);
    uint64_t v24 = *(void *)(v0 + 392);
    uint64_t v34 = *(void *)(v0 + 336);
    uint64_t v36 = *(void *)(v0 + 328);
    uint64_t v22 = *(void *)(v0 + 496);
    uint64_t v23 = *(void *)(v0 + 320);
    uint64_t v30 = *(void *)(v0 + 272);
    uint64_t v32 = *(void *)(v0 + 264);
    uint64_t v26 = *(void *)(v0 + 240);
    uint64_t v16 = *(void *)(v0 + 256) + *(int *)(v0 + 768);
    uint64_t v17 = v16 + *(int *)(v0 + 772);
    uint64_t v18 = *(void (**)(void))(v2 + 32);
    v18();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v22);
    v27(v17, v25, v24);
    swift_storeEnumTagMultiPayload();
    ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v26, v23, v3);
    *(void *)(v0 + 112) = v34;
    *(void *)(v0 + 120) = v30;
    *(void *)(v0 + 128) = v36;
    *(void *)(v0 + 136) = v32;
    uint64_t v19 = type metadata accessor for Merge2StateMachine.Either();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v26, 0, 1, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_1004C5B08()
{
  *(void *)(*(void *)v1 + 760) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004C66A0;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1004C5C24;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C5C24()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004C5D30()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[55];
  uint64_t v4 = v0[53];
  uint64_t v5 = v0[49];
  uint64_t v6 = v0[50];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1004C5E90()
{
  uint64_t v1 = v0[57];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[55];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004C5FD0()
{
  uint64_t v1 = *(void *)(v0 + 536);
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v4 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 448);
  uint64_t v5 = *(void *)(v0 + 432);
  uint64_t v6 = *(void *)(v0 + 256) + *(int *)(v0 + 768) + *(int *)(v0 + 772);
  (*(void (**)(void, void))(*(void *)(v0 + 528) + 8))(*(void *)(v0 + 256) + *(int *)(v0 + 768), *(void *)(v0 + 480));
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v6, v2);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1004C6178()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[50];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004C62B8()
{
  swift_release_n();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004C63E0()
{
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004C64F8()
{
  uint64_t v1 = *(void *)(v0 + 536);
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 256) + *(int *)(v0 + 768) + *(int *)(v0 + 772);
  (*(void (**)(void, void))(*(void *)(v0 + 528) + 8))(*(void *)(v0 + 256) + *(int *)(v0 + 768), *(void *)(v0 + 480));
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v6, v2);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1004C66A0()
{
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004C67B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a1;
  v8[11] = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  unsigned char v8[16] = v9;
  v8[17] = *(void *)(v9 - 8);
  v8[18] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[19] = AssociatedTypeWitness;
  v8[20] = *(void *)(AssociatedTypeWitness - 8);
  v8[21] = swift_task_alloc();
  return _swift_task_switch(sub_1004C6928, 0, 0);
}

uint64_t sub_1004C6928()
{
  (*(void (**)(void, void, void))(v0[20] + 16))(v0[21], v0[11], v0[19]);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[22] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1004C6A18;
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  return dispatch thunk of AsyncIteratorProtocol.next()(v3, v4, AssociatedConformanceWitness);
}

uint64_t sub_1004C6A18()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004C6C90;
  }
  else {
    uint64_t v2 = sub_1004C6B2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C6B2C()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 80);
  sub_10001DFF4(&qword_1006A3D90);
  type metadata accessor for Result();
  uint64_t v8 = v7 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  long long v11 = *(_OWORD *)(v0 + 112);
  long long v12 = *(_OWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v4, v5);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v8, v1, v3);
  *(_OWORD *)(v0 + 48) = v12;
  *(_OWORD *)(v0 + 64) = v11;
  type metadata accessor for Merge2StateMachine.Partial();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1004C6C90()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void **)(v0 + 80);
  sub_10001DFF4(&qword_1006A3D90);
  type metadata accessor for Result();
  uint64_t v6 = (char *)v5 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  long long v9 = *(_OWORD *)(v0 + 112);
  long long v10 = *(_OWORD *)(v0 + 96);
  void *v5 = v1;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v6, v2, v4);
  *(_OWORD *)(v0 + 16) = v10;
  *(_OWORD *)(v0 + 32) = v9;
  type metadata accessor for Merge2StateMachine.Partial();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1004C6DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a1;
  v8[11] = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  unsigned char v8[16] = v9;
  v8[17] = *(void *)(v9 - 8);
  v8[18] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[19] = AssociatedTypeWitness;
  v8[20] = *(void *)(AssociatedTypeWitness - 8);
  v8[21] = swift_task_alloc();
  return _swift_task_switch(sub_1004C6F48, 0, 0);
}

uint64_t sub_1004C6F48()
{
  (*(void (**)(void, void, void))(v0[20] + 16))(v0[21], v0[11], v0[19]);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[22] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1004C703C;
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  return dispatch thunk of AsyncIteratorProtocol.next()(v3, v4, AssociatedConformanceWitness);
}

uint64_t sub_1004C703C()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004C72B4;
  }
  else {
    uint64_t v2 = sub_1004C7150;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C7150()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 80);
  sub_10001DFF4(&qword_1006A3D90);
  type metadata accessor for Result();
  uint64_t v8 = v7 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  long long v11 = *(_OWORD *)(v0 + 112);
  long long v12 = *(_OWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v4, v5);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v8, v1, v3);
  *(_OWORD *)(v0 + 48) = v12;
  *(_OWORD *)(v0 + 64) = v11;
  type metadata accessor for Merge2StateMachine.Partial();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1004C72B4()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void **)(v0 + 80);
  sub_10001DFF4(&qword_1006A3D90);
  type metadata accessor for Result();
  uint64_t v6 = (char *)v5 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  long long v9 = *(_OWORD *)(v0 + 112);
  long long v10 = *(_OWORD *)(v0 + 96);
  void *v5 = v1;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v6, v2, v4);
  *(_OWORD *)(v0 + 16) = v10;
  *(_OWORD *)(v0 + 32) = v9;
  type metadata accessor for Merge2StateMachine.Partial();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1004C73FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __chkstk_darwin(a1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a2, v4, AssociatedTypeWitness);
}

uint64_t AsyncMerge2Sequence.Iterator.next()(uint64_t a1, void *a2)
{
  v2[10] = a1;
  uint64_t v3 = a2[2];
  v2[11] = v3;
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  v2[12] = v5;
  uint64_t v6 = a2[5];
  v2[2] = v3;
  v2[3] = v4;
  v2[4] = v5;
  v2[5] = v6;
  v2[13] = type metadata accessor for Merge2StateMachine.Either();
  uint64_t v7 = type metadata accessor for Optional();
  v2[14] = v7;
  v2[15] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  v2[16] = v8;
  long long v9 = (void *)swift_task_alloc();
  v2[17] = v9;
  v2[6] = v3;
  v2[7] = v4;
  v2[8] = v5;
  v2[9] = v6;
  long long v10 = (void *)type metadata accessor for Merge2StateMachine();
  *long long v9 = v2;
  v9[1] = sub_1004C7668;
  return sub_1004C3738(v8, v10);
}

uint64_t sub_1004C7668()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004C7900;
  }
  else {
    uint64_t v2 = sub_1004C777C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C777C()
{
  uint64_t v2 = v0 + 13;
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[16];
  uint64_t v4 = *(void *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = v0[15];
    uint64_t v2 = v0 + 14;
    uint64_t v5 = 1;
  }
  else
  {
    sub_1004C73FC(v1, v0[10]);
    uint64_t v5 = 0;
    uint64_t v3 = v0[16];
  }
  uint64_t v6 = v0[10];
  (*(void (**)(uint64_t, void))(v4 + 8))(v3, *v2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v6, v5, 1, AssociatedTypeWitness);
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1004C7900()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for Merge2StateMachine.Either()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Merge2StateMachine()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1004C7994(uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100161724;
  return AsyncMerge2Sequence.Iterator.next()(a1, a2);
}

uint64_t sub_1004C7A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _OWORD v6[3] = AssociatedTypeWitness;
  v6[4] = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = swift_task_alloc();
  v6[5] = v13;
  uint64_t v14 = (void *)swift_task_alloc();
  void v6[6] = v14;
  *uint64_t v14 = v6;
  v14[1] = sub_1004C7B90;
  return __sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, a6, v13);
}

uint64_t sub_1004C7B90()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0) {
    (*(void (**)(void, void, void))(v2[4] + 32))(v2[2], v2[5], v2[3]);
  }
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v3[1];
  return v4();
}

uint64_t AsyncMerge2Sequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v23 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v22 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(void *)(v6 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = __chkstk_darwin(AssociatedTypeWitness - 8);
  uint64_t v12 = (char *)v21 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v10);
  uint64_t v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v3, v13);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v8, v3 + *(int *)(a1 + 52), v5);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  return sub_1004C1B7C((uint64_t)v19, 0, (uint64_t)v12, 0, v23);
}

uint64_t sub_1004C7F3C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1004C7FE0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1004C7FFC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  AsyncMerge2Sequence.makeAsyncIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t sub_1004C805C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1004C812C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t sub_1004C8288(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t sub_1004C832C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1004C83D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1004C847C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1004C8524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1004C85CC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_1004C87C4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1004C8A90);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AsyncMerge2Sequence()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1004C8AD0()
{
  uint64_t result = type metadata accessor for Merge2StateMachine();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AsyncMerge2Sequence.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1004C8BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1004C8BA8()
{
  uint64_t v4 = &unk_10053B868;
  uint64_t v5 = &unk_10053B868;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Merge2StateMachine.Partial();
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for PartialIteration();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t result = type metadata accessor for PartialIteration();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v3;
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004C8D6C(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 & 0xF8 | 7;
  int v12 = v10 | v7;
  uint64_t v13 = (v10 | v7) & 0xF8 | 7u;
  uint64_t v14 = ~v13;
  if (*(void *)(v5 + 64) <= 8uLL) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = *(void *)(v5 + 64);
  }
  size_t v16 = v15 + 1;
  uint64_t v17 = v15 + 1 + v11;
  if (*(void *)(*(void *)(v8 - 8) + 64) <= 8uLL) {
    uint64_t v18 = 8;
  }
  else {
    uint64_t v18 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  if ((v12 & 0x1000F8) != 0 || v18 + 1 + (v17 & ~v11) + ((v13 + 2) & (unint64_t)~v13) > 0x18)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    a1 = v20 + ((v13 + 16) & v14);
LABEL_45:
    swift_retain();
    return a1;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
  int v21 = (void *)((a1 + 9) & v14);
  unint64_t v22 = (unsigned __int8 *)(((unint64_t)a2 + 9) & v14);
  unsigned int v23 = v22[v15];
  unsigned int v24 = v23 - 2;
  if (v23 >= 2)
  {
    if (v15 <= 3) {
      uint64_t v25 = v15;
    }
    else {
      uint64_t v25 = 4;
    }
    switch(v25)
    {
      case 1:
        int v26 = *v22;
        goto LABEL_22;
      case 2:
        int v26 = *(unsigned __int16 *)v22;
        goto LABEL_22;
      case 3:
        int v26 = *(unsigned __int16 *)v22 | (v22[2] << 16);
        goto LABEL_22;
      case 4:
        int v26 = *(_DWORD *)v22;
LABEL_22:
        int v27 = (v26 | (v24 << (8 * v15))) + 2;
        unsigned int v23 = v26 + 2;
        if (v15 < 4) {
          unsigned int v23 = v27;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v28 = ~v11;
  if (v23 == 1)
  {
    *int v21 = *(void *)v22;
    *((unsigned char *)v21 + v15) = 1;
    uint64_t v32 = v9;
    swift_retain();
  }
  else
  {
    if (!v23)
    {
      uint64_t v29 = AssociatedTypeWitness;
      uint64_t v30 = v9;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v21, v22, v29);
      uint64_t v31 = v30;
      *((unsigned char *)v21 + v15) = 0;
      goto LABEL_30;
    }
    uint64_t v32 = v9;
    memcpy(v21, v22, v16);
  }
  uint64_t v31 = v32;
LABEL_30:
  uint64_t v33 = (void *)(((unint64_t)v21 + v17) & v28);
  uint64_t v34 = (unsigned __int8 *)((unint64_t)&v22[v17] & v28);
  unsigned int v35 = v34[v18];
  unsigned int v36 = v35 - 2;
  if (v35 >= 2)
  {
    if (v18 <= 3) {
      uint64_t v37 = v18;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *v34;
        goto LABEL_39;
      case 2:
        int v38 = *(unsigned __int16 *)v34;
        goto LABEL_39;
      case 3:
        int v38 = *(unsigned __int16 *)v34 | (*(unsigned __int8 *)(((unint64_t)&v22[v17] & v28) + 2) << 16);
        goto LABEL_39;
      case 4:
        int v38 = *(_DWORD *)v34;
LABEL_39:
        int v39 = (v38 | (v36 << (8 * v18))) + 2;
        unsigned int v35 = v38 + 2;
        if (v18 < 4) {
          unsigned int v35 = v39;
        }
        break;
      default:
        break;
    }
  }
  if (v35 == 1)
  {
    *uint64_t v33 = *(void *)v34;
    *((unsigned char *)v33 + v18) = 1;
    goto LABEL_45;
  }
  if (v35)
  {
    memcpy((void *)(((unint64_t)v21 + v17) & v28), v34, v18 + 1);
  }
  else
  {
    (*(void (**)(unint64_t))(v31 + 16))(((unint64_t)v21 + v17) & v28);
    *((unsigned char *)v33 + v18) = 0;
  }
  return a1;
}

unsigned __int8 *sub_1004C9114(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = *(_DWORD *)(v3 + 80);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned __int8 v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = (v7 | v4) & 0xF8 | 7u;
  uint64_t v9 = v7 & 0xF8;
  uint64_t v10 = (a1 + v8 + 2) & ~v8;
  if (*(void *)(v3 + 64) <= 8uLL) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = *(void *)(v3 + 64);
  }
  unsigned int v12 = *(unsigned __int8 *)(v10 + v11);
  unsigned int v13 = v12 - 2;
  if (v12 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *(unsigned __int8 *)v10;
        goto LABEL_13;
      case 2:
        int v15 = *(unsigned __int16 *)v10;
        goto LABEL_13;
      case 3:
        int v15 = *(unsigned __int16 *)v10 | (*(unsigned __int8 *)(v10 + 2) << 16);
        goto LABEL_13;
      case 4:
        int v15 = *(_DWORD *)v10;
LABEL_13:
        int v16 = (v15 | (v13 << (8 * v11))) + 2;
        unsigned int v12 = v15 + 2;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v17 = v9 | 7;
  if (v12 == 1)
  {
    uint64_t v26 = *(void *)(v5 - 8);
    swift_release();
  }
  else
  {
    if (v12) {
      goto LABEL_20;
    }
    uint64_t v26 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v10, AssociatedTypeWitness);
  }
  uint64_t v6 = v26;
LABEL_20:
  uint64_t result = (unsigned __int8 *)(((v10 | 1) + v11 + v17) & ~v17);
  unint64_t v19 = *(void *)(v6 + 64);
  if (v19 <= 8) {
    unint64_t v19 = 8;
  }
  unsigned int v20 = result[v19];
  unsigned int v21 = v20 - 2;
  if (v20 >= 2)
  {
    if (v19 <= 3) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *result;
        goto LABEL_31;
      case 2:
        int v23 = *(unsigned __int16 *)result;
        goto LABEL_31;
      case 3:
        int v23 = *(unsigned __int16 *)result | (*(unsigned __int8 *)((((v10 | 1) + v11 + v17) & ~v17) + 2) << 16);
        goto LABEL_31;
      case 4:
        int v23 = *(_DWORD *)result;
LABEL_31:
        int v24 = (v23 | (v21 << (8 * v19))) + 2;
        unsigned int v20 = v23 + 2;
        if (v19 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  if (v20 == 1)
  {
    return (unsigned __int8 *)swift_release();
  }
  else if (!v20)
  {
    uint64_t v25 = *(uint64_t (**)(void))(v6 + 8);
    return (unsigned __int8 *)v25();
  }
  return result;
}

unsigned char *sub_1004C9440(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned __int8 v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9 & 0xF8;
  uint64_t v11 = (v9 | v7) & 0xF8 | 7u;
  unsigned int v12 = (void *)((unint64_t)&a1[v11 + 2] & ~v11);
  unsigned int v13 = (unsigned __int8 *)((unint64_t)&a2[v11 + 2] & ~v11);
  if (*(void *)(v5 + 64) <= 8uLL) {
    uint64_t v14 = 8;
  }
  else {
    uint64_t v14 = *(void *)(v5 + 64);
  }
  unsigned int v15 = v13[v14];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v13;
        goto LABEL_13;
      case 2:
        int v18 = *(unsigned __int16 *)v13;
        goto LABEL_13;
      case 3:
        int v18 = *(unsigned __int16 *)v13 | (v13[2] << 16);
        goto LABEL_13;
      case 4:
        int v18 = *(_DWORD *)v13;
LABEL_13:
        int v19 = (v18 | (v16 << (8 * v14))) + 2;
        unsigned int v15 = v18 + 2;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v20 = v10 | 7;
  if (v15 == 1)
  {
    void *v12 = *(void *)v13;
    *((unsigned char *)v12 + v14) = 1;
    swift_retain();
  }
  else if (v15)
  {
    memcpy(v12, v13, v14 + 1);
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v12, v13, AssociatedTypeWitness);
    *((unsigned char *)v12 + v14) = 0;
  }
  uint64_t v21 = v14 + 1 + v20;
  uint64_t v22 = (void *)(((unint64_t)v12 + v21) & ~v20);
  int v23 = (unsigned __int8 *)((unint64_t)&v13[v21] & ~v20);
  if (*(void *)(v8 + 64) <= 8uLL) {
    uint64_t v24 = 8;
  }
  else {
    uint64_t v24 = *(void *)(v8 + 64);
  }
  unsigned int v25 = v23[v24];
  unsigned int v26 = v25 - 2;
  if (v25 >= 2)
  {
    if (v24 <= 3) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = 4;
    }
    switch(v27)
    {
      case 1:
        int v28 = *v23;
        goto LABEL_32;
      case 2:
        int v28 = *(unsigned __int16 *)v23;
        goto LABEL_32;
      case 3:
        int v28 = *(unsigned __int16 *)v23 | (v23[2] << 16);
        goto LABEL_32;
      case 4:
        int v28 = *(_DWORD *)v23;
LABEL_32:
        int v29 = (v28 | (v26 << (8 * v24))) + 2;
        unsigned int v25 = v28 + 2;
        if (v24 < 4) {
          unsigned int v25 = v29;
        }
        break;
      default:
        break;
    }
  }
  if (v25 == 1)
  {
    *uint64_t v22 = *(void *)v23;
    *((unsigned char *)v22 + v24) = 1;
    swift_retain();
  }
  else if (v25)
  {
    memcpy(v22, v23, v24 + 1);
  }
  else
  {
    (*(void (**)(void *))(v8 + 16))(v22);
    *((unsigned char *)v22 + v24) = 0;
  }
  return a1;
}

unsigned char *sub_1004C9778(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v5;
  unsigned __int8 v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = v11 & 0xF8 | 7;
  uint64_t v13 = (v11 | v7) & 0xF8 | 7u;
  uint64_t v14 = (unsigned __int8 *)((unint64_t)&a1[v13 + 2] & ~v13);
  unsigned int v15 = (unsigned __int8 *)((unint64_t)&a2[v13 + 2] & ~v13);
  if (*(void *)(v10 + 64) <= 8uLL) {
    uint64_t v16 = 8;
  }
  else {
    uint64_t v16 = *(void *)(v10 + 64);
  }
  if (v14 != v15)
  {
    unsigned int v17 = v14[v16];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v16 <= 3) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *v14;
          goto LABEL_14;
        case 2:
          int v20 = *(unsigned __int16 *)v14;
          goto LABEL_14;
        case 3:
          int v20 = *(unsigned __int16 *)v14 | (v14[2] << 16);
          goto LABEL_14;
        case 4:
          int v20 = *(_DWORD *)v14;
LABEL_14:
          int v21 = (v20 | (v18 << (8 * v16))) + 2;
          unsigned int v17 = v20 + 2;
          if (v16 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17 == 1)
    {
      swift_release();
    }
    else if (!v17)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v14, AssociatedTypeWitness);
    }
    unsigned int v22 = v15[v16];
    unsigned int v23 = v22 - 2;
    if (v22 >= 2)
    {
      if (v16 <= 3) {
        uint64_t v24 = v16;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *v15;
          goto LABEL_29;
        case 2:
          int v25 = *(unsigned __int16 *)v15;
          goto LABEL_29;
        case 3:
          int v25 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_29;
        case 4:
          int v25 = *(_DWORD *)v15;
LABEL_29:
          int v26 = (v25 | (v23 << (8 * v16))) + 2;
          unsigned int v22 = v25 + 2;
          if (v16 < 4) {
            unsigned int v22 = v26;
          }
          break;
        default:
          break;
      }
    }
    if (v22 == 1)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      v14[v16] = 1;
      swift_retain();
    }
    else if (v22)
    {
      memcpy(v14, v15, v16 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(v14, v15, AssociatedTypeWitness);
      v14[v16] = 0;
    }
  }
  uint64_t v27 = (unsigned __int8 *)((unint64_t)&v14[v12 + 1 + v16] & ~v12);
  int v28 = (unsigned __int8 *)((unint64_t)&v15[v12 + 1 + v16] & ~v12);
  if (v27 != v28)
  {
    if (*(void *)(v9 + 64) <= 8uLL) {
      uint64_t v29 = 8;
    }
    else {
      uint64_t v29 = *(void *)(v9 + 64);
    }
    unsigned int v30 = v27[v29];
    unsigned int v31 = v30 - 2;
    if (v30 >= 2)
    {
      if (v29 <= 3) {
        uint64_t v32 = v29;
      }
      else {
        uint64_t v32 = 4;
      }
      switch(v32)
      {
        case 1:
          int v33 = *v27;
          goto LABEL_49;
        case 2:
          int v33 = *(unsigned __int16 *)v27;
          goto LABEL_49;
        case 3:
          int v33 = *(unsigned __int16 *)v27 | (v27[2] << 16);
          goto LABEL_49;
        case 4:
          int v33 = *(_DWORD *)v27;
LABEL_49:
          int v34 = (v33 | (v31 << (8 * v29))) + 2;
          unsigned int v30 = v33 + 2;
          if (v29 < 4) {
            unsigned int v30 = v34;
          }
          break;
        default:
          break;
      }
    }
    if (v30 == 1)
    {
      swift_release();
    }
    else if (!v30)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(v27, v8);
    }
    unsigned int v35 = v28[v29];
    unsigned int v36 = v35 - 2;
    if (v35 >= 2)
    {
      if (v29 <= 3) {
        uint64_t v37 = v29;
      }
      else {
        uint64_t v37 = 4;
      }
      switch(v37)
      {
        case 1:
          int v38 = *v28;
          goto LABEL_64;
        case 2:
          int v38 = *(unsigned __int16 *)v28;
          goto LABEL_64;
        case 3:
          int v38 = *(unsigned __int16 *)v28 | (v28[2] << 16);
          goto LABEL_64;
        case 4:
          int v38 = *(_DWORD *)v28;
LABEL_64:
          int v39 = (v38 | (v36 << (8 * v29))) + 2;
          unsigned int v35 = v38 + 2;
          if (v29 < 4) {
            unsigned int v35 = v39;
          }
          break;
        default:
          break;
      }
    }
    if (v35 == 1)
    {
      *(void *)uint64_t v27 = *(void *)v28;
      v27[v29] = 1;
      swift_retain();
    }
    else if (v35)
    {
      memcpy(v27, v28, v29 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 16))(v27, v28, v8);
      v27[v29] = 0;
    }
  }
  return a1;
}

unsigned char *sub_1004C9C4C(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned __int8 v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9 & 0xF8;
  uint64_t v11 = (v9 | v7) & 0xF8 | 7u;
  uint64_t v12 = (void *)((unint64_t)&a1[v11 + 2] & ~v11);
  uint64_t v13 = (unsigned __int8 *)((unint64_t)&a2[v11 + 2] & ~v11);
  if (*(void *)(v5 + 64) <= 8uLL) {
    uint64_t v14 = 8;
  }
  else {
    uint64_t v14 = *(void *)(v5 + 64);
  }
  unsigned int v15 = v13[v14];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v13;
        goto LABEL_13;
      case 2:
        int v18 = *(unsigned __int16 *)v13;
        goto LABEL_13;
      case 3:
        int v18 = *(unsigned __int16 *)v13 | (v13[2] << 16);
        goto LABEL_13;
      case 4:
        int v18 = *(_DWORD *)v13;
LABEL_13:
        int v19 = (v18 | (v16 << (8 * v14))) + 2;
        unsigned int v15 = v18 + 2;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v20 = v10 | 7;
  if (v15 == 1)
  {
    void *v12 = *(void *)v13;
    *((unsigned char *)v12 + v14) = 1;
  }
  else if (v15)
  {
    memcpy(v12, v13, v14 + 1);
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(v12, v13, AssociatedTypeWitness);
    *((unsigned char *)v12 + v14) = 0;
  }
  uint64_t v21 = v14 + 1 + v20;
  unsigned int v22 = (void *)(((unint64_t)v12 + v21) & ~v20);
  unsigned int v23 = (unsigned __int8 *)((unint64_t)&v13[v21] & ~v20);
  if (*(void *)(v8 + 64) <= 8uLL) {
    uint64_t v24 = 8;
  }
  else {
    uint64_t v24 = *(void *)(v8 + 64);
  }
  unsigned int v25 = v23[v24];
  unsigned int v26 = v25 - 2;
  if (v25 >= 2)
  {
    if (v24 <= 3) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = 4;
    }
    switch(v27)
    {
      case 1:
        int v28 = *v23;
        goto LABEL_32;
      case 2:
        int v28 = *(unsigned __int16 *)v23;
        goto LABEL_32;
      case 3:
        int v28 = *(unsigned __int16 *)v23 | (v23[2] << 16);
        goto LABEL_32;
      case 4:
        int v28 = *(_DWORD *)v23;
LABEL_32:
        int v29 = (v28 | (v26 << (8 * v24))) + 2;
        unsigned int v25 = v28 + 2;
        if (v24 < 4) {
          unsigned int v25 = v29;
        }
        break;
      default:
        break;
    }
  }
  if (v25 == 1)
  {
    *unsigned int v22 = *(void *)v23;
    *((unsigned char *)v22 + v24) = 1;
  }
  else if (v25)
  {
    memcpy(v22, v23, v24 + 1);
  }
  else
  {
    (*(void (**)(void *))(v8 + 32))(v22);
    *((unsigned char *)v22 + v24) = 0;
  }
  return a1;
}

unsigned char *sub_1004C9F7C(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v5;
  unsigned __int8 v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = v11 & 0xF8 | 7;
  uint64_t v13 = (v11 | v7) & 0xF8 | 7u;
  uint64_t v14 = (unsigned __int8 *)((unint64_t)&a1[v13 + 2] & ~v13);
  unsigned int v15 = (unsigned __int8 *)((unint64_t)&a2[v13 + 2] & ~v13);
  if (*(void *)(v10 + 64) <= 8uLL) {
    uint64_t v16 = 8;
  }
  else {
    uint64_t v16 = *(void *)(v10 + 64);
  }
  if (v14 != v15)
  {
    unsigned int v17 = v14[v16];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v16 <= 3) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *v14;
          goto LABEL_14;
        case 2:
          int v20 = *(unsigned __int16 *)v14;
          goto LABEL_14;
        case 3:
          int v20 = *(unsigned __int16 *)v14 | (v14[2] << 16);
          goto LABEL_14;
        case 4:
          int v20 = *(_DWORD *)v14;
LABEL_14:
          int v21 = (v20 | (v18 << (8 * v16))) + 2;
          unsigned int v17 = v20 + 2;
          if (v16 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17 == 1)
    {
      swift_release();
    }
    else if (!v17)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v14, AssociatedTypeWitness);
    }
    unsigned int v22 = v15[v16];
    unsigned int v23 = v22 - 2;
    if (v22 >= 2)
    {
      if (v16 <= 3) {
        uint64_t v24 = v16;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *v15;
          goto LABEL_29;
        case 2:
          int v25 = *(unsigned __int16 *)v15;
          goto LABEL_29;
        case 3:
          int v25 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_29;
        case 4:
          int v25 = *(_DWORD *)v15;
LABEL_29:
          int v26 = (v25 | (v23 << (8 * v16))) + 2;
          unsigned int v22 = v25 + 2;
          if (v16 < 4) {
            unsigned int v22 = v26;
          }
          break;
        default:
          break;
      }
    }
    if (v22 == 1)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      v14[v16] = 1;
    }
    else if (v22)
    {
      memcpy(v14, v15, v16 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(v14, v15, AssociatedTypeWitness);
      v14[v16] = 0;
    }
  }
  uint64_t v27 = (unsigned __int8 *)((unint64_t)&v14[v12 + 1 + v16] & ~v12);
  int v28 = (unsigned __int8 *)((unint64_t)&v15[v12 + 1 + v16] & ~v12);
  if (v27 != v28)
  {
    if (*(void *)(v9 + 64) <= 8uLL) {
      uint64_t v29 = 8;
    }
    else {
      uint64_t v29 = *(void *)(v9 + 64);
    }
    unsigned int v30 = v27[v29];
    unsigned int v31 = v30 - 2;
    if (v30 >= 2)
    {
      if (v29 <= 3) {
        uint64_t v32 = v29;
      }
      else {
        uint64_t v32 = 4;
      }
      switch(v32)
      {
        case 1:
          int v33 = *v27;
          goto LABEL_49;
        case 2:
          int v33 = *(unsigned __int16 *)v27;
          goto LABEL_49;
        case 3:
          int v33 = *(unsigned __int16 *)v27 | (v27[2] << 16);
          goto LABEL_49;
        case 4:
          int v33 = *(_DWORD *)v27;
LABEL_49:
          int v34 = (v33 | (v31 << (8 * v29))) + 2;
          unsigned int v30 = v33 + 2;
          if (v29 < 4) {
            unsigned int v30 = v34;
          }
          break;
        default:
          break;
      }
    }
    if (v30 == 1)
    {
      swift_release();
    }
    else if (!v30)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(v27, v8);
    }
    unsigned int v35 = v28[v29];
    unsigned int v36 = v35 - 2;
    if (v35 >= 2)
    {
      if (v29 <= 3) {
        uint64_t v37 = v29;
      }
      else {
        uint64_t v37 = 4;
      }
      switch(v37)
      {
        case 1:
          int v38 = *v28;
          goto LABEL_64;
        case 2:
          int v38 = *(unsigned __int16 *)v28;
          goto LABEL_64;
        case 3:
          int v38 = *(unsigned __int16 *)v28 | (v28[2] << 16);
          goto LABEL_64;
        case 4:
          int v38 = *(_DWORD *)v28;
LABEL_64:
          int v39 = (v38 | (v36 << (8 * v29))) + 2;
          unsigned int v35 = v38 + 2;
          if (v29 < 4) {
            unsigned int v35 = v39;
          }
          break;
        default:
          break;
      }
    }
    if (v35 == 1)
    {
      *(void *)uint64_t v27 = *(void *)v28;
      v27[v29] = 1;
    }
    else if (v35)
    {
      memcpy(v27, v28, v29 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 32))(v27, v28, v8);
      v27[v29] = 0;
    }
  }
  return a1;
}

uint64_t sub_1004CA448(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  if (v7 <= 8) {
    unint64_t v7 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_25;
  }
  unsigned __int8 v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8 & 0xF8 | 7;
  uint64_t v10 = (v8 | *(_DWORD *)(v4 + 80)) & 0xF8 | 7u;
  uint64_t v11 = v7 + ((v5 + v9 + 1) & ~v9) + ((v10 + 2) & ~v10) + 1;
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((a2 + ~(-1 << v12) - 254) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)&a1[v11];
      if (!v13) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11]) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v15 < 2)
    {
LABEL_25:
      unsigned int v17 = *a1;
      BOOL v18 = v17 >= 2;
      int v19 = (v17 + 2147483646) & 0x7FFFFFFF;
      if (v18) {
        return (v19 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v13 = a1[v11];
  if (!a1[v11]) {
    goto LABEL_25;
  }
LABEL_17:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v11) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *a1;
        break;
    }
  }
  return (v11 | v16) + 255;
}

void sub_1004CA6A8(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v6 + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = *(void *)(v8 + 64);
  if (v9 <= 8) {
    unint64_t v9 = 8;
  }
  unsigned __int8 v10 = *(_DWORD *)(v8 + 80);
  uint64_t v11 = v10 & 0xF8 | 7;
  uint64_t v12 = (v10 | *(_DWORD *)(v6 + 80)) & 0xF8 | 7u;
  size_t v13 = v9 + ((v7 + v11 + 1) & ~v11) + ((v12 + 2) & ~v12) + 1;
  if (a3 < 0xFF)
  {
    int v14 = 0;
  }
  else if (v13 <= 3)
  {
    unsigned int v17 = ((a3 + ~(-1 << (8 * v13)) - 254) >> (8 * v13)) + 1;
    if (HIWORD(v17))
    {
      int v14 = 4;
    }
    else if (v17 >= 0x100)
    {
      int v14 = 2;
    }
    else
    {
      int v14 = v17 > 1;
    }
  }
  else
  {
    int v14 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v15 = a2 - 255;
    if (v13 < 4)
    {
      int v16 = (v15 >> (8 * v13)) + 1;
      if (v13)
      {
        int v18 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v13] = v16;
        break;
      case 2:
        *(_WORD *)&a1[v13] = v16;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x1004CA974);
      case 4:
        *(_DWORD *)&a1[v13] = v16;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v14)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          *a1 = a2 + 1;
        break;
    }
  }
}

uint64_t type metadata accessor for Merge2StateMachine.Partial()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1004CA9B4()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  sub_10001DFF4(&qword_1006A3D90);
  uint64_t result = type metadata accessor for Result();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v7 = &v6;
      swift_getAssociatedTypeWitness();
      type metadata accessor for Optional();
      uint64_t result = type metadata accessor for Result();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          swift_getTupleTypeLayout2();
          uint64_t v8 = &v5;
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

void *sub_1004CABE4(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v2 + 84)) {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64) + 1;
  }
  uint64_t v4 = 8;
  size_t v50 = v3;
  if (v3 <= 8) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  int v7 = *(_DWORD *)(v54 + 80);
  uint64_t v56 = v5;
  uint64_t v52 = v5 + v7 + 1;
  unint64_t v8 = (v52 & ~(unint64_t)v7) + *(void *)(v54 + 64);
  uint64_t v51 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v51 - 8);
  if (*(_DWORD *)(v9 + 84)) {
    unint64_t v10 = *(void *)(v9 + 64);
  }
  else {
    unint64_t v10 = *(void *)(v9 + 64) + 1;
  }
  size_t __n = v10;
  if (v10 > 8) {
    uint64_t v4 = v10;
  }
  uint64_t v11 = v2;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v4 + v14 + 1;
  uint64_t v16 = v15 & ~v14;
  if (v16 + *(void *)(v13 + 64) <= v8) {
    unint64_t v17 = v8;
  }
  else {
    unint64_t v17 = v16 + *(void *)(v13 + 64);
  }
  int v18 = *(_DWORD *)(v9 + 80) | *(_DWORD *)(v2 + 80);
  unsigned int v19 = v7 | v14 | v18 & 0xF8;
  if (v19 > 7 || ((v18 | v7 | *(_DWORD *)(v13 + 80)) & 0x100000) != 0 || v17 + 1 > 0x18)
  {
    uint64_t v22 = *(void *)a2;
    *a1 = *(void *)a2;
    unsigned int v23 = (void *)(v22 + (((v19 | 7) + 16) & ~(unint64_t)(v19 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v24 = v9;
    uint64_t v25 = v12;
    unsigned int v26 = a2[v17];
    unsigned int v27 = v26 - 2;
    if (v26 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v28 = v17;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *a2;
          if (v17 >= 4) {
            goto LABEL_45;
          }
          goto LABEL_32;
        case 2:
          int v29 = *(unsigned __int16 *)a2;
          if (v17 < 4) {
            goto LABEL_32;
          }
          goto LABEL_45;
        case 3:
          int v29 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v17 < 4) {
            goto LABEL_32;
          }
          goto LABEL_45;
        case 4:
          int v29 = *(_DWORD *)a2;
          if (v17 < 4)
          {
LABEL_32:
            unsigned int v26 = (v29 | (v27 << (8 * v17))) + 2;
            break;
          }
LABEL_45:
          if (v29 != -1) {
            goto LABEL_46;
          }
          goto LABEL_34;
        default:
          break;
      }
    }
    if (v26 == 1)
    {
LABEL_34:
      unsigned int v30 = a2[v4];
      unsigned int v31 = v30 - 2;
      if (v30 < 2)
      {
        uint64_t v33 = v51;
      }
      else
      {
        if (v4 <= 3) {
          uint64_t v32 = v4;
        }
        else {
          uint64_t v32 = 4;
        }
        uint64_t v33 = v51;
        switch(v32)
        {
          case 1:
            int v34 = *a2;
            if (v4 < 4) {
              goto LABEL_55;
            }
            goto LABEL_59;
          case 2:
            int v34 = *(unsigned __int16 *)a2;
            if (v4 < 4) {
              goto LABEL_55;
            }
            goto LABEL_59;
          case 3:
            int v34 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v4 < 4) {
              goto LABEL_55;
            }
            goto LABEL_59;
          case 4:
            int v34 = *(_DWORD *)a2;
            if (v4 < 4) {
LABEL_55:
            }
              unsigned int v30 = (v34 | (v31 << (8 * v4))) + 2;
            else {
LABEL_59:
            }
              unsigned int v30 = v34 + 2;
            break;
          default:
            break;
        }
      }
      uint64_t v40 = ~v14;
      if (v30 == 1)
      {
        uint64_t v41 = *(void *)a2;
        swift_errorRetain();
        *a1 = v41;
        unsigned int v23 = a1;
        char v42 = 1;
      }
      else
      {
        uint64_t v43 = v24;
        unsigned int v23 = a1;
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v24 + 48))(a2, 1, v33))
        {
          memcpy(a1, a2, __n);
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v43 + 16))(a1, a2, v33);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(a1, 0, 1, v33);
        }
        char v42 = 0;
      }
      *((unsigned char *)v23 + v4) = v42;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((unint64_t)v23 + v15) & v40, (unint64_t)&a2[v15] & v40, v25);
      *((unsigned char *)v23 + v17) = 1;
    }
    else
    {
LABEL_46:
      unsigned int v35 = a2[v56];
      unsigned int v36 = v35 - 2;
      if (v35 < 2)
      {
        uint64_t v38 = AssociatedTypeWitness;
      }
      else
      {
        if (v56 <= 3) {
          uint64_t v37 = v56;
        }
        else {
          uint64_t v37 = 4;
        }
        uint64_t v38 = AssociatedTypeWitness;
        switch(v37)
        {
          case 1:
            int v39 = *a2;
            if (v56 < 4) {
              goto LABEL_68;
            }
            goto LABEL_72;
          case 2:
            int v39 = *(unsigned __int16 *)a2;
            if (v56 < 4) {
              goto LABEL_68;
            }
            goto LABEL_72;
          case 3:
            int v39 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v56 < 4) {
              goto LABEL_68;
            }
            goto LABEL_72;
          case 4:
            int v39 = *(_DWORD *)a2;
            if (v56 < 4) {
LABEL_68:
            }
              unsigned int v35 = (v39 | (v36 << (8 * v56))) + 2;
            else {
LABEL_72:
            }
              unsigned int v35 = v39 + 2;
            break;
          default:
            break;
        }
      }
      if (v35 == 1)
      {
        uint64_t v44 = *(void *)a2;
        swift_errorRetain();
        *a1 = v44;
        unsigned int v23 = a1;
        char v45 = 1;
      }
      else
      {
        int v46 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v38);
        uint64_t v47 = v11;
        unsigned int v23 = a1;
        if (v46)
        {
          memcpy(a1, a2, v50);
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v47 + 16))(a1, a2, v38);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(a1, 0, 1, v38);
        }
        char v45 = 0;
      }
      *((unsigned char *)v23 + v56) = v45;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v54 + 16))(((unint64_t)v23 + v52) & ~(unint64_t)v7, (unint64_t)&a2[v52] & ~(unint64_t)v7, v55);
      *((unsigned char *)v23 + v17) = 0;
    }
  }
  return v23;
}

uint64_t sub_1004CB294(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v33 = v3;
  uint64_t v34 = AssociatedTypeWitness;
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v4 = *(void *)(v3 + 64) + 1;
  }
  if (v4 <= 8) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v38 - 8) + 80);
  uint64_t v36 = v5 + v6 + 1;
  uint64_t v37 = *(void *)(v38 - 8);
  unint64_t v7 = (v36 & ~v6) + *(void *)(v37 + 64);
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v35 - 8);
  if (*(_DWORD *)(v8 + 84)) {
    unint64_t v9 = *(void *)(v8 + 64);
  }
  else {
    unint64_t v9 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v10 - 8) + 80);
  if (v9 <= 8) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = v9;
  }
  uint64_t v13 = v12 + v11 + 1;
  unint64_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v10 - 8) + 64);
  if (v14 <= v7) {
    unint64_t v14 = v7;
  }
  unsigned int v15 = a1[v14];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *a1;
        if (v14 >= 4) {
          goto LABEL_36;
        }
        goto LABEL_25;
      case 2:
        int v18 = *(unsigned __int16 *)a1;
        if (v14 >= 4) {
          goto LABEL_36;
        }
        goto LABEL_25;
      case 3:
        int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v14 < 4) {
          goto LABEL_25;
        }
        goto LABEL_36;
      case 4:
        int v18 = *(_DWORD *)a1;
        if (v14 < 4)
        {
LABEL_25:
          unsigned int v15 = (v18 | (v16 << (8 * v14))) + 2;
          break;
        }
LABEL_36:
        if (v18 != -1) {
          goto LABEL_37;
        }
        goto LABEL_27;
      default:
        break;
    }
  }
  if (v15 == 1)
  {
LABEL_27:
    unsigned int v19 = a1[v12];
    unsigned int v20 = v19 - 2;
    if (v19 < 2)
    {
      uint64_t v22 = v35;
    }
    else
    {
      if (v12 <= 3) {
        uint64_t v21 = v12;
      }
      else {
        uint64_t v21 = 4;
      }
      uint64_t v22 = v35;
      switch(v21)
      {
        case 1:
          int v23 = *a1;
          if (v12 < 4) {
            goto LABEL_47;
          }
          goto LABEL_49;
        case 2:
          int v23 = *(unsigned __int16 *)a1;
          if (v12 >= 4) {
            goto LABEL_49;
          }
          goto LABEL_47;
        case 3:
          int v23 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v12 < 4) {
            goto LABEL_47;
          }
          goto LABEL_49;
        case 4:
          int v23 = *(_DWORD *)a1;
          if (v12 < 4) {
LABEL_47:
          }
            unsigned int v19 = (v23 | (v20 << (8 * v12))) + 2;
          else {
LABEL_49:
          }
            unsigned int v19 = v23 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v39 = *(void *)(v10 - 8);
    uint64_t v28 = ~v11;
    if (v19 == 1)
    {
      swift_errorRelease();
    }
    else if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(a1, 1, v22))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v8 + 8))(a1, v22);
    }
    unint64_t v29 = (unint64_t)&a1[v13] & v28;
    unsigned int v30 = *(uint64_t (**)(unint64_t, uint64_t))(v39 + 8);
    uint64_t v31 = v10;
  }
  else
  {
LABEL_37:
    unsigned int v24 = a1[v5];
    unsigned int v25 = v24 - 2;
    if (v24 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v26 = v5;
      }
      else {
        uint64_t v26 = 4;
      }
      switch(v26)
      {
        case 1:
          int v27 = *a1;
          if (v5 < 4) {
            goto LABEL_58;
          }
          goto LABEL_60;
        case 2:
          int v27 = *(unsigned __int16 *)a1;
          if (v5 >= 4) {
            goto LABEL_60;
          }
          goto LABEL_58;
        case 3:
          int v27 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v5 < 4) {
            goto LABEL_58;
          }
          goto LABEL_60;
        case 4:
          int v27 = *(_DWORD *)a1;
          if (v5 < 4) {
LABEL_58:
          }
            unsigned int v24 = (v27 | (v25 << (8 * v5))) + 2;
          else {
LABEL_60:
          }
            unsigned int v24 = v27 + 2;
          break;
        default:
          break;
      }
    }
    if (v24 == 1)
    {
      swift_errorRelease();
    }
    else if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v33 + 48))(a1, 1, v34))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v33 + 8))(a1, v34);
    }
    unint64_t v29 = (unint64_t)&a1[v36] & ~v6;
    unsigned int v30 = *(uint64_t (**)(unint64_t, uint64_t))(v37 + 8);
    uint64_t v31 = v38;
  }

  return v30(v29, v31);
}

void *sub_1004CB7E8(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v46 = v3;
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v4 = *(void *)(v3 + 64) + 1;
  }
  size_t __n = v4;
  if (v4 <= 8) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  uint64_t v7 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = v5;
  uint64_t v47 = v5 + v7 + 1;
  unint64_t v8 = (v47 & ~v7) + *(void *)(v49 + 64);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v12 = *(void *)(v10 + 64);
  }
  else {
    size_t v12 = *(void *)(v10 + 64) + 1;
  }
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  if (v12 <= 8) {
    uint64_t v17 = 8;
  }
  else {
    uint64_t v17 = v12;
  }
  if (((v17 + v16 + 1) & (unint64_t)~v16) + *(void *)(v15 + 64) <= v8) {
    uint64_t v18 = v8;
  }
  else {
    uint64_t v18 = ((v17 + v16 + 1) & ~v16) + *(void *)(v15 + 64);
  }
  unsigned int v19 = a2[v18];
  unsigned int v20 = v19 - 2;
  if (v19 < 2)
  {
    uint64_t v22 = a1;
    uint64_t v23 = v9;
  }
  else
  {
    if (v18 <= 3) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 4;
    }
    uint64_t v22 = a1;
    uint64_t v23 = v9;
    switch(v21)
    {
      case 1:
        int v24 = *a2;
        if (v18 < 4) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 2:
        int v24 = *(unsigned __int16 *)a2;
        if (v18 < 4) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 3:
        int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v18 < 4) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 4:
        int v24 = *(_DWORD *)a2;
        if (v18 < 4) {
LABEL_25:
        }
          unsigned int v19 = (v24 | (v20 << (8 * v18))) + 2;
        else {
LABEL_29:
        }
          unsigned int v19 = v24 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v52 = v18;
  if (v19 == 1)
  {
    unsigned int v25 = a2[v17];
    unsigned int v26 = v25 - 2;
    if (v25 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v27 = v17;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *a2;
          if (v17 < 4) {
            goto LABEL_47;
          }
          goto LABEL_51;
        case 2:
          int v28 = *(unsigned __int16 *)a2;
          if (v17 < 4) {
            goto LABEL_47;
          }
          goto LABEL_51;
        case 3:
          int v28 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v17 < 4) {
            goto LABEL_47;
          }
          goto LABEL_51;
        case 4:
          int v28 = *(_DWORD *)a2;
          if (v17 < 4) {
LABEL_47:
          }
            unsigned int v25 = (v28 | (v26 << (8 * v17))) + 2;
          else {
LABEL_51:
          }
            unsigned int v25 = v28 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v35 = v17 + v16 + 1;
    uint64_t v36 = ~v16;
    if (v25 == 1)
    {
      uint64_t v37 = v13;
      uint64_t v38 = *(void *)a2;
      swift_errorRetain();
      *uint64_t v22 = v38;
      uint64_t v14 = v37;
      char v39 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v23))
      {
        memcpy(v22, a2, v12);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v11 + 16))(v22, a2, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v23);
      }
      char v39 = 0;
    }
    *((unsigned char *)v22 + v17) = v39;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(((unint64_t)v22 + v35) & v36, (unint64_t)&a2[v35] & v36, v14);
    char v40 = 1;
  }
  else
  {
    unsigned int v29 = a2[v51];
    unsigned int v30 = v29 - 2;
    if (v29 < 2)
    {
      uint64_t v32 = AssociatedTypeWitness;
      uint64_t v33 = v46;
    }
    else
    {
      if (v51 <= 3) {
        uint64_t v31 = v51;
      }
      else {
        uint64_t v31 = 4;
      }
      uint64_t v32 = AssociatedTypeWitness;
      uint64_t v33 = v46;
      switch(v31)
      {
        case 1:
          int v34 = *a2;
          if (v51 < 4) {
            goto LABEL_60;
          }
          goto LABEL_64;
        case 2:
          int v34 = *(unsigned __int16 *)a2;
          if (v51 < 4) {
            goto LABEL_60;
          }
          goto LABEL_64;
        case 3:
          int v34 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v51 < 4) {
            goto LABEL_60;
          }
          goto LABEL_64;
        case 4:
          int v34 = *(_DWORD *)a2;
          if (v51 < 4) {
LABEL_60:
          }
            unsigned int v29 = (v34 | (v30 << (8 * v51))) + 2;
          else {
LABEL_64:
          }
            unsigned int v29 = v34 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v41 = ~v7;
    if (v29 == 1)
    {
      uint64_t v42 = *(void *)a2;
      swift_errorRetain();
      *uint64_t v22 = v42;
      char v43 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v33 + 48))(a2, 1, v32))
      {
        memcpy(v22, a2, __n);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v33 + 16))(v22, a2, v32);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v22, 0, 1, v32);
      }
      char v43 = 0;
    }
    *((unsigned char *)v22 + v51) = v43;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v49 + 16))(((unint64_t)v22 + v47) & v41, (unint64_t)&a2[v47] & v41, v50);
    char v40 = 0;
  }
  *((unsigned char *)v22 + v52) = v40;
  return v22;
}

unsigned __int8 *sub_1004CBE30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v57 = v3;
    if (*(_DWORD *)(v3 + 84)) {
      unint64_t v4 = *(void *)(v3 + 64);
    }
    else {
      unint64_t v4 = *(void *)(v3 + 64) + 1;
    }
    size_t __n = v4;
    if (v4 <= 8) {
      uint64_t v5 = 8;
    }
    else {
      uint64_t v5 = v4;
    }
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v61 = *(void *)(v6 - 8);
    uint64_t v62 = v6;
    uint64_t v7 = *(unsigned __int8 *)(v61 + 80);
    uint64_t v8 = v5;
    uint64_t v58 = v5 + v7 + 1;
    unint64_t v9 = (v58 & ~v7) + *(void *)(v61 + 64);
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v54 = v11;
    uint64_t v55 = v10;
    if (*(_DWORD *)(v11 + 84)) {
      size_t v12 = *(void *)(v11 + 64);
    }
    else {
      size_t v12 = *(void *)(v11 + 64) + 1;
    }
    uint64_t v56 = swift_getAssociatedTypeWitness();
    uint64_t v13 = *(void *)(v56 - 8);
    uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
    if (v12 <= 8) {
      uint64_t v15 = 8;
    }
    else {
      uint64_t v15 = v12;
    }
    uint64_t v16 = v15 + v14 + 1;
    if ((v16 & (unint64_t)~v14) + *(void *)(v13 + 64) <= v9) {
      uint64_t v17 = v9;
    }
    else {
      uint64_t v17 = (v16 & ~v14) + *(void *)(v13 + 64);
    }
    unsigned int v18 = a1[v17];
    unsigned int v19 = v18 - 2;
    if (v18 < 2)
    {
      uint64_t v21 = a2;
      uint64_t v22 = AssociatedTypeWitness;
    }
    else
    {
      if (v17 <= 3) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = a2;
      uint64_t v22 = AssociatedTypeWitness;
      switch(v20)
      {
        case 1:
          int v23 = *a1;
          if (v17 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 2:
          int v23 = *(unsigned __int16 *)a1;
          if (v17 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 3:
          int v23 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v17 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 4:
          int v23 = *(_DWORD *)a1;
          if (v17 < 4) {
LABEL_26:
          }
            unsigned int v18 = (v23 | (v19 << (8 * v17))) + 2;
          else {
LABEL_30:
          }
            unsigned int v18 = v23 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v64 = ~v7;
    uint64_t v60 = ~v14;
    if (v18 == 1)
    {
      unsigned int v24 = a1[v15];
      unsigned int v25 = v24 - 2;
      uint64_t v26 = v57;
      if (v24 >= 2)
      {
        if (v15 <= 3) {
          uint64_t v27 = v15;
        }
        else {
          uint64_t v27 = 4;
        }
        switch(v27)
        {
          case 1:
            int v28 = *a1;
            if (v15 >= 4) {
              goto LABEL_53;
            }
            goto LABEL_47;
          case 2:
            int v28 = *(unsigned __int16 *)a1;
            if (v15 < 4) {
              goto LABEL_47;
            }
            goto LABEL_53;
          case 3:
            int v28 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v15 < 4) {
              goto LABEL_47;
            }
            goto LABEL_53;
          case 4:
            int v28 = *(_DWORD *)a1;
            if (v15 < 4)
            {
LABEL_47:
              unsigned int v24 = (v28 | (v25 << (8 * v15))) + 2;
              break;
            }
LABEL_53:
            if (v28 != -1) {
              goto LABEL_54;
            }
            goto LABEL_49;
          default:
            break;
        }
      }
      if (v24 == 1)
      {
LABEL_49:
        swift_errorRelease();
      }
      else
      {
LABEL_54:
        if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v54 + 48))(a1, 1, v55)) {
          (*(void (**)(unsigned __int8 *, uint64_t))(v54 + 8))(a1, v55);
        }
      }
      (*(void (**)(unint64_t, uint64_t))(v13 + 8))((unint64_t)&a1[v16] & v60, v56);
    }
    else
    {
      unsigned int v29 = a1[v8];
      unsigned int v30 = v29 - 2;
      uint64_t v26 = v57;
      if (v29 >= 2)
      {
        if (v8 <= 3) {
          uint64_t v31 = v8;
        }
        else {
          uint64_t v31 = 4;
        }
        switch(v31)
        {
          case 1:
            int v32 = *a1;
            if (v8 >= 4) {
              goto LABEL_64;
            }
            goto LABEL_58;
          case 2:
            int v32 = *(unsigned __int16 *)a1;
            if (v8 < 4) {
              goto LABEL_58;
            }
            goto LABEL_64;
          case 3:
            int v32 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v8 < 4) {
              goto LABEL_58;
            }
            goto LABEL_64;
          case 4:
            int v32 = *(_DWORD *)a1;
            if (v8 < 4)
            {
LABEL_58:
              unsigned int v29 = (v32 | (v30 << (8 * v8))) + 2;
              break;
            }
LABEL_64:
            if (v32 != -1) {
              goto LABEL_65;
            }
            goto LABEL_60;
          default:
            break;
        }
      }
      if (v29 == 1)
      {
LABEL_60:
        swift_errorRelease();
      }
      else
      {
LABEL_65:
        if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v57 + 48))(a1, 1, v22)) {
          (*(void (**)(unsigned __int8 *, uint64_t))(v57 + 8))(a1, v22);
        }
      }
      (*(void (**)(unint64_t, uint64_t))(v61 + 8))((unint64_t)&a1[v58] & v64, v62);
    }
    unsigned int v33 = v21[v17];
    unsigned int v34 = v33 - 2;
    if (v33 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v35 = v17;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *v21;
          if (v17 >= 4) {
            goto LABEL_91;
          }
          goto LABEL_76;
        case 2:
          int v36 = *(unsigned __int16 *)v21;
          if (v17 < 4) {
            goto LABEL_76;
          }
          goto LABEL_91;
        case 3:
          int v36 = *(unsigned __int16 *)v21 | (v21[2] << 16);
          if (v17 < 4) {
            goto LABEL_76;
          }
          goto LABEL_91;
        case 4:
          int v36 = *(_DWORD *)v21;
          if (v17 < 4)
          {
LABEL_76:
            unsigned int v33 = (v36 | (v34 << (8 * v17))) + 2;
            break;
          }
LABEL_91:
          if (v36 != -1) {
            goto LABEL_92;
          }
          goto LABEL_78;
        default:
          break;
      }
    }
    if (v33 != 1)
    {
LABEL_92:
      unsigned int v43 = v21[v8];
      unsigned int v44 = v43 - 2;
      if (v43 >= 2)
      {
        if (v8 <= 3) {
          uint64_t v45 = v8;
        }
        else {
          uint64_t v45 = 4;
        }
        switch(v45)
        {
          case 1:
            int v46 = *v21;
            if (v8 >= 4) {
              goto LABEL_118;
            }
            goto LABEL_112;
          case 2:
            int v46 = *(unsigned __int16 *)v21;
            if (v8 < 4) {
              goto LABEL_112;
            }
            goto LABEL_118;
          case 3:
            int v46 = *(unsigned __int16 *)v21 | (v21[2] << 16);
            if (v8 < 4) {
              goto LABEL_112;
            }
            goto LABEL_118;
          case 4:
            int v46 = *(_DWORD *)v21;
            if (v8 < 4)
            {
LABEL_112:
              unsigned int v43 = (v46 | (v44 << (8 * v8))) + 2;
              break;
            }
LABEL_118:
            if (v46 != -1) {
              goto LABEL_119;
            }
            goto LABEL_114;
          default:
            break;
        }
      }
      if (v43 == 1)
      {
LABEL_114:
        uint64_t v50 = *(void *)v21;
        swift_errorRetain();
        *(void *)a1 = v50;
        char v51 = 1;
      }
      else
      {
LABEL_119:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v22))
        {
          memcpy(a1, v21, __n);
        }
        else
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, v21, v22);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v26 + 56))(a1, 0, 1, v22);
        }
        char v51 = 0;
      }
      a1[v8] = v51;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v61 + 16))((unint64_t)&a1[v58] & v64, (unint64_t)&v21[v58] & v64, v62);
      char v49 = 0;
      goto LABEL_124;
    }
LABEL_78:
    unsigned int v37 = v21[v15];
    unsigned int v38 = v37 - 2;
    if (v37 < 2)
    {
      uint64_t v41 = v54;
      uint64_t v40 = v55;
      if (v37 != 1)
      {
LABEL_86:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v41 + 48))(v21, 1, v40))
        {
          memcpy(a1, v21, v12);
        }
        else
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v41 + 16))(a1, v21, v40);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v41 + 56))(a1, 0, 1, v40);
        }
        char v47 = 0;
        goto LABEL_105;
      }
    }
    else
    {
      if (v15 <= 3) {
        uint64_t v39 = v15;
      }
      else {
        uint64_t v39 = 4;
      }
      uint64_t v41 = v54;
      uint64_t v40 = v55;
      switch(v39)
      {
        case 1:
          int v42 = *v21;
          if (v15 < 4) {
            goto LABEL_102;
          }
          goto LABEL_109;
        case 2:
          int v42 = *(unsigned __int16 *)v21;
          if (v15 < 4) {
            goto LABEL_102;
          }
          goto LABEL_109;
        case 3:
          int v42 = *(unsigned __int16 *)v21 | (v21[2] << 16);
          if (v15 < 4) {
            goto LABEL_102;
          }
          goto LABEL_109;
        case 4:
          int v42 = *(_DWORD *)v21;
          if (v15 >= 4)
          {
LABEL_109:
            if (v42 == -1) {
              break;
            }
            goto LABEL_86;
          }
LABEL_102:
          unsigned int v37 = (v42 | (v38 << (8 * v15))) + 2;
LABEL_103:
          if (v37 != 1) {
            goto LABEL_86;
          }
          break;
        default:
          goto LABEL_103;
      }
    }
    uint64_t v48 = *(void *)v21;
    swift_errorRetain();
    *(void *)a1 = v48;
    char v47 = 1;
LABEL_105:
    a1[v15] = v47;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))((unint64_t)&a1[v16] & v60, (unint64_t)&v21[v16] & v60, v56);
    char v49 = 1;
LABEL_124:
    a1[v17] = v49;
  }
  return a1;
}

void *sub_1004CC764(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v40 = v2;
  if (*(_DWORD *)(v2 + 84)) {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64) + 1;
  }
  size_t __n = v3;
  if (v3 <= 8) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  uint64_t v6 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v45 = v4;
  uint64_t v41 = v4 + v6 + 1;
  unint64_t v7 = (v41 & ~v6) + *(void *)(v43 + 64);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84)) {
    size_t v10 = *(void *)(v9 + 64);
  }
  else {
    size_t v10 = *(void *)(v9 + 64) + 1;
  }
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  if (v10 <= 8) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = v10;
  }
  uint64_t v16 = v15 + v14 + 1;
  if ((v16 & (unint64_t)~v14) + *(void *)(v13 + 64) <= v7) {
    uint64_t v17 = v7;
  }
  else {
    uint64_t v17 = (v16 & ~v14) + *(void *)(v13 + 64);
  }
  unsigned int v18 = a2[v17];
  unsigned int v19 = v18 - 2;
  if (v18 < 2)
  {
    uint64_t v21 = a1;
    if (v18 != 1)
    {
LABEL_24:
      unsigned int v23 = a2[v45];
      unsigned int v24 = v23 - 2;
      if (v23 < 2)
      {
        uint64_t v26 = AssociatedTypeWitness;
        uint64_t v27 = v40;
      }
      else
      {
        if (v45 <= 3) {
          uint64_t v25 = v45;
        }
        else {
          uint64_t v25 = 4;
        }
        uint64_t v26 = AssociatedTypeWitness;
        uint64_t v27 = v40;
        switch(v25)
        {
          case 1:
            int v28 = *a2;
            if (v45 < 4) {
              goto LABEL_48;
            }
            goto LABEL_52;
          case 2:
            int v28 = *(unsigned __int16 *)a2;
            if (v45 < 4) {
              goto LABEL_48;
            }
            goto LABEL_52;
          case 3:
            int v28 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v45 < 4) {
              goto LABEL_48;
            }
            goto LABEL_52;
          case 4:
            int v28 = *(_DWORD *)a2;
            if (v45 < 4) {
LABEL_48:
            }
              unsigned int v23 = (v28 | (v24 << (8 * v45))) + 2;
            else {
LABEL_52:
            }
              unsigned int v23 = v28 + 2;
            break;
          default:
            break;
        }
      }
      uint64_t v33 = ~v6;
      if (v23 == 1)
      {
        *uint64_t v21 = *(void *)a2;
        char v34 = 1;
      }
      else
      {
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v27 + 48))(a2, 1, v26))
        {
          memcpy(v21, a2, __n);
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v27 + 32))(v21, a2, v26);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v21, 0, 1, v26);
        }
        char v34 = 0;
      }
      *((unsigned char *)v21 + v45) = v34;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 32))(((unint64_t)v21 + v41) & v33, (unint64_t)&a2[v41] & v33, v44);
      char v35 = 0;
      goto LABEL_73;
    }
  }
  else
  {
    if (v17 <= 3) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = 4;
    }
    uint64_t v21 = a1;
    switch(v20)
    {
      case 1:
        int v22 = *a2;
        if (v17 < 4) {
          goto LABEL_33;
        }
        goto LABEL_45;
      case 2:
        int v22 = *(unsigned __int16 *)a2;
        if (v17 < 4) {
          goto LABEL_33;
        }
        goto LABEL_45;
      case 3:
        int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v17 < 4) {
          goto LABEL_33;
        }
        goto LABEL_45;
      case 4:
        int v22 = *(_DWORD *)a2;
        if (v17 >= 4)
        {
LABEL_45:
          if (v22 == -1) {
            break;
          }
          goto LABEL_24;
        }
LABEL_33:
        unsigned int v18 = (v22 | (v19 << (8 * v17))) + 2;
LABEL_34:
        if (v18 != 1) {
          goto LABEL_24;
        }
        break;
      default:
        goto LABEL_34;
    }
  }
  unsigned int v29 = a2[v15];
  unsigned int v30 = v29 - 2;
  if (v29 >= 2)
  {
    if (v15 <= 3) {
      uint64_t v31 = v15;
    }
    else {
      uint64_t v31 = 4;
    }
    switch(v31)
    {
      case 1:
        int v32 = *a2;
        if (v15 < 4) {
          goto LABEL_61;
        }
        goto LABEL_65;
      case 2:
        int v32 = *(unsigned __int16 *)a2;
        if (v15 < 4) {
          goto LABEL_61;
        }
        goto LABEL_65;
      case 3:
        int v32 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v15 < 4) {
          goto LABEL_61;
        }
        goto LABEL_65;
      case 4:
        int v32 = *(_DWORD *)a2;
        if (v15 < 4) {
LABEL_61:
        }
          unsigned int v29 = (v32 | (v30 << (8 * v15))) + 2;
        else {
LABEL_65:
        }
          unsigned int v29 = v32 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v36 = ~v14;
  if (v29 == 1)
  {
    *uint64_t v21 = *(void *)a2;
    char v37 = 1;
  }
  else
  {
    uint64_t v48 = v11;
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      memcpy(v21, a2, v10);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 32))(v21, a2, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v21, 0, 1, v8);
    }
    char v37 = 0;
    uint64_t v12 = v48;
  }
  *((unsigned char *)v21 + v15) = v37;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(((unint64_t)v21 + v16) & v36, (unint64_t)&a2[v16] & v36, v12);
  char v35 = 1;
LABEL_73:
  *((unsigned char *)v21 + v17) = v35;
  return v21;
}

unsigned __int8 *sub_1004CCD8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v55 = v3;
    if (*(_DWORD *)(v3 + 84)) {
      unint64_t v4 = *(void *)(v3 + 64);
    }
    else {
      unint64_t v4 = *(void *)(v3 + 64) + 1;
    }
    size_t __n = v4;
    if (v4 <= 8) {
      uint64_t v5 = 8;
    }
    else {
      uint64_t v5 = v4;
    }
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v59 = *(void *)(v6 - 8);
    uint64_t v60 = v6;
    uint64_t v7 = *(unsigned __int8 *)(v59 + 80);
    uint64_t v8 = v5;
    uint64_t v57 = v5 + v7 + 1;
    unint64_t v9 = (v57 & ~v7) + *(void *)(v59 + 64);
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v53 = v11;
    uint64_t v54 = v10;
    if (*(_DWORD *)(v11 + 84)) {
      size_t v12 = *(void *)(v11 + 64);
    }
    else {
      size_t v12 = *(void *)(v11 + 64) + 1;
    }
    uint64_t v56 = swift_getAssociatedTypeWitness();
    uint64_t v13 = *(void *)(v56 - 8);
    uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
    if (v12 <= 8) {
      uint64_t v15 = 8;
    }
    else {
      uint64_t v15 = v12;
    }
    uint64_t v16 = v15 + v14 + 1;
    if ((v16 & (unint64_t)~v14) + *(void *)(v13 + 64) <= v9) {
      uint64_t v17 = v9;
    }
    else {
      uint64_t v17 = (v16 & ~v14) + *(void *)(v13 + 64);
    }
    unsigned int v18 = a1[v17];
    unsigned int v19 = v18 - 2;
    if (v18 < 2)
    {
      uint64_t v21 = a2;
    }
    else
    {
      if (v17 <= 3) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = a2;
      switch(v20)
      {
        case 1:
          int v22 = *a1;
          if (v17 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 2:
          int v22 = *(unsigned __int16 *)a1;
          if (v17 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 3:
          int v22 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v17 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 4:
          int v22 = *(_DWORD *)a1;
          if (v17 < 4) {
LABEL_26:
          }
            unsigned int v18 = (v22 | (v19 << (8 * v17))) + 2;
          else {
LABEL_30:
          }
            unsigned int v18 = v22 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v23 = ~v7;
    uint64_t v62 = ~v14;
    if (v18 == 1)
    {
      unsigned int v24 = a1[v15];
      unsigned int v25 = v24 - 2;
      uint64_t v26 = AssociatedTypeWitness;
      if (v24 >= 2)
      {
        if (v15 <= 3) {
          uint64_t v27 = v15;
        }
        else {
          uint64_t v27 = 4;
        }
        switch(v27)
        {
          case 1:
            int v28 = *a1;
            if (v15 >= 4) {
              goto LABEL_53;
            }
            goto LABEL_47;
          case 2:
            int v28 = *(unsigned __int16 *)a1;
            if (v15 < 4) {
              goto LABEL_47;
            }
            goto LABEL_53;
          case 3:
            int v28 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v15 < 4) {
              goto LABEL_47;
            }
            goto LABEL_53;
          case 4:
            int v28 = *(_DWORD *)a1;
            if (v15 < 4)
            {
LABEL_47:
              unsigned int v24 = (v28 | (v25 << (8 * v15))) + 2;
              break;
            }
LABEL_53:
            if (v28 != -1) {
              goto LABEL_54;
            }
            goto LABEL_49;
          default:
            break;
        }
      }
      if (v24 == 1)
      {
LABEL_49:
        swift_errorRelease();
      }
      else
      {
LABEL_54:
        if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v53 + 48))(a1, 1, v54)) {
          (*(void (**)(unsigned __int8 *, uint64_t))(v53 + 8))(a1, v54);
        }
      }
      (*(void (**)(unint64_t, uint64_t))(v13 + 8))((unint64_t)&a1[v16] & v62, v56);
    }
    else
    {
      unsigned int v29 = a1[v8];
      unsigned int v30 = v29 - 2;
      uint64_t v26 = AssociatedTypeWitness;
      if (v29 >= 2)
      {
        if (v8 <= 3) {
          uint64_t v31 = v8;
        }
        else {
          uint64_t v31 = 4;
        }
        switch(v31)
        {
          case 1:
            int v32 = *a1;
            if (v8 >= 4) {
              goto LABEL_64;
            }
            goto LABEL_58;
          case 2:
            int v32 = *(unsigned __int16 *)a1;
            if (v8 < 4) {
              goto LABEL_58;
            }
            goto LABEL_64;
          case 3:
            int v32 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v8 < 4) {
              goto LABEL_58;
            }
            goto LABEL_64;
          case 4:
            int v32 = *(_DWORD *)a1;
            if (v8 < 4)
            {
LABEL_58:
              unsigned int v29 = (v32 | (v30 << (8 * v8))) + 2;
              break;
            }
LABEL_64:
            if (v32 != -1) {
              goto LABEL_65;
            }
            goto LABEL_60;
          default:
            break;
        }
      }
      if (v29 == 1)
      {
LABEL_60:
        swift_errorRelease();
      }
      else
      {
LABEL_65:
        if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v55 + 48))(a1, 1, AssociatedTypeWitness))(*(void (**)(unsigned __int8 *, uint64_t))(v55 + 8))(a1, AssociatedTypeWitness); {
      }
        }
      (*(void (**)(unint64_t, uint64_t))(v59 + 8))((unint64_t)&a1[v57] & v23, v60);
    }
    unsigned int v33 = v21[v17];
    unsigned int v34 = v33 - 2;
    if (v33 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v35 = v17;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *v21;
          if (v17 >= 4) {
            goto LABEL_91;
          }
          goto LABEL_76;
        case 2:
          int v36 = *(unsigned __int16 *)v21;
          if (v17 < 4) {
            goto LABEL_76;
          }
          goto LABEL_91;
        case 3:
          int v36 = *(unsigned __int16 *)v21 | (v21[2] << 16);
          if (v17 < 4) {
            goto LABEL_76;
          }
          goto LABEL_91;
        case 4:
          int v36 = *(_DWORD *)v21;
          if (v17 < 4)
          {
LABEL_76:
            unsigned int v33 = (v36 | (v34 << (8 * v17))) + 2;
            break;
          }
LABEL_91:
          if (v36 != -1) {
            goto LABEL_92;
          }
          goto LABEL_78;
        default:
          break;
      }
    }
    if (v33 == 1)
    {
LABEL_78:
      unsigned int v37 = v21[v15];
      unsigned int v38 = v37 - 2;
      if (v37 < 2)
      {
        uint64_t v41 = v53;
        uint64_t v40 = v54;
        if (v37 != 1)
        {
LABEL_86:
          if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v41 + 48))(v21, 1, v40))
          {
            memcpy(a1, v21, v12);
          }
          else
          {
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v41 + 32))(a1, v21, v40);
            (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v41 + 56))(a1, 0, 1, v40);
          }
          char v48 = 0;
          goto LABEL_110;
        }
      }
      else
      {
        if (v15 <= 3) {
          uint64_t v39 = v15;
        }
        else {
          uint64_t v39 = 4;
        }
        uint64_t v41 = v53;
        uint64_t v40 = v54;
        switch(v39)
        {
          case 1:
            int v42 = *v21;
            if (v15 < 4) {
              goto LABEL_107;
            }
            goto LABEL_114;
          case 2:
            int v42 = *(unsigned __int16 *)v21;
            if (v15 < 4) {
              goto LABEL_107;
            }
            goto LABEL_114;
          case 3:
            int v42 = *(unsigned __int16 *)v21 | (v21[2] << 16);
            if (v15 < 4) {
              goto LABEL_107;
            }
            goto LABEL_114;
          case 4:
            int v42 = *(_DWORD *)v21;
            if (v15 >= 4)
            {
LABEL_114:
              if (v42 == -1) {
                break;
              }
              goto LABEL_86;
            }
LABEL_107:
            unsigned int v37 = (v42 | (v38 << (8 * v15))) + 2;
LABEL_108:
            if (v37 != 1) {
              goto LABEL_86;
            }
            break;
          default:
            goto LABEL_108;
        }
      }
      *(void *)a1 = *(void *)v21;
      char v48 = 1;
LABEL_110:
      a1[v15] = v48;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))((unint64_t)&a1[v16] & v62, (unint64_t)&v21[v16] & v62, v56);
      char v50 = 1;
LABEL_121:
      a1[v17] = v50;
      return a1;
    }
LABEL_92:
    unsigned int v43 = v21[v8];
    unsigned int v44 = v43 - 2;
    if (v43 < 2)
    {
      uint64_t v46 = v55;
      if (v43 != 1)
      {
LABEL_100:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v46 + 48))(v21, 1, v26))
        {
          memcpy(a1, v21, __n);
        }
        else
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v46 + 32))(a1, v21, v26);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v46 + 56))(a1, 0, 1, v26);
        }
        char v49 = 0;
        goto LABEL_120;
      }
    }
    else
    {
      if (v8 <= 3) {
        uint64_t v45 = v8;
      }
      else {
        uint64_t v45 = 4;
      }
      uint64_t v46 = v55;
      switch(v45)
      {
        case 1:
          int v47 = *v21;
          if (v8 < 4) {
            goto LABEL_117;
          }
          goto LABEL_126;
        case 2:
          int v47 = *(unsigned __int16 *)v21;
          if (v8 < 4) {
            goto LABEL_117;
          }
          goto LABEL_126;
        case 3:
          int v47 = *(unsigned __int16 *)v21 | (v21[2] << 16);
          if (v8 < 4) {
            goto LABEL_117;
          }
          goto LABEL_126;
        case 4:
          int v47 = *(_DWORD *)v21;
          if (v8 >= 4)
          {
LABEL_126:
            if (v47 == -1) {
              break;
            }
            goto LABEL_100;
          }
LABEL_117:
          unsigned int v43 = (v47 | (v44 << (8 * v8))) + 2;
LABEL_118:
          if (v43 != 1) {
            goto LABEL_100;
          }
          break;
        default:
          goto LABEL_118;
      }
    }
    *(void *)a1 = *(void *)v21;
    char v49 = 1;
LABEL_120:
    a1[v8] = v49;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v59 + 32))((unint64_t)&a1[v57] & v23, (unint64_t)&v21[v57] & v23, v60);
    char v50 = 0;
    goto LABEL_121;
  }
  return a1;
}

uint64_t sub_1004CD6B0(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v3 = *(_DWORD *)(v2 + 84);
  unint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v9 = *(_DWORD *)(v8 + 84);
  unint64_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  if (v3) {
    unint64_t v13 = v4;
  }
  else {
    unint64_t v13 = v4 + 1;
  }
  uint64_t v14 = 8;
  if (v13 <= 8) {
    unint64_t v13 = 8;
  }
  uint64_t v15 = *(void *)(v11 + 64);
  unint64_t v16 = ((v13 + v6 + 1) & ~v6) + v7;
  if (v9) {
    unint64_t v17 = v10;
  }
  else {
    unint64_t v17 = v10 + 1;
  }
  if (v17 > 8) {
    uint64_t v14 = v17;
  }
  unint64_t v18 = ((v14 + *(unsigned __int8 *)(v12 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)) + v15;
  if (v18 > v16) {
    unint64_t v16 = v18;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_32;
  }
  unint64_t v19 = v16 + 1;
  char v20 = 8 * (v16 + 1);
  if ((v16 + 1) <= 3)
  {
    unsigned int v23 = ((a2 + ~(-1 << v20) - 254) >> v20) + 1;
    if (HIWORD(v23))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v23 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v23 < 2)
    {
LABEL_32:
      unsigned int v25 = *((unsigned __int8 *)a1 + v16);
      if (v25 >= 2) {
        return (v25 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_32;
  }
LABEL_24:
  int v24 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v24 = 0;
  }
  if (v19)
  {
    if (v19 > 3) {
      LODWORD(v19) = 4;
    }
    switch((int)v19)
    {
      case 2:
        LODWORD(v19) = *a1;
        break;
      case 3:
        LODWORD(v19) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v19) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v19) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v19 | v24) + 255;
}

void sub_1004CD9EC(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v4 = *(_DWORD *)(v3 + 84);
  unint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  unint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = v12;
  if (v4) {
    unint64_t v14 = v5;
  }
  else {
    unint64_t v14 = v5 + 1;
  }
  uint64_t v15 = 8;
  if (v14 <= 8) {
    unint64_t v14 = 8;
  }
  uint64_t v16 = *(void *)(v12 + 64);
  unint64_t v17 = ((v14 + v7 + 1) & ~v7) + v8;
  if (v10) {
    unint64_t v18 = v11;
  }
  else {
    unint64_t v18 = v11 + 1;
  }
  if (v18 > 8) {
    uint64_t v15 = v18;
  }
  unint64_t v19 = ((v15 + *(unsigned __int8 *)(v13 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)) + v16;
  if (v19 <= v17) {
    unint64_t v19 = v17;
  }
  size_t v20 = v19 + 1;
  if (a3 < 0xFF)
  {
    int v22 = 0;
    int v21 = a1;
  }
  else
  {
    int v21 = a1;
    if (v20 <= 3)
    {
      unsigned int v25 = ((a3 + ~(-1 << (8 * v20)) - 254) >> (8 * v20)) + 1;
      if (HIWORD(v25))
      {
        int v22 = 4;
      }
      else if (v25 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v25 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  if (a2 > 0xFE)
  {
    unsigned int v23 = a2 - 255;
    if (v20 < 4)
    {
      int v24 = (v23 >> (8 * v20)) + 1;
      if (v19 != -1)
      {
        int v26 = v23 & ~(-1 << (8 * v20));
        bzero(v21, v20);
        if (v20 == 3)
        {
          *(_WORD *)int v21 = v26;
          void v21[2] = BYTE2(v26);
        }
        else if (v20 == 2)
        {
          *(_WORD *)int v21 = v26;
        }
        else
        {
          *int v21 = v26;
        }
      }
    }
    else
    {
      bzero(v21, v19 + 1);
      *(_DWORD *)int v21 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        v21[v20] = v24;
        break;
      case 2:
        *(_WORD *)&v21[v20] = v24;
        break;
      case 3:
LABEL_44:
        __break(1u);
        JUMPOUT(0x1004CDD98);
      case 4:
        *(_DWORD *)&v21[v20] = v24;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v22)
    {
      case 1:
        v21[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 2:
        *(_WORD *)&v21[v20] = 0;
        goto LABEL_32;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&v21[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      default:
LABEL_32:
        if (a2) {
LABEL_33:
        }
          v21[v19] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1004CDDC0(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v2 + 84)) {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64) + 1;
  }
  if (v3 <= 8) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = ((v4 + *(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v7 + 84)) {
    unint64_t v8 = *(void *)(v7 + 64);
  }
  else {
    unint64_t v8 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (v8 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v8;
  }
  unint64_t v11 = ((v10 + *(unsigned __int8 *)(v9 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 64);
  if (v11 <= v6) {
    unint64_t v11 = v6;
  }
  uint64_t result = a1[v11];
  if (result >= 2)
  {
    if (v11 <= 3) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        if (v11 < 4) {
          goto LABEL_25;
        }
        goto LABEL_27;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        if (v11 >= 4) {
          goto LABEL_27;
        }
        goto LABEL_25;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v11 < 4) {
          goto LABEL_25;
        }
        goto LABEL_27;
      case 4:
        int v14 = *(_DWORD *)a1;
        if (v11 < 4) {
LABEL_25:
        }
          uint64_t result = (v14 | ((result - 2) << (8 * v11))) + 2;
        else {
LABEL_27:
        }
          uint64_t result = (v14 + 2);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1004CE08C(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  if (v5 <= 8) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v8 = ((v6 + *(unsigned __int8 *)(v7 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84)) {
    unint64_t v10 = *(void *)(v9 + 64);
  }
  else {
    unint64_t v10 = *(void *)(v9 + 64) + 1;
  }
  if (a2 > 1)
  {
    if (v10 <= 8) {
      unint64_t v10 = 8;
    }
    uint64_t v14 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    unint64_t v15 = ((v10 + *(unsigned __int8 *)(v14 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
        + *(void *)(v14 + 64);
    if (v15 <= v8) {
      size_t v16 = v8;
    }
    else {
      size_t v16 = v15;
    }
    if (v16 <= 3) {
      char v17 = ((a2 - 2) >> (8 * v16)) + 2;
    }
    else {
      char v17 = 2;
    }
    if (v16 <= 3) {
      int v18 = (a2 - 2) & ~(-1 << (8 * v16));
    }
    else {
      int v18 = a2 - 2;
    }
    a1[v16] = v17;
    if (v16 >= 4) {
      int v19 = 4;
    }
    else {
      int v19 = v16;
    }
    bzero(a1, v16);
    switch(v19)
    {
      case 2:
        *(_WORD *)a1 = v18;
        break;
      case 3:
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
        break;
      case 4:
        *(_DWORD *)a1 = v18;
        break;
      default:
        *a1 = v18;
        break;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    uint64_t v12 = 8;
    if (v10 > 8) {
      uint64_t v12 = v10;
    }
    unint64_t v13 = ((v12 + *(unsigned __int8 *)(v11 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
        + *(void *)(v11 + 64);
    if (v13 <= v8) {
      unint64_t v13 = v8;
    }
    a1[v13] = a2;
  }
}

uint64_t sub_1004CE3E8()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_1004CE4DC(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v10 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_21;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_21:
          int v18 = (v17 | (v15 << (8 * v9))) + 2;
          unsigned int v14 = v17 + 2;
          if (v9 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((unsigned char *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v9) = 0;
    }
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1004CE714(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  if (v6 <= v4) {
    unint64_t v6 = v4;
  }
  unsigned int v7 = a1[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_12;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_12:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 1) {
    uint64_t v12 = *(void *)(v5 - 8);
  }
  else {
    uint64_t v12 = v3;
  }
  if (v7 == 1) {
    uint64_t v13 = v5;
  }
  else {
    uint64_t v13 = AssociatedTypeWitness;
  }
  unsigned int v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v12 + 8);

  return v14(a1, v13);
}

uint64_t sub_1004CE8DC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *sub_1004CEAAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t sub_1004CED34(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *sub_1004CEF04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t sub_1004CF18C(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_23;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_23:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 2) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_23;
  }
LABEL_15:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 255;
}

void sub_1004CF340(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v10 = a2 - 255;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1004CF568);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1004CF590(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2) {
    unint64_t v3 = v2;
  }
  uint64_t result = a1[v3];
  if (result >= 2)
  {
    if (v3 <= 3) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | ((result - 2) << (8 * v3))) + 2;
        unsigned int v8 = v6 + 2;
        if (v3 >= 4) {
          uint64_t result = v8;
        }
        else {
          uint64_t result = v7;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1004CF6C0(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  if (a2 > 1)
  {
    size_t v7 = *(void *)(v4 + 64);
    size_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v8 <= v7) {
      size_t v9 = v7;
    }
    else {
      size_t v9 = v8;
    }
    unsigned int v10 = a2 - 2;
    if (v9 < 4)
    {
      unsigned int v11 = v10 >> (8 * v9);
      int v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 2;
      bzero(a1, v9);
      if (v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if (v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 2;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v6 <= *(void *)(v5 + 64)) {
      unint64_t v6 = *(void *)(v5 + 64);
    }
    a1[v6] = a2;
  }
}

uint64_t sub_1004CF844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  int v12 = (char *)&v22 - v11;
  uint64_t v13 = sub_10002F214(&qword_1006A09A0);
  __chkstk_darwin(v13 - 8);
  int v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unsigned int v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = a2;
  *((void *)v18 + 5) = a3;
  uint64_t v19 = v23;
  *((void *)v18 + 6) = a4;
  *((void *)v18 + 7) = v19;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v17], v12, AssociatedTypeWitness);
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = v19;
  uint64_t v20 = type metadata accessor for Merge2StateMachine.Partial();
  return sub_1004C178C((uint64_t)v15, (uint64_t)&unk_1006A9C78, (uint64_t)v18, v20);
}

uint64_t sub_1004CFA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  int v12 = (char *)&v22 - v11;
  uint64_t v13 = sub_10002F214(&qword_1006A09A0);
  __chkstk_darwin(v13 - 8);
  int v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unsigned int v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = a2;
  *((void *)v18 + 5) = a3;
  uint64_t v19 = v23;
  *((void *)v18 + 6) = v23;
  *((void *)v18 + 7) = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v17], v12, AssociatedTypeWitness);
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = v19;
  uint64_t v27 = a5;
  uint64_t v20 = type metadata accessor for Merge2StateMachine.Partial();
  return sub_1004C178C((uint64_t)v15, (uint64_t)&unk_1006A9C98, (uint64_t)v18, v20);
}

uint64_t sub_1004CFC70()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004CFD54(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = (uint64_t)v1 + ((*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  int v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  void *v12 = v2;
  v12[1] = sub_100161724;
  return sub_1004C67B8(a1, v9, v10, v11, v4, v5, v6, v7);
}

uint64_t sub_1004CFE80()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004CFEB8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100161724;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1006A9C80 + dword_1006A9C80);
  return v6(a1, v4);
}

uint64_t sub_1004CFF80()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004D0064(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = (uint64_t)v1 + ((*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  int v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  void *v12 = v2;
  v12[1] = sub_10017B61C;
  return sub_1004C6DD8(a1, v9, v10, v11, v4, v5, v6, v7);
}

uint64_t sub_1004D0190@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1004D01B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004D01DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t))(*(void *)(a3 - 8) + 32))(*(void *)(*(void *)(a2 + 64) + 40), a1);

  return swift_continuation_resume();
}

uint64_t sub_1004D0254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(sub_1004D02E8, v6, v8);
}

uint64_t sub_1004D02E8()
{
  uint64_t v1 = (void (*)(uint64_t))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = sub_1004D0390;
  uint64_t v3 = swift_continuation_init();
  v1(v3);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1004D0390()
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 8);
  return v1();
}

uint64_t AsyncChannel.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = v2;
  v3[4] = *(void *)(a2 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_1004D0540, 0, 0);
}

uint64_t sub_1004D0540()
{
  uint64_t v1 = (uint64_t *)v0[3];
  if (*((unsigned char *)v1 + 8) == 1)
  {
    uint64_t v2 = v0[4];
    uint64_t v3 = *v1;
    v0[9] = *v1;
    swift_retain();
    uint64_t v4 = sub_1004D09DC();
    swift_release();
    uint64_t v5 = swift_task_alloc();
    v0[10] = v5;
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[11] = v6;
    _OWORD v6[2] = v2;
    _OWORD v6[3] = v1;
    v6[4] = v4;
    int v12 = (char *)&dword_1006A9920 + dword_1006A9920;
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[12] = v7;
    void *v7 = v0;
    v7[1] = sub_1004D0720;
    uint64_t v8 = v0[8];
    uint64_t v9 = v0[5];
    return ((uint64_t (*)(uint64_t, void (*)(), uint64_t, void *, void *, uint64_t))v12)(v8, sub_1004D0A64, v5, &unk_1006A9CB0, v6, v9);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[4] - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1004D0720()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1004D0878, 0, 0);
}

uint64_t sub_1004D0878()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  (*(void (**)(uint64_t, void, void))(v0[6] + 32))(v1, v0[8], v0[5]);
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v5 = v0[3];
    uint64_t v4 = v0[4];
    uint64_t v6 = v0[2];
    (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
    *(unsigned char *)(v5 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v6, 1, 1, v4);
  }
  else
  {
    uint64_t v7 = v0[4];
    uint64_t v8 = v0[2];
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 32))(v8, v0[7], v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v7);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1004D09DC()
{
  uint64_t v1 = v0[2];
  v3[2] = *(void *)(*v0 + 80);
  type metadata accessor for AsyncChannel.State();
  sub_1004D3A38((void (*)(uint64_t))sub_1004D378C, (uint64_t)v3, v1);
  return v3[5];
}

void sub_1004D0A64()
{
  sub_1004D0A8C(*(void *)(v0 + 24));
}

void sub_1004D0A8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-v6];
  uint64_t v8 = v1[2];
  uint64_t v11 = v3;
  uint64_t v12 = a1;
  type metadata accessor for AsyncChannel.State();
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Optional();
  sub_1004D3A38((void (*)(uint64_t))sub_1004D3720, (uint64_t)v10, v8);
  uint64_t v9 = v13;
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v7, 1, 1, v3);
    (*(void (**)(void, unsigned char *, uint64_t))(v5 + 32))(*(void *)(*(void *)(v9 + 64) + 40), v7, v4);
    swift_continuation_resume();
  }
}

uint64_t sub_1004D0C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1004D0C5C, 0, 0);
}

uint64_t sub_1004D0C5C()
{
  uint64_t v1 = **(void ***)(v0 + 24);
  *(void *)(v0 + 40) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1004D0D50;
  uint64_t v3 = *(void *)(v0 + 16);
  v2[3] = *(void *)(v0 + 32);
  v2[4] = v1;
  v2[2] = v3;
  v2[5] = *v1;
  return _swift_task_switch(sub_1004D0F68, 0, 0);
}

uint64_t sub_1004D0D50()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1004D0E64(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  _OWORD v6[3] = v5;
  v6[4] = v4;
  v6[1] = sub_10017B61C;
  _OWORD v6[2] = a1;
  return _swift_task_switch(sub_1004D0C5C, 0, 0);
}

uint64_t sub_1004D0F1C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  return _swift_task_switch(sub_1004D0F68, 0, 0);
}

uint64_t sub_1004D0F68()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v8 = (char *)&dword_1006A9E68 + dword_1006A9E68;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  uint64_t v5 = type metadata accessor for Optional();
  *uint64_t v4 = v0;
  v4[1] = sub_1004D1068;
  uint64_t v6 = v0[2];
  return ((uint64_t (*)(uint64_t, void, void, void (*)(uint64_t), uint64_t, uint64_t))v8)(v6, 0, 0, sub_1004D36F4, v3, v5);
}

uint64_t sub_1004D1068()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1004D1178(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1003118F8;
  return AsyncChannel.Iterator.next()(a1, a2);
}

uint64_t sub_1004D1220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_1004D12EC;
  return __sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, a6, v12);
}

uint64_t sub_1004D12EC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_1004D13E8(int a1, Swift::UInt a2)
{
}

BOOL sub_1004D1410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a4;
}

Swift::Int sub_1004D141C(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1004D1464()
{
  return sub_1004D141C(*v0);
}

void sub_1004D1470(int a1)
{
  sub_1004D13E8(a1, *v1);
}

Swift::Int sub_1004D147C()
{
  Hasher.init(_seed:)();
  sub_1004D13E8((int)&v2, *v0);
  return Hasher._finalize()();
}

BOOL sub_1004D14C0(uint64_t *a1, uint64_t *a2)
{
  return sub_1004D1410(*a1, (uint64_t)a2, 0, *a2);
}

uint64_t sub_1004D14D4(uint64_t a1)
{
  char v2 = v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      uint64_t v15 = *v2;
      type metadata accessor for AsyncChannel.Awaiting();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      type metadata accessor for Set();
      Set.remove(_:)();
      if (v14 == 1) {
        uint64_t v3 = 0;
      }
      else {
        uint64_t v3 = v14;
      }
      uint64_t v5 = v15;
      swift_bridgeObjectRetain();
      char v6 = Set.isEmpty.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v6)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        char v7 = 2;
      }
      else
      {
        char v7 = 1;
      }
      *char v2 = v5;
      *((unsigned char *)v2 + 8) = v7;
    }
    else
    {
      uint64_t v8 = type metadata accessor for AsyncChannel.Awaiting();
      type metadata accessor for _ContiguousArrayStorage();
      swift_initStackObject();
      uint64_t v9 = static Array._adoptStorage(_:count:)();
      *(void *)uint64_t v10 = a1;
      *(void *)(v10 + 8) = 0;
      *(unsigned char *)(v10 + 16) = 1;
      type metadata accessor for Array();
      if (Array._getCount()())
      {
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v12 = (void *)sub_1004D3268(v9, v8, WitnessTable);
      }
      else
      {
        uint64_t v12 = &_swiftEmptySetSingleton;
      }
      swift_bridgeObjectRelease();
      uint64_t v3 = 0;
      *char v2 = (uint64_t)v12;
      *((unsigned char *)v2 + 8) = 1;
    }
  }
  return v3;
}

uint64_t sub_1004D1698()
{
  return 0;
}

uint64_t AsyncChannel.__allocating_init(element:)()
{
  uint64_t v0 = swift_allocObject();
  AsyncChannel.init(element:)();
  return v0;
}

uint64_t AsyncChannel.init(element:)()
{
  type metadata accessor for AsyncChannel.State();
  uint64_t v1 = sub_1004D3B70();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = v1;
  return v0;
}

void sub_1004D1758(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a2 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v13[-v9];
  __int16 v25 = 0;
  uint64_t v11 = a2[2];
  uint64_t v14 = v6;
  uint64_t v15 = &v25;
  uint64_t v16 = a3;
  uint64_t v17 = a1;
  unsigned int v18 = (char *)&v25 + 1;
  type metadata accessor for AsyncChannel.State();
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Optional();
  uint64_t v12 = type metadata accessor for UnsafeResumption();
  type metadata accessor for Optional();
  sub_1004D3A38((void (*)(uint64_t))sub_1004D36FC, (uint64_t)v13, v11);
  if (v22)
  {
    uint64_t v19 = v22;
    uint64_t v20 = v23;
    char v21 = v24 & 1;
    sub_1004BD614(v12);
  }
  if ((v25 & 0x100) != 0 || v25 == 1)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v10, 1, 1, v6);
    (*(void (**)(void, unsigned char *, uint64_t))(v8 + 32))(*(void *)(*(void *)(a1 + 64) + 40), v10, v7);
    swift_continuation_resume();
  }
}

uint64_t sub_1004D1990@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X8>)
{
  if (*(unsigned char *)(result + 24) == 1)
  {
    *a2 = 1;
LABEL_19:
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(unsigned char *)(a6 + 16) = 0;
    return result;
  }
  uint64_t v8 = result;
  if (*(unsigned char *)(result + 8))
  {
    if (*(unsigned char *)(result + 8) == 1)
    {
      uint64_t v30 = *(void *)result;
      type metadata accessor for AsyncChannel.Awaiting();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      type metadata accessor for Set();
      Set.update(with:)();
      if (v28 != 1)
      {
        Set.remove(_:)();
        *a5 = 1;
      }
      uint64_t v11 = v30;
      swift_bridgeObjectRetain();
      char v12 = Set.isEmpty.getter();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v12)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v11 = 0;
        char v13 = 2;
      }
      else
      {
        char v13 = 1;
      }
      *(void *)uint64_t v8 = v11;
      *(unsigned char *)(v8 + 8) = v13;
    }
    else
    {
      uint64_t v19 = type metadata accessor for AsyncChannel.Awaiting();
      type metadata accessor for _ContiguousArrayStorage();
      swift_initStackObject();
      uint64_t v20 = static Array._adoptStorage(_:count:)();
      *(void *)uint64_t v21 = a3;
      *(void *)(v21 + 8) = a4;
      *(unsigned char *)(v21 + 16) = 0;
      type metadata accessor for Array();
      if (Array._getCount()())
      {
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v23 = (void *)sub_1004D3268(v20, v19, WitnessTable);
      }
      else
      {
        uint64_t v23 = &_swiftEmptySetSingleton;
      }
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v8 = v23;
      *(unsigned char *)(v8 + 8) = 1;
    }
    goto LABEL_19;
  }
  uint64_t v26 = *(void *)result;
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  uint64_t v14 = type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  RangeReplaceableCollection.removeFirst()();
  uint64_t v15 = v27;
  uint64_t v16 = v26;
  swift_bridgeObjectRetain();
  uint64_t v17 = Array.count.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17)
  {
    char v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
    char v18 = 2;
  }
  *(void *)uint64_t v8 = v16;
  *(unsigned char *)(v8 + 8) = v18;
  uint64_t v30 = a4;
  uint64_t result = sub_1004BD510(v15, (uint64_t)&v30, v14, &v27);
  uint64_t v24 = v28;
  char v25 = v29;
  *(void *)a6 = v27;
  *(void *)(a6 + 8) = v24;
  *(unsigned char *)(a6 + 16) = v25;
  return result;
}

uint64_t _s15AsyncAlgorithms0A7ChannelC6finishyyF_0()
{
  uint64_t v1 = *(void *)(*v0 + 80);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v30 = (char *)&v28 - v3;
  uint64_t v4 = v0[2];
  uint64_t v33 = v1;
  type metadata accessor for AsyncChannel.State();
  uint64_t v31 = v2;
  type metadata accessor for UnsafeContinuation();
  uint64_t v5 = type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  type metadata accessor for AsyncChannel.Awaiting();
  swift_getWitnessTable();
  type metadata accessor for Set();
  swift_getTupleTypeMetadata2();
  sub_1004D3A38((void (*)(uint64_t))sub_1004D3234, (uint64_t)v32, v4);
  uint64_t v7 = v34[0];
  uint64_t v6 = v34[1];
  if (Array.endIndex.getter())
  {
    uint64_t v8 = 4;
    do
    {
      uint64_t v9 = v8 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v11 = *(void *)(v7 + 8 * v8);
        uint64_t v12 = v8 - 3;
        if (__OFADD__(v9, 1)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v11 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        uint64_t v12 = v8 - 3;
        if (__OFADD__(v9, 1))
        {
LABEL_9:
          __break(1u);
          break;
        }
      }
      v34[0] = 0;
      (*(void (**)(void, void *, uint64_t))(*(void *)(v5 - 8) + 32))(*(void *)(*(void *)(v11 + 64) + 40), v34, v5);
      swift_continuation_resume();
      ++v8;
    }
    while (v12 != Array.endIndex.getter());
  }
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v14 = 0;
  uint64_t v15 = v6 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v6 + 56);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v30;
  uint64_t v21 = (void (**)(void, char *, uint64_t))(v29 + 32);
  while (v18)
  {
    unint64_t v22 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    unint64_t v23 = v22 | (v14 << 6);
LABEL_27:
    uint64_t v27 = *(void *)(*(void *)(v6 + 48) + 24 * v23 + 8);
    if (v27)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v20, 1, 1, v1);
      (*v21)(*(void *)(*(void *)(v27 + 64) + 40), v20, v31);
      uint64_t result = swift_continuation_resume();
    }
  }
  int64_t v24 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v24 >= v19) {
    return swift_release();
  }
  unint64_t v25 = *(void *)(v15 + 8 * v24);
  ++v14;
  if (v25) {
    goto LABEL_26;
  }
  int64_t v14 = v24 + 1;
  if (v24 + 1 >= v19) {
    return swift_release();
  }
  unint64_t v25 = *(void *)(v15 + 8 * v14);
  if (v25)
  {
LABEL_26:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v14 << 6);
    goto LABEL_27;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v19) {
    return swift_release();
  }
  unint64_t v25 = *(void *)(v15 + 8 * v26);
  if (v25)
  {
    int64_t v14 = v26;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v14 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v14 >= v19) {
      return swift_release();
    }
    unint64_t v25 = *(void *)(v15 + 8 * v14);
    ++v26;
    if (v25) {
      goto LABEL_26;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1004D2110@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 24) != 1)
  {
    *(unsigned char *)(a1 + 24) = 1;
    uint64_t v3 = *(void *)a1;
    if (!*(unsigned char *)(a1 + 8))
    {
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 2;
      *a2 = v3;
      goto LABEL_6;
    }
    if (*(unsigned char *)(a1 + 8) == 1)
    {
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 2;
      type metadata accessor for Optional();
      type metadata accessor for UnsafeContinuation();
      type metadata accessor for Optional();
      type metadata accessor for UnsafeContinuation();
      uint64_t result = static Array._allocateUninitialized(_:)();
      *a2 = result;
      a2[1] = v3;
      return result;
    }
  }
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  *a2 = static Array._allocateUninitialized(_:)();
LABEL_6:
  uint64_t v5 = type metadata accessor for AsyncChannel.Awaiting();
  uint64_t v6 = static Array._allocateUninitialized(_:)();
  if (Array._getCount()())
  {
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v8 = (void *)sub_1004D3268(v6, v5, WitnessTable);
  }
  else
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
  }
  uint64_t result = swift_bridgeObjectRelease();
  a2[1] = (uint64_t)v8;
  return result;
}

uint64_t sub_1004D22CC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1004D22EC, 0, 0);
}

uint64_t sub_1004D22EC()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[2].i64[1] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1004D23DC;
  uint64_t v3 = v0[1].i64[1];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v2, &unk_1006A9E60, v1, j___s15AsyncAlgorithms0A7ChannelC6finishyyF, v3, 0, 0, (char *)&type metadata for () + 8);
}

uint64_t sub_1004D23DC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10031B7D4, 0, 0);
}

uint64_t sub_1004D24F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[5] = *(void *)(*(void *)a2 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  void v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_1004D25A4, 0, 0);
}

uint64_t sub_1004D25A4()
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006A9E68 + dword_1006A9E68);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Optional();
  *uint64_t v1 = v0;
  v1[1] = sub_1004D26A8;
  uint64_t v2 = *(void *)(v0 + 24);
  return v4(v0 + 16, 0, 0, (uint64_t)sub_1004D36D0, v2);
}

uint64_t sub_1004D26A8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1004D27A4, 0, 0);
}

uint64_t sub_1004D27A4()
{
  uint64_t v1 = v0[2];
  if (v1)
  {
    uint64_t v3 = v0[7];
    uint64_t v2 = v0[8];
    uint64_t v5 = v0[5];
    uint64_t v4 = v0[6];
    uint64_t v6 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v2, v0[4], v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v2, 0, 1, v5);
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(*(void *)(v1 + 64) + 40), v2, v4);
    swift_continuation_resume();
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void sub_1004D2900(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[2];
  _OWORD v4[2] = *(void *)(*a2 + 80);
  v4[3] = a1;
  type metadata accessor for AsyncChannel.State();
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Optional();
  uint64_t v3 = type metadata accessor for UnsafeResumption();
  type metadata accessor for Optional();
  sub_1004D3A38((void (*)(uint64_t))sub_1004D36D8, (uint64_t)v4, v2);
  if (v6)
  {
    v4[5] = v6;
    v4[6] = v7;
    char v5 = v8 & 1;
    sub_1004BD614(v3);
  }
}

uint64_t sub_1004D2A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24) != 1)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      if (*(unsigned char *)(a1 + 8) == 1)
      {
        uint64_t v21 = *(void *)a1;
        type metadata accessor for AsyncChannel.Awaiting();
        swift_bridgeObjectRetain();
        swift_getWitnessTable();
        type metadata accessor for Set();
        Set.removeFirst()();
        uint64_t v16 = v19;
        uint64_t v8 = v21;
        swift_bridgeObjectRetain();
        uint64_t v9 = Set.count.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v9)
        {
          char v10 = 1;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = 0;
          char v10 = 2;
        }
        *(void *)a1 = v8;
        *(unsigned char *)(a1 + 8) = v10;
        uint64_t v17 = v16;
        type metadata accessor for Optional();
        type metadata accessor for UnsafeContinuation();
        uint64_t v5 = type metadata accessor for Optional();
        uint64_t v6 = &v17;
        goto LABEL_12;
      }
      type metadata accessor for Optional();
      type metadata accessor for UnsafeContinuation();
      type metadata accessor for Optional();
      type metadata accessor for UnsafeContinuation();
      type metadata accessor for _ContiguousArrayStorage();
      swift_allocObject();
      uint64_t v12 = static Array._adoptStorage(_:count:)();
      *char v13 = a2;
      uint64_t result = type metadata accessor for Array();
      *(void *)a1 = v12;
    }
    else
    {
      uint64_t v18 = *(void *)a1;
      uint64_t v21 = a2;
      type metadata accessor for Optional();
      type metadata accessor for UnsafeContinuation();
      type metadata accessor for Optional();
      type metadata accessor for UnsafeContinuation();
      type metadata accessor for Array();
      uint64_t result = Array.append(_:)();
      *(void *)a1 = v18;
    }
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  uint64_t v21 = 0;
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = &v21;
LABEL_12:
  uint64_t result = sub_1004BD510(a2, (uint64_t)v6, v5, &v18);
  uint64_t v14 = v19;
  char v15 = v20;
  *(void *)a3 = v18;
  *(void *)(a3 + 8) = v14;
  *(unsigned char *)(a3 + 16) = v15;
  return result;
}

uint64_t AsyncChannel.send(_:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  _OWORD v4[2] = a1;
  v4[3] = v1;
  v4[1] = sub_100161724;
  return _swift_task_switch(sub_1004D22EC, 0, 0);
}

uint64_t AsyncChannel.makeAsyncIterator()()
{
  return swift_retain();
}

uint64_t AsyncChannel.deinit()
{
  swift_release();
  return v0;
}

uint64_t AsyncChannel.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1004D2E40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = AsyncChannel.makeAsyncIterator()();
  uint64_t result = swift_release();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

uint64_t type metadata accessor for AsyncChannel.State()
{
  return sub_100183A74();
}

void *sub_1004D2EA0()
{
  return &protocol witness table for Never;
}

uint64_t sub_1004D2EAC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1004D2EC8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncChannel()
{
  return sub_100183A74();
}

uint64_t sub_1004D2F28(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_1004D2F60()
{
  return swift_release();
}

uint64_t sub_1004D2F68(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t sub_1004D2FB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t sub_1004D2FF8(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1004D3040(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AsyncChannel.Iterator()
{
  return sub_100183A74();
}

uint64_t sub_1004D3098()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004D30A0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1004D30E8(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t sub_1004D3148(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t sub_1004D3198(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1004D31EC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1004D3234@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004D2110(a1, a2);
}

uint64_t type metadata accessor for AsyncChannel.Awaiting()
{
  return sub_100183A74();
}

uint64_t sub_1004D3268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  char v50 = (char *)&v38 - v11;
  uint64_t v39 = v12;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v38 - v13;
  if (Array.count.getter())
  {
    type metadata accessor for _SetStorage();
    char v15 = (unsigned char *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    char v15 = &_swiftEmptySetSingleton;
  }
  Swift::Int v43 = Array._getCount()();
  if (!v43) {
    return (uint64_t)v15;
  }
  uint64_t v16 = 0;
  char v48 = (void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
  char v49 = v15 + 56;
  uint64_t v45 = v6 + 32;
  int v47 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v40 = v6;
  uint64_t v41 = v5;
  int v42 = v14;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      uint64_t v18 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
      v18(v14, (uint64_t *)(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v16), a2);
      BOOL v19 = __OFADD__(v16, 1);
      uint64_t v20 = v16 + 1;
      if (v19) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v39 != 8) {
        goto LABEL_23;
      }
      uint64_t v51 = result;
      uint64_t v18 = *v48;
      (*v48)(v14, &v51, a2);
      swift_unknownObjectRelease();
      BOOL v19 = __OFADD__(v16, 1);
      uint64_t v20 = v16 + 1;
      if (v19)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v15;
      }
    }
    uint64_t v46 = v20;
    unsigned int v44 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v44(v50, v14, a2);
    uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v22 = v15;
    uint64_t v23 = -1 << v15[32];
    unint64_t v24 = v21 & ~v23;
    unint64_t v25 = v24 >> 6;
    uint64_t v26 = *(void *)&v49[8 * (v24 >> 6)];
    uint64_t v27 = 1 << v24;
    uint64_t v28 = *(void *)(v6 + 72);
    if (((1 << v24) & v26) != 0)
    {
      uint64_t v29 = ~v23;
      do
      {
        v18(v9, (uint64_t *)(v22[6] + v28 * v24), a2);
        uint64_t v30 = a3;
        char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        int v32 = *v47;
        (*v47)(v9, a2);
        if (v31)
        {
          v32(v50, a2);
          a3 = v30;
          uint64_t v6 = v40;
          uint64_t v5 = v41;
          char v15 = v22;
          goto LABEL_7;
        }
        unint64_t v24 = (v24 + 1) & v29;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = *(void *)&v49[8 * (v24 >> 6)];
        uint64_t v27 = 1 << v24;
        a3 = v30;
      }
      while ((v26 & (1 << v24)) != 0);
      uint64_t v6 = v40;
      uint64_t v5 = v41;
    }
    uint64_t v33 = v50;
    *(void *)&v49[8 * v25] = v27 | v26;
    unint64_t v34 = v22[6] + v28 * v24;
    char v15 = v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v44)(v34, v33, a2);
    uint64_t v36 = v22[2];
    BOOL v19 = __OFADD__(v36, 1);
    uint64_t v37 = v36 + 1;
    if (v19) {
      break;
    }
    void v22[2] = v37;
LABEL_7:
    uint64_t v14 = v42;
    uint64_t v16 = v46;
    if (v46 == v43) {
      return (uint64_t)v15;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1004D3624(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100161724;
  return sub_1004D24F4(a1, v5, v4);
}

void sub_1004D36D0(uint64_t a1)
{
  sub_1004D2900(a1, v1);
}

uint64_t sub_1004D36D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004D2A10(a1, *(void *)(v2 + 24), a2);
}

void sub_1004D36F4(uint64_t a1)
{
  sub_1004D1758(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1004D36FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004D1990(a1, *(unsigned char **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char **)(v2 + 48), a2);
}

uint64_t sub_1004D3720@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  type metadata accessor for AsyncChannel.Emission();
  uint64_t result = sub_1004D14D4(v3);
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for AsyncChannel.Emission()
{
  return sub_100183A74();
}

uint64_t sub_1004D378C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = v2;
  *(void *)(result + 16) = v2 + 1;
  return result;
}

uint64_t sub_1004D37A0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1004D37FC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1004D3850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_1004D3858(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1004D3890(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004D38D4(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004D3910(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1004D3958(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1004D399C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1004D39B4(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t sub_1004D39CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1004D39F4()
{
  return swift_initClassMetadata2();
}

void sub_1004D3A38(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)a3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(void *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1004D3AEC()
{
  ManagedBuffer.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ManagedCriticalState.LockedBuffer()
{
  return sub_100183A74();
}

uint64_t type metadata accessor for ManagedCriticalState()
{
  return sub_100183A74();
}

uint64_t sub_1004D3B70()
{
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
}

uint64_t sub_1004D3BD4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1004D3BFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v18 - v11;
  __chkstk_darwin(v10);
  (*(void (**)(char *))(v14 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_1004D3DC8(a1, (uint64_t)v12, a2);
  if (v2)
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v16(v9, v12, v5);
    swift_allocError();
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v16)(v17, v9, v5);
  }
  return result;
}

uint64_t sub_1004D3DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a3, v3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v3, *(void *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

void sub_1004D3E98(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "self.noteContainerViewMode should not be ICNoteContainerViewModeUnspecified.", v1, 2u);
}

void sub_1004D3EDC()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Could not open application because %@", v2, v3, v4, v5, v6);
}

void sub_1004D3F44()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Attempting sync because we're missing the note", v2, v3, v4, v5, v6);
}

void sub_1004D3F78(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Showing note (%@) -- no sync was needed", buf, 0xCu);
}

void sub_1004D3FD0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D4040(uint64_t a1)
{
  uint64_t v1 = [sub_1000549A4(a1) ic_loggingIdentifier];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Showing note (%@) after syncing", v4, v5, v6, v7, v8);
}

void sub_1004D40C4()
{
  sub_10005498C();
  sub_1000549B8((void *)&_mh_execute_header, v0, (uint64_t)v0, "Unable to show note (%@) due to a syncing error: %@", v1);
}

void sub_1004D413C(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Attempting sync because we're missing the inline attachment (%@) or note (%@)", buf, 0x16u);
}

void sub_1004D41AC(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Showing inline attachment (%@) -- no sync was needed", buf, 0xCu);
}

void sub_1004D4204()
{
  sub_10005498C();
  sub_1000549B8((void *)&_mh_execute_header, v0, v1, "Unable to show inline attachment (%@) or note (%@) after syncing", v2);
}

void sub_1004D4278(uint64_t a1)
{
  uint64_t v1 = [sub_1000549A4(a1) ic_loggingIdentifier];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Showing note (%@) after syncing (couldn't find the inline attachment)", v4, v5, v6, v7, v8);
}

void sub_1004D42FC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [sub_1000549A4(a1) ic_loggingIdentifier];
  uint64_t v6 = [*(id *)(*(void *)(*(void *)a2 + 8) + 40) ic_loggingIdentifier];
  int v7 = 138412546;
  uint8_t v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Showing note (%@) or inline attachment (%@) after syncing", (uint8_t *)&v7, 0x16u);
}

void sub_1004D43C8()
{
  sub_10005498C();
  __int16 v4 = v0;
  uint64_t v5 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Unable to show inline attachment (%@) or note (%@) due to a syncing error: %@", v3, 0x20u);
}

void sub_1004D4454()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Dismissing already-presented attachment", v2, v3, v4, v5, v6);
}

void sub_1004D4488()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Done dismissing already-presented attachment", v2, v3, v4, v5, v6);
}

void sub_1004D44BC()
{
  sub_100032C44();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Couldn't get FBSScene to dismiss system paper via BSAction/ICSystemPaperSceneViewController.", v1, 2u);
}

void sub_1004D44FC(void *a1)
{
  uint64_t v1 = [a1 description];
  sub_100032C50();
  sub_100032C78((void *)&_mh_execute_header, v2, v3, "Error closing aux window: %@", v4, v5, v6, v7, v8);
}

void sub_1004D4580()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Aux scene destruction finished.", v2, v3, v4, v5, v6);
}

void sub_1004D45B4()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "About to open startup presenter", v2, v3, v4, v5, v6);
}

void sub_1004D45E8(char a1, char a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1 & 1;
  __int16 v4 = 1024;
  int v5 = a2 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "willShowWelcomeScreen: %d forceWelcomeScreen=%d", (uint8_t *)v3, 0xEu);
}

void sub_1004D4678(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D46E8()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote on lock screen", v2, v3, v4, v5, v6);
}

void sub_1004D471C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote on lock screen after tapping action arrow", v2, v3, v4, v5, v6);
}

void sub_1004D4750()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote on lock screen after tapping iCloud sharing button", v2, v3, v4, v5, v6);
}

void sub_1004D4784()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote after tapping attachment", v2, v3, v4, v5, v6);
}

void sub_1004D47B8()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Couldn't resolve noteContainer for containerObjectID %@ in enforcedNoteContainerViewModeForContainerObjectID.", v2, v3, v4, v5, v6);
}

void sub_1004D4820(void *a1)
{
  uint64_t v1 = [a1 currentVirtualSmartFolderType];
  sub_100032C50();
  sub_100032C78((void *)&_mh_execute_header, v2, v3, "Invalid virtual smart folder type {type: %@}", v4, v5, v6, v7, v8);
}

void sub_1004D48A8()
{
  sub_100032C44();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "The Notes today extension is not supported anymore.", v1, 2u);
}

void sub_1004D48E8(void *a1)
{
  uint64_t v1 = [a1 ic_loggingIdentifier];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Setting isSystemPaper on newly created note: %@", v4, v5, v6, v7, v8);
}

void sub_1004D496C()
{
  sub_1000549D0();
  uint64_t v3 = v0;
  sub_1000549B8((void *)&_mh_execute_header, v1, (uint64_t)v1, "Failed to create new note for %@ with error: %@", v2);
}

void sub_1004D49E0(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [a1 localizedDescription];
  sub_1000549D0();
  uint64_t v8 = a2;
  sub_1000549B8((void *)&_mh_execute_header, a3, v6, "Error %@ at URL (getting type identifier): %@", v7);
}

void sub_1004D4A7C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote after tapping Note Link", v2, v3, v4, v5, v6);
}

void sub_1004D4AB0()
{
  sub_100032C50();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Handling QuickNote URL: %@", v1, 0xCu);
}

void sub_1004D4B24()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "Tried to provide feedback on a nil attachment.", v2, v3, v4, v5, v6);
}

void sub_1004D4B58()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "Tried to provide feedback on something that wasn't an audio attachment.", v2, v3, v4, v5, v6);
}

void sub_1004D4B8C()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "Unable to ensure fallback audio exists", v2, v3, v4, v5, v6);
}

void sub_1004D4BC0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Trying to create folder creation menu, but we have no accounts.", v1, 2u);
}

void sub_1004D4C04()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Enqueuing final sync after moving to the background", v2, v3, v4, v5, v6);
}

void sub_1004D4C38()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Cloud context received application did enter background notification", v2, v3, v4, v5, v6);
}

void sub_1004D4C6C()
{
  os_log_t v0 = +[UIApplication sharedApplication];
  [v0 backgroundTimeRemaining];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Canceling all operations because our background sync assertion is expiring in %f seconds", v3, v4, v5, v6, 0);
}

void sub_1004D4D00()
{
  os_log_t v0 = +[UIApplication sharedApplication];
  [v0 backgroundTimeRemaining];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Background sync assertion is expiring in %f seconds but allowing operations to remain in sync bubble", v3, v4, v5, v6, 0);
}

void sub_1004D4D94(char a1, uint64_t a2, os_log_t log)
{
  CFStringRef v3 = @"YES";
  if ((a1 & 1) == 0) {
    CFStringRef v3 = @"NO";
  }
  int v4 = 138412546;
  CFStringRef v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Background sync task scheduled {success: %@, error: %@}", (uint8_t *)&v4, 0x16u);
}

void sub_1004D4E34()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Finished final sync after moving to the background", v2, v3, v4, v5, v6);
}

void sub_1004D4E68()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Cloud context received application will enter foreground notification", v2, v3, v4, v5, v6);
}

void sub_1004D4E9C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid account type for account: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D4F14(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "An error has occurred in deleteSharesForObjects: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1004D4F90(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "An error has occurred in deleteSharesIfNecessaryForContentsOfFolder: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1004D500C(void *a1, NSObject *a2)
{
  int v3 = [a1 note];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Trying to show unsupported note in note results thumbnail view {note: %@}", (uint8_t *)&v4, 0xCu);
}

void sub_1004D50A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D50DC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D5114(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D514C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "self.targetNoteViewMode should not be ICNoteContainerViewModeUnspecified.", v1, 2u);
}

void sub_1004D5190(uint64_t a1, const char *a2, NSObject *a3)
{
  uint64_t v5 = (objc_class *)objc_opt_class();
  uint8_t v6 = NSStringFromClass(v5);
  uint64_t v7 = NSStringFromSelector(a2);
  int v8 = 138412546;
  __int16 v9 = v6;
  __int16 v10 = 2112;
  uint64_t v11 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%@ %@ ranking strategy not found", (uint8_t *)&v8, 0x16u);
}

void sub_1004D5258(void *a1)
{
  uint64_t v1 = [a1 taskIdentifier];
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Current Notes version is equal last run Notes version — skipping {taskIdentifier: %@}", v4, v5, v6, v7, 2u);
}

void sub_1004D52E0(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 taskIdentifier];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Current Notes version is greater than last run Notes version — skipping {taskIdentifier: %@}", (uint8_t *)&v4, 0xCu);
}

void sub_1004D5378(void *a1)
{
  uint64_t v1 = [a1 taskIdentifier];
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Last run Notes version for task before Spring 2022 — setting minimum {taskIdentifier: %@}", v4, v5, v6, v7, 2u);
}

void sub_1004D5400(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error batch deleting orphaned HTML notes: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D5478(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "About to batch delete orphaned HTML notes", v1, 2u);
}

void sub_1004D54BC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error batch deleting orphaned HTML attachments: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D5534(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "About to batch delete orphaned HTML attachments", v1, 2u);
}

void sub_1004D5578(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D55E4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D5650(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D56BC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error importing note from file at %@: %@", (uint8_t *)&v3, 0x16u);
}

void sub_1004D5744(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  __int16 v5 = [*a2 searchIndexingIdentifier];
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2112;
  __int16 v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%@: An object hidden from search is retrieved from indexing: %@", (uint8_t *)&v6, 0x16u);
}

void sub_1004D57F8(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v7 = [a2 ic_loggingDescription];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Moving owned, password protected note from shared folder into default folder: %@", a1, 0xCu);
}

void sub_1004D5870(void *a1, NSObject *a2)
{
  int v3 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a1 count]);
  int v4 = 138412290;
  __int16 v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Found %@ owned, password protected note(s) in a shared folder.", (uint8_t *)&v4, 0xCu);
}

void sub_1004D591C(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v7 = [a2 shortLoggingDescription];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "fixing minimum supported version for shared root folder %@", a1, 0xCu);
}

void sub_1004D5994(void *a1, NSObject *a2)
{
  int v3 = 134217984;
  id v4 = [a1 count];
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Found %lu shared root folders to check", (uint8_t *)&v3, 0xCu);
}

void sub_1004D5A20(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Starting fixing minimum supported version for shared folders", v1, 2u);
}

void sub_1004D5A64(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Already ran %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D5ADC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error excluding %@ from backup %@", (uint8_t *)&v3, 0x16u);
}

void sub_1004D5B64(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Haven't run %@ yet, running now", (uint8_t *)&v2, 0xCu);
}

void sub_1004D5BDC(NSObject *a1)
{
  int v2 = +[ICDebugUtilities stateOfTheWorld];
  sub_100032C50();
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "State of the world:\n%@", v3, 0xCu);
}

void sub_1004D5C78()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Configuration override - not checking for shared notes or folders - requesting authorization for user notifications", v2, v3, v4, v5, v6);
}

void sub_1004D5CAC()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Notes became active and has shared notes or shared folders", v2, v3, v4, v5, v6);
}

void sub_1004D5CE0()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Locking All PW Notes After Background Expired", v2, v3, v4, v5, v6);
}

void sub_1004D5D14()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "PW Notes Locked", v2, v3, v4, v5, v6);
}

void sub_1004D5D48()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Received remote notification: %@", v2, v3, v4, v5, v6);
}

void sub_1004D5DB0(uint64_t a1, NSObject *a2, double a3)
{
  int v3 = 134218242;
  double v4 = a3;
  __int16 v5 = 2112;
  uint64_t v6 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to register for remote notifications. Retrying after %.0f seconds: %@", (uint8_t *)&v3, 0x16u);
}

void sub_1004D5E34()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Retrying to register for remote notifications", v2, v3, v4, v5, v6);
}

void sub_1004D5E68()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "applicationDidReceiveMemoryWarning", v2, v3, v4, v5, v6);
}

void sub_1004D5E9C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Locking PW Notes from device locked notification", v2, v3, v4, v5, v6);
}

void sub_1004D5ED0()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Background task created for %@", v2, v3, v4, v5, v6);
}

void sub_1004D5F38(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Background task assertion for mention notification (%@) expired", (uint8_t *)&v3, 0xCu);
}

void sub_1004D5FB4()
{
  sub_100032C50();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Unbalanced calls to mentionNotificationWillSend/mentionNotificationDidSend for %@", v1, 0xCu);
}

void sub_1004D6028()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Background task ended for %@", v2, v3, v4, v5, v6);
}

void sub_1004D6090()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Finishing database-locking operation", v2, v3, v4, v5, v6);
}

void sub_1004D60C4()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Accounts did change notification received", v2, v3, v4, v5, v6);
}

void sub_1004D60F8()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Account will be deleted notification received", v2, v3, v4, v5, v6);
}

void sub_1004D612C(char a1, uint64_t a2, os_log_t log)
{
  int v3 = 134218240;
  uint64_t v4 = a2;
  __int16 v5 = 1024;
  int v6 = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Password change count is %lu for isReset = %d", (uint8_t *)&v3, 0x12u);
}

void sub_1004D61B8(uint64_t a1, NSObject *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Instrumenting password changes for isReset = %d", (uint8_t *)v3, 8u);
}

void sub_1004D6234()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Notes dismissed startup screen and has shared notes or shared folders", v2, v3, v4, v5, v6);
}

void sub_1004D6268(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Setting note editor note to nil in resetMigrationStateForInternalSettingsAndShowMigrationScreenIfNecessary", buf, 2u);
}

void sub_1004D62A8()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Will present user notification: %@", v2, v3, v4, v5, v6);
}

void sub_1004D6310()
{
  sub_100032C50();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Trying to show inline attachment (%@) in note (%@) after user tapped notification", v2, 0x16u);
}

void sub_1004D6394()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Trying to show note (%@) after user tapped notification", v2, v3, v4, v5, v6);
}

void sub_1004D63FC()
{
  sub_100032C44();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Couldn't find a valid object to show after user tapped notification", v1, 2u);
}

void sub_1004D643C()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Received user notification response: %@", v2, v3, v4, v5, v6);
}

void sub_1004D64A4()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Not requesting authorization to show notifications because the device is locked or we are on secure screen", v2, v3, v4, v5, v6);
}

void sub_1004D64D8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "No PNG gallery preview images to delete", v1, 2u);
}

void sub_1004D651C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [sub_100032CD0(a1, a2) shortLoggingDescription];
  *uint64_t v3 = 138412290;
  *uint64_t v2 = v4;
  sub_100032DC0((void *)&_mh_execute_header, v5, v6, "Deleting PNG preview image for: %@");
}

void sub_1004D6578(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "We should never create import account operation on managed accounts", v1, 2u);
}

void sub_1004D65BC(id *a1)
{
  uint64_t v1 = [*a1 legacyAccountObjectID];
  sub_1000851BC();
  sub_100032D08((void *)&_mh_execute_header, v2, v3, "Error fetching legacy account being imported (%@): %@", v4, v5, v6, v7, v8);
}

void sub_1004D6650(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 legacyAccountObjectID];
  sub_100032C50();
  sub_100032CE4((void *)&_mh_execute_header, a2, v4, "Starting migration for legacy account: %@", v5);
}

void sub_1004D66DC()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Error saving after importing legacy note batch: %@", v2, v3, v4, v5, v6);
}

void sub_1004D6744()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Error fetching legacy note while migrating: %@", v2, v3, v4, v5, v6);
}

void sub_1004D67AC(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "No file URL or identifier for attachment", buf, 2u);
}

void sub_1004D67EC(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Imported note (%@) to folder (%@)", buf, 0x16u);
}

void sub_1004D6854()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Error fetching legacy attachment during import: %@", v2, v3, v4, v5, v6);
}

void sub_1004D68BC()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Found a legacy note that has not yet been downloaded from the server or is just blank. Either way, we don't want it. (%@)", v2, v3, v4, v5, v6);
}

void sub_1004D6924()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "We have not imported this note (%@)", v2, v3, v4, v5, v6);
}

void sub_1004D698C(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(void *)(a2 + 4) = a1;
  sub_100032CE4((void *)&_mh_execute_header, a3, (uint64_t)a3, "We have already imported this note, and the legacy content hash is the same as the one we imported (%@)", (uint8_t *)a2);
}

void sub_1004D69DC(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(void *)(a2 + 4) = a1;
  sub_100032CE4((void *)&_mh_execute_header, a3, (uint64_t)a3, "We have already imported this note, and the legacy modification date is the same as we the one we imported (%@)", (uint8_t *)a2);
}

void sub_1004D6A2C()
{
  sub_100032C98(__stack_chk_guard);
  sub_100032CFC();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "We have already imported a newer version of this note (%@)", v2, v3, v4, v5, v6);
}

void sub_1004D6A94(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(void *)(a2 + 4) = a1;
  sub_100032CE4((void *)&_mh_execute_header, a3, (uint64_t)a3, "We have imported this note, and the legacy version is newer than the one we imported, but the user has not edited this note since import (%@)", (uint8_t *)a2);
}

void sub_1004D6AE4()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Another device has deleted this legacy note (%@)", v2, v3, v4, v5, v6);
}

void sub_1004D6B4C()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Another device has deleted this legacy note (%@), but we have a different version", v2, v3, v4, v5, v6);
}

void sub_1004D6BB4()
{
  sub_100032C50();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Copying legacy note on import (%@)", v2, v3, v4, v5, v6);
}

void sub_1004D6C1C()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Error saving after importing legacy folders: %@", v2, v3, v4, v5, v6);
}

void sub_1004D6C84(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "About to import all legacy folders", v1, 2u);
}

void sub_1004D6CC8()
{
  sub_100032C98(__stack_chk_guard);
  sub_100032CFC();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Folder (%@) has parent folder", v2, v3, v4, v5, v6);
}

void sub_1004D6D30()
{
  sub_100032C98(__stack_chk_guard);
  sub_100032CFC();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Importing legacy folder (%@)", v2, v3, v4, v5, v6);
}

void sub_1004D6D98()
{
  sub_100032C98(__stack_chk_guard);
  sub_100032CFC();
  sub_100032CB4((void *)&_mh_execute_header, v0, v1, "Found legacy tombstone for folder (%@), using default folder", v2, v3, v4, v5, v6);
}

void sub_1004D6E00(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  sub_100032C50();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not get a permanent ID for %@", v5, 0xCu);
}

void sub_1004D6E9C()
{
  os_log_t v0 = (objc_class *)objc_opt_class();
  uint64_t v1 = NSStringFromClass(v0);
  sub_1000851BC();
  sub_100032D08((void *)&_mh_execute_header, v2, v3, "Error obtaining permanent ID for %@: %@", v4, v5, v6, v7, v8);
}

uint64_t sub_1004D6F34()
{
  dlerror();
  uint64_t v0 = abort_report_np();
  return sub_1004D6F58(v0);
}

void sub_1004D6F58()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Cannot fetch in-app message {error: %@}", v2, v3, v4, v5, v6);
}

void sub_1004D6FC0(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *a1;
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error saving after notes zone deleted by user for account ID %@: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1004D704C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D70BC(void *a1)
{
  uint64_t v2 = [a1 className];
  uint64_t v3 = [a1 recordID];
  int v4 = [v3 recordName];
  sub_100032DE0();
  sub_100032D28((void *)&_mh_execute_header, v5, v6, "%@ (%@) hasn't been fully pushed to the cloud. Not deleting.", v7, v8, v9, v10, v11);
}

void sub_1004D7170(void *a1)
{
  uint64_t v1 = [a1 zoneName];
  sub_100032C50();
  sub_100032D28((void *)&_mh_execute_header, v2, v3, "Received an error that a zone (%@) wasn't found. Re-uploading everything for that zone for accountID %@.", v4, v5, v6, v7, v8);
}

void sub_1004D720C(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v7 = [a2 shortLoggingDescription];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Re-uploading record (%@) after zone reset", a1, 0xCu);
}

void sub_1004D7284(void *a1)
{
  uint64_t v1 = [a1 recordName];
  sub_100032C50();
  sub_100032D28((void *)&_mh_execute_header, v2, v3, "Setting the user record name for the CloudKit account to %@ for account ID %@", v4, v5, v6, v7, v8);
}

void sub_1004D7324()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "No CloudKit account, so no need to re-sync", v2, v3, v4, v5, v6);
}

void sub_1004D7358()
{
  sub_100032C50();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Found previous OS version dictionary: %@", v1, 0xCu);
}

void sub_1004D73CC()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Checking if we need to re-sync password protected notes", v2, v3, v4, v5, v6);
}

void sub_1004D7400()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "No crypto data on user record", v2, v3, v4, v5, v6);
}

void sub_1004D7434()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Error fetching user record when checking for re-sync: %@", v2, v3, v4, v5, v6);
}

void sub_1004D749C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Already updated iCloud account bags", v2, v3, v4, v5, v6);
}

void sub_1004D74D0()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Updating account bags for iCloud accounts", v2, v3, v4, v5, v6);
}

void sub_1004D7504(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Updated account bag for %@", (uint8_t *)&v3, 0xCu);
}

void sub_1004D7580()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Already fixed gallery sub attachments", v2, v3, v4, v5, v6);
}

void sub_1004D75B4()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Fixing gallery sub attachments", v2, v3, v4, v5, v6);
}

void sub_1004D75E8(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 shortLoggingDescription];
  sub_100032C50();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Parent attachment already set for: %@", v4, 0xCu);
}

void sub_1004D767C(void *a1, id *a2)
{
  uint64_t v3 = [a1 shortLoggingDescription];
  uint64_t v4 = [*a2 shortLoggingDescription];
  sub_100032DE0();
  sub_100032D28((void *)&_mh_execute_header, v5, v6, "Requesting sub attachment: %@ for: %@", v7, v8, v9, v10, v11);
}

void sub_1004D7720()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Stopping all CloudKit operations after deleting CloudKit account", v2, v3, v4, v5, v6);
}

void sub_1004D7754()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Updating cloud context state after accounts changed", v2, v3, v4, v5, v6);
}

uint64_t sub_1004D7788()
{
  uint64_t v0 = abort_report_np();
  return sub_1004D77B0(v0);
}

void sub_1004D77B0()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Creating active vacuum", v2, v3, v4, v5, v6);
}

void sub_1004D77E4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D7850(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D78BC()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "We're overdue for our next database vacuum. Scheduling one soon.", v2, v3, v4, v5, v6);
}

void sub_1004D78F0()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Starting database vacuum policy", v2, v3, v4, v5, v6);
}

void sub_1004D7924()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Invalidating previous timer", v2, v3, v4, v5, v6);
}

void sub_1004D7958()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Vacuum timer fired", v2, v3, v4, v5, v6);
}

void sub_1004D798C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Vacuuming modern database", v2, v3, v4, v5, v6);
}

void sub_1004D79C0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D7A2C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D7A9C(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error vaccuming HTML database at %@", (uint8_t *)&v3, 0xCu);
}

void sub_1004D7B18(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Cannot create ICASLayoutTypeEnum for ICNoteContainerViewModeUnspecified: defaulting to ICASLayoutTypeEnum_list.", v1, 2u);
}

void sub_1004D7B5C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error removing app data: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D7BD4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error dumping state of the world: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D7C4C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error writing state dump: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D7CC4(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Marked records as needing fetching {identifier: %@, #objects: %@}", buf, 0x16u);
}

void sub_1004D7D34(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 identifier];
  uint64_t v5 = [a1 modifiedAfterDateString];
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2112;
  uint64_t v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Marking records as needing fetching… {identifier: %@, modifiedAfterDate: %@}", (uint8_t *)&v6, 0x16u);
}

void sub_1004D7DFC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Resetting replica IDs after backup restore…", v1, 2u);
}

void sub_1004D7E40()
{
  sub_100032CA8();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 2u);
}

void sub_1004D7E80()
{
  os_log_t v1 = (objc_class *)objc_opt_class();
  NSStringFromClass(v1);
  objc_claimAutoreleasedReturnValue();
  os_log_type_t v2 = (const char *)sub_100090F74();
  uint64_t v3 = NSStringFromSelector(v2);
  sub_100032DE0();
  sub_100032D28((void *)&_mh_execute_header, v4, v5, "%@ %@ previous note was deleted", v6, v7, v8, v9, v10);
}

void sub_1004D7F24(void *a1)
{
  [a1 noteEditorViewController];
  objc_claimAutoreleasedReturnValue();
  os_log_type_t v2 = [(id)sub_100090F74() noteEditorViewController];
  uint64_t v3 = [v2 note];
  uint64_t v4 = [v3 shortLoggingDescription];
  sub_100032DE0();
  sub_100032D28((void *)&_mh_execute_header, v5, v6, "Begin session with noteEditor %@ note %@", v7, v8, v9, v10, v11);
}

void sub_1004D7FEC(void *a1)
{
  [a1 noteEditorViewController];
  objc_claimAutoreleasedReturnValue();
  os_log_type_t v2 = [(id)sub_100090F74() noteEditorViewController];
  uint64_t v3 = [v2 note];
  uint64_t v4 = [v3 shortLoggingDescription];
  sub_100032DE0();
  sub_100032D28((void *)&_mh_execute_header, v5, v6, "Save session with noteEditor %@ note %@", v7, v8, v9, v10, v11);
}

void sub_1004D80B4(void *a1)
{
  [a1 noteEditorViewController];
  objc_claimAutoreleasedReturnValue();
  os_log_type_t v2 = [(id)sub_100090F74() noteEditorViewController];
  uint64_t v3 = [v2 note];
  uint64_t v4 = [v3 shortLoggingDescription];
  sub_100032DE0();
  sub_100032D28((void *)&_mh_execute_header, v5, v6, "End session with noteEditor %@ note %@", v7, v8, v9, v10, v11);
}

void sub_1004D817C()
{
  sub_100032CA8();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 8u);
}

void sub_1004D81F4()
{
  sub_100032CA8();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x12u);
}

void sub_1004D8278()
{
  sub_100032CA8();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0xCu);
}

void sub_1004D82F0(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Showing debug spinner", v1, 2u);
}

void sub_1004D8334(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Hiding debug spinner", v1, 2u);
}

void sub_1004D8378(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(a1 + 32) objectID];
  int v6 = 138412546;
  uint64_t v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Couldn't delete shares for folder {folderID: %@, error: %@}", (uint8_t *)&v6, 0x16u);
}

void sub_1004D842C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error updating paper document scan attachment sections: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D84A4()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Cancelled current audio recording session after closing auxiliary window", v2, v3, v4, v5, v6);
}

void sub_1004D84D8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error cancelling current audio recording session after closing auxiliary window {error: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_1004D8550()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "scene has not become foreground - returning scene session's stateRestorationActivity", v2, v3, v4, v5, v6);
}

void sub_1004D8584(uint64_t a1, NSObject *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "-[ICWindowSceneDelegate scene:didFailToContinueUserActivityWithType:error:]";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: Did fail to continue user activity with error: %@", (uint8_t *)&v2, 0x16u);
}

void sub_1004D8610()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Defaults set to launch to notes list", v2, v3, v4, v5, v6);
}

void sub_1004D8644()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Defaults set to launch to folder list", v2, v3, v4, v5, v6);
}

void sub_1004D8678(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "-[ICWindowSceneDelegate performPPTForegroundLaunchTasksIfNecessary]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v1, 0xCu);
}

void sub_1004D86FC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Received CKShareMetadata with no share URL. %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D8774(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v7 = [a2 targetContentIdentifier];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "userActivity.targetContentIdentifier is not a valid URL: %@", a1, 0xCu);
}

void sub_1004D87EC(void *a1, NSObject *a2)
{
  int v3 = 134217984;
  id v4 = [a1 count];
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Found %ld deleted notes that aren't in the trash", (uint8_t *)&v3, 0xCu);
}

void sub_1004D8878(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Looking for deleted notes that aren't in the trash and putting them there", v1, 2u);
}

void sub_1004D88BC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D88F4(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v7 = [a2 ic_loggingIdentifier];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "Skipping account because we were unable to save the MOC: %@", a1, 0xCu);
}

void sub_1004D896C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D89A4(void *a1, void *a2, NSObject *a3)
{
  uint8_t v6 = [a1 ic_loggingIdentifier];
  uint64_t v7 = [a1 serverSideUpdateTaskLastCompletedBuild];
  __int16 v8 = [a2 currentBuild];
  uint64_t v9 = [a2 platformName];
  uint64_t v10 = [a1 serverSideUpdateTaskContinuationToken];
  uint8_t v11 = [v10 ic_sha256];
  int v12 = 138413314;
  uint64_t v13 = v6;
  __int16 v14 = 2112;
  char v15 = v7;
  __int16 v16 = 2112;
  uint64_t v17 = v8;
  __int16 v18 = 2112;
  BOOL v19 = v9;
  __int16 v20 = 2112;
  uint64_t v21 = v11;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Running tasks for account %@ (previous=%@, current=%@, platform=%@, token=%@)", (uint8_t *)&v12, 0x34u);
}

void sub_1004D8AE0(id *a1, NSObject *a2)
{
  int v3 = [*a1 ic_loggingIdentifier];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Aborting tasks for account (%@) because the MOC failed to save", (uint8_t *)&v4, 0xCu);
}

void sub_1004D8B7C(uint64_t a1, NSObject *a2)
{
  int v4 = [*(id *)(a1 + 40) ic_loggingIdentifier];
  uint64_t v5 = [*(id *)(a1 + 56) ic_sha256];
  uint64_t v6 = *(void *)(a1 + 64);
  int v7 = 138412802;
  __int16 v8 = v4;
  __int16 v9 = 2112;
  uint64_t v10 = v5;
  __int16 v11 = 2112;
  uint64_t v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Task for account (%@) returned with token (%@) records: %@", (uint8_t *)&v7, 0x20u);
}

void sub_1004D8C50(uint64_t a1, uint64_t *a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(a1 + 40) ic_loggingIdentifier];
  uint64_t v6 = *a2;
  int v7 = 138412546;
  __int16 v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error running task for account (%@): %@", (uint8_t *)&v7, 0x16u);
}

void sub_1004D8D08(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6 = [a1 ic_loggingIdentifier];
  unsigned int v7 = [a1 serverSideUpdateTaskFailureCount];
  int v8 = *(unsigned __int16 *)(a2 + 40);
  __int16 v9 = [a1 serverSideUpdateTaskLastAttemptedBuild];
  uint64_t v10 = [a1 serverSideUpdateTaskLastCompletedBuild];
  int v11 = 138413314;
  uint64_t v12 = v6;
  __int16 v13 = 1024;
  unsigned int v14 = v7;
  __int16 v15 = 1024;
  int v16 = v8;
  __int16 v17 = 2112;
  __int16 v18 = v9;
  __int16 v19 = 2112;
  __int16 v20 = v10;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Evaluating account (%@) (attempt=%hu/%hu) (lastAttempt=%@) (lastComplete=%@)", (uint8_t *)&v11, 0x2Cu);
}

void sub_1004D8E18(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004D8E50(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error updating inline drawing attachment sections: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004D8EC8(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "failed to execute JavaScript: %@\nJavaScript error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1004D8F54()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "Trying to create cloudSharingControllerForObject with empty accountID", v2, v3, v4, v5, v6);
}

void sub_1004D8F88(id *a1)
{
  uint64_t v1 = [*a1 shortLoggingDescription];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "No existing share for %@", v4, v5, v6, v7, v8);
}

void sub_1004D9010(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v5 = [*a2 shortLoggingDescription];
  int v6 = 138412546;
  uint64_t v7 = a1;
  __int16 v8 = 2112;
  __int16 v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Hierarchical share exists, using share %@ for managing sharing for %@", (uint8_t *)&v6, 0x16u);
}

void sub_1004D90C4()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Failed to save share with error %@", v2, v3, v4, v5, v6);
}

void sub_1004D912C()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "presentSendNoteActivityViewController: At least one of sourceItem or sourceView must be non-nil", v2, v3, v4, v5, v6);
}

void sub_1004D9160()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "An error has occured in deleteSharesIfNecessaryForContentsOfFolder: %@", v2, v3, v4, v5, v6);
}

void sub_1004D91C8(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) shortLoggingDescription];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Showing cloud sharing service for %@", v4, v5, v6, v7, v8);
}

void sub_1004D9250(char a1, NSObject *a2)
{
  CFStringRef v2 = @"Off";
  if (a1) {
    CFStringRef v2 = @"On";
  }
  int v3 = 138412290;
  CFStringRef v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Cloud sharing controller did turn hide alerts: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1004D92E0()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "URL was nil, cannot fetch and accept share.", v2, v3, v4, v5, v6);
}

void sub_1004D9314()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "cloudKitShareMetadata was nil, cannot accept share.", v2, v3, v4, v5, v6);
}

uint64_t sub_1004D9348()
{
  uint64_t v0 = abort_report_np();
  return sub_1004D9370(v0);
}

void sub_1004D9370()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Continuing migration if necessary", v2, v3, v4, v5, v6);
}

void sub_1004D93A4(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Already finished with migration", buf, 2u);
}

void sub_1004D93E4()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Migration controller heard that another device started migrating. Migrating here as well.", v2, v3, v4, v5, v6);
}

void sub_1004D9418()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Cancelling migration operations in response to accounts change notification", v2, v3, v4, v5, v6);
}

void sub_1004D944C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Setting migration state on ACAccount after setting current migration state", v2, v3, v4, v5, v6);
}

void sub_1004D9480()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Hiding the IMAP account because we don't have an ICAccount yet", v2, v3, v4, v5, v6);
}

void sub_1004D94B4()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Starting migration for iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004D94E8()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Refreshing data from CloudKit before importing for migration", v2, v3, v4, v5, v6);
}

void sub_1004D951C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Continuing migration for iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004D9550()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Done refreshing data before importing", v2, v3, v4, v5, v6);
}

void sub_1004D9584()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Not migrating local account because we have already migrated it", v2, v3, v4, v5, v6);
}

void sub_1004D95B8()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Not migrating local account because there is no local account", v2, v3, v4, v5, v6);
}

void sub_1004D95EC(void *a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [a1 legacyAccountContext];
  uint8_t v6 = [a2 objectID];
  uint64_t v7 = [v5 allVisibleNotesForAccountWithObjectID:v6];
  id v8 = [v7 count];
  __int16 v9 = [a2 folders];
  int v10 = 134218240;
  id v11 = v8;
  __int16 v12 = 2048;
  id v13 = [v9 count];
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Importing the local account to the new format. It has %ld note(s) in %ld folder(s).", (uint8_t *)&v10, 0x16u);
}

void sub_1004D96F0()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Not migrating local account because the user chose to not migrate it.", v2, v3, v4, v5, v6);
}

void sub_1004D9724()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Successfully imported the local account", v2, v3, v4, v5, v6);
}

void sub_1004D9758()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "No legacy account when performing final import", v2, v3, v4, v5, v6);
}

void sub_1004D978C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Performing final import for iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004D97C0()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Successfully performed final import for iCloud account.", v2, v3, v4, v5, v6);
}

void sub_1004D97F4()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Final import for iCloud account was cancelled", v2, v3, v4, v5, v6);
}

void sub_1004D9828()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "No legacy account when importing notes from legacy iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004D985C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Importing legacy notes from iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004D9890(uint64_t a1)
{
  uint64_t v1 = [(id)sub_1000AD388(a1) objectIdentifier];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Cancelled importing notes for legacy account: %@", v4, v5, v6, v7, v8);
}

void sub_1004D9914(uint64_t a1)
{
  uint64_t v1 = [(id)sub_1000AD388(a1) objectIdentifier];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Finished importing notes for legacy account: %@", v4, v5, v6, v7, v8);
}

void sub_1004D9998()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Cancelling migration operations", v2, v3, v4, v5, v6);
}

void sub_1004D99CC(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Importing the iCloud account again while refreshing", buf, 2u);
}

void sub_1004D9A0C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "No legacy account performing final push to CloudKit", v2, v3, v4, v5, v6);
}

void sub_1004D9A40()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Performing final push to CloudKit for migration.", v2, v3, v4, v5, v6);
}

void sub_1004D9A74()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Finished final push to CloudKit during migration. Migration is now complete.", v2, v3, v4, v5, v6);
}

void sub_1004D9AA8()
{
  sub_100032C50();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error pushing migration state: %@", v1, 0xCu);
}

void sub_1004D9B1C()
{
  sub_100032C50();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error fetching user record when pushing migration state: %@", v1, 0xCu);
}

void sub_1004D9B90(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Copying notes from a legacy account (%@) to iCloud account", buf, 0xCu);
}

void sub_1004D9BE8(uint64_t a1)
{
  uint64_t v1 = [*(id *)(*(void *)(*(void *)a1 + 8) + 40) objectIdentifier];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Successfully copied notes from legacy account (%@) to iCloud account", v4, v5, v6, v7, v8);
}

void sub_1004D9C78()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "The migration controller can now reach the internet", v2, v3, v4, v5, v6);
}

void sub_1004D9CAC()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "The migration controller can no longer reach the internet", v2, v3, v4, v5, v6);
}

void sub_1004D9CE0(const char *a1, NSObject *a2, double a3)
{
  uint64_t v5 = NSStringFromSelector(a1);
  sub_100032C50();
  __int16 v7 = 2048;
  double v8 = a3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Retrying %@ after a delay of %.0f seconds", v6, 0x16u);
}

void sub_1004D9D8C(void *a1)
{
  uint64_t v1 = [a1 identifier];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Disabling Notes dataclass for account (%@)", v4, v5, v6, v7, v8);
}

void sub_1004D9E10(uint64_t a1)
{
  uint64_t v1 = [(id)sub_1000AD388(a1) identifier];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Disabled note syncing for account (%@)", v4, v5, v6, v7, v8);
}

void sub_1004D9E94(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [(id)sub_1000AD388(a1) identifier];
  sub_100032C50();
  __int16 v7 = 2112;
  uint64_t v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error disabling note syncing for account (%@): %@", v6, 0x16u);
}

void sub_1004D9F40()
{
  sub_100032C50();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Got unexpected Darwin notification %@", v1, 0xCu);
}

void sub_1004D9FB4()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "No legacy account handling Darwin notification", v2, v3, v4, v5, v6);
}

void sub_1004D9FE8()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Completed legacy folder list refresh for iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004DA01C()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Completed legacy content refresh for iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004DA050()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "No legacy account performing final refresh", v2, v3, v4, v5, v6);
}

void sub_1004DA084()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Performing final refresh for iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004DA0B8()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Cannot reach the internet. Performing final refresh after reachability changes", v2, v3, v4, v5, v6);
}

void sub_1004DA0EC()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "No legacy account refreshing folder list", v2, v3, v4, v5, v6);
}

void sub_1004DA120()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Refreshing folder list from DataAccess for iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004DA154()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "No legacy account when refreshing folder contents", v2, v3, v4, v5, v6);
}

void sub_1004DA188()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Refreshing contents from DataAccess for iCloud account", v2, v3, v4, v5, v6);
}

void sub_1004DA1BC()
{
  sub_100032C44();
  sub_100032D68((void *)&_mh_execute_header, v0, v1, "Finished cancelling migration after going into the background.", v2, v3, v4, v5, v6);
}

uint64_t sub_1004DA1F0()
{
  os_log_t v0 = abort_report_np();
  return sub_1004DA218(v0);
}

void sub_1004DA218(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Resetting migration state", v1, 2u);
}

void sub_1004DA25C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004DA2C8()
{
  sub_100032CFC();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Deleted record zones while resetting migration for account ID %@", v1, 0xCu);
}

void sub_1004DA340()
{
  sub_100032CFC();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Performed full sync while resetting migration for account ID %@", v1, 0xCu);
}

void sub_1004DA3B8()
{
  sub_100032CFC();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Error performing full sync while resetting migration for account ID %@: %@", v2, 0x16u);
}

void sub_1004DA440()
{
  sub_100032CFC();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Couldn't find parent ACAccount for reset migration for account ID %@", v2, v3, v4, v5, v6);
}

void sub_1004DA4AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004DA518(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = [*a2 loggingDescription];
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2112;
  __int16 v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Checking note for duplicates in account ID %@: %@", (uint8_t *)&v6, 0x16u);
}

void sub_1004DA5CC()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Error dumping state of the world: %@", v2, v3, v4, v5, v6);
}

void sub_1004DA634()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Error writing state dump: %@", v2, v3, v4, v5, v6);
}

void sub_1004DA69C()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Error syncing objects after resetting passphrases. Error: %@", v2, v3, v4, v5, v6);
}

void sub_1004DA704(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Attempted to pre-fetch hashtags indexed by other apps in background", v1, 2u);
}

void sub_1004DA748()
{
  sub_100032C50();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "all hashtags indexed by other apps: %@", v1, 0xCu);
}

void sub_1004DA7BC()
{
  sub_100032C50();
  sub_100032C5C((void *)&_mh_execute_header, v0, v1, "Cannot generate System Paper chrome thumbnail layers {error: %@}", v2, v3, v4, v5, v6);
}

void sub_1004DA824(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "We timed out waiting for device migration state and user has clicked continue.", v1, 2u);
}

void sub_1004DA868(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 userInfo];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "No valid device check indicator found from timer.userInfo %@", (uint8_t *)&v4, 0xCu);
}

void sub_1004DA900(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "WelcomeScreenDisclaimer.rtf is missing", v1, 2u);
}

void sub_1004DA944(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004DA9B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004DAA1C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004DAA88(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004DAAF8(void *a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [a1 identifier];
  uint8_t v6 = [a2 identifier];
  int v7 = 138412546;
  __int16 v8 = v5;
  __int16 v9 = 2112;
  int v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Undoably setting folder %@ to note %@.", (uint8_t *)&v7, 0x16u);
}

void sub_1004DABBC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Tried to set the folder to be a smart folder, which really shouldn't contain notes per se. Reverted to the owning account's default folder.", v1, 2u);
}

void sub_1004DAC00(void *a1, NSObject *a2)
{
  int v4 = [a1 shortLoggingDescription];
  uint64_t v5 = [a1 account];
  uint8_t v6 = [v5 trashFolder];
  int v7 = [v6 identifier];
  __int16 v8 = [a1 account];
  __int16 v9 = [v8 identifier];
  int v10 = 138412802;
  id v11 = v4;
  __int16 v12 = 2112;
  id v13 = v7;
  __int16 v14 = 2112;
  __int16 v15 = v9;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Undoably moving note %@ to the recently deleted folder %@ in account %@", (uint8_t *)&v10, 0x20u);
}

void sub_1004DAD20(void *a1, NSObject *a2)
{
  int v4 = [a1 account];
  uint64_t v5 = [v4 trashFolder];
  uint8_t v6 = [v5 identifier];
  int v7 = [a1 account];
  __int16 v8 = [v7 identifier];
  __int16 v9 = [a1 shortLoggingDescription];
  int v10 = 138412802;
  id v11 = v6;
  __int16 v12 = 2112;
  id v13 = v8;
  __int16 v14 = 2112;
  __int16 v15 = v9;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Moving shared note as a participant to recently deleted folder %@ in account %@ for note %@", (uint8_t *)&v10, 0x20u);
}

void sub_1004DAE40(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Recap based test requested but running on device without framework", v1, 2u);
}

void sub_1004DAE84(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Performing flick scroll test", v1, 2u);
}

void sub_1004DAEC8(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Flick scroll test iterations remaining: %lu", (uint8_t *)&v2, 0xCu);
}

void sub_1004DAF40(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Reindexing everything before search PPT starts", v1, 2u);
}

void sub_1004DAF84(uint64_t a1)
{
  int v2 = +[NSDate date];
  [v2 timeIntervalSinceDate:*(void *)(a1 + 32)];
  sub_100032D84((void *)&_mh_execute_header, v3, v4, "Reindexing for search PPT completed in %f", v5, v6, v7, v8, 0);
}

uint64_t sub_1004DB028()
{
  uint64_t v0 = abort_report_np();
  return sub_1004DB050(v0);
}

uint64_t sub_1004DB050()
{
  uint64_t v0 = abort_report_np();
  return sub_1004DB078(v0);
}

uint64_t sub_1004DB078()
{
  uint64_t v0 = abort_report_np();
  return sub_1004DB0A0(v0);
}

void sub_1004DB0A0(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 typeUTI];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Trying to show an attachment in the images and movies scroll view, but it's not an image or movie. typeUTI=%@", (uint8_t *)&v4, 0xCu);
}

void sub_1004DB138(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v6 = 138412546;
  id v7 = (id)objc_opt_class();
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  id v5 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error fetching from the fetched results controller on %@: %@", (uint8_t *)&v6, 0x16u);
}

void sub_1004DB1E0(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 shortLoggingDescription];
  int v4 = 138412290;
  id v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Attempting to move notes into a folder that doesn't allow moving contents in or out: %@", (uint8_t *)&v4, 0xCu);
}

void sub_1004DB278(void *a1, void *a2, NSObject *a3)
{
  int v6 = [a1 account];
  id v7 = [v6 identifier];
  __int16 v8 = [a2 shortLoggingDescription];
  int v9 = 138412802;
  int v10 = a1;
  __int16 v11 = 2112;
  __int16 v12 = v7;
  __int16 v13 = 2112;
  __int16 v14 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Moving note from unowned, shared folder to folder %@ in account %@ for note %@", (uint8_t *)&v9, 0x20u);
}

void sub_1004DB360(void *a1)
{
  uint64_t v1 = [a1 ic_loggingDescription];
  sub_100032D08((void *)&_mh_execute_header, v2, v3, "Cannot associate invitation with object because share URL is missing {share: %@, accountID: %@}", v4, v5, v6, v7, 2u);
}

void sub_1004DB400(id *a1)
{
  uint64_t v1 = [*a1 ic_loggingDescription];
  sub_100032D08((void *)&_mh_execute_header, v2, v3, "Cannot associate invitation with object because root object or root object account is missing {share: %@, accountID: %@}", v4, v5, v6, v7, 2u);
}

void sub_1004DB4A8(id *a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [*a1 ic_loggingDescription];
  uint64_t v6 = [a2 objectID];
  int v7 = 138412546;
  __int16 v8 = v5;
  __int16 v9 = 2112;
  int v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Updated invitation and associated it with object {share: %@, objectID: %@}", (uint8_t *)&v7, 0x16u);
}

void sub_1004DB570(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Checking ICMedia for missing files that need to be fetched", v1, 2u);
}

void sub_1004DB5B4(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 shortLoggingDescription];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "No file for %@, marking as needing to be fetched", (uint8_t *)&v4, 0xCu);
}

void sub_1004DB64C(uint64_t a1, NSObject *a2)
{
  int v3 = 138412290;
  uint64_t v4 = objc_opt_class();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@ reported success", (uint8_t *)&v3, 0xCu);
}

void sub_1004DB6D8(uint64_t a1, NSObject *a2)
{
  int v3 = 138412290;
  uint64_t v4 = objc_opt_class();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@ reported failure and may be retried on the next launch", (uint8_t *)&v3, 0xCu);
}

void sub_1004DB764(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Finished fixing backup exclusion flag for attachments", v1, 2u);
}

void sub_1004DB7A8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Fixing backup exclusion flag for attachments", v1, 2u);
}

void sub_1004DB7EC(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not open application because %@", (uint8_t *)&v3, 0xCu);
}

void sub_1004DB868(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Attempted to share an unshareable note.", v1, 2u);
}

void sub_1004DB8AC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Couldn't get image source reference to generate a preview", v1, 2u);
}

void sub_1004DB8F0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Checking for missing paper bundles that need to be fetched", v1, 2u);
}

void sub_1004DB934(void *a1, NSObject *a2)
{
  int v3 = [a1 shortLoggingDescription];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Paper bundle missing or empty for %@, marking as needing to be fetched", (uint8_t *)&v4, 0xCu);
}

void sub_1004DB9CC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Using CoreData-CoreSpotlight Integration, not running ICReindexEverythingAfterBackupRestoreTask", v1, 2u);
}

void sub_1004DBA10(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Setting progress tracker making progress %d", (uint8_t *)v2, 8u);
}

void sub_1004DBA88(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Setting progress indicator should animate %d", (uint8_t *)v2, 8u);
}

void sub_1004DBB00(void *a1)
{
  [a1 count];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Processing %lu possible inconsistencies with inline attachments", v3, v4, v5, v6, 0);
}

void sub_1004DBB7C(void *a1)
{
  [a1 count];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Processing %lu possible inconsistencies with block attachments", v3, v4, v5, v6, 0);
}

void sub_1004DBBF8(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Root attachment (%@) found in note (%@) body", buf, 0x16u);
}

void sub_1004DBC68(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(a1 + 40) ic_loggingIdentifier];
  uint64_t v6 = [a2 shortLoggingDescription];
  int v7 = 138412546;
  __int16 v8 = v5;
  __int16 v9 = 2112;
  int v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Resolving inconsistency of (%@) by resurrecting: %@", (uint8_t *)&v7, 0x16u);
}

void sub_1004DBD30(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Canceling search query since input is empty.", v1, 2u);
}

void sub_1004DBD74(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [a2 objectID];
  int v6 = 134218242;
  uint64_t v7 = a1;
  __int16 v8 = 2112;
  __int16 v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Setting note collection on note browser %p: %@", (uint8_t *)&v6, 0x16u);
}

void sub_1004DBE28()
{
  sub_100032DF8();
  sub_100032D48((void *)&_mh_execute_header, v0, v1, "Setting query on note browser %p: %@");
}

void sub_1004DBE90()
{
  sub_100032DF8();
  sub_100032D48((void *)&_mh_execute_header, v0, v1, "Setting virtual smart folder on note browser %p: %@");
}

void sub_1004DBEF8()
{
  sub_100032DF8();
  sub_100032D48((void *)&_mh_execute_header, v0, v1, "Setting tag selection on note browser %p: %@");
}

void sub_1004DBF60(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v7 = [a2 ic_loggingDescription];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Found note %@ without an account and folder, will move to default account and folder.", a1, 0xCu);
}

void sub_1004DBFD8(void *a1)
{
  [a1 count];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Found %ld notes without folders.", v3, v4, v5, v6, 0);
}

void sub_1004DC054(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Looking to move notes without folders to the default folder.", v1, 2u);
}

void sub_1004DC098(void *a1)
{
  [a1 count];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Found %ld notes with placeholder folders.", v3, v4, v5, v6, 0);
}

void sub_1004DC114(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Looking to fetch notes with placeholder folders.", v1, 2u);
}

void sub_1004DC158(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Finished regenerating gallery attachment note titles", v1, 2u);
}

void sub_1004DC19C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Regenerating gallery attachment note titles", v1, 2u);
}

void sub_1004DC1E0(void *a1)
{
  [a1 count];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Regenerating %lu gallery attachment note titles", v3, v4, v5, v6, 0);
}

void sub_1004DC25C(void *a1)
{
  [a1 count];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Checking %lu multi-page gallery attachments for an OCR generated userTitle", v3, v4, v5, v6, 0);
}

void sub_1004DC2D8(id *a1)
{
  uint64_t v1 = [*a1 identifier];
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Clearing OCR generated userTitle for attachment %@", v4, v5, v6, v7, 2u);
}

void sub_1004DC364(void *a1)
{
  [a1 count];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Couldn't fix %ld tombstones without an account because we don't have exactly one active CloudKit account.", v3, v4, v5, v6, 0);
}

void sub_1004DC3E0(void *a1)
{
  [a1 count];
  sub_100032D84((void *)&_mh_execute_header, v1, v2, "Found %ld tombstones without accounts.", v3, v4, v5, v6, 0);
}

void sub_1004DC45C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Looking to move tombstones without accounts to the CloudKit account.", v1, 2u);
}

void sub_1004DC4A0(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Extracting media file: Error loading file representation for content type %@ - error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1004DC52C(uint64_t a1, NSObject *a2)
{
  int v4 = [UTTypeFileURL identifier];
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2112;
  uint64_t v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Extracting URL: Error loading item for type identifier %@ - error: %@", (uint8_t *)&v6, 0x16u);
}

void sub_1004DC5EC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Provided item is nil.", v1, 2u);
}

void sub_1004DC630(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 registeredTypeIdentifiers];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error: could not find extension in %@", (uint8_t *)&v4, 0xCu);
}

void sub_1004DC6CC(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error loading item: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1004DC748(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Cannot save temporary file to disk: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004DC7C0(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 userInfo];
  int v5 = 138412546;
  int v6 = a1;
  __int16 v7 = 2112;
  __int16 v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error: Failed while saving note: %@, %@", (uint8_t *)&v5, 0x16u);
}

void sub_1004DC870(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Calculated estimated size of displayed content: %lu", (uint8_t *)&v2, 0xCu);
}

void sub_1004DC8E8(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Asked about accepting new size: %lu", (uint8_t *)&v2, 0xCu);
}

void sub_1004DC960(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to begin editing.", v1, 2u);
}

void sub_1004DC9A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004DC9DC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004DCA14(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 40);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error saving legacy note context after import: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1004DCA94(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Starting import operation: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004DCB0C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error saving while importing notes: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004DCB84(uint64_t *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4 = *a1;
  int v5 = [*(id *)(*(void *)(*(void *)a2 + 8) + 40) identifier];
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2112;
  uint64_t v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%@ importing legacy note %@", (uint8_t *)&v6, 0x16u);
}

void sub_1004DCC40(uint64_t a1, void *a2)
{
  int v2 = [a2 sortedSections];
  [v2 count];
  sub_100032E10();
  sub_100032D08((void *)&_mh_execute_header, v3, v4, "Section index out of bounds: %@, %ld", v5, v6, v7, v8, v9);
}

void sub_1004DCCD8()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "Unexpectedly received empty image data array", v2, v3, v4, v5, v6);
}

void sub_1004DCD0C(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 activityType];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unhandled user activity type: %@", (uint8_t *)&v4, 0xCu);
}

void sub_1004DCDA4()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "Not setting up System Paper UI since the device doesn't support system paper.", v2, v3, v4, v5, v6);
}

void sub_1004DCDD8()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "More than one connection source was provided to Notes. This is unexpected. We will be picking one at random.", v2, v3, v4, v5, v6);
}

void sub_1004DCE0C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "ICFolderOutlineCollectionViewCell is incompatible with identifier {identifier: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_1004DCE84(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Imported archive into account {account: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_1004DCEFC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot import archive into account {error: %@, account: %@}", (uint8_t *)&v3, 0x16u);
}

void sub_1004DCF84(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Cannot import into primary iCloud account because there is no iCloud account enabled", v1, 2u);
}

void sub_1004DCFC8(void *a1)
{
  uint64_t v1 = [a1 shortLoggingDescription];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Undoably deleting note %@", v4, v5, v6, v7, v8);
}

void sub_1004DD04C()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "Attempting to delete undeletable notes", v2, v3, v4, v5, v6);
}

void sub_1004DD080()
{
  sub_100032C50();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "attempting to delete an undeletable folder %@", v1, 0xCu);
}

void sub_1004DD0F4(void *a1)
{
  uint64_t v1 = [a1 identifier];
  sub_100032C50();
  sub_100032D84((void *)&_mh_execute_header, v2, v3, "Not authenticated to copy note %@ across accounts", v4, v5, v6, v7, v8);
}

void sub_1004DD178()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "Error while saving after processing notes.", v2, v3, v4, v5, v6);
}

void sub_1004DD1AC(void *a1)
{
  uint64_t v1 = [a1 objectID];
  sub_100032C50();
  sub_100032C78((void *)&_mh_execute_header, v2, v3, "Unable to find destination folder when moving note: %@", v4, v5, v6, v7, v8);
}

void sub_1004DD230()
{
  sub_100032C44();
  sub_100032DA4((void *)&_mh_execute_header, v0, v1, "Unable to find copied note to delete", v2, v3, v4, v5, v6);
}

void sub_1004DD264()
{
  sub_100032C44();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Tried to set the folder to be a smart folder, which really shouldn't contain notes per se. Reverted to the owning account's default folder.", v1, 2u);
}

void sub_1004DD2A4(void *a1)
{
  uint64_t v1 = [a1 objectID];
  sub_100032C50();
  sub_100032C78((void *)&_mh_execute_header, v2, v3, "Unable to find folder to move note to: %@", v4, v5, v6, v7, v8);
}

void sub_1004DD328(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Using CoreData-CoreSpotlight Integration, not running ICCheckCoreSpotlightClientStateLaunchTask", v1, 2u);
}

void sub_1004DD36C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error fetching client state from CoreSpotlight: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004DD3E4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "self.viewControllerManager.noteContainerViewMode should not be ICNoteContainerViewModeUnspecified.", v1, 2u);
}

void sub_1004DD428(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@ deleted all searchable items from index. updating the indexing version to expected version", (uint8_t *)&v3, 0xCu);
}

void sub_1004DD4A4(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%@ error deleting all searchable items from index: %@", (uint8_t *)&v4, 0x16u);
}

uint64_t static _AssistantIntentsProvider.uniqueEntities.getter()
{
  return static _AssistantIntentsProvider.uniqueEntities.getter();
}

uint64_t AppDependency.wrappedValue.modify()
{
  return AppDependency.wrappedValue.modify();
}

uint64_t AppDependency.wrappedValue.getter()
{
  return AppDependency.wrappedValue.getter();
}

uint64_t AppDependency.wrappedValue.setter()
{
  return AppDependency.wrappedValue.setter();
}

uint64_t AppDependency.projectedValue.getter()
{
  return AppDependency.projectedValue.getter();
}

uint64_t AppDependency.__allocating_init(key:manager:)()
{
  return AppDependency.__allocating_init(key:manager:)();
}

uint64_t type metadata accessor for AppIntentError()
{
  return type metadata accessor for AppIntentError();
}

uint64_t AppShortcutPhrase.init(stringLiteral:)()
{
  return AppShortcutPhrase.init(stringLiteral:)();
}

uint64_t AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)()
{
  return AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)();
}

Swift::Void __swiftcall AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t AppShortcutPhrase.init(stringInterpolation:)()
{
  return AppShortcutPhrase.init(stringInterpolation:)();
}

uint64_t static AppShortcutsBuilder.buildBlock(_:)()
{
  return static AppShortcutsBuilder.buildBlock(_:)();
}

uint64_t static AppShortcutsBuilder.buildExpression(_:)()
{
  return static AppShortcutsBuilder.buildExpression(_:)();
}

uint64_t AppDependencyManager.add<A>(key:dependency:)()
{
  return AppDependencyManager.add<A>(key:dependency:)();
}

uint64_t static AppDependencyManager.shared.getter()
{
  return static AppDependencyManager.shared.getter();
}

uint64_t type metadata accessor for AppDependencyManager()
{
  return type metadata accessor for AppDependencyManager();
}

uint64_t static AppShortcutsProvider.updateAppShortcutParameters()()
{
  return static AppShortcutsProvider.updateAppShortcutParameters()();
}

uint64_t AppShortcutOptionsCollection.init(_:title:systemImageName:)()
{
  return AppShortcutOptionsCollection.init(_:title:systemImageName:)();
}

uint64_t AppShortcutParameterPresentation.init<A>(for:summary:optionsCollections:)()
{
  return AppShortcutParameterPresentation.init<A>(for:summary:optionsCollections:)();
}

uint64_t AppShortcutParameterPresentationSummary.init(_:table:)()
{
  return AppShortcutParameterPresentationSummary.init(_:table:)();
}

uint64_t AppShortcutParameterPresentationSummaryString.StringInterpolation.appendInterpolation(_:)()
{
  return AppShortcutParameterPresentationSummaryString.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall AppShortcutParameterPresentationSummaryString.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t AppShortcutParameterPresentationSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return AppShortcutParameterPresentationSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t AppShortcutParameterPresentationSummaryString.init(stringInterpolation:)()
{
  return AppShortcutParameterPresentationSummaryString.init(stringInterpolation:)();
}

uint64_t static AppShortcutOptionsCollectionSpecificationBuilder.buildBlock<A, B>(_:_:)()
{
  return static AppShortcutOptionsCollectionSpecificationBuilder.buildBlock<A, B>(_:_:)();
}

uint64_t static AppIntent.openAppWhenRun.getter()
{
  return static AppIntent.openAppWhenRun.getter();
}

uint64_t AppIntent.systemContext.getter()
{
  return AppIntent.systemContext.getter();
}

uint64_t static AppIntent.isDiscoverable.getter()
{
  return static AppIntent.isDiscoverable.getter();
}

uint64_t static AppIntent.parameterSummary.getter()
{
  return static AppIntent.parameterSummary.getter();
}

uint64_t static AppIntent.authenticationPolicy.getter()
{
  return static AppIntent.authenticationPolicy.getter();
}

uint64_t AppShortcut.init<A, B, C, D>(intent:phrases:shortTitle:systemImageName:parameterPresentation:)()
{
  return AppShortcut.init<A, B, C, D>(intent:phrases:shortTitle:systemImageName:parameterPresentation:)();
}

uint64_t AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)()
{
  return AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)();
}

uint64_t type metadata accessor for AppShortcut()
{
  return type metadata accessor for AppShortcut();
}

uint64_t IntentFile.fileURL.getter()
{
  return IntentFile.fileURL.getter();
}

uint64_t type metadata accessor for IntentFile()
{
  return type metadata accessor for IntentFile();
}

uint64_t IntentDialog.init(full:supporting:)()
{
  return IntentDialog.init(full:supporting:)();
}

uint64_t type metadata accessor for IntentDialog()
{
  return type metadata accessor for IntentDialog();
}

uint64_t IntentDialog.init(_:)()
{
  return IntentDialog.init(_:)();
}

uint64_t static IntentResult.result<A, B>(value:opensIntent:hint:)()
{
  return static IntentResult.result<A, B>(value:opensIntent:hint:)();
}

uint64_t static IntentResult.result<A, B>(value:opensIntent:)()
{
  return static IntentResult.result<A, B>(value:opensIntent:)();
}

uint64_t static IntentResult.result<A>(value:)()
{
  return static IntentResult.result<A>(value:)();
}

uint64_t static IntentResult.result<>(dialog:)()
{
  return static IntentResult.result<>(dialog:)();
}

uint64_t static IntentResult.result<>()()
{
  return static IntentResult.result<>()();
}

uint64_t EntityProperty.wrappedValue.modify()
{
  return EntityProperty.wrappedValue.modify();
}

uint64_t EntityProperty.wrappedValue.getter()
{
  return EntityProperty.wrappedValue.getter();
}

uint64_t EntityProperty.wrappedValue.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t EntityProperty.projectedValue.getter()
{
  return EntityProperty.projectedValue.getter();
}

uint64_t EntityProperty<>.init(title:)()
{
  return EntityProperty<>.init(title:)();
}

{
  return EntityProperty<>.init(title:)();
}

{
  return EntityProperty<>.init(title:)();
}

{
  return EntityProperty<>.init(title:)();
}

{
  return EntityProperty<>.init(title:)();
}

uint64_t static SiriVocabulary.dynamicVocabularyEnabled.getter()
{
  return static SiriVocabulary.dynamicVocabularyEnabled.getter();
}

uint64_t type metadata accessor for SiriVocabulary.DynamicTerm()
{
  return type metadata accessor for SiriVocabulary.DynamicTerm();
}

uint64_t SiriVocabulary.DynamicTerm.init<A>(_:entity:)()
{
  return SiriVocabulary.DynamicTerm.init<A>(_:entity:)();
}

uint64_t SiriVocabulary.Corpus.init(contents:capacity:)()
{
  return SiriVocabulary.Corpus.init(contents:capacity:)();
}

uint64_t type metadata accessor for SiriVocabulary.Corpus()
{
  return type metadata accessor for SiriVocabulary.Corpus();
}

uint64_t ChangeOperation.rawValue.getter()
{
  return ChangeOperation.rawValue.getter();
}

uint64_t type metadata accessor for ChangeOperation()
{
  return type metadata accessor for ChangeOperation();
}

uint64_t EntityQuerySort.by.getter()
{
  return EntityQuerySort.by.getter();
}

uint64_t EntityQuerySort.order.getter()
{
  return EntityQuerySort.order.getter();
}

uint64_t static EntityQuerySort.Ordering.== infix(_:_:)()
{
  return static EntityQuerySort.Ordering.== infix(_:_:)();
}

uint64_t IntentParameter.wrappedValue.modify()
{
  return IntentParameter.wrappedValue.modify();
}

uint64_t IntentParameter.wrappedValue.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t IntentParameter.wrappedValue.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t IntentParameter.projectedValue.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t IntentParameter.needsValueError(_:)()
{
  return IntentParameter.needsValueError(_:)();
}

uint64_t IntentParameter.needsDisambiguationError(among:dialog:)()
{
  return IntentParameter.needsDisambiguationError(among:dialog:)();
}

uint64_t IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

uint64_t IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)()
{
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)();
}

uint64_t IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(title:description:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)();
}

{
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)()
{
  return IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t type metadata accessor for OpensIntentHint()
{
  return type metadata accessor for OpensIntentHint();
}

uint64_t EntityIdentifier.init<A>(for:identifier:)()
{
  return EntityIdentifier.init<A>(for:identifier:)();
}

uint64_t type metadata accessor for EntityIdentifier()
{
  return type metadata accessor for EntityIdentifier();
}

uint64_t IntentProjection.subscript.getter()
{
  return IntentProjection.subscript.getter();
}

uint64_t static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildExpression(_:)();
}

uint64_t _AssistantIntent.NegativeAssistantIntentPhrases.init<A>(for:phrases:)()
{
  return _AssistantIntent.NegativeAssistantIntentPhrases.init<A>(for:phrases:)();
}

uint64_t type metadata accessor for _AssistantIntent.NegativeAssistantIntentPhrases()
{
  return type metadata accessor for _AssistantIntent.NegativeAssistantIntentPhrases();
}

uint64_t _AssistantIntent.IntentProjection.subscript.getter()
{
  return _AssistantIntent.IntentProjection.subscript.getter();
}

uint64_t type metadata accessor for _AssistantIntent.PhraseToken()
{
  return type metadata accessor for _AssistantIntent.PhraseToken();
}

uint64_t static _AssistantIntent.PhraseBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.PhraseBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
}

uint64_t static _AssistantIntent.StringValueBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.StringValueBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
}

uint64_t static _AssistantIntent.ParameterValueBuilder.buildBlock()()
{
  return static _AssistantIntent.ParameterValueBuilder.buildBlock()();
}

uint64_t static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
}

uint64_t _AssistantIntent.Value.init<A>(for:builder:)()
{
  return _AssistantIntent.Value.init<A>(for:builder:)();
}

uint64_t type metadata accessor for _AssistantIntent.Value()
{
  return type metadata accessor for _AssistantIntent.Value();
}

uint64_t _AssistantIntent.Phrase.init(stringLiteral:)()
{
  return _AssistantIntent.Phrase.init(stringLiteral:)();
}

uint64_t _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)()
{
  return _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
}

{
  return _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t _AssistantIntent.Phrase.init(stringInterpolation:)()
{
  return _AssistantIntent.Phrase.init(stringInterpolation:)();
}

uint64_t static _AssistantIntent.Builder.buildBlock(_:)()
{
  return static _AssistantIntent.Builder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.Builder.buildExpression(_:)()
{
  return static _AssistantIntent.Builder.buildExpression(_:)();
}

uint64_t type metadata accessor for _AssistantIntent()
{
  return type metadata accessor for _AssistantIntent();
}

uint64_t _AssistantIntent.init<A>(_:phrases:parameterValues:)()
{
  return _AssistantIntent.init<A>(_:phrases:parameterValues:)();
}

uint64_t EqualToComparator.init(mappingTransform:)()
{
  return EqualToComparator.init(mappingTransform:)();
}

uint64_t FavoriteOperation.rawValue.getter()
{
  return FavoriteOperation.rawValue.getter();
}

uint64_t type metadata accessor for FavoriteOperation()
{
  return type metadata accessor for FavoriteOperation();
}

uint64_t type metadata accessor for IntentDescription()
{
  return type metadata accessor for IntentDescription();
}

uint64_t IntentDescription.init(_:categoryName:searchKeywords:)()
{
  return IntentDescription.init(_:categoryName:searchKeywords:)();
}

uint64_t type metadata accessor for ShortcutTileColor()
{
  return type metadata accessor for ShortcutTileColor();
}

uint64_t type metadata accessor for StringSearchScope()
{
  return type metadata accessor for StringSearchScope();
}

uint64_t ContainsComparator.init<>(mappingTransform:)()
{
  return ContainsComparator.init<>(mappingTransform:)();
}

{
  return ContainsComparator.init<>(mappingTransform:)();
}

{
  return ContainsComparator.init<>(mappingTransform:)();
}

uint64_t LessThanComparator.init(mappingTransform:)()
{
  return LessThanComparator.init(mappingTransform:)();
}

uint64_t static EntityPropertyQuery.findIntentDescription.getter()
{
  return static EntityPropertyQuery.findIntentDescription.getter();
}

uint64_t EntityQueryProperty.__allocating_init<>(_:comparators:)()
{
  return EntityQueryProperty.__allocating_init<>(_:comparators:)();
}

uint64_t type metadata accessor for IntentSystemContext.Kind()
{
  return type metadata accessor for IntentSystemContext.Kind();
}

uint64_t IntentSystemContext.kind.getter()
{
  return IntentSystemContext.kind.getter();
}

uint64_t type metadata accessor for IntentSystemContext.Source()
{
  return type metadata accessor for IntentSystemContext.Source();
}

uint64_t IntentSystemContext.source.getter()
{
  return IntentSystemContext.source.getter();
}

uint64_t type metadata accessor for IntentSystemContext()
{
  return type metadata accessor for IntentSystemContext();
}

uint64_t IsBetweenComparator.init(mappingTransform:)()
{
  return IsBetweenComparator.init(mappingTransform:)();
}

uint64_t NotEqualToComparator.init(mappingTransform:)()
{
  return NotEqualToComparator.init(mappingTransform:)();
}

uint64_t StringSearchCriteria.term.getter()
{
  return StringSearchCriteria.term.getter();
}

uint64_t type metadata accessor for StringSearchCriteria()
{
  return type metadata accessor for StringSearchCriteria();
}

uint64_t DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)()
{
  return DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
}

uint64_t DisplayRepresentation.Image.init(data:isTemplate:)()
{
  return DisplayRepresentation.Image.init(data:isTemplate:)();
}

uint64_t type metadata accessor for DisplayRepresentation.Image()
{
  return type metadata accessor for DisplayRepresentation.Image();
}

uint64_t DisplayRepresentation.init(title:subtitle:image:)()
{
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t type metadata accessor for DisplayRepresentation()
{
  return type metadata accessor for DisplayRepresentation();
}

uint64_t EntityQueryProperties.init(properties:)()
{
  return EntityQueryProperties.init(properties:)();
}

uint64_t GreaterThanComparator.init(mappingTransform:)()
{
  return GreaterThanComparator.init(mappingTransform:)();
}

uint64_t static ConfirmationActionName.continue.getter()
{
  return static ConfirmationActionName.continue.getter();
}

uint64_t type metadata accessor for ConfirmationActionName()
{
  return type metadata accessor for ConfirmationActionName();
}

uint64_t type metadata accessor for ConfirmationConditions()
{
  return type metadata accessor for ConfirmationConditions();
}

uint64_t static DynamicOptionsProvider.useForParameterResolution.getter()
{
  return static DynamicOptionsProvider.useForParameterResolution.getter();
}

uint64_t static IntentParameterSummary.ParameterKeyPathsBuilder.buildBlock(_:)()
{
  return static IntentParameterSummary.ParameterKeyPathsBuilder.buildBlock(_:)();
}

uint64_t static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)()
{
  return static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)();
}

uint64_t IntentParameterSummary.init(_:table:)()
{
  return IntentParameterSummary.init(_:table:)();
}

uint64_t IntentParameterSummary.init(_:table:_:)()
{
  return IntentParameterSummary.init(_:table:_:)();
}

uint64_t ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)()
{
  return ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
}

Swift::Void __swiftcall ParameterSummaryString.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t ParameterSummaryString.init(stringLiteral:)()
{
  return ParameterSummaryString.init(stringLiteral:)();
}

uint64_t ParameterSummaryString.init(stringInterpolation:)()
{
  return ParameterSummaryString.init(stringInterpolation:)();
}

uint64_t type metadata accessor for InputConnectionBehavior()
{
  return type metadata accessor for InputConnectionBehavior();
}

uint64_t static ParameterSummaryBuilder.buildBlock<A>(_:)()
{
  return static ParameterSummaryBuilder.buildBlock<A>(_:)();
}

uint64_t static ParameterSummaryBuilder.buildExpression<A>(_:)()
{
  return static ParameterSummaryBuilder.buildExpression<A>(_:)();
}

uint64_t static PersistentlyIdentifiable.persistentIdentifier.getter()
{
  return static PersistentlyIdentifiable.persistentIdentifier.getter();
}

uint64_t static EntityQueryComparatorMode.== infix(_:_:)()
{
  return static EntityQueryComparatorMode.== infix(_:_:)();
}

uint64_t EntityQuerySortingOptions.init(content:)()
{
  return EntityQuerySortingOptions.init(content:)();
}

uint64_t IntentParameterDependency.wrappedValue.getter()
{
  return IntentParameterDependency.wrappedValue.getter();
}

uint64_t IntentParameterDependency.__allocating_init<A, B>(_:)()
{
  return IntentParameterDependency.__allocating_init<A, B>(_:)();
}

uint64_t TypeDisplayRepresentation.init(name:numericFormat:)()
{
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t type metadata accessor for TypeDisplayRepresentation()
{
  return type metadata accessor for TypeDisplayRepresentation();
}

uint64_t dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter()
{
  return dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter();
}

uint64_t LessThanOrEqualToComparator.init(mappingTransform:)()
{
  return LessThanOrEqualToComparator.init(mappingTransform:)();
}

uint64_t static ParameterSummaryCaseBuilder.buildBlock<A, B, C>(_:_:_:)()
{
  return static ParameterSummaryCaseBuilder.buildBlock<A, B, C>(_:_:_:)();
}

uint64_t static ParameterSummaryCaseBuilder.buildExpression<A>(_:)()
{
  return static ParameterSummaryCaseBuilder.buildExpression<A>(_:)();
}

uint64_t static EntityQueryPropertiesBuilder.buildBlock(_:)()
{
  return static EntityQueryPropertiesBuilder.buildBlock(_:)();
}

uint64_t static EntityQueryPropertiesBuilder.buildExpression(_:)()
{
  return static EntityQueryPropertiesBuilder.buildExpression(_:)();
}

uint64_t static EntityQueryComparatorsBuilder.buildBlock(_:)()
{
  return static EntityQueryComparatorsBuilder.buildBlock(_:)();
}

uint64_t static EntityQueryComparatorsBuilder.buildExpression<A>(_:)()
{
  return static EntityQueryComparatorsBuilder.buildExpression<A>(_:)();
}

uint64_t static EntityQueryComparatorsBuilder.buildExpression<>(_:)()
{
  return static EntityQueryComparatorsBuilder.buildExpression<>(_:)();
}

uint64_t static EntityQueryComparatorsBuilder.buildExpression(_:)()
{
  return static EntityQueryComparatorsBuilder.buildExpression(_:)();
}

uint64_t EntityQuerySortableByProperty.init<A>(_:)()
{
  return EntityQuerySortableByProperty.init<A>(_:)();
}

uint64_t ParameterSummaryCaseCondition.init(_:_:)()
{
  return ParameterSummaryCaseCondition.init(_:_:)();
}

uint64_t GreaterThanOrEqualToComparator.init(mappingTransform:)()
{
  return GreaterThanOrEqualToComparator.init(mappingTransform:)();
}

uint64_t static EntityQuerySortingOptionsBuilder.buildBlock(_:)()
{
  return static EntityQuerySortingOptionsBuilder.buildBlock(_:)();
}

uint64_t static EntityQuerySortingOptionsBuilder.buildExpression(_:)()
{
  return static EntityQuerySortingOptionsBuilder.buildExpression(_:)();
}

uint64_t ParameterSummaryDefaultCaseCondition.init(_:)()
{
  return ParameterSummaryDefaultCaseCondition.init(_:)();
}

uint64_t static CocoaError.fileNoSuchFile.getter()
{
  return static CocoaError.fileNoSuchFile.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t NSNotFound.getter()
{
  return NSNotFound.getter();
}

uint64_t type metadata accessor for JSONDecoder.DateDecodingStrategy()
{
  return type metadata accessor for JSONDecoder.DateDecodingStrategy();
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.setter()
{
  return dispatch thunk of JSONDecoder.dateDecodingStrategy.setter();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t type metadata accessor for JSONEncoder.DateEncodingStrategy()
{
  return type metadata accessor for JSONEncoder.DateEncodingStrategy();
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.setter()
{
  return dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return static CharacterSet.whitespacesAndNewlines.getter();
}

uint64_t static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CharacterSet.newlines.getter()
{
  return static CharacterSet.newlines.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.name.getter()
{
  return Notification.name.getter();
}

uint64_t Notification.object.getter()
{
  return Notification.object.getter();
}

uint64_t Notification.userInfo.getter()
{
  return Notification.userInfo.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.path.setter()
{
  return URLComponents.path.setter();
}

uint64_t URLComponents.scheme.setter()
{
  return URLComponents.scheme.setter();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t SortDescriptor.init<A>(_:comparator:order:)()
{
  return SortDescriptor.init<A>(_:comparator:order:)();
}

{
  return SortDescriptor.init<A>(_:comparator:order:)();
}

uint64_t SortDescriptor.init<A>(_:order:)()
{
  return SortDescriptor.init<A>(_:order:)();
}

uint64_t AttributeScopes.UIKitAttributes.font.getter()
{
  return AttributeScopes.UIKitAttributes.font.getter();
}

uint64_t AttributedString.characters.getter()
{
  return AttributedString.characters.getter();
}

uint64_t type metadata accessor for AttributedString.CharacterView()
{
  return type metadata accessor for AttributedString.CharacterView();
}

uint64_t AttributedString.init(stringLiteral:)()
{
  return AttributedString.init(stringLiteral:)();
}

uint64_t AttributedString.removeSubrange<A>(_:)()
{
  return AttributedString.removeSubrange<A>(_:)();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  return type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  return type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax();
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)()
{
  return AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions()
{
  return type metadata accessor for AttributedString.MarkdownParsingOptions();
}

uint64_t type metadata accessor for AttributedString.Index()
{
  return type metadata accessor for AttributedString.Index();
}

uint64_t AttributedString.endIndex.getter()
{
  return AttributedString.endIndex.getter();
}

uint64_t AttributedString.init(markdown:options:baseURL:)()
{
  return AttributedString.init(markdown:options:baseURL:)();
}

uint64_t AttributedString.init()()
{
  return AttributedString.init()();
}

uint64_t type metadata accessor for AttributedString()
{
  return type metadata accessor for AttributedString();
}

uint64_t AttributedString.init(_:)()
{
  return AttributedString.init(_:)();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t AttributeContainer.subscript.setter()
{
  return AttributeContainer.subscript.setter();
}

uint64_t type metadata accessor for AttributeContainer()
{
  return type metadata accessor for AttributeContainer();
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)()
{
  return static _ErrorCodeProtocol.~= infix(_:_:)();
}

uint64_t static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)()
{
  return static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
}

uint64_t static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)()
{
  return static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
}

uint64_t static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)()
{
  return static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)();
}

uint64_t static PredicateExpressions.build_Arg<A>(_:)()
{
  return static PredicateExpressions.build_Arg<A>(_:)();
}

{
  return static PredicateExpressions.build_Arg<A>(_:)();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t LocalizedStringResource.init(stringLiteral:)()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t type metadata accessor for LocalizedStringResource.BundleDescription()
{
  return type metadata accessor for LocalizedStringResource.BundleDescription();
}

uint64_t LocalizedStringResource.init(stringInterpolation:)()
{
  return LocalizedStringResource.init(stringInterpolation:)();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t LocalizedStringResource.init(_:table:locale:bundle:comment:)()
{
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t AttributedStringProtocol.range<A>(of:options:locale:)()
{
  return AttributedStringProtocol.range<A>(of:options:locale:)();
}

uint64_t NSKeyValueObservedChange.newValue.getter()
{
  return NSKeyValueObservedChange.newValue.getter();
}

uint64_t _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)()
{
  return _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
}

uint64_t _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)()
{
  return _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
}

uint64_t URL.init(stringLiteral:)()
{
  return URL.init(stringLiteral:)();
}

uint64_t URL.description.getter()
{
  return URL.description.getter();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.pathExtension.getter()
{
  return URL.pathExtension.getter();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.pathComponents.getter()
{
  return URL.pathComponents.getter();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.deletingPathExtension()()
{
  return URL.deletingPathExtension()();
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t URL.appendingPathExtension(_:)()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t static URL.== infix(_:_:)()
{
  return static URL.== infix(_:_:)();
}

Swift::Void __swiftcall URL.stopAccessingSecurityScopedResource()()
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::Bool __swiftcall URL.startAccessingSecurityScopedResource()()
{
  return URL.startAccessingSecurityScopedResource()();
}

uint64_t URL.hash(into:)()
{
  return URL.hash(into:)();
}

uint64_t URL.scheme.getter()
{
  return URL.scheme.getter();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t Date.numberOfDays(from:)()
{
  return Date.numberOfDays(from:)();
}

uint64_t Date.isSameDay(as:)()
{
  return Date.isSameDay(as:)();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.+ infix(_:_:)()
{
  return static Date.+ infix(_:_:)();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

Swift::String __swiftcall Date.formatted()()
{
  uint64_t v0 = Date.formatted()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  return (NSIndexPath)IndexPath._bridgeToObjectiveC()();
}

uint64_t static IndexPath._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t IndexPath.init(row:section:)()
{
  return IndexPath.init(row:section:)();
}

uint64_t IndexPath.row.getter()
{
  return IndexPath.row.getter();
}

uint64_t IndexPath.init(item:section:)()
{
  return IndexPath.init(item:section:)();
}

uint64_t IndexPath.section.getter()
{
  return IndexPath.section.getter();
}

uint64_t type metadata accessor for IndexPath()
{
  return type metadata accessor for IndexPath();
}

uint64_t Predicate.evaluate(_:)()
{
  return Predicate.evaluate(_:)();
}

uint64_t Predicate.init(_:)()
{
  return Predicate.init(_:)();
}

uint64_t CollaboratorStatus.init(participantID:participant:color:selection:)()
{
  return CollaboratorStatus.init(participantID:participant:color:selection:)();
}

uint64_t CollaboratorStatus.participantID.getter()
{
  return CollaboratorStatus.participantID.getter();
}

uint64_t type metadata accessor for CollaboratorStatus()
{
  return type metadata accessor for CollaboratorStatus();
}

uint64_t ActivityStreamDockView.init(coordinator:isDisplayedInCard:)()
{
  return ActivityStreamDockView.init(coordinator:isDisplayedInCard:)();
}

uint64_t ActivityStreamDockView.object.setter()
{
  return ActivityStreamDockView.object.setter();
}

Swift::Void __swiftcall ActivityStreamDockView.update()()
{
}

uint64_t ActivityStreamDockView.selection.setter()
{
  return ActivityStreamDockView.selection.setter();
}

uint64_t type metadata accessor for ActivityStreamDockView()
{
  return type metadata accessor for ActivityStreamDockView();
}

uint64_t type metadata accessor for CollaboratorStatusView()
{
  return type metadata accessor for CollaboratorStatusView();
}

uint64_t AuthorHighlightsUpdater.authorHighlightsController.getter()
{
  return AuthorHighlightsUpdater.authorHighlightsController.getter();
}

Swift::Void __swiftcall AuthorHighlightsUpdater.scheduleUpdate(animated:)(Swift::Bool animated)
{
}

uint64_t AuthorHighlightsUpdater.didScheduleUpdate.getter()
{
  return AuthorHighlightsUpdater.didScheduleUpdate.getter();
}

uint64_t AuthorHighlightsUpdater.collaboratorStatuses.modify()
{
  return AuthorHighlightsUpdater.collaboratorStatuses.modify();
}

uint64_t AuthorHighlightsUpdater.collaboratorStatuses.setter()
{
  return AuthorHighlightsUpdater.collaboratorStatuses.setter();
}

uint64_t AuthorHighlightsUpdater.showsCollaboratorStatuses.getter()
{
  return AuthorHighlightsUpdater.showsCollaboratorStatuses.getter();
}

Swift::Void __swiftcall AuthorHighlightsUpdater.update(animated:)(Swift::Bool animated)
{
}

uint64_t ICQueryType.tagSelection(managedObjectContext:)()
{
  return ICQueryType.tagSelection(managedObjectContext:)();
}

uint64_t ICQueryType.allowsDeleted.getter()
{
  return ICQueryType.allowsDeleted.getter();
}

uint64_t ICQueryType.predicate.getter()
{
  return ICQueryType.predicate.getter();
}

uint64_t type metadata accessor for ICQueryType()
{
  return type metadata accessor for ICQueryType();
}

uint64_t type metadata accessor for AnsiStylings()
{
  return type metadata accessor for AnsiStylings();
}

uint64_t AttachmentID.init(contextType:managedIdentifier:)()
{
  return AttachmentID.init(contextType:managedIdentifier:)();
}

uint64_t AttachmentID.contextType.getter()
{
  return AttachmentID.contextType.getter();
}

uint64_t AttachmentID.managedIdentifier.getter()
{
  return AttachmentID.managedIdentifier.getter();
}

uint64_t static AttachmentID.== infix(_:_:)()
{
  return static AttachmentID.== infix(_:_:)();
}

uint64_t type metadata accessor for AttachmentID()
{
  return type metadata accessor for AttachmentID();
}

uint64_t CallerOrigin.defaultStringForParticipant.getter()
{
  return CallerOrigin.defaultStringForParticipant.getter();
}

uint64_t type metadata accessor for CallerOrigin()
{
  return type metadata accessor for CallerOrigin();
}

uint64_t type metadata accessor for FastSyncError()
{
  return type metadata accessor for FastSyncError();
}

uint64_t type metadata accessor for ICQueryEntity()
{
  return type metadata accessor for ICQueryEntity();
}

uint64_t dispatch thunk of ICFileManaging.createFile(at:contents:)()
{
  return dispatch thunk of ICFileManaging.createFile(at:contents:)();
}

uint64_t dispatch thunk of ICFileManaging.removeItem(at:)()
{
  return dispatch thunk of ICFileManaging.removeItem(at:)();
}

uint64_t dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)()
{
  return dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)();
}

uint64_t dispatch thunk of ICFileManaging.contentsOfDirectory(at:)()
{
  return dispatch thunk of ICFileManaging.contentsOfDirectory(at:)();
}

uint64_t dispatch thunk of ICFileManaging.subdirectoriesOfDirectory(at:)()
{
  return dispatch thunk of ICFileManaging.subdirectoriesOfDirectory(at:)();
}

uint64_t dispatch thunk of ICFileManaging.url(for:)()
{
  return dispatch thunk of ICFileManaging.url(for:)();
}

uint64_t dispatch thunk of ICFileManaging.contents(of:)()
{
  return dispatch thunk of ICFileManaging.contents(of:)();
}

uint64_t dispatch thunk of ICFileManaging.copyItem(at:to:)()
{
  return dispatch thunk of ICFileManaging.copyItem(at:to:)();
}

uint64_t MessageChunking.UnsafeAppendingAccumulator.process<A>(incoming:)()
{
  return MessageChunking.UnsafeAppendingAccumulator.process<A>(incoming:)();
}

uint64_t MessageChunking.UnsafeAppendingAccumulator.init()()
{
  return MessageChunking.UnsafeAppendingAccumulator.init()();
}

uint64_t type metadata accessor for MessageChunking.UnsafeAppendingAccumulator()
{
  return type metadata accessor for MessageChunking.UnsafeAppendingAccumulator();
}

uint64_t static EditNoteActivity.== infix(_:_:)()
{
  return static EditNoteActivity.== infix(_:_:)();
}

uint64_t EditNoteActivity.id.getter()
{
  return EditNoteActivity.id.getter();
}

uint64_t EditNoteActivity.init(note:)()
{
  return EditNoteActivity.init(note:)();
}

uint64_t EditNoteActivity.noteID.getter()
{
  return EditNoteActivity.noteID.getter();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EditNoteActivity.validate()()
{
}

uint64_t EditNoteActivity.accountID.getter()
{
  return EditNoteActivity.accountID.getter();
}

uint64_t EditNoteActivity.noteTitle.getter()
{
  return EditNoteActivity.noteTitle.getter();
}

uint64_t EditNoteActivity.replicaID.getter()
{
  return EditNoteActivity.replicaID.getter();
}

uint64_t type metadata accessor for EditNoteActivity()
{
  return type metadata accessor for EditNoteActivity();
}

uint64_t ArgumentDecodable<>.init(fromArgument:)()
{
  return ArgumentDecodable<>.init(fromArgument:)();
}

uint64_t static ArgumentDecodable<>.typeSummary(forName:)()
{
  return static ArgumentDecodable<>.typeSummary(forName:)();
}

uint64_t dispatch thunk of ICObjectProviding.performAndWait(task:)()
{
  return dispatch thunk of ICObjectProviding.performAndWait(task:)();
}

uint64_t dispatch thunk of ICObjectProviding.object(for:)()
{
  return dispatch thunk of ICObjectProviding.object(for:)();
}

uint64_t ICObjectReferences.identifier.getter()
{
  return ICObjectReferences.identifier.getter();
}

uint64_t ICObjectReferences.recursiveChildren.getter()
{
  return ICObjectReferences.recursiveChildren.getter();
}

uint64_t ICObjectReferences.recursiveNoteCount.getter()
{
  return ICObjectReferences.recursiveNoteCount.getter();
}

uint64_t ICObjectReferences.recursiveAttachmentCount.getter()
{
  return ICObjectReferences.recursiveAttachmentCount.getter();
}

uint64_t ICObjectReferences.type.getter()
{
  return ICObjectReferences.type.getter();
}

uint64_t static ICObjectReferences.Types.== infix(_:_:)()
{
  return static ICObjectReferences.Types.== infix(_:_:)();
}

uint64_t type metadata accessor for ICObjectReferences.Types()
{
  return type metadata accessor for ICObjectReferences.Types();
}

uint64_t ICObjectReferences.title.getter()
{
  return ICObjectReferences.title.getter();
}

uint64_t ICObjectReferences.children.getter()
{
  return ICObjectReferences.children.getter();
}

uint64_t ICObjectReferences<>.init(object:recursivelyIncludeChildren:forPagesHandoff:)()
{
  return ICObjectReferences<>.init(object:recursivelyIncludeChildren:forPagesHandoff:)();
}

uint64_t type metadata accessor for ICObjectReferences()
{
  return type metadata accessor for ICObjectReferences();
}

uint64_t NotificationSource.makeAsyncIterator()()
{
  return NotificationSource.makeAsyncIterator()();
}

uint64_t NotificationSource.init(observing:object:transform:)()
{
  return NotificationSource.init(observing:object:transform:)();
}

uint64_t NotificationSource.init<A>(observing:object:transform:)()
{
  return NotificationSource.init<A>(observing:object:transform:)();
}

uint64_t type metadata accessor for ActivityEventObject()
{
  return type metadata accessor for ActivityEventObject();
}

uint64_t CloudRecordSnapshot<>.isOwnedByCurrentUser.getter()
{
  return CloudRecordSnapshot<>.isOwnedByCurrentUser.getter();
}

uint64_t CloudRecordSnapshot<>.init(record:from:)()
{
  return CloudRecordSnapshot<>.init(record:from:)();
}

uint64_t CloudRecordSnapshot.id.getter()
{
  return CloudRecordSnapshot.id.getter();
}

uint64_t type metadata accessor for CloudRecordSnapshot()
{
  return type metadata accessor for CloudRecordSnapshot();
}

uint64_t type metadata accessor for SummarizationResult()
{
  return type metadata accessor for SummarizationResult();
}

uint64_t type metadata accessor for SummarizationManager()
{
  return type metadata accessor for SummarizationManager();
}

uint64_t dispatch thunk of BackgroundTranscriber.addCallRecordingTranscriptionTaskToQueue(speakers:NGASR:attachmentIdentifier:)()
{
  return dispatch thunk of BackgroundTranscriber.addCallRecordingTranscriptionTaskToQueue(speakers:NGASR:attachmentIdentifier:)();
}

uint64_t static BackgroundTranscriber.shared.getter()
{
  return static BackgroundTranscriber.shared.getter();
}

uint64_t type metadata accessor for BackgroundTranscriber()
{
  return type metadata accessor for BackgroundTranscriber();
}

uint64_t FallbackActivityEvent.minimumSupportedNotesVersion.getter()
{
  return FallbackActivityEvent.minimumSupportedNotesVersion.getter();
}

uint64_t FallbackActivityEvent.localizedFallbackTitle.getter()
{
  return FallbackActivityEvent.localizedFallbackTitle.getter();
}

uint64_t FallbackActivityEvent.participant.getter()
{
  return FallbackActivityEvent.participant.getter();
}

uint64_t FallbackActivityEvent.object.getter()
{
  return FallbackActivityEvent.object.getter();
}

uint64_t FallbackActivityEvent.typeName.getter()
{
  return FallbackActivityEvent.typeName.getter();
}

uint64_t FallbackActivityEvent.timestamp.getter()
{
  return FallbackActivityEvent.timestamp.getter();
}

uint64_t FallbackActivityEvent.init(timestamp:object:participant:minimumSupportedNotesVersion:typeName:localizedFallbackTitle:)()
{
  return FallbackActivityEvent.init(timestamp:object:participant:minimumSupportedNotesVersion:typeName:localizedFallbackTitle:)();
}

uint64_t type metadata accessor for FallbackActivityEvent()
{
  return type metadata accessor for FallbackActivityEvent();
}

uint64_t ICTTTranscriptSegment.__allocating_init(document:identity:)()
{
  return ICTTTranscriptSegment.__allocating_init(document:identity:)();
}

uint64_t type metadata accessor for ICTTTranscriptSegment()
{
  return type metadata accessor for ICTTTranscriptSegment();
}

uint64_t ICModernObjectProvider.init(context:)()
{
  return ICModernObjectProvider.init(context:)();
}

uint64_t ICModernObjectProvider.context.getter()
{
  return ICModernObjectProvider.context.getter();
}

uint64_t type metadata accessor for ICModernObjectProvider()
{
  return type metadata accessor for ICModernObjectProvider();
}

uint64_t type metadata accessor for PersistedActivityEvent.Activities()
{
  return type metadata accessor for PersistedActivityEvent.Activities();
}

uint64_t PersistedActivityEvent.participant.getter()
{
  return PersistedActivityEvent.participant.getter();
}

uint64_t PersistedActivityEvent.object.getter()
{
  return PersistedActivityEvent.object.getter();
}

uint64_t PersistedActivityEvent.activity.getter()
{
  return PersistedActivityEvent.activity.getter();
}

uint64_t PersistedActivityEvent.timestamp.getter()
{
  return PersistedActivityEvent.timestamp.getter();
}

uint64_t PersistedActivityEvent.init(timestamp:object:participant:activity:)()
{
  return PersistedActivityEvent.init(timestamp:object:participant:activity:)();
}

uint64_t type metadata accessor for PersistedActivityEvent()
{
  return type metadata accessor for PersistedActivityEvent();
}

uint64_t ActivityEventParticipant.init(cloudSyncingObject:)()
{
  return ActivityEventParticipant.init(cloudSyncingObject:)();
}

uint64_t type metadata accessor for ActivityEventParticipant()
{
  return type metadata accessor for ActivityEventParticipant();
}

uint64_t ICQueryResultsController.performFetch()()
{
  return ICQueryResultsController.performFetch()();
}

uint64_t ICQueryResultsController.init(managedObjectContext:query:)()
{
  return ICQueryResultsController.init(managedObjectContext:query:)();
}

uint64_t type metadata accessor for ICQueryResultsController()
{
  return type metadata accessor for ICQueryResultsController();
}

uint64_t ManagedEntityContextType.uriPathComponent.getter()
{
  return ManagedEntityContextType.uriPathComponent.getter();
}

uint64_t ManagedEntityContextType.init(rawValue:)()
{
  return ManagedEntityContextType.init(rawValue:)();
}

uint64_t ManagedEntityContextType.rawValue.getter()
{
  return ManagedEntityContextType.rawValue.getter();
}

uint64_t type metadata accessor for ManagedEntityContextType()
{
  return type metadata accessor for ManagedEntityContextType();
}

uint64_t static TranscriptViewModelSegment.transcriptStringFromSegments(segments:)()
{
  return static TranscriptViewModelSegment.transcriptStringFromSegments(segments:)();
}

uint64_t TranscriptViewModelSegment.init(text:timestamp:duration:speaker:callerOrigin:)()
{
  return TranscriptViewModelSegment.init(text:timestamp:duration:speaker:callerOrigin:)();
}

uint64_t TranscriptViewModelSegment.duration.getter()
{
  return TranscriptViewModelSegment.duration.getter();
}

uint64_t TranscriptViewModelSegment.timestamp.getter()
{
  return TranscriptViewModelSegment.timestamp.getter();
}

uint64_t type metadata accessor for TranscriptViewModelSegment()
{
  return type metadata accessor for TranscriptViewModelSegment();
}

uint64_t type metadata accessor for SiriSpeechRecognitionManager()
{
  return type metadata accessor for SiriSpeechRecognitionManager();
}

uint64_t static AudioTranscriptionContactsUtility.speakerNameFromContacts(handle:)()
{
  return static AudioTranscriptionContactsUtility.speakerNameFromContacts(handle:)();
}

uint64_t RealtimeCollaborationSelectionDocument.mergeLocalSelection(_:)()
{
  return RealtimeCollaborationSelectionDocument.mergeLocalSelection(_:)();
}

uint64_t RealtimeCollaborationSelectionDocument.ParticipantSelection.participantID.getter()
{
  return RealtimeCollaborationSelectionDocument.ParticipantSelection.participantID.getter();
}

uint64_t RealtimeCollaborationSelectionDocument.ParticipantSelection.selection.getter()
{
  return RealtimeCollaborationSelectionDocument.ParticipantSelection.selection.getter();
}

uint64_t type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection()
{
  return type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection();
}

uint64_t type metadata accessor for RealtimeCollaborationSelectionDocument.TableSelection()
{
  return type metadata accessor for RealtimeCollaborationSelectionDocument.TableSelection();
}

uint64_t RealtimeCollaborationSelectionDocument.removeSelection(forParticipantID:)()
{
  return RealtimeCollaborationSelectionDocument.removeSelection(forParticipantID:)();
}

uint64_t type metadata accessor for RealtimeCollaborationSelectionDocument.Selection()
{
  return type metadata accessor for RealtimeCollaborationSelectionDocument.Selection();
}

uint64_t RealtimeCollaborationSelectionDocument.selections.getter()
{
  return RealtimeCollaborationSelectionDocument.selections.getter();
}

uint64_t RealtimeCollaborationSelectionDocument.localParticipantID.getter()
{
  return RealtimeCollaborationSelectionDocument.localParticipantID.getter();
}

uint64_t RealtimeCollaborationSelectionDocument.merge(with:)()
{
  return RealtimeCollaborationSelectionDocument.merge(with:)();
}

uint64_t RealtimeCollaborationSelectionDocument.init(identity:localParticipantID:)()
{
  return RealtimeCollaborationSelectionDocument.init(identity:localParticipantID:)();
}

uint64_t type metadata accessor for RealtimeCollaborationSelectionDocument()
{
  return type metadata accessor for RealtimeCollaborationSelectionDocument();
}

uint64_t TagID.displayText.getter()
{
  return TagID.displayText.getter();
}

uint64_t static TagID.== infix(_:_:)()
{
  return static TagID.== infix(_:_:)();
}

uint64_t type metadata accessor for TagID()
{
  return type metadata accessor for TagID();
}

uint64_t TagID.init(_:)()
{
  return TagID.init(_:)();
}

uint64_t NoteID.contextType.getter()
{
  return NoteID.contextType.getter();
}

uint64_t NoteID.managedIdentifier.getter()
{
  return NoteID.managedIdentifier.getter();
}

uint64_t static NoteID.== infix(_:_:)()
{
  return static NoteID.== infix(_:_:)();
}

uint64_t type metadata accessor for NoteID()
{
  return type metadata accessor for NoteID();
}

uint64_t static ICQuery.makeQueryForNotesMatching(_:)()
{
  return static ICQuery.makeQueryForNotesMatching(_:)();
}

{
  return static ICQuery.makeQueryForNotesMatching(_:)();
}

uint64_t dispatch thunk of ICQuery.type.getter()
{
  return dispatch thunk of ICQuery.type.getter();
}

uint64_t ICQuery.init(entity:type:)()
{
  return ICQuery.init(entity:type:)();
}

uint64_t dispatch thunk of ICQuery.entity.getter()
{
  return dispatch thunk of ICQuery.entity.getter();
}

uint64_t type metadata accessor for ICQuery()
{
  return type metadata accessor for ICQuery();
}

uint64_t TableID.init(contextType:managedIdentifier:)()
{
  return TableID.init(contextType:managedIdentifier:)();
}

uint64_t TableID.contextType.getter()
{
  return TableID.contextType.getter();
}

uint64_t TableID.managedIdentifier.getter()
{
  return TableID.managedIdentifier.getter();
}

uint64_t static TableID.== infix(_:_:)()
{
  return static TableID.== infix(_:_:)();
}

uint64_t type metadata accessor for TableID()
{
  return type metadata accessor for TableID();
}

uint64_t type metadata accessor for FastSync.Notes()
{
  return type metadata accessor for FastSync.Notes();
}

uint64_t static FastSync.MessageVersion.current.getter()
{
  return static FastSync.MessageVersion.current.getter();
}

uint64_t type metadata accessor for FastSync.MessageVersion()
{
  return type metadata accessor for FastSync.MessageVersion();
}

uint64_t FastSync.PaperKitMessage.data.getter()
{
  return FastSync.PaperKitMessage.data.getter();
}

uint64_t FastSync.PaperKitMessage.init(data:)()
{
  return FastSync.PaperKitMessage.init(data:)();
}

uint64_t type metadata accessor for FastSync.PaperKitMessage()
{
  return type metadata accessor for FastSync.PaperKitMessage();
}

uint64_t FastSync.MessageContainer.init<A>(message:)()
{
  return FastSync.MessageContainer.init<A>(message:)();
}

uint64_t FastSync.MessageContainer.version.getter()
{
  return FastSync.MessageContainer.version.getter();
}

uint64_t FastSync.SelectionMessage.selectionStateData.getter()
{
  return FastSync.SelectionMessage.selectionStateData.getter();
}

uint64_t FastSync.SelectionMessage.init(replicaID:selectionStateData:)()
{
  return FastSync.SelectionMessage.init(replicaID:selectionStateData:)();
}

uint64_t type metadata accessor for FastSync.SelectionMessage()
{
  return type metadata accessor for FastSync.SelectionMessage();
}

uint64_t FastSync.NoteContentMessage.recordBatchData.getter()
{
  return FastSync.NoteContentMessage.recordBatchData.getter();
}

uint64_t FastSync.NoteContentMessage.init(recordBatchData:)()
{
  return FastSync.NoteContentMessage.init(recordBatchData:)();
}

uint64_t type metadata accessor for FastSync.NoteContentMessage()
{
  return type metadata accessor for FastSync.NoteContentMessage();
}

uint64_t type metadata accessor for FastSync.PaperKit()
{
  return type metadata accessor for FastSync.PaperKit();
}

uint64_t FolderID.contextType.getter()
{
  return FolderID.contextType.getter();
}

uint64_t FolderID.managedIdentifier.getter()
{
  return FolderID.managedIdentifier.getter();
}

uint64_t static FolderID.== infix(_:_:)()
{
  return static FolderID.== infix(_:_:)();
}

uint64_t type metadata accessor for FolderID()
{
  return type metadata accessor for FolderID();
}

uint64_t AccountID.contextType.getter()
{
  return AccountID.contextType.getter();
}

uint64_t AccountID.description.getter()
{
  return AccountID.description.getter();
}

uint64_t static AccountID.== infix(_:_:)()
{
  return static AccountID.== infix(_:_:)();
}

uint64_t type metadata accessor for AccountID.Authority()
{
  return type metadata accessor for AccountID.Authority();
}

uint64_t AccountID.Authority.init(_:)()
{
  return AccountID.Authority.init(_:)();
}

uint64_t AccountID.init(authority:contextType:)()
{
  return AccountID.init(authority:contextType:)();
}

uint64_t AccountID.authority.getter()
{
  return AccountID.authority.getter();
}

uint64_t type metadata accessor for AccountID()
{
  return type metadata accessor for AccountID();
}

uint64_t DataFrame.init(csvData:columns:rows:types:options:)()
{
  return DataFrame.init(csvData:columns:rows:types:options:)();
}

uint64_t DataFrame.Row.count.getter()
{
  return DataFrame.Row.count.getter();
}

uint64_t type metadata accessor for DataFrame.Row()
{
  return type metadata accessor for DataFrame.Row();
}

uint64_t DataFrame.Row.subscript.getter()
{
  return DataFrame.Row.subscript.getter();
}

uint64_t DataFrame.Rows.count.getter()
{
  return DataFrame.Rows.count.getter();
}

uint64_t type metadata accessor for DataFrame.Rows()
{
  return type metadata accessor for DataFrame.Rows();
}

uint64_t DataFrame.Rows.subscript.getter()
{
  return DataFrame.Rows.subscript.getter();
}

uint64_t DataFrame.rows.getter()
{
  return DataFrame.rows.getter();
}

uint64_t DataFrame.shape.getter()
{
  return DataFrame.shape.getter();
}

uint64_t type metadata accessor for DataFrame()
{
  return type metadata accessor for DataFrame();
}

uint64_t CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)()
{
  return CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
}

uint64_t type metadata accessor for CSVReadingOptions()
{
  return type metadata accessor for CSVReadingOptions();
}

uint64_t type metadata accessor for CSVType()
{
  return type metadata accessor for CSVType();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)CGFloat._bridgeToObjectiveC()();
}

uint64_t static CGFloat._forceBridgeFromObjectiveC(_:result:)()
{
  return static CGFloat._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static CGFloat._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t static RegexComponentBuilder.buildExpression<A>(_:)()
{
  return static RegexComponentBuilder.buildExpression<A>(_:)();
}

uint64_t static RegexComponentBuilder.buildPartialBlock<A>(first:)()
{
  return static RegexComponentBuilder.buildPartialBlock<A>(first:)();
}

uint64_t ZeroOrMore.init(_:)()
{
  return ZeroOrMore.init(_:)();
}

uint64_t makeFactory()()
{
  return makeFactory()();
}

uint64_t type metadata accessor for CharacterClass()
{
  return type metadata accessor for CharacterClass();
}

uint64_t One.init<A>(_:)()
{
  return One.init<A>(_:)();
}

uint64_t OneOrMore.init(_:)()
{
  return OneOrMore.init(_:)();
}

uint64_t static GroupSessionProvider<>.sharedGroupSessionProvider(for:share:container:)()
{
  return static GroupSessionProvider<>.sharedGroupSessionProvider(for:share:container:)();
}

uint64_t static GroupSessionProvider<>.personalGroupSessionProvider(for:)()
{
  return static GroupSessionProvider<>.personalGroupSessionProvider(for:)();
}

uint64_t dispatch thunk of GroupSessionProvider.state.getter()
{
  return dispatch thunk of GroupSessionProvider.state.getter();
}

uint64_t dispatch thunk of GroupSessionProvider.activity.getter()
{
  return dispatch thunk of GroupSessionProvider.activity.getter();
}

uint64_t GroupSessionProvider.sessions.getter()
{
  return GroupSessionProvider.sessions.getter();
}

uint64_t GroupSessionMessenger.MessageContext.source.getter()
{
  return GroupSessionMessenger.MessageContext.source.getter();
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageContext()
{
  return type metadata accessor for GroupSessionMessenger.MessageContext();
}

uint64_t GroupSessionMessenger.init<A>(session:)()
{
  return GroupSessionMessenger.init<A>(session:)();
}

uint64_t GroupSessionMessenger.Messages.makeAsyncIterator()()
{
  return GroupSessionMessenger.Messages.makeAsyncIterator()();
}

uint64_t GroupSessionMessenger.messages<A>(of:)()
{
  return GroupSessionMessenger.messages<A>(of:)();
}

uint64_t type metadata accessor for GroupSessionMessenger()
{
  return type metadata accessor for GroupSessionMessenger();
}

uint64_t type metadata accessor for GroupSessionProviderState()
{
  return type metadata accessor for GroupSessionProviderState();
}

uint64_t GroupSession.localParticipant.getter()
{
  return GroupSession.localParticipant.getter();
}

uint64_t GroupSession.activeParticipants.getter()
{
  return GroupSession.activeParticipants.getter();
}

uint64_t GroupSession.$activeParticipants.getter()
{
  return GroupSession.$activeParticipants.getter();
}

uint64_t GroupSession.id.getter()
{
  return GroupSession.id.getter();
}

Swift::Void __swiftcall GroupSession.join()()
{
}

Swift::Void __swiftcall GroupSession.leave()()
{
}

uint64_t GroupSession.state.getter()
{
  return GroupSession.state.getter();
}

uint64_t GroupSession.$state.getter()
{
  return GroupSession.$state.getter();
}

uint64_t GroupSession.Sessions.makeAsyncIterator()()
{
  return GroupSession.Sessions.makeAsyncIterator()();
}

uint64_t GroupSession.activity.getter()
{
  return GroupSession.activity.getter();
}

uint64_t Participant.id.getter()
{
  return Participant.id.getter();
}

uint64_t Participant.handle.getter()
{
  return Participant.handle.getter();
}

uint64_t type metadata accessor for Participant()
{
  return type metadata accessor for Participant();
}

uint64_t DataRepresentation.init(exportedContentType:exporting:)()
{
  return DataRepresentation.init(exportedContentType:exporting:)();
}

uint64_t FileRepresentation.init(exportedContentType:shouldAllowToOpenInPlace:exporting:)()
{
  return FileRepresentation.init(exportedContentType:shouldAllowToOpenInPlace:exporting:)();
}

uint64_t SentTransferredFile.init(_:allowAccessingOriginalFile:)()
{
  return SentTransferredFile.init(_:allowAccessingOriginalFile:)();
}

uint64_t TransferRepresentation.exportingCondition(_:)()
{
  return TransferRepresentation.exportingCondition(_:)();
}

uint64_t UIAppIntentInteraction.init<A>(intent:perform:)()
{
  return UIAppIntentInteraction.init<A>(intent:perform:)();
}

uint64_t type metadata accessor for UIAppIntentInteraction()
{
  return type metadata accessor for UIAppIntentInteraction();
}

uint64_t _RegexFactory.accumulate<A, B, C>(_:_:)()
{
  return _RegexFactory.accumulate<A, B, C>(_:_:)();
}

uint64_t _RegexFactory.zeroOrMore<A, B>(_:_:)()
{
  return _RegexFactory.zeroOrMore<A, B>(_:_:)();
}

uint64_t _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)()
{
  return _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
}

uint64_t _RegexFactory.oneOrMore<A, B>(_:_:)()
{
  return _RegexFactory.oneOrMore<A, B>(_:_:)();
}

uint64_t type metadata accessor for _RegexFactory()
{
  return type metadata accessor for _RegexFactory();
}

uint64_t static RegexComponent<>.word.getter()
{
  return static RegexComponent<>.word.getter();
}

uint64_t type metadata accessor for RegexRepetitionBehavior()
{
  return type metadata accessor for RegexRepetitionBehavior();
}

uint64_t Regex.init<A>(_:)()
{
  return Regex.init<A>(_:)();
}

uint64_t RecordingMetadata.localHandle.getter()
{
  return RecordingMetadata.localHandle.getter();
}

uint64_t RecordingMetadata.remoteHandle.getter()
{
  return RecordingMetadata.remoteHandle.getter();
}

uint64_t RecordingMetadata.startTimeStamp.getter()
{
  return RecordingMetadata.startTimeStamp.getter();
}

uint64_t type metadata accessor for RecordingMetadata()
{
  return type metadata accessor for RecordingMetadata();
}

uint64_t UTType.identifier.getter()
{
  return UTType.identifier.getter();
}

uint64_t static UTType.webArchive.getter()
{
  return static UTType.webArchive.getter();
}

uint64_t UTType.localizedDescription.getter()
{
  return UTType.localizedDescription.getter();
}

uint64_t static UTType.rtf.getter()
{
  return static UTType.rtf.getter();
}

uint64_t static UTType.item.getter()
{
  return static UTType.item.getter();
}

uint64_t type metadata accessor for UTType()
{
  return type metadata accessor for UTType();
}

uint64_t UTType.init(_:)()
{
  return UTType.init(_:)();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t OSSignpostID.init(log:object:)()
{
  return OSSignpostID.init(log:object:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.init(logger:)()
{
  return OSSignposter.init(logger:)();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t static Logger.launchTask.getter()
{
  return static Logger.launchTask.getter();
}

uint64_t static Logger.application.getter()
{
  return static Logger.application.getter();
}

uint64_t static Logger.systemPaper.getter()
{
  return static Logger.systemPaper.getter();
}

uint64_t static Logger.collaboration.getter()
{
  return static Logger.collaboration.getter();
}

uint64_t static Logger.activityStream.getter()
{
  return static Logger.activityStream.getter();
}

uint64_t static Logger.fastSyncPresence.getter()
{
  return static Logger.fastSyncPresence.getter();
}

uint64_t static Logger.audioTranscription.getter()
{
  return static Logger.audioTranscription.getter();
}

uint64_t static Logger.realtimeCollaboration.getter()
{
  return static Logger.realtimeCollaboration.getter();
}

uint64_t static Logger.verboseRealtimeCollaboration.getter()
{
  return static Logger.verboseRealtimeCollaboration.getter();
}

uint64_t static Logger.ui.getter()
{
  return static Logger.ui.getter();
}

uint64_t static Logger.link.getter()
{
  return static Logger.link.getter();
}

uint64_t static Logger.hashtag.getter()
{
  return static Logger.hashtag.getter();
}

uint64_t static Logger.archiving.getter()
{
  return static Logger.archiving.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t static _UIKitNumericRawRepresentable.+ infix(_:_:)()
{
  return static _UIKitNumericRawRepresentable.+ infix(_:_:)();
}

uint64_t UIContentView.supports(_:)()
{
  return UIContentView.supports(_:)();
}

uint64_t UICellAccessory.DeleteOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)()
{
  return UICellAccessory.DeleteOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)();
}

uint64_t type metadata accessor for UICellAccessory.DeleteOptions()
{
  return type metadata accessor for UICellAccessory.DeleteOptions();
}

uint64_t type metadata accessor for UICellAccessory.DisplayedState()
{
  return type metadata accessor for UICellAccessory.DisplayedState();
}

uint64_t type metadata accessor for UICellAccessory.LayoutDimension()
{
  return type metadata accessor for UICellAccessory.LayoutDimension();
}

uint64_t UICellAccessory.CheckmarkOptions.init(isHidden:reservedLayoutWidth:tintColor:)()
{
  return UICellAccessory.CheckmarkOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
}

uint64_t type metadata accessor for UICellAccessory.CheckmarkOptions()
{
  return type metadata accessor for UICellAccessory.CheckmarkOptions();
}

uint64_t UICellAccessory.PopUpMenuOptions.init(isHidden:reservedLayoutWidth:tintColor:)()
{
  return UICellAccessory.PopUpMenuOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
}

uint64_t type metadata accessor for UICellAccessory.PopUpMenuOptions()
{
  return type metadata accessor for UICellAccessory.PopUpMenuOptions();
}

uint64_t static UICellAccessory.disclosureIndicator(displayed:options:)()
{
  return static UICellAccessory.disclosureIndicator(displayed:options:)();
}

uint64_t UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)()
{
  return UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
}

uint64_t type metadata accessor for UICellAccessory.DisclosureIndicatorOptions()
{
  return type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
}

uint64_t static UICellAccessory.delete(displayed:options:actionHandler:)()
{
  return static UICellAccessory.delete(displayed:options:actionHandler:)();
}

uint64_t static UICellAccessory.checkmark(displayed:options:)()
{
  return static UICellAccessory.checkmark(displayed:options:)();
}

uint64_t static UICellAccessory.popUpMenu(_:displayed:options:selectedElementDidChangeHandler:)()
{
  return static UICellAccessory.popUpMenu(_:displayed:options:selectedElementDidChangeHandler:)();
}

uint64_t type metadata accessor for UICellAccessory()
{
  return type metadata accessor for UICellAccessory();
}

uint64_t static UICellConfigurationState.DropState.== infix(_:_:)()
{
  return static UICellConfigurationState.DropState.== infix(_:_:)();
}

uint64_t type metadata accessor for UICellConfigurationState.DropState()
{
  return type metadata accessor for UICellConfigurationState.DropState();
}

uint64_t UICellConfigurationState.cellDropState.getter()
{
  return UICellConfigurationState.cellDropState.getter();
}

uint64_t UICellConfigurationState.isSelected.getter()
{
  return UICellConfigurationState.isSelected.getter();
}

UICellConfigurationState __swiftcall UICellConfigurationState._bridgeToObjectiveC()()
{
  return (UICellConfigurationState)UICellConfigurationState._bridgeToObjectiveC()();
}

uint64_t static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UICellConfigurationState.isEditing.getter()
{
  return UICellConfigurationState.isEditing.getter();
}

uint64_t type metadata accessor for UICellConfigurationState()
{
  return type metadata accessor for UICellConfigurationState();
}

uint64_t UICellConfigurationState.subscript.getter()
{
  return UICellConfigurationState.subscript.getter();
}

uint64_t UICellConfigurationState.subscript.setter()
{
  return UICellConfigurationState.subscript.setter();
}

uint64_t UIBackgroundConfiguration.cornerRadius.setter()
{
  return UIBackgroundConfiguration.cornerRadius.setter();
}

uint64_t static UIBackgroundConfiguration.listSidebarCell()()
{
  return static UIBackgroundConfiguration.listSidebarCell()();
}

uint64_t UIBackgroundConfiguration.backgroundInsets.setter()
{
  return UIBackgroundConfiguration.backgroundInsets.setter();
}

uint64_t static UIBackgroundConfiguration._listInsetGroupedCell()()
{
  return static UIBackgroundConfiguration._listInsetGroupedCell()();
}

uint64_t static UIBackgroundConfiguration.listGroupedHeaderFooter()()
{
  return static UIBackgroundConfiguration.listGroupedHeaderFooter()();
}

uint64_t static UIBackgroundConfiguration.clear()()
{
  return static UIBackgroundConfiguration.clear()();
}

uint64_t UIBackgroundConfiguration.updated(for:)()
{
  return UIBackgroundConfiguration.updated(for:)();
}

uint64_t type metadata accessor for UIBackgroundConfiguration()
{
  return type metadata accessor for UIBackgroundConfiguration();
}

uint64_t type metadata accessor for UITraitUserInterfaceStyle()
{
  return type metadata accessor for UITraitUserInterfaceStyle();
}

uint64_t static UIListContentConfiguration.groupedFooter()()
{
  return static UIListContentConfiguration.groupedFooter()();
}

uint64_t UIListContentConfiguration.secondaryText.setter()
{
  return UIListContentConfiguration.secondaryText.setter();
}

uint64_t static UIListContentConfiguration.sidebarHeader()()
{
  return static UIListContentConfiguration.sidebarHeader()();
}

uint64_t UIListContentConfiguration.TextProperties.numberOfLines.setter()
{
  return UIListContentConfiguration.TextProperties.numberOfLines.setter();
}

uint64_t UIListContentConfiguration.TextProperties.font.getter()
{
  return UIListContentConfiguration.TextProperties.font.getter();
}

uint64_t UIListContentConfiguration.TextProperties.font.setter()
{
  return UIListContentConfiguration.TextProperties.font.setter();
}

uint64_t UIListContentConfiguration.TextProperties.color.getter()
{
  return UIListContentConfiguration.TextProperties.color.getter();
}

uint64_t UIListContentConfiguration.TextProperties.color.setter()
{
  return UIListContentConfiguration.TextProperties.color.setter();
}

uint64_t type metadata accessor for UIListContentConfiguration.TextProperties()
{
  return type metadata accessor for UIListContentConfiguration.TextProperties();
}

uint64_t UIListContentConfiguration.attributedText.setter()
{
  return UIListContentConfiguration.attributedText.setter();
}

uint64_t UIListContentConfiguration.textProperties.modify()
{
  return UIListContentConfiguration.textProperties.modify();
}

uint64_t UIListContentConfiguration.textProperties.getter()
{
  return UIListContentConfiguration.textProperties.getter();
}

uint64_t UIListContentConfiguration.ImageProperties.preferredSymbolConfiguration.setter()
{
  return UIListContentConfiguration.ImageProperties.preferredSymbolConfiguration.setter();
}

uint64_t UIListContentConfiguration.ImageProperties.cornerRadius.setter()
{
  return UIListContentConfiguration.ImageProperties.cornerRadius.setter();
}

uint64_t UIListContentConfiguration.ImageProperties.reservedLayoutSize.modify()
{
  return UIListContentConfiguration.ImageProperties.reservedLayoutSize.modify();
}

uint64_t UIListContentConfiguration.imageProperties.modify()
{
  return UIListContentConfiguration.imageProperties.modify();
}

uint64_t UIListContentConfiguration.imageToTextPadding.getter()
{
  return UIListContentConfiguration.imageToTextPadding.getter();
}

uint64_t UIListContentConfiguration.secondaryTextProperties.getter()
{
  return UIListContentConfiguration.secondaryTextProperties.getter();
}

uint64_t UIListContentConfiguration.directionalLayoutMargins.modify()
{
  return UIListContentConfiguration.directionalLayoutMargins.modify();
}

uint64_t UIListContentConfiguration.directionalLayoutMargins.getter()
{
  return UIListContentConfiguration.directionalLayoutMargins.getter();
}

uint64_t static UIListContentConfiguration.prominentInsetGroupedHeader()()
{
  return static UIListContentConfiguration.prominentInsetGroupedHeader()();
}

uint64_t static UIListContentConfiguration.cell()()
{
  return static UIListContentConfiguration.cell()();
}

uint64_t UIListContentConfiguration.text.getter()
{
  return UIListContentConfiguration.text.getter();
}

uint64_t UIListContentConfiguration.text.setter()
{
  return UIListContentConfiguration.text.setter();
}

uint64_t UIListContentConfiguration.image.getter()
{
  return UIListContentConfiguration.image.getter();
}

uint64_t UIListContentConfiguration.image.setter()
{
  return UIListContentConfiguration.image.setter();
}

uint64_t UIListContentConfiguration.updated(for:)()
{
  return UIListContentConfiguration.updated(for:)();
}

uint64_t static UIListContentConfiguration.valueCell()()
{
  return static UIListContentConfiguration.valueCell()();
}

uint64_t type metadata accessor for UIListContentConfiguration()
{
  return type metadata accessor for UIListContentConfiguration();
}

uint64_t NSDiffableDataSourceSnapshot.appendItems(_:toSection:)()
{
  return NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
}

uint64_t NSDiffableDataSourceSnapshot.insertItems(_:afterItem:)()
{
  return NSDiffableDataSourceSnapshot.insertItems(_:afterItem:)();
}

uint64_t NSDiffableDataSourceSnapshot.numberOfItems(inSection:)()
{
  return NSDiffableDataSourceSnapshot.numberOfItems(inSection:)();
}

Swift::Void __swiftcall NSDiffableDataSourceSnapshot.appendSections(_:)(Swift::OpaquePointer a1)
{
}

uint64_t NSDiffableDataSourceSnapshot.itemIdentifiers.getter()
{
  return NSDiffableDataSourceSnapshot.itemIdentifiers.getter();
}

uint64_t NSDiffableDataSourceSnapshot.numberOfSections.getter()
{
  return NSDiffableDataSourceSnapshot.numberOfSections.getter();
}

Swift::Void __swiftcall NSDiffableDataSourceSnapshot.reconfigureItems(_:)(Swift::OpaquePointer a1)
{
}

uint64_t NSDiffableDataSourceSnapshot.sectionIdentifiers.getter()
{
  return NSDiffableDataSourceSnapshot.sectionIdentifiers.getter();
}

uint64_t NSDiffableDataSourceSnapshot.init()()
{
  return NSDiffableDataSourceSnapshot.init()();
}

uint64_t UIListSeparatorConfiguration.topSeparatorVisibility.setter()
{
  return UIListSeparatorConfiguration.topSeparatorVisibility.setter();
}

uint64_t UIListSeparatorConfiguration.bottomSeparatorVisibility.setter()
{
  return UIListSeparatorConfiguration.bottomSeparatorVisibility.setter();
}

uint64_t UIListSeparatorConfiguration.bottomSeparatorInsets.modify()
{
  return UIListSeparatorConfiguration.bottomSeparatorInsets.modify();
}

uint64_t type metadata accessor for UIListSeparatorConfiguration.Visibility()
{
  return type metadata accessor for UIListSeparatorConfiguration.Visibility();
}

uint64_t type metadata accessor for UIListSeparatorConfiguration()
{
  return type metadata accessor for UIListSeparatorConfiguration();
}

uint64_t UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)()
{
  return UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:cellForItemAt:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:cellForItemAt:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:viewForSupplementaryElementOfKind:at:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:viewForSupplementaryElementOfKind:at:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.snapshot()()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)()
{
  return dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)();
}

uint64_t UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter()
{
  return UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter();
}

uint64_t UICollectionLayoutListConfiguration.separatorConfiguration.getter()
{
  return UICollectionLayoutListConfiguration.separatorConfiguration.getter();
}

uint64_t UICollectionLayoutListConfiguration.separatorConfiguration.setter()
{
  return UICollectionLayoutListConfiguration.separatorConfiguration.setter();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.Appearance()
{
  return type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.FooterMode()
{
  return type metadata accessor for UICollectionLayoutListConfiguration.FooterMode();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode()
{
  return type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
}

uint64_t UICollectionLayoutListConfiguration.init(appearance:)()
{
  return UICollectionLayoutListConfiguration.init(appearance:)();
}

uint64_t UICollectionLayoutListConfiguration.footerMode.setter()
{
  return UICollectionLayoutListConfiguration.footerMode.setter();
}

uint64_t UICollectionLayoutListConfiguration.headerMode.setter()
{
  return UICollectionLayoutListConfiguration.headerMode.setter();
}

uint64_t UICollectionLayoutListConfiguration.showsSeparators.setter()
{
  return UICollectionLayoutListConfiguration.showsSeparators.setter();
}

uint64_t UICollectionLayoutListConfiguration.itemSeparatorHandler.setter()
{
  return UICollectionLayoutListConfiguration.itemSeparatorHandler.setter();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration()
{
  return type metadata accessor for UICollectionLayoutListConfiguration();
}

uint64_t type metadata accessor for UIConfigurationTextAttributesTransformer()
{
  return type metadata accessor for UIConfigurationTextAttributesTransformer();
}

uint64_t UIConfigurationTextAttributesTransformer.init(_:)()
{
  return UIConfigurationTextAttributesTransformer.init(_:)();
}

uint64_t type metadata accessor for SpeechDonation.AudioSource()
{
  return type metadata accessor for SpeechDonation.AudioSource();
}

uint64_t SpeechDonation.init(donorBundleID:recordingDate:audioBuffers:locale:transcription:evaluation:speechAttributes:taskHint:audioSource:)()
{
  return SpeechDonation.init(donorBundleID:recordingDate:audioBuffers:locale:transcription:evaluation:speechAttributes:taskHint:audioSource:)();
}

uint64_t static SpeechDonation.TranscriptionEvaluation.inaccurate.getter()
{
  return static SpeechDonation.TranscriptionEvaluation.inaccurate.getter();
}

uint64_t static SpeechDonation.TranscriptionEvaluation.accurate.getter()
{
  return static SpeechDonation.TranscriptionEvaluation.accurate.getter();
}

uint64_t type metadata accessor for SpeechDonation.TranscriptionEvaluation()
{
  return type metadata accessor for SpeechDonation.TranscriptionEvaluation();
}

uint64_t type metadata accessor for SpeechDonation()
{
  return type metadata accessor for SpeechDonation();
}

uint64_t AudioBufferSequence.makeAsyncIterator()()
{
  return AudioBufferSequence.makeAsyncIterator()();
}

uint64_t AudioBufferSequence.init(url:processingFormat:)()
{
  return AudioBufferSequence.init(url:processingFormat:)();
}

uint64_t type metadata accessor for AudioBufferSequence()
{
  return type metadata accessor for AudioBufferSequence();
}

uint64_t type metadata accessor for TaskHint()
{
  return type metadata accessor for TaskHint();
}

uint64_t FilePath.components.getter()
{
  return FilePath.components.getter();
}

uint64_t type metadata accessor for FilePath.ComponentView.Index()
{
  return type metadata accessor for FilePath.ComponentView.Index();
}

uint64_t type metadata accessor for FilePath.ComponentView()
{
  return type metadata accessor for FilePath.ComponentView();
}

uint64_t type metadata accessor for FilePath.Root()
{
  return type metadata accessor for FilePath.Root();
}

uint64_t FilePath.init(root:components:)()
{
  return FilePath.init(root:components:)();
}

uint64_t FilePath.root.setter()
{
  return FilePath.root.setter();
}

uint64_t FilePath.append(_:)()
{
  return FilePath.append(_:)();
}

uint64_t FilePath.string.getter()
{
  return FilePath.string.getter();
}

uint64_t FilePath.Component.string.getter()
{
  return FilePath.Component.string.getter();
}

uint64_t type metadata accessor for FilePath.Component()
{
  return type metadata accessor for FilePath.Component();
}

uint64_t FilePath.Component.init(_:)()
{
  return FilePath.Component.init(_:)();
}

uint64_t type metadata accessor for FilePath()
{
  return type metadata accessor for FilePath();
}

uint64_t FilePath.init(_:)()
{
  return FilePath.init(_:)();
}

uint64_t Publishers.Merge.init(_:_:)()
{
  return Publishers.Merge.init(_:_:)();
}

uint64_t AnyCancellable.store(in:)()
{
  return AnyCancellable.store(in:)();
}

uint64_t AnyCancellable.store<A>(in:)()
{
  return AnyCancellable.store<A>(in:)();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t type metadata accessor for AnyCancellable()
{
  return type metadata accessor for AnyCancellable();
}

uint64_t AsyncPublisher.makeAsyncIterator()()
{
  return AsyncPublisher.makeAsyncIterator()();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t CurrentValueSubject.value.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t Empty.init(completeImmediately:)()
{
  return Empty.init(completeImmediately:)();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t Published.projectedValue.getter()
{
  return Published.projectedValue.getter();
}

uint64_t Published.projectedValue.setter()
{
  return Published.projectedValue.setter();
}

uint64_t static Published.subscript.modify()
{
  return static Published.subscript.modify();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher.map<A>(_:)()
{
  return Publisher.map<A>(_:)();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t Publisher.debounce<A>(for:scheduler:options:)()
{
  return Publisher.debounce<A>(for:scheduler:options:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t Publisher<>.assign(to:)()
{
  return Publisher<>.assign(to:)();
}

uint64_t Publisher<>.values.getter()
{
  return Publisher<>.values.getter();
}

uint64_t AnchorView.init(view:)()
{
  return AnchorView.init(view:)();
}

uint64_t type metadata accessor for AnchorView()
{
  return type metadata accessor for AnchorView();
}

uint64_t NotePreview.chrome.getter()
{
  return NotePreview.chrome.getter();
}

uint64_t type metadata accessor for NotePreview()
{
  return type metadata accessor for NotePreview();
}

uint64_t ActivityStream.animatesTransition(from:)()
{
  return ActivityStream.animatesTransition(from:)();
}

uint64_t type metadata accessor for ActivityStream.Item()
{
  return type metadata accessor for ActivityStream.Item();
}

uint64_t ActivityStream.init(items:resolver:now:)()
{
  return ActivityStream.init(items:resolver:now:)();
}

uint64_t static ActivityStream.Layout.avatarSize.getter()
{
  return static ActivityStream.Layout.avatarSize.getter();
}

uint64_t static ActivityStream.Layout.primaryFont.getter()
{
  return static ActivityStream.Layout.primaryFont.getter();
}

uint64_t static ActivityStream.Layout.avatarSpacing.getter()
{
  return static ActivityStream.Layout.avatarSpacing.getter();
}

uint64_t static ActivityStream.Layout.colorBarWidth.getter()
{
  return static ActivityStream.Layout.colorBarWidth.getter();
}

uint64_t static ActivityStream.Layout.colorBarSpacing.getter()
{
  return static ActivityStream.Layout.colorBarSpacing.getter();
}

uint64_t ActivityStream.Updater.activityStream.getter()
{
  return ActivityStream.Updater.activityStream.getter();
}

uint64_t ActivityStream.Updater.activityDigestSummary.getter()
{
  return ActivityStream.Updater.activityDigestSummary.getter();
}

uint64_t ActivityStream.Updater.init(resolver:selection:pressedItem:)()
{
  return ActivityStream.Updater.init(resolver:selection:pressedItem:)();
}

uint64_t ActivityStream.Updater.resolver.getter()
{
  return ActivityStream.Updater.resolver.getter();
}

uint64_t type metadata accessor for ActivityStream.Updater()
{
  return type metadata accessor for ActivityStream.Updater();
}

uint64_t type metadata accessor for ActivityStream()
{
  return type metadata accessor for ActivityStream();
}

uint64_t AvatarStackView.init(participants:)()
{
  return AvatarStackView.init(participants:)();
}

uint64_t static AvatarStackView.avatarDimension.getter()
{
  return static AvatarStackView.avatarDimension.getter();
}

uint64_t type metadata accessor for AvatarStackView()
{
  return type metadata accessor for AvatarStackView();
}

UIDeferredMenuElement __swiftcall ActionMenuProvider.makeDeferredMenuElement()()
{
  return (UIDeferredMenuElement)ActionMenuProvider.makeDeferredMenuElement()();
}

UIMenu __swiftcall ActionMenuProvider.makeMenu(deferredChildren:)(Swift::Bool deferredChildren)
{
  return (UIMenu)ActionMenuProvider.makeMenu(deferredChildren:)(deferredChildren);
}

Swift::Void __swiftcall ActionMenuProvider.willShowMenu()()
{
}

uint64_t ActionMenuProvider.title.getter()
{
  return ActionMenuProvider.title.getter();
}

uint64_t AvatarThumbnailView.init(thumbnailService:participants:)()
{
  return AvatarThumbnailView.init(thumbnailService:participants:)();
}

uint64_t type metadata accessor for AvatarThumbnailView()
{
  return type metadata accessor for AvatarThumbnailView();
}

uint64_t static NotePreviewProvider.shared.getter()
{
  return static NotePreviewProvider.shared.getter();
}

uint64_t NotePreviewProvider.preview(accountId:noteId:prefersDefaultFallback:)()
{
  return NotePreviewProvider.preview(accountId:noteId:prefersDefaultFallback:)();
}

uint64_t type metadata accessor for NotePreviewProvider()
{
  return type metadata accessor for NotePreviewProvider();
}

uint64_t ActivityEventResolver.init(object:)()
{
  return ActivityEventResolver.init(object:)();
}

uint64_t ActivityEventResolver.object.getter()
{
  return ActivityEventResolver.object.getter();
}

uint64_t type metadata accessor for ActivityEventResolver()
{
  return type metadata accessor for ActivityEventResolver();
}

uint64_t ActivityStreamPanelView.init(controller:)()
{
  return ActivityStreamPanelView.init(controller:)();
}

uint64_t SystemPaperThumbnailService.invalidate(for:)()
{
  return SystemPaperThumbnailService.invalidate(for:)();
}

uint64_t SystemPaperThumbnailService.updateIfNeeded(for:completion:)()
{
  return SystemPaperThumbnailService.updateIfNeeded(for:completion:)();
}

uint64_t static SystemPaperThumbnailService.shared.getter()
{
  return static SystemPaperThumbnailService.shared.getter();
}

uint64_t type metadata accessor for SystemPaperThumbnailService()
{
  return type metadata accessor for SystemPaperThumbnailService();
}

uint64_t static ThumbnailGeneratorSystemPaper.chromeSize.getter()
{
  return static ThumbnailGeneratorSystemPaper.chromeSize.getter();
}

uint64_t static ThumbnailGeneratorSystemPaper.chromeBackdropImageUrl(for:)()
{
  return static ThumbnailGeneratorSystemPaper.chromeBackdropImageUrl(for:)();
}

uint64_t type metadata accessor for ThumbnailGeneratorSystemPaper()
{
  return type metadata accessor for ThumbnailGeneratorSystemPaper();
}

uint64_t static ButtonRole.cancel.getter()
{
  return static ButtonRole.cancel.getter();
}

uint64_t type metadata accessor for ButtonRole()
{
  return type metadata accessor for ButtonRole();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t type metadata accessor for ControlSize()
{
  return type metadata accessor for ControlSize();
}

uint64_t type metadata accessor for Environment.Content()
{
  return type metadata accessor for Environment.Content();
}

uint64_t StateObject.wrappedValue.getter()
{
  return StateObject.wrappedValue.getter();
}

uint64_t TableColumn<>.init<>(_:value:)()
{
  return TableColumn<>.init<>(_:value:)();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t AnyShapeStyle.init<A>(_:)()
{
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t OpenURLAction.init(handler:)()
{
  return OpenURLAction.init(handler:)();
}

uint64_t type metadata accessor for OpenURLAction()
{
  return type metadata accessor for OpenURLAction();
}

uint64_t withAnimation<A>(_:_:)()
{
  return withAnimation<A>(_:_:)();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t ObservedObject.projectedValue.getter()
{
  return ObservedObject.projectedValue.getter();
}

uint64_t ObservedObject.Wrapper.subscript.getter()
{
  return ObservedObject.Wrapper.subscript.getter();
}

uint64_t PlainListStyle.init()()
{
  return PlainListStyle.init()();
}

uint64_t type metadata accessor for PlainListStyle()
{
  return type metadata accessor for PlainListStyle();
}

uint64_t type metadata accessor for ModifiedContent()
{
  return type metadata accessor for ModifiedContent();
}

uint64_t static SafeAreaRegions.all.getter()
{
  return static SafeAreaRegions.all.getter();
}

uint64_t type metadata accessor for RoundedRectangle()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t static ButtonBorderShape.capsule.getter()
{
  return static ButtonBorderShape.capsule.getter();
}

uint64_t type metadata accessor for ButtonBorderShape()
{
  return type metadata accessor for ButtonBorderShape();
}

uint64_t EnvironmentValues.imageScale.getter()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t EnvironmentValues.imageScale.setter()
{
  return EnvironmentValues.imageScale.setter();
}

uint64_t EnvironmentValues.controlSize.getter()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues._buttonBorderShape.getter()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

uint64_t EnvironmentValues.minimumScaleFactor.getter()
{
  return EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t EnvironmentValues.minimumScaleFactor.setter()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t EnvironmentValues.colorSchemeContrast.getter()
{
  return EnvironmentValues.colorSchemeContrast.getter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t EnvironmentValues.tint.getter()
{
  return EnvironmentValues.tint.getter();
}

uint64_t EnvironmentValues.tint.setter()
{
  return EnvironmentValues.tint.setter();
}

uint64_t EnvironmentValues.openURL.getter()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t static VerticalAlignment.firstTextBaseline.getter()
{
  return static VerticalAlignment.firstTextBaseline.getter();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

uint64_t IconOnlyLabelStyle.init()()
{
  return IconOnlyLabelStyle.init()();
}

uint64_t type metadata accessor for IconOnlyLabelStyle()
{
  return type metadata accessor for IconOnlyLabelStyle();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t type metadata accessor for ColorSchemeContrast()
{
  return type metadata accessor for ColorSchemeContrast();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t dispatch thunk of UIHostingController.sizingOptions.setter()
{
  return dispatch thunk of UIHostingController.sizingOptions.setter();
}

uint64_t UIHostingController.init(rootView:)()
{
  return UIHostingController.init(rootView:)();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t static HierarchicalShapeStyle.quaternary.getter()
{
  return static HierarchicalShapeStyle.quaternary.getter();
}

uint64_t type metadata accessor for LabelStyleConfiguration.Icon()
{
  return type metadata accessor for LabelStyleConfiguration.Icon();
}

uint64_t LabelStyleConfiguration.icon.getter()
{
  return LabelStyleConfiguration.icon.getter();
}

uint64_t type metadata accessor for LabelStyleConfiguration.Title()
{
  return type metadata accessor for LabelStyleConfiguration.Title();
}

uint64_t LabelStyleConfiguration.title.getter()
{
  return LabelStyleConfiguration.title.getter();
}

uint64_t EnabledTextSelectability.init()()
{
  return EnabledTextSelectability.init()();
}

uint64_t type metadata accessor for EnabledTextSelectability()
{
  return type metadata accessor for EnabledTextSelectability();
}

uint64_t BorderedProminentButtonStyle.init()()
{
  return BorderedProminentButtonStyle.init()();
}

uint64_t type metadata accessor for BorderedProminentButtonStyle()
{
  return type metadata accessor for BorderedProminentButtonStyle();
}

uint64_t static UIHostingControllerSizingOptions.intrinsicContentSize.getter()
{
  return static UIHostingControllerSizingOptions.intrinsicContentSize.getter();
}

uint64_t type metadata accessor for UIHostingControllerSizingOptions()
{
  return type metadata accessor for UIHostingControllerSizingOptions();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t static Axis.Set.horizontal.getter()
{
  return static Axis.Set.horizontal.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.all.getter()
{
  return static Edge.Set.all.getter();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t static Font.subheadline.getter()
{
  return static Font.subheadline.getter();
}

uint64_t Font.monospacedDigit()()
{
  return Font.monospacedDigit()();
}

uint64_t static Font.body.getter()
{
  return static Font.body.getter();
}

uint64_t static Font.Weight.medium.getter()
{
  return static Font.Weight.medium.getter();
}

uint64_t static Font.callout.getter()
{
  return static Font.callout.getter();
}

uint64_t static Font.caption.getter()
{
  return static Font.caption.getter();
}

uint64_t static Font.footnote.getter()
{
  return static Font.footnote.getter();
}

uint64_t static Font.headline.getter()
{
  return static Font.headline.getter();
}

uint64_t List<>.init<A, B>(_:children:rowContent:)()
{
  return List<>.init<A, B>(_:children:rowContent:)();
}

uint64_t Text.fontWeight(_:)()
{
  return Text.fontWeight(_:)();
}

uint64_t Text.strikethrough(_:color:)()
{
  return Text.strikethrough(_:color:)();
}

uint64_t Text.foregroundColor(_:)()
{
  return Text.foregroundColor(_:)();
}

uint64_t static Text.+ infix(_:_:)()
{
  return static Text.+ infix(_:_:)();
}

uint64_t Text.bold()()
{
  return Text.bold()();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init(_:)()
{
  return Text.init(_:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t View.ic_frame(size:)()
{
  return View.ic_frame(size:)();
}

uint64_t static View._makeView(view:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t View.labelStyle<A>(_:)()
{
  return View.labelStyle<A>(_:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

uint64_t View.textSelection<A>(_:)()
{
  return View.textSelection<A>(_:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t View.hyphenationFactor(_:)()
{
  return View.hyphenationFactor(_:)();
}

uint64_t View.multilineTextAlignment(_:)()
{
  return View.multilineTextAlignment(_:)();
}

uint64_t View.bold(_:)()
{
  return View.bold(_:)();
}

uint64_t View.font(_:)()
{
  return View.font(_:)();
}

uint64_t View.alert<A>(_:isPresented:actions:)()
{
  return View.alert<A>(_:isPresented:actions:)();
}

uint64_t View.padding(_:_:)()
{
  return View.padding(_:_:)();
}

uint64_t View.onAppear(perform:)()
{
  return View.onAppear(perform:)();
}

uint64_t View.listStyle<A>(_:)()
{
  return View.listStyle<A>(_:)();
}

uint64_t static Color.quaternary.getter()
{
  return static Color.quaternary.getter();
}

uint64_t Color.init(_:)()
{
  return Color.init(_:)();
}

uint64_t static Color.accentColor.getter()
{
  return static Color.accentColor.getter();
}

uint64_t static Color.red.getter()
{
  return static Color.red.getter();
}

uint64_t static Color.green.getter()
{
  return static Color.green.getter();
}

uint64_t static Color.white.getter()
{
  return static Color.white.getter();
}

uint64_t static Color.primary.getter()
{
  return static Color.primary.getter();
}

uint64_t static Color.secondary.getter()
{
  return static Color.secondary.getter();
}

uint64_t Image.init(systemName:)()
{
  return Image.init(systemName:)();
}

uint64_t type metadata accessor for Image.Scale()
{
  return type metadata accessor for Image.Scale();
}

uint64_t Label<>.init(_:systemImage:)()
{
  return Label<>.init(_:systemImage:)();
}

uint64_t Label<>.init<A>(_:systemImage:)()
{
  return Label<>.init<A>(_:systemImage:)();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t State.projectedValue.getter()
{
  return State.projectedValue.getter();
}

uint64_t Table.init<A>(_:columns:)()
{
  return Table.init<A>(_:columns:)();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t Button<>.init(_:role:action:)()
{
  return Button<>.init(_:role:action:)();
}

uint64_t Button<>.init(_:action:)()
{
  return Button<>.init(_:action:)();
}

uint64_t Toggle<>.init<A>(_:isOn:)()
{
  return Toggle<>.init<A>(_:isOn:)();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t ForEach<>.init(_:content:)()
{
  return ForEach<>.init(_:content:)();
}

uint64_t Section<>.init<A>(_:content:)()
{
  return Section<>.init<A>(_:content:)();
}

uint64_t Section<>.init(content:)()
{
  return Section<>.init(content:)();
}

uint64_t static Material.ultraThin.getter()
{
  return static Material.ultraThin.getter();
}

uint64_t type metadata accessor for Material()
{
  return type metadata accessor for Material();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.leading.getter();
}

uint64_t static Animation.spring(response:dampingFraction:blendDuration:)()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t static Animation.default.getter()
{
  return static Animation.default.getter();
}

uint64_t static Animation.easeOut.getter()
{
  return static Animation.easeOut.getter();
}

uint64_t type metadata accessor for TupleView()
{
  return type metadata accessor for TupleView();
}

uint64_t TupleView.init(_:)()
{
  return TupleView.init(_:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t dispatch thunk of DispatchWorkItem.isCancelled.getter()
{
  return dispatch thunk of DispatchWorkItem.isCancelled.getter();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.getter()
{
  return dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.getter();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.setter()
{
  return dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.setter();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.showParticipantCursors.setter()
{
  return dispatch thunk of PaperKitStreamableAttachment.showParticipantCursors.setter();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.getter()
{
  return dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.getter();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.setter()
{
  return dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.setter();
}

PKDrawing __swiftcall PKDrawing._bridgeToObjectiveC()()
{
  return (PKDrawing)PKDrawing._bridgeToObjectiveC()();
}

uint64_t static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for PKDrawing()
{
  return type metadata accessor for PKDrawing();
}

uint64_t Array.init()()
{
  return Array.init()();
}

uint64_t CancellationError.init()()
{
  return CancellationError.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t Character.isWhitespace.getter()
{
  return Character.isWhitespace.getter();
}

uint64_t BidirectionalCollection<>.firstRange<A>(of:)()
{
  return BidirectionalCollection<>.firstRange<A>(of:)();
}

uint64_t BidirectionalCollection<>.wholeMatch<A>(of:)()
{
  return BidirectionalCollection<>.wholeMatch<A>(of:)();
}

uint64_t BidirectionalCollection<>.difference<A>(from:)()
{
  return BidirectionalCollection<>.difference<A>(from:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t type metadata accessor for String.IntentInputOptions()
{
  return type metadata accessor for String.IntentInputOptions();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return type metadata accessor for String.LocalizationValue.StringInterpolation();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

uint64_t static String.StandardComparator.localizedStandard.getter()
{
  return static String.StandardComparator.localizedStandard.getter();
}

uint64_t type metadata accessor for String.StandardComparator()
{
  return type metadata accessor for String.StandardComparator();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String.localizedStringWithFormat(_:_:)()
{
  return static String.localizedStringWithFormat(_:_:)();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init(localized:)()
{
  return String.init(localized:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

uint64_t static String.typeSummary(forName:)()
{
  return static String.typeSummary(forName:)();
}

uint64_t String.removingCharacters(notContainedIn:)()
{
  return String.removingCharacters(notContainedIn:)();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.UnicodeScalarView._foreignIndex(after:)()
{
  return String.UnicodeScalarView._foreignIndex(after:)();
}

uint64_t String.UnicodeScalarView._foreignIndex(before:)()
{
  return String.UnicodeScalarView._foreignIndex(before:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.Index.init<A>(utf16Offset:in:)()
{
  return String.Index.init<A>(utf16Offset:in:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t Sequence.sorted<A, B>(using:)()
{
  return Sequence.sorted<A, B>(using:)();
}

uint64_t Sequence<>.formatted()()
{
  return Sequence<>.formatted()();
}

uint64_t Sequence<>.uniqued()()
{
  return Sequence<>.uniqued()();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return dispatch thunk of Sequence.underestimatedCount.getter();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t Sequence.reduce<A>(_:_:)()
{
  return Sequence.reduce<A>(_:_:)();
}

uint64_t Sequence.forEach(_:)()
{
  return Sequence.forEach(_:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.firstIndex(matching:)()
{
  return Array.firstIndex(matching:)();
}

uint64_t Array.appendNonNil(_:)()
{
  return Array.appendNonNil(_:)();
}

uint64_t Array.insertOptional(_:at:)()
{
  return Array.insertOptional(_:at:)();
}

uint64_t Array.firstSearchingForwards(from:matching:)()
{
  return Array.firstSearchingForwards(from:matching:)();
}

uint64_t Array.firstSearchingBackwards(from:matching:)()
{
  return Array.firstSearchingBackwards(from:matching:)();
}

uint64_t Array.firstSearchingForwardsIndex(from:matching:)()
{
  return Array.firstSearchingForwardsIndex(from:matching:)();
}

uint64_t Array.firstSearchingBackwardsIndex(from:matching:)()
{
  return Array.firstSearchingBackwardsIndex(from:matching:)();
}

uint64_t Array.subscript.getter()
{
  return Array.subscript.getter();
}

uint64_t Array.prepend(_:)()
{
  return Array.prepend(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return static Array._adoptStorage(_:count:)();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

uint64_t Array.endIndex.getter()
{
  return Array.endIndex.getter();
}

Swift::Int __swiftcall Array._getCount()()
{
  return Array._getCount()();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t type metadata accessor for Bool.IntentDisplayName()
{
  return type metadata accessor for Bool.IntentDisplayName();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return type metadata accessor for CheckedContinuation();
}

uint64_t type metadata accessor for CancellationError()
{
  return type metadata accessor for CancellationError();
}

Swift::Void __swiftcall TaskGroup.cancelAll()()
{
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t static TaskPriority.>= infix(_:_:)()
{
  return static TaskPriority.>= infix(_:_:)();
}

uint64_t static TaskPriority.low.getter()
{
  return static TaskPriority.low.getter();
}

uint64_t static TaskPriority.high.getter()
{
  return static TaskPriority.high.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t type metadata accessor for AsyncStream.Continuation.YieldResult()
{
  return type metadata accessor for AsyncStream.Continuation.YieldResult();
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy()
{
  return type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return type metadata accessor for AsyncStream.Continuation();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t type metadata accessor for AsyncStream()
{
  return type metadata accessor for AsyncStream();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t type metadata accessor for Task()
{
  return type metadata accessor for Task();
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t static Task<>.currentPriority.getter()
{
  return static Task<>.currentPriority.getter();
}

uint64_t static Task<>.checkCancellation()()
{
  return static Task<>.checkCancellation()();
}

uint64_t type metadata accessor for UnsafeContinuation()
{
  return type metadata accessor for UnsafeContinuation();
}

uint64_t ThrowingTaskGroup.makeAsyncIterator()()
{
  return ThrowingTaskGroup.makeAsyncIterator()();
}

uint64_t ThrowingTaskGroup.isEmpty.getter()
{
  return ThrowingTaskGroup.isEmpty.getter();
}

Swift::Void __swiftcall ThrowingTaskGroup.cancelAll()()
{
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.removeFirst()()
{
  return Set.removeFirst()();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.debugDescription.getter()
{
  return Set.debugDescription.getter();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.count.getter()
{
  return Set.count.getter();
}

uint64_t Set.remove(_:)()
{
  return Set.remove(_:)();
}

uint64_t Set.update(with:)()
{
  return Set.update(with:)();
}

uint64_t Set.isEmpty.getter()
{
  return Set.isEmpty.getter();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t type metadata accessor for Set()
{
  return type metadata accessor for Set();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t static Int._forceBridgeFromObjectiveC(_:result:)()
{
  return static Int._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Int._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Int._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Int._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Int._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)()
{
  return dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t Collection.first.getter()
{
  return Collection.first.getter();
}

uint64_t dispatch thunk of Collection.subscript.getter()
{
  return dispatch thunk of Collection.subscript.getter();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t RangeReplaceableCollection.removeFirst()()
{
  return RangeReplaceableCollection.removeFirst()();
}

uint64_t Range<>.init(_:in:)()
{
  return Range<>.init(_:in:)();
}

uint64_t CGColorRef.components.getter()
{
  return CGColorRef.components.getter();
}

CKRecordID __swiftcall CKRecordID.init(recordName:zoneID:)(Swift::String recordName, CKRecordZoneID zoneID)
{
  return (CKRecordID)CKRecordID.init(recordName:zoneID:)(recordName._countAndFlagsBits, recordName._object, zoneID.super.isa);
}

uint64_t ICTextView.selection.getter()
{
  return ICTextView.selection.getter();
}

NSProgress __swiftcall NSProgress.addingChild(totalUnitCount:pendingUnitCount:)(Swift::Int64 totalUnitCount, Swift::Int64 pendingUnitCount)
{
  return (NSProgress)NSProgress.addingChild(totalUnitCount:pendingUnitCount:)(totalUnitCount, pendingUnitCount);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSProgress.throwIfCancelled()()
{
}

uint64_t NoteObject.append(_:)()
{
  return NoteObject.append(_:)();
}

uint64_t NSPredicate.init(format:_:)()
{
  return NSPredicate.init(format:_:)();
}

uint64_t NSPredicate.init<A>(_:)()
{
  return NSPredicate.init<A>(_:)();
}

uint64_t ICTableObject<>.tableEntityIdentifier.getter()
{
  return ICTableObject<>.tableEntityIdentifier.getter();
}

uint64_t NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)()
{
  return NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();
}

uint64_t NSFileManager.contentsOfDirectory(at:)()
{
  return NSFileManager.contentsOfDirectory(at:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t ICBaseTextView.expandAvatar(for:animated:)()
{
  return ICBaseTextView.expandAvatar(for:animated:)();
}

uint64_t ICBaseTextView.location(for:)()
{
  return ICBaseTextView.location(for:)();
}

uint64_t ICFolderObject<>.entityIdentifier.getter()
{
  return ICFolderObject<>.entityIdentifier.getter();
}

uint64_t ICTTAttachment.init(identifier:universalTypeIdentifier:)()
{
  return ICTTAttachment.init(identifier:universalTypeIdentifier:)();
}

uint64_t ICAccountObject<>.entityIdentifier.getter()
{
  return ICAccountObject<>.entityIdentifier.getter();
}

uint64_t ICTTTextStorage.canResolve(_:)()
{
  return ICTTTextStorage.canResolve(_:)();
}

uint64_t ICTTTextStorage.resolvedSelections(_:)()
{
  return ICTTTextStorage.resolvedSelections(_:)();
}

uint64_t ICTTTextStorage.Selection.range.getter()
{
  return ICTTTextStorage.Selection.range.getter();
}

uint64_t type metadata accessor for ICTTTextStorage.Selection()
{
  return type metadata accessor for ICTTTextStorage.Selection();
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItem systemItem, UIAction_optional primaryAction, UIMenu_optional menu)
{
  return (UIBarButtonItem)UIBarButtonItem.init(systemItem:primaryAction:menu:)(systemItem, primaryAction.value.super.super.isa, *(void *)&primaryAction.is_nil, menu.value.super.super.isa, *(void *)&menu.is_nil);
}

uint64_t NSSortDescriptor.init<A>(_:)()
{
  return NSSortDescriptor.init<A>(_:)();
}

uint64_t UICollectionView.CellRegistration.init(handler:)()
{
  return UICollectionView.CellRegistration.init(handler:)();
}

uint64_t UICollectionView.SupplementaryRegistration.init(elementKind:handler:)()
{
  return UICollectionView.SupplementaryRegistration.init(elementKind:handler:)();
}

uint64_t UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)()
{
  return UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)();
}

uint64_t UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)()
{
  return UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)();
}

uint64_t UIViewController.registerForTraitChanges<A>(_:handler:)()
{
  return UIViewController.registerForTraitChanges<A>(_:handler:)();
}

uint64_t CMSampleBufferRef.numSamples.getter()
{
  return CMSampleBufferRef.numSamples.getter();
}

uint64_t CMSampleBufferRef.formatDescription.getter()
{
  return CMSampleBufferRef.formatDescription.getter();
}

uint64_t ICTTAudioDocument.root.getter()
{
  return ICTTAudioDocument.root.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerOptions();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.async(execute:)()
{
  return OS_dispatch_queue.async(execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t UIListContentView.configuration.setter()
{
  return UIListContentView.configuration.setter();
}

uint64_t UIListContentView.init(configuration:)()
{
  return UIListContentView.init(configuration:)();
}

uint64_t static UITraitCollection.systemTraitsAffectingColorAppearance.getter()
{
  return static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
}

uint64_t static UITraitCollection.traitsAffectingSize.getter()
{
  return static UITraitCollection.traitsAffectingSize.getter();
}

uint64_t static UITraitCollection.traitsAffectingSizeAndColor.getter()
{
  return static UITraitCollection.traitsAffectingSizeAndColor.getter();
}

uint64_t ICAttachmentObject<>.entityIdentifier.getter()
{
  return ICAttachmentObject<>.entityIdentifier.getter();
}

uint64_t ICCreateNoteAction.perform(withTitle:contents:container:)()
{
  return ICCreateNoteAction.perform(withTitle:contents:container:)();
}

uint64_t ICTTAudioRecording.Fragment.__allocating_init(document:identity:)()
{
  return ICTTAudioRecording.Fragment.__allocating_init(document:identity:)();
}

uint64_t type metadata accessor for ICTTAudioRecording.Fragment()
{
  return type metadata accessor for ICTTAudioRecording.Fragment();
}

uint64_t NSAttributedString.init(_:)()
{
  return NSAttributedString.init(_:)();
}

uint64_t NSAttributedString.range(byTrimmingCharactersIn:in:)()
{
  return NSAttributedString.range(byTrimmingCharactersIn:in:)();
}

uint64_t NSAttributedString.withMutations(_:)()
{
  return NSAttributedString.withMutations(_:)();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t type metadata accessor for ICTTMergeableString.Location()
{
  return type metadata accessor for ICTTMergeableString.Location();
}

uint64_t type metadata accessor for ICTTMergeableString.Selection()
{
  return type metadata accessor for ICTTMergeableString.Selection();
}

uint64_t ICCloudConfiguration.Snapshot.subscript.getter()
{
  return ICCloudConfiguration.Snapshot.subscript.getter();
}

uint64_t static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(for:fallback:)()
{
  return static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(for:fallback:)();
}

uint64_t static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(forData:fallback:)()
{
  return static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(forData:fallback:)();
}

uint64_t ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter()
{
  return ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter();
}

uint64_t ICCloudSyncingObject.cloudSyncingObjectActivityEvents.setter()
{
  return ICCloudSyncingObject.cloudSyncingObjectActivityEvents.setter();
}

uint64_t static ICCloudSyncingObject.fallbackActivityEvent(for:)()
{
  return static ICCloudSyncingObject.fallbackActivityEvent(for:)();
}

uint64_t static ICCloudSyncingObject.persistedActivityEvent(for:)()
{
  return static ICCloudSyncingObject.persistedActivityEvent(for:)();
}

uint64_t ICCloudSyncingObject.persist(activity:for:timestamp:)()
{
  return ICCloudSyncingObject.persist(activity:for:timestamp:)();
}

uint64_t static ICUnifiedNoteContext.$prefersViewContext.getter()
{
  return static ICUnifiedNoteContext.$prefersViewContext.getter();
}

uint64_t ICUnifiedNoteContext.managedObjectContext(for:)()
{
  return ICUnifiedNoteContext.managedObjectContext(for:)();
}

uint64_t NSNotificationCenter.Notifications.makeAsyncIterator()()
{
  return NSNotificationCenter.Notifications.makeAsyncIterator()();
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return type metadata accessor for NSNotificationCenter.Notifications.Iterator();
}

uint64_t NSNotificationCenter.notifications(named:object:)()
{
  return NSNotificationCenter.notifications(named:object:)();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return type metadata accessor for NSNotificationCenter.Publisher();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return NSNotificationCenter.publisher(for:object:)();
}

uint64_t UICollectionViewCell.contentConfiguration.getter()
{
  return UICollectionViewCell.contentConfiguration.getter();
}

uint64_t UICollectionViewCell.contentConfiguration.setter()
{
  return UICollectionViewCell.contentConfiguration.setter();
}

uint64_t UICollectionViewCell.backgroundConfiguration.setter()
{
  return UICollectionViewCell.backgroundConfiguration.setter();
}

uint64_t ICSearchIndexableNote<>.entityIdentifier.getter()
{
  return ICSearchIndexableNote<>.entityIdentifier.getter();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return OS_dispatch_semaphore.wait(timeout:)();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t UIContentSizeCategory.isAccessibilityCategory.getter()
{
  return UIContentSizeCategory.isAccessibilityCategory.getter();
}

uint64_t static UIContentSizeCategory.>= infix(_:_:)()
{
  return static UIContentSizeCategory.>= infix(_:_:)();
}

uint64_t static CMFormatDescriptionRef.MediaSubType.webVTT.getter()
{
  return static CMFormatDescriptionRef.MediaSubType.webVTT.getter();
}

uint64_t type metadata accessor for CMFormatDescriptionRef.MediaSubType()
{
  return type metadata accessor for CMFormatDescriptionRef.MediaSubType();
}

uint64_t CMFormatDescriptionRef.mediaSubType.getter()
{
  return CMFormatDescriptionRef.mediaSubType.getter();
}

uint64_t ICActivityStreamDigest.Summary.formattedText.getter()
{
  return ICActivityStreamDigest.Summary.formattedText.getter();
}

uint64_t ICActivityStreamDigest.Summary.isNavigable.getter()
{
  return ICActivityStreamDigest.Summary.isNavigable.getter();
}

uint64_t ICActivityStreamDigest.Summary.Participants.userIds.getter()
{
  return ICActivityStreamDigest.Summary.Participants.userIds.getter();
}

uint64_t type metadata accessor for ICActivityStreamDigest.Summary.Participants()
{
  return type metadata accessor for ICActivityStreamDigest.Summary.Participants();
}

uint64_t ICActivityStreamDigest.Summary.participants.getter()
{
  return ICActivityStreamDigest.Summary.participants.getter();
}

uint64_t type metadata accessor for ICActivityStreamDigest.Summary()
{
  return type metadata accessor for ICActivityStreamDigest.Summary();
}

uint64_t ICAttachmentAudioModel.saveModelDataToSubattachment(transcriptSegments:subattachment:retranscription:)()
{
  return ICAttachmentAudioModel.saveModelDataToSubattachment(transcriptSegments:subattachment:retranscription:)();
}

uint64_t ICAttachmentAudioModel.saveTopLineSummaryToAttachment(summarizationResult:)()
{
  return ICAttachmentAudioModel.saveTopLineSummaryToAttachment(summarizationResult:)();
}

uint64_t NSManagedObjectContext.ObjectIDNotification.updatedObjectIDs.getter()
{
  return NSManagedObjectContext.ObjectIDNotification.updatedObjectIDs.getter();
}

uint64_t NSManagedObjectContext.ObjectIDNotification.insertedObjectIDs.getter()
{
  return NSManagedObjectContext.ObjectIDNotification.insertedObjectIDs.getter();
}

uint64_t NSManagedObjectContext.ObjectIDNotification.context.getter()
{
  return NSManagedObjectContext.ObjectIDNotification.context.getter();
}

uint64_t type metadata accessor for NSManagedObjectContext.ObjectIDNotification()
{
  return type metadata accessor for NSManagedObjectContext.ObjectIDNotification();
}

uint64_t static NSManagedObjectContext.didSaveNotifications(context:)()
{
  return static NSManagedObjectContext.didSaveNotifications(context:)();
}

uint64_t static NSManagedObjectContext.didMergeChangesNotifications(context:)()
{
  return static NSManagedObjectContext.didMergeChangesNotifications(context:)();
}

uint64_t NSManagedObjectContext.ic_save(withLogDescription:_:)()
{
  return NSManagedObjectContext.ic_save(withLogDescription:_:)();
}

uint64_t NSManagedObjectContext.performAndWait<A>(_:)()
{
  return NSManagedObjectContext.performAndWait<A>(_:)();
}

uint64_t NSManagedObjectContext.fetch<A>(_:)()
{
  return NSManagedObjectContext.fetch<A>(_:)();
}

uint64_t CKRecordKeyValueSetting.subscript.setter()
{
  return CKRecordKeyValueSetting.subscript.setter();
}

uint64_t UICollectionViewListCell.accessories.setter()
{
  return UICollectionViewListCell.accessories.setter();
}

uint64_t UICollectionViewListCell.defaultContentConfiguration()()
{
  return UICollectionViewListCell.defaultContentConfiguration()();
}

uint64_t static NSCollectionLayoutSection.list(using:layoutEnvironment:)()
{
  return static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
}

Swift::Void __swiftcall NSMutableAttributedString.formatHashtags(with:)(Swift::OpaquePointer with)
{
}

Swift::Void __swiftcall NSMutableAttributedString.replace(placeholder:with:)(Swift::String placeholder, UIImage with)
{
}

uint64_t static ICModelAvailabilityManager.shared.getter()
{
  return static ICModelAvailabilityManager.shared.getter();
}

uint64_t type metadata accessor for ICModelAvailabilityManager()
{
  return type metadata accessor for ICModelAvailabilityManager();
}

uint64_t ICDeleteDecisionControlling.performDecision(completion:)()
{
  return ICDeleteDecisionControlling.performDecision(completion:)();
}

Swift::Void __swiftcall ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)(NSAttributedString _, Swift::Int at)
{
}

uint64_t ICTTMergeableAttributedString.authorAttributedString(for:object:)()
{
  return ICTTMergeableAttributedString.authorAttributedString(for:object:)();
}

uint64_t _SWCollaborationBarButtonItem.setDetailViewListContent<A>(_:)()
{
  return _SWCollaborationBarButtonItem.setDetailViewListContent<A>(_:)();
}

uint64_t ICTableAttachmentViewController.collaborationSelection.getter()
{
  return ICTableAttachmentViewController.collaborationSelection.getter();
}

uint64_t static UICollectionViewCompositionalLayout.list(using:)()
{
  return static UICollectionViewCompositionalLayout.list(using:)();
}

uint64_t CKSerializeRecordModificationsOperation.init(recordsToSave:recordIDsToDelete:)()
{
  return CKSerializeRecordModificationsOperation.init(recordsToSave:recordIDsToDelete:)();
}

uint64_t CKSerializeRecordModificationsOperation.serializeResultBlock.setter()
{
  return CKSerializeRecordModificationsOperation.serializeResultBlock.setter();
}

uint64_t CKDeserializeRecordModificationsOperation.deserializeResultBlock.setter()
{
  return CKDeserializeRecordModificationsOperation.deserializeResultBlock.setter();
}

uint64_t ICNote.attributedString(for:range:)()
{
  return ICNote.attributedString(for:range:)();
}

uint64_t ICNote.append(_:options:)()
{
  return ICNote.append(_:options:)();
}

UIFont __swiftcall UIFont.withBoldTrait()()
{
  return (UIFont)UIFont.withBoldTrait()();
}

UIMenu __swiftcall UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(Swift::String title, Swift::String_optional subtitle, UIImage_optional image, UIMenuIdentifier_optional identifier, UIMenuOptions options, UIMenuElementSize preferredElementSize, Swift::OpaquePointer children)
{
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(title, subtitle, image, identifier, options, preferredElementSize, children);
}

uint64_t UIView.appEntityIdentifier.setter()
{
  return UIView.appEntityIdentifier.setter();
}

uint64_t UIView.registerForTraitChanges(_:action:)()
{
  return UIView.registerForTraitChanges(_:action:)();
}

uint64_t UIView.registerForTraitChanges<A>(_:handler:)()
{
  return UIView.registerForTraitChanges<A>(_:handler:)();
}

uint64_t UIScene.hostApplicationIdentifier.getter()
{
  return UIScene.hostApplicationIdentifier.getter();
}

CKRecord __swiftcall CKRecord.init(recordType:recordID:)(Swift::String recordType, CKRecordID recordID)
{
  return (CKRecord)CKRecord.init(recordType:recordID:)(recordType._countAndFlagsBits, recordType._object, recordID.super.isa);
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t static NSObject<>.ic_fetchRequest()()
{
  return static NSObject<>.ic_fetchRequest()();
}

uint64_t NSObject<>.makeSnapshot()()
{
  return NSObject<>.makeSnapshot()();
}

uint64_t static NSObject<>.record(from:)()
{
  return static NSObject<>.record(from:)();
}

uint64_t UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)()
{
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
}

uint64_t UIButton.Configuration.contentInsets.setter()
{
  return UIButton.Configuration.contentInsets.setter();
}

uint64_t UIButton.Configuration.baseForegroundColor.setter()
{
  return UIButton.Configuration.baseForegroundColor.setter();
}

uint64_t UIButton.Configuration.titleTextAttributesTransformer.setter()
{
  return UIButton.Configuration.titleTextAttributesTransformer.setter();
}

uint64_t static UIButton.Configuration.gray()()
{
  return static UIButton.Configuration.gray()();
}

uint64_t UIButton.Configuration.image.setter()
{
  return UIButton.Configuration.image.setter();
}

uint64_t static UIButton.Configuration.plain()()
{
  return static UIButton.Configuration.plain()();
}

uint64_t static UIButton.Configuration.bordered()()
{
  return static UIButton.Configuration.bordered()();
}

uint64_t type metadata accessor for UIButton.Configuration()
{
  return type metadata accessor for UIButton.Configuration();
}

uint64_t UIButton.init(configuration:primaryAction:)()
{
  return UIButton.init(configuration:primaryAction:)();
}

uint64_t UIButton.configuration.getter()
{
  return UIButton.configuration.getter();
}

uint64_t UIButton.configuration.setter()
{
  return UIButton.configuration.setter();
}

uint64_t _NSRange.init<A, B>(_:in:)()
{
  return _NSRange.init<A, B>(_:in:)();
}

__C::_NSRange_optional __swiftcall _NSRange.init(union:)(Swift::OpaquePointer a1)
{
  Swift::Int v1 = _NSRange.init(union:)(a1._rawValue);
  result.value.length = v2;
  result.value.location = v1;
  result.is_nil = v3;
  return result;
}

uint64_t ICHashtag.entityIdentifier.getter()
{
  return ICHashtag.entityIdentifier.getter();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return type metadata accessor for NSRunLoop.SchedulerOptions();
}

uint64_t static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)()
{
  return static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerTimeType.Stride()
{
  return type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)()
{
  return UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
}

uint64_t Optional.debugDescription.getter()
{
  return Optional.debugDescription.getter();
}

uint64_t Optional._bridgeToObjectiveC()()
{
  return Optional._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UInt.init(truncating:)()
{
  return UInt.init(truncating:)();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.rangeOfCharacter(from:options:range:)()
{
  return StringProtocol.rangeOfCharacter(from:options:range:)();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol.addingPercentEncoding(withAllowedCharacters:)()
{
  return StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
}

uint64_t StringProtocol.caseInsensitiveCompare<A>(_:)()
{
  return StringProtocol.caseInsensitiveCompare<A>(_:)();
}

uint64_t StringProtocol.removingPercentEncoding.getter()
{
  return StringProtocol.removingPercentEncoding.getter();
}

uint64_t StringProtocol.localizedStandardCompare<A>(_:)()
{
  return StringProtocol.localizedStandardCompare<A>(_:)();
}

uint64_t StringProtocol.localizedStandardContains<A>(_:)()
{
  return StringProtocol.localizedStandardContains<A>(_:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
}

uint64_t BinaryInteger.description.getter()
{
  return BinaryInteger.description.getter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of AnyKeyPath._kvcKeyPathString.getter()
{
  return dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return static __CocoaSet.Index.== infix(_:_:)();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return __CocoaSet.endIndex.getter();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

NSObject __swiftcall AnyHashable._bridgeToObjectiveC()()
{
  return (NSObject)AnyHashable._bridgeToObjectiveC()();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t type metadata accessor for _SetStorage()
{
  return type metadata accessor for _SetStorage();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t dispatch thunk of static CaseIterable.allCases.getter()
{
  return dispatch thunk of static CaseIterable.allCases.getter();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)()
{
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
}

uint64_t type metadata accessor for ManagedBuffer()
{
  return type metadata accessor for ManagedBuffer();
}

uint64_t ManagedBuffer.deinit()
{
  return ManagedBuffer.deinit();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return _decodeScalar(_:startingAt:)();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return _ArrayProtocol.filter(_:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t static ContinuousClock.Instant.now.getter()
{
  return static ContinuousClock.Instant.now.getter();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t SuspendingClock.now.getter()
{
  return SuspendingClock.now.getter();
}

uint64_t static SuspendingClock.Instant.+ infix(_:_:)()
{
  return static SuspendingClock.Instant.+ infix(_:_:)();
}

uint64_t static SuspendingClock.Instant.- infix(_:_:)()
{
  return static SuspendingClock.Instant.- infix(_:_:)();
}

uint64_t type metadata accessor for SuspendingClock.Instant()
{
  return type metadata accessor for SuspendingClock.Instant();
}

uint64_t SuspendingClock.init()()
{
  return SuspendingClock.init()();
}

uint64_t type metadata accessor for SuspendingClock()
{
  return type metadata accessor for SuspendingClock();
}

uint64_t __VaListBuilder.deallocStorage(wordCount:storage:)()
{
  return __VaListBuilder.deallocStorage(wordCount:storage:)();
}

uint64_t __VaListBuilder.va_list()()
{
  return __VaListBuilder.va_list()();
}

uint64_t type metadata accessor for __VaListBuilder()
{
  return type metadata accessor for __VaListBuilder();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t static CollectionDifference._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static CollectionDifference._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t CollectionDifference.insertions.getter()
{
  return CollectionDifference.insertions.getter();
}

NSOrderedCollectionChange __swiftcall CollectionDifference.Change._bridgeToObjectiveC()()
{
  return (NSOrderedCollectionChange)CollectionDifference.Change._bridgeToObjectiveC()();
}

uint64_t CollectionDifference.removals.getter()
{
  return CollectionDifference.removals.getter();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return type metadata accessor for KeyedDecodingContainer();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return type metadata accessor for KeyedEncodingContainer();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t type metadata accessor for _ContiguousArrayStorage()
{
  return type metadata accessor for _ContiguousArrayStorage();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t DefaultStringInterpolation.appendInterpolation(ansi:)()
{
  return DefaultStringInterpolation.appendInterpolation(ansi:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t static Clock<>.continuous.getter()
{
  return static Clock<>.continuous.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

NSNumber __swiftcall Int64._bridgeToObjectiveC()()
{
  return (NSNumber)Int64._bridgeToObjectiveC()();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return Hasher.finalize()();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Hasher.init()()
{
  return Hasher.init()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

uint64_t Result.value.getter()
{
  return Result.value.getter();
}

uint64_t type metadata accessor for Result()
{
  return type metadata accessor for Result();
}

uint64_t dispatch thunk of CVarArg._cVarArgEncoding.getter()
{
  return dispatch thunk of CVarArg._cVarArgEncoding.getter();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t Duration.components.getter()
{
  return Duration.components.getter();
}

uint64_t Duration.description.getter()
{
  return Duration.description.getter();
}

uint64_t static Duration.< infix(_:_:)()
{
  return static Duration.< infix(_:_:)();
}

uint64_t static Duration.zero.getter()
{
  return static Duration.zero.getter();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t TaskLocal.init(wrappedValue:)()
{
  return TaskLocal.init(wrappedValue:)();
}

uint64_t TaskLocal.get()()
{
  return TaskLocal.get()();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t BSEqualBools()
{
  return _BSEqualBools();
}

uint64_t CCDigest()
{
  return _CCDigest();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return _CFAutorelease(arg);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

void CFRelease(CFTypeRef cf)
{
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformMakeTranslation(retstr, tx, ty);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return _CGColorCreate(space, components);
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return _CGColorGetColorSpace(color);
}

CFStringRef CGColorSpaceCopyName(CGColorSpaceRef space)
{
  return _CGColorSpaceCopyName(space);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return _CGColorSpaceCreateWithName(name);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return _CGImageDestinationCreateWithData(data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return _CGImageDestinationFinalize(idst);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return _CGImageGetHeight(image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return _CGImageGetWidth(image);
}

void CGImageRelease(CGImageRef image)
{
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCopyPropertiesAtIndex(isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCreateImageAtIndex(isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithData(data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithURL(url, options);
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  CGPoint v4 = _CGPointApplyAffineTransform(point, t);
  double y = v4.y;
  double x = v4.x;
  result.double y = y;
  result.double x = x;
  return result;
}

CGPoint CGPointFromString(NSString *string)
{
  CGPoint v3 = _CGPointFromString(string);
  double y = v3.y;
  double x = v3.x;
  result.double y = y;
  result.double x = x;
  return result;
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return _CGRectContainsRect(rect1, rect2);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectInset(rect, dx, dy);
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  return _CGRectIntersection(r1, r2);
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return _CGRectIntersectsRect(rect1, rect2);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return _CGRectIsEmpty(rect);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectOffset(rect, dx, dy);
}

uint64_t CKStringFromParticipantPermission()
{
  return _CKStringFromParticipantPermission();
}

CMTime *__cdecl CMSampleBufferGetDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return _CMSampleBufferGetDuration(retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return _CMSampleBufferGetPresentationTimeStamp(retstr, sbuf);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  return _CMTimeGetSeconds(time);
}

uint64_t CPSystemRootDirectory()
{
  return _CPSystemRootDirectory();
}

uint64_t GSEventIsHardwareKeyboardAttached()
{
  return _GSEventIsHardwareKeyboardAttached();
}

uint64_t ICAccessibilityAccessibilityLargerTextSizesEnabled()
{
  return _ICAccessibilityAccessibilityLargerTextSizesEnabled();
}

uint64_t ICAccessibilityNeedsAccessibilityElements()
{
  return _ICAccessibilityNeedsAccessibilityElements();
}

uint64_t ICAccessibilityPerformBlockOnMainThreadAfterDelay()
{
  return _ICAccessibilityPerformBlockOnMainThreadAfterDelay();
}

uint64_t ICAccessibilityPostAnnouncementNotification()
{
  return _ICAccessibilityPostAnnouncementNotification();
}

uint64_t ICAccessibilityPostHighPriorityAnnouncementNotification()
{
  return _ICAccessibilityPostHighPriorityAnnouncementNotification();
}

uint64_t ICAccessibilitySystemDarkenedColor()
{
  return _ICAccessibilitySystemDarkenedColor();
}

uint64_t ICCheckedDynamicCast()
{
  return _ICCheckedDynamicCast();
}

uint64_t ICCheckedProtocolCast()
{
  return _ICCheckedProtocolCast();
}

uint64_t ICCipherNameForCipherVersion()
{
  return _ICCipherNameForCipherVersion();
}

uint64_t ICClassAndProtocolCast()
{
  return _ICClassAndProtocolCast();
}

uint64_t ICDebugModeEnabled()
{
  return _ICDebugModeEnabled();
}

uint64_t ICDynamicCast()
{
  return _ICDynamicCast();
}

uint64_t ICEmphasisColorTypeForTag()
{
  return _ICEmphasisColorTypeForTag();
}

uint64_t ICInternalPreferencesChangedNotification()
{
  return _ICInternalPreferencesChangedNotification();
}

uint64_t ICInternalSettingsDomain()
{
  return _ICInternalSettingsDomain();
}

uint64_t ICInternalSettingsGetBundleBoolSettingValue()
{
  return _ICInternalSettingsGetBundleBoolSettingValue();
}

uint64_t ICInternalSettingsIsAlexandriaDemoModeEnabled()
{
  return _ICInternalSettingsIsAlexandriaDemoModeEnabled();
}

uint64_t ICInternalSettingsIsAlexandriaEnabled()
{
  return _ICInternalSettingsIsAlexandriaEnabled();
}

uint64_t ICInternalSettingsIsAppleAccountBrandingEnabled()
{
  return _ICInternalSettingsIsAppleAccountBrandingEnabled();
}

uint64_t ICInternalSettingsIsCollapsibleSectionsEnabled()
{
  return _ICInternalSettingsIsCollapsibleSectionsEnabled();
}

uint64_t ICInternalSettingsIsGreyParrotEnabled()
{
  return _ICInternalSettingsIsGreyParrotEnabled();
}

uint64_t ICInternalSettingsIsMathEnabled()
{
  return _ICInternalSettingsIsMathEnabled();
}

uint64_t ICInternalSettingsIsPageViewControllerCrashWorkaroundDisabled()
{
  return _ICInternalSettingsIsPageViewControllerCrashWorkaroundDisabled();
}

uint64_t ICInternalSettingsIsSelectionStateTrackingEnabled()
{
  return _ICInternalSettingsIsSelectionStateTrackingEnabled();
}

uint64_t ICInternalSettingsIsSystemPaperEnabled()
{
  return _ICInternalSettingsIsSystemPaperEnabled();
}

uint64_t ICInternalSettingsIsTextKit2Enabled()
{
  return _ICInternalSettingsIsTextKit2Enabled();
}

uint64_t ICInternalSettingsShouldPreserveImportedCallRecordingData()
{
  return _ICInternalSettingsShouldPreserveImportedCallRecordingData();
}

uint64_t ICInternalSettingsSmartFoldersCanIncludeRecentlyDeletedNotes()
{
  return _ICInternalSettingsSmartFoldersCanIncludeRecentlyDeletedNotes();
}

uint64_t ICIsNotesURLScheme()
{
  return _ICIsNotesURLScheme();
}

uint64_t ICIsSandboxModeEnabled()
{
  return _ICIsSandboxModeEnabled();
}

uint64_t ICKeyPathFromSelector()
{
  return _ICKeyPathFromSelector();
}

uint64_t ICLocalizedCapitalizationStyleForView()
{
  return _ICLocalizedCapitalizationStyleForView();
}

uint64_t ICLocalizedStringForICFilterType()
{
  return _ICLocalizedStringForICFilterType();
}

uint64_t ICLocalizedStringFromICDateFilterSelectionType()
{
  return _ICLocalizedStringFromICDateFilterSelectionType();
}

uint64_t ICLocalizedStringFromICParticipantsFilterJoinOperator()
{
  return _ICLocalizedStringFromICParticipantsFilterJoinOperator();
}

uint64_t ICLocalizedStringFromICTagSelectionOperator()
{
  return _ICLocalizedStringFromICTagSelectionOperator();
}

uint64_t ICNARoundTo2SigFigsInt()
{
  return _ICNARoundTo2SigFigsInt();
}

uint64_t ICNewLegacyContext()
{
  return _ICNewLegacyContext();
}

uint64_t ICNoteHTMLFromPlainText()
{
  return _ICNoteHTMLFromPlainText();
}

uint64_t ICNoteTitleFromPlainText()
{
  return _ICNoteTitleFromPlainText();
}

uint64_t ICNotesAppBundleIdentifier()
{
  return _ICNotesAppBundleIdentifier();
}

uint64_t ICNotesAppURLScheme()
{
  return _ICNotesAppURLScheme();
}

uint64_t ICNotesUpdateUserActivityForViewingNoteWithState()
{
  return _ICNotesUpdateUserActivityForViewingNoteWithState();
}

uint64_t ICProtocolCast()
{
  return _ICProtocolCast();
}

uint64_t ICSymbolImageNameForICFilterType()
{
  return _ICSymbolImageNameForICFilterType();
}

uint64_t ICTintColorForICFilterType()
{
  return _ICTintColorForICFilterType();
}

uint64_t ICUnlocalizedString()
{
  return _ICUnlocalizedString();
}

uint64_t ICUseCoreDataCoreSpotlightIntegration()
{
  return _ICUseCoreDataCoreSpotlightIntegration();
}

uint64_t IOHIDEventGetChildren()
{
  return _IOHIDEventGetChildren();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return _IOHIDEventGetIntegerValue();
}

uint64_t IOHIDEventGetType()
{
  return _IOHIDEventGetType();
}

id MTLCreateSystemDefaultDevice(void)
{
  return _MTLCreateSystemDefaultDevice();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSRange v4 = _NSIntersectionRange(range1, range2);
  NSUInteger length = v4.length;
  NSUInteger location = v4.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

void NSLog(NSString *format, ...)
{
}

uint64_t NSStringFromAccountDataLockedNotesMode()
{
  return _NSStringFromAccountDataLockedNotesMode();
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  return _NSStringFromCGPoint(point);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return _NSStringFromCGRect(rect);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t NSStringFromICAttachmentType()
{
  return _NSStringFromICAttachmentType();
}

uint64_t NSStringFromICFilterSelectionJoinOperator()
{
  return _NSStringFromICFilterSelectionJoinOperator();
}

uint64_t NSStringFromICImageClassOrientation()
{
  return _NSStringFromICImageClassOrientation();
}

uint64_t NSStringFromNotesVersion()
{
  return _NSStringFromNotesVersion();
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t NotesAppIsValidURL()
{
  return _NotesAppIsValidURL();
}

uint64_t NotesAppPredicateForNoteMentionedInURL()
{
  return _NotesAppPredicateForNoteMentionedInURL();
}

uint64_t NotesAppURLForNoteIdentifierOrTokenContentIdentifier()
{
  return _NotesAppURLForNoteIdentifierOrTokenContentIdentifier();
}

uint64_t SBSCreateOpenApplicationService()
{
  return _SBSCreateOpenApplicationService();
}

uint64_t SBSSystemNotesConnectionSourceDescription()
{
  return _SBSSystemNotesConnectionSourceDescription();
}

uint64_t TSDCenterOfRect()
{
  return _TSDCenterOfRect();
}

uint64_t TSDRectGetMaxPoint()
{
  return _TSDRectGetMaxPoint();
}

uint64_t TSDRectWithPoints()
{
  return _TSDRectWithPoints();
}

BOOL UIAccessibilityDarkerSystemColorsEnabled(void)
{
  return _UIAccessibilityDarkerSystemColorsEnabled();
}

BOOL UIAccessibilityIsBoldTextEnabled(void)
{
  return _UIAccessibilityIsBoldTextEnabled();
}

BOOL UIAccessibilityIsReduceMotionEnabled(void)
{
  return _UIAccessibilityIsReduceMotionEnabled();
}

BOOL UIAccessibilityIsVoiceOverRunning(void)
{
  return _UIAccessibilityIsVoiceOverRunning();
}

void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument)
{
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

UICellAccessoryPosition UICellAccessoryPositionAfterAccessoryOfClass(Class accessoryClass)
{
  return _UICellAccessoryPositionAfterAccessoryOfClass(accessoryClass);
}

NSComparisonResult UIContentSizeCategoryCompareToCategory(UIContentSizeCategory lhs, UIContentSizeCategory rhs)
{
  return _UIContentSizeCategoryCompareToCategory(lhs, rhs);
}

uint64_t UICreateCGImageFromIOSurface()
{
  return _UICreateCGImageFromIOSurface();
}

void UIGraphicsBeginImageContext(CGSize size)
{
}

void UIGraphicsEndImageContext(void)
{
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return _UIGraphicsGetCurrentContext();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return _UIGraphicsGetImageFromCurrentImageContext();
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return _UIImagePNGRepresentation(image);
}

uint64_t UISystemRootDirectory()
{
  return _UISystemRootDirectory();
}

uint64_t _AXSAutomationEnabled()
{
  return __AXSAutomationEnabled();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _LSAppRemovalServiceXPCInterface()
{
  return __LSAppRemovalServiceXPCInterface();
}

NSDictionary *_NSDictionaryOfVariableBindings(NSString *commaSeparatedKeysString, id firstValue, ...)
{
  return __NSDictionaryOfVariableBindings(commaSeparatedKeysString, firstValue);
}

uint64_t _UITableViewDefaultSectionCornerRadiusForTraitCollection()
{
  return __UITableViewDefaultSectionCornerRadiusForTraitCollection();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __ICAccessibilityStringForVariables()
{
  return ___ICAccessibilityStringForVariables();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t dispatchMainAfterDelay()
{
  return _dispatchMainAfterDelay();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t performBlockOnMainThread()
{
  return _performBlockOnMainThread();
}

uint64_t performBlockOnMainThreadAndWait()
{
  return _performBlockOnMainThreadAndWait();
}

long double pow(long double __x, long double __y)
{
  return _pow(__x, __y);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_asyncLet_begin()
{
  return _swift_asyncLet_begin();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_resume()
{
  return _swift_continuation_resume();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return _swift_continuation_throwingResumeWithError();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastMetatype()
{
  return _swift_dynamicCastMetatype();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return _swift_dynamicCastObjCProtocolUnconditional();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return _swift_dynamicCastUnknownClassUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return _swift_getOpaqueTypeMetadata2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout()
{
  return _swift_getTupleTypeLayout();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeLayout3()
{
  return _swift_getTupleTypeLayout3();
}

uint64_t swift_getTupleTypeMetadata()
{
  return _swift_getTupleTypeMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_task_localValuePop()
{
  return _swift_task_localValuePop();
}

uint64_t swift_task_localValuePush()
{
  return _swift_task_localValuePush();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return _swift_unknownObjectUnownedDestroy();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return _swift_unknownObjectUnownedInit();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return _swift_unknownObjectUnownedLoadStrong();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _[a1 CGColor];
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _[a1 CGImage];
}

id objc_msgSend_CGRectValue(void *a1, const char *a2, ...)
{
  return _[a1 CGRectValue];
}

id objc_msgSend_CGSizeValue(void *a1, const char *a2, ...)
{
  return _[a1 CGSizeValue];
}

id objc_msgSend_ICBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 ICBackgroundColor];
}

id objc_msgSend_ICDarkenedTintColor(void *a1, const char *a2, ...)
{
  return _[a1 ICDarkenedTintColor];
}

id objc_msgSend_ICGroupedBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 ICGroupedBackgroundColor];
}

id objc_msgSend_ICListStatusIndicatorColor(void *a1, const char *a2, ...)
{
  return _[a1 ICListStatusIndicatorColor];
}

id objc_msgSend_ICRecoverNoteAlertControllerDidRecoverNoteNotification(void *a1, const char *a2, ...)
{
  return _[a1 ICRecoverNoteAlertControllerDidRecoverNoteNotification];
}

id objc_msgSend_ICRecoverNoteAlertControllerWillRecoverNoteNotification(void *a1, const char *a2, ...)
{
  return _[a1 ICRecoverNoteAlertControllerWillRecoverNoteNotification];
}

id objc_msgSend_ICSearchRankingStrategyDisplayNames(void *a1, const char *a2, ...)
{
  return _[a1 ICSearchRankingStrategyDisplayNames];
}

id objc_msgSend_ICTagCollectionViewDidDeleteTagsNotification(void *a1, const char *a2, ...)
{
  return _[a1 ICTagCollectionViewDidDeleteTagsNotification];
}

id objc_msgSend_ICTagCollectionViewDidRenameTagNotification(void *a1, const char *a2, ...)
{
  return _[a1 ICTagCollectionViewDidRenameTagNotification];
}

id objc_msgSend_ICTagCollectionViewRenameTagOriginalTagObjectIDKey(void *a1, const char *a2, ...)
{
  return _[a1 ICTagCollectionViewRenameTagOriginalTagObjectIDKey];
}

id objc_msgSend_ICTagCollectionViewWillDeleteTagsNotification(void *a1, const char *a2, ...)
{
  return _[a1 ICTagCollectionViewWillDeleteTagsNotification];
}

id objc_msgSend_ICTagCollectionViewWillRenameTagNotification(void *a1, const char *a2, ...)
{
  return _[a1 ICTagCollectionViewWillRenameTagNotification];
}

id objc_msgSend_ICTintColor(void *a1, const char *a2, ...)
{
  return _[a1 ICTintColor];
}

id objc_msgSend_URIRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 URIRepresentation];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathComponent:];
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathComponent:isDirectory:];
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathExtension:];
}

id objc_msgSend_URLContexts(void *a1, const char *a2, ...)
{
  return _[a1 URLContexts];
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return [a1 URLForResource:withExtension:];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:];
}

id objc_msgSend_URLsForTestDataDirectories(void *a1, const char *a2, ...)
{
  return _[a1 URLsForTestDataDirectories];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__FBSScene(void *a1, const char *a2, ...)
{
  return _[a1 _FBSScene];
}

id objc_msgSend__accessibilityHitTest_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 _accessibilityHitTest:withEvent:];
}

id objc_msgSend__accessibleSubviews(void *a1, const char *a2, ...)
{
  return _[a1 _accessibleSubviews];
}

id objc_msgSend__appearState(void *a1, const char *a2, ...)
{
  return _[a1 _appearState];
}

id objc_msgSend__appropriateToSetupSBSceneWithManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appropriateToSetupSBSceneWithManagedObjectContext:");
}

id objc_msgSend__backgroundView(void *a1, const char *a2, ...)
{
  return _[a1 _backgroundView];
}

id objc_msgSend__canTileSidebarColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canTileSidebarColumn:");
}

id objc_msgSend__dataDetectionResults(void *a1, const char *a2, ...)
{
  return _[a1 _dataDetectionResults];
}

id objc_msgSend__dci_searchSuggestions(void *a1, const char *a2, ...)
{
  return [_dci_searchSuggestions];
}

id objc_msgSend__dci_setSearchSuggestions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dci_setSearchSuggestions:");
}

id objc_msgSend__didEndInteractiveResize(void *a1, const char *a2, ...)
{
  return _[a1 _didEndInteractiveResize];
}

id objc_msgSend__findInteraction(void *a1, const char *a2, ...)
{
  return _[a1 _findInteraction];
}

id objc_msgSend__hidEvent(void *a1, const char *a2, ...)
{
  return _[a1 _hidEvent];
}

id objc_msgSend__icaxKeyboardImpl(void *a1, const char *a2, ...)
{
  return _[a1 _icaxKeyboardImpl];
}

id objc_msgSend__isSecure(void *a1, const char *a2, ...)
{
  return _[a1 _isSecure];
}

id objc_msgSend__launchOptionsDictionary(void *a1, const char *a2, ...)
{
  return _[a1 _launchOptionsDictionary];
}

id objc_msgSend__launchTestName(void *a1, const char *a2, ...)
{
  return _[a1 _launchTestName];
}

id objc_msgSend__listInsetGroupedCellConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 _listInsetGroupedCellConfiguration];
}

id objc_msgSend__markRefreshAsPendingForCollectionWithId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markRefreshAsPendingForCollectionWithId:");
}

id objc_msgSend__markRefreshAsPendingForStoresList(void *a1, const char *a2, ...)
{
  return _[a1 _markRefreshAsPendingForStoresList];
}

id objc_msgSend__performBatchApplyUsingReloadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performBatchApplyUsingReloadData:");
}

id objc_msgSend__performScrollTest_iterations_delta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performScrollTest:iterations:delta:");
}

id objc_msgSend__properties(void *a1, const char *a2, ...)
{
  return _[a1 _properties];
}

id objc_msgSend__realtimeCollaborationSessionStateDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _realtimeCollaborationSessionStateDidChange];
}

id objc_msgSend__refreshIsPendingForCollectionWithId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshIsPendingForCollectionWithId:");
}

id objc_msgSend__refreshIsPendingForStoresList(void *a1, const char *a2, ...)
{
  return _[a1 _refreshIsPendingForStoresList];
}

id objc_msgSend__registerSettingsDiffActionArray_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerSettingsDiffActionArray:forKey:");
}

id objc_msgSend__setEditable_(void *a1, const char *a2, ...)
{
  return [a1 _setEditable:];
}

id objc_msgSend__setEligibleForPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEligibleForPrediction:");
}

id objc_msgSend__setEnabled_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabled:animated:");
}

id objc_msgSend__setFindInteractionEnabled_(void *a1, const char *a2, ...)
{
  return [_a1 _setFindInteractionEnabled:];
}

id objc_msgSend__setFolderSubitemName_(void *a1, const char *a2, ...)
{
  return [a1 _setFolderSubitemName:];
}

id objc_msgSend__setHeaderSecondaryImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHeaderSecondaryImage:");
}

id objc_msgSend__setIgnoreBarButtonItemSiblings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIgnoreBarButtonItemSiblings:");
}

id objc_msgSend__setImagePickerSavingOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setImagePickerSavingOptions:");
}

id objc_msgSend__setInputDelegate_(void *a1, const char *a2, ...)
{
  return [_a1 _setInputDelegate:];
}

id objc_msgSend__setInteractionTintColor_(void *a1, const char *a2, ...)
{
  return [a1 _setInteractionTintColor:];
}

id objc_msgSend__setOverrideContentInsets_forRectEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOverrideContentInsets:forRectEdges:");
}

id objc_msgSend__setParticipantDetails_(void *a1, const char *a2, ...)
{
  return [a1 _setParticipantDetails:];
}

id objc_msgSend__setPrimaryAuxiliarySwitchState_(void *a1, const char *a2, ...)
{
  return [a1 _setPrimaryAuxiliarySwitchState:];
}

id objc_msgSend__setPrimaryAuxiliarySwitchTitle_(void *a1, const char *a2, ...)
{
  return [a1 _setPrimaryAuxiliarySwitchTitle:];
}

id objc_msgSend__setProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setProperties:");
}

id objc_msgSend__setRootFolderTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRootFolderTitle:");
}

id objc_msgSend__setSupportsTwoLineLargeTitles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSupportsTwoLineLargeTitles:");
}

id objc_msgSend__setUseShortcutIntrinsicContentSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUseShortcutIntrinsicContentSize:");
}

id objc_msgSend__setWantsFloatingSidebar_(void *a1, const char *a2, ...)
{
  return [a1 _setWantsFloatingSidebar:];
}

id objc_msgSend__simulateExpirationForTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 _simulateExpirationForTaskWithIdentifier];
}

id objc_msgSend__simulateLaunchForTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulateLaunchForTaskWithIdentifier:");
}

id objc_msgSend__simulateScrollWithTranslation_duration_willBeginDragging_didEndDragging_willBeginDecelerating_didEndDecelerating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulateScrollWithTranslation:duration:willBeginDragging:didEndDragging:willBeginDecelerating:didEndDecelerating:");
}

id objc_msgSend__splitViewControllerContext(void *a1, const char *a2, ...)
{
  return _[a1 _splitViewControllerContext];
}

id objc_msgSend__systemInteractionTintColor(void *a1, const char *a2, ...)
{
  return _[a1 _systemInteractionTintColor];
}

id objc_msgSend__unmarkRefreshAsPendingForCollectionWithId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unmarkRefreshAsPendingForCollectionWithId:");
}

id objc_msgSend__unmarkRefreshAsPendingForStoresList(void *a1, const char *a2, ...)
{
  return _[a1 _unmarkRefreshAsPendingForStoresList];
}

id objc_msgSend__unregisterSettingsDiffActionArrayForKey_(void *a1, const char *a2, ...)
{
  return [a1 _unregisterSettingsDiffActionArrayForKey:];
}

id objc_msgSend__visiblePathForBackgroundConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 _visiblePathForBackgroundConfiguration];
}

id objc_msgSend__visibleSupplementaryViewsOfKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visibleSupplementaryViewsOfKind:");
}

id objc_msgSend__willBeginInteractiveResize(void *a1, const char *a2, ...)
{
  return _[a1 _willBeginInteractiveResize];
}

id objc_msgSend__windowHostingScene(void *a1, const char *a2, ...)
{
  return _[a1 _windowHostingScene];
}

id objc_msgSend__windows(void *a1, const char *a2, ...)
{
  return _[a1 _windows];
}

id objc_msgSend_aa_updatePropertiesForAppleAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_updatePropertiesForAppleAccount:completion:");
}

id objc_msgSend_absoluteDimension_(void *a1, const char *a2, ...)
{
  return [a1 absoluteDimension:];
}

id objc_msgSend_absoluteHeight(void *a1, const char *a2, ...)
{
  return _[a1 absoluteHeight];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_acceptNewSize_(void *a1, const char *a2, ...)
{
  return [a1 acceptNewSize:];
}

id objc_msgSend_acceptanceStatus(void *a1, const char *a2, ...)
{
  return _[a1 acceptanceStatus];
}

id objc_msgSend_accessibilityActivationPoint(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityActivationPoint];
}

id objc_msgSend_accessibilityCustomActionsDelegate(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityCustomActionsDelegate];
}

id objc_msgSend_accessibilityHint(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityHint];
}

id objc_msgSend_accessibilityLabel(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityLabel];
}

id objc_msgSend_accessibilityTraits(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityTraits];
}

id objc_msgSend_accessibilityValue(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityValue];
}

id objc_msgSend_accessories(void *a1, const char *a2, ...)
{
  return _[a1 accessories];
}

id objc_msgSend_accompaniedSidebarSubtitleCellConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 accompaniedSidebarSubtitleCellConfiguration];
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _[a1 account];
}

id objc_msgSend_accountChangeDelayer(void *a1, const char *a2, ...)
{
  return _[a1 accountChangeDelayer];
}

id objc_msgSend_accountData(void *a1, const char *a2, ...)
{
  return _[a1 accountData];
}

id objc_msgSend_accountDataCreateIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 accountDataCreateIfNecessary];
}

id objc_msgSend_accountDataForOperation_(void *a1, const char *a2, ...)
{
  return [a1 accountDataForOperation:];
}

id objc_msgSend_accountForAccountIdentifier_context_(void *a1, const char *a2, ...)
{
  return [a1 accountForAccountIdentifier:context:];
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _[a1 accountID];
}

id objc_msgSend_accountIDsEnabledForNotes(void *a1, const char *a2, ...)
{
  return _[a1 accountIDsEnabledForNotes];
}

id objc_msgSend_accountId(void *a1, const char *a2, ...)
{
  return _[a1 accountId];
}

id objc_msgSend_accountIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 accountIdentifier];
}

id objc_msgSend_accountMenuWithAccounts_(void *a1, const char *a2, ...)
{
  return [a1 accountMenuWithAccounts:];
}

id objc_msgSend_accountName(void *a1, const char *a2, ...)
{
  return _[a1 accountName];
}

id objc_msgSend_accountObjectID(void *a1, const char *a2, ...)
{
  return _[a1 accountObjectID];
}

id objc_msgSend_accountOverrideInfo(void *a1, const char *a2, ...)
{
  return _[a1 accountOverrideInfo];
}

id objc_msgSend_accountProxy(void *a1, const char *a2, ...)
{
  return _[a1 accountProxy];
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return _[a1 accountStore];
}

id objc_msgSend_accountToAddNewNoteWithTagSelection_modernContext_(void *a1, const char *a2, ...)
{
  return [a1 accountToAddNewNoteWithTagSelection:modernContext:];
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _[a1 accountType];
}

id objc_msgSend_accountTypeWithAccountTypeIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 accountTypeWithAccountTypeIdentifier:];
}

id objc_msgSend_accountUtilities(void *a1, const char *a2, ...)
{
  return _[a1 accountUtilities];
}

id objc_msgSend_accountWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 accountWithIdentifier:];
}

id objc_msgSend_accountWithIdentifier_context_(void *a1, const char *a2, ...)
{
  return [a1 accountWithIdentifier:context:];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_accountsFetchedResultsController(void *a1, const char *a2, ...)
{
  return _[a1 accountsFetchedResultsController];
}

id objc_msgSend_accountsListNeedsUpdate(void *a1, const char *a2, ...)
{
  return _[a1 accountsListNeedsUpdate];
}

id objc_msgSend_accountsNeedingServerUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 accountsNeedingServerUpgrade];
}

id objc_msgSend_accountsWithAccountType_(void *a1, const char *a2, ...)
{
  return [a1 accountsWithAccountType:];
}

id objc_msgSend_accountsWithAccountType_context_(void *a1, const char *a2, ...)
{
  return [a1 accountsWithAccountType:context:];
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _[a1 action];
}

id objc_msgSend_actionBarButtonItem(void *a1, const char *a2, ...)
{
  return _[a1 actionBarButtonItem];
}

id objc_msgSend_actionBlock(void *a1, const char *a2, ...)
{
  return _[a1 actionBlock];
}

id objc_msgSend_actionButton(void *a1, const char *a2, ...)
{
  return _[a1 actionButton];
}

id objc_msgSend_actionButtonItemsForNavBar(void *a1, const char *a2, ...)
{
  return _[a1 actionButtonItemsForNavBar];
}

id objc_msgSend_actionButtonItemsForToolbar(void *a1, const char *a2, ...)
{
  return _[a1 actionButtonItemsForToolbar];
}

id objc_msgSend_actionForDateHeadersType_completion_(void *a1, const char *a2, ...)
{
  return [a1 actionForDateHeadersType:completion:];
}

id objc_msgSend_actionItemTitleForOrder_(void *a1, const char *a2, ...)
{
  return [a1 actionItemTitleForOrder:];
}

id objc_msgSend_actionItemTitleWithDateHeadersType_(void *a1, const char *a2, ...)
{
  return [a1 actionItemTitleWithDateHeadersType:];
}

id objc_msgSend_actionName(void *a1, const char *a2, ...)
{
  return _[a1 actionName];
}

id objc_msgSend_actionWithDirection_(void *a1, const char *a2, ...)
{
  return [a1 actionWithDirection:];
}

id objc_msgSend_actionWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 actionWithHandler:];
}

id objc_msgSend_actionWithOrder_(void *a1, const char *a2, ...)
{
  return [a1 actionWithOrder:];
}

id objc_msgSend_actionWithTitle_image_identifier_handler_(void *a1, const char *a2, ...)
{
  return [a1 actionWithTitle:image:identifier:handler:];
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return [a1 actionWithTitle:style:handler:];
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _[a1 actions];
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return [a1 activateConstraints:];
}

id objc_msgSend_activatedConstraints(void *a1, const char *a2, ...)
{
  return _[a1 activatedConstraints];
}

id objc_msgSend_activationConditions(void *a1, const char *a2, ...)
{
  return _[a1 activationConditions];
}

id objc_msgSend_activeEditorController(void *a1, const char *a2, ...)
{
  return _[a1 activeEditorController];
}

id objc_msgSend_activeVacuum(void *a1, const char *a2, ...)
{
  return _[a1 activeVacuum];
}

id objc_msgSend_activeVacuumQueue(void *a1, const char *a2, ...)
{
  return _[a1 activeVacuumQueue];
}

id objc_msgSend_activityDidFinish_(void *a1, const char *a2, ...)
{
  return [a1 activityDidFinish:];
}

id objc_msgSend_activityImage(void *a1, const char *a2, ...)
{
  return _[a1 activityImage];
}

id objc_msgSend_activityIndicatorView(void *a1, const char *a2, ...)
{
  return _[a1 activityIndicatorView];
}

id objc_msgSend_activityPresentationController(void *a1, const char *a2, ...)
{
  return _[a1 activityPresentationController];
}

id objc_msgSend_activityStreamNavigationController(void *a1, const char *a2, ...)
{
  return _[a1 activityStreamNavigationController];
}

id objc_msgSend_activityStreamSelection(void *a1, const char *a2, ...)
{
  return _[a1 activityStreamSelection];
}

id objc_msgSend_activityStreamToolbar(void *a1, const char *a2, ...)
{
  return _[a1 activityStreamToolbar];
}

id objc_msgSend_activityStreamViewController(void *a1, const char *a2, ...)
{
  return _[a1 activityStreamViewController];
}

id objc_msgSend_activityStreamViewMode(void *a1, const char *a2, ...)
{
  return _[a1 activityStreamViewMode];
}

id objc_msgSend_activityTitle(void *a1, const char *a2, ...)
{
  return _[a1 activityTitle];
}

id objc_msgSend_activityType(void *a1, const char *a2, ...)
{
  return _[a1 activityType];
}

id objc_msgSend_activityViewController(void *a1, const char *a2, ...)
{
  return _[a1 activityViewController];
}

id objc_msgSend_actualChildIndexForSnapshotIndex_inDestinationObjectID_sectionSnapshot_(void *a1, const char *a2, ...)
{
  return [a1 actualChildIndexForSnapshotIndex:inDestinationObjectID:sectionSnapshot:];
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return [a1 addAction:];
}

id objc_msgSend_addAnimations_(void *a1, const char *a2, ...)
{
  return [a1 addAnimations:];
}

id objc_msgSend_addAttachment_(void *a1, const char *a2, ...)
{
  return [a1 addAttachment:];
}

id objc_msgSend_addAttachmentData_mimeType_fileName_(void *a1, const char *a2, ...)
{
  return [a1 addAttachmentData:mimeType:fileName:];
}

id objc_msgSend_addAttachmentData_typeIdentifier_filename_(void *a1, const char *a2, ...)
{
  return [a1 addAttachmentData:typeIdentifier:filename:];
}

id objc_msgSend_addAttachments_(void *a1, const char *a2, ...)
{
  return [a1 addAttachments:];
}

id objc_msgSend_addAttachmentsObject_(void *a1, const char *a2, ...)
{
  return [a1 addAttachmentsObject:];
}

id objc_msgSend_addAudioItemWithTranscription_summarization_(void *a1, const char *a2, ...)
{
  return [a1 addAudioItemWithTranscription:summarization:];
}

id objc_msgSend_addBulletedListItemWithTitle_description_image_(void *a1, const char *a2, ...)
{
  return [a1 addBulletedListItemWithTitle:description:image:];
}

id objc_msgSend_addBulletedListItemWithTitle_description_symbolName_(void *a1, const char *a2, ...)
{
  return [a1 addBulletedListItemWithTitle:description:symbolName:];
}