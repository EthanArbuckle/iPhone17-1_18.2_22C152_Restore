uint64_t sub_10009DA74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10009DAD4(void *a1, void *a2, uint64_t a3)
{
  v5 = a1;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for MeasurementHistoryItem();
  uint64_t v10 = *((void *)v9 - 1);
  v11 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100012894((uint64_t *)&unk_1004D0EF0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v37 = v10;
    v39 = v5;
    long long v13 = v8[1];
    _OWORD *v7 = *v8;
    v7[1] = v13;
    uint64_t v14 = v9[6];
    __dst = (char *)v7 + v14;
    v15 = (char *)v8 + v14;
    uint64_t v16 = type metadata accessor for MeasurementCapture();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_100012894((uint64_t *)&unk_1004CE670);
      memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v34 = type metadata accessor for URL();
      v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32);
      v35(__dst, v15, v34);
      v35(&__dst[*(int *)(v16 + 20)], &v15[*(int *)(v16 + 20)], v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    memcpy((char *)v7 + v9[7], (char *)v8 + v9[7], 0x346uLL);
    *((unsigned char *)v7 + v9[8]) = *((unsigned char *)v8 + v9[8]);
    uint64_t v10 = v37;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v37 + 56))(v7, 0, 1, v9);
    v5 = v39;
  }
  uint64_t v19 = *(int *)(a3 + 24);
  v20 = (_OWORD *)((char *)v5 + v19);
  v21 = (_OWORD *)((char *)a2 + v19);
  if (v11(v21, 1, v9))
  {
    uint64_t v22 = sub_100012894((uint64_t *)&unk_1004D0EF0);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    long long v23 = v21[1];
    _OWORD *v20 = *v21;
    v20[1] = v23;
    uint64_t v24 = v9[6];
    v25 = (char *)v20 + v24;
    v26 = (char *)v21 + v24;
    uint64_t v27 = type metadata accessor for MeasurementCapture();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = sub_100012894((uint64_t *)&unk_1004CE670);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      uint64_t v38 = v10;
      v40 = v5;
      uint64_t v30 = type metadata accessor for URL();
      v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32);
      v31(v25, v26, v30);
      uint64_t v32 = v30;
      v5 = v40;
      v31(&v25[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v32);
      uint64_t v10 = v38;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    memcpy((char *)v20 + v9[7], (char *)v21 + v9[7], 0x346uLL);
    *((unsigned char *)v20 + v9[8]) = *((unsigned char *)v21 + v9[8]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v10 + 56))(v20, 0, 1, v9);
  }
  return v5;
}

void *sub_10009DF04(void *a1, void *a2, uint64_t a3)
{
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  v7 = (void *)((char *)v5 + v6);
  v8 = (void *)((char *)v4 + v6);
  v9 = (int *)type metadata accessor for MeasurementHistoryItem();
  uint64_t v10 = *((void *)v9 - 1);
  v11 = *(uint64_t (**)(void *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_10009DA74((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
      goto LABEL_7;
    }
    uint64_t v197 = a3;
    v190 = v4;
    uint64_t v200 = v10;
    v193 = v5;
    uint64_t v22 = v8[1];
    void *v7 = *v8;
    v7[1] = v22;
    swift_bridgeObjectRelease();
    uint64_t v23 = v8[3];
    v7[2] = v8[2];
    v7[3] = v23;
    swift_bridgeObjectRelease();
    v204 = v9;
    uint64_t v24 = v9[6];
    v25 = (char *)v7 + v24;
    v26 = (char *)v8 + v24;
    uint64_t v27 = type metadata accessor for MeasurementCapture();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
    uint64_t v187 = (uint64_t)v25;
    LODWORD(v25) = v29(v25, 1, v27);
    int v30 = v29(v26, 1, v27);
    if (v25)
    {
      if (!v30)
      {
        uint64_t v38 = type metadata accessor for URL();
        v39 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v38 - 8) + 32);
        v39(v187, v26, v38);
        v39(v187 + *(int *)(v27 + 20), &v26[*(int *)(v27 + 20)], v38);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v187, 0, 1, v27);
        goto LABEL_18;
      }
      size_t v31 = *(void *)(*(void *)(sub_100012894((uint64_t *)&unk_1004CE670) - 8) + 64);
      uint64_t v32 = (void *)v187;
    }
    else
    {
      if (!v30)
      {
        uint64_t v40 = type metadata accessor for URL();
        v41 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v40 - 8) + 40);
        v41(v187, v26, v40);
        v41(v187 + *(int *)(v27 + 20), &v26[*(int *)(v27 + 20)], v40);
        goto LABEL_18;
      }
      sub_10009DA74(v187, (uint64_t (*)(void))type metadata accessor for MeasurementCapture);
      size_t v31 = *(void *)(*(void *)(sub_100012894((uint64_t *)&unk_1004CE670) - 8) + 64);
      uint64_t v32 = (void *)v187;
    }
    memcpy(v32, v26, v31);
LABEL_18:
    v9 = v204;
    uint64_t v10 = v200;
    uint64_t v42 = v204[7];
    v43 = (char *)v7 + v42;
    v44 = (char *)v8 + v42;
    uint64_t v45 = *(void *)v43;
    uint64_t v46 = *((void *)v43 + 1);
    uint64_t v47 = *((void *)v43 + 2);
    uint64_t v48 = *((void *)v43 + 3);
    uint64_t v49 = *((void *)v43 + 4);
    uint64_t v50 = *((void *)v43 + 5);
    uint64_t v51 = *((void *)v43 + 6);
    uint64_t v52 = *((void *)v43 + 7);
    long long v201 = *((_OWORD *)v43 + 5);
    long long v205 = *((_OWORD *)v43 + 4);
    long long v188 = *((_OWORD *)v43 + 6);
    long long v183 = *((_OWORD *)v43 + 8);
    *(_OWORD *)__srca = *((_OWORD *)v43 + 7);
    long long v182 = *((_OWORD *)v43 + 9);
    long long v53 = *((_OWORD *)v44 + 1);
    long long v54 = *((_OWORD *)v44 + 2);
    long long v55 = *((_OWORD *)v44 + 3);
    long long v56 = *((_OWORD *)v44 + 4);
    long long v57 = *((_OWORD *)v44 + 5);
    long long v58 = *((_OWORD *)v44 + 6);
    long long v59 = *((_OWORD *)v44 + 7);
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *((_OWORD *)v43 + 1) = v53;
    long long v60 = *((_OWORD *)v44 + 8);
    long long v61 = *((_OWORD *)v44 + 9);
    *((_OWORD *)v43 + 2) = v54;
    *((_OWORD *)v43 + 3) = v55;
    long long v62 = *((_OWORD *)v44 + 10);
    long long v63 = *((_OWORD *)v44 + 11);
    *((_OWORD *)v43 + 4) = v56;
    *((_OWORD *)v43 + 5) = v57;
    long long v64 = *((_OWORD *)v44 + 12);
    long long v65 = *((_OWORD *)v44 + 13);
    *((_OWORD *)v43 + 6) = v58;
    *((_OWORD *)v43 + 7) = v59;
    long long v66 = *((_OWORD *)v44 + 14);
    long long v67 = *((_OWORD *)v44 + 15);
    *((_OWORD *)v43 + 8) = v60;
    *((_OWORD *)v43 + 9) = v61;
    long long v68 = *((_OWORD *)v44 + 16);
    long long v69 = *((_OWORD *)v44 + 17);
    *((_OWORD *)v43 + 10) = v62;
    *((_OWORD *)v43 + 11) = v63;
    long long v70 = *((_OWORD *)v44 + 18);
    long long v71 = *((_OWORD *)v44 + 19);
    *((_OWORD *)v43 + 12) = v64;
    *((_OWORD *)v43 + 13) = v65;
    long long v72 = *((_OWORD *)v44 + 20);
    long long v73 = *((_OWORD *)v44 + 21);
    *((_OWORD *)v43 + 14) = v66;
    *((_OWORD *)v43 + 15) = v67;
    long long v74 = *((_OWORD *)v44 + 22);
    long long v75 = *((_OWORD *)v44 + 23);
    *((_OWORD *)v43 + 16) = v68;
    *((_OWORD *)v43 + 17) = v69;
    long long v76 = *((_OWORD *)v44 + 24);
    long long v77 = *((_OWORD *)v44 + 25);
    *((_OWORD *)v43 + 18) = v70;
    *((_OWORD *)v43 + 19) = v71;
    long long v78 = *((_OWORD *)v44 + 26);
    long long v79 = *((_OWORD *)v44 + 27);
    *((_OWORD *)v43 + 20) = v72;
    *((_OWORD *)v43 + 21) = v73;
    long long v80 = *((_OWORD *)v44 + 28);
    long long v81 = *((_OWORD *)v44 + 29);
    *((_OWORD *)v43 + 22) = v74;
    *((_OWORD *)v43 + 23) = v75;
    long long v82 = *((_OWORD *)v44 + 30);
    long long v83 = *((_OWORD *)v44 + 31);
    *((_OWORD *)v43 + 24) = v76;
    *((_OWORD *)v43 + 25) = v77;
    long long v84 = *((_OWORD *)v44 + 32);
    long long v85 = *((_OWORD *)v44 + 33);
    *((_OWORD *)v43 + 26) = v78;
    *((_OWORD *)v43 + 27) = v79;
    *((_OWORD *)v43 + 28) = v80;
    *((_OWORD *)v43 + 29) = v81;
    *((_OWORD *)v43 + 30) = v82;
    *((_OWORD *)v43 + 31) = v83;
    *((_OWORD *)v43 + 32) = v84;
    *((_OWORD *)v43 + 33) = v85;
    long long v86 = *((_OWORD *)v44 + 35);
    *((_OWORD *)v43 + 34) = *((_OWORD *)v44 + 34);
    *((_OWORD *)v43 + 35) = v86;
    long long v87 = *((_OWORD *)v44 + 37);
    *((_OWORD *)v43 + 36) = *((_OWORD *)v44 + 36);
    *((_OWORD *)v43 + 37) = v87;
    long long v88 = *((_OWORD *)v44 + 39);
    *((_OWORD *)v43 + 38) = *((_OWORD *)v44 + 38);
    *((_OWORD *)v43 + 39) = v88;
    long long v89 = *((_OWORD *)v44 + 41);
    *((_OWORD *)v43 + 40) = *((_OWORD *)v44 + 40);
    *((_OWORD *)v43 + 41) = v89;
    long long v90 = *((_OWORD *)v44 + 43);
    *((_OWORD *)v43 + 42) = *((_OWORD *)v44 + 42);
    *((_OWORD *)v43 + 43) = v90;
    long long v91 = *((_OWORD *)v44 + 45);
    *((_OWORD *)v43 + 44) = *((_OWORD *)v44 + 44);
    *((_OWORD *)v43 + 45) = v91;
    long long v92 = *((_OWORD *)v44 + 47);
    *((_OWORD *)v43 + 46) = *((_OWORD *)v44 + 46);
    *((_OWORD *)v43 + 47) = v92;
    long long v93 = *((_OWORD *)v44 + 49);
    *((_OWORD *)v43 + 48) = *((_OWORD *)v44 + 48);
    *((_OWORD *)v43 + 49) = v93;
    long long v94 = *((_OWORD *)v44 + 51);
    *((_OWORD *)v43 + 50) = *((_OWORD *)v44 + 50);
    *((_OWORD *)v43 + 51) = v94;
    int v95 = *((_DWORD *)v44 + 208);
    *((_WORD *)v43 + 418) = *((_WORD *)v44 + 418);
    *((_DWORD *)v43 + 208) = v95;
    sub_100027F20(v45, v46, v47, v48, v49, v50, v51, v52, v205, *((uint64_t *)&v205 + 1), v201, *((uint64_t *)&v201 + 1), v188, *((uint64_t *)&v188 + 1), (uint64_t)__srca[0], (uint64_t)__srca[1], v183, *((uint64_t *)&v183 + 1), v182,
      *((uint64_t *)&v182 + 1));
    *((unsigned char *)v7 + v9[8]) = *((unsigned char *)v8 + v9[8]);
    v5 = v193;
    v4 = v190;
    a3 = v197;
    goto LABEL_19;
  }
  if (v13)
  {
LABEL_7:
    uint64_t v21 = sub_100012894((uint64_t *)&unk_1004D0EF0);
    memcpy(v7, v8, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v196 = a3;
  uint64_t v199 = v10;
  long long v14 = *((_OWORD *)v8 + 1);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *((_OWORD *)v7 + 1) = v14;
  v203 = v9;
  uint64_t v15 = v9[6];
  uint64_t v16 = (char *)v7 + v15;
  uint64_t v17 = (char *)v8 + v15;
  uint64_t v18 = type metadata accessor for MeasurementCapture();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_100012894((uint64_t *)&unk_1004CE670);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v194 = v5;
    uint64_t v33 = type metadata accessor for URL();
    uint64_t v34 = v16;
    v35 = *(void (**)(void))(*(void *)(v33 - 8) + 32);
    v191 = v4;
    v36 = v34;
    __src = v34;
    v35();
    uint64_t v37 = v33;
    v5 = v194;
    ((void (*)(char *, char *, uint64_t))v35)(&v36[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v37);
    v4 = v191;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__src, 0, 1, v18);
  }
  a3 = v196;
  v9 = v203;
  memcpy((char *)v7 + v203[7], (char *)v8 + v203[7], 0x346uLL);
  *((unsigned char *)v7 + v203[8]) = *((unsigned char *)v8 + v203[8]);
  uint64_t v10 = v199;
  (*(void (**)(void *, void, uint64_t, int *))(v199 + 56))(v7, 0, 1, v203);
LABEL_19:
  uint64_t v96 = *(int *)(a3 + 24);
  v97 = (void *)((char *)v5 + v96);
  v98 = (void *)((char *)v4 + v96);
  int v99 = v11((void *)((char *)v5 + v96), 1, v9);
  int v100 = v11(v98, 1, v9);
  if (!v99)
  {
    if (v100)
    {
      sub_10009DA74((uint64_t)v97, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
      goto LABEL_25;
    }
    uint64_t v109 = v98[1];
    void *v97 = *v98;
    v97[1] = v109;
    swift_bridgeObjectRelease();
    uint64_t v110 = v98[3];
    v97[2] = v98[2];
    v97[3] = v110;
    swift_bridgeObjectRelease();
    v206 = v9;
    uint64_t v111 = v9[6];
    v112 = (char *)v97 + v111;
    v113 = (char *)v98 + v111;
    uint64_t v114 = type metadata accessor for MeasurementCapture();
    uint64_t v115 = *(void *)(v114 - 8);
    v116 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
    int v117 = v116(v112, 1, v114);
    int v118 = v116(v113, 1, v114);
    if (v117)
    {
      if (!v118)
      {
        uint64_t v119 = type metadata accessor for URL();
        v120 = *(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 32);
        v120(v112, v113, v119);
        v120(&v112[*(int *)(v114 + 20)], &v113[*(int *)(v114 + 20)], v119);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
LABEL_34:
        uint64_t v125 = v206[7];
        v126 = (char *)v97 + v125;
        v127 = (char *)v98 + v125;
        uint64_t v128 = *(void *)v126;
        uint64_t v129 = *((void *)v126 + 1);
        uint64_t v130 = *((void *)v126 + 2);
        uint64_t v131 = *((void *)v126 + 3);
        uint64_t v132 = *((void *)v126 + 4);
        uint64_t v133 = *((void *)v126 + 5);
        uint64_t v134 = *((void *)v126 + 6);
        uint64_t v135 = *((void *)v126 + 7);
        long long v198 = *((_OWORD *)v126 + 5);
        long long v202 = *((_OWORD *)v126 + 4);
        long long v192 = *((_OWORD *)v126 + 7);
        long long v195 = *((_OWORD *)v126 + 6);
        long long v189 = *((_OWORD *)v126 + 8);
        *(_OWORD *)__srcb = *((_OWORD *)v126 + 9);
        long long v136 = *((_OWORD *)v127 + 1);
        long long v137 = *((_OWORD *)v127 + 2);
        long long v138 = *((_OWORD *)v127 + 3);
        long long v139 = *((_OWORD *)v127 + 4);
        long long v140 = *((_OWORD *)v127 + 5);
        long long v141 = *((_OWORD *)v127 + 6);
        long long v142 = *((_OWORD *)v127 + 7);
        *(_OWORD *)v126 = *(_OWORD *)v127;
        *((_OWORD *)v126 + 1) = v136;
        long long v143 = *((_OWORD *)v127 + 8);
        long long v144 = *((_OWORD *)v127 + 9);
        *((_OWORD *)v126 + 2) = v137;
        *((_OWORD *)v126 + 3) = v138;
        long long v145 = *((_OWORD *)v127 + 10);
        long long v146 = *((_OWORD *)v127 + 11);
        *((_OWORD *)v126 + 4) = v139;
        *((_OWORD *)v126 + 5) = v140;
        long long v147 = *((_OWORD *)v127 + 12);
        long long v148 = *((_OWORD *)v127 + 13);
        *((_OWORD *)v126 + 6) = v141;
        *((_OWORD *)v126 + 7) = v142;
        long long v149 = *((_OWORD *)v127 + 14);
        long long v150 = *((_OWORD *)v127 + 15);
        *((_OWORD *)v126 + 8) = v143;
        *((_OWORD *)v126 + 9) = v144;
        long long v151 = *((_OWORD *)v127 + 16);
        long long v152 = *((_OWORD *)v127 + 17);
        *((_OWORD *)v126 + 10) = v145;
        *((_OWORD *)v126 + 11) = v146;
        long long v153 = *((_OWORD *)v127 + 18);
        long long v154 = *((_OWORD *)v127 + 19);
        *((_OWORD *)v126 + 12) = v147;
        *((_OWORD *)v126 + 13) = v148;
        long long v155 = *((_OWORD *)v127 + 20);
        long long v156 = *((_OWORD *)v127 + 21);
        *((_OWORD *)v126 + 14) = v149;
        *((_OWORD *)v126 + 15) = v150;
        long long v157 = *((_OWORD *)v127 + 22);
        long long v158 = *((_OWORD *)v127 + 23);
        *((_OWORD *)v126 + 16) = v151;
        *((_OWORD *)v126 + 17) = v152;
        long long v159 = *((_OWORD *)v127 + 24);
        long long v160 = *((_OWORD *)v127 + 25);
        *((_OWORD *)v126 + 18) = v153;
        *((_OWORD *)v126 + 19) = v154;
        long long v161 = *((_OWORD *)v127 + 26);
        long long v162 = *((_OWORD *)v127 + 27);
        *((_OWORD *)v126 + 20) = v155;
        *((_OWORD *)v126 + 21) = v156;
        long long v163 = *((_OWORD *)v127 + 28);
        long long v164 = *((_OWORD *)v127 + 29);
        *((_OWORD *)v126 + 22) = v157;
        *((_OWORD *)v126 + 23) = v158;
        long long v165 = *((_OWORD *)v127 + 30);
        long long v166 = *((_OWORD *)v127 + 31);
        *((_OWORD *)v126 + 24) = v159;
        *((_OWORD *)v126 + 25) = v160;
        long long v167 = *((_OWORD *)v127 + 32);
        long long v168 = *((_OWORD *)v127 + 33);
        *((_OWORD *)v126 + 26) = v161;
        *((_OWORD *)v126 + 27) = v162;
        *((_OWORD *)v126 + 28) = v163;
        *((_OWORD *)v126 + 29) = v164;
        *((_OWORD *)v126 + 30) = v165;
        *((_OWORD *)v126 + 31) = v166;
        *((_OWORD *)v126 + 32) = v167;
        *((_OWORD *)v126 + 33) = v168;
        long long v169 = *((_OWORD *)v127 + 35);
        *((_OWORD *)v126 + 34) = *((_OWORD *)v127 + 34);
        *((_OWORD *)v126 + 35) = v169;
        long long v170 = *((_OWORD *)v127 + 37);
        *((_OWORD *)v126 + 36) = *((_OWORD *)v127 + 36);
        *((_OWORD *)v126 + 37) = v170;
        long long v171 = *((_OWORD *)v127 + 39);
        *((_OWORD *)v126 + 38) = *((_OWORD *)v127 + 38);
        *((_OWORD *)v126 + 39) = v171;
        long long v172 = *((_OWORD *)v127 + 41);
        *((_OWORD *)v126 + 40) = *((_OWORD *)v127 + 40);
        *((_OWORD *)v126 + 41) = v172;
        long long v173 = *((_OWORD *)v127 + 43);
        *((_OWORD *)v126 + 42) = *((_OWORD *)v127 + 42);
        *((_OWORD *)v126 + 43) = v173;
        long long v174 = *((_OWORD *)v127 + 45);
        *((_OWORD *)v126 + 44) = *((_OWORD *)v127 + 44);
        *((_OWORD *)v126 + 45) = v174;
        long long v175 = *((_OWORD *)v127 + 47);
        *((_OWORD *)v126 + 46) = *((_OWORD *)v127 + 46);
        *((_OWORD *)v126 + 47) = v175;
        long long v176 = *((_OWORD *)v127 + 49);
        *((_OWORD *)v126 + 48) = *((_OWORD *)v127 + 48);
        *((_OWORD *)v126 + 49) = v176;
        long long v177 = *((_OWORD *)v127 + 51);
        *((_OWORD *)v126 + 50) = *((_OWORD *)v127 + 50);
        *((_OWORD *)v126 + 51) = v177;
        int v178 = *((_DWORD *)v127 + 208);
        *((_WORD *)v126 + 418) = *((_WORD *)v127 + 418);
        *((_DWORD *)v126 + 208) = v178;
        sub_100027F20(v128, v129, v130, v131, v132, v133, v134, v135, v202, *((uint64_t *)&v202 + 1), v198, *((uint64_t *)&v198 + 1), v195, *((uint64_t *)&v195 + 1), v192, *((uint64_t *)&v192 + 1), v189, *((uint64_t *)&v189 + 1), (uint64_t)__srcb[0],
          (uint64_t)__srcb[1]);
        *((unsigned char *)v97 + v206[8]) = *((unsigned char *)v98 + v206[8]);
        return v5;
      }
    }
    else
    {
      if (!v118)
      {
        uint64_t v180 = type metadata accessor for URL();
        v181 = *(void (**)(char *, char *, uint64_t))(*(void *)(v180 - 8) + 40);
        v181(v112, v113, v180);
        v181(&v112[*(int *)(v114 + 20)], &v113[*(int *)(v114 + 20)], v180);
        goto LABEL_34;
      }
      sub_10009DA74((uint64_t)v112, (uint64_t (*)(void))type metadata accessor for MeasurementCapture);
    }
    uint64_t v124 = sub_100012894((uint64_t *)&unk_1004CE670);
    memcpy(v112, v113, *(void *)(*(void *)(v124 - 8) + 64));
    goto LABEL_34;
  }
  if (v100)
  {
LABEL_25:
    uint64_t v108 = sub_100012894((uint64_t *)&unk_1004D0EF0);
    memcpy(v97, v98, *(void *)(*(void *)(v108 - 8) + 64));
    return v5;
  }
  long long v101 = *((_OWORD *)v98 + 1);
  *(_OWORD *)v97 = *(_OWORD *)v98;
  *((_OWORD *)v97 + 1) = v101;
  uint64_t v102 = v9[6];
  v103 = (char *)v97 + v102;
  v104 = (char *)v98 + v102;
  uint64_t v105 = type metadata accessor for MeasurementCapture();
  uint64_t v106 = *(void *)(v105 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
  {
    uint64_t v107 = sub_100012894((uint64_t *)&unk_1004CE670);
    memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
  }
  else
  {
    v207 = v9;
    uint64_t v121 = type metadata accessor for URL();
    v122 = *(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 32);
    v122(v103, v104, v121);
    uint64_t v123 = v121;
    v9 = v207;
    v122(&v103[*(int *)(v105 + 20)], &v104[*(int *)(v105 + 20)], v123);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
  }
  memcpy((char *)v97 + v9[7], (char *)v98 + v9[7], 0x346uLL);
  *((unsigned char *)v97 + v9[8]) = *((unsigned char *)v98 + v9[8]);
  (*(void (**)(void *, void, uint64_t, int *))(v10 + 56))(v97, 0, 1, v9);
  return v5;
}

uint64_t sub_10009ED4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009ED60);
}

uint64_t sub_10009ED60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100012894((uint64_t *)&unk_1004D0EF0);
    v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10009EE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009EE28);
}

void *sub_10009EE28(void *result, uint64_t a2, int a3, uint64_t a4)
{
  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100012894((uint64_t *)&unk_1004D0EF0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MeasurementsHistory()
{
  uint64_t result = qword_1004C8200;
  if (!qword_1004C8200) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10009EF20()
{
  sub_10009EFBC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10009EFBC()
{
  if (!qword_1004C8210)
  {
    type metadata accessor for MeasurementHistoryItem();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1004C8210);
    }
  }
}

id sub_10009F014(uint64_t a1)
{
  return sub_10009F0D4(a1, &qword_1004F8040);
}

id sub_10009F020@<X0>(void **a1@<X8>)
{
  return sub_10009F180(&qword_1004C29E8, (void **)&qword_1004F8040, a1);
}

unint64_t sub_10009F048(uint64_t a1)
{
  unint64_t result = sub_10009F070();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009F070()
{
  unint64_t result = qword_1004C8270;
  if (!qword_1004C8270)
  {
    type metadata accessor for MeasurementsHistory();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8270);
  }
  return result;
}

id sub_10009F0C8(uint64_t a1)
{
  return sub_10009F0D4(a1, &qword_1004F8048);
}

id sub_10009F0D4(uint64_t a1, uint64_t *a2)
{
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  id result = (id)*((void *)&xmmword_1004F8000 + 1);
  if (*((void *)&xmmword_1004F8000 + 1))
  {
    id v4 = (id)*((void *)&xmmword_1004F8000 + 1);
    *a2 = Contexts.PrivateQueue.init(_:)();
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10009F15C@<X0>(void **a1@<X8>)
{
  return sub_10009F180(&qword_1004C29F0, (void **)&qword_1004F8048, a1);
}

id sub_10009F180@<X0>(void *a1@<X2>, void **a2@<X3>, void **a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  v5 = *a2;
  *a3 = *a2;

  return v5;
}

uint64_t sub_10009F1D8(void **a1, void **a2)
{
  v2 = *a1;
  v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      type metadata accessor for MeasureObject();
      id v4 = v3;
      id v5 = v2;
      char v6 = static NSObject.== infix(_:_:)();

      if (v6) {
        return 1;
      }
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

unint64_t sub_10009F250(uint64_t a1)
{
  unint64_t result = sub_10009F278();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009F278()
{
  unint64_t result = qword_1004C82A0;
  if (!qword_1004C82A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C82A0);
  }
  return result;
}

BOOL sub_10009F2CC(uint64_t *a1, uint64_t *a2)
{
  long long v61 = a2;
  uint64_t v3 = type metadata accessor for MeasurementHistoryItem();
  uint64_t v58 = *(void *)(v3 - 8);
  uint64_t v59 = v3;
  __chkstk_darwin(v3);
  long long v57 = (void **)((char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v60 = sub_100012894(&qword_1004C82A8);
  uint64_t v5 = __chkstk_darwin(v60);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v52 - v8;
  uint64_t v10 = sub_100012894((uint64_t *)&unk_1004D0EF0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  int v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v52 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v52 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v52 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  v25 = (char *)&v52 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v52 - v26;
  uint64_t v28 = a1;
  uint64_t v29 = *a1;
  int v30 = v61;
  if ((sub_100085B80(v29, *v61) & 1) == 0) {
    return 0;
  }
  long long v55 = v7;
  long long v56 = v22;
  long long v53 = v16;
  long long v54 = v19;
  uint64_t v52 = v13;
  uint64_t v31 = type metadata accessor for MeasurementsHistory();
  uint64_t v32 = v28;
  sub_10009F8C0((uint64_t)v28 + *(int *)(v31 + 20), (uint64_t)v27);
  sub_10009F8C0((uint64_t)v30 + *(int *)(v31 + 20), (uint64_t)v25);
  uint64_t v33 = (uint64_t)&v9[*(int *)(v60 + 48)];
  sub_10009F8C0((uint64_t)v27, (uint64_t)v9);
  sub_10009F8C0((uint64_t)v25, v33);
  uint64_t v34 = v59;
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  v36 = v32;
  uint64_t v37 = (uint64_t)v9;
  if (v35((uint64_t)v9, 1, v59) != 1)
  {
    uint64_t v38 = (uint64_t)v9;
    uint64_t v39 = (uint64_t)v56;
    sub_10009F8C0(v38, (uint64_t)v56);
    if (v35(v33, 1, v34) != 1)
    {
      uint64_t v41 = v33;
      uint64_t v42 = (void *)v39;
      v43 = v57;
      sub_10009F928(v41, (uint64_t)v57);
      LODWORD(v58) = sub_1001E6630(v42, v43);
      sub_10009DA74((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
      sub_10002B9C0((uint64_t)v25, (uint64_t *)&unk_1004D0EF0);
      sub_10002B9C0((uint64_t)v27, (uint64_t *)&unk_1004D0EF0);
      sub_10009DA74((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
      sub_10002B9C0(v37, (uint64_t *)&unk_1004D0EF0);
      if ((v58 & 1) == 0) {
        return 0;
      }
      goto LABEL_9;
    }
    sub_10002B9C0((uint64_t)v25, (uint64_t *)&unk_1004D0EF0);
    sub_10002B9C0((uint64_t)v27, (uint64_t *)&unk_1004D0EF0);
    sub_10009DA74(v39, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
LABEL_7:
    uint64_t v40 = v37;
LABEL_15:
    sub_10002B9C0(v40, &qword_1004C82A8);
    return 0;
  }
  sub_10002B9C0((uint64_t)v25, (uint64_t *)&unk_1004D0EF0);
  sub_10002B9C0((uint64_t)v27, (uint64_t *)&unk_1004D0EF0);
  if (v35(v33, 1, v34) != 1) {
    goto LABEL_7;
  }
  sub_10002B9C0((uint64_t)v9, (uint64_t *)&unk_1004D0EF0);
LABEL_9:
  uint64_t v44 = (uint64_t)v54;
  sub_10009F8C0((uint64_t)v36 + *(int *)(v31 + 24), (uint64_t)v54);
  uint64_t v45 = (uint64_t)v53;
  sub_10009F8C0((uint64_t)v61 + *(int *)(v31 + 24), (uint64_t)v53);
  uint64_t v46 = (uint64_t)v55;
  uint64_t v47 = (uint64_t)&v55[*(int *)(v60 + 48)];
  sub_10009F8C0(v44, (uint64_t)v55);
  sub_10009F8C0(v45, v47);
  if (v35(v46, 1, v34) == 1)
  {
    sub_10002B9C0(v45, (uint64_t *)&unk_1004D0EF0);
    sub_10002B9C0(v44, (uint64_t *)&unk_1004D0EF0);
    if (v35(v47, 1, v34) == 1)
    {
      sub_10002B9C0(v46, (uint64_t *)&unk_1004D0EF0);
      return 1;
    }
    goto LABEL_14;
  }
  uint64_t v48 = v52;
  sub_10009F8C0(v46, (uint64_t)v52);
  if (v35(v47, 1, v34) == 1)
  {
    sub_10002B9C0(v45, (uint64_t *)&unk_1004D0EF0);
    sub_10002B9C0(v44, (uint64_t *)&unk_1004D0EF0);
    sub_10009DA74((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
LABEL_14:
    uint64_t v40 = v46;
    goto LABEL_15;
  }
  uint64_t v50 = v57;
  sub_10009F928(v47, (uint64_t)v57);
  char v51 = sub_1001E6630(v48, v50);
  sub_10009DA74((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
  sub_10002B9C0(v45, (uint64_t *)&unk_1004D0EF0);
  sub_10002B9C0(v44, (uint64_t *)&unk_1004D0EF0);
  sub_10009DA74((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
  sub_10002B9C0(v46, (uint64_t *)&unk_1004D0EF0);
  return (v51 & 1) != 0;
}

uint64_t sub_10009F8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894((uint64_t *)&unk_1004D0EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009F928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MeasurementHistoryItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009F990(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    __CocoaSet.endIndex.getter();
    char v6 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_1000A00B0(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_10009FE58(v3, v5, v2 != 0, a1);
    uint64_t v7 = v11;
    sub_1000A00B0(v3, v5, v2 != 0);
    return v7;
  }
  uint64_t result = sub_1000A00BC(a1);
  if ((v10 & 1) == 0)
  {
    uint64_t v5 = v9;
    if (*(_DWORD *)(a1 + 36) == v9)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10009FAA0(uint64_t a1, uint64_t a2)
{
  ObjectType = (objc_class *)swift_getObjectType();
  sub_10001FD84();
  sub_10001FDC4();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v14.receiver = v2;
  v14.super_class = ObjectType;
  [super touchesBegan:a2];

  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = (void *)sub_10009F990(v6);
  swift_bridgeObjectRelease();
  if (v7)
  {
    id v8 = [v2 view];
    [v7 locationInView:v8];
    uint64_t v10 = v9;
    uint64_t v12 = v11;

    int v13 = &v2[OBJC_IVAR____TtC7Measure29PanRecognizerWithInitialTouch_initialTouchLocation];
    *(void *)int v13 = v10;
    *((void *)v13 + 1) = v12;
    v13[16] = 0;
  }
  else
  {
    __break(1u);
  }
}

id sub_10009FC34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = &v3[OBJC_IVAR____TtC7Measure29PanRecognizerWithInitialTouch_initialTouchLocation];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  v7[16] = 1;
  sub_1000352CC(a1, (uint64_t)v17);
  uint64_t v8 = v18;
  if (v18)
  {
    uint64_t v9 = sub_1000131D4(v17, v18);
    uint64_t v10 = *(void *)(v8 - 8);
    __chkstk_darwin(v9);
    uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v10 + 16))(v12);
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    sub_100013218((uint64_t)v17);
  }
  else
  {
    uint64_t v13 = 0;
  }
  v16.receiver = v3;
  v16.super_class = ObjectType;
  [super initWithTarget:v13 action:a2];
  swift_unknownObjectRelease();
  sub_10001C9D8(a1);
  return v14;
}

uint64_t type metadata accessor for PanRecognizerWithInitialTouch()
{
  return self;
}

void sub_10009FE58(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10001FD84();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10001FD84();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  id v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_1000A00B0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000A00BC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_1000A0144(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    objc_super v16 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v135 = (int *)type metadata accessor for MeasurementHistoryItem();
    uint64_t v8 = v135[6];
    id v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for MeasurementCapture();
    uint64_t v12 = *(void *)(v11 - 8);
    char v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100012894((uint64_t *)&unk_1004CE670);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for URL();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      v18(v9, v10, v17);
      v18(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v19 = v135[7];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    long long v63 = a2;
    uint64_t v133 = *((void *)v21 + 10);
    uint64_t v134 = *((void *)v21 + 9);
    uint64_t v131 = *((void *)v21 + 12);
    uint64_t v132 = *((void *)v21 + 11);
    uint64_t v129 = *((void *)v21 + 14);
    uint64_t v130 = *((void *)v21 + 13);
    uint64_t v127 = *((void *)v21 + 16);
    uint64_t v128 = *((void *)v21 + 15);
    uint64_t v125 = *((void *)v21 + 18);
    uint64_t v126 = *((void *)v21 + 17);
    uint64_t v123 = *((void *)v21 + 20);
    uint64_t v124 = *((void *)v21 + 19);
    uint64_t v121 = *((void *)v21 + 22);
    uint64_t v122 = *((void *)v21 + 21);
    uint64_t v119 = *((void *)v21 + 24);
    uint64_t v120 = *((void *)v21 + 23);
    uint64_t v117 = *((void *)v21 + 26);
    uint64_t v118 = *((void *)v21 + 25);
    uint64_t v115 = *((void *)v21 + 28);
    uint64_t v116 = *((void *)v21 + 27);
    uint64_t v114 = *((void *)v21 + 29);
    uint64_t v113 = *((void *)v21 + 30);
    uint64_t v112 = *((void *)v21 + 31);
    uint64_t v111 = *((void *)v21 + 32);
    uint64_t v110 = *((void *)v21 + 33);
    uint64_t v109 = *((void *)v21 + 34);
    uint64_t v108 = *((void *)v21 + 35);
    uint64_t v107 = *((void *)v21 + 36);
    uint64_t v106 = *((void *)v21 + 37);
    uint64_t v105 = *((void *)v21 + 38);
    uint64_t v104 = *((void *)v21 + 39);
    uint64_t v103 = *((void *)v21 + 40);
    uint64_t v102 = *((void *)v21 + 41);
    uint64_t v101 = *((void *)v21 + 42);
    uint64_t v100 = *((void *)v21 + 43);
    uint64_t v99 = *((void *)v21 + 44);
    uint64_t v98 = *((void *)v21 + 45);
    uint64_t v97 = *((void *)v21 + 46);
    uint64_t v96 = *((void *)v21 + 47);
    uint64_t v95 = *((void *)v21 + 48);
    uint64_t v94 = *((void *)v21 + 49);
    uint64_t v93 = *((void *)v21 + 50);
    uint64_t v92 = *((void *)v21 + 51);
    uint64_t v91 = *((void *)v21 + 52);
    uint64_t v90 = *((void *)v21 + 53);
    uint64_t v89 = *((void *)v21 + 54);
    uint64_t v88 = *((void *)v21 + 55);
    uint64_t v87 = *((void *)v21 + 56);
    uint64_t v86 = *((void *)v21 + 57);
    uint64_t v85 = *((void *)v21 + 58);
    uint64_t v84 = *((void *)v21 + 59);
    uint64_t v83 = *((void *)v21 + 60);
    uint64_t v82 = *((void *)v21 + 61);
    uint64_t v81 = *((void *)v21 + 62);
    uint64_t v80 = *((void *)v21 + 63);
    uint64_t v79 = *((void *)v21 + 64);
    uint64_t v78 = *((void *)v21 + 65);
    uint64_t v77 = *((void *)v21 + 66);
    uint64_t v76 = *((void *)v21 + 67);
    long long v62 = a1;
    uint64_t v75 = *((void *)v21 + 68);
    uint64_t v74 = *((void *)v21 + 69);
    uint64_t v73 = *((void *)v21 + 70);
    uint64_t v72 = *((void *)v21 + 71);
    uint64_t v71 = *((void *)v21 + 72);
    uint64_t v70 = *((void *)v21 + 73);
    uint64_t v69 = *((void *)v21 + 74);
    uint64_t v68 = *((void *)v21 + 75);
    uint64_t v67 = *((void *)v21 + 76);
    uint64_t v66 = *((void *)v21 + 77);
    uint64_t v65 = *((void *)v21 + 78);
    uint64_t v35 = *((void *)v21 + 79);
    uint64_t v36 = *((void *)v21 + 80);
    uint64_t v37 = *((void *)v21 + 81);
    uint64_t v38 = *((void *)v21 + 82);
    uint64_t v39 = *((void *)v21 + 83);
    uint64_t v40 = *((void *)v21 + 84);
    uint64_t v41 = *((void *)v21 + 85);
    uint64_t v42 = *((void *)v21 + 86);
    uint64_t v43 = *((void *)v21 + 87);
    uint64_t v44 = *((void *)v21 + 88);
    uint64_t v45 = *((void *)v21 + 89);
    uint64_t v46 = *((void *)v21 + 90);
    uint64_t v47 = *((void *)v21 + 91);
    uint64_t v48 = *((void *)v21 + 92);
    uint64_t v49 = *((void *)v21 + 93);
    uint64_t v50 = *((void *)v21 + 94);
    uint64_t v51 = *((void *)v21 + 95);
    uint64_t v52 = *((void *)v21 + 96);
    uint64_t v53 = *((void *)v21 + 97);
    uint64_t v54 = *((void *)v21 + 98);
    uint64_t v55 = *((void *)v21 + 99);
    uint64_t v56 = *((void *)v21 + 100);
    uint64_t v57 = *((void *)v21 + 101);
    uint64_t v58 = *((void *)v21 + 102);
    uint64_t v59 = *((void *)v21 + 103);
    __int16 v60 = *((_WORD *)v21 + 418);
    int v61 = *((_DWORD *)v21 + 208);
    uint64_t v22 = *((void *)v21 + 8);
    uint64_t v23 = *(void *)v21;
    uint64_t v24 = *((void *)v21 + 1);
    uint64_t v25 = *((void *)v21 + 2);
    uint64_t v26 = *((void *)v21 + 3);
    uint64_t v27 = *((void *)v21 + 4);
    uint64_t v28 = *((void *)v21 + 5);
    uint64_t v29 = *((void *)v21 + 6);
    uint64_t v30 = *((void *)v21 + 7);
    sub_100098C10(*(void *)v21, v24, v25, v26, v27, v28, v29, v30, v22, v134, v133, v132, v131, v130, v129, v128, v127, v126, v125,
      v124,
      v123,
      v122,
      v121,
      v120);
    *(void *)uint64_t v20 = v23;
    *((void *)v20 + 1) = v24;
    *((void *)v20 + 2) = v25;
    *((void *)v20 + 3) = v26;
    *((void *)v20 + 4) = v27;
    *((void *)v20 + 5) = v28;
    *((void *)v20 + 6) = v29;
    *((void *)v20 + 7) = v30;
    *((void *)v20 + 8) = v22;
    objc_super v16 = v62;
    *((void *)v20 + 9) = v134;
    *((void *)v20 + 10) = v133;
    *((void *)v20 + 11) = v132;
    *((void *)v20 + 12) = v131;
    *((void *)v20 + 13) = v130;
    *((void *)v20 + 14) = v129;
    *((void *)v20 + 15) = v128;
    *((void *)v20 + 16) = v127;
    *((void *)v20 + 17) = v126;
    *((void *)v20 + 18) = v125;
    *((void *)v20 + 19) = v124;
    *((void *)v20 + 20) = v123;
    *((void *)v20 + 21) = v122;
    *((void *)v20 + 22) = v121;
    *((void *)v20 + 23) = v120;
    *((void *)v20 + 24) = v119;
    *((void *)v20 + 25) = v118;
    *((void *)v20 + 26) = v117;
    *((void *)v20 + 27) = v116;
    *((void *)v20 + 28) = v115;
    *((void *)v20 + 29) = v114;
    *((void *)v20 + 30) = v113;
    *((void *)v20 + 31) = v112;
    *((void *)v20 + 32) = v111;
    *((void *)v20 + 33) = v110;
    *((void *)v20 + 34) = v109;
    *((void *)v20 + 35) = v108;
    *((void *)v20 + 36) = v107;
    *((void *)v20 + 37) = v106;
    *((void *)v20 + 38) = v105;
    *((void *)v20 + 39) = v104;
    *((void *)v20 + 40) = v103;
    *((void *)v20 + 41) = v102;
    *((void *)v20 + 42) = v101;
    *((void *)v20 + 43) = v100;
    *((void *)v20 + 44) = v99;
    *((void *)v20 + 45) = v98;
    *((void *)v20 + 46) = v97;
    *((void *)v20 + 47) = v96;
    *((void *)v20 + 48) = v95;
    *((void *)v20 + 49) = v94;
    *((void *)v20 + 50) = v93;
    *((void *)v20 + 51) = v92;
    *((void *)v20 + 52) = v91;
    *((void *)v20 + 53) = v90;
    *((void *)v20 + 54) = v89;
    *((void *)v20 + 55) = v88;
    *((void *)v20 + 56) = v87;
    *((void *)v20 + 57) = v86;
    *((void *)v20 + 58) = v85;
    *((void *)v20 + 59) = v84;
    *((void *)v20 + 60) = v83;
    *((void *)v20 + 61) = v82;
    *((void *)v20 + 62) = v81;
    *((void *)v20 + 63) = v80;
    *((void *)v20 + 64) = v79;
    *((void *)v20 + 65) = v78;
    *((void *)v20 + 66) = v77;
    *((void *)v20 + 67) = v76;
    *((void *)v20 + 68) = v75;
    *((void *)v20 + 69) = v74;
    *((void *)v20 + 70) = v73;
    *((void *)v20 + 71) = v72;
    *((void *)v20 + 72) = v71;
    *((void *)v20 + 73) = v70;
    *((void *)v20 + 74) = v69;
    *((void *)v20 + 75) = v68;
    *((void *)v20 + 76) = v67;
    *((void *)v20 + 77) = v66;
    *((void *)v20 + 78) = v65;
    *((void *)v20 + 79) = v35;
    *((void *)v20 + 80) = v36;
    *((void *)v20 + 81) = v37;
    *((void *)v20 + 82) = v38;
    *((void *)v20 + 83) = v39;
    *((void *)v20 + 84) = v40;
    *((void *)v20 + 85) = v41;
    *((void *)v20 + 86) = v42;
    *((void *)v20 + 87) = v43;
    *((void *)v20 + 88) = v44;
    *((void *)v20 + 89) = v45;
    *((void *)v20 + 90) = v46;
    *((void *)v20 + 91) = v47;
    *((void *)v20 + 92) = v48;
    *((void *)v20 + 93) = v49;
    *((void *)v20 + 94) = v50;
    *((void *)v20 + 95) = v51;
    *((void *)v20 + 96) = v52;
    *((void *)v20 + 97) = v53;
    *((void *)v20 + 98) = v54;
    *((void *)v20 + 99) = v55;
    *((void *)v20 + 100) = v56;
    *((void *)v20 + 101) = v57;
    *((void *)v20 + 102) = v58;
    *((void *)v20 + 103) = v59;
    *((_WORD *)v20 + 418) = v60;
    *((_DWORD *)v20 + 208) = v61;
    *((unsigned char *)v62 + v135[8]) = *((unsigned char *)v63 + v135[8]);
    uint64_t v31 = *(int *)(a3 + 20);
    uint64_t v32 = *(void **)((char *)v63 + v31);
    *(void *)((char *)v62 + v31) = v32;
    id v33 = v32;
  }
  return v16;
}

void sub_1000A0BC4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for MeasurementHistoryItem();
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for MeasurementCapture();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v5, v7);
    v8(v5 + *(int *)(v6 + 20), v7);
  }
  id v9 = (uint64_t *)(a1 + *(int *)(v4 + 28));
  sub_100027F20(*v9, v9[1], v9[2], v9[3], v9[4], v9[5], v9[6], v9[7], v9[8], v9[9], v9[10], v9[11], v9[12], v9[13], v9[14], v9[15], v9[16], v9[17], v9[18],
    v9[19]);
  unint64_t v10 = *(void **)(a1 + *(int *)(a2 + 20));
}

void *sub_1000A0E94(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v132 = (int *)type metadata accessor for MeasurementHistoryItem();
  uint64_t v7 = v132[6];
  uint64_t v107 = a1;
  uint64_t v8 = (char *)a1 + v7;
  id v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for MeasurementCapture();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100012894((uint64_t *)&unk_1004CE670);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v8, v9, v14);
    v15(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v16 = v132[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v59 = a2;
  uint64_t v130 = *((void *)v18 + 10);
  uint64_t v131 = *((void *)v18 + 9);
  uint64_t v128 = *((void *)v18 + 12);
  uint64_t v129 = *((void *)v18 + 11);
  uint64_t v126 = *((void *)v18 + 14);
  uint64_t v127 = *((void *)v18 + 13);
  uint64_t v124 = *((void *)v18 + 16);
  uint64_t v125 = *((void *)v18 + 15);
  uint64_t v122 = *((void *)v18 + 18);
  uint64_t v123 = *((void *)v18 + 17);
  uint64_t v120 = *((void *)v18 + 20);
  uint64_t v121 = *((void *)v18 + 19);
  uint64_t v118 = *((void *)v18 + 22);
  uint64_t v119 = *((void *)v18 + 21);
  uint64_t v116 = *((void *)v18 + 24);
  uint64_t v117 = *((void *)v18 + 23);
  uint64_t v114 = *((void *)v18 + 26);
  uint64_t v115 = *((void *)v18 + 25);
  uint64_t v112 = *((void *)v18 + 28);
  uint64_t v113 = *((void *)v18 + 27);
  uint64_t v111 = *((void *)v18 + 29);
  uint64_t v110 = *((void *)v18 + 30);
  uint64_t v109 = *((void *)v18 + 31);
  uint64_t v108 = *((void *)v18 + 32);
  uint64_t v106 = *((void *)v18 + 33);
  uint64_t v105 = *((void *)v18 + 34);
  uint64_t v104 = *((void *)v18 + 35);
  uint64_t v103 = *((void *)v18 + 36);
  uint64_t v102 = *((void *)v18 + 37);
  uint64_t v101 = *((void *)v18 + 38);
  uint64_t v100 = *((void *)v18 + 39);
  uint64_t v99 = *((void *)v18 + 40);
  uint64_t v98 = *((void *)v18 + 41);
  uint64_t v97 = *((void *)v18 + 42);
  uint64_t v96 = *((void *)v18 + 43);
  uint64_t v95 = *((void *)v18 + 44);
  uint64_t v94 = *((void *)v18 + 45);
  uint64_t v93 = *((void *)v18 + 46);
  uint64_t v92 = *((void *)v18 + 47);
  uint64_t v91 = *((void *)v18 + 48);
  uint64_t v90 = *((void *)v18 + 49);
  uint64_t v89 = *((void *)v18 + 50);
  uint64_t v88 = *((void *)v18 + 51);
  uint64_t v87 = *((void *)v18 + 52);
  uint64_t v86 = *((void *)v18 + 53);
  uint64_t v85 = *((void *)v18 + 54);
  uint64_t v84 = *((void *)v18 + 55);
  uint64_t v83 = *((void *)v18 + 56);
  uint64_t v82 = *((void *)v18 + 57);
  uint64_t v81 = *((void *)v18 + 58);
  uint64_t v80 = *((void *)v18 + 59);
  uint64_t v79 = *((void *)v18 + 60);
  uint64_t v78 = *((void *)v18 + 61);
  uint64_t v77 = *((void *)v18 + 62);
  uint64_t v76 = *((void *)v18 + 63);
  uint64_t v75 = *((void *)v18 + 64);
  uint64_t v74 = *((void *)v18 + 65);
  uint64_t v73 = *((void *)v18 + 66);
  uint64_t v72 = *((void *)v18 + 67);
  uint64_t v71 = *((void *)v18 + 68);
  uint64_t v70 = *((void *)v18 + 69);
  uint64_t v69 = *((void *)v18 + 70);
  uint64_t v68 = *((void *)v18 + 71);
  uint64_t v67 = *((void *)v18 + 72);
  uint64_t v66 = *((void *)v18 + 73);
  uint64_t v65 = *((void *)v18 + 74);
  uint64_t v64 = *((void *)v18 + 75);
  uint64_t v63 = *((void *)v18 + 76);
  uint64_t v62 = *((void *)v18 + 77);
  uint64_t v61 = *((void *)v18 + 78);
  uint64_t v32 = *((void *)v18 + 79);
  uint64_t v33 = *((void *)v18 + 80);
  uint64_t v34 = *((void *)v18 + 81);
  uint64_t v35 = *((void *)v18 + 82);
  uint64_t v36 = *((void *)v18 + 83);
  uint64_t v37 = *((void *)v18 + 84);
  uint64_t v38 = *((void *)v18 + 85);
  uint64_t v39 = *((void *)v18 + 86);
  uint64_t v40 = *((void *)v18 + 87);
  uint64_t v41 = *((void *)v18 + 88);
  uint64_t v42 = *((void *)v18 + 89);
  uint64_t v43 = *((void *)v18 + 90);
  uint64_t v44 = *((void *)v18 + 91);
  uint64_t v45 = *((void *)v18 + 92);
  uint64_t v46 = *((void *)v18 + 93);
  uint64_t v47 = *((void *)v18 + 94);
  uint64_t v48 = *((void *)v18 + 95);
  uint64_t v49 = *((void *)v18 + 96);
  uint64_t v50 = *((void *)v18 + 97);
  uint64_t v51 = *((void *)v18 + 98);
  uint64_t v52 = *((void *)v18 + 99);
  uint64_t v53 = *((void *)v18 + 100);
  uint64_t v54 = *((void *)v18 + 101);
  uint64_t v55 = *((void *)v18 + 102);
  uint64_t v56 = *((void *)v18 + 103);
  __int16 v57 = *((_WORD *)v18 + 418);
  int v58 = *((_DWORD *)v18 + 208);
  uint64_t v19 = *((void *)v18 + 8);
  uint64_t v20 = *(void *)v18;
  uint64_t v21 = *((void *)v18 + 1);
  uint64_t v22 = *((void *)v18 + 2);
  uint64_t v23 = *((void *)v18 + 3);
  uint64_t v24 = *((void *)v18 + 4);
  uint64_t v25 = *((void *)v18 + 5);
  uint64_t v26 = *((void *)v18 + 6);
  uint64_t v27 = *((void *)v18 + 7);
  sub_100098C10(*(void *)v18, v21, v22, v23, v24, v25, v26, v27, v19, v131, v130, v129, v128, v127, v126, v125, v124, v123, v122,
    v121,
    v120,
    v119,
    v118,
    v117);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v21;
  *((void *)v17 + 2) = v22;
  *((void *)v17 + 3) = v23;
  *((void *)v17 + 4) = v24;
  *((void *)v17 + 5) = v25;
  *((void *)v17 + 6) = v26;
  *((void *)v17 + 7) = v27;
  *((void *)v17 + 8) = v19;
  *((void *)v17 + 9) = v131;
  *((void *)v17 + 10) = v130;
  *((void *)v17 + 11) = v129;
  *((void *)v17 + 12) = v128;
  *((void *)v17 + 13) = v127;
  *((void *)v17 + 14) = v126;
  *((void *)v17 + 15) = v125;
  *((void *)v17 + 16) = v124;
  *((void *)v17 + 17) = v123;
  *((void *)v17 + 18) = v122;
  *((void *)v17 + 19) = v121;
  *((void *)v17 + 20) = v120;
  *((void *)v17 + 21) = v119;
  *((void *)v17 + 22) = v118;
  *((void *)v17 + 23) = v117;
  *((void *)v17 + 24) = v116;
  *((void *)v17 + 25) = v115;
  *((void *)v17 + 26) = v114;
  *((void *)v17 + 27) = v113;
  *((void *)v17 + 28) = v112;
  *((void *)v17 + 29) = v111;
  *((void *)v17 + 30) = v110;
  *((void *)v17 + 31) = v109;
  *((void *)v17 + 32) = v108;
  *((void *)v17 + 33) = v106;
  *((void *)v17 + 34) = v105;
  *((void *)v17 + 35) = v104;
  *((void *)v17 + 36) = v103;
  *((void *)v17 + 37) = v102;
  *((void *)v17 + 38) = v101;
  *((void *)v17 + 39) = v100;
  *((void *)v17 + 40) = v99;
  *((void *)v17 + 41) = v98;
  *((void *)v17 + 42) = v97;
  *((void *)v17 + 43) = v96;
  *((void *)v17 + 44) = v95;
  *((void *)v17 + 45) = v94;
  *((void *)v17 + 46) = v93;
  *((void *)v17 + 47) = v92;
  *((void *)v17 + 48) = v91;
  *((void *)v17 + 49) = v90;
  *((void *)v17 + 50) = v89;
  *((void *)v17 + 51) = v88;
  *((void *)v17 + 52) = v87;
  *((void *)v17 + 53) = v86;
  *((void *)v17 + 54) = v85;
  *((void *)v17 + 55) = v84;
  *((void *)v17 + 56) = v83;
  *((void *)v17 + 57) = v82;
  *((void *)v17 + 58) = v81;
  *((void *)v17 + 59) = v80;
  *((void *)v17 + 60) = v79;
  *((void *)v17 + 61) = v78;
  *((void *)v17 + 62) = v77;
  *((void *)v17 + 63) = v76;
  *((void *)v17 + 64) = v75;
  *((void *)v17 + 65) = v74;
  *((void *)v17 + 66) = v73;
  *((void *)v17 + 67) = v72;
  *((void *)v17 + 68) = v71;
  *((void *)v17 + 69) = v70;
  *((void *)v17 + 70) = v69;
  *((void *)v17 + 71) = v68;
  *((void *)v17 + 72) = v67;
  *((void *)v17 + 73) = v66;
  *((void *)v17 + 74) = v65;
  *((void *)v17 + 75) = v64;
  *((void *)v17 + 76) = v63;
  *((void *)v17 + 77) = v62;
  *((void *)v17 + 78) = v61;
  *((void *)v17 + 79) = v32;
  *((void *)v17 + 80) = v33;
  *((void *)v17 + 81) = v34;
  *((void *)v17 + 82) = v35;
  *((void *)v17 + 83) = v36;
  *((void *)v17 + 84) = v37;
  *((void *)v17 + 85) = v38;
  *((void *)v17 + 86) = v39;
  *((void *)v17 + 87) = v40;
  *((void *)v17 + 88) = v41;
  *((void *)v17 + 89) = v42;
  *((void *)v17 + 90) = v43;
  *((void *)v17 + 91) = v44;
  *((void *)v17 + 92) = v45;
  *((void *)v17 + 93) = v46;
  *((void *)v17 + 94) = v47;
  *((void *)v17 + 95) = v48;
  *((void *)v17 + 96) = v49;
  *((void *)v17 + 97) = v50;
  *((void *)v17 + 98) = v51;
  *((void *)v17 + 99) = v52;
  *((void *)v17 + 100) = v53;
  *((void *)v17 + 101) = v54;
  *((void *)v17 + 102) = v55;
  *((void *)v17 + 103) = v56;
  *((_WORD *)v17 + 418) = v57;
  *((_DWORD *)v17 + 208) = v58;
  *((unsigned char *)v107 + v132[8]) = *((unsigned char *)v59 + v132[8]);
  uint64_t v28 = *(int *)(a3 + 20);
  uint64_t v29 = *(void **)((char *)v59 + v28);
  *(void *)((char *)v107 + v28) = v29;
  id v30 = v29;
  return v107;
}

void *sub_1000A18D0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for MeasurementHistoryItem();
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for MeasurementCapture();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v42 = type metadata accessor for URL();
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 24);
      v43(v7, v8, v42);
      v43(&v7[*(int *)(v9 + 20)], &v8[*(int *)(v9 + 20)], v42);
      goto LABEL_7;
    }
    sub_10009DA74((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MeasurementCapture);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v16 = sub_100012894((uint64_t *)&unk_1004CE670);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(v7, v8, v14);
  v15(&v7[*(int *)(v9 + 20)], &v8[*(int *)(v9 + 20)], v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v17 = *(int *)(v5 + 28);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v67 = v5;
  uint64_t v66 = a2;
  uint64_t v20 = *((void *)v19 + 6);
  uint64_t v142 = *((void *)v19 + 8);
  uint64_t v140 = *((void *)v19 + 9);
  uint64_t v138 = *((void *)v19 + 10);
  uint64_t v136 = *((void *)v19 + 11);
  uint64_t v135 = *((void *)v19 + 12);
  uint64_t v134 = *((void *)v19 + 13);
  uint64_t v133 = *((void *)v19 + 14);
  uint64_t v132 = *((void *)v19 + 15);
  uint64_t v131 = *((void *)v19 + 16);
  uint64_t v130 = *((void *)v19 + 17);
  uint64_t v129 = *((void *)v19 + 18);
  uint64_t v128 = *((void *)v19 + 19);
  uint64_t v127 = *((void *)v19 + 20);
  uint64_t v126 = *((void *)v19 + 21);
  uint64_t v125 = *((void *)v19 + 22);
  uint64_t v124 = *((void *)v19 + 23);
  uint64_t v123 = *((void *)v19 + 24);
  uint64_t v122 = *((void *)v19 + 25);
  uint64_t v121 = *((void *)v19 + 26);
  uint64_t v120 = *((void *)v19 + 27);
  uint64_t v119 = *((void *)v19 + 28);
  uint64_t v118 = *((void *)v19 + 29);
  uint64_t v117 = *((void *)v19 + 30);
  uint64_t v116 = *((void *)v19 + 31);
  uint64_t v115 = *((void *)v19 + 32);
  uint64_t v114 = *((void *)v19 + 33);
  uint64_t v113 = *((void *)v19 + 34);
  uint64_t v112 = *((void *)v19 + 35);
  uint64_t v111 = *((void *)v19 + 36);
  uint64_t v110 = *((void *)v19 + 37);
  uint64_t v109 = *((void *)v19 + 38);
  uint64_t v108 = *((void *)v19 + 39);
  uint64_t v107 = *((void *)v19 + 40);
  uint64_t v106 = *((void *)v19 + 41);
  uint64_t v105 = *((void *)v19 + 42);
  uint64_t v65 = a1;
  uint64_t v104 = *((void *)v19 + 43);
  uint64_t v103 = *((void *)v19 + 44);
  uint64_t v102 = *((void *)v19 + 45);
  uint64_t v101 = *((void *)v19 + 46);
  uint64_t v100 = *((void *)v19 + 47);
  uint64_t v99 = *((void *)v19 + 48);
  uint64_t v98 = *((void *)v19 + 49);
  uint64_t v97 = *((void *)v19 + 50);
  uint64_t v96 = *((void *)v19 + 51);
  uint64_t v95 = *((void *)v19 + 52);
  uint64_t v94 = *((void *)v19 + 53);
  uint64_t v93 = *((void *)v19 + 54);
  uint64_t v92 = *((void *)v19 + 55);
  uint64_t v91 = *((void *)v19 + 56);
  uint64_t v90 = *((void *)v19 + 57);
  uint64_t v89 = *((void *)v19 + 58);
  uint64_t v88 = *((void *)v19 + 59);
  uint64_t v87 = *((void *)v19 + 60);
  uint64_t v86 = *((void *)v19 + 61);
  uint64_t v85 = *((void *)v19 + 62);
  uint64_t v84 = *((void *)v19 + 63);
  uint64_t v83 = *((void *)v19 + 64);
  uint64_t v82 = *((void *)v19 + 65);
  uint64_t v81 = *((void *)v19 + 66);
  uint64_t v80 = *((void *)v19 + 67);
  uint64_t v79 = *((void *)v19 + 68);
  uint64_t v78 = *((void *)v19 + 69);
  uint64_t v77 = *((void *)v19 + 70);
  uint64_t v76 = *((void *)v19 + 71);
  uint64_t v75 = *((void *)v19 + 72);
  uint64_t v74 = *((void *)v19 + 73);
  uint64_t v73 = *((void *)v19 + 74);
  uint64_t v72 = *((void *)v19 + 75);
  uint64_t v71 = *((void *)v19 + 76);
  uint64_t v70 = *((void *)v19 + 77);
  uint64_t v69 = *((void *)v19 + 78);
  uint64_t v46 = *((void *)v19 + 79);
  long long v47 = *((_OWORD *)v19 + 40);
  long long v48 = *((_OWORD *)v19 + 41);
  long long v49 = *((_OWORD *)v19 + 42);
  long long v50 = *((_OWORD *)v19 + 43);
  uint64_t v21 = *((void *)v19 + 88);
  uint64_t v51 = *((void *)v19 + 89);
  long long v52 = *((_OWORD *)v19 + 45);
  long long v53 = *((_OWORD *)v19 + 46);
  long long v54 = *((_OWORD *)v19 + 47);
  uint64_t v55 = *((void *)v19 + 96);
  uint64_t v56 = *((void *)v19 + 97);
  uint64_t v57 = *((void *)v19 + 98);
  uint64_t v58 = *((void *)v19 + 99);
  uint64_t v59 = *((void *)v19 + 100);
  uint64_t v60 = *((void *)v19 + 101);
  uint64_t v61 = *((void *)v19 + 102);
  uint64_t v62 = *((void *)v19 + 103);
  __int16 v63 = *((_WORD *)v19 + 418);
  int v64 = *((_DWORD *)v19 + 208);
  uint64_t v22 = *(void *)v19;
  uint64_t v23 = *((void *)v19 + 1);
  uint64_t v24 = *((void *)v19 + 2);
  uint64_t v25 = *((void *)v19 + 3);
  uint64_t v26 = *((void *)v19 + 4);
  uint64_t v27 = *((void *)v19 + 5);
  uint64_t v28 = *((void *)v19 + 7);
  sub_100098C10(*(void *)v19, v23, v24, v25, v26, v27, v20, v28, v142, v140, v138, v136, v135, v134, v133, v132, v131, v130, v129,
    v128,
    v127,
    v126,
    v125,
    v124);
  uint64_t v29 = *(void *)v18;
  uint64_t v30 = *((void *)v18 + 1);
  *(void *)uint64_t v18 = v22;
  *((void *)v18 + 1) = v23;
  uint64_t v31 = *((void *)v18 + 2);
  uint64_t v32 = *((void *)v18 + 3);
  *((void *)v18 + 2) = v24;
  *((void *)v18 + 3) = v25;
  uint64_t v33 = *((void *)v18 + 4);
  uint64_t v34 = *((void *)v18 + 5);
  *((void *)v18 + 4) = v26;
  *((void *)v18 + 5) = v27;
  uint64_t v35 = *((void *)v18 + 6);
  uint64_t v36 = *((void *)v18 + 7);
  *((void *)v18 + 6) = v20;
  *((void *)v18 + 7) = v28;
  long long v44 = *((_OWORD *)v18 + 5);
  long long v45 = *((_OWORD *)v18 + 4);
  *((void *)v18 + 8) = v142;
  *((void *)v18 + 9) = v140;
  *((void *)v18 + 10) = v138;
  *((void *)v18 + 11) = v136;
  long long v141 = *((_OWORD *)v18 + 7);
  long long v143 = *((_OWORD *)v18 + 6);
  *((void *)v18 + 12) = v135;
  *((void *)v18 + 13) = v134;
  *((void *)v18 + 14) = v133;
  *((void *)v18 + 15) = v132;
  long long v137 = *((_OWORD *)v18 + 9);
  long long v139 = *((_OWORD *)v18 + 8);
  *((void *)v18 + 16) = v131;
  *((void *)v18 + 17) = v130;
  *((void *)v18 + 18) = v129;
  *((void *)v18 + 19) = v128;
  *((void *)v18 + 20) = v127;
  *((void *)v18 + 21) = v126;
  *((void *)v18 + 22) = v125;
  *((void *)v18 + 23) = v124;
  *((void *)v18 + 24) = v123;
  *((void *)v18 + 25) = v122;
  *((void *)v18 + 26) = v121;
  *((void *)v18 + 27) = v120;
  *((void *)v18 + 28) = v119;
  *((void *)v18 + 29) = v118;
  *((void *)v18 + 30) = v117;
  *((void *)v18 + 31) = v116;
  *((void *)v18 + 32) = v115;
  *((void *)v18 + 33) = v114;
  *((void *)v18 + 34) = v113;
  *((void *)v18 + 35) = v112;
  *((void *)v18 + 36) = v111;
  *((void *)v18 + 37) = v110;
  *((void *)v18 + 38) = v109;
  *((void *)v18 + 39) = v108;
  *((void *)v18 + 40) = v107;
  *((void *)v18 + 41) = v106;
  *((void *)v18 + 42) = v105;
  *((void *)v18 + 43) = v104;
  *((void *)v18 + 44) = v103;
  *((void *)v18 + 45) = v102;
  *((void *)v18 + 46) = v101;
  *((void *)v18 + 47) = v100;
  *((void *)v18 + 48) = v99;
  *((void *)v18 + 49) = v98;
  *((void *)v18 + 50) = v97;
  *((void *)v18 + 51) = v96;
  *((void *)v18 + 52) = v95;
  *((void *)v18 + 53) = v94;
  *((void *)v18 + 54) = v93;
  *((void *)v18 + 55) = v92;
  *((void *)v18 + 56) = v91;
  *((void *)v18 + 57) = v90;
  *((void *)v18 + 58) = v89;
  *((void *)v18 + 59) = v88;
  *((void *)v18 + 60) = v87;
  *((void *)v18 + 61) = v86;
  *((void *)v18 + 62) = v85;
  *((void *)v18 + 63) = v84;
  *((void *)v18 + 64) = v83;
  *((void *)v18 + 65) = v82;
  *((void *)v18 + 66) = v81;
  *((void *)v18 + 67) = v80;
  *((void *)v18 + 68) = v79;
  *((void *)v18 + 69) = v78;
  *((void *)v18 + 70) = v77;
  *((void *)v18 + 71) = v76;
  *((void *)v18 + 72) = v75;
  *((void *)v18 + 73) = v74;
  *((void *)v18 + 74) = v73;
  *((void *)v18 + 75) = v72;
  *((void *)v18 + 76) = v71;
  *((void *)v18 + 77) = v70;
  *((void *)v18 + 78) = v69;
  *((void *)v18 + 79) = v46;
  *((_OWORD *)v18 + 40) = v47;
  *((_OWORD *)v18 + 41) = v48;
  *((_OWORD *)v18 + 42) = v49;
  *((_OWORD *)v18 + 43) = v50;
  *((void *)v18 + 88) = v21;
  *((void *)v18 + 89) = v51;
  *((_OWORD *)v18 + 45) = v52;
  *((_OWORD *)v18 + 46) = v53;
  *((_OWORD *)v18 + 47) = v54;
  *((void *)v18 + 96) = v55;
  *((void *)v18 + 97) = v56;
  *((void *)v18 + 98) = v57;
  *((void *)v18 + 99) = v58;
  *((void *)v18 + 100) = v59;
  *((void *)v18 + 101) = v60;
  *((void *)v18 + 102) = v61;
  *((void *)v18 + 103) = v62;
  *((_WORD *)v18 + 418) = v63;
  *((_DWORD *)v18 + 208) = v64;
  sub_100027F20(v29, v30, v31, v32, v33, v34, v35, v36, v45, *((uint64_t *)&v45 + 1), v44, *((uint64_t *)&v44 + 1), v143, *((uint64_t *)&v143 + 1), v141, *((uint64_t *)&v141 + 1), v139, *((uint64_t *)&v139 + 1), v137,
    *((uint64_t *)&v137 + 1));
  *((unsigned char *)v65 + *(int *)(v67 + 32)) = *((unsigned char *)v66 + *(int *)(v67 + 32));
  uint64_t v37 = *(int *)(a3 + 20);
  uint64_t v38 = *(void **)((char *)v65 + v37);
  uint64_t v39 = *(void **)((char *)v66 + v37);
  *(void *)((char *)v65 + v37) = v39;
  id v40 = v39;

  return v65;
}

_OWORD *sub_1000A2588(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for MeasurementHistoryItem();
  uint64_t v8 = v7[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for MeasurementCapture();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100012894((uint64_t *)&unk_1004CE670);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
    v15(v9, v10, v14);
    v15(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  memcpy((char *)a1 + v7[7], (char *)a2 + v7[7], 0x346uLL);
  *((unsigned char *)a1 + v7[8]) = *((unsigned char *)a2 + v7[8]);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1000A2738(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for MeasurementHistoryItem();
  uint64_t v8 = v7[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for MeasurementCapture();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v76 = type metadata accessor for URL();
      uint64_t v77 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 40);
      v77(v9, v10, v76);
      v77(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v76);
      goto LABEL_7;
    }
    sub_10009DA74((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MeasurementCapture);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v18 = sub_100012894((uint64_t *)&unk_1004CE670);
    memcpy(v9, v10, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
  v17(v9, v10, v16);
  v17(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v19 = v7[7];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)v20;
  uint64_t v23 = *((void *)v20 + 1);
  uint64_t v24 = *((void *)v20 + 2);
  uint64_t v25 = *((void *)v20 + 3);
  uint64_t v26 = *((void *)v20 + 4);
  uint64_t v27 = *((void *)v20 + 5);
  uint64_t v28 = *((void *)v20 + 6);
  uint64_t v29 = *((void *)v20 + 7);
  long long v82 = *((_OWORD *)v20 + 5);
  long long v83 = *((_OWORD *)v20 + 4);
  long long v80 = *((_OWORD *)v20 + 7);
  long long v81 = *((_OWORD *)v20 + 6);
  long long v78 = *((_OWORD *)v20 + 9);
  long long v79 = *((_OWORD *)v20 + 8);
  long long v30 = *((_OWORD *)v21 + 1);
  long long v31 = *((_OWORD *)v21 + 2);
  long long v32 = *((_OWORD *)v21 + 3);
  long long v33 = *((_OWORD *)v21 + 4);
  long long v34 = *((_OWORD *)v21 + 5);
  long long v35 = *((_OWORD *)v21 + 6);
  long long v36 = *((_OWORD *)v21 + 7);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v30;
  long long v37 = *((_OWORD *)v21 + 8);
  long long v38 = *((_OWORD *)v21 + 9);
  *((_OWORD *)v20 + 2) = v31;
  *((_OWORD *)v20 + 3) = v32;
  long long v39 = *((_OWORD *)v21 + 10);
  long long v40 = *((_OWORD *)v21 + 11);
  *((_OWORD *)v20 + 4) = v33;
  *((_OWORD *)v20 + 5) = v34;
  long long v41 = *((_OWORD *)v21 + 12);
  long long v42 = *((_OWORD *)v21 + 13);
  *((_OWORD *)v20 + 6) = v35;
  *((_OWORD *)v20 + 7) = v36;
  long long v43 = *((_OWORD *)v21 + 14);
  long long v44 = *((_OWORD *)v21 + 15);
  *((_OWORD *)v20 + 8) = v37;
  *((_OWORD *)v20 + 9) = v38;
  long long v45 = *((_OWORD *)v21 + 16);
  long long v46 = *((_OWORD *)v21 + 17);
  *((_OWORD *)v20 + 10) = v39;
  *((_OWORD *)v20 + 11) = v40;
  long long v47 = *((_OWORD *)v21 + 18);
  long long v48 = *((_OWORD *)v21 + 19);
  *((_OWORD *)v20 + 12) = v41;
  *((_OWORD *)v20 + 13) = v42;
  long long v49 = *((_OWORD *)v21 + 20);
  long long v50 = *((_OWORD *)v21 + 21);
  *((_OWORD *)v20 + 14) = v43;
  *((_OWORD *)v20 + 15) = v44;
  long long v51 = *((_OWORD *)v21 + 22);
  long long v52 = *((_OWORD *)v21 + 23);
  *((_OWORD *)v20 + 16) = v45;
  *((_OWORD *)v20 + 17) = v46;
  long long v53 = *((_OWORD *)v21 + 24);
  long long v54 = *((_OWORD *)v21 + 25);
  *((_OWORD *)v20 + 18) = v47;
  *((_OWORD *)v20 + 19) = v48;
  long long v55 = *((_OWORD *)v21 + 26);
  long long v56 = *((_OWORD *)v21 + 27);
  *((_OWORD *)v20 + 20) = v49;
  *((_OWORD *)v20 + 21) = v50;
  long long v57 = *((_OWORD *)v21 + 28);
  long long v58 = *((_OWORD *)v21 + 29);
  *((_OWORD *)v20 + 22) = v51;
  *((_OWORD *)v20 + 23) = v52;
  long long v59 = *((_OWORD *)v21 + 30);
  long long v60 = *((_OWORD *)v21 + 31);
  *((_OWORD *)v20 + 24) = v53;
  *((_OWORD *)v20 + 25) = v54;
  long long v61 = *((_OWORD *)v21 + 32);
  long long v62 = *((_OWORD *)v21 + 33);
  *((_OWORD *)v20 + 26) = v55;
  *((_OWORD *)v20 + 27) = v56;
  *((_OWORD *)v20 + 28) = v57;
  *((_OWORD *)v20 + 29) = v58;
  *((_OWORD *)v20 + 30) = v59;
  *((_OWORD *)v20 + 31) = v60;
  *((_OWORD *)v20 + 32) = v61;
  *((_OWORD *)v20 + 33) = v62;
  long long v63 = *((_OWORD *)v21 + 35);
  *((_OWORD *)v20 + 34) = *((_OWORD *)v21 + 34);
  *((_OWORD *)v20 + 35) = v63;
  long long v64 = *((_OWORD *)v21 + 37);
  *((_OWORD *)v20 + 36) = *((_OWORD *)v21 + 36);
  *((_OWORD *)v20 + 37) = v64;
  long long v65 = *((_OWORD *)v21 + 39);
  *((_OWORD *)v20 + 38) = *((_OWORD *)v21 + 38);
  *((_OWORD *)v20 + 39) = v65;
  long long v66 = *((_OWORD *)v21 + 41);
  *((_OWORD *)v20 + 40) = *((_OWORD *)v21 + 40);
  *((_OWORD *)v20 + 41) = v66;
  long long v67 = *((_OWORD *)v21 + 43);
  *((_OWORD *)v20 + 42) = *((_OWORD *)v21 + 42);
  *((_OWORD *)v20 + 43) = v67;
  long long v68 = *((_OWORD *)v21 + 45);
  *((_OWORD *)v20 + 44) = *((_OWORD *)v21 + 44);
  *((_OWORD *)v20 + 45) = v68;
  long long v69 = *((_OWORD *)v21 + 47);
  *((_OWORD *)v20 + 46) = *((_OWORD *)v21 + 46);
  *((_OWORD *)v20 + 47) = v69;
  long long v70 = *((_OWORD *)v21 + 49);
  *((_OWORD *)v20 + 48) = *((_OWORD *)v21 + 48);
  *((_OWORD *)v20 + 49) = v70;
  long long v71 = *((_OWORD *)v21 + 51);
  *((_OWORD *)v20 + 50) = *((_OWORD *)v21 + 50);
  *((_OWORD *)v20 + 51) = v71;
  int v72 = *((_DWORD *)v21 + 208);
  *((_WORD *)v20 + 418) = *((_WORD *)v21 + 418);
  *((_DWORD *)v20 + 208) = v72;
  sub_100027F20(v22, v23, v24, v25, v26, v27, v28, v29, v83, *((uint64_t *)&v83 + 1), v82, *((uint64_t *)&v82 + 1), v81, *((uint64_t *)&v81 + 1), v80, *((uint64_t *)&v80 + 1), v79, *((uint64_t *)&v79 + 1), v78,
    *((uint64_t *)&v78 + 1));
  *((unsigned char *)a1 + v7[8]) = *((unsigned char *)a2 + v7[8]);
  uint64_t v73 = *(int *)(a3 + 20);
  uint64_t v74 = *(void **)((char *)a1 + v73);
  *(void *)((char *)a1 + v73) = *(void *)((char *)a2 + v73);

  return a1;
}

uint64_t sub_1000A2C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A2C4C);
}

uint64_t sub_1000A2C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MeasurementHistoryItem();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1000A2D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A2D2C);
}

uint64_t sub_1000A2D2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MeasurementHistoryItem();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for SpatialPlattersHistoryItem()
{
  uint64_t result = qword_1004C8338;
  if (!qword_1004C8338) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A2E34()
{
  uint64_t result = type metadata accessor for MeasurementHistoryItem();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1000A2EC8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100012894((uint64_t *)&unk_1004CE670);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MeasurementCapture();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for SpatialPlattersHistoryItem() + 20);
  *(void *)(a2 + v11) = 0;
  sub_1000297B8(a1, a2);
  uint64_t v12 = type metadata accessor for MeasurementHistoryItem();
  sub_1000A30EC(a1 + *(int *)(v12 + 24), (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10009DA74(a1, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
    sub_1000A3154((uint64_t)v6);
    id v13 = 0;
  }
  else
  {
    sub_10004019C((uint64_t)v6, (uint64_t)v10);
    URL.path.getter();
    id v14 = objc_allocWithZone((Class)UIImage);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v13 = [v14 initWithContentsOfFile:v15];

    sub_10009DA74(a1, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
    sub_10009DA74((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MeasurementCapture);
  }

  *(void *)(a2 + v11) = v13;
}

uint64_t sub_1000A30EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894((uint64_t *)&unk_1004CE670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A3154(uint64_t a1)
{
  uint64_t v2 = sub_100012894((uint64_t *)&unk_1004CE670);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000A31B4()
{
  id v1 = [v0 layer];
  [v1 setShadowOffset:0.0, 4.0];

  id v2 = [v0 layer];
  [v2 setShadowPathIsBounds:1];

  id v3 = [v0 layer];
  if (qword_1004C2840 != -1) {
    swift_once();
  }
  [v3 setShadowRadius:*(double *)&qword_1004F7E70];

  id v4 = [v0 layer];
  id v5 = [self blackColor];
  id v6 = [v5 CGColor];

  [v4 setShadowColor:v6];
  id v7 = [v0 layer];
  LODWORD(v8) = 1039516303;
  [v7 setShadowOpacity:v8];

  id v9 = [v0 layer];
  [v9 setCornerCurve:kCACornerCurveContinuous];
}

uint64_t type metadata accessor for PlatterShadowView()
{
  return self;
}

uint64_t destroy for Frame()
{
  return swift_release();
}

uint64_t initializeWithCopy for Frame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x1E0uLL);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Frame(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  return a1;
}

void *initializeWithTake for Frame(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x200uLL);
}

uint64_t assignWithTake for Frame(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  long long v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  long long v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v9;
  long long v10 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v10;
  long long v11 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v11;
  long long v12 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v12;
  long long v13 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v13;
  long long v14 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v14;
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  long long v15 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v15;
  long long v16 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v16;
  long long v17 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for Frame(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 512)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Frame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 504) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 512) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 512) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Frame()
{
  return &type metadata for Frame;
}

uint64_t sub_1000A3850()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    id v2 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 112))();
    if (v2)
    {

      return (*(uint64_t (**)(void))(*(void *)v1 + 112))();
    }
  }
  if (qword_1004C2AF8 != -1) {
    swift_once();
  }
  _StringGuts.grow(_:)(62);
  v3._countAndFlagsBits = 0xD000000000000027;
  v3._object = (void *)0x80000001004212A0;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001004212D0;
  v5._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  sub_10004FB3C();
  v6._countAndFlagsBits = static NSThread.prettyPrintCallStack(toDepth:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  Log.error(_:isPrivate:)(v7, 0);
  swift_bridgeObjectRelease();
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 112))();
  }
  return 0;
}

uint64_t sub_1000A3A1C()
{
  uint64_t result = Contexts.UIKit.init()();
  qword_1004F8050 = result;
  return result;
}

id sub_1000A3A3C@<X0>(void *a1@<X8>)
{
  if (qword_1004C29F8 != -1) {
    swift_once();
  }
  id v2 = (void *)qword_1004F8050;
  *a1 = qword_1004F8050;

  return v2;
}

uint64_t sub_1000A3AA8(void *__src, const void *a2)
{
  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return sub_1000A3B7C((uint64_t)v4, (uint64_t)__dst) & 1;
}

unint64_t sub_1000A3B00(uint64_t a1)
{
  unint64_t result = sub_1000A3B28();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000A3B28()
{
  unint64_t result = qword_1004C83C0;
  if (!qword_1004C83C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C83C0);
  }
  return result;
}

uint64_t sub_1000A3B7C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (!v4) {
      goto LABEL_9;
    }
    sub_100012894(&qword_1004C6288);
    sub_100053000(a2);
    sub_100053000(a1);
    char v5 = static HashableWeakRef.== infix(_:_:)();
    sub_100016F7C(a2);
    sub_100016F7C(a1);
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
    memcpy(v8, (const void *)(a2 + 32), sizeof(v8));
    char v6 = static ComputedCameraProperties.__derived_struct_equals(_:_:)();
    return v6 & 1;
  }
  if (!v4)
  {
    sub_100053000(a2);
    goto LABEL_12;
  }
  sub_100016F7C(a1);
LABEL_9:
  char v6 = 0;
  return v6 & 1;
}

uint64_t sub_1000A3C80(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (uint64_t *)&v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005536C();
  uint64_t *v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  char v8 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v2 + 16);
  if (*(void *)(v9 + 16))
  {
    uint64_t v10 = sub_1000E21E0(a1);
    if (v11)
    {
      long long v12 = *(void (**)(uint64_t))(*(void *)(v9 + 56) + 24 * v10 + 8);
      uint64_t v13 = swift_retain();
      v12(v13);
      return swift_release();
    }
  }
  if (qword_1004C2AE0 != -1) {
    goto LABEL_8;
  }
LABEL_6:
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(60);
  v15._object = (void *)0x8000000100423AA0;
  v15._countAndFlagsBits = 0xD00000000000003ALL;
  String.append(_:)(v15);
  v16[15] = a1;
  _print_unlocked<A, B>(_:_:)();
  Log.error(_:isPrivate:)(v17, 0);
  return swift_bridgeObjectRelease();
}

void sub_1000A3EA4(void *a1@<X8>)
{
  *a1 = &off_100485760;
}

uint64_t sub_1000A3EB4()
{
  uint64_t v0 = 0;
  while (1)
  {
    uint64_t v3 = *((unsigned __int8 *)&off_1004854B0 + v0 + 32);
    if (*((unsigned char *)&off_1004854B0 + v0 + 32))
    {
      if (v3 == 1)
      {
        id v4 = [objc_allocWithZone((Class)UISelectionFeedbackGenerator) init];
        uint64_t v5 = sub_1000A44DC;
      }
      else
      {
        id v6 = [self lightConfiguration];
        id v4 = [objc_allocWithZone((Class)UISelectionFeedbackGenerator) initWithConfiguration:v6];

        uint64_t v5 = sub_1000A4504;
      }
    }
    else
    {
      id v4 = [objc_allocWithZone((Class)UIImpactFeedbackGenerator) initWithStyle:0];
      uint64_t v5 = sub_1000A44EC;
    }
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v4;
    id v8 = v4;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v5;
    *(void *)(v9 + 24) = v7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v12 = sub_1000E21E0(v3);
    uint64_t v13 = _swiftEmptyDictionarySingleton[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14)) {
      break;
    }
    char v16 = v11;
    if (_swiftEmptyDictionarySingleton[3] >= v15)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v11) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_1000D768C();
        if (v16) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      sub_1000D0488(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v17 = sub_1000E21E0(v3);
      if ((v16 & 1) != (v18 & 1)) {
        goto LABEL_23;
      }
      unint64_t v12 = v17;
      if (v16)
      {
LABEL_2:
        uint64_t v1 = _swiftEmptyDictionarySingleton[7] + 24 * v12;
        uint64_t v2 = *(void **)v1;
        swift_release();

        *(void *)uint64_t v1 = v8;
        *(void *)(v1 + 8) = sub_1000A44B4;
        *(void *)(v1 + 16) = v9;
        goto LABEL_3;
      }
    }
    _swiftEmptyDictionarySingleton[(v12 >> 6) + 8] |= 1 << v12;
    *(unsigned char *)(_swiftEmptyDictionarySingleton[6] + v12) = v3;
    uint64_t v19 = (void *)(_swiftEmptyDictionarySingleton[7] + 24 * v12);
    *uint64_t v19 = v8;
    v19[1] = sub_1000A44B4;
    v19[2] = v9;
    uint64_t v20 = _swiftEmptyDictionarySingleton[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_22;
    }
    _swiftEmptyDictionarySingleton[2] = v22;
LABEL_3:
    ++v0;
    swift_bridgeObjectRelease();
    if (v0 == 3)
    {
      uint64_t result = v24;
      *(void *)(v24 + 16) = _swiftEmptyDictionarySingleton;
      return result;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A419C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HapticFeedbackGenerator()
{
  return self;
}

uint64_t getEnumTagSinglePayload for InstrumentationMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HapticFeedbackGenerator.Type(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A4354);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HapticFeedbackGenerator.Type()
{
  return &type metadata for HapticFeedbackGenerator.Type;
}

unint64_t sub_1000A4390()
{
  unint64_t result = qword_1004C8468;
  if (!qword_1004C8468)
  {
    sub_100016EF4(&qword_1004C8470);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8468);
  }
  return result;
}

unint64_t sub_1000A43F0()
{
  unint64_t result = qword_1004C8478;
  if (!qword_1004C8478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8478);
  }
  return result;
}

uint64_t sub_1000A4444()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A447C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A44B4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

id sub_1000A44DC()
{
  return [*(id *)(v0 + 16) selectionChanged];
}

id sub_1000A44EC()
{
  return [*(id *)(v0 + 16) impactOccurred];
}

_WORD *initializeBufferWithCopyOfBuffer for InstrumentExecutionPriority.Request(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for InstrumentExecutionPriority.Request(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 65283 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65283 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65283;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65283;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65283;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InstrumentExecutionPriority.Request(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65283 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65283 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 253;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A4674);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstrumentExecutionPriority.Request()
{
  return &type metadata for InstrumentExecutionPriority.Request;
}

unsigned char *storeEnumTagSinglePayload for InstrumentExecutionPriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A4778);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstrumentExecutionPriority()
{
  return &type metadata for InstrumentExecutionPriority;
}

unint64_t sub_1000A47B4()
{
  unint64_t result = qword_1004C8480;
  if (!qword_1004C8480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8480);
  }
  return result;
}

id sub_1000A4808@<X0>(void *a1@<X8>)
{
  a1[3] = &_s8SceneKitVN;
  a1[4] = sub_100030ADC();
  if (qword_1004C2B80 != -1) {
    swift_once();
  }
  int v2 = (void *)qword_1004F83D0;
  *a1 = qword_1004F83D0;

  return v2;
}

uint64_t sub_1000A4888()
{
  return 3;
}

uint64_t sub_1000A4890(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

BOOL sub_1000A48C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_1000A48D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1000A48EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1000A4900(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

unint64_t sub_1000A4918@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &_s20EdgeDetectionContextVN;
  unint64_t result = sub_1000A494C();
  *(void *)(a1 + 32) = result;
  return result;
}

unint64_t sub_1000A494C()
{
  unint64_t result = qword_1004C8488;
  if (!qword_1004C8488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8488);
  }
  return result;
}

id sub_1000A49A0@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&_s8SceneKitVN;
  a1[4] = sub_100030ADC();
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  id result = (id)*((void *)&xmmword_1004F8000 + 1);
  if (*((void *)&xmmword_1004F8000 + 1))
  {
    id v3 = (id)*((void *)&xmmword_1004F8000 + 1);
    *a1 = Contexts.PrivateQueue.init(_:)();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SceneUpdate(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SceneUpdate(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *id result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A4B98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneUpdate()
{
  return &type metadata for SceneUpdate;
}

uint64_t destroy for UserInputs()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UserInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UserInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for UserInputs(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserInputs(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserInputs()
{
  return &type metadata for UserInputs;
}

unint64_t *initializeBufferWithCopyOfBuffer for MeasurementState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100078CF8(*a2);
  *a1 = v3;
  return a1;
}

void destroy for MeasurementState(unint64_t *a1)
{
}

unint64_t *assignWithCopy for MeasurementState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100078CF8(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_10001F780(v4);
  return a1;
}

unint64_t *assignWithTake for MeasurementState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_10001F780(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeasurementState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MeasurementState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)id result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)id result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000A4F70(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 == 3) {
    return (*a1 >> 3) + 3;
  }
  else {
    return v1;
  }
}

void *sub_1000A4F8C(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1000A4F9C(unint64_t *result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 3);
    unint64_t v3 = 0xC000000000000000;
  }
  *id result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for MeasurementState()
{
  return &type metadata for MeasurementState;
}

unint64_t sub_1000A4FD8(unint64_t result)
{
  uint64_t v2 = v1;
  unsigned __int8 v3 = result;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    id result = sub_1000E224C(result);
    if (v6) {
      uint64_t v5 = *(void *)(*(void *)(v4 + 56) + 8 * result);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  uint64_t v7 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0x8000000000000000;
    sub_1000D50D0(v7, v3, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 8) = v9;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000A5088()
{
  uint64_t result = Contexts.UIKit.init()();
  qword_1004F8058 = result;
  return result;
}

void sub_1000A50A8(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v2 = a2 - 3;
  if ((a2 - 3) >= 7u)
  {
    Hasher._combine(_:)(7uLL);
    unsigned __int8 v2 = a2;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1000A50F0(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  unsigned __int8 v2 = a1 - 3;
  if ((a1 - 3) >= 7u)
  {
    Hasher._combine(_:)(7uLL);
    unsigned __int8 v2 = a1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_1000A5158()
{
  return sub_1000A50F0(*v0);
}

void sub_1000A5160(uint64_t a1)
{
  sub_1000A50A8(a1, *v1);
}

Swift::Int sub_1000A5168()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  unsigned __int8 v2 = v1 - 3;
  if ((v1 - 3) >= 7)
  {
    Hasher._combine(_:)(7uLL);
    unsigned __int8 v2 = v1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double *sub_1000A51C8@<X0>(double **a1@<X8>)
{
  uint64_t result = sub_1000A5B8C();
  *a1 = result;
  return result;
}

BOOL sub_1000A51F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000A58BC(*a1, *a2);
}

double *sub_1000A51FC(uint64_t a1)
{
  unsigned __int8 v3 = sub_1000A5B8C();
  uint64_t v4 = *((void *)v3 + 2);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v7 = _swiftEmptyArrayStorage;
  do
  {
    unsigned __int8 v8 = *((unsigned char *)v3 + v5 + 32);
    if (*(void *)(v6 + 16) && (unint64_t v9 = sub_1000E224C(*((unsigned char *)v3 + v5 + 32)), (v10 & 1) != 0)) {
      uint64_t v11 = *(void *)(*(void *)(v6 + 56) + 8 * v9);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_1000A5C28(a1, (uint64_t)&v18);
    if (v18)
    {
      uint64_t v12 = v19;
      if (*(void *)(v19 + 16) && (unint64_t v13 = sub_1000E224C(v8), (v14 & 1) != 0))
      {
        if (*(void *)(*(void *)(v12 + 56) + 8 * v13) >= v11) {
          goto LABEL_4;
        }
      }
      else if (v11 <= 0)
      {
        goto LABEL_4;
      }
    }
    else if (v11 < 1)
    {
      goto LABEL_4;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = sub_10006DF74(0, *((void *)v7 + 2) + 1, 1, (uint64_t)v7);
    }
    unint64_t v16 = *((void *)v7 + 2);
    unint64_t v15 = *((void *)v7 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v7 = sub_10006DF74((double *)(v15 > 1), v16 + 1, 1, (uint64_t)v7);
    }
    *((void *)v7 + 2) = v16 + 1;
    *((unsigned char *)v7 + v16 + 32) = v8;
LABEL_4:
    ++v5;
  }
  while (v4 != v5);
  swift_bridgeObjectRelease();
  return v7;
}

id sub_1000A5380@<X0>(void *a1@<X8>)
{
  if (qword_1004C2A00 != -1) {
    swift_once();
  }
  unsigned __int8 v2 = (void *)qword_1004F8058;
  *a1 = qword_1004F8058;

  return v2;
}

BOOL sub_1000A53EC(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 40);
  double v2 = *(double *)(a1 + 48);
  double v5 = *(double *)(a2 + 40);
  double v4 = *(double *)(a2 + 48);
  sub_1000A5868();
  if ((static OrderedDictionary<>.__derived_struct_equals(_:_:)() & 1) == 0
    || (static SearchArea.__derived_struct_equals(_:_:)() & 1) == 0)
  {
    return 0;
  }
  if (v2 == v4) {
    return v3 == v5;
  }
  return 0;
}

id sub_1000A54D8()
{
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  id result = (id)*((void *)&xmmword_1004F8000 + 1);
  if (*((void *)&xmmword_1004F8000 + 1))
  {
    id v1 = (id)*((void *)&xmmword_1004F8000 + 1);
    qword_1004F8060 = Contexts.PrivateQueue.init(_:)();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000A5558@<X0>(void *a1@<X8>)
{
  if (qword_1004C2A08 != -1) {
    swift_once();
  }
  double v2 = (void *)qword_1004F8060;
  *a1 = qword_1004F8060;

  return v2;
}

uint64_t sub_1000A55C4(unint64_t *a1, unint64_t *a2)
{
  return sub_1000A599C(*a1, *a2);
}

unint64_t sub_1000A55D0(uint64_t a1)
{
  unint64_t result = sub_1000A55F8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000A55F8()
{
  unint64_t result = qword_1004C84B8;
  if (!qword_1004C84B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C84B8);
  }
  return result;
}

unint64_t sub_1000A564C(uint64_t a1)
{
  unint64_t result = sub_1000A5674();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000A5674()
{
  unint64_t result = qword_1004C84E8;
  if (!qword_1004C84E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C84E8);
  }
  return result;
}

unint64_t sub_1000A56C8(unint64_t a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1 >> 62)
  {
    case 2uLL:
      unint64_t result = 0xD000000000000028;
      break;
    case 3uLL:
      *((void *)&v3 + 1) = a1;
      *(void *)&long long v3 = a1 + 0x4000000000000000;
      unint64_t result = 1701602377;
      switch((unint64_t)(v3 >> 3))
      {
        case 1uLL:
          unint64_t result = 0x6E69686372616553;
          break;
        case 2uLL:
          unint64_t result = 0x4C20676E69646441;
          break;
        case 3uLL:
          unint64_t result = 0x5020676E69766F4DLL;
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000A57E0()
{
  return sub_1000A56C8(*v0);
}

unint64_t sub_1000A57E8(uint64_t a1)
{
  unint64_t result = sub_1000A5810();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000A5810()
{
  unint64_t result = qword_1004C8518;
  if (!qword_1004C8518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8518);
  }
  return result;
}

unint64_t sub_1000A5868()
{
  unint64_t result = qword_1004C8520;
  if (!qword_1004C8520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8520);
  }
  return result;
}

BOOL sub_1000A58BC(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 3u:
      if (a2 != 3) {
        goto LABEL_18;
      }
      BOOL result = 1;
      break;
    case 4u:
      if (a2 != 4) {
        goto LABEL_18;
      }
      BOOL result = 1;
      break;
    case 5u:
      if (a2 != 5) {
        goto LABEL_18;
      }
      BOOL result = 1;
      break;
    case 6u:
      if (a2 != 6) {
        goto LABEL_18;
      }
      BOOL result = 1;
      break;
    case 7u:
      if (a2 != 7) {
        goto LABEL_18;
      }
      BOOL result = 1;
      break;
    case 8u:
      if (a2 != 8) {
        goto LABEL_18;
      }
      BOOL result = 1;
      break;
    case 9u:
      if (a2 != 9) {
        goto LABEL_18;
      }
      BOOL result = 1;
      break;
    default:
      if (a2 - 3 < 7) {
LABEL_18:
      }
        BOOL result = 0;
      else {
        BOOL result = a1 == a2;
      }
      break;
  }
  return result;
}

uint64_t sub_1000A599C(unint64_t a1, unint64_t a2)
{
  switch(a1 >> 62)
  {
    case 1uLL:
      if (a2 >> 62 == 1) {
        goto LABEL_14;
      }
      goto LABEL_22;
    case 2uLL:
      if (a2 >> 62 != 2) {
        goto LABEL_22;
      }
LABEL_14:
      uint64_t v9 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      char v10 = (uint64_t *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + direct field offset for MeasureObject.id);
      swift_beginAccess();
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      unint64_t v13 = (void *)(v9 + direct field offset for MeasureObject.id);
      swift_beginAccess();
      if (v11 != *v13 || v12 != v13[1]) {
        goto LABEL_18;
      }
      goto LABEL_20;
    case 3uLL:
      *((void *)&v8 + 1) = a1;
      *(void *)&long long v8 = a1 + 0x4000000000000000;
      switch((unint64_t)(v8 >> 3))
      {
        case 1uLL:
          if (a2 != 0xC000000000000008) {
            goto LABEL_22;
          }
          goto LABEL_20;
        case 2uLL:
          if (a2 == 0xC000000000000010) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 3uLL:
          if (a2 != 0xC000000000000018) {
            goto LABEL_22;
          }
          goto LABEL_20;
        default:
          if (a2 == 0xC000000000000000) {
            goto LABEL_20;
          }
          goto LABEL_22;
      }
    default:
      if (a2 >> 62)
      {
LABEL_22:
        char v15 = 0;
      }
      else
      {
        long long v3 = (uint64_t *)(a1 + direct field offset for MeasureObject.id);
        swift_beginAccess();
        uint64_t v4 = *v3;
        uint64_t v5 = v3[1];
        uint64_t v6 = (void *)(a2 + direct field offset for MeasureObject.id);
        swift_beginAccess();
        if (v4 == *v6 && v5 == v6[1]) {
LABEL_20:
        }
          char v15 = 1;
        else {
LABEL_18:
        }
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      return v15 & 1;
  }
}

double *sub_1000A5B8C()
{
  uint64_t v0 = (double *)&off_100485788;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v0 = sub_10006DF74(0, 10, 1, (uint64_t)&off_100485788);
  }
  unint64_t v2 = *((void *)v0 + 2);
  unint64_t v1 = *((void *)v0 + 3);
  if (v2 >= v1 >> 1) {
    uint64_t v0 = sub_10006DF74((double *)(v1 > 1), v2 + 1, 1, (uint64_t)v0);
  }
  *((void *)v0 + 2) = v2 + 1;
  *((unsigned char *)v0 + v2 + 32) = 2;
  return v0;
}

uint64_t sub_1000A5C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894(&qword_1004C8528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for UserInputs.Type(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7)
  {
    unsigned int v2 = a2 + 9;
    if (a2 + 9 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 9;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 9;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000A5D40);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 9;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 3) {
    unsigned int v8 = v7 - 2;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 8) {
    return v8 - 7;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for UserInputs.Type(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 9;
  if (a3 + 9 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF7) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v7 = ((a2 - 247) >> 8) + 1;
    *BOOL result = a2 + 9;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1000A5E28);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *BOOL result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t sub_1000A5E50(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    return v1 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *sub_1000A5E64(unsigned char *result, int a2)
{
  if (a2) {
    *BOOL result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserInputs.Type()
{
  return &type metadata for UserInputs.Type;
}

unint64_t sub_1000A5E88()
{
  unint64_t result = qword_1004C8530;
  if (!qword_1004C8530)
  {
    sub_100016EF4(&qword_1004C8538);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8530);
  }
  return result;
}

unint64_t sub_1000A5EE8()
{
  unint64_t result = qword_1004C8540;
  if (!qword_1004C8540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8540);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PointMoveState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[41]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PointMoveState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PointMoveState()
{
  return &type metadata for PointMoveState;
}

uint64_t sub_1000A5FE4()
{
  uint64_t result = Contexts.UIKit.init()();
  qword_1004F8068 = result;
  return result;
}

id sub_1000A6004@<X0>(void *a1@<X8>)
{
  if (qword_1004C2A10 != -1) {
    swift_once();
  }
  unsigned int v2 = (void *)qword_1004F8068;
  *a1 = qword_1004F8068;

  return v2;
}

uint64_t sub_1000A6070(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    if (a1[40])
    {
      if (a2[40]) {
        return 1;
      }
    }
    else if ((a2[40] & 1) == 0 && CGRectEqualToRect(*(CGRect *)(a1 + 8), *(CGRect *)(a2 + 8)))
    {
      return 1;
    }
  }
  return 0;
}

unint64_t sub_1000A60D4(uint64_t a1)
{
  unint64_t result = sub_1000A60FC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000A60FC()
{
  unint64_t result = qword_1004C8570;
  if (!qword_1004C8570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8570);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PointInputState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A621CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PointInputState()
{
  return &type metadata for PointInputState;
}

unint64_t sub_1000A6258()
{
  unint64_t result = qword_1004C8578;
  if (!qword_1004C8578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8578);
  }
  return result;
}

float sub_1000A62AC()
{
  simd_float4x4.position.getter();
  long long v18 = v0;
  simd_float4x4.position.getter();
  long long v19 = v1;
  simd_float4x4.position.getter();
  *(float32x2_t *)v5.f32 = vsub_f32(*(float32x2_t *)&v18, *(float32x2_t *)&v19);
  v4.i32[3] = HIDWORD(v19);
  v5.f32[2] = *((float *)&v18 + 2) - *((float *)&v19 + 2);
  v5.i32[3] = 0;
  *(float32x2_t *)v4.f32 = vsub_f32(v2, *(float32x2_t *)&v19);
  v4.f32[2] = v3 - *((float *)&v19 + 2);
  float32x4_t v6 = vmulq_f32(v4, v4);
  LODWORD(v7) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).u32[0];
  float32x2_t v8 = vrsqrte_f32((float32x2_t)LODWORD(v7));
  float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)LODWORD(v7), vmul_f32(v8, v8)));
  float32x4_t v10 = vmulq_f32(v5, vmulq_n_f32(v4, vmul_f32(v9, vrsqrts_f32((float32x2_t)LODWORD(v7), vmul_f32(v9, v9))).f32[0]));
  float v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  if (v11 < 0.0)
  {
    float32x4_t v12 = vmulq_f32(v5, v5);
    return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
  }
  *(float32x2_t *)v13.f32 = vsub_f32(*(float32x2_t *)&v18, v2);
  v13.f32[2] = *((float *)&v18 + 2) - v3;
  v13.i32[3] = 0;
  float v14 = sqrtf(v7);
  if (v14 < v11)
  {
    float32x4_t v12 = vmulq_f32(v13, v13);
    return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
  }
  float32x4_t v16 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), vnegq_f32(v5)), v13, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  float32x4_t v17 = vmulq_f32(v16, v16);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), v17)).f32[0])/ v14;
}

void sub_1000A6410(uint64_t a1, float32x2_t a2, float a3)
{
  float v5 = a3 * a3;
  uint64_t v31 = a1 + 64;
  char v28 = 1;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v32 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v29 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v12 >= v32) {
      goto LABEL_30;
    }
    unint64_t v13 = *(void *)(v31 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v32) {
        goto LABEL_30;
      }
      unint64_t v13 = *(void *)(v31 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v32) {
          goto LABEL_30;
        }
        unint64_t v13 = *(void *)(v31 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_22:
    char v15 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    float32x4_t v16 = *(void (**)(uint64_t))((swift_isaMask & *v15) + 0x280);
    float32x4_t v17 = v15;
    uint64_t v18 = swift_bridgeObjectRetain();
    v16(v18);
    uint64_t v20 = v19;

    swift_bridgeObjectRelease();
    if (v20)
    {

      goto LABEL_5;
    }
    BOOL v21 = *(void (**)(void))((swift_isaMask & *v17) + 0xD0);
    uint64_t v22 = v17;
    v21();
    if (!MeasureObjectState.isMovable()())
    {

      goto LABEL_28;
    }
    type metadata accessor for MeasureCamera();
    (*(void (**)(void))((swift_isaMask & *v22) + 0x2B0))();
    simd_float4x4.position.getter();
    static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    float32x2_t v30 = v23;
    float v25 = v24;

    if (v25 >= 1.0)
    {
LABEL_28:

LABEL_5:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      float32x2_t v26 = vsub_f32(a2, v30);
      float v27 = vaddv_f32(vmul_f32(v26, v26));
      if (v27 < v5)
      {

        char v28 = 0;
        float v5 = v27;
        uint64_t v29 = v15;
      }
      else
      {
      }
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 < v32)
  {
    unint64_t v13 = *(void *)(v31 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v9 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          break;
        }
        if (v9 >= v32) {
          goto LABEL_30;
        }
        unint64_t v13 = *(void *)(v31 + 8 * v9);
        ++v14;
        if (v13) {
          goto LABEL_21;
        }
      }
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      return;
    }
    int64_t v9 = v14;
    goto LABEL_21;
  }
LABEL_30:
  swift_release();
  if (v29 && (v28 & 1) != 0) {
    goto LABEL_36;
  }
}

void sub_1000A6768(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x2_t a4@<D0>, float a5@<S1>)
{
  float32x4_t v62 = *(float32x4_t *)SIMD3<>.zero.unsafeMutableAddressor();
  simd_float4x4.forward.getter();
  simd_float4x4.position.getter();
  uint64_t v9 = *(void *)(a1 + 16);
  simd_float4 v10 = 0uLL;
  if (!v9)
  {
    long long v50 = 0;
    float32x2_t v51 = 0;
    simd_float4 v52 = 0uLL;
    simd_float4 v53 = 0uLL;
    long long v54 = 0uLL;
LABEL_33:
    *(void *)a3 = v50;
    *(void *)(a3 + 8) = 0;
    *(simd_float4 *)(a3 + 16) = v10;
    *(simd_float4 *)(a3 + 32) = v52;
    *(simd_float4 *)(a3 + 48) = v53;
    *(_OWORD *)(a3 + 64) = v54;
    *(float32x2_t *)(a3 + 80) = v51;
    return;
  }
  uint64_t v57 = a3;
  simd_float4 v64 = matrix_identity_float4x4.columns[1];
  simd_float4 v65 = matrix_identity_float4x4.columns[0];
  simd_float4 v63 = matrix_identity_float4x4.columns[2];
  float v11 = a5 * a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v66 = 0;
  float32x2_t v58 = 0;
  int64_t v12 = (uint64_t *)(a1 + 40);
  char v61 = 1;
  simd_float4 v13 = v65;
  simd_float4 v59 = v63;
  simd_float4 v60 = v64;
  do
  {
    if (!*(void *)(a2 + 16))
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    simd_float4 v78 = v13;
    uint64_t v14 = *(v12 - 1);
    uint64_t v15 = *v12;
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_1000E20D4(v14, v15);
    if ((v17 & 1) == 0) {
      goto LABEL_35;
    }
    uint64_t v18 = *(void **)(*(void *)(a2 + 56) + 8 * v16);
    uint64_t v19 = *(uint64_t (**)(void))((swift_isaMask & *v18) + 0x2C8);
    uint64_t v20 = v18;
    char v21 = v19();

    if ((v21 & 1) == 0
      || (uint64_t v22 = *(void (**)(void))((swift_isaMask & *v20) + 0xD0),
          uint64_t v20 = v20,
          v22(),
          v20,
          !MeasureObjectState.isMovable()()))
    {

LABEL_17:
      swift_bridgeObjectRelease();
      simd_float4 v13 = v78;
      goto LABEL_18;
    }
    float32x2_t v23 = *(uint64_t (**)(void))((swift_isaMask & *v20) + 0x250);
    float v24 = v20;
    uint64_t v25 = v23();

    if ((v25 & 0xC000000000000001) != 0)
    {
      float32x2_t v26 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_36;
      }
      float32x2_t v26 = *(id *)(v25 + 32);
    }
    float v27 = v26;
    uint64_t v28 = swift_bridgeObjectRelease();
    *(double *)v29.i64 = (*(double (**)(uint64_t))((swift_isaMask & *v27) + 0x2B0))(v28);
    simd_float4 v75 = v30;
    simd_float4 v76 = v29;
    simd_float4 v74 = v31;

    int64_t v32 = v24;
    uint64_t v33 = v23();

    if ((v33 & 0xC000000000000001) != 0)
    {
      long long v34 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
        goto LABEL_37;
      }
      long long v34 = *(id *)(v33 + 40);
    }
    long long v35 = v34;
    uint64_t v36 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((swift_isaMask & *v35) + 0x2B0))(v36);

    type metadata accessor for MeasureCamera();
    simd_float4x4.position.getter();
    float32x4_t v70 = v37;
    static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    float v73 = v38;
    simd_float4x4.position.getter();
    float32x4_t v68 = v39;
    static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    *(float32x2_t *)v41.f32 = vsub_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v70.f32);
    if (v73 <= 1.0)
    {
      if (v40 <= 1.0)
      {
        v41.i64[1] = COERCE_UNSIGNED_INT(v68.f32[2] - v70.f32[2]);
        float32x4_t v72 = v41;
      }
      else
      {
        simd_float4x4.position.getter();
        float32x4_t v69 = v44;
        static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
        float32x4_t v45 = vsubq_f32(v69, v70);
        v45.i32[3] = 0;
        float32x4_t v72 = v45;
      }
    }
    else
    {
      if (v40 > 1.0) {
        goto LABEL_25;
      }
      simd_float4x4.position.getter();
      float32x4_t v71 = v42;
      static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
      float32x4_t v43 = vsubq_f32(v68, v71);
      v43.i32[3] = 0;
      float32x4_t v72 = v43;
    }
    closestPointOnLine(lineP1:lineP2:point:)();
    float32x2_t v47 = v46;
    float32x2_t v48 = vsub_f32(a4, v46);
    float v49 = vaddv_f32(vmul_f32(v48, v48));
    if (v49 >= v11)
    {
LABEL_25:

      goto LABEL_17;
    }
    float32x2_t v79 = v47;
    swift_bridgeObjectRelease();

    char v61 = 0;
    float32x2_t v58 = v79;
    float32x4_t v62 = v72;
    simd_float4 v13 = v76;
    simd_float4 v59 = v74;
    simd_float4 v60 = v75;
    long long v66 = v18;
    float v11 = v49;
LABEL_18:
    v12 += 2;
    --v9;
  }
  while (v9);
  simd_float4 v80 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v61)
  {

    long long v50 = 0;
    float32x2_t v51 = 0;
    simd_float4 v52 = 0uLL;
    simd_float4 v53 = 0uLL;
    long long v54 = 0uLL;
    a3 = v57;
    simd_float4 v10 = 0uLL;
    goto LABEL_33;
  }
  type metadata accessor for MeasureCamera();
  static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)();
  static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)();
  simd_float4x4.position.getter();
  long long v77 = v55;
  simd_float4x4.position.getter();
  lineIntersection(line1P1:line1P2:line2P1:line2P2:)();
  a3 = v57;
  long long v50 = v66;
  if (v66)
  {
    *(float32x2_t *)&long long v54 = vadd_f32(*(float32x2_t *)&v77, vmul_n_f32(*(float32x2_t *)v62.f32, v56));
    *((float *)&v54 + 2) = *((float *)&v77 + 2) + vmuls_lane_f32(v56, v62, 2);
    HIDWORD(v54) = 1.0;
    float32x2_t v51 = v58;
    simd_float4 v10 = v80;
    simd_float4 v53 = v59;
    simd_float4 v52 = v60;
    goto LABEL_33;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1000A6FB8@<X0>(uint64_t a1@<X0>, float32x2_t a2@<X1>, float32x2_t *a3@<X8>, float32x2_t a4@<D0>, float a5@<S1>)
{
  uint64_t v6 = a1;
  *(float *)&uint64_t v7 = a5;
  if (qword_1004C2D10 != -1) {
LABEL_25:
  }
    a1 = swift_once();
  float v10 = *(float *)&dword_1004F8534;
  float v11 = *(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v6) + 0x250);
  uint64_t v12 = v11(a1);
  if ((v12 & 0xC000000000000001) != 0)
  {
    simd_float4 v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    simd_float4 v13 = *(id *)(v12 + 32);
  }
  uint64_t v14 = v13;
  uint64_t v15 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((swift_isaMask & *v14) + 0x2B0))(v15);

  uint64_t result = v11(v16);
  if ((result & 0xC000000000000001) != 0)
  {
LABEL_28:
    uint64_t v18 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v18 = *(id *)(result + 40);
LABEL_8:
  uint64_t v19 = v18;
  uint64_t v20 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((swift_isaMask & *v19) + 0x2B0))(v20);

  simd_float4x4.position.getter();
  float32x4_t v53 = v21;
  uint64_t result = simd_float4x4.position.getter();
  float32x4_t v23 = vsubq_f32(v53, v22);
  float32x4_t v24 = vmulq_f32(v23, v23);
  float v25 = floorf(sqrtf(v24.f32[2] + vaddv_f32(*(float32x2_t *)v24.f32)) / v10);
  if ((~LODWORD(v25) & 0x7F800000) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v25 <= -9.2234e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v25 >= 9.2234e18)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  float32x2_t v46 = a3;
  uint64_t v49 = (uint64_t)v25;
  if ((uint64_t)v25 < 1)
  {
LABEL_20:
    float32x2_t v42 = 0;
    float32x2_t v28 = 0;
    float32x2_t v43 = 0;
    a3 = 0;
    a2 = 0;
    float32x2_t v30 = 0;
    float32x2_t v31 = 0;
    float32x2_t v32 = 0;
    float32x2_t v33 = 0;
    float32x2_t v44 = 0;
    char v45 = 1;
LABEL_23:
    *float32x2_t v46 = v42;
    v46[1] = 0;
    v46[2] = v28;
    v46[3] = v43;
    v46[4] = (float32x2_t)a3;
    v46[5] = a2;
    v46[6] = v30;
    v46[7] = v31;
    v46[8] = v32;
    v46[9] = v33;
    v46[10] = v44;
    v46[11].i8[0] = v45;
    return result;
  }
  float v26 = (float)((float)(*(float *)&v7 * *(float *)&v7) * 0.6) * 0.6;
  type metadata accessor for MeasureCamera();
  float32x2_t v27 = 0;
  float32x2_t v28 = 0;
  float32x2_t v48 = 0;
  a3 = 0;
  float32x2_t v29 = a2;
  a2 = 0;
  float32x2_t v30 = 0;
  float32x2_t v31 = 0;
  float32x2_t v32 = 0;
  float32x2_t v33 = 0;
  uint64_t v7 = *(void *)(*(void *)&v29 + 32);
  uint64_t v6 = 1;
  uint64_t v47 = 0x100000001;
  while (1)
  {
    slerp(transform1:transform2:percent:)();
    long long v50 = v35;
    long long v51 = v36;
    long long v52 = v37;
    float32x4_t v54 = v38;
    simd_float4x4.position.getter();
    uint64_t result = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    float32x2_t v40 = vsub_f32(a4, v39);
    float v41 = vaddv_f32(vmul_f32(v40, v40));
    if (v41 < v26)
    {
      float32x2_t v48 = *(float32x2_t *)((char *)&v50 + 8);
      float32x2_t v28 = (float32x2_t)v50;
      a2 = *(float32x2_t *)((char *)&v51 + 8);
      a3 = (float32x2_t *)v51;
      float32x2_t v31 = *(float32x2_t *)((char *)&v52 + 8);
      float32x2_t v30 = (float32x2_t)v52;
      float32x2_t v33 = *(float32x2_t *)&v54.u32[2];
      float32x2_t v32 = *(float32x2_t *)v54.f32;
      float32x2_t v27 = v39;
      if (v49 == v6)
      {
        float v26 = v41;
LABEL_22:
        char v45 = 0;
        float32x2_t v42 = (float32x2_t)LODWORD(v26);
        float32x2_t v44 = v27;
        float32x2_t v43 = v48;
        goto LABEL_23;
      }
      uint64_t v47 = 0;
      float v26 = v41;
      goto LABEL_14;
    }
    if (v49 == v6) {
      break;
    }
LABEL_14:
    if (__OFADD__(v6++, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
  }
  if ((v47 & 0x100000000) != 0) {
    goto LABEL_20;
  }
  if ((v47 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_33:
  __break(1u);
  return result;
}

void sub_1000A740C()
{
  inited = (void *)swift_initStackObject();
  uint64_t v1 = sub_100012894(&qword_1004C6AA0);
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1004F8630;
  float32x4_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 272);
  swift_retain();
  inited[10] = v4(KeyPath, v3);
  uint64_t v5 = sub_100012894(&qword_1004C54B8);
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = qword_1004F8630;
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 272);
  swift_retain();
  inited[11] = v8(v6, v7);
  uint64_t v9 = sub_100012894(&qword_1004C58F0);
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = qword_1004F8630;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 272);
  swift_retain();
  inited[12] = v12(v10, v11);
  uint64_t v13 = swift_getKeyPath();
  uint64_t v14 = sub_100012894(&qword_1004C86D8);
  uint64_t v15 = qword_1004F8630;
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 272);
  swift_retain();
  inited[13] = v16(v13, v15);
  swift_release();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000A75F4()
{
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)();

  return swift_release();
}

uint64_t sub_1000A76B0(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 || a1[3])
  {
    sub_10005536C();
    uint64_t v13 = (void *)static OS_dispatch_queue.main.getter();
    aBlock[4] = sub_1000AA558;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100049AB4;
    aBlock[3] = &unk_10048C338;
    uint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1000AA598((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_100039BEC();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return result;
}

uint64_t sub_1000A795C()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000A79AC()
{
  uint64_t v0 = StateObserver.deinit();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LabelController()
{
  uint64_t result = qword_1004C85A8;
  if (!qword_1004C85A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A7A68()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000A7AC4(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  sub_1000AA238(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;

  return swift_bridgeObjectRetain();
}

double sub_1000A7B48(uint64_t a1)
{
  sub_1000AA238(*(void *)a1, *(void *)(a1 + 8));
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000A7B88(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (os_unfair_lock_s *)(v5 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v6);
  swift_endAccess();
  uint64_t v7 = (uint64_t *)(v5 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (!*(void *)(*v7 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_1000E20D4(a1, a2);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_endAccess();
    goto LABEL_6;
  }
  uint64_t v11 = *(void **)(*(void *)(v8 + 56) + 8 * v9);
  swift_endAccess();
  id v12 = v11;
  swift_bridgeObjectRelease();
  sub_1000C7AE4();
  swift_beginAccess();
  uint64_t v13 = (void *)sub_1000A8820(a1, a2, (void (*)(void))sub_1000D7D44);
  swift_endAccess();

LABEL_6:
  swift_beginAccess();
  os_unfair_lock_unlock(v6);
  return swift_endAccess();
}

uint64_t sub_1000A7CEC(void *a1)
{
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
  if ((unint64_t)(v2() - 3) <= 1)
  {
    char v3 = byte_1004F8519;
    char v4 = byte_1004F851A;
    uint64_t v5 = a1;
    return sub_1000DD050(v5, v3, v4);
  }
  if (((*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x2C8))() & 1) != 0
    || v2() == 6
    || (uint64_t result = v2(), result == 9))
  {
    uint64_t v5 = a1;
    char v3 = 0;
    char v4 = 0;
    return sub_1000DD050(v5, v3, v4);
  }
  return result;
}

void sub_1000A7E00(char *a1)
{
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *(void *)a1) + 0x230);
  uint64_t v3 = v2();
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_16;
  }
  if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_14;
  }
  for (i = *(id *)(v3 + 32); ; i = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    uint64_t v5 = i;
    swift_bridgeObjectRelease();
    sub_1000DC9F4(v5);

    uint64_t v6 = v2();
    if ((v6 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_15;
      }
      uint64_t v7 = *(id *)(v6 + 32);
    }
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    sub_1000DD050(v8, 0, 0);

    uint64_t v9 = v2();
    if ((v9 & 0xC000000000000001) != 0)
    {
      char v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      char v10 = *(id *)(v9 + 40);
    }
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    sub_1000DC9F4(v11);

    uint64_t v12 = v2();
    if ((v12 & 0xC000000000000001) != 0) {
      break;
    }
    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      uint64_t v13 = *(id *)(v12 + 40);
      goto LABEL_13;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    ;
  }
  uint64_t v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_13:
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  sub_1000DD050(v14, 0, 0);

  sub_1000DD37C(a1);
  sub_1000DDC98(a1);
}

unint64_t sub_1000A8004(void *a1)
{
  uint64_t v3 = *(uint64_t **)(v1 + 64);
  sub_1000DDC98(a1);
  char v4 = (uint64_t (*)(void))&swift_isaMask;
  unint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x230))();
  unint64_t v6 = result;
  if (result >> 62) {
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    do
    {
      if (v7 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v8 = 0;
      uint64_t v9 = (os_unfair_lock_s *)((char *)v3 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
      uint64_t v3 = (uint64_t *)((char *)v3 + OBJC_IVAR____TtC7Measure9LabelView_labels);
      unint64_t v50 = v6 & 0xC000000000000001;
      float32x2_t v40 = (void *)v6;
      uint64_t v41 = v7;
      while (1)
      {
        if (v50) {
          char v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          char v10 = *(id *)(v6 + 8 * v8 + 32);
        }
        uint64_t v11 = v10;
        swift_beginAccess();
        os_unfair_lock_lock(v9);
        uint64_t v12 = swift_endAccess();
        uint64_t v13 = (*(uint64_t (**)(uint64_t))((*(void *)v4 & *v11) + 0xB8))(v12);
        uint64_t v15 = v14;
        swift_beginAccess();
        uint64_t v16 = *v3;
        if (!*(void *)(*v3 + 16) || (unint64_t v17 = sub_1000E20D4(v13, v15), (v18 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          swift_endAccess();
          goto LABEL_6;
        }
        uint64_t v19 = *(void **)(*(void *)(v16 + 56) + 8 * v17);
        swift_endAccess();
        uint64_t v20 = v19;
        uint64_t v21 = swift_bridgeObjectRelease();
        unint64_t v6 = (unint64_t)v4;
        char v4 = *(uint64_t (**)(void))((*(void *)v4 & *v11) + 0x250);
        uint64_t v22 = ((uint64_t (*)(uint64_t))v4)(v21);
        if ((v22 & 0xC000000000000001) != 0)
        {
          float32x4_t v23 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_15;
        }
        if (!*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          break;
        }
        float32x4_t v23 = *(id *)(v22 + 32);
LABEL_15:
        float32x4_t v24 = v23;
        uint64_t v25 = swift_bridgeObjectRelease();
        v26.n128_f64[0] = (*(double (**)(uint64_t))((*(void *)v6 & *v24) + 0x2B0))(v25);
        __n128 v48 = v27;
        __n128 v49 = v26;
        __n128 v46 = v29;
        __n128 v47 = v28;

        uint64_t v30 = v4();
        if ((v30 & 0xC000000000000001) != 0)
        {
          float32x2_t v31 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v7 = v41;
        }
        else
        {
          uint64_t v7 = v41;
          if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
            goto LABEL_25;
          }
          float32x2_t v31 = *(id *)(v30 + 40);
        }
        uint64_t v32 = swift_bridgeObjectRelease();
        char v4 = (uint64_t (*)(void))v6;
        v33.n128_f64[0] = (*(double (**)(uint64_t))((*(void *)v6 & *v31) + 0x2B0))(v32);
        __n128 v44 = v34;
        __n128 v45 = v33;
        __n128 v42 = v36;
        __n128 v43 = v35;

        uint64_t v37 = sub_1000C7F3C(0, 0, v49, v48, v47, v46, v45, v44, v43, v42);
        uint64_t v38 = (*(uint64_t (**)(uint64_t))((*(void *)v6 & *v11) + 0xD0))(v37);
        uint64_t v39 = *(void *)&v20[OBJC_IVAR____TtC7Measure11LabelRender_state];
        *(void *)&v20[OBJC_IVAR____TtC7Measure11LabelRender_state] = v38;
        if (v38 != v39) {
          sub_1000C51D0(v38);
        }

        unint64_t v6 = (unint64_t)v40;
LABEL_6:
        ++v8;
        swift_beginAccess();
        os_unfair_lock_unlock(v9);
        swift_endAccess();

        if (v7 == v8) {
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
    }
    while (result);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A8458(void *a1)
{
  return sub_1000DC9F4(a1);
}

uint64_t sub_1000A8484()
{
  return sub_1000DE53C();
}

void sub_1000A84A8(char a1)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(v1 + 64)
                                                             + OBJC_IVAR____TtC7Measure9LabelView_sceneView), "overlaySKScene"));
  if (v3)
  {
    id v4 = v3;
    [v3 setHidden:a1 & 1];
  }
}

uint64_t sub_1000A8530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000A85D8(a1, a2, type metadata accessor for MetricsManager.EdgeGuideMetric, type metadata accessor for MetricsManager.EdgeGuideMetric, type metadata accessor for MetricsManager.EdgeGuideMetric, (void (*)(void))sub_1000D71E8, a3);
}

uint64_t sub_1000A8584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000A85D8(a1, a2, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric, (void (*)(void))sub_1000D721C, a3);
}

uint64_t sub_1000A85D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, void (*a6)(void)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12 = v7;
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_1000E20D4(a1, a2);
  LOBYTE(a2) = v17;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v12;
    uint64_t v29 = *v12;
    *uint64_t v12 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a6();
      uint64_t v19 = v29;
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v19 + 56);
    uint64_t v21 = a3(0);
    uint64_t v28 = *(void *)(v21 - 8);
    sub_1000AA480(v20 + *(void *)(v28 + 72) * v16, a7, a4);
    sub_1000A935C(v16, v19, a5);
    *uint64_t v12 = v19;
    swift_bridgeObjectRelease();
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    uint64_t v23 = a7;
    uint64_t v24 = 0;
    uint64_t v25 = v21;
  }
  else
  {
    uint64_t v26 = a3(0);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
    uint64_t v25 = v26;
    uint64_t v23 = a7;
    uint64_t v24 = 1;
  }

  return v22(v23, v24, 1, v25);
}

uint64_t sub_1000A879C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000A85D8(a1, a2, type metadata accessor for MetricsManager.PersonHeightMetric, type metadata accessor for MetricsManager.PersonHeightMetric, type metadata accessor for MetricsManager.PersonHeightMetric, (void (*)(void))sub_1000D7D10, a3);
}

uint64_t sub_1000A87F0(uint64_t a1, uint64_t a2)
{
  return sub_1000A8820(a1, a2, (void (*)(void))sub_1000D7D44);
}

uint64_t sub_1000A8808(uint64_t a1, uint64_t a2)
{
  return sub_1000A8820(a1, a2, (void (*)(void))sub_1000D8278);
}

uint64_t sub_1000A8820(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000E20D4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v5;
  uint64_t v14 = *v5;
  uint64_t *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v11 = v14;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  sub_1000A916C(v8, v11);
  uint64_t *v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1000A8900(uint64_t a1, uint64_t a2)
{
  return sub_1000A8820(a1, a2, (void (*)(void))sub_1000D8284);
}

uint64_t sub_1000A8918(uint64_t a1, uint64_t a2)
{
  return sub_1000A8820(a1, a2, (void (*)(void))sub_1000D8290);
}

uint64_t sub_1000A8930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000A85D8(a1, a2, type metadata accessor for MetricsManager.VerticalGuideMetric, type metadata accessor for MetricsManager.VerticalGuideMetric, type metadata accessor for MetricsManager.VerticalGuideMetric, (void (*)(void))sub_1000D829C, a3);
}

unint64_t sub_1000A8984(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000E20D4(a1, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000D82D0();
      uint64_t v10 = v13;
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = *(unsigned int *)(*(void *)(v10 + 56) + 4 * v6);
    sub_1000A957C(v6, v10);
    uint64_t *v3 = v10;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
  }
  return v11 | ((unint64_t)((v8 & 1) == 0) << 32);
}

uint64_t sub_1000A8A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000E20D4(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v4;
    uint64_t v20 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000D87BC();
      uint64_t v12 = v20;
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 56) + 48 * v8;
    uint64_t v14 = *(void *)v13;
    long long v18 = *(_OWORD *)(v13 + 24);
    long long v19 = *(_OWORD *)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 40);
    sub_1000A9754(v8, v12);
    uint64_t *v4 = v12;
    uint64_t result = swift_bridgeObjectRelease();
    long long v17 = v18;
    long long v16 = v19;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
  }
  *(void *)a3 = v14;
  *(_OWORD *)(a3 + 8) = v16;
  *(_OWORD *)(a3 + 24) = v17;
  *(void *)(a3 + 40) = v15;
  return result;
}

uint64_t sub_1000A8B7C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000E26A0(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000D9370();
    uint64_t v7 = v10;
  }
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1000A9C8C(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

double sub_1000A8C50@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000E272C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000D9A28();
      uint64_t v11 = v13;
    }

    swift_release();
    sub_100027938((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1000A9E84(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1000A8D5C(uint64_t a1)
{
  return sub_1000A8D8C(a1, (void (*)(void))sub_1000D9D9C);
}

uint64_t sub_1000A8D74(uint64_t a1)
{
  return sub_1000A8D8C(a1, (void (*)(void))sub_1000D9DA8);
}

uint64_t sub_1000A8D8C(uint64_t a1, void (*a2)(void))
{
  unint64_t v4 = v2;
  unint64_t v5 = sub_1000E24BC(a1);
  if ((v6 & 1) == 0) {
    return 0;
  }
  unint64_t v7 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v2;
  uint64_t v12 = *v4;
  uint64_t *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v9 = v12;
  }
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v7);
  sub_1000AA0A0(v7, v9);
  uint64_t *v4 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1000A8E2C(unint64_t a1, uint64_t a2)
{
  return sub_1000A935C(a1, a2, type metadata accessor for MetricsManager.EdgeGuideMetric);
}

unint64_t sub_1000A8E44(unint64_t a1, uint64_t a2)
{
  return sub_1000A935C(a1, a2, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric);
}

unint64_t sub_1000A8E5C(unint64_t a1, uint64_t a2)
{
  return sub_1000A935C(a1, a2, type metadata accessor for MetricsManager.PersonHeightMetric);
}

unint64_t sub_1000A8E74(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1000AA598(&qword_1004C86E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  uint64_t *v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000A916C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000A9344(unint64_t a1, uint64_t a2)
{
  return sub_1000A935C(a1, a2, type metadata accessor for MetricsManager.VerticalGuideMetric);
}

unint64_t sub_1000A935C(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v9;
        if (v4 >= (uint64_t)v10) {
          break;
        }
        if (v12 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        uint64_t v14 = (_OWORD *)(v13 + 16 * v4);
        uint64_t v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1) {
          *uint64_t v14 = *v15;
        }
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v18 = v17 * v4;
        unint64_t result = v16 + v17 * v4;
        int64_t v19 = v17 * v7;
        unint64_t v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v18 == v19) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v12 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v4) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000A957C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_DWORD *)(v14 + 4 * v3);
          uint64_t v16 = (_DWORD *)(v14 + 4 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            _DWORD *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000A9754(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (long long *)(v16 + 48 * v3);
          uint64_t v18 = (long long *)(v16 + 48 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 3))
          {
            long long v9 = *v18;
            long long v10 = v18[2];
            v17[1] = v18[1];
            v17[2] = v10;
            *uint64_t v17 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000A9940(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        long long v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            unint64_t result = v15 + 304 * v3;
            uint64_t v16 = (const void *)(v15 + 304 * v6);
            if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v16 + 304))
            {
              unint64_t result = (unint64_t)memmove((void *)result, v16, 0x130uLL);
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000A9AEC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        long long v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000A9C8C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        long long v10 = *(void (**)(unsigned char *))(*(void *)v9 + 184);
        swift_retain();
        v10(v25);
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_release();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (void *)(v16 + 8 * v3);
          uint64_t v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *uint64_t v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000A9E84(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v10 = *(void **)(*(void *)(a2 + 48) + 16 * v6 + 8);
        Hasher.init(_seed:)();
        type metadata accessor for AnyKeyPath();
        swift_retain();
        id v11 = v10;
        dispatch thunk of Hashable.hash(into:)();
        id v12 = v11;
        NSObject.hash(into:)();

        Swift::Int v13 = Hasher._finalize()();
        unint64_t result = swift_release();
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          uint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            long long v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  uint64_t *v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000AA0A0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        long long v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            unint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *unint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1000AA238(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000AA24C(void *a1, void *a2)
{
  int64_t v3 = v2;
  uint64_t v6 = sub_100012894(&qword_1004C6AA0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = qword_1004C2E30;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1004F8630;
  long long v10 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 272);
  swift_retain();
  v3[10] = v10(KeyPath, v9);
  uint64_t v11 = sub_100012894(&qword_1004C54B8);
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = qword_1004F8630;
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 272);
  swift_retain();
  v3[11] = v14(v12, v13);
  uint64_t v15 = sub_100012894(&qword_1004C58F0);
  uint64_t v16 = swift_getKeyPath();
  uint64_t v17 = qword_1004F8630;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 272);
  swift_retain();
  v3[12] = v18(v16, v17);
  uint64_t v19 = swift_getKeyPath();
  uint64_t v20 = sub_100012894(&qword_1004C86D8);
  uint64_t v21 = qword_1004F8630;
  BOOL v22 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 272);
  swift_retain();
  v3[13] = v22(v19, v21);
  v3[8] = a1;
  v3[9] = a2;
  uint64_t v23 = a1;
  id v24 = a2;
  swift_release();
  uint64_t v25 = StateObserver.init(configuration:)();
  *(void *)&v23[OBJC_IVAR____TtC7Measure9LabelView_delegate + 8] = &off_10048C320;
  swift_unknownObjectWeakAssign();
  return v25;
}

uint64_t sub_1000AA480(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000AA4E8(unsigned char *a1)
{
  return sub_1000A76B0(a1, v1);
}

void sub_1000AA4F0()
{
}

unsigned __int8 *sub_1000AA514(unsigned __int8 *result)
{
  int v1 = *result;
  if (v1 == 4)
  {
    char v2 = 1;
  }
  else
  {
    if (v1 != 5) {
      return result;
    }
    char v2 = 0;
  }
  return (unsigned __int8 *)sub_1000DEA80(v2);
}

uint64_t sub_1000AA558()
{
  return sub_1000DC86C(0);
}

uint64_t sub_1000AA580(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000AA590()
{
  return swift_release();
}

uint64_t sub_1000AA598(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000AA5E0()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0x800000010041F5D0;
    uint64_t v2 = 0xD000000000000011;
  }
  qword_1004F8070 = v2;
  *(void *)algn_1004F8078 = v4;
}

uint64_t sub_1000AA684()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100021818(v2, qword_1004F8080);
  uint64_t v5 = sub_1000217E0(v0, (uint64_t)qword_1004F8080);
  id v6 = [self defaultManager];
  id v7 = [v6 temporaryDirectory];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v4, v0);
}

void sub_1000AA7B8()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setDateFormat:v1];

  qword_1004F8098 = (uint64_t)v0;
}

id sub_1000AA830()
{
  uint64_t v0 = type metadata accessor for URL();
  sub_100021818(v0, qword_1004F80A0);
  uint64_t v1 = sub_1000217E0(v0, (uint64_t)qword_1004F80A0);
  return sub_1000AA87C(v1);
}

id sub_1000AA87C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(fileURLWithPath:isDirectory:)();
  id v6 = [self defaultManager];
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  sub_100012894(&qword_1004C86E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003F8B80;
  *(void *)(inited + 32) = NSFileOwnerAccountName;
  *(void *)(inited + 40) = 0x656C69626F6DLL;
  *(void *)(inited + 48) = 0xE600000000000000;
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = NSFileGroupOwnerAccountName;
  *(void *)(inited + 104) = &type metadata for String;
  *(void *)(inited + 80) = 0x656C69626F6DLL;
  *(void *)(inited + 88) = 0xE600000000000000;
  uint64_t v11 = NSFileOwnerAccountName;
  uint64_t v12 = NSFileGroupOwnerAccountName;
  sub_1000E15AC(inited);
  type metadata accessor for FileAttributeKey(0);
  sub_1000AAB18();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  LODWORD(inited) = [v6 createDirectoryAtURL:v9 withIntermediateDirectories:1 attributes:isa error:&v18];

  id v17 = v18;
  if (inited)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    id v14 = v17;
    return v14;
  }
  else
  {
    id v16 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

unint64_t sub_1000AAB18()
{
  unint64_t result = qword_1004C3958;
  if (!qword_1004C3958)
  {
    type metadata accessor for FileAttributeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C3958);
  }
  return result;
}

void *sub_1000AAB70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v5[qword_1004C86F0 + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v11 = &v5[qword_1004C86F8];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = (uint64_t *)&v5[qword_1004C8708];
  *uint64_t v12 = a4;
  v12[1] = a5;
  uint64_t v13 = v5;
  sub_10003FFC4(a4);
  sub_100028914(0);
  id v14 = &v13[qword_1004C8700];
  *(void *)id v14 = a2;
  *((void *)v14 + 1) = a3;

  [a1 bounds];
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;
  v28.receiver = v13;
  v28.super_class = (Class)type metadata accessor for GenericPlatter();
  uint64_t v23 = [super initWithFrame:v16, v18, v20, v22];
  id v24 = *(uint64_t (**)(void))((swift_isaMask & *v23) + 0x168);
  uint64_t v25 = v23;
  uint64_t v26 = v24();
  (*(void (**)(uint64_t))((swift_isaMask & *v25) + 0x178))(v26);
  sub_100028914(a4);

  return v25;
}

void sub_1000AAD34(char *a1, uint64_t a2, void *a3)
{
  *(void *)&a1[qword_1004C86F0 + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v5 = &a1[qword_1004C86F8];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  id v6 = &a1[qword_1004C8708];
  *(void *)id v6 = 0;
  *((void *)v6 + 1) = 0;
  id v7 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_1000AADDC(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  v16.receiver = a1;
  v16.super_class = (Class)type metadata accessor for GenericPlatter();
  uint64_t v8 = v16.receiver;
  id v9 = a5;
  id v10 = [super hitTest:v9 withEvent:a2];
  if (!v10)
  {

    goto LABEL_5;
  }
  uint64_t v12 = v10;
  uint64_t v13 = (void *)(*(uint64_t (**)(id, uint64_t))((swift_isaMask & *v8) + 0x170))(v10, v11);
  unsigned __int8 v14 = [v12 isDescendantOfView:v13];

  uint64_t v8 = v12;
  if ((v14 & 1) == 0)
  {
LABEL_5:

    uint64_t v12 = 0;
  }

  return v12;
}

uint64_t sub_1000AAF04(char *a1)
{
  uint64_t v2 = &a1[qword_1004C86F0];
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = *((void *)v2 + 1);
    uint64_t ObjectType = swift_getObjectType();
    id v6 = *(void (**)(uint64_t, uint64_t))(v4 + 24);
    id v7 = a1;
    v6(ObjectType, v4);

    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1000AAFAC()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x170))();
  [v1 bounds];
  [v1 bounds];
  mix(_:_:_:)();
  CGFloat v3 = v2;
  mix(_:_:_:)();
  CGFloat v5 = v4;
  mix(_:_:_:)();
  CGFloat v7 = v6;
  CGAffineTransformMakeScale(&t1, v3, v5);
  long long v16 = *(_OWORD *)&t1.c;
  long long v17 = *(_OWORD *)&t1.a;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  CGAffineTransformMakeRotation(&t1, v7);
  long long v10 = *(_OWORD *)&t1.a;
  long long v11 = *(_OWORD *)&t1.c;
  long long v12 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v17;
  *(_OWORD *)&t1.c = v16;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  *(_OWORD *)&t2.a = v10;
  *(_OWORD *)&t2.c = v11;
  *(_OWORD *)&t2.CGFloat tx = v12;
  CGAffineTransformConcat(&v18, &t1, &t2);
  CGAffineTransform t1 = v18;
  [v1 setTransform:&t1];
  mix(_:_:_:)();
  double v14 = v13;
  mix(_:_:_:)();
  [v1 setCenter:v14, v15];
  mix(_:_:_:)();
  [v0 setAlpha:];
}

void sub_1000AB180()
{
  id v1 = [self defaultCenter];
  if (qword_1004C3240 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1004F8AB0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  v7[4] = sub_1000AB934;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000F910C;
  v7[3] = &unk_10048C3B8;
  double v4 = _Block_copy(v7);
  id v5 = v0;
  swift_release();
  id v6 = [v1 addObserverForName:v2 object:0 queue:0 usingBlock:v4];
  _Block_release(v4);
  swift_unknownObjectRelease();
}

uint64_t sub_1000AB2DC(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005536C();
  long long v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  aBlock[4] = sub_1000AB954;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100049AB4;
  aBlock[3] = &unk_10048C408;
  double v13 = _Block_copy(aBlock);
  id v14 = a2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100039B94();
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_100039BEC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_1000AB558()
{
}

void sub_1000AB5B4()
{
}

void sub_1000AB610()
{
}

void sub_1000AB66C()
{
}

void sub_1000AB6C8()
{
}

void sub_1000AB724()
{
}

uint64_t sub_1000AB754()
{
  sub_10001FE1C(v0 + qword_1004C86F0);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + qword_1004C8708);

  return sub_100028914(v1);
}

id sub_1000AB7AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GenericPlatter();
  return [super dealloc];
}

uint64_t sub_1000AB7E4(uint64_t a1)
{
  sub_10001FE1C(a1 + qword_1004C86F0);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + qword_1004C8708);

  return sub_100028914(v2);
}

uint64_t type metadata accessor for GenericPlatter()
{
  uint64_t result = qword_1004C8738;
  if (!qword_1004C8738) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000AB894()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000AB8F4()
{
  return type metadata accessor for GenericPlatter();
}

uint64_t sub_1000AB8FC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AB934(uint64_t a1)
{
  return sub_1000AB2DC(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000AB93C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000AB94C()
{
  return swift_release();
}

uint64_t sub_1000AB954()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x158))();
}

id sub_1000AB9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a5 && a2 == a6 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), v7 = 0, (v6 & 1) != 0))
  {
    id v8 = [self sharedApplication];
    id v9 = [v8 preferredContentSizeCategory];

    LOBYTE(v8) = UIContentSizeCategory.isAccessibilityCategory.getter();
    char v7 = v8 ^ 1;
  }
  char v184 = v7;
  long long v10 = *(void **)(v185 + qword_1004C8978);
  NSString v11 = String._bridgeToObjectiveC()();
  [v10 setText:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  [v10 setAccessibilityLabel:v12];

  [v10 sizeToFit];
  double v13 = *(void **)(v185 + qword_1004C8988);
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 setAccessibilityLabel:v14];

  double v15 = *(void **)(v185 + qword_1004C8990);
  NSString v16 = String._bridgeToObjectiveC()();
  [v15 setAccessibilityLabel:v16];

  id v17 = [self sharedApplication];
  id v18 = [v17 preferredContentSizeCategory];

  LOBYTE(v17) = UIContentSizeCategory.isAccessibilityCategory.getter();
  if ((v17 & 1) == 0)
  {
    id result = [v10 superview];
    if (result)
    {
      simd_float4 v80 = result;
      sub_1000AFE1C(v10, result);

      id result = [v10 superview];
      if (result)
      {
        long long v81 = result;
        [result bounds];
        CGFloat v83 = v82;
        CGFloat v85 = v84;
        CGFloat v87 = v86;
        CGFloat v89 = v88;

        v193.origin.x = v83;
        v193.origin.y = v85;
        v193.size.width = v87;
        v193.size.height = v89;
        double Width = CGRectGetWidth(v193);
        id result = [v10 superview];
        if (result)
        {
          uint64_t v91 = result;
          [result bounds];
          CGFloat v93 = v92;
          CGFloat v95 = v94;
          CGFloat v97 = v96;
          CGFloat v99 = v98;

          v194.origin.x = v93;
          v194.origin.y = v95;
          v194.size.width = v97;
          v194.size.height = v99;
          [v10 setCenter:Width * 0.5, CGRectGetHeight(v194) * 0.5];
          if (v184)
          {
            NSString v100 = String._bridgeToObjectiveC()();
            [v13 setText:v100];

            NSString v101 = String._bridgeToObjectiveC()();
            [v13 setAccessibilityLabel:v101];
          }
          else
          {
            NSString v102 = String._bridgeToObjectiveC()();
            [v13 setText:v102];

            [v13 sizeToFit];
            id result = [v13 superview];
            if (!result)
            {
LABEL_68:
              __break(1u);
              goto LABEL_69;
            }
            NSString v101 = result;
            sub_1000AFE1C(v13, result);
          }

          NSString v103 = String._bridgeToObjectiveC()();
          [v15 setText:v103];

          [v15 sizeToFit];
          id result = [v15 superview];
          if (result)
          {
            uint64_t v104 = result;
            sub_1000AFE1C(v15, result);

            if ((v184 & 1) == 0)
            {
              id result = [v13 font];
              if (!result)
              {
LABEL_69:
                __break(1u);
                goto LABEL_70;
              }
              uint64_t v105 = result;
              [result pointSize];
              double v107 = v106;

              id result = [v15 font];
              if (!result)
              {
LABEL_70:
                __break(1u);
                goto LABEL_71;
              }
              uint64_t v108 = result;
              [result pointSize];
              double v110 = v109;

              if (v107 != v110)
              {
                id result = [v13 font];
                if (!result)
                {
LABEL_79:
                  __break(1u);
                  goto LABEL_80;
                }
                uint64_t v111 = result;
                [result pointSize];
                double v113 = v112;

                id result = [v15 font];
                if (!result)
                {
LABEL_80:
                  __break(1u);
                  return result;
                }
                uint64_t v114 = result;
                [result pointSize];
                double v116 = v115;

                if (v113 >= v116) {
                  uint64_t v117 = v15;
                }
                else {
                  uint64_t v117 = v13;
                }
                id v118 = [v117 font];
                [v13 setFont:v118];
                [v15 setFont:v118];
              }
            }
            if (*(unsigned char *)(v185 + qword_1004C89A0) != 1)
            {
              [v13 bounds];
              double v162 = CGRectGetWidth(v203);
              id result = [v13 superview];
              if (result)
              {
                long long v163 = result;
                [result bounds];
                CGFloat v165 = v164;
                CGFloat v167 = v166;
                CGFloat v169 = v168;
                CGFloat v171 = v170;

                v204.origin.x = v165;
                v204.origin.y = v167;
                v204.size.width = v169;
                v204.size.height = v171;
                CGFloat v172 = CGRectGetHeight(v204) * 0.5;
                [v13 bounds];
                [v13 setCenter:v162 * 0.5, v172 - CGRectGetHeight(v205) * 0.5];
                double v173 = 0.0;
                if ((v184 & 1) == 0)
                {
                  [v15 bounds];
                  double v173 = CGRectGetHeight(v206) * 0.5;
                }
                [v15 bounds];
                double v174 = CGRectGetWidth(v207);
                id result = [v15 superview];
                if (result)
                {
                  long long v175 = result;
                  double v70 = v174 * 0.5;
                  [result bounds];
                  CGFloat v177 = v176;
                  CGFloat v179 = v178;
                  CGFloat v181 = v180;
                  CGFloat v183 = v182;

                  v208.origin.x = v177;
                  v208.origin.y = v179;
                  v208.size.width = v181;
                  v208.size.height = v183;
                  double v79 = v173 + CGRectGetHeight(v208) * 0.5;
                  goto LABEL_53;
                }
                goto LABEL_76;
              }
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
              goto LABEL_77;
            }
            id result = [v13 superview];
            if (result)
            {
              uint64_t v119 = result;
              [result bounds];
              CGFloat v121 = v120;
              CGFloat v123 = v122;
              CGFloat v125 = v124;
              CGFloat v127 = v126;

              v195.origin.x = v121;
              v195.origin.y = v123;
              v195.size.width = v125;
              v195.size.height = v127;
              double v128 = CGRectGetWidth(v195);
              [v13 bounds];
              double v129 = CGRectGetWidth(v196);
              id result = [v13 superview];
              if (result)
              {
                uint64_t v130 = result;
                double v131 = v128 - v129 * 0.5;
                [result bounds];
                CGFloat v133 = v132;
                CGFloat v135 = v134;
                CGFloat v137 = v136;
                CGFloat v139 = v138;

                v197.origin.x = v133;
                v197.origin.y = v135;
                v197.size.width = v137;
                v197.size.height = v139;
                CGFloat v140 = CGRectGetHeight(v197) * 0.5;
                [v13 bounds];
                [v13 setCenter:v131, v140 - CGRectGetHeight(v198) * 0.5];
                double v141 = 0.0;
                if ((v184 & 1) == 0)
                {
                  [v15 bounds];
                  double v141 = CGRectGetHeight(v199) * 0.5;
                }
                id result = [v15 superview];
                if (result)
                {
                  uint64_t v142 = result;
                  [result bounds];
                  CGFloat v144 = v143;
                  CGFloat v146 = v145;
                  CGFloat v148 = v147;
                  CGFloat v150 = v149;

                  v200.origin.x = v144;
                  v200.origin.y = v146;
                  v200.size.width = v148;
                  v200.size.height = v150;
                  double v151 = CGRectGetWidth(v200);
                  [v15 bounds];
                  double v152 = CGRectGetWidth(v201);
                  id result = [v15 superview];
                  if (result)
                  {
                    long long v153 = result;
                    double v70 = v151 - v152 * 0.5;
                    [result bounds];
                    CGFloat v155 = v154;
                    CGFloat v157 = v156;
                    CGFloat v159 = v158;
                    CGFloat v161 = v160;

                    v202.origin.x = v155;
                    v202.origin.y = v157;
                    v202.size.width = v159;
                    v202.size.height = v161;
                    double v79 = v141 + CGRectGetHeight(v202) * 0.5;
                    goto LABEL_53;
                  }
                  goto LABEL_74;
                }
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
                goto LABEL_75;
              }
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  double v19 = *(void **)(v185 + qword_1004C8998);
  sub_1000AFE1C(v10, v19);
  [v19 bounds];
  CGFloat v20 = CGRectGetWidth(v187) * 0.5;
  [v19 bounds];
  [v10 setCenter:v20, CGRectGetHeight(v188) * 0.5];
  NSString v21 = String._bridgeToObjectiveC()();
  [v13 setText:v21];

  [v13 sizeToFit];
  id result = [v13 superview];
  if (!result)
  {
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v23 = result;
  sub_1000AFE1C(v13, result);

  NSString v24 = String._bridgeToObjectiveC()();
  [v15 setText:v24];

  [v15 sizeToFit];
  id result = [v15 superview];
  if (!result)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v25 = result;
  sub_1000AFE1C(v15, result);

  id result = [v13 font];
  if (!result)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v26 = result;
  [result pointSize];
  double v28 = v27;

  id result = [v15 font];
  if (!result)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  BOOL v29 = result;
  [result pointSize];
  double v31 = v30;

  if (v28 != v31)
  {
    id result = [v13 font];
    if (!result)
    {
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    uint64_t v32 = result;
    [result pointSize];
    double v34 = v33;

    id result = [v15 font];
    if (!result)
    {
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    __n128 v35 = result;
    [result pointSize];
    double v37 = v36;

    if (v34 >= v37) {
      uint64_t v38 = v15;
    }
    else {
      uint64_t v38 = v13;
    }
    id v39 = [v38 font];
    [v13 setFont:v39];
    [v15 setFont:v39];
  }
  id result = [v13 superview];
  if (!result) {
    goto LABEL_60;
  }
  float32x2_t v40 = result;
  [result bounds];
  CGFloat v42 = v41;
  CGFloat v44 = v43;
  CGFloat v46 = v45;
  CGFloat v48 = v47;

  v189.origin.x = v42;
  v189.origin.y = v44;
  v189.size.width = v46;
  v189.size.height = v48;
  double v49 = CGRectGetWidth(v189);
  id result = [v13 superview];
  if (!result)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  unint64_t v50 = result;
  [result bounds];
  CGFloat v52 = v51;
  CGFloat v54 = v53;
  CGFloat v56 = v55;
  CGFloat v58 = v57;

  v190.origin.x = v52;
  v190.origin.y = v54;
  v190.size.width = v56;
  v190.size.height = v58;
  [v13 setCenter:v49 * 0.5, CGRectGetHeight(v190) * 0.5];
  id result = [v15 superview];
  if (!result)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  simd_float4 v59 = result;
  [result bounds];
  CGFloat v61 = v60;
  CGFloat v63 = v62;
  CGFloat v65 = v64;
  CGFloat v67 = v66;

  v191.origin.x = v61;
  v191.origin.y = v63;
  v191.size.width = v65;
  v191.size.height = v67;
  double v68 = CGRectGetWidth(v191);
  id result = [v15 superview];
  if (!result)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  float32x4_t v69 = result;
  double v70 = v68 * 0.5;
  [result bounds];
  CGFloat v72 = v71;
  CGFloat v74 = v73;
  CGFloat v76 = v75;
  CGFloat v78 = v77;

  v192.origin.x = v72;
  v192.origin.y = v74;
  v192.size.width = v76;
  v192.size.height = v78;
  double v79 = CGRectGetHeight(v192) * 0.5;
LABEL_53:

  return [v15 setCenter:v70, v79];
}

id sub_1000AC604()
{
  return *(id *)(v0 + qword_1004C89A8);
}

double sub_1000AC614()
{
  [*(id *)(v0 + qword_1004C89A8) bounds];
  return v1;
}

void sub_1000AC65C()
{
  double v1 = v0;
  id v2 = [self sharedApplication];
  id v3 = [v2 preferredContentSizeCategory];

  LOBYTE(v2) = UIContentSizeCategory.isAccessibilityCategory.getter();
  char v30 = (char)v2;
  if (v2)
  {
    id v4 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:UIFontTextStyleHeadline];
    uint64_t v5 = qword_1004C8918;
    [v4 scaledValueForValue:*(double *)&v1[qword_1004C8918]];

    id v6 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:UIFontTextStyleHeadline];
    [v6 scaledValueForValue:*(double *)&v1[v5]];
    double v8 = v7;

    double v9 = 69.5;
    if (v8 <= 69.5) {
      double v9 = v8;
    }
    *(double *)&v1[v5] = v9;
    float v10 = v9 + v9 + 195.0 + 15.0;
    *(float *)&v1[qword_1004C88F8] = v10;
  }
  [v1 setAlpha:0.0];
  [v1 bounds];
  CGRectGetWidth(v33);
  sub_100012BE0();
  static UIDevice.isIPad()();
  NSString v11 = *(void **)&v1[qword_1004C89A8];
  CGSize.init(_:_:)();
  [v11 bounds];
  [v11 setBounds:];
  NSString v12 = self;
  id v13 = [v12 clearColor];
  [v11 setBackgroundColor:v13];

  [v1 center];
  [v11 setCenter:];
  [v1 addSubview:v11];
  id v14 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v11 bounds];
  [v14 setFrame:];
  id v15 = [v12 clearColor];
  [v14 setBackgroundColor:v15];

  [v11 addSubview:v14];
  id v16 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v14 bounds];
  CGRectGetWidth(v34);
  uint64_t v17 = qword_1004C8918;
  CGSize.init(_:_:)();
  [v16 bounds];
  [v16 setBounds:];
  [v14 bounds];
  [v16 setCenter:CGRectGetWidth(v35) * 0.5, *(double *)&v1[v17] * 0.5];
  id v18 = [v12 clearColor];
  [v16 setBackgroundColor:v18];

  [v14 addSubview:v16];
  sub_1000ACD60(v16);
  id v19 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v20 = [v12 clearColor];
  [v19 setBackgroundColor:v20];

  [v14 addSubview:v19];
  [v14 bounds];
  double Width = CGRectGetWidth(v36);
  if (v30)
  {
    CGSize.init(_:_:)();
    [v19 bounds];
    [v19 setBounds:];
    [v14 bounds];
    double v22 = CGRectGetWidth(v37);
    double v23 = *(double *)&v1[v17] + 97.5;
  }
  else
  {
    [v14 bounds:Width];
    CGFloat v24 = CGRectGetHeight(v38) - (*(double *)&v1[v17] + *(double *)&v1[v17]) + -15.0;
    CGSize.init(_:_:)();
    [v19 bounds];
    [v19 setBounds:];
    [v14 bounds];
    double v22 = CGRectGetWidth(v39);
    double v23 = v24 * 0.5 + *(double *)&v1[v17];
  }
  [v19 setCenter:v22 * 0.5, v23];
  sub_1000AD508(v19, v30 & 1);
  id v31 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v14 bounds];
  CGRectGetWidth(v40);
  CGSize.init(_:_:)();
  [v31 bounds];
  [v31 setBounds:];
  [v14 bounds];
  double v25 = CGRectGetWidth(v41);
  if (v30)
  {
    [v14 bounds];
    double Height = CGRectGetHeight(v42);
    double v27 = *(double *)&v1[v17] * -0.5;
  }
  else
  {
    double v28 = *(double *)&v1[v17];
    [v19 bounds];
    double Height = v28 + CGRectGetHeight(v43) + 15.0;
    double v27 = *(double *)&v1[v17] * 0.5;
  }
  [v31 setCenter:v25 * 0.5, Height + v27];
  id v29 = [v12 clearColor];
  [v31 setBackgroundColor:v29];

  [v14 addSubview:v31];
  sub_1000AE678(v31);
  sub_1000AB180();
  sub_1000F9250();
}

void sub_1000ACD60(void *a1)
{
  uint64_t v2 = v1;
  id v4 = *(void **)(v1 + qword_1004C8980);
  id v5 = [self mainBundle];
  v58._object = (void *)0xE000000000000000;
  v6._object = (void *)0x8000000100423FB0;
  v6._countAndFlagsBits = 0xD000000000000022;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v58._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v58);

  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 setText:v8];

  if (qword_1004C31C8 != -1) {
    swift_once();
  }
  double v9 = (void *)qword_1004F8A40;
  float v10 = *(void **)algn_1004F8A48;
  if (byte_1004F8A50)
  {
    char v11 = byte_1004F8A60;
    uint64_t v12 = qword_1004F8A58;
    char v13 = byte_1004D2600;
    id v14 = (id)qword_1004F8A40;
    id v15 = sub_100081B28(v13, v12, v11);
    sub_1000286C0(v9, v10, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v16 = *(id *)algn_1004F8A48;
    }
    else {
      id v16 = (id)qword_1004F8A40;
    }
    id v15 = v16;
  }
  [v4 setTextColor:v15];

  uint64_t v17 = self;
  id v18 = [v17 clearColor];
  [v4 setBackgroundColor:v18];

  id v19 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:UIFontTextStyleHeadline];
  id v20 = self;
  id v21 = [v20 preferredFontForTextStyle:UIFontTextStyleHeadline];
  id v22 = [v21 fontDescriptor];

  id v23 = [v22 fontDescriptorWithSymbolicTraits:2];
  if (!v23)
  {
    __break(1u);
    goto LABEL_27;
  }
  id v24 = [v20 fontWithDescriptor:v23 size:0.0];

  id v25 = [v19 scaledFontForFont:v24 maximumPointSize:28.0];
  [v4 setFont:v25];

  [v4 setTextAlignment:1];
  [v4 sizeToFit];
  id v26 = [v4 font];
  if (!v26)
  {
LABEL_27:
    __break(1u);
    return;
  }
  double v27 = v26;
  [v26 descender];
  double v29 = v28;

  [a1 bounds];
  CGFloat v30 = CGRectGetWidth(v59) * 0.5;
  [a1 bounds];
  CGFloat v31 = CGRectGetHeight(v60) + -15.0;
  [v4 bounds];
  [v4 setCenter:v30, v31 - v32 * 0.5 - v29];
  [a1 addSubview:v4];
  [a1 bounds];
  double Width = CGRectGetWidth(v61);
  double v34 = *(double *)(v2 + qword_1004C8910);
  id v35 = [self sharedApplication];
  id v36 = [v35 preferredContentSizeCategory];

  LOBYTE(v35) = UIContentSizeCategory.isAccessibilityCategory.getter();
  if ((v35 & 1) == 0)
  {
    [v4 bounds];
    if (Width + v34 * -4.0 < v37)
    {
      [v4 frame];
      CGRect.centerPoint.getter();
      [v4 frame];
      CGRectGetHeight(v62);
      CGSize.init(_:_:)();
      CGRect.init(centerPoint:size:)();
      [v4 setFrame:];
    }
  }
  CGRect v38 = a1;
  CGRect v39 = *(void **)(v2 + qword_1004C89B0);
  CGSize.init(_:_:)();
  [v39 bounds];
  [v39 setBounds:];
  uint64_t v40 = v2;
  if (*(unsigned char *)(v2 + qword_1004C89A0) == 1)
  {
    double v41 = v34 * 0.5;
    double v42 = v34 * 0.5 + 16.0;
  }
  else
  {
    [v38 bounds];
    CGFloat v43 = CGRectGetWidth(v63);
    double v41 = v34 * 0.5;
    double v42 = v43 + -16.0 - v34 * 0.5;
  }
  [v39 setCenter:v42, 30.0 - v41];
  [v39 setUserInteractionEnabled:0];
  CGFloat v44 = (void *)qword_1004F8A40;
  double v45 = *(void **)algn_1004F8A48;
  if (byte_1004F8A50)
  {
    char v46 = byte_1004F8A60;
    uint64_t v47 = qword_1004F8A58;
    CGFloat v48 = v17;
    id v49 = v19;
    char v50 = byte_1004D2600;
    id v51 = (id)qword_1004F8A40;
    LOBYTE(v51) = v50;
    id v19 = v49;
    uint64_t v17 = v48;
    id v52 = sub_100081B28((char)v51, v47, v46);
    sub_1000286C0(v44, v45, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v53 = *(id *)algn_1004F8A48;
    }
    else {
      id v53 = (id)qword_1004F8A40;
    }
    id v52 = v53;
  }
  [v39 setTintColor:v52];

  [v38 addSubview:v39];
  id v54 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v39 bounds];
  CGRectGetWidth(v64);
  [v39 bounds];
  CGRectGetHeight(v65);
  CGSize.init(_:_:)();
  [v54 bounds];
  [v54 setBounds:];
  [v39 center];
  [v54 setCenter:];
  id v55 = [v17 clearColor];
  [v54 setBackgroundColor:v55];

  [v54 setUserInteractionEnabled:1];
  [v38 addSubview:v54];
  id v56 = [objc_allocWithZone((Class)UITapGestureRecognizer) initWithTarget:v40 action:"close"];
  [v54 addGestureRecognizer:v56];
}

void sub_1000AD508(void *a1, char a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    id v5 = *(void **)(v2 + qword_1004C89B8);
    CGSize.init(_:_:)();
    [v5 bounds];
    [v5 setBounds:];
    [a1 bounds];
    [v5 setCenter:CGRectGetWidth(v135) * 0.5, 150.0];
    if (qword_1004C31D0 != -1) {
      swift_once();
    }
    Swift::String v6 = (void *)qword_1004F8A68;
    id v7 = qword_1004F8A70;
    if (byte_1004F8A78)
    {
      char v8 = byte_1004F8A88;
      uint64_t v9 = qword_1004F8A80;
      char v10 = byte_1004D2600;
      id v11 = (id)qword_1004F8A68;
      LOBYTE(v11) = v10;
      uint64_t v3 = v132;
      id v12 = sub_100081B28((char)v11, v9, v8);
      sub_1000286C0(v6, v7, 1);
    }
    else
    {
      if (byte_1004D2600) {
        id v25 = qword_1004F8A70;
      }
      else {
        id v25 = (id)qword_1004F8A68;
      }
      id v12 = v25;
    }
    [v5 setBackgroundColor:v12];

    [a1 addSubview:v5];
    id v27 = [objc_allocWithZone((Class)UIView) init];
    [v5 frame];
    double v28 = *(double *)(v3 + qword_1004C8940);
    [v27 bounds];
    [v27 setBounds:];
    [v27 bounds];
    double v30 = v29 * 0.5 + 16.0;
    [v5 center];
    [v27 setCenter:v30];
    CGFloat v31 = self;
    id v32 = [v31 clearColor];
    [v27 setBackgroundColor:v32];

    [a1 addSubview:v27];
    CGRect v33 = *(void **)(v3 + qword_1004C8988);
    id v128 = v31;
    id v34 = [v31 clearColor];
    [v33 setBackgroundColor:v34];

    [v33 setTextAlignment:1];
    sub_1001CD778();
    id v36 = v35;
    id v126 = self;
    id v37 = [v126 fontWithDescriptor:v36 size:0.0];

    id v131 = v33;
    [v33 setFont:v37];

    if (qword_1004C31C8 != -1) {
      swift_once();
    }
    CGRect v39 = (void *)qword_1004F8A40;
    CGRect v38 = *(void **)algn_1004F8A48;
    if (byte_1004F8A50)
    {
      char v40 = byte_1004F8A60;
      uint64_t v41 = qword_1004F8A58;
      char v42 = byte_1004D2600;
      id v43 = (id)qword_1004F8A40;
      CGFloat v44 = &off_1004B7000;
      id v45 = sub_100081B28(v42, v41, v40);
      sub_1000286C0(v39, v38, 1);
    }
    else
    {
      CGFloat v44 = &off_1004B7000;
      if (byte_1004D2600) {
        id v46 = *(id *)algn_1004F8A48;
      }
      else {
        id v46 = (id)qword_1004F8A40;
      }
      id v45 = v46;
    }
    [v131 setTextColor:v45];

    CGRect v63 = *(void **)(v132 + qword_1004C8998);
    [a1 bounds];
    CGRectGetWidth(v141);
    [v63 bounds];
    [v63 setBounds:];
    [a1 bounds];
    [v63 setFrame:CGRectMake(CGRectGetWidth(v142) * 0.5, 45.0, 0.0, 0.0)];
    id v64 = [v128 clearColor];
    [v63 setBackgroundColor:v64];

    [a1 addSubview:v63];
    CGRect v65 = *(void **)(v132 + qword_1004C8978);
    id v66 = [v128 clearColor];
    [v65 setBackgroundColor:v66];

    [v65 setTextAlignment:1];
    id v67 = [v126 systemFontOfSize:60.0 weight:UIFontWeightRegular];
    [v65 setFont:v67];

    if (qword_1004C31C0 != -1) {
      swift_once();
    }
    float32x4_t v69 = (void *)qword_1004F8A18;
    id v68 = qword_1004F8A20;
    if (byte_1004F8A28)
    {
      char v70 = byte_1004F8A38;
      uint64_t v71 = qword_1004F8A30;
      char v72 = byte_1004D2600;
      id v73 = (id)qword_1004F8A18;
      id v74 = sub_100081B28(v72, v71, v70);
      sub_1000286C0(v69, v68, 1);
    }
    else
    {
      if (byte_1004D2600) {
        id v75 = qword_1004F8A20;
      }
      else {
        id v75 = (id)qword_1004F8A18;
      }
      id v74 = v75;
    }
    [v65 setTextColor:v74];

    [v63 addSubview:v65];
    id v133 = [objc_allocWithZone((Class)UIView) init];
    [v27 bounds];
    [v133 bounds];
    [v133 setBounds:];
    [v125 frame];
    double v93 = v28 + CGRectGetMaxX(v148);
    [v133 bounds];
    double v95 = v93 + v94 * 0.5;
    [v27 center];
    [v133 setCenter:v95];
    id v96 = [v128 clearColor];
    [v133 setBackgroundColor:v96];

    [a1 addSubview:v133];
    CGFloat v97 = *(void **)(v132 + qword_1004C8990);
    id v98 = [v128 clearColor];
    [v97 setBackgroundColor:v98];

    [v97 setTextAlignment:1];
    sub_1001CD778();
    NSString v100 = v99;
    id v101 = [v126 fontWithDescriptor:v99 size:0.0];

    [v97 setFont:v101];
    NSString v102 = (void *)qword_1004F8A40;
    NSString v103 = *(void **)algn_1004F8A48;
    if (byte_1004F8A50)
    {
      char v104 = byte_1004F8A60;
      uint64_t v105 = qword_1004F8A58;
      char v106 = byte_1004D2600;
      id v107 = (id)qword_1004F8A40;
      id v108 = sub_100081B28(v106, v105, v104);
      sub_1000286C0(v102, v103, 1);
    }
    else
    {
      if (byte_1004D2600) {
        id v109 = *(id *)algn_1004F8A48;
      }
      else {
        id v109 = (id)qword_1004F8A40;
      }
      id v108 = v109;
    }
    [v97 setTextColor:v108];

    if (*(unsigned char *)(v132 + qword_1004C89A0) == 1)
    {
      [v133 addSubview:v131];
      [v27 addSubview:v97];
    }
    else
    {
      [v27 addSubview:v131];
      [v133 addSubview:v97];
    }
  }
  else
  {
    id v13 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
    [a1 bounds];
    CGRectGetHeight(v136);
    CGSize.init(_:_:)();
    [v13 bounds];
    [v13 setBounds:];
    int v14 = *(unsigned __int8 *)(v2 + qword_1004C89A0);
    [a1 bounds];
    double Width = CGRectGetWidth(v137);
    double v16 = *(double *)(v3 + qword_1004C8928);
    LODWORD(v123) = v14;
    if (v14) {
      double v16 = 1.0 - v16;
    }
    double v17 = Width * v16;
    [a1 bounds:v123];
    id v130 = v13;
    [v13 setCenter:v17, CGRectGetHeight(v138) * 0.5];
    if (qword_1004C31D0 != -1) {
      swift_once();
    }
    id v18 = (void *)qword_1004F8A68;
    id v19 = qword_1004F8A70;
    if (byte_1004F8A78)
    {
      char v20 = byte_1004F8A88;
      uint64_t v21 = qword_1004F8A80;
      char v22 = byte_1004D2600;
      id v23 = (id)qword_1004F8A68;
      id v24 = sub_100081B28(v22, v21, v20);
      sub_1000286C0(v18, v19, 1);
    }
    else
    {
      if (byte_1004D2600) {
        id v26 = qword_1004F8A70;
      }
      else {
        id v26 = (id)qword_1004F8A68;
      }
      id v24 = v26;
    }
    [v130 setBackgroundColor:v24];

    [a1 addSubview:v130];
    id v27 = [objc_allocWithZone((Class)UIView) init];
    [v130 frame];
    double v47 = *(double *)(v3 + qword_1004C8940);
    [a1 bounds];
    CGRectGetHeight(v139);
    [v27 bounds];
    [v27 setBounds:];
    [v27 bounds];
    double v49 = v48 * 0.5 + 16.0;
    [a1 bounds];
    [v27 setCenter:v49, CGRectGetHeight(v140) * 0.5];
    char v50 = self;
    id v51 = [v50 clearColor];
    [v27 setBackgroundColor:v51];

    [a1 addSubview:v27];
    id v52 = *(void **)(v3 + qword_1004C8978);
    id v53 = [v50 clearColor];
    [v52 setBackgroundColor:v53];

    [v52 setTextAlignment:1];
    id v127 = self;
    id v54 = [v127 systemFontOfSize:60.0 weight:UIFontWeightRegular];
    id v129 = v52;
    [v52 setFont:v54];

    if (qword_1004C31C0 != -1) {
      swift_once();
    }
    id v55 = (void *)qword_1004F8A18;
    id v56 = qword_1004F8A20;
    if (byte_1004F8A28)
    {
      char v57 = byte_1004F8A38;
      uint64_t v58 = qword_1004F8A30;
      char v59 = byte_1004D2600;
      id v60 = (id)qword_1004F8A18;
      LOBYTE(v60) = v59;
      uint64_t v3 = v132;
      id v61 = sub_100081B28((char)v60, v58, v57);
      sub_1000286C0(v55, v56, 1);
    }
    else
    {
      if (byte_1004D2600) {
        id v62 = qword_1004F8A20;
      }
      else {
        id v62 = (id)qword_1004F8A18;
      }
      id v61 = v62;
    }
    [v129 setTextColor:v61];

    id v133 = [objc_allocWithZone((Class)UIView) init];
    [a1 bounds];
    double v76 = CGRectGetWidth(v143);
    [v130 frame];
    double v77 = v76 - CGRectGetMaxX(v144) - v47 + -16.0;
    [a1 bounds];
    CGRectGetHeight(v145);
    [v133 bounds];
    [v133 setBounds:];
    [v130 frame];
    double v78 = v77 * 0.5 + v47 + CGRectGetMaxX(v146);
    [a1 bounds];
    [v133 setCenter:v78, CGRectGetHeight(v147) * 0.5];
    id v79 = [v50 clearColor];
    [v133 setBackgroundColor:v79];

    [a1 addSubview:v133];
    simd_float4 v80 = *(void **)(v3 + qword_1004C8988);
    id v81 = [v50 clearColor];
    [v80 setBackgroundColor:v81];

    sub_1001CD778();
    CGFloat v83 = v82;
    id v84 = [v127 fontWithDescriptor:v82 size:0.0];

    [v80 setFont:v84];
    if (qword_1004C31C8 != -1) {
      swift_once();
    }
    CGFloat v85 = (void *)qword_1004F8A40;
    double v86 = *(void **)algn_1004F8A48;
    if (byte_1004F8A50)
    {
      char v87 = byte_1004F8A60;
      uint64_t v88 = qword_1004F8A58;
      char v89 = byte_1004D2600;
      id v90 = (id)qword_1004F8A40;
      LOBYTE(v90) = v89;
      uint64_t v3 = v132;
      id v91 = sub_100081B28((char)v90, v88, v87);
      sub_1000286C0(v85, v86, 1);
    }
    else
    {
      if (byte_1004D2600) {
        id v92 = *(id *)algn_1004F8A48;
      }
      else {
        id v92 = (id)qword_1004F8A40;
      }
      id v91 = v92;
    }
    [v80 setTextColor:v91];

    double v110 = *(void **)(v3 + qword_1004C8990);
    id v111 = [v50 clearColor];
    [v110 setBackgroundColor:v111];

    sub_1001CD778();
    double v113 = v112;
    id v114 = [v127 fontWithDescriptor:v112 size:0.0];

    [v110 setFont:v114];
    double v115 = (void *)qword_1004F8A40;
    double v116 = *(void **)algn_1004F8A48;
    if (byte_1004F8A50)
    {
      char v117 = byte_1004F8A60;
      uint64_t v118 = qword_1004F8A58;
      char v119 = byte_1004D2600;
      id v120 = (id)qword_1004F8A40;
      id v121 = sub_100081B28(v119, v118, v117);
      sub_1000286C0(v115, v116, 1);
    }
    else
    {
      if (byte_1004D2600) {
        id v122 = *(id *)algn_1004F8A48;
      }
      else {
        id v122 = (id)qword_1004F8A40;
      }
      id v121 = v122;
    }
    [v110 setTextColor:v121];

    if (v124)
    {
      [v80 setTextAlignment:2];
      [v110 setTextAlignment:2];
      [v133 addSubview:v129];
      [v27 addSubview:v80];
      [v27 addSubview:v110];
    }
    else
    {
      [v80 setTextAlignment:0];
      [v110 setTextAlignment:0];
      [v27 addSubview:v129];
      [v133 addSubview:v80];
      [v133 addSubview:v110];
    }
  }
}

void sub_1000AE678(void *a1)
{
  uint64_t v2 = v1;
  id v4 = *(void **)(v1 + qword_1004C89C0);
  [a1 bounds];
  CGRectGetWidth(v40);
  CGSize.init(_:_:)();
  [v4 bounds];
  [v4 setBounds:];
  [a1 bounds];
  [v4 setCenter:CGRectGetWidth(v41) * 0.5, 0.0];
  if (qword_1004C31D0 != -1) {
    swift_once();
  }
  id v5 = (void *)qword_1004F8A68;
  id v6 = qword_1004F8A70;
  if (byte_1004F8A78)
  {
    char v7 = byte_1004F8A88;
    uint64_t v8 = qword_1004F8A80;
    char v9 = byte_1004D2600;
    id v10 = (id)qword_1004F8A68;
    id v11 = sub_100081B28(v9, v8, v7);
    sub_1000286C0(v5, v6, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v12 = qword_1004F8A70;
    }
    else {
      id v12 = (id)qword_1004F8A68;
    }
    id v11 = v12;
  }
  [v4 setBackgroundColor:v11];

  [a1 addSubview:v4];
  [a1 bounds];
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  id v21 = [self clearColor];
  if (qword_1004C2ED0 != -1) {
    swift_once();
  }
  char v22 = (void *)qword_1004F86B0;
  id v23 = objc_allocWithZone((Class)type metadata accessor for ButtonWithCustomBackgroundColor());
  id v24 = sub_100043284(v21, v22, v14, v16, v18, v20, 16.0);
  id v25 = [self mainBundle];
  v39._object = (void *)0xE000000000000000;
  v26._object = (void *)0x8000000100423F90;
  v26._countAndFlagsBits = 0xD000000000000010;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  v39._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v39);

  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v24 setTitle:v28 forState:0];

  if (qword_1004C2EC0 != -1) {
    swift_once();
  }
  [v24 setTitleColor:qword_1004F86A0 forState:0];
  if (qword_1004C2EC8 != -1) {
    swift_once();
  }
  [v24 setTitleColor:qword_1004F86A8 forState:1];
  id v37 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:UIFontTextStyleHeadline];
  id v29 = [v24 titleLabel];
  if (v29)
  {
    double v30 = v29;
    CGFloat v31 = self;
    id v32 = [v31 preferredFontForTextStyle:UIFontTextStyleHeadline];
    id v33 = [v32 fontDescriptor];

    id v34 = [v33 fontDescriptorWithSymbolicTraits:2];
    if (!v34)
    {
      __break(1u);
      return;
    }
    id v35 = [v31 fontWithDescriptor:v34 size:0.0];

    id v36 = [v37 scaledFontForFont:v35 maximumPointSize:28.0];
    [v30 setFont:v36];
  }
  [v24 addTarget:v2 action:"copyMeasurement" forControlEvents:64];
  [a1 addSubview:v24];
}

id sub_1000AEB84()
{
  id result = [v0 center];
  uint64_t v2 = &v0[qword_1004C86F8];
  *(void *)uint64_t v2 = v3;
  *((void *)v2 + 1) = v4;
  return result;
}

void sub_1000AEBBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + qword_1004C8980);
  if (qword_1004C31C8 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)qword_1004F8A40;
  uint64_t v4 = *(void **)algn_1004F8A48;
  if (byte_1004F8A50)
  {
    char v5 = byte_1004F8A60;
    uint64_t v6 = qword_1004F8A58;
    char v7 = byte_1004D2600;
    id v8 = (id)qword_1004F8A40;
    id v9 = sub_100081B28(v7, v6, v5);
    sub_1000286C0(v3, v4, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v10 = *(id *)algn_1004F8A48;
    }
    else {
      id v10 = (id)qword_1004F8A40;
    }
    id v9 = v10;
  }
  [v2 setTextColor:v9];

  id v11 = *(void **)(v1 + qword_1004C8978);
  if (qword_1004C31C0 != -1) {
    swift_once();
  }
  id v12 = (void *)qword_1004F8A18;
  id v13 = qword_1004F8A20;
  if (byte_1004F8A28)
  {
    char v14 = byte_1004F8A38;
    uint64_t v15 = qword_1004F8A30;
    char v16 = byte_1004D2600;
    id v17 = (id)qword_1004F8A18;
    id v18 = sub_100081B28(v16, v15, v14);
    sub_1000286C0(v12, v13, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v19 = qword_1004F8A20;
    }
    else {
      id v19 = (id)qword_1004F8A18;
    }
    id v18 = v19;
  }
  [v11 setTextColor:v18];

  double v20 = *(void **)(v1 + qword_1004C8988);
  id v21 = (void *)qword_1004F8A40;
  char v22 = *(void **)algn_1004F8A48;
  if (byte_1004F8A50)
  {
    char v23 = byte_1004F8A60;
    uint64_t v24 = qword_1004F8A58;
    char v25 = byte_1004D2600;
    id v26 = (id)qword_1004F8A40;
    id v27 = sub_100081B28(v25, v24, v23);
    sub_1000286C0(v21, v22, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v28 = *(id *)algn_1004F8A48;
    }
    else {
      id v28 = (id)qword_1004F8A40;
    }
    id v27 = v28;
  }
  [v20 setTextColor:v27];

  id v29 = *(void **)(v1 + qword_1004C8990);
  double v30 = (void *)qword_1004F8A40;
  CGFloat v31 = *(void **)algn_1004F8A48;
  if (byte_1004F8A50)
  {
    char v32 = byte_1004F8A60;
    uint64_t v33 = qword_1004F8A58;
    char v34 = byte_1004D2600;
    id v35 = (id)qword_1004F8A40;
    id v36 = sub_100081B28(v34, v33, v32);
    sub_1000286C0(v30, v31, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v37 = *(id *)algn_1004F8A48;
    }
    else {
      id v37 = (id)qword_1004F8A40;
    }
    id v36 = v37;
  }
  [v29 setTextColor:v36];

  CGRect v38 = *(void **)(v1 + qword_1004C89B0);
  Swift::String v39 = (void *)qword_1004F8A40;
  CGRect v40 = *(void **)algn_1004F8A48;
  if (byte_1004F8A50)
  {
    char v41 = byte_1004F8A60;
    uint64_t v42 = qword_1004F8A58;
    char v43 = byte_1004D2600;
    id v44 = (id)qword_1004F8A40;
    id v45 = sub_100081B28(v43, v42, v41);
    sub_1000286C0(v39, v40, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v46 = *(id *)algn_1004F8A48;
    }
    else {
      id v46 = (id)qword_1004F8A40;
    }
    id v45 = v46;
  }
  [v38 setTintColor:v45];

  double v47 = *(void **)(v1 + qword_1004C89C0);
  if (qword_1004C31D0 != -1) {
    swift_once();
  }
  double v48 = (void *)qword_1004F8A68;
  id v49 = qword_1004F8A70;
  if (byte_1004F8A78)
  {
    char v50 = byte_1004F8A88;
    uint64_t v51 = qword_1004F8A80;
    char v52 = byte_1004D2600;
    id v53 = (id)qword_1004F8A68;
    id v54 = sub_100081B28(v52, v51, v50);
    sub_1000286C0(v48, v49, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v55 = qword_1004F8A70;
    }
    else {
      id v55 = (id)qword_1004F8A68;
    }
    id v54 = v55;
  }
  [v47 setBackgroundColor:v54];

  id v56 = *(void **)(v1 + qword_1004C89B8);
  char v57 = (void *)qword_1004F8A68;
  id v58 = qword_1004F8A70;
  if (byte_1004F8A78)
  {
    char v59 = byte_1004F8A88;
    uint64_t v60 = qword_1004F8A80;
    char v61 = byte_1004D2600;
    id v62 = (id)qword_1004F8A68;
    id v64 = sub_100081B28(v61, v60, v59);
    sub_1000286C0(v57, v58, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v63 = qword_1004F8A70;
    }
    else {
      id v63 = (id)qword_1004F8A68;
    }
    id v64 = v63;
  }
  [v56 setBackgroundColor:v64];
}

void *sub_1000AF098(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)&v5[qword_1004C88F8] = 1128464384;
  *(_DWORD *)&v5[qword_1004C8900] = 1136361472;
  *(void *)&v5[qword_1004C8908] = 0x4038000000000000;
  uint64_t v10 = qword_1004C8910;
  uint64_t v11 = qword_1004C2EB8;
  id v12 = v5;
  if (v11 != -1) {
    swift_once();
  }
  *(void *)&v5[v10] = qword_1004F8698;
  *(void *)&v12[qword_1004C8918] = 0x4046800000000000;
  *(void *)&v12[qword_1004C8920] = 0x402E000000000000;
  uint64_t v13 = qword_1004C8928;
  if (qword_1004C2EA0 != -1) {
    swift_once();
  }
  *(void *)&v12[v13] = qword_1004F8680;
  uint64_t v14 = qword_1004C8930;
  if (qword_1004C2EA8 != -1) {
    swift_once();
  }
  *(void *)&v12[v14] = qword_1004F8688;
  *(void *)&v12[qword_1004C8938] = 0x3FE0000000000000;
  uint64_t v15 = qword_1004C8940;
  if (qword_1004C2EB0 != -1) {
    swift_once();
  }
  *(void *)&v12[v15] = qword_1004F8690;
  *(void *)&v12[qword_1004C8948] = 0x402E000000000000;
  *(void *)&v12[qword_1004C8950] = 0x4068600000000000;
  *(void *)&v12[qword_1004C8958] = 0x4056800000000000;
  *(void *)&v12[qword_1004C8960] = 0x4056800000000000;
  *(void *)&v12[qword_1004C8968] = 0x402E000000000000;
  *(void *)&v12[qword_1004C8970] = 0x4051600000000000;
  uint64_t v16 = qword_1004C8978;
  *(void *)&v12[v16] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v17 = qword_1004C8980;
  *(void *)&v12[v17] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v18 = qword_1004C8988;
  *(void *)&v12[v18] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v19 = qword_1004C8990;
  *(void *)&v12[v19] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v20 = qword_1004C8998;
  *(void *)&v12[v20] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v21 = qword_1004C89A0;
  id v22 = [self sharedApplication];
  id v23 = [v22 userInterfaceLayoutDirection];

  v12[v21] = v23 == (id)1;
  uint64_t v24 = qword_1004C89A8;
  *(void *)&v12[v24] = [objc_allocWithZone((Class)UIView) init];
  type metadata accessor for ViewController();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v26 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [self imageNamed:v27 inBundle:v26 compatibleWithTraitCollection:0];

  if (v28)
  {
    id v29 = [v28 imageWithRenderingMode:2];
  }
  else
  {
    id v29 = 0;
  }
  uint64_t v30 = qword_1004C89B0;
  id v31 = [objc_allocWithZone((Class)UIImageView) initWithImage:v29];

  *(void *)&v12[v30] = v31;
  uint64_t v32 = qword_1004C89B8;
  *(void *)&v12[v32] = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v33 = qword_1004C89C0;
  *(void *)&v12[v33] = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];

  return sub_1000AAB70(a1, a2, a3, a4, a5);
}

id sub_1000AF538(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v2[qword_1004C88F8] = 1128464384;
  *(_DWORD *)&v2[qword_1004C8900] = 1136361472;
  *(void *)&v2[qword_1004C8908] = 0x4038000000000000;
  uint64_t v5 = qword_1004C8910;
  uint64_t v6 = qword_1004C2EB8;
  char v7 = v2;
  if (v6 != -1) {
    swift_once();
  }
  *(void *)&v2[v5] = qword_1004F8698;
  *(void *)&v7[qword_1004C8918] = 0x4046800000000000;
  *(void *)&v7[qword_1004C8920] = 0x402E000000000000;
  uint64_t v8 = qword_1004C8928;
  if (qword_1004C2EA0 != -1) {
    swift_once();
  }
  *(void *)&v7[v8] = qword_1004F8680;
  uint64_t v9 = qword_1004C8930;
  if (qword_1004C2EA8 != -1) {
    swift_once();
  }
  *(void *)&v7[v9] = qword_1004F8688;
  *(void *)&v7[qword_1004C8938] = 0x3FE0000000000000;
  uint64_t v10 = qword_1004C8940;
  if (qword_1004C2EB0 != -1) {
    swift_once();
  }
  *(void *)&v7[v10] = qword_1004F8690;
  *(void *)&v7[qword_1004C8948] = 0x402E000000000000;
  *(void *)&v7[qword_1004C8950] = 0x4068600000000000;
  *(void *)&v7[qword_1004C8958] = 0x4056800000000000;
  *(void *)&v7[qword_1004C8960] = 0x4056800000000000;
  *(void *)&v7[qword_1004C8968] = 0x402E000000000000;
  *(void *)&v7[qword_1004C8970] = 0x4051600000000000;
  uint64_t v11 = qword_1004C8978;
  *(void *)&v7[v11] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v12 = qword_1004C8980;
  *(void *)&v7[v12] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v13 = qword_1004C8988;
  *(void *)&v7[v13] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v14 = qword_1004C8990;
  *(void *)&v7[v14] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v15 = qword_1004C8998;
  *(void *)&v7[v15] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v16 = qword_1004C89A0;
  id v17 = [self sharedApplication];
  id v18 = [v17 userInterfaceLayoutDirection];

  v7[v16] = v18 == (id)1;
  uint64_t v19 = qword_1004C89A8;
  *(void *)&v7[v19] = [objc_allocWithZone((Class)UIView) init];
  type metadata accessor for ViewController();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v21 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [self imageNamed:v22 inBundle:v21 compatibleWithTraitCollection:0];

  if (v23)
  {
    id v24 = [v23 imageWithRenderingMode:2];
  }
  else
  {
    id v24 = 0;
  }
  uint64_t v25 = qword_1004C89B0;
  id v26 = [objc_allocWithZone((Class)UIImageView) initWithImage:v24];

  *(void *)&v7[v25] = v26;
  uint64_t v27 = qword_1004C89B8;
  *(void *)&v7[v27] = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v28 = qword_1004C89C0;
  *(void *)&v7[v28] = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];

  v31.receiver = v7;
  v31.super_class = ObjectType;
  id v29 = [super initWithCoder:a1];

  return v29;
}

id sub_1000AF9D8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000AF538(a3);
}

void sub_1000AFA00()
{
  uint64_t v1 = *(void **)(v0 + qword_1004C89C0);
}

void sub_1000AFAB0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + qword_1004C89C0);
}

uint64_t type metadata accessor for LabelDetailsPlatter()
{
  uint64_t result = qword_1004C89F0;
  if (!qword_1004C89F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000AFBB8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000AFC50()
{
  return type metadata accessor for LabelDetailsPlatter();
}

double sub_1000AFC58()
{
  uint64_t v1 = v0 + qword_1004C86F0;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  id v4 = [self generalPasteboard];
  id v5 = [*(id *)(v0 + qword_1004C8978) text];
  [v4 setString:v5];

  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v6 = *(void *)(v1 + 8);
    uint64_t v7 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v7, v6);
    swift_unknownObjectRelease();
  }
  if (qword_1004C2C10 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1004F8458;

  uint64_t v9 = v8 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
  swift_beginAccess();
  double result = *(double *)(v9 + 56) + 1.0;
  *(double *)(v9 + 56) = result;
  return result;
}

id sub_1000AFE1C(void *a1, void *a2)
{
  [a1 bounds];
  double Width = CGRectGetWidth(v10);
  [a2 bounds];
  double v5 = CGRectGetWidth(v11);
  if (v5 >= Width)
  {
    uint64_t v6 = "setAdjustsFontSizeToFitWidth:";
    uint64_t v7 = a1;
  }
  else
  {
    [a2 bounds];
    CGRectGetWidth(v12);
    [a1 bounds];
    CGRectGetHeight(v13);
    CGSize.init(_:_:)();
    [a1 bounds];
    [a1 setBounds:];
    [a1 setAdjustsFontSizeToFitWidth:1];
    uint64_t v6 = "setMinimumScaleFactor:";
    double v5 = 0.3;
    uint64_t v7 = a1;
  }
  return [v7 v6:v5];
}

void *initializeBufferWithCopyOfBuffer for SnapPoint(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for SnapPoint(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for SnapPoint(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for SnapPoint(uint64_t a1, _OWORD *a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for SnapPoint(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SnapPoint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)double result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)double result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WorldEdgeState()
{
  return &type metadata for WorldEdgeState;
}

uint64_t sub_1000B010C(void **a1, void **a2)
{
  return sub_1000B01A0(*a1, a1[1], *a2, a2[1]);
}

unint64_t sub_1000B0124(uint64_t a1)
{
  unint64_t result = sub_1000B014C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B014C()
{
  unint64_t result = qword_1004C8CA8;
  if (!qword_1004C8CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8CA8);
  }
  return result;
}

uint64_t sub_1000B01A0(void *a1, void *a2, void *a3, void *a4)
{
  if (a1)
  {
    if (!a3) {
      return 0;
    }
    uint64_t v7 = a1;
    type metadata accessor for WorldEdge();
    id v8 = a3;
    id v9 = v7;
    LOBYTE(v7) = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0) {
      return 0;
    }
  }
  else if (a3)
  {
    return 0;
  }
  if (a2)
  {
    if (a4)
    {
      type metadata accessor for WorldEdge();
      id v10 = a4;
      id v11 = a2;
      char v12 = static NSObject.== infix(_:_:)();

      if (v12) {
        return 1;
      }
    }
  }
  else if (!a4)
  {
    return 1;
  }
  return 0;
}

void sub_1000B0274()
{
  qword_1004C8CB0 = 0x4028000000000000;
}

void sub_1000B0284()
{
  qword_1004C8CB8 = 0x402A000000000000;
}

void sub_1000B0294()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setText:v2];

  uint64_t v3 = self;
  id v4 = [v3 preferredFontForTextStyle:UIFontTextStyleBody];
  id v5 = [v4 fontDescriptor];

  id v6 = [v5 fontDescriptorWithSymbolicTraits:2];
  if (v6)
  {
    id v7 = [v3 fontWithDescriptor:v6 size:0.0];

    [v1 setFont:v7];
    id v8 = [self secondaryLabelColor];
    [v1 setTextColor:v8];

    NSString v9 = String._bridgeToObjectiveC()();
    [v1 setAccessibilityIdentifier:v9];

    id v10 = *(void **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits];
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 setText:v11];

    [v10 setUserInteractionEnabled:1];
    id v12 = [v3 preferredFontForTextStyle:UIFontTextStyleLargeTitle];
    [v10 setFont:v12];

    NSString v13 = String._bridgeToObjectiveC()();
    [v10 setAccessibilityIdentifier:v13];

    uint64_t v14 = *(void **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels];
    NSString v15 = String._bridgeToObjectiveC()();
    [v14 setAccessibilityIdentifier:v15];

    [v0 addSubview:v1];
    [v0 addSubview:v10];
    [v0 addSubview:v14];
  }
  else
  {
    __break(1u);
  }
}

void sub_1000B056C()
{
  uint64_t v1 = v0;
  NSString v2 = *(void **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  char v70 = *(char **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels];
  [v70 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100012894((uint64_t *)&unk_1004CEA00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003F94A0;
  id v5 = [v2 leadingAnchor];
  id v6 = [v1 leadingAnchor];
  if (qword_1004C27E8 != -1) {
    swift_once();
  }
  id v7 = [v5 constraintEqualToAnchor:v6 constant:*(double *)&qword_1004F7E00];

  *(void *)(v4 + 32) = v7;
  id v8 = [v3 leadingAnchor];
  id v9 = [v1 leadingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9 constant:*(double *)&qword_1004F7E00];

  *(void *)(v4 + 40) = v10;
  specialized Array._endMutation()();
  *(void *)&v1[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints] = v4;
  swift_bridgeObjectRelease();
  id v11 = [v3 bottomAnchor];
  id v12 = [v1 bottomAnchor];
  if (qword_1004C2A40 != -1) {
    swift_once();
  }
  id v71 = v3;
  id v13 = [v11 constraintEqualToAnchor:v12 constant:-*(double *)&qword_1004C8CB8];

  LODWORD(v14) = 1148813312;
  [v13 setPriority:v14];
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1003F94A0;
  id v16 = [v2 topAnchor];
  id v17 = [v1 topAnchor];
  if (qword_1004C2A38 != -1) {
    swift_once();
  }
  id v18 = [v16 constraintEqualToAnchor:v17 constant:*(double *)&qword_1004C8CB0];

  *(void *)(v15 + 32) = v18;
  *(void *)(v15 + 40) = v13;
  specialized Array._endMutation()();
  uint64_t v19 = v15;
  uint64_t v20 = (uint64_t *)&v1[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_marginConstraints];
  swift_beginAccess();
  uint64_t *v20 = v19;
  id v21 = v13;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v22 = swift_bridgeObjectRetain();
  sub_100122408(v22);
  swift_endAccess();
  unint64_t v23 = *v20;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    if (!v24) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v24) {
      goto LABEL_16;
    }
  }
  if (v24 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v24; ++i)
  {
    if ((v23 & 0xC000000000000001) != 0) {
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v26 = *(id *)(v23 + 8 * i + 32);
    }
    uint64_t v27 = v26;
    [v26 setActive:1];
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  id v28 = [v71 font];
  double v29 = 1.0;
  float32x4_t v69 = v21;
  if (v28)
  {
    uint64_t v30 = v28;
    id v31 = [*(id *)(*(void *)&v70[OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_bottomLabel]+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label) font];
    if (v31)
    {
      uint64_t v32 = v31;
      [v30 descender];
      double v34 = v33;
      [v30 leading];
      double v36 = v34 + v35;
      [v32 descender];
      double v38 = v36 - v37;
      [v32 leading];
      double v40 = v39;

      double v29 = v38 - v40 + 1.0;
    }
    else
    {
    }
  }
  id v41 = [v70 bottomAnchor];
  id v42 = [v71 bottomAnchor];
  id v43 = [v41 constraintEqualToAnchor:v42 constant:v29];

  LODWORD(v44) = 1148813312;
  [v43 setPriority:v44];
  id v68 = self;
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_1003FA900;
  id v46 = [v2 trailingAnchor];
  id v47 = [v70 leadingAnchor];
  id v48 = [v46 constraintEqualToAnchor:v47 constant:-*(double *)&qword_1004F7E00];

  *(void *)(v45 + 32) = v48;
  id v49 = [v71 topAnchor];
  id v50 = [v2 bottomAnchor];
  id v51 = [v49 constraintEqualToAnchor:v50];

  *(void *)(v45 + 40) = v51;
  id v52 = [v71 trailingAnchor];
  id v53 = [v70 leadingAnchor];
  id v54 = [v52 constraintEqualToAnchor:v53 constant:-*(double *)&qword_1004F7E00];

  *(void *)(v45 + 48) = v54;
  id v55 = [v70 topAnchor];
  id v56 = [v1 topAnchor];
  id v57 = [v55 constraintEqualToAnchor:v56];

  *(void *)(v45 + 56) = v57;
  *(void *)(v45 + 64) = v43;
  id v58 = v43;
  id v59 = [v70 widthAnchor];
  id v60 = [v59 constraintEqualToConstant:103.66];

  *(void *)(v45 + 72) = v60;
  id v61 = [v70 trailingAnchor];
  id v62 = [v1 trailingAnchor];
  id v63 = [v61 constraintEqualToAnchor:v62 constant:-*(double *)&qword_1004F7E00];

  *(void *)(v45 + 80) = v63;
  specialized Array._endMutation()();
  sub_100029878();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v68 activateConstraints:isa];

  LODWORD(v65) = 1112014848;
  [v2 setContentHuggingPriority:1 forAxis:v65];
  LODWORD(v66) = 1148846080;
  [v2 setContentCompressionResistancePriority:1 forAxis:v66];
  LODWORD(v67) = 1148846080;
  [v71 setContentCompressionResistancePriority:1 forAxis:v67];
}

id sub_1000B0E7C(double a1, double a2, double a3, double a4)
{
  id v5 = v4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title;
  id v12 = objc_allocWithZone((Class)UILabel);
  id v13 = v4;
  *(void *)&v5[v11] = [v12 init];
  uint64_t v14 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits;
  type metadata accessor for InteractiveLabel();
  *(void *)&v13[v14] = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v15 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels;
  *(void *)&v13[v15] = [objc_allocWithZone((Class)type metadata accessor for NewSecondaryLabelStack()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  *(void *)&v13[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_marginConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v13[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints] = _swiftEmptyArrayStorage;

  v18.receiver = v13;
  v18.super_class = ObjectType;
  id v16 = [super initWithFrame:a1, a2, a3, a4];
  sub_1000B0294();
  sub_1000B056C();

  return v16;
}

id sub_1000B0FFC(void *a1)
{
  NSString v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title;
  id v6 = objc_allocWithZone((Class)UILabel);
  id v7 = v2;
  *(void *)&v2[v5] = [v6 init];
  uint64_t v8 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits;
  type metadata accessor for InteractiveLabel();
  *(void *)&v7[v8] = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v9 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels;
  *(void *)&v7[v9] = [objc_allocWithZone((Class)type metadata accessor for NewSecondaryLabelStack()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  *(void *)&v7[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_marginConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v7[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints] = _swiftEmptyArrayStorage;

  v14.receiver = v7;
  v14.super_class = ObjectType;
  [super initWithCoder:a1];
  id v11 = v10;
  if (v10)
  {
    id v12 = v10;
    sub_1000B0294();
    sub_1000B056C();
  }
  return v11;
}

uint64_t type metadata accessor for MeasureTableViewCellCommonContentView()
{
  return self;
}

ValueMetadata *type metadata accessor for UnitState()
{
  return &type metadata for UnitState;
}

uint64_t sub_1000B1218()
{
  uint64_t result = Contexts.UIKit.init()();
  qword_1004F80B8 = result;
  return result;
}

id sub_1000B1238@<X0>(void *a1@<X8>)
{
  if (qword_1004C2A48 != -1) {
    swift_once();
  }
  NSString v2 = (void *)qword_1004F80B8;
  *a1 = qword_1004F80B8;

  return v2;
}

unint64_t sub_1000B12A4(uint64_t a1)
{
  unint64_t result = sub_1000B12CC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B12CC()
{
  unint64_t result = qword_1004C8D38;
  if (!qword_1004C8D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C8D38);
  }
  return result;
}

id sub_1000B1320()
{
  id v0 = [self currentMeasureUnits];
  id v1 = [self standardUserDefaults];
  Defaults.showOppositeUnits.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v3 = [v1 BOOLForKey:v2];

  uint64_t v4 = 1;
  if (v0 == (id)1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (uint64_t)v0;
  }
  if (v0) {
    uint64_t v4 = v5;
  }
  if (v3) {
    return (id)v4;
  }
  else {
    return v0;
  }
}

double sub_1000B13E8()
{
  if (qword_1004C2810 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_1004F7E28;
  qword_1004F80C0 = 0x4051000000000000;
  qword_1004F80C8 = qword_1004F7E28;
  return result;
}

__n128 sub_1000B1448()
{
  __asm { FMOV            V0.2D, #30.0 }
  xmmword_1004F80D0 = (__int128)result;
  return result;
}

id sub_1000B1458()
{
  id result = [self systemFillColor];
  qword_1004C8D40 = (uint64_t)result;
  return result;
}

id sub_1000B1494()
{
  id result = [objc_allocWithZone((Class)UIColor) initWithWhite:0.0 alpha:0.2];
  qword_1004C8D48 = (uint64_t)result;
  return result;
}

uint64_t sub_1000B14D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = sub_100012894(&qword_1004C78A0);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UIPointerEffect();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = [objc_allocWithZone((Class)UIPreviewParameters) init];
  [a4 bounds];
  CGRect.centerPoint.getter();
  if (qword_1004C2A58 != -1) {
    swift_once();
  }
  CGRect.init(centerPoint:size:)();
  id v17 = [self bezierPathWithOvalInRect:v13, v14, v15, v16];
  [v12 setVisiblePath:v17];

  sub_10001C99C(0, (unint64_t *)&qword_1004C78A8);
  void *v11 = [objc_allocWithZone((Class)UITargetedPreview) initWithView:a4 parameters:v12];
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for UIPointerEffect.lift(_:), v8);
  uint64_t v18 = type metadata accessor for UIPointerShape();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 1, 1, v18);
  uint64_t v19 = UIPointerStyle.init(effect:shape:)();

  return v19;
}

void sub_1000B177C(char a1)
{
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v4 = (void (**)())&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback];
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback];
  char *v4 = sub_1000B2438;
  v4[1] = (void (*)())v3;
  sub_100028914(v5);
  if (a1)
  {
    if (qword_1004C2A60 != -1) {
      swift_once();
    }
    uint64_t v6 = (void *)qword_1004C8D40;
    id v7 = [self traitCollectionWithUserInterfaceStyle:1];
    id v8 = [v6 resolvedColorWithTraitCollection:v7];
  }
  else
  {
    if (qword_1004C2A60 != -1) {
      swift_once();
    }
    id v8 = (id)qword_1004C8D40;
  }
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v8;
  id v11 = (void (**)())&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback];
  uint64_t v12 = *(void *)&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback];
  void *v11 = sub_1000B2480;
  v11[1] = (void (*)())v10;
  id v13 = v8;
  sub_100028914(v12);
  double v14 = *(void **)&v1[OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView];
  [v14 setUserInteractionEnabled:0];
  uint64_t v15 = OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView;
  [*(id *)&v1[OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView] setContentMode:4];
  id v16 = *(id *)&v1[v15];
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [self systemImageNamed:v17];

  if (v18)
  {
    id v19 = [v18 imageWithRenderingMode:2];

    [v16 setImage:v19];
    uint64_t v20 = *(void **)&v1[v15];
    uint64_t v21 = self;
    id v22 = v20;
    id v23 = [v21 configurationWithPointSize:7 weight:13.0];
    [v22 setPreferredSymbolConfiguration:v23];

    id v30 = [self secondaryLabelColor];
    uint64_t v24 = *(void **)&v1[v15];
    if (a1)
    {
      uint64_t v25 = self;
      id v26 = v24;
      id v27 = [v25 traitCollectionWithUserInterfaceStyle:1];
      id v28 = [v30 resolvedColorWithTraitCollection:v27];
    }
    else
    {
      id v29 = v24;
      id v28 = v30;
    }
    [v24 setTintColor:v28];

    [*(id *)&v1[v15] sizeToFit];
    [v14 addSubview:*(void *)&v1[v15]];
    [v14 setBackgroundColor:v13];
    [v1 addSubview:v14];
    [v1 setClipsToBounds:1];
  }
  else
  {
    __break(1u);
  }
}

void sub_1000B1B9C()
{
  id v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView;
  [*(id *)&v0[OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView] setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v4 = self;
  sub_100012894((uint64_t *)&unk_1004CEA00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1003F94A0;
  id v6 = [*(id *)&v1[v2] centerXAnchor];
  id v7 = [v3 centerXAnchor];
  id v8 = [v6 constraintEqualToAnchor:v7];

  *(void *)(v5 + 32) = v8;
  id v9 = [*(id *)&v1[v2] centerYAnchor];
  id v10 = [v3 centerYAnchor];
  id v11 = [v9 constraintEqualToAnchor:v10];

  *(void *)(v5 + 40) = v11;
  specialized Array._endMutation()();
  sub_10001C99C(0, (unint64_t *)&qword_1004CE690);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:isa];

  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1003FAEB0;
  id v14 = [v3 centerXAnchor];
  id v15 = [v1 centerXAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  *(void *)(v13 + 32) = v16;
  id v17 = [v3 centerYAnchor];
  id v18 = [v1 centerYAnchor];
  id v19 = [v17 constraintEqualToAnchor:v18];

  *(void *)(v13 + 40) = v19;
  id v20 = [v3 leadingAnchor];
  id v21 = [v1 leadingAnchor];
  id v22 = [v20 constraintGreaterThanOrEqualToAnchor:v21];

  *(void *)(v13 + 48) = v22;
  id v23 = [v3 trailingAnchor];
  id v24 = [v1 trailingAnchor];
  id v25 = [v23 constraintLessThanOrEqualToAnchor:v24];

  *(void *)(v13 + 56) = v25;
  id v26 = [v3 topAnchor];
  id v27 = [v1 topAnchor];
  id v28 = [v26 constraintGreaterThanOrEqualToAnchor:v27];

  *(void *)(v13 + 64) = v28;
  id v29 = [v3 bottomAnchor];
  id v30 = [v1 bottomAnchor];
  id v31 = [v29 constraintLessThanOrEqualToAnchor:v30];

  *(void *)(v13 + 72) = v31;
  id v32 = [v3 widthAnchor];
  if (qword_1004C2A58 != -1) {
    swift_once();
  }
  id v33 = [v32 constraintEqualToConstant:*(double *)&xmmword_1004F80D0];

  *(void *)(v13 + 80) = v33;
  id v34 = [v3 heightAnchor];
  id v35 = objc_retainAutoreleasedReturnValue(objc_msgSend(v34, "constraintEqualToConstant:", *((double *)&xmmword_1004F80D0
                                                                                           + 1)));

  *(void *)(v13 + 88) = v35;
  specialized Array._endMutation()();
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:v36];
}

void sub_1000B21B0()
{
  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  id v1 = *(id *)&Strong[OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView];

  if (qword_1004C2A68 != -1) {
    swift_once();
  }
  [v1 setBackgroundColor:qword_1004C8D48];
}

void sub_1000B2254(uint64_t a1, uint64_t a2)
{
  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  id v4 = *(id *)&Strong[OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView];

  [v4 setBackgroundColor:a2];
}

void sub_1000B2350()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView);
}

uint64_t type metadata accessor for RoundCloseButton()
{
  return self;
}

uint64_t sub_1000B2400()
{
  swift_unknownObjectUnownedDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B2438()
{
}

uint64_t sub_1000B2440()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000B2480()
{
  sub_1000B2254(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000B25B8()
{
  id v1 = [self mainBundle];
  NSString v2 = String._bridgeToObjectiveC()();

  uint64_t v3 = OBJC_IVAR____TtC7Measure16ObjectLabelStrip_contentView;
  if (!*(void *)&v0[OBJC_IVAR____TtC7Measure16ObjectLabelStrip_contentView])
  {
    __break(1u);
    goto LABEL_7;
  }
  [v0 addSubview:];
  id v4 = *(void **)&v0[v3];
  if (!v4)
  {
LABEL_7:
    __break(1u);
    return;
  }
  id v5 = v4;
  [v0 bounds];
  [v5 setFrame:];
}

id sub_1000B2794(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC7Measure16ObjectLabelStrip_contentView] = 0;
  v8.receiver = v1;
  v8.super_class = ObjectType;
  [super initWithCoder:a1];
  id v5 = v4;
  if (v4)
  {
    id v6 = v4;
    sub_1000B25B8();
  }
  return v5;
}

uint64_t type metadata accessor for ObjectLabelStrip()
{
  return self;
}

void sub_1000B2924(uint64_t a1)
{
  switch(a1)
  {
    case 2:
      double v2 = 3.14159265;
      break;
    case 4:
      double v2 = -*(double *)CGFloat.piDiv2.unsafeMutableAddressor();
      break;
    case 3:
      double v2 = *(double *)CGFloat.piDiv2.unsafeMutableAddressor();
      break;
    default:
      double v2 = 0.0;
      break;
  }
  CGAffineTransformMakeRotation((CGAffineTransform *)&aBlock, v2);
  *(_OWORD *)&m.a = *(_OWORD *)&aBlock.m11;
  *(_OWORD *)&m.c = *(_OWORD *)&aBlock.m13;
  *(_OWORD *)&m.CGFloat tx = *(_OWORD *)&aBlock.m21;
  CATransform3DMakeAffineTransform(&aBlock, &m);
  long long v34 = *(_OWORD *)&aBlock.m13;
  long long v35 = *(_OWORD *)&aBlock.m11;
  long long v32 = *(_OWORD *)&aBlock.m23;
  long long v33 = *(_OWORD *)&aBlock.m21;
  long long v30 = *(_OWORD *)&aBlock.m33;
  long long v31 = *(_OWORD *)&aBlock.m31;
  long long v29 = *(_OWORD *)&aBlock.m41;
  CGFloat m43 = aBlock.m43;
  CGFloat m44 = aBlock.m44;
  sub_1000B2BD0();
  id v5 = &v1[qword_1004C8DD0];
  *(void *)id v5 = v6;
  *((void *)v5 + 1) = v7;
  double v8 = sub_1000B2F24();
  CATransform3DMakeTranslation(&aBlock, v8, v9, 0.0);
  long long v27 = *(_OWORD *)&aBlock.m13;
  long long v28 = *(_OWORD *)&aBlock.m11;
  long long v25 = *(_OWORD *)&aBlock.m23;
  long long v26 = *(_OWORD *)&aBlock.m21;
  long long v23 = *(_OWORD *)&aBlock.m33;
  long long v24 = *(_OWORD *)&aBlock.m31;
  long long v22 = *(_OWORD *)&aBlock.m41;
  CGFloat v10 = aBlock.m43;
  CGFloat v11 = aBlock.m44;
  double v12 = sub_1000B34DC() + 40.0;
  double v14 = v13 + 23.5;
  double v15 = sub_1000B39B4() + 40.0;
  double v17 = v16 + 23.5;
  id v18 = self;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v1;
  *(_OWORD *)(v19 + 24) = v28;
  *(_OWORD *)(v19 + 40) = v27;
  *(_OWORD *)(v19 + 56) = v26;
  *(_OWORD *)(v19 + 72) = v25;
  *(_OWORD *)(v19 + 88) = v24;
  *(_OWORD *)(v19 + 104) = v23;
  *(_OWORD *)(v19 + 120) = v22;
  *(CGFloat *)(v19 + 136) = v10;
  *(CGFloat *)(v19 + 144) = v11;
  *(_OWORD *)(v19 + 152) = v35;
  *(_OWORD *)(v19 + 168) = v34;
  *(_OWORD *)(v19 + 184) = v33;
  *(_OWORD *)(v19 + 200) = v32;
  *(_OWORD *)(v19 + 216) = v31;
  *(_OWORD *)(v19 + 232) = v30;
  *(_OWORD *)(v19 + 248) = v29;
  *(CGFloat *)(v19 + 264) = m43;
  *(CGFloat *)(v19 + 272) = m44;
  *(double *)(v19 + 280) = v12;
  *(double *)(v19 + 288) = v14;
  *(double *)(v19 + 296) = v15;
  *(double *)(v19 + 304) = v17;
  *(void *)&aBlock.m21 = sub_1000B431C;
  *(void *)&aBlock.m22 = v19;
  *(void *)&aBlock.m11 = _NSConcreteStackBlock;
  *(void *)&aBlock.m12 = 1107296256;
  *(void *)&aBlock.m13 = sub_100049AB4;
  *(void *)&aBlock.m14 = &unk_10048C578;
  id v20 = _Block_copy(&aBlock);
  id v21 = v1;
  swift_release();
  [v18 animateWithDuration:0 delay:v20 options:0 animations:0.25 completion:0.25];
  _Block_release(v20);
}

void sub_1000B2BD0()
{
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  switch(v1)
  {
    case 2:
      if (qword_1004C2E80 != -1) {
        swift_once();
      }
      if (qword_1004C2E78 != -1) {
        goto LABEL_19;
      }
      break;
    case 4:
      CGRectGetWidth(*(CGRect *)(v0 + qword_1004C7AB8));
      if (qword_1004C2E78 != -1) {
        swift_once();
      }
      if (qword_1004C2E70 != -1) {
        goto LABEL_19;
      }
      break;
    case 3:
      CGRectGetWidth(*(CGRect *)(v0 + qword_1004C7AB8));
      if (qword_1004C2E78 != -1) {
        swift_once();
      }
      if (qword_1004C2E70 == -1) {
        return;
      }
LABEL_19:
      swift_once();
      return;
    default:
      CGRectGetWidth(*(CGRect *)(v0 + qword_1004C7AB8));
      if (qword_1004C2E70 != -1) {
        swift_once();
      }
      if (qword_1004C2E78 != -1) {
        goto LABEL_19;
      }
      break;
  }
}

double sub_1000B2F24()
{
  uint64_t v1 = *(void **)(v0 + qword_1004C7A68);
  if (!v1) {
    return 0.0;
  }
  swift_retain();
  id v2 = v1;
  StateValue.wrappedValue.getter();
  swift_release();
  switch(v10)
  {
    case 4:
      double v4 = *(double *)(v0 + qword_1004C8DD0);
      if (qword_1004C2E78 != -1) {
        swift_once();
      }
      double v5 = v4 + *(double *)&qword_1004F8658;
      if (qword_1004C2E80 != -1) {
        swift_once();
      }
      double v3 = v5 + 30.0;

      break;
    case 3:
      double v6 = *(double *)(v0 + qword_1004C8DD0);
      if (qword_1004C2E78 != -1) {
        swift_once();
      }
      double v3 = v6 + *(double *)&qword_1004F8658 + 30.0;
      [v2 frame];
      CGRectGetWidth(v12);

      break;
    case 2:
      if (qword_1004C2E80 != -1) {
        swift_once();
      }
      double v3 = *(double *)&qword_1004F8660;
      [v2 frame];
      CGRectGetWidth(v11);

      break;
    default:
      double Width = CGRectGetWidth(*(CGRect *)(v0 + qword_1004C7AB8));
      if (qword_1004C2E70 != -1) {
        swift_once();
      }
      double v8 = Width - *(double *)&qword_1004F8650;
      [v2 frame];
      double v3 = v8 + CGRectGetWidth(v13) * -0.5;
      [v2 frame];
      CGRectGetWidth(v14);

      break;
  }
  return v3;
}

id sub_1000B3214(uint64_t a1, long long *a2, uint64_t *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v10 = a3[4];
  uint64_t v48 = a3[3];
  uint64_t v49 = a3[2];
  uint64_t v11 = a3[5];
  uint64_t v46 = a3[7];
  uint64_t v47 = a3[6];
  uint64_t v44 = a3[9];
  uint64_t v45 = a3[8];
  uint64_t v42 = a3[11];
  uint64_t v43 = a3[10];
  uint64_t v12 = a3[14];
  uint64_t v40 = a3[13];
  uint64_t v41 = a3[12];
  uint64_t v13 = a3[15];
  CGRect v14 = *(void **)(a1 + qword_1004C7A68);
  if (v14)
  {
    uint64_t v16 = *((void *)a2 + 14);
    uint64_t v15 = *((void *)a2 + 15);
    long long v34 = a2[5];
    long long v35 = a2[6];
    long long v32 = a2[3];
    long long v33 = a2[4];
    long long v30 = a2[1];
    long long v31 = a2[2];
    long long v29 = *a2;
    id v17 = [v14 layer];
    long long v50 = v29;
    long long v51 = v30;
    long long v52 = v31;
    long long v53 = v32;
    long long v54 = v33;
    long long v55 = v34;
    long long v56 = v35;
    uint64_t v57 = v16;
    uint64_t v58 = v15;
    [v17 setTransform:&v50];
  }
  id v18 = *(void **)(a1 + qword_1004C7A48);
  if (v18)
  {
    double v19 = *(double *)(a1 + qword_1004C8DD0);
    double v20 = *(double *)(a1 + qword_1004C8DD0 + 8);
    id v21 = v18;
    [v21 frame];
    [v21 setFrame:v19, v20];
  }
  uint64_t v22 = qword_1004C7A50;
  long long v23 = *(void **)(a1 + qword_1004C7A50);
  if (v23)
  {
    id v24 = [v23 layer];
    *(void *)&long long v50 = v8;
    *((void *)&v50 + 1) = v9;
    *(void *)&long long v51 = v49;
    *((void *)&v51 + 1) = v48;
    *(void *)&long long v52 = v10;
    *((void *)&v52 + 1) = v11;
    *(void *)&long long v53 = v47;
    *((void *)&v53 + 1) = v46;
    *(void *)&long long v54 = v45;
    *((void *)&v54 + 1) = v44;
    *(void *)&long long v55 = v43;
    *((void *)&v55 + 1) = v42;
    *(void *)&long long v56 = v41;
    *((void *)&v56 + 1) = v40;
    uint64_t v57 = v12;
    uint64_t v58 = v13;
    [v24 setTransform:&v50];

    long long v25 = *(void **)(a1 + v22);
    if (v25) {
      [v25 setCenter:a4, a5];
    }
  }
  uint64_t v26 = qword_1004C7A58;
  id result = *(id *)(a1 + qword_1004C7A58);
  if (result)
  {
    id v28 = [result layer];
    *(void *)&long long v50 = v8;
    *((void *)&v50 + 1) = v9;
    *(void *)&long long v51 = v49;
    *((void *)&v51 + 1) = v48;
    *(void *)&long long v52 = v10;
    *((void *)&v52 + 1) = v11;
    *(void *)&long long v53 = v47;
    *((void *)&v53 + 1) = v46;
    *(void *)&long long v54 = v45;
    *((void *)&v54 + 1) = v44;
    *(void *)&long long v55 = v43;
    *((void *)&v55 + 1) = v42;
    *(void *)&long long v56 = v41;
    *((void *)&v56 + 1) = v40;
    uint64_t v57 = v12;
    uint64_t v58 = v13;
    [v28 setTransform:&v50];

    id result = *(id *)(a1 + v26);
    if (result) {
      return [result setCenter:a6, a7];
    }
  }
  return result;
}

double sub_1000B34DC()
{
  uint64_t v1 = v0;
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  switch(v15)
  {
    case 4:
      if (qword_1004C2E80 != -1) {
        swift_once();
      }
      double v4 = *(double *)&qword_1004F8660 + 23.5;
      id v5 = [self sharedApplication];
      id v6 = [v5 userInterfaceLayoutDirection];

      if (v6 == (id)1) {
        return v4 + -40.0;
      }
LABEL_15:
      [v1 bounds];
      CGRectGetHeight(v17);
      return v4 + -40.0;
    case 3:
      [v0 bounds];
      double v7 = CGRectGetWidth(v16) + -23.5;
      if (qword_1004C2E80 != -1) {
        swift_once();
      }
      double v4 = v7 - *(double *)&qword_1004F8660;
      id v8 = [self sharedApplication];
      id v9 = [v8 userInterfaceLayoutDirection];

      if (v9 != (id)1)
      {
        if (qword_1004C2E88 == -1) {
          return v4 + -40.0;
        }
        goto LABEL_33;
      }
      goto LABEL_15;
    case 2:
      id v2 = [self sharedApplication];
      id v3 = [v2 userInterfaceLayoutDirection];

      if (v3 == (id)1)
      {
        if (qword_1004C2E80 != -1) {
          swift_once();
        }
        double v4 = *(double *)&qword_1004F8660 + 40.0;
      }
      else
      {
        [v1 bounds];
        double v13 = CGRectGetWidth(v19) + -40.0;
        if (qword_1004C2E80 != -1) {
          swift_once();
        }
        double v4 = v13 - *(double *)&qword_1004F8660;
      }
      [v1 bounds];
      CGRectGetHeight(v20);
      if (qword_1004C2E88 == -1) {
        return v4 + -40.0;
      }
LABEL_33:
      swift_once();
      return v4 + -40.0;
  }
  id v10 = [self sharedApplication];
  id v11 = [v10 userInterfaceLayoutDirection];

  if (v11 == (id)1)
  {
    [v1 bounds];
    double v12 = CGRectGetWidth(v18) + -40.0;
    if (qword_1004C2E80 != -1) {
      swift_once();
    }
    double v4 = v12 - *(double *)&qword_1004F8660;
  }
  else
  {
    if (qword_1004C2E80 != -1) {
      swift_once();
    }
    double v4 = *(double *)&qword_1004F8660 + 40.0;
  }
  if (qword_1004C2E88 != -1) {
    goto LABEL_33;
  }
  return v4 + -40.0;
}

double sub_1000B39B4()
{
  uint64_t v1 = v0;
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  switch(v15)
  {
    case 4:
      if (qword_1004C2E80 != -1) {
        swift_once();
      }
      double v5 = *(double *)&qword_1004F8660 + 23.5;
      id v6 = [self sharedApplication];
      id v7 = [v6 userInterfaceLayoutDirection];

      if (v7 == (id)1)
      {
        [v1 bounds];
        CGRectGetHeight(v17);
        if (qword_1004C2E88 == -1) {
          return v5 + -40.0;
        }
        goto LABEL_33;
      }
      goto LABEL_16;
    case 3:
      [v0 bounds];
      double v8 = CGRectGetWidth(v18) + -23.5;
      if (qword_1004C2E80 != -1) {
        swift_once();
      }
      double v5 = v8 - *(double *)&qword_1004F8660;
      id v9 = [self sharedApplication];
      id v10 = [v9 userInterfaceLayoutDirection];

      if (v10 != (id)1)
      {
        [v1 bounds];
        CGRectGetHeight(v20);
        return v5 + -40.0;
      }
LABEL_16:
      if (qword_1004C2E88 == -1) {
        return v5 + -40.0;
      }
      goto LABEL_33;
    case 2:
      id v2 = [self sharedApplication];
      id v3 = [v2 userInterfaceLayoutDirection];

      if (v3 == (id)1)
      {
        [v1 bounds];
        double v4 = CGRectGetWidth(v16) + -40.0;
        if (qword_1004C2E80 != -1) {
          swift_once();
        }
        double v5 = v4 - *(double *)&qword_1004F8660;
      }
      else
      {
        if (qword_1004C2E80 != -1) {
          swift_once();
        }
        double v5 = *(double *)&qword_1004F8660 + 40.0;
      }
      [v1 bounds];
      CGRectGetHeight(v19);
      if (qword_1004C2E88 == -1) {
        return v5 + -40.0;
      }
LABEL_33:
      swift_once();
      return v5 + -40.0;
  }
  id v11 = [self sharedApplication];
  id v12 = [v11 userInterfaceLayoutDirection];

  if (v12 == (id)1)
  {
    if (qword_1004C2E80 != -1) {
      swift_once();
    }
    double v5 = *(double *)&qword_1004F8660 + 40.0;
  }
  else
  {
    [v1 bounds];
    double v13 = CGRectGetWidth(v21) + -40.0;
    if (qword_1004C2E80 != -1) {
      swift_once();
    }
    double v5 = v13 - *(double *)&qword_1004F8660;
  }
  if (qword_1004C2E88 != -1) {
    goto LABEL_33;
  }
  return v5 + -40.0;
}

id sub_1000B3EBC()
{
  CGFloat v1 = *(double *)&v0[qword_1004C7AB8];
  CGFloat v2 = *(double *)&v0[qword_1004C7AB8 + 8];
  CGFloat v3 = *(double *)&v0[qword_1004C7AB8 + 16];
  CGFloat v4 = *(double *)&v0[qword_1004C7AB8 + 24];
  v9.origin.x = v1;
  v9.origin.y = v2;
  v9.size.width = v3;
  v9.size.height = v4;
  double Width = CGRectGetWidth(v9);
  v10.origin.x = v1;
  v10.origin.y = v2;
  v10.size.width = v3;
  v10.size.height = v4;
  double Height = CGRectGetHeight(v10);

  return [v0 setFrame:0.0, 0.0, Width, Height];
}

uint64_t sub_1000B3F58()
{
  id v1 = [objc_allocWithZone((Class)CUShutterButton) init];
  uint64_t v2 = *(void *)(v0 + qword_1004C7A68);
  *(void *)(v0 + qword_1004C7A68) = v1;

  return _objc_release_x1(v1, v2);
}

uint64_t sub_1000B3FA8()
{
  double v1 = sub_1000B39B4();
  id v3 = [objc_allocWithZone((Class)type metadata accessor for DeleteButton()) initWithFrame:v1, v2, 80.0, 47.0];
  uint64_t v4 = *(void *)(v0 + qword_1004C7A58);
  *(void *)(v0 + qword_1004C7A58) = v3;

  return _objc_release_x1(v3, v4);
}

uint64_t sub_1000B4028()
{
  double v1 = sub_1000B34DC();
  double v3 = v2;
  id v4 = objc_allocWithZone((Class)type metadata accessor for UndoButton());
  sub_100203858(0, v1, v3, 80.0, 47.0);
  uint64_t v6 = *(void *)(v0 + qword_1004C7A50);
  *(void *)(v0 + qword_1004C7A50) = v5;

  return _objc_release_x1(v5, v6);
}

uint64_t sub_1000B40B4()
{
  sub_1000B2BD0();
  double v2 = v1;
  double v4 = v3;
  if (qword_1004C2E78 != -1) {
    swift_once();
  }
  double v5 = *(double *)&qword_1004F8658;
  id v6 = objc_allocWithZone((Class)type metadata accessor for EditButton());
  id v7 = sub_10008D480(0, v2, v4, v5, v5);
  uint64_t v8 = *(void *)(v0 + qword_1004C7A48);
  *(void *)(v0 + qword_1004C7A48) = v7;

  return _objc_release_x1(v7, v8);
}

id sub_1000B4174(char *a1, double a2, double a3, double a4, double a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v11 = &a1[qword_1004C8DD0];
  *(void *)id v11 = 0;
  *((void *)v11 + 1) = 0;
  v13.receiver = a1;
  v13.super_class = ObjectType;
  return [super initWithFrame:a2, a3, a4, a5];
}

id sub_1000B41F4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v6 = &a1[qword_1004C8DD0];
  *(void *)id v6 = 0;
  *((void *)v6 + 1) = 0;
  v8.receiver = a1;
  v8.super_class = ObjectType;
  return [super initWithCoder:a3];
}

uint64_t type metadata accessor for EditViewRegular()
{
  uint64_t result = qword_1004C8E00;
  if (!qword_1004C8E00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B4298()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000B42DC()
{
  return type metadata accessor for EditViewRegular();
}

uint64_t sub_1000B42E4()
{
  return _swift_deallocObject(v0, 312, 7);
}

id sub_1000B431C()
{
  return sub_1000B3214(*(void *)(v0 + 16), (long long *)(v0 + 24), (uint64_t *)(v0 + 152), *(double *)(v0 + 280), *(double *)(v0 + 288), *(double *)(v0 + 296), *(double *)(v0 + 304));
}

uint64_t sub_1000B4334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B4344()
{
  return swift_release();
}

uint64_t sub_1000B4350()
{
  sub_1000B4924();
  uint64_t v1 = self;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000B8FB4;
  *(void *)(v3 + 24) = v2;
  v7[4] = sub_100039980;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000FA194;
  v7[3] = &unk_10048C7D8;
  double v4 = _Block_copy(v7);
  id v5 = v0;
  swift_retain();
  swift_release();
  [(id)v1 performWithoutAnimation:v4];
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_1000F92A0();
    return swift_release();
  }
  return result;
}

void sub_1000B44BC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (*(void *)(Strong + qword_1004C91E0) && (uint64_t v2 = Strong + qword_1004C9208, swift_unknownObjectWeakLoadStrong()))
    {
      uint64_t v3 = *(void *)(v2 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 24))(ObjectType, v3);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_1000B4570()
{
  id v1 = objc_allocWithZone(v0);
  sub_1000B4590();
}

void sub_1000B4590()
{
  id v1 = v0;
  uint64_t v2 = qword_1004C91D0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = sub_100012894(&qword_1004C9540);
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1004F8630;
  id v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 272);
  swift_retain();
  *(void *)&v1[v2] = v6(KeyPath, v5);
  uint64_t v7 = qword_1004C91D8;
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = sub_100012894(&qword_1004C9548);
  uint64_t v10 = qword_1004F8630;
  id v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 272);
  swift_retain();
  *(void *)&v1[v7] = v11(v8, v10);
  *(void *)&v1[qword_1004C91E0] = 0;
  uint64_t v12 = qword_1004C91E8;
  *(void *)&v1[v12] = [objc_allocWithZone((Class)type metadata accessor for PillToPlatterTransitionView()) init];
  swift_unknownObjectWeakInit();
  *(void *)&v1[qword_1004C91F8] = 0;
  uint64_t v13 = qword_1004C9200;
  uint64_t v14 = sub_100012894((uint64_t *)&unk_1004C7F20);
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = qword_1004F8630;
  CGRect v17 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 272);
  swift_retain();
  *(void *)&v1[v13] = v17(v15, v16);
  *(void *)&v1[qword_1004C9208 + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[qword_1004C9210] = 0;
  *(void *)&v1[qword_1004C9218] = 0;
  uint64_t v18 = qword_1004C9220;
  *(void *)&v1[v18] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v19 = qword_1004C9228;
  *(void *)&v1[v19] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v20 = qword_1004C9230;
  *(void *)&v1[v20] = [objc_allocWithZone((Class)UIImageView) init];
  uint64_t v21 = qword_1004C9238;
  *(void *)&v1[v21] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v22 = qword_1004C9240;
  *(void *)&v1[v22] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v23 = qword_1004C9248;
  *(void *)&v1[v23] = [objc_allocWithZone((Class)UIView) init];
  *(void *)&v1[qword_1004C9250] = 0;
  *(void *)&v1[qword_1004C9258] = 0;
  uint64_t v24 = qword_1004C9260;
  *(CFTimeInterval *)&v1[v24] = CACurrentMediaTime();
  long long v25 = &v1[qword_1004C9268];
  *(void *)long long v25 = 0;
  *((void *)v25 + 1) = 0;
  v25[16] = 1;
  uint64_t v26 = &v1[qword_1004C9270];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  v26[16] = 1;
  long long v27 = &v1[qword_1004C9278];
  *(void *)long long v27 = 0;
  v27[8] = 1;
  v1[qword_1004C9280] = 0;
  *(void *)&v1[qword_1004C9288] = 0;
  *(void *)&v1[qword_1004C92A8] = 0x3F91111111111111;
  id v28 = &v1[qword_1004C92B0];
  *(_OWORD *)id v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  v28[32] = 1;
  *(void *)&v1[qword_1004C92B8] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_1000B4924()
{
  uint64_t v1 = v0;
  uint64_t v113 = type metadata accessor for MeasurementHistoryItem();
  uint64_t v110 = *(void *)(v113 - 8);
  uint64_t v2 = __chkstk_darwin(v113);
  uint64_t v4 = (uint64_t *)((char *)&v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  id v6 = (uint64_t **)((char *)&v104 - v5);
  uint64_t v7 = (int *)sub_100012894(&qword_1004C9528);
  id v114 = (unsigned int (**)(char *, uint64_t, int *))*((void *)v7 - 1);
  __chkstk_darwin(v7);
  id v108 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100012894((uint64_t *)&unk_1004C9530);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (unint64_t *)((char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v104 - v13;
  uint64_t v15 = type metadata accessor for MeasurementsHistory();
  __chkstk_darwin(v15 - 8);
  CGRect v17 = (uint64_t *)((char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = sub_100012894((uint64_t *)&unk_1004D0EF0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v21 = (uint64_t *)((char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v104 - v22;
  uint64_t v24 = qword_1004C9238;
  [*(id *)(v1 + qword_1004C9238) removeFromSuperview];
  if ([self jasperAvailable])
  {
    uint64_t v105 = v21;
    char v106 = v4;
    long long v25 = *(void (**)(id, void, uint64_t, uint64_t))(v110 + 56);
    id v109 = v23;
    id v111 = v25;
    uint64_t v112 = v110 + 56;
    v25(v23, 1, 1, v113);
    uint64_t v26 = *(void (**)(uint64_t))(**(void **)(v1 + qword_1004C91D0) + 144);
    uint64_t v27 = swift_retain();
    v26(v27);
    swift_release();
    uint64_t v28 = *v17;
    swift_bridgeObjectRetain();
    sub_1000B9378((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
    unint64_t v29 = 0;
    long long v30 = *(uint64_t **)(v28 + 16);
    uint64_t v107 = v1;
    long long v31 = (uint64_t **)(v1 + qword_1004C92A0);
    uint64_t v33 = v113;
    long long v32 = v114;
    v114 += 6;
    double v115 = (char *)(v32 + 7);
    id v34 = v109;
    if (v30) {
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v35 = 1;
    unint64_t v29 = (unint64_t)v30;
    while (1)
    {
      (*(void (**)(unint64_t *, uint64_t, uint64_t, int *))v115)(v12, v35, 1, v7);
      sub_1000B9310((uint64_t)v12, (uint64_t)v14);
      if ((*v114)(v14, 1, v7) == 1) {
        break;
      }
      sub_10009F928((uint64_t)&v14[v7[12]], (uint64_t)v6);
      BOOL v41 = *v6 == *v31 && v6[1] == v31[1];
      if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        sub_10002B9C0((uint64_t)v34, (uint64_t *)&unk_1004D0EF0);
        sub_10009F928((uint64_t)v6, (uint64_t)v34);
        v111(v34, 0, 1, v33);
        if ((uint64_t *)v29 == v30) {
          goto LABEL_5;
        }
      }
      else
      {
        sub_1000B9378((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
        if ((uint64_t *)v29 == v30) {
          goto LABEL_5;
        }
      }
LABEL_6:
      if (v29 >= *(void *)(v28 + 16))
      {
        __break(1u);
        goto LABEL_52;
      }
      uint64_t v113 = v29 + 1;
      Class v36 = v31;
      uint64_t v37 = v33;
      uint64_t v38 = (uint64_t)&v108[v7[12]];
      sub_1000297B8(v28+ ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80))+ *(void *)(v110 + 72) * v29, v38);
      uint64_t v39 = (uint64_t)v12 + v7[12];
      *uint64_t v12 = v29;
      uint64_t v40 = v38;
      uint64_t v33 = v37;
      long long v31 = v36;
      sub_10009F928(v40, v39);
      uint64_t v35 = 0;
      unint64_t v29 = v113;
      id v34 = v109;
    }
    swift_bridgeObjectRelease();
    long long v30 = v105;
    sub_10009F8C0((uint64_t)v34, (uint64_t)v105);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v110 + 48))(v30, 1, v33) == 1) {
      goto LABEL_66;
    }
    uint64_t v48 = v33;
    uint64_t v49 = (uint64_t)v30;
    long long v30 = v106;
    sub_10009F928(v49, (uint64_t)v106);
    id v50 = sub_1001C88C8(v30);
    long long v52 = v51;
    uint64_t v54 = v53;
    long long v55 = *v31;
    uint64_t v56 = (uint64_t)v31[1];
    int v57 = *((unsigned __int8 *)v30 + *(int *)(v48 + 32));
    sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
    swift_bridgeObjectRetain();
    if (static UIDevice.isIPhone()())
    {
      uint64_t v58 = (double *)(v107 + qword_1004C92B0);
      if (*(unsigned char *)(v107 + qword_1004C92B0 + 32)) {
        goto LABEL_65;
      }
      double v60 = v58[2];
      double v59 = v58[3];
      double v62 = *v58;
      double v61 = v58[1];
    }
    else
    {
      [*(id *)(v107 + qword_1004C9290) bounds];
      double v62 = v71;
      double v61 = v72;
      double v60 = v73;
      double v59 = v74;
    }
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 72))(ObjectType, v54);
    if (v76)
    {
      double v77 = (void *)v76;
      self;
      double v78 = (void *)swift_dynamicCastObjCClass();
      long long v30 = v55;
      if (!v78) {
    }
      }
    else
    {
      long long v30 = v55;
      double v78 = 0;
    }
    uint64_t v79 = v107;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      goto LABEL_57;
    }
    id v81 = (void *)Strong;
    id v82 = objc_allocWithZone((Class)type metadata accessor for SpatialGenericPlatter());
    id v83 = v52;
    id v84 = (char *)v50;
    sub_1001C1984((uint64_t)v30, v56, v57, v84, v83, v54, v78, v81, v62, v61, v60, v59);
    long long v30 = (uint64_t *)qword_1004C91E0;
    CGFloat v85 = *(void **)(v79 + qword_1004C91E0);
    *(void *)(v79 + qword_1004C91E0) = v86;

    uint64_t v87 = *(uint64_t *)((char *)v30 + v79);
    if (!v87) {
      goto LABEL_58;
    }
    uint64_t v88 = *(void *)(v87 + qword_1004D0BD0);
    if (!v88)
    {
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    [*(id *)(*(void *)(v88 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView) setAlpha:0.0];
    uint64_t v89 = *(uint64_t *)((char *)v30 + v79);
    if (!v89) {
      goto LABEL_60;
    }
    uint64_t v90 = v79 + qword_1004C9208;
    swift_unknownObjectWeakLoadStrong();
    *(void *)(v89 + qword_1004D0BE0 + 8) = *(void *)(v90 + 8);
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    if (!*(uint64_t *)((char *)v30 + v79))
    {
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    uint64_t v7 = *(int **)(v79 + qword_1004C9290);
    [v7 addSubview:];
    id v91 = *(void **)((char *)v30 + v79);
    if (!v91) {
      goto LABEL_62;
    }
    uint64_t v92 = qword_1004C91E8;
    [v91 addSubview:*(void *)(v79 + qword_1004C91E8)];
    [*(id *)(v79 + v92) setTranslatesAutoresizingMaskIntoConstraints:0];
    uint64_t v93 = *(uint64_t *)((char *)v30 + v79);
    if (!v93)
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      sub_10002B9C0((uint64_t)v30, (uint64_t *)&unk_1004D0EF0);
      goto LABEL_67;
    }
    double v115 = v84;
    uint64_t v94 = *(void *)(v93 + qword_1004D0BD0);
    if (!v94) {
      goto LABEL_64;
    }
    id v6 = (uint64_t **)v83;
    double v95 = *(void **)(*(void *)(v94 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)
                   + OBJC_IVAR____TtC7Measure17CardContainerView_draggableView);
    double left = UIEdgeInsetsZero.left;
    bottoCGAffineTransform m = UIEdgeInsetsZero.bottom;
    double right = UIEdgeInsetsZero.right;
    id v34 = *(id *)(v79 + v92);
    long long v30 = v95;
    unint64_t v99 = sub_10014CEBC(v30, UIEdgeInsetsZero.top, left, bottom, right);
    uint64_t v28 = v99;
    if (v99 >> 62)
    {
LABEL_52:
      swift_bridgeObjectRetain();
      uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
      if (v100) {
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v100 = *(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v100)
      {
LABEL_45:
        if (v100 >= 1)
        {
          for (uint64_t i = 0; i != v100; ++i)
          {
            if ((v28 & 0xC000000000000001) != 0) {
              id v102 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v102 = *(id *)(v28 + 8 * i + 32);
            }
            NSString v103 = v102;
            [v102 setActive:1];
          }
          goto LABEL_53;
        }
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
    }
LABEL_53:

    swift_bridgeObjectRelease_n();
    [v7 setNeedsLayout];
    [v7 layoutIfNeeded];

    sub_1000B9378((uint64_t)v106, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
    return (id)sub_10002B9C0((uint64_t)v109, (uint64_t *)&unk_1004D0EF0);
  }
  long long v30 = (uint64_t *)&off_1004B7000;
  [*(id *)(v1 + qword_1004C9240) addSubview:*(void *)(v1 + v24)];
  [*(id *)(v1 + v24) addSubview:*(void *)(v1 + qword_1004C9220)];
  uint64_t v42 = v1;
  if (*(unsigned char *)(v1 + qword_1004C9210))
  {
    if (*(unsigned char *)(v1 + qword_1004C9210) != 1)
    {
LABEL_67:
      id result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    id v63 = *(void **)(v1 + qword_1004C9290);
    uint64_t v64 = *(void *)(v1 + qword_1004C92A0);
    uint64_t v65 = *(void *)(v1 + qword_1004C92A0 + 8);
    objc_allocWithZone((Class)type metadata accessor for RectangleLabelDetailsPlatter());
    id v46 = v63;
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_1001D58E4(v46, v64, v65, 0, 0);
  }
  else
  {
    uint64_t v43 = *(void **)(v1 + qword_1004C9290);
    uint64_t v44 = *(void *)(v1 + qword_1004C92A0);
    uint64_t v45 = *(void *)(v1 + qword_1004C92A0 + 8);
    objc_allocWithZone((Class)type metadata accessor for LabelDetailsPlatter());
    id v46 = v43;
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_1000AF098(v46, v44, v45, 0, 0);
  }
  double v66 = *(void **)(v1 + qword_1004C9218);
  *(void *)(v1 + qword_1004C9218) = v47;

  uint64_t v67 = qword_1004C9218;
  uint64_t v68 = *(void *)(v42 + qword_1004C9218);
  if (!v68) {
    goto LABEL_55;
  }
  uint64_t v69 = v42 + qword_1004C9208;
  swift_unknownObjectWeakLoadStrong();
  *(void *)(v68 + qword_1004C86F0 + 8) = *(void *)(v69 + 8);
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  if (!*(void *)(v42 + v67))
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  return [v46 addSubview:];
}

void sub_1000B54D0()
{
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  sub_1000B5528(v0);
}

void sub_1000B5528(unint64_t a1)
{
  uint64_t v2 = v1;
  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  if (static UIDevice.isIPad()() & 1) != 0 && (sub_1001550D4(a1))
  {
    uint64_t v4 = qword_1004C9288;
    *(void *)&v1[qword_1004C9288] = 0;
    if ((static UIDevice.isIPad()() & 1) == 0) {
      goto LABEL_11;
    }
    switch(a1)
    {
      case 2uLL:
        double v5 = 3.1415925;
        break;
      case 4uLL:
        double v5 = -*(float *)Float.piDiv2.unsafeMutableAddressor();
        break;
      case 3uLL:
        double v5 = *(float *)Float.piDiv2.unsafeMutableAddressor();
        break;
      default:
        goto LABEL_11;
    }
    *(double *)&v1[v4] = v5;
LABEL_11:
    id v6 = *(void **)&v1[qword_1004C9218];
    if (v6)
    {
      uint64_t v7 = *(void (**)(void))((swift_isaMask & *v6) + 0x160);
      uint64_t v8 = v6;
      v7();
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      uint64_t v13 = self;
      uint64_t v14 = (void *)swift_allocObject();
      v14[2] = v8;
      v14[3] = v2;
      v14[4] = v10;
      v14[5] = v12;
      v18[4] = sub_1000B9304;
      v18[5] = v14;
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 1107296256;
      v18[2] = sub_100049AB4;
      v18[3] = &unk_10048C828;
      uint64_t v15 = _Block_copy(v18);
      uint64_t v16 = v8;
      id v17 = v2;
      swift_release();
      [v13 animateWithDuration:0 delay:v15 options:0 animations:0.25 completion:0.0];
      _Block_release(v15);
    }
  }
}

uint64_t sub_1000B5730()
{
  return swift_release();
}

id sub_1000B5794(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = qword_1004C9288;
  CGFloat v8 = *(double *)(a2 + qword_1004C9288);
  uint64_t v9 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x170))();
  CGAffineTransformMakeRotation(&v13, v8);
  [v9 setTransform:&v13];

  uint64_t v10 = qword_1004C9238;
  uint64_t v11 = *(void **)(a2 + qword_1004C9238);
  CGAffineTransformMakeRotation(&v13, *(CGFloat *)(a2 + v7));
  [v11 setTransform:&v13];
  return [*(id *)(a2 + v10) setCenter:a3, a4];
}

void sub_1000B58B8(char *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100012894(&qword_1004C94F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100012894(&qword_1004C94F8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void **)&v3[qword_1004C9290];
  [v15 setNeedsLayout];
  [v15 layoutIfNeeded];
  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  if ((static UIDevice.isIPhone()() & 1) == 0)
  {
    if ((static UIDevice.isIPad()() & 1) == 0) {
      return;
    }
    Class v36 = a2;
    uint64_t v37 = a3;
    uint64_t v24 = *(void *)&a1[qword_1004D0BD0];
    if (v24)
    {
      id v25 = *(id *)(v24 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView);
      uint64_t v26 = sub_100198930();

      uint64_t v39 = v26;
      id v38 = [self mainRunLoop];
      uint64_t v27 = type metadata accessor for NSRunLoop.SchedulerOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v10, 1, 1, v27);
      sub_100012894(&qword_1004C9500);
      sub_10001C99C(0, &qword_1004C9508);
      sub_10002179C(&qword_1004C9510, &qword_1004C9500);
      sub_1000B8E48();
      Publisher.receive<A>(on:options:)();
      sub_10002B9C0((uint64_t)v10, &qword_1004C94F0);

      swift_release();
      uint64_t v28 = (void *)swift_allocObject();
      v28[2] = v4;
      v28[3] = a1;
      uint64_t v30 = (uint64_t)v36;
      uint64_t v29 = v37;
      v28[4] = v36;
      v28[5] = v29;
      swift_allocObject();
      swift_unknownObjectWeakInit();
      long long v31 = v4;
      long long v32 = a1;
      sub_10003FFC4(v30);
      sub_10002179C(&qword_1004C9520, &qword_1004C94F8);
      uint64_t v33 = Publisher.sink(receiveCompletion:receiveValue:)();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      *(void *)&v31[qword_1004C92B8] = v33;
      swift_release();
      return;
    }
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v16 = *(void *)&a1[qword_1004D0BD0];
  if (!v16)
  {
    __break(1u);
    goto LABEL_14;
  }
  id v17 = *(char **)(v16 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView);
  uint64_t v18 = *(void **)&v17[OBJC_IVAR____TtC7Measure17CardContainerView_backgroundBlur];
  uint64_t v19 = v17;
  id v20 = [v18 contentView];
  id v21 = [v20 snapshotViewAfterScreenUpdates:1];

  uint64_t v22 = *(char **)&v4[qword_1004C91E8];
  if (v21)
  {
    uint64_t v23 = v22;
    sub_100044E5C((uint64_t)v21);
  }
  else
  {
    id v34 = *(void **)&v22[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView];
    uint64_t v35 = self;
    id v21 = v34;
    uint64_t v23 = (char *)[v35 clearColor];
    [v21 setBackgroundColor:v23];
  }

  sub_1000B5DB8((uint64_t)v4, (uint64_t)a1, a2);
}

void sub_1000B5DB8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v3 = qword_1004D0BD0;
  uint64_t v4 = *(void *)(a2 + qword_1004D0BD0);
  if (!v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  [*(id *)(*(void *)(v4 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView) bounds];
  uint64_t v8 = a1 + qword_1004C9268;
  *(void *)uint64_t v8 = v9;
  *(void *)(v8 + 8) = v10;
  *(unsigned char *)(v8 + 16) = 0;
  uint64_t v11 = *(void *)(a2 + v3);
  if (!v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  id v12 = [*(id *)(*(void *)(v11 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView) superview];
  if (!v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(a2 + v3);
  if (!v13)
  {
LABEL_13:
    __break(1u);
    return;
  }
  uint64_t v14 = v12;
  [*(id *)(*(void *)(v13 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView) frame];
  CGRect.centerPoint.getter();
  [v14 convertPoint:*(void *)(a1 + qword_1004C9290) toCoordinateSpace:];
  uint64_t v16 = v15;
  uint64_t v18 = v17;

  uint64_t v19 = a1 + qword_1004C9270;
  *(void *)uint64_t v19 = v16;
  *(void *)(v19 + 8) = v18;
  *(unsigned char *)(v19 + 16) = 0;
  uint64_t v20 = a1 + qword_1004C9278;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 0;
  id v21 = *(void **)(a1 + qword_1004C91E8);
  uint64_t v22 = *(void **)(a1 + qword_1004C9238);
  *(void *)(a1 + qword_1004C9238) = v21;
  id v23 = v21;

  if (a3)
  {
    uint64_t v24 = swift_retain();
    a3(v24);
    sub_100028914((uint64_t)a3);
  }
}

void sub_1000B5F80(unsigned char *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (*a1 != 2)
  {
    uint64_t v7 = *(void **)(*(void *)(a2 + qword_1004C91E8) + OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView);
    uint64_t v8 = self;
    id v9 = v7;
    id v10 = [v8 clearColor];
    [v9 setBackgroundColor:v10];
  }

  sub_1000B5DB8(a2, a3, a4);
}

void sub_1000B6054(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    [*(id *)(*(void *)(Strong + qword_1004C91E8) + OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView) setImage:v1];
  }
}

void sub_1000B60D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  uint64_t v8 = qword_1004C9288;
  *(void *)&v3[qword_1004C9288] = 0;
  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  if (static UIDevice.isIPad()())
  {
    switch(v34)
    {
      case 2:
        double v9 = 3.1415925;
        break;
      case 4:
        double v9 = -*(float *)Float.piDiv2.unsafeMutableAddressor();
        break;
      case 3:
        double v9 = *(float *)Float.piDiv2.unsafeMutableAddressor();
        break;
      default:
        goto LABEL_9;
    }
    *(double *)&v3[v8] = v9;
  }
LABEL_9:
  id v10 = *(void **)&v3[qword_1004C9218];
  if (v10)
  {
    uint64_t v11 = *(double (**)(void))((swift_isaMask & *v10) + 0x160);
    id v12 = v10;
    double v13 = v11();
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;

    uint64_t v20 = &v4[qword_1004C9268];
    *(double *)uint64_t v20 = v13;
    *((void *)v20 + 1) = v15;
    v20[16] = 0;
    id v21 = &v4[qword_1004C9270];
    *(void *)id v21 = v17;
    *((void *)v21 + 1) = v19;
    v21[16] = 0;
    uint64_t v22 = &v4[qword_1004C9278];
    *(void *)uint64_t v22 = *(void *)&v4[v8];
    v22[8] = 0;
  }
  if ([self jasperAvailable]
    && (id v23 = *(void **)&v4[qword_1004C91E0]) != 0)
  {
    id v24 = v23;
    sub_1001C1274(1);
    uint64_t v25 = swift_allocObject();
    long long v26 = *(_OWORD *)a1;
    *(_OWORD *)(v25 + 40) = *(_OWORD *)(a1 + 16);
    long long v27 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v25 + 56) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v25 + 72) = v27;
    *(void *)(v25 + 16) = v4;
    uint64_t v28 = *(void *)(a1 + 64);
    *(_OWORD *)(v25 + 24) = v26;
    *(void *)(v25 + 88) = v28;
    *(void *)(v25 + 96) = v24;
    *(void *)(v25 + 104) = a2;
    *(void *)(v25 + 112) = a3;
    uint64_t v29 = (char *)v24;
    uint64_t v30 = v4;
    sub_1000B8E1C(a1);
    sub_10003FFC4(a2);
    sub_1000B58B8(v29, (void (*)(uint64_t))sub_1000B9430, v25);

    swift_release();
  }
  else
  {
    long long v31 = *(void **)&v4[qword_1004C9228];
    NSString v32 = String._bridgeToObjectiveC()();
    [v31 setText:v32];

    [v31 sizeToFit];
    uint64_t v33 = *(void **)&v4[qword_1004C9240];
    [v33 setUserInteractionEnabled:1];
    [v33 setAlpha:1.0];
    v4[qword_1004C9280] = 1;
    *(CFTimeInterval *)&v4[qword_1004C9260] = CACurrentMediaTime();
    sub_1000B63E8(a1);
  }
}

void sub_1000B63E8(uint64_t a1)
{
  if ((v1[qword_1004C9270 + 16] & 1) == 0)
  {
    uint64_t v2 = v1;
    if ((v1[qword_1004C9268 + 16] & 1) == 0 && (v1[qword_1004C9278 + 8] & 1) == 0)
    {
      uint64_t v4 = *(void *)(a1 + 56);
      uint64_t v5 = *(void *)(a1 + 64);
      CGFloat v6 = *(double *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      CGFloat v124 = *(double *)(a1 + 24);
      CGFloat v125 = *(double *)(a1 + 32);
      CGFloat v123 = *(double *)(a1 + 16);
      CGFloat v122 = *(double *)(a1 + 8);
      uint64_t v117 = qword_1004C9280;
      if (v2[qword_1004C9280]) {
        double v8 = 1.0;
      }
      else {
        double v8 = 0.0;
      }
      sub_1000B8E1C(a1);
      if (qword_1004C2F18 != -1) {
        swift_once();
      }
      if (qword_1004C31B0 != -1) {
        swift_once();
      }
      double v9 = (void *)qword_1004F89C8;
      id v10 = qword_1004F89D0;
      uint64_t v115 = v5;
      uint64_t v116 = v4;
      if (byte_1004F89D8)
      {
        char v11 = byte_1004F89E8;
        uint64_t v12 = qword_1004F89E0;
        char v13 = byte_1004D2600;
        id v14 = (id)qword_1004F89C8;
        id v15 = sub_100081B28(v13, v12, v11);
        sub_1000286C0(v9, v10, 1);
      }
      else
      {
        if (byte_1004D2600) {
          id v16 = qword_1004F89D0;
        }
        else {
          id v16 = (id)qword_1004F89C8;
        }
        id v15 = v16;
      }
      sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
      if ((static UIDevice.isIPhone()() & 1) != 0
        && [self jasperAvailable]
        && v2[v117] != 1)
      {
        *(double *)&uint64_t v17 = 360.0;
      }
      else
      {
        *(double *)&uint64_t v17 = 400.0;
      }
      double v18 = *(double *)&v17;
      double v19 = CACurrentMediaTime();
      uint64_t v20 = qword_1004C9260;
      double v21 = v19 - *(double *)&v2[qword_1004C9260];
      if (v21 >= 0.0166666667)
      {
        uint64_t v22 = qword_1004C9250;
        uint64_t v23 = qword_1004C9258;
        double v24 = *(double *)&v2[qword_1004C9250];
        do
        {
          double v25 = *(double *)&v2[v23] + ((v24 - v8) * -v18 + *(double *)&v2[v23] * -36.0) * 0.0166666667;
          *(double *)&v2[v23] = v25;
          double v24 = *(double *)&v2[v22] + v25 * 0.0166666667;
          *(double *)&v2[v22] = v24;
          double v21 = v21 + -0.0166666667;
        }
        while (v21 >= 0.0166666667);
      }
      *(double *)&v2[v20] = v19 - v21;
      if (vabdd_f64(*(double *)&v2[qword_1004C9250], v8) >= 0.01
        || (uint64_t v26 = qword_1004C9258, fabs(*(double *)&v2[qword_1004C9258]) >= 0.01))
      {
        int v27 = 0;
      }
      else
      {
        *(double *)&v2[qword_1004C9250] = v8;
        *(void *)&v2[v26] = 0;
        int v27 = 1;
      }
      uint64_t v28 = qword_1004C9238;
      id v29 = [*(id *)&v2[qword_1004C9238] layer];
      mix(_:_:_:)();
      [v29 setCornerRadius:];

      uint64_t v30 = *(void **)&v2[qword_1004C9248];
      mix(_:_:_:)();
      [v30 setAlpha:];
      float v31 = *(double *)a1;
      id v126 = self;
      if (![v126 jasperAvailable]
        || (uint64_t v32 = qword_1004C91E0, !*(void *)&v2[qword_1004C91E0])
        || (v33 = *(double *)&v2[qword_1004C9288], float v31 = v31 - v33, (static UIDevice.isIPhone()() & 1) == 0))
      {
LABEL_35:
        float v37 = fabsf(v31);
        if (v37 > 3.1416) {
          float v31 = *(float *)Float.pi2.unsafeMutableAddressor() - v37;
        }
        double v114 = v31;
        mix(_:_:_:)();
        CGFloat v39 = v38;
        mix(_:_:_:)();
        CGFloat v41 = v40;
        mix(_:_:_:)();
        double v43 = v42;
        mix(_:_:_:)();
        double v45 = v44;
        CGAffineTransformMakeScale(&t1, v41, v41);
        long long v119 = *(_OWORD *)&t1.a;
        long long v118 = *(_OWORD *)&t1.c;
        CGFloat tx = t1.tx;
        CGFloat ty = t1.ty;
        CGAffineTransformMakeRotation(&t1, v39);
        long long v48 = *(_OWORD *)&t1.a;
        long long v49 = *(_OWORD *)&t1.c;
        long long v50 = *(_OWORD *)&t1.tx;
        *(_OWORD *)&t1.a = v119;
        *(_OWORD *)&t1.c = v118;
        t1.CGFloat tx = tx;
        t1.CGFloat ty = ty;
        *(_OWORD *)&t2.a = v48;
        *(_OWORD *)&t2.c = v49;
        *(_OWORD *)&t2.CGFloat tx = v50;
        CGAffineTransformConcat(&v127, &t1, &t2);
        long long v51 = *(void **)&v2[v28];
        CGAffineTransform t1 = v127;
        [v51 setTransform:&t1];
        mix(_:_:_:)();
        mix(_:_:_:)();
        id v52 = *(id *)&v2[v28];
        [v52 bounds];
        [v52 setBounds:];

        [*(id *)&v2[v28] setCenter:v43, v45];
        if ([v126 jasperAvailable])
        {
          [*(id *)&v2[qword_1004C91E8] setAlpha:1.0];
          uint64_t v53 = *(void **)&v2[qword_1004C91E0];
          if (!v53) {
            goto LABEL_42;
          }
          uint64_t v54 = *(void **)&v2[v28];
          uint64_t v55 = *(void *)&v2[qword_1004C9290];
          id v56 = v53;
          id v57 = v54;
          [v56 convertPoint:v55 fromCoordinateSpace:v43];
          [v57 setCenter:];
        }
        else
        {
          id v56 = *(id *)&v2[v28];
          id v57 = (id)mix(_:_:_:)();
          [v56 setBackgroundColor:v57];
        }

LABEL_42:
        uint64_t v58 = *(void **)&v2[qword_1004C9220];
        mix(_:_:_:)();
        [v58 setAlpha:];
        [v58 bounds];
        [v58 setBounds:];
        [*(id *)&v2[v28] bounds];
        CGFloat v59 = CGRectGetWidth(v133) * 0.5;
        [*(id *)&v2[v28] bounds];
        [v58 setCenter:v59, CGRectGetHeight(v134) * 0.5];
        [v58 frame];
        CGRectGetWidth(v135);
        [v58 frame];
        CGRectGetHeight(v136);
        mix(_:_:_:)();
        CGAffineTransformMakeScale(&t1, v60, v60);
        [v58 setTransform:&t1];
        double v61 = *(void **)&v2[qword_1004C9230];
        [v61 setAlpha:1.0];
        [v58 bounds];
        double Width = CGRectGetWidth(v137);
        if (qword_1004C2F30 != -1) {
          swift_once();
        }
        id v121 = v15;
        double v63 = *(double *)&qword_1004F8720;
        if (qword_1004C2EF8 != -1) {
          swift_once();
        }
        uint64_t v120 = v28;
        id v64 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:qword_1004F86E8];
        if (qword_1004C27C8 != -1) {
          swift_once();
        }
        UIContentSizeCategory v65 = (UIContentSizeCategory)(id)qword_1004F7DD8;
        char v66 = static UIContentSizeCategory.> infix(_:_:)();

        if (v66)
        {

          UIContentSizeCategory v65 = UIContentSizeCategoryAccessibilityLarge;
        }
        uint64_t v67 = self;
        id v68 = [v67 traitCollectionWithPreferredContentSizeCategory:v65];

        [v64 scaledValueForValue:v68 compatibleWithTraitCollection:v63];
        double v70 = v69;

        [v58 bounds];
        [v61 setCenter:CGPointMake(Width - v70, CGRectGetHeight(v138) * 0.5)];
        double v71 = *(void **)&v2[qword_1004C9228];
        [v58 bounds];
        double v72 = CGRectGetWidth(v139) * 0.5;
        if (qword_1004C2F38 != -1) {
          swift_once();
        }
        double v73 = v72 - *(double *)&qword_1004F8728;
        [v58 bounds];
        [v71 setCenter:v73, CGRectGetHeight(v140) * 0.5];
        if (v2[qword_1004C9298] == 1)
        {
          double v74 = *(double *)&qword_1004F8720;
          id v75 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:qword_1004F86E8];
          UIContentSizeCategory v76 = (UIContentSizeCategory)(id)qword_1004F7DD8;
          char v77 = static UIContentSizeCategory.> infix(_:_:)();

          if (v77)
          {

            UIContentSizeCategory v76 = UIContentSizeCategoryAccessibilityLarge;
          }
          id v78 = [v67 traitCollectionWithPreferredContentSizeCategory:v76];

          [v75 scaledValueForValue:v78 compatibleWithTraitCollection:v74];
          double v80 = v79;

          [v58 bounds];
          [v61 setCenter:v80, CGRectGetHeight(v141) * 0.5];
          [v58 bounds];
          CGFloat v81 = CGRectGetWidth(v142) * 0.5 + *(double *)&qword_1004F8728;
          [v58 bounds];
          [v71 setCenter:v81, CGRectGetHeight(v143) * 0.5];
        }
        if ([v126 jasperAvailable])
        {
          id v82 = *(void **)&v2[v120];
          type metadata accessor for PillToPlatterTransitionView();
          uint64_t v83 = swift_dynamicCastClass();
          if (v83)
          {
            id v84 = (char *)v83;
            mix(_:_:_:)();
            double v86 = v85;
            uint64_t v87 = *(void **)&v84[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView];
            id v88 = v82;
            [v87 setAlpha:v86];
            [*(id *)&v84[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_shadowView] setAlpha:v86];
            uint64_t v89 = *(void **)&v84[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundColorView];
            mix(_:_:_:)();
            [v89 setAlpha:];
            [v84 setNeedsLayout];
            [v84 layoutIfNeeded];
          }
        }
        uint64_t v90 = *(void **)&v2[qword_1004C9218];
        if (v90)
        {
          t1.a = v114;
          t1.b = v122;
          t1.c = v123;
          t1.d = v124;
          t1.CGFloat tx = v125;
          t1.CGFloat ty = v6;
          uint64_t v130 = v7;
          uint64_t v131 = v116;
          uint64_t v132 = v115;
          id v91 = v90;
          sub_1000AAFAC();
          sub_1000B8F4C(a1);

          if (!v27) {
            goto LABEL_82;
          }
        }
        else
        {
          sub_1000B8F4C(a1);
          if (!v27) {
            goto LABEL_82;
          }
        }
        int v92 = v2[v117];
        uint64_t v93 = &v2[qword_1004C9208];
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (v92 != 1)
        {
          if (Strong)
          {
            uint64_t v105 = *((void *)v93 + 1);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t))(v105 + 16))(ObjectType, v105);
            swift_unknownObjectRelease();
          }
          [v2 performSelector:"hide" withObject:0 afterDelay:0.03];
          [*(id *)&v2[qword_1004C9240] setUserInteractionEnabled:0];
          goto LABEL_82;
        }
        if (Strong)
        {
          uint64_t v95 = *((void *)v93 + 1);
          uint64_t v96 = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v95);
          swift_unknownObjectRelease();
        }
        if (([v126 jasperAvailable] & 1) == 0)
        {
          CGFloat v97 = *(void **)&v2[v120];
          id v98 = (void *)qword_1004F89C8;
          id v99 = qword_1004F89D0;
          if (byte_1004F89D8)
          {
            char v100 = byte_1004F89E8;
            uint64_t v101 = qword_1004F89E0;
            char v102 = byte_1004D2600;
            id v103 = v97;
            sub_1000B8F78(v98, v99, 1);
            id v104 = sub_100081B28(v102, v101, v100);
            sub_1000286C0(v98, v99, 1);
          }
          else
          {
            char v107 = byte_1004D2600;
            id v108 = v97;
            if (v107) {
              id v109 = v99;
            }
            else {
              id v109 = v98;
            }
            id v104 = v109;
          }
          [v97 setBackgroundColor:v104];
        }
        if ([v126 jasperAvailable])
        {
          uint64_t v110 = *(char **)&v2[qword_1004C91E0];
          if (v110)
          {
            uint64_t v111 = *(void *)&v110[qword_1004D0BD0];
            if (v111)
            {
              uint64_t v112 = *(void **)(*(void *)(v111 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)
                              + OBJC_IVAR____TtC7Measure17CardContainerView_draggableView);
              uint64_t v113 = v110;
              [v112 setAlpha:1.0];
              sub_1001C16E0([*(id *)&v2[v120] setAlpha:0.0]);

              goto LABEL_82;
            }
LABEL_87:
            __break(1u);
            return;
          }
        }
LABEL_82:

        return;
      }
      uint64_t v34 = *(void *)&v2[v32];
      if (v34)
      {
        uint64_t v35 = *(void *)(v34 + qword_1004D0BD0);
        if (v35)
        {
          Class v36 = *(void **)(*(void *)(v35 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)
                         + OBJC_IVAR____TtC7Measure17CardContainerView_darkeningView);
          if (v36)
          {
            mix(_:_:_:)();
            [v36 setAlpha:];
            goto LABEL_35;
          }
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_86;
    }
  }
}

void sub_1000B72C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (void *)((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
  uint64_t *v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
LABEL_7:
    if (*((void *)&xmmword_1004F7FD0 + 1))
    {
      id v18 = [*((id *)&xmmword_1004F7FD0 + 1) tabBarController];
      if (v18)
      {
        double v19 = v18;
        id v20 = [v18 tabBar];
        [v20 alpha];
        double v22 = v21;

        if (v22 == 0.0)
        {
        }
        else
        {
          uint64_t v23 = self;
          uint64_t v24 = swift_allocObject();
          *(void *)(v24 + 16) = v19;
          *(void *)(v24 + 24) = 0;
          aBlock[4] = sub_1000B9480;
          aBlock[5] = v24;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100049AB4;
          aBlock[3] = &unk_10048C8A0;
          double v25 = _Block_copy(aBlock);
          id v26 = v19;
          swift_release();
          [v23 animateWithDuration:0 delay:v25 options:0 animations:0.15 completion:0.0];

          _Block_release(v25);
        }
      }
      return;
    }
LABEL_16:
    __break(1u);
    return;
  }
  char v13 = *(void **)(a1 + qword_1004C9228);
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 setText:v14];

  [v13 sizeToFit];
  id v15 = *(void **)(a1 + qword_1004C9240);
  [v15 setUserInteractionEnabled:0];
  [v15 setAlpha:1.0];
  *(unsigned char *)(a1 + qword_1004C9280) = 1;
  *(CFTimeInterval *)(a1 + qword_1004C9260) = CACurrentMediaTime();
  sub_1000B63E8(a2);
  uint64_t v16 = *(void *)(a3 + qword_1004D0BD0);
  if (!v16)
  {
    __break(1u);
    goto LABEL_16;
  }
  [*(id *)(*(void *)(v16 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView) setAlpha:0.0];
  if (a4)
  {
    uint64_t v17 = swift_retain();
    a4(v17);
    sub_100028914((uint64_t)a4);
  }
  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  if (static UIDevice.isIPhone()())
  {
    if (qword_1004C29D8 == -1) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
}

void sub_1000B76B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v23)(uint64_t *__return_ptr, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  long long v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  NSString v34;
  uint64_t v35;
  uint64_t vars8;

  uint64_t v4 = v3;
  v3[qword_1004C9280] = 0;
  uint64_t v8 = *(void **)&v3[qword_1004C9218];
  if (v8)
  {
    uint64_t v9 = self;
    uint64_t v10 = v8;
    id v11 = [v9 sharedMenuController];
    [v11 hideMenu];

    double v12 = (*(double (**)(void))((swift_isaMask & *v10) + 0x160))();
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;

    double v19 = &v4[qword_1004C9268];
    *(double *)double v19 = v12;
    *((void *)v19 + 1) = v14;
    v19[16] = 0;
    id v20 = &v4[qword_1004C9270];
    *(void *)id v20 = v16;
    *((void *)v20 + 1) = v18;
    v20[16] = 0;
    double v21 = &v4[qword_1004C9278];
    *(void *)double v21 = *(void *)&v4[qword_1004C9288];
    v21[8] = 0;
  }
  if ([self jasperAvailable]
    && (double v22 = *(void **)&v4[qword_1004C91E0]) != 0)
  {
    uint64_t v23 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)&v4[qword_1004C91D8] + 144);
    uint64_t v24 = v22;
    double v25 = swift_retain();
    v23(&v35, v25);
    swift_release();
    id v26 = *(void *)(v35 + 16);
    swift_bridgeObjectRelease();
    sub_1001C14AC(v26 == 0);
    int v27 = swift_allocObject();
    uint64_t v28 = *(_OWORD *)a1;
    *(_OWORD *)(v27 + 56) = *(_OWORD *)(a1 + 16);
    id v29 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v27 + 72) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v27 + 88) = v29;
    *(void *)(v27 + 16) = a2;
    *(void *)(v27 + 24) = a3;
    *(void *)(v27 + 32) = v4;
    uint64_t v30 = *(void *)(a1 + 64);
    *(_OWORD *)(v27 + 40) = v28;
    *(void *)(v27 + 104) = v30;
    *(void *)(v27 + 112) = v24;
    float v31 = (char *)v24;
    sub_10003FFC4(a2);
    uint64_t v32 = v4;
    sub_1000B8E1C(a1);
    sub_1000B58B8(v31, (void (*)(uint64_t))sub_1000B8E08, v27);

    swift_release();
  }
  else
  {
    *(CFTimeInterval *)&v4[qword_1004C9260] = CACurrentMediaTime();
    float v33 = *(void **)&v4[qword_1004C9228];
    uint64_t v34 = String._bridgeToObjectiveC()();
    [v33 setText:v34];

    [v33 sizeToFit];
    sub_1000B63E8(a1);
  }
}

void sub_1000B79C0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  double v12 = (void *)((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
  *double v12 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_7;
  }
  if (a1)
  {
    uint64_t v14 = swift_retain();
    a1(v14);
    sub_100028914((uint64_t)a1);
  }
  *(CFTimeInterval *)(a3 + qword_1004C9260) = CACurrentMediaTime();
  uint64_t v15 = *(void **)(a3 + qword_1004C9228);
  NSString v16 = String._bridgeToObjectiveC()();
  [v15 setText:v16];

  [v15 sizeToFit];
  sub_1000B63E8(a4);
  uint64_t v17 = *(void *)(a5 + qword_1004D0BD0);
  if (!v17)
  {
    __break(1u);
    goto LABEL_16;
  }
  [*(id *)(*(void *)(v17 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView) setAlpha:0.0];
  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  if ((static UIDevice.isIPhone()() & 1) == 0) {
    return;
  }
  if (qword_1004C29D8 != -1) {
    goto LABEL_14;
  }
LABEL_7:
  if (!*((void *)&xmmword_1004F7FD0 + 1))
  {
LABEL_16:
    __break(1u);
    return;
  }
  id v18 = [*((id *)&xmmword_1004F7FD0 + 1) tabBarController];
  if (v18)
  {
    double v19 = v18;
    id v20 = [v18 tabBar];
    [v20 alpha];
    double v22 = v21;

    if (v22 == 1.0)
    {
    }
    else
    {
      uint64_t v23 = self;
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v19;
      *(void *)(v24 + 24) = 0x3FF0000000000000;
      aBlock[4] = sub_1000B9480;
      aBlock[5] = v24;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100049AB4;
      aBlock[3] = &unk_10048C760;
      double v25 = _Block_copy(aBlock);
      id v26 = v19;
      swift_release();
      [v23 animateWithDuration:0 delay:v25 options:0 animations:0.15 completion:0.0];

      _Block_release(v25);
    }
  }
}

id sub_1000B7D74(uint64_t a1)
{
  [*(id *)(a1 + qword_1004C9240) setAlpha:0.0];
  [*(id *)(a1 + qword_1004C9238) setAlpha:0.0];
  if ([self jasperAvailable])
  {
    uint64_t v2 = *(void **)(a1 + qword_1004C91E0);
    if (v2)
    {
      id v3 = v2;
      sub_1001C16E0(v3);
    }
  }
  return sub_1000B7E0C();
}

id sub_1000B7E0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + qword_1004C9218);
  if (v2) {
    [v2 removeFromSuperview];
  }
  if (![self jasperAvailable]) {
    return [*(id *)(v1 + qword_1004C9240) removeFromSuperview];
  }
  uint64_t v3 = qword_1004C91E0;
  uint64_t v4 = *(void **)(v1 + qword_1004C91E0);
  if (!v4) {
    return [*(id *)(v1 + qword_1004C9240) removeFromSuperview];
  }
  id v5 = v4;
  [v5 removeFromSuperview];
  CGFloat v6 = *(void **)(v1 + v3);
  *(void *)(v1 + v3) = 0;

  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  if ((static UIDevice.isIPhone()() & 1) == 0) {
    goto LABEL_13;
  }
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  id result = (id)*((void *)&xmmword_1004F7FD0 + 1);
  if (*((void *)&xmmword_1004F7FD0 + 1))
  {
    id v8 = [*((id *)&xmmword_1004F7FD0 + 1) tabBarController];
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = [v8 tabBar];
      [v10 alpha];
      double v12 = v11;

      if (v12 == 1.0)
      {

        return [*(id *)(v1 + qword_1004C9240) removeFromSuperview];
      }
      char v13 = self;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v9;
      *(void *)(v14 + 24) = 0x3FF0000000000000;
      v17[4] = sub_1000B8DA4;
      v17[5] = v14;
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 1107296256;
      v17[2] = sub_100049AB4;
      void v17[3] = &unk_10048C698;
      uint64_t v15 = _Block_copy(v17);
      id v16 = v9;
      swift_release();
      [v13 animateWithDuration:0 delay:v15 options:0 animations:0.15 completion:0.0];

      _Block_release(v15);
    }
LABEL_13:

    return [*(id *)(v1 + qword_1004C9240) removeFromSuperview];
  }
  __break(1u);
  return result;
}

void sub_1000B8070(void *a1)
{
  id v1 = a1;
  sub_1000B8108((uint64_t)&unk_10048C8D8, (uint64_t)sub_1000B9478, (uint64_t)&unk_10048C8F0);
}

uint64_t sub_1000B80E0()
{
  return sub_1000B8108((uint64_t)&unk_10048C5E0, (uint64_t)sub_1000B8D28, (uint64_t)&unk_10048C5F8);
}

uint64_t sub_1000B8108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  double v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
  double v12 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100049AB4;
  aBlock[3] = v17;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v3;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100039B94();
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v18);
}

void sub_1000B83AC(uint64_t a1)
{
  [*(id *)(a1 + qword_1004C9228) setFrame:0.0, 0.0, 0.0, 0.0];
  [*(id *)(a1 + qword_1004C9220) setAlpha:1.0];
  uint64_t v2 = *(void **)(a1 + qword_1004C9240);
  [v2 setAlpha:0.0];
  [v2 setUserInteractionEnabled:0];
  *(unsigned char *)(a1 + qword_1004C9280) = 0;
  *(void *)(a1 + qword_1004C9250) = 0;
  *(void *)(a1 + qword_1004C9258) = 0;
  uint64_t v3 = *(void **)(a1 + qword_1004C9218);
  if (v3) {
    [v3 setAlpha:0.0];
  }
  if ([self jasperAvailable])
  {
    uint64_t v4 = *(void **)(a1 + qword_1004C91E0);
    if (v4)
    {
      id v5 = v4;
      sub_1001C16E0();
    }
  }
}

uint64_t sub_1000B84F4()
{
  return sub_1000B8108((uint64_t)&unk_10048C630, (uint64_t)sub_1000B8D48, (uint64_t)&unk_10048C648);
}

uint64_t sub_1000B851C(char *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = *(void **)&a1[qword_1004C9238];
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = a1;
  [v6 frame];
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  [v8 locationInView:*(void *)&v9[qword_1004C9240]];
  v21.x = v18;
  v21.y = v19;
  v22.origin.x = v11;
  v22.origin.y = v13;
  v22.size.width = v15;
  v22.size.height = v17;
  LODWORD(v6) = CGRectContainsPoint(v22, v21);

  return v6 ^ 1;
}

void sub_1000B85E8()
{
}

uint64_t sub_1000B8618()
{
  swift_release();
  swift_release();

  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_release();
  sub_10001FE1C(v0 + qword_1004C9208);

  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_1000B875C(uint64_t a1)
{
  swift_release();
  swift_release();

  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_release();
  sub_10001FE1C(a1 + qword_1004C9208);

  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t type metadata accessor for LabelDetailsPlatterWrapper()
{
  uint64_t result = qword_1004C92E8;
  if (!qword_1004C92E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B88F8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000B89E0()
{
  return type metadata accessor for LabelDetailsPlatterWrapper();
}

void sub_1000B89E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = qword_1004C9218;
  uint64_t v3 = *(void **)(v0 + qword_1004C9218);
  if (v3)
  {
    [v3 removeFromSuperview];
    uint64_t v4 = *(void **)(v0 + v2);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)(v0 + v2) = 0;

  if (*(unsigned char *)(v0 + qword_1004C9280) == 1)
  {
    uint64_t v5 = v0 + qword_1004C9208;
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v6 = *(void *)(v5 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v6 + 40))(ObjectType, v6);
      swift_unknownObjectRelease();
    }
    id v8 = *(void **)(v0 + v2);
    if (v8)
    {
      uint64_t v9 = qword_1004C9238;
      double v10 = *(void **)(v0 + qword_1004C9238);
      CGFloat v11 = *(void (**)(void))((swift_isaMask & *v8) + 0x160);
      double v16 = v8;
      id v12 = v10;
      v11();
      [v12 bounds];
      [v12 setBounds:];

      id v13 = *(id *)(v1 + v9);
      v11();
      [v13 setCenter:v14, v15];

      [v16 setAlpha:1.0];
    }
  }
}

uint64_t sub_1000B8CF0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B8D28()
{
  sub_1000B83AC(*(void *)(v0 + 16));
}

uint64_t sub_1000B8D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B8D40()
{
  return swift_release();
}

id sub_1000B8D48()
{
  return sub_1000B7E0C();
}

uint64_t sub_1000B8D6C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000B8DA4()
{
  sub_10001CC14(*(void **)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1000B8DB0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

void sub_1000B8E08()
{
  sub_1000B79C0(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), v0 + 40, *(void *)(v0 + 112));
}

uint64_t sub_1000B8E1C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000B8E48()
{
  unint64_t result = qword_1004C9518;
  if (!qword_1004C9518)
  {
    sub_10001C99C(255, &qword_1004C9508);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C9518);
  }
  return result;
}

uint64_t sub_1000B8EB0()
{
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000B8F00(unsigned char *a1)
{
  sub_1000B5F80(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_1000B8F0C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B8F44(uint64_t *a1)
{
}

uint64_t sub_1000B8F4C(uint64_t a1)
{
  return a1;
}

id sub_1000B8F78(void *a1, void *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    id v5 = a1;
    a1 = a2;
    uint64_t v3 = vars8;
  }
  return a1;
}

void sub_1000B8FB4()
{
}

uint64_t sub_1000B8FBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000B8FCC()
{
  sub_1000B89E8();
  uint64_t v1 = *(void **)(v0 + qword_1004C9228);
  sub_1001CD494();
  uint64_t v3 = v2;
  [v1 setFont:v2];

  uint64_t v4 = *(void **)(v0 + qword_1004C9230);
  id result = [v4 image];
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v6 = result;
  [result size];
  double v8 = v7;

  id result = [v4 image];
  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v9 = result;
  [result size];
  double v11 = v10;

  if (qword_1004C2EF8 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1004F86E8;
  if (qword_1004C27C8 != -1) {
    swift_once();
  }
  UIContentSizeCategory v13 = (UIContentSizeCategory)(id)qword_1004F7DD8;
  char v14 = static UIContentSizeCategory.> infix(_:_:)();

  if (v14)
  {

    UIContentSizeCategory v13 = UIContentSizeCategoryAccessibilityLarge;
  }
  double v15 = self;
  double v16 = self;
  id v17 = [v16 traitCollectionWithPreferredContentSizeCategory:v13];

  id v18 = [v15 preferredFontForTextStyle:v12 compatibleWithTraitCollection:v17];
  [v18 pointSize];
  double v20 = v19;

  uint64_t v21 = qword_1004F86E8;
  UIContentSizeCategory v22 = (UIContentSizeCategory)(id)qword_1004F7DD8;
  LOBYTE(v17) = static UIContentSizeCategory.> infix(_:_:)();

  if (v17)
  {

    UIContentSizeCategory v22 = UIContentSizeCategoryAccessibilityLarge;
  }
  double v23 = v8 / v11 * (v20 * 0.9);
  id v24 = [v16 traitCollectionWithPreferredContentSizeCategory:v22];

  id v25 = [v15 preferredFontForTextStyle:v21 compatibleWithTraitCollection:v24];
  [v25 pointSize];
  double v27 = v26;

  return [v4 setBounds:0.0, 0.0, v23, v27 * 0.9];
}

uint64_t sub_1000B92C4()
{
  return _swift_deallocObject(v0, 48, 7);
}

id sub_1000B9304()
{
  return sub_1000B5794(*(void **)(v0 + 16), *(void *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_1000B9310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894((uint64_t *)&unk_1004C9530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B9378(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000B93D8()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 104)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 120, 7);
}

void sub_1000B9430()
{
  sub_1000B72C4(*(void *)(v0 + 16), v0 + 24, *(void *)(v0 + 96), *(void (**)(uint64_t))(v0 + 104));
}

void sub_1000B9444(unint64_t *a1)
{
}

id sub_1000B9478()
{
  return sub_1000B7D74(*(void *)(v0 + 16));
}

double *sub_1000B94D0(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    id result = (double *)sub_1000BBE14(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      swift_getKeyPath();
      id v7 = v6;
      swift_getAtKeyPath();
      swift_release();

      double v9 = _swiftEmptyArrayStorage[2];
      double v8 = _swiftEmptyArrayStorage[3];
      if (*(void *)&v9 >= *(void *)&v8 >> 1) {
        sub_1000BBE14((char *)(*(void *)&v8 > 1uLL), *(void *)&v9 + 1, 1);
      }
      ++v4;
      *(void *)&_swiftEmptyArrayStorage[2] = *(void *)&v9 + 1;
      *((_DWORD *)&_swiftEmptyArrayStorage[4] + *(void *)&v9) = v10;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B9664(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000BE208((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_1000BD890(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1000B96D0()
{
  swift_retain();
  StateValue.ifUpdated(_:)();

  return swift_release();
}

void sub_1000B972C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    type metadata accessor for WorldRectangle();
    uint64_t v2 = swift_dynamicCastClass();
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      id v5 = v1;
      static os_log_type_t.debug.getter();
      sub_100021C08();
      uint64_t v4 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_1000B9814(v3);
    }
  }
}

uint64_t sub_1000B9814(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for MeasurementsHistory();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  double v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int v10 = (char *)&v78 - v9;
  uint64_t v11 = type metadata accessor for MeasurementHistoryItem();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  double v15 = (Swift::String *)((char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xD0))(v13);
  if (result == 5)
  {
    uint64_t v79 = v12;
    uint64_t v152 = v11;
    id v17 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x230);
    uint64_t v18 = v17();
    if ((v18 & 0xC000000000000001) != 0)
    {
      double v19 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_42;
      }
      double v19 = *(id *)(v18 + 32);
    }
    double v20 = v19;
    uint64_t v21 = swift_bridgeObjectRelease();
    float v2 = (*(float (**)(uint64_t))((swift_isaMask & *v20) + 0x340))(v21);

    uint64_t v22 = v17();
    if ((v22 & 0xC000000000000001) == 0)
    {
      if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
        __break(1u);
        goto LABEL_44;
      }
      double v23 = *(id *)(v22 + 40);
LABEL_8:
      id v24 = v23;
      uint64_t v25 = swift_bridgeObjectRelease();
      float v26 = (*(float (**)(uint64_t))((swift_isaMask & *v24) + 0x340))(v25);

      uint64_t v27 = v17();
      unint64_t v28 = v27 & 0xC000000000000001;
      if (v26 < v2)
      {
        if (!v28)
        {
          if (!*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_47:
            double v154 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            float v31 = v24;
LABEL_22:
            uint64_t v35 = swift_bridgeObjectRelease();
            float v36 = (*(float (**)(uint64_t))((swift_isaMask & *v31) + 0x340))(v35);
            sub_1000BE4B0((uint64_t)&v242, v36);
            uint64_t v150 = *((void *)&v242 + 1);
            uint64_t v151 = v242;
            uint64_t v149 = *(void *)v243;
            uint64_t v148 = *(void *)&v243[8];
            int v147 = *(_DWORD *)&v243[16];
            LODWORD(v133) = v243[20];
            int v146 = v243[21];
            uint64_t v145 = v244;
            uint64_t v144 = v245;
            uint64_t v143 = v246;
            uint64_t v142 = v247;
            int v141 = v248;
            int v132 = v249;
            int v140 = v250;
            uint64_t v138 = v252;
            uint64_t v139 = v251;
            uint64_t v136 = v254;
            uint64_t v137 = v253;
            int v135 = v255;
            int v131 = v256;
            long long v314 = v242;
            *(_OWORD *)v315 = *(_OWORD *)v243;
            *(void *)&v315[14] = *(void *)&v243[14];
            int v134 = v257;
            sub_100016FEC((uint64_t)&v315[16], (uint64_t)v317, &qword_1004C74C8);
            uint64_t result = sub_100016FEC((uint64_t)v317, (uint64_t)&v318, &qword_1004C74C8);
            if (v319)
            {
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
            long long v153 = v10;
            id v78 = v8;
            sub_100016FEC((uint64_t)&v315[21], (uint64_t)&v316, &qword_1004C96D0);
            sub_100016FEC((uint64_t)&v316, (uint64_t)&v320, &qword_1004C96D0);
            uint64_t result = v320;
            if (v320 == 4)
            {
LABEL_55:
              __break(1u);
              goto LABEL_56;
            }
            float v37 = sub_1001308E4(v320, 0);
            float v38 = (*(float (**)(void))((swift_isaMask & *v154) + 0x340))();
            sub_1000BE4B0((uint64_t)&v258, v38);
            uint64_t v124 = *((void *)&v258 + 1);
            uint64_t v125 = v258;
            uint64_t v122 = *(void *)&v259[8];
            uint64_t v123 = *(void *)v259;
            int v121 = *(_DWORD *)&v259[16];
            int v114 = v259[20];
            int v120 = v259[21];
            uint64_t v118 = v261;
            uint64_t v119 = v260;
            uint64_t v116 = v263;
            uint64_t v117 = v262;
            int v115 = v264;
            int v113 = v265;
            int v39 = v266;
            uint64_t v40 = v267;
            uint64_t v129 = v269;
            uint64_t v130 = v268;
            uint64_t v128 = v270;
            int v127 = v271;
            int v112 = v272;
            long long v310 = v258;
            *(_OWORD *)v311 = *(_OWORD *)v259;
            *(void *)&v311[14] = *(void *)&v259[14];
            int v126 = v273;
            sub_100016FEC((uint64_t)&v311[16], (uint64_t)v313, &qword_1004C74C8);
            uint64_t result = sub_100016FEC((uint64_t)v313, (uint64_t)&v321, &qword_1004C74C8);
            if (v322)
            {
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
            uint64_t v110 = v40;
            int v111 = v39;
            id v80 = v31;
            sub_100016FEC((uint64_t)&v311[21], (uint64_t)&v312, &qword_1004C96D0);
            sub_100016FEC((uint64_t)&v312, (uint64_t)v323, &qword_1004C96D0);
            uint64_t result = v323[0];
            if (v323[0] == 4)
            {
LABEL_57:
              __break(1u);
              return result;
            }
            float v41 = sub_1001308E4(v323[0], 0);
            double v42 = *(void (**)(uint64_t))(**(void **)(v3 + 88) + 144);
            uint64_t v43 = swift_retain();
            v42(v43);
            swift_release();
            id v44 = sub_1000B1320();
            BOOL v45 = v44 == 0;
            sub_100130B38((uint64_t)v44, 1, 0, 0, (uint64_t *)&v274, v37 * v41);
            long long v107 = v274;
            uint64_t v105 = v276;
            uint64_t v106 = v275;
            int v104 = v277;
            uint64_t v109 = v3;
            char v46 = v278;
            int v108 = v279;
            sub_100130B38((uint64_t)v44, 0, 1, 0, (uint64_t *)&v280, v37 * v41);
            long long v102 = v280;
            uint64_t v100 = v282;
            uint64_t v101 = v281;
            int v99 = v283;
            LOBYTE(v44) = v284;
            int v103 = v285;
            sub_100130B38(v45, 0, 0, 0, (uint64_t *)&v286, v37 * v41);
            long long v97 = v286;
            uint64_t v95 = v288;
            uint64_t v96 = v287;
            int v94 = v289;
            LOBYTE(v45) = v290;
            int v98 = v291;
            sub_1000BE4B0((uint64_t)&v292, sqrtf((float)(v37 * v37) + (float)(v41 * v41)));
            long long v82 = v292;
            uint64_t v47 = v293;
            uint64_t v48 = v294;
            int v81 = v295;
            long long v87 = v298;
            uint64_t v85 = v300;
            uint64_t v86 = v299;
            int v83 = v297;
            int v84 = v301;
            int v92 = v303;
            long long v91 = v304;
            uint64_t v89 = v306;
            uint64_t v90 = v305;
            int v88 = v307;
            int v93 = v309;
            char v166 = v133;
            char v165 = v132;
            char v164 = v131;
            char v163 = v114;
            char v162 = v113;
            char v161 = v112;
            char v160 = v296;
            char v159 = v302;
            char v158 = v308;
            char v157 = v46;
            char v156 = (char)v44;
            uint64_t v49 = swift_isaMask & *a1;
            BOOL v155 = v45;
            uint64_t v50 = (*(uint64_t (**)(void))(v49 + 184))();
            id v52 = v51;
            id v53 = [self mainBundle];
            v324._object = (void *)0xE000000000000000;
            v54._object = (void *)0x80000001004244C0;
            v54._countAndFlagsBits = 0xD00000000000001DLL;
            v55._countAndFlagsBits = 0;
            v55._object = (void *)0xE000000000000000;
            v324._countAndFlagsBits = 0;
            Swift::String v56 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, (Swift::String_optional)0, (NSBundle)v53, v55, v324);

            uint64_t v57 = v152;
            uint64_t v58 = (uint64_t)v15 + *(int *)(v152 + 24);
            uint64_t v59 = type metadata accessor for MeasurementCapture();
            CGFloat v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56);
            uint64_t v133 = v58;
            v60(v58, 1, 1, v59);
            v167[0] = v151;
            v167[1] = v150;
            v167[2] = v149;
            v167[3] = v148;
            int v168 = v147;
            char v170 = v146;
            uint64_t v171 = v145;
            uint64_t v172 = v144;
            uint64_t v173 = v143;
            uint64_t v174 = v142;
            int v175 = v141;
            char v177 = v140;
            uint64_t v178 = v139;
            uint64_t v179 = v138;
            uint64_t v180 = v137;
            uint64_t v181 = v136;
            int v182 = v135;
            char v184 = v134;
            uint64_t v185 = v125;
            uint64_t v186 = v124;
            uint64_t v187 = v123;
            uint64_t v188 = v122;
            int v189 = v121;
            char v191 = v120;
            uint64_t v192 = v119;
            uint64_t v193 = v118;
            uint64_t v194 = v117;
            uint64_t v195 = v116;
            int v196 = v115;
            char v169 = v166;
            char v176 = v165;
            char v183 = v164;
            char v190 = v163;
            char v197 = v162;
            char v198 = v111;
            uint64_t v199 = v110;
            uint64_t v200 = v130;
            uint64_t v201 = v129;
            uint64_t v202 = v128;
            int v203 = v127;
            char v204 = v161;
            char v205 = v126;
            long long v206 = v82;
            uint64_t v207 = v47;
            uint64_t v208 = v48;
            int v209 = v81;
            char v210 = v160;
            char v211 = v83;
            long long v212 = v87;
            uint64_t v213 = v86;
            uint64_t v214 = v85;
            int v215 = v84;
            char v216 = v159;
            char v217 = v92;
            long long v218 = v91;
            uint64_t v219 = v90;
            uint64_t v220 = v89;
            int v221 = v88;
            char v222 = v158;
            char v223 = v93;
            long long v224 = v107;
            uint64_t v225 = v106;
            uint64_t v226 = v105;
            int v227 = v104;
            char v228 = v157;
            char v229 = v108;
            long long v230 = v102;
            uint64_t v231 = v101;
            uint64_t v232 = v100;
            int v233 = v99;
            char v234 = v156;
            char v235 = v103;
            long long v236 = v97;
            uint64_t v237 = v96;
            uint64_t v238 = v95;
            int v239 = v94;
            BOOL v240 = v155;
            char v241 = v98;
            sub_1000BEC68((uint64_t)v167);
            v15->_countAndFlagsBits = v50;
            v15->_object = v52;
            v15[1] = v56;
            sub_100026A04((uint64_t)v167, (uint64_t)v15 + *(int *)(v57 + 28));
            *((unsigned char *)&v15->_countAndFlagsBits + *(int *)(v57 + 32)) = 1;
            uint64_t v61 = v109;
            double v62 = *(void (**)(uint64_t))(**(void **)(v109 + 64) + 144);
            uint64_t v63 = swift_retain();
            uint64_t v64 = (uint64_t)v153;
            v62(v63);
            swift_release();
            uint64_t v65 = *(void *)v64;
            uint64_t v66 = *(void *)(*(void *)v64 + 16);
            if (!v66)
            {
LABEL_38:
              sub_1000B9378(v64, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
              sub_1000BB374(v15, 1);

              return sub_1000B9378((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
            }
            unint64_t v67 = 0;
            unint64_t v68 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
            uint64_t v69 = *(void *)(v79 + 72);
            while (1)
            {
              BOOL v70 = *(void *)(v65 + v68) == v50 && *(void *)(v65 + v68 + 8) == (void)v52;
              if (v70 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                break;
              }
              ++v67;
              v68 += v69;
              if (v66 == v67)
              {
                uint64_t v64 = (uint64_t)v153;
                goto LABEL_38;
              }
            }
            sub_1000B9378((uint64_t)v153, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
            double v71 = *(void (**)(uint64_t))(**(void **)(v61 + 64) + 144);
            uint64_t v72 = swift_retain();
            uint64_t v64 = (uint64_t)v78;
            v71(v72);
            uint64_t result = swift_release();
            if (v67 < *(void *)(*(void *)v64 + 16))
            {
              unint64_t v73 = *(void *)v64 + v68;
              uint64_t v75 = *(void *)(v73 + 16);
              double v74 = *(void **)(v73 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v15[1]._countAndFlagsBits = v75;
              v15[1]._object = v74;
              sub_1000B9378(v64, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
              UIContentSizeCategory v76 = *(void (**)(uint64_t))(**(void **)(v61 + 64) + 144);
              uint64_t v77 = swift_retain();
              v76(v77);
              uint64_t result = swift_release();
              if (v67 < *(void *)(*(void *)v64 + 16))
              {
                sub_1000BE7A4(*(void *)v64 + *(int *)(v152 + 24) + v68, v133);
                goto LABEL_38;
              }
              goto LABEL_53;
            }
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
          id v29 = *(id *)(v27 + 32);
LABEL_12:
          id v24 = v29;
          uint64_t v30 = swift_bridgeObjectRelease();
          uint64_t result = ((uint64_t (*)(uint64_t))v17)(v30);
          if ((result & 0xC000000000000001) == 0)
          {
            if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
            {
              float v31 = v24;
              double v154 = *(id *)(result + 40);
              goto LABEL_22;
            }
            __break(1u);
LABEL_51:
            __break(1u);
            goto LABEL_52;
          }
          goto LABEL_47;
        }
LABEL_44:
        id v29 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_12;
      }
      if (v28)
      {
        uint64_t v32 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v32 = *(id *)(v27 + 32);
      }
      double v154 = v32;
      uint64_t v33 = swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(uint64_t))v17)(v33);
      if ((result & 0xC000000000000001) == 0)
      {
        if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
          goto LABEL_51;
        }
        uint64_t v34 = *(id *)(result + 40);
        goto LABEL_21;
      }
LABEL_49:
      uint64_t v34 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_21:
      float v31 = v34;
      goto LABEL_22;
    }
LABEL_42:
    double v23 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  return result;
}

unint64_t sub_1000BA6E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MeasurementsHistory();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v52 - v8;
  int v10 = (int *)type metadata accessor for MeasurementHistoryItem();
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t result = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xD0))(v12);
  if (result > 7 || ((1 << result) & 0x98) == 0)
  {
    Swift::String v56 = v7;
    uint64_t v57 = v11;
    uint64_t v17 = sub_1000BAC1C(a1, (uint64_t)v60);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8))(v17);
    uint64_t v20 = v19;
    id v21 = [self mainBundle];
    v62._object = (void *)0xE000000000000000;
    v22._object = (void *)0x8000000100424410;
    v22._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v23._uint64_t countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    v62._uint64_t countAndFlagsBits = 0;
    Swift::String v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v62);
    object = (uint64_t (*)(void))v24._object;
    uint64_t countAndFlagsBits = v24._countAndFlagsBits;

    uint64_t v25 = (uint64_t)v14 + v10[6];
    uint64_t v26 = type metadata accessor for MeasurementCapture();
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
    uint64_t v54 = v25;
    v27(v25, 1, 1, v26);
    memcpy(v61, v60, 0x10DuLL);
    sub_1000BE6A8((uint64_t)v61);
    *uint64_t v14 = v18;
    v14[1] = v20;
    unint64_t v28 = object;
    v14[2] = countAndFlagsBits;
    v14[3] = (uint64_t)v28;
    uint64_t v29 = sub_100026A04((uint64_t)v61, (uint64_t)v14 + v10[7]);
    Swift::String v55 = v10;
    uint64_t v30 = v10[8];
    uint64_t v31 = swift_isaMask & *a1;
    object = *(uint64_t (**)(void))(v31 + 0x2C8);
    uint64_t countAndFlagsBits = v31 + 712;
    *((unsigned char *)v14 + v30) = object(v29) & 1;
    uint64_t v32 = *(void (**)(uint64_t))(**(void **)(v2 + 64) + 144);
    uint64_t v33 = (uint64_t)v9;
    uint64_t v34 = swift_retain();
    v32(v34);
    swift_release();
    uint64_t v35 = *(void *)v9;
    uint64_t v36 = *(void *)(*(void *)v9 + 16);
    if (v36)
    {
      uint64_t v52 = v33;
      uint64_t v53 = v2;
      unint64_t v37 = 0;
      unint64_t v38 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      uint64_t v39 = *(void *)(v57 + 72);
      while (1)
      {
        BOOL v40 = *(void *)(v35 + v38) == v18 && *(void *)(v35 + v38 + 8) == v20;
        if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        ++v37;
        v38 += v39;
        if (v36 == v37)
        {
          uint64_t v41 = v52;
          goto LABEL_19;
        }
      }
      sub_1000B9378(v52, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
      uint64_t v42 = v53;
      uint64_t v43 = *(void (**)(uint64_t))(**(void **)(v53 + 64) + 144);
      uint64_t v44 = swift_retain();
      uint64_t v41 = (uint64_t)v56;
      v43(v44);
      unint64_t result = swift_release();
      if (v37 >= *(void *)(*(void *)v41 + 16))
      {
        __break(1u);
      }
      else
      {
        unint64_t v45 = *(void *)v41 + v38;
        uint64_t v47 = *(void *)(v45 + 16);
        uint64_t v46 = *(void *)(v45 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v14[2] = v47;
        v14[3] = v46;
        sub_1000B9378(v41, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
        uint64_t v48 = *(void (**)(uint64_t))(**(void **)(v42 + 64) + 144);
        uint64_t v49 = swift_retain();
        v48(v49);
        unint64_t result = swift_release();
        if (v37 < *(void *)(*(void *)v41 + 16))
        {
          sub_1000BE7A4(*(void *)v41 + v55[6] + v38, v54);
LABEL_19:
          uint64_t v50 = sub_1000B9378(v41, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
          char v51 = object(v50);
          sub_1000BB374(v14, v51 & 1);
          return sub_1000B9378((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
        }
      }
      __break(1u);
      return result;
    }
    uint64_t v41 = v33;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1000BAC1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v7)(char **__return_ptr, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  float v14;
  float v15;
  const mach_header_64 *v16;
  const mach_header_64 *v17;
  unint64_t v18;
  const mach_header_64 *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  void *v39;
  uint64_t result;
  long long v41;
  float32x4_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  char *v76[4];
  unsigned int v77;
  char v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  char v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  char v92;
  unsigned __int8 v93;
  void v94[4];
  int v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char v110;
  char v111;

  float v5 = (*(float (**)(void))((swift_isaMask & *a1) + 0x340))();
  sub_1000BE4B0((uint64_t)v94, v5);
  CGFloat v60 = v94[1];
  uint64_t v61 = v94[0];
  uint64_t v58 = v94[3];
  uint64_t v59 = v94[2];
  uint64_t v57 = v95;
  uint64_t v75 = v96;
  double v74 = v97;
  uint64_t v72 = v99;
  unint64_t v73 = v98;
  BOOL v70 = v101;
  double v71 = v100;
  uint64_t v69 = v102;
  unint64_t v68 = v103;
  unint64_t v67 = v104;
  uint64_t v65 = v106;
  uint64_t v66 = v105;
  uint64_t v63 = v108;
  uint64_t v64 = v107;
  Swift::String v62 = v109;
  Swift::String v56 = v110;
  char v6 = v111;
  uint64_t v7 = *(void (**)(char **__return_ptr, uint64_t))(**(void **)(v2 + 80) + 144);
  uint64_t v8 = swift_retain();
  v7(v76, v8);
  uint64_t v9 = swift_release();
  if (v83) {
    goto LABEL_2;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x250))(v9);
  uint64_t v13 = sub_1000B94D0(v12);
  swift_bridgeObjectRelease();
  v76[0] = (char *)v13;
  swift_bridgeObjectRetain();
  sub_1000B9664(v76);
  swift_bridgeObjectRelease();
  if (!*((void *)v76[0] + 2))
  {
LABEL_29:
    swift_release();
    __break(1u);
    unint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v14 = *((float *)v76[0] + 8);
  swift_release();
  uint64_t v9 = simd_float4x4.position.getter();
  if ((float)(v14 - v15) < 0.00000011921)
  {
LABEL_2:
    Swift::String v55 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    uint64_t v50 = 0;
    char v51 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v43 = 0;
    int v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    sub_1000BE8E8((uint64_t)v76, v14 - v15);
    Swift::String v55 = v76[0];
    uint64_t v53 = v76[2];
    uint64_t v54 = v76[1];
    uint64_t v52 = v76[3];
    char v51 = v80;
    uint64_t v50 = v81;
    uint64_t v49 = v82;
    uint64_t v48 = v83;
    uint64_t v46 = v88;
    uint64_t v47 = v87;
    if (v78) {
      double v16 = &_mh_execute_header;
    }
    else {
      double v16 = 0;
    }
    unint64_t v45 = (unint64_t)v16 | v77 | ((unint64_t)v79 << 40);
    if (v85) {
      uint64_t v17 = &_mh_execute_header;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (unint64_t)v17 | v84 | ((unint64_t)v86 << 40);
    if (v92) {
      uint64_t v19 = &_mh_execute_header;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v11 = (unint64_t)v19 | v91 | ((unint64_t)v93 << 40);
    int v10 = v90;
    uint64_t v43 = v89;
    uint64_t v44 = v18;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x250);
  id v21 = v20(v9);
  if ((v21 & 0xC000000000000001) != 0)
  {
    Swift::String v22 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    Swift::String v22 = *(id *)(v21 + 40);
  }
  Swift::String v23 = v22;
  Swift::String v24 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((swift_isaMask & *v23) + 0x2B0))(v24);

  uint64_t v25 = simd_float4x4.position.getter();
  uint64_t v42 = v26;
  uint64_t v27 = v20(v25);
  if ((v27 & 0xC000000000000001) != 0)
  {
    unint64_t v28 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_21;
  }
  if (!*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_28;
  }
  unint64_t v28 = *(id *)(v27 + 32);
LABEL_21:
  uint64_t v29 = v28;
  uint64_t v30 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((swift_isaMask & *v29) + 0x2B0))(v30);

  simd_float4x4.position.getter();
  uint64_t v32 = vsubq_f32(v42, v31);
  uint64_t v33 = (int32x4_t)vmulq_f32(v32, v32);
  v33.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v33, 2), vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1))).u32[0];
  uint64_t v34 = vrsqrte_f32((float32x2_t)v33.u32[0]);
  uint64_t v35 = vmul_f32(v34, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v34, v34)));
  uint64_t v36 = vmulq_f32(*(float32x4_t *)SIMD3<>.up.unsafeMutableAddressor(), vmulq_n_f32(v32, vmul_f32(v35, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v35, v35))).f32[0]));
  unint64_t v37 = fabsf(acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0])* 57.296);
  if (v37 >= 90.0) {
    unint64_t v38 = v37 + -90.0;
  }
  else {
    unint64_t v38 = 90.0 - v37;
  }
  uint64_t v39 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x268))();
  (*(void (**)(void))((swift_isaMask & *v39) + 0x2B0))();

  unint64_t result = simd_float4x4.position.getter();
  *(void *)a2 = v61;
  *(void *)(a2 + 8) = v60;
  *(void *)(a2 + 16) = v59;
  *(void *)(a2 + 24) = v58;
  *(_DWORD *)(a2 + 32) = v57;
  *(unsigned char *)(a2 + 36) = v75;
  *(unsigned char *)(a2 + 37) = v74;
  *(void *)(a2 + 40) = v73;
  *(void *)(a2 + 48) = v72;
  *(void *)(a2 + 56) = v71;
  *(void *)(a2 + 64) = v70;
  *(_DWORD *)(a2 + 72) = v69;
  *(unsigned char *)(a2 + 76) = v68;
  *(unsigned char *)(a2 + 77) = v67;
  *(void *)(a2 + 80) = v66;
  *(void *)(a2 + 88) = v65;
  *(void *)(a2 + 96) = v64;
  *(void *)(a2 + 104) = v63;
  *(_DWORD *)(a2 + 112) = v62;
  *(unsigned char *)(a2 + 116) = v56;
  *(unsigned char *)(a2 + 117) = v6;
  *(_OWORD *)(a2 + 128) = v41;
  *(void *)(a2 + 144) = v55;
  *(void *)(a2 + 152) = v54;
  *(void *)(a2 + 160) = v53;
  *(void *)(a2 + 168) = v52;
  *(void *)(a2 + 176) = v45;
  *(void *)(a2 + 184) = v51;
  *(void *)(a2 + 192) = v50;
  *(void *)(a2 + 200) = v49;
  *(void *)(a2 + 208) = v48;
  *(void *)(a2 + 216) = v44;
  *(void *)(a2 + 224) = v47;
  *(void *)(a2 + 232) = v46;
  *(void *)(a2 + 240) = v43;
  *(void *)(a2 + 248) = v10;
  *(_WORD *)(a2 + 260) = WORD2(v11);
  *(_DWORD *)(a2 + 256) = v11;
  *(float *)(a2 + 264) = v38;
  *(unsigned char *)(a2 + 268) = 0;
  return result;
}

uint64_t sub_1000BB374(void *a1, int a2)
{
  uint64_t v3 = v2;
  int v41 = a2;
  uint64_t v5 = type metadata accessor for MeasurementsHistory();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = &v40[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  int v10 = &v40[-v9];
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v13 = *(void (**)(uint64_t))(**(void **)(v2 + 64) + 144);
  uint64_t v14 = swift_retain();
  v13(v14);
  swift_release();
  uint64_t v15 = *(void *)v10;
  uint64_t v16 = *(void *)(*(void *)v10 + 16);
  if (v16)
  {
    uint64_t v17 = *(void *)(type metadata accessor for MeasurementHistoryItem() - 8);
    unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v19 = *(void *)(v17 + 72);
    uint64_t v20 = (void *)(v18 + v15 + 8);
    while (1)
    {
      BOOL v21 = *(v20 - 1) == v11 && *v20 == v12;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      uint64_t v20 = (void *)((char *)v20 + v19);
      if (!--v16) {
        goto LABEL_9;
      }
    }
    sub_1000B9378((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
    uint64_t v26 = *(void (**)(uint64_t))(**(void **)(v3 + 64) + 144);
    uint64_t v27 = swift_retain();
    v26(v27);
    swift_release();
    uint64_t v28 = *(void *)(*(void *)v8 + 16);
    if (v28)
    {
      uint64_t v11 = 0;
      uint64_t v29 = *a1;
      uint64_t v30 = a1[1];
      uint64_t v31 = (void *)(v18 + *(void *)v8 + 8);
      while (1)
      {
        BOOL v32 = *(v31 - 1) == v29 && *v31 == v30;
        if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = (void *)((char *)v31 + v19);
        if (v28 == ++v11) {
          goto LABEL_18;
        }
      }
    }
    else
    {
LABEL_18:
      sub_1000B9378((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
      LODWORD(v39) = 0;
      uint64_t v38 = 167;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    sub_1000B9378((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
    uint64_t v33 = *(uint64_t (**)(uint64_t))(**(void **)(v3 + 64) + 200);
    uint64_t v34 = swift_retain();
    uint64_t v35 = v33(v34);
    uint64_t v36 = swift_release();
    __chkstk_darwin(v36);
    *(void *)&v40[-32] = v11;
    *(void *)&v40[-24] = a1;
    LOBYTE(v38) = v41 & 1;
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(void *)v35 + 416))(sub_1000BE818);
  }
  else
  {
LABEL_9:
    sub_1000B9378((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MeasurementsHistory);
    Swift::String v22 = *(uint64_t (**)(uint64_t))(**(void **)(v3 + 64) + 200);
    uint64_t v23 = swift_retain();
    uint64_t v24 = v22(v23);
    uint64_t v25 = swift_release();
    __chkstk_darwin(v25);
    LOBYTE(v38) = v41 & 1;
    uint64_t v39 = a1;
    (*(void (**)(uint64_t (*)(void **)))(*(void *)v24 + 416))(sub_1000BE80C);
  }
  return swift_release();
}

uint64_t sub_1000BB7D0(void **a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MeasurementHistoryItem();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v10 = (uint64_t)a1 + *(int *)(type metadata accessor for MeasurementsHistory() + 20);
    sub_1000BE888(v10);
    sub_1000297B8(a3, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  sub_1000297B8(a3, (uint64_t)v9);
  uint64_t v11 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = (void *)sub_10006E5E0(0, v11[2] + 1, 1, v11);
  }
  unint64_t v13 = v11[2];
  unint64_t v12 = v11[3];
  if (v13 >= v12 >> 1) {
    uint64_t v11 = (void *)sub_10006E5E0(v12 > 1, v13 + 1, 1, v11);
  }
  v11[2] = v13 + 1;
  uint64_t result = sub_10009F928((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v13);
  *a1 = v11;
  return result;
}

uint64_t sub_1000BB964(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (void *)*a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a1 = (uint64_t)v8;
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = sub_100030BB0(v8);
  uint64_t v8 = (void *)result;
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_3:
  if (v8[2] <= a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v10 = type metadata accessor for MeasurementHistoryItem();
  uint64_t v14 = *(void *)(v10 - 8);
  sub_1000BE824(a3, (uint64_t)v8+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * a2);
  if (a4)
  {
    uint64_t v11 = (uint64_t)a1 + *(int *)(type metadata accessor for MeasurementsHistory() + 20);
    sub_1000BE888(v11);
    sub_1000297B8(a3, v11);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v10);
  }
  uint64_t v12 = (uint64_t)a1 + *(int *)(type metadata accessor for MeasurementsHistory() + 24);
  sub_1000BE888(v12);
  sub_1000297B8(a3, v12);
  unint64_t v13 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56);

  return v13(v12, 0, 1, v10);
}

uint64_t sub_1000BBAF8(uint64_t a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = sub_1000BEC00(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = sub_1000BE27C((uint64_t)v7, v2, v3, v4);
  sub_100013218(a1);
  return v9;
}

uint64_t sub_1000BBBFC()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000BBC3C()
{
  StateObserver.deinit();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HistoryTracker()
{
  uint64_t result = qword_1004C9578;
  if (!qword_1004C9578) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000BBCE8()
{
  return swift_initClassMetadata2();
}

char *sub_1000BBD38(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC080(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

size_t sub_1000BBD58(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000BD48C(a1, a2, a3, (void *)*v3, &qword_1004C96A8, (uint64_t (*)(void))&type metadata accessor for URL);
  size_t *v3 = result;
  return result;
}

double *sub_1000BBD94(double *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BC17C(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

double *sub_1000BBDB4(double *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BC294(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_1000BBDD4(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BC390(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BBDF4(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BC4AC(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BBE14(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BC5A8(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BBE34(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BC6A4(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

double *sub_1000BBE54(double *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BC8DC(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_1000BBE74(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BCAE0(a1, a2, a3, *v3, &qword_1004C96F8);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BBE9C(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BCAE0(a1, a2, a3, *v3, &qword_1004C9700);
  uint64_t *v3 = result;
  return result;
}

void *sub_1000BBEC4(void *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BCBD8(a1, a2, a3, *v3, &qword_1004C71B8, &qword_1004C71B0);
  uint64_t *v3 = result;
  return result;
}

void *sub_1000BBEF4(void *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BCBD8(a1, a2, a3, *v3, &qword_1004C96E0, &qword_1004C96E8);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BBF24(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BCD00(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BBF44(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BCDEC(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BBF64(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BCEE8(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

void *sub_1000BBF84(void *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BCFF4(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

void *sub_1000BBFA4(void *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BD118(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BBFC4(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BD254(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BBFE4(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BD36C(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

size_t sub_1000BC004(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000BD48C(a1, a2, a3, (void *)*v3, &qword_1004C6930, (uint64_t (*)(void))type metadata accessor for MeasurementHistoryItem);
  size_t *v3 = result;
  return result;
}

double *sub_1000BC040(double *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BD668(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

double *sub_1000BC060(double *a1, int64_t a2, char a3)
{
  size_t result = sub_1000BD76C(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1000BC080(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C6B30);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_release();
  return v10;
}

double *sub_1000BC17C(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894((uint64_t *)&unk_1004C6950);
    uint64_t v10 = (double *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = (char *)(v10 + 4);
  unint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    if (v10 != (double *)a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

double *sub_1000BC294(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894((uint64_t *)&unk_1004C71E0);
    uint64_t v10 = (double *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (char *)(v10 + 4);
  uint64_t v14 = (char *)(a4 + 32);
  if (v5)
  {
    if (v10 != (double *)a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1000BC390(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C6988);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1000BC4AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C96A0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1000BC5A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C6938);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1000BC6A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C6980);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

double *sub_1000BC7A0(double *result, int64_t a2, char a3, double *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C6A20);
    uint64_t v10 = (double *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[14 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 112 * v8);
    }
    a4[2] = 0.0;
  }
  else
  {
    sub_100012894(&qword_1004C6A28);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

double *sub_1000BC8DC(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C3D00);
    uint64_t v10 = (double *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (char *)(v10 + 4);
  uint64_t v14 = (char *)(a4 + 32);
  if (v5)
  {
    if (v10 != (double *)a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1000BC9E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C7138);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1000BCAE0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_100012894(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 32 * v9);
  }
  swift_release();
  return v11;
}

void *sub_1000BCBD8(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100012894(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 1;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[4 * v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 32 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100012894(a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v13;
}

char *sub_1000BCD00(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C96F0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

char *sub_1000BCDEC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C6020);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1000BCEE8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C96D8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 48 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

void *sub_1000BCFF4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C69D8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100012894(&qword_1004C69E0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_1000BD118(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C6B20);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100012894(&qword_1004C6B28);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1000BD254(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C96B0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8]) {
      memmove(v12, v13, 12 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 12 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1000BD36C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894((uint64_t *)&unk_1004C6960);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 304);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[304 * v8]) {
      memmove(v12, v13, 304 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t sub_1000BD48C(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100012894(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

double *sub_1000BD668(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C6918);
    int64_t v10 = (double *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v13 = (char *)(v10 + 4);
  uint64_t v14 = (char *)(a4 + 32);
  if (v5)
  {
    if (v10 != (double *)a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

double *sub_1000BD76C(double *result, int64_t a2, char a3, double *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894((uint64_t *)&unk_1004C6970);
    int64_t v10 = (double *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 95;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[16 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, v8 << 7);
    }
    a4[2] = 0.0;
  }
  else
  {
    sub_100012894(&qword_1004CEA20);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1000BD890(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        float v81 = *(float *)(v79 + 4 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = v79 + 4 * v82;
          if (v81 >= *(float *)v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(_DWORD *)(v83 + 4) = *(_DWORD *)v83;
          *(float *)(v79 + 4 * v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_136;
    }
    uint64_t v95 = result;
    Swift::Int v96 = v3;
    if (v3 > 1)
    {
      uint64_t v6 = v5 >> 1;
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v6;
      Swift::Int v3 = v96;
      int v94 = (double *)result;
      int v98 = (float *)(result + 32);
LABEL_13:
      Swift::Int v8 = 0;
      uint64_t v9 = *v2;
      int v92 = v2;
      uint64_t v93 = *v2 - 4;
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v97 = *v2;
      while (1)
      {
        Swift::Int v12 = v8++;
        if (v8 < v3)
        {
          float v13 = *(float *)(v9 + 4 * v8);
          float v14 = *(float *)(v9 + 4 * v12);
          Swift::Int v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            float v15 = v13;
            while (1)
            {
              float v16 = v15;
              float v15 = *(float *)(v9 + 4 * v8);
              if (v13 < v14 == v15 >= v16) {
                break;
              }
              if (v3 == ++v8)
              {
                Swift::Int v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12) {
              goto LABEL_138;
            }
            if (v12 < v8)
            {
              uint64_t v17 = (int *)(v93 + 4 * v8);
              Swift::Int v18 = v8;
              Swift::Int v19 = v12;
              uint64_t v20 = (int *)(v9 + 4 * v12);
              do
              {
                if (v19 != --v18)
                {
                  if (!v9) {
                    goto LABEL_144;
                  }
                  int v21 = *v20;
                  int *v20 = *v17;
                  *uint64_t v17 = v21;
                }
                ++v19;
                --v17;
                ++v20;
              }
              while (v19 < v18);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12)) {
            goto LABEL_135;
          }
          if (v8 - v12 < v95)
          {
            Swift::Int v22 = v12 + v95;
            if (__OFADD__(v12, v95)) {
              goto LABEL_139;
            }
            if (v22 >= v3) {
              Swift::Int v22 = v3;
            }
            if (v22 < v12)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v8 != v22)
            {
              uint64_t v23 = (float *)(v93 + 4 * v8);
              do
              {
                float v24 = *(float *)(v9 + 4 * v8);
                Swift::Int v25 = v12;
                uint64_t v26 = v23;
                do
                {
                  float v27 = *v26;
                  if (v24 >= *v26) {
                    break;
                  }
                  if (!v9) {
                    goto LABEL_142;
                  }
                  float *v26 = v24;
                  v26[1] = v27;
                  --v26;
                  ++v25;
                }
                while (v8 != v25);
                ++v8;
                ++v23;
              }
              while (v8 != v22);
              Swift::Int v8 = v22;
            }
          }
        }
        if (v8 < v12) {
          goto LABEL_130;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1000BE0E4(0, *((void *)v10 + 2) + 1, 1, (char *)v10);
          int64_t v10 = (double *)result;
        }
        unint64_t v29 = *((void *)v10 + 2);
        unint64_t v28 = *((void *)v10 + 3);
        unint64_t v11 = v29 + 1;
        uint64_t v9 = v97;
        if (v29 >= v28 >> 1)
        {
          uint64_t result = (uint64_t)sub_1000BE0E4((char *)(v28 > 1), v29 + 1, 1, (char *)v10);
          uint64_t v9 = v97;
          int64_t v10 = (double *)result;
        }
        *((void *)v10 + 2) = v11;
        uint64_t v30 = v10 + 4;
        uint64_t v31 = &v10[2 * v29 + 4];
        *(void *)uint64_t v31 = v12;
        *((void *)v31 + 1) = v8;
        if (v29)
        {
          while (1)
          {
            unint64_t v32 = v11 - 1;
            if (v11 >= 4)
            {
              unint64_t v37 = &v30[2 * v11];
              uint64_t v38 = *((void *)v37 - 8);
              uint64_t v39 = *((void *)v37 - 7);
              BOOL v43 = __OFSUB__(v39, v38);
              uint64_t v40 = v39 - v38;
              if (v43) {
                goto LABEL_119;
              }
              uint64_t v42 = *((void *)v37 - 6);
              uint64_t v41 = *((void *)v37 - 5);
              BOOL v43 = __OFSUB__(v41, v42);
              uint64_t v35 = v41 - v42;
              char v36 = v43;
              if (v43) {
                goto LABEL_120;
              }
              unint64_t v44 = v11 - 2;
              unint64_t v45 = &v30[2 * v11 - 4];
              uint64_t v47 = *(void *)v45;
              uint64_t v46 = *((void *)v45 + 1);
              BOOL v43 = __OFSUB__(v46, v47);
              uint64_t v48 = v46 - v47;
              if (v43) {
                goto LABEL_121;
              }
              BOOL v43 = __OFADD__(v35, v48);
              uint64_t v49 = v35 + v48;
              if (v43) {
                goto LABEL_123;
              }
              if (v49 >= v40)
              {
                unint64_t v67 = &v30[2 * v32];
                uint64_t v69 = *(void *)v67;
                uint64_t v68 = *((void *)v67 + 1);
                BOOL v43 = __OFSUB__(v68, v69);
                uint64_t v70 = v68 - v69;
                if (v43) {
                  goto LABEL_129;
                }
                BOOL v60 = v35 < v70;
                goto LABEL_83;
              }
            }
            else
            {
              if (v11 != 3)
              {
                uint64_t v61 = *((void *)v10 + 4);
                uint64_t v62 = *((void *)v10 + 5);
                BOOL v43 = __OFSUB__(v62, v61);
                uint64_t v54 = v62 - v61;
                char v55 = v43;
                goto LABEL_77;
              }
              uint64_t v34 = *((void *)v10 + 4);
              uint64_t v33 = *((void *)v10 + 5);
              BOOL v43 = __OFSUB__(v33, v34);
              uint64_t v35 = v33 - v34;
              char v36 = v43;
            }
            if (v36) {
              goto LABEL_122;
            }
            unint64_t v44 = v11 - 2;
            uint64_t v50 = &v30[2 * v11 - 4];
            uint64_t v52 = *(void *)v50;
            uint64_t v51 = *((void *)v50 + 1);
            BOOL v53 = __OFSUB__(v51, v52);
            uint64_t v54 = v51 - v52;
            char v55 = v53;
            if (v53) {
              goto LABEL_124;
            }
            Swift::String v56 = &v30[2 * v32];
            uint64_t v58 = *(void *)v56;
            uint64_t v57 = *((void *)v56 + 1);
            BOOL v43 = __OFSUB__(v57, v58);
            uint64_t v59 = v57 - v58;
            if (v43) {
              goto LABEL_126;
            }
            if (__OFADD__(v54, v59)) {
              goto LABEL_128;
            }
            if (v54 + v59 >= v35)
            {
              BOOL v60 = v35 < v59;
LABEL_83:
              if (v60) {
                unint64_t v32 = v44;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v55) {
              goto LABEL_125;
            }
            uint64_t v63 = &v30[2 * v32];
            uint64_t v65 = *(void *)v63;
            uint64_t v64 = *((void *)v63 + 1);
            BOOL v43 = __OFSUB__(v64, v65);
            uint64_t v66 = v64 - v65;
            if (v43) {
              goto LABEL_127;
            }
            if (v66 < v54) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v71 = v32 - 1;
            if (v32 - 1 >= v11)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v9) {
              goto LABEL_143;
            }
            uint64_t v72 = &v30[2 * v71];
            uint64_t v73 = *(void *)v72;
            double v74 = v30;
            uint64_t v75 = &v30[2 * v32];
            double v76 = v75[1];
            uint64_t result = sub_1000BDEE0((float *)(v9 + 4 * *(void *)v72), (float *)(v9 + 4 * *(void *)v75), v9 + 4 * *(void *)&v76, v98);
            if (v1) {
              goto LABEL_113;
            }
            if (*(uint64_t *)&v76 < v73) {
              goto LABEL_116;
            }
            if (v32 > *((void *)v10 + 2)) {
              goto LABEL_117;
            }
            *(void *)uint64_t v72 = v73;
            v74[2 * v71 + 1] = v76;
            unint64_t v77 = *((void *)v10 + 2);
            if (v32 >= v77) {
              goto LABEL_118;
            }
            unint64_t v11 = v77 - 1;
            uint64_t result = (uint64_t)memmove(v75, v75 + 2, 16 * (v77 - 1 - v32));
            uint64_t v30 = v74;
            *((void *)v10 + 2) = v77 - 1;
            uint64_t v9 = v97;
            if (v77 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v11 = 1;
LABEL_15:
        Swift::Int v3 = v96;
        if (v8 >= v96)
        {
          int64_t v7 = v94;
          uint64_t v2 = v92;
          goto LABEL_102;
        }
      }
    }
    int64_t v7 = _swiftEmptyArrayStorage;
    int v98 = (float *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      int v94 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v11 = *(void *)&_swiftEmptyArrayStorage[2];
    int64_t v10 = _swiftEmptyArrayStorage;
LABEL_102:
    int v94 = v7;
    if (v11 >= 2)
    {
      uint64_t v84 = *v2;
      do
      {
        unint64_t v85 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_131;
        }
        if (!v84) {
          goto LABEL_145;
        }
        uint64_t v86 = (uint64_t)v10;
        long long v87 = v10 + 4;
        double v88 = v10[2 * v85 + 4];
        double v89 = v10[2 * v11 + 3];
        uint64_t result = sub_1000BDEE0((float *)(v84 + 4 * *(void *)&v88), (float *)(v84 + 4 * *(void *)&v87[2 * v11 - 2]), v84 + 4 * *(void *)&v89, v98);
        if (v1) {
          break;
        }
        if (*(uint64_t *)&v89 < *(uint64_t *)&v88) {
          goto LABEL_132;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1000BE1E0(v86);
          uint64_t v86 = result;
        }
        if (v85 >= *(void *)(v86 + 16)) {
          goto LABEL_133;
        }
        uint64_t v90 = (double *)(v86 + 32 + 16 * v85);
        *uint64_t v90 = v88;
        v90[1] = v89;
        unint64_t v91 = *(void *)(v86 + 16);
        if (v11 > v91) {
          goto LABEL_134;
        }
        uint64_t result = (uint64_t)memmove((void *)(v86 + 32 + 16 * (v11 - 1)), (const void *)(v86 + 32 + 16 * v11), 16 * (v91 - v11));
        int64_t v10 = (double *)v86;
        *(void *)(v86 + 16) = v91 - 1;
        unint64_t v11 = v91 - 1;
      }
      while (v91 > 2);
    }
LABEL_113:
    swift_bridgeObjectRelease();
    v94[2] = 0.0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000BDEE0(float *__dst, float *__src, unint64_t a3, float *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  int64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = (char *)__src - (char *)__dst + 3;
  if ((char *)__src - (char *)__dst >= 0) {
    int64_t v9 = (char *)__src - (char *)__dst;
  }
  uint64_t v10 = v9 >> 2;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 3;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 2;
  if (v10 >= v12 >> 2)
  {
    if (a4 != __src || &__src[v13] <= a4) {
      memmove(a4, __src, 4 * v13);
    }
    float v14 = &v4[v13];
    if (v7 >= v6 || v11 < 4) {
      goto LABEL_39;
    }
    uint64_t v17 = (float *)(a3 - 4);
    Swift::Int v18 = v6;
    while (1)
    {
      Swift::Int v19 = v17 + 1;
      float v20 = *--v18;
      float v21 = v20;
      if (*(v14 - 1) < v20) {
        break;
      }
      float v21 = *(v14 - 1);
      Swift::Int v18 = v6;
      if (v19 != v14)
      {
        --v14;
LABEL_35:
        *uint64_t v17 = v21;
        goto LABEL_36;
      }
      if (v17 >= v14--) {
        goto LABEL_35;
      }
LABEL_36:
      if (v18 > v7)
      {
        --v17;
        uint64_t v6 = v18;
        if (v14 > v4) {
          continue;
        }
      }
      uint64_t v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[v10] <= a4) {
    memmove(a4, __dst, 4 * v10);
  }
  float v14 = &v4[v10];
  if ((unint64_t)v6 < a3 && v8 >= 4)
  {
    while (1)
    {
      float v15 = *v6;
      if (*v6 >= *v4) {
        break;
      }
      BOOL v16 = v7 == v6++;
      if (!v16) {
        goto LABEL_16;
      }
LABEL_17:
      ++v7;
      if (v4 >= v14 || (unint64_t)v6 >= a3) {
        goto LABEL_19;
      }
    }
    float v15 = *v4;
    BOOL v16 = v7 == v4++;
    if (v16) {
      goto LABEL_17;
    }
LABEL_16:
    float *v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v6 = v7;
LABEL_39:
  int64_t v23 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 3uLL : 0);
  if (v6 != v4 || v6 >= (float *)((char *)v4 + (v23 & 0xFFFFFFFFFFFFFFFCLL))) {
    memmove(v6, v4, 4 * (v23 >> 2));
  }
  return 1;
}

char *sub_1000BE0E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012894(&qword_1004C9690);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  float v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000BE1E0(uint64_t a1)
{
  return sub_1000BE0E4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1000BE1F4(uint64_t a1)
{
  return sub_1000BC6A4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1000BE208(uint64_t a1)
{
  return sub_1000BC5A8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

double *sub_1000BE21C(uint64_t a1)
{
  return sub_1000BC7A0(0, *(void *)(a1 + 16), 0, (double *)a1);
}

char *sub_1000BE230(uint64_t a1)
{
  return sub_1000BC9E4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1000BE244(void *a1)
{
  return sub_1000BCBD8(0, a1[2], 0, a1, &qword_1004C96E0, &qword_1004C96E8);
}

uint64_t sub_1000BE27C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v23[3] = a3;
  v23[4] = a4;
  int64_t v7 = sub_100078D1C(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(v7, a1, a3);
  sub_100012894(&qword_1004C96B8);
  swift_getKeyPath();
  swift_retain();
  a2[8] = MutableStateBinding.__allocating_init(_:_:)();
  uint64_t v8 = sub_100012894(&qword_1004C96C0);
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1004F8630;
  int64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 272);
  swift_retain();
  a2[9] = v11(KeyPath, v10);
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = sub_100012894(&qword_1004CB2C0);
  uint64_t v14 = qword_1004F8630;
  float v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 272);
  swift_retain();
  a2[10] = v15(v12, v14);
  uint64_t v16 = swift_getKeyPath();
  uint64_t v17 = sub_100012894(&qword_1004C96C8);
  uint64_t v18 = qword_1004F8630;
  Swift::Int v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 272);
  swift_retain();
  a2[11] = v19(v16, v18);
  swift_release();
  sub_10002B8B4((uint64_t)v23, (uint64_t)&v22);
  uint64_t v20 = StateObserver.init(configuration:)();
  sub_100013218((uint64_t)v23);
  return v20;
}

void sub_1000BE4B0(uint64_t a1@<X8>, float a2@<S0>)
{
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  swift_retain();
  PublishedValue.wrappedValue.getter();
  swift_release();
  id v4 = sub_1000B1320();
  sub_10012C948((uint64_t)v4, 0, 0, v24, a2);
  uint64_t v5 = v24[0];
  uint64_t v6 = v24[1];
  uint64_t v22 = v24[3];
  uint64_t v23 = v24[2];
  char v20 = v26;
  int v21 = v25;
  char v19 = v27;
  if (v4 == (id)1)
  {
    sub_10013029C(0, (uint64_t)&v28);
    char v7 = 1;
LABEL_7:
    uint64_t v8 = v29;
    uint64_t v9 = v30;
    int v10 = v31;
    char v11 = v32;
    long long v18 = v28;
    sub_10012C948(v4 == 0, 0, 0, v33, a2);
    uint64_t v12 = v33[0];
    uint64_t v13 = v33[1];
    int v14 = v35;
    char v15 = v36;
    char v16 = v37;
    long long v17 = v34;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v23;
    *(void *)(a1 + 24) = v22;
    *(_DWORD *)(a1 + 32) = v21;
    *(unsigned char *)(a1 + 36) = v20;
    *(unsigned char *)(a1 + 37) = v19;
    *(_OWORD *)(a1 + 40) = v18;
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    *(_DWORD *)(a1 + 72) = v10;
    *(unsigned char *)(a1 + 76) = v11;
    *(unsigned char *)(a1 + 77) = v7;
    *(void *)(a1 + 80) = v12;
    *(void *)(a1 + 88) = v13;
    *(_OWORD *)(a1 + 96) = v17;
    *(_DWORD *)(a1 + 112) = v14;
    *(unsigned char *)(a1 + 116) = v15;
    *(unsigned char *)(a1 + 117) = v16;
    return;
  }
  if (!v4)
  {
    sub_10012F124(1, 0, (uint64_t)&v28);
    char v7 = 2;
    goto LABEL_7;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000BE6A8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 72) & 0xFF01FFFFFFFFLL;
  uint64_t v2 = *(void *)(result + 112) & 0xFF01FFFFFFFFLL;
  uint64_t v3 = *(void *)(result + 272) & 0xFF01FFFFFFFFLL;
  uint64_t v4 = *(void *)(result + 312) & 0xFF01FFFFFFFFLL;
  uint64_t v5 = *(void *)(result + 352) & 0xFF01FFFFFFFFLL;
  uint64_t v6 = *(void *)(result + 392) & 0xFF01FFFFFFFFLL;
  uint64_t v7 = *(void *)(result + 432) & 0xFF01FFFFFFFFLL;
  uint64_t v8 = *(void *)(result + 472) & 0xFF01FFFFFFFFLL;
  uint64_t v9 = *(void *)(result + 512) & 0xFF01FFFFFFFFLL;
  uint64_t v10 = *(void *)(result + 552) & 0xFF01FFFFFFFFLL;
  uint64_t v11 = *(void *)(result + 592) & 0xFF01FFFFFFFFLL;
  uint64_t v12 = *(void *)(result + 632) & 0xFF01FFFFFFFFLL;
  uint64_t v13 = *(void *)(result + 672) & 0xFF01FFFFFFFFLL;
  uint64_t v14 = *(void *)(result + 712) & 0xFF01FFFFFFFFLL;
  uint64_t v15 = *(void *)(result + 752) & 0xFF01FFFFFFFFLL;
  uint64_t v16 = *(void *)(result + 792) & 0xFF01FFFFFFFFLL;
  unint64_t v17 = (*(unsigned int *)(result + 832) | ((unint64_t)*(unsigned __int16 *)(result + 836) << 32)) & 0xFFFFFF01FFFFFFFFLL;
  *(void *)(result + 32) &= 0xFF01FFFFFFFFuLL;
  *(void *)(result + 72) = v1;
  *(void *)(result + 112) = v2;
  *(void *)(result + 272) = v3;
  *(void *)(result + 312) = v4;
  *(void *)(result + 352) = v5;
  *(void *)(result + 392) = v6;
  *(void *)(result + 432) = v7;
  *(void *)(result + 472) = v8;
  *(void *)(result + 512) = v9;
  *(void *)(result + 552) = v10;
  *(void *)(result + 592) = v11;
  *(void *)(result + 632) = v12;
  *(void *)(result + 672) = v13;
  *(void *)(result + 712) = v14;
  *(void *)(result + 752) = v15;
  *(void *)(result + 792) = v16;
  *(_DWORD *)(result + 832) = v17;
  *(_WORD *)(result + 836) = WORD2(v17);
  return result;
}

uint64_t sub_1000BE7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894((uint64_t *)&unk_1004CE670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BE80C(void **a1)
{
  return sub_1000BB7D0(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000BE818(uint64_t *a1)
{
  return sub_1000BB964(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t sub_1000BE824(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MeasurementHistoryItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BE888(uint64_t a1)
{
  uint64_t v2 = sub_100012894((uint64_t *)&unk_1004D0EF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000BE8E8(uint64_t a1@<X8>, float a2@<S0>)
{
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  swift_retain();
  PublishedValue.wrappedValue.getter();
  swift_release();
  id v4 = sub_1000B1320();
  id v5 = v4;
  if (a2 <= 0.06) {
    a2 = 0.0;
  }
  sub_10012C948((uint64_t)v4, 1, 0, v25, a2);
  uint64_t v6 = v25[0];
  uint64_t v7 = v25[1];
  uint64_t v23 = v25[3];
  uint64_t v24 = v25[2];
  char v21 = v27;
  int v22 = v26;
  char v20 = v28;
  if (v5 == (id)1)
  {
    sub_10013029C(0, (uint64_t)&v29);
    char v8 = 1;
LABEL_9:
    uint64_t v9 = v30;
    uint64_t v10 = v31;
    int v11 = v32;
    char v12 = v33;
    long long v19 = v29;
    sub_10012C948(v5 == 0, 1, 0, v34, a2);
    uint64_t v13 = v34[0];
    uint64_t v14 = v34[1];
    int v15 = v36;
    char v16 = v37;
    char v17 = v38;
    long long v18 = v35;
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v24;
    *(void *)(a1 + 24) = v23;
    *(_DWORD *)(a1 + 32) = v22;
    *(unsigned char *)(a1 + 36) = v21;
    *(unsigned char *)(a1 + 37) = v20;
    *(_OWORD *)(a1 + 40) = v19;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v10;
    *(_DWORD *)(a1 + 72) = v11;
    *(unsigned char *)(a1 + 76) = v12;
    *(unsigned char *)(a1 + 77) = v8;
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v14;
    *(_OWORD *)(a1 + 96) = v18;
    *(_DWORD *)(a1 + 112) = v15;
    *(unsigned char *)(a1 + 116) = v16;
    *(unsigned char *)(a1 + 117) = v17;
    return;
  }
  if (!v5)
  {
    sub_10012F124(1, 1, (uint64_t)&v29);
    char v8 = 2;
    goto LABEL_9;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000BEAF8(void **a1@<X0>, _OWORD *a2@<X8>)
{
  *(double *)&long long v3 = (*(double (**)(void))((swift_isaMask & **a1) + 0x2B0))();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

uint64_t sub_1000BEB60@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result = simd_float4x4.position.getter();
  *a1 = v3;
  return result;
}

unint64_t sub_1000BEB94()
{
  unint64_t result = qword_1004C9698;
  if (!qword_1004C9698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C9698);
  }
  return result;
}

float sub_1000BEBE8@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 4);
  *a2 = result;
  return result;
}

float sub_1000BEBF4(float *a1, uint64_t a2)
{
  float result = *a1;
  *(float *)(a2 + 4) = *a1;
  return result;
}

uint64_t sub_1000BEC00(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_1000BEC60(void **a1)
{
}

uint64_t sub_1000BEC68(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 72) & 0xFF01FFFFFFFFLL;
  uint64_t v2 = *(void *)(result + 112) & 0xFF01FFFFFFFFLL;
  uint64_t v3 = *(void *)(result + 272) & 0xFF01FFFFFFFFLL;
  uint64_t v4 = *(void *)(result + 312) & 0xFF01FFFFFFFFLL;
  uint64_t v5 = *(void *)(result + 352) & 0xFF01FFFFFFFFLL;
  uint64_t v6 = *(void *)(result + 392) & 0xFF01FFFFFFFFLL;
  uint64_t v7 = *(void *)(result + 432) & 0xFF01FFFFFFFFLL;
  uint64_t v8 = *(void *)(result + 472) & 0xFF01FFFFFFFFLL;
  uint64_t v9 = *(void *)(result + 512) & 0xFF01FFFFFFFFLL;
  uint64_t v10 = *(void *)(result + 552) & 0xFF01FFFFFFFFLL;
  uint64_t v11 = *(void *)(result + 592) & 0xFF01FFFFFFFFLL;
  uint64_t v12 = *(void *)(result + 632) & 0xFF01FFFFFFFFLL;
  uint64_t v13 = *(void *)(result + 672) & 0xFF01FFFFFFFFLL;
  uint64_t v14 = *(void *)(result + 712) & 0xFF01FFFFFFFFLL;
  uint64_t v15 = *(void *)(result + 752) & 0xFF01FFFFFFFFLL;
  uint64_t v16 = *(void *)(result + 792) & 0xFF01FFFFFFFFLL;
  unint64_t v17 = (*(unsigned int *)(result + 832) | ((unint64_t)*(unsigned __int16 *)(result + 836) << 32)) & 0xFFFFFF01FFFFFFFFLL;
  *(void *)(result + 32) &= 0xFF01FFFFFFFFuLL;
  *(void *)(result + 72) = v1;
  *(void *)(result + 112) = v2;
  *(void *)(result + 272) = v3;
  *(void *)(result + 312) = v4;
  *(void *)(result + 352) = v5;
  *(void *)(result + 392) = v6;
  *(void *)(result + 432) = v7;
  *(void *)(result + 472) = v8;
  *(void *)(result + 512) = v9;
  *(void *)(result + 552) = v10;
  *(void *)(result + 592) = v11;
  *(void *)(result + 632) = v12;
  *(void *)(result + 672) = v13;
  *(void *)(result + 712) = v14;
  *(void *)(result + 752) = v15;
  *(void *)(result + 792) = v16;
  *(_DWORD *)(result + 832) = v17;
  *(_WORD *)(result + 836) = (v17 | 0x4000000000) >> 32;
  return result;
}

void sub_1000BED68()
{
  qword_1004C9708 = 0x4032000000000000;
}

id sub_1000BED78(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel;
  type metadata accessor for InteractiveLabel();
  id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v12 = v4;
  *(void *)&v4[v10] = [v11 initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v13 = OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack;
  *(void *)&v12[v13] = [objc_allocWithZone((Class)type metadata accessor for NewSecondaryLabelStack()) initWithFrame:0.0, 0.0, 0.0, 0.0];

  v16.receiver = v12;
  v16.super_class = ObjectType;
  id v14 = [super initWithFrame:a1, a2, a3, a4];
  sub_1000BEE8C();
  sub_1000BEF6C();

  return v14;
}

id sub_1000BEE8C()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel];
  id v2 = [self systemFontOfSize:60.0 weight:UIFontWeightRegular];
  [v1 setFont:v2];

  [v1 setTextAlignment:1];
  [v1 setUserInteractionEnabled:1];
  [v0 addSubview:v1];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack];

  return [v0 addSubview:v3];
}

void sub_1000BEF6C()
{
  uint64_t v1 = v0;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v3 = *(char **)&v1[OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v4 = [v2 font];
  double v5 = 1.0;
  if (v4)
  {
    uint64_t v6 = v4;
    id v7 = [*(id *)(*(void *)&v3[OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_bottomLabel]+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label) font];
    if (v7)
    {
      uint64_t v8 = v7;
      [v6 descender];
      double v10 = v9;
      [v6 leading];
      double v12 = v10 + v11;
      [v8 descender];
      double v14 = v12 - v13;
      [v8 leading];
      double v16 = v15;

      double v5 = v14 - v16 + 1.0;
    }
    else
    {
    }
  }
  uint64_t v41 = self;
  sub_100012894((uint64_t *)&unk_1004CEA00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1003FAEB0;
  id v18 = [v2 leadingAnchor];
  id v19 = [v1 leadingAnchor];
  if (qword_1004C27E8 != -1) {
    swift_once();
  }
  id v20 = [v18 constraintEqualToAnchor:v19 constant:*(double *)&qword_1004F7E00];

  *(void *)(v17 + 32) = v20;
  id v21 = [v2 topAnchor];
  id v22 = [v1 topAnchor];
  id v23 = [v21 constraintEqualToAnchor:v22];

  *(void *)(v17 + 40) = v23;
  id v24 = [v2 trailingAnchor];
  id v25 = [v3 leadingAnchor];
  id v26 = [v24 constraintEqualToAnchor:v25 constant:-*(double *)&qword_1004F7E00];

  *(void *)(v17 + 48) = v26;
  id v27 = [v2 bottomAnchor];
  id v28 = [v1 bottomAnchor];
  if (qword_1004C2A70 != -1) {
    swift_once();
  }
  id v29 = [v27 constraintEqualToAnchor:v28 constant:-*(double *)&qword_1004C9708];

  *(void *)(v17 + 56) = v29;
  id v30 = [v3 trailingAnchor];
  id v31 = [v1 trailingAnchor];
  id v32 = [v30 constraintEqualToAnchor:v31 constant:-*(double *)&qword_1004F7E00];

  *(void *)(v17 + 64) = v32;
  id v33 = [v3 topAnchor];
  id v34 = [v1 topAnchor];
  id v35 = [v33 constraintEqualToAnchor:v34];

  *(void *)(v17 + 72) = v35;
  id v36 = [v3 bottomAnchor];
  id v37 = [v2 bottomAnchor];
  id v38 = [v36 constraintEqualToAnchor:v37 constant:v5];

  *(void *)(v17 + 80) = v38;
  id v39 = [v3 widthAnchor];
  id v40 = [v39 constraintEqualToConstant:103.66];

  *(void *)(v17 + 88) = v40;
  specialized Array._endMutation()();
  sub_100029878();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v41 activateConstraints:isa];
}

id sub_1000BF4C4(void *a1)
{
  id v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel;
  type metadata accessor for InteractiveLabel();
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v7 = v2;
  *(void *)&v2[v5] = [v6 initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v8 = OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack;
  *(void *)&v7[v8] = [objc_allocWithZone((Class)type metadata accessor for NewSecondaryLabelStack()) initWithFrame:0.0, 0.0, 0.0, 0.0];

  v13.receiver = v7;
  v13.super_class = ObjectType;
  [super initWithCoder:a1];
  id v10 = v9;
  if (v9)
  {
    id v11 = v9;
    sub_1000BEE8C();
    sub_1000BEF6C();
  }
  return v10;
}

uint64_t type metadata accessor for LabelsStrip()
{
  return self;
}

id sub_1000BF744()
{
  uint64_t v1 = qword_1004C9760;
  id v2 = *(void **)(v0 + qword_1004C9760);
  if (v2)
  {
    id v3 = *(id *)(v0 + qword_1004C9760);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)type metadata accessor for EventsRecorder()) init];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_1000BF7B8()
{
  return swift_release();
}

void sub_1000BF850(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + qword_1004C9758))
  {
    if ((*(unsigned char *)(a2 + qword_1004C9770 + 8) & 1) == 0
      && *(double *)(a2 + qword_1004C9770) - *(double *)(a1 + 8) <= 5.0)
    {
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        id v3 = (char *)Strong;
        id v4 = (void *)(Strong + qword_1004C9758);
        uint64_t v5 = *(void **)(Strong + qword_1004C9758);
        void *v4 = 0;
        v4[1] = 0;
        sub_1000C0A18(v5);
        id v6 = *(void (**)(uint64_t))&v3[qword_1004C9768];
        if (v6)
        {
          uint64_t v7 = swift_retain();
          v6(v7);
          sub_100028914((uint64_t)v6);
        }
        if (qword_1004C2B00 != -1) {
          swift_once();
        }
        v8._object = (void *)0x8000000100424650;
        v8._uint64_t countAndFlagsBits = 0xD000000000000010;
        Log.default(_:isPrivate:)(v8, 0);
      }
    }
  }
}

id sub_1000BF98C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v48 = a1;
  uint64_t v47 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  id v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v10 = [self BOOLForKey:ARSessionReplayFilePathManuallyUserDefaultsKey];
  NSUserDefaults.recordReplayOption.unsafeMutableAddressor();
  RecordReplayOption.replayFile.getter();
  id v11 = (uint64_t *)(v4 + qword_1004C9768);
  uint64_t v12 = *(void *)(v4 + qword_1004C9768);
  uint64_t *v11 = a2;
  v11[1] = a3;
  sub_10003FFC4(a2);
  sub_100028914(v12);
  URL._bridgeToObjectiveC()(v13);
  double v15 = v14;
  v49._uint64_t countAndFlagsBits = 0;
  uint64_t v16 = ARReplaySensorClassForMovieURL();

  id v18 = (id)v49._countAndFlagsBits;
  if (v16
    && ((URL._bridgeToObjectiveC()(v17), id v20 = v19, !v10) ? (v21 = 0) : (v21 = 3),
        swift_getObjCClassMetadata(),
        id v22 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithSequenceURL:v20 replayMode:v21], v20, v22))
  {
    id v46 = v18;
    if (qword_1004C2B00 != -1) {
      swift_once();
    }
    v49._uint64_t countAndFlagsBits = 0;
    v49._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v49._uint64_t countAndFlagsBits = 0xD000000000000025;
    v49._object = (void *)0x80000001004245D0;
    v23._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    Log.default(_:isPrivate:)(v49, 0);
    swift_bridgeObjectRelease();
    [v22 setReplaySensorDelegate:v4];
    id v24 = sub_1000BF744();
    sub_10007CB04(v22, (uint64_t)v24);

    id v25 = objc_allocWithZone((Class)ARReplayConfiguration);
    id v26 = [v25 initWithBaseConfiguration:v48 replaySensor:v22 replayingResultDataClasses:0];
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v47);
    id v27 = (void *)(v4 + qword_1004C9758);
    id v28 = *(void **)(v4 + qword_1004C9758);
    *id v27 = v26;
    v27[1] = v22;
    id v29 = v26;
    sub_1000C0A18(v28);
    id v18 = v46;
  }
  else
  {
    id v30 = (void *)0xE000000000000000;
    v49._uint64_t countAndFlagsBits = 0;
    v49._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v49._uint64_t countAndFlagsBits = 0xD000000000000020;
    v49._object = (void *)0x80000001004245A0;
    v31._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 0x7265206874697720;
    v32._object = (void *)0xED0000203A726F72;
    String.append(_:)(v32);
    if (v18)
    {
      id v33 = [v18 localizedDescription];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v30 = v35;
    }
    else
    {
      uint64_t v34 = 0;
    }
    v36._uint64_t countAndFlagsBits = v34;
    v36._object = v30;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v49._countAndFlagsBits;
    object = v49._object;
    if (qword_1004C2B00 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    v39._uint64_t countAndFlagsBits = countAndFlagsBits;
    v39._object = object;
    Log.error(_:isPrivate:)(v39, 0);
    swift_bridgeObjectRelease();
    sub_1000C09C4();
    swift_allocError();
    uint64_t *v40 = countAndFlagsBits;
    v40[1] = (uint64_t)object;
    swift_getErrorValue();
    uint64_t v41 = Error.localizedDescription.getter();
    sub_10005C684(v41, v42, 0x462079616C706552, 0xED000064656C6961);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v47);
    swift_errorRelease();
    BOOL v43 = (void *)(v4 + qword_1004C9758);
    unint64_t v44 = *(void **)(v4 + qword_1004C9758);
    void *v43 = 0;
    v43[1] = 0;
    sub_1000C0A18(v44);
    id v29 = v48;
  }

  return v29;
}

uint64_t sub_1000BFEB4(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1000BFEE8(a1);
}

uint64_t sub_1000BFEE8(uint64_t a1)
{
  uint64_t v3 = qword_1004C9750;
  uint64_t v4 = sub_100012894(&qword_1004C7170);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = qword_1004C2E30;
  uint64_t v7 = v1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1004F8630;
  id v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 272);
  swift_retain();
  *(void *)&v7[v3] = v9(KeyPath, v8);
  unsigned int v10 = &v7[qword_1004C9758];
  *(void *)unsigned int v10 = 0;
  *((void *)v10 + 1) = 0;
  *(void *)&v7[qword_1004C9760] = 0;
  id v11 = &v7[qword_1004C9768];
  *(void *)id v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = &v7[qword_1004C9770];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;

  sub_10002B8B4(a1, (uint64_t)v15);
  uint64_t v13 = StateObservingNSObject.init(configuration:)();
  sub_100013218(a1);
  return v13;
}

id sub_1000C002C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = qword_1004C9750;
  uint64_t v4 = sub_100012894(&qword_1004C7170);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = qword_1004C2E30;
  uint64_t v7 = v1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1004F8630;
  id v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 272);
  swift_retain();
  *(void *)&v7[v3] = v9(KeyPath, v8);
  unsigned int v10 = &v7[qword_1004C9758];
  *(void *)unsigned int v10 = 0;
  *((void *)v10 + 1) = 0;
  *(void *)&v7[qword_1004C9760] = 0;
  id v11 = &v7[qword_1004C9768];
  *(void *)id v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = &v7[qword_1004C9770];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;

  v14.receiver = v7;
  v14.super_class = ObjectType;
  return [super init];
}

id sub_1000C0164()
{
  return sub_1000C002C();
}

uint64_t sub_1000C0188()
{
  swift_release();
  sub_1000C0A18(*(void **)(v0 + qword_1004C9758));

  uint64_t v1 = *(void *)(v0 + qword_1004C9768);

  return sub_100028914(v1);
}

uint64_t sub_1000C01F0(uint64_t a1)
{
  swift_release();
  sub_1000C0A18(*(void **)(a1 + qword_1004C9758));

  uint64_t v2 = *(void *)(a1 + qword_1004C9768);

  return sub_100028914(v2);
}

uint64_t type metadata accessor for SessionSimulator()
{
  uint64_t result = qword_1004C97A0;
  if (!qword_1004C97A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C02B0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000C0318()
{
  return type metadata accessor for SessionSimulator();
}

uint64_t sub_1000C0320(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSUserDefaults.recordReplayOption.unsafeMutableAddressor();
  RecordReplayOption.replayFile.getter();
  uint64_t v10 = URL.path.getter();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  double v13 = a2 - a1;
  uint64_t v14 = v3 + qword_1004C9770;
  *(double *)uint64_t v14 = a2;
  *(unsigned char *)(v14 + 8) = 0;
  if (qword_1004C2B00 != -1) {
    swift_once();
  }
  v34._uint64_t countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v15._uint64_t countAndFlagsBits = 0xD000000000000020;
  v15._object = (void *)0x8000000100424600;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = v10;
  v16._object = v12;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 0x7564206874697720;
  v17._object = (void *)0xEF206E6F69746172;
  String.append(_:)(v17);
  Double.write<A>(to:)();
  v18._uint64_t countAndFlagsBits = 115;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  Log.default(_:isPrivate:)(v34, 0);
  swift_bridgeObjectRelease();
  if (v13 >= 0.0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v3 + qword_1004C9758))
    {
      id v26 = *(void **)(v3 + qword_1004C9758 + 8);
      swift_unknownObjectRetain();
      id v27 = self;
      [v27 floatForKey:ARReplaySensorFilePathAdvanceFramesPerSecondMultiplierUserDefaultsKey];
      float v29 = v28;
      id v30 = [v27 integerForKey:ARReplaySensorFilePathAdvanceToFrameUserDefaultsKey];
      if ((uint64_t)v30 <= 0) {
        uint64_t v31 = -1;
      }
      else {
        uint64_t v31 = (uint64_t)v30;
      }
      [v26 advanceToFrameIndex:v31];
      LODWORD(v32) = 1.0;
      if (v29 > 0.0) {
        *(float *)&double v32 = v29;
      }
      [v26 setAdvanceFramesPerSecondMultiplier:v32];
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    v34._uint64_t countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 0xD000000000000010;
    v34._object = (void *)0x8000000100424630;
    v19._uint64_t countAndFlagsBits = v10;
    v19._object = v12;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v34._countAndFlagsBits;
    object = v34._object;
    sub_1000C09C4();
    swift_allocError();
    *id v22 = countAndFlagsBits;
    v22[1] = (uint64_t)object;
    swift_getErrorValue();
    uint64_t v23 = Error.localizedDescription.getter();
    sub_10005C684(v23, v24, 0x462079616C706552, 0xED000064656C6961);
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  return result;
}

id *destroy for SessionSimulator.ReplayState(id *result)
{
  if ((unint64_t)*result >= 0xFFFFFFFF)
  {

    return (id *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t _s7Measure16SessionSimulatorC11ReplayStateOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    id v5 = v3;
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for SessionSimulator.ReplayState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      id v7 = v5;
      swift_unknownObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  *(void *)a1 = v5;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for SessionSimulator.ReplayState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {

    swift_unknownObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionSimulator.ReplayState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SessionSimulator.ReplayState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

void *sub_1000C0988(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SessionSimulator.ReplayState()
{
  return &type metadata for SessionSimulator.ReplayState;
}

unint64_t sub_1000C09C4()
{
  unint64_t result = qword_1004C9930;
  if (!qword_1004C9930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C9930);
  }
  return result;
}

void *sub_1000C0A18(void *result)
{
  if (result)
  {

    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000C0A5C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000C0A94(uint64_t a1)
{
  sub_1000BF850(a1, *(void *)(v1 + 16));
}

void *initializeBufferWithCopyOfBuffer for SessionSimulator.Error(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for LabelRenderEvent()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SessionSimulator.Error(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SessionSimulator.Error(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionSimulator.Error(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionSimulator.Error(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionSimulator.Error()
{
  return &type metadata for SessionSimulator.Error;
}

id sub_1000C0BE4(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = OBJC_IVAR____TtC7Measure11HistoryView_tableView;
  id v11 = objc_allocWithZone((Class)UITableView);
  uint64_t v12 = v4;
  *(void *)&v4[v10] = [v11 init];
  swift_unknownObjectWeakInit();

  v17.receiver = v12;
  v17.super_class = ObjectType;
  [super initWithFrame:a1, a2, a3, a4];
  sub_1000C0D1C();
  swift_getMetatypeMetadata();
  id v14 = v13;
  String.init<A>(describing:)();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 setAccessibilityIdentifier:v15];

  return v14;
}

void sub_1000C0D1C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure11HistoryView_tableView);
  id v2 = [objc_allocWithZone((Class)UIView) init];
  [v1 setTableFooterView:v2];

  type metadata accessor for LineHistoryCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v4 = String._bridgeToObjectiveC()();
  [v1 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v4];

  type metadata accessor for LineHistoryCellWithScreenshot();
  uint64_t v5 = swift_getObjCClassFromMetadata();
  NSString v6 = String._bridgeToObjectiveC()();
  [v1 registerClass:v5 forCellReuseIdentifier:v6];

  type metadata accessor for RectangleHistoryCell();
  uint64_t v7 = swift_getObjCClassFromMetadata();
  NSString v8 = String._bridgeToObjectiveC()();
  [v1 registerClass:v7 forCellReuseIdentifier:v8];

  type metadata accessor for RectangleHistoryCellWithScreenshot();
  uint64_t v9 = swift_getObjCClassFromMetadata();
  NSString v10 = String._bridgeToObjectiveC()();
  [v1 registerClass:v9 forCellReuseIdentifier:v10];

  type metadata accessor for ObjectHistoryCell();
  uint64_t v11 = swift_getObjCClassFromMetadata();
  NSString v12 = String._bridgeToObjectiveC()();
  [v1 registerClass:v11 forCellReuseIdentifier:v12];

  [v1 setSeparatorInset:UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right];
  id v13 = [self clearColor];
  [v1 setBackgroundColor:v13];

  [v1 setRowHeight:UITableViewAutomaticDimension];
  id v14 = [self currentTraitCollection];
  id v15 = [v14 preferredContentSizeCategory];

  LOBYTE(v14) = UIContentSizeCategory.isAccessibilityCategory.getter();
  double v16 = 88.0;
  if (v14) {
    double v16 = 222.0;
  }
  [v1 setEstimatedRowHeight:v16];
  sub_1000C10D8();

  sub_1000F92C8();
}

void sub_1000C10D8()
{
  id v1 = [self defaultCenter];
  if (qword_1004C3240 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1004F8AB0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  v7[4] = sub_1000C1454;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000F910C;
  v7[3] = &unk_10048CB40;
  NSString v4 = _Block_copy(v7);
  id v5 = v0;
  swift_release();
  id v6 = [v1 addObserverForName:v2 object:0 queue:0 usingBlock:v4];
  _Block_release(v4);
  swift_unknownObjectRelease();
}

id sub_1000C1234(uint64_t a1, double a2, double a3)
{
  v11.receiver = v3;
  v11.super_class = (Class)swift_getObjectType();
  [super hitTest:a1 withEvent:a2];
  if (v7)
  {
    sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
    if ((static UIDevice.isIPhone()() & 1) == 0)
    {
      sub_10001C99C(0, (unint64_t *)&qword_1004C4568);
      if ((static NSObject.== infix(_:_:)() & 1) != 0
        || (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong()) != 0
        && (id v9 = Strong, Strong, v7 == v9))
      {

        return 0;
      }
    }
  }
  return v7;
}

uint64_t type metadata accessor for HistoryView()
{
  return self;
}

uint64_t sub_1000C141C()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000C1454()
{
  return [*(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC7Measure11HistoryView_tableView) reloadData];
}

uint64_t sub_1000C1470(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C1480()
{
  return swift_release();
}

uint64_t sub_1000C1488(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 80);
  if (!*(void *)(v3 + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  unint64_t result = sub_1000E21E0(result);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * result);
  uint64_t v7 = type metadata accessor for PersonHeightInstrument();
  swift_bridgeObjectRetain();
  BOOL v8 = sub_1000C3F08(v7, (uint64_t)&off_10048A4F0, v6, a2);
  swift_bridgeObjectRelease();
  if (v8) {
    return 256;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000C1518(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_100012894(&qword_1004C9BA8);
  swift_allocObject();
  swift_retain();
  v1[8] = PassthroughSubject.init()();
  sub_100012894(&qword_1004C9BB0);
  swift_getKeyPath();
  v1[9] = MutableStateBinding.__allocating_init(_:_:)();
  v1[11] = _swiftEmptyArrayStorage;
  v1[12] = _swiftEmptyArrayStorage;
  v1[13] = _swiftEmptyDictionarySingleton;
  v1[14] = _swiftEmptyDictionarySingleton;
  v1[15] = _swiftEmptyDictionarySingleton;
  NSString v4 = sub_1000C411C(a1);
  swift_bridgeObjectRelease();
  v2[10] = v4;
  swift_release();
  uint64_t v5 = StateObserver.init(configuration:)();
  swift_retain();
  sub_1000C1690();
  id v6 = [self defaultCenter];
  [v6 addObserver:v5 selector:"thermalStateDidChange" name:NSProcessInfoThermalStateDidChangeNotification object:0];

  swift_release();
  return v5;
}

void sub_1000C1690()
{
  id v1 = [self standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 integerForKey:v2];

  if (v3 == (id)1 || v3 == (id)2)
  {
    sub_1000C195C((uint64_t)v3);
    NSString v4 = *(uint64_t (**)(unsigned char *))(**(void **)(v0 + 72) + 400);
    swift_retain();
    uint64_t v5 = (void (*)(unsigned char *, void))v4(v7);
    *id v6 = (_BYTE)v3;
    v5(v7, 0);
    swift_release();
  }
}

void sub_1000C17A8()
{
  uint64_t inited = (void *)swift_initStackObject();
  sub_100012894(&qword_1004C9BA8);
  swift_allocObject();
  inited[8] = PassthroughSubject.init()();
  sub_100012894(&qword_1004C9BB0);
  swift_getKeyPath();
  inited[9] = MutableStateBinding.__allocating_init(_:_:)();
  inited[11] = _swiftEmptyArrayStorage;
  inited[12] = _swiftEmptyArrayStorage;
  inited[13] = _swiftEmptyDictionarySingleton;
  inited[14] = _swiftEmptyDictionarySingleton;
  inited[15] = _swiftEmptyDictionarySingleton;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000C1890()
{
  id v1 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 72) + 200);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  (*(void (**)(uint64_t (*)(unsigned __int8 *), uint64_t))(*(void *)v3 + 296))(sub_1000C4C50, v0);

  return swift_release();
}

uint64_t sub_1000C195C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100012894(&qword_1004C9AD8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100012894(&qword_1004C9AE0);
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  __chkstk_darwin(v8);
  NSString v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void *)(v1 + 80);
  if (*(void *)(v11 + 16) && (uint64_t v12 = sub_1000E21E0(a1), (v13 & 1) != 0))
  {
    uint64_t v26 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
    uint64_t v14 = *(void *)(v1 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v15 = sub_1000C4CAC(v14);
    swift_release();
    id v27 = v15;
    sub_100012894(&qword_1004C9AE8);
    int v23 = a1;
    sub_100012894(&qword_1004C9AF0);
    sub_10002179C(&qword_1004C9AF8, &qword_1004C9AE8);
    sub_10002179C(&qword_1004C9B00, &qword_1004C9AF0);
    Publishers.MergeMany.init<A>(_:)();
    sub_10002179C(&qword_1004C9B08, &qword_1004C9AD8);
    Publisher.collect()();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v2;
    sub_10002179C(&qword_1004C9B10, &qword_1004C9AE0);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v17 = v25;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v10, v17);
    swift_beginAccess();
    sub_100012894(&qword_1004C5E50);
    sub_10002179C(&qword_1004C5E58, &qword_1004C5E50);
    AnyCancellable.store<A>(in:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000C1E28(v26, v23);
    return swift_bridgeObjectRelease();
  }
  else
  {
    id v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v19._uint64_t countAndFlagsBits = 0x2065646F4DLL;
    v19._object = (void *)0xE500000000000000;
    String.append(_:)(v19);
    char v29 = a1;
    _print_unlocked<A, B>(_:_:)();
    v20._object = (void *)0x8000000100424880;
    v20._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v20);
    swift_bridgeObjectRetain();
    sub_100012894(&qword_1004C9B78);
    sub_1000C4C58();
    v21._uint64_t countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C1E28(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  LODWORD(v60) = a2;
  uint64_t v57 = sub_100012894(&qword_1004C9B88);
  id v48 = *(void (***)(uint64_t, uint64_t))(v57 - 8);
  __chkstk_darwin(v57);
  Swift::String v56 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v58 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = (void (**)(void, void))sub_100012894(&qword_1004C9AD8);
  uint64_t v8 = (uint64_t)*(v51 - 1);
  __chkstk_darwin(v51);
  NSString v10 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_100012894(&qword_1004C9AE0);
  uint64_t v55 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)swift_bridgeObjectRetain();
  sub_10012230C(v13);
  swift_retain();
  uint64_t v14 = sub_1000C4F48(a1);
  swift_release();
  uint64_t v62 = v14;
  uint64_t v15 = sub_100012894(&qword_1004C9AE8);
  sub_100012894(&qword_1004C9AF0);
  uint64_t v16 = sub_10002179C(&qword_1004C9AF8, &qword_1004C9AE8);
  sub_10002179C(&qword_1004C9B00, &qword_1004C9AF0);
  uint64_t v53 = v16;
  uint64_t v54 = v15;
  Publishers.MergeMany.init<A>(_:)();
  sub_10002179C(&qword_1004C9B08, &qword_1004C9AD8);
  uint64_t v17 = v51;
  Publisher.collect()();
  (*(void (**)(char *, void))(v8 + 8))(v10, v17);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v3;
  *(unsigned char *)(v18 + 24) = v60;
  sub_10002179C(&qword_1004C9B10, &qword_1004C9AE0);
  swift_retain();
  uint64_t v19 = v52;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v12, v19);
  swift_beginAccess();
  sub_100012894(&qword_1004C5E50);
  sub_10002179C(&qword_1004C5E58, &qword_1004C5E50);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  Swift::String v20 = (void *)(v3 + 112);
  swift_beginAccess();
  uint64_t v55 = v3;
  Swift::String v21 = *(void **)(v3 + 112);
  uint64_t v52 = *(void *)(a1 + 16);
  if (!v52)
  {
    swift_bridgeObjectRetain();
    int v23 = v21;
LABEL_18:
    void *v20 = v23;
    return swift_bridgeObjectRelease();
  }
  v47[0] = v3 + 112;
  uint64_t v51 = v48 + 1;
  v47[1] = v6 + 16;
  id v48 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  int v23 = v21;
  uint64_t v49 = a1;
  uint64_t v50 = v6;
  while (1)
  {
    long long v60 = *(_OWORD *)(a1 + 16 * v22 + 32);
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v26 = *((void *)&v60 + 1);
    sub_1000A4890(ObjectType, *((uint64_t *)&v60 + 1));
    uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 40))(ObjectType, v26);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v55;
    *(_OWORD *)(v27 + 24) = v60;
    swift_retain();
    swift_unknownObjectRetain();
    static Subscribers.Demand.unlimited.getter();
    sub_100012894(&qword_1004C9B90);
    sub_10002179C(&qword_1004C9B98, &qword_1004C9B90);
    unint64_t v28 = v56;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    swift_release();
    sub_10002179C(&qword_1004C9BA0, &qword_1004C9B88);
    swift_retain();
    uint64_t v29 = v57;
    uint64_t v30 = Publisher<>.sink(receiveValue:)();
    swift_release();
    uint64_t v31 = v28;
    uint64_t v32 = (uint64_t)v58;
    (*v51)(v31, v29);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = (uint64_t)v23;
    unint64_t v35 = sub_1000E24F8(v32);
    uint64_t v36 = v23[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (v23[3] >= v38)
    {
      uint64_t v42 = v50;
      if (isUniquelyReferenced_nonNull_native)
      {
        int v23 = (void *)v61;
        if (v34) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_1000D7FE0();
        int v23 = (void *)v61;
        if (v39) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_1000D12F8(v38, isUniquelyReferenced_nonNull_native);
      unint64_t v40 = sub_1000E24F8(v32);
      uint64_t v42 = v50;
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_21;
      }
      unint64_t v35 = v40;
      int v23 = (void *)v61;
      if (v39)
      {
LABEL_3:
        uint64_t v24 = v23[7];
        swift_release();
        *(void *)(v24 + 8 * v35) = v30;
        goto LABEL_4;
      }
    }
    v23[(v35 >> 6) + 8] |= 1 << v35;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v42 + 16))(v23[6] + *(void *)(v42 + 72) * v35, v32, v59);
    *(void *)(v23[7] + 8 * v35) = v30;
    uint64_t v43 = v23[2];
    BOOL v44 = __OFADD__(v43, 1);
    uint64_t v45 = v43 + 1;
    if (v44) {
      goto LABEL_20;
    }
    v23[2] = v45;
LABEL_4:
    swift_bridgeObjectRelease();
    ++v22;
    (*v48)(v32, v59);
    swift_unknownObjectRelease();
    a1 = v49;
    if (v52 == v22)
    {
      swift_bridgeObjectRelease();
      Swift::String v20 = (void *)v47[0];
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C2670()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C26D0()
{
  uint64_t v0 = StateObserver.deinit();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000C2738()
{
  sub_1000C26D0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InstrumentationCoordinator()
{
  uint64_t result = qword_1004C9998;
  if (!qword_1004C9998) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C27B4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000C2814()
{
  uint64_t v17 = *v0;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004C2B18 != -1) {
    swift_once();
  }
  aBlock._uint64_t countAndFlagsBits = 0;
  aBlock._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  aBlock._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  aBlock._object = (void *)0x8000000100424830;
  id v7 = [self processInfo];
  id v8 = [v7 thermalState];

  id v26 = v8;
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  Log.default(_:isPrivate:)(aBlock, 0);
  swift_bridgeObjectRelease();
  sub_10005536C();
  NSString v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v17;
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v13;
  uint64_t v24 = sub_1000C40FC;
  uint64_t v25 = v12;
  aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
  aBlock._object = (void *)1107296256;
  uint64_t v22 = sub_100049AB4;
  int v23 = &unk_10048CBB8;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000C4A98((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v6, v19);
}

uint64_t sub_1000C2C30()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v1 = [self processInfo];
    unint64_t v2 = (unint64_t)[v1 thermalState];

    if (v2 >= 4)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      sub_1000C2D1C(0x20303u >> (8 * v2));
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000C2D1C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100012894(&qword_1004C9AD8);
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100012894(&qword_1004C9AE0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v27 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v1 + 88);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v23 = v4;
    uint64_t v24 = v8;
    uint64_t v25 = v7;
    uint64_t v26 = v2;
    uint64_t v29 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v13 = (uint64_t *)(v10 + 40);
    do
    {
      uint64_t v15 = *(v13 - 1);
      uint64_t v14 = *v13;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 48);
      swift_unknownObjectRetain();
      char v18 = v17(ObjectType, v14);
      int v19 = a1;
      if ((v18 & 1) == 0) {
        int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(ObjectType, v14, a1);
      }
      sub_1000C43E0(v15, v14, v19);
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v13 += 2;
      --v11;
    }
    while (v11);
    uint64_t v12 = v29;
    swift_bridgeObjectRelease();
    uint64_t v7 = v25;
    uint64_t v4 = v23;
    uint64_t v8 = v24;
  }
  uint64_t v29 = v12;
  sub_100012894(&qword_1004C9AE8);
  sub_100012894(&qword_1004C9AF0);
  sub_10002179C(&qword_1004C9AF8, &qword_1004C9AE8);
  sub_10002179C(&qword_1004C9B00, &qword_1004C9AF0);
  Publishers.MergeMany.init<A>(_:)();
  sub_10002179C(&qword_1004C9B08, &qword_1004C9AD8);
  uint64_t v20 = v27;
  Publisher.collect()();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  sub_10002179C(&qword_1004C9B10, &qword_1004C9AE0);
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v20, v7);
  swift_beginAccess();
  sub_100012894(&qword_1004C5E50);
  sub_10002179C(&qword_1004C5E58, &qword_1004C5E50);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C317C(uint64_t *a1, uint64_t a2)
{
  uint64_t v47 = sub_100012894(&qword_1004C9B18);
  uint64_t v4 = *(void *)(v47 - 8);
  uint64_t v5 = __chkstk_darwin(v47);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v43 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = *a1;
  uint64_t v14 = (void *)sub_1000E172C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = *(void *)(v13 + 16);
  if (v15)
  {
    uint64_t v43 = v13;
    uint64_t v44 = a2;
    uint64_t v16 = v13 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v45 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain();
    id v46 = v12;
    while (1)
    {
      uint64_t v49 = v16;
      uint64_t v50 = v15;
      sub_1000C4A30(v16, (uint64_t)v12);
      uint64_t v18 = v47;
      uint64_t v19 = *(int *)(v47 + 48);
      uint64_t v20 = type metadata accessor for UUID();
      Swift::String v21 = *(void **)(v20 - 8);
      uint64_t v22 = v10;
      uint64_t v23 = v7;
      uint64_t v24 = (void (*)(char *, char *, uint64_t))v21[2];
      v24(v22, v12, v20);
      uint64_t v25 = v12;
      int v26 = v12[v19];
      v22[v19] = v26;
      uint64_t v27 = *(int *)(v18 + 48);
      id v48 = (void (*)(unint64_t, char *, uint64_t))v24;
      v24(v23, v25, v20);
      uint64_t v28 = (uint64_t)v22;
      uint64_t v29 = v23;
      int v51 = v26;
      v23[v27] = v26;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v52 = v14;
      uint64_t v10 = (char *)v28;
      unint64_t v32 = sub_1000E24F8(v28);
      uint64_t v33 = v14[2];
      BOOL v34 = (v31 & 1) == 0;
      uint64_t v35 = v33 + v34;
      if (__OFADD__(v33, v34)) {
        break;
      }
      char v36 = v31;
      if (v14[3] >= v35)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1000D7D50();
        }
      }
      else
      {
        sub_1000D0ED4(v35, isUniquelyReferenced_nonNull_native);
        unint64_t v37 = sub_1000E24F8((uint64_t)v10);
        if ((v36 & 1) != (v38 & 1)) {
          goto LABEL_18;
        }
        unint64_t v32 = v37;
      }
      uint64_t v7 = v29;
      uint64_t v14 = v52;
      uint64_t v12 = v46;
      if (v36)
      {
        *(unsigned char *)(v52[7] + v32) = v51;
      }
      else
      {
        v52[(v32 >> 6) + 8] |= 1 << v32;
        v48(v14[6] + v21[9] * v32, v10, v20);
        *(unsigned char *)(v14[7] + v32) = v51;
        uint64_t v39 = v14[2];
        BOOL v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        if (v40) {
          goto LABEL_17;
        }
        v14[2] = v41;
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = (void (*)(char *, uint64_t))v21[1];
      v17(v10, v20);
      v17(v29, v20);
      sub_10002B9C0((uint64_t)v12, &qword_1004C9B18);
      uint64_t v16 = v49 + v45;
      uint64_t v15 = v50 - 1;
      if (v50 == 1)
      {
        swift_bridgeObjectRelease();
        a2 = v44;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_beginAccess();
    *(void *)(a2 + 120) = v14;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000C3514(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v50 = sub_100012894(&qword_1004C9B18);
  uint64_t v6 = *(void *)(v50 - 8);
  uint64_t v7 = __chkstk_darwin(v50);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v51 = (uint64_t)&v44 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = *a1;
  unint64_t v54 = sub_1000E172C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v44 = v14;
    uint64_t v45 = a2;
    int v46 = a3;
    uint64_t v16 = v14 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v47 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    uint64_t v17 = v51;
    id v48 = v13;
    uint64_t v49 = v9;
    while (1)
    {
      uint64_t v52 = v16;
      uint64_t v53 = v15;
      sub_1000C4A30(v16, (uint64_t)v13);
      uint64_t v19 = v50;
      uint64_t v20 = *(int *)(v50 + 48);
      uint64_t v21 = type metadata accessor for UUID();
      uint64_t v22 = *(void **)(v21 - 8);
      uint64_t v23 = (void (*)(uint64_t, char *, uint64_t))v22[2];
      v23(v17, v13, v21);
      char v24 = v13[v20];
      *(unsigned char *)(v17 + v20) = v24;
      uint64_t v25 = *(int *)(v19 + 48);
      v23((uint64_t)v9, v13, v21);
      v9[v25] = v24;
      unint64_t v26 = v54;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = v17;
      int v29 = isUniquelyReferenced_nonNull_native;
      uint64_t v57 = (void *)v26;
      unint64_t v31 = sub_1000E24F8(v28);
      uint64_t v32 = *(void *)(v26 + 16);
      BOOL v33 = (v30 & 1) == 0;
      uint64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        break;
      }
      char v35 = v30;
      if (*(void *)(v26 + 24) >= v34)
      {
        if ((v29 & 1) == 0) {
          sub_1000D7D50();
        }
        uint64_t v17 = v51;
      }
      else
      {
        sub_1000D0ED4(v34, v29);
        uint64_t v17 = v51;
        unint64_t v36 = sub_1000E24F8(v51);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_19;
        }
        unint64_t v31 = v36;
      }
      char v38 = v57;
      unint64_t v54 = (unint64_t)v57;
      if (v35)
      {
        *(unsigned char *)(v57[7] + v31) = v24;
      }
      else
      {
        v57[(v31 >> 6) + 8] |= 1 << v31;
        v23(v38[6] + v22[9] * v31, (char *)v17, v21);
        *(unsigned char *)(v38[7] + v31) = v24;
        uint64_t v39 = v38[2];
        BOOL v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        if (v40) {
          goto LABEL_18;
        }
        v38[2] = v41;
      }
      swift_bridgeObjectRelease();
      uint64_t v18 = (void (*)(uint64_t, uint64_t))v22[1];
      v18(v17, v21);
      uint64_t v9 = v49;
      v18((uint64_t)v49, v21);
      uint64_t v13 = v48;
      sub_10002B9C0((uint64_t)v48, &qword_1004C9B18);
      uint64_t v16 = v52 + v47;
      uint64_t v15 = v53 - 1;
      if (v53 == 1)
      {
        swift_bridgeObjectRelease();
        LOBYTE(a3) = v46;
        a2 = v45;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_beginAccess();
    unint64_t v42 = v54;
    *(void *)(a2 + 120) = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v55 = a3;
    unint64_t v56 = v42;
    PassthroughSubject.send(_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000C38D8(uint64_t a1, uint64_t a2)
{
  void (*v19)(void *__return_ptr, uint64_t);
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void v25[3];

  uint64_t v4 = sub_100012894(&qword_1004C9B18);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v23 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = *(int *)(v5 + 56);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v13(v9, a1, v11);
  char v14 = *(unsigned char *)(a1 + v10);
  v9[v10] = v14;
  uint64_t v15 = *(int *)(v5 + 56);
  uint64_t v16 = v23;
  v13(v23, a1, v11);
  v16[v15] = v14;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v24 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0x8000000000000000;
  sub_1000D53B0(v14, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a2 + 120) = v24;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v9, v11);
  swift_endAccess();
  v18(v16, v11);
  uint64_t v19 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(a2 + 72) + 144);
  uint64_t v20 = swift_retain();
  v19(v25, v20);
  swift_release();
  v25[1] = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  PassthroughSubject.send(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C3B08(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v53 - 8);
  uint64_t v4 = __chkstk_darwin(v53);
  uint64_t v44 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v52 = (char *)v42 - v7;
  __chkstk_darwin(v6);
  uint64_t v51 = (char *)v42 - v8;
  swift_weakInit();
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9)
  {
    uint64_t v10 = a2 + 32;
    v42[1] = a2;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v11 = 0;
    uint64_t v43 = v3;
    uint64_t v12 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v45 = v10;
    uint64_t v46 = v9;
    do
    {
      uint64_t v13 = (uint64_t *)(v10 + 16 * v11);
      uint64_t v14 = *v13;
      uint64_t v54 = v13[1];
      uint64_t v55 = v14;
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v16 = *(void *)(Strong + 88);
        uint64_t v17 = *(void *)(v16 + 16);
        if (v17)
        {
          uint64_t v47 = Strong + 88;
          uint64_t v48 = v11;
          uint64_t v50 = Strong;
          uint64_t ObjectType = swift_getObjectType();
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v19 = 0;
          uint64_t v49 = v16;
          uint64_t v20 = (uint64_t *)(v16 + 40);
          while (1)
          {
            uint64_t v21 = *v20;
            uint64_t v22 = swift_getObjectType();
            swift_unknownObjectRetain();
            uint64_t v23 = v51;
            sub_1000A4890(v22, v21);
            char v24 = v52;
            sub_1000A4890(ObjectType, v54);
            LOBYTE(v21) = static UUID.== infix(_:_:)();
            uint64_t v25 = *v12;
            unint64_t v26 = v24;
            uint64_t v27 = v53;
            (*v12)(v26, v53);
            v25(v23, v27);
            swift_unknownObjectRelease();
            if (v21) {
              break;
            }
            ++v19;
            v20 += 2;
            if (v17 == v19)
            {
              swift_unknownObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_17;
            }
          }
          swift_bridgeObjectRelease();
          sub_10003063C(v19);
          uint64_t v29 = v28;
          uint64_t v30 = swift_getObjectType();
          uint64_t v31 = (uint64_t)v44;
          sub_1000A4890(v30, v29);
          uint64_t v32 = v50;
          BOOL v33 = (uint64_t *)(v50 + 112);
          swift_beginAccess();
          swift_bridgeObjectRetain();
          unint64_t v34 = sub_1000E24F8(v31);
          char v36 = v35;
          swift_bridgeObjectRelease();
          if (v36)
          {
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v38 = *v33;
            uint64_t v56 = *v33;
            *BOOL v33 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_1000D7FE0();
              uint64_t v38 = v56;
            }
            uint64_t v39 = v53;
            v25((char *)(*(void *)(v38 + 48) + *(void *)(v43 + 72) * v34), v53);
            uint64_t v40 = v56;
            sub_1000A8E74(v34, v56);
            *(void *)(v32 + 112) = v40;
            swift_bridgeObjectRelease();
            swift_endAccess();
            v25(v44, v39);
            AnyCancellable.cancel()();
            swift_unknownObjectRelease();
            swift_release();
          }
          else
          {
            swift_endAccess();
            v25((char *)v31, v53);
            swift_unknownObjectRelease();
          }
          swift_release();
          swift_unknownObjectRelease();
LABEL_17:
          uint64_t v10 = v45;
          uint64_t v9 = v46;
          uint64_t v11 = v48;
        }
        else
        {
          swift_release();
        }
      }
      ++v11;
    }
    while (v11 != v9);
    swift_bridgeObjectRelease();
  }
  return swift_weakDestroy();
}

BOOL sub_1000C3F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a3 + 16);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (uint64_t *)(a3 + 40);
  while (swift_getObjectType() != a1)
  {
    v12 += 2;
    if (!--v11) {
      return 0;
    }
  }
  uint64_t v14 = *v12;
  swift_unknownObjectRetain();
  sub_1000A4890(a1, v14);
  if (*(void *)(a4 + 16) && (unint64_t v15 = sub_1000E24F8((uint64_t)v10), (v16 & 1) != 0))
  {
    char v17 = *(unsigned char *)(*(void *)(a4 + 56) + v15);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (v17 & 0xFE) == 2;
  }
  else
  {
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 1;
  }
}

uint64_t sub_1000C408C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C40C4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C40FC()
{
  return sub_1000C2C30();
}

uint64_t sub_1000C4104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C4114()
{
  return swift_release();
}

void *sub_1000C411C(uint64_t a1)
{
  sub_100012894(&qword_1004C9BB8);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  int64_t v3 = 0;
  uint64_t v32 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v4;
  uint64_t v29 = v5;
  int64_t v30 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v31 = result + 8;
  uint64_t v28 = result;
  if ((v8 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    char v15 = *(unsigned char *)(*(void *)(v32 + 48) + i);
    uint64_t v16 = *(void *)(*(void *)(v32 + 56) + 8 * i);
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      char v33 = *(unsigned char *)(*(void *)(v32 + 48) + i);
      unint64_t v34 = v9;
      int64_t v35 = v3;
      swift_bridgeObjectRetain_n();
      uint64_t v18 = (uint64_t *)(v16 + 40);
      unint64_t v19 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v21 = *(v18 - 1);
        if (v21)
        {
          uint64_t v22 = *v18;
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v19 = sub_10006E398(0, v19[2] + 1, 1, v19);
          }
          unint64_t v24 = v19[2];
          unint64_t v23 = v19[3];
          if (v24 >= v23 >> 1) {
            unint64_t v19 = sub_10006E398((void *)(v23 > 1), v24 + 1, 1, v19);
          }
          v19[2] = v24 + 1;
          uint64_t v20 = &v19[2 * v24];
          v20[4] = v21;
          v20[5] = v22;
        }
        v18 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease_n();
      uint64_t result = v28;
      int64_t v3 = v35;
      unint64_t v9 = v34;
      char v15 = v33;
    }
    else
    {
      unint64_t v19 = _swiftEmptyArrayStorage;
    }
    *(void *)((char *)v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(unsigned char *)(result[6] + i) = v15;
    *(void *)(result[7] + 8 * i) = v19;
    uint64_t v25 = result[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    result[2] = v27;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_35;
    }
    if (v12 >= v30) {
      return result;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v30) {
        return result;
      }
      unint64_t v13 = *(void *)(v29 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v30) {
          return result;
        }
        unint64_t v13 = *(void *)(v29 + 8 * v3);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v30) {
    return result;
  }
  unint64_t v13 = *(void *)(v29 + 8 * v14);
  if (v13)
  {
    int64_t v3 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v30) {
      return result;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000C43E0(uint64_t a1, uint64_t a2, int a3)
{
  int v34 = a3;
  uint64_t v5 = sub_100012894(&qword_1004C9B20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100012894(&qword_1004C9B28);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100012894(&qword_1004C9B30);
  uint64_t v35 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100012894(&qword_1004C9B38);
  uint64_t v38 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v31 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100012894(&qword_1004C9B40);
  uint64_t v39 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  char v33 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Just.init(_:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v41, ObjectType, a2);
  uint64_t v18 = v42;
  uint64_t v17 = v43;
  sub_1000131D4(v41, v42);
  id v40 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v18, v17);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v7, 1, 1, v19);
  sub_10005536C();
  sub_10002179C(&qword_1004C9B48, &qword_1004C9B28);
  sub_1000C4A98((unint64_t *)&qword_1004C9B50, (void (*)(uint64_t))sub_10005536C);
  Publisher.receive<A>(on:options:)();
  sub_10002B9C0((uint64_t)v7, &qword_1004C9B20);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_100013218((uint64_t)v41);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  LOBYTE(v18) = v34;
  *(unsigned char *)(v20 + 32) = v34;
  swift_unknownObjectRetain();
  static Subscribers.Demand.unlimited.getter();
  sub_100012894((uint64_t *)&unk_1004C68D0);
  sub_10002179C(&qword_1004C9B58, &qword_1004C9B30);
  sub_10002179C(&qword_1004C9B60, (uint64_t *)&unk_1004C68D0);
  uint64_t v22 = v31;
  uint64_t v21 = v32;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v21);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  *(unsigned char *)(v23 + 32) = v18;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = sub_1000C4B78;
  *(void *)(v24 + 24) = v23;
  swift_unknownObjectRetain();
  sub_100012894(&qword_1004C9B18);
  sub_10002179C(&qword_1004C9B68, &qword_1004C9B38);
  uint64_t v25 = v33;
  uint64_t v26 = v36;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v26);
  sub_10002179C(&qword_1004C9B70, &qword_1004C9B40);
  uint64_t v27 = v37;
  uint64_t v28 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v27);
  return v28;
}

uint64_t sub_1000C4A28(uint64_t *a1)
{
  return sub_1000C317C(a1, v1);
}

uint64_t sub_1000C4A30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894(&qword_1004C9B18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C4A98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C4AE0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000C4B18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 32);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 56))(v4, ObjectType, v3);
  *a1 = result;
  return result;
}

uint64_t sub_1000C4B78()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  sub_1000A4890(ObjectType, v1);
  return v2;
}

uint64_t sub_1000C4BCC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C4C04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 16);
  uint64_t v4 = *(int *)(sub_100012894(&qword_1004C9B18) + 48);
  uint64_t result = v3(a1);
  *(unsigned char *)(a1 + v4) = result;
  return result;
}

uint64_t sub_1000C4C50(unsigned __int8 *a1)
{
  return sub_1000C195C(*a1);
}

unint64_t sub_1000C4C58()
{
  unint64_t result = qword_1004C9B80;
  if (!qword_1004C9B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C9B80);
  }
  return result;
}

void *sub_1000C4CAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v6 = swift_unknownObjectRetain();
      sub_1000C43E0(v6, v5, 0);
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 2;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000C4D78()
{
  return sub_1000C5094((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_release, 32);
}

uint64_t sub_1000C4DA8(uint64_t a1)
{
  return sub_1000C3B08(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000C4DB0(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(ObjectType, a2) & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(ObjectType, a2);
  }
  uint64_t v4 = self;
  id v5 = [v4 processInfo];
  unint64_t v6 = (unint64_t)[v5 thermalState];

  if (v6 < 4)
  {
    unint64_t v7 = qword_1003FCDF8[v6];
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
    if (v7 >= v8(ObjectType, a2)) {
      return v8(ObjectType, a2);
    }
    id v9 = [v4 processInfo];
    unint64_t v10 = (unint64_t)[v9 thermalState];

    if (v10 < 4) {
      return 0x20303u >> (8 * v10);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000C4F48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      uint64_t v7 = swift_unknownObjectRetain();
      int v8 = sub_1000C4DB0(v7, v6);
      sub_1000C43E0(v5, v6, v8);
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 2;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000C5020()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000C5058(uint64_t *a1)
{
  return sub_1000C3514(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1000C5064()
{
  return sub_1000C5094((void (*)(void))&_swift_release, (void (*)(void))&_swift_unknownObjectRelease, 40);
}

uint64_t sub_1000C5094(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  a1(*(void *)(v3 + 16));
  a2(*(void *)(v3 + 24));

  return _swift_deallocObject(v3, a3, 7);
}

uint64_t sub_1000C50F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000C43E0(*(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned __int8 *)(a1 + 1));
  *a2 = result;
  return result;
}

uint64_t sub_1000C512C(uint64_t a1)
{
  return sub_1000C38D8(a1, v1);
}

id sub_1000C51D0(uint64_t a1)
{
  BOOL v3 = sub_1000CC794();
  if (v3 || !*(unsigned char *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState)) {
    [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) setHidden:v3];
  }
  [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) setAlpha:*(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha)];
  switch(a1)
  {
    case 0:
    case 2:
    case 5:
    case 7:
      uint64_t v4 = qword_1004C2F18;
      id v5 = *(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      if (v4 != -1) {
        swift_once();
      }
      [v5 setColor:qword_1004F8708];

      if (qword_1004C2F00 != -1) {
        swift_once();
      }
      uint64_t v6 = (void *)qword_1004F86F0;
      uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
      int v8 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24);
      *(void *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24) = qword_1004F86F0;
      id v9 = v6;

      unint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelText);
      uint64_t v11 = *v7;
      unint64_t v12 = v7[1];
      uint64_t v14 = (void *)v7[2];
      unint64_t v13 = (void *)v7[3];
      id v15 = v13;
      id v16 = v10;
      swift_bridgeObjectRetain();
      id v17 = v14;
      id v18 = sub_1000DB104(v11, v12, v13);

      swift_bridgeObjectRelease();
      [v16 setAttributedText:v18];

      uint64_t v19 = (_OWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds);
      long long v64 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds + 16);
      long long v20 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds + 48);
      long long v63 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds + 32);
      uint64_t v21 = (_OWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
      _OWORD *v21 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds);
      v21[1] = v64;
      v21[2] = v63;
      v21[3] = v20;
      long long v22 = v19[5];
      long long v62 = v19[4];
      long long v23 = v19[7];
      long long v61 = v19[6];
      uint64_t v24 = (_OWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end2);
      *uint64_t v24 = v62;
      v24[1] = v22;
      v24[2] = v61;
      v24[3] = v23;
      simd_float4x4.position.getter();
      simd_float4x4.position.getter();
      LODWORD(v60) = 1056964608;
      slerp(transform1:transform2:percent:)();
      simd_float4x4.up.getter();
      simd_float4x4.position.getter();
      createTransform(forward:normal:position:)();
      uint64_t v25 = (_OWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_center);
      _OWORD *v25 = v26;
      v25[1] = v27;
      v25[2] = v28;
      v25[3] = v29;
      goto LABEL_24;
    case 1:
      char v33 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      int v34 = self;
      id v35 = v33;
      id v36 = [v34 clearColor];
      [v35 setColor:v36];

      id v37 = [v34 clearColor];
      uint64_t v38 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
      uint64_t v39 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24);
      *(void *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24) = v37;

      goto LABEL_22;
    case 3:
    case 4:
    case 6:
      uint64_t v30 = qword_1004C2F20;
      id v31 = *(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      if (v30 != -1) {
        swift_once();
      }
      [v31 setColor:qword_1004F8710];

      if (qword_1004C2F08 != -1) {
        swift_once();
      }
      uint64_t v32 = (void *)qword_1004F86F8;
      goto LABEL_21;
    case 8:
      uint64_t v59 = qword_1004C2F20;
      id v52 = *(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      if (v59 != -1) {
        swift_once();
      }
      [v52 setColor:qword_1004F8710];
      goto LABEL_23;
    case 9:
      uint64_t v40 = qword_1004C2F28;
      id v41 = *(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      if (v40 != -1) {
        swift_once();
      }
      [v41 setColor:qword_1004F8718];

      if (qword_1004C2F10 != -1) {
        swift_once();
      }
      uint64_t v32 = (void *)qword_1004F8700;
LABEL_21:
      uint64_t v38 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
      uint64_t v42 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24);
      *(void *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24) = v32;
      id v43 = v32;

LABEL_22:
      uint64_t v44 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelText);
      uint64_t v45 = *v38;
      unint64_t v46 = v38[1];
      uint64_t v48 = (void *)v38[2];
      uint64_t v47 = (void *)v38[3];
      id v49 = v47;
      id v50 = v44;
      swift_bridgeObjectRetain();
      id v51 = v48;
      id v52 = sub_1000DB104(v45, v46, v47);

      swift_bridgeObjectRelease();
      [v50 setAttributedText:v52];

LABEL_23:
LABEL_24:
      int v53 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_capturing);
      uint64_t v54 = (void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelChevron);
      double v55 = 0.0;
      if ((v53 & 1) == 0)
      {
        unint64_t v56 = *(void *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_state);
        if (v56 <= 7) {
          double v55 = dbl_1003FD380[v56];
        }
      }
      [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelChevron) setAlpha:v55 v60];
      uint64_t v57 = *v54;
      return [v57 setUserInteractionEnabled:v53 ^ 1u];
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1000C5810);
  }
}

uint64_t sub_1000C5838(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
  BOOL v5 = *(void *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText) == a1
    && *(void *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 8) == (void)a2;
  if (v5 || (uint64_t v6 = v2, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_state);
    if (v9 > 9)
    {
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
    }
    else
    {
      if (((1 << v9) & 0x1DA) == 0)
      {
        if (qword_1004C2B38 != -1) {
          swift_once();
        }
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelType))
        {
          if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelType) == 1)
          {
            unint64_t v10 = 0xE400000000000000;
            uint64_t v11 = 1634038337;
          }
          else
          {
            unint64_t v10 = 0xE600000000000000;
            uint64_t v11 = 0x656D756C6F56;
          }
        }
        else
        {
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1701734732;
        }
        unint64_t v12 = v10;
        String.append(_:)(*(Swift::String *)&v11);
        swift_bridgeObjectRelease();
        v13._uint64_t countAndFlagsBits = 32;
        v13._object = (void *)0xE100000000000000;
        String.append(_:)(v13);
        uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
        id v15 = *(void **)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8);
        swift_bridgeObjectRetain();
        v16._uint64_t countAndFlagsBits = v14;
        v16._object = v15;
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._uint64_t countAndFlagsBits = 0x206D6F726620;
        v17._object = (void *)0xE600000000000000;
        String.append(_:)(v17);
        id v18 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                                    + OBJC_IVAR____TtC7Measure11LabelRender_labelText), "text"));
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          long long v22 = v21;
        }
        else
        {
          long long v22 = (void *)0xE300000000000000;
          uint64_t v20 = 7104846;
        }
        v23._uint64_t countAndFlagsBits = v20;
        v23._object = v22;
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._uint64_t countAndFlagsBits = 544175136;
        v24._object = (void *)0xE400000000000000;
        String.append(_:)(v24);
        v25._uint64_t countAndFlagsBits = a1;
        v25._object = a2;
        String.append(_:)(v25);
        v26._uint64_t countAndFlagsBits = 0xD000000000000012;
        v26._object = (void *)0x8000000100424D30;
        Log.default(_:isPrivate:)(v26, 0);
        swift_bridgeObjectRelease();
        *(unsigned char *)(v6 + OBJC_IVAR____TtC7Measure11LabelRender_refined) = 1;
      }
      uint64_t *v4 = a1;
      v4[1] = (uint64_t)a2;
      swift_bridgeObjectRelease();
      long long v27 = *(void **)(v6 + OBJC_IVAR____TtC7Measure11LabelRender_labelText);
      uint64_t v28 = *v4;
      unint64_t v29 = v4[1];
      id v31 = (void *)v4[2];
      uint64_t v30 = (void *)v4[3];
      id v32 = v30;
      id v33 = v27;
      swift_bridgeObjectRetain();
      id v34 = v31;
      id v35 = sub_1000DB104(v28, v29, v30);

      swift_bridgeObjectRelease();
      [v33 setAttributedText:v35];

      sub_1000C5BB0();
      return sub_1000C6118();
    }
  }
  return result;
}

void sub_1000C5BB0()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_capturing) == 1)
  {
    if (qword_1004C2F48 != -1) {
      swift_once();
    }
    uint64_t v2 = &qword_1004F8738;
  }
  else
  {
    if (qword_1004C2F40 != -1) {
      swift_once();
    }
    uint64_t v2 = &qword_1004F8730;
  }
  uint64_t v3 = OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics;
  double v4 = *(double *)v2;
  uint64_t v5 = qword_1004C27C8;
  id v6 = *(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics);
  if (v5 != -1) {
    swift_once();
  }
  UIContentSizeCategory v7 = (UIContentSizeCategory)(id)qword_1004F7DD8;
  char v8 = static UIContentSizeCategory.> infix(_:_:)();

  if (v8)
  {

    UIContentSizeCategory v7 = UIContentSizeCategoryAccessibilityLarge;
  }
  unint64_t v9 = self;
  id v10 = [v9 traitCollectionWithPreferredContentSizeCategory:v7];

  [v6 scaledValueForValue:v10 compatibleWithTraitCollection:v4];
  double v12 = v11;

  Swift::String v13 = *(void **)(v0 + v3);
  UIContentSizeCategory v14 = (UIContentSizeCategory)(id)qword_1004F7DD8;
  id v15 = v13;
  LOBYTE(v10) = static UIContentSizeCategory.> infix(_:_:)();

  if (v10)
  {

    UIContentSizeCategory v14 = UIContentSizeCategoryAccessibilityLarge;
  }
  id v16 = [v9 traitCollectionWithPreferredContentSizeCategory:v14];

  [v15 scaledValueForValue:v16 compatibleWithTraitCollection:10.0];
  double v18 = v17;

  uint64_t v19 = OBJC_IVAR____TtC7Measure11LabelRender_labelText;
  [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelText) frame];
  CGFloat v24 = v20;
  CGFloat v25 = v21;
  CGFloat v26 = v22;
  CGFloat v27 = v23;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType))
  {
    double v28 = v12 + CGRectGetWidth(*(CGRect *)&v20);
    v84.origin.x = v24;
    v84.origin.y = v25;
    v84.size.width = v26;
    v84.size.height = v27;
    CGFloat Height = CGRectGetHeight(v84);
    uint64_t v30 = (double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSize);
    *uint64_t v30 = v28;
    v30[1] = v18 + Height;
  }
  else
  {
    id v31 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
    uint64_t v75 = *(void *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 8);
    uint64_t v76 = *(void *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
    float v32 = *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurement);
    id v33 = *(void (**)(uint64_t))(**(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender__unitState) + 144);
    swift_bridgeObjectRetain();
    uint64_t v34 = swift_retain();
    v33(v34);
    swift_release();
    id v35 = sub_1000B1320();
    sub_10012EDC8((uint64_t)v35, (uint64_t)&v80, v32);
    long long v83 = v80;
    sub_100016FEC((uint64_t)&v81, (uint64_t)v82, (uint64_t *)&unk_1004D2450);
    sub_1000DB4E0((uint64_t)v82);
    *(_OWORD *)id v31 = v83;
    swift_bridgeObjectRelease();
    id v36 = *(void **)(v1 + v19);
    uint64_t v37 = *v31;
    unint64_t v38 = v31[1];
    uint64_t v40 = (void *)v31[2];
    uint64_t v39 = (void *)v31[3];
    id v41 = v39;
    id v42 = v36;
    swift_bridgeObjectRetain();
    id v43 = v40;
    id v44 = sub_1000DB104(v37, v38, v39);

    swift_bridgeObjectRelease();
    [v42 setAttributedText:v44];

    [*(id *)(v1 + v19) frame];
    CGFloat v78 = v46;
    CGFloat v79 = v45;
    CGFloat v48 = v47;
    CGFloat rect = v49;
    v85.origin.x = v24;
    v85.origin.y = v25;
    v85.size.width = v26;
    v85.size.height = v27;
    double v50 = v12 + CGRectGetWidth(v85);
    v86.origin.x = v24;
    v86.origin.y = v25;
    v86.size.width = v26;
    v86.size.height = v27;
    CGFloat v51 = CGRectGetHeight(v86);
    id v52 = (double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSize);
    *id v52 = v50;
    v52[1] = v18 + v51;
    *id v31 = v76;
    v31[1] = v75;
    swift_bridgeObjectRelease();
    int v53 = *(void **)(v1 + v19);
    uint64_t v54 = *v31;
    unint64_t v55 = v31[1];
    uint64_t v57 = (void *)v31[2];
    unint64_t v56 = (void *)v31[3];
    id v58 = v56;
    id v59 = v53;
    swift_bridgeObjectRetain();
    id v60 = v57;
    id v61 = sub_1000DB104(v54, v55, v56);

    swift_bridgeObjectRelease();
    [v59 setAttributedText:v61];

    sub_1001CD494();
    long long v62 = (void *)v31[2];
    v31[2] = v63;

    long long v64 = *(void **)(v1 + v19);
    uint64_t v65 = *v31;
    unint64_t v66 = v31[1];
    uint64_t v68 = (void *)v31[2];
    unint64_t v67 = (void *)v31[3];
    id v69 = v67;
    id v70 = v64;
    swift_bridgeObjectRetain();
    id v71 = v68;
    id v72 = sub_1000DB104(v65, v66, v67);

    swift_bridgeObjectRelease();
    [v70 setAttributedText:v72];

    v87.origin.x = v24;
    v87.origin.y = v25;
    v87.size.width = v26;
    v87.size.height = v27;
    double v73 = v12 + CGRectGetWidth(v87);
    v88.size.width = v78;
    v88.origin.x = v79;
    v88.origin.y = v48;
    v88.size.height = rect;
    double v74 = v12 + CGRectGetWidth(v88);
    if (v73 > v74) {
      double v74 = v73;
    }
    *id v52 = v74;
  }
}

uint64_t sub_1000C6118()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
  UIContentSizeCategory v7 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1000DB544;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100049AB4;
  aBlock[3] = &unk_10048D118;
  unint64_t v9 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000DBFF4((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v12);
}

void sub_1000C64AC(float a1)
{
  if (*(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurement) != a1)
  {
    uint64_t v3 = v1;
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType))
    {
      if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType) == 1)
      {
        uint64_t v4 = *(void (**)(uint64_t))(**(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender__unitState)
                                            + 144);
        uint64_t v5 = swift_retain();
        v4(v5);
        swift_release();
        id v6 = sub_1000B1320();
        sub_100130B38((uint64_t)v6, 0, 0, 0, &v21, a1);
        uint64_t v7 = v21;
        uint64_t v8 = v22;
        swift_bridgeObjectRetain();
        sub_1000C5838(v7, v8);
        sub_100016FEC((uint64_t)v23, (uint64_t)v28, (uint64_t *)&unk_1004D2450);
        sub_100016FEC((uint64_t)v28, (uint64_t)&v32, (uint64_t *)&unk_1004D2450);
        if (*((void *)&v32 + 1))
        {
          long long v33 = v32;
          swift_bridgeObjectRelease();
          *(_OWORD *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_speakableString) = v33;
        }
        goto LABEL_15;
      }
      if ([self jasperAvailable])
      {
        id v15 = *(void (**)(uint64_t))(**(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender__unitState)
                                             + 144);
        uint64_t v16 = swift_retain();
        v15(v16);
        swift_release();
        id v17 = sub_1000B1320();
        sub_10012C948((uint64_t)v17, 0, 0, &v21, a1);
        uint64_t v18 = v21;
        uint64_t v19 = v22;
        swift_bridgeObjectRetain();
        sub_1000C5838(v18, v19);
        sub_100016FEC((uint64_t)v23, (uint64_t)v28, (uint64_t *)&unk_1004D2450);
        sub_100016FEC((uint64_t)v28, (uint64_t)&v32, (uint64_t *)&unk_1004D2450);
        if (*((void *)&v32 + 1))
        {
          long long v33 = v32;
          swift_bridgeObjectRelease();
          sub_100016FEC((uint64_t)v25, (uint64_t)&v27, &qword_1004C96D0);
          sub_100016FEC((uint64_t)&v27, (uint64_t)&v29, &qword_1004C96D0);
          char v20 = v29;
          if (v29 == 4
            || (sub_100016FEC((uint64_t)v24, (uint64_t)v26, &qword_1004C74C8),
                sub_100016FEC((uint64_t)v26, (uint64_t)&v30, &qword_1004C74C8),
                v31 == 1))
          {
            sub_1000DB4E0((uint64_t)v28);
          }
          else
          {
            *(_OWORD *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_speakableString) = v33;
            swift_bridgeObjectRelease();
            *(float *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters) = sub_1001308E4(v20, 0);
          }
          goto LABEL_16;
        }
LABEL_15:
        swift_bridgeObjectRelease();
LABEL_16:
        *(unsigned char *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine) = 0;
      }
    }
    else
    {
      unint64_t v9 = *(void (**)(uint64_t))(**(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender__unitState) + 144);
      uint64_t v10 = swift_retain();
      v9(v10);
      swift_release();
      id v11 = sub_1000B1320();
      sub_10012C948((uint64_t)v11, 0, 0, &v21, a1);
      uint64_t v12 = v21;
      Swift::String v13 = v22;
      swift_bridgeObjectRetain();
      sub_1000C5838(v12, v13);
      sub_100016FEC((uint64_t)v23, (uint64_t)v28, (uint64_t *)&unk_1004D2450);
      sub_100016FEC((uint64_t)v28, (uint64_t)&v32, (uint64_t *)&unk_1004D2450);
      if (*((void *)&v32 + 1))
      {
        long long v33 = v32;
        swift_bridgeObjectRelease();
        sub_100016FEC((uint64_t)v25, (uint64_t)&v27, &qword_1004C96D0);
        sub_100016FEC((uint64_t)&v27, (uint64_t)&v29, &qword_1004C96D0);
        char v14 = v29;
        if (v29 == 4
          || (sub_100016FEC((uint64_t)v24, (uint64_t)v26, &qword_1004C74C8),
              sub_100016FEC((uint64_t)v26, (uint64_t)&v30, &qword_1004C74C8),
              v31 == 1))
        {
          sub_1000DB4E0((uint64_t)v28);
        }
        else
        {
          *(_OWORD *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_speakableString) = v33;
          swift_bridgeObjectRelease();
          *(float *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters) = sub_1001308E4(v14, 0);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
}

void sub_1000C6908()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (unsigned char *)Strong;
    uint64_t v2 = (os_unfair_lock_s *)(Strong + OBJC_IVAR____TtC7Measure11LabelRender_labelLock);
    swift_beginAccess();
    os_unfair_lock_lock(v2);
    v1[OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture] = 0;
    os_unfair_lock_unlock(v2);
    swift_endAccess();
  }
}

unint64_t sub_1000C699C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000DBDC0(*a1);
  *a2 = result;
  return result;
}

char *sub_1000C6A20(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, unint64_t a7, int a8, double a9, double a10)
{
  id v11 = v10;
  int v138 = a8;
  unint64_t v131 = a7;
  int v136 = a6;
  uint64_t v149 = a5;
  int v135 = a4;
  uint64_t v133 = a3;
  uint64_t v132 = a2;
  int v134 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v144 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  int v141 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for DispatchQoS();
  uint64_t v140 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v139 = (char *)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v10[OBJC_IVAR____TtC7Measure11LabelRender_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = &v10[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  *(void *)(v16 + 13) = 0;
  v16[21] = 1;
  id v17 = &v10[OBJC_IVAR____TtC7Measure11LabelRender_labelSizeAdjustment];
  *(void *)id v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *((_WORD *)v17 + 12) = 0;
  v10[OBJC_IVAR____TtC7Measure11LabelRender_inBounds] = 0;
  uint64_t v18 = OBJC_IVAR____TtC7Measure11LabelRender__input;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = sub_100012894((uint64_t *)&unk_1004CF6F0);
  uint64_t v21 = qword_1004C2E30;
  double v22 = v11;
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1004F8630;
  CGFloat v24 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 272);
  swift_retain();
  *(void *)&v11[v18] = v24(KeyPath, v23);
  uint64_t v25 = OBJC_IVAR____TtC7Measure11LabelRender__appState;
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = sub_100012894((uint64_t *)&unk_1004C4710);
  uint64_t v28 = qword_1004F8630;
  char v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 272);
  swift_retain();
  *(void *)&v22[v25] = v29(v26, v28);
  uint64_t v30 = OBJC_IVAR____TtC7Measure11LabelRender__unitState;
  uint64_t v31 = swift_getKeyPath();
  uint64_t v32 = sub_100012894(&qword_1004C96C8);
  uint64_t v33 = qword_1004F8630;
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 272);
  swift_retain();
  *(void *)&v22[v30] = v34(v31, v33);
  uint64_t v35 = OBJC_IVAR____TtC7Measure11LabelRender__orientationState;
  uint64_t v36 = swift_getKeyPath();
  uint64_t v37 = sub_100012894((uint64_t *)&unk_1004C7450);
  uint64_t v38 = qword_1004F8630;
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 272);
  swift_retain();
  *(void *)&v22[v35] = v39(v36, v38);
  uint64_t v40 = OBJC_IVAR____TtC7Measure11LabelRender__render;
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = sub_100012894(&qword_1004C9E08);
  uint64_t v43 = qword_1004F8630;
  id v44 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 272);
  swift_retain();
  *(void *)&v22[v40] = v44(v41, v43);
  uint64_t v45 = OBJC_IVAR____TtC7Measure11LabelRender__pointMove;
  uint64_t v46 = swift_getKeyPath();
  uint64_t v47 = sub_100012894(&qword_1004C9E10);
  uint64_t v48 = qword_1004F8630;
  double v49 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 272);
  swift_retain();
  *(void *)&v22[v45] = v49(v46, v48);
  uint64_t v50 = OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha] = 0x3FF0000000000000;
  *(_DWORD *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_labelLock] = 0;
  uint64_t v51 = (uint64_t)&v22[OBJC_IVAR____TtC7Measure11LabelRender_snapFrom];
  sub_1000DB49C((uint64_t)v152);
  sub_100016FEC((uint64_t)v152, v51, &qword_1004C9DF8);
  sub_100016FEC((uint64_t)v152, (uint64_t)&v22[OBJC_IVAR____TtC7Measure11LabelRender_snapTo], &qword_1004C9DF8);
  id v52 = (simd_float4 *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds];
  simd_float4 v54 = matrix_identity_float4x4.columns[1];
  *(simd_float4 *)uint64_t v148 = matrix_identity_float4x4.columns[0];
  simd_float4 v53 = *(simd_float4 *)v148;
  simd_float4 v147 = v54;
  simd_float4 v56 = matrix_identity_float4x4.columns[3];
  simd_float4 v146 = matrix_identity_float4x4.columns[2];
  simd_float4 v55 = v146;
  simd_float4 v145 = v56;
  *id v52 = *(simd_float4 *)v148;
  v52[1] = v54;
  v52[2] = v55;
  v52[3] = v56;
  v52[4] = v53;
  v52[5] = v54;
  v52[6] = v55;
  v52[7] = v56;
  uint64_t v57 = OBJC_IVAR____TtC7Measure11LabelRender__pillToPlatterAnimationState;
  uint64_t v58 = swift_getKeyPath();
  uint64_t v59 = sub_100012894(&qword_1004C9548);
  uint64_t v60 = qword_1004F8630;
  id v61 = *(uint64_t (**)(uint64_t, uint64_t))(v59 + 272);
  swift_retain();
  *(void *)&v22[v57] = v61(v58, v60);
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_kOcclusionAlpha] = 0x3FE0000000000000;
  v22[OBJC_IVAR____TtC7Measure11LabelRender_isOccluded] = 0;
  long long v62 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_screenPoint];
  *(void *)long long v62 = 0;
  *((void *)v62 + 1) = 0;
  v62[16] = 1;
  v22[OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture] = 0;
  uint64_t v63 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_captureActionKey];
  strcpy(&v22[OBJC_IVAR____TtC7Measure11LabelRender_captureActionKey], "captureAction");
  *((_WORD *)v63 + 7) = -4864;
  long long v64 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_attributedText];
  sub_1001CD494();
  *(void *)long long v64 = 0;
  *((void *)v64 + 1) = 0xE000000000000000;
  *((void *)v64 + 2) = v65;
  *((void *)v64 + 3) = 0;
  v22[OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine] = 1;
  unint64_t v66 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_speakableString];
  *(void *)unint64_t v66 = 0;
  *((void *)v66 + 1) = 0xE000000000000000;
  *(_DWORD *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters] = 0;
  *(_DWORD *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_measurement] = 0;
  v22[OBJC_IVAR____TtC7Measure11LabelRender_capturing] = 0;
  v22[OBJC_IVAR____TtC7Measure11LabelRender_hideForMovePoint] = 0;
  unint64_t v67 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_labelSize];
  *(void *)unint64_t v67 = 0;
  *((void *)v67 + 1) = 0;
  v22[OBJC_IVAR____TtC7Measure11LabelRender_selectionState] = 0;
  v22[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft] = 0;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel] = 0;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_timer] = 0;
  uint64_t v68 = (simd_float4 *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_center];
  simd_float4 v69 = *(simd_float4 *)v148;
  simd_float4 v70 = v147;
  *uint64_t v68 = *(simd_float4 *)v148;
  v68[1] = v70;
  simd_float4 v71 = v146;
  simd_float4 v72 = v145;
  v68[2] = v146;
  v68[3] = v72;
  double v73 = (simd_float4 *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_end1];
  *double v73 = v69;
  v73[1] = v70;
  v73[2] = v71;
  v73[3] = v72;
  double v74 = (simd_float4 *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_end2];
  *double v74 = v69;
  v74[1] = v70;
  v74[2] = v71;
  v74[3] = v72;
  uint64_t v75 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_snapTimestamp];
  uint64_t v76 = type metadata accessor for Date();
  unint64_t v77 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56);
  v77(v75, 1, 1, v76);
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_placingLabelDesiredOffset] = 0;
  *(_DWORD *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_screenAngleOffset] = 0;
  *(_DWORD *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset] = 0;
  CGFloat v78 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea];
  *(_OWORD *)CGFloat v78 = 0u;
  *((_OWORD *)v78 + 1) = 0u;
  v22[OBJC_IVAR____TtC7Measure11LabelRender_refined] = 0;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_labelZOffset] = 0;
  CGFloat v79 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_viewBounds];
  *(void *)CGFloat v79 = 0;
  *((void *)v79 + 1) = 0;
  v79[16] = 1;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine] = _swiftEmptyArrayStorage;
  long long v80 = (simd_float4 *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_lastTransform];
  simd_float4 v81 = v147;
  *long long v80 = *(simd_float4 *)v148;
  v80[1] = v81;
  simd_float4 v82 = v145;
  v80[2] = v146;
  v80[3] = v82;
  long long v83 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation];
  *(void *)long long v83 = 0;
  *((void *)v83 + 1) = 0;
  *((_OWORD *)v83 + 1) = xmmword_1003FCE40;
  *((_DWORD *)v83 + 8) = 0;
  v77(&v22[OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime], 1, 1, v76);
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController] = 0;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher] = 0;
  v22[OBJC_IVAR____TtC7Measure11LabelRender_wasHidden] = 0;
  CGRect v84 = v134;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_mainView] = v134;
  CGRect v85 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
  uint64_t v86 = v133;
  *(void *)CGRect v85 = v132;
  *((void *)v85 + 1) = v86;
  CGRect v87 = v135;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_sceneView] = v135;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_state] = v149;
  CGRect v88 = (double *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_editViewBounds];
  *CGRect v88 = a9;
  v88[1] = a10;
  double v89 = &v22[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties];
  *(_OWORD *)double v89 = xmmword_1003FB9A0;
  *((_OWORD *)v89 + 1) = 0u;
  *((_OWORD *)v89 + 2) = 0u;
  *((_OWORD *)v89 + 3) = 0u;
  *((void *)v89 + 8) = 0xE000000000000000;
  id v90 = objc_allocWithZone((Class)type metadata accessor for TouchableSpriteNode());
  v147.i64[0] = (uint64_t)v84;
  v148[0] = v87;
  id v91 = [v90 init];
  uint64_t v92 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_labelNode] = v91;
  if (qword_1004C2F18 != -1) {
    swift_once();
  }
  id v93 = [objc_allocWithZone((Class)SKSpriteNode) initWithColor:qword_1004F8708 size:0.0, 0.0];
  uint64_t v94 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_labelContainer] = v93;
  [v93 setBlendMode:0];
  if (qword_1004F8510) {
    [*(id *)&v22[v94] setShader:];
  }
  [*(id *)&v22[v92] setAlpha:*(double *)&v22[v50] v131];
  NSString v95 = String._bridgeToObjectiveC()();
  id v96 = [self labelNodeWithText:v95];

  uint64_t v97 = OBJC_IVAR____TtC7Measure11LabelRender_labelText;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_labelText] = v96;
  id v98 = objc_allocWithZone((Class)NSAttributedString);
  id v99 = v96;
  NSString v100 = String._bridgeToObjectiveC()();
  id v101 = [v98 initWithString:v100];

  [v99 setAttributedText:v101];
  id v102 = objc_allocWithZone((Class)SKSpriteNode);
  NSString v103 = String._bridgeToObjectiveC()();
  id v104 = [v102 initWithImageNamed:v103];

  uint64_t v105 = OBJC_IVAR____TtC7Measure11LabelRender_labelChevron;
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_labelChevron] = v104;
  [v104 setAlpha:0.0];
  id v106 = [v148[0] overlaySKScene];
  if (v106)
  {
    long long v107 = v106;
    [v106 addChild:*(void *)&v22[v92]];
  }
  [*(id *)&v22[v92] addChild:*(void *)&v22[v94]];
  [*(id *)&v22[v92] addChild:*(void *)&v22[v97]];
  [*(id *)&v22[v94] addChild:*(void *)&v22[v105]];
  [*(id *)&v22[v97] setHorizontalAlignmentMode:0];
  [*(id *)&v22[v97] setVerticalAlignmentMode:1];
  if (qword_1004C2EF8 != -1) {
    swift_once();
  }
  id v108 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:qword_1004F86E8];
  *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics] = v108;
  [*(id *)&v22[v97] setUserInteractionEnabled:0];
  [*(id *)&v22[v97] setBlendMode:0];
  [*(id *)&v22[v97] setZPosition:1.0];
  v22[OBJC_IVAR____TtC7Measure11LabelRender_labelType] = v136;
  char v109 = v138;
  if (v138)
  {
    *(void *)uint64_t v16 = 0;
    *((void *)v16 + 1) = 0;
    *(void *)(v16 + 13) = 0;
  }
  else
  {
    unint64_t v110 = HIDWORD(v131);
    float v111 = *(float *)&v131;
    *(void *)uint64_t v16 = v131;
    *((void *)v16 + 1) = v110;
    v16[20] = 0;
    *((float *)v16 + 4) = v111 * *(float *)&v110;
  }
  v16[21] = v109 & 1;

  v151.receiver = v22;
  v151.super_class = ObjectType;
  id v112 = [super init];
  sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
  id v113 = v112;
  int v114 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v115 = swift_allocObject();
  id v116 = v148[0];
  *(void *)(v115 + 16) = v113;
  *(void *)(v115 + 24) = v116;
  aBlock[4] = sub_1000DB5D8;
  aBlock[5] = v115;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100049AB4;
  aBlock[3] = &unk_10048D168;
  uint64_t v117 = _Block_copy(aBlock);
  id v118 = v116;
  uint64_t v119 = (char *)v113;
  swift_release();
  int v120 = v139;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000DBFF4((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
  int v121 = v141;
  uint64_t v122 = v144;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v117);

  (*(void (**)(char *, uint64_t))(v143 + 8))(v121, v122);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v120, v142);
  sub_1000C51D0(v149);
  uint64_t v123 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
  [*(id *)&v119[OBJC_IVAR____TtC7Measure11LabelRender_labelNode] alpha];
  if (v124 != 0.0)
  {
    id v125 = [self fadeAlphaTo:0.0 duration:0.0];
    [*(id *)&v119[v123] runAction:v125];
  }
  [*(id *)&v119[v123] setUserInteractionEnabled:0];
  *(void *)(*(void *)&v119[v123] + OBJC_IVAR____TtC7Measure19TouchableSpriteNode_delegate + 8) = &off_10048D058;
  swift_unknownObjectWeakAssign();
  *(void *)&v119[OBJC_IVAR____TtC7Measure11LabelRender_labelZOffset] = qword_1004F80E0;
  *(double *)&qword_1004F80E0 = *(double *)&qword_1004F80E0 + 0.0003;
  sub_1000F9228();

  uint64_t v126 = swift_allocObject();
  *(void *)(v126 + 16) = v119;
  int v127 = &v119[OBJC_IVAR____TtC7Measure11LabelRender_labelSizeAdjustment];
  swift_beginAccess();
  uint64_t v128 = *(void *)v127;
  *(void *)int v127 = sub_1000DB5E0;
  *((void *)v127 + 1) = v126;
  *((void *)v127 + 2) = 1;
  *((_WORD *)v127 + 12) = 0;
  uint64_t v129 = v119;
  sub_100028914(v128);
  return v129;
}

void sub_1000C7A08(uint64_t a1, id a2)
{
  [a2 bounds];
  uint64_t v3 = a1 + OBJC_IVAR____TtC7Measure11LabelRender_viewBounds;
  *(void *)uint64_t v3 = v4;
  *(void *)(v3 + 8) = v5;
  *(unsigned char *)(v3 + 16) = 0;
  id v6 = [self sharedApplication];
  id v7 = [v6 userInterfaceLayoutDirection];

  *(unsigned char *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft) = v7 == (id)1;
  if (v7 == (id)1)
  {
    uint64_t v8 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_labelChevron);
    [v8 setZRotation:3.14159265];
  }
}

uint64_t sub_1000C7AE4()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
  uint64_t v8 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_1000DB34C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100049AB4;
  aBlock[3] = &unk_10048D0C8;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v0;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000DBFF4((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v14);
}

id sub_1000C7DC4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) - 1 <= 2)
  {
    uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
    if (v2)
    {
      id v3 = v2;
      sub_1000B80E0();
    }
    sub_1000C7E6C();
  }
  uint64_t v4 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
  if (v4)
  {
    id v5 = v4;
    sub_1000B84F4();
  }
  uint64_t v6 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode);

  return [v6 removeFromParent];
}

id sub_1000C7E6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha;
  [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) setAlpha:*(double *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha)];
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_1000DF848(*(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID), *(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8));
    swift_unknownObjectRelease();
  }
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) = 0;
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
  if (v3)
  {
    id v4 = v3;
    sub_1000B84F4();
  }
  *(void *)(v1 + v2) = 0x3FF0000000000000;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_state);

  return sub_1000C51D0(v5);
}

uint64_t sub_1000C7F3C(char a1, char a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t v11 = v10;
  __n128 v97 = a9;
  __n128 v98 = a10;
  __n128 v95 = a7;
  __n128 v96 = a8;
  __n128 v101 = a5;
  __n128 v102 = a6;
  __n128 v99 = a3;
  __n128 v100 = a4;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v93 = (char *)&v82 - v19;
  uint64_t v20 = sub_100012894((uint64_t *)&unk_1004C68F0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v82 - v24;
  simd_float4x4.position.getter();
  float32x4_t v94 = v26;
  simd_float4x4.position.getter();
  float32x4_t v28 = vsubq_f32(v94, v27);
  float32x4_t v29 = vmulq_f32(v28, v28);
  float v30 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
  if (*(unsigned char *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_labelType) != 1)
  {
    sub_1000C64AC(v30);
    *(float *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_measurement) = v30;
  }
  float32x4_t v31 = (float32x4_t)v99;
  __n128 v32 = v100;
  __n128 v33 = v101;
  __n128 v34 = v102;
  if (v30 > 0.00000011921) {
    sub_1000C86BC();
  }
  if (a1 & 1) != 0 || (a2)
  {
    Date.init()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v25, 0, 1, v14);
    uint64_t v37 = v10 + OBJC_IVAR____TtC7Measure11LabelRender_snapTimestamp;
    swift_beginAccess();
    sub_1000DB434((uint64_t)v25, v37);
    swift_endAccess();
    long long v38 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16);
    long long v39 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32);
    long long v40 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48);
    long long v41 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2);
    long long v42 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 16);
    long long v43 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 32);
    long long v44 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 48);
    v105[0] = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
    v105[1] = v38;
    v105[2] = v39;
    v105[3] = v40;
    v105[4] = v41;
    v105[5] = v42;
    v105[6] = v43;
    v105[7] = v44;
    sub_1000DB4D8((uint64_t)v105);
    sub_100016FEC((uint64_t)v105, v11 + OBJC_IVAR____TtC7Measure11LabelRender_snapFrom, &qword_1004C9DF8);
    __n128 v106 = v99;
    __n128 v107 = v100;
    __n128 v108 = v101;
    __n128 v109 = v102;
    float32x4_t v110 = (float32x4_t)v95;
    __n128 v111 = v96;
    __n128 v112 = v97;
    __n128 v113 = v98;
    sub_1000DB4D8((uint64_t)&v106);
    uint64_t result = sub_100016FEC((uint64_t)&v106, v11 + OBJC_IVAR____TtC7Measure11LabelRender_snapTo, &qword_1004C9DF8);
  }
  else
  {
    __n128 v90 = v34;
    __n128 v91 = v33;
    __n128 v92 = v32;
    float32x4_t v94 = v31;
    uint64_t v35 = v10 + OBJC_IVAR____TtC7Measure11LabelRender_snapTimestamp;
    swift_beginAccess();
    sub_1000DB36C(v35, (uint64_t)v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v23, 1, v14) == 1)
    {
      uint64_t result = sub_1000DB3D4((uint64_t)v23);
LABEL_13:
      uint64_t v55 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_center;
      __n128 v56 = v92;
      *(float32x4_t *)uint64_t v55 = v94;
      *(__n128 *)(v55 + 16) = v56;
      __n128 v57 = v90;
      *(__n128 *)(v55 + 32) = v91;
      *(__n128 *)(v55 + 48) = v57;
      uint64_t v58 = (__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
      __n128 v60 = v99;
      __n128 v59 = v100;
      *uint64_t v58 = v99;
      v58[1] = v59;
      __n128 v62 = v101;
      __n128 v61 = v102;
      v58[2] = v101;
      v58[3] = v61;
      uint64_t v63 = (__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2);
      __n128 v65 = v95;
      __n128 v64 = v96;
      *uint64_t v63 = v95;
      v63[1] = v64;
      __n128 v66 = v97;
      __n128 v49 = v98;
      v63[2] = v97;
      v63[3] = v49;
      uint64_t v45 = (__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds);
      *uint64_t v45 = v60;
      v45[1] = v59;
      v45[2] = v62;
      v45[3] = v61;
      v45[4] = v65;
      v45[5] = v64;
      v45[6] = v66;
      goto LABEL_14;
    }
    uint64_t v50 = v93;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v93, v23, v14);
    Date.init()();
    Date.timeIntervalSince(_:)();
    double v52 = v51;
    simd_float4 v53 = *(void (**)(char *, uint64_t))(v15 + 8);
    v53(v18, v14);
    double v54 = fabs(v52);
    if (v54 > 0.5)
    {
      v53(v50, v14);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v25, 1, 1, v14);
      swift_beginAccess();
      sub_1000DB434((uint64_t)v25, v35);
      swift_endAccess();
      sub_1000DB49C((uint64_t)&v106);
      sub_100016FEC((uint64_t)&v106, v11 + OBJC_IVAR____TtC7Measure11LabelRender_snapFrom, &qword_1004C9DF8);
      uint64_t result = sub_100016FEC((uint64_t)&v106, v11 + OBJC_IVAR____TtC7Measure11LabelRender_snapTo, &qword_1004C9DF8);
      goto LABEL_13;
    }
    sub_100016FEC(v11 + OBJC_IVAR____TtC7Measure11LabelRender_snapFrom, (uint64_t)v105, &qword_1004C9DF8);
    sub_100016FEC((uint64_t)v105, (uint64_t)&v106, &qword_1004C9DF8);
    if (sub_1000DB4BC((uint64_t)&v106) == 1) {
      goto LABEL_17;
    }
    __n128 v88 = v107;
    __n128 v89 = v106;
    __n128 v86 = v109;
    __n128 v87 = v108;
    float32x4_t v94 = v110;
    __n128 v91 = v112;
    __n128 v92 = v111;
    __n128 v90 = v113;
    sub_100016FEC(v11 + OBJC_IVAR____TtC7Measure11LabelRender_snapTo, (uint64_t)v103, &qword_1004C9DF8);
    sub_100016FEC((uint64_t)v103, (uint64_t)v104, &qword_1004C9DF8);
    if (sub_1000DB4BC((uint64_t)v104) == 1)
    {
LABEL_17:
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v53)(v50, v14);
    }
    else
    {
      long long v84 = v104[1];
      long long v85 = v104[0];
      long long v82 = v104[3];
      long long v83 = v104[2];
      spring(tension:friction:velocity:elapsed:)(400.0, 40.0, 0.0, v54);
      slerp(transform1:transform2:percent:)();
      __n128 v88 = v68;
      __n128 v89 = v67;
      __n128 v86 = v70;
      __n128 v87 = v69;
      slerp(transform1:transform2:percent:)();
      float32x4_t v94 = v71;
      __n128 v91 = v73;
      __n128 v92 = v72;
      __n128 v90 = v74;
      sub_1000C86BC();
      long long v84 = v76;
      long long v85 = v75;
      long long v82 = v78;
      long long v83 = v77;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v53)(v50, v14);
      CGFloat v79 = (_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_center);
      *CGFloat v79 = v85;
      v79[1] = v84;
      v79[2] = v83;
      v79[3] = v82;
      long long v80 = (__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
      *long long v80 = v89;
      v80[1] = v88;
      v80[2] = v87;
      v80[3] = v86;
      uint64_t v81 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2;
      *(float32x4_t *)uint64_t v81 = v94;
      *(__n128 *)(v81 + 16) = v92;
      *(__n128 *)(v81 + 32) = v91;
      *(__n128 *)(v81 + 48) = v90;
    }
  }
  uint64_t v45 = (__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds);
  __n128 v46 = v100;
  *uint64_t v45 = v99;
  v45[1] = v46;
  __n128 v47 = v102;
  v45[2] = v101;
  v45[3] = v47;
  __n128 v48 = v96;
  v45[4] = v95;
  v45[5] = v48;
  v45[6] = v97;
  __n128 v49 = v98;
LABEL_14:
  v45[7] = v49;
  return result;
}

uint64_t sub_1000C86BC()
{
  void (*v11)(void *__return_ptr, uint64_t);
  uint64_t v12;
  int8x16_t v14;
  float32x4_t v15;
  void __src[64];
  _OWORD __dst[32];

  simd_float4x4.position.getter();
  uint64_t v15 = v1;
  simd_float4x4.position.getter();
  float32x4_t v3 = vsubq_f32(v2, v15);
  int32x4_t v4 = (int32x4_t)vmulq_f32(v3, v3);
  v4.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v4, 2), vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1))).u32[0];
  float32x2_t v5 = vrsqrte_f32((float32x2_t)v4.u32[0]);
  float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
  uint64_t v14 = (int8x16_t)vmulq_n_f32(v3, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]);
  simd_float4x4.up.getter();
  int8x16_t v8 = v7;
  v8.i32[0] = vextq_s8(v8, v8, 8uLL).u32[0];
  v9.i32[1] = v14.i32[1];
  v9.i32[0] = vextq_s8(v14, v14, 8uLL).u32[0];
  float32x2_t v10 = vmul_f32(*(float32x2_t *)v8.i8, v9);
  if ((float)(1.0 - fabsf(v10.f32[0] + (float)(vmuls_n_f32(*(float *)v7.i32, *(float *)v14.i32) + v10.f32[1]))) < 0.00000011921)
  {
    uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v0
                                                                             + OBJC_IVAR____TtC7Measure11LabelRender__render)
                                                               + 144);
    uint64_t v12 = swift_retain();
    v11(__src, v12);
    swift_release();
    memcpy(__dst, __src, 0x1F8uLL);
    sub_10003FFD4((uint64_t)__dst);
    simd_float4x4.forward.getter();
  }
  return createTransform(forward:normal:position:)();
}

id sub_1000C88A0(uint64_t a1)
{
  void (*v11)(long long *__return_ptr, uint64_t);
  uint64_t v12;
  uint64_t v13;
  double v14;
  id v15;
  id result;
  void (*v17)(long long *__return_ptr, uint64_t);
  uint64_t v18;
  float32x2_t v19;
  float v20;
  float32x4_t v21;
  __n128 v22;
  long long v23;
  long long v24;
  float v25;
  float v26;
  unsigned int v27;
  unsigned int v28;
  __n128 *v29;
  int8x16_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  __n128 v38;
  unint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  double v45;
  double v46;
  double v47;
  void *v48;
  _UNKNOWN **v49;
  float64x2_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t Strong;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t (*)(), uint64_t);
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t (*)(), uint64_t);
  __int8 *v70;
  id v71;
  unsigned int v72;
  char v73;
  char v74;
  __n128 v75;
  __n128 v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  __n128 v80;
  int8x16_t v81;
  int8x16_t v82;
  int v83;
  os_unfair_lock_s *v84;
  char v85;
  BOOL v86;
  _UNKNOWN **v87;
  char **v88;
  double v89;
  float v90;
  float32x2_t v91;
  BOOL v92;
  float v93;
  float v94;
  float v95;
  int v96;
  float v97;
  double v98;
  double v99;
  double v100;
  char *v101;
  void *v102;
  void *v103;
  id v104;
  id v105;
  double v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  long long v120;
  long long v121;
  void *v122;
  uint64_t v123;
  long long v124;
  long long v125;
  void *v126;
  unsigned char *v127;
  __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t (*)(), uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t (*)(), uint64_t);
  double v150;
  char *v151;
  double v152;
  id v153;
  char *v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  __n128 *v158;
  __n128 v159;
  int8x16_t v160;
  int8x16_t v161;
  float32x4_t v162;
  int8x16_t *v163;
  __n128 v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  __n128 v168;
  int8x16_t v169;
  int8x16_t v170;
  float v171;
  float v172;
  __n128 v173;
  __n128 v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  int8x16_t v184;
  int8x16_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  int8x16_t v190;
  int8x16_t v191;
  __n128 v192;
  __n128 v193;
  int8x16_t v194;
  unsigned int v195;
  float v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  float32x4_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  __n128 v208;
  int8x16_t v209;
  long long v210;
  long long v211;
  long long v212;
  long long v213;
  long long v214;
  long long v215;
  uint64_t v216;
  __int8 *v217;
  float32x4_t v218;
  __n128 v219;
  __n128 v220;
  int8x16_t v221;
  __n128 v222;
  __n128 v223;
  void aBlock[6];
  unint64_t v225;
  float v226;
  long long v227;
  long long v228;
  long long v229;
  long long v230;
  uint64_t v231;
  CGPoint v232;

  float32x4_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int8x16_t v7 = &v197.i8[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v217 = &v197.i8[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v220 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_center];
  char v223 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_center + 16];
  char v222 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_center + 32];
  int v221 = *(int8x16_t *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_center + 48];
  uint64_t v11 = *(void (**)(long long *__return_ptr, uint64_t))(**(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender__appState]
                                                               + 144);
  uint64_t v12 = swift_retain();
  v11(&v227, v12);
  swift_release();
  if (BYTE3(v227) == 1)
  {
    uint64_t v13 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
    [*(id *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_labelNode] alpha];
    if (v14 != 0.0)
    {
      uint64_t v15 = [self fadeAlphaTo:0.0 duration:0.0];
      [*(id *)((char *)v2 + v13) runAction:v15];
    }
    uint64_t result = [*(id *)((char *)v2 + v13) setUserInteractionEnabled:0];
    goto LABEL_98;
  }
  char v216 = v9;
  int v203 = v8;
  char v204 = v5;
  sub_1000CA454();
  uint64_t v17 = *(void (**)(long long *__return_ptr, uint64_t))(**(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender__input]
                                                               + 144);
  uint64_t v18 = swift_retain();
  v17(&v227, v18);
  swift_release();
  uint64_t v19 = *(float32x2_t *)((char *)&v228 + 8);
  uint64_t v20 = *(float *)&v229;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for MeasureCamera();
  simd_float4x4.position.getter();
  int v209 = *(int8x16_t *)(a1 + 32);
  uint64_t v208 = *(__n128 *)(a1 + 48);
  uint64_t v207 = *(int8x16_t *)(a1 + 64);
  long long v206 = *(int8x16_t *)(a1 + 80);
  uint64_t v22 = *(__n128 *)(a1 + 160);
  uint64_t v21 = *(float32x4_t *)(a1 + 176);
  uint64_t v23 = *(_OWORD *)(a1 + 192);
  uint64_t v24 = *(_OWORD *)(a1 + 208);
  uint64_t v201 = *(float32x4_t *)(a1 + 224);
  uint64_t v200 = *(int8x16_t *)(a1 + 240);
  uint64_t v199 = *(int8x16_t *)(a1 + 256);
  char v198 = *(int8x16_t *)(a1 + 272);
  uint64_t v213 = *(_OWORD *)(a1 + 320);
  long long v212 = *(_OWORD *)(a1 + 336);
  char v211 = *(_OWORD *)(a1 + 352);
  char v210 = *(_OWORD *)(a1 + 368);
  uint64_t v219 = v22;
  long long v218 = v21;
  int v215 = v23;
  uint64_t v214 = v24;
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
  SCNVector3.init(_:)();
  float32x4_t v26 = v25;
  uint64_t v225 = __PAIR64__(v28, v27);
  uint64_t v226 = v25;
  float32x4_t v29 = (__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end2];
  simd_float4x4.position.getter();
  char v205 = v30;
  static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)();
  if (v31 >= 0.0) {
    simd_float4x4.position.getter();
  }
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
  SCNVector3.init(_:)();
  - infix(_:_:)();
  __n128 v34 = atan2f(-v32, -v33);
  uint64_t v35 = OBJC_IVAR____TtC7Measure11LabelRender_state;
  uint64_t v36 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_state];
  if (v36 <= 7 && ((1 << v36) & 0x98) != 0
    || (v1[OBJC_IVAR____TtC7Measure11LabelRender_capturing] & 1) != 0
    || [self jasperAvailable]
    && v1[OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine] == 1)
  {
    SIMD3<>.init(_:)();
    sub_1000CB240(v37);
    SCNVector3.init(_:)();
    += infix(_:_:)();
  }
  long long v39 = *(void *)&v1[v35];
  if ((v39 > 7 || ((1 << v39) & 0x98) == 0)
    && (v1[OBJC_IVAR____TtC7Measure11LabelRender_capturing] & 1) == 0
    && [self jasperAvailable])
  {
    __n128 v70 = v7;
    float32x4_t v71 = [self standardUserDefaults];
    __n128 v72 = [v71 isLabelOcclusionEnabled];

    if (v72)
    {
      int8x16_t v7 = v70;
      if (*((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine) == 1)
      {
        if (vaddv_f32(vmul_f32(*(float32x2_t *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_placingLabelDesiredOffset), *(float32x2_t *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_placingLabelDesiredOffset))) >= 0.00000011921)
        {
          v38.n128_u64[0] = v225;
          char v223 = v38;
          static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)();
          char v205 = v161;
          static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)();
          uint64_t v201 = v162;
          char v163 = (int8x16_t *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
          char v164 = *(__n128 *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16);
          char v165 = *(int8x16_t *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32);
          char v166 = *(int8x16_t *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48);
          char v223 = *(__n128 *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
          char v222 = v164;
          int v221 = v165;
          uint64_t v220 = (__n128)v166;
          simd_float4x4.position.getter();
          uint64_t v200 = v167;
          int v168 = v29[1];
          char v169 = (int8x16_t)v29[2];
          char v170 = (int8x16_t)v29[3];
          int v209 = *(int8x16_t *)v29;
          uint64_t v208 = v168;
          uint64_t v207 = v169;
          long long v206 = v170;
          simd_float4x4.position.getter();
          lineIntersection(line1P1:line1P2:line2P1:line2P2:)();
          long long v83 = 0;
          if (v171 > 0.0 && v171 < 1.0 && v172 > 0.0 && v172 < 1.0)
          {
            sub_1000C86BC();
            char v223 = v173;
            char v222 = v174;
            int v221 = v175;
            uint64_t v220 = (__n128)v176;
            simd_float4x4.position.getter();
            int v209 = v177;
            uint64_t v178 = v163[1];
            uint64_t v208 = *(__n128 *)v163;
            uint64_t v207 = v178;
            uint64_t v179 = v163[3];
            long long v206 = v163[2];
            char v205 = v179;
            simd_float4x4.position.getter();
            uint64_t v181 = vsubq_f32((float32x4_t)v209, v180);
            int v182 = vmulq_f32(v181, v181);
            char v183 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v182, 2), vaddq_f32(v182, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v182.f32, 1)));
            v183.f32[0] = sqrtf(v183.f32[0]);
            uint64_t v201 = v183;
            char v184 = (int8x16_t)v29[1];
            uint64_t v200 = *(int8x16_t *)v29;
            uint64_t v199 = v184;
            uint64_t v185 = (int8x16_t)v29[3];
            char v198 = (int8x16_t)v29[2];
            char v197 = v185;
            simd_float4x4.position.getter();
            uint64_t v187 = vsubq_f32((float32x4_t)v209, v186);
            uint64_t v188 = vmulq_f32(v187, v187);
            int v189 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v188, 2), vaddq_f32(v188, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v188.f32, 1)));
            v189.f32[0] = sqrtf(v189.f32[0]);
            char v190 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v189, v201), 0);
            int v209 = vbslq_s8(v190, (int8x16_t)v208, v200);
            uint64_t v208 = (__n128)vbslq_s8(v190, v207, v199);
            uint64_t v207 = vbslq_s8(v190, v206, v198);
            long long v206 = vbslq_s8(v190, v205, v197);
            long long v83 = 1;
          }
        }
        else
        {
          sub_1000CB36C();
          if ((v73 & 1) != 0
            || (SIMD2<>.init(_:)(),
                SIMD2<>.init(_:)(),
                clipLineToRect(rectOrigin:rectSize:lineP1:lineP2:)(),
                (v74 & 1) != 0))
          {
            long long v83 = 0;
            char v223 = *(__n128 *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
            char v222 = *(__n128 *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16);
            int v221 = *(int8x16_t *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32);
            uint64_t v220 = *(__n128 *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48);
            int v209 = *(int8x16_t *)v29;
            uint64_t v208 = v29[1];
            uint64_t v207 = (int8x16_t)v29[2];
            long long v206 = (int8x16_t)v29[3];
          }
          else
          {
            char v223 = *(__n128 *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
            char v222 = *(__n128 *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16);
            int v221 = *(int8x16_t *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32);
            uint64_t v220 = *(__n128 *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48);
            sub_1000CB6C0();
            simd_float4x4.translated(to:)();
            char v223 = v75;
            char v222 = v76;
            int v221 = v77;
            uint64_t v220 = (__n128)v78;
            int v209 = *(int8x16_t *)v29;
            uint64_t v208 = v29[1];
            uint64_t v207 = (int8x16_t)v29[2];
            long long v206 = (int8x16_t)v29[3];
            sub_1000CB6C0();
            simd_float4x4.translated(to:)();
            int v209 = v79;
            uint64_t v208 = v80;
            uint64_t v207 = v81;
            long long v206 = v82;
            long long v83 = 0;
          }
        }
        ariadne_trace(_:_:_:_:_:)();
        sub_1000CB7F4((_OWORD *)a1, v83, v223, v222, v221, (int8x16_t)v220, (__n128)v209, v208, (__n128)v207, (__n128)v206);
        uint64_t v220 = (__n128)v191;
        char v223 = v192;
        char v222 = v193;
        int v221 = v194;
        ariadne_trace(_:_:_:_:_:)();
        simd_float4x4.position.getter();
        static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
        SCNVector3.init(_:)();
        uint64_t v225 = __PAIR64__(v195, v38.n128_u32[0]);
        uint64_t v226 = v196;
      }
    }
    else
    {
      int8x16_t v7 = v70;
    }
  }
  v38.n128_u64[0] = v225;
  uint64_t v219 = v38;
  *(double *)v40.i64 = sub_1000CB6C0();
  long long v218 = v40;
  simd_float4x4.position.getter();
  long long v42 = vsubq_f32(v41, v218);
  long long v43 = vmulq_f32(v42, v42);
  long long v44 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]);
  uint64_t v45 = (float)((float)(1.0 / (float)((float)(v44 * 1.2) + 0.7)) + 0.5);
  __n128 v46 = 1.0;
  if ((*(void *)&v45 & 0xFFFFFFFFFFFFFLL) == 0) {
    __n128 v46 = (float)((float)(1.0 / (float)((float)(v44 * 1.2) + 0.7)) + 0.5);
  }
  if ((~*(void *)&v45 & 0x7FF0000000000000) != 0) {
    __n128 v47 = (float)((float)(1.0 / (float)((float)(v44 * 1.2) + 0.7)) + 0.5);
  }
  else {
    __n128 v47 = v46;
  }
  v218.i64[0] = OBJC_IVAR____TtC7Measure11LabelRender_inBounds;
  *((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_inBounds) = 0;
  __n128 v48 = self;
  __n128 v49 = &off_1004C9000;
  if ([v48 jasperAvailable])
  {
    uint64_t v50 = (float64x2_t *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_screenPoint);
    *uint64_t v50 = vcvtq_f64_f32((float32x2_t)v219.n128_u64[0]);
    LOBYTE(v50[1].f64[0]) = 0;
    double v51 = v216;
    if (v26 < 1.0)
    {
      if (*((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState)
        && *(void *)((char *)v2 + v35) != 3
        && swift_unknownObjectWeakLoadStrong())
      {
        double v52 = *(void *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8);
        *(void *)&uint64_t v214 = *(void *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          *(void *)&long long v212 = v52;
          double v54 = **(void **)(Strong + 104);
          uint64_t v202 = v4;
          uint64_t v55 = *(uint64_t (**)(uint64_t))(v54 + 200);
          *(void *)&uint64_t v213 = Strong;
          __n128 v56 = swift_retain();
          __n128 v57 = v55(v56);
          swift_release();
          uint64_t v58 = swift_allocObject();
          *(void *)&int v215 = v7;
          __n128 v59 = v58;
          *(void *)(v58 + 16) = v214;
          *(void *)(v58 + 24) = v212;
          *(_OWORD *)(v58 + 32) = 0u;
          *(_OWORD *)(v58 + 48) = 0u;
          __n128 v60 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v57 + 280);
          swift_bridgeObjectRetain();
          v60(sub_1000DB6A4, v59);
          uint64_t v4 = v202;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          double v51 = v216;
          swift_release();
          int8x16_t v7 = (__int8 *)v215;
          __n128 v49 = &off_1004C9000;
          swift_release();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      goto LABEL_44;
    }
  }
  else
  {
    __n128 v61 = [*(id *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) isHidden];
    double v51 = v216;
    if (v61)
    {
      if (v26 < 1.0)
      {
        __n128 v62 = OBJC_IVAR____TtC7Measure11LabelRender_selectionState;
        if (*((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState))
        {
          uint64_t result = (id)swift_unknownObjectWeakLoadStrong();
          if (result)
          {
            uint64_t v202 = v4;
            uint64_t v63 = *(void *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8);
            *(void *)&uint64_t v214 = *(void *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
            __n128 v64 = swift_unknownObjectWeakLoadStrong();
            if (v64)
            {
              *(void *)&uint64_t v213 = v62;
              __n128 v65 = *(uint64_t (**)(uint64_t))(**(void **)(v64 + 104) + 200);
              *(void *)&int v215 = v7;
              *(void *)&long long v212 = v64;
              __n128 v66 = swift_retain();
              __n128 v67 = v65(v66);
              swift_release();
              __n128 v68 = swift_allocObject();
              *(void *)(v68 + 16) = v214;
              *(void *)(v68 + 24) = v63;
              *(_OWORD *)(v68 + 32) = 0u;
              *(_OWORD *)(v68 + 48) = 0u;
              __n128 v69 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v67 + 280);
              swift_bridgeObjectRetain();
              v69(sub_1000DB6A4, v68);
              __n128 v62 = v213;
              __n128 v49 = &off_1004C9000;
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              double v51 = v216;
              swift_release();
              int8x16_t v7 = (__int8 *)v215;
              uint64_t result = (id)swift_release();
            }
            else
            {
              uint64_t result = (id)swift_unknownObjectRelease();
            }
            uint64_t v4 = v202;
          }
          if (*((unsigned char *)v2 + v62) == 2) {
            goto LABEL_98;
          }
        }
        goto LABEL_44;
      }
    }
    else if (v26 < 1.0)
    {
      goto LABEL_44;
    }
  }
  if ((*((unsigned __int8 *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) | 2) != 3)
  {
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v143 = *(void *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
      uint64_t v142 = *(void *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8);
      uint64_t v144 = swift_unknownObjectWeakLoadStrong();
      if (v144)
      {
        simd_float4 v145 = *(uint64_t (**)(uint64_t))(**(void **)(v144 + 104) + 200);
        simd_float4 v146 = swift_retain();
        simd_float4 v147 = v145(v146);
        swift_release();
        uint64_t v148 = swift_allocObject();
        *(void *)(v148 + 16) = v143;
        *(void *)(v148 + 24) = v142;
        *(_OWORD *)(v148 + 32) = 0u;
        *(_OWORD *)(v148 + 48) = 0u;
        uint64_t v149 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v147 + 280);
        swift_bridgeObjectRetain();
        v149(sub_1000DB6A4, v148);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        __n128 v49 = &off_1004C9000;
        swift_release();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    [*(id *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) setHidden:1];
    goto LABEL_84;
  }
LABEL_44:
  if (![v48 jasperAvailable]
    || (long long v84 = (os_unfair_lock_s *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelLock),
        swift_beginAccess(),
        os_unfair_lock_lock(v84),
        long long v85 = *((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture),
        os_unfair_lock_unlock(v84),
        swift_endAccess(),
        (v85 & 1) == 0))
  {
    __n128 v86 = sub_1000CC794();
    if (v86 || !*((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState)) {
      [*(id *)((char *)v49[409] + (void)v2) setHidden:v86];
    }
  }
  sub_1000C6118();
  __n128 v87 = &off_1004C9000;
  __n128 v88 = &selRef_replaySensorDidFinishReplayingData;
  if ((*((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_capturing) & 1) == 0)
  {
    [*(id *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) size];
    __n128 v90 = v47 * v89 * 0.5;
    if (v20 > v90) {
      __n128 v90 = v20;
    }
    __n128 v91 = vsub_f32((float32x2_t)v219.n128_u64[0], v19);
    __n128 v92 = vaddv_f32(vmul_f32(v91, v91)) < (float)(v90 * v90) && *(void *)((char *)v2 + v35) != 1;
    *((unsigned char *)v2 + v218.i64[0]) = v92;
  }
  id v93 = v219.n128_f32[1];
  float32x4_t v94 = fabsf(sub_1000CC810(-v34));
  __n128 v95 = *(float *)Float.piDiv2.unsafeMutableAddressor();
  uint64_t v202 = v4;
  if ((float)(v95 + (float)(v95 * 0.1)) < v94)
  {
    __n128 v96 = 1078530010;
LABEL_59:
    *(_DWORD *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_screenAngleOffset) = v96;
    goto LABEL_60;
  }
  __n128 v97 = v95 - (float)(v95 * 0.1);
  __n128 v96 = 0;
  if (v94 < v97) {
    goto LABEL_59;
  }
LABEL_60:
  __n128 v98 = v219.n128_f32[0];
  __n128 v99 = v93;
  __n128 v100 = (float)(*(float *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_screenAngleOffset) - v34);
  __n128 v101 = (char *)v49[409];
  [*(id *)&v101[(void)v2] setZRotation:v100];
  [*(id *)&v101[(void)v2] setScale:v47];
  __n128 v102 = *(void **)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelText);
  NSString v103 = self;
  id v104 = v102;
  uint64_t v105 = [v103 mainScreen];
  [v105 scale];
  __n128 v107 = v106;

  [v104 setScale:1.0 / v107];
  if ((*((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_viewBounds + 16) & 1) == 0) {
    [v101[v2] setPosition:v98, *(double *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_viewBounds + 8) - v99];
  }
  sub_1000CC9A0(v44);
  __n128 v108 = 0;
  if (*((unsigned char *)v2 + v218.i64[0]))
  {
    __n128 v109 = 0;
  }
  else
  {
    [*(id *)&v101[(void)v2] alpha];
    __n128 v109 = 0;
    if (v110 >= 0.5)
    {
      [*(id *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) size];
      static CGSize.* infix(_:_:)();
      __n128 v108 = v111;
      __n128 v109 = v112;
    }
  }
  __n128 v113 = OBJC_IVAR____TtC7Measure11LabelRender_selectionState;
  if (!*((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) && swift_unknownObjectWeakLoadStrong())
  {
    *(void *)&int v215 = v7;
    int v134 = *(void *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
    int v135 = *(void *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8);
    int v136 = swift_unknownObjectWeakLoadStrong();
    if (v136)
    {
      uint64_t v137 = *(uint64_t (**)(uint64_t))(**(void **)(v136 + 104) + 200);
      int v138 = swift_retain();
      uint64_t v139 = v137(v138);
      swift_release();
      uint64_t v140 = swift_allocObject();
      *(void *)(v140 + 16) = v134;
      *(void *)(v140 + 24) = v135;
      *(void *)(v140 + 32) = v108;
      *(void *)(v140 + 40) = v109;
      *(double *)(v140 + 48) = v98;
      *(double *)(v140 + 56) = v99;
      int v141 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v139 + 280);
      swift_bridgeObjectRetain();
      v141(sub_1000DB6A4, v140);
      __n128 v88 = &selRef_replaySensorDidFinishReplayingData;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      double v51 = v216;
      swift_release();
      swift_release();
      int8x16_t v7 = (__int8 *)v215;
      __n128 v87 = &off_1004C9000;
    }
    else
    {
      swift_unknownObjectRelease();
      int8x16_t v7 = (__int8 *)v215;
    }
  }
  int v114 = (double *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties);
  *int v114 = -v100;
  v114[1] = v47;
  v114[2] = v98;
  v114[3] = v99;
  uint64_t v115 = (char *)v87[411];
  [*(id *)&v115[(void)v2] v88[89]];
  *((void *)v114 + 5) = v116;
  *((void *)v114 + 6) = v117;
  [*(id *)&v115[(void)v2] v88[89]];
  v114[4] = v118 * 0.5;
  uint64_t v119 = *(void *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 8);
  v114[7] = *(double *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
  *((void *)v114 + 8) = v119;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((*((unsigned __int8 *)v2 + v113) | 2) == 3)
  {
    int v120 = *((_OWORD *)v114 + 3);
    char v229 = *((_OWORD *)v114 + 2);
    long long v230 = v120;
    uint64_t v231 = *((void *)v114 + 8);
    int v121 = *((_OWORD *)v114 + 1);
    int v227 = *(_OWORD *)v114;
    char v228 = v121;
    sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
    sub_1000B8E1C((uint64_t)&v227);
    uint64_t v122 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v123 = swift_allocObject();
    double v124 = v227;
    *(_OWORD *)(v123 + 40) = v228;
    id v125 = v230;
    *(_OWORD *)(v123 + 56) = v229;
    *(_OWORD *)(v123 + 72) = v125;
    *(void *)(v123 + 16) = v2;
    *(void *)(v123 + 88) = v231;
    *(_OWORD *)(v123 + 24) = v124;
    aBlock[4] = sub_1000DB660;
    aBlock[5] = v123;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100049AB4;
    aBlock[3] = &unk_10048D208;
    uint64_t v126 = _Block_copy(aBlock);
    int v127 = v2;
    swift_release();
    uint64_t v128 = v217;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1000DBFF4((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
    uint64_t v129 = v202;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v126);

    (*(void (**)(__int8 *, uint64_t))(v204 + 8))(v7, v129);
    (*(void (**)(__int8 *, uint64_t))(v51 + 8))(v128, v203);
  }
  __n128 v49 = &off_1004C9000;
  if ((*((unsigned char *)v2 + v218.i64[0]) & 1) == 0)
  {
    v232.x = *(float *)&v225;
    v232.y = *((float *)&v225 + 1);
    if (CGRectContainsPoint(*(CGRect *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea), v232)
      && *((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_refined) == 1
      && swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v130 = swift_unknownObjectWeakLoadStrong();
      if (v130)
      {
        unint64_t v131 = *(uint64_t (**)(uint64_t))(**(void **)(v130 + 104) + 200);
        uint64_t v132 = swift_retain();
        __n128 v49 = &off_1004C9000;
        uint64_t v133 = v131(v132);
        swift_release();
        (*(void (**)(double (*)(uint64_t), void))(*(void *)v133 + 280))(sub_1000A7B48, 0);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
LABEL_84:
  if (!*((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState)
    && (*((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_capturing) & 1) == 0)
  {
    uint64_t v150 = 0.0;
    if ((*((unsigned char *)v2 + v218.i64[0]) & 1) == 0) {
      uint64_t v150 = *(double *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha);
    }
    objc_super v151 = (char *)v49[409];
    [*(id *)&v151[(void)v2] alpha];
    if (vabdd_f64(v150, v152) > 0.01)
    {
      long long v153 = [self fadeAlphaTo:v150 duration:0.1];
      [*(id *)&v151[(void)v2] runAction:v153];
    }
  }
  double v154 = (char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelSizeAdjustment;
  uint64_t result = (id)swift_beginAccess();
  if (*(void *)v154)
  {
    if (v154[24] == 1)
    {
      (*(void (**)(id))v154)(result);
      *((_WORD *)v154 + 12) = 256;
    }
    else if ((v154[25] & 1) == 0)
    {
      BOOL v155 = *((void *)v154 + 2);
      char v156 = v155 != 0;
      char v157 = v155 - 1;
      if (!v156)
      {
        __break(1u);
        return result;
      }
      *((void *)v154 + 2) = v157;
      v154[24] = v157 == 0;
    }
  }
  uint64_t result = (id)swift_endAccess();
LABEL_98:
  *((unsigned char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_refined) = 0;
  char v158 = (__n128 *)((char *)v2 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform);
  char v159 = v223;
  *char v158 = v220;
  v158[1] = v159;
  char v160 = v221;
  v158[2] = v222;
  v158[3] = (__n128)v160;
  return result;
}

void sub_1000CA454()
{
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t v14;
  double v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t);
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  CGFloat v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double Width;
  double v42;
  double v43;
  double v44;
  double v45;
  CGFloat v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  double v79;
  CGFloat v80;
  CGFloat v81;
  uint64_t v82;
  char v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;

  uint64_t v1 = v0;
  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  if ((static UIDevice.isIPad()() & 1) == 0)
  {
    uint64_t v16 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v0
                                                                              + OBJC_IVAR____TtC7Measure11LabelRender__orientationState)
                                                                + 144);
    uint64_t v17 = swift_retain();
    v16(&v82, v17);
    swift_release();
    if ((unint64_t)(v82 - 3) >= 2)
    {
      if (v82 != 1)
      {
        long long v38 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        v102.origin.x = 0.0;
        v102.origin.y = 0.0;
        v102.size.width = 0.0;
        v102.size.height = 0.0;
        if (!CGRectEqualToRect(*(CGRect *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea), v102)) {
          return;
        }
        if (qword_1004C2E88 != -1) {
          swift_once();
        }
        long long v39 = *(double *)&qword_1004F8668;
        long long v40 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
        [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) frame];
        double Width = CGRectGetWidth(v94);
        long long v42 = *(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_editViewBounds + 8);
        if (qword_1004C2F50 != -1) {
          swift_once();
        }
        long long v43 = *(double *)&qword_1004F8740;
        [*(id *)(v1 + v40) frame];
        long long v44 = CGRectGetWidth(v95);
        if (qword_1004C3238 != -1) {
          swift_once();
        }
        if ((*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) == 0)
        {
          uint64_t v45 = v39 + 47.0 + Width * 0.5;
          __n128 v46 = CGRectGetWidth(*(CGRect *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48));
          *(void *)long long v38 = 0x403E000000000000;
          *(double *)(v38 + 8) = v45;
          *(CGFloat *)(v38 + 16) = v46 + -60.0;
          *(double *)(v38 + 24) = v42 - v45 - v43 + v44 * -0.5;
          return;
        }
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        JUMPOUT(0x1000CB230);
      }
      if (qword_1004C2E88 != -1) {
        swift_once();
      }
      uint64_t v18 = *(double *)&qword_1004F8668;
      __n128 v34 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
      [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) frame];
      uint64_t v20 = CGRectGetWidth(v92);
      uint64_t v21 = *(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_editViewBounds + 8);
      if (qword_1004C2F50 != -1) {
        swift_once();
      }
      uint64_t v22 = *(double *)&qword_1004F8740;
      [*(id *)(v1 + v34) frame];
      uint64_t v23 = CGRectGetWidth(v93);
      if (qword_1004C3238 != -1) {
        swift_once();
      }
      uint64_t v24 = qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
      if ((*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) == 0)
      {
        uint64_t v25 = 47.0;
        goto LABEL_32;
      }
    }
    else
    {
      if (qword_1004C2E88 != -1) {
        swift_once();
      }
      uint64_t v18 = *(double *)&qword_1004F8668;
      uint64_t v19 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
      [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) frame];
      uint64_t v20 = CGRectGetWidth(v86);
      uint64_t v21 = *(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_editViewBounds + 8);
      if (qword_1004C2F50 != -1) {
        swift_once();
      }
      uint64_t v22 = *(double *)&qword_1004F8740;
      [*(id *)(v1 + v19) frame];
      uint64_t v23 = CGRectGetWidth(v87);
      if (qword_1004C3238 != -1) {
        swift_once();
      }
      uint64_t v24 = qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
      if ((*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) == 0)
      {
        uint64_t v25 = 80.0;
LABEL_32:
        uint64_t v35 = v18 + v25 + v20 * 0.5;
        uint64_t v36 = CGRectGetWidth(*(CGRect *)(v24 + 48));
        uint64_t v37 = v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        *(void *)uint64_t v37 = 0x403E000000000000;
        *(double *)(v37 + 8) = v35;
        *(CGFloat *)(v37 + 16) = v36 + -60.0;
        *(double *)(v37 + 24) = v21 - v35 - v22 + v23 * -0.5;
        return;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_83;
  }
  float32x4_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v0
                                                                           + OBJC_IVAR____TtC7Measure11LabelRender__pointMove)
                                                             + 144);
  float32x4_t v3 = swift_retain();
  v2(&v82, v3);
  swift_release();
  if (v83)
  {
    uint64_t v4 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v0
                                                                             + OBJC_IVAR____TtC7Measure11LabelRender__orientationState)
                                                               + 144);
    uint64_t v5 = swift_retain();
    v4(&v82, v5);
    swift_release();
    switch(v82)
    {
      case 1:
        if (qword_1004C2E88 != -1) {
          swift_once();
        }
        uint64_t v6 = *(double *)&qword_1004F8668;
        int8x16_t v7 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
        [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) frame];
        uint64_t v8 = CGRectGetWidth(v84);
        if (qword_1004C3238 != -1) {
          swift_once();
        }
        if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
          goto LABEL_84;
        }
        uint64_t v9 = CGRectGetWidth(*(CGRect *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48));
        if (qword_1004C2F50 != -1) {
          swift_once();
        }
        if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
          goto LABEL_85;
        }
        uint64_t v10 = v6 + 47.0 + v8 * 0.5;
        uint64_t v11 = v9 + -60.0 - *(double *)&qword_1004F8740;
        uint64_t v12 = CGRectGetHeight(*(CGRect *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48))
            + -47.0
            - (*(double *)&qword_1004F8668
             + *(double *)&qword_1004F8668);
        [*(id *)(v0 + v7) frame];
        uint64_t v13 = CGRectGetWidth(v85);
        uint64_t v14 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        *(void *)uint64_t v14 = 0x403E000000000000;
        uint64_t v15 = v12 - v13;
        *(double *)(v14 + 8) = v10;
        goto LABEL_69;
      case 2:
        if (qword_1004C2F50 != -1) {
          swift_once();
        }
        __n128 v47 = *(double *)&qword_1004F8740;
        if (qword_1004C3238 != -1) {
          swift_once();
        }
        __n128 v48 = qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
        if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
          goto LABEL_86;
        }
        __n128 v49 = CGRectGetWidth(*(CGRect *)(v48 + 48));
        if (*(unsigned char *)(v48 + 80)) {
          goto LABEL_87;
        }
        uint64_t v50 = v47 + 30.0;
        uint64_t v11 = v49 + -60.0 - *(double *)&qword_1004F8740;
        double v51 = CGRectGetHeight(*(CGRect *)(v48 + 48)) + -47.0;
        if (qword_1004C2E88 != -1) {
          swift_once();
        }
        double v52 = v51 - (*(double *)&qword_1004F8668 + *(double *)&qword_1004F8668);
        [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) frame];
        uint64_t v15 = v52 - CGRectGetWidth(v96);
        uint64_t v14 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        *(double *)uint64_t v14 = v50;
        *(void *)(v14 + 8) = 0x403E000000000000;
        goto LABEL_69;
      case 3:
        if (qword_1004C3238 != -1) {
          swift_once();
        }
        if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
          goto LABEL_88;
        }
        simd_float4 v53 = CGRectGetWidth(*(CGRect *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48));
        if (qword_1004C2E88 != -1) {
          swift_once();
        }
        double v54 = *(double *)&qword_1004F8668;
        [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) frame];
        uint64_t v55 = CGRectGetWidth(v97);
        if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
          goto LABEL_89;
        }
        __n128 v56 = v53 + -47.0 - (v54 + v54) - v55;
        __n128 v57 = CGRectGetHeight(*(CGRect *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48))
            + -60.0;
        if (qword_1004C2F50 != -1) {
          swift_once();
        }
        uint64_t v58 = v57 - *(double *)&qword_1004F8740;
        __n128 v59 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        __asm { FMOV            V1.2D, #30.0 }
        *(_OWORD *)__n128 v59 = _Q1;
        *(double *)(v59 + 16) = v56;
        *(double *)(v59 + 24) = v58;
        return;
      case 4:
        if (qword_1004C2E88 != -1) {
          swift_once();
        }
        __n128 v65 = *(double *)&qword_1004F8668;
        __n128 v66 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
        [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) frame];
        __n128 v67 = CGRectGetWidth(v98);
        if (qword_1004C2F50 != -1) {
          swift_once();
        }
        __n128 v68 = *(double *)&qword_1004F8740;
        if (qword_1004C3238 != -1) {
          swift_once();
        }
        __n128 v69 = qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
        if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
          goto LABEL_90;
        }
        __n128 v70 = CGRectGetWidth(*(CGRect *)(v69 + 48));
        float32x4_t v71 = *(double *)&qword_1004F8668;
        [*(id *)(v0 + v66) frame];
        __n128 v72 = CGRectGetWidth(v99);
        if (*(unsigned char *)(v69 + 80)) {
          goto LABEL_91;
        }
        uint64_t v11 = v70 + -47.0 - (v71 + v71) - v72;
        uint64_t v15 = CGRectGetHeight(*(CGRect *)(v69 + 48)) + -60.0 - *(double *)&qword_1004F8740;
        uint64_t v14 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        *(double *)uint64_t v14 = v65 + 47.0 + v67 * 0.5;
        *(double *)(v14 + 8) = v68 + 30.0;
LABEL_69:
        *(double *)(v14 + 16) = v11;
        *(double *)(v14 + 24) = v15;
        return;
      default:
        __n128 v73 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        v103.origin.x = 0.0;
        v103.origin.y = 0.0;
        v103.size.width = 0.0;
        v103.size.height = 0.0;
        if (!CGRectEqualToRect(*(CGRect *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea), v103)) {
          return;
        }
        if (qword_1004C2E88 != -1) {
          swift_once();
        }
        __n128 v74 = *(double *)&qword_1004F8668;
        long long v75 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
        [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) frame];
        long long v76 = CGRectGetWidth(v100);
        if (qword_1004C3238 != -1) {
          swift_once();
        }
        if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
          goto LABEL_92;
        }
        long long v77 = CGRectGetWidth(*(CGRect *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48));
        if (qword_1004C2F50 != -1) {
          swift_once();
        }
        if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
          goto LABEL_93;
        }
        long long v78 = v74 + 47.0 + v76 * 0.5;
        CGFloat v79 = v77 + -60.0 - *(double *)&qword_1004F8740;
        long long v80 = CGRectGetHeight(*(CGRect *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48))
            + -47.0
            - (*(double *)&qword_1004F8668
             + *(double *)&qword_1004F8668);
        [*(id *)(v1 + v75) frame];
        uint64_t v81 = CGRectGetWidth(v101);
        *(void *)__n128 v73 = 0x403E000000000000;
        *(double *)(v73 + 8) = v78;
        *(double *)(v73 + 16) = v79;
        *(CGFloat *)(v73 + 24) = v80 - v81;
        break;
    }
  }
  else
  {
    float32x4_t v26 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
    [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) frame];
    CGRectGetWidth(v88);
    [*(id *)(v1 + v26) frame];
    CGRectGetWidth(v89);
    static CGPoint.+ infix(_:_:)();
    float32x4_t v28 = v27;
    float v30 = v29;
    [*(id *)(v1 + v26) frame];
    CGRectGetWidth(v90);
    [*(id *)(v1 + v26) frame];
    CGRectGetWidth(v91);
    static CGSize.- infix(_:_:)();
    float32x4_t v31 = (void *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea);
    *float32x4_t v31 = v28;
    v31[1] = v30;
    v31[2] = v32;
    v31[3] = v33;
  }
}

uint64_t sub_1000CB240(double a1)
{
  v10.x = *(float *)&a1;
  v10.y = *((float *)&a1 + 1);
  uint64_t result = CGRectContainsPoint(*(CGRect *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea), v10);
  int8x8_t v3 = 0;
  if ((result & 1) == 0)
  {
    uint64_t result = sub_1000CB36C();
    if ((v4 & 1) == 0)
    {
      SIMD2<>.init(_:)();
      SIMD2<>.init(_:)();
      uint64_t result = lineInRect(rectOrigin:rectSize:lineP1:lineP2:)();
      if (result)
      {
        uint64_t result = clipLineToRect(rectOrigin:rectSize:lineP1:lineP2:)();
        if ((v5 & 1) == 0)
        {
          uint64_t result = closestPointOnLine(lineP1:lineP2:point:)();
          int8x8_t v7 = (int8x8_t)vsub_f32(v6, *(float32x2_t *)&a1);
          int32x2_t v8 = vdup_n_s32(0x7F800000u);
          int8x8_t v3 = vbsl_s8((int8x8_t)vceq_s32((int32x2_t)vand_s8(v7, (int8x8_t)v8), v8), vand_s8(v7, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v7, (int8x8_t)0x7F0000007FLL))), v7);
        }
      }
    }
  }
  *(int8x8_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_placingLabelDesiredOffset) = v3;
  return result;
}

uint64_t sub_1000CB36C()
{
  simd_float4x4.position.getter();
  simd_float4x4.position.getter();
  type metadata accessor for MeasureCamera();
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
  long long v19 = v1;
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
  long long v20 = v2;
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_state);
  BOOL v5 = v3 == 7 || (unint64_t)(v3 - 3) < 2;
  float v6 = 30.0;
  if (!v5) {
    float v6 = 0.0;
  }
  float v18 = v6;
  simd_float4x4.forward.getter();
  simd_float4x4.position.getter();
  if (*((float *)&v19 + 2) <= 1.0)
  {
    if (*((float *)&v20 + 2) <= 1.0) {
      float32x2_t v10 = (float32x2_t)v20;
    }
    else {
      static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    }
    float32x2_t v9 = (float32x2_t)v19;
  }
  else
  {
    if (*((float *)&v20 + 2) > 1.0) {
      return 0;
    }
    static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    float32x2_t v9 = v8;
    float32x2_t v10 = (float32x2_t)v20;
  }
  *(float32x2_t *)v7.f32 = vsub_f32(v10, v9);
  float v11 = vaddv_f32(vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32));
  float v12 = 1800.0;
  if (!v5) {
    float v12 = 0.0;
  }
  if (v11 < v12) {
    return 0;
  }
  float32x4_t v14 = v7;
  v14.i32[2] = 0;
  int32x4_t v15 = (int32x4_t)vmulq_f32(v14, v14);
  v15.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1))).u32[0];
  float32x2_t v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
  float32x2_t v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)));
  return (uint64_t)vadd_f32(v9, vmul_n_f32(vmul_n_f32(*(float32x2_t *)v7.f32, vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).f32[0]), v18));
}

double sub_1000CB6C0()
{
  type metadata accessor for MeasureCamera();
  static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)();
  static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)();
  simd_float4x4.position.getter();
  float32x4_t v7 = v0;
  simd_float4x4.position.getter();
  float32x4_t v6 = v1;
  lineIntersection(line1P1:line1P2:line2P1:line2P2:)();
  double v4 = *(double *)v6.i64;
  if (v3 > 0.00000011921)
  {
    if (v2 <= 0.00000011921) {
      return *(double *)v7.i64;
    }
    else {
      return COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v7.f32, vmul_n_f32((float32x2_t)*(_OWORD *)&vsubq_f32(v6, v7), v3)));
    }
  }
  return v4;
}

uint64_t sub_1000CB7F4(_OWORD *a1, int a2, __n128 a3, __n128 a4, int8x16_t a5, int8x16_t a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t v11 = v10;
  __n128 v164 = a10;
  __n128 v163 = a9;
  __n128 v162 = a8;
  __n128 v161 = a7;
  int8x16_t v176 = a6;
  int8x16_t v175 = a5;
  __n128 v174 = a4;
  __n128 v173 = a3;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  char v165 = (char *)&v157 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  char v166 = (char *)&v157 - v18;
  uint64_t v19 = sub_100012894((uint64_t *)&unk_1004C68F0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (char *)&v157 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v157 - v24;
  __chkstk_darwin(v23);
  float32x4_t v27 = (char *)&v157 - v26;
  int8x16_t v28 = (int8x16_t)v173;
  __n128 v29 = v174;
  int8x16_t v30 = v175;
  int8x16_t v31 = v176;
  int v160 = a2;
  if ((a2 & 1) == 0) {
    sub_1000C86BC();
  }
  int32x4_t v179 = (int32x4_t)v31;
  int8x16_t v180 = v30;
  int8x16_t v178 = (int8x16_t)v29;
  int8x16_t v181 = v28;
  unint64_t v32 = *(void *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_state);
  BOOL v109 = v32 > 5;
  uint64_t v33 = (1 << v32) & 0x25;
  if (v109 || v33 == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v27, 1, 1, v14);
    uint64_t v65 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime;
    swift_beginAccess();
    sub_1000DB434((uint64_t)v27, v65);
    swift_endAccess();
    uint64_t v66 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation;
    *(void *)uint64_t v66 = 0;
    *(void *)(v66 + 8) = 0;
    *(_OWORD *)(v66 + 16) = xmmword_1003FCE40;
    *(_DWORD *)(v66 + 32) = 0;
    *(void *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine) = _swiftEmptyArrayStorage;
    return swift_bridgeObjectRelease();
  }
  CGFloat v167 = v27;
  uint64_t v35 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2;
  simd_float4x4.position.getter();
  float32x4_t v182 = v36;
  simd_float4x4.position.getter();
  float32x4_t v177 = v37;
  float v38 = v182.f32[2];
  float v39 = v37.f32[2];
  uint64_t v40 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform;
  simd_float4x4.position.getter();
  float32x4_t v159 = v41;
  type metadata accessor for MeasureCamera();
  long long v42 = a1[11];
  long long v171 = a1[10];
  long long v170 = v42;
  long long v43 = a1[13];
  long long v169 = a1[12];
  long long v168 = v43;
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
  float32x4_t v172 = v44;
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
  float32x4_t v45 = vsubq_f32(v177, v182);
  float32x2_t v47 = vsub_f32(*(float32x2_t *)v172.f32, v46);
  float v48 = (float)(sqrtf((float)((float)(v39 - v38) * (float)(v39 - v38))+ vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v45, v45)))/ sqrtf(vaddv_f32(vmul_f32(v47, v47))))* 25.0;
  simd_float4x4.position.getter();
  float32x4_t v172 = v49;
  simd_float4x4.position.getter();
  float32x4_t v51 = vsubq_f32(v172, v50);
  float32x4_t v52 = vmulq_f32(v51, v51);
  float v53 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]);
  if (v53 > v48)
  {
    *(void *)&long long v171 = v35;
    v172.i64[0] = v40;
    uint64_t v54 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime;
    swift_beginAccess();
    sub_1000DB36C(v54, (uint64_t)v25);
    uint64_t v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
    int v56 = v55(v25, 1, v14);
    sub_1000DB3D4((uint64_t)v25);
    *(void *)&long long v170 = v54;
    sub_1000DB36C(v54, (uint64_t)v22);
    int v57 = v55(v22, 1, v14);
    uint64_t v158 = v15;
    if (v57 == 1)
    {
      uint64_t result = sub_1000DB3D4((uint64_t)v22);
      BOOL v59 = v56 == 1;
      __n128 v60 = (int8x16_t *)v172.i64[0];
    }
    else
    {
      __n128 v67 = v166;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v166, v22, v14);
      __n128 v68 = v165;
      Date.init()();
      Date.distance(to:)();
      double v70 = v69;
      float32x4_t v71 = *(void (**)(char *, uint64_t))(v15 + 8);
      v71(v68, v14);
      double v72 = fabs(v70);
      __n128 v60 = (int8x16_t *)v172.i64[0];
      if (v72 > 0.65)
      {
        v71(v67, v14);
        goto LABEL_28;
      }
      uint64_t v73 = v14;
      if (v72 >= 0.585 && v72 <= 0.65)
      {
        sub_1000DB7F0(v160 & 1, v173.n128_f64[0], v174.n128_f64[0], *(double *)v175.i64, *(double *)v176.i64, v161.n128_f64[0], v162.n128_f64[0], v163.n128_f64[0], v164.n128_f64[0], v48);
        int v75 = v74;
        uint64_t v76 = OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine;
        long long v77 = *(char **)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v176.i64[0] = v76;
        *(void *)(v11 + v76) = v77;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v77 = sub_10006E184(0, *((void *)v77 + 2) + 1, 1, v77);
          *(void *)(v11 + v176.i64[0]) = v77;
        }
        unint64_t v80 = *((void *)v77 + 2);
        unint64_t v79 = *((void *)v77 + 3);
        uint64_t v81 = v80 + 1;
        if (v80 >= v79 >> 1)
        {
          v175.i64[0] = v80 + 1;
          double v154 = v77;
          unint64_t v155 = v80;
          char v156 = sub_10006E184((char *)(v79 > 1), v80 + 1, 1, v154);
          uint64_t v81 = v175.i64[0];
          unint64_t v80 = v155;
          long long v77 = v156;
          *(void *)(v11 + v176.i64[0]) = v156;
        }
        *((void *)v77 + 2) = v81;
        *(_DWORD *)&v77[4 * v80 + 32] = v75;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v71)(v67, v73);
        uint64_t v14 = v73;
        if (v56 != 1) {
          goto LABEL_59;
        }
        goto LABEL_28;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v71)(v67, v14);
      BOOL v59 = v56 == 1;
    }
    if (!v59) {
      goto LABEL_59;
    }
LABEL_28:
    uint64_t v82 = (uint64_t)v167;
    Date.init()();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v158 + 56))(v82, 0, 1, v14);
    uint64_t v83 = v170;
    swift_beginAccess();
    sub_1000DB434(v82, v83);
    swift_endAccess();
    unint64_t v84 = sub_1000CF27C();
    if ((v84 & 0x100000000) != 0)
    {
      int8x16_t v97 = *(int8x16_t *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_center + 16);
      int8x16_t v98 = *(int8x16_t *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_center + 32);
      int8x16_t v99 = *(int8x16_t *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_center + 48);
      *__n128 v60 = *(int8x16_t *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_center);
      v60[1] = v97;
      v60[2] = v98;
      v60[3] = v99;
    }
    else
    {
      float32x4_t v85 = vsubq_f32(v182, v177);
      v85.f32[2] = v38 - v39;
      int32x4_t v86 = (int32x4_t)vmulq_f32(v85, v85);
      v86.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v86, 2), vadd_f32(*(float32x2_t *)v86.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.i8, 1))).u32[0];
      float32x2_t v87 = vrsqrte_f32((float32x2_t)v86.u32[0]);
      float32x2_t v88 = vmul_f32(v87, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v87, v87)));
      float32x4_t v89 = vmulq_n_f32(v85, vmul_f32(v88, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v88, v88))).f32[0]);
      float32x4_t v90 = vmulq_f32(v89, vsubq_f32(v159, v177));
      float32x4_t v91 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 2), vaddq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.f32, 1)));
      float32x4_t v182 = v91;
      float v92 = *(float *)&v84;
      if (*(float *)&v84 == -1.0)
      {
        float32x4_t v177 = v89;
        simd_float4x4.position.getter();
        int8x16_t v176 = v93;
        simd_float4x4.position.getter();
        float32x4_t v95 = vmulq_f32(v177, vsubq_f32((float32x4_t)v176, v94));
        float32x4_t v177 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 2), vaddq_f32(v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.f32, 1)));
        float v96 = 0.5;
      }
      else
      {
        float v96 = 1.0;
        v91.i32[0] = v84;
        float32x4_t v177 = v91;
      }
      BOOL v100 = v92 == -1.0;
      uint64_t v101 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
      uint64_t result = (uint64_t)[*(id *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) alpha];
      float v103 = v102;
      *(unsigned char *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_isOccluded) = v100;
      if (vabds_f32(v96, v103) < 0.01)
      {
        *(double *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha) = v96;
        float v103 = v96;
      }
      float v104 = v182.f32[0];
      float v105 = v177.f32[0];
      float v106 = vabds_f32(v177.f32[0], v182.f32[0]);
      if ((~LODWORD(v106) & 0x7F800000) == 0 && (LODWORD(v106) & 0x7FFFFF) != 0) {
        return result;
      }
      if ((float)(v177.f32[0] - v182.f32[0]) >= 0.0
        && (float)(v177.f32[0] - v182.f32[0]) <= 0.0
        && vabds_f32(v103, v96) <= 0.00000011921)
      {
        uint64_t v149 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation;
        if (*(unsigned char *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation + 16) != 4)
        {
          *(double *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha) = *(float *)(v149 + 24);
          [*(id *)(v11 + v101) setAlpha:];
          sub_1000C86BC();
          *__n128 v60 = v150;
          v60[1] = v151;
          v60[2] = v152;
          v60[3] = v153;
        }
        *(void *)uint64_t v149 = 0;
        *(void *)(v149 + 8) = 0;
        *(_OWORD *)(v149 + 16) = xmmword_1003FCE40;
        *(_DWORD *)(v149 + 32) = 0;
      }
      else
      {
        if (v106 > 0.00000011921)
        {
          float v108 = v48 * 6.0;
          if ((float)(v48 * 6.0) < 0.00000011921) {
            goto LABEL_86;
          }
          BOOL v109 = v106 < 0.00000011921 || v106 > v108;
          if (v109)
          {
            if (v108 > v53)
            {
LABEL_88:
              __break(1u);
              JUMPOUT(0x1000CC784);
            }
            uint64_t v114 = 2 * (v106 <= v53);
            if (v108 > v106) {
              uint64_t v114 = 0;
            }
          }
          else
          {
            uint64_t v114 = 3;
            if (vabds_f32(v103, v96) <= 0.00000011921) {
              uint64_t v114 = 0;
            }
          }
        }
        else
        {
          sub_1000C86BC();
          float v105 = v177.f32[0];
          float v104 = v182.f32[0];
          *__n128 v60 = v110;
          v60[1] = v111;
          v60[2] = v112;
          v60[3] = v113;
          uint64_t v114 = 1;
        }
        uint64_t v115 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation;
        *(_OWORD *)uint64_t v115 = xmmword_1003FCE50;
        *(void *)(v115 + 16) = v114 | ((unint64_t)LODWORD(v103) << 32);
        *(void *)(v115 + 24) = LODWORD(v96) | ((unint64_t)COERCE_UNSIGNED_INT(v104 / v53) << 32);
        *(float *)(v115 + 32) = v105 / v53;
      }
    }
    *(void *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine) = _swiftEmptyArrayStorage;
    uint64_t result = swift_bridgeObjectRelease();
LABEL_59:
    int8x16_t v116 = *v60;
    int8x16_t v117 = v60[1];
    int8x16_t v118 = v60[2];
    uint64_t v119 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation;
    uint64_t v120 = *(void *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation + 16);
    uint64_t v121 = v120;
    if (v120 == 4) {
      return result;
    }
    int32x4_t v179 = (int32x4_t)v60[3];
    int8x16_t v180 = v118;
    int8x16_t v178 = v117;
    int8x16_t v181 = v116;
    uint64_t v122 = *(void *)v119;
    uint64_t v123 = *(void *)(v119 + 8);
    float v124 = *((float *)&v120 + 1);
    float v125 = *(float *)(v119 + 24);
    uint64_t v126 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
    [*(id *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) alpha];
    switch(v121)
    {
      case 1:
        float v130 = (float)((float)(v125 - v124) * (float)(1.0 - powf(1.0 - (float)((float)v122 / (float)v123), 3.0))) + v124;
        goto LABEL_73;
      case 2:
        if (v123 >= 0) {
          uint64_t v131 = v123;
        }
        else {
          uint64_t v131 = v123 + 1;
        }
        if ((unint64_t)(v123 + 1) >= 3)
        {
          if (v122 != 0x8000000000000000 || (unint64_t)(v123 + 3) >= 2)
          {
            uint64_t v132 = v131 >> 1;
            v128.f32[0] = (float)v132;
            float32x4_t v182 = v128;
            float v133 = 1.0 - (float)((float)(v122 % v132) / (float)v132);
            if (v122 == v123) {
              float v133 = 0.0;
            }
            float v134 = powf(v133, 3.0);
            v135.f32[0] = (float)v122;
            float32x4_t v177 = v135;
            int32x4_t v179 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v182, v135), 0);
            float v136 = 1.0 - v134;
            sub_1000C86BC();
            int8x16_t v180 = v138;
            int8x16_t v181 = v137;
            int8x16_t v176 = v139;
            int8x16_t v175 = v140;
            sub_1000C86BC();
            int8x16_t v181 = vbslq_s8((int8x16_t)v179, v141, v181);
            int8x16_t v178 = vbslq_s8((int8x16_t)v179, v142, v180);
            int8x16_t v180 = vbslq_s8((int8x16_t)v179, v143, v176);
            int32x4_t v179 = (int32x4_t)vbslq_s8((int8x16_t)v179, v144, v175);
            float v130 = v136 * v125;
            if (v177.f32[0] < v182.f32[0]) {
              float v130 = (float)(1.0 - v136) * v124;
            }
LABEL_73:
            double v129 = v130;
LABEL_76:
            uint64_t result = (uint64_t)[*(id *)(v11 + v126) hasActions];
            if ((result & 1) == 0) {
              *(double *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha) = v129;
            }
            if (v122 >= v123)
            {
              *(void *)uint64_t v119 = 0;
              *(void *)(v119 + 8) = 0;
              *(_OWORD *)(v119 + 16) = xmmword_1003FCE40;
              *(_DWORD *)(v119 + 32) = 0;
            }
            else if (*(unsigned char *)(v119 + 16) != 4)
            {
              *(void *)uint64_t v119 = v122 + 1;
            }
            return result;
          }
          goto LABEL_87;
        }
        __break(1u);
        break;
      case 3:
        double v129 = (float)((float)((float)(1.0
                                     - (float)((float)(1.0 - (float)((float)v122 / (float)v123))
                                             * (float)(1.0 - (float)((float)v122 / (float)v123))))
                             * (float)(v125 - v124))
                     + v124);
        goto LABEL_75;
      default:
        double v129 = v127;
LABEL_75:
        sub_1000C86BC();
        int8x16_t v181 = v145;
        int8x16_t v178 = v146;
        int8x16_t v180 = v147;
        int32x4_t v179 = (int32x4_t)v148;
        goto LABEL_76;
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v61 = (uint64_t)v167;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v167, 1, 1, v14);
  uint64_t v62 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime;
  swift_beginAccess();
  sub_1000DB434(v61, v62);
  swift_endAccess();
  uint64_t v63 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation;
  *(void *)uint64_t v63 = 0;
  *(void *)(v63 + 8) = 0;
  *(_OWORD *)(v63 + 16) = xmmword_1003FCE40;
  *(_DWORD *)(v63 + 32) = 0;
  *(void *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  simd_float4x4.position.getter();
  uint64_t result = sub_1000DB6B8();
  double v64 = 1.0;
  if ((result & 1) == 0) {
    double v64 = 0.5;
  }
  *(double *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha) = v64;
  return result;
}

BOOL sub_1000CC794()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState)) {
    return 1;
  }
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_state);
  BOOL v2 = v1 == 1 || v1 == 6;
  if (v2 || (*(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_hideForMovePoint) & 1) != 0) {
    return 1;
  }
  else {
    return *(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_capturing) == 1 && !MeasureObjectState.isCapturable()();
  }
}

float sub_1000CC810(float a1)
{
  void (*v3)(uint64_t *__return_ptr, uint64_t);
  uint64_t v4;
  float v5;
  uint64_t v7;

  float v3 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v1
                                                                           + OBJC_IVAR____TtC7Measure11LabelRender__orientationState)
                                                             + 144);
  double v4 = swift_retain();
  v3(&v7, v4);
  swift_release();
  switch(v7)
  {
    case 0:
    case 5:
    case 6:
      return *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) + a1;
    case 1:
      *(_DWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) = 0;
      return *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) + a1;
    case 2:
      sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
      if (static UIDevice.isIPad()())
      {
        if (a1 >= 0.0) {
          *(_DWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) = -1068953638;
        }
        else {
          *(_DWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) = 1078530010;
        }
      }
      return *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) + a1;
    case 3:
      BOOL v5 = *(float *)Float.piDiv2.unsafeMutableAddressor();
      goto LABEL_8;
    case 4:
      BOOL v5 = -*(float *)Float.piDiv2.unsafeMutableAddressor();
LABEL_8:
      *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) = v5;
      return *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) + a1;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1000CC984);
  }
}

id sub_1000CC9A0(float a1)
{
  [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) setZPosition:*(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelZOffset) + (float)(a1 * -10.0)];
  [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer) setZPosition:0.0001];
  [*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelText) setZPosition:0.0002];
  BOOL v2 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelChevron);

  return [v2 setZPosition:0.0001];
}

void sub_1000CCA58(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
  if (v2)
  {
    id v4 = v2;
    sub_1000B63E8(a2);
  }
}

id sub_1000CCACC()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
  [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) removeAllActions];
  [*(id *)(v0 + v1) setAlpha:1.0];
  BOOL v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v2);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture) = 1;
  os_unfair_lock_unlock(v2);
  swift_endAccess();
  id result = [self jasperAvailable];
  if (result)
  {
    unsigned __int8 v4 = [*(id *)(v0 + v1) isHidden];
    *(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_wasHidden) = v4;
    return [*(id *)(v0 + v1) setHidden:0];
  }
  return result;
}

void sub_1000CCBB8()
{
  if ([self jasperAvailable])
  {
    [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) setHidden:*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_wasHidden)];
LABEL_4:
    double v1 = *(double *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha);
    goto LABEL_5;
  }
  double v1 = 0.0;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_inBounds) & 1) == 0) {
    goto LABEL_4;
  }
LABEL_5:
  BOOL v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v2);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture) = 0;
  os_unfair_lock_unlock(v2);
  swift_endAccess();
  id v3 = [self fadeAlphaTo:v1 duration:0.1];
  [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) runAction:v3];
}

uint64_t sub_1000CCF34()
{
  return type metadata accessor for LabelRender();
}

uint64_t type metadata accessor for LabelRender()
{
  uint64_t result = qword_1004C9DD0;
  if (!qword_1004C9DD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000CCF88()
{
  sub_10006B9DC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

id sub_1000CD174()
{
  return [v0 selectAnimationComplete];
}

id sub_1000CD188()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha;
  [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) setAlpha:*(double *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha)];
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_1000DF848(*(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID), *(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8));
    swift_unknownObjectRelease();
  }
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) = 0;
  *(void *)(v0 + v1) = 0x3FF0000000000000;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_state);

  return sub_1000C51D0(v2);
}

void sub_1000CD23C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Measure11LabelRender_selectionState;
  if (v1[OBJC_IVAR____TtC7Measure11LabelRender_selectionState] != 2) {
    return;
  }
  if ([self jasperAvailable])
  {
    id v3 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
    if (v3)
    {
      long long v4 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 48];
      long long v19 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 32];
      long long v20 = v4;
      uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 64];
      long long v5 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 16];
      long long v17 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties];
      long long v18 = v5;
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v1;
      id v7 = v3;
      sub_1000B8E1C((uint64_t)&v17);
      float32x2_t v8 = v1;
      sub_1000B76B0((uint64_t)&v17, (uint64_t)sub_1000DB608, v6);
      swift_release();
LABEL_7:
      sub_1000B8F4C((uint64_t)&v17);
    }
  }
  else
  {
    v1[v2] = 3;
    float32x2_t v9 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
    if (v9)
    {
      long long v10 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 48];
      long long v19 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 32];
      long long v20 = v10;
      uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 64];
      long long v11 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 16];
      long long v17 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties];
      long long v18 = v11;
      id v7 = v9;
      sub_1000B8E1C((uint64_t)&v17);
      sub_1000B76B0((uint64_t)&v17, 0, 0);
      goto LABEL_7;
    }
  }
  if (qword_1004C2B40 != -1) {
    swift_once();
  }
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  float v12 = &v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
  uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
  uint64_t v14 = (void *)*((void *)v12 + 1);
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v16._object = (void *)0x8000000100424D50;
  Log.default(_:isPrivate:)(v16, 0);
  swift_bridgeObjectRelease();
}

uint64_t sub_1000CD474()
{
  if (qword_1004C2B40 != -1) {
    swift_once();
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0xD000000000000025;
  v4._object = (void *)0x8000000100424D70;
  Log.default(_:isPrivate:)(v4, 0);

  return swift_bridgeObjectRelease();
}

void sub_1000CD588()
{
  void (*v2)(_OWORD *__return_ptr, uint64_t);
  uint64_t v3;
  void (*v4)(_OWORD *__return_ptr, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char *v25;
  char *v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  char *v33;
  id v34;
  char *v35;
  void *v36;
  void *v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  long long v46;
  long long v47;
  uint64_t v48;
  unsigned char *v49;
  id v50;
  _OWORD v51[4];
  uint64_t v52;

  uint64_t v1 = v0;
  uint64_t v2 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)&v0[OBJC_IVAR____TtC7Measure11LabelRender__appState]
                                                            + 144);
  Swift::String v3 = swift_retain();
  v2(v51, v3);
  swift_release();
  if ((BYTE3(v51[0]) & 1) == 0 && !v0[OBJC_IVAR____TtC7Measure11LabelRender_selectionState])
  {
    if (![self jasperAvailable])
    {
      float32x4_t v27 = *(void **)&v0[OBJC_IVAR____TtC7Measure11LabelRender_mainView];
      int8x16_t v28 = v0[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft];
      __n128 v29 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
      int8x16_t v30 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
      int8x16_t v31 = v1[OBJC_IVAR____TtC7Measure11LabelRender_labelType];
      unint64_t v32 = (char *)objc_allocWithZone((Class)type metadata accessor for LabelDetailsPlatterWrapper());
      uint64_t v33 = v1;
      __n128 v34 = v27;
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_1000DA460(v34, v31, v33, v28, v29, v30, v32);
      float32x4_t v36 = *(void **)&v33[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
      *(void *)&v33[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel] = v35;

      sub_1000CF350((uint64_t)v33);
      return;
    }
    Swift::String v4 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)&v0[OBJC_IVAR____TtC7Measure11LabelRender__pillToPlatterAnimationState]
                                                              + 144);
    long long v5 = swift_retain();
    v4(v51, v5);
    swift_release();
    uint64_t v6 = *(void *)(*(void *)&v51[0] + 16);
    swift_bridgeObjectRelease();
    if (!v6)
    {
      sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
      id v7 = static UIDevice.isIPhone()();
      float32x2_t v8 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_mainView];
      if (v7)
      {
        float32x2_t v9 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_sceneView];
        long long v10 = v8;
        [v9 bounds];
        Swift::String v15 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController];
        if (!v15)
        {
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
        if (!*(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher])
        {
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
        Swift::String v16 = v11;
        long long v17 = v12;
        long long v18 = v13;
        long long v19 = v14;
        long long v20 = v1[OBJC_IVAR____TtC7Measure11LabelRender_labelType];
        uint64_t v21 = v1[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft];
        uint64_t v22 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
        uint64_t v23 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
        *(void *)&v51[0] = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher];
        swift_bridgeObjectRetain();
        uint64_t v24 = v15;
        sub_100012894((uint64_t *)&unk_1004CA000);
        sub_10002179C((unint64_t *)&unk_1004CE660, (uint64_t *)&unk_1004CA000);
        Publisher.eraseToAnyPublisher()();
        uint64_t v25 = v1;
        uint64_t v26 = sub_1000DA294(v10, v20, v25, v21, v22, v23, v24, v16, v17, v18, v19);
      }
      else
      {
        float32x4_t v37 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController];
        if (!v37)
        {
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
        if (!*(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher])
        {
LABEL_20:
          __break(1u);
          return;
        }
        float v38 = v1[OBJC_IVAR____TtC7Measure11LabelRender_labelType];
        float v39 = v1[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft];
        uint64_t v40 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
        float32x4_t v41 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
        *(void *)&v51[0] = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher];
        long long v42 = v8;
        swift_bridgeObjectRetain();
        long long v43 = v37;
        sub_100012894((uint64_t *)&unk_1004CA000);
        sub_10002179C((unint64_t *)&unk_1004CE660, (uint64_t *)&unk_1004CA000);
        Publisher.eraseToAnyPublisher()();
        uint64_t v25 = v1;
        uint64_t v26 = sub_1000DA100(v42, v38, v25, v39, v40, v41, v43);
      }
      float32x4_t v44 = *(void **)&v25[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
      *(void *)&v25[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel] = v26;

      float32x4_t v45 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
      if (v45)
      {
        float32x2_t v46 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 48];
        v51[2] = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 32];
        v51[3] = v46;
        float32x4_t v52 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 64];
        float32x2_t v47 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 16];
        v51[0] = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties];
        v51[1] = v47;
        float v48 = swift_allocObject();
        *(void *)(v48 + 16) = v1;
        float32x4_t v49 = v1;
        float32x4_t v50 = v45;
        sub_1000B8E1C((uint64_t)v51);
        sub_1000B60D4((uint64_t)v51, (uint64_t)sub_1000DBF28, v48);
        swift_release();
        sub_1000B8F4C((uint64_t)v51);

        return;
      }
      __break(1u);
      goto LABEL_17;
    }
  }
}

uint64_t sub_1000CDA30()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void (**)(uint64_t))(**(void **)(v0 + OBJC_IVAR____TtC7Measure11LabelRender__unitState) + 144);
  uint64_t v3 = swift_retain();
  v2(v3);
  swift_release();
  uint64_t result = (uint64_t)sub_1000B1320();
  uint64_t v5 = result;
  BOOL v6 = result == 0;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType))
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType) != 1) {
      return result;
    }
    id v7 = (void *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData);
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 21))
    {
      __break(1u);
    }
    else if ((*v7 & 0x100000000) == 0)
    {
      if ((v7[1] & 0x100000000) == 0)
      {
        if (!result)
        {
          sub_10012F124(0, 0, (uint64_t)&v72);
          uint64_t v8 = v73;
          uint64_t v9 = v75;
          if (v76 == 1) {
            goto LABEL_38;
          }
          uint64_t v62 = v72;
          uint64_t v63 = v74;
          float v10 = sub_1001308E4(2, 0);
          sub_10013029C(0, (uint64_t)&v77);
          uint64_t v11 = v80;
          char v12 = v81;
          uint64_t v13 = v78;
          uint64_t v60 = v77;
          uint64_t v61 = v79;
          sub_10012F124(0, 0, (uint64_t)&v82);
          uint64_t v70 = v83;
          uint64_t v14 = v85;
          if ((v86 & 1) == 0)
          {
            uint64_t v67 = v11;
            uint64_t v69 = v13;
            uint64_t v58 = v84;
            uint64_t v59 = v82;
            char v15 = 2;
            float v16 = sub_1001308E4(2, 0);
            sub_10013029C(0, (uint64_t)&v87);
            uint64_t v64 = v88;
            uint64_t v66 = v90;
            if ((v12 & 1) == 0)
            {
              uint64_t v17 = v89;
              char v18 = 1;
              if ((v91 & 1) == 0) {
                goto LABEL_45;
              }
            }
LABEL_37:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_38;
          }
          goto LABEL_31;
        }
        if (result == 1)
        {
          sub_10013029C(0, (uint64_t)&v72);
          uint64_t v8 = v73;
          uint64_t v9 = v75;
          if (v76) {
            goto LABEL_38;
          }
          uint64_t v62 = v72;
          uint64_t v63 = v74;
          float v10 = sub_1001308E4(1, 0);
          sub_10012F124(0, 0, (uint64_t)&v77);
          uint64_t v28 = v80;
          char v29 = v81;
          uint64_t v30 = v78;
          uint64_t v60 = v77;
          uint64_t v61 = v79;
          sub_10013029C(0, (uint64_t)&v82);
          uint64_t v70 = v83;
          uint64_t v14 = v85;
          if ((v86 & 1) == 0)
          {
            uint64_t v67 = v28;
            uint64_t v69 = v30;
            uint64_t v58 = v84;
            uint64_t v59 = v82;
            char v15 = 1;
            float v16 = sub_1001308E4(1, 0);
            sub_10012F124(0, 0, (uint64_t)&v87);
            uint64_t v64 = v88;
            uint64_t v66 = v90;
            if ((v29 & 1) == 0)
            {
              uint64_t v17 = v89;
              char v18 = 2;
              if ((v91 & 1) == 0)
              {
LABEL_45:
                uint64_t v52 = v87;
                uint64_t v53 = v17;
                sub_100130B38(v5, 1, 0, 0, (uint64_t *)&v92, v10 * v16);
                float v32 = sub_10013200C(v18, 0);
                sub_100130B38(v6, 1, 0, 0, (uint64_t *)&v95, v32);
                sub_1001308E4(v15, 0);
                sub_1001308E4(v18, 0);
                if (v5)
                {
                  sub_10013029C(0, (uint64_t)&v98);
                  uint64_t v33 = v101;
                  uint64_t v57 = v99;
                  uint64_t v50 = v98;
                  uint64_t v51 = v100;
                  sub_10012F124(0, 0, (uint64_t)v102);
                }
                else
                {
                  sub_10012F124(0, 0, (uint64_t)&v98);
                  uint64_t v33 = v101;
                  uint64_t v57 = v99;
                  uint64_t v50 = v98;
                  uint64_t v51 = v100;
                  sub_10013029C(0, (uint64_t)v102);
                }
                if (v94)
                {
                  uint64_t v54 = v102[1];
                  uint64_t v55 = v103;
                  uint64_t v56 = v33;
                  uint64_t v34 = v94;
                  uint64_t v49 = v102[2];
                  uint64_t v35 = v102[0];
                  uint64_t v36 = v93;
                  sub_100016FEC((uint64_t)&v96, (uint64_t)v106, (uint64_t *)&unk_1004D2450);
                  sub_100016FEC((uint64_t)v106, (uint64_t)v107, (uint64_t *)&unk_1004D2450);
                  uint64_t v37 = *((void *)&v107[0] + 1);
                  if (*((void *)&v107[0] + 1))
                  {
                    if (v9)
                    {
                      if (v67)
                      {
                        if (!v14)
                        {
                          swift_bridgeObjectRetain();
                          sub_10001D478((uint64_t)v106);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          long long v105 = v95;
                          sub_1000DB4E0((uint64_t)&v105);
                          sub_1000DB4E0((uint64_t)v106);
                          long long v104 = v92;
                          sub_1000DB4E0((uint64_t)&v104);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
LABEL_76:
                          swift_bridgeObjectRelease();
                          sub_1000DB4E0((uint64_t)v106);
                          return swift_bridgeObjectRelease();
                        }
                        if (v66)
                        {
                          if (v56)
                          {
                            if (v55)
                            {
                              float v38 = *(char **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
                              if (v38)
                              {
                                uint64_t v48 = *((void *)&v92 + 1);
                                uint64_t v39 = *((void *)&v95 + 1);
                                uint64_t v40 = *(void **)&v38[qword_1004C9218];
                                if (v40
                                  && ((uint64_t v47 = *(void *)&v107[0],
                                       uint64_t v45 = v92,
                                       uint64_t v46 = v95,
                                       swift_getObjectType(),
                                       swift_conformsToProtocol2())
                                    ? (float32x4_t v41 = v40)
                                    : (float32x4_t v41 = 0),
                                      v41))
                                {
                                  swift_bridgeObjectRetain();
                                  sub_10001D478((uint64_t)v106);
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRetain();
                                  long long v42 = v38;
                                  id v44 = v40;
                                  sub_1001D26FC(v45, v48, v36, v34, v46, v39, v47, v37, v62, v8, v63, v9, v60, v69, v61, v67, v59, v70, v58,
                                    v14,
                                    v52,
                                    v64,
                                    v53,
                                    v66,
                                    v50,
                                    v57,
                                    v51,
                                    v56,
                                    v35,
                                    v54,
                                    v49,
                                    v55);
                                  swift_bridgeObjectRelease();

                                  sub_1000DB4E0((uint64_t)v106);
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease_n();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                }
                                else
                                {
                                  long long v43 = v38;
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                }
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                sub_1000DB4E0((uint64_t)v106);

                                swift_bridgeObjectRelease();
                              }
                              else
                              {
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                long long v105 = v95;
                                sub_1000DB4E0((uint64_t)&v105);
                                sub_1000DB4E0((uint64_t)v106);
                                long long v104 = v92;
                                sub_1000DB4E0((uint64_t)&v104);
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                              }
                              return swift_bridgeObjectRelease();
                            }
                            swift_bridgeObjectRetain();
                            sub_10001D478((uint64_t)v106);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            long long v105 = v95;
                            sub_1000DB4E0((uint64_t)&v105);
                            sub_1000DB4E0((uint64_t)v106);
                            long long v104 = v92;
                            sub_1000DB4E0((uint64_t)&v104);
                            swift_bridgeObjectRelease();
                          }
                          else
                          {
                            swift_bridgeObjectRetain();
                            sub_10001D478((uint64_t)v106);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            long long v105 = v95;
                            sub_1000DB4E0((uint64_t)&v105);
                            sub_1000DB4E0((uint64_t)v106);
                            long long v104 = v92;
                            sub_1000DB4E0((uint64_t)&v104);
                          }
                          swift_bridgeObjectRelease_n();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                        }
                        else
                        {
                          swift_bridgeObjectRetain();
                          sub_10001D478((uint64_t)v106);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          long long v105 = v95;
                          sub_1000DB4E0((uint64_t)&v105);
                          sub_1000DB4E0((uint64_t)v106);
                          long long v104 = v92;
                          sub_1000DB4E0((uint64_t)&v104);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                        }
                      }
                      else
                      {
                        swift_bridgeObjectRetain();
                        sub_10001D478((uint64_t)v106);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        long long v105 = v95;
                        sub_1000DB4E0((uint64_t)&v105);
                        sub_1000DB4E0((uint64_t)v106);
                        long long v104 = v92;
                        sub_1000DB4E0((uint64_t)&v104);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease_n();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRetain();
                      sub_10001D478((uint64_t)v106);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      long long v105 = v95;
                      sub_1000DB4E0((uint64_t)&v105);
                      sub_1000DB4E0((uint64_t)v106);
                      long long v104 = v92;
                      sub_1000DB4E0((uint64_t)&v104);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    swift_bridgeObjectRelease();
                    goto LABEL_76;
                  }
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  long long v105 = v95;
                  sub_1000DB4E0((uint64_t)&v105);
                  long long v104 = v92;
                  sub_1000DB4E0((uint64_t)&v104);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v107[0] = v95;
                  sub_1000DB4E0((uint64_t)v107);
                  sub_100016FEC((uint64_t)&v96, (uint64_t)v106, (uint64_t *)&unk_1004D2450);
                  sub_1000DB4E0((uint64_t)v106);
                  long long v105 = v92;
                  sub_1000DB4E0((uint64_t)&v105);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                return swift_bridgeObjectRelease();
              }
            }
            goto LABEL_37;
          }
LABEL_31:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_38:
          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
LABEL_83:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    __break(1u);
    goto LABEL_82;
  }
  sub_10012C948(result, 0, 0, (uint64_t *)&v95, *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurement));
  if (v5)
  {
    if (v5 != 1) {
      goto LABEL_83;
    }
    sub_10013029C(0, (uint64_t)&v98);
    uint64_t v19 = v101;
    uint64_t v20 = v99;
    uint64_t v21 = v98;
    sub_10012F124(0, 0, (uint64_t)v102);
  }
  else
  {
    sub_10012F124(1, 0, (uint64_t)&v98);
    uint64_t v19 = v101;
    uint64_t v20 = v99;
    uint64_t v21 = v98;
    sub_10013029C(0, (uint64_t)v102);
  }
  uint64_t v22 = v97;
  if (!v97)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v92 = v95;
    return sub_1000DB4E0((uint64_t)&v92);
  }
  if (!v19)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v92 = v95;
    sub_1000DB4E0((uint64_t)&v92);
    return swift_bridgeObjectRelease_n();
  }
  if (!v103)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v92 = v95;
    sub_1000DB4E0((uint64_t)&v92);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  uint64_t v23 = *(char **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v92 = v95;
    sub_1000DB4E0((uint64_t)&v92);
    return swift_bridgeObjectRelease();
  }
  uint64_t v71 = *((void *)&v95 + 1);
  uint64_t v24 = *(void **)&v23[qword_1004C9218];
  if (v24
    && ((v68 = v96, uint64_t v65 = v95, swift_getObjectType(), swift_conformsToProtocol2()) ? (v25 = v24) : (v25 = 0), v25))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v26 = v23;
    swift_bridgeObjectRetain();
    id v27 = v24;
    sub_1000AB9BC(v65, v71, v68, v22, v21, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    int8x16_t v31 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
LABEL_39:

  return swift_bridgeObjectRelease();
}

__n128 initializeBufferWithCopyOfBuffer for RectangleLabelData(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RectangleLabelData(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RectangleLabelData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 21) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RectangleLabelData()
{
  return &type metadata for RectangleLabelData;
}

uint64_t destroy for LabelProperties()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LabelProperties(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LabelProperties(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for LabelProperties(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for LabelProperties(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LabelProperties(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LabelProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelProperties()
{
  return &type metadata for LabelProperties;
}

__n128 initializeWithCopy for LabelRender.TargetAnimation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LabelRender.TargetAnimation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LabelRender.TargetAnimation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 36) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelRender.TargetAnimation()
{
  return &type metadata for LabelRender.TargetAnimation;
}

unsigned char *storeEnumTagSinglePayload for LabelRender.SelectionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CEE9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelRender.SelectionState()
{
  return &type metadata for LabelRender.SelectionState;
}

void destroy for LabelRender.AttributedText(uint64_t a1)
{
  swift_bridgeObjectRelease();

  unint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for LabelRender.AttributedText(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  unsigned int v4 = (void *)a2[2];
  uint64_t v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  id v6 = v4;
  id v7 = v5;
  return a1;
}

void *assignWithCopy for LabelRender.AttributedText(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  id v7 = (void *)a1[3];
  uint64_t v8 = (void *)a2[3];
  a1[3] = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for LabelRender.AttributedText(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  unsigned int v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for LabelRender.AttributedText(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LabelRender.AttributedText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelRender.AttributedText()
{
  return &type metadata for LabelRender.AttributedText;
}

unsigned char *storeEnumTagSinglePayload for LabelType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CF194);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelType()
{
  return &type metadata for LabelType;
}

unint64_t sub_1000CF1D0()
{
  unint64_t result = qword_1004C9DE0;
  if (!qword_1004C9DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C9DE0);
  }
  return result;
}

unint64_t sub_1000CF228()
{
  unint64_t result = qword_1004C9DE8;
  if (!qword_1004C9DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C9DE8);
  }
  return result;
}

unint64_t sub_1000CF27C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    float v4 = 0.0;
    return LODWORD(v4) | ((unint64_t)(v2 == 0) << 32);
  }
  int v3 = (float *)(v1 + 32);
  if (v2 == 1)
  {
    float v4 = *v3;
    return LODWORD(v4) | ((unint64_t)(v2 == 0) << 32);
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  float v7 = 0.0;
  uint64_t v8 = v2;
  while (*v3 != -1.0)
  {
    BOOL v9 = __OFADD__(v5++, 1);
    if (v9) {
      goto LABEL_16;
    }
    float v7 = v7 + *v3;
LABEL_6:
    ++v3;
    if (!--v8)
    {
      float v4 = v7 / (float)v5;
      return LODWORD(v4) | ((unint64_t)(v2 == 0) << 32);
    }
  }
  BOOL v9 = __OFADD__(v6++, 1);
  if (!v9)
  {
    if ((float)((float)v2 * 0.5) <= (float)v6)
    {
      float v4 = -1.0;
      return LODWORD(v4) | ((unint64_t)(v2 == 0) << 32);
    }
    goto LABEL_6;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1000CF350(uint64_t a1)
{
  *(unsigned char *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) = 1;
  *(void *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha) = 0;
  uint64_t result = (uint64_t)[self jasperAvailable];
  if ((result & 1) == 0)
  {
    int v3 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
    if (!v3)
    {
      __break(1u);
      return result;
    }
    long long v4 = *(_OWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 48);
    v13[2] = *(_OWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 32);
    v13[3] = v4;
    uint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 64);
    long long v5 = *(_OWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 16);
    v13[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties);
    v13[1] = v5;
    id v6 = v3;
    sub_1000B8E1C((uint64_t)v13);
    sub_1000B60D4((uint64_t)v13, 0, 0);
    sub_1000B8F4C((uint64_t)v13);
  }
  sub_1000C51D0(*(void *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_state));
  sub_1000CDA30();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_1000DF9C8(*(void *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID), *(void *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8));
    swift_unknownObjectRelease();
  }
  if (qword_1004C2B40 != -1) {
    swift_once();
  }
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
  BOOL v9 = *(void **)(v7 + 8);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v11._object = (void *)0x8000000100424DC0;
  Log.default(_:isPrivate:)(v11, 0);
  swift_bridgeObjectRelease();
  if (qword_1004C2C10 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1004F8458 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
  uint64_t result = swift_beginAccess();
  *(double *)(v12 + 48) = *(double *)(v12 + 48) + 1.0;
  return result;
}

void sub_1000CF5A0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (unsigned char *)Strong;
    double v2 = *(double *)(Strong + OBJC_IVAR____TtC7Measure11LabelRender_labelSize);
    double v3 = *(double *)(Strong + OBJC_IVAR____TtC7Measure11LabelRender_labelSize + 8);
    uint64_t v4 = OBJC_IVAR____TtC7Measure11LabelRender_state;
    unint64_t v5 = *(void *)(Strong + OBJC_IVAR____TtC7Measure11LabelRender_state);
    BOOL v6 = v5 > 5;
    uint64_t v7 = (1 << v5) & 0x25;
    BOOL v8 = v6 || v7 == 0;
    if (!v8 && (*(unsigned char *)(Strong + OBJC_IVAR____TtC7Measure11LabelRender_capturing) & 1) == 0)
    {
      if (qword_1004C2F38 != -1) {
        swift_once();
      }
      double v2 = v2 + *(double *)&qword_1004F8728 + *(double *)&qword_1004F8728;
    }
    uint64_t v9 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
    [*(id *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_labelContainer] setSize:v2, v3 + 1.0];
    id v10 = *(id *)&v1[v9];
    [v10 size];
    float64_t v53 = v11;
    [*(id *)&v1[v9] size];
    v12.f64[0] = v53;
    v12.f64[1] = v13;
    id v14 = [self valueWithVectorFloat2:COERCE_DOUBLE(vcvt_f32_f64(v12))];
    NSString v15 = String._bridgeToObjectiveC()();
    [v10 setValue:v14 forAttributeNamed:v15];

    unint64_t v16 = *(void *)&v1[v4];
    if (v16 <= 5 && ((1 << v16) & 0x25) != 0 && (v1[OBJC_IVAR____TtC7Measure11LabelRender_capturing] & 1) == 0)
    {
      uint64_t v18 = OBJC_IVAR____TtC7Measure11LabelRender_labelChevron;
      [*(id *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_labelChevron] setHidden:0];
      uint64_t v19 = qword_1004C2F30;
      id v20 = *(id *)&v1[v18];
      if (v19 != -1) {
        swift_once();
      }
      uint64_t v54 = OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics;
      double v21 = *(double *)&qword_1004F8720;
      uint64_t v22 = qword_1004C27C8;
      id v23 = *(id *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics];
      if (v22 != -1) {
        swift_once();
      }
      UIContentSizeCategory v24 = (UIContentSizeCategory)(id)qword_1004F7DD8;
      char v25 = static UIContentSizeCategory.> infix(_:_:)();

      if (v25)
      {

        UIContentSizeCategory v24 = UIContentSizeCategoryAccessibilityLarge;
      }
      double v26 = v2 * 0.5;
      id v27 = self;
      id v28 = [v27 traitCollectionWithPreferredContentSizeCategory:v24];

      [v23 scaledValueForValue:v28 compatibleWithTraitCollection:v21];
      double v30 = v29;

      [v20 setPosition:v26 - v30];
      id v31 = *(id *)&v1[v18];
      [v31 size];
      if (qword_1004C2EF8 != -1) {
        swift_once();
      }
      uint64_t v32 = qword_1004F86E8;
      UIContentSizeCategory v33 = (UIContentSizeCategory)(id)qword_1004F7DD8;
      char v34 = static UIContentSizeCategory.> infix(_:_:)();

      if (v34)
      {

        UIContentSizeCategory v33 = UIContentSizeCategoryAccessibilityLarge;
      }
      uint64_t v35 = self;
      id v36 = [v27 traitCollectionWithPreferredContentSizeCategory:v33];

      id v37 = [v35 preferredFontForTextStyle:v32 compatibleWithTraitCollection:v36];
      [v37 pointSize];

      static CGSize.* infix(_:_:)();
      [*(id *)&v1[v18] size];
      static CGSize./ infix(_:_:)();
      [v31 setSize:];

      uint64_t v38 = OBJC_IVAR____TtC7Measure11LabelRender_labelText;
      uint64_t v39 = qword_1004C2F38;
      id v40 = *(id *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_labelText];
      if (v39 != -1) {
        swift_once();
      }
      double v41 = -*(double *)&qword_1004F8728;
      [v40 position:v54];
      [v40 setPosition:v41];

      if (v1[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft] != 1) {
        goto LABEL_31;
      }
      long long v42 = *(void **)&v1[v18];
      double v43 = *(double *)&qword_1004F8720;
      id v44 = *(void **)&v1[v55];
      UIContentSizeCategory v45 = (UIContentSizeCategory)(id)qword_1004F7DD8;
      id v46 = v42;
      id v47 = v44;
      char v48 = static UIContentSizeCategory.> infix(_:_:)();

      if (v48)
      {

        UIContentSizeCategory v45 = UIContentSizeCategoryAccessibilityLarge;
      }
      id v49 = [v27 traitCollectionWithPreferredContentSizeCategory:v45];

      [v47 scaledValueForValue:v49 compatibleWithTraitCollection:v43];
      double v51 = v50;

      [v46 setPosition:v51 - v26];
      double v52 = *(double *)&qword_1004F8728;
      id v17 = *(id *)&v1[v38];
      [v17 position];
      [v17 setPosition:v52];
    }
    else
    {
      [*(id *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_labelChevron] setHidden:1];
      id v17 = *(id *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_labelText];
      [v17 position];
      [v17 setPosition:0.0];
    }

    uint64_t v1 = v17;
LABEL_31:
  }
}

BOOL sub_1000CFC04()
{
  void (*v2)(void *__return_ptr, uint64_t);
  uint64_t v3;
  void (*v4)(void *__return_ptr, uint64_t);
  uint64_t v5;
  float32x2_t v6;
  CGPoint v7;
  CGFloat y;
  void v10[64];
  _OWORD __dst[32];
  void __src[64];

  type metadata accessor for MeasureCamera();
  uint64_t v1 = OBJC_IVAR____TtC7Measure11LabelRender__render;
  double v2 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v0
                                                                          + OBJC_IVAR____TtC7Measure11LabelRender__render)
                                                            + 144);
  double v3 = swift_retain();
  v2(__src, v3);
  swift_release();
  memcpy(__dst, __src, 0x1F8uLL);
  sub_10003FFD4((uint64_t)__dst);
  uint64_t v4 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v0 + v1) + 144);
  unint64_t v5 = swift_retain();
  v4(v10, v5);
  swift_release();
  memcpy(__src, v10, 0x1F8uLL);
  sub_10003FFD4((uint64_t)__src);
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
  uint64_t v7 = (CGPoint)vcvtq_f64_f32(v6);
  y = v7.y;
  return CGRectContainsPoint(*(CGRect *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea), v7);
}

uint64_t sub_1000CFD58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 16);
  return swift_retain();
}

uint64_t sub_1000CFD68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 176);
  return swift_retain();
}

uint64_t sub_1000CFD78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 88);
  return swift_retain();
}

uint64_t sub_1000CFD88@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 288);
  return swift_retain();
}

uint64_t sub_1000CFD98(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void))
{
  id v49 = a5;
  uint64_t v7 = v5;
  uint64_t v9 = a3(0);
  uint64_t v47 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  double v11 = (char *)&v43 - v10;
  uint64_t v12 = *v5;
  sub_100012894(a4);
  int v48 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  id v46 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  id v44 = v5;
  int64_t v45 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  while (1)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v45) {
      break;
    }
    id v27 = v46;
    unint64_t v28 = v46[v26];
    ++v21;
    if (!v28)
    {
      int64_t v21 = v26 + 1;
      if (v26 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v28 = v46[v21];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v7 = v44;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v21 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v45) {
              goto LABEL_34;
            }
            unint64_t v28 = v46[v21];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_22:
    double v30 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v25);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v33 = *(void *)(v47 + 72);
    uint64_t v34 = *(void *)(v12 + 56) + v33 * v25;
    if (v48)
    {
      sub_1000AA480(v34, (uint64_t)v11, v49);
    }
    else
    {
      sub_1000DBF3C(v34, (uint64_t)v11, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v35 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    id v23 = (void *)(*(void *)(v14 + 48) + 16 * v22);
    *id v23 = v31;
    v23[1] = v32;
    uint64_t result = sub_1000AA480((uint64_t)v11, *(void *)(v14 + 56) + v33 * v22, v49);
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v7 = v44;
  id v27 = v46;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v12 + 32);
  if (v42 >= 64) {
    bzero(v27, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v27 = -1 << v42;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v7 = v14;
  return result;
}

uint64_t sub_1000D014C(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C4548);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    int64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    unint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      sub_100027938(v22, v36);
    }
    else
    {
      sub_10005C070((uint64_t)v22, (uint64_t)v36);
      id v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)sub_100027938(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D0488(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9EC8);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                double v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v33 = -1 << v31;
              }
              double v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      uint64_t v28 = *(void *)(v5 + 56) + 24 * v19;
      long long v35 = *(_OWORD *)v28;
      uint64_t v29 = *(void *)(v28 + 16);
      if ((v34 & 1) == 0)
      {
        id v30 = (id)v35;
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v27;
      uint64_t v17 = *(void *)(v7 + 56) + 24 * v16;
      *(_OWORD *)uint64_t v17 = v35;
      *(void *)(v17 + 16) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D0790(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9E58);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v30 = a2;
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                double v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              double v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      char v21 = *(unsigned char *)(*(void *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(unsigned char *)(*(void *)(v7 + 56) + v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_1000D0A58(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9EA0);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        int64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v16 >= v11) {
          goto LABEL_20;
        }
        unint64_t v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          int64_t v13 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_20;
          }
          unint64_t v17 = v8[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_20:
              swift_release();
              if (a2)
              {
                uint64_t v19 = 1 << *(unsigned char *)(v5 + 32);
                if (v19 > 63) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v19 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v8 = -1 << v19;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_27;
                }
                if (v13 >= v11) {
                  goto LABEL_20;
                }
                unint64_t v17 = v8[v13];
                ++v18;
                if (v17) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v13 = v18;
          }
        }
LABEL_19:
        unint64_t v10 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      unint64_t result = sub_1000D6CD4(*(unsigned char *)(*(void *)(v5 + 48) + v15), *(void *)(*(void *)(v5 + 56) + 8 * v15), v6);
    }
  }
  unint64_t result = swift_release();
  void *v3 = v6;
  return result;
}

uint64_t sub_1000D0C1C(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9E60);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                double v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v35);
              }
              else {
                uint64_t *v9 = v32;
              }
              double v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      char v30 = *(void **)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        id v31 = v30;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D0ED4(uint64_t a1, int a2)
{
  double v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100012894(&qword_1004C9F00);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    unint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    unint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    BOOL v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              double v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      char v28 = *(unsigned char *)(*(void *)(v9 + 56) + v21);
      sub_1000DBFF4(&qword_1004C86E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(unsigned char *)(*(void *)(v11 + 56) + v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

uint64_t sub_1000D12F8(uint64_t a1, int a2)
{
  double v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100012894(&qword_1004C9F08);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  BOOL v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          double v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    sub_1000DBFF4(&qword_1004C86E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  double v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v12;
  return result;
}

uint64_t sub_1000D171C(uint64_t a1, char a2)
{
  return sub_1000D1A30(a1, a2, &qword_1004C9E48);
}

uint64_t sub_1000D1728(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9E50);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          double v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    int v33 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  double v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D1A30(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100012894(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    int v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v4 = v8;
  return result;
}

uint64_t sub_1000D1D3C(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9F10);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v30 = a2;
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                double v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              double v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D2004(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9EF0);
  char v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v40 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v40 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          double v3 = v38;
          if ((v41 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v40 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    char v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 48 * v21;
    uint64_t v34 = *(void *)v33;
    long long v42 = *(_OWORD *)(v33 + 24);
    long long v43 = *(_OWORD *)(v33 + 8);
    uint64_t v35 = *(void **)(v33 + 40);
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v36 = v35;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 48 * v17;
    *(void *)uint64_t v19 = v34;
    *(_OWORD *)(v19 + 8) = v43;
    *(_OWORD *)(v19 + 24) = v42;
    *(void *)(v19 + 40) = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  double v3 = v38;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v41 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D237C(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9EE8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    id v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        unint64_t v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v23 = v36[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              double v3 = v2;
              if (v37)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      long long v38 = *(_OWORD *)v32;
      uint64_t v33 = *(void *)(v32 + 16);
      if ((v37 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(_OWORD *)uint64_t v19 = v38;
      *(void *)(v19 + 16) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D2698(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9EE0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v37 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v36 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v36) {
          goto LABEL_33;
        }
        unint64_t v23 = v37[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v23 = v37[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_33:
              swift_release();
              double v3 = v2;
              if (v38)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v37 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v23 = v37[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 12 * v21;
      uint64_t v33 = *(void *)v32;
      int v34 = *(_DWORD *)(v32 + 8);
      if ((v38 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = *(void *)(v7 + 56) + 12 * v17;
      *(void *)uint64_t v19 = v33;
      *(_DWORD *)(v19 + 8) = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D29AC(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9EF8);
  char v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v38 = (uint64_t *)(v5 + 64);
    uint64_t v39 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v36 = v3;
    int64_t v37 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
        if (v40) {
          goto LABEL_10;
        }
      }
      else
      {
        int64_t v24 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v24 >= v37) {
          goto LABEL_33;
        }
        unint64_t v25 = v38[v24];
        ++v8;
        if (!v25)
        {
          int64_t v8 = v24 + 1;
          if (v24 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v25 = v38[v8];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                double v3 = v36;
                goto LABEL_40;
              }
              if (v35 >= 64) {
                bzero(v38, 8 * v37);
              }
              else {
                *char v38 = v34;
              }
              double v3 = v36;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v8 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v25 = v38[v8];
                ++v26;
                if (v25) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v8 = v26;
          }
        }
LABEL_22:
        unint64_t v11 = (v25 - 1) & v25;
        unint64_t v16 = __clz(__rbit64(v25)) + (v8 << 6);
        if (v40)
        {
LABEL_10:
          uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
          uint64_t v18 = *(void *)(v5 + 56) + 304 * v16;
          long long v47 = *(_OWORD *)v18;
          long long v48 = *(_OWORD *)(v18 + 16);
          char v19 = *(unsigned char *)(v18 + 48);
          long long v52 = *(_OWORD *)(v18 + 80);
          long long v53 = *(_OWORD *)(v18 + 64);
          long long v49 = *(_OWORD *)(v18 + 32);
          long long v50 = *(_OWORD *)(v18 + 96);
          long long v51 = *(_OWORD *)(v18 + 112);
          char v44 = *(unsigned char *)(v18 + 136);
          char v45 = *(unsigned char *)(v18 + 128);
          int v54 = *(_DWORD *)(v18 + 132);
          int v55 = *(_DWORD *)(v18 + 140);
          char v41 = *(unsigned char *)(v18 + 144);
          char v42 = *(unsigned char *)(v18 + 156);
          uint64_t v56 = *(void *)(v18 + 148);
          uint64_t v57 = *(void *)(v18 + 160);
          char v43 = *(unsigned char *)(v18 + 168);
          char v20 = *(unsigned char *)(v18 + 176);
          int v58 = *(_DWORD *)(v18 + 172);
          int v59 = *(_DWORD *)(v18 + 180);
          char v21 = *(unsigned char *)(v18 + 184);
          char v22 = *(unsigned char *)(v18 + 192);
          int v60 = *(_DWORD *)(v18 + 188);
          char v61 = *(unsigned char *)(v18 + 193);
          char v23 = *(unsigned char *)(v18 + 224);
          int v64 = *(_DWORD *)(v18 + 228);
          char v46 = *(unsigned char *)(v18 + 232);
          long long v66 = *(_OWORD *)(v18 + 256);
          long long v67 = *(_OWORD *)(v18 + 240);
          long long v65 = *(_OWORD *)(v18 + 272);
          long long v62 = *(_OWORD *)(v18 + 208);
          long long v63 = *(_OWORD *)(v18 + 288);
          goto LABEL_24;
        }
      }
      uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      memcpy(__dst, (const void *)(*(void *)(v5 + 56) + 304 * v16), 0x130uLL);
      long long v66 = __dst[16];
      long long v67 = __dst[15];
      long long v65 = __dst[17];
      int v64 = DWORD1(__dst[14]);
      char v46 = BYTE8(__dst[14]);
      long long v62 = __dst[13];
      long long v63 = __dst[18];
      char v23 = __dst[14];
      int v60 = HIDWORD(__dst[11]);
      char v61 = BYTE1(__dst[12]);
      char v22 = __dst[12];
      char v21 = BYTE8(__dst[11]);
      int v58 = HIDWORD(__dst[10]);
      int v59 = DWORD1(__dst[11]);
      char v20 = __dst[11];
      uint64_t v56 = *(void *)((char *)&__dst[9] + 4);
      uint64_t v57 = *(void *)&__dst[10];
      char v42 = BYTE12(__dst[9]);
      char v43 = BYTE8(__dst[10]);
      char v41 = __dst[9];
      int v54 = DWORD1(__dst[8]);
      int v55 = HIDWORD(__dst[8]);
      char v44 = BYTE8(__dst[8]);
      char v45 = __dst[8];
      long long v52 = __dst[5];
      long long v53 = __dst[4];
      long long v50 = __dst[6];
      long long v51 = __dst[7];
      char v19 = __dst[3];
      long long v48 = __dst[1];
      long long v49 = __dst[2];
      long long v47 = __dst[0];
      sub_1000DBFA4((uint64_t)__dst);
LABEL_24:
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v12 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v13 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      LOBYTE(__dst[0]) = v19;
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v17;
      uint64_t v14 = *(void *)(v7 + 56) + 304 * v13;
      *(_OWORD *)uint64_t v14 = v47;
      *(_OWORD *)(v14 + 16) = v48;
      *(_OWORD *)(v14 + 32) = v49;
      *(unsigned char *)(v14 + 48) = v19;
      *(_OWORD *)(v14 + 64) = v53;
      *(_OWORD *)(v14 + 80) = v52;
      *(_OWORD *)(v14 + 96) = v50;
      *(_OWORD *)(v14 + 112) = v51;
      *(unsigned char *)(v14 + 128) = v45;
      *(_DWORD *)(v14 + 132) = v54;
      *(unsigned char *)(v14 + 136) = v44;
      *(_DWORD *)(v14 + 140) = v55;
      *(unsigned char *)(v14 + 144) = v41;
      *(void *)(v14 + 148) = v56;
      *(unsigned char *)(v14 + 156) = v42;
      *(void *)(v14 + 160) = v57;
      *(unsigned char *)(v14 + 168) = v43;
      *(_DWORD *)(v14 + 172) = v58;
      *(unsigned char *)(v14 + 176) = v20;
      *(_DWORD *)(v14 + 180) = v59;
      *(unsigned char *)(v14 + 184) = v21;
      *(_DWORD *)(v14 + 188) = v60;
      *(unsigned char *)(v14 + 192) = v22;
      *(unsigned char *)(v14 + 193) = v61;
      *(_OWORD *)(v14 + 208) = v62;
      *(unsigned char *)(v14 + 224) = v23;
      *(_DWORD *)(v14 + 228) = v64;
      *(unsigned char *)(v14 + 232) = v46;
      *(_OWORD *)(v14 + 240) = v67;
      *(_OWORD *)(v14 + 256) = v66;
      *(_OWORD *)(v14 + 272) = v65;
      *(_OWORD *)(v14 + 288) = v63;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D2F44(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9F18);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = v3;
    int64_t v34 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v34) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                double v3 = v33;
                goto LABEL_40;
              }
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), 8 * v34);
              }
              else {
                uint64_t *v9 = v31;
              }
              double v3 = v33;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D3200(uint64_t a1, int a2)
{
  double v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100012894(&qword_1004C9ED0);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    int64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    char v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    char v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              double v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      sub_1000DBFF4(&qword_1004C9ED8, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

uint64_t sub_1000D3624(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9E78);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  BOOL v34 = v2;
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          double v3 = v34;
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v35 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void *)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((v36 & 1) == 0) {
      swift_retain();
    }
    Hasher.init(_seed:)();
    (*(void (**)(char *))(*(void *)v31 + 184))(v37);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  double v3 = v34;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D3940(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9EA8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v30 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v30) {
          goto LABEL_33;
        }
        unint64_t v20 = v31[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v30) {
            goto LABEL_33;
          }
          unint64_t v20 = v31[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v30)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                double v3 = v2;
                goto LABEL_40;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              double v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v31[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v30) {
                  goto LABEL_33;
                }
                unint64_t v20 = v31[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      Swift::UInt v26 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      unint64_t v27 = *(void **)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        id v28 = v27;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D3C0C(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9E18);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          double v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  double v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D3F3C(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9EB8);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          double v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    long long v38 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + 16 * v21 + 8);
    if ((a2 & 1) == 0)
    {
      swift_retain();
      id v32 = v31;
      id v33 = v30;
    }
    Hasher.init(_seed:)();
    type metadata accessor for AnyKeyPath();
    dispatch thunk of Hashable.hash(into:)();
    id v14 = v31;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      long long v19 = v38;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      long long v19 = v38;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v18) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  double v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D4278(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9EB0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v19 >= v11) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v11)
        {
LABEL_34:
          swift_release();
          double v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v22;
      }
    }
LABEL_21:
    unint64_t v10 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_22:
    uint64_t v23 = *(void *)(v5 + 48);
    unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
    int64_t v25 = *(void **)(v23 + 16 * v18 + 8);
    long long v38 = *(_OWORD *)(v23 + 16 * v18);
    if (a2)
    {
      sub_100027938(v24, v39);
    }
    else
    {
      sub_10005C070((uint64_t)v24, (uint64_t)v39);
      swift_retain();
      id v26 = v25;
    }
    Hasher.init(_seed:)();
    type metadata accessor for AnyKeyPath();
    dispatch thunk of Hashable.hash(into:)();
    id v27 = v25;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      long long v16 = v38;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      long long v16 = v38;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v15) = v16;
    uint64_t result = (uint64_t)sub_100027938(v39, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  double v3 = v36;
  unint64_t v20 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v20, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v20 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D45B8(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9E90);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                double v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v32;
              }
              double v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D4860(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100012894(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v33 = -1 << v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
    char v35 = v4;
    int64_t v36 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }
      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v36) {
          goto LABEL_33;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v4 = v35;
                goto LABEL_40;
              }
              if (v34 >= 64) {
                bzero((void *)(v6 + 64), 8 * v36);
              }
              else {
                *uint64_t v10 = v33;
              }
              uint64_t v4 = v35;
              *(void *)(v6 + 16) = 0;
              break;
            }
            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v9 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v24;
          }
        }
LABEL_30:
        unint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void *)(*(void *)(v6 + 48) + v29);
      uint64_t v31 = *(void **)(*(void *)(v6 + 56) + v29);
      if ((a2 & 1) == 0) {
        id v32 = v31;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v4 = v8;
  return result;
}

uint64_t sub_1000D4B10(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100012894(&qword_1004C9E98);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  *uint64_t v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D4DC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000D5740(a1, a2, a3, a4, type metadata accessor for MetricsManager.EdgeGuideMetric, &qword_1004C9E38, type metadata accessor for MetricsManager.EdgeGuideMetric, type metadata accessor for MetricsManager.EdgeGuideMetric);
}

uint64_t sub_1000D4E10(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000D5740(a1, a2, a3, a4, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric, &qword_1004C9E40, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric);
}

_OWORD *sub_1000D4E58(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1000E214C(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1000D74C4();
      goto LABEL_7;
    }
    sub_1000D014C(v12, a3 & 1);
    uint64_t v18 = sub_1000E214C(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      unint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for Key(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    unint64_t v16 = (_OWORD *)(v15[7] + 32 * v9);
    sub_100013218((uint64_t)v16);
    return sub_100027938(a1, v16);
  }
LABEL_13:
  sub_1000D6E50(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t sub_1000D4F9C(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000E21E0(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D7850();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1 & 1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(unsigned char *)(v16[7] + v10) = a1 & 1;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000D0790(result, a3 & 1);
  uint64_t result = sub_1000E21E0(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D50D0(uint64_t a1, unsigned __int8 a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000E224C(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D79DC();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000D0A58(result, a3 & 1);
  uint64_t result = sub_1000E224C(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000D51FC(uint64_t a1, char a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000E237C(a3);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a2 & 1) == 0)
  {
    sub_1000D7B6C();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v20 = 8 * v10;
    *(double *)(v16[6] + v20) = a3;
    *(void *)(v16[7] + v20) = a1;
    uint64_t v21 = v16[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_1000D0C1C(v13, a2 & 1);
  unint64_t v18 = sub_1000E237C(a3);
  if ((v14 & 1) == (v19 & 1))
  {
    unint64_t v10 = v18;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1000D5334(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_1000D535C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000D5740(a1, a2, a3, a4, type metadata accessor for MetricsManager.PersonHeightMetric, &qword_1004C9EC0, type metadata accessor for MetricsManager.PersonHeightMetric, type metadata accessor for MetricsManager.PersonHeightMetric);
}

void sub_1000D53A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1000D53B0(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1000E24F8(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(unsigned char *)(v20[7] + v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D7D50();
    goto LABEL_7;
  }
  sub_1000D0ED4(result, a3 & 1);
  uint64_t result = sub_1000E24F8(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1000D6EB8(v14, (uint64_t)v11, a1, v20);
}

void sub_1000D554C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_1000D5558(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1000E20D4(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1000D8480(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1000D1A30(v17, a4 & 1, a5);
  unint64_t v22 = sub_1000E20D4(a2, a3);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  unint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
  *unint64_t v24 = a2;
  v24[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v27;

  swift_bridgeObjectRetain();
}

void sub_1000D56E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_1000D56EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1000D56F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000D5740(a1, a2, a3, a4, type metadata accessor for MetricsManager.VerticalGuideMetric, &qword_1004C9E30, type metadata accessor for MetricsManager.VerticalGuideMetric, type metadata accessor for MetricsManager.VerticalGuideMetric);
}

uint64_t sub_1000D5740(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(void), uint64_t *a6, uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  uint64_t v12 = (void **)v8;
  BOOL v16 = (void *)*v8;
  unint64_t v18 = sub_1000E20D4(a2, a3);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = v16[3];
  if (v23 >= v21 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v24 = *v12;
    if (v22)
    {
LABEL_8:
      uint64_t v25 = v24[7];
      uint64_t v26 = a8(0);
      return sub_1000DC03C(a1, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v18, a5);
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a4 & 1) == 0)
  {
    sub_1000D7250(a5, a6, a7);
    goto LABEL_7;
  }
  sub_1000CFD98(v21, a4 & 1, a5, a6, a7);
  unint64_t v28 = sub_1000E20D4(a2, a3);
  if ((v22 & 1) != (v29 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v28;
  unint64_t v24 = *v12;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1000D6DA4(v18, a2, a3, a1, v24, a5, a7);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D58E8(uint64_t a1, uint64_t a2, char a3, float a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000E20D4(a1, a2);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D82D0();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(float *)(v18[7] + 4 * v12) = a4;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000D1728(result, a3 & 1);
  uint64_t result = sub_1000E20D4(a1, a2);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  BOOL v20 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v20 = a1;
  v20[1] = a2;
  *(float *)(v18[7] + 4 * v12) = a4;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

void sub_1000D5A50(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1000D5A5C(int *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  int v10 = *a1;
  int v9 = a1[1];
  int v12 = a1[2];
  int v11 = a1[3];
  int v14 = a1[4];
  int v13 = a1[5];
  uint64_t v15 = (void *)*v4;
  unint64_t v17 = sub_1000E20D4(a2, a3);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t result = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v5;
    if (v21)
    {
LABEL_8:
      unint64_t v24 = (_DWORD *)(v23[7] + 24 * v17);
      *unint64_t v24 = v10;
      v24[1] = v9;
      v24[2] = v12;
      v24[3] = v11;
      uint64_t v24[4] = v14;
      unsigned char v24[5] = v13;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D89D0();
    goto LABEL_7;
  }
  sub_1000D237C(result, a4 & 1);
  uint64_t result = sub_1000E20D4(a2, a3);
  if ((v21 & 1) != (v25 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = result;
  uint64_t v23 = *v5;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  v26[0] = v10;
  v26[1] = v9;
  v26[2] = v12;
  v26[3] = v11;
  v26[4] = v14;
  v26[5] = v13;
  sub_1000D6FCC(v17, a2, a3, (uint64_t)v26, v23);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D5BE4(uint64_t a1, uint64_t a2, char a3, float a4, float a5, float a6)
{
  uint64_t v7 = (void **)v6;
  int v14 = (void *)*v6;
  unint64_t v16 = sub_1000E20D4(a1, a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (float *)(v22[7] + 12 * v16);
      *uint64_t v23 = a4;
      v23[1] = a5;
      v23[2] = a6;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D8B94();
    goto LABEL_7;
  }
  sub_1000D2698(result, a3 & 1);
  uint64_t result = sub_1000E20D4(a1, a2);
  if ((v20 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
  uint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1000D7028(v16, a1, a2, v22, a4, a5, a6);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D5D44(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000E20D4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000D87BC();
LABEL_7:
    BOOL v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 48 * v12;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      long long v21 = a1[1];
      *(_OWORD *)uint64_t v19 = *a1;
      *(_OWORD *)(v19 + 16) = v21;
      *(_OWORD *)(v19 + 32) = a1[2];
      return result;
    }
    goto LABEL_11;
  }
  sub_1000D2004(v15, a4 & 1);
  unint64_t v22 = sub_1000E20D4(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  BOOL v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  char v24 = (uint64_t *)(v18[6] + 16 * v12);
  *char v24 = a2;
  v24[1] = a3;
  char v25 = (_OWORD *)(v18[7] + 48 * v12);
  long long v26 = a1[1];
  _OWORD *v25 = *a1;
  v25[1] = v26;
  v25[2] = a1[2];
  uint64_t v27 = v18[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D5F00(uint64_t a1, char a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000E237C(a3);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D8F38();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(double *)(v16[6] + v19) = a3;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000D2F44(result, a2 & 1);
  uint64_t result = sub_1000E237C(a3);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D6038(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1000E25CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D90DC();
    goto LABEL_7;
  }
  sub_1000D3200(result, a3 & 1);
  uint64_t result = sub_1000E25CC(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1000D70C4(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1000D61D4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000E26A0(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D9370();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000D3624(result, a3 & 1);
  uint64_t result = sub_1000E26A0(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_17:
    type metadata accessor for WorldPlane();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  BOOL v16 = (void *)*v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v18 = 8 * v10;
  *(void *)(v16[6] + v18) = a2;
  *(void *)(v16[7] + v18) = a1;
  uint64_t v19 = v16[2];
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v16[2] = v21;

  return swift_retain();
}

void sub_1000D632C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000E21E0(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000D9514();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_1000D3940(v13, a3 & 1);
  uint64_t v18 = sub_1000E21E0(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    unint64_t v10 = v18;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1000D6464(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1000E214C(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1000D96B8();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1000D3C0C(v12, a3 & 1);
  uint64_t v17 = sub_1000E214C(a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    type metadata accessor for Key(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v22;

  id v23 = a2;
}

void sub_1000D65C8(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_1000E272C(a2, a3);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v15 = v10;
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16 >= v14 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_1000D9860();
LABEL_7:
    uint64_t v17 = (void *)*v5;
    if (v15)
    {
LABEL_8:
      uint64_t v18 = v17[7];

      *(void *)(v18 + 8 * v11) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1000D3F3C(v14, a4 & 1);
  unint64_t v19 = sub_1000E272C(a2, a3);
  if ((v15 & 1) != (v20 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v11 = v19;
  uint64_t v17 = (void *)*v5;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  v17[(v11 >> 6) + 8] |= 1 << v11;
  BOOL v21 = (uint64_t *)(v17[6] + 16 * v11);
  uint64_t *v21 = a2;
  v21[1] = (uint64_t)a3;
  *(void *)(v17[7] + 8 * v11) = a1;
  uint64_t v22 = v17[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v17[2] = v24;
  swift_retain();

  id v25 = a3;
}

_OWORD *sub_1000D6750(_OWORD *a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v9 = (void *)*v4;
  unint64_t v11 = sub_1000E272C(a2, a3);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 < v14 || (a4 & 1) == 0)
  {
    if (v16 >= v14 && (a4 & 1) == 0)
    {
      sub_1000D9A28();
      goto LABEL_7;
    }
    sub_1000D4278(v14, a4 & 1);
    unint64_t v20 = sub_1000E272C(a2, a3);
    if ((v15 & 1) == (v21 & 1))
    {
      unint64_t v11 = v20;
      uint64_t v17 = *v5;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v17 = *v5;
  if (v15)
  {
LABEL_8:
    uint64_t v18 = (_OWORD *)(v17[7] + 32 * v11);
    sub_100013218((uint64_t)v18);
    return sub_100027938(a1, v18);
  }
LABEL_13:
  sub_1000D717C(v11, a2, (uint64_t)a3, a1, v17);
  swift_retain();

  return a3;
}

uint64_t sub_1000D68B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000E24BC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D9C0C();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000D45B8(result, a3 & 1);
  uint64_t result = sub_1000E24BC(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000D69E8(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_1000D6A10(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t), uint64_t *a5)
{
  uint64_t v8 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = a4(a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1000D9DB4(a5);
LABEL_7:
    BOOL v20 = (void *)*v8;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    uint64_t v24 = 8 * v14;
    *(void *)(v20[6] + v24) = a2;
    *(void *)(v20[7] + v24) = a1;
    uint64_t v25 = v20[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      return;
    }
    goto LABEL_14;
  }
  sub_1000D4860(v17, a3 & 1, a5);
  uint64_t v22 = a4(a2);
  if ((v18 & 1) == (v23 & 1))
  {
    unint64_t v14 = v22;
    BOOL v20 = (void *)*v8;
    if (v18) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1000D6B6C(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_1000D6B94(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000E24BC(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D9F50();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v21 = (void *)(v18[7] + 16 * v12);
    void *v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000D4B10(result, a4 & 1);
  uint64_t result = sub_1000E24BC(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_1000D6CD4(unsigned __int8 a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  unsigned __int8 v6 = a1 - 3;
  if ((a1 - 3) >= 7u)
  {
    Hasher._combine(_:)(7uLL);
    unsigned __int8 v6 = a1;
  }
  Hasher._combine(_:)(v6);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(unsigned char *)(a3[6] + result) = a1;
  *(void *)(a3[7] + 8 * result) = a2;
  ++a3[2];
  return result;
}

uint64_t sub_1000D6DA4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  char v11 = (void *)(a5[6] + 16 * a1);
  void *v11 = a2;
  v11[1] = a3;
  uint64_t v12 = a5[7];
  uint64_t v13 = a6(0);
  uint64_t result = sub_1000AA480(a4, v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a7);
  uint64_t v15 = a5[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a5[2] = v17;
  }
  return result;
}

_OWORD *sub_1000D6E50(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_100027938(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_1000D6EB8(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_1000D6F70(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + 48 * result);
  long long v7 = a4[1];
  *uint64_t v6 = *a4;
  v6[1] = v7;
  v6[2] = a4[2];
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_1000D6FCC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  uint64_t v6 = a5[7] + 24 * result;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a4;
  *(void *)(v6 + 16) = *(void *)(a4 + 16);
  uint64_t v7 = a5[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a5[2] = v9;
  }
  return result;
}

unint64_t sub_1000D7028(unint64_t result, uint64_t a2, uint64_t a3, void *a4, float a5, float a6, float a7)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = (void *)(a4[6] + 16 * result);
  void *v7 = a2;
  v7[1] = a3;
  BOOL v8 = (float *)(a4[7] + 12 * result);
  float *v8 = a5;
  v8[1] = a6;
  v8[2] = a7;
  uint64_t v9 = a4[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

unint64_t sub_1000D707C(unint64_t result, uint64_t a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(double *)(a3[6] + v4) = a4;
  *(void *)(a3[7] + v4) = a2;
  uint64_t v5 = a3[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a3[2] = v7;
  }
  return result;
}

uint64_t sub_1000D70C4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_1000D717C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v6 = (void *)(a5[6] + 16 * a1);
  *BOOL v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100027938(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_1000D71E8()
{
  return sub_1000D7250(type metadata accessor for MetricsManager.EdgeGuideMetric, &qword_1004C9E38, type metadata accessor for MetricsManager.EdgeGuideMetric);
}

void *sub_1000D721C()
{
  return sub_1000D7250(type metadata accessor for MetricsManager.SurfaceVectorGuideMetric, &qword_1004C9E40, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric);
}

void *sub_1000D7250(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = a1(0);
  uint64_t v33 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v30 - v7;
  sub_100012894(a2);
  uint64_t v30 = v3;
  uint64_t v9 = *v3;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v30 = v11;
    return result;
  }
  uint64_t result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    uint64_t result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  uint64_t v31 = v9 + 64;
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v32 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v32) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v27);
    ++v15;
    if (!v28)
    {
      int64_t v15 = v27 + 1;
      if (v27 + 1 >= v32) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v31 + 8 * v15);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v20 = __clz(__rbit64(v28)) + (v15 << 6);
LABEL_12:
    uint64_t v21 = 16 * v20;
    uint64_t v22 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unint64_t v25 = *(void *)(v33 + 72) * v20;
    sub_1000DBF3C(*(void *)(v9 + 56) + v25, (uint64_t)v8, a3);
    BOOL v26 = (void *)(*(void *)(v11 + 48) + v21);
    void *v26 = v23;
    v26[1] = v24;
    sub_1000AA480((uint64_t)v8, *(void *)(v11 + 56) + v25, a3);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v32) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v31 + 8 * v29);
  if (v28)
  {
    int64_t v15 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v15 >= v32) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v15);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000D74C4()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C4548);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10005C070(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_100027938(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D768C()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9EC8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 24 * v15;
    uint64_t v17 = *(void *)(v16 + 16);
    long long v18 = *(_OWORD *)v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v19 = *(void *)(v4 + 56) + 24 * v15;
    *(_OWORD *)uint64_t v19 = v18;
    *(void *)(v19 + 16) = v17;
    id v20 = (id)v18;
    id result = (void *)swift_retain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D7850()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9E58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D79DC()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9EA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000D7B6C()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9E60);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    int64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D7D10()
{
  return sub_1000D7250(type metadata accessor for MetricsManager.PersonHeightMetric, &qword_1004C9EC0, type metadata accessor for MetricsManager.PersonHeightMetric);
}

id sub_1000D7D44()
{
  return sub_1000D8480(&qword_1004C9E00);
}

void *sub_1000D7D50()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012894(&qword_1004C9F00);
  unint64_t v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v22 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v23 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v26 = v2 + 16;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    char v17 = *(unsigned char *)(*(void *)(v5 + 56) + v15);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(unsigned char *)(*(void *)(v7 + 56) + v15) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1000D7FE0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012894(&qword_1004C9F08);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_retain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_1000D8278()
{
  return sub_1000D8480(&qword_1004C9E28);
}

id sub_1000D8284()
{
  return sub_1000D8480(&qword_1004C9E20);
}

id sub_1000D8290()
{
  return sub_1000D8480(&qword_1004C9E48);
}

void *sub_1000D829C()
{
  return sub_1000D7250(type metadata accessor for MetricsManager.VerticalGuideMetric, &qword_1004C9E30, type metadata accessor for MetricsManager.VerticalGuideMetric);
}

void *sub_1000D82D0()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9E50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 4 * v15;
    int v20 = *(_DWORD *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v19) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000D8480(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100012894(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    int64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D862C()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9F10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000D87BC()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9EF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    int64_t v23 = *(void **)(v21 + 40);
    unint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    long long v25 = *(_OWORD *)(v21 + 8);
    long long v30 = *(_OWORD *)(v21 + 24);
    *unint64_t v24 = v19;
    v24[1] = v18;
    uint64_t v26 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v26 = v22;
    *(_OWORD *)(v26 + 8) = v25;
    *(_OWORD *)(v26 + 24) = v30;
    *(void *)(v26 + 40) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = v23;
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D89D0()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9EE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    long long v23 = *(_OWORD *)v21;
    uint64_t v24 = *(void *)(v21 + 16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    uint64_t v25 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)uint64_t v25 = v23;
    *(void *)(v25 + 16) = v24;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D8B94()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9EE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 12 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    int v22 = *(_DWORD *)(v21 + 8);
    long long v23 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t v24 = *(void *)v21;
    *long long v23 = v19;
    v23[1] = v18;
    uint64_t v25 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v25 = v24;
    *(_DWORD *)(v25 + 8) = v22;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D8D58()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9EF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 304 * v15;
    memcpy(v22, (const void *)(*(void *)(v2 + 56) + 304 * v15), 0x130uLL);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    memcpy((void *)(*(void *)(v4 + 56) + v18), v22, 0x130uLL);
    id result = (void *)sub_1000DBFA4((uint64_t)v22);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D8F38()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9F18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D90DC()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012894(&qword_1004C9ED0);
  long long v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *long long v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1000D9370()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9E78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000D9514()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9EA8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void **)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    id result = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000D96B8()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9E18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    int64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000D9860()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9EB8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 8 * v15;
    unint64_t v18 = *(void **)(*(void *)(v2 + 56) + v17);
    long long v23 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v23;
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    swift_retain();
    id v19 = *((id *)&v23 + 1);
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000D9A28()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9EB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v21 = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v17 = 32 * v15;
    sub_10005C070(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v21;
    sub_100027938(v22, (_OWORD *)(*(void *)(v4 + 56) + v17));
    swift_retain();
    id result = *((id *)&v21 + 1);
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D9C0C()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9E90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000D9D9C()
{
  return sub_1000D9DB4(&qword_1004C9E80);
}

id sub_1000D9DA8()
{
  return sub_1000D9DB4(&qword_1004C9E88);
}

id sub_1000D9DB4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100012894(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D9F50()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C9E98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *int64_t v22 = v21;
    v22[1] = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1000DA100(void *a1, char a2, void *a3, char a4, uint64_t a5, uint64_t a6, void *a7)
{
  unint64_t v14 = (char *)objc_allocWithZone((Class)type metadata accessor for LabelDetailsPlatterWrapper());
  id v15 = a1;
  id v16 = a3;
  uint64_t v17 = sub_1000DA460(v15, a2, v16, a4, a5, a6, v14);
  swift_unknownObjectWeakAssign();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v18 = v17;
  sub_100012894((uint64_t *)&unk_1004CA000);
  sub_10002179C((unint64_t *)&unk_1004CE660, (uint64_t *)&unk_1004CA000);
  uint64_t v19 = Publisher<>.sink(receiveValue:)();
  swift_release();
  *(void *)&v18[qword_1004C91F8] = v19;
  swift_release();
  sub_1000B4350();

  swift_release();
  return v18;
}

char *sub_1000DA294(void *a1, char a2, void *a3, char a4, uint64_t a5, uint64_t a6, void *a7, double a8, double a9, double a10, double a11)
{
  int64_t v22 = (char *)objc_allocWithZone((Class)type metadata accessor for LabelDetailsPlatterWrapper());
  id v23 = a1;
  id v24 = a3;
  int64_t v25 = sub_1000DA460(v23, a2, v24, a4, a5, a6, v22);
  swift_unknownObjectWeakAssign();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v26 = v25;
  sub_100012894((uint64_t *)&unk_1004CA000);
  sub_10002179C((unint64_t *)&unk_1004CE660, (uint64_t *)&unk_1004CA000);
  uint64_t v27 = Publisher<>.sink(receiveValue:)();
  swift_release();
  *(void *)&v26[qword_1004C91F8] = v27;
  swift_release();
  int64_t v28 = (double *)&v26[qword_1004C92B0];
  *int64_t v28 = a8;
  v28[1] = a9;
  v28[2] = a10;
  v28[3] = a11;
  *((unsigned char *)v28 + 32) = 0;
  sub_1000B4350();

  swift_release();
  return v26;
}

char *sub_1000DA460(void *a1, char a2, void *a3, char a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = qword_1004C91D0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v11 = sub_100012894(&qword_1004C9540);
  uint64_t v12 = qword_1004C2E30;
  int64_t v13 = a7;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1004F8630;
  id v15 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 272);
  swift_retain();
  *(void *)&a7[v9] = v15(KeyPath, v14);
  uint64_t v16 = qword_1004C91D8;
  uint64_t v17 = swift_getKeyPath();
  uint64_t v18 = sub_100012894(&qword_1004C9548);
  uint64_t v19 = qword_1004F8630;
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 272);
  swift_retain();
  *(void *)&v13[v16] = v20(v17, v19);
  *(void *)&v13[qword_1004C91E0] = 0;
  uint64_t v21 = qword_1004C91E8;
  *(void *)&v13[v21] = [objc_allocWithZone((Class)type metadata accessor for PillToPlatterTransitionView()) init];
  swift_unknownObjectWeakInit();
  *(void *)&v13[qword_1004C91F8] = 0;
  uint64_t v22 = qword_1004C9200;
  uint64_t v23 = sub_100012894((uint64_t *)&unk_1004C7F20);
  uint64_t v24 = swift_getKeyPath();
  uint64_t v25 = qword_1004F8630;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 272);
  swift_retain();
  *(void *)&v13[v22] = v26(v24, v25);
  *(void *)&v13[qword_1004C9208 + 8] = 0;
  swift_unknownObjectWeakInit();
  v13[qword_1004C9210] = 0;
  *(void *)&v13[qword_1004C9218] = 0;
  uint64_t v27 = qword_1004C9220;
  *(void *)&v13[v27] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v28 = qword_1004C9228;
  *(void *)&v13[v28] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v29 = qword_1004C9230;
  *(void *)&v13[v29] = [objc_allocWithZone((Class)UIImageView) init];
  uint64_t v30 = qword_1004C9238;
  *(void *)&v13[v30] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v31 = qword_1004C9240;
  *(void *)&v13[v31] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v32 = qword_1004C9248;
  *(void *)&v13[v32] = [objc_allocWithZone((Class)UIView) init];
  *(void *)&v13[qword_1004C9250] = 0;
  *(void *)&v13[qword_1004C9258] = 0;
  uint64_t v33 = qword_1004C9260;
  *(CFTimeInterval *)&v13[v33] = CACurrentMediaTime();
  uint64_t v34 = &v13[qword_1004C9268];
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  v34[16] = 1;
  char v35 = &v13[qword_1004C9270];
  *(void *)char v35 = 0;
  *((void *)v35 + 1) = 0;
  v35[16] = 1;
  int64_t v36 = &v13[qword_1004C9278];
  *(void *)int64_t v36 = 0;
  v36[8] = 1;
  v13[qword_1004C9280] = 0;
  *(void *)&v13[qword_1004C9288] = 0;
  *(void *)&v13[qword_1004C92A8] = 0x3F91111111111111;
  uint64_t v37 = &v13[qword_1004C92B0];
  *(_OWORD *)uint64_t v37 = 0u;
  *((_OWORD *)v37 + 1) = 0u;
  v37[32] = 1;
  *(void *)&v13[qword_1004C92B8] = 0;
  *(void *)&v13[qword_1004C9290] = a1;
  char v115 = a4;
  v13[qword_1004C9298] = a4 & 1;
  long long v38 = &v13[qword_1004C92A0];
  *(void *)long long v38 = a5;
  *((void *)v38 + 1) = a6;
  id v39 = a1;

  v125.receiver = v13;
  v125.super_class = ObjectType;
  char v40 = (char *)[super init];
  *(void *)&v40[qword_1004C9208 + 8] = &off_10048D068;
  swift_unknownObjectWeakAssign();
  uint64_t v41 = qword_1004C9240;
  int v42 = *(void **)&v40[qword_1004C9240];
  char v43 = v40;
  id v44 = v42;
  [v39 bounds];
  [v44 setFrame:];

  char v45 = *(void **)&v40[v41];
  char v46 = self;
  id v47 = v45;
  id v120 = v46;
  id v48 = [v46 clearColor];
  [v47 setBackgroundColor:v48];

  [*(id *)&v40[v41] setUserInteractionEnabled:0];
  uint64_t v49 = qword_1004C9248;
  uint64_t v50 = qword_1004C2ED8;
  id v51 = *(id *)&v43[qword_1004C9248];
  if (v50 != -1) {
    swift_once();
  }
  [v51 setBackgroundColor:qword_1004F86B8];

  id v52 = *(id *)&v43[v49];
  [v39 bounds];
  [v52 setFrame:];

  long long v53 = *(void **)&v43[v49];
  [v53 setUserInteractionEnabled:0];
  [v53 setAlpha:0.0];
  id v54 = [objc_allocWithZone((Class)UITapGestureRecognizer) initWithTarget:v43 action:"touchBackgroundFrom:"];
  [v54 setDelegate:v43];
  uint64_t v55 = qword_1004C9238;
  id v56 = [*(id *)&v43[qword_1004C9238] layer];
  [v56 setCornerCurve:kCACornerCurveContinuous];

  id v118 = self;
  if (([v118 jasperAvailable] & 1) == 0)
  {
    uint64_t v57 = *(void **)&v40[v41];
    [v39 addSubview:v57];
    [v57 addGestureRecognizer:v54];
    [v57 addSubview:*(void *)&v43[v49]];
    uint64_t v58 = qword_1004C2F18;
    id v59 = *(id *)&v43[v55];
    if (v58 != -1) {
      swift_once();
    }
    [v59 setBackgroundColor:qword_1004F8708];

    [*(id *)&v40[v41] addSubview:*(void *)&v43[v55]];
    [*(id *)&v43[v55] addSubview:*(void *)&v43[qword_1004C9220]];
  }
  uint64_t v60 = qword_1004C9228;
  char v61 = *(void **)&v43[v55];
  id v62 = *(id *)&v43[qword_1004C9228];
  [v61 bounds];
  [v62 setFrame:];

  id v63 = *(id *)&v43[v60];
  id v64 = [v120 clearColor];
  [v63 setBackgroundColor:v64];

  uint64_t v65 = qword_1004C2F00;
  id v66 = *(id *)&v43[v60];
  if (v65 != -1) {
    swift_once();
  }
  [v66 setTextColor:qword_1004F86F0];

  id v67 = *(id *)&v43[v60];
  sub_1001CD494();
  uint64_t v69 = v68;
  [v67 setFont:v68];

  uint64_t v70 = *(void **)&v43[v60];
  [v70 setTextAlignment:1];
  uint64_t v71 = self;
  id v72 = v70;
  id v73 = [v71 mainScreen];
  [v73 scale];
  double v75 = v74;

  id v76 = [v71 mainScreen];
  [v76 scale];
  double v78 = v77;

  CGAffineTransformMakeScale(&v124, 1.0 / v75, 1.0 / v78);
  [v72 setTransform:&v124];

  uint64_t v79 = qword_1004C9220;
  [*(id *)&v43[qword_1004C9220] addSubview:*(void *)&v43[v60]];
  uint64_t v80 = qword_1004C9230;
  id v81 = *(id *)&v43[qword_1004C9230];
  NSString v82 = String._bridgeToObjectiveC()();
  id v83 = [self imageNamed:v82];

  [v81 setImage:v83];
  id v84 = *(id *)&v43[v80];
  id result = (char *)[v84 image];
  if (!result)
  {
    __break(1u);
    goto LABEL_28;
  }
  char v86 = result;
  [result size];
  double v88 = v87;

  id result = (char *)[*(id *)&v43[v80] image];
  if (!result)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  uint64_t v89 = result;
  [result size];
  double v91 = v90;

  if (qword_1004C2EF8 != -1) {
    swift_once();
  }
  uint64_t v92 = qword_1004F86E8;
  if (qword_1004C27C8 != -1) {
    swift_once();
  }
  UIContentSizeCategory v93 = (UIContentSizeCategory)(id)qword_1004F7DD8;
  char v94 = static UIContentSizeCategory.> infix(_:_:)();

  int8x16_t v113 = v54;
  uint64_t v121 = (char *)v79;
  if (v94)
  {

    UIContentSizeCategory v93 = UIContentSizeCategoryAccessibilityLarge;
  }
  long long v95 = self;
  uint64_t v96 = self;
  id v97 = [v96 traitCollectionWithPreferredContentSizeCategory:v93];

  id v98 = [v95 preferredFontForTextStyle:v92 compatibleWithTraitCollection:v97];
  [v98 pointSize];
  double v100 = v99;

  uint64_t v101 = qword_1004F86E8;
  UIContentSizeCategory v102 = (UIContentSizeCategory)(id)qword_1004F7DD8;
  LOBYTE(v97) = static UIContentSizeCategory.> infix(_:_:)();

  if (v97)
  {

    UIContentSizeCategory v102 = UIContentSizeCategoryAccessibilityLarge;
  }
  double v103 = v88 / v91 * (v100 * 0.9);
  id v104 = [v96 traitCollectionWithPreferredContentSizeCategory:v102];

  id v105 = [v95 preferredFontForTextStyle:v101 compatibleWithTraitCollection:v104];
  [v105 pointSize];
  double v107 = v106;

  [v84 setBounds:0.0, 0.0, v103, v107 * 0.9];
  float v108 = *(void **)&v121[(void)v43];
  BOOL v109 = *(void **)&v43[v80];
  [v108 addSubview:v109];
  [v109 setAlpha:0.0];
  if (v115)
  {
    CGAffineTransformMakeRotation(&v124, 3.14159265);
    [v109 setTransform:&v124];
  }
  v43[qword_1004C9210] = a2;
  if ([v118 jasperAvailable])
  {
    uint64_t v110 = qword_1004C91E8;
    [*(id *)&v43[qword_1004C91E8] setAlpha:0.0];
    id v111 = *(id *)&v43[v110];
    id v112 = v108;
    [v111 addSubview:v112];
  }
  else
  {
    sub_1000B4350();
  }

  return v43;
}

id sub_1000DB104(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  sub_100012894(&qword_1004C9DF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003F87F0;
  *(void *)(inited + 32) = NSFontAttributeName;
  uint64_t v6 = NSFontAttributeName;
  sub_1001CD494();
  uint64_t v8 = v7;
  *(void *)(inited + 64) = sub_10001C99C(0, &qword_1004C4550);
  *(void *)(inited + 40) = v8;
  sub_1000E0F80(inited);
  if (a3)
  {
    uint64_t v19 = sub_10001C99C(0, &qword_1004C5548);
    *(void *)&long long v18 = a3;
    sub_100027938(&v18, v17);
    uint64_t v9 = NSForegroundColorAttributeName;
    id v10 = a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1000D4E58(v17, v9, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
  }
  id v12 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1000DBFF4((unint64_t *)&qword_1004C39E0, type metadata accessor for Key);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v15 = [v12 initWithString:v13 attributes:isa];
  swift_bridgeObjectRelease();

  return v15;
}

uint64_t sub_1000DB314()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000DB34C()
{
  return sub_1000C7DC4(*(void *)(v0 + 16));
}

uint64_t sub_1000DB354(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000DB364()
{
  return swift_release();
}

uint64_t sub_1000DB36C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894((uint64_t *)&unk_1004C68F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DB3D4(uint64_t a1)
{
  uint64_t v2 = sub_100012894((uint64_t *)&unk_1004C68F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DB434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894((uint64_t *)&unk_1004C68F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double sub_1000DB49C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_1000DB4BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000DB4D8(uint64_t result)
{
  *(unsigned char *)(result + 128) = 0;
  return result;
}

uint64_t sub_1000DB4E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DB50C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000DB544()
{
}

uint64_t sub_1000DB54C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 16);
  return swift_retain();
}

uint64_t sub_1000DB568@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 88);
  return swift_retain();
}

uint64_t sub_1000DB578@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 176);
  return swift_retain();
}

uint64_t sub_1000DB588@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 288);
  return swift_retain();
}

uint64_t sub_1000DB598()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000DB5D8()
{
  sub_1000C7A08(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_1000DB5E0()
{
  return sub_1000C6118();
}

void sub_1000DB608()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) = 3;
}

uint64_t sub_1000DB620()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

void sub_1000DB660()
{
  sub_1000CCA58(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_1000DB66C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000DB6A8(uint64_t a1)
{
  return sub_1000A7AC4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_1000DB6B8()
{
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  swift_retain();
  PublishedValue.wrappedValue.getter();
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v0 = (void *)sub_1000A3850();
  sub_100016F7C((uint64_t)__dst);
  if (v0)
  {
    MeasureCore.shared.unsafeMutableAddressor();
    swift_retain();
    char v1 = MeasureCore.isOccluded(_:in:withTolerance:)();
    swift_release();
    if ((v1 & 1) == 0)
    {
      swift_retain();
      char v3 = MeasureCore.isOccluded(_:in:withTolerance:)();
      swift_release();

      char v2 = v3 ^ 1;
      return v2 & 1;
    }
  }
  char v2 = 0;
  return v2 & 1;
}

uint64_t sub_1000DB7F0(char a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  void (*v41)(void *__return_ptr, uint64_t);
  uint64_t v42;
  void (*v43)(void *__return_ptr, uint64_t);
  uint64_t v44;
  float32x2_t v45;
  CGPoint v46;
  CGFloat y;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  char v51;
  CGRect *v52;
  uint64_t v53;
  long long v54;
  float v55;
  uint64_t v56;
  float v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float v63;
  void __src[64];
  _OWORD __dst[32];
  void v66[64];

  simd_float4x4.position.getter();
  id v54 = v11;
  simd_float4x4.position.getter();
  *(float32x2_t *)v15.f32 = vsub_f32(*(float32x2_t *)&v54, v12);
  float v14 = v13;
  v15.f32[2] = *((float *)&v54 + 2) - v13;
  float32x4_t v16 = vmulq_f32(v15, v15);
  unsigned __int32 v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
  uint64_t v57 = *(float *)&v17;
  id v59 = v12;
  if (a1)
  {
    char v61 = v15;
    simd_float4x4.position.getter();
    float32x4_t v15 = v61;
    *(float *)&unsigned __int32 v17 = v57;
  }
  float32x2_t v18 = vrsqrte_f32((float32x2_t)v17);
  float32x2_t v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17, vmul_f32(v18, v18)));
  uint64_t v60 = vmulq_n_f32(v15, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17, vmul_f32(v19, v19))).f32[0]);
  simd_float4x4.position.getter();
  simd_float4x4.position.getter();
  if (sub_1000DB6B8()) {
    return simd_float4x4.position.getter();
  }
  float v21 = sqrtf(v57);
  v22.i32[3] = HIDWORD(v54);
  *(float32x2_t *)v22.f32 = vsub_f32(v59, *(float32x2_t *)&v54);
  v22.f32[2] = v14 - *((float *)&v54 + 2);
  float32x4_t v23 = vmulq_f32(v22, v22);
  uint64_t v58 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1)));
  simd_float4x4.position.getter();
  long long v53 = OBJC_IVAR____TtC7Measure11LabelRender__render;
  id v52 = (CGRect *)(v9 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea);
  uint64_t result = simd_float4x4.position.getter();
  uint64_t v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  float32x4_t v30 = v60;
  id v51 = a1;
  while (1)
  {
    if (a1)
    {
      BOOL v31 = __OFADD__(v29++, 1);
      if (v31) {
        goto LABEL_29;
      }
      v28 ^= 1u;
      uint64_t v32 = 1;
    }
    else if (v28)
    {
      char v28 = 0;
      uint64_t v32 = 1;
    }
    else
    {
      BOOL v31 = __OFADD__(v29++, 1);
      if (v31) {
        goto LABEL_30;
      }
      char v28 = 1;
      uint64_t v32 = -1;
    }
    float v33 = (float)v27 * a10;
    float32x2_t v34 = vadd_f32(vmul_n_f32(*(float32x2_t *)v30.f32, v33), v24);
    float v35 = (float)(v60.f32[2] * v33) + v25;
    *(float32x2_t *)v26.f32 = vsub_f32(v34, v59);
    float v36 = v35 - v14;
    float32x4_t v37 = v26;
    v37.f32[2] = v35 - v14;
    float32x4_t v38 = vmulq_f32(v30, v37);
    float v39 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0];
    if (v39 >= 0.0 && v21 > v39) {
      break;
    }
LABEL_22:
    v26.i64[1] = LODWORD(v36);
    id v48 = vmulq_f32(v26, v26);
    if ((vmovn_s32(vcgtq_f32(v58, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))))).u8[0] & 1) == 0)
    {
      v49.i32[3] = HIDWORD(v54);
      *(float32x2_t *)v49.f32 = vsub_f32(v34, *(float32x2_t *)&v54);
      v49.f32[2] = v35 - *((float *)&v54 + 2);
      uint64_t v50 = vmulq_f32(v49, v49);
      if ((vmovn_s32(vcgtq_f32(v58, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))))).u8[0] & 1) == 0)return result; {
    }
      }
    uint64_t result = simd_float4x4.position.getter();
    float32x4_t v30 = v60;
    uint64_t v27 = v32 * v29;
    if ((unsigned __int128)(v32 * (__int128)v29) >> 64 != (v32 * v29) >> 63)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
  }
  uint64_t v55 = v35 - v14;
  id v56 = v26.i64[0];
  id v62 = v34;
  id v63 = v35;
  type metadata accessor for MeasureCamera();
  uint64_t v41 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v9 + v53) + 144);
  int v42 = swift_retain();
  v41(__src, v42);
  swift_release();
  memcpy(__dst, __src, 0x1F8uLL);
  sub_10003FFD4((uint64_t)__dst);
  char v43 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v9 + v53) + 144);
  id v44 = swift_retain();
  v43(__src, v44);
  swift_release();
  memcpy(v66, __src, 0x1F8uLL);
  sub_10003FFD4((uint64_t)v66);
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
  char v46 = (CGPoint)vcvtq_f64_f32(v45);
  y = v46.y;
  uint64_t result = CGRectContainsPoint(*v52, v46);
  if (!result || (uint64_t result = sub_1000DB6B8(), (result & 1) == 0))
  {
    a1 = v51;
    float32x2_t v34 = v62;
    float v35 = v63;
    float v36 = v55;
    v26.i64[0] = v56;
    goto LABEL_22;
  }
  uint64_t result = sub_1000CFC04();
  if (result) {
    return simd_float4x4.position.getter();
  }
  return result;
}

unint64_t sub_1000DBDC0(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t sub_1000DBDD0()
{
  void (*v7)(uint64_t *__return_ptr, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char v10;

  [*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode) alpha];
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_state);
  if (unint64_t)(v2 - 1) < 7 && ((0x4Du >> (v2 - 1))) {
    return 0;
  }
  uint64_t result = 0;
  if (v2 != 6)
  {
    float v4 = v1;
    if (fabsf(v4 + -1.0) <= 0.1)
    {
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (!Strong) {
        return 1;
      }
      uint64_t v6 = Strong;
      if ([self jasperAvailable])
      {
        uint64_t v7 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v6
                                                                                 + OBJC_IVAR____TtC7Measure9LabelView__historyUIState)
                                                                   + 144);
        uint64_t v8 = swift_retain();
        v7(&v9, v8);
        swift_release();
        if (v10)
        {
LABEL_9:
          swift_unknownObjectRelease();
          return 1;
        }
      }
      else if (*(void *)(v6 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8))
      {
        goto LABEL_9;
      }
      sub_1000CD588();
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1000DBF28()
{
  return sub_1000CF350(*(void *)(v0 + 16));
}

uint64_t sub_1000DBF30(uint64_t a1)
{
  return sub_1000B434C(a1, v1);
}

uint64_t sub_1000DBF3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000DBFA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DBFF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000DC03C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for LabelRender.AnimationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DC170);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelRender.AnimationType()
{
  return &type metadata for LabelRender.AnimationType;
}

unint64_t sub_1000DC1AC()
{
  unint64_t result = qword_1004C9F20;
  if (!qword_1004C9F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C9F20);
  }
  return result;
}

uint64_t initializeWithCopy for LabelRenderEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LabelRenderEvent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for LabelRenderEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for LabelRenderEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LabelRenderEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1000DC3D4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_1000DC3EC(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelRenderEvent()
{
  return &type metadata for LabelRenderEvent;
}

BOOL sub_1000DC42C(long long *a1, long long *a2)
{
  sub_1000DC4F4(a1, v4);
  sub_1000DC4F4(a2, v5);
  return sub_1000DC50C(v4, v5);
}

unint64_t sub_1000DC478(uint64_t a1)
{
  unint64_t result = sub_1000DC4A0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000DC4A0()
{
  unint64_t result = qword_1004C9F50;
  if (!qword_1004C9F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C9F50);
  }
  return result;
}

_OWORD *sub_1000DC4F4(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

BOOL sub_1000DC50C(long long *a1, long long *a2)
{
  sub_1000DC4F4(a1, &v22);
  uint64_t v3 = *((void *)&v22 + 1);
  if (!*((void *)&v22 + 1))
  {
    sub_1000DC4F4(a2, &v17);
    return *((void *)&v17 + 1) == 0;
  }
  uint64_t v4 = v22;
  double v6 = v23;
  double v5 = v24;
  double v8 = v25;
  double v7 = v26;
  sub_1000DC4F4(a2, &v17);
  if (!*((void *)&v17 + 1)) {
    return 0;
  }
  double v10 = v18;
  double v9 = v19;
  double v12 = v20;
  double v11 = v21;
  if (v4 == (void)v17 && v3 == *((void *)&v17 + 1))
  {
    if (v6 != v18 || v5 != v19) {
      return 0;
    }
    return v7 == v11 && v8 == v12;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if ((v15 & 1) != 0 && v6 == v10 && v5 == v9) {
    return v7 == v11 && v8 == v12;
  }
  return result;
}

void sub_1000DC610()
{
  void (*v13)(void *__return_ptr, uint64_t);
  id v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void __src[63];
  unsigned char __dst[512];

  uint64_t v1 = v0;
  long long v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v2);
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  swift_endAccess();
  double v19 = v4 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v4 + 64);
  uint64_t v8 = OBJC_IVAR____TtC7Measure9LabelView__render;
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    float32x4_t v16 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v9) {
      goto LABEL_23;
    }
    long long v17 = *(void *)(v19 + 8 * v16);
    ++v10;
    if (!v17)
    {
      int64_t v10 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_23;
      }
      long long v17 = *(void *)(v19 + 8 * v10);
      if (!v17)
      {
        int64_t v10 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_23;
        }
        long long v17 = *(void *)(v19 + 8 * v10);
        if (!v17)
        {
          int64_t v10 = v16 + 3;
          if (v16 + 3 >= v9) {
            goto LABEL_23;
          }
          long long v17 = *(void *)(v19 + 8 * v10);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v10 << 6);
LABEL_5:
    float v13 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v1 + v8) + 144);
    float v14 = *(id *)(*(void *)(v4 + 56) + 8 * v12);
    char v15 = swift_retain();
    v13(__src, v15);
    swift_release();
    memcpy(__dst, __src, 0x1F8uLL);
    sub_1000C88A0((uint64_t)__dst);
    sub_10003FFD4((uint64_t)__dst);
  }
  double v18 = v16 + 4;
  if (v18 >= v9)
  {
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  long long v17 = *(void *)(v19 + 8 * v18);
  if (v17)
  {
    int64_t v10 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v10 >= v9) {
      goto LABEL_23;
    }
    long long v17 = *(void *)(v19 + 8 * v10);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1000DC86C(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8);
  if (v2)
  {
    char v3 = result;
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection);
    uint64_t v5 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v5);
    swift_endAccess();
    uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
    swift_beginAccess();
    uint64_t v7 = *v6;
    if (*(void *)(v7 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_1000E20D4(v4, v2);
      if (v9)
      {
        int64_t v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
        swift_endAccess();
        unint64_t v11 = v10;
        swift_bridgeObjectRelease_n();
        if (v3)
        {
          sub_1000CD23C();
        }
        else if (v11[OBJC_IVAR____TtC7Measure11LabelRender_selectionState] - 1 <= 2)
        {
          unint64_t v12 = *(void **)&v11[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
          if (v12)
          {
            id v13 = v12;
            sub_1000B80E0();
          }
          sub_1000C7E6C();
        }

        goto LABEL_13;
      }
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
LABEL_13:
    swift_beginAccess();
    os_unfair_lock_unlock(v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1000DC9F4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v4);
  swift_endAccess();
  uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8);
  uint64_t v8 = (swift_isaMask & *a1) + 184;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = v7(v9);
  if (*(void *)(v6 + 16))
  {
    sub_1000E20D4(v10, v11);
    char v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_bridgeObjectRelease();
    if (v13)
    {
      swift_beginAccess();
      os_unfair_lock_unlock(v4);
      return swift_endAccess();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_bridgeObjectRelease();
  }
  uint64_t v65 = v4;
  v68.n128_u64[0] = (unint64_t)v7;
  v67.n128_u64[0] = v8;
  uint64_t v15 = v7(v14);
  v66.n128_u64[0] = v16;
  unsigned int v17 = [self jasperAvailable];
  double v18 = *(void **)(v2 + OBJC_IVAR____TtC7Measure9LabelView_sceneView);
  double v20 = *(double *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_editViewBounds);
  double v19 = *(double *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_editViewBounds + 8);
  double v21 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
  id v22 = *(id *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_parentView);
  id v23 = v18;
  uint64_t result = v21();
  uint64_t v25 = result;
  if (!v17)
  {
    id v33 = objc_allocWithZone((Class)type metadata accessor for LabelRender());
    uint64_t v32 = (uint64_t)sub_1000C6A20(v22, v15, v66.n128_i64[0], v23, v25, 0, 0, 1, v20, v19);
    float32x4_t v30 = (char *)v32;
LABEL_10:
    if (((*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x2C8))(v32) & 1) == 0) {
      v30[OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine] = 0;
    }
    *(void *)&v30[OBJC_IVAR____TtC7Measure11LabelRender_delegate + 8] = &off_10048D468;
    uint64_t v34 = swift_unknownObjectWeakAssign();
    uint64_t v35 = ((uint64_t (*)(uint64_t))v68.n128_u64[0])(v34);
    uint64_t v37 = v36;
    swift_beginAccess();
    float32x4_t v38 = v30;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v69 = *v5;
    uint64_t *v5 = 0x8000000000000000;
    sub_1000D53A4((uint64_t)v38, v35, v37, isUniquelyReferenced_nonNull_native);
    uint64_t *v5 = v69;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = swift_endAccess();
    uint64_t v41 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250);
    uint64_t v42 = ((uint64_t (*)(uint64_t))v41)(v40);
    if ((v42 & 0xC000000000000001) != 0)
    {
      char v43 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_23;
      }
      char v43 = *(id *)(v42 + 32);
    }
    id v44 = v43;
    uint64_t v45 = swift_bridgeObjectRelease();
    v46.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v44) + 0x2B0))(v45);
    __n128 v67 = v47;
    __n128 v68 = v46;
    __n128 v66 = v48;
    __n128 v64 = v49;

    uint64_t v50 = v41();
    if ((v50 & 0xC000000000000001) == 0)
    {
      if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
        __break(1u);
        goto LABEL_25;
      }
      id v51 = *(id *)(v50 + 40);
LABEL_18:
      id v52 = v51;
      uint64_t v53 = swift_bridgeObjectRelease();
      v54.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v52) + 0x2B0))(v53);
      __n128 v62 = v55;
      __n128 v63 = v54;
      __n128 v60 = v57;
      __n128 v61 = v56;

      sub_1000C7F3C(0, 0, v68, v67, v66, v64, v63, v62, v61, v60);
      if (qword_1004C2C10 == -1)
      {
LABEL_19:
        uint64_t v58 = qword_1004F8458;

        uint64_t v59 = v58 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
        swift_beginAccess();
        *(double *)(v59 + 40) = *(double *)(v59 + 40) + 1.0;
        swift_beginAccess();
        os_unfair_lock_unlock(v65);
        return swift_endAccess();
      }
LABEL_25:
      swift_once();
      goto LABEL_19;
    }
LABEL_23:
    id v51 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_18;
  }
  v64.n128_u64[0] = (unint64_t)v23;
  double v26 = *(void **)(v2 + OBJC_IVAR____TtC7Measure9LabelView_activityPresentingViewController);
  if (v26)
  {
    if (*(void *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_historyPressedPublisher))
    {
      id v27 = v26;
      sub_100012894((uint64_t *)&unk_1004CA000);
      sub_10002179C((unint64_t *)&unk_1004CE660, (uint64_t *)&unk_1004CA000);
      uint64_t v28 = Publisher.eraseToAnyPublisher()();
      id v29 = objc_allocWithZone((Class)type metadata accessor for LabelRender());
      float32x4_t v30 = sub_1000C6A20(v22, v15, v66.n128_i64[0], v23, v25, 0, 0, 1, v20, v19);
      BOOL v31 = *(void **)&v30[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController];
      *(void *)&v30[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController] = v26;

      *(void *)&v30[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher] = v28;
      uint64_t v32 = swift_release();
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DD050(void *a1, char a2, char a3)
{
  uint64_t v7 = (os_unfair_lock_s *)(v3 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v7);
  uint64_t v8 = swift_endAccess();
  uint64_t v9 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8))(v8);
  uint64_t v11 = v10;
  char v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v13 = *v12;
  if (!*(void *)(v13 + 16) || (unint64_t v14 = sub_1000E20D4(v9, v11), (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_13:
    swift_beginAccess();
    os_unfair_lock_unlock(v7);
    return swift_endAccess();
  }
  unint64_t v16 = *(void **)(*(void *)(v13 + 56) + 8 * v14);
  swift_endAccess();
  unsigned int v17 = v16;
  uint64_t v18 = swift_bridgeObjectRelease();
  double v19 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250);
  uint64_t v20 = ((uint64_t (*)(uint64_t))v19)(v18);
  if ((v20 & 0xC000000000000001) != 0)
  {
    double v21 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_16;
    }
    double v21 = *(id *)(v20 + 32);
  }
  id v22 = v21;
  uint64_t v23 = swift_bridgeObjectRelease();
  v24.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v22) + 0x2B0))(v23);
  __n128 v45 = v25;
  __n128 v46 = v24;
  __n128 v43 = v27;
  __n128 v44 = v26;

  uint64_t result = v19();
  if ((result & 0xC000000000000001) != 0)
  {
LABEL_16:
    id v29 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    id v29 = *(id *)(result + 40);
LABEL_9:
    float32x4_t v30 = v29;
    uint64_t v31 = swift_bridgeObjectRelease();
    v32.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v30) + 0x2B0))(v31);
    __n128 v41 = v33;
    __n128 v42 = v32;
    __n128 v39 = v35;
    __n128 v40 = v34;

    uint64_t v36 = sub_1000C7F3C(a2 & 1, a3 & 1, v46, v45, v44, v43, v42, v41, v40, v39);
    uint64_t v37 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xD0))(v36);
    uint64_t v38 = *(void *)&v17[OBJC_IVAR____TtC7Measure11LabelRender_state];
    *(void *)&v17[OBJC_IVAR____TtC7Measure11LabelRender_state] = v37;
    if (v37 != v38) {
      sub_1000C51D0(v37);
    }

    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DD37C(char *a1)
{
  unint64_t v5 = v1;
  uint64_t v6 = a1;
  uint64_t v7 = *(uint64_t (**)(void))((swift_isaMask & *(void *)a1) + 0x230);
  uint64_t v8 = v7();
  if ((v8 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_34:
      id v22 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_9;
    }
    uint64_t v9 = *(id *)(v8 + 32);
  }
  uint64_t v10 = v9;
  uint64_t v11 = swift_bridgeObjectRelease();
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v10) + 0xB8))(v11);
  uint64_t v14 = v13;

  unint64_t v2 = v1 + OBJC_IVAR____TtC7Measure9LabelView_labels;
  swift_beginAccess();
  uint64_t v15 = *(void *)v2;
  if (!*(void *)(*(void *)v2 + 16) || (unint64_t v16 = sub_1000E20D4(v12, v14), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_endAccess();
    __break(1u);
LABEL_46:
    swift_bridgeObjectRelease();
    uint64_t result = swift_endAccess();
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v18 = *(void **)(*(void *)(v15 + 56) + 8 * v16);
  swift_endAccess();
  double v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v3 = &OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters;
  unsigned int v4 = *(_DWORD *)&v19[OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters];

  uint64_t v20 = v7();
  double v21 = (char *)v20;
  if ((v20 & 0xC000000000000001) != 0) {
    goto LABEL_34;
  }
  if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_36;
  }
  id v22 = *(id *)(v20 + 40);
LABEL_9:
  uint64_t v23 = v22;
  v93.n128_u64[0] = v5;
  uint64_t v24 = swift_bridgeObjectRelease();
  uint64_t v25 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v23) + 0xB8))(v24);
  uint64_t v27 = v26;

  swift_beginAccess();
  v92.n128_u64[0] = v2;
  uint64_t v28 = *(void *)v2;
  if (!*(void *)(*(void *)v2 + 16)) {
    goto LABEL_46;
  }
  unint64_t v29 = sub_1000E20D4(v25, v27);
  if ((v30 & 1) == 0) {
    goto LABEL_46;
  }
  uint64_t v31 = *(void **)(*(void *)(v28 + 56) + 8 * v29);
  swift_endAccess();
  __n128 v32 = v31;
  swift_bridgeObjectRelease();
  unsigned int v33 = *(_DWORD *)&v32[*v3];

  unsigned __int8 v34 = [self jasperAvailable];
  __n128 v35 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v6) + 0xB8);
  id v36 = *(id *)(v93.n128_u64[0] + OBJC_IVAR____TtC7Measure9LabelView_parentView);
  uint64_t v37 = v35();
  uint64_t v39 = v38;
  double v41 = *(double *)(v93.n128_u64[0] + OBJC_IVAR____TtC7Measure9LabelView_editViewBounds);
  double v40 = *(double *)(v93.n128_u64[0] + OBJC_IVAR____TtC7Measure9LabelView_editViewBounds + 8);
  __n128 v42 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v6) + 0xD0);
  id v43 = *(id *)(v93.n128_u64[0] + OBJC_IVAR____TtC7Measure9LabelView_sceneView);
  uint64_t result = v42();
  uint64_t v45 = result;
  if ((v34 & 1) == 0)
  {
    id v52 = objc_allocWithZone((Class)type metadata accessor for LabelRender());
    uint64_t v51 = (uint64_t)sub_1000C6A20(v36, v37, v39, v43, v45, 1, v4 | ((unint64_t)v33 << 32), 0, v41, v40);
    double v21 = (char *)v51;
LABEL_16:
    unint64_t v2 = v92.n128_u64[0];
    uint64_t v3 = (uint64_t *)&swift_isaMask;
    uint64_t v7 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v6) + 0x248);
    uint64_t v53 = ((uint64_t (*)(uint64_t))v7)(v51);
    if ((v53 & 0xC000000000000001) == 0)
    {
      unint64_t v54 = v93.n128_u64[0];
      if (!*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_38;
      }
      __n128 v55 = *(id *)(v53 + 32);
LABEL_19:
      uint64_t v56 = swift_bridgeObjectRelease();
      uint64_t v57 = (*(uint64_t (**)(uint64_t))((*v3 & *v55) + 0x250))(v56);

      if ((v57 & 0xC000000000000001) == 0)
      {
        if (!*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_40;
        }
        uint64_t v58 = *(id *)(v57 + 32);
LABEL_22:
        uint64_t v59 = v58;
        uint64_t v60 = swift_bridgeObjectRelease();
        v61.n128_f64[0] = (*(double (**)(uint64_t))((*v3 & *v59) + 0x2B0))(v60);
        __n128 v92 = v62;
        __n128 v93 = v61;
        __n128 v90 = v64;
        __n128 v91 = v63;

        uint64_t v65 = v7();
        if ((v65 & 0xC000000000000001) == 0)
        {
          if (!*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_42;
          }
          __n128 v66 = *(id *)(v65 + 32);
LABEL_25:
          __n128 v67 = v66;
          uint64_t v68 = swift_bridgeObjectRelease();
          uint64_t v69 = (*(uint64_t (**)(uint64_t))((*v3 & *v67) + 0x250))(v68);

          if ((v69 & 0xC000000000000001) == 0)
          {
            if (*(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            {
              __break(1u);
              goto LABEL_44;
            }
            uint64_t v70 = *(id *)(v69 + 40);
LABEL_28:
            uint64_t v71 = v70;
            uint64_t v72 = swift_bridgeObjectRelease();
            v73.n128_f64[0] = (*(double (**)(uint64_t))((*v3 & *v71) + 0x2B0))(v72);
            __n128 v88 = v74;
            __n128 v89 = v73;
            __n128 v86 = v76;
            __n128 v87 = v75;

            uint64_t result = sub_1000C7F3C(0, 0, v93, v92, v91, v90, v89, v88, v87, v86);
            if ((v21[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 21] & 1) == 0)
            {
              unint64_t v77 = *(unsigned int *)&v21[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 16] | ((unint64_t)v21[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 20] << 32);
              if ((v77 & 0x100000000) == 0)
              {
                sub_1000C64AC(*(float *)&v21[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 16]);
                *(_DWORD *)&v21[OBJC_IVAR____TtC7Measure11LabelRender_measurement] = v77;
                *(void *)&v21[OBJC_IVAR____TtC7Measure11LabelRender_delegate + 8] = &off_10048D468;
                swift_unknownObjectWeakAssign();
                double v78 = (os_unfair_lock_s *)(v54 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
                swift_beginAccess();
                os_unfair_lock_lock(v78);
                uint64_t v79 = swift_endAccess();
                uint64_t v80 = (*(uint64_t (**)(uint64_t))((*v3 & *(void *)v6) + 0xB8))(v79);
                uint64_t v82 = v81;
                swift_beginAccess();
                uint64_t v6 = v21;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v94 = *(void *)v2;
                *(void *)unint64_t v2 = 0x8000000000000000;
                sub_1000D53A4((uint64_t)v6, v80, v82, isUniquelyReferenced_nonNull_native);
                *(void *)unint64_t v2 = v94;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_endAccess();
                swift_beginAccess();
                os_unfair_lock_unlock(v78);
                swift_endAccess();
                if (qword_1004C2C10 == -1)
                {
LABEL_31:
                  uint64_t v84 = qword_1004F8458;

                  uint64_t v85 = v84 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
                  uint64_t result = swift_beginAccess();
                  *(double *)(v85 + 40) = *(double *)(v85 + 40) + 1.0;
                  return result;
                }
LABEL_44:
                swift_once();
                goto LABEL_31;
              }
              goto LABEL_48;
            }
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
            goto LABEL_49;
          }
LABEL_42:
          uint64_t v70 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_28;
        }
LABEL_40:
        __n128 v66 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_25;
      }
LABEL_38:
      uint64_t v58 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_22;
    }
LABEL_36:
    __n128 v55 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v54 = v93.n128_u64[0];
    goto LABEL_19;
  }
  v91.n128_u64[0] = (unint64_t)v36;
  __n128 v46 = *(void **)(v93.n128_u64[0] + OBJC_IVAR____TtC7Measure9LabelView_activityPresentingViewController);
  if (!v46)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (*(void *)(v93.n128_u64[0] + OBJC_IVAR____TtC7Measure9LabelView_historyPressedPublisher))
  {
    id v47 = v46;
    sub_100012894((uint64_t *)&unk_1004CA000);
    sub_10002179C((unint64_t *)&unk_1004CE660, (uint64_t *)&unk_1004CA000);
    uint64_t v48 = Publisher.eraseToAnyPublisher()();
    id v49 = objc_allocWithZone((Class)type metadata accessor for LabelRender());
    double v21 = sub_1000C6A20(v36, v37, v39, v43, v45, 1, v4 | ((unint64_t)v33 << 32), 0, v41, v40);
    uint64_t v50 = *(void **)&v21[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController];
    *(void *)&v21[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController] = v46;

    *(void *)&v21[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher] = v48;
    uint64_t v51 = swift_release();
    goto LABEL_16;
  }
LABEL_50:
  __break(1u);
  return result;
}

void sub_1000DDC98(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v3);
  uint64_t v4 = swift_endAccess();
  uint64_t v5 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8))(v4);
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (*(void *)(*v8 + 16) && (unint64_t v10 = sub_1000E20D4(v5, v7), (v11 & 1) != 0))
  {
    uint64_t v12 = *(void **)(*(void *)(v9 + 56) + 8 * v10);
    id v13 = v12;
  }
  else
  {
    uint64_t v12 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_endAccess();
  uint64_t v15 = (uint64_t (*)(void))((swift_isaMask & *a1) + 560);
  unint64_t v16 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x230);
  uint64_t v17 = ((uint64_t (*)(uint64_t))v16)(v14);
  if ((v17 & 0xC000000000000001) != 0)
  {
    uint64_t v18 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_43:
      char v30 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_15;
    }
    uint64_t v18 = *(id *)(v17 + 32);
  }
  double v19 = v18;
  uint64_t v20 = swift_bridgeObjectRelease();
  uint64_t v21 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v19) + 0xB8))(v20);
  uint64_t v23 = v22;

  swift_beginAccess();
  uint64_t v24 = *v8;
  if (*(void *)(*v8 + 16) && (unint64_t v25 = sub_1000E20D4(v21, v23), (v26 & 1) != 0))
  {
    uint64_t v27 = *(void **)(*(void *)(v24 + 56) + 8 * v25);
    swift_endAccess();
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    v77.n128_u32[0] = *(_DWORD *)&v28[OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters];

    v78.n128_u32[0] = 0;
  }
  else
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
    v77.n128_u32[0] = 0;
    v78.n128_u32[0] = 1;
  }
  uint64_t v29 = v16();
  if ((v29 & 0xC000000000000001) != 0) {
    goto LABEL_43;
  }
  if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_45;
  }
  char v30 = *(id *)(v29 + 40);
LABEL_15:
  uint64_t v31 = v30;
  uint64_t v32 = swift_bridgeObjectRelease();
  uint64_t v33 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v31) + 0xB8))(v32);
  uint64_t v35 = v34;

  swift_beginAccess();
  uint64_t v36 = *v8;
  if (*(void *)(*v8 + 16) && (unint64_t v37 = sub_1000E20D4(v33, v35), (v38 & 1) != 0))
  {
    uint64_t v39 = *(void **)(*(void *)(v36 + 56) + 8 * v37);
    swift_endAccess();
    double v40 = v39;
    swift_bridgeObjectRelease();
    float v41 = *(float *)&v40[OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters];

    char v42 = 0;
  }
  else
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
    float v41 = 0.0;
    char v42 = 1;
  }
  swift_beginAccess();
  os_unfair_lock_unlock(v3);
  swift_endAccess();
  if (v12)
  {
    if (v78.n128_u8[0] & 1) != 0 || (v42) {
      goto LABEL_39;
    }
    id v43 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
    uint64_t v3 = v12;
    id v44 = (id)v43();
    id v45 = *(id *)((char *)&v3->_os_unfair_lock_opaque + OBJC_IVAR____TtC7Measure11LabelRender_state);
    *(void *)((char *)&v3->_os_unfair_lock_opaque + OBJC_IVAR____TtC7Measure11LabelRender_state) = v44;
    if (v44 != v45) {
      id v44 = sub_1000C51D0((uint64_t)v44);
    }
    uint64_t v23 = (uint64_t)v3 + OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData;
    *(void *)uint64_t v23 = v77.n128_u32[0];
    *(void *)(v23 + 8) = LODWORD(v41);
    *(_WORD *)(v23 + 20) = 0;
    *(float *)(v23 + 16) = v77.n128_f32[0] * v41;
    uint64_t v15 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x248);
    uint64_t v46 = ((uint64_t (*)(id))v15)(v44);
    if ((v46 & 0xC000000000000001) == 0)
    {
      if (!*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_47;
      }
      id v47 = *(id *)(v46 + 32);
LABEL_27:
      uint64_t v48 = v47;
      uint64_t v49 = swift_bridgeObjectRelease();
      uint64_t v50 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v48) + 0x250))(v49);

      if ((v50 & 0xC000000000000001) == 0)
      {
        if (!*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v51 = *(id *)(v50 + 32);
LABEL_30:
        id v52 = v51;
        uint64_t v53 = swift_bridgeObjectRelease();
        v54.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v52) + 0x2B0))(v53);
        __n128 v77 = v55;
        __n128 v78 = v54;
        __n128 v75 = v57;
        __n128 v76 = v56;

        uint64_t v58 = v15();
        if ((v58 & 0xC000000000000001) == 0)
        {
          if (!*(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_51;
          }
          uint64_t v59 = *(id *)(v58 + 32);
LABEL_33:
          uint64_t v60 = v59;
          uint64_t v61 = swift_bridgeObjectRelease();
          uint64_t v62 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v60) + 0x250))(v61);

          if ((v62 & 0xC000000000000001) == 0)
          {
            if (*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            {
              __break(1u);
              goto LABEL_53;
            }
            __n128 v63 = *(id *)(v62 + 40);
LABEL_36:
            __n128 v64 = v63;
            uint64_t v65 = swift_bridgeObjectRelease();
            v66.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v64) + 0x2B0))(v65);
            __n128 v73 = v67;
            __n128 v74 = v66;
            __n128 v71 = v69;
            __n128 v72 = v68;

            sub_1000C7F3C(0, 0, v78, v77, v76, v75, v74, v73, v72, v71);
            if ((*(unsigned char *)(v23 + 21) & 1) == 0)
            {
              unint64_t v70 = *(unsigned int *)(v23 + 16) | ((unint64_t)*(unsigned __int8 *)(v23 + 20) << 32);
              if ((v70 & 0x100000000) == 0)
              {
                sub_1000C64AC(*(float *)(v23 + 16));
                *(uint32_t *)((char *)&v3->_os_unfair_lock_opaque + OBJC_IVAR____TtC7Measure11LabelRender_measurement) = v70;

LABEL_39:
                return;
              }
LABEL_54:
              __break(1u);
              return;
            }
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
LABEL_51:
          __n128 v63 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_36;
        }
LABEL_49:
        uint64_t v59 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_33;
      }
LABEL_47:
      uint64_t v51 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_30;
    }
LABEL_45:
    id v47 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_27;
  }
}

uint64_t sub_1000DE394(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v3);
  uint64_t v4 = swift_endAccess();
  uint64_t v5 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8);
  uint64_t v6 = v5(v4);
  uint64_t v8 = v7;
  uint64_t v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (*(void *)(*v9 + 16) && (unint64_t v11 = sub_1000E20D4(v6, v8), (v12 & 1) != 0))
  {
    id v13 = *(void **)(*(void *)(v10 + 56) + 8 * v11);
    swift_endAccess();
    id v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_1000C7AE4();
    uint64_t v16 = v5(v15);
    uint64_t v18 = v17;
    swift_beginAccess();
    double v19 = (void *)sub_1000A87F0(v16, v18);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  swift_beginAccess();
  os_unfair_lock_unlock(v3);
  return swift_endAccess();
}

uint64_t sub_1000DE53C()
{
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  double v40 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for DispatchQoS();
  uint64_t v3 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  char v38 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  uint64_t v32 = v5;
  os_unfair_lock_lock(v5);
  swift_endAccess();
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v31 = v6;
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(*v6 + 64);
  uint64_t v33 = *v6 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  uint64_t v36 = (void (**)(char *, uint64_t))(v1 + 8);
  unint64_t v37 = v45;
  int64_t v34 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v35 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v42 = v7;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  id v14 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v43 = v13;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v25 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v25 >= v34) {
      goto LABEL_21;
    }
    unint64_t v26 = *(void *)(v33 + 8 * v25);
    int64_t v27 = v13 + 1;
    if (!v26)
    {
      int64_t v27 = v13 + 2;
      if (v13 + 2 >= v34) {
        goto LABEL_21;
      }
      unint64_t v26 = *(void *)(v33 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v13 + 3;
        if (v13 + 3 >= v34) {
          goto LABEL_21;
        }
        unint64_t v26 = *(void *)(v33 + 8 * v27);
        if (!v26) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v26 - 1) & v26;
    int64_t v43 = v27;
    unint64_t v17 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_5:
    uint64_t v18 = *(void **)(*(void *)(v42 + 56) + 8 * v17);
    sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
    swift_bridgeObjectRetain();
    id v19 = v18;
    uint64_t v20 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v19;
    v45[2] = sub_1000DB34C;
    v45[3] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    v45[0] = sub_100049AB4;
    v45[1] = &unk_10048D4C0;
    uint64_t v22 = _Block_copy(aBlock);
    id v23 = v19;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1000E0C1C((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
    uint64_t v24 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v22);

    (*v36)(v15, v24);
    (*v35)(v14, v39);

    uint64_t result = swift_bridgeObjectRelease();
    int64_t v13 = v43;
  }
  uint64_t v28 = v13 + 4;
  if (v13 + 4 >= v34)
  {
LABEL_21:
    swift_release();
    *uint64_t v31 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    uint64_t v29 = v32;
    swift_beginAccess();
    os_unfair_lock_unlock(v29);
    return swift_endAccess();
  }
  unint64_t v26 = *(void *)(v33 + 8 * v28);
  if (v26)
  {
    int64_t v27 = v13 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v27 >= v34) {
      goto LABEL_21;
    }
    unint64_t v26 = *(void *)(v33 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000DEA80(char a1)
{
  void (*v15)(void *__return_ptr, uint64_t);
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned char *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  int64_t v25;
  void __src[63];
  unsigned char __dst[512];

  uint64_t v2 = v1;
  uint64_t v3 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  id v23 = v3;
  os_unfair_lock_lock(v3);
  swift_endAccess();
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v24 = *v4 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(*v4 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(*v4 + 64);
  uint64_t v9 = OBJC_IVAR____TtC7Measure9LabelView__render;
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v18 = v17 | (v11 << 6);
      goto LABEL_22;
    }
    id v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v25) {
      goto LABEL_24;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_24;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v25) {
          goto LABEL_24;
        }
        uint64_t v20 = *(void *)(v24 + 8 * v11);
        if (!v20) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v20 - 1) & v20;
    uint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_22:
    uint64_t v22 = *(unsigned char **)(*(void *)(v5 + 56) + 8 * v18);
    BOOL v12 = (a1 & 1) != 0 && (unint64_t)(*(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_state] - 3) < 2;
    v22[OBJC_IVAR____TtC7Measure11LabelRender_hideForMovePoint] = v12;
    uint64_t v13 = *(void *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_state];
    swift_bridgeObjectRetain();
    id v14 = v22;
    sub_1000C51D0(v13);
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v2 + v9) + 144);
    unint64_t v16 = swift_retain();
    v15(__src, v16);
    swift_release();
    memcpy(__dst, __src, 0x1F8uLL);
    sub_1000C88A0((uint64_t)__dst);
    sub_10003FFD4((uint64_t)__dst);

    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v21 = v19 + 3;
  if (v21 >= v25)
  {
LABEL_24:
    swift_release();
    swift_beginAccess();
    os_unfair_lock_unlock(v23);
    return swift_endAccess();
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_24;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

id sub_1000DEE7C(void *a1, void *a2, double a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v4[OBJC_IVAR____TtC7Measure9LabelView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v10 = OBJC_IVAR____TtC7Measure9LabelView__appState;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = sub_100012894((uint64_t *)&unk_1004C4710);
  uint64_t v13 = qword_1004C2E30;
  id v14 = v5;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1004F8630;
  unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 272);
  swift_retain();
  *(void *)&v14[v10] = v16(KeyPath, v15);
  uint64_t v17 = OBJC_IVAR____TtC7Measure9LabelView__render;
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = sub_100012894(&qword_1004C9E08);
  uint64_t v20 = qword_1004F8630;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 272);
  swift_retain();
  *(void *)&v14[v17] = v21(v18, v20);
  uint64_t v22 = OBJC_IVAR____TtC7Measure9LabelView__measurements;
  uint64_t v23 = swift_getKeyPath();
  uint64_t v24 = sub_100012894(&qword_1004CA010);
  uint64_t v25 = qword_1004F8630;
  unint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 272);
  swift_retain();
  *(void *)&v14[v22] = v26(v23, v25);
  uint64_t v27 = OBJC_IVAR____TtC7Measure9LabelView__historyUIState;
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = sub_100012894(&qword_1004CA018);
  uint64_t v30 = qword_1004F8630;
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 272);
  swift_retain();
  *(void *)&v14[v27] = v31(v28, v30);
  uint64_t v32 = &v14[OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection];
  *(void *)uint64_t v32 = 0;
  *((void *)v32 + 1) = 0;
  *(void *)&v14[OBJC_IVAR____TtC7Measure9LabelView_tapRecognizer] = 0;
  *(_DWORD *)&v14[OBJC_IVAR____TtC7Measure9LabelView_labelLock] = 0;
  *(void *)&v14[OBJC_IVAR____TtC7Measure9LabelView_labels] = _swiftEmptyDictionarySingleton;
  *(void *)&v14[OBJC_IVAR____TtC7Measure9LabelView_activityPresentingViewController] = 0;
  *(void *)&v14[OBJC_IVAR____TtC7Measure9LabelView_historyPressedPublisher] = 0;
  *(void *)&v14[OBJC_IVAR____TtC7Measure9LabelView_sceneView] = a2;
  *(void *)&v14[OBJC_IVAR____TtC7Measure9LabelView_parentView] = a1;
  uint64_t v33 = (double *)&v14[OBJC_IVAR____TtC7Measure9LabelView_editViewBounds];
  *uint64_t v33 = a3;
  v33[1] = a4;
  id v34 = a2;
  id v35 = a1;

  v49.receiver = v14;
  v49.super_class = ObjectType;
  [super init];
  [v34 bounds];
  id v39 = [objc_allocWithZone((Class)SKScene) initWithSize:v37, v38];
  [v34 setOverlaySKScene:v39];
  [v39 setScaleMode:3];
  sub_10001C99C(0, (unint64_t *)&unk_1004CA020);
  sub_100012894(&qword_1004C6918);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003F87F0;
  uint64_t v41 = self;
  id v42 = v36;
  id v43 = [v41 measureUnits];
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;

  *(void *)(inited + 32) = v44;
  *(void *)(inited + 40) = v46;
  static NSUserDefaults.observe(observer:keys:)();

  swift_setDeallocating();
  swift_arrayDestroy();

  return v42;
}

id sub_1000DF3BC()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v2 = [self standardUserDefaults];
  NSString v3 = [self measureUnits];
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 removeObserver:v0 forKeyPath:v3];

  v5.receiver = v0;
  v5.super_class = ObjectType;
  return [super dealloc];
}

void sub_1000DF6D0()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection);
    NSString v3 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    swift_endAccess();
    uint64_t v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labels);
    swift_beginAccess();
    uint64_t v5 = *v4;
    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v6 = sub_1000E20D4(v2, v1);
      if (v7)
      {
        unint64_t v8 = *(void **)(*(void *)(v5 + 56) + 8 * v6);
        id v9 = v8;
      }
      else
      {
        unint64_t v8 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v8 = 0;
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    os_unfair_lock_unlock(v3);
    swift_endAccess();
    if (v8)
    {
      id v10 = v8;
      sub_1000CD23C();
    }
  }
}

uint64_t sub_1000DF848(uint64_t result, uint64_t a2)
{
  uint64_t v4 = (void *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8);
  if (v5)
  {
    uint64_t v6 = v2;
    BOOL v7 = *v4 == result && v5 == a2;
    if (v7 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      if ([self jasperAvailable])
      {
        sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
        char v8 = static UIDevice.isIPhone()();
        void *v4 = 0;
        v4[1] = 0;
        uint64_t result = swift_bridgeObjectRelease();
        if ((v8 & 1) == 0) {
          return result;
        }
      }
      else
      {
        void *v4 = 0;
        v4[1] = 0;
        swift_bridgeObjectRelease();
      }
      id v9 = *(uint64_t (**)(uint64_t))(**(void **)(v6 + OBJC_IVAR____TtC7Measure9LabelView__appState) + 200);
      uint64_t v10 = swift_retain();
      uint64_t v11 = v9(v10);
      swift_release();
      (*(void (**)(uint64_t (*)(uint64_t), void))(*(void *)v11 + 280))(sub_1000DF9C0, 0);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000DF9C0(uint64_t result)
{
  *(unsigned char *)(result + 4) = 0;
  return result;
}

uint64_t sub_1000DF9C8(uint64_t a1, uint64_t a2)
{
  if ([self jasperAvailable]
    && (sub_10001C99C(0, (unint64_t *)&qword_1004C6A10), (static UIDevice.isIPhone()() & 1) == 0))
  {
    uint64_t v10 = OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection;
    if (*(void *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8))
    {
      sub_1000DC86C(1);
      uint64_t v10 = OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection;
    }
    uint64_t v11 = (void *)(v2 + v10);
    void *v11 = a1;
    v11[1] = a2;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection);
    void *v5 = a1;
    v5[1] = a2;
    swift_bridgeObjectRelease();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(**(void **)(v2 + OBJC_IVAR____TtC7Measure9LabelView__appState) + 200);
    swift_bridgeObjectRetain();
    uint64_t v7 = swift_retain();
    uint64_t v8 = v6(v7);
    swift_release();
    (*(void (**)(uint64_t (*)(uint64_t), void))(*(void *)v8 + 280))(sub_1000DFB74, 0);
    return swift_release();
  }
}

uint64_t sub_1000DFB74(uint64_t result)
{
  *(unsigned char *)(result + 4) = 1;
  return result;
}

uint64_t type metadata accessor for LabelView()
{
  return self;
}

void sub_1000DFBD4()
{
  void (*v10)(void *__return_ptr, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unsigned char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  int64_t v26;
  void __src[63];
  unsigned char __dst[512];

  uint64_t v1 = v0;
  uint64_t v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v2);
  NSString v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  swift_endAccess();
  uint64_t v25 = v4 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v4 + 64);
  uint64_t v8 = OBJC_IVAR____TtC7Measure9LabelView__render;
  unint64_t v26 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      uint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      uint64_t v13 = v12 | (v9 << 6);
      goto LABEL_23;
    }
    id v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v26) {
      goto LABEL_25;
    }
    uint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_25;
      }
      uint64_t v15 = *(void *)(v25 + 8 * v9);
      if (!v15)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_25;
        }
        uint64_t v15 = *(void *)(v25 + 8 * v9);
        if (!v15)
        {
          int64_t v9 = v14 + 3;
          if (v14 + 3 >= v26) {
            goto LABEL_25;
          }
          uint64_t v15 = *(void *)(v25 + 8 * v9);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_23:
    uint64_t v17 = *(unsigned char **)(*(void *)(v4 + 56) + 8 * v13);
    uint64_t v18 = OBJC_IVAR____TtC7Measure11LabelRender_capturing;
    v17[OBJC_IVAR____TtC7Measure11LabelRender_capturing] = 1;
    uint64_t v19 = v17;
    sub_1000C5BB0();
    sub_1000C6118();
    sub_1000C51D0(*(void *)&v19[OBJC_IVAR____TtC7Measure11LabelRender_state]);
    if ((v17[v18] & 1) == 0)
    {
      uint64_t v20 = [self fadeAlphaTo:0.0 duration:0.0];
      uint64_t v21 = *(void **)&v19[OBJC_IVAR____TtC7Measure11LabelRender_labelNode];
      uint64_t v22 = swift_allocObject();
      swift_unknownObjectWeakInit();
      __src[4] = sub_1000E08D0;
      __src[5] = v22;
      __src[0] = _NSConcreteStackBlock;
      __src[1] = 1107296256;
      __src[2] = sub_100049AB4;
      __src[3] = &unk_10048D538;
      uint64_t v23 = _Block_copy(__src);
      uint64_t v24 = v21;
      swift_release();
      [v24 runAction:v20 completion:v23];
      _Block_release(v23);
    }
    sub_1000CCACC();
    uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v1 + v8) + 144);
    uint64_t v11 = swift_retain();
    v10(__src, v11);
    swift_release();
    memcpy(__dst, __src, 0x1F8uLL);
    sub_1000C88A0((uint64_t)__dst);
    sub_10003FFD4((uint64_t)__dst);
  }
  unint64_t v16 = v14 + 4;
  if (v16 >= v26)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v9 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_25;
    }
    uint64_t v15 = *(void *)(v25 + 8 * v9);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
}

void sub_1000DFFAC()
{
  void (*v11)(void *__return_ptr, uint64_t);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unsigned char *v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  void __src[63];
  unsigned char __dst[512];

  uint64_t v1 = v0;
  uint64_t v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  os_unfair_lock_lock(v2);
  NSString v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  swift_endAccess();
  uint64_t v32 = v4 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v4 + 64);
  uint64_t v8 = OBJC_IVAR____TtC7Measure9LabelView__render;
  uint64_t v33 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v31 = &__src[2];
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v10 = &OBJC_IVAR____TtC7Measure11LabelRender_capturing;
  while (1)
  {
    if (v7)
    {
      uint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      id v34 = v9;
      id v14 = v13 | (v9 << 6);
      goto LABEL_23;
    }
    uint64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v33) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v32 + 8 * v15);
    uint64_t v17 = v9 + 1;
    if (!v16)
    {
      uint64_t v17 = v9 + 2;
      if (v9 + 2 >= v33) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v32 + 8 * v17);
      if (!v16)
      {
        uint64_t v17 = v9 + 3;
        if (v9 + 3 >= v33) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v32 + 8 * v17);
        if (!v16)
        {
          uint64_t v17 = v9 + 4;
          if (v9 + 4 >= v33) {
            goto LABEL_25;
          }
          unint64_t v16 = *(void *)(v32 + 8 * v17);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v16 - 1) & v16;
    id v34 = v17;
    id v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_23:
    uint64_t v19 = *(unsigned char **)(*(void *)(v4 + 56) + 8 * v14);
    uint64_t v20 = *v10;
    v19[*v10] = 0;
    uint64_t v21 = v19;
    sub_1000C5BB0();
    sub_1000C6118();
    sub_1000C51D0(*(void *)&v21[OBJC_IVAR____TtC7Measure11LabelRender_state]);
    if ((v19[v20] & 1) == 0)
    {
      uint64_t v22 = [self fadeAlphaTo:0.0 duration:0.0 v31];
      uint64_t v23 = v4;
      uint64_t v24 = v8;
      uint64_t v25 = v1;
      unint64_t v26 = v10;
      uint64_t v27 = *(void **)&v21[OBJC_IVAR____TtC7Measure11LabelRender_labelNode];
      uint64_t v28 = swift_allocObject();
      swift_unknownObjectWeakInit();
      __src[4] = sub_1000E08D0;
      __src[5] = v28;
      __src[0] = _NSConcreteStackBlock;
      __src[1] = 1107296256;
      __src[2] = sub_100049AB4;
      __src[3] = &unk_10048D510;
      uint64_t v29 = _Block_copy(__src);
      uint64_t v30 = v27;
      swift_release();
      [v30 runAction:v22 completion:v29];
      _Block_release(v29);

      uint64_t v10 = v26;
      uint64_t v1 = v25;
      uint64_t v8 = v24;
      uint64_t v4 = v23;
    }
    sub_1000CCBB8();
    uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v1 + v8) + 144);
    uint64_t v12 = swift_retain();
    v11(__src, v12);
    swift_release();
    memcpy(__dst, __src, 0x1F8uLL);
    sub_1000C88A0((uint64_t)__dst);
    sub_10003FFD4((uint64_t)__dst);

    int64_t v9 = v34;
  }
  uint64_t v18 = v9 + 5;
  if (v9 + 5 >= v33)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v16 = *(void *)(v32 + 8 * v18);
  if (v16)
  {
    uint64_t v17 = v9 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v17 >= v33) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v32 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1000E03B4()
{
  uint64_t v1 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  uint64_t v21 = v1;
  os_unfair_lock_lock(v1);
  swift_endAccess();
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = v3 + 64;
  char v5 = 1;
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v18 >= v9) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v4 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v9) {
        goto LABEL_21;
      }
      unint64_t v19 = *(void *)(v4 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v9) {
          goto LABEL_21;
        }
        unint64_t v19 = *(void *)(v4 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v19 - 1) & v19;
    unint64_t v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    id v14 = *(char **)(*(void *)(v3 + 56) + 8 * v13);
    uint64_t v15 = (os_unfair_lock_s *)&v14[OBJC_IVAR____TtC7Measure11LabelRender_labelLock];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v16 = v14;
    os_unfair_lock_lock(v15);
    char v17 = v16[OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture];
    os_unfair_lock_unlock(v15);
    swift_endAccess();

    uint64_t result = swift_bridgeObjectRelease();
    v5 &= v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v9)
  {
LABEL_21:
    swift_release();
    swift_beginAccess();
    os_unfair_lock_unlock(v21);
    swift_endAccess();
    return v5 & 1;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v4 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000E05F4()
{
  uint64_t v1 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess();
  uint64_t v21 = v1;
  os_unfair_lock_lock(v1);
  swift_endAccess();
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = v3 + 64;
  char v5 = 1;
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v18 >= v9) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v4 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v9) {
        goto LABEL_21;
      }
      unint64_t v19 = *(void *)(v4 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v9) {
          goto LABEL_21;
        }
        unint64_t v19 = *(void *)(v4 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v19 - 1) & v19;
    unint64_t v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    id v14 = *(char **)(*(void *)(v3 + 56) + 8 * v13);
    uint64_t v15 = (os_unfair_lock_s *)&v14[OBJC_IVAR____TtC7Measure11LabelRender_labelLock];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v16 = v14;
    os_unfair_lock_lock(v15);
    char v17 = v16[OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture];
    os_unfair_lock_unlock(v15);
    swift_endAccess();

    uint64_t result = swift_bridgeObjectRelease();
    v5 &= v17 ^ 1;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v9)
  {
LABEL_21:
    swift_release();
    swift_beginAccess();
    os_unfair_lock_unlock(v21);
    swift_endAccess();
    return v5 & 1;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v4 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000E0848()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E0880(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E0890()
{
  return swift_release();
}

uint64_t sub_1000E0898()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000E08D0()
{
}

uint64_t sub_1000E08E8(uint64_t a1, uint64_t a2)
{
  id v5 = [self measureUnits];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (!a2)
  {
    return swift_bridgeObjectRelease();
  }
  if (v6 == a1 && v8 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return result;
    }
  }
  unint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess();
  uint64_t v13 = *v12;
  uint64_t v14 = v13 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v13 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_16;
    }
    int64_t v26 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v26 >= v18) {
      return swift_release();
    }
    unint64_t v27 = *(void *)(v14 + 8 * v26);
    ++v19;
    if (!v27)
    {
      int64_t v19 = v26 + 1;
      if (v26 + 1 >= v18) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v14 + 8 * v19);
      if (!v27)
      {
        int64_t v19 = v26 + 2;
        if (v26 + 2 >= v18) {
          return swift_release();
        }
        unint64_t v27 = *(void *)(v14 + 8 * v19);
        if (!v27) {
          break;
        }
      }
    }
LABEL_31:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v21 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_16:
    uint64_t v22 = *(char **)(*(void *)(v13 + 56) + 8 * v21);
    uint64_t v23 = OBJC_IVAR____TtC7Measure11LabelRender_measurement;
    float v24 = *(float *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_measurement];
    swift_bridgeObjectRetain();
    uint64_t v25 = v22;
    sub_1000C64AC(v24);
    *(float *)&v22[v23] = v24;

    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v18) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v14 + 8 * v28);
  if (v27)
  {
    int64_t v19 = v28;
    goto LABEL_31;
  }
  while (1)
  {
    int64_t v19 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v19 >= v18) {
      return swift_release();
    }
    unint64_t v27 = *(void *)(v14 + 8 * v19);
    ++v28;
    if (v27) {
      goto LABEL_31;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1000E0B54(void *a1, id a2)
{
  id v3 = [a2 view];
  id v4 = [a1 view];
  id v5 = v4;
  if (v3)
  {
    if (!v4)
    {
      char v7 = 0;
      goto LABEL_8;
    }
    sub_10001C99C(0, (unint64_t *)&qword_1004CA030);
    id v6 = v3;
    char v7 = static NSObject.== infix(_:_:)();
  }
  else
  {
    if (!v4)
    {
      char v7 = 1;
      return v7 & 1;
    }
    char v7 = 0;
  }
  id v3 = v5;
LABEL_8:

  return v7 & 1;
}

uint64_t sub_1000E0C1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E0C74(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004CA118);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (id *)(a1 + 40);
  while (1)
  {
    char v5 = *(unsigned char *)v4;
    id v6 = *(v4 - 1);
    unint64_t result = sub_1000E2150((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v6;
    *(unsigned char *)(v2[7] + result) = v5;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E0D74(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004CA068);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_1000E2150((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E0E74(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004CA060);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000E2150((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E0F80(uint64_t a1)
{
  return sub_1000E1AA8(a1, &qword_1004C4548, &qword_1004CA070, (uint64_t (*)(uint64_t))sub_1000E2150);
}

unint64_t sub_1000E0FA8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004CA080);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_1000E2150((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E10B4(uint64_t a1)
{
  return sub_1000E1AA8(a1, &qword_1004C4558, &qword_1004CA078, (uint64_t (*)(uint64_t))sub_1000E2150);
}

unint64_t sub_1000E10DC(uint64_t a1)
{
  uint64_t v2 = sub_100012894(&qword_1004C4470);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    char v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004CA120);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  char v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000735DC(v12, (uint64_t)v5, &qword_1004C4470);
    char v14 = *v5;
    unint64_t result = sub_1000E22D8(*v5);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v7[6] + result) = v14;
    uint64_t v18 = v7[7];
    uint64_t v19 = type metadata accessor for DisplayRepresentation();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v9, v19);
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E12D4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004CA088);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000735DC(v6, (uint64_t)&v15, &qword_1004CA090);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000E20D4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_100021C48(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E1418(uint64_t a1)
{
  return sub_1000E1CFC(a1, &qword_1004CA058);
}

unint64_t sub_1000E1424(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004C9EF0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    long long v17 = *(_OWORD *)(v4 + 3);
    long long v18 = *(_OWORD *)(v4 + 1);
    uint64_t v8 = (void *)v4[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_1000E20D4(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 48 * result;
    *(void *)uint64_t v13 = v7;
    *(_OWORD *)(v13 + 8) = v18;
    *(_OWORD *)(v13 + 24) = v17;
    *(void *)(v13 + 40) = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v2[2] = v16;
    v4 += 8;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E15AC(uint64_t a1)
{
  return sub_1000E1AA8(a1, &qword_1004CA0B0, &qword_1004CA0B8, (uint64_t (*)(uint64_t))sub_1000E2150);
}

unint64_t sub_1000E15D4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004CA0E8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000735DC(v6, (uint64_t)&v13, &qword_1004CA0F0);
    uint64_t v7 = v13;
    unint64_t result = sub_1000E2408(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_100027938(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E1704(uint64_t a1)
{
  return sub_1000E1AA8(a1, &qword_1004CA098, &qword_1004CA0A0, (uint64_t (*)(uint64_t))sub_1000E2150);
}

unint64_t sub_1000E172C(uint64_t a1)
{
  uint64_t v2 = sub_100012894(&qword_1004C9B18);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004C9F00);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000735DC(v12, (uint64_t)v5, &qword_1004C9B18);
    unint64_t result = sub_1000E24F8((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(unsigned char *)(v7[7] + v16) = v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E1920(uint64_t a1)
{
  return sub_1000E1AA8(a1, &qword_1004CA0C8, &qword_1004CA0D0, (uint64_t (*)(uint64_t))sub_1000E2150);
}

unint64_t sub_1000E1948(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004CA128);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000735DC(v6, (uint64_t)&v15, &qword_1004CA130);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000E20D4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100027938(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E1A80(uint64_t a1)
{
  return sub_1000E1AA8(a1, &qword_1004CA108, &qword_1004CA110, (uint64_t (*)(uint64_t))sub_1000E2150);
}

unint64_t sub_1000E1AA8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000735DC(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_100027938(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E1BD8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(&qword_1004CA0A8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    id v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000E2150((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    uint64_t v10 = (void *)(v2[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E1CF0(uint64_t a1)
{
  return sub_1000E1CFC(a1, &qword_1004C9E18);
}

unint64_t sub_1000E1CFC(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012894(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = *(v5 - 1);
    id v8 = v6;
    unint64_t result = sub_1000E2150((uint64_t)v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = 8 * result;
    *(void *)(v3[6] + v11) = v7;
    *(void *)(v3[7] + v11) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Swift::Void __swiftcall UIPasteboard.set(attributedString:)(NSAttributedString_optional attributedString)
{
  uint64_t v2 = v1;
  Class isa = attributedString.value.super.isa;
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (isa)
  {
    int64_t v28 = isa;
    uint64_t v8 = sub_10015512C();
    if (v9 >> 60 == 15)
    {
      char v10 = v28;
    }
    else
    {
      uint64_t v11 = v8;
      unint64_t v12 = v9;
      sub_100012894((uint64_t *)&unk_1004CE6E0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1003F8B80;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v14;
      static String.Encoding.utf8.getter();
      uint64_t v15 = String.Encoding.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      id v16 = objc_allocWithZone((Class)NSString);
      Class v17 = Data._bridgeToObjectiveC()().super.isa;
      id v18 = [v16 initWithData:v17 encoding:v15];

      if (v18)
      {
        *(void *)(inited + 72) = sub_10001C99C(0, &qword_1004CA050);
        *(void *)(inited + 48) = v18;
        *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 88) = v19;
        id v20 = [(objc_class *)v28 string];
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;

        *(void *)(inited + 120) = &type metadata for String;
        *(void *)(inited + 96) = v21;
        *(void *)(inited + 104) = v23;
        unint64_t v24 = sub_1000E1948(inited);
        sub_1000E20C0(v11, v12);
        sub_100012894(&qword_1004C69C8);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003F87F0;
        *(void *)(v25 + 32) = v24;
        sub_100012894(&qword_1004C69D0);
        Class v26 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v2 setItems:v26];
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_1000E20C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10004007C(a1, a2);
  }
  return a1;
}

unint64_t sub_1000E20D4(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000E27CC(a1, a2, v4);
}

unint64_t sub_1000E2150(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_1000E2BA8(a1, v2);
}

unint64_t sub_1000E21E4(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return sub_1000E28B0(a1, v2);
}

unint64_t sub_1000E224C(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  unsigned __int8 v2 = a1 - 3;
  if ((a1 - 3) >= 7u)
  {
    Hasher._combine(_:)(7uLL);
    unsigned __int8 v2 = a1;
  }
  Hasher._combine(_:)(v2);
  Swift::Int v3 = Hasher._finalize()();

  return sub_1000E2950(a1, v3);
}

unint64_t sub_1000E22D8(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000E2A68(a1 & 1, v2);
}

unint64_t sub_1000E237C(double a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1000E2D20(v2, a1);
}

unint64_t sub_1000E23C4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000E2DB8(a1, v4);
}

unint64_t sub_1000E2408(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_1000E3CF4(&qword_1004CA0F8, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000E2E80(a1, v2);
}

unint64_t sub_1000E24BC(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return sub_1000E2FDC(a1, v2);
}

unint64_t sub_1000E24F8(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1000E3CF4(&qword_1004C86E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_1000E3078(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_1004CA0E0, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_1000E25CC(uint64_t a1)
{
  type metadata accessor for URL();
  sub_1000E3CF4(&qword_1004C9ED8, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_1000E3078(a1, v2, (uint64_t (*)(void))&type metadata accessor for URL, &qword_1004CA0D8, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_1000E26A0(uint64_t a1)
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 184))(v4);
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000E3218(a1, v2);
}

unint64_t sub_1000E272C(uint64_t a1, void *a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for AnyKeyPath();
  dispatch thunk of Hashable.hash(into:)();
  id v4 = a2;
  NSObject.hash(into:)();

  Swift::Int v5 = Hasher._finalize()();
  return sub_1000E332C(a1, (uint64_t)v4, v5);
}

unint64_t sub_1000E27CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000E28B0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1000E2950(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    while (2)
    {
      switch(*(unsigned char *)(*(void *)(v2 + 48) + result))
      {
        case 3:
          if (a1 != 3) {
            goto LABEL_4;
          }
          break;
        case 4:
          if (a1 != 4) {
            goto LABEL_4;
          }
          break;
        case 5:
          if (a1 != 5) {
            goto LABEL_4;
          }
          break;
        case 6:
          if (a1 != 6) {
            goto LABEL_4;
          }
          break;
        case 7:
          if (a1 != 7) {
            goto LABEL_4;
          }
          break;
        case 8:
          if (a1 != 8) {
            goto LABEL_4;
          }
          break;
        case 9:
          if (a1 != 9) {
            goto LABEL_4;
          }
          break;
        default:
          if (a1 - 10 > 0xFFFFFFF8 || *(unsigned __int8 *)(*(void *)(v2 + 48) + result) != a1)
          {
LABEL_4:
            unint64_t result = (result + 1) & v6;
            if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result)) {
              continue;
            }
          }
          break;
      }
      break;
    }
  }
  return result;
}

unint64_t sub_1000E2A68(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x6C6576656CLL;
    }
    else {
      uint64_t v6 = 0x6572757361656DLL;
    }
    if (a1) {
      unint64_t v7 = 0xE500000000000000;
    }
    else {
      unint64_t v7 = 0xE700000000000000;
    }
    while (1)
    {
      uint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x6C6576656CLL : 0x6572757361656DLL;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xE500000000000000 : 0xE700000000000000;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t sub_1000E2BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000E2D20(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1000E2DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000E3C44(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000E3CA0((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000E2E80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    char v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1000E3CF4(&qword_1004CA0F8, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1000E2FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1000E3078(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  unint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    Class v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_1000E3CF4(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_1000E3218(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for WorldPlane();
    swift_retain();
    char v6 = static WorldPlane.== infix(_:_:)();
    swift_release();
    if ((v6 & 1) == 0)
    {
      uint64_t v7 = ~v4;
      for (unint64_t i = (i + 1) & v7; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v7)
      {
        swift_retain();
        char v8 = static WorldPlane.== infix(_:_:)();
        swift_release();
        if (v8) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1000E332C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    uint64_t v8 = ~v5;
    type metadata accessor for AnyKeyPath();
    do
    {
      uint64_t v9 = *(void **)(*(void *)(v7 + 48) + 16 * v6 + 8);
      swift_retain();
      id v10 = v9;
      if (static AnyKeyPath.== infix(_:_:)())
      {
        sub_10001C99C(0, (unint64_t *)&qword_1004C4568);
        char v11 = static NSObject.== infix(_:_:)();

        swift_release();
        if (v11) {
          return v6;
        }
      }
      else
      {

        swift_release();
      }
      unint64_t v6 = (v6 + 1) & v8;
    }
    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_1000E3454(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100012894(&qword_1004CA100);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_1000E21E4(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    unsigned __int8 v4 = *((unsigned char *)v8 - 8);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000E21E4(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1000E3558(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100012894(&qword_1004C9E98);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_1000E24BC(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    BOOL v10 = (void *)(v3[7] + 16 * result);
    *BOOL v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000E24BC(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1000E3668(void *a1)
{
  return sub_1000E3758(a1, &qword_1004C9E80);
}

unint64_t sub_1000E3674(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100012894(&qword_1004C9E90);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_1000E24BC(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1000E374C(void *a1)
{
  return sub_1000E3758(a1, &qword_1004C9E88);
}

unint64_t sub_1000E3758(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100012894(a2);
  uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = a1[4];
  uint64_t v6 = (void *)a1[5];
  unint64_t result = sub_1000E24BC(v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v18 = v6;
    return (unint64_t)v4;
  }
  uint64_t v9 = (void **)(a1 + 7);
  while (1)
  {
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v4[6] + v10) = v5;
    *(void *)(v4[7] + v10) = v6;
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v4[2] = v13;
    if (!--v2) {
      goto LABEL_8;
    }
    char v14 = v9 + 2;
    uint64_t v5 = (uint64_t)*(v9 - 1);
    uint64_t v15 = *v9;
    id v16 = v6;
    unint64_t result = sub_1000E24BC(v5);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v17) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1000E384C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100012894(&qword_1004C9F10);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (void *)(a1 + 40); ; i += 2)
    {
      unsigned __int8 v5 = *((unsigned char *)i - 8);
      uint64_t v6 = *i;
      unint64_t result = sub_1000E21E4(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      *(void *)(v3[7] + 8 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1000E3924(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100012894(&qword_1004CA0C0);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t result = sub_1000E21E4(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    BOOL v10 = (void *)(v3[7] + 16 * result);
    *BOOL v10 = v6;
    v10[1] = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 3;
    unsigned __int8 v4 = *((unsigned char *)v9 - 16);
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000E21E4(v4);
    uint64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void _sSo12UIPasteboardC7MeasureE7rtfItem4fromSDySSypGSgSo18NSAttributedStringC_tF_0(void *a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10015512C();
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    sub_100012894((uint64_t *)&unk_1004CE6E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003F8B80;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v11;
    static String.Encoding.utf8.getter();
    uint64_t v12 = String.Encoding.rawValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    id v13 = objc_allocWithZone((Class)NSString);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v15 = [v13 initWithData:isa encoding:v12];

    if (v15)
    {
      *(void *)(inited + 72) = sub_10001C99C(0, &qword_1004CA050);
      *(void *)(inited + 48) = v15;
      *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 88) = v16;
      id v17 = [a1 string];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      *(void *)(inited + 120) = &type metadata for String;
      *(void *)(inited + 96) = v18;
      *(void *)(inited + 104) = v20;
      sub_1000E1948(inited);
      sub_1000E20C0(v8, v9);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000E3C44(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000E3CA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E3CF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000E3D40()
{
  id v1 = [v0 superview];
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  [v1 frame];
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;

  id v11 = [v0 subviews];
  sub_10004507C();
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    if (!v13) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v13) {
      goto LABEL_12;
    }
  }
  if (v13 < 1)
  {
    __break(1u);
    goto LABEL_25;
  }
  for (uint64_t i = 0; i != v13; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v15 = *(id *)(v12 + 8 * i + 32);
    }
    uint64_t v16 = v15;
    [v15 sizeToFit];
  }
LABEL_12:
  swift_bridgeObjectRelease_n();
  v28.origin.x = v4;
  v28.origin.y = v6;
  v28.size.width = v8;
  v28.size.height = v10;
  double Width = CGRectGetWidth(v28);
  v29.origin.x = v4;
  v29.origin.y = v6;
  v29.size.width = v8;
  v29.size.height = v10;
  [v0 setFrame:CGRectMake(0.0, 0.0, Width, CGRectGetHeight(v29) * 0.25)];
  id v18 = [v0 subviews];
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_14:
      if (v20 >= 1)
      {
        uint64_t v21 = 0;
        double v22 = 0.0;
        do
        {
          if ((v19 & 0xC000000000000001) != 0) {
            id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v23 = *(id *)(v19 + 8 * v21 + 32);
          }
          unint64_t v24 = v23;
          ++v21;
          [v23 frame];
          [v24 setFrame:];
          [v24 frame];
          double v26 = v25;

          double v22 = v22 + v26;
        }
        while (v20 != v21);
        goto LABEL_21;
      }
LABEL_25:
      __break(1u);
      return;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20) {
      goto LABEL_14;
    }
  }
LABEL_21:

  swift_bridgeObjectRelease();
}

uint64_t sub_1000E4024(unint64_t a1)
{
  double v3 = *(void **)(v1 + qword_1004CA170);
  sub_100012894(&qword_1004CA2F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003F8B70;
  v27[0] = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    id v12 = v3;
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (!result) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v6 = v3;
    uint64_t result = swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_47;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      type metadata accessor for WorldLine();
      if (swift_dynamicCastClass())
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    type metadata accessor for WorldLine();
    for (uint64_t j = 0; j != v5; ++j)
    {
      CGFloat v10 = *(void **)(a1 + 8 * j + 32);
      if (swift_dynamicCastClass())
      {
        id v11 = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
  }
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_10019BF88(v27[0]);
  uint64_t result = swift_release();
  *(void *)(inited + 32) = v13;
  *(_OWORD *)(inited + 40) = xmmword_1003FD500;
  v27[0] = (unint64_t)_swiftEmptyArrayStorage;
  if (v5)
  {
    if (v5 >= 1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        for (uint64_t k = 0; k != v5; ++k)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          type metadata accessor for WorldRectangle();
          if (swift_dynamicCastClass())
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
      else
      {
        type metadata accessor for WorldRectangle();
        swift_bridgeObjectRetain();
        for (uint64_t m = 0; m != v5; ++m)
        {
          uint64_t v16 = *(void **)(a1 + 8 * m + 32);
          if (swift_dynamicCastClass())
          {
            id v17 = v16;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
LABEL_47:
    __break(1u);
    __break(1u);
    return result;
  }
LABEL_30:
  id v18 = sub_10019BF88(v27[0]);
  swift_release();
  *(void *)(inited + 56) = v18;
  *(_OWORD *)(inited + 64) = xmmword_1003FD510;
  if ([self jasperAvailable])
  {
    v27[0] = (unint64_t)_swiftEmptyArrayStorage;
    if (v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        for (uint64_t n = 0; n != v5; ++n)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          type metadata accessor for WorldPerson();
          if (swift_dynamicCastClass())
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
      else
      {
        type metadata accessor for WorldPerson();
        swift_bridgeObjectRetain();
        for (iuint64_t i = 0; ii != v5; ++ii)
        {
          uint64_t v21 = *(void **)(a1 + 8 * ii + 32);
          if (swift_dynamicCastClass())
          {
            id v22 = v21;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
      }
      swift_bridgeObjectRelease();
    }
    id v23 = sub_10019BF88(v27[0]);
    swift_release();
    *(void *)(inited + 80) = v23;
    *(_OWORD *)(inited + 88) = xmmword_1003FD520;
  }
  else
  {
    *(void *)(inited + 80) = 0;
    *(void *)(inited + 88) = 0;
    *(void *)(inited + 96) = 0;
  }
  uint64_t v24 = sub_1000E51D4(inited);
  unint64_t v26 = v25;
  swift_setDeallocating();
  sub_100012894(&qword_1004CA2F8);
  swift_arrayDestroy();
  v27[3] = (unint64_t)&type metadata for String;
  v27[0] = v24;
  v27[1] = v26;
  sub_1000E47CC(v3);

  return sub_100013218((uint64_t)v27);
}

uint64_t sub_1000E4590()
{
  uint64_t v1 = *(void **)(v0 + qword_1004CA178);
  sub_100012894(&qword_1004CA2F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003F8B70;
  id v3 = v1;
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_10019BF88(v4);
  swift_bridgeObjectRelease();
  *(void *)(inited + 32) = v5;
  *(_OWORD *)(inited + 40) = xmmword_1003FD500;
  unint64_t v6 = swift_bridgeObjectRetain();
  double v7 = sub_10019BF88(v6);
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = v7;
  *(_OWORD *)(inited + 64) = xmmword_1003FD510;
  if ([self jasperAvailable])
  {
    unint64_t v8 = swift_bridgeObjectRetain();
    double v9 = sub_10019BF88(v8);
    swift_bridgeObjectRelease();
    int64x2_t v10 = vdupq_n_s64(0xE28D80E286999FF0);
    v10.i64[0] = (uint64_t)v9;
    unint64_t v11 = 0xAD00008FB8EF8099;
  }
  else
  {
    unint64_t v11 = 0;
    int64x2_t v10 = 0uLL;
  }
  *(int64x2_t *)(inited + 80) = v10;
  *(void *)(inited + 96) = v11;
  uint64_t v12 = sub_1000E51D4(inited);
  uint64_t v14 = v13;
  swift_setDeallocating();
  sub_100012894(&qword_1004CA2F8);
  swift_arrayDestroy();
  v16[3] = &type metadata for String;
  v16[0] = v12;
  v16[1] = v14;
  sub_1000E47CC(v3);

  return sub_100013218((uint64_t)v16);
}

id sub_1000E4734()
{
  id result = [objc_allocWithZone((Class)UIColor) initWithRed:0.0 green:0.0 blue:0.0 alpha:0.5];
  qword_1004CA138 = (uint64_t)result;
  return result;
}

id sub_1000E4778()
{
  id result = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:1.0 blue:1.0 alpha:1.0];
  qword_1004CA140 = (uint64_t)result;
  return result;
}

void sub_1000E47BC()
{
  qword_1004CA148 = 0x402E000000000000;
}

id sub_1000E47CC(void *a1)
{
  _print_unlocked<A, B>(_:_:)();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setText:v3];

  [a1 sizeToFit];
  sub_1000E3D40();
  id result = [v1 superview];
  if (result)
  {
    uint64_t v5 = result;
    [result frame];

    [a1 frame];
    CGRect.withWidth(_:)();
    return [a1 setFrame:];
  }
  return result;
}

id sub_1000E48F4(uint64_t a1, uint64_t a2)
{
  [v2 frame];
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  uint64_t v13 = (objc_class *)type metadata accessor for PrefixedLabel();
  uint64_t v14 = (char *)objc_allocWithZone(v13);
  id v15 = &v14[OBJC_IVAR____TtC7Measure13PrefixedLabel_prefix];
  *(void *)id v15 = a1;
  *((void *)v15 + 1) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25.receiver = v14;
  v25.super_class = v13;
  id v16 = [super initWithFrame:v6, v8, v10, v12];
  NSString v17 = String._bridgeToObjectiveC()();
  [v16 setText:v17];

  uint64_t v18 = qword_1004C2A80;
  id v19 = v16;
  if (v18 != -1) {
    swift_once();
  }
  [v19 setTextColor:qword_1004CA140];

  id v20 = v19;
  id result = [v20 font];
  if (result)
  {
    id v22 = result;
    if (qword_1004C2A88 != -1) {
      swift_once();
    }
    id v23 = [v22 fontWithSize:*(double *)&qword_1004CA148];

    [v20 setFont:v23];
    NSString v24 = String._bridgeToObjectiveC()();
    [v20 setText:v24];

    [v20 setTextAlignment:0];
    [v20 setNumberOfLines:2];
    [v20 setLineBreakMode:1];
    [v2 addSubview:v20];
    return v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1000E4B64(double a1, double a2, double a3, double a4)
{
  double v5 = v4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = qword_1004CA150;
  double v12 = (objc_class *)type metadata accessor for PrefixedLabel();
  id v13 = objc_allocWithZone(v12);
  uint64_t v14 = v4;
  *(void *)&v5[v11] = [v13 init];
  uint64_t v15 = qword_1004CA158;
  *(void *)&v14[v15] = [objc_allocWithZone(v12) init];
  uint64_t v16 = qword_1004CA160;
  *(void *)&v14[v16] = [objc_allocWithZone(v12) init];
  uint64_t v17 = qword_1004CA168;
  *(void *)&v14[v17] = [objc_allocWithZone(v12) init];
  uint64_t v18 = qword_1004CA170;
  *(void *)&v14[v18] = [objc_allocWithZone(v12) init];
  uint64_t v19 = qword_1004CA178;
  *(void *)&v14[v19] = [objc_allocWithZone(v12) init];
  uint64_t v20 = qword_1004CA180;
  *(void *)&v14[v20] = [objc_allocWithZone(v12) init];
  uint64_t v21 = qword_1004CA188;
  *(void *)&v14[v21] = [objc_allocWithZone(v12) init];

  v42.receiver = v14;
  v42.super_class = ObjectType;
  id v22 = [super initWithFrame:a1, a2, a3, a4];
  uint64_t v23 = qword_1004C2A78;
  NSString v24 = (char *)v22;
  if (v23 != -1) {
    swift_once();
  }
  [v24 setBackgroundColor:qword_1004CA138];
  [v24 setContentMode:9];
  [v24 setUserInteractionEnabled:0];
  id v25 = sub_1000E48F4(0x3A6E6F6973736553, 0xE900000000000020);
  unint64_t v26 = *(void **)&v24[qword_1004CA150];
  *(void *)&v24[qword_1004CA150] = v25;

  id v27 = sub_1000E48F4(0x203A656369766544, 0xE800000000000000);
  CGRect v28 = *(void **)&v24[qword_1004CA158];
  *(void *)&v24[qword_1004CA158] = v27;

  id v29 = sub_1000E48F4(0x7461746E6569724FLL, 0xED0000203A6E6F69);
  uint64_t v30 = *(void **)&v24[qword_1004CA160];
  *(void *)&v24[qword_1004CA160] = v29;

  id v31 = sub_1000E48F4(0x7461745320707041, 0xEB00000000203A65);
  uint64_t v32 = *(void **)&v24[qword_1004CA168];
  *(void *)&v24[qword_1004CA168] = v31;

  id v33 = sub_1000E48F4(0x6C61736F706F7250, 0xEB00000000203A73);
  id v34 = *(void **)&v24[qword_1004CA170];
  *(void *)&v24[qword_1004CA170] = v33;

  id v35 = sub_1000E48F4(0x6D6572757361654DLL, 0xEE00203A73746E65);
  id v36 = *(void **)&v24[qword_1004CA178];
  *(void *)&v24[qword_1004CA178] = v35;

  id v37 = sub_1000E48F4(0xD000000000000012, 0x8000000100424FE0);
  double v38 = *(void **)&v24[qword_1004CA180];
  *(void *)&v24[qword_1004CA180] = v37;

  id v39 = sub_1000E48F4(0xD000000000000011, 0x8000000100425000);
  double v40 = *(void **)&v24[qword_1004CA188];
  *(void *)&v24[qword_1004CA188] = v39;

  return v24;
}

char *sub_1000E4F08(double a1, double a2, double a3, double a4)
{
  return sub_1000E4B64(a1, a2, a3, a4);
}

void sub_1000E4F2C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  sub_1000E536C();
}

void sub_1000E4F54(void *a1)
{
  id v3 = a1;
  [v3 frame];
  double v2 = v1 * 0.5;
  [v3 frame];
  [v3 setFrame:0.0, 0.0, v2];
  sub_1000E3D40();
}

void sub_1000E4FE0()
{
  double v1 = *(void **)(v0 + qword_1004CA188);
}

void sub_1000E5080(uint64_t a1)
{
  double v2 = *(void **)(a1 + qword_1004CA188);
}

uint64_t type metadata accessor for DebugStateView()
{
  uint64_t result = qword_1004CA1B8;
  if (!qword_1004CA1B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E5178()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000E51CC()
{
  return type metadata accessor for DebugStateView();
}

uint64_t sub_1000E51D4(uint64_t a1)
{
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v12 = a1 + 32;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v13; ++i)
    {
      double v2 = (uint64_t *)(v12 + 24 * i);
      uint64_t v3 = *v2;
      if (*v2)
      {
        uint64_t v5 = v2[1];
        unint64_t v4 = (void *)v2[2];
        uint64_t v6 = *(void *)(v3 + 16);
        if (v6)
        {
          uint64_t v7 = v3 + 32;
          sub_1000E54C0(v3);
          swift_bridgeObjectRetain();
          do
          {
            sub_10005C070(v7, (uint64_t)v14);
            v8._uint64_t countAndFlagsBits = v5;
            v8._object = v4;
            String.append(_:)(v8);
            v9._uint64_t countAndFlagsBits = 32;
            v9._object = (void *)0xE100000000000000;
            String.append(_:)(v9);
            swift_bridgeObjectRetain();
            v10._uint64_t countAndFlagsBits = 32;
            v10._object = (void *)0xE100000000000000;
            String.append(_:)(v10);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10001C9D8((uint64_t)v14);
            v7 += 32;
            --v6;
          }
          while (v6);
        }
        else
        {
          sub_1000E54C0(v3);
          swift_bridgeObjectRetain();
        }
        memset(v14, 0, sizeof(v14));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

void sub_1000E536C()
{
  uint64_t v1 = qword_1004CA150;
  double v2 = (objc_class *)type metadata accessor for PrefixedLabel();
  *(void *)&v0[v1] = [objc_allocWithZone(v2) init];
  uint64_t v3 = qword_1004CA158;
  *(void *)&v0[v3] = [objc_allocWithZone(v2) init];
  uint64_t v4 = qword_1004CA160;
  *(void *)&v0[v4] = [objc_allocWithZone(v2) init];
  uint64_t v5 = qword_1004CA168;
  *(void *)&v0[v5] = [objc_allocWithZone(v2) init];
  uint64_t v6 = qword_1004CA170;
  *(void *)&v0[v6] = [objc_allocWithZone(v2) init];
  uint64_t v7 = qword_1004CA178;
  *(void *)&v0[v7] = [objc_allocWithZone(v2) init];
  uint64_t v8 = qword_1004CA180;
  *(void *)&v0[v8] = [objc_allocWithZone(v2) init];
  uint64_t v9 = qword_1004CA188;
  *(void *)&v0[v9] = [objc_allocWithZone(v2) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000E54C0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

id sub_1000E5510()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure13CardTitleView_title;
  id v2 = objc_allocWithZone((Class)UILabel);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = [v2 init];
  uint64_t v4 = OBJC_IVAR____TtC7Measure13CardTitleView_grabber;
  *(void *)&v3[v4] = [objc_allocWithZone((Class)type metadata accessor for GrabberView()) init];
  uint64_t v5 = OBJC_IVAR____TtC7Measure13CardTitleView_bottomView;
  *(void *)&v3[v5] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v6 = OBJC_IVAR____TtC7Measure13CardTitleView_leftItem;
  id v7 = objc_allocWithZone((Class)type metadata accessor for ShareButton());
  sub_1001BB3F4();
  *(void *)&v3[v6] = v8;
  uint64_t v9 = OBJC_IVAR____TtC7Measure13CardTitleView_rightItem;
  Swift::String v10 = (char *)objc_allocWithZone((Class)type metadata accessor for RoundCloseButton());
  uint64_t v11 = OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView;
  id v12 = objc_allocWithZone((Class)UIView);
  uint64_t v13 = v10;
  *(void *)&v10[v11] = [v12 initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v14 = OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView;
  *(void *)&v13[v14] = [objc_allocWithZone((Class)UIImageView) initWithFrame:0.0, 0.0, 0.0, 0.0];

  if (qword_1004C2A50 != -1) {
    swift_once();
  }
  double v15 = *(double *)&qword_1004F80C0;
  double v16 = *(double *)&qword_1004F80C8;
  uint64_t v17 = &v13[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  uint64_t v18 = &v13[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *(void *)&v13[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator] = 0;
  uint64_t v19 = (double *)&v13[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_size];
  *uint64_t v19 = v15;
  v19[1] = v16;
  v30.receiver = v13;
  v30.super_class = (Class)type metadata accessor for SpatialPlatterTitleButton();
  id v20 = [super initWithFrame:0.0, 0.0, v15, v16];
  [v20 addTarget:v20 action:"onButtonTouchDown" forControlEvents:1];
  [v20 addTarget:v20 action:"onButtonTouchUp" forControlEvents:360];

  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  aBlock[4] = sub_1000E7464;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001CEF98;
  aBlock[3] = &unk_10048D6A0;
  id v22 = _Block_copy(aBlock);
  id v23 = v20;
  swift_release();
  [v23 setPointerStyleProvider:v22];
  _Block_release(v22);

  sub_1000B177C(0);
  sub_1000B1B9C();

  *(void *)&v3[v9] = v23;
  uint64_t v24 = OBJC_IVAR____TtC7Measure13CardTitleView_editableTitleView;
  *(void *)&v3[v24] = [objc_allocWithZone((Class)UITextField) init];
  uint64_t v25 = OBJC_IVAR____TtC7Measure13CardTitleView_separator;
  type metadata accessor for SeparatorView();
  *(void *)&v3[v25] = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];

  v28.receiver = v3;
  v28.super_class = (Class)type metadata accessor for CardTitleView();
  id v26 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  sub_1000E5900();
  sub_1000E60EC();

  return v26;
}

void sub_1000E5900()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure13CardTitleView_title);
  id v2 = self;
  id v3 = [v2 mainBundle];
  v37._object = (void *)0xE000000000000000;
  v4._object = (void *)0x80000001004250B0;
  v4._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v37._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v37);

  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setText:v6];

  id v7 = self;
  id v8 = [v7 _preferredFontForTextStyle:UIFontTextStyleHeadline maximumContentSizeCategory:UIContentSizeCategoryMedium];
  if (!v8)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v9 = v8;
  id v10 = [v8 fontDescriptor];

  id v11 = [v10 fontDescriptorWithSymbolicTraits:2];
  if (!v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  id v12 = [v7 fontWithDescriptor:v11 size:0.0];

  [v1 setFont:v12];
  [v1 setTextAlignment:1];
  uint64_t v13 = *(void **)&v35[OBJC_IVAR____TtC7Measure13CardTitleView_editableTitleView];
  id v14 = [v7 _preferredFontForTextStyle:UIFontTextStyleHeadline maximumContentSizeCategory:UIContentSizeCategoryMedium];
  if (!v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  double v15 = v14;
  id v16 = [v14 fontDescriptor];

  id v17 = [v16 fontDescriptorWithSymbolicTraits:2];
  if (v17)
  {
    id v18 = [v7 fontWithDescriptor:v17 size:0.0];

    [v13 setFont:v18];
    id v19 = [v13 layer];
    [v19 setMasksToBounds:1];

    id v20 = [v13 layer];
    [v20 setCornerCurve:kCACornerCurveContinuous];

    id v21 = [v13 layer];
    if (qword_1004C2838 != -1) {
      swift_once();
    }
    [v21 setCornerRadius:*(double *)&qword_1004F7E68];

    [v13 setTextAlignment:1];
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [self colorNamed:v22];

    [v13 setBackgroundColor:v23];
    [v13 setAlpha:0.0];
    [v13 setUserInteractionEnabled:0];
    id v24 = [v2 mainBundle];
    v38._object = (void *)0xE000000000000000;
    v25._object = (void *)0x80000001004250B0;
    v25._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v26._uint64_t countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v38._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v38);

    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 setPlaceholder:v27];

    uint64_t v28 = self;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v35;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_1000E7044;
    *(void *)(v30 + 24) = v29;
    aBlock[4] = sub_100039980;
    aBlock[5] = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1000FA194;
    aBlock[3] = &unk_10048D5B0;
    id v31 = _Block_copy(aBlock);
    uint64_t v32 = v35;
    swift_retain();
    swift_release();
    [(id)v28 performWithoutAnimation:v31];
    _Block_release(v31);
    LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v28 & 1) == 0)
    {
      uint64_t v33 = OBJC_IVAR____TtC7Measure13CardTitleView_bottomView;
      [*(id *)&v32[OBJC_IVAR____TtC7Measure13CardTitleView_bottomView] addSubview:v1];
      [*(id *)&v32[v33] addSubview:v13];
      id v34 = *(void **)&v32[OBJC_IVAR____TtC7Measure13CardTitleView_leftItem];
      [*(id *)&v32[v33] addSubview:v34];
      [*(id *)&v32[v33] addSubview:*(void *)&v32[OBJC_IVAR____TtC7Measure13CardTitleView_rightItem]];
      [v32 addSubview:*(void *)&v32[v33]];
      [v32 addSubview:*(void *)&v32[OBJC_IVAR____TtC7Measure13CardTitleView_grabber]];
      [v32 addSubview:*(void *)&v32[OBJC_IVAR____TtC7Measure13CardTitleView_separator]];
      [v34 setEnabled:0];
      [v34 setHidden:1];
      swift_release();
      return;
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
}

void sub_1000E5F8C(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + OBJC_IVAR____TtC7Measure13CardTitleView_separator);
  [v1 alpha];
  if (v2 != 0.0)
  {
    uint64_t v3 = OBJC_IVAR____TtC7Measure13SeparatorView_targetAlpha;
    if (*(double *)&v1[OBJC_IVAR____TtC7Measure13SeparatorView_targetAlpha] != 0.0)
    {
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = v1;
      *(void *)(v4 + 24) = 0;
      id v5 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v9[4] = sub_1000E70AC;
      v9[5] = v4;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 1107296256;
      v9[2] = sub_100049AB4;
      v9[3] = &unk_10048D600;
      NSString v6 = _Block_copy(v9);
      id v7 = v1;
      swift_release();
      id v8 = [v5 initWithDuration:v6 controlPoint1:0.065 controlPoint2:0.25 animations:0.1];
      _Block_release(v6);
      *(void *)&v1[v3] = 0;
      [v8 startAnimation];
    }
  }
}

void sub_1000E60EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Measure13CardTitleView_bottomView;
  [*(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_bottomView] setTranslatesAutoresizingMaskIntoConstraints:0];
  id v85 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_title];
  [v85 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v83 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_leftItem];
  [v83 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v87 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_rightItem];
  [v87 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_grabber];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v84 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_editableTitleView];
  [v84 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v86 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_separator];
  [v86 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v4 = self;
  sub_100012894((uint64_t *)&unk_1004CEA00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1003FD540;
  id v6 = [v3 topAnchor];
  id v7 = [v1 topAnchor];
  id v8 = [v6 constraintEqualToAnchor:v7];

  *(void *)(v5 + 32) = v8;
  id v9 = [v3 leadingAnchor];
  id v10 = [v1 leadingAnchor];
  id v11 = [v9 constraintEqualToAnchor:v10];

  *(void *)(v5 + 40) = v11;
  id v12 = [v3 trailingAnchor];
  id v13 = [v1 trailingAnchor];
  id v14 = [v12 constraintEqualToAnchor:v13];

  *(void *)(v5 + 48) = v14;
  specialized Array._endMutation()();
  sub_100029878();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:isa];

  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1003F9450;
  id v17 = [*(id *)&v1[v2] topAnchor];
  id v18 = [v3 bottomAnchor];
  id v19 = [v17 constraintEqualToAnchor:v18];

  *(void *)(v16 + 32) = v19;
  id v20 = [*(id *)&v1[v2] leadingAnchor];
  id v21 = [v1 leadingAnchor];
  id v22 = [v20 constraintEqualToAnchor:v21];

  *(void *)(v16 + 40) = v22;
  id v23 = [*(id *)&v1[v2] bottomAnchor];
  id v24 = [v1 bottomAnchor];
  id v25 = [v23 constraintEqualToAnchor:v24];

  *(void *)(v16 + 48) = v25;
  id v26 = [*(id *)&v1[v2] trailingAnchor];
  id v27 = [v1 trailingAnchor];
  id v28 = [v26 constraintEqualToAnchor:v27];

  *(void *)(v16 + 56) = v28;
  specialized Array._endMutation()();
  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:v29];

  if (qword_1004C27E8 != -1) {
    swift_once();
  }
  double v30 = *(double *)&qword_1004F7E00;
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1003F94A0;
  id v32 = [v87 centerXAnchor];
  id v33 = [*(id *)&v1[v2] trailingAnchor];
  if (qword_1004C2A58 != -1) {
    swift_once();
  }
  id v34 = [v32 constraintEqualToAnchor:v33 constant:-(v30 + *(double *)&xmmword_1004F80D0 * 0.5)];

  *(void *)(v31 + 32) = v34;
  id v35 = [v87 centerYAnchor];
  id v36 = [*(id *)&v1[v2] centerYAnchor];
  id v37 = [v35 constraintEqualToAnchor:v36];

  *(void *)(v31 + 40) = v37;
  specialized Array._endMutation()();
  Class v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:v38];

  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1003F94A0;
  id v40 = [v83 centerXAnchor];
  id v41 = [*(id *)&v1[v2] leadingAnchor];
  if (qword_1004C2E18 != -1) {
    swift_once();
  }
  id v42 = [v40 constraintEqualToAnchor:v41 constant:v30 + *(double *)&xmmword_1004F8620 * 0.5];

  *(void *)(v39 + 32) = v42;
  id v43 = [v83 centerYAnchor];
  id v44 = [*(id *)&v1[v2] centerYAnchor];
  id v45 = [v43 constraintEqualToAnchor:v44];

  *(void *)(v39 + 40) = v45;
  specialized Array._endMutation()();
  Class v46 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:v46];

  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1003FD540;
  id v48 = [v85 centerYAnchor];
  id v49 = [v83 centerYAnchor];
  id v50 = [v48 constraintEqualToAnchor:v49];

  *(void *)(v47 + 32) = v50;
  id v51 = [v85 leadingAnchor];
  id v52 = [v83 trailingAnchor];
  id v53 = [v51 constraintEqualToAnchor:v52 constant:v30];

  *(void *)(v47 + 40) = v53;
  id v54 = [v85 trailingAnchor];
  id v55 = [v87 leadingAnchor];
  id v56 = [v54 constraintEqualToAnchor:v55 constant:-v30];

  *(void *)(v47 + 48) = v56;
  specialized Array._endMutation()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:v57];

  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_1003F9450;
  id v59 = [v84 leadingAnchor];
  id v60 = [*(id *)&v1[v2] leadingAnchor];
  if (qword_1004C2818 != -1) {
    swift_once();
  }
  id v61 = [v59 constraintEqualToAnchor:v60 constant:*(double *)&qword_1004F7E30];

  *(void *)(v58 + 32) = v61;
  id v62 = [v84 trailingAnchor];
  id v63 = [*(id *)&v1[v2] trailingAnchor];
  id v64 = [v62 constraintEqualToAnchor:v63 constant:-*(double *)&qword_1004F7E30];

  *(void *)(v58 + 40) = v64;
  id v65 = [v84 centerYAnchor];
  id v66 = [v85 centerYAnchor];
  id v67 = [v65 constraintEqualToAnchor:v66 constant:1.0];

  *(void *)(v58 + 48) = v67;
  id v68 = [v84 heightAnchor];
  if (qword_1004C2810 != -1) {
    swift_once();
  }
  id v69 = [v68 constraintEqualToConstant:*(double *)&qword_1004F7E28];

  *(void *)(v58 + 56) = v69;
  specialized Array._endMutation()();
  Class v70 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:v70];

  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_1003F9450;
  id v72 = [v86 bottomAnchor];
  id v73 = [v1 bottomAnchor];
  id v74 = [v72 constraintEqualToAnchor:v73];

  *(void *)(v71 + 32) = v74;
  id v75 = [v86 widthAnchor];
  id v76 = [v1 widthAnchor];
  id v77 = [v75 constraintEqualToAnchor:v76];

  *(void *)(v71 + 40) = v77;
  id v78 = [v86 heightAnchor];
  id v79 = [v78 constraintEqualToConstant:0.5];

  *(void *)(v71 + 48) = v79;
  id v80 = [v86 centerXAnchor];
  id v81 = [v1 centerXAnchor];
  id v82 = [v80 constraintEqualToAnchor:v81];

  *(void *)(v71 + 56) = v82;
  specialized Array._endMutation()();
  Class v88 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:v88];
}

id sub_1000E6F18()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardTitleView();
  [super dealloc];
}

uint64_t type metadata accessor for CardTitleView()
{
  return self;
}

uint64_t sub_1000E700C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000E7044()
{
  sub_1000E5F8C(*(void *)(v0 + 16));
}

uint64_t sub_1000E704C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E705C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E706C()
{
  return swift_release();
}

uint64_t sub_1000E7074()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000E70AC()
{
  return sub_10005C460(*(void **)(v0 + 16));
}

void sub_1000E70B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Measure13CardTitleView_title;
  *(void *)&v1[v2] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v3 = OBJC_IVAR____TtC7Measure13CardTitleView_grabber;
  *(void *)&v1[v3] = [objc_allocWithZone((Class)type metadata accessor for GrabberView()) init];
  uint64_t v4 = OBJC_IVAR____TtC7Measure13CardTitleView_bottomView;
  *(void *)&v1[v4] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v5 = OBJC_IVAR____TtC7Measure13CardTitleView_leftItem;
  id v6 = objc_allocWithZone((Class)type metadata accessor for ShareButton());
  sub_1001BB3F4();
  *(void *)&v1[v5] = v7;
  uint64_t v8 = OBJC_IVAR____TtC7Measure13CardTitleView_rightItem;
  id v9 = (char *)objc_allocWithZone((Class)type metadata accessor for RoundCloseButton());
  uint64_t v10 = OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView;
  id v11 = objc_allocWithZone((Class)UIView);
  id v12 = v9;
  *(void *)&v9[v10] = [v11 initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v13 = OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView;
  *(void *)&v12[v13] = [objc_allocWithZone((Class)UIImageView) initWithFrame:0.0, 0.0, 0.0, 0.0];

  if (qword_1004C2A50 != -1) {
    swift_once();
  }
  double v14 = *(double *)&qword_1004F80C0;
  double v15 = *(double *)&qword_1004F80C8;
  uint64_t v16 = &v12[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  id v17 = &v12[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback];
  *(void *)id v17 = 0;
  *((void *)v17 + 1) = 0;
  *(void *)&v12[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator] = 0;
  id v18 = (double *)&v12[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_size];
  *id v18 = v14;
  v18[1] = v15;
  v26.receiver = v12;
  v26.super_class = (Class)type metadata accessor for SpatialPlatterTitleButton();
  id v19 = [super initWithFrame:0.0, 0.0, v14, v15];
  [v19 addTarget:v19 action:"onButtonTouchDown" forControlEvents:1];
  [v19 addTarget:v19 action:"onButtonTouchUp" forControlEvents:360];

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  aBlock[4] = sub_1000E743C;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001CEF98;
  aBlock[3] = &unk_10048D650;
  id v21 = _Block_copy(aBlock);
  id v22 = v19;
  swift_release();
  [v22 setPointerStyleProvider:v21];
  _Block_release(v21);

  sub_1000B177C(0);
  sub_1000B1B9C();

  *(void *)&v1[v8] = v22;
  uint64_t v23 = OBJC_IVAR____TtC7Measure13CardTitleView_editableTitleView;
  *(void *)&v1[v23] = [objc_allocWithZone((Class)UITextField) init];
  uint64_t v24 = OBJC_IVAR____TtC7Measure13CardTitleView_separator;
  type metadata accessor for SeparatorView();
  *(void *)&v1[v24] = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000E743C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B14D4(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_1000E7468()
{
  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  uint64_t result = static UIDevice.isIPad()();
  uint64_t v1 = 480;
  if (result) {
    uint64_t v1 = 240;
  }
  uint64_t v2 = 420;
  if (result) {
    uint64_t v2 = 120;
  }
  qword_1004F8100 = v1;
  *(void *)algn_1004F8108 = v2;
  return result;
}

uint64_t sub_1000E74CC()
{
  uint64_t v0 = *(void *)MeasureCore.shared.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t result = swift_retain();
  if (v1)
  {
    swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 208);
    swift_retain();
    uint64_t result = swift_release();
    if (v3)
    {
      ADProcessor.transformer.getter();
      swift_release();
      Transformer.viewToCamera.getter();
      swift_release();
      CGAffineTransform v5 = v6;
      CGAffineTransformInvert(&v4, &v5);
      CGAffineTransform v5 = v4;
      uint64_t result = (uint64_t)CGAffineTransformScale(&v4, &v5, 3.0, 3.0);
      *(CGAffineTransform *)byte_1004F8110 = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

CGFloat sub_1000E75EC()
{
  if (qword_1004C2A90 != -1) {
    swift_once();
  }
  v2.a = 1.0;
  v2.b = 0.0;
  v2.c = 0.0;
  v2.d = 1.0;
  v2.CGFloat tx = 0.0;
  v2.CGFloat ty = 0.0;
  CGAffineTransformTranslate(&v1, &v2, (double)(qword_1004F8100 / 3), (double)(*(void *)algn_1004F8108 / 3));
  CGFloat result = v1.a;
  *(CGAffineTransform *)byte_1004F8140 = v1;
  return result;
}

CGFloat sub_1000E7698()
{
  if (qword_1004C2AA0 != -1) {
    swift_once();
  }
  long long v0 = *(_OWORD *)byte_1004F8140;
  long long v1 = *(_OWORD *)&byte_1004F8140[16];
  long long v2 = *(_OWORD *)&byte_1004F8140[32];
  if (qword_1004C2A98 != -1)
  {
    long long v5 = *(_OWORD *)&byte_1004F8140[16];
    long long v6 = *(_OWORD *)byte_1004F8140;
    long long v4 = *(_OWORD *)&byte_1004F8140[32];
    swift_once();
    long long v2 = v4;
    long long v1 = v5;
    long long v0 = v6;
  }
  *(_OWORD *)&t1.a = v0;
  *(_OWORD *)&t1.c = v1;
  *(_OWORD *)&t1.CGFloat tx = v2;
  CGAffineTransform t2 = *(CGAffineTransform *)byte_1004F8110;
  CGAffineTransformConcat(&v7, &t1, &t2);
  CGFloat result = v7.a;
  *(CGAffineTransform *)byte_1004F8170 = v7;
  return result;
}

VTPixelTransferSessionRef sub_1000E777C()
{
  long long v1 = *(OpaqueVTPixelTransferSession **)(v0 + 16);
  VTPixelTransferSessionRef v2 = v1;
  if (v1 == (OpaqueVTPixelTransferSession *)1)
  {
    VTPixelTransferSessionRef v6 = 0;
    VTPixelTransferSessionCreate(0, &v6);
    VTPixelTransferSessionRef v2 = v6;
    uint64_t v3 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v6;
    long long v4 = v2;
    sub_1000E8944(v3);
  }
  sub_1000E8A6C(v1);
  return v2;
}

void *sub_1000E7818(uint64_t a1)
{
  VTPixelTransferSessionRef v2 = v1;
  uint64_t v4 = sub_100012894(&qword_1004CA450);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  CGAffineTransform v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[11] = 0;
  uint64_t v8 = v1 + 11;
  *(v8 - 9) = 1;
  *(v8 - 6) = 0;
  *(v8 - 5) = 0;
  *(v8 - 7) = 0;
  *((unsigned char *)v8 - 32) = 0;
  *(v8 - 2) = 0;
  *(v8 - 1) = _swiftEmptyArrayStorage;
  v8[1] = 0;
  CGFloat result = MTLCreateSystemDefaultDevice();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  void *v8 = result;
  swift_unknownObjectRelease();
  CGFloat result = (void *)*v8;
  if (!*v8)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  CGFloat result = [result newCommandQueue];
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v2[12] = result;
  CGFloat result = (void *)swift_unknownObjectRelease();
  uint64_t v10 = v2[11];
  if (v10)
  {
    id v11 = objc_allocWithZone((Class)MPSImageEDLines);
    LODWORD(v12) = 1036831949;
    LODWORD(v13) = 1035489772;
    LODWORD(v14) = 992204554;
    LODWORD(v15) = 2.0;
    v2[3] = [v11 initWithDevice:v10 gaussianSigma:80 minLineLength:70 maxLines:8 detailRatio:v15 gradientThreshold:v12 lineErrorThreshold:v13 mergeLocalityThreshold:v14];
    v2[8] = a1;
    v17[1] = a1;
    swift_retain();
    swift_retain();
    sub_100012894(&qword_1004CA458);
    sub_10002179C(&qword_1004CA460, &qword_1004CA458);
    Publisher.compactMap<A>(_:)();
    swift_release();
    sub_10002179C(&qword_1004CA468, &qword_1004CA450);
    uint64_t v16 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v2[9] = v16;
    swift_release();
    return v2;
  }
LABEL_9:
  __break(1u);
  return result;
}

id sub_1000E7AA4@<X0>(_WORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v54 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v52 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ariadne_trace(_:_:_:_:_:)();
  memcpy(v61, a1, sizeof(v61));
  memcpy(v63, a1, sizeof(v63));
  uint64_t v12 = sub_1000A3850();
  if (v12)
  {
    double v13 = (void *)v12;
    if (qword_1004C2A90 != -1) {
      goto LABEL_28;
    }
    while (1)
    {
      sub_1000E82B4(v13, qword_1004F8100, *(Swift::Int *)algn_1004F8108);
      uint64_t v53 = v14;
      if (!v14)
      {

        goto LABEL_23;
      }
      id result = (id)*((void *)v3 + 12);
      if (!result)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return result;
      }
      id result = [result commandBuffer];
      id v51 = result;
      if (!result) {
        goto LABEL_30;
      }
      id result = (id)*((void *)v3 + 11);
      if (!result) {
        goto LABEL_31;
      }
      uint64_t v48 = v8;
      uint64_t v49 = v6;
      uint64_t v50 = v5;
      id result = [result newBufferWithLength:1128 options:0];
      if (!result) {
        goto LABEL_32;
      }
      uint64_t v16 = result;
      id v17 = v51;
      [*((id *)v3 + 3) encodeToCommandBuffer:v51 sourceTexture:v53 destinationTexture:0 endpointBuffer:result endpointOffset:0];
      [v17 commit];
      [v17 waitUntilCompleted];
      id v18 = (unsigned int *)[(id)swift_unknownObjectRetain() contents];
      id v19 = v16;
      uint64_t v5 = *v18;
      id v20 = [(id)swift_unknownObjectRetain() contents];
      id v21 = v19;
      uint64_t v58 = (char *)_swiftEmptyArrayStorage;
      id v46 = v21;
      uint64_t v47 = v9;
      if (!v5) {
        break;
      }
      id v45 = a1;
      uint64_t v8 = (uint64_t)v20 + 4;
      if (qword_1004C2AA8 != -1) {
        swift_once();
      }
      uint64_t v24 = 0;
      CGFloat v25 = *(double *)byte_1004F8170;
      CGFloat v26 = *(double *)&byte_1004F8170[8];
      CGFloat v27 = *(double *)&byte_1004F8170[16];
      CGFloat v28 = *(double *)&byte_1004F8170[24];
      CGFloat v29 = *(double *)&byte_1004F8170[32];
      CGFloat v30 = *(double *)&byte_1004F8170[40];
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v3 = (char *)_swiftEmptyArrayStorage;
      double v55 = *(double *)&byte_1004F8170[8];
      double v56 = *(double *)byte_1004F8170;
      while (1)
      {
        a1 = (_WORD *)(v8 + 2 * v24);
        uint64_t v9 = __OFADD__(v24, 4) ? 0x7FFFFFFFFFFFFFFFLL : v24 + 4;
        LOWORD(v22) = *a1;
        v64.CGFloat x = (double)v22;
        LOWORD(v23) = a1[1];
        v64.CGFloat y = (double)v23;
        v62[0].a = v25;
        v62[0].b = v26;
        v62[0].c = v27;
        v62[0].d = v28;
        v62[0].CGFloat tx = v29;
        v62[0].CGFloat ty = v30;
        CGPoint v33 = CGPointApplyAffineTransform(v64, v62);
        CGFloat y = v33.y;
        CGFloat x = v33.x;
        if (__OFADD__(v24, 3)) {
          break;
        }
        LOWORD(x) = a1[2];
        v65.CGFloat x = (double)*(unint64_t *)&x;
        LOWORD(y) = *(_WORD *)(v8 + 2 * (v24 + 3));
        v65.CGFloat y = (double)*(unint64_t *)&y;
        v62[0].a = v25;
        v62[0].b = v26;
        v62[0].c = v27;
        v62[0].d = v28;
        v62[0].CGFloat tx = v29;
        v62[0].CGFloat ty = v30;
        CGPoint v34 = CGPointApplyAffineTransform(v65, v62);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_10006EC7C(0, *((void *)v3 + 2) + 1, 1, v3);
        }
        unint64_t v36 = *((void *)v3 + 2);
        unint64_t v35 = *((void *)v3 + 3);
        if (v36 >= v35 >> 1) {
          uint64_t v3 = sub_10006EC7C((char *)(v35 > 1), v36 + 1, 1, v3);
        }
        *((void *)v3 + 2) = v36 + 1;
        id v37 = (CGPoint *)&v3[32 * v36];
        v37[2] = v33;
        v37[3] = v34;
        uint64_t v24 = v9;
        CGFloat v26 = v55;
        CGFloat v25 = v56;
        if (v9 >= v5)
        {
          uint64_t v58 = v3;
          a1 = v45;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_28:
      swift_once();
    }
    uint64_t v3 = (char *)_swiftEmptyArrayStorage;
LABEL_25:
    sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
    Class v38 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v3;
    *(void *)&v62[0].CGFloat tx = sub_1000E8A4C;
    *(void *)&v62[0].CGFloat ty = v39;
    *(void *)&v62[0].a = _NSConcreteStackBlock;
    *(void *)&v62[0].b = 1107296256;
    *(void *)&v62[0].c = sub_100049AB4;
    *(void *)&v62[0].d = &unk_10048D7F0;
    id v40 = _Block_copy(v62);
    swift_bridgeObjectRetain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    *(void *)&v62[0].a = _swiftEmptyArrayStorage;
    sub_100039B94();
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
    id v41 = v52;
    uint64_t v42 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v40);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v41, v42);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v48);
    swift_beginAccess();
    id v43 = sub_10019C1BC((uint64_t)v58);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    memcpy(&v57[8], v63, 0x200uLL);
    id v59 = v43;
    memcpy(v60, v57, sizeof(v60));
    nullsub_1(&v59);
    sub_100053000((uint64_t)a1);
  }
  else
  {
LABEL_23:
    sub_1000E8A0C(&v59);
  }
  ariadne_trace(_:_:_:_:_:)();
  sub_1000E89A4((uint64_t)&v59, (uint64_t)v62);
  return (id)sub_1000E89A4((uint64_t)v62, v54);
}

void sub_1000E8178(__CVBuffer *a1)
{
  Swift::Int v3 = (uint64_t)CVPixelBufferGetWidth(a1) / 3;
  Swift::Int v4 = (uint64_t)CVPixelBufferGetHeight(a1) / 3;
  Swift::UInt32 PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v6.value = makePixelBuffer(width:height:pixelFormat:)(v3, v4, PixelFormatType).value;
  uint64_t v7 = *(void **)(v1 + 32);
  *(CVBufferRef_optional *)(v1 + 32) = v6;

  uint64_t v8 = *(void **)(v1 + 32);
  if (!v8)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = v8;
  unint64_t v10 = (unint64_t)makeIOSurfaceOfFirstPlane(from:)(v9);

  id v11 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = v10;

  if (!*(void *)(v1 + 88))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v12 = *(__IOSurface **)(v1 + 40);
  if (!v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_unknownObjectRetain();
  IOSurfaceGetWidth(v12);
  double v13 = *(__IOSurface **)(v1 + 40);
  if (!v13)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  IOSurfaceGetHeight(v13);
  uint64_t v14 = *(void **)(v1 + 40);
  if (!v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v15 = v14;
  uint64_t v16 = makeIOSurfaceTexture(device:width:height:pixelFormat:iosurface:)();
  swift_unknownObjectRelease();

  if (v16)
  {
    *(void *)(v1 + 48) = v16;
    swift_unknownObjectRelease();
    *(unsigned char *)(v1 + 56) = 1;
    return;
  }
LABEL_13:
  __break(1u);
}

void sub_1000E82B4(void *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v4 = v3;
  id v7 = [a1 capturedImage];
  v8.width = a2;
  v8.height = a3;
  v9.value = CVBufferRef.copiedPlane(_:with:format:)(0, v8, 0x4C303038u).value;

  if (v9.value)
  {
    if ((*(unsigned char *)(v4 + 56) & 1) == 0) {
      sub_1000E8178(v9.value);
    }
    unint64_t v10 = sub_1000E777C();
    if (v10)
    {
      id v11 = *(__CVBuffer **)(v4 + 32);
      if (v11)
      {
        uint64_t v12 = v10;
        VTPixelTransferSessionTransferImage(v10, v9.value, v11);

        double v13 = *(void **)(v4 + 40);
        if (v13)
        {
          uint64_t v14 = *(void **)(v4 + 32);
          if (v14)
          {
            id v15 = v13;
            id v16 = v14;
            v17.super.Class isa = v15;
            v17._impl = v16;
            fillIOSurface(_:with:fromPlaneIndex:)(v17, 0, v18);

            swift_unknownObjectRetain();
            return;
          }
          goto LABEL_13;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

uint64_t sub_1000E83B8(uint64_t result)
{
  uint64_t v1 = result;
  if (qword_1004C29D8 != -1) {
    id result = swift_once();
  }
  if (qword_1004F7FE0)
  {
    VTPixelTransferSessionRef v2 = *(void **)(qword_1004F7FE0 + 72);
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = sub_10019C1DC(v1);
      sub_10008C8CC((uint64_t)v4);

      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id *sub_1000E845C()
{
  sub_1000E8944(v0[2]);

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1000E84C4()
{
  sub_1000E845C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DepthEdgeDetector()
{
  return self;
}

uint64_t destroy for DepthEdgeDetector.Output()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for DepthEdgeDetector.Output(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x1E0uLL);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DepthEdgeDetector.Output(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  return a1;
}

void *initializeWithTake for DepthEdgeDetector.Output(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x210uLL);
}

uint64_t assignWithTake for DepthEdgeDetector.Output(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  long long v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  long long v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  long long v9 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v9;
  long long v10 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v10;
  long long v11 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v11;
  long long v12 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v12;
  long long v13 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v13;
  long long v14 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v14;
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  long long v15 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v15;
  long long v16 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v16;
  long long v17 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for DepthEdgeDetector.Output(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 528)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DepthEdgeDetector.Output(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 520) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 528) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 528) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DepthEdgeDetector.Output()
{
  return &type metadata for DepthEdgeDetector.Output;
}

ValueMetadata *type metadata accessor for DepthEdgeDetector.Input()
{
  return &type metadata for DepthEdgeDetector.Input;
}

void sub_1000E8944(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_1000E8954@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  memcpy(__dst, __src, 0x200uLL);
  sub_1000E7AA4(__dst, (uint64_t)v4);
  return sub_1000E89A4((uint64_t)v4, a2);
}

uint64_t sub_1000E89A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894(&qword_1004CA470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000E8A0C(void *a1)
{
}

uint64_t sub_1000E8A14()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E8A4C()
{
  return sub_1000E83B8(*(void *)(v0 + 16));
}

uint64_t sub_1000E8A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E8A64()
{
  return swift_release();
}

id sub_1000E8A6C(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_1000E8A7C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v17 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Report(0);
  __chkstk_darwin(v7);
  long long v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E8F08();
  sub_1000EA5E4(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter_report, (uint64_t)v9);
  sub_1000EA708(&qword_1004CA5E8, (void (*)(uint64_t))type metadata accessor for Report);
  uint64_t v10 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v12 = v11;
  sub_1000EA648((uint64_t)v9);
  swift_release();
  v16[1] = *(void *)(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter_ioQueue);
  long long v13 = (void *)swift_allocObject();
  v13[2] = v10;
  v13[3] = v12;
  _OWORD v13[4] = v0;
  aBlock[4] = sub_1000EA6E4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100049AB4;
  aBlock[3] = &unk_10048D840;
  long long v14 = _Block_copy(aBlock);
  sub_100040374(v10, v12);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  void aBlock[6] = _swiftEmptyArrayStorage;
  sub_1000EA708((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_10003FD50((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  sub_10004007C(v10, v12);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  return swift_release();
}

uint64_t sub_1000E8F08()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONEncoder.OutputFormatting();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = OBJC_IVAR____TtC7Measure15ResultsReporter____lazy_storage___encoder;
  if (*(void *)(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter____lazy_storage___encoder))
  {
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter____lazy_storage___encoder);
  }
  else
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    uint64_t v4 = JSONEncoder.init()();
    static JSONEncoder.OutputFormatting.prettyPrinted.getter();
    dispatch thunk of JSONEncoder.outputFormatting.setter();
    *(void *)(v1 + v3) = v4;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000E8FE0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v24 = a1;
  uint64_t v23 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  __chkstk_darwin(v6);
  unint64_t v22 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = v1 + OBJC_IVAR____TtC7Measure15ResultsReporter_report;
  Date.init()();
  *(void *)(v10 + *(int *)(type metadata accessor for Report(0) + 20)) = _swiftEmptyArrayStorage;
  uint64_t v19 = OBJC_IVAR____TtC7Measure15ResultsReporter_ioQueue;
  v18[1] = sub_10005536C();
  CGFloat v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  if (qword_1004C2A18 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1004F8070;
  unint64_t v11 = *(void *)algn_1004F8078;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  CGFloat v25 = (void *)v12;
  unint64_t v26 = v11;
  v13._object = (void *)0x80000001004252E0;
  v13._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v13);
  v18[0] = v25;
  static DispatchQoS.background.getter();
  CGFloat v25 = _swiftEmptyArrayStorage;
  sub_1000EA708((unint64_t *)&qword_1004C6B50, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100012894(&qword_1004CF220);
  sub_10003FD50((unint64_t *)&qword_1004C6B60, &qword_1004CF220);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v20 + 104))(v22, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v21);
  uint64_t v14 = v23;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.background(_:), v23);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v14);
  *(void *)(v2 + v19) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v2 + OBJC_IVAR____TtC7Measure15ResultsReporter____lazy_storage___encoder) = 0;
  uint64_t v15 = v2 + OBJC_IVAR____TtC7Measure15ResultsReporter_file;
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, v24, v16);
  return v2;
}

uint64_t sub_1000E9400()
{
  return Data.write(to:options:)();
}

uint64_t sub_1000E9534()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Measure15ResultsReporter_file;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1000EA648(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter_report);

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1000E9604()
{
  return type metadata accessor for ResultsReporter(0);
}

uint64_t type metadata accessor for ResultsReporter(uint64_t a1)
{
  return sub_1000E9730(a1, qword_1004CA4B8);
}

uint64_t sub_1000E962C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Report(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Report(uint64_t a1)
{
  return sub_1000E9730(a1, qword_1004CA5B0);
}

uint64_t sub_1000E9730(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1000E9768(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000E9838(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E98AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000E992C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000E99B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000E9A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000E9AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E9ACC);
}

uint64_t sub_1000E9ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000E9B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E9BA0);
}

uint64_t sub_1000E9BA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000E9C5C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000E9CF4()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004C2A28 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_1004F8098;
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v6 = [v4 stringFromDate:isa];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  strcpy((char *)v15, ".measurements");
  v15[7] = -4864;
  uint64_t v13 = v7;
  uint64_t v14 = v9;
  swift_bridgeObjectRetain();
  uint64_t v13 = String.init<A>(_:)();
  uint64_t v14 = v10;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  if (qword_1004C2A30 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for URL();
  sub_1000217E0(v11, (uint64_t)qword_1004F80A0);
  URL.appendingPathComponent(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E9F1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100113370(*a1, *a2);
}

Swift::Int sub_1000E9F28()
{
  return Hasher._finalize()();
}

uint64_t sub_1000E9FCC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000EA05C()
{
  return Hasher._finalize()();
}

unint64_t sub_1000EA0FC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000EA9B0(*a1);
  *a2 = result;
  return result;
}

void sub_1000EA12C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE900000000000065;
  uint64_t v5 = 0x6D69547472617473;
  if (v2 != 1)
  {
    uint64_t v5 = 0x656D6954646E65;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x73746E657665;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000EA18C()
{
  uint64_t v1 = 0x6D69547472617473;
  if (*v0 != 1) {
    uint64_t v1 = 0x656D6954646E65;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x73746E657665;
  }
}

unint64_t sub_1000EA1E8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000EA9B0(a1);
  *a2 = result;
  return result;
}

void sub_1000EA210(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000EA21C(uint64_t a1)
{
  unint64_t v2 = sub_1000EA750();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EA258(uint64_t a1)
{
  unint64_t v2 = sub_1000EA750();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EA294(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100012894(&qword_1004CA5F0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000131D4(a1, a1[3]);
  sub_1000EA750();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v20[0] = 1;
  sub_1000EA708(&qword_1004CA600, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v11 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  Date.init()();
  v20[0] = 2;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v4);
  v20[55] = 0;
  uint64_t v19 = v7;
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v13 = *(void *)(v2 + *(int *)(type metadata accessor for Report(0) + 20));
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v15 = v13 + 40;
    do
    {
      uint64_t v16 = *(void (**)(unsigned char *))(v15 - 8);
      swift_retain();
      v16(v20);
      swift_release();
      v15 += 16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  return sub_100013218((uint64_t)v20);
}

uint64_t sub_1000EA5CC(void *a1)
{
  return sub_1000EA294(a1);
}

uint64_t sub_1000EA5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Report(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EA648(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Report(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000EA6A4()
{
  sub_10004007C(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000EA6E4()
{
  return sub_1000E9400();
}

uint64_t sub_1000EA6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000EA700()
{
  return swift_release();
}

uint64_t sub_1000EA708(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000EA750()
{
  unint64_t result = qword_1004CA5F8;
  if (!qword_1004CA5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CA5F8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Report.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EA870);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Report.CodingKeys()
{
  return &type metadata for Report.CodingKeys;
}

unint64_t sub_1000EA8AC()
{
  unint64_t result = qword_1004CA608;
  if (!qword_1004CA608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CA608);
  }
  return result;
}

unint64_t sub_1000EA904()
{
  unint64_t result = qword_1004CA610;
  if (!qword_1004CA610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CA610);
  }
  return result;
}

unint64_t sub_1000EA95C()
{
  unint64_t result = qword_1004CA618;
  if (!qword_1004CA618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CA618);
  }
  return result;
}

unint64_t sub_1000EA9B0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004857B8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unsigned char *storeEnumTagSinglePayload for InstrumentationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EAAC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstrumentationMode()
{
  return &type metadata for InstrumentationMode;
}

unint64_t sub_1000EAB04()
{
  unint64_t result = qword_1004CA620;
  if (!qword_1004CA620)
  {
    sub_100016EF4(&qword_1004CA628);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CA620);
  }
  return result;
}

uint64_t *sub_1000EAB60@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_1000EAB78(void *a1@<X8>)
{
  *a1 = &off_100485820;
}

unint64_t sub_1000EAB8C()
{
  unint64_t result = qword_1004CA630;
  if (!qword_1004CA630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CA630);
  }
  return result;
}

uint64_t sub_1000EABE0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000EAC30(uint64_t a1)
{
  int v3 = (void *)(v1 + qword_1004CA638);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000EAC84())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000EACE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004CA640;
  swift_beginAccess();
  return sub_10002EFD0(v3, a1);
}

uint64_t sub_1000EAD34(uint64_t a1)
{
  uint64_t v3 = v1 + qword_1004CA640;
  swift_beginAccess();
  sub_10002EF68(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_1000EAD90())()
{
  return j__swift_endAccess;
}

id sub_1000EADEC(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[qword_1004CA638] = _swiftEmptyArrayStorage;
  uint64_t v9 = &v4[qword_1004CA640];
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((void *)v9 + 4) = 0;
  v12.receiver = v4;
  v12.super_class = (Class)type metadata accessor for StateObservingStackView();
  id v10 = [super initWithFrame:a1, a2, a3, a4];
  swift_getWitnessTable();
  StateObserving.setup()();

  return v10;
}

id sub_1000EAF00(double a1, double a2, double a3, double a4)
{
  return sub_1000EADEC(a1, a2, a3, a4);
}

void sub_1000EAF24()
{
  *(void *)&v0[qword_1004CA638] = _swiftEmptyArrayStorage;
  uint64_t v1 = &v0[qword_1004CA640];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000EAFB0()
{
}

void sub_1000EAFD4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  sub_1000EB25C();
}

id sub_1000EAFFC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StateObservingStackView();
  return [super dealloc];
}

uint64_t sub_1000EB070(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + qword_1004CA640;

  return sub_10002F0C4(v2);
}

uint64_t type metadata accessor for StateObservingStackView()
{
  return sub_10002F124();
}

uint64_t (*sub_1000EB0DC(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1000EAD90();
  return sub_10002EDF4;
}

uint64_t sub_1000EB134()
{
  sub_1000EB214();

  return swift_bridgeObjectRetain();
}

uint64_t (*sub_1000EB160(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1000EAC84();
  return sub_10002EDF4;
}

void sub_1000EB1B8()
{
}

uint64_t sub_1000EB214()
{
  uint64_t v1 = v0 + qword_1004CA638;
  swift_beginAccess();
  return *(void *)v1;
}

void sub_1000EB25C()
{
  *(void *)&v0[qword_1004CA638] = _swiftEmptyArrayStorage;
  uint64_t v1 = &v0[qword_1004CA640];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000EB428()
{
}

void sub_1000EB450()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 80) = 0;
  *(unsigned char *)(v0 + 88) = 1;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(unsigned char *)(v0 + 160) = 1;
  uint64_t v2 = v0 + qword_1004CA730;
  uint64_t v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(void *)(v1 + qword_1004CA738) = 0x3FE0000000000000;
  *(unsigned char *)(v1 + qword_1004CA740) = 0;
  uint64_t v4 = qword_1004CA748;
  uint64_t v5 = sub_100012894(&qword_1004C54B8);
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1004F8630;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 272);
  swift_retain();
  *(void *)(v1 + v4) = v8(KeyPath, v7);
  uint64_t v9 = qword_1004CA750;
  uint64_t v10 = sub_100012894(&qword_1004C58F0);
  uint64_t v11 = swift_getKeyPath();
  uint64_t v12 = qword_1004F8630;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 272);
  swift_retain();
  *(void *)(v1 + v9) = v13(v11, v12);
  uint64_t v14 = qword_1004CA758;
  uint64_t v15 = sub_100012894(&qword_1004C58F8);
  uint64_t v16 = swift_getKeyPath();
  uint64_t v17 = qword_1004F8630;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 272);
  swift_retain();
  *(void *)(v1 + v14) = v18(v16, v17);
  uint64_t v19 = qword_1004CA760;
  uint64_t v20 = swift_getKeyPath();
  uint64_t v21 = sub_100012894(&qword_1004C3EE0);
  uint64_t v22 = qword_1004F8630;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 272);
  swift_retain();
  *(void *)(v1 + v19) = v23(v20, v22);
  uint64_t v24 = qword_1004CA768;
  uint64_t v25 = swift_getKeyPath();
  uint64_t v26 = sub_100012894(&qword_1004CA908);
  uint64_t v27 = qword_1004F8630;
  CGFloat v28 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 272);
  swift_retain();
  *(void *)(v1 + v24) = v28(v25, v27);
  uint64_t v29 = qword_1004CA770;
  uint64_t v30 = swift_getKeyPath();
  uint64_t v31 = sub_100012894(&qword_1004C6AD0);
  uint64_t v32 = qword_1004F8630;
  CGPoint v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 272);
  swift_retain();
  *(void *)(v1 + v29) = v33(v30, v32);
  CGPoint v34 = (void *)(v1 + qword_1004CA778);
  *CGPoint v34 = 0;
  v34[1] = 0;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000EB790()
{
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)();

  return swift_release();
}

void sub_1000EB864(uint64_t a1, uint64_t a2)
{
  void (*v4)(long long *__return_ptr, uint64_t);
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_OWORD *__return_ptr, uint64_t);
  uint64_t v10;
  id v11;
  _OWORD v12[9];
  char v13;
  _OWORD v14[9];
  char v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  char v25;
  uint64_t vars8;

  if (qword_1004C2D00 != -1) {
    swift_once();
  }
  if (byte_1004F8530 == 1)
  {
    uint64_t v3 = qword_1004CA768;
    uint64_t v4 = *(void (**)(long long *__return_ptr, uint64_t))(**(void **)(a2 + qword_1004CA768) + 144);
    uint64_t v5 = *(id *)(a2 + 64);
    unsigned int v6 = swift_retain();
    v4(&v16, v6);
    swift_release();
    v14[6] = v22;
    v14[7] = v23;
    v14[8] = v24;
    uint64_t v15 = v25;
    _OWORD v14[2] = v18;
    v14[3] = v19;
    v14[4] = v20;
    v14[5] = v21;
    v14[0] = v16;
    v14[1] = v17;
    uint64_t v8 = *((void *)&v16 + 1);
    uint64_t v7 = v17;
    swift_bridgeObjectRetain();
    sub_1000ED828((uint64_t)v14);
    uint64_t v9 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)(a2 + v3) + 144);
    uint64_t v10 = swift_retain();
    v9(v12, v10);
    swift_release();
    uint64_t v22 = v12[6];
    uint64_t v23 = v12[7];
    uint64_t v24 = v12[8];
    uint64_t v25 = v13;
    uint64_t v18 = v12[2];
    uint64_t v19 = v12[3];
    uint64_t v20 = v12[4];
    uint64_t v21 = v12[5];
    uint64_t v16 = v12[0];
    uint64_t v17 = v12[1];
    sub_1000ED828((uint64_t)&v16);
    sub_1000F5B04(v8, v7, SBYTE1(v16));

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(id *)(a2 + 64);
    sub_1000F6404();
  }
}

void sub_1000EBA50(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *a1;
  if (v3 == 5)
  {
    id v5 = *(id *)(a2 + 64);
    sub_1000F866C();

    id v6 = *(id *)(a2 + 64);
    sub_1000F8678();
  }
  else
  {
    if (v3 != 4) {
      return;
    }
    id v4 = *(id *)(a2 + 64);
    sub_1000F848C();

    id v6 = *(id *)(a2 + 64);
    sub_1000F84A0();
  }
}

void sub_1000EBB04(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = a1[1];
  if (v2 >= 2)
  {
    uint64_t v3 = *a1;
    id v4 = *(id *)(a2 + 64);
    sub_1000F6728(v3, v2);
  }
}

uint64_t sub_1000EBBAC()
{
  sub_1000DB3D4(v0 + qword_1004CA730);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000EBC58()
{
  uint64_t v0 = StateObserver.deinit();

  sub_1000DB3D4(v0 + qword_1004CA730);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000EBD0C()
{
  sub_1000EBC58();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LineController()
{
  uint64_t result = qword_1004CA7A8;
  if (!qword_1004CA7A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000EBDAC()
{
  sub_10006B9DC();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

void sub_1000EBE8C(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = *(char **)(v4 + 64);
  uint64_t v9 = &v8[*a3];
  swift_beginAccess();
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(*(void *)v9 + 16);
  uint64_t v12 = v8;
  if (!v11) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_1000E20D4(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_endAccess();
    goto LABEL_6;
  }
  uint64_t v15 = *(void **)(*(void *)(v10 + 56) + 8 * v13);
  swift_endAccess();
  id v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = self;
  [v17 begin];
  [v16 removeFromParentNode];
  [v17 commit];
  swift_beginAccess();
  uint64_t v18 = a4(a1, a2);
  swift_endAccess();

  uint64_t v12 = (char *)v18;
LABEL_6:
}

void sub_1000EBFD4(void *a1)
{
  void (*v18)(int8x16_t *__return_ptr, uint64_t);
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  char v22;
  uint64_t (*v23)(void);
  void *v24;
  uint64_t v25;
  double (*v26)(void);
  void *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  __int16 v36;
  char v37;
  int v38;
  uint64_t (*v39)(void);
  void *v40;
  uint64_t v41;
  double (*v42)(void);
  void *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  BOOL v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  char *v64;
  double v65;
  double v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  id v69;
  char *v70;
  char *v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned char v80[80];
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  BOOL v85;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v70 - v9;
  uint64_t v11 = sub_100012894((uint64_t *)&unk_1004C68F0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  char v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v70 - v16;
  if ((unint64_t)((*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xD0))(v15) - 3) > 1) {
    goto LABEL_22;
  }
  id v76 = v14;
  Class v70 = v8;
  uint64_t v71 = v10;
  id v77 = v17;
  id v78 = v5;
  id v79 = v4;
  uint64_t v18 = *(void (**)(int8x16_t *__return_ptr, uint64_t))(**(void **)(v1 + qword_1004CA760) + 144);
  uint64_t v19 = swift_retain();
  v18(&v81, v19);
  swift_release();
  uint64_t v20 = v81;

  uint64_t v21 = *(void *)(v1 + 80);
  uint64_t v22 = *(unsigned char *)(v1 + 88);
  if (v20.i64[1])
  {
    uint64_t v23 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v20.i64[1]) + 0x2F0);
    uint64_t v24 = (id)v20.i64[1];
    uint64_t v25 = v23();

    sub_100016FEC(v2 + 96, (uint64_t)v80, &qword_1004C3F20);
    uint64_t v26 = *(double (**)(void))((swift_isaMask & *v24) + 0x2B0);
    uint64_t v27 = v24;
    *(double *)v28.i64 = v26();
    id v75 = v28;
    id v74 = v29;
    id v73 = v30;
    id v72 = v31;

    uint64_t v32 = v72;
    CGPoint v33 = v73;
    CGPoint v34 = v74;
    unint64_t v35 = v75;
  }
  else
  {
    sub_100016FEC(v1 + 96, (uint64_t)v80, &qword_1004C3F20);
    uint64_t v25 = 0;
    unint64_t v35 = 0uLL;
    CGPoint v34 = 0uLL;
    CGPoint v33 = 0uLL;
    uint64_t v32 = 0uLL;
  }
  id v81 = v35;
  id v82 = v34;
  id v83 = v33;
  id v84 = v32;
  id v85 = v20.i64[1] == 0;
  unint64_t v36 = sub_1001B5AE8(v21, v22, v25, v20.i64[1] == 0, (uint64_t)v80, (uint64_t)&v81);
  id v37 = v36 & 1;
  Class v38 = v36 & 0x100;
  word_1004F8519 = v36 & 0x101;
  if (v20.i64[1])
  {
    uint64_t v39 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v20.i64[1]) + 0x2F0);
    id v40 = (id)v20.i64[1];
    id v41 = v39();

    uint64_t v42 = *(double (**)(void))((swift_isaMask & *v40) + 0x2B0);
    id v43 = v40;
    *(double *)v44.i64 = v42();
    id v75 = v44;
    id v73 = v45;
    id v72 = v46;
    id v74 = v47;

    uint64_t v48 = v75.i64[0];
    uint64_t v49 = vextq_s8(v75, v73, 8uLL);
    uint64_t v50 = vextq_s8(v73, v72, 8uLL);
    id v51 = vextq_s8(v72, v74, 8uLL);
    id v52 = v74.i64[1];
  }
  else
  {
    id v41 = 0;
    uint64_t v49 = 0uLL;
    uint64_t v50 = 0uLL;
    id v51 = 0uLL;
    uint64_t v48 = 0;
    id v52 = 0;
  }
  *(void *)(v2 + 80) = v41;
  *(unsigned char *)(v2 + 88) = v20.i64[1] == 0;
  *(void *)(v2 + 96) = v48;
  *(int8x16_t *)(v2 + 104) = v49;
  *(int8x16_t *)(v2 + 120) = v50;
  *(void *)(v2 + 152) = v52;
  *(int8x16_t *)(v2 + 136) = v51;
  *(unsigned char *)(v2 + 160) = v20.i64[1] == 0;
  uint64_t v53 = v41 == 6 && v20.i64[1] != 0;
  (*(void (**)(BOOL))((swift_isaMask & *a1) + 0x2A0))(v53);
  uint64_t v54 = sub_1000EC774(a1, v37, v38 != 0);
  if (v54 == 2)
  {

    return;
  }
  if ((v54 & 1) != 0 || v38)
  {
    *(unsigned char *)(v2 + qword_1004CA740) = BYTE1(v38);
    id v59 = *(id *)(v2 + 64);
    sub_1000F77E4(a1, 1, 0);

    id v60 = (uint64_t)v77;
    Date.init()();

    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v60, 0, 1, v79);
    id v61 = v2 + qword_1004CA730;
    swift_beginAccess();
    sub_1000DB434(v60, v61);
    swift_endAccess();
    return;
  }
  double v55 = v2 + qword_1004CA730;
  swift_beginAccess();
  double v56 = (uint64_t)v76;
  sub_1000DB36C(v55, (uint64_t)v76);
  Class v57 = v78;
  uint64_t v58 = v79;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v56, 1, v79) == 1)
  {

    sub_1000DB3D4(v20.i64[0]);
LABEL_22:
    id v69 = *(id *)(v2 + 64);
    sub_1000F77E4(a1, 0, 0);

    return;
  }
  id v62 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v71, v56, v58);
  id v76 = (char *)qword_1004CA740;
  if (*(unsigned char *)(v2 + qword_1004CA740) == 1)
  {
    id v63 = *(id *)(v2 + 64);
    sub_1000F77E4(a1, 0, 1);
  }
  CGPoint v64 = v70;
  Date.init()();
  Date.timeIntervalSince(_:)();
  id v66 = v65;
  id v67 = *(void (**)(char *, uint64_t))(v57 + 8);
  v67(v64, v58);

  v67(v62, v58);
  if (fabs(v66) > 0.5)
  {
    id v68 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v77, 1, 1, v58);
    swift_beginAccess();
    sub_1000DB434(v68, v55);
    swift_endAccess();
    v76[v2] = 0;
    goto LABEL_22;
  }
}

uint64_t sub_1000EC774(void *a1, char a2, char a3)
{
  void (*v18)(_OWORD *__return_ptr, uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t result;
  void *v22;
  uint64_t (*v23)(id);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  void (*v48)(char *, uint64_t);
  float v49;
  id v50;
  id v51;
  uint64_t v52;
  void v53[2];
  char *v54;
  uint64_t v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60[20];
  _OWORD v61[9];
  uint64_t v62;
  _OWORD v63[9];
  uint64_t v64;

  uint64_t v4 = v3;
  Class v57 = a1;
  uint64_t v7 = sub_100012894((uint64_t *)&unk_1004C68F0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  double v56 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v53 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v58 = *(void *)(v12 - 8);
  id v59 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v53 - v16;
  uint64_t v18 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)(v3 + qword_1004CA770) + 144);
  uint64_t v19 = swift_retain();
  v18(v61, v19);
  swift_release();
  v63[6] = v61[6];
  v63[7] = v61[7];
  v63[8] = v61[8];
  CGPoint v64 = v62;
  v63[2] = v61[2];
  v63[3] = v61[3];
  v63[4] = v61[4];
  v63[5] = v61[5];
  v63[0] = v61[0];
  v63[1] = v61[1];
  sub_100016B40((id *)v63);
  sub_100016F3C((uint64_t)v63);
  sub_100016FEC((uint64_t)v63, (uint64_t)v61, (uint64_t *)&unk_1004CEA30);
  if (sub_100016B28((uint64_t *)v61) == 1)
  {
    uint64_t v20 = (void *)(v3 + qword_1004CA778);
    void *v20 = 0;
    v20[1] = 0;
    swift_bridgeObjectRelease();
    return a2 & 1;
  }
  uint64_t v22 = *(void **)&v61[0];
  if (a2)
  {
    uint64_t v23 = *(uint64_t (**)(id))((swift_isaMask & **(void **)&v61[0]) + 0xB8);
    sub_100016FEC((uint64_t)v63, (uint64_t)v60, (uint64_t *)&unk_1004CEA30);
    uint64_t v24 = v23(v60[0]);
    uint64_t v26 = v25;
    sub_100016B6C((id *)v63);
    sub_100016B6C((id *)v63);
    uint64_t v27 = (uint64_t *)(v4 + qword_1004CA778);
    *uint64_t v27 = v24;
    v27[1] = v26;
    swift_bridgeObjectRelease();
    return 1;
  }
  if (a3)
  {
    sub_100016B6C((id *)v63);
    return 0;
  }
  CGFloat v28 = (uint64_t *)(v4 + qword_1004CA778);
  uint64_t v29 = *(void *)(v4 + qword_1004CA778);
  uint64_t v30 = *(void *)(v4 + qword_1004CA778 + 8);
  uint64_t v54 = v17;
  double v55 = v29;
  uint64_t v31 = *(uint64_t (**)(void))((swift_isaMask & **(void **)&v61[0]) + 0xB8);
  uint64_t v32 = (swift_isaMask & **(void **)&v61[0]) + 184;
  sub_100016B40((id *)v63);
  CGPoint v33 = swift_bridgeObjectRetain();
  v53[1] = v32;
  CGPoint v34 = ((uint64_t (*)(uint64_t))v31)(v33);
  unint64_t v36 = v35;
  sub_100016B6C((id *)v63);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v55 == v34 && v30 == v36)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Class v38 = v58;
    id v37 = v59;
    uint64_t v39 = v54;
    goto LABEL_13;
  }
  LODWORD(v55) = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Class v38 = v58;
  id v37 = v59;
  uint64_t v39 = v54;
  if ((v55 & 1) == 0)
  {
LABEL_15:
    uint64_t v42 = v22;
    id v43 = v31();
    id v45 = v44;
    sub_100016B6C((id *)v63);
    sub_100016B6C((id *)v63);
    *CGFloat v28 = v43;
    v28[1] = v45;
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_13:
  id v40 = v4 + qword_1004CA730;
  swift_beginAccess();
  sub_1000DB36C(v40, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v11, 1, v37) == 1)
  {
    sub_1000DB3D4((uint64_t)v11);
    id v41 = *(id *)(v4 + 64);
    sub_1000F77E4(v57, 0, 0);

    sub_100016B6C((id *)v63);
    return 2;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v39, v11, v37);
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v47 = v46;
    uint64_t v48 = *(void (**)(char *, uint64_t))(v38 + 8);
    v48(v15, v37);
    uint64_t v49 = spring(tension:friction:velocity:elapsed:)(400.0, 40.0, 0.0, fabs(v47));
    if (v49 < 0.0 || v49 >= 1.0)
    {
      if (v49 < 1.0)
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        id v51 = *(id *)(v4 + 64);
        sub_1000F77E4(v57, 0, 1);

        sub_100016B6C((id *)v63);
        v48(v39, v37);
        id v52 = (uint64_t)v56;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v56, 1, 1, v37);
        swift_beginAccess();
        sub_1000DB434(v52, v40);
        swift_endAccess();
        *(unsigned char *)(v4 + qword_1004CA740) = 0;
        return 2;
      }
    }
    else
    {
      uint64_t v50 = *(id *)(v4 + 64);
      sub_1000F77E4(v57, 0, 1);

      sub_100016B6C((id *)v63);
      v48(v39, v37);
      return 2;
    }
  }
  return result;
}

void sub_1000ECDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(v2 + 64);
  uint64_t v6 = &v5[OBJC_IVAR____TtC7Measure8LineView_worldLines];
  swift_beginAccess();
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = v5;
  if (v8)
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1000E20D4(a1, a2);
    if (v11)
    {
      uint64_t v12 = *(void **)(*(void *)(v7 + 56) + 8 * v10);
      swift_endAccess();
      id v13 = v12;
      swift_bridgeObjectRelease();
      uint64_t v14 = (void *)swift_allocObject();
      _OWORD v14[2] = v13;
      v14[3] = v9;
      v14[4] = a1;
      v14[5] = a2;
      uint64_t v15 = v9;
      swift_bridgeObjectRetain();
      id v16 = v13;
      sub_1000F0978(sub_1000ED490, (uint64_t)v14);

      swift_release();
      return;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
}

void sub_1000ECEDC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  uint64_t v6 = *(void *)(v1 + qword_1004CA778 + 8);
  if (v6)
  {
    if (v4 == *(void *)(v1 + qword_1004CA778) && v6 == v5)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) == 0) {
        goto LABEL_13;
      }
    }
    uint64_t v9 = (id *)(v1 + 64);
    id v10 = *(id *)(v1 + 64);
    uint64_t v11 = sub_1000F7D9C();
    uint64_t v13 = v12;
    char v15 = v14;

    if ((v15 & 1) == 0)
    {
      *(void *)&long long v16 = v11;
      *((void *)&v16 + 1) = v13;
      *(_OWORD *)uint64_t v21 = v16;
      (*(void (**)(void))((swift_isaMask & *a1) + 0x2A0))();
      uint64_t v17 = simd_float4x4.position.getter();
      (*(void (**)(uint64_t))((swift_isaMask & *a1) + 0x2A8))(v17);
      simd_float4x4.position.getter();
      closestPointOnLine(lineP1:lineP2:point:)();
      float32x4_t v19 = vsubq_f32(v18, *(float32x4_t *)v21);
      v20.i32[0] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
      v20.i32[1] = v18.i32[0];
      *(float32x2_t *)v18.f32 = vsub_f32(v20, (float32x2_t)__PAIR64__(v11, v13));
      *(float32x2_t *)v18.f32 = vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
      if ((float)(v18.f32[0] + (float)(v18.f32[1] + COERCE_FLOAT(vmulq_f32(v19, v19).i32[1]))) >= 0.0001) {
        return;
      }
      goto LABEL_14;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_13:
  uint64_t v9 = (id *)(v2 + 64);
LABEL_14:
  id v22 = *v9;
  sub_1000F7F68(a1);
}

void sub_1000ED124(void *a1)
{
  id v3 = *(id *)(v1 + 64);
  sub_1000F6B0C(a1, 0);
}

void sub_1000ED180(uint64_t a1, uint64_t a2)
{
}

void sub_1000ED1B4(void *a1)
{
  id v3 = *(id *)(v1 + 64);
  sub_1000F6E5C(a1);
}

void sub_1000ED20C(void *a1)
{
  id v3 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x238);
  id v5 = *(id *)(v1 + 64);
  char v4 = v3() == 2;
  sub_1000F71C8(a1, 0, v4);
}

void sub_1000ED2B4(uint64_t a1, uint64_t a2)
{
}

void sub_1000ED2EC(void *a1)
{
  id v3 = *(id *)(v1 + 64);
  sub_1000F7B68(a1);
}

void sub_1000ED34C()
{
  id v1 = *(id *)(v0 + 64);
  sub_1000F8118();
}

void sub_1000ED398(char a1)
{
  id v3 = *(void **)(v1 + 64);
  char v4 = self;
  id v5 = v3;
  [v4 begin];
  [*(id *)&v5[OBJC_IVAR____TtC7Measure8LineView_lineParentNode] setHidden:a1 & 1];
  [v4 commit];
}

uint64_t sub_1000ED438@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 232);
  return swift_retain();
}

uint64_t sub_1000ED448()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000ED490()
{
  sub_1000F8858(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000ED49C(void *a1)
{
  uint64_t v2 = v1;
  *(void *)(v1 + 80) = 0;
  *(unsigned char *)(v1 + 88) = 1;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(unsigned char *)(v1 + 160) = 1;
  uint64_t v4 = v1 + qword_1004CA730;
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(void *)(v2 + qword_1004CA738) = 0x3FE0000000000000;
  *(unsigned char *)(v2 + qword_1004CA740) = 0;
  uint64_t v6 = qword_1004CA748;
  uint64_t v7 = sub_100012894(&qword_1004C54B8);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = qword_1004C2E30;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1004F8630;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 272);
  swift_retain();
  *(void *)(v2 + v6) = v11(KeyPath, v10);
  uint64_t v12 = qword_1004CA750;
  uint64_t v13 = sub_100012894(&qword_1004C58F0);
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = qword_1004F8630;
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 272);
  swift_retain();
  *(void *)(v2 + v12) = v16(v14, v15);
  uint64_t v17 = qword_1004CA758;
  uint64_t v18 = sub_100012894(&qword_1004C58F8);
  uint64_t v19 = swift_getKeyPath();
  uint64_t v20 = qword_1004F8630;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 272);
  swift_retain();
  *(void *)(v2 + v17) = v21(v19, v20);
  uint64_t v22 = qword_1004CA760;
  uint64_t v23 = swift_getKeyPath();
  uint64_t v24 = sub_100012894(&qword_1004C3EE0);
  uint64_t v25 = qword_1004F8630;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 272);
  swift_retain();
  *(void *)(v2 + v22) = v26(v23, v25);
  uint64_t v27 = qword_1004CA768;
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = sub_100012894(&qword_1004CA908);
  uint64_t v30 = qword_1004F8630;
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 272);
  swift_retain();
  *(void *)(v2 + v27) = v31(v28, v30);
  uint64_t v32 = qword_1004CA770;
  uint64_t v33 = swift_getKeyPath();
  uint64_t v34 = sub_100012894(&qword_1004C6AD0);
  uint64_t v35 = qword_1004F8630;
  unint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 272);
  swift_retain();
  *(void *)(v2 + v32) = v36(v33, v35);
  id v37 = (void *)(v2 + qword_1004CA778);
  *id v37 = 0;
  v37[1] = 0;
  *(void *)(v2 + 64) = a1;
  id v38 = a1;
  swift_release();
  return StateObserver.init(configuration:)();
}

uint64_t sub_1000ED7FC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 232);
  return swift_retain();
}

void sub_1000ED810(uint64_t a1)
{
  sub_1000EB864(a1, v1);
}

void sub_1000ED818(unsigned __int8 *a1)
{
  sub_1000EBA50(a1, v1);
}

void sub_1000ED820(uint64_t *a1)
{
  sub_1000EBB04(a1, v1);
}

uint64_t sub_1000ED828(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

void sub_1000ED870()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label];
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v2 = self;
  sub_100012894((uint64_t *)&unk_1004CEA00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003F9450;
  id v4 = [v1 leadingAnchor];
  id v5 = [v0 leadingAnchor];
  id v6 = [v4 constraintEqualToAnchor:v5];

  *(void *)(v3 + 32) = v6;
  id v7 = [v1 trailingAnchor];
  id v8 = [v0 trailingAnchor];
  id v9 = [v7 constraintEqualToAnchor:v8];

  *(void *)(v3 + 40) = v9;
  id v10 = [v1 topAnchor];
  id v11 = [v0 topAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v3 + 48) = v12;
  id v13 = [v1 bottomAnchor];
  id v14 = [v0 bottomAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  *(void *)(v3 + 56) = v15;
  specialized Array._endMutation()();
  sub_100029878();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

char *sub_1000EDAD0(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label;
  type metadata accessor for InteractiveLabel();
  id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v12 = v4;
  *(void *)&v4[v10] = [v11 initWithFrame:0.0, 0.0, 0.0, 0.0];

  v17.receiver = v12;
  v17.super_class = ObjectType;
  id v13 = [(char *)[super initWithFrame:a1, a2, a3, a4]];
  id v14 = *(void **)&v13[OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label];
  id v15 = v13;
  [v14 setUserInteractionEnabled:1];
  [v15 addSubview:v14];
  sub_1000ED870();

  return v15;
}

char *sub_1000EDC0C(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label;
  type metadata accessor for InteractiveLabel();
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v6 = v1;
  *(void *)&v1[v4] = [v5 initWithFrame:0.0, 0.0, 0.0, 0.0];

  v12.receiver = v6;
  v12.super_class = ObjectType;
  id v7 = [super initWithCoder:a1];
  id v8 = v7;
  if (v7)
  {
    id v9 = *(void **)&v7[OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label];
    uint64_t v10 = v7;
    [v9 setUserInteractionEnabled:1];
    [v10 addSubview:v9];
    sub_1000ED870();
  }
  return v8;
}

uint64_t type metadata accessor for AccessibilitySingleStack()
{
  return self;
}

ValueMetadata *_s20EdgeDetectionContextVMa()
{
  return &_s20EdgeDetectionContextVN;
}

uint64_t sub_1000EDD7C()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  v10[1] = sub_10005536C();
  id v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  if (qword_1004C2A18 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1004F8070;
  unint64_t v6 = *(void *)algn_1004F8078;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v11 = (void *)v7;
  unint64_t v12 = v6;
  v8._uint64_t countAndFlagsBits = 0x746544656764452ELL;
  v8._object = (void *)0xEE006E6F69746365;
  String.append(_:)(v8);
  static DispatchQoS.userInitiated.getter();
  id v11 = _swiftEmptyArrayStorage;
  sub_100053658();
  sub_100012894(&qword_1004CF220);
  sub_1000536B0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_1004CA940 = result;
  return result;
}

id sub_1000EE004()
{
  if (qword_1004C2AB0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1004CA940;

  return v0;
}

uint64_t sub_1000EE060(uint64_t a1)
{
  unint64_t v2 = sub_1000A494C();

  return Context.description.getter(a1, v2);
}

unint64_t sub_1000EE09C(uint64_t a1)
{
  unint64_t result = sub_1000EE0C4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000EE0C4()
{
  unint64_t result = qword_1004CA948;
  if (!qword_1004CA948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CA948);
  }
  return result;
}

id sub_1000EE118@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isLineOcclusionAlphaBlendingEnabled];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000EE14C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsLineOcclusionAlphaBlendingEnabled:*a1];
}

void sub_1000EE160(uint64_t a1, void *a2, double a3)
{
  uint64_t v5 = *(void (**)(double))(a1 + 32);
  swift_retain();
  id v6 = a2;
  v5(a3);
  swift_release();
}

id sub_1000EE1D8()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial;
  unint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial);
  }
  else
  {
    id v4 = sub_1001B4A50(5);
    [v4 copy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
    if (swift_dynamicCast()) {
      id v5 = v9;
    }
    else {
      id v5 = [objc_allocWithZone((Class)SCNMaterial) init];
    }
    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    unint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1000EE2CC()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial;
  unint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial);
  }
  else
  {
    id v4 = sub_1001B4A50(2);
    [v4 copy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
    if (swift_dynamicCast()) {
      id v5 = v9;
    }
    else {
      id v5 = [objc_allocWithZone((Class)SCNMaterial) init];
    }
    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    unint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1000EE3C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  id v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }
  else
  {
    id v5 = sub_1001B4A50(1);
    [v5 copy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
    if (swift_dynamicCast()) {
      id v6 = v10;
    }
    else {
      id v6 = [objc_allocWithZone((Class)SCNMaterial) init];
    }
    id v7 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v6;
    id v4 = v6;

    id v3 = 0;
  }
  id v8 = v3;
  return v4;
}

uint64_t sub_1000EE4B0()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized) = 0;
  return result;
}

id sub_1000EE4D8()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial);
  }
  else
  {
    id v4 = sub_1001B4A50(13);
    [v4 copy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
    if (swift_dynamicCast()) {
      id v5 = v9;
    }
    else {
      id v5 = [objc_allocWithZone((Class)SCNMaterial) init];
    }
    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1000EE5CC()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial);
  }
  else
  {
    id v4 = sub_1001B4A50(11);
    [v4 copy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
    if (swift_dynamicCast()) {
      id v5 = v9;
    }
    else {
      id v5 = [objc_allocWithZone((Class)SCNMaterial) init];
    }
    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1000EE6C0()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial);
  }
  else
  {
    id v4 = sub_1001B4A50(12);
    [v4 copy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
    if (swift_dynamicCast()) {
      id v5 = v9;
    }
    else {
      id v5 = [objc_allocWithZone((Class)SCNMaterial) init];
    }
    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1000EE7B4()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial);
  }
  else
  {
    id v4 = sub_1001B4A50(10);
    [v4 copy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
    if (swift_dynamicCast()) {
      id v5 = v9;
    }
    else {
      id v5 = [objc_allocWithZone((Class)SCNMaterial) init];
    }
    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1000EE8A8()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial);
  }
  else
  {
    id v4 = sub_1001B4A50(6);
    [v4 copy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
    if (swift_dynamicCast()) {
      id v5 = v9;
    }
    else {
      id v5 = [objc_allocWithZone((Class)SCNMaterial) init];
    }
    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

void sub_1000EE99C(uint64_t a1)
{
}

void sub_1000EE9A8(uint64_t a1)
{
}

void sub_1000EE9B4(uint64_t a1, void *a2)
{
  sub_1000F4A34(a1, (uint64_t)&v9);
  uint64_t v5 = v2 + *a2;
  char v6 = *(unsigned char *)(v5 + 32);
  sub_1000F4A34(a1, v5);
  if (v6)
  {
    sub_1000F4A34(a1, (uint64_t)v10);
    if (v11) {
      return;
    }
    goto LABEL_6;
  }
  sub_1000F4A34(a1, (uint64_t)v10);
  if ((v11 & 1) != 0 || (Segment.isEqual(to:)() & 1) == 0)
  {
LABEL_6:
    id v7 = (unsigned char *)(v2 + OBJC_IVAR____TtC7Measure10LineRender__needsRendering);
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC7Measure10LineRender__needsRendering) & 1) == 0)
    {
      id v8 = (os_unfair_lock_s *)sub_1000EED80();
      os_unfair_lock_lock(v8);
      unsigned char *v7 = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock));
    }
  }
}

void sub_1000EEAB8()
{
  void (*v2)(void *__return_ptr, uint64_t);
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  long long v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __n128 *v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  void *v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  double v28;
  __n128 v29;
  double v30;
  __n128 v31;
  double v32;
  __n128 v33;
  double v34;
  float32x4_t v35;
  __n128 v36;
  void __src[64];
  unsigned char __dst[512];

  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_isOnVerticalGuide) == 1)
  {
    uint64_t v2 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v0
                                                                            + OBJC_IVAR____TtC7Measure10LineRender__arframe)
                                                              + 144);
    id v3 = swift_retain();
    v2(__src, v3);
    swift_release();
    memcpy(__dst, __src, sizeof(__dst));
    id v4 = (void *)sub_1000A3850();
    sub_100016F7C((uint64_t)__dst);
    if (v4)
    {
      uint64_t v5 = [v4 camera];

      [v5 transform];
      simd_float4x4.forward.getter();
      char v6 = v1 + OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride;
      *(_OWORD *)char v6 = v7;
      *(unsigned char *)(v6 + 16) = 0;
      LODWORD(v23) = 1056964608;
      slerp(transform1:transform2:percent:)();
      simd_float4x4.position.getter();
      simd_float4x4.position.getter();
      simd_float4x4.position.getter();
      createTransform(forward:normal:position:)();
      uint64_t v32 = v9;
      uint64_t v34 = v8;
      uint64_t v28 = v11;
      uint64_t v30 = v10;
      [*(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_line) setSimdWorldTransform:v23];
      [*(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_linePrime) setSimdWorldTransform:v34, v32, v30, v28];
    }
  }
  unint64_t v12 = (__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
  simd_float4x4.position.getter();
  uint64_t v35 = v13;
  simd_float4x4.position.getter();
  id v15 = OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender;
  long long v16 = *(void **)(v1 + OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender);
  if (v16)
  {
    objc_super v17 = vsubq_f32(v35, v14);
    uint64_t v18 = vmulq_f32(v17, v17);
    uint64_t v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
    uint64_t v20 = v16;
    sub_100034C08(v19);

    uint64_t v21 = *(void **)(v1 + v15);
    if (v21)
    {
      uint64_t v33 = v12[1];
      unint64_t v36 = *v12;
      uint64_t v29 = v12[3];
      uint64_t v31 = v12[2];
      uint64_t v26 = v12[5];
      uint64_t v27 = v12[4];
      uint64_t v24 = v12[7];
      uint64_t v25 = v12[6];
      uint64_t v22 = v21;
      sub_100034A10(v36, v33, v31, v29, v27, v26, v25, v24);
    }
  }
}

_DWORD *sub_1000EED80()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock;
  uint64_t result = *(_DWORD **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock);
  if (!result)
  {
    uint64_t result = (_DWORD *)swift_slowAlloc();
    *uint64_t result = 0;
    *(void *)(v0 + v1) = result;
  }
  return result;
}

void sub_1000EEDC0(uint64_t a1, char a2, char a3, char a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13)
{
  id v14 = v13;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v105 = OBJC_IVAR____TtC7Measure10LineRender_state;
  *(void *)&v13[OBJC_IVAR____TtC7Measure10LineRender_state] = static MeasureObjectState.default;
  uint64_t v104 = OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude;
  v13[OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude] = 1;
  uint64_t v15 = OBJC_IVAR____TtC7Measure10LineRender_hasDivisions;
  v13[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] = 0;
  uint64_t v16 = OBJC_IVAR____TtC7Measure10LineRender__render;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v18 = sub_100012894(&qword_1004C9E08);
  uint64_t v19 = qword_1004C2E30;
  uint64_t v20 = v14;
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_1004F8630;
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 272);
  swift_retain();
  *(void *)&v14[v16] = v22(KeyPath, v21);
  uint64_t v23 = OBJC_IVAR____TtC7Measure10LineRender__arframe;
  uint64_t v24 = swift_getKeyPath();
  uint64_t v25 = sub_100012894(&qword_1004C3F10);
  uint64_t v26 = qword_1004F8630;
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 272);
  swift_retain();
  *(void *)&v20[v23] = v27(v24, v26);
  if (qword_1004C27C8 != -1) {
    swift_once();
  }
  id v28 = (id)qword_1004F7DD8;
  char v29 = UIContentSizeCategory.isAccessibilityCategory.getter();

  BOOL IsBoldTextEnabled = 1;
  if ((v29 & 1) == 0) {
    BOOL IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  }
  v20[OBJC_IVAR____TtC7Measure10LineRender_accessibleSizeOn] = IsBoldTextEnabled;
  uint64_t v31 = OBJC_IVAR____TtC7Measure10LineRender_line;
  *(void *)&v20[v31] = [objc_allocWithZone((Class)SCNNode) init];
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender_linePrime] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes] = _swiftEmptyArrayStorage;
  uint64_t v32 = &v20[OBJC_IVAR____TtC7Measure10LineRender_transformAtSnapStart];
  *((_OWORD *)v32 + 2) = 0u;
  *((_OWORD *)v32 + 3) = 0u;
  *(_OWORD *)uint64_t v32 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  v32[64] = 1;
  uint64_t v33 = &v20[OBJC_IVAR____TtC7Measure10LineRender_targetTransformAtSnap];
  *((_OWORD *)v33 + 2) = 0u;
  *((_OWORD *)v33 + 3) = 0u;
  *(_OWORD *)uint64_t v33 = 0u;
  *((_OWORD *)v33 + 1) = 0u;
  v33[64] = 1;
  v20[OBJC_IVAR____TtC7Measure10LineRender_isMinor] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___linePrimeMaterial] = 0;
  uint64_t v34 = &v20[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent];
  *(_DWORD *)uint64_t v34 = 0;
  v34[4] = 1;
  v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized] = 2;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial] = 0;
  uint64_t v35 = OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender] = 0;
  unint64_t v36 = &v20[OBJC_IVAR____TtC7Measure10LineRender_primarySegment];
  *(_OWORD *)unint64_t v36 = 0u;
  *((_OWORD *)v36 + 1) = 0u;
  v36[32] = 1;
  id v37 = &v20[OBJC_IVAR____TtC7Measure10LineRender_renderedSegment];
  *(_OWORD *)id v37 = 0u;
  *((_OWORD *)v37 + 1) = 0u;
  v37[32] = 1;
  id v38 = &v20[OBJC_IVAR____TtC7Measure10LineRender_startTime];
  uint64_t v39 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v20[OBJC_IVAR____TtC7Measure10LineRender_animationState] = 0;
  id v40 = &v20[OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride];
  *(void *)id v40 = 0;
  *((void *)v40 + 1) = 0;
  v40[16] = 1;
  v20[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 0;
  *(_DWORD *)&v20[OBJC_IVAR____TtC7Measure10LineRender_dottedLineBreakPointDist] = 1075838976;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock] = 0;
  v20[OBJC_IVAR____TtC7Measure10LineRender__needsRendering] = 0;
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible] = 1;
  id v41 = (__n128 *)&v20[OBJC_IVAR____TtC7Measure10LineRender_endTransforms];
  *id v41 = a6;
  v41[1] = a7;
  v41[2] = a8;
  void v41[3] = a9;
  v41[4] = a10;
  v41[5] = a11;
  v41[6] = a12;
  v41[7] = a13;
  uint64_t v42 = (__n128 *)&v20[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms];
  *uint64_t v42 = a6;
  v42[1] = a7;
  void v42[2] = a8;
  v42[3] = a9;
  v42[4] = a10;
  v42[5] = a11;
  v42[6] = a12;
  v42[7] = a13;
  id v43 = (__n128 *)&v20[OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms];
  __n128 *v43 = a6;
  v43[1] = a7;
  v43[2] = a8;
  v43[3] = a9;
  v43[4] = a10;
  v43[5] = a11;
  v43[6] = a12;
  v43[7] = a13;
  simd_float4x4.position.getter();
  long long v103 = v44;
  simd_float4x4.position.getter();
  id v45 = &v20[OBJC_IVAR____TtC7Measure10LineRender_currentPositions];
  *(_OWORD *)id v45 = v103;
  *((_OWORD *)v45 + 1) = v46;
  v14[v104] = a3 & 1;
  v14[v15] = a4 & 1;
  *(void *)&v14[v105] = a1;
  if (qword_1004C2D00 != -1) {
    swift_once();
  }
  if (byte_1004F8530 == 1 && (a4 & 1) != 0)
  {
    id v47 = objc_allocWithZone((Class)type metadata accessor for LineDivisionsRender());
    uint64_t v48 = sub_100030D68(a1, a6, a7, a8, a9, a10, a11, a12, a13);
    uint64_t v49 = *(void **)&v20[v35];
    *(void *)&v20[v35] = v48;
  }
  id v50 = (id)qword_1004F7DD8;
  char v51 = UIContentSizeCategory.isAccessibilityCategory.getter();

  float v52 = 2.0;
  float v53 = 2.0;
  if (a2)
  {
    if ((v51 & 1) == 0)
    {
      if (UIAccessibilityIsBoldTextEnabled()) {
        float v53 = 2.0;
      }
      else {
        float v53 = 1.0;
      }
    }
    id v54 = (id)qword_1004F7DD8;
    char v55 = UIContentSizeCategory.isAccessibilityCategory.getter();

    if ((v55 & 1) == 0)
    {
      if (UIAccessibilityIsBoldTextEnabled()) {
        float v52 = 2.0;
      }
      else {
        float v52 = 1.0;
      }
    }
    float v56 = v53 * 0.00075;
    float v57 = 0.00075;
  }
  else
  {
    if ((v51 & 1) == 0)
    {
      if (UIAccessibilityIsBoldTextEnabled()) {
        float v53 = 2.0;
      }
      else {
        float v53 = 1.0;
      }
    }
    id v58 = (id)qword_1004F7DD8;
    char v59 = UIContentSizeCategory.isAccessibilityCategory.getter();

    if ((v59 & 1) == 0)
    {
      if (UIAccessibilityIsBoldTextEnabled()) {
        float v52 = 2.0;
      }
      else {
        float v52 = 1.0;
      }
    }
    float v56 = v53 * 0.00225;
    float v57 = 0.00225;
  }
  float v60 = v52 * v57;
  double v61 = v56;
  double v62 = v60;
  id v63 = self;
  id v64 = [v63 boxWithWidth:v61 height:v62 length:0.0 chamferRadius:0.0005];
  *(void *)&v20[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry] = v64;
  v20[OBJC_IVAR____TtC7Measure10LineRender_isOnVerticalGuide] = a5 & 1;

  v120.receiver = v20;
  v120.super_class = ObjectType;
  CGPoint v65 = [super init];
  v65[OBJC_IVAR____TtC7Measure10LineRender_isMinor] = a2 & 1;
  uint64_t v66 = OBJC_IVAR____TtC7Measure10LineRender_lineGeometry;
  id v67 = *(void **)&v65[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
  if (!v67)
  {
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  id v68 = v65;
  id v69 = v65;
  id v70 = v67;
  id v71 = sub_1000EE3C0(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
  [v70 setFirstMaterial:v71];

  uint64_t v72 = OBJC_IVAR____TtC7Measure10LineRender_line;
  id v73 = *(void **)&v69[OBJC_IVAR____TtC7Measure10LineRender_line];
  [v73 setGeometry:*(void *)&v68[v66]];
  [v73 setRenderingOrder:3];
  id v74 = &v69[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
  swift_beginAccess();
  id v75 = v73;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v74 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  if (![self jasperAvailable]) {
    goto LABEL_49;
  }
  id v76 = [self standardUserDefaults];
  unsigned int v77 = [v76 isLineOcclusionEnabled];

  if (!v77 || (a3 & 1) == 0) {
    goto LABEL_49;
  }
  id v78 = [objc_allocWithZone((Class)SCNNode) init];
  uint64_t v79 = OBJC_IVAR____TtC7Measure10LineRender_linePrime;
  id v80 = *(void **)&v69[OBJC_IVAR____TtC7Measure10LineRender_linePrime];
  *(void *)&v69[OBJC_IVAR____TtC7Measure10LineRender_linePrime] = v78;

  id v81 = [v63 boxWithWidth:v61 height:v62 length:0.0 chamferRadius:0.0005];
  uint64_t v82 = OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry;
  id v83 = *(void **)&v69[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry];
  *(void *)&v69[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry] = v81;

  id v84 = *(void **)&v69[v82];
  if (!v84) {
    goto LABEL_59;
  }
  id v85 = v84;
  id v86 = sub_1000EE3C0(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___linePrimeMaterial);
  [v85 setFirstMaterial:v86];

  id v87 = *(void **)&v69[v79];
  if (!v87)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (!*(void *)&v69[v82])
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  [v87 setGeometry:];
  Class v88 = *(void **)&v69[v79];
  if (!v88)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  id v89 = [v88 geometry];
  if (v89)
  {
    __n128 v90 = v89;
    id v91 = [v89 firstMaterial];

    if (v91)
    {
      [v91 setColorBufferWriteMask:0];
    }
  }
  __n128 v92 = *(void **)&v69[v79];
  if (!v92) {
    goto LABEL_63;
  }
  [v92 setRenderingOrder:1];
  __n128 v93 = *(void **)&v69[v79];
  if (!v93)
  {
LABEL_64:
    __break(1u);
    return;
  }
  swift_beginAccess();
  id v94 = v93;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v74 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
LABEL_49:
  id v95 = sub_1000EE2CC();
  [v95 setReadsFromDepthBuffer:0];

  id v96 = sub_1000EE2CC();
  [v96 setWritesToDepthBuffer:0];

  id v97 = self;
  [v97 begin];
  id v98 = *(void **)&v69[v72];
  [v69 addChildNode:v98];
  if (*(void *)&v69[OBJC_IVAR____TtC7Measure10LineRender_linePrime]) {
    [v69 addChildNode:];
  }
  [v98 setHidden:1 v103];
  if (byte_1004F8530 == 1 && (a4 & 1) != 0)
  {
    double v99 = *(void **)&v69[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
    if (v99)
    {
      id v100 = v99;
      [v98 addChildNode:v100];
      [v100 setSimdTransform:*(double *)matrix_identity_float4x4.columns[0].i64, *(double *)matrix_identity_float4x4.columns[1].i64, *(double *)matrix_identity_float4x4.columns[2].i64, *(double *)matrix_identity_float4x4.columns[3].i64];
    }
  }
  [v97 commit];
  sub_1000EF948(0, 0, a6, a7, a8, a9, a10, a11, a12, a13);
  sub_1000F9318();
  uint64_t v101 = OBJC_IVAR____TtC7Measure10LineRender__needsRendering;
  if ((v69[OBJC_IVAR____TtC7Measure10LineRender__needsRendering] & 1) == 0)
  {
    UIContentSizeCategory v102 = (os_unfair_lock_s *)sub_1000EED80();
    os_unfair_lock_lock(v102);
    v69[v101] = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)&v69[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock]);
  }
}

void sub_1000EF948(char a1, char a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  simd_float4x4.position.getter();
  long long v69 = v13;
  simd_float4x4.position.getter();
  *(float32x2_t *)v15.f32 = vsub_f32(*(float32x2_t *)&v69, v14);
  v15.f32[2] = *((float *)&v69 + 2) - v16;
  float32x4_t v17 = vmulq_f32(v15, v15);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0] > 0.00000011921)
  {
    uint64_t v18 = self;
    [v18 begin];
    [v18 setAnimationDuration:0.0];
    uint64_t v19 = *(void **)&v10[OBJC_IVAR____TtC7Measure10LineRender_line];
    [v19 setHidden:0];
    [v18 commit];
    if (a1)
    {
      [v19 removeAllActions];
      long long v20 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 16];
      long long v21 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 32];
      long long v22 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 48];
      long long v23 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 64];
      long long v24 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 80];
      long long v25 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 96];
      long long v26 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 112];
      uint64_t v27 = &v10[OBJC_IVAR____TtC7Measure10LineRender_endTransforms];
      *(_OWORD *)uint64_t v27 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms];
      *((_OWORD *)v27 + 1) = v20;
      *((_OWORD *)v27 + 2) = v21;
      *((_OWORD *)v27 + 3) = v22;
      *((_OWORD *)v27 + 4) = v23;
      *((_OWORD *)v27 + 5) = v24;
      *((_OWORD *)v27 + 6) = v25;
      *((_OWORD *)v27 + 7) = v26;
      id v28 = (__n128 *)&v10[OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms];
      *id v28 = a3;
      v28[1] = a4;
      v28[2] = a5;
      v28[3] = a6;
      v28[4] = a7;
      v28[5] = a8;
      v28[6] = a9;
      v28[7] = a10;
      char v29 = self;
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = v10;
      aBlock[4] = sub_1000F4EA4;
      aBlock[5] = v30;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1000EE160;
      aBlock[3] = &unk_10048DC20;
      uint64_t v31 = _Block_copy(aBlock);
      uint64_t v32 = v10;
      swift_release();
      id v33 = [v29 customActionWithDuration:v31 actionBlock:0.5];
      _Block_release(v31);
      [v19 runAction:v33];

      return;
    }
    if (a2)
    {
      id v43 = (float *)&v10[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent];
      if ((v10[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent + 4] & 1) == 0
        && vabds_f32(1.0, *v43) > 0.0001)
      {
        long long v44 = (__n128 *)&v10[OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms];
        __n128 *v44 = a3;
        v44[1] = a4;
        v44[2] = a5;
        v44[3] = a6;
        v44[4] = a7;
        v44[5] = a8;
        v44[6] = a9;
        v44[7] = a10;
        return;
      }
      sub_1000F3D3C(a3, a4, a5, a6, a7, a8, a9, a10);
      float v52 = &v10[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
      swift_beginAccess();
      unint64_t v53 = *(void *)v52;
      if (v53 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
        if (v54)
        {
LABEL_28:
          if (v54 >= 1)
          {
            uint64_t v55 = 0;
            do
            {
              if ((v53 & 0xC000000000000001) != 0) {
                id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v56 = *(id *)(v53 + 8 * v55 + 32);
              }
              float v57 = v56;
              ++v55;
              id v72 = v56;
              sub_1000F4A9C(&v72, (uint64_t)v10);
            }
            while (v54 != v55);
            goto LABEL_37;
          }
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (v54) {
          goto LABEL_28;
        }
      }
LABEL_37:
      swift_bridgeObjectRelease_n();
      float *v43 = 0.0;
      *((unsigned char *)v43 + 4) = 1;
      return;
    }
    sub_1000F3D3C(a3, a4, a5, a6, a7, a8, a9, a10);
    id v45 = &v10[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent];
    *(_DWORD *)id v45 = 0;
    void v45[4] = 1;
    long long v46 = &v10[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
    swift_beginAccess();
    unint64_t v47 = *(void *)v46;
    if (v47 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      if (!v48) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v48 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v48) {
        goto LABEL_35;
      }
    }
    if (v48 < 1)
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    uint64_t v49 = 0;
    do
    {
      if ((v47 & 0xC000000000000001) != 0) {
        id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v50 = *(id *)(v47 + 8 * v49 + 32);
      }
      char v51 = v50;
      ++v49;
      id v72 = v50;
      sub_1000F4A9C(&v72, (uint64_t)v10);
    }
    while (v48 != v49);
LABEL_35:
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v34 = (__n128 *)&v10[OBJC_IVAR____TtC7Measure10LineRender_endTransforms];
  *uint64_t v34 = a3;
  v34[1] = a4;
  uint64_t v34[2] = a5;
  v34[3] = a6;
  v34[4] = a7;
  v34[5] = a8;
  v34[6] = a9;
  v34[7] = a10;
  simd_float4x4.up.getter();
  createTransform(forward:normal:position:)();
  double v68 = v36;
  double v70 = v35;
  double v58 = v38;
  double v59 = v37;
  uint64_t v39 = *(void **)&v10[OBJC_IVAR____TtC7Measure10LineRender_line];
  [v39 setSimdWorldTransform:];
  [*(id *)&v10[OBJC_IVAR____TtC7Measure10LineRender_linePrime] setSimdWorldTransform:v70, v68, v59, v58];
  if (qword_1004C2D00 != -1) {
    swift_once();
  }
  if (byte_1004F8530 == 1 && v10[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] == 1)
  {
    id v40 = *(void **)&v10[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
    if (v40)
    {
      if (*((unsigned char *)v40 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState))
      {
        id v41 = v40;
        sub_100034A10(a3, a4, a5, a6, a7, a8, a9, a10);
      }
    }
  }
  uint64_t v42 = self;
  [v42 begin];
  [v42 setAnimationDuration:0.0];
  [v39 setHidden:1];

  [v42 commit];
}

id sub_1000F005C()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1000EED80();
  swift_slowDealloc();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return [super dealloc];
}

uint64_t sub_1000F0260()
{
  return type metadata accessor for LineRender();
}

uint64_t type metadata accessor for LineRender()
{
  uint64_t result = qword_1004CAAB0;
  if (!qword_1004CAAB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000F02B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100012894((uint64_t *)&unk_1004C68F0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v7 = (char *)&v34 - v6;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1000EE4B0() & 1) == 0) {
    sub_1000F0AAC();
  }
  uint64_t v12 = OBJC_IVAR____TtC7Measure10LineRender__needsRendering;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure10LineRender__needsRendering) == 1)
  {
    sub_1000F1414(*(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_state));
    if (*(unsigned char *)(v0 + v12) == 1)
    {
      long long v13 = (os_unfair_lock_s *)sub_1000EED80();
      os_unfair_lock_lock(v13);
      *(unsigned char *)(v0 + v12) = 0;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock));
    }
  }
  uint64_t v14 = OBJC_IVAR____TtC7Measure10LineRender_state;
  if (*(void *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_state) == 9)
  {
    simd_float4x4.position.getter();
    long long v39 = v15;
    simd_float4x4.position.getter();
    long long v38 = v16;
    float32x4_t v17 = (unint64_t *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
    swift_beginAccess();
    unint64_t v18 = *v17;
    double v36 = v11;
    uint64_t v37 = v9;
    double v35 = v7;
    uint64_t v9 = v8;
    uint64_t v8 = (uint64_t)v5;
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      if (v19) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v19)
      {
LABEL_9:
        if (v19 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        uint64_t v20 = 0;
        do
        {
          if ((v18 & 0xC000000000000001) != 0) {
            id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v21 = *(id *)(v18 + 8 * v20 + 32);
          }
          long long v22 = v21;
          ++v20;
          id v40 = v21;
          sub_1000F4A9C(&v40, v1);
        }
        while (v19 != v20);
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v8 = v9;
    char v11 = v36;
    uint64_t v9 = v37;
    id v7 = v35;
  }
  if (![self jasperAvailable]) {
    return;
  }
  if (*(void *)(v1 + v14) != 8) {
    return;
  }
  id v23 = [*(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_line) geometry];
  if (!v23) {
    return;
  }
  long long v24 = v23;
  id v25 = [v23 materials];

  sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v18 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_22;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_32;
  }
LABEL_22:
  if ((v18 & 0xC000000000000001) != 0)
  {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v26 = *(id *)(v18 + 32);
  }
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  sub_1000F2F5C();
  uint64_t v28 = v1 + OBJC_IVAR____TtC7Measure10LineRender_startTime;
  swift_beginAccess();
  sub_1000DB36C(v28, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000DB3D4((uint64_t)v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    Date.timeIntervalSinceNow.getter();
    *(float *)&double v29 = v29;
    float v30 = powf((float)(fabsf(*(float *)&v29) / -0.8) + 1.0, 5.0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((float)(1.0 - v30) >= 1.0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
      swift_beginAccess();
      sub_1000DB434((uint64_t)v5, v28);
      swift_endAccess();
      *(unsigned char *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_animationState) = 2;
    }
  }
  Class isa = Float._bridgeToObjectiveC()().super.super.isa;
  NSString v32 = String._bridgeToObjectiveC()();
  [v27 setValue:isa forKeyPath:v32];
}

id sub_1000F0848()
{
  uint64_t v1 = sub_100012894((uint64_t *)&unk_1004C68F0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [self jasperAvailable];
  if (result)
  {
    if (*(void *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_state) == 8)
    {
      Date.init()();
      uint64_t v5 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 0, 1, v5);
      uint64_t v6 = v0 + OBJC_IVAR____TtC7Measure10LineRender_startTime;
      swift_beginAccess();
      sub_1000DB434((uint64_t)v3, v6);
      id result = (id)swift_endAccess();
      *(unsigned char *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_animationState) = 1;
    }
  }
  return result;
}

void sub_1000F0978(void *a1, uint64_t a2)
{
  if ([self jasperAvailable]
    && *(void *)(v2 + OBJC_IVAR____TtC7Measure10LineRender_state) == 8)
  {
    uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC7Measure10LineRender_line);
    id v6 = [self fadeOutWithDuration:0.300000012];
    if (a1)
    {
      v7[4] = a1;
      v7[5] = a2;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 1107296256;
      v7[2] = sub_100049AB4;
      v7[3] = &unk_10048DC48;
      a1 = _Block_copy(v7);
      swift_retain();
      swift_release();
    }
    [v5 runAction:v6 completionHandler:a1];
    _Block_release(a1);
  }
}

void sub_1000F0AAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  unsigned int v3 = [v2 jasperAvailable];
  sub_100012894((uint64_t *)&unk_1004CEA00);
  uint64_t v4 = swift_allocObject();
  if (v3)
  {
    *(_OWORD *)(v4 + 16) = xmmword_1003FDB40;
    *(void *)(v4 + 32) = sub_1000EE3C0(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
    *(void *)(v4 + 40) = sub_1000EE3C0(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___linePrimeMaterial);
    *(void *)(v4 + 48) = sub_1000EE4D8();
    *(void *)(v4 + 56) = sub_1000EE5CC();
    *(void *)(v4 + 64) = sub_1000EE6C0();
    *(void *)(v4 + 72) = sub_1000EE7B4();
  }
  else
  {
    *(_OWORD *)(v4 + 16) = xmmword_1003F8B20;
    *(void *)(v4 + 32) = sub_1000EE3C0(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
  }
  uint64_t v54 = v4;
  specialized Array._endMutation()();
  uint64_t v5 = v4;
  unint64_t v53 = v4;
  if (![v2 jasperAvailable]
    || *((unsigned char *)v1 + OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude) != 1
    || (id v48 = self,
        id v6 = [v48 standardUserDefaults],
        unsigned int v7 = [v6 isLineOcclusionEnabled],
        v6,
        !v7))
  {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)MeasureCore.shared.unsafeMutableAddressor();
  swift_beginAccess();
  unint64_t v9 = *(void *)(v8 + 112);
  if (!v9)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  swift_retain();
  id v10 = [v48 standardUserDefaults];
  swift_getKeyPath();
  if (qword_1004C29D8 != -1) {
LABEL_33:
  }
    swift_once();
  char v11 = (void *)*((void *)&xmmword_1004F8000 + 1);
  if (!*((void *)&xmmword_1004F8000 + 1)) {
    goto LABEL_38;
  }
  uint64_t v12 = (void *)Contexts.PrivateQueue.init(_:)();
  uint64_t v13 = swift_allocObject();
  long long v44 = v1;
  swift_unknownObjectWeakInit();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v5;
  id v15 = v11;
  swift_bridgeObjectRetain();
  NSUserDefaults.performOnChange<A>(to:on:action:)();

  swift_release();
  swift_release();
  swift_beginAccess();
  id v10 = (id)v53;
  id v45 = (char *)v9;
  if (v53 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v9 = (unint64_t)v10;
    if (v16) {
      goto LABEL_12;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    *((unsigned char *)v44 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized) = 1;
    return;
  }
  uint64_t v16 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  unint64_t v9 = (unint64_t)v10;
  if (!v16) {
    goto LABEL_35;
  }
LABEL_12:
  float32x4_t v17 = (uint64_t *)(v45 + 208);
  unint64_t v47 = v9 & 0xC000000000000001;
  swift_beginAccess();
  uint64_t v18 = 4;
  unint64_t v46 = v9;
  while (1)
  {
    uint64_t v5 = v18 - 4;
    if (v47) {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v23 = *(id *)(v9 + 8 * v18);
    }
    long long v24 = v23;
    id v25 = (id)(v18 - 3);
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (qword_1004C2FC0 != -1) {
      swift_once();
    }
    id v10 = (id)v16;
    UIColor.rgba.getter();
    long long v51 = 0u;
    long long v52 = 0u;
    long long v50 = 0u;
    if (!*v17) {
      break;
    }
    swift_retain();
    ADProcessor.transformer.getter();
    swift_release();
    Transformer.clipToCameraNormalized.getter();
    swift_release();
    simd_float3x3.copy(from:)();
    id v26 = [v48 standardUserDefaults];
    [v26 isLineOcclusionAlphaBlendingEnabled];

    Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    NSString v28 = String._bridgeToObjectiveC()();
    [v24 setValue:isa forKeyPath:v28];

    SCNVector4.init(_:_:_:_:)();
    Class v29 = SCNVector4._bridgeToObjectiveC()().super.isa;
    NSString v30 = String._bridgeToObjectiveC()();
    [v24 setValue:v29 forKeyPath:v30];

    Class v31 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    NSString v32 = String._bridgeToObjectiveC()();
    [v24 setValue:v31 forKeyPath:v32];

    Class v33 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    NSString v34 = String._bridgeToObjectiveC()();
    [v24 setValue:v33 forKeyPath:v34];

    Class v35 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    NSString v36 = String._bridgeToObjectiveC()();
    [v24 setValue:v35 forKeyPath:v36];

    SCNVector3.init(_:)();
    Class v37 = SCNVector3._bridgeToObjectiveC()().super.isa;
    NSString v38 = String._bridgeToObjectiveC()();
    uint64_t v1 = &selRef_replaySensorDidFinishReplayingData;
    [v24 setValue:v37 forKey:v38];

    SCNVector3.init(_:)();
    Class v39 = SCNVector3._bridgeToObjectiveC()().super.isa;
    NSString v40 = String._bridgeToObjectiveC()();
    [v24 setValue:v39 forKey:v40];

    SCNVector3.init(_:)();
    Class v41 = SCNVector3._bridgeToObjectiveC()().super.isa;
    NSString v42 = String._bridgeToObjectiveC()();
    [v24 setValue:v41 forKey:v42];

    uint64_t v43 = *v17;
    if (!*v17) {
      goto LABEL_37;
    }
    swift_beginAccess();
    if (*(unsigned char *)(v43 + 242) == 1)
    {
      swift_beginAccess();
      uint64_t v19 = *(void *)(v43 + 256);
      if (!v19)
      {

        goto LABEL_18;
      }
      swift_unknownObjectRetain_n();
    }
    else
    {
      swift_retain();
      uint64_t v19 = ADProcessor.outputDepthTexture.getter();
      swift_release();
      swift_unknownObjectRetain();
    }
    v49[3] = swift_getObjectType();
    v49[0] = v19;
    swift_unknownObjectRetain();
    uint64_t v20 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v21 = [self materialPropertyWithContents:v20];
    swift_unknownObjectRelease();
    sub_100013218((uint64_t)v49);
    NSString v22 = String._bridgeToObjectiveC()();
    [v24 setValue:v21 forKey:v22];

    swift_unknownObjectRelease_n();
    unint64_t v9 = v46;
LABEL_18:
    ++v18;
    uint64_t v16 = (uint64_t)v10;
    if (v25 == v10) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_1000F1414(id a1)
{
  unsigned int v3 = v1;
  uint64_t v5 = self;
  [(id)v5 begin];
  [(id)v5 setAnimationDuration:0.0];
  id v6 = &selRef_replaySensorDidFinishReplayingData;
  [v3 setOpacity:1.0];
  switch((unint64_t)a1)
  {
    case 0uLL:
    case 2uLL:
    case 5uLL:
    case 7uLL:
      if ([self jasperAvailable]
        && (v3[OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude] & 1) == 0)
      {
        id v7 = sub_1000EE8A8();
        uint64_t v8 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial];
        *(void *)&v3[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial] = v7;
      }
      uint64_t v2 = (char **)OBJC_IVAR____TtC7Measure10LineRender_isMinor;
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_1004C27C8 != -1) {
          goto LABEL_208;
        }
        goto LABEL_7;
      }
      if (qword_1004C27C8 != -1) {
        swift_once();
      }
      id v20 = (id)qword_1004F7DD8;
      char v21 = UIContentSizeCategory.isAccessibilityCategory.getter();

      if (v21)
      {
        float v11 = 0.0045;
      }
      else if (UIAccessibilityIsBoldTextEnabled())
      {
        float v11 = 0.0045;
      }
      else
      {
        float v11 = 0.00225;
      }
      a1 = (id)qword_1004F7DD8;
      char v58 = UIContentSizeCategory.isAccessibilityCategory.getter();

      if (v58)
      {
        float v57 = 0.0045;
        goto LABEL_83;
      }
      BOOL v59 = !UIAccessibilityIsBoldTextEnabled();
      float v60 = 0.00225;
      float v61 = 0.0045;
      goto LABEL_80;
    case 1uLL:
      NSString v22 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_line];
      id v23 = [v22 geometry];
      if (v23)
      {
        long long v24 = v23;
        uint64_t v2 = (char **)[v23 firstMaterial];

        if (v2)
        {
          id v25 = [v2 diffuse];

          if (qword_1004C2F88 != -1) {
            swift_once();
          }
          [v25 setContents:qword_1004F8778];
        }
      }
      id v26 = [v22 geometry];
      if (v26)
      {
        uint64_t v27 = v26;
        id v28 = [v26 firstMaterial];

        if (v28)
        {
          id v29 = [v28 emission];

          if (qword_1004C2FB0 != -1) {
            swift_once();
          }
          [v29 setContents:qword_1004F87A0];
        }
      }
      [v3 setOpacity:0.0];
      [v3 setHidden:1];
      goto LABEL_196;
    case 3uLL:
    case 4uLL:
      [v3 setOpacity:0.7];
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_1004C27C8 != -1) {
          swift_once();
        }
        id v12 = (id)qword_1004F7DD8;
        char v13 = UIContentSizeCategory.isAccessibilityCategory.getter();

        double v14 = 0.00150000001;
        double v15 = 0.00150000001;
        if ((v13 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            double v15 = 0.00150000001;
          }
          else {
            double v15 = 0.000750000007;
          }
        }
        a1 = (id)qword_1004F7DD8;
        char v16 = UIContentSizeCategory.isAccessibilityCategory.getter();

        if ((v16 & 1) == 0)
        {
          BOOL v17 = !UIAccessibilityIsBoldTextEnabled();
          double v18 = 0.000750000007;
          double v19 = 0.00150000001;
          goto LABEL_50;
        }
      }
      else
      {
        if (qword_1004C27C8 != -1) {
          swift_once();
        }
        id v38 = (id)qword_1004F7DD8;
        char v39 = UIContentSizeCategory.isAccessibilityCategory.getter();

        double v14 = 0.00899999961;
        double v15 = 0.00899999961;
        if ((v39 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            double v15 = 0.00899999961;
          }
          else {
            double v15 = 0.00449999981;
          }
        }
        a1 = (id)qword_1004F7DD8;
        char v40 = UIContentSizeCategory.isAccessibilityCategory.getter();

        if ((v40 & 1) == 0)
        {
          BOOL v17 = !UIAccessibilityIsBoldTextEnabled();
          double v18 = 0.00449999981;
          double v19 = 0.00899999961;
LABEL_50:
          if (v17) {
            double v14 = v18;
          }
          else {
            double v14 = v19;
          }
        }
      }
      [v3 setHidden:0];
      Class v41 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
      if (v41)
      {
        [*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry] setWidth:v15];
        [v41 setHeight:v14];
        id v42 = sub_1000EE2CC();
        [v41 setFirstMaterial:v42];

        id v43 = sub_1000EE2CC();
        id v44 = [v43 diffuse];

        if (qword_1004C2F70 != -1) {
          swift_once();
        }
        [v44 setContents:qword_1004F8760];

        id v45 = sub_1000EE2CC();
        id v46 = [v45 emission];

        if (qword_1004C2FA8 != -1) {
          swift_once();
        }
        uint64_t v47 = qword_1004F8798;
        goto LABEL_120;
      }
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
      goto LABEL_212;
    case 6uLL:
      [v3 setOpacity:0.7];
      uint64_t v2 = (char **)OBJC_IVAR____TtC7Measure10LineRender_isMinor;
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_1004C27C8 != -1) {
          swift_once();
        }
        id v6 = (char **)&unk_1004F7000;
        id v48 = (id)qword_1004F7DD8;
        char v49 = UIContentSizeCategory.isAccessibilityCategory.getter();

        double v50 = 0.00150000001;
        double v51 = 0.00150000001;
        if ((v49 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            double v51 = 0.00150000001;
          }
          else {
            double v51 = 0.000750000007;
          }
        }
        a1 = (id)qword_1004F7DD8;
        char v52 = UIContentSizeCategory.isAccessibilityCategory.getter();

        if ((v52 & 1) == 0)
        {
          BOOL v53 = !UIAccessibilityIsBoldTextEnabled();
          double v54 = 0.000750000007;
          double v55 = 0.00150000001;
          goto LABEL_130;
        }
      }
      else
      {
        if (qword_1004C27C8 != -1) {
          swift_once();
        }
        id v6 = (char **)&unk_1004F7000;
        id v93 = (id)qword_1004F7DD8;
        char v94 = UIContentSizeCategory.isAccessibilityCategory.getter();

        double v50 = 0.00899999961;
        double v51 = 0.00899999961;
        if ((v94 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            double v51 = 0.00899999961;
          }
          else {
            double v51 = 0.00449999981;
          }
        }
        a1 = (id)qword_1004F7DD8;
        char v95 = UIContentSizeCategory.isAccessibilityCategory.getter();

        if ((v95 & 1) == 0)
        {
          BOOL v53 = !UIAccessibilityIsBoldTextEnabled();
          double v54 = 0.00449999981;
          double v55 = 0.00899999961;
LABEL_130:
          if (v53) {
            double v50 = v54;
          }
          else {
            double v50 = v55;
          }
        }
      }
      [v3 setHidden:0];
      id v96 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
      if (v96)
      {
        [*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry] setWidth:v51];
        [v96 setHeight:v50];
        if (*((unsigned char *)v2 + (void)v3) == 1) {
          id v97 = sub_1000EE1D8();
        }
        else {
          id v97 = sub_1000EE2CC();
        }
        id v98 = v97;
        [v96 setFirstMaterial:v97];

        double v99 = (char **)[v96 firstMaterial];
        if (v99)
        {
          uint64_t v2 = v99;
          id v100 = [v99 diffuse];

          if (qword_1004C2F78 != -1) {
            swift_once();
          }
          [v100 setContents:qword_1004F8768];
        }
        id v101 = [v96 firstMaterial];
        if (v101)
        {
          UIContentSizeCategory v102 = v101;
          id v103 = [v101 emission];

          if (qword_1004C2F98 != -1) {
            swift_once();
          }
          [v103 setContents:qword_1004F8788];
        }
        goto LABEL_196;
      }
      goto LABEL_213;
    case 8uLL:
      if (![self jasperAvailable]) {
        goto LABEL_196;
      }
      id v75 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_linePrime];
      if (v75)
      {
        id v76 = v75;
        id v77 = [v3 childNodes];
        sub_10001C99C(0, &qword_1004C4028);
        unint64_t v78 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v77) = sub_100113700((uint64_t)v76, v78);
        swift_bridgeObjectRelease();
        if (v77)
        {
          [v76 removeFromParentNode];
          sub_100012894((uint64_t *)&unk_1004CEA00);
          uint64_t v79 = swift_allocObject();
          *(_OWORD *)(v79 + 16) = xmmword_1003F8B20;
          id v80 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_line];
          *(void *)(v79 + 32) = v80;
          uint64_t v174 = v79;
          specialized Array._endMutation()();
          id v81 = v80;

          uint64_t v82 = &v3[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
          swift_beginAccess();
          *(void *)uint64_t v82 = v174;
          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_1004C27C8 != -1) {
          swift_once();
        }
        id v104 = (id)qword_1004F7DD8;
        char v105 = UIContentSizeCategory.isAccessibilityCategory.getter();

        float v106 = 2.0;
        float v107 = 2.0;
        if ((v105 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            float v107 = 2.0;
          }
          else {
            float v107 = 1.0;
          }
        }
        a1 = (id)qword_1004F7DD8;
        char v108 = UIContentSizeCategory.isAccessibilityCategory.getter();

        if ((v108 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            float v106 = 2.0;
          }
          else {
            float v106 = 1.0;
          }
        }
        float v109 = 0.00075;
      }
      else
      {
        if (qword_1004C27C8 != -1) {
          swift_once();
        }
        id v110 = (id)qword_1004F7DD8;
        char v111 = UIContentSizeCategory.isAccessibilityCategory.getter();

        float v106 = 2.0;
        float v107 = 2.0;
        if ((v111 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            float v107 = 2.0;
          }
          else {
            float v107 = 1.0;
          }
        }
        a1 = (id)qword_1004F7DD8;
        char v112 = UIContentSizeCategory.isAccessibilityCategory.getter();

        if ((v112 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            float v106 = 2.0;
          }
          else {
            float v106 = 1.0;
          }
        }
        float v109 = 0.0015;
      }
      float v113 = v107 * v109;
      float v114 = v106 * v109;
      [v3 setHidden:0];
      char v115 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
      if (!v115) {
        goto LABEL_214;
      }
      [*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry] setWidth:v113];
      [v115 setHeight:v114];
      uint64_t v2 = (char **)sub_1000EE4D8();
      int8x16_t v117 = (int8x16_t *)&v3[OBJC_IVAR____TtC7Measure10LineRender_renderedSegment];
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_renderedSegment + 32])
      {
        char v118 = 0;
      }
      else
      {
        int8x16_t v119 = v117[1];
        float32x2_t v165 = *(float32x2_t *)v119.i8;
        float32x2_t v167 = *(float32x2_t *)v117->i8;
        *(float32x2_t *)v116.f32 = vsub_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v117->i8);
        int8x16_t v169 = v119;
        int8x16_t v171 = *v117;
        v116.f32[2] = *(float *)&v119.i32[2] - COERCE_FLOAT(v117->i64[1]);
        float32x4_t v120 = vmulq_f32(v116, v116);
        [v3 setHidden:[vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 2), vaddq_f32(v120, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v120.f32, 1))).f32[0] <= 0.00000011921]];
        if ([v3 isHidden]) {
          goto LABEL_121;
        }
        int8x16_t v121 = v169;
        v121.i32[0] = v169.i32[1];
        int8x16_t v164 = v121;
        simd_float4x4.position.getter();
        *(float32x2_t *)v123.f32 = vsub_f32(*(float32x2_t *)v122.i8, v167);
        *(float32x2_t *)&v123.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v171, v171, 8uLL));
        float32x4_t v124 = vmulq_f32(v123, v123);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v124, 2), vaddq_f32(v124, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v124.f32, 1))).f32[0] <= 0.00000011921&& (simd_float4x4.position.getter(), *(float32x2_t *)v126.f32 = vsub_f32(*(float32x2_t *)v125.i8, v165), *(float32x2_t *)&v126.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL)), float32x4_t v127 = vmulq_f32(v126, v126), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).f32[0] <= 0.00000011921))
        {
          char v118 = 0;
          v128.i32[0] = HIDWORD(*(void *)SIMD3<>.zero.unsafeMutableAddressor());
          int8x16_t v164 = v128;
        }
        else
        {
          char v118 = 1;
        }
        simd_float4x4.position.getter();
      }
      double v129 = &v3[OBJC_IVAR____TtC7Measure10LineRender_primarySegment];
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_primarySegment + 32]) {
        goto LABEL_186;
      }
      long long v168 = v115;
      id v6 = (char **)*((void *)v129 + 1);
      uint64_t v130 = *((void *)v129 + 2);
      uint64_t v131 = *(void *)v129;
      unsigned int v166 = HIDWORD(*(void *)v129);
      v132.i64[0] = v130;
      v132.i64[1] = *((void *)v129 + 3);
      int8x16_t v170 = v132;
      simd_float4x4.position.getter();
      *(float32x2_t *)v134.f32 = vsub_f32(*(float32x2_t *)v133.i8, (float32x2_t)__PAIR64__(v166, v131));
      *(float32x2_t *)&v134.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL), (float32x2_t)v6);
      float32x4_t v135 = vmulq_f32(v134, v134);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0] <= 0.00000011921&& (simd_float4x4.position.getter(), *(float32x2_t *)v137.f32 = vsub_f32(*(float32x2_t *)v136.i8, (float32x2_t)__PAIR64__(v170.u32[1], v130)), *(float32x2_t *)&v137.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL)), float32x4_t v138 = vmulq_f32(v137, v137), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 2), vaddq_f32(v138, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.f32, 1))).f32[0] <= 0.00000011921))
      {
        SIMD3<>.zero.unsafeMutableAddressor();
        char v115 = v168;
LABEL_186:
        if (v118)
        {
          id v152 = sub_1000EE5CC();

          id v145 = v152;
          SCNVector3.init(_:)();
          Class isa = SCNVector3._bridgeToObjectiveC()().super.isa;
          NSString v154 = String._bridgeToObjectiveC()();
          id v6 = &selRef_replaySensorDidFinishReplayingData;
          [v145 setValue:isa forKeyPath:v154];

          Class v155 = CGFloat._bridgeToObjectiveC()().super.super.isa;
          uint64_t v2 = (char **)String._bridgeToObjectiveC()();
          [v145 setValue:v155 forKeyPath:v2];
        }
        else
        {
          id v145 = sub_1000EE7B4();
        }
      }
      else
      {
        if (v118)
        {
          id v139 = sub_1000EE4D8();

          id v140 = v139;
          SCNVector3.init(_:)();
          Class v141 = SCNVector3._bridgeToObjectiveC()().super.isa;
          NSString v142 = String._bridgeToObjectiveC()();
          id v6 = &selRef_replaySensorDidFinishReplayingData;
          [v140 setValue:v141 forKeyPath:v142];

          SCNVector3.init(_:)();
          Class v143 = SCNVector3._bridgeToObjectiveC()().super.isa;
          NSString v144 = String._bridgeToObjectiveC()();
          [v140 setValue:v143 forKeyPath:v144];

          id v145 = v140;
          SCNVector3.init(_:)();
          Class v146 = SCNVector3._bridgeToObjectiveC()().super.isa;
          NSString v147 = String._bridgeToObjectiveC()();
          [v145 setValue:v146 forKeyPath:v147];

          v148.super.super.Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
        }
        else
        {
          id v149 = sub_1000EE6C0();

          id v145 = v149;
          SCNVector3.init(_:)();
          Class v150 = SCNVector3._bridgeToObjectiveC()().super.isa;
          NSString v151 = String._bridgeToObjectiveC()();
          [v145 setValue:v150 forKeyPath:v151];

          SCNVector3.init(_:)();
          v148.super = SCNVector3._bridgeToObjectiveC()();
        }
        uint64_t v2 = (char **)String._bridgeToObjectiveC()();
        [v145 setValue:v148.super.super.isa forKeyPath:v2 *(_OWORD *)&v164];

        char v115 = v168;
      }

      [v115 setFirstMaterial:v145];
      id v156 = [v145 diffuse];
      if (qword_1004C2F68 != -1) {
        swift_once();
      }
      uint64_t v2 = &selRef_replaySensorDidFinishReplayingData;
      [v156 setContents:qword_1004F8758, *(_OWORD *)&v164];

      id v157 = [v145 emission];
      if (qword_1004C2FA0 != -1) {
        swift_once();
      }
      [v157 setContents:qword_1004F8790];

      goto LABEL_196;
    case 9uLL:
      [v3 setOpacity:0.7];
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_1004C27C8 != -1) {
          swift_once();
        }
        id v30 = (id)qword_1004F7DD8;
        char v31 = UIContentSizeCategory.isAccessibilityCategory.getter();

        double v32 = 0.00150000001;
        double v33 = 0.00150000001;
        if ((v31 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            double v33 = 0.00150000001;
          }
          else {
            double v33 = 0.000750000007;
          }
        }
        a1 = (id)qword_1004F7DD8;
        char v34 = UIContentSizeCategory.isAccessibilityCategory.getter();

        if ((v34 & 1) == 0)
        {
          BOOL v35 = !UIAccessibilityIsBoldTextEnabled();
          double v36 = 0.000750000007;
          double v37 = 0.00150000001;
          goto LABEL_111;
        }
      }
      else
      {
        if (qword_1004C27C8 != -1) {
          swift_once();
        }
        id v83 = (id)qword_1004F7DD8;
        char v84 = UIContentSizeCategory.isAccessibilityCategory.getter();

        double v32 = 0.00899999961;
        double v33 = 0.00899999961;
        if ((v84 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled()) {
            double v33 = 0.00899999961;
          }
          else {
            double v33 = 0.00449999981;
          }
        }
        a1 = (id)qword_1004F7DD8;
        char v85 = UIContentSizeCategory.isAccessibilityCategory.getter();

        if ((v85 & 1) == 0)
        {
          BOOL v35 = !UIAccessibilityIsBoldTextEnabled();
          double v36 = 0.00449999981;
          double v37 = 0.00899999961;
LABEL_111:
          if (v35) {
            double v32 = v36;
          }
          else {
            double v32 = v37;
          }
        }
      }
      [v3 setHidden:0];
      id v86 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
      if (!v86)
      {
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        uint64_t v174 = (uint64_t)a1;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        JUMPOUT(0x1000F2F34);
      }
      [*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry] setWidth:v33];
      [v86 setHeight:v32];
      id v87 = sub_1000EE2CC();
      [v86 setFirstMaterial:v87];

      id v88 = sub_1000EE2CC();
      id v89 = [v88 diffuse];

      if (qword_1004C2F80 != -1) {
        swift_once();
      }
      [v89 setContents:qword_1004F8770];

      id v90 = sub_1000EE2CC();
      id v46 = [v90 emission];

      if (qword_1004C2FB8 != -1) {
        swift_once();
      }
      uint64_t v47 = qword_1004F87A8;
LABEL_120:
      [v46 setContents:v47];

      id v91 = sub_1000EE2CC();
      static ComputedCameraProperties.shared.getter();
      Class v92 = Float._bridgeToObjectiveC()().super.super.isa;
      uint64_t v2 = (char **)String._bridgeToObjectiveC()();
      [v91 setValue:v92 forKeyPath:v2];

LABEL_121:
      while (1)
      {
LABEL_196:
        [(id)v5 commit];
        simd_float4x4.position.getter();
        simd_float4x4.position.getter();
        uint64_t v158 = &v3[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
        swift_beginAccess();
        unint64_t v159 = *(void *)v158;
        if (v159 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
          if (!v5) {
            return swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          uint64_t v5 = *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (!v5) {
            return swift_bridgeObjectRelease_n();
          }
        }
        if (v5 >= 1) {
          break;
        }
        __break(1u);
        do
        {
          __break(1u);
LABEL_208:
          swift_once();
LABEL_7:
          id v9 = (id)qword_1004F7DD8;
          char v10 = UIContentSizeCategory.isAccessibilityCategory.getter();

          if (v10)
          {
            float v11 = 0.0015;
          }
          else if (UIAccessibilityIsBoldTextEnabled())
          {
            float v11 = 0.0015;
          }
          else
          {
            float v11 = 0.00075;
          }
          a1 = (id)qword_1004F7DD8;
          char v56 = UIContentSizeCategory.isAccessibilityCategory.getter();

          if (v56)
          {
            float v57 = 0.0015;
          }
          else
          {
            BOOL v59 = !UIAccessibilityIsBoldTextEnabled();
            float v60 = 0.00075;
            float v61 = 0.0015;
LABEL_80:
            if (v59) {
              float v57 = v60;
            }
            else {
              float v57 = v61;
            }
          }
LABEL_83:
          [v3 setHidden:0];
          if ((*((unsigned char *)v2 + (void)v3) & 1) == 0)
          {
            a1 = *(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
            if (!a1) {
              goto LABEL_211;
            }
            double v62 = v57;
            double v63 = v11;
            [*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry] setWidth:v63];
            [a1 setHeight:v62];
            a1 = *(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry];
            [a1 setWidth:v63];
            [a1 setHeight:v62];
          }
          id v64 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
          if (!v64)
          {
            __break(1u);
            goto LABEL_210;
          }
          id v65 = sub_1000EE3C0(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
          [v64 setFirstMaterial:v65];

          id v66 = sub_1000EE3C0(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
          id v67 = [v66 diffuse];

          if (qword_1004C2F60 != -1) {
            swift_once();
          }
          uint64_t v2 = &selRef_replaySensorDidFinishReplayingData;
          [v67 setContents:qword_1004F8750];

          id v68 = sub_1000EE3C0(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
          id v69 = [v68 emission];

          if (qword_1004C2F90 != -1) {
            swift_once();
          }
          [v69 setContents:qword_1004F8780];

          simd_float4x4.position.getter();
          simd_float4x4.position.getter();
          double v70 = &v3[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
          swift_beginAccess();
          unint64_t v71 = *(void *)v70;
          if (v71 >> 62)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
            if (!v72) {
              goto LABEL_195;
            }
          }
          else
          {
            uint64_t v72 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain_n();
            if (!v72) {
              goto LABEL_195;
            }
          }
        }
        while (v72 < 1);
        uint64_t v2 = 0;
        do
        {
          if ((v71 & 0xC000000000000001) != 0) {
            id v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v73 = *(id *)(v71 + 8 * (void)v2 + 32);
          }
          id v74 = v73;
          uint64_t v2 = (char **)((char *)v2 + 1);
          id v173 = v73;
          sub_1000F4A9C(&v173, (uint64_t)v3);
        }
        while ((char **)v72 != v2);
LABEL_195:
        swift_bridgeObjectRelease_n();
        [v3 v6[62]:1.0];
      }
      uint64_t v160 = 0;
      do
      {
        if ((v159 & 0xC000000000000001) != 0) {
          id v161 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v161 = *(id *)(v159 + 8 * v160 + 32);
        }
        __n128 v162 = v161;
        ++v160;
        id v172 = v161;
        sub_1000F4A9C(&v172, (uint64_t)v3);
      }
      while (v5 != v160);
      return swift_bridgeObjectRelease_n();
    default:
      goto LABEL_215;
  }
}

void sub_1000F2F5C()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_line) geometry];
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  id v3 = [v1 materials];

  sub_10001C99C(0, (unint64_t *)&qword_1004D2470);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v27)
    {
LABEL_4:
      if ((v4 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v5 = *(id *)(v4 + 32);
      }
      id v6 = v5;
      swift_bridgeObjectRelease();
      sub_10001C99C(0, (unint64_t *)&qword_1004C4568);
      id v29 = v6;
      id v7 = sub_1000EE7B4();
      char v8 = static NSObject.== infix(_:_:)();

      if ((v8 & 1) != 0
        || (v9 = sub_1000EE5CC(), char v10 = static NSObject.== infix(_:_:)(), v9, (v10 & 1) != 0))
      {
        simd_float4x4.position.getter();
        simd_float4x4.position.getter();
        SCNVector3.init(_:)();
        Class isa = SCNVector3._bridgeToObjectiveC()().super.isa;
        NSString v12 = String._bridgeToObjectiveC()();
        [v29 setValue:isa forKeyPath:v12];
      }
      else
      {
        id v14 = sub_1000EE4D8();
        char v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0
          || (id v16 = sub_1000EE6C0(), v17 = static NSObject.== infix(_:_:)(), v16, (v17 & 1) != 0))
        {
          simd_float4x4.position.getter();
          float32x4_t v28 = v18;
          simd_float4x4.position.getter();
          float32x4_t v20 = vsubq_f32(v28, v19);
          int32x4_t v21 = (int32x4_t)vmulq_f32(v20, v20);
          v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
          float32x2_t v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
          float32x2_t v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
          v28.i64[0] = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]).u64[0];
          SCNVector3.init(_:)();
          Class v24 = SCNVector3._bridgeToObjectiveC()().super.isa;
          NSString v25 = String._bridgeToObjectiveC()();
          [v29 setValue:v24 forKeyPath:v25 v28.i64[0]];

          simd_float4x4.position.getter();
          SCNVector3.init(_:)();
          Class v26 = SCNVector3._bridgeToObjectiveC()().super.isa;
          v28.i64[0] = (uint64_t)String._bridgeToObjectiveC()();
          [v29 setValue:v26 forKeyPath:v28.i64[0]];

          char v13 = (void *)v28.i64[0];
          goto LABEL_11;
        }
      }

      char v13 = v29;
LABEL_11:

      return;
    }
  }
  else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_4;
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_1000F33DC()
{
  SCNVector3.init(_:_:_:)();
  id v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (result) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  if (!v3) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  uint64_t v5 = v3 - 1;
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    if ((v2 & 0xC000000000000001) == 0) {
      goto LABEL_6;
    }
    while (1)
    {
      for (id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(); ; id i = *(id *)(v2 + 8 * v6 + 32))
      {
        char v8 = i;
        id v9 = [i geometry];
        if (v9)
        {
          char v10 = v9;
          id v11 = [v9 firstMaterial];

          if (v11)
          {
            id v12 = [self mainScreen];
            [v12 nativeScale];

            Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
            NSString v14 = String._bridgeToObjectiveC()();
            [v11 setValue:isa forKeyPath:v14];
          }
        }
        id v15 = [v8 geometry];
        if (v15
          && (id v16 = v15,
              id v17 = [v15 firstMaterial],
              v16,
              v17))
        {
          id v18 = [self mainScreen];
          [v18 nativeScale];

          * infix(_:_:)();
          Class v19 = SCNVector3._bridgeToObjectiveC()().super.isa;
          NSString v20 = String._bridgeToObjectiveC()();
          [v17 setValue:v19 forKeyPath:v20];

          if (v5 == v6) {
            return swift_bridgeObjectRelease_n();
          }
        }
        else
        {

          if (v5 == v6) {
            return swift_bridgeObjectRelease_n();
          }
        }
        ++v6;
        if ((v2 & 0xC000000000000001) != 0) {
          break;
        }
LABEL_6:
        ;
      }
    }
  }
  __break(1u);
  return result;
}

void sub_1000F36E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

  if (Strong)
  {
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v6 = 0;
        do
        {
          if ((a3 & 0xC000000000000001) != 0) {
            id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v7 = *(id *)(a3 + 8 * v6 + 32);
          }
          char v8 = v7;
          ++v6;
          Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
          NSString v10 = String._bridgeToObjectiveC()();
          [v8 setValue:isa forKeyPath:v10];
        }
        while (v5 != v6);
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1000F3860(float32x4_t a1, float32x4_t a2)
{
  uint64_t v3 = v2;
  float32x4_t v4 = vsubq_f32(a2, a1);
  float32x4_t v5 = vmulq_f32(v4, v4);
  float v35 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC7Measure10LineRender_line);
  [v6 removeAllActions];
  sub_1000F3C28(v35);
  SCNVector3.init(_:)();
  [v6 setPosition:];
  SCNNode.setForwardDirection(direction:)();
  id v7 = *(void **)(v2 + OBJC_IVAR____TtC7Measure10LineRender_linePrime);
  if (v7)
  {
    id v8 = v7;
    SCNVector3.init(_:)();
    [v8 setPosition:];
    SCNNode.setForwardDirection(direction:)();
  }
  id v9 = (__n128 *)(v3 + OBJC_IVAR____TtC7Measure10LineRender_currentPositions);
  __n128 *v9 = (__n128)a1;
  v9[1] = (__n128)a2;
  NSString v10 = (unint64_t *)(v3 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
  swift_beginAccess();
  unint64_t v11 = *v10;
  if (*v10 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = result;
    if (!result) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (!v12) {
      goto LABEL_12;
    }
  }
  if (v12 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v14 = 0;
  do
  {
    if ((v11 & 0xC000000000000001) != 0) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v15 = *(id *)(v11 + 8 * v14 + 32);
    }
    id v16 = v15;
    ++v14;
    id v38 = v15;
    sub_1000F4A9C(&v38, v3);
  }
  while (v12 != v14);
LABEL_12:
  swift_bridgeObjectRelease_n();
  *(void *)(v3 + OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible) = *(void *)(v3
                                                                                    + OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible) == 1;
  unint64_t v17 = *v10;
  if (v17 >> 62) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v18; uint64_t v18 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v19 = v17 & 0xC000000000000001;
    uint64_t v20 = 4;
    int32x4_t v21 = &selRef_replaySensorDidFinishReplayingData;
    uint64_t v22 = 0;
    if ((v17 & 0xC000000000000001) != 0)
    {
LABEL_15:
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_17;
    }
    while (1)
    {
      id v23 = *(id *)(v17 + 8 * v20);
LABEL_17:
      Class v24 = v23;
      uint64_t v25 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        break;
      }
      id v26 = [v23 v21[91]];
      if (v26
        && (uint64_t v27 = v26,
            id v28 = [v26 firstMaterial],
            v27,
            v28))
      {
        Class isa = Int._bridgeToObjectiveC()().super.super.isa;
        unint64_t v30 = v19;
        unint64_t v31 = v17;
        uint64_t v32 = v18;
        uint64_t v33 = v3;
        NSString v34 = String._bridgeToObjectiveC()();
        [v28 setValue:isa forKeyPath:v34];

        uint64_t v3 = v33;
        uint64_t v18 = v32;
        unint64_t v17 = v31;
        unint64_t v19 = v30;
        int32x4_t v21 = &selRef_replaySensorDidFinishReplayingData;
        if (v25 == v18) {
          return swift_bridgeObjectRelease_n();
        }
      }
      else
      {

        if (v25 == v18) {
          return swift_bridgeObjectRelease_n();
        }
      }
      uint64_t v22 = ++v20 - 4;
      if (v19) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain_n();
  }
  return swift_bridgeObjectRelease_n();
}

void sub_1000F3C28(float a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC7Measure10LineRender_lineGeometry);
  if (!v2) {
    goto LABEL_14;
  }
  double v4 = a1;
  [*(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_lineGeometry) setLength:a1];
  float v5 = a1 * 10.0;
  if ((~COERCE_INT(a1 * 10.0) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v5 >= 9.2234e18)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  if ((uint64_t)v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = (uint64_t)v5;
  }
  [v2 setLengthSegmentCount:v6];
  id v7 = *(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry);
  [v7 setLength:v4];
  [v7 setLengthSegmentCount:v6];
}

uint64_t sub_1000F3D3C(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v9 = v8;
  simd_float4x4.position.getter();
  float32x4_t v64 = v10;
  simd_float4x4.position.getter();
  float32x4_t v12 = vsubq_f32(v64, v11);
  float32x4_t v13 = vmulq_f32(v12, v12);
  float32x4_t v14 = vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1));
  v14.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), v14).f32[0]);
  float v51 = v14.f32[0];
  *(float32x2_t *)v13.f32 = vdiv_f32(*(float32x2_t *)v12.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.f32, 0));
  v13.f32[2] = v12.f32[2] / v14.f32[0];
  v13.i32[3] = 0;
  float32x4_t v55 = v13;
  LODWORD(v50) = 1056964608;
  slerp(transform1:transform2:percent:)();
  simd_float4x4.up.getter();
  sub_1000F421C(v55, v15);
  simd_float4x4.position.getter();
  createTransform(forward:normal:position:)();
  double v54 = v17;
  v55.i64[0] = v16;
  double v52 = v19;
  double v53 = v18;
  uint64_t v20 = *(void **)(v8 + OBJC_IVAR____TtC7Measure10LineRender_line);
  [v20 removeAllActions];
  sub_1000F3C28(v51);
  [v20 setSimdWorldTransform:*(double *)v55.i64, v54, v53, v52];
  [*(id *)(v8 + OBJC_IVAR____TtC7Measure10LineRender_linePrime) setSimdWorldTransform:*(double *)v55.i64, v54, v53, v52];
  if (qword_1004C2D00 != -1) {
    swift_once();
  }
  if (byte_1004F8530 == 1 && *(unsigned char *)(v8 + OBJC_IVAR____TtC7Measure10LineRender_hasDivisions) == 1)
  {
    int32x4_t v21 = *(void **)(v8 + OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender);
    if (v21)
    {
      if (*((unsigned char *)v21 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState))
      {
        id v22 = v21;
        sub_100034C08(v51);
        sub_100034A10(a1, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  id v23 = (__n128 *)(v9 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
  *id v23 = a1;
  v23[1] = a2;
  void v23[2] = a3;
  v23[3] = a4;
  v23[4] = a5;
  uint64_t v23[5] = a6;
  v23[6] = a7;
  v23[7] = a8;
  Class v24 = (__n128 *)(v9 + OBJC_IVAR____TtC7Measure10LineRender_currentTransforms);
  *Class v24 = a1;
  v24[1] = a2;
  v24[2] = a3;
  v24[3] = a4;
  uint64_t v24[4] = a5;
  unsigned char v24[5] = a6;
  v24[6] = a7;
  v24[7] = a8;
  uint64_t v25 = (unint64_t *)(v9 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
  swift_beginAccess();
  unint64_t v26 = *v25;
  if (*v25 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v27 = result;
    if (!result) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (!v27) {
      goto LABEL_17;
    }
  }
  if (v27 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v29 = 0;
  do
  {
    if ((v26 & 0xC000000000000001) != 0) {
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v30 = *(id *)(v26 + 8 * v29 + 32);
    }
    unint64_t v31 = v30;
    ++v29;
    id v65 = v30;
    sub_1000F4A9C(&v65, v9);
  }
  while (v27 != v29);
LABEL_17:
  swift_bridgeObjectRelease_n();
  *(void *)(v9 + OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible) = *(void *)(v9
                                                                                    + OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible) == 1;
  unint64_t v32 = *v25;
  if (v32 >> 62) {
    goto LABEL_31;
  }
  uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v33; uint64_t v33 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v34 = v32 & 0xC000000000000001;
    uint64_t v35 = 4;
    double v36 = &selRef_replaySensorDidFinishReplayingData;
    uint64_t v37 = 0;
    if ((v32 & 0xC000000000000001) != 0)
    {
LABEL_20:
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_22;
    }
    while (1)
    {
      id v38 = *(id *)(v32 + 8 * v35);
LABEL_22:
      char v39 = v38;
      uint64_t v40 = v37 + 1;
      if (__OFADD__(v37, 1)) {
        break;
      }
      id v41 = [v38 v36[91]];
      if (v41
        && (id v42 = v41,
            id v43 = [v41 firstMaterial],
            v42,
            v43))
      {
        Class isa = Int._bridgeToObjectiveC()().super.super.isa;
        unint64_t v45 = v34;
        unint64_t v46 = v32;
        uint64_t v47 = v33;
        uint64_t v48 = v9;
        NSString v49 = String._bridgeToObjectiveC()();
        [v43 setValue:isa forKeyPath:v49];

        uint64_t v9 = v48;
        uint64_t v33 = v47;
        unint64_t v32 = v46;
        unint64_t v34 = v45;
        double v36 = &selRef_replaySensorDidFinishReplayingData;
        if (v40 == v33) {
          return swift_bridgeObjectRelease_n();
        }
      }
      else
      {

        if (v40 == v33) {
          return swift_bridgeObjectRelease_n();
        }
      }
      uint64_t v37 = ++v35 - 4;
      if (v34) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain_n();
  }
  return swift_bridgeObjectRelease_n();
}

double sub_1000F421C(float32x4_t a1, float32x4_t a2)
{
  void (*v5)(void *__return_ptr, uint64_t);
  uint64_t v6;
  void *v7;
  id v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  unint64_t v16;
  float32x4_t v17;
  void __src[64];
  unsigned char __dst[512];

  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride + 16))
  {
    unint64_t v3 = a2.i64[0];
    float32x4_t v4 = vmulq_f32(a1, a2);
    if ((float)(1.0 - fabsf(v4.f32[2] + vaddv_f32(*(float32x2_t *)v4.f32))) < 0.00000011921)
    {
      float v5 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v2
                                                                              + OBJC_IVAR____TtC7Measure10LineRender__arframe)
                                                                + 144);
      uint64_t v16 = a2.i64[0];
      uint64_t v6 = swift_retain();
      v5(__src, v6);
      swift_release();
      memcpy(__dst, __src, sizeof(__dst));
      id v7 = (void *)sub_1000A3850();
      sub_100016F7C((uint64_t)__dst);
      unint64_t v3 = v16;
      if (v7)
      {
        uint64_t v8 = [v7 camera];
        [v8 transform];

        simd_float4x4.forward.getter();
        double v17 = v9;

        float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        float32x4_t v11 = (int32x4_t)vmlaq_f32(vmulq_f32(v10, vnegq_f32(v17)), a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL));
        float32x4_t v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL);
        float32x4_t v13 = (int32x4_t)vmlaq_f32(vmulq_f32(v10, vnegq_f32(v12)), a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
        unint64_t v3 = vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL).u64[0];
      }
    }
  }
  else
  {
    unint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride);
  }
  return *(double *)&v3;
}

void sub_1000F43AC(void *a1, uint64_t a2, Swift::Double a3)
{
  float v5 = spring(tension:friction:velocity:elapsed:)(400.0, 40.0, 0.0, a3);
  long long v34 = *(_OWORD *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 16);
  long long v35 = *(_OWORD *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
  long long v32 = *(_OWORD *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 48);
  long long v33 = *(_OWORD *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 32);
  slerp(transform1:transform2:percent:)();
  uint64_t v6 = (_OWORD *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_currentTransforms);
  *uint64_t v6 = v35;
  v6[1] = v34;
  v6[2] = v33;
  v6[3] = v32;
  v6[4] = v7;
  v6[5] = v8;
  v6[6] = v9;
  v6[7] = v10;
  simd_float4x4.position.getter();
  float32x4_t v36 = v11;
  simd_float4x4.position.getter();
  float32x4_t v13 = vsubq_f32(v36, v12);
  float32x4_t v14 = vmulq_f32(v13, v13);
  float32x4_t v15 = vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1));
  v15.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), v15).f32[0]);
  float v31 = v15.f32[0];
  *(float32x2_t *)v14.f32 = vdiv_f32(*(float32x2_t *)v13.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0));
  v14.f32[2] = v13.f32[2] / v15.f32[0];
  v14.i32[3] = 0;
  float32x4_t v37 = v14;
  LODWORD(v30) = 1056964608;
  slerp(transform1:transform2:percent:)();
  simd_float4x4.up.getter();
  sub_1000F421C(v37, v16);
  simd_float4x4.position.getter();
  createTransform(forward:normal:position:)();
  double v40 = v18;
  double v41 = v17;
  double v38 = v20;
  double v39 = v19;
  [*(id *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_line) setSimdWorldTransform:v30];
  [*(id *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_linePrime) setSimdWorldTransform:v41, v40, v39, v38];
  sub_1000F3C28(v31);
  simd_float4x4.position.getter();
  simd_float4x4.position.getter();
  int32x4_t v21 = (unint64_t *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
  swift_beginAccess();
  unint64_t v22 = *v21;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    if (!v23) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v23) {
      goto LABEL_10;
    }
  }
  if (v23 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v24 = 0;
  do
  {
    if ((v22 & 0xC000000000000001) != 0) {
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v25 = *(id *)(v22 + 8 * v24 + 32);
    }
    unint64_t v26 = v25;
    ++v24;
    id v42 = v25;
    sub_1000F4A9C(&v42, a2);
  }
  while (v23 != v24);
LABEL_10:
  swift_bridgeObjectRelease_n();
  if (qword_1004C2D00 != -1) {
    swift_once();
  }
  if ((byte_1004F8530 & 1) != 0 && *(unsigned char *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_hasDivisions) == 1)
  {
    type metadata accessor for LineDivisionsRender();
    uint64_t v27 = swift_dynamicCastClass();
    if (v27)
    {
      if (*(unsigned char *)(v27 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState))
      {
        id v28 = a1;
        sub_100034C08(v31);
      }
    }
  }
  uint64_t v29 = a2 + OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent;
  *(float *)uint64_t v29 = v5;
  *(unsigned char *)(v29 + 4) = 0;
}

void sub_1000F4768()
{
  sub_10006B9DC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unsigned char *storeEnumTagSinglePayload for LineRender.AnimationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F49A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LineRender.AnimationState()
{
  return &type metadata for LineRender.AnimationState;
}

unint64_t sub_1000F49E0()
{
  unint64_t result = qword_1004CAAC0;
  if (!qword_1004CAAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CAAC0);
  }
  return result;
}

uint64_t sub_1000F4A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894(&qword_1004CAAC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000F4A9C(id *a1, uint64_t a2)
{
  void (*v17)(void *__return_ptr, uint64_t);
  uint64_t v18;
  Class v19;
  NSString v20;
  id v21;
  void *v22;
  id v23;
  void (*v24)(void *__return_ptr, uint64_t);
  uint64_t v25;
  Class v26;
  NSString v27;
  id v28;
  void *v29;
  id v30;
  Class v31;
  NSString v32;
  void __src[64];
  _OWORD __dst[32];

  id v3 = *a1;
  id v4 = [*a1 geometry];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 firstMaterial];

    if (v6)
    {
      SCNVector3.init(_:)();
      Class isa = SCNVector3._bridgeToObjectiveC()().super.isa;
      NSString v8 = String._bridgeToObjectiveC()();
      [v6 setValue:isa forKeyPath:v8];
    }
  }
  id v9 = [v3 geometry];
  if (v9)
  {
    long long v10 = v9;
    id v11 = [v9 firstMaterial];

    if (v11)
    {
      SCNVector3.init(_:)();
      Class v12 = SCNVector3._bridgeToObjectiveC()().super.isa;
      NSString v13 = String._bridgeToObjectiveC()();
      [v11 setValue:v12 forKeyPath:v13];
    }
  }
  id v14 = [v3 geometry];
  if (v14)
  {
    float32x4_t v15 = v14;
    id v16 = [v14 firstMaterial];

    if (v16)
    {
      double v17 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(a2
                                                                               + OBJC_IVAR____TtC7Measure10LineRender__arframe)
                                                                 + 144);
      double v18 = swift_retain();
      v17(__src, v18);
      swift_release();
      memcpy(__dst, __src, sizeof(__dst));
      sub_100016F7C((uint64_t)__dst);
      simd_float4x4.position.getter();
      SCNVector3.init(_:)();
      double v19 = SCNVector3._bridgeToObjectiveC()().super.isa;
      double v20 = String._bridgeToObjectiveC()();
      [v16 setValue:v19 forKeyPath:v20];
    }
  }
  int32x4_t v21 = [v3 geometry];
  if (v21)
  {
    unint64_t v22 = v21;
    uint64_t v23 = [v21 firstMaterial];

    if (v23)
    {
      uint64_t v24 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(a2
                                                                               + OBJC_IVAR____TtC7Measure10LineRender__arframe)
                                                                 + 144);
      id v25 = swift_retain();
      v24(__src, v25);
      swift_release();
      memcpy(__dst, __src, sizeof(__dst));
      sub_100016F7C((uint64_t)__dst);
      simd_float4x4.forward.getter();
      SCNVector3.init(_:)();
      unint64_t v26 = SCNVector3._bridgeToObjectiveC()().super.isa;
      uint64_t v27 = String._bridgeToObjectiveC()();
      [v23 setValue:v26 forKeyPath:v27];
    }
  }
  id v28 = [v3 geometry];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = [v28 firstMaterial];

    if (v30)
    {
      float v31 = Float._bridgeToObjectiveC()().super.super.isa;
      long long v32 = String._bridgeToObjectiveC()();
      [v30 setValue:v31 forKeyPath:v32];
    }
  }
}

uint64_t sub_1000F4E6C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000F4EA4(void *a1, Swift::Double a2)
{
  sub_1000F43AC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1000F4EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F4EBC()
{
  return swift_release();
}

id sub_1000F4ECC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isLineOcclusionAlphaBlendingEnabled];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000F4F00(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsLineOcclusionAlphaBlendingEnabled:*a1];
}

uint64_t sub_1000F4F14()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F4F4C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000F4F8C(uint64_t a1)
{
  sub_1000F36E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F4F94()
{
  uint64_t v1 = v0;
  *(void *)&v0[OBJC_IVAR____TtC7Measure10LineRender_state] = static MeasureObjectState.default;
  v0[OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude] = 1;
  v0[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] = 0;
  uint64_t v2 = OBJC_IVAR____TtC7Measure10LineRender__render;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = sub_100012894(&qword_1004C9E08);
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1004F8630;
  id v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 272);
  swift_retain();
  *(void *)&v1[v2] = v6(KeyPath, v5);
  uint64_t v7 = OBJC_IVAR____TtC7Measure10LineRender__arframe;
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = sub_100012894(&qword_1004C3F10);
  uint64_t v10 = qword_1004F8630;
  id v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 272);
  swift_retain();
  *(void *)&v1[v7] = v11(v8, v10);
  if (qword_1004C27C8 != -1) {
    swift_once();
  }
  id v12 = (id)qword_1004F7DD8;
  char v13 = UIContentSizeCategory.isAccessibilityCategory.getter();

  BOOL IsBoldTextEnabled = 1;
  if ((v13 & 1) == 0) {
    BOOL IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  }
  v1[OBJC_IVAR____TtC7Measure10LineRender_accessibleSizeOn] = IsBoldTextEnabled;
  uint64_t v15 = OBJC_IVAR____TtC7Measure10LineRender_line;
  *(void *)&v1[v15] = [objc_allocWithZone((Class)SCNNode) init];
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender_linePrime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes] = _swiftEmptyArrayStorage;
  id v16 = &v1[OBJC_IVAR____TtC7Measure10LineRender_transformAtSnapStart];
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *(_OWORD *)id v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  v16[64] = 1;
  double v17 = &v1[OBJC_IVAR____TtC7Measure10LineRender_targetTransformAtSnap];
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *(_OWORD *)double v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  v17[64] = 1;
  v1[OBJC_IVAR____TtC7Measure10LineRender_isMinor] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___linePrimeMaterial] = 0;
  double v18 = &v1[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent];
  *(_DWORD *)double v18 = 0;
  v18[4] = 1;
  v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized] = 2;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender] = 0;
  double v19 = &v1[OBJC_IVAR____TtC7Measure10LineRender_primarySegment];
  *(_OWORD *)double v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  v19[32] = 1;
  double v20 = &v1[OBJC_IVAR____TtC7Measure10LineRender_renderedSegment];
  *(_OWORD *)double v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  v20[32] = 1;
  int32x4_t v21 = &v1[OBJC_IVAR____TtC7Measure10LineRender_startTime];
  uint64_t v22 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v1[OBJC_IVAR____TtC7Measure10LineRender_animationState] = 0;
  uint64_t v23 = &v1[OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  unsigned char v23[16] = 1;
  v1[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender_dottedLineBreakPointDist] = 1075838976;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock] = 0;
  v1[OBJC_IVAR____TtC7Measure10LineRender__needsRendering] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible] = 1;

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000F5388()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v1 = Strong;
  [Strong setSelectedRange:0, 0];

  uint64_t v2 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v3 = v2;
  [v2 setSelectedRange:0, 0];

  uint64_t v4 = swift_unknownObjectWeakLoadStrong();
  if (!v4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = (void *)v4;
  id v6 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = v6;
  [v6 setSelectedRange:0, 0];

  uint64_t v8 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v8)
  {
LABEL_13:
    __break(1u);
    return;
  }
  id v9 = v8;
  [v8 setSelectedRange:0, 0];
}

void sub_1000F55D8()
{
  id v1 = [self mainBundle];
  NSString v2 = String._bridgeToObjectiveC()();

  uint64_t v3 = OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_contentView;
  if (!*(void *)&v0[OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_contentView])
  {
    __break(1u);
    goto LABEL_18;
  }
  [v0 addSubview:];
  uint64_t v4 = *(void **)&v0[v3];
  if (!v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v5 = v4;
  [v0 bounds];
  [v5 setFrame:];

  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v7 = (void *)Strong;
  uint64_t v8 = self;
  id v9 = [v8 preferredFontForTextStyle:UIFontTextStyleBody];
  id v10 = [v9 fontDescriptor];

  id v11 = [v10 fontDescriptorWithSymbolicTraits:2];
  if (!v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v12 = [v8 fontWithDescriptor:v11 size:0.0];

  [v7 setFont:v12];
  uint64_t v13 = swift_unknownObjectWeakLoadStrong();
  if (!v13)
  {
LABEL_21:
    __break(1u);
    return;
  }
  id v14 = (void *)v13;
  if (qword_1004C31C8 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)qword_1004F8A40;
  id v16 = *(void **)algn_1004F8A48;
  if (byte_1004F8A50)
  {
    char v17 = byte_1004F8A60;
    uint64_t v18 = qword_1004F8A58;
    char v19 = byte_1004D2600;
    id v20 = (id)qword_1004F8A40;
    id v22 = sub_100081B28(v19, v18, v17);
    sub_1000286C0(v15, v16, 1);
  }
  else
  {
    if (byte_1004D2600) {
      id v21 = *(id *)algn_1004F8A48;
    }
    else {
      id v21 = (id)qword_1004F8A40;
    }
    id v22 = v21;
  }
  [v14 setTextColor:v22];
}

id sub_1000F5978(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_contentView] = 0;
  swift_unknownObjectWeakInit();
  v8.receiver = v1;
  v8.super_class = ObjectType;
  [super initWithCoder:a1];
  id v5 = v4;
  if (v4)
  {
    id v6 = v4;
    sub_1000F55D8();
  }
  return v5;
}

uint64_t type metadata accessor for SurfaceSideMeasurementStack()
{
  return self;
}

uint64_t sub_1000F5B04(uint64_t a1, uint64_t a2, char a3)
{
  objc_super v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = *v8 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(*v8 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(*v8 + 64);
  int64_t v66 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  char v65 = a3;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_115;
    }
    if (v19 >= v66) {
      break;
    }
    unint64_t v20 = *(void *)(v10 + 8 * v19);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v66) {
        break;
      }
      unint64_t v20 = *(void *)(v10 + 8 * v14);
      if (!v20)
      {
        int64_t v14 = v19 + 2;
        if (v19 + 2 >= v66) {
          break;
        }
        unint64_t v20 = *(void *)(v10 + 8 * v14);
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v66) {
            break;
          }
          unint64_t v20 = *(void *)(v10 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v14 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_116;
              }
              if (v14 >= v66) {
                goto LABEL_88;
              }
              unint64_t v20 = *(void *)(v10 + 8 * v14);
              ++v21;
              if (v20) {
                goto LABEL_23;
              }
            }
          }
          int64_t v14 = v21;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_24:
    id v22 = *(void **)(*(void *)(v9 + 56) + 8 * v18);
    if (a2
      && ((uint64_t v23 = (void *)(*(void *)(v9 + 48) + 16 * v18), *v23 == a1) ? (v24 = v23[1] == a2) : (v24 = 0),
          (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && a3 != 2))
    {
      id v4 = (char *)qword_1004C2D00;
      id v25 = v22;
      if (v4 != (char *)-1) {
        swift_once();
      }
      if (byte_1004F8530 == 1 && v25[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] == 1)
      {
        id v4 = *(char **)&v25[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
        if (v4)
        {
          if ((a3 & 1) == 0
            || ((unint64_t v26 = *(void *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state],
                 BOOL v27 = v26 > 5,
                 uint64_t v28 = (1 << v26) & 0x25,
                 !v27)
              ? (BOOL v29 = v28 == 0)
              : (BOOL v29 = 1),
                v29))
          {
            v25[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 0;
          }
          else
          {
            char v30 = v25[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions];
            v25[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 1;
            if ((v30 & 1) == 0)
            {
              float v31 = v4;
              sub_1000EEAB8();
LABEL_57:
              uint64_t v40 = *(void *)&v25[OBJC_IVAR____TtC7Measure10LineRender_state];
              uint64_t v41 = *(void *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state];
              *(void *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state] = v40;
              if (v41 != v40)
              {
                switch(v40)
                {
                  case 0:
                  case 2:
                  case 5:
                  case 7:
                    if (qword_1004C2F60 != -1) {
                      swift_once();
                    }
                    uint64_t v42 = qword_1004F8750;
                    if (qword_1004C2F90 != -1) {
                      swift_once();
                    }
                    uint64_t v43 = qword_1004F8780;
                    goto LABEL_76;
                  case 1:
                  case 3:
                  case 4:
                  case 6:
                  case 8:
                    if (qword_1004C2F88 != -1) {
                      swift_once();
                    }
                    uint64_t v42 = qword_1004F8778;
                    if (qword_1004C2FB0 != -1) {
                      swift_once();
                    }
                    uint64_t v43 = qword_1004F87A0;
LABEL_76:
                    sub_100034E78(v42, v43);
                    break;
                  case 9:
                    if (qword_1004C2F80 != -1) {
                      swift_once();
                    }
                    uint64_t v49 = qword_1004C2FB8;
                    id v50 = (id)qword_1004F8770;
                    if (v49 != -1) {
                      swift_once();
                    }
                    sub_100034E78((uint64_t)v50, qword_1004F87A8);

                    a3 = v65;
                    char v16 = v65 & 1;
                    goto LABEL_6;
                  default:
                    goto LABEL_119;
                }
              }
              char v16 = a3 & 1;
LABEL_6:
              sub_100032F24(v16);

              goto LABEL_7;
            }
          }
          double v39 = v4;
          goto LABEL_57;
        }
      }
    }
    else
    {
      id v4 = (char *)qword_1004C2D00;
      long long v32 = v22;
      if (v4 != (char *)-1) {
        swift_once();
      }
      if (byte_1004F8530 == 1 && v32[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] == 1)
      {
        id v4 = *(char **)&v32[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
        if (v4)
        {
          v32[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 0;
          uint64_t v33 = *(void *)&v32[OBJC_IVAR____TtC7Measure10LineRender_state];
          uint64_t v34 = *(void *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state];
          *(void *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state] = v33;
          if (v34 != v33)
          {
            switch(v33)
            {
              case 0:
              case 2:
              case 5:
              case 7:
                uint64_t v44 = qword_1004C2F60;
                unint64_t v45 = v4;
                if (v44 != -1) {
                  swift_once();
                }
                uint64_t v37 = qword_1004F8750;
                if (qword_1004C2F90 != -1) {
                  swift_once();
                }
                uint64_t v38 = qword_1004F8780;
                goto LABEL_69;
              case 1:
              case 3:
              case 4:
              case 6:
              case 8:
                uint64_t v35 = qword_1004C2F88;
                float32x4_t v36 = v4;
                if (v35 != -1) {
                  swift_once();
                }
                uint64_t v37 = qword_1004F8778;
                if (qword_1004C2FB0 != -1) {
                  swift_once();
                }
                uint64_t v38 = qword_1004F87A0;
LABEL_69:
                sub_100034E78(v37, v38);
                goto LABEL_70;
              case 9:
                uint64_t v46 = qword_1004C2F80;
                v4;
                if (v46 != -1) {
                  swift_once();
                }
                uint64_t v47 = qword_1004C2FB8;
                id v48 = (id)qword_1004F8770;
                if (v47 != -1) {
                  swift_once();
                }
                sub_100034E78((uint64_t)v48, qword_1004F87A8);

LABEL_70:
                a3 = v65;
                goto LABEL_5;
              default:
                goto LABEL_118;
            }
          }
          uint64_t v15 = v4;
LABEL_5:
          char v16 = 0;
          goto LABEL_6;
        }
      }
    }
LABEL_7:
    sub_1000F02B4();
  }
LABEL_88:
  swift_release();
  float v51 = (uint64_t *)(v64 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess();
  uint64_t v52 = *v51;
  uint64_t v53 = v52 + 64;
  uint64_t v54 = 1 << *(unsigned char *)(v52 + 32);
  uint64_t v55 = -1;
  if (v54 < 64) {
    uint64_t v55 = ~(-1 << v54);
  }
  uint64_t v56 = v55 & *(void *)(v52 + 64);
  int64_t v57 = (unint64_t)(v54 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v58 = 0;
  while (2)
  {
    if (v56)
    {
      v56 &= v56 - 1;
      goto LABEL_111;
    }
    int64_t v59 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    if (v59 >= v57) {
      goto LABEL_113;
    }
    uint64_t v60 = *(void *)(v53 + 8 * v59);
    ++v58;
    if (v60) {
      goto LABEL_110;
    }
    int64_t v58 = v59 + 1;
    if (v59 + 1 >= v57) {
      goto LABEL_113;
    }
    uint64_t v60 = *(void *)(v53 + 8 * v58);
    if (v60) {
      goto LABEL_110;
    }
    int64_t v58 = v59 + 2;
    if (v59 + 2 >= v57) {
      goto LABEL_113;
    }
    uint64_t v60 = *(void *)(v53 + 8 * v58);
    if (v60) {
      goto LABEL_110;
    }
    int64_t v58 = v59 + 3;
    if (v59 + 3 >= v57) {
      goto LABEL_113;
    }
    uint64_t v60 = *(void *)(v53 + 8 * v58);
    if (v60) {
      goto LABEL_110;
    }
    int64_t v58 = v59 + 4;
    if (v59 + 4 >= v57) {
      goto LABEL_113;
    }
    uint64_t v60 = *(void *)(v53 + 8 * v58);
    if (v60)
    {
LABEL_110:
      uint64_t v56 = (v60 - 1) & v60;
LABEL_111:
      if ((sub_100155910() & 1) == 0) {
        sub_100157408();
      }
      continue;
    }
    break;
  }
  int64_t v61 = v59 + 5;
  if (v61 < v57)
  {
    uint64_t v60 = *(void *)(v53 + 8 * v61);
    if (!v60)
    {
      while (1)
      {
        int64_t v58 = v61 + 1;
        if (__OFADD__(v61, 1)) {
          break;
        }
        if (v58 >= v57) {
          goto LABEL_113;
        }
        uint64_t v60 = *(void *)(v53 + 8 * v58);
        ++v61;
        if (v60) {
          goto LABEL_110;
        }
      }
LABEL_117:
      __break(1u);
LABEL_118:
      double v63 = v4;
LABEL_119:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1000F63B4);
    }
    int64_t v58 = v61;
    goto LABEL_110;
  }
LABEL_113:
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1000F6404()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7Measure8LineView_worldLines;
  swift_beginAccess();
  uint64_t v3 = *(void *)v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(*(void *)v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(*(void *)v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    int64_t v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v9 >= v7) {
      goto LABEL_25;
    }
    uint64_t v10 = *(void *)(v3 + 8 * v9);
    ++v8;
    if (!v10)
    {
      int64_t v8 = v9 + 1;
      if (v9 + 1 >= v7) {
        goto LABEL_25;
      }
      uint64_t v10 = *(void *)(v3 + 8 * v8);
      if (!v10)
      {
        int64_t v8 = v9 + 2;
        if (v9 + 2 >= v7) {
          goto LABEL_25;
        }
        uint64_t v10 = *(void *)(v3 + 8 * v8);
        if (!v10)
        {
          int64_t v8 = v9 + 3;
          if (v9 + 3 >= v7) {
            goto LABEL_25;
          }
          uint64_t v10 = *(void *)(v3 + 8 * v8);
          if (!v10)
          {
            int64_t v8 = v9 + 4;
            if (v9 + 4 >= v7) {
              goto LABEL_25;
            }
            uint64_t v10 = *(void *)(v3 + 8 * v8);
            if (!v10) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    uint64_t v6 = (v10 - 1) & v10;
LABEL_5:
    sub_1000F02B4();
  }
  int64_t v11 = v9 + 5;
  if (v11 < v7)
  {
    uint64_t v10 = *(void *)(v3 + 8 * v11);
    if (!v10)
    {
      while (1)
      {
        int64_t v8 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          break;
        }
        if (v8 >= v7) {
          goto LABEL_25;
        }
        uint64_t v10 = *(void *)(v3 + 8 * v8);
        ++v11;
        if (v10) {
          goto LABEL_24;
        }
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    int64_t v8 = v11;
    goto LABEL_24;
  }
LABEL_25:
  swift_release();
  swift_bridgeObjectRelease();
  if (![self jasperAvailable]) {
    return;
  }
  uint64_t v12 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess();
  uint64_t v13 = *v12;
  uint64_t v14 = v13 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  uint64_t v17 = v16 & *(void *)(v13 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v19 = 0;
  while (2)
  {
    if (v17)
    {
      v17 &= v17 - 1;
      goto LABEL_49;
    }
    int64_t v20 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      goto LABEL_54;
    }
    if (v20 >= v18)
    {
LABEL_51:
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v21 = *(void *)(v14 + 8 * v20);
    ++v19;
    if (v21) {
      goto LABEL_48;
    }
    int64_t v19 = v20 + 1;
    if (v20 + 1 >= v18) {
      goto LABEL_51;
    }
    uint64_t v21 = *(void *)(v14 + 8 * v19);
    if (v21) {
      goto LABEL_48;
    }
    int64_t v19 = v20 + 2;
    if (v20 + 2 >= v18) {
      goto LABEL_51;
    }
    uint64_t v21 = *(void *)(v14 + 8 * v19);
    if (v21) {
      goto LABEL_48;
    }
    int64_t v19 = v20 + 3;
    if (v20 + 3 >= v18) {
      goto LABEL_51;
    }
    uint64_t v21 = *(void *)(v14 + 8 * v19);
    if (v21) {
      goto LABEL_48;
    }
    int64_t v19 = v20 + 4;
    if (v20 + 4 >= v18) {
      goto LABEL_51;
    }
    uint64_t v21 = *(void *)(v14 + 8 * v19);
    if (v21)
    {
LABEL_48:
      uint64_t v17 = (v21 - 1) & v21;
LABEL_49:
      if ((sub_100155910() & 1) == 0) {
        sub_100157408();
      }
      continue;
    }
    break;
  }
  int64_t v22 = v20 + 5;
  if (v22 >= v18) {
    goto LABEL_51;
  }
  uint64_t v21 = *(void *)(v14 + 8 * v22);
  if (v21)
  {
    int64_t v19 = v22;
    goto LABEL_48;
  }
  while (1)
  {
    int64_t v19 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v19 >= v18) {
      goto LABEL_51;
    }
    uint64_t v21 = *(void *)(v14 + 8 * v19);
    ++v22;
    if (v21) {
      goto LABEL_48;
    }
  }
LABEL_56:
  __break(1u);
}

void sub_1000F6728(uint64_t a1, uint64_t a2)
{
  void (*v24)(void *__return_ptr, uint64_t);
  uint64_t v25;
  void (*v26)(void *__return_ptr, uint64_t);
  uint64_t v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  void v37[64];
  _OWORD __dst[32];
  void __src[64];
  CGPoint v40;
  CGRect v41;

  uint64_t v3 = v2;
  uint64_t v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1000E20D4(a1, a2);
    if (v9)
    {
      uint64_t v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
      swift_endAccess();
      id v11 = v10;
      swift_bridgeObjectRelease();
      sub_1000F33DC();
    }
    else
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  uint64_t v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess();
  uint64_t v13 = *v12;
  uint64_t v35 = *v12 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(*v12 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(*v12 + 64);
  uint64_t v17 = OBJC_IVAR____TtC7Measure8LineView__currentFrame;
  float32x4_t v36 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_10;
    }
    long long v32 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v32 >= v36) {
      goto LABEL_28;
    }
    uint64_t v33 = *(void *)(v35 + 8 * v32);
    ++v18;
    if (!v33)
    {
      int64_t v18 = v32 + 1;
      if (v32 + 1 >= v36) {
        goto LABEL_28;
      }
      uint64_t v33 = *(void *)(v35 + 8 * v18);
      if (!v33)
      {
        int64_t v18 = v32 + 2;
        if (v32 + 2 >= v36) {
          goto LABEL_28;
        }
        uint64_t v33 = *(void *)(v35 + 8 * v18);
        if (!v33)
        {
          int64_t v18 = v32 + 3;
          if (v32 + 3 >= v36) {
            goto LABEL_28;
          }
          uint64_t v33 = *(void *)(v35 + 8 * v18);
          if (!v33) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v16 = (v33 - 1) & v33;
    unint64_t v20 = __clz(__rbit64(v33)) + (v18 << 6);
LABEL_10:
    uint64_t v21 = *(char **)(*(void *)(v13 + 56) + 8 * v20);
    type metadata accessor for MeasureCamera();
    int64_t v22 = *(void **)&v21[OBJC_IVAR____TtC7Measure11PointRender_point];
    uint64_t v23 = v21;
    [v22 position];
    SIMD3<>.init(_:)();
    BOOL v24 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v3 + v17) + 144);
    id v25 = swift_retain();
    v24(__src, v25);
    swift_release();
    memcpy(__dst, __src, sizeof(__dst));
    sub_100016F7C((uint64_t)__dst);
    unint64_t v26 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v3 + v17) + 144);
    BOOL v27 = swift_retain();
    v26(v37, v27);
    swift_release();
    memcpy(__src, v37, sizeof(__src));
    sub_100016F7C((uint64_t)__src);
    static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    CGPoint.init(_:)();
    BOOL v29 = v28;
    float v31 = v30;
    CGRect.init(centerPoint:size:)();
    v40.CGFloat x = v29;
    v40.CGFloat y = v31;
    [v23 setHidden:CGRectContainsPoint(v41, v40)];
  }
  uint64_t v34 = v32 + 4;
  if (v34 >= v36)
  {
LABEL_28:
    swift_release();
    return;
  }
  uint64_t v33 = *(void *)(v35 + 8 * v34);
  if (v33)
  {
    int64_t v18 = v34;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v18 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v18 >= v36) {
      goto LABEL_28;
    }
    uint64_t v33 = *(void *)(v35 + 8 * v18);
    ++v34;
    if (v33) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
}

void sub_1000F6B0C(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess();
  uint64_t v7 = *v6;
  unint64_t v8 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = v8(v9);
  if (*(void *)(v7 + 16))
  {
    sub_1000E20D4(v10, v11);
    char v13 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13) {
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  id v14 = objc_allocWithZone((Class)type metadata accessor for PointRender());
  uint64_t v15 = sub_100156A48((void *)1, 0);
  (*(void (**)(void))((swift_isaMask & *a1) + 0x2B0))();
  simd_float4x4.position.getter();
  simd_float4x4.translated(to:)();
  uint64_t v20 = sub_10015554C(v16, v17, v18, v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x2F0))(v20);
  uint64_t v22 = *(void *)&v15[OBJC_IVAR____TtC7Measure11PointRender_type];
  *(void *)&v15[OBJC_IVAR____TtC7Measure11PointRender_type] = v21;
  if (v21 != v22) {
    sub_100155B14(*(void *)&v15[OBJC_IVAR____TtC7Measure11PointRender_state]);
  }
  uint64_t v23 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
  uint64_t v24 = OBJC_IVAR____TtC7Measure11PointRender_state;
  uint64_t v25 = *(void *)&v15[OBJC_IVAR____TtC7Measure11PointRender_state];
  *(void *)&v15[OBJC_IVAR____TtC7Measure11PointRender_state] = v23;
  if (v23 != v25) {
    sub_100155B14(v23);
  }
  if (a2)
  {
    uint64_t v26 = *(void *)&v15[v24];
    *(void *)&v15[v24] = 1;
    if (v26 != 1) {
      sub_100155B14(1);
    }
  }
  BOOL v27 = self;
  [v27 begin];
  [*(id *)(v3 + OBJC_IVAR____TtC7Measure8LineView_lineParentNode) addChildNode:v15];
  uint64_t v28 = v8((uint64_t)[v27 commit]);
  uint64_t v30 = v29;
  swift_beginAccess();
  float v31 = v15;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  sub_1000D554C((uint64_t)v31, v28, v30, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
}

void sub_1000F6E5C(void *a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(*v6 + 16) && (unint64_t v8 = sub_1000E20D4(v3, v5), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
    swift_endAccess();
    uint64_t v11 = v10;
    uint64_t v12 = swift_bridgeObjectRelease();
    char v13 = *(void (**)(uint64_t))((swift_isaMask & *a1) + 0x2B0);
    v13(v12);
    simd_float4x4.position.getter();
    simd_float4x4.translated(to:)();
    uint64_t v18 = sub_10015554C(v14, v15, v16, v17);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x2F0))(v18);
    uint64_t v20 = *(void *)&v11[OBJC_IVAR____TtC7Measure11PointRender_type];
    *(void *)&v11[OBJC_IVAR____TtC7Measure11PointRender_type] = v19;
    if (v19 != v20) {
      sub_100155B14(*(void *)&v11[OBJC_IVAR____TtC7Measure11PointRender_state]);
    }
    uint64_t v21 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
    uint64_t v22 = *(void *)&v11[OBJC_IVAR____TtC7Measure11PointRender_state];
    *(void *)&v11[OBJC_IVAR____TtC7Measure11PointRender_state] = v21;
    if (v21 != v22) {
      sub_100155B14(v21);
    }
    if ([self jasperAvailable])
    {
      uint64_t v23 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x2B8))();
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = (*(uint64_t (**)(void))((swift_isaMask & *v23) + 0xB8))();
        uint64_t v27 = v26;
        swift_beginAccess();
        uint64_t v28 = *v6;
        if (*(void *)(*v6 + 16) && (unint64_t v29 = sub_1000E20D4(v25, v27), (v30 & 1) != 0))
        {
          float v31 = *(void **)(*(void *)(v28 + 56) + 8 * v29);
          swift_endAccess();
          id v32 = v31;
          uint64_t v33 = swift_bridgeObjectRelease();
          v13(v33);
          simd_float4x4.position.getter();
          simd_float4x4.translated(to:)();
          sub_10015573C(v34, v35, v36, v37);
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_endAccess();
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
}

void sub_1000F71C8(void *a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess();
  uint64_t v8 = *v7;
  char v9 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = v9(v10);
  if (*(void *)(v8 + 16))
  {
    sub_1000E20D4(v11, v12);
    char v14 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14) {
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  char v83 = a3;
  char v85 = v9;
  unsigned int v15 = [self jasperAvailable];
  double v16 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250);
  uint64_t v17 = v16();
  unint64_t v18 = v17 & 0xC000000000000001;
  if (!v15)
  {
    if (!v18)
    {
      if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_34;
      }
      uint64_t v43 = *(id *)(v17 + 32);
LABEL_17:
      uint64_t v44 = v43;
      uint64_t v45 = swift_bridgeObjectRelease();
      v46.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v44) + 0x2B0))(v45);
      __n128 v81 = v47;
      __n128 v82 = v46;
      __n128 v79 = v49;
      __n128 v80 = v48;

      uint64_t v50 = v16();
      if ((v50 & 0xC000000000000001) == 0)
      {
        char v51 = v83;
        if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        {
          __break(1u);
          return;
        }
        uint64_t v52 = *(id *)(v50 + 40);
        goto LABEL_20;
      }
LABEL_34:
      uint64_t v52 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      char v51 = v83;
LABEL_20:
      uint64_t v53 = swift_bridgeObjectRelease();
      v54.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v52) + 0x2B0))(v53);
      __n128 v84 = v55;
      __n128 v86 = v54;
      __n128 v76 = v57;
      __n128 v78 = v56;

      if (a2) {
        uint64_t v58 = 1;
      }
      else {
        uint64_t v58 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
      }
      id v65 = objc_allocWithZone((Class)type metadata accessor for LineRender());
      sub_1000EEDC0(v58, v51 & 1, 1, 0, 0, v82, v81, v80, v79, v86, v84, v78, v76);
      uint64_t v64 = v66;
      goto LABEL_26;
    }
LABEL_32:
    uint64_t v43 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_17;
  }
  if (v18)
  {
    uint64_t v19 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v19 = *(id *)(v17 + 32);
  }
  uint64_t v20 = v19;
  uint64_t v21 = swift_bridgeObjectRelease();
  v22.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v20) + 0x2B0))(v21);
  __n128 v81 = v23;
  __n128 v82 = v22;
  __n128 v79 = v25;
  __n128 v80 = v24;

  uint64_t v26 = v16();
  if ((v26 & 0xC000000000000001) != 0)
  {
LABEL_30:
    uint64_t v27 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_12;
  }
  if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v27 = *(id *)(v26 + 40);
LABEL_12:
  uint64_t v28 = v27;
  uint64_t v29 = swift_bridgeObjectRelease();
  v30.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v28) + 0x2B0))(v29);
  __n128 v75 = v31;
  __n128 v77 = v30;
  __n128 v73 = v33;
  __n128 v74 = v32;

  if (a2) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))((swift_isaMask & *a1) + 0xD0))(v34, v35, v36, v37, v38, v39, v40, v41, v73.n128_u64[0], v73.n128_u64[1], v74.n128_u64[0], v74.n128_u64[1], v75.n128_u64[0], v75.n128_u64[1], v77.n128_u64[0], v77.n128_u64[1]);
  }
  int64_t v59 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x2C8);
  char v60 = v59();
  LOBYTE(v59) = v59();
  char v61 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x298))();
  id v62 = objc_allocWithZone((Class)type metadata accessor for LineRender());
  sub_1000EEDC0(v42, v83 & 1, v60 & 1, v59 & 1, v61 & 1, v82, v81, v80, v79, v77, v75, v74, v73);
  uint64_t v64 = v63;
  char v9 = v85;
LABEL_26:
  id v67 = self;
  [v67 begin];
  [*(id *)(v4 + OBJC_IVAR____TtC7Measure8LineView_lineParentNode) addChildNode:v64];
  uint64_t v68 = v9((uint64_t)[v67 commit]);
  uint64_t v70 = v69;
  swift_beginAccess();
  id v71 = v64;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v88 = *v7;
  uint64_t *v7 = 0x8000000000000000;
  sub_1000D56E0((uint64_t)v71, v68, v70, isUniquelyReferenced_nonNull_native);
  uint64_t *v7 = v88;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
}

void sub_1000F77E4(void *a1, char a2, char a3)
{
  uint64_t v7 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  uint64_t v9 = v8;
  uint64_t v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess();
  uint64_t v11 = *v10;
  if (!*(void *)(v11 + 16) || (unint64_t v12 = sub_1000E20D4(v7, v9), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_endAccess();
    return;
  }
  char v14 = *(void **)(*(void *)(v11 + 56) + 8 * v12);
  swift_endAccess();
  unsigned int v15 = v14;
  swift_bridgeObjectRelease();
  if ([self jasperAvailable])
  {
    char v16 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x298))() & 1;
    v15[OBJC_IVAR____TtC7Measure10LineRender_isOnVerticalGuide] = v16;
    uint64_t v17 = *(void *)&v15[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
    if (v17) {
      *(unsigned char *)(v17 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_isOnVerticalGuide) = v16;
    }
  }
  unint64_t v18 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250);
  uint64_t v19 = v18();
  if ((v19 & 0xC000000000000001) != 0)
  {
    uint64_t v20 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v20 = *(id *)(v19 + 32);
  }
  uint64_t v21 = v20;
  uint64_t v22 = swift_bridgeObjectRelease();
  v23.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v21) + 0x2B0))(v22);
  __n128 v45 = v24;
  __n128 v46 = v23;
  __n128 v43 = v26;
  __n128 v44 = v25;

  uint64_t v27 = v18();
  if ((v27 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
      return;
    }
    uint64_t v28 = *(id *)(v27 + 40);
    goto LABEL_12;
  }
LABEL_20:
  uint64_t v28 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_12:
  uint64_t v29 = v28;
  uint64_t v30 = swift_bridgeObjectRelease();
  v31.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v29) + 0x2B0))(v30);
  __n128 v41 = v32;
  __n128 v42 = v31;
  __n128 v39 = v34;
  __n128 v40 = v33;

  sub_1000EF948(a2 & 1, a3 & 1, v46, v45, v44, v43, v42, v41, v40, v39);
  uint64_t v35 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
  uint64_t v36 = *(void *)&v15[OBJC_IVAR____TtC7Measure10LineRender_state];
  *(void *)&v15[OBJC_IVAR____TtC7Measure10LineRender_state] = v35;
  if (v36 != v35)
  {
    uint64_t v37 = OBJC_IVAR____TtC7Measure10LineRender__needsRendering;
    if (v15[OBJC_IVAR____TtC7Measure10LineRender__needsRendering] != 1)
    {
      uint64_t v38 = (os_unfair_lock_s *)sub_1000EED80();
      os_unfair_lock_lock(v38);
      v15[v37] = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)&v15[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock]);
    }
  }
}

void sub_1000F7B68(void *a1)
{
  uint64_t v2 = v1;
  v4.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A0))();
  __n128 v31 = v4;
  __n128 v29 = v6;
  __n128 v30 = v5;
  __n128 v28 = v7;
  v8.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A8))();
  __n128 v26 = v9;
  __n128 v27 = v8;
  __n128 v24 = v11;
  __n128 v25 = v10;
  uint64_t v12 = static MeasureObjectState.default;
  id v13 = objc_allocWithZone((Class)type metadata accessor for LineRender());
  sub_1000EEDC0(v12, 0, 1, 0, 0, v31, v30, v29, v28, v27, v26, v25, v24);
  unsigned int v15 = (void *)v14;
  sub_1000F8DD0(v14, a1);
  char v16 = self;
  [v16 begin];
  [*(id *)(v2 + OBJC_IVAR____TtC7Measure8LineView_lineParentNode) addChildNode:v15];
  [v16 commit];
  id v17 = sub_1000F0848();
  uint64_t v18 = (*(uint64_t (**)(id))((swift_isaMask & *a1) + 0xB8))(v17);
  uint64_t v20 = v19;
  uint64_t v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess();
  id v22 = v15;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = *v21;
  uint64_t *v21 = 0x8000000000000000;
  sub_1000D56E0((uint64_t)v22, v18, v20, isUniquelyReferenced_nonNull_native);
  uint64_t *v21 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
}

uint64_t sub_1000F7D9C()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  uint64_t result = swift_beginAccess();
  int64_t v3 = 0;
  uint64_t v4 = *v1;
  uint64_t v5 = 1 << *(unsigned char *)(*v1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t v7 = v4 + 64;
  unint64_t v9 = v6 & v8;
  int64_t v10 = (unint64_t)(v5 + 63) >> 6;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v3 << 6);
LABEL_5:
    id v13 = *(char **)(*(void *)(*v1 + 56) + 8 * v12);
    if (*(void *)&v13[OBJC_IVAR____TtC7Measure10LineRender_state] == 3)
    {
      id v17 = v13;
      simd_float4x4.position.getter();
      uint64_t v19 = v18;

      return v19;
    }
  }
  int64_t v14 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v14 >= v10) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v14);
  ++v3;
  if (v15) {
    goto LABEL_22;
  }
  int64_t v3 = v14 + 1;
  if (v14 + 1 >= v10) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v3);
  if (v15) {
    goto LABEL_22;
  }
  int64_t v3 = v14 + 2;
  if (v14 + 2 >= v10) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v3);
  if (v15) {
    goto LABEL_22;
  }
  int64_t v3 = v14 + 3;
  if (v14 + 3 >= v10) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v3);
  if (v15)
  {
LABEL_22:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v3 << 6);
    goto LABEL_5;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v10) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v10) {
      return 0;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_1000F7F68(void *a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_1000E20D4(v3, v5), (v9 & 1) != 0))
  {
    int64_t v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
    swift_endAccess();
    id v11 = v10;
    uint64_t v12 = swift_bridgeObjectRelease();
    v13.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *a1) + 0x2A0))(v12);
    __n128 v23 = v14;
    __n128 v24 = v13;
    __n128 v21 = v16;
    __n128 v22 = v15;
    v17.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A8))();
    sub_1000EF948(0, 0, v24, v23, v22, v21, v17, v18, v19, v20);
    sub_1000F8DD0((uint64_t)v11, a1);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
}

id sub_1000F8118()
{
  uint64_t v1 = self;
  [v1 begin];
  uint64_t v2 = &v0[OBJC_IVAR____TtC7Measure8LineView_worldLines];
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v13 >= v8) {
      goto LABEL_21;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_21;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_21;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    id result = [*(id *)(*(void *)(v3 + 56) + 8 * v12) removeFromParentNode];
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_21:
    swift_release();
    __n128 v16 = &v0[OBJC_IVAR____TtC7Measure8LineView_worldPoints];
    swift_beginAccess();
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = v17 + 64;
    uint64_t v19 = 1 << *(unsigned char *)(v17 + 32);
    uint64_t v20 = -1;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    unint64_t v21 = v20 & *(void *)(v17 + 64);
    int64_t v22 = (unint64_t)(v19 + 63) >> 6;
    id result = (id)swift_bridgeObjectRetain();
    int64_t v23 = 0;
    while (1)
    {
      if (v21)
      {
        unint64_t v24 = __clz(__rbit64(v21));
        v21 &= v21 - 1;
        unint64_t v25 = v24 | (v23 << 6);
      }
      else
      {
        int64_t v26 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_43;
        }
        if (v26 >= v22)
        {
LABEL_41:
          swift_release();
          uint64_t v29 = swift_allocObject();
          *(void *)(v29 + 16) = v0;
          v32[4] = sub_1000F8DA8;
          v32[5] = v29;
          v32[0] = _NSConcreteStackBlock;
          v32[1] = 1107296256;
          v32[2] = sub_100049AB4;
          v32[3] = &unk_10048DD20;
          __n128 v30 = _Block_copy(v32);
          __n128 v31 = v0;
          swift_release();
          [v1 setCompletionBlock:v30];
          _Block_release(v30);
          return [v1 commit];
        }
        unint64_t v27 = *(void *)(v18 + 8 * v26);
        ++v23;
        if (!v27)
        {
          int64_t v23 = v26 + 1;
          if (v26 + 1 >= v22) {
            goto LABEL_41;
          }
          unint64_t v27 = *(void *)(v18 + 8 * v23);
          if (!v27)
          {
            int64_t v23 = v26 + 2;
            if (v26 + 2 >= v22) {
              goto LABEL_41;
            }
            unint64_t v27 = *(void *)(v18 + 8 * v23);
            if (!v27)
            {
              int64_t v28 = v26 + 3;
              if (v28 >= v22) {
                goto LABEL_41;
              }
              unint64_t v27 = *(void *)(v18 + 8 * v28);
              if (!v27)
              {
                while (1)
                {
                  int64_t v23 = v28 + 1;
                  if (__OFADD__(v28, 1)) {
                    goto LABEL_45;
                  }
                  if (v23 >= v22) {
                    goto LABEL_41;
                  }
                  unint64_t v27 = *(void *)(v18 + 8 * v23);
                  ++v28;
                  if (v27) {
                    goto LABEL_40;
                  }
                }
              }
              int64_t v23 = v28;
            }
          }
        }
LABEL_40:
        unint64_t v21 = (v27 - 1) & v27;
        unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
      }
      id result = [*(id *)(*(void *)(v17 + 56) + 8 * v25) removeFromParentNode];
    }
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_21;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1000F848C()
{
  return sub_1000F84B4(&OBJC_IVAR____TtC7Measure8LineView_worldLines);
}

uint64_t sub_1000F84A0()
{
  return sub_1000F84B4(&OBJC_IVAR____TtC7Measure8LineView_worldPoints);
}

uint64_t sub_1000F84B4(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_21;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_21:
    __n128 v16 = *(void **)(*(void *)(v3 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    id v17 = v16;
    if (!MeasureObjectState.isCapturable()()) {
      [v17 removeFromParentNode];
    }

    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000F866C()
{
  return sub_1000F8684(&OBJC_IVAR____TtC7Measure8LineView_worldLines);
}

uint64_t sub_1000F8678()
{
  return sub_1000F8684(&OBJC_IVAR____TtC7Measure8LineView_worldPoints);
}

uint64_t sub_1000F8684(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  uint64_t v8 = OBJC_IVAR____TtC7Measure8LineView_lineParentNode;
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_21;
    }
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v9) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v9) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v4 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v9) {
          return swift_release();
        }
        unint64_t v15 = *(void *)(v4 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_21:
    id v17 = *(void **)(*(void *)(v3 + 56) + 8 * v13);
    swift_bridgeObjectRetain();
    id v18 = v17;
    id v19 = [v18 parentNode];

    if (!v19) {
      [*(id *)(v20 + v8) addChildNode:v18];
    }

    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v9) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v4 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1000F8858(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = self;
  [v7 begin];
  [a1 removeFromParentNode];
  [v7 commit];
  swift_beginAccess();
  uint64_t v8 = (void *)sub_1000A8900(a3, a4);
  swift_endAccess();
}

uint64_t sub_1000F8918(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005536C();
  int64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  aBlock[4] = sub_1000F8DC8;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100049AB4;
  aBlock[3] = &unk_10048DD70;
  unint64_t v12 = _Block_copy(aBlock);
  id v13 = a1;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100039B94();
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_100039BEC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000F8B94(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess();
  void *v2 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess();
  void *v3 = _swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for LineView()
{
  return self;
}

uint64_t sub_1000F8D08()
{
  return sub_1000F84B4(&OBJC_IVAR____TtC7Measure8LineView_worldPoints);
}

uint64_t sub_1000F8D44()
{
  return sub_1000F8684(&OBJC_IVAR____TtC7Measure8LineView_worldPoints);
}

uint64_t sub_1000F8D70()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F8DA8()
{
  return sub_1000F8918(*(void **)(v0 + 16));
}

uint64_t sub_1000F8DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F8DC0()
{
  return swift_release();
}

uint64_t sub_1000F8DC8()
{
  return sub_1000F8B94(*(void *)(v0 + 16));
}

void sub_1000F8DD0(uint64_t a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0xD0))();
  uint64_t v5 = OBJC_IVAR____TtC7Measure10LineRender_state;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC7Measure10LineRender_state);
  *(void *)(a1 + OBJC_IVAR____TtC7Measure10LineRender_state) = v4;
  if (v6 != v4)
  {
    uint64_t v7 = OBJC_IVAR____TtC7Measure10LineRender__needsRendering;
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC7Measure10LineRender__needsRendering) != 1)
    {
      uint64_t v8 = (os_unfair_lock_s *)sub_1000EED80();
      os_unfair_lock_lock(v8);
      *(unsigned char *)(a1 + v7) = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock));
    }
  }
  (*(void (**)(void *__return_ptr))((swift_isaMask & *a2) + 0x2B0))(v9);
  if (*(void *)(a1 + v5) == 8)
  {
    sub_1000F4A34((uint64_t)v9, (uint64_t)v12);
    sub_1000EE99C((uint64_t)v12);
    sub_1000F4A34((uint64_t)&v10, (uint64_t)v11);
    sub_1000EE9A8((uint64_t)v11);
  }
}

char *sub_1000F8F18(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC7Measure8LineView__currentFrame;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = sub_100012894(&qword_1004C3F10);
  uint64_t v8 = qword_1004C2E30;
  int64_t v9 = v2;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1004F8630;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 272);
  swift_retain();
  *(void *)&v9[v5] = v11(KeyPath, v10);
  uint64_t v12 = OBJC_IVAR____TtC7Measure8LineView_lineParentNode;
  *(void *)&v9[v12] = [objc_allocWithZone((Class)SCNNode) init];
  *(void *)&v9[OBJC_IVAR____TtC7Measure8LineView_worldPoints] = _swiftEmptyDictionarySingleton;
  *(void *)&v9[OBJC_IVAR____TtC7Measure8LineView_worldLines] = _swiftEmptyDictionarySingleton;
  id v13 = &v9[OBJC_IVAR____TtC7Measure8LineView_firstPointInSessionId];
  *(void *)id v13 = 0;
  *((void *)v13 + 1) = 0;
  *(void *)&v9[OBJC_IVAR____TtC7Measure8LineView_scene] = a1;
  id v14 = a1;

  v20.receiver = v9;
  v20.super_class = ObjectType;
  id v15 = [super init];
  int64_t v16 = self;
  id v17 = (char *)v15;
  [v16 begin];
  id v18 = [v14 rootNode];
  [v18 addChildNode:*(void *)&v17[OBJC_IVAR____TtC7Measure8LineView_lineParentNode]];

  [v16 commit];
  return v17;
}

uint64_t sub_1000F910C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1000F9200()
{
}

void sub_1000F9228()
{
}

void sub_1000F9250()
{
}

void sub_1000F9278()
{
}

void sub_1000F92A0()
{
}

void sub_1000F92C8()
{
}

void sub_1000F92F0()
{
}

void sub_1000F9318()
{
}

void sub_1000F9340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [self defaultCenter];
  if (qword_1004C27D0 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1004F7DE0;
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v10[4] = a2;
  v10[5] = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = sub_1000F910C;
  v10[3] = a3;
  uint64_t v8 = _Block_copy(v10);
  swift_release();
  id v9 = [v5 addObserverForName:v6 object:0 queue:0 usingBlock:v8];
  _Block_release(v8);
  swift_unknownObjectRelease();
}

void sub_1000F9490()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    Notification.object.getter();
    if (v12)
    {
      if (swift_dynamicCast())
      {
        switch(v10)
        {
          case 1:
            UIAccessibilityDarkerSystemColorsEnabled();
            break;
          case 2:
            UIAccessibilityIsBoldTextEnabled();
            break;
          case 3:
            id v2 = [self sharedApplication];
            id v3 = [v2 preferredContentSizeCategory];

            UIContentSizeCategory.isAccessibilityCategory.getter();
            uint64_t v4 = *(void **)&v1[qword_1004C4FF8];
            id v5 = self;
            id v6 = [v5 preferredFontForTextStyle:UIFontTextStyleSubheadline];
            id v7 = [v6 fontDescriptor];

            id v8 = [v7 fontDescriptorWithSymbolicTraits:2];
            if (!v8)
            {
              __break(1u);
              JUMPOUT(0x1000F96B8);
            }
            id v9 = [v5 fontWithDescriptor:v8 size:0.0];

            [v4 setFont:v9];
            if ((v1[qword_1004C5000 + 8] & 1) == 0) {
              [v1 updateText:*(void *)&v1[qword_1004C5000]];
            }
            break;
          default:
            UIAccessibilityIsInvertColorsEnabled();
            break;
        }
      }
    }
    else
    {

      sub_10001C9D8((uint64_t)v11);
    }
  }
}

void sub_1000F96C8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    Notification.object.getter();
    if (v6)
    {
      if (swift_dynamicCast())
      {
        switch(v4)
        {
          case 1:
            UIAccessibilityDarkerSystemColorsEnabled();
            break;
          case 2:
            UIAccessibilityIsBoldTextEnabled();
            break;
          case 3:
            id v2 = [self sharedApplication];
            id v3 = [v2 preferredContentSizeCategory];

            UIContentSizeCategory.isAccessibilityCategory.getter();
            sub_1000FCE6C();
            break;
          default:
            UIAccessibilityIsInvertColorsEnabled();
            break;
        }
      }
    }
    else
    {

      sub_10001C9D8((uint64_t)v5);
    }
  }
}

void sub_1000F980C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    Notification.object.getter();
    if (v7)
    {
      if (swift_dynamicCast())
      {
        switch(v5)
        {
          case 1:
            UIAccessibilityDarkerSystemColorsEnabled();
            break;
          case 2:
            UIAccessibilityIsBoldTextEnabled();
            break;
          case 3:
            id v3 = [self sharedApplication];
            id v4 = [v3 preferredContentSizeCategory];

            UIContentSizeCategory.isAccessibilityCategory.getter();
            sub_1000C5BB0();
            sub_1000C6118();
            uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_state];
            goto LABEL_10;
          default:
            UIAccessibilityIsInvertColorsEnabled();
            uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_state];
LABEL_10:
            sub_1000C51D0(v2);
            break;
        }
      }
    }
    else
    {

      sub_10001C9D8((uint64_t)v6);
    }
  }
}

void sub_1000F997C(uint64_t a1, uint64_t a2, void (*a3)(BOOL))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v5 = (void *)Strong;
    Notification.object.getter();
    if (v11)
    {
      if (swift_dynamicCast())
      {
        switch(v9)
        {
          case 1:
            UIAccessibilityDarkerSystemColorsEnabled();

            break;
          case 2:
            UIAccessibilityIsBoldTextEnabled();

            break;
          case 3:
            id v7 = [self sharedApplication];
            id v8 = [v7 preferredContentSizeCategory];

            UIContentSizeCategory.isAccessibilityCategory.getter();
            break;
          default:
            BOOL IsInvertColorsEnabled = UIAccessibilityIsInvertColorsEnabled();
            a3(IsInvertColorsEnabled);

            break;
        }
      }
      else
      {
      }
    }
    else
    {

      sub_10001C9D8((uint64_t)v10);
    }
  }
}

void sub_1000F9ADC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    Notification.object.getter();
    if (v9)
    {
      if (swift_dynamicCast())
      {
        switch(v7)
        {
          case 1:
            UIAccessibilityDarkerSystemColorsEnabled();
            break;
          case 2:
            UIAccessibilityIsBoldTextEnabled();
            break;
          case 3:
            id v5 = [self sharedApplication];
            id v6 = [v5 preferredContentSizeCategory];

            UIContentSizeCategory.isAccessibilityCategory.getter();
            sub_1000B8FCC();
            break;
          default:
            UIAccessibilityIsInvertColorsEnabled();
            uint64_t v2 = qword_1004C2F18;
            id v3 = *(id *)&v1[qword_1004C9238];
            if (v2 != -1) {
              swift_once();
            }
            [v3 setBackgroundColor:qword_1004F8708];

            id v4 = *(void **)&v1[qword_1004C9228];
            if (qword_1004C2F00 != -1) {
              swift_once();
            }
            [v4 setTextColor:qword_1004F86F0];
            break;
        }
      }
    }
    else
    {

      sub_10001C9D8((uint64_t)v8);
    }
  }
}

void sub_1000F9CD4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    Notification.object.getter();
    if (v6)
    {
      if (swift_dynamicCast())
      {
        switch(v4)
        {
          case 1:
            UIAccessibilityDarkerSystemColorsEnabled();
            break;
          case 2:
            UIAccessibilityIsBoldTextEnabled();
            break;
          case 3:
            id v2 = [self sharedApplication];
            id v3 = [v2 preferredContentSizeCategory];

            LOBYTE(v2) = UIContentSizeCategory.isAccessibilityCategory.getter();
            if (v2) {
              [*(id *)&v1[OBJC_IVAR____TtC7Measure11HistoryView_tableView] reloadData];
            }
            break;
          default:
            UIAccessibilityIsInvertColorsEnabled();
            break;
        }
      }
    }
    else
    {

      sub_10001C9D8((uint64_t)v5);
    }
  }
}

void sub_1000F9E34()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (unsigned char *)Strong;
    Notification.object.getter();
    if (v9)
    {
      if (swift_dynamicCast())
      {
        switch(v7)
        {
          case 1:
            UIAccessibilityDarkerSystemColorsEnabled();
            break;
          case 2:
            int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
            int v3 = v1[OBJC_IVAR____TtC7Measure11PointRender_accessibleSizeOn];
            v1[OBJC_IVAR____TtC7Measure11PointRender_accessibleSizeOn] = IsBoldTextEnabled;
            if (IsBoldTextEnabled != v3) {
              goto LABEL_11;
            }
            break;
          case 3:
            id v4 = [self sharedApplication];
            id v5 = [v4 preferredContentSizeCategory];

            LOBYTE(v4) = UIContentSizeCategory.isAccessibilityCategory.getter();
            int v6 = v1[OBJC_IVAR____TtC7Measure11PointRender_accessibleSizeOn];
            v1[OBJC_IVAR____TtC7Measure11PointRender_accessibleSizeOn] = v4 & 1;
            if ((v4 & 1) != v6) {
LABEL_11:
            }
              sub_100155B14(*(void *)&v1[OBJC_IVAR____TtC7Measure11PointRender_state]);
            break;
          default:
            UIAccessibilityIsInvertColorsEnabled();
            break;
        }
      }
    }
    else
    {

      sub_10001C9D8((uint64_t)v8);
    }
  }
}

void sub_1000F9FC0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (unsigned char *)Strong;
    Notification.object.getter();
    if (v11)
    {
      if (swift_dynamicCast())
      {
        switch(v9)
        {
          case 1:
            UIAccessibilityDarkerSystemColorsEnabled();
            break;
          case 2:
            int IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
            int v3 = v1[OBJC_IVAR____TtC7Measure10LineRender_accessibleSizeOn];
            v1[OBJC_IVAR____TtC7Measure10LineRender_accessibleSizeOn] = IsBoldTextEnabled;
            if (IsBoldTextEnabled != v3) {
              goto LABEL_11;
            }
            break;
          case 3:
            id v4 = [self sharedApplication];
            id v5 = [v4 preferredContentSizeCategory];

            LOBYTE(v4) = UIContentSizeCategory.isAccessibilityCategory.getter();
            int v6 = v1[OBJC_IVAR____TtC7Measure10LineRender_accessibleSizeOn];
            v1[OBJC_IVAR____TtC7Measure10LineRender_accessibleSizeOn] = v4 & 1;
            if ((v4 & 1) != v6)
            {
LABEL_11:
              uint64_t v7 = OBJC_IVAR____TtC7Measure10LineRender__needsRendering;
              if (v1[OBJC_IVAR____TtC7Measure10LineRender__needsRendering] != 1)
              {
                id v8 = (os_unfair_lock_s *)sub_1000EED80();
                os_unfair_lock_lock(v8);
                v1[v7] = 1;
                os_unfair_lock_unlock(*(os_unfair_lock_t *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock]);
              }
            }
            break;
          default:
            UIAccessibilityIsInvertColorsEnabled();
            break;
        }
      }
    }
    else
    {

      sub_10001C9D8((uint64_t)v10);
    }
  }
}

uint64_t sub_1000FA16C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000FA194(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

id sub_1000FA1BC(uint64_t a1)
{
  return *(id *)(a1 + qword_1004CAB70);
}

id sub_1000FA1CC(uint64_t a1)
{
  return *(id *)(a1 + qword_1004CAB90);
}

void sub_1000FA1DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(id *)(a1 + qword_1004CAB90);
  *(void *)(a1 + qword_1004CAB90) = a3;
  id v3 = a3;
}

void sub_1000FA224(uint64_t a1)
{
  v1[qword_1004CABD8] = 1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  id v4 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  id v15 = sub_1000FD348;
  uint64_t v16 = v3;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  id v13 = sub_100049AB4;
  id v14 = &unk_10048E278;
  id v5 = _Block_copy(&v11);
  int v6 = v1;
  swift_release();
  id v7 = [v4 initWithDuration:v5 dampingRatio:0.4 animations:0.9];
  _Block_release(v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = a1;
  id v15 = sub_1000FD3A8;
  uint64_t v16 = v8;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  id v13 = sub_100036C40;
  id v14 = &unk_10048E2C8;
  char v9 = _Block_copy(&v11);
  char v10 = v6;
  swift_release();
  [v7 addCompletion:v9];
  _Block_release(v9);
  [v7 setInterruptible:0];
  [v7 startAnimation];
}

id sub_1000FA410(uint64_t a1)
{
  sub_1000FA5F4();
  double v3 = 0.0;
  switch(a1)
  {
    case 0:
    case 1:
      id v4 = *(void **)(v1 + qword_1004CABC8);
      if (v4) {
        [v4 setActive:1];
      }
      id v5 = *(void **)(v1 + qword_1004CABA0);
      if (v5) {
        goto LABEL_9;
      }
      break;
    case 2:
      int v6 = *(void **)(v1 + qword_1004CABC8);
      if (v6) {
        [v6 setActive:1];
      }
      id v5 = *(void **)(v1 + qword_1004CABA8);
      double v3 = 3.14159265;
      if (v5) {
LABEL_9:
      }
        [v5 setActive:1];
      break;
    case 3:
      id v7 = *(void **)(v1 + qword_1004CABC0);
      if (v7) {
        [v7 setActive:1];
      }
      uint64_t v8 = *(void **)(v1 + qword_1004CABB0);
      if (v8) {
        [v8 setActive:1];
      }
      double v3 = *(double *)CGFloat.piDiv2.unsafeMutableAddressor();
      break;
    case 4:
      char v9 = *(void **)(v1 + qword_1004CABC0);
      if (v9) {
        [v9 setActive:1];
      }
      char v10 = *(void **)(v1 + qword_1004CABB8);
      if (v10) {
        [v10 setActive:1];
      }
      double v3 = -*(double *)CGFloat.piDiv2.unsafeMutableAddressor();
      break;
    default:
      break;
  }
  CGAffineTransformMakeRotation(&v20, v3);
  CGFloat a = v20.a;
  CGFloat b = v20.b;
  CGFloat c = v20.c;
  CGFloat d = v20.d;
  CGFloat tx = v20.tx;
  CGFloat ty = v20.ty;
  id v17 = (CGFloat *)(v1 + qword_1004CABD0);
  *id v17 = v20.a;
  v17[1] = b;
  void v17[2] = c;
  void v17[3] = d;
  v17[4] = tx;
  v17[5] = ty;
  id v18 = *(void **)(v1 + qword_1004CAB80);
  v20.CGFloat a = a;
  v20.CGFloat b = b;
  v20.CGFloat c = c;
  v20.CGFloat d = d;
  v20.CGFloat tx = tx;
  v20.CGFloat ty = ty;
  return [v18 setTransform:&v20];
}

id sub_1000FA5F4()
{
  uint64_t v1 = *(void **)(v0 + qword_1004CABB8);
  if (v1) {
    [v1 setActive:0];
  }
  id v2 = *(void **)(v0 + qword_1004CABB0);
  if (v2) {
    [v2 setActive:0];
  }
  double v3 = *(void **)(v0 + qword_1004CABA8);
  if (v3) {
    [v3 setActive:0];
  }
  id v4 = *(void **)(v0 + qword_1004CABA0);
  if (v4) {
    [v4 setActive:0];
  }
  id v5 = *(void **)(v0 + qword_1004CABC0);
  if (v5) {
    [v5 setActive:0];
  }
  id result = *(id *)(v0 + qword_1004CABC8);
  if (result)
  {
    return [result setActive:0];
  }
  return result;
}

id sub_1000FA6D4(void *a1, char a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = &v2[qword_1004CAB78];
  *(void *)id v5 = 0;
  v5[8] = 1;
  uint64_t v6 = qword_1004CAB80;
  id v7 = objc_allocWithZone((Class)UIView);
  uint64_t v8 = v2;
  *(void *)&v2[v6] = [v7 initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v9 = qword_1004CAB88;
  *(void *)&v8[v9] = [objc_allocWithZone((Class)CAShapeLayer) init];
  uint64_t v10 = qword_1004CAB90;
  *(void *)&v8[v10] = [objc_allocWithZone((Class)CAShapeLayer) init];
  *(void *)&v8[qword_1004CABA0] = 0;
  *(void *)&v8[qword_1004CABA8] = 0;
  *(void *)&v8[qword_1004CABB0] = 0;
  *(void *)&v8[qword_1004CABB8] = 0;
  *(void *)&v8[qword_1004CABC0] = 0;
  *(void *)&v8[qword_1004CABC8] = 0;
  uint64_t v11 = &v8[qword_1004CABD0];
  *(void *)uint64_t v11 = 0x3FF0000000000000;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0x3FF0000000000000;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  v8[qword_1004CABD8] = 0;
  *(void *)&v8[qword_1004CABE0] = 0;
  uint64_t v12 = qword_1004CABE8;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v14 = sub_100012894((uint64_t *)&unk_1004C4710);
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1004F8630;
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 272);
  swift_retain();
  *(void *)&v8[v12] = v16(KeyPath, v15);
  uint64_t v17 = qword_1004CABF0;
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = sub_100012894((uint64_t *)&unk_1004CEA40);
  uint64_t v20 = qword_1004F8630;
  unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 272);
  swift_retain();
  *(void *)&v8[v17] = v21(v18, v20);
  uint64_t v22 = qword_1004CABF8;
  uint64_t v23 = sub_100012894((uint64_t *)&unk_1004C7F20);
  uint64_t v24 = swift_getKeyPath();
  uint64_t v25 = qword_1004F8630;
  int64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 272);
  swift_retain();
  *(void *)&v8[v22] = v26(v24, v25);
  sub_1000FCFD4();
  *(void *)&v8[qword_1004CAB70] = v27;
  v8[qword_1004CAB98] = a2 & 1;

  [a1 frame];
  v32.receiver = v8;
  v32.super_class = ObjectType;
  id v28 = [super initWithFrame:];
  [a1 addSubview:v28];
  id v29 = v28;
  [a1 frame];
  [v29 frame];
  [v29 setFrame:];

  [v29 setUserInteractionEnabled:0];
  [v29 updateText:0];
  sub_1000FAA90();
  sub_1000F9340((uint64_t)&unk_10048DDD8, (uint64_t)sub_1000FD1E8, (uint64_t)&unk_10048DDF0);

  return v29;
}

uint64_t sub_1000FAA90()
{
  sub_1000FBA7C();
  double v2 = v1;
  double v4 = v3;
  id v5 = *(void **)&v0[qword_1004CAB90];
  uint64_t v6 = self;
  id v7 = v5;
  id v8 = [v6 bezierPathWithRoundedRect:-1 byRoundingCorners:0.0, 0.0, v2, v4, 15.0, 15.0];
  id v9 = [v8 CGPath];

  [v7 setPath:v9];
  sub_1000FAE40();
  sub_1000FAFD0();
  sub_1000FB2EC();
  id v10 = [self effectWithStyle:17];
  id v11 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v10];
  [v0 bounds];
  [v11 setFrame:];
  [v11 setAutoresizingMask:18];
  uint64_t v12 = qword_1004CAB80;
  [*(id *)&v0[qword_1004CAB80] insertSubview:v11 atIndex:0];

  [v0 setAlpha:0.0];
  id v13 = *(void **)&v0[v12];
  CGAffineTransformMakeScale(&v21, 0.9, 0.9);
  [v13 setTransform:&v21];
  uint64_t v14 = self;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v0;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1000FD208;
  *(void *)(v16 + 24) = v15;
  *(void *)&v21.CGFloat tx = sub_1000A44B4;
  *(void *)&v21.CGFloat ty = v16;
  *(void *)&v21.CGFloat a = _NSConcreteStackBlock;
  *(void *)&v21.CGFloat b = 1107296256;
  *(void *)&v21.CGFloat c = sub_1000FA194;
  *(void *)&v21.CGFloat d = &unk_10048DE68;
  uint64_t v17 = _Block_copy(&v21);
  uint64_t v18 = v0;
  swift_retain();
  swift_release();
  [v14 performWithoutAnimation:v17];
  _Block_release(v17);
  isEscapingClosureAtFileLocatiouint64_t n = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FAD9C(uint64_t result)
{
  if (*(unsigned char *)(v1 + qword_1004C71F0) == 1)
  {
    __chkstk_darwin(result);
    swift_retain();
    StateValue.ifUpdated(_:)();
    return swift_release();
  }
  return result;
}

void sub_1000FAE40()
{
  if (*(unsigned char *)(v0 + qword_1004CAB98) == 1)
  {
    uint64_t v1 = qword_1004CAB88;
    id v2 = *(id *)(v0 + qword_1004CAB88);
    id v3 = sub_1000FBB44(-15.0, -0.7);
    id v4 = [v3 CGPath];

    [v2 setPath:v4];
    id v5 = *(void **)(v0 + v1);
    CGAffineTransformMakeRotation((CGAffineTransform *)&v14, -1.57079625);
    long long v12 = *(_OWORD *)&v14.m13;
    long long v13 = *(_OWORD *)&v14.m11;
    long long v11 = *(_OWORD *)&v14.m21;
    id v6 = v5;
    *(_OWORD *)&m.CGFloat a = v13;
    *(_OWORD *)&m.CGFloat c = v12;
    *(_OWORD *)&m.CGFloat tx = v11;
    CATransform3DMakeAffineTransform(&v14, &m);
    [v6 setTransform:&v14];

    [*(id *)(v0 + qword_1004CAB90) addSublayer:*(void *)(v0 + v1)];
    id v7 = *(id *)(v0 + v1);
    sub_1000FBA7C();
    double v9 = v8;
    sub_1000FBA7C();
    [v7 setPosition:v9, v10 * 0.5];
  }
}

void sub_1000FAFD0()
{
  uint64_t v1 = qword_1004CAB80;
  id v2 = [*(id *)&v0[qword_1004CAB80] layer];
  [v2 setMask:*(void *)&v0[qword_1004CAB90]];

  id v3 = [*(id *)&v0[v1] layer];
  [v3 setMasksToBounds:1];

  id v4 = [*(id *)&v0[v1] layer];
  id v5 = v4;
  double v6 = 1.0;
  if (v0[qword_1004CAB98])
  {
    double v7 = 20.0;
  }
  else
  {
    double v6 = 0.5;
    double v7 = 18.0;
  }
  if (v0[qword_1004CAB98]) {
    double v8 = -32.0;
  }
  else {
    double v8 = -18.0;
  }
  [v4 setAnchorPoint:v6];

  double v9 = *(void **)&v0[qword_1004CAB70];
  [*(id *)&v0[v1] addSubview:v9];
  [v0 addSubview:*(void *)&v0[v1]];
  [*(id *)&v0[v1] setTranslatesAutoresizingMaskIntoConstraints:0];
  id v10 = [*(id *)&v0[v1] heightAnchor];
  sub_1000FBA7C();
  id v12 = [v10 constraintEqualToConstant:v11];

  [v12 setActive:1];
  id v13 = [v9 centerYAnchor];
  id v14 = [*(id *)&v0[v1] centerYAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  [v15 setActive:1];
  id v16 = [v9 leftAnchor];
  id v17 = [*(id *)&v0[v1] leftAnchor];
  id v18 = [v16 constraintEqualToAnchor:v17 constant:v7];

  [v18 setActive:1];
  id v19 = [v9 rightAnchor];
  id v20 = [*(id *)&v0[v1] rightAnchor];
  id v21 = [v19 constraintEqualToAnchor:v20 constant:v8];

  [v21 setActive:1];
}

void sub_1000FB2EC()
{
  if (v0[qword_1004CAB98] == 1)
  {
    if (qword_1004C2E80 != -1) {
      swift_once();
    }
    double v1 = *(double *)&qword_1004F8660;
    if (qword_1004C2E78 != -1) {
      swift_once();
    }
    double v2 = v1 + *(double *)&qword_1004F8658;
    uint64_t v3 = qword_1004CAB80;
    id v4 = [*(id *)&v0[qword_1004CAB80] centerYAnchor];
    id v5 = [v0 topAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5 constant:v2];

    double v7 = *(void **)&v0[qword_1004CABB8];
    *(void *)&v0[qword_1004CABB8] = v6;

    id v8 = [*(id *)&v0[v3] centerYAnchor];
    id v9 = [v0 bottomAnchor];
    id v10 = [v8 constraintEqualToAnchor:v9 constant:-v2];

    double v11 = *(void **)&v0[qword_1004CABB0];
    *(void *)&v0[qword_1004CABB0] = v10;

    id v12 = [*(id *)&v0[v3] centerXAnchor];
    id v13 = [v0 leftAnchor];
    id v14 = [v12 constraintEqualToAnchor:v13 constant:v2];

    id v15 = *(void **)&v0[qword_1004CABA8];
    *(void *)&v0[qword_1004CABA8] = v14;

    id v16 = [*(id *)&v0[v3] centerXAnchor];
    id v17 = [v0 rightAnchor];
    id v18 = [v16 constraintEqualToAnchor:v17 constant:-v2];

    id v19 = *(void **)&v0[qword_1004CABA0];
    *(void *)&v0[qword_1004CABA0] = v18;

    id v20 = [*(id *)&v0[v3] centerXAnchor];
    id v21 = [v0 centerXAnchor];
    id v22 = [v20 constraintEqualToAnchor:v21];

    uint64_t v23 = *(void **)&v0[qword_1004CABC0];
    *(void *)&v0[qword_1004CABC0] = v22;

    id v24 = [*(id *)&v0[v3] centerYAnchor];
    id v25 = [v0 centerYAnchor];
    id v26 = [v24 constraintEqualToAnchor:v25];

    uint64_t v27 = qword_1004CABC8;
  }
  else
  {
    if (qword_1004C3158 != -1) {
      swift_once();
    }
    double v28 = *(double *)&qword_1004F8950;
    uint64_t v29 = qword_1004CAB80;
    id v30 = [*(id *)&v0[qword_1004CAB80] centerYAnchor];
    id v31 = [v0 topAnchor];
    id v32 = [v30 constraintEqualToAnchor:v31 constant:v28];

    __n128 v33 = *(void **)&v0[qword_1004CABA0];
    *(void *)&v0[qword_1004CABA0] = v32;

    id v34 = [*(id *)&v0[v29] centerYAnchor];
    id v35 = [v0 bottomAnchor];
    id v36 = [v34 constraintEqualToAnchor:v35 constant:-v28];

    uint64_t v37 = *(void **)&v0[qword_1004CABA8];
    *(void *)&v0[qword_1004CABA8] = v36;

    id v38 = [*(id *)&v0[v29] centerXAnchor];
    id v39 = [v0 leftAnchor];
    id v40 = [v38 constraintEqualToAnchor:v39 constant:v28];

    __n128 v41 = *(void **)&v0[qword_1004CABB8];
    *(void *)&v0[qword_1004CABB8] = v40;

    id v42 = [*(id *)&v0[v29] centerXAnchor];
    id v43 = [v0 rightAnchor];
    id v44 = [v42 constraintEqualToAnchor:v43 constant:-v28];

    __n128 v45 = *(void **)&v0[qword_1004CABB0];
    *(void *)&v0[qword_1004CABB0] = v44;

    id v46 = [*(id *)&v0[v29] centerXAnchor];
    id v47 = [v0 centerXAnchor];
    id v48 = [v46 constraintEqualToAnchor:v47];

    __n128 v49 = *(void **)&v0[qword_1004CABC8];
    *(void *)&v0[qword_1004CABC8] = v48;

    id v50 = [*(id *)&v0[v29] centerYAnchor];
    id v51 = [v0 centerYAnchor];
    id v26 = [v50 constraintEqualToAnchor:v51];

    uint64_t v27 = qword_1004CABC0;
  }
  uint64_t v52 = *(void **)&v0[v27];
  *(void *)&v0[v27] = v26;
}

id sub_1000FB944()
{
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  sub_1000FA224(v1);
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  return sub_1000FA410(v1);
}

void sub_1000FB9CC(char *a1, uint64_t a2, uint64_t a3)
{
  id v4 = &a1[qword_1004CAB78];
  *(void *)id v4 = a3;
  v4[8] = 0;
  id v5 = *(void **)&a1[qword_1004CAB70];
  double v7 = a1;
  sub_10007D390(a3);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setText:v6];

  [v5 sizeToFit];
}

void sub_1000FBA7C()
{
  uint64_t v1 = *(void **)(v0 + qword_1004CAB70);
  [v1 frame];
  CGRectGetWidth(v4);
  id v2 = [v1 font];
  if (v2)
  {
    uint64_t v3 = v2;
    [v2 capHeight];
  }
  else
  {
    __break(1u);
  }
}

id sub_1000FBB44(double a1, double a2)
{
  id v4 = [objc_allocWithZone((Class)UIBezierPath) init];
  double v16 = a2 + 0.0;
  [v4 moveToPoint:a1 + 0.0, a2 + 0.0];
  double v15 = a2 + 0.03;
  double v17 = a2 + 0.1;
  [v4 addCurveToPoint:a1 + 1.11];
  double v14 = a2 + 0.13;
  [v4 addLineToPoint:a1 + 2.22];
  double v13 = a2 + 0.65;
  [v4 addLineToPoint:a1 + 4.25];
  double v5 = a2 + 1.86;
  [v4 addLineToPoint:a1 + 6.03, a2 + 1.86];
  double v6 = a2 + 3.94;
  [v4 addLineToPoint:a1 + 7.89, a2 + 3.94];
  double v7 = a2 + 6.19;
  [v4 addLineToPoint:a1 + 9.57, a2 + 6.19];
  double v8 = a2 + 8.2;
  [v4 addLineToPoint:a1 + 11.05, a2 + 8.2];
  double v9 = a2 + 10.19;
  [v4 addLineToPoint:a1 + 12.55, a2 + 10.19];
  double v10 = a2 + 12.0;
  double v11 = a2 + 11.4;
  [v4 addCurveToPoint:a1 + 15.0 controlPoint1:v10 controlPoint2:a1 + 13.6 v11];
  [v4 addCurveToPoint:a1 + 17.45 controlPoint1:v9 controlPoint2:a1 + 15.8 v10 controlPoint2:a1 + 16.2 v11];
  [v4 addLineToPoint:a1 + 18.95, v8];
  [v4 addLineToPoint:a1 + 20.43, v7];
  [v4 addLineToPoint:a1 + 22.11, v6];
  [v4 addLineToPoint:a1 + 23.97, v5];
  [v4 addLineToPoint:a1 + 25.75, v13];
  [v4 addLineToPoint:a1 + 27.78, v14];
  [v4 addLineToPoint:a1 + 28.89, v15];
  [v4 addCurveToPoint:a1 + 30.0 controlPoint1:v16 controlPoint2:a1 + 29.0, v17, a1 + 29.3, v16];
  [v4 setLineJoinStyle:0];
  [v4 setMiterLimit:0.0];
  return v4;
}

uint64_t sub_1000FBEFC(char a1, uint64_t a2, char a3)
{
  id v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  double v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  double v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005536C();
  double v15 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v4;
  if (a1)
  {
    *(void *)(v16 + 24) = a2;
    *(unsigned char *)(v16 + 32) = a3 & 1;
    uint64_t v27 = sub_1000FD2B8;
    uint64_t v28 = v16;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    double v17 = &unk_10048E0E8;
  }
  else
  {
    uint64_t v27 = sub_1000FD278;
    uint64_t v28 = v16;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    double v17 = &unk_10048E098;
  }
  id v25 = sub_100049AB4;
  id v26 = v17;
  id v18 = _Block_copy(&aBlock);
  id v19 = v4;
  swift_release();
  static DispatchQoS.unspecified.getter();
  Swift::String aBlock = (void **)_swiftEmptyArrayStorage;
  sub_100039B94();
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_100039BEC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v22);
}

void sub_1000FC210(uint64_t a1, char a2)
{
  void (*v18)(unint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  void (*v20)(unint64_t *__return_ptr, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  char *v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  uint64_t v3 = v2;
  if ((a2 & 1) == 0)
  {
    [v2 updateText:a1];
    sub_1000FBA7C();
    double v5 = v4;
    double v7 = v6;
    uint64_t v8 = *(void **)&v2[qword_1004CAB90];
    uint64_t v9 = self;
    id v10 = v8;
    id v11 = [v9 bezierPathWithRoundedRect:-1 byRoundingCorners:0.0, 0.0, v5, v7, 15.0, 15.0];
    id v12 = [v11 CGPath];

    [v10 setPath:v12];
    uint64_t v13 = self;
    [v13 begin];
    [v13 setDisableActions:1];
    id v14 = *(id *)&v3[qword_1004CAB88];
    sub_1000FBA7C();
    double v16 = v15;
    sub_1000FBA7C();
    [v14 setPosition:v16, v17 * 0.5];

    [v13 commit];
  }
  id v18 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)&v3[qword_1004CABE8] + 144);
  id v19 = swift_retain();
  v18(&v36, v19);
  swift_release();
  if ((v36 & 0x1000000) == 0)
  {
    id v20 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)&v3[qword_1004CABF0] + 144);
    uint64_t v21 = swift_retain();
    v20(&v36, v21);
    swift_release();
    uint64_t v22 = v36;
    sub_10001F780(v36);
    if (v22 != 0xC000000000000018)
    {
      uint64_t v23 = qword_1004CABE0;
      uint64_t v24 = *(void **)&v3[qword_1004CABE0];
      if (v24) {
        [v24 invalidate];
      }
      id v25 = self;
      id v26 = swift_allocObject();
      *(void *)(v26 + 16) = v3;
      id v40 = sub_1000FD2E4;
      __n128 v41 = v26;
      id v36 = (unint64_t)_NSConcreteStackBlock;
      uint64_t v37 = 1107296256;
      id v38 = sub_100058CEC;
      id v39 = &unk_10048E138;
      uint64_t v27 = _Block_copy(&v36);
      uint64_t v28 = v3;
      swift_release();
      uint64_t v29 = [v25 scheduledTimerWithTimeInterval:0 repeats:v27 block:1.0];
      _Block_release(v27);
      id v30 = *(void **)&v3[v23];
      *(void *)&v3[v23] = v29;

      if ((v28[qword_1004CABD8] & 1) == 0)
      {
        id v31 = swift_allocObject();
        *(void *)(v31 + 16) = v28;
        id v32 = objc_allocWithZone((Class)UIViewPropertyAnimator);
        id v40 = sub_1000FD2EC;
        __n128 v41 = v31;
        id v36 = (unint64_t)_NSConcreteStackBlock;
        uint64_t v37 = 1107296256;
        id v38 = sub_100049AB4;
        id v39 = &unk_10048E188;
        __n128 v33 = _Block_copy(&v36);
        id v34 = v28;
        swift_release();
        id v35 = [v32 initWithDuration:v33 dampingRatio:0.4 animations:0.9];
        _Block_release(v33);
        [v35 setInterruptible:0];
        [v35 startAnimation];
      }
    }
  }
}

void sub_1000FC638(void *a1)
{
  if ((*((unsigned char *)a1 + qword_1004CABD8) & 1) == 0)
  {
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = a1;
    id v3 = objc_allocWithZone((Class)UIViewPropertyAnimator);
    v7[4] = sub_1000FD758;
    v7[5] = v2;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_100049AB4;
    v7[3] = &unk_10048E228;
    double v4 = _Block_copy(v7);
    id v5 = a1;
    swift_release();
    id v6 = [v3 initWithDuration:v4 dampingRatio:0.4 animations:0.9];
    _Block_release(v4);
    [v6 setInterruptible:0];
    [v6 startAnimation];
  }
}

uint64_t sub_1000FC770(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005536C();
  id v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  aBlock[4] = sub_1000FD74C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100049AB4;
  aBlock[3] = &unk_10048E1D8;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = a2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100039B94();
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_100039BEC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

id sub_1000FC9EC(char *a1, double a2, CGFloat a3)
{
  [a1 setAlpha:];
  uint64_t v5 = *(void **)&a1[qword_1004CAB80];
  long long v12 = *(_OWORD *)&a1[qword_1004CABD0 + 16];
  long long v13 = *(_OWORD *)&a1[qword_1004CABD0];
  CGFloat v6 = *(double *)&a1[qword_1004CABD0 + 32];
  CGFloat v7 = *(double *)&a1[qword_1004CABD0 + 40];
  CGAffineTransformMakeScale(&t1, a3, a3);
  long long v8 = *(_OWORD *)&t1.a;
  long long v9 = *(_OWORD *)&t1.c;
  long long v10 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v13;
  *(_OWORD *)&t1.CGFloat c = v12;
  t1.CGFloat tx = v6;
  t1.CGFloat ty = v7;
  *(_OWORD *)&t2.CGFloat a = v8;
  *(_OWORD *)&t2.CGFloat c = v9;
  *(_OWORD *)&t2.CGFloat tx = v10;
  CGAffineTransformConcat(&v14, &t1, &t2);
  CGAffineTransform t1 = v14;
  return [v5 setTransform:&t1];
}

void sub_1000FCAC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  sub_1000FD3DC();
}

void sub_1000FCAE8()
{
}

uint64_t sub_1000FCB18()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000FCC18(uint64_t a1)
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for CalloutViewSpatial()
{
  uint64_t result = qword_1004CAC28;
  if (!qword_1004CAC28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FCD70()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000FCE04()
{
  return type metadata accessor for CalloutViewSpatial();
}

uint64_t sub_1000FCE0C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 32);
  return swift_retain();
}

uint64_t sub_1000FCE1C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 56);
  return swift_retain();
}

uint64_t sub_1000FCE2C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 56);
  return swift_retain();
}

uint64_t sub_1000FCE3C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 32);
  return swift_retain();
}

uint64_t sub_1000FCE4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 168);
  return swift_retain();
}

uint64_t sub_1000FCE5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 168);
  return swift_retain();
}

void sub_1000FCE6C()
{
  uint64_t v1 = *(void **)&v0[qword_1004CAB70];
  uint64_t v2 = self;
  id v3 = [v2 preferredFontForTextStyle:UIFontTextStyleSubheadline];
  id v4 = [v3 fontDescriptor];

  id v5 = [v4 fontDescriptorWithSymbolicTraits:2];
  if (v5)
  {
    id v6 = [v2 fontWithDescriptor:v5 size:0.0];

    [v1 setFont:v6];
    if ((v0[qword_1004CAB78 + 8] & 1) == 0) {
      [v0 updateText:*(void *)&v0[qword_1004CAB78]];
    }
    id v7 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
    long long v8 = *(void **)&v0[qword_1004CAB80];
    *(void *)&v0[qword_1004CAB80] = v7;

    sub_1000FAA90();
  }
  else
  {
    __break(1u);
  }
}

void sub_1000FCFD4()
{
  id v0 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v0 setTextAlignment:1];
  if (qword_1004C3128 != -1) {
    swift_once();
  }
  [v0 setTextColor:qword_1004F8930];
  uint64_t v1 = self;
  id v2 = [v1 preferredFontForTextStyle:UIFontTextStyleSubheadline];
  id v3 = [v2 fontDescriptor];

  id v4 = [v3 fontDescriptorWithSymbolicTraits:2];
  if (v4)
  {
    id v5 = [v1 fontWithDescriptor:v4 size:0.0];

    [v0 setFont:v5];
    NSString v6 = String._bridgeToObjectiveC()();
    [v0 setText:v6];

    [v0 setAdjustsFontSizeToFitWidth:1];
    [v0 setBaselineAdjustment:1];
    [v0 sizeToFit];
    [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000FD1B0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000FD1E8()
{
}

uint64_t sub_1000FD1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FD200()
{
  return swift_release();
}

id sub_1000FD208()
{
  return sub_1000FB944();
}

uint64_t sub_1000FD210()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000FD220()
{
}

void sub_1000FD228()
{
}

void sub_1000FD230()
{
}

void sub_1000FD238()
{
}

void sub_1000FD240()
{
}

void sub_1000FD248(uint64_t a1)
{
  sub_1000F997C(a1, v1, (void (*)(BOOL))sub_1001D521C);
}

void sub_1000FD278()
{
  sub_1000FC638(*(void **)(v0 + 16));
}

uint64_t sub_1000FD280()
{
  return _swift_deallocObject(v0, 33, 7);
}

void sub_1000FD2B8()
{
  sub_1000FC210(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_1000FD2E4(uint64_t a1)
{
  return sub_1000FC770(a1, *(void **)(v1 + 16));
}

id sub_1000FD2EC()
{
  return sub_1000FC9EC(*(char **)(v0 + 16), 1.0, 1.0);
}

uint64_t sub_1000FD310()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000FD348()
{
  return sub_1000FC9EC(*(char **)(v0 + 16), 0.0, 0.9);
}

uint64_t sub_1000FD370()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000FD3A8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id result = sub_1000FA410(*(void *)(v0 + 24));
  *(unsigned char *)(v1 + qword_1004CABD8) = 0;
  return result;
}

void sub_1000FD3DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[qword_1004CAB78];
  *(void *)uint64_t v2 = 0;
  v2[8] = 1;
  uint64_t v3 = qword_1004CAB80;
  *(void *)&v1[v3] = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v4 = qword_1004CAB88;
  *(void *)&v1[v4] = [objc_allocWithZone((Class)CAShapeLayer) init];
  uint64_t v5 = qword_1004CAB90;
  *(void *)&v1[v5] = [objc_allocWithZone((Class)CAShapeLayer) init];
  *(void *)&v1[qword_1004CABA0] = 0;
  *(void *)&v1[qword_1004CABA8] = 0;
  *(void *)&v1[qword_1004CABB0] = 0;
  *(void *)&v1[qword_1004CABB8] = 0;
  *(void *)&v1[qword_1004CABC0] = 0;
  *(void *)&v1[qword_1004CABC8] = 0;
  NSString v6 = &v1[qword_1004CABD0];
  *NSString v6 = 0x3FF0000000000000;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0x3FF0000000000000;
  v6[4] = 0;
  v6[5] = 0;
  v1[qword_1004CABD8] = 0;
  *(void *)&v1[qword_1004CABE0] = 0;
  uint64_t v7 = qword_1004CABE8;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = sub_100012894((uint64_t *)&unk_1004C4710);
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1004F8630;
  id v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 272);
  swift_retain();
  *(void *)&v1[v7] = v11(KeyPath, v10);
  uint64_t v12 = qword_1004CABF0;
  uint64_t v13 = swift_getKeyPath();
  uint64_t v14 = sub_100012894((uint64_t *)&unk_1004CEA40);
  uint64_t v15 = qword_1004F8630;
  double v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 272);
  swift_retain();
  *(void *)&v1[v12] = v16(v13, v15);
  uint64_t v17 = qword_1004CABF8;
  uint64_t v18 = sub_100012894((uint64_t *)&unk_1004C7F20);
  uint64_t v19 = swift_getKeyPath();
  uint64_t v20 = qword_1004F8630;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 272);
  swift_retain();
  *(void *)&v1[v17] = v21(v19, v20);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000FD68C()
{
}

void sub_1000FD694(uint64_t a1)
{
  sub_1000F997C(a1, v1, (void (*)(BOOL))sub_1000AEBBC);
}

__n128 initializeWithCopy for FloorCeilingState(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FloorCeilingState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 153)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FloorCeilingState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 153) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FloorCeilingState()
{
  return &type metadata for FloorCeilingState;
}

id sub_1000FD844()
{
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  id result = (id)*((void *)&xmmword_1004F8000 + 1);
  if (*((void *)&xmmword_1004F8000 + 1))
  {
    id v1 = (id)*((void *)&xmmword_1004F8000 + 1);
    qword_1004F81B8 = Contexts.PrivateQueue.init(_:)();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000FD8C4@<X0>(void *a1@<X8>)
{
  if (qword_1004C2AB8 != -1) {
    swift_once();
  }
  long long v2 = (void *)qword_1004F81B8;
  *a1 = qword_1004F81B8;

  return v2;
}

BOOL sub_1000FD930(uint64_t a1, uint64_t a2)
{
  float32x4_t v2 = *(float32x4_t *)(a1 + 112);
  v11[6] = *(float32x4_t *)(a1 + 96);
  v11[7] = v2;
  v12[0] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)(a1 + 137);
  float32x4_t v3 = *(float32x4_t *)(a1 + 48);
  v11[2] = *(float32x4_t *)(a1 + 32);
  v11[3] = v3;
  float32x4_t v4 = *(float32x4_t *)(a1 + 80);
  v11[4] = *(float32x4_t *)(a1 + 64);
  v11[5] = v4;
  float32x4_t v5 = *(float32x4_t *)(a1 + 16);
  v11[0] = *(float32x4_t *)a1;
  v11[1] = v5;
  float32x4_t v6 = *(float32x4_t *)(a2 + 112);
  v13[6] = *(float32x4_t *)(a2 + 96);
  v13[7] = v6;
  v14[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)(a2 + 137);
  float32x4_t v7 = *(float32x4_t *)(a2 + 48);
  v13[2] = *(float32x4_t *)(a2 + 32);
  v13[3] = v7;
  float32x4_t v8 = *(float32x4_t *)(a2 + 80);
  _OWORD v13[4] = *(float32x4_t *)(a2 + 64);
  v13[5] = v8;
  float32x4_t v9 = *(float32x4_t *)(a2 + 16);
  v13[0] = *(float32x4_t *)a2;
  v13[1] = v9;
  return sub_1000FDA44(v11, v13);
}

unint64_t sub_1000FD9C8(uint64_t a1)
{
  unint64_t result = sub_1000FD9F0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000FD9F0()
{
  unint64_t result = qword_1004CAE30;
  if (!qword_1004CAE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CAE30);
  }
  return result;
}

BOOL sub_1000FDA44(float32x4_t *a1, float32x4_t *a2)
{
  if (a1[4].i8[0])
  {
    if (!a2[4].i8[0]) {
      return 0;
    }
  }
  else if ((a2[4].i8[0] & 1) != 0 {
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[2], a2[2]), (int8x16_t)vceqq_f32(a1[3], a2[3])), vandq_s8((int8x16_t)vceqq_f32(a1[1], a2[1]), (int8x16_t)vceqq_f32(*a1, *a2)))) & 0x80000000) == 0)
  }
  {
    return 0;
  }
  if (a1[9].i8[0])
  {
    if (!a2[9].i8[0]) {
      return 0;
    }
  }
  else if ((a2[9].i8[0] & 1) != 0 {
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[7], a2[7]), (int8x16_t)vceqq_f32(a1[8], a2[8])), vandq_s8((int8x16_t)vceqq_f32(a1[6], a2[6]), (int8x16_t)vceqq_f32(a1[5], a2[5])))) & 0x80000000) == 0)
  }
  {
    return 0;
  }
  char v2 = a2[9].i8[8];
  if ((a1[9].i8[8] & 1) == 0)
  {
    if (a1[9].f32[1] != a2[9].f32[1]) {
      char v2 = 1;
    }
    return (v2 & 1) == 0;
  }
  return (a2[9].i8[8] & 1) != 0;
}

uint64_t sub_1000FDBB8()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F81C0 = result;
  *(void *)algn_1004F81C8 = v1;
  qword_1004F81D0 = v2;
  return result;
}

uint64_t sub_1000FDC0C()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F81D8 = result;
  unk_1004F81E0 = v1;
  qword_1004F81E8 = v2;
  return result;
}

const char *sub_1000FDC60()
{
  return "logPersonHeight";
}

id sub_1000FDC6C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logPersonHeight];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FDCA0(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogPersonHeight:*a1];
}

uint64_t sub_1000FDCB4()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F81F0 = result;
  qword_1004F81F8 = v1;
  qword_1004F8200 = v2;
  return result;
}

uint64_t sub_1000FDD0C()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8208 = result;
  unk_1004F8210 = v1;
  qword_1004F8218 = v2;
  return result;
}

uint64_t sub_1000FDD5C()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8220 = result;
  *(void *)algn_1004F8228 = v1;
  qword_1004F8230 = v2;
  return result;
}

uint64_t sub_1000FDDB4()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8238 = result;
  unk_1004F8240 = v1;
  qword_1004F8248 = v2;
  return result;
}

uint64_t sub_1000FDE0C()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8250 = result;
  qword_1004F8258 = v1;
  qword_1004F8260 = v2;
  return result;
}

uint64_t sub_1000FDE64()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8268 = result;
  unk_1004F8270 = v1;
  qword_1004F8278 = v2;
  return result;
}

uint64_t sub_1000FDEB4()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8280 = result;
  *(void *)algn_1004F8288 = v1;
  qword_1004F8290 = v2;
  return result;
}

uint64_t sub_1000FDF0C()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8298 = result;
  unk_1004F82A0 = v1;
  qword_1004F82A8 = v2;
  return result;
}

uint64_t sub_1000FDF5C()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F82B0 = result;
  *(void *)algn_1004F82B8 = v1;
  qword_1004F82C0 = v2;
  return result;
}

uint64_t sub_1000FDFB4()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F82C8 = result;
  unk_1004F82D0 = v1;
  qword_1004F82D8 = v2;
  return result;
}

uint64_t sub_1000FE004()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F82E0 = result;
  qword_1004F82E8 = v1;
  qword_1004F82F0 = v2;
  return result;
}

uint64_t sub_1000FE05C()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F82F8 = result;
  unk_1004F8300 = v1;
  qword_1004F8308 = v2;
  return result;
}

uint64_t sub_1000FE0B4()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8310 = result;
  *(void *)algn_1004F8318 = v1;
  qword_1004F8320 = v2;
  return result;
}

uint64_t sub_1000FE100()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8328 = result;
  unk_1004F8330 = v1;
  qword_1004F8338 = v2;
  return result;
}

const char *sub_1000FE148()
{
  return "logLabel";
}

id sub_1000FE154@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logLabel];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE188(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogLabel:*a1];
}

uint64_t sub_1000FE19C()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8340 = result;
  *(void *)algn_1004F8348 = v1;
  qword_1004F8350 = v2;
  return result;
}

const char *sub_1000FE1E8()
{
  return "logUIAction";
}

id sub_1000FE1F4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logUIAction];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE228(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogUIAction:*a1];
}

const char *sub_1000FE23C()
{
  return "logARSession";
}

id sub_1000FE248@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logARSession];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE27C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogARSession:*a1];
}

const char *sub_1000FE290()
{
  return "logMeasureObject";
}

id sub_1000FE29C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logMeasureObject];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE2D0(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogMeasureObject:*a1];
}

uint64_t sub_1000FE2E4()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8358 = result;
  unk_1004F8360 = v1;
  qword_1004F8368 = v2;
  return result;
}

const char *sub_1000FE33C()
{
  return "logEdgeDetection";
}

id sub_1000FE348@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logEdgeDetection];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE37C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogEdgeDetection:*a1];
}

const char *sub_1000FE390()
{
  return "logWorldRectangle";
}

id sub_1000FE39C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logWorldRectangle];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE3D0(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogWorldRectangle:*a1];
}

uint64_t sub_1000FE3E4()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8370 = result;
  *(void *)algn_1004F8378 = v1;
  qword_1004F8380 = v2;
  return result;
}

uint64_t sub_1000FE438()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F8388 = result;
  unk_1004F8390 = v1;
  qword_1004F8398 = v2;
  return result;
}

const char *sub_1000FE484()
{
  return "logShaders";
}

id sub_1000FE490@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logShaders];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE4C4(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogShaders:*a1];
}

const char *sub_1000FE4D8()
{
  return "logPerf";
}

id sub_1000FE4E4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logPerf];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE518(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogPerf:*a1];
}

const char *sub_1000FE52C()
{
  return "logUIContext";
}

id sub_1000FE538@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logUIContext];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE56C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogUIContext:*a1];
}

uint64_t sub_1000FE580()
{
  swift_getKeyPath();
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F83A0 = result;
  *(void *)algn_1004F83A8 = v1;
  qword_1004F83B0 = v2;
  return result;
}

const char *sub_1000FE5D8()
{
  return "logMisc";
}

id sub_1000FE5E4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logMisc];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE618(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogMisc:*a1];
}

const char *sub_1000FE62C()
{
  return "logApplicationState";
}

id sub_1000FE638@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logApplicationState];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE66C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogApplicationState:*a1];
}

const char *sub_1000FE680()
{
  return "logARSessionRecording";
}

id sub_1000FE68C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logARSessionRecording];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE6C0(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogARSessionRecording:*a1];
}

const char *sub_1000FE6D4()
{
  return "logARSessionReplay";
}

id sub_1000FE6E0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logARSessionReplay];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE714(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogARSessionReplay:*a1];
}

const char *sub_1000FE728()
{
  return "logHapticFeedback";
}

id sub_1000FE734@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logHapticFeedback];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE768(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogHapticFeedback:*a1];
}

const char *sub_1000FE77C()
{
  return "logPlaneSelection";
}

id sub_1000FE788@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logPlaneSelection];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE7BC(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogPlaneSelection:*a1];
}

const char *sub_1000FE7D0()
{
  return "logMotionUpdates";
}

id sub_1000FE7DC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logMotionUpdates];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE810(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogMotionUpdates:*a1];
}

const char *sub_1000FE824()
{
  return "logComputerVision";
}

id sub_1000FE830@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logComputerVision];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE864(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogComputerVision:*a1];
}

uint64_t sub_1000FE878()
{
  uint64_t result = Log.init(category:enabledInDebugKey:)();
  qword_1004F83B8 = result;
  unk_1004F83C0 = v1;
  qword_1004F83C8 = v2;
  return result;
}

const char *sub_1000FE8C4()
{
  return "logCoaching";
}

id sub_1000FE8D0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logCoaching];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE904(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogCoaching:*a1];
}

const char *sub_1000FE918()
{
  return "logLightEstimation";
}

id sub_1000FE924@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logLightEstimation];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE958(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogLightEstimation:*a1];
}

const char *sub_1000FE96C()
{
  return "logEdgeSnapping";
}

id sub_1000FE978@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 logEdgeSnapping];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000FE9AC(unsigned __int8 *a1, id *a2)
{
  return [*a2 setLogEdgeSnapping:*a1];
}

id sub_1000FE9C0()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure15SessionRecorder____lazy_storage___eventRecorder;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure15SessionRecorder____lazy_storage___eventRecorder);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure15SessionRecorder____lazy_storage___eventRecorder);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)type metadata accessor for EventsRecorder()) init];
    float32x4_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1000FEA34(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v4 = &v1[OBJC_IVAR____TtC7Measure15SessionRecorder_state];
  void *v4 = 0;
  v4[1] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Measure15SessionRecorder____lazy_storage___eventRecorder] = 0;
  v1[OBJC_IVAR____TtC7Measure15SessionRecorder_recordReplayOption] = 5;
  *(void *)&v1[OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder] = 0;
  float32x4_t v5 = &v1[OBJC_IVAR____TtC7Measure15SessionRecorder_stopCompletion];
  void *v5 = 0;
  v5[1] = 0;
  id v6 = &v1[OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped];
  *id v6 = 0;
  v6[1] = 0;
  float32x4_t v7 = &v1[OBJC_IVAR____TtC7Measure15SessionRecorder_recordFilePath];
  void *v7 = 0;
  v7[1] = 0xE000000000000000;
  *(void *)&v1[OBJC_IVAR____TtC7Measure15SessionRecorder_target] = a1;
  v9.receiver = v1;
  v9.super_class = ObjectType;
  return [super init];
}

id sub_1000FEAF0(void *a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = sub_100012894((uint64_t *)&unk_1004CAEB0);
  __chkstk_darwin(v14 - 8);
  double v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_recordFilePath);
  *uint64_t v17 = a2;
  v17[1] = (uint64_t)a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = OBJC_IVAR____TtC7Measure15SessionRecorder_recordReplayOption;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_recordReplayOption) = a4;
  uint64_t v18 = (uint64_t *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped);
  swift_beginAccess();
  uint64_t v19 = *v18;
  *uint64_t v18 = a5;
  v18[1] = a6;
  sub_10003FFC4(a5);
  sub_100028914(v19);
  id v20 = a1;
  URL.init(fileURLWithPath:)();
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v21);
  uint64_t v24 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v16, 1, v21) != 1)
  {
    URL._bridgeToObjectiveC()(v23);
    uint64_t v24 = v25;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v21);
  }
  id v26 = [objc_allocWithZone((Class)ARRecordingConfiguration) initWithBaseConfiguration:v20 fileURL:v24];

  id v27 = [v26 recordingTechnique];
  if (qword_1004C2B08 != -1) {
    swift_once();
  }
  aBlock._uint64_t countAndFlagsBits = 0;
  aBlock._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  aBlock._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  aBlock._object = (void *)0x8000000100425E00;
  v28._uint64_t countAndFlagsBits = a2;
  v28._object = a3;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 39;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  Log.debug(_:isPrivate:)(aBlock, 0);
  swift_bridgeObjectRelease();
  [v27 setShouldSaveVideoInPhotosLibrary:0];
  [v27 setExpectCustomData:1];
  [v26 startRecording];
  id v30 = sub_1000FE9C0();
  *(void *)&v30[qword_1004C6F90] = v27;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  sub_100078F28();
  v30[qword_1004C6F78] = 1;

  id v31 = (void *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_state);
  id v32 = *(void **)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_state);
  *id v31 = v26;
  v31[1] = v27;
  swift_unknownObjectRetain();
  id v33 = v26;
  sub_1000C0A18(v32);
  if (*(unsigned char *)(v7 + v39) == 2)
  {
    id v34 = [objc_allocWithZone((Class)ARScreenRecording) init];
    id v35 = *(void **)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder);
    *(void *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder) = v34;
    id v36 = v34;

    [v36 setSaveInPhotosLibrary:1];
    id v43 = sub_1000FEF6C;
    uint64_t v44 = 0;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    __n128 v41 = sub_1000FEF8C;
    id v42 = &unk_10048E548;
    uint64_t v37 = _Block_copy(&aBlock);
    [v36 startRecordingWithHandler:v37];
    swift_unknownObjectRelease();
    _Block_release(v37);
  }
  else
  {
    swift_unknownObjectRelease();
  }
  return v33;
}

uint64_t sub_1000FEF6C(uint64_t a1)
{
  return sub_1000FFA88(a1, 38, 0xD000000000000023, (void *)0x8000000100425E30);
}

void sub_1000FEF8C(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1000FEFF8(void *a1)
{
  uint64_t v3 = sub_100012894((uint64_t *)&unk_1004CAEB0);
  __chkstk_darwin(v3 - 8);
  float32x4_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR____TtC7Measure15SessionRecorder_state;
  if (*(void *)(v1 + OBJC_IVAR____TtC7Measure15SessionRecorder_state))
  {
    id v7 = a1;
    id v8 = [(id)swift_unknownObjectRetain() outputFileURL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
    uint64_t v12 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) != 1)
    {
      URL._bridgeToObjectiveC()(v11);
      uint64_t v12 = v13;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v9);
    }
    id v14 = [objc_allocWithZone((Class)ARRecordingConfiguration) initWithBaseConfiguration:v7 fileURL:v12];

    id v15 = [v14 recordingTechnique];
    [v14 startRecording];
    [v15 setShouldSaveVideoInPhotosLibrary:0];
    [v15 setExpectCustomData:1];
    if (qword_1004C2B08 != -1) {
      swift_once();
    }
    v16._object = (void *)0x8000000100425EB0;
    v16._uint64_t countAndFlagsBits = 0xD000000000000019;
    Log.default(_:isPrivate:)(v16, 0);
    swift_unknownObjectRelease();
    uint64_t v17 = *(void **)v6;
    *(void *)uint64_t v6 = v14;
    *(void *)(v6 + 8) = v15;
    id v18 = v14;
    sub_1000C0A18(v17);
    return (uint64_t)v18;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_1000FF2D8(void (*a1)(void), void (*a2)(void))
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + OBJC_IVAR____TtC7Measure15SessionRecorder_state;
  id v7 = *(void **)(v2 + OBJC_IVAR____TtC7Measure15SessionRecorder_state);
  if (v7)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v9 = (void (**)(void))(v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_stopCompletion);
    uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_stopCompletion);
    void *v9 = a1;
    v9[1] = a2;
    sub_1000FFCE0(v7);
    sub_10003FFC4((uint64_t)a1);
    sub_100028914(v10);
    uint64_t v11 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v12 = (void *)swift_allocObject();
    _OWORD v12[2] = v11;
    v12[3] = v8;
    v12[4] = a1;
    v12[5] = a2;
    id v25 = sub_1000FFDA8;
    id v26 = v12;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v22 = 1107296256;
    uint64_t v23 = sub_1000FEF8C;
    uint64_t v24 = &unk_10048E520;
    uint64_t v13 = _Block_copy(&aBlock);
    sub_10003FFC4((uint64_t)a1);
    swift_unknownObjectRetain();
    swift_release();
    [v7 finishRecordingWithHandler:v13];
    _Block_release(v13);

    swift_unknownObjectRelease();
  }
  else
  {
    if (a1) {
      a1();
    }
    id v14 = (void (**)(uint64_t))(v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped);
    swift_beginAccess();
    id v15 = *v14;
    if (*v14)
    {
      uint64_t v16 = swift_retain();
      v15(v16);
      sub_100028914((uint64_t)v15);
    }
  }
  uint64_t v17 = OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder;
  id v18 = *(void **)(v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder);
  if (v18)
  {
    id v25 = sub_1000FFA68;
    id v26 = 0;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v22 = 1107296256;
    uint64_t v23 = sub_1000FEF8C;
    uint64_t v24 = &unk_10048E4A8;
    uint64_t v19 = _Block_copy(&aBlock);
    [v18 stopRecordingWithHandler:v19];
    _Block_release(v19);
    uint64_t v20 = *(void **)(v3 + v17);
    *(void *)(v3 + v17) = 0;
  }
}

void sub_1000FF550(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v15 = (char *)v42 - v14;
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    v42[1] = a5;
    id v43 = a4;
    uint64_t v44 = Strong;
    uint64_t v17 = sub_1000FE9C0();
    if (*(void *)&v17[qword_1004C6F90])
    {
      id v18 = [(id)swift_unknownObjectRetain() outputFileURL];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = URL.path.getter();
      uint64_t v21 = v20;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      uint64_t v45 = v19;
      id v46 = v21;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = 1735355438;
      v22._object = (void *)0xE400000000000000;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      sub_10007906C(v45, v46);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    v17[qword_1004C6F78] = 0;

    id v23 = [a3 outputFileURL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = URL.path.getter();
    id v26 = v25;
    id v27 = *(void (**)(char *, uint64_t))(v10 + 8);
    v27(v15, v9);
    uint64_t v45 = v24;
    id v46 = v26;
    swift_bridgeObjectRetain();
    v28._uint64_t countAndFlagsBits = 1852011310;
    v28._object = (void *)0xE400000000000000;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    if (qword_1004C29D8 != -1) {
      swift_once();
    }
    if (qword_1004F7FE0)
    {
      id v29 = *(id *)(qword_1004F7FE0 + 64);
      sub_1001A7568(v13);

      if (a1)
      {
        swift_getErrorValue();
        swift_errorRetain();
        uint64_t v30 = Error.localizedDescription.getter();
        sub_10005C684(v30, v31, 0xD000000000000012, 0x8000000100425DB0);
        swift_bridgeObjectRelease();
        swift_errorRelease();
      }
      else
      {
        if ([a3 shouldSaveVideoInPhotosLibrary])
        {
          uint64_t v45 = 0;
          id v46 = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(45);
          swift_bridgeObjectRelease();
          uint64_t v45 = 0xD00000000000002BLL;
          id v46 = (void *)0x8000000100425D80;
        }
        else
        {
          uint64_t v45 = 0;
          id v46 = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease();
          uint64_t v45 = 0x6976206465766153;
          id v46 = (void *)0xEF206F74206F6564;
        }
        id v32 = [a3 outputFileURL];
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v33 = URL.path.getter();
        id v35 = v34;
        v27(v15, v9);
        v36._uint64_t countAndFlagsBits = v33;
        v36._object = v35;
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        sub_10005C684(v45, (uint64_t)v46, 0xD000000000000012, 0x8000000100425D60);
        uint64_t v37 = swift_bridgeObjectRelease();
        if (v43) {
          v43(v37);
        }
        id v38 = v44;
        uint64_t v39 = &v44[OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped];
        swift_beginAccess();
        id v40 = *(void (**)(uint64_t))v39;
        if (!*(void *)v39)
        {
          v27(v13, v9);
          swift_endAccess();

          return;
        }
        swift_endAccess();
        uint64_t v41 = swift_retain();
        v40(v41);
        sub_100028914((uint64_t)v40);
      }
      v27(v13, v9);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000FFA68(uint64_t a1)
{
  return sub_1000FFA88(a1, 37, 0xD000000000000022, (void *)0x8000000100425DD0);
}

uint64_t sub_1000FFA88(uint64_t result, Swift::Int a2, uint64_t a3, void *a4)
{
  if (result)
  {
    swift_errorRetain();
    if (qword_1004C2B08 != -1) {
      swift_once();
    }
    _StringGuts.grow(_:)(a2);
    v7._uint64_t countAndFlagsBits = a3;
    v7._object = a4;
    String.append(_:)(v7);
    sub_100012894(&qword_1004C7128);
    _print_unlocked<A, B>(_:_:)();
    v8._uint64_t countAndFlagsBits = 39;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    Log.error(_:isPrivate:)(v9, 0);
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  return result;
}

uint64_t type metadata accessor for SessionRecorder()
{
  return self;
}

ValueMetadata *type metadata accessor for SessionRecorder.State()
{
  return &type metadata for SessionRecorder.State;
}

uint64_t sub_1000FFCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FFCD8()
{
  return swift_release();
}

void *sub_1000FFCE0(void *result)
{
  if (result)
  {
    id v1 = result;
    return (void *)swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_1000FFD20()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FFD58()
{
  swift_release();
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000FFDA8(uint64_t a1)
{
  sub_1000FF550(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

void *sub_1000FFDC4@<X0>(void *a1@<X8>)
{
  memcpy(__dst, (const void *)(v1 + 32), sizeof(__dst));
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = __dst[0];
  memcpy(v13, &__dst[3], sizeof(v13));
  sub_100053000((uint64_t)__dst);
  if (v3)
  {
    id v5 = v3;
    [v5 timestamp];
    uint64_t v7 = v6;
    sub_100012894(&qword_1004C6288);
    uint64_t v8 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    id v9 = v5;
    uint64_t v10 = NSObject.hashValue.getter();

    *(void *)(v8 + 24) = v10;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  swift_release();
  memcpy(&__src[8], &v13[8], 0x1E0uLL);
  *a1 = v4;
  a1[1] = v7;
  a1[2] = v8;
  return memcpy(a1 + 3, __src, 0x1E8uLL);
}

uint64_t sub_1000FFF10()
{
  memcpy(v2, (const void *)(v0 + 32), sizeof(v2));
  sub_100016F7C((uint64_t)v2);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RetainedFrame()
{
  return self;
}

char *sub_1000FFF88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = qword_1004CAF70;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = sub_100012894((uint64_t *)&unk_1004C4710);
  uint64_t v14 = qword_1004C2E30;
  id v15 = v8;
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1004F8630;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 272);
  swift_retain();
  *(void *)&v15[v11] = v17(KeyPath, v16);
  uint64_t v18 = qword_1004CAF78;
  sub_100012894(&qword_1004CB2A8);
  swift_getKeyPath();
  *(void *)&v15[v18] = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v19 = qword_1004CAF80;
  sub_100012894(&qword_1004CB2B0);
  swift_getKeyPath();
  *(void *)&v15[v19] = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v20 = qword_1004CAF88;
  sub_100012894(&qword_1004CB2B8);
  swift_getKeyPath();
  *(void *)&v15[v20] = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v21 = qword_1004CAF90;
  uint64_t v22 = swift_getKeyPath();
  uint64_t v23 = sub_100012894(&qword_1004CB2C0);
  uint64_t v24 = qword_1004F8630;
  id v25 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 272);
  swift_retain();
  *(void *)&v15[v21] = v25(v22, v24);
  v15[qword_1004CAFC8] = 0;
  *(void *)&v15[qword_1004CAFD8] = 0;
  id v26 = &v15[qword_1004CAFE0];
  uint64_t v46 = 0;
  char v47 = 1;
  sub_100012894(&qword_1004CB2C8);
  swift_allocObject();
  uint64_t v27 = Synchronized.init(wrappedValue:)();
  *(void *)id v26 = 0;
  *((void *)v26 + 1) = v27;
  v26[16] = 0;
  *(void *)&v15[qword_1004CAFC0] = a1;
  *(void *)&v15[qword_1004CAFB8] = a2;
  Swift::String v28 = &v15[qword_1004CAF98];
  *Swift::String v28 = a3;
  v28[1] = a4;
  *(void *)&v15[qword_1004CAFA8] = a5;
  *(void *)&v15[qword_1004CAFB0] = a6;
  *(void *)&v15[qword_1004CAFA0] = a7;
  id v29 = objc_allocWithZone((Class)type metadata accessor for MainLoop.InternalObserver());
  swift_retain();
  id v40 = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v30 = [v29 init];
  *(void *)&v15[qword_1004CAFD0] = v30;

  v45.receiver = v15;
  v45.super_class = ObjectType;
  uint64_t v31 = (char *)[super init];
  id v32 = *(void **)&v31[qword_1004CAFD0];
  swift_unknownObjectWeakAssign();
  uint64_t v33 = *(void **)(a1 + 16);
  id v34 = v31;
  [v33 setDelegate:v34];
  id v35 = v33;
  id v36 = v32;
  [v35 _addObserver:v36];

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v34;
}

void sub_100100328()
{
  id v1 = objc_allocWithZone(v0);
  sub_100100348();
}

void sub_100100348()
{
  id v1 = v0;
  swift_getObjectType();
  uint64_t v2 = qword_1004CAF70;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = sub_100012894((uint64_t *)&unk_1004C4710);
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1004F8630;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 272);
  swift_retain();
  *(void *)&v1[v2] = v6(KeyPath, v5);
  uint64_t v7 = qword_1004CAF78;
  sub_100012894(&qword_1004CB2A8);
  swift_getKeyPath();
  *(void *)&v1[v7] = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v8 = qword_1004CAF80;
  sub_100012894(&qword_1004CB2B0);
  swift_getKeyPath();
  *(void *)&v1[v8] = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v9 = qword_1004CAF88;
  sub_100012894(&qword_1004CB2B8);
  swift_getKeyPath();
  *(void *)&v1[v9] = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v10 = qword_1004CAF90;
  uint64_t v11 = swift_getKeyPath();
  uint64_t v12 = sub_100012894(&qword_1004CB2C0);
  uint64_t v13 = qword_1004F8630;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 272);
  swift_retain();
  *(void *)&v1[v10] = v14(v11, v13);
  v1[qword_1004CAFC8] = 0;
  *(void *)&v1[qword_1004CAFD8] = 0;
  id v15 = &v1[qword_1004CAFE0];
  sub_100012894(&qword_1004CB2C8);
  swift_allocObject();
  uint64_t v16 = Synchronized.init(wrappedValue:)();
  *(void *)id v15 = 0;
  *((void *)v15 + 1) = v16;
  v15[16] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100100598()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    uint64_t v2 = (char *)swift_unknownObjectWeakLoadStrong();

    if (v2)
    {
      uint64_t v3 = *(uint64_t (**)(unsigned char *))(**(void **)&v2[qword_1004CAF80] + 400);
      swift_retain();
      uint64_t v4 = (void (*)(unsigned char *, void))v3(v7);
      unint64_t v6 = *v5;
      unint64_t *v5 = 3;
      sub_100103988(v6);
      v4(v7, 0);

      swift_release();
    }
  }
}

void sub_10010068C()
{
  uint64_t v1 = v0;
  if (qword_1004C2B68 != -1) {
    swift_once();
  }
  v2._uint64_t countAndFlagsBits = 0x676E697472617453;
  v2._object = (void *)0xE800000000000000;
  Log.default(_:isPrivate:)(v2, 0);
  uint64_t v3 = v0 + qword_1004CAFE0;
  uint64_t v11 = 0;
  LOBYTE(v12) = 1;
  swift_retain();
  Synchronized.wrappedValue.setter();
  swift_release();
  *(unsigned char *)(v3 + 16) = 0;
  *(CFTimeInterval *)uint64_t v3 = CACurrentMediaTime();
  uint64_t v4 = qword_1004CAFD8;
  uint64_t v5 = *(void **)(v0 + qword_1004CAFD8);
  if (v5) {
    [v5 invalidate:v11, v12];
  }
  unint64_t v6 = self;
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  id v15 = sub_1001039D0;
  uint64_t v16 = v7;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_100058CEC;
  uint64_t v14 = &unk_10048E670;
  uint64_t v8 = _Block_copy(&v11);
  swift_release();
  id v9 = [v6 scheduledTimerWithTimeInterval:1 repeats:v8 block:1.0];
  _Block_release(v8);
  uint64_t v10 = *(void **)(v1 + v4);
  *(void *)(v1 + v4) = v9;
}

id sub_100100A70()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MainLoop.InternalObserver();
  return [super dealloc];
}

void sub_100100AF4()
{
}

uint64_t sub_100100B24()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();

  return swift_release();
}

uint64_t sub_100100C2C(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for MainLoop()
{
  uint64_t result = qword_1004CB070;
  if (!qword_1004CB070) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100100D8C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100100E20()
{
  return type metadata accessor for MainLoop();
}

uint64_t type metadata accessor for MainLoop.InternalObserver()
{
  return self;
}

uint64_t sub_100100FAC(void *a1)
{
  void (*v30)(Swift::String *__return_ptr, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void *__return_ptr, uint64_t);
  uint64_t v42;
  char v43;
  void v44[68];
  Swift::String v45;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ARCamera.TrackingState.Reason();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ARCamera.TrackingState();
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v44 - v12;
  ARCamera.trackingState.getter();
  uint64_t v14 = qword_1004CAFC8;
  *(unsigned char *)(v1 + qword_1004CAFC8) = 0;
  ARCamera.trackingState.getter();
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 2, v4);
  if (!v15)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    if (qword_1004C2B18 != -1) {
      swift_once();
    }
    v45._uint64_t countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v18._uint64_t countAndFlagsBits = 0xD000000000000021;
    v18._object = (void *)0x8000000100426100;
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)();
    Log.error(_:isPrivate:)(v45, 0);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    goto LABEL_15;
  }
  if (v15 != 1)
  {
    id v19 = [a1 currentFrame];
    if (!v19 || (uint64_t v20 = v19, v21 = ARFrame.isVIOTrackingUnacceptable()(), v20, v21))
    {
      sub_100049284((uint64_t)v13);
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v13, enum case for ARCamera.TrackingState.Reason.insufficientFeatures(_:), v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v13, 0, 2, v4);
      *(unsigned char *)(v2 + v14) = 1;
      if (qword_1004C2B18 != -1) {
        swift_once();
      }
      unint64_t v16 = 0xD00000000000003ALL;
      uint64_t v17 = "Tracking State: limited, reason: VIO tracking unacceptable";
      goto LABEL_14;
    }
    if (qword_1004C2B18 != -1) {
      swift_once();
    }
    v29._object = (void *)0x8000000100426170;
    v29._uint64_t countAndFlagsBits = 0xD000000000000016;
    Log.default(_:isPrivate:)(v29, 0);
    *(unsigned char *)(*(void *)(v2 + qword_1004CAFC0) + 24) = 0;
    type metadata accessor for WorldAnchor();
    static WorldAnchor.resetPlanesConfidence()();
    id v30 = *(void (**)(Swift::String *__return_ptr, uint64_t))(**(void **)(v2 + qword_1004CAF70) + 144);
    uint64_t v31 = swift_retain();
    v30(&v45, v31);
    swift_release();
    if ((v45._countAndFlagsBits & 0x1000000) != 0)
    {
LABEL_34:
      uint64_t v39 = *(void *)(v2 + qword_1004CAFA8);
      LOBYTE(v45._countAndFlagsBits) = 1;
      swift_retain();
      Synchronized.wrappedValue.setter();
      swift_release();
      id v40 = *(void *)SnapType.all.unsafeMutableAddressor();
      uint64_t v41 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v2 + qword_1004CAF78) + 144);
      id v42 = swift_retain();
      v41(v44, v42);
      swift_release();
      memcpy(&v45, v44, 0x200uLL);
      if (*(unsigned char *)(v39 + 544) == 3)
      {
        sub_1001160F0(v40, &v45);
        LOBYTE(v44[0]) = v43 & 1;
        swift_retain();
        Synchronized.wrappedValue.setter();
        swift_release();
      }
      sub_100016F7C((uint64_t)&v45);
      goto LABEL_15;
    }
    id v32 = *(void *)(v2 + qword_1004CAFA0);
    swift_beginAccess();
    uint64_t v33 = *(void *)(v32 + 64);
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      id v34 = result;
      if (result) {
        goto LABEL_23;
      }
    }
    else
    {
      id v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v34)
      {
LABEL_23:
        if (v34 < 1)
        {
          __break(1u);
          return result;
        }
        for (id i = 0; i != v34; ++i)
        {
          if ((v33 & 0xC000000000000001) != 0)
          {
            id v36 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            id v36 = *(void *)(v33 + 8 * i + 32);
            swift_retain();
          }
          if (swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v37 = *(void *)(v36 + 24);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(void, uint64_t, uint64_t))(v37 + 120))(0, ObjectType, v37);
            swift_release();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  if (qword_1004C2B18 != -1) {
    swift_once();
  }
  unint64_t v16 = 0xD00000000000001CLL;
  uint64_t v17 = "Tracking State: notAvailable";
LABEL_14:
  unint64_t v22 = (unint64_t)(v17 - 32) | 0x8000000000000000;
  Log.error(_:isPrivate:)(*(Swift::String *)&v16, 0);
LABEL_15:
  if (qword_1004C2C10 != -1) {
    swift_once();
  }
  sub_10014264C((uint64_t)v13);
  uint64_t v23 = *(uint64_t (**)(void *))(**(void **)(v2 + qword_1004CAF80) + 400);
  swift_retain();
  uint64_t v24 = (void (*)(void *, void))v23(v44);
  uint64_t v26 = v25;
  uint64_t v27 = type metadata accessor for SessionState();
  sub_100103924((uint64_t)v13, v26 + *(int *)(v27 + 20));
  v24(v44, 0);
  swift_release();
  return sub_100049284((uint64_t)v13);
}

id sub_10010177C(void *a1, void *a2)
{
  void (*v14)(Swift::String *__return_ptr, uint64_t);
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  void (*v18)(Swift::String *);
  ARFrame v19;
  uint64_t v20;
  void (*v21)(Swift::String *__return_ptr, uint64_t);
  uint64_t v22;
  uint64_t countAndFlagsBits;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void (*v30)(Swift::String *);
  uint64_t v31;
  void (*v32)(unsigned char *);
  void *Strong;
  id v34;
  double v35;
  unsigned char v36[512];
  unsigned char __src[480];
  void v38[65];
  Swift::String _[33];

  uint64_t v3 = v2;
  ariadne_trace(_:_:_:_:_:)();
  if (qword_1004C2AF8 != -1) {
    swift_once();
  }
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  _[0]._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  _[0]._object = (void *)0x8000000100426090;
  id v6 = [a2 anchors];
  sub_10001C99C(0, &qword_1004CB290);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v38[0] = v8;
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  Log.debug(_:isPrivate:)(_[0], 0);
  swift_bridgeObjectRelease();
  id result = (id)sub_100101D78(a2);
  if (qword_1004C29D8 != -1) {
    id result = (id)swift_once();
  }
  if (!qword_1004F7FE0) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)(qword_1004F7FE0 + 32);
  if (v11)
  {
    swift_retain();
    sub_10005927C(a2);
  }
  if (*(unsigned char *)(v3 + qword_1004CAFC8) == 1 && !ARFrame.isVIOTrackingUnacceptable()())
  {
    id v12 = [a2 camera];
    sub_100100FAC(a1);
  }
  uint64_t v13 = qword_1004CAF88;
  uint64_t v14 = *(void (**)(Swift::String *__return_ptr, uint64_t))(**(void **)(v3 + qword_1004CAF88) + 144);
  int v15 = swift_retain();
  v14(_, v15);
  swift_release();
  if (!LOBYTE(_[0]._countAndFlagsBits))
  {
    v16._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v16._object = (void *)0x80000001004260B0;
    Log.default(_:isPrivate:)(v16, 0);
    uint64_t v17 = *(void *)(v3 + v13);
    LOBYTE(_[0]._countAndFlagsBits) = 1;
    Swift::String v18 = *(void (**)(Swift::String *))(*(void *)v17 + 392);
    swift_retain();
    v18(_);
    swift_release();
  }
  v19.super.Class isa = (Class)a2;
  sub_100113AC8(v19);
  uint64_t v20 = qword_1004CAF78;
  Swift::Bool v21 = *(void (**)(Swift::String *__return_ptr, uint64_t))(**(void **)(v3 + qword_1004CAF78) + 144);
  unint64_t v22 = swift_retain();
  v21(_, v22);
  swift_release();
  uint64_t countAndFlagsBits = _[0]._countAndFlagsBits;
  uint64_t v24 = a2;
  [v24 timestamp];
  uint64_t v26 = v25;
  sub_100012894(&qword_1004C6288);
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  Swift::String v28 = v24;
  Swift::String v29 = NSObject.hashValue.getter();

  *(void *)(v27 + 24) = v29;
  swift_release();
  id result = [v28 camera];
  if (qword_1004C3238 != -1) {
    id result = (id)swift_once();
  }
  if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
    goto LABEL_28;
  }
  SIMD2<>.init(_:)();
  effectiveStatusBarOrientation.unsafeMutableAddressor();
  id result = (id)ComputedCameraProperties.init(camera:viewportSize:orientation:)();
  if (countAndFlagsBits == -1)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  id v30 = *(void (**)(Swift::String *))(v3 + qword_1004CAF98);
  v38[0] = countAndFlagsBits + 1;
  v38[1] = v26;
  v38[2] = v27;
  memcpy(&v38[4], __src, 0x1E0uLL);
  memcpy(_, v38, 0x200uLL);
  sub_100053000((uint64_t)v38);
  v30(_);
  swift_release();
  uint64_t v31 = *(void *)(v3 + v20);
  memcpy(v36, _, sizeof(v36));
  id v32 = *(void (**)(unsigned char *))(*(void *)v31 + 392);
  swift_retain();
  swift_retain();
  v32(v36);
  swift_release();
  swift_release();
  if (v11)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v34 = Strong;

      if (v34 == v28)
      {
        id v35 = CACurrentMediaTime();
        sub_100058D54(v35);
      }
    }
    swift_release();
  }
  return (id)ariadne_trace(_:_:_:_:_:)();
}

uint64_t sub_100101D78(void *a1)
{
  uint64_t v3 = v1 + qword_1004CAFE0;
  if (*(unsigned char *)(v1 + qword_1004CAFE0 + 16) == 1)
  {
    swift_retain();
    Synchronized.wrappedValue.getter();
    swift_release();
    [a1 timestamp];
    if (qword_1004C2B68 != -1) {
      swift_once();
    }
    _StringGuts.grow(_:)(53);
    v4._object = (void *)0x8000000100426190;
    v4._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v4);
    id v5 = [a1 description];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    v9._uint64_t countAndFlagsBits = v6;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 0x7420686369687720;
    v10._object = (void *)0xEC000000206B6F6FLL;
    String.append(_:)(v10);
    Double.write<A>(to:)();
    v11._uint64_t countAndFlagsBits = 0x73646E6F63657320;
    v11._object = (void *)0xE800000000000000;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    Log.error(_:isPrivate:)(v12, 0);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v3 + 16) = 0;
    swift_retain();
    [a1 timestamp];
  }
  else
  {
    swift_retain();
    [a1 timestamp:v14];
  }
  Synchronized.wrappedValue.setter();
  return swift_release();
}

uint64_t destroy for MainLoop.ARFrameWatchdogStats()
{
  return swift_release();
}

uint64_t _s7Measure8MainLoopC20ARFrameWatchdogStatsVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MainLoop.ARFrameWatchdogStats(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for MainLoop.ARFrameWatchdogStats(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MainLoop.ARFrameWatchdogStats(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MainLoop.ARFrameWatchdogStats(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MainLoop.ARFrameWatchdogStats()
{
  return &type metadata for MainLoop.ARFrameWatchdogStats;
}

void sub_100102378()
{
  uint64_t v1 = v0 + qword_1004CAFE0;
  if ((*(unsigned char *)(v0 + qword_1004CAFE0 + 16) & 1) == 0)
  {
    swift_retain();
    Synchronized.wrappedValue.getter();
    swift_release();
    if (v21)
    {
      if (qword_1004C2B68 != -1) {
        swift_once();
      }
      _StringGuts.grow(_:)(88);
      v2._uint64_t countAndFlagsBits = 0xD000000000000029;
      v2._object = (void *)0x80000001004261D0;
      String.append(_:)(v2);
      id v3 = *(id *)(*(void *)(v0 + qword_1004CAFC0) + 16);
      id v4 = [v3 description];
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v7 = v6;

      v8._uint64_t countAndFlagsBits = v5;
      v8._object = v7;
      String.append(_:)(v8);

      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 0x20726574666120;
      v9._object = (void *)0xE700000000000000;
      String.append(_:)(v9);
    }
    else
    {
      if (CACurrentMediaTime() - v20 <= 1.0) {
        return;
      }
      if (qword_1004C2B68 != -1) {
        swift_once();
      }
      _StringGuts.grow(_:)(84);
      v10._uint64_t countAndFlagsBits = 0xD000000000000025;
      v10._object = (void *)0x8000000100426230;
      String.append(_:)(v10);
      id v11 = *(id *)(*(void *)(v0 + qword_1004CAFC0) + 16);
      id v12 = [v11 description];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v15 = v14;

      v16._uint64_t countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);

      swift_bridgeObjectRelease();
      v17._uint64_t countAndFlagsBits = 0x20726574666120;
      v17._object = (void *)0xE700000000000000;
      String.append(_:)(v17);
    }
    Double.write<A>(to:)();
    v18._object = (void *)0x8000000100426200;
    v18._uint64_t countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    Log.error(_:isPrivate:)(v19, 0);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v1 + 16) = 1;
  }
}

void sub_100102684(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 2)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      return;
    }
    id v12 = (char *)Strong;
    if (qword_1004C2B68 != -1) {
      swift_once();
    }
    v13._uint64_t countAndFlagsBits = 0x676E6970706F7453;
    v13._object = (void *)0xE800000000000000;
    Log.default(_:isPrivate:)(v13, 0);
    uint64_t v14 = qword_1004CAFD8;
    int v15 = *(void **)&v12[qword_1004CAFD8];
    if (v15)
    {
      [v15 invalidate];
      uint64_t v27 = *(void *)&v12[v14];
    }
    else
    {
      uint64_t v27 = 0;
    }
    *(void *)&v12[v14] = 0;

    goto LABEL_18;
  }
  if (a1 == 1)
  {
    uint64_t v10 = swift_unknownObjectWeakLoadStrong();
    if (!v10) {
      return;
    }
    uint64_t v27 = v10;
    sub_10010068C();
LABEL_18:
    uint64_t v25 = (void *)v27;

    return;
  }
  if (a1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
    uint64_t v27 = static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_100103A70;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100049AB4;
    aBlock[3] = &unk_10048E6C0;
    Swift::String v17 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100103A78((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_100039BEC();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    Swift::String v18 = (void *)v27;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v19 = swift_unknownObjectWeakLoadStrong();
    if (v19)
    {
      double v20 = (char *)v19;
      if (qword_1004C2B68 != -1) {
        swift_once();
      }
      v21._uint64_t countAndFlagsBits = 0x676E6970706F7453;
      v21._object = (void *)0xE800000000000000;
      Log.default(_:isPrivate:)(v21, 0);
      uint64_t v22 = qword_1004CAFD8;
      uint64_t v23 = *(void **)&v20[qword_1004CAFD8];
      if (v23)
      {
        [v23 invalidate];
        uint64_t v24 = *(void **)&v20[v22];
      }
      else
      {
        uint64_t v24 = 0;
      }
      *(void *)&v20[v22] = 0;
    }
  }
}

void sub_100102B48(unint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(Swift::String *))(**(void **)(v1 + qword_1004CAF80) + 400);
  swift_retain();
  uint64_t v4 = (void (*)(Swift::String *, void))v3(v13);
  unint64_t v6 = *v5;
  unint64_t *v5 = a1;
  swift_errorRetain();
  sub_100103988(v6);
  v4(v13, 0);
  swift_release();
  if (qword_1004C2AF8 != -1) {
    swift_once();
  }
  v13[0]._uint64_t countAndFlagsBits = 0;
  v13[0]._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v13[0]._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v13[0]._object = (void *)0x8000000100426280;
  swift_getErrorValue();
  v7._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  Log.error(_:isPrivate:)(v13[0], 0);
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)_convertErrorToNSError(_:)();
  id v12 = v8;
  type metadata accessor for ARError(0);
  sub_100103A78(&qword_1004C38A0, type metadata accessor for ARError);
  _BridgedStoredNSError.code.getter();
  uint64_t v9 = *(void *)(v1 + qword_1004CAF88);
  if (v13[0]._countAndFlagsBits == 102) {
    char v10 = 4;
  }
  else {
    char v10 = 2;
  }
  LOBYTE(v12) = v10;
  id v11 = *(void (**)(void **))(*(void *)v9 + 392);
  swift_retain();
  v11(&v12);
  swift_release();
  sub_10010068C();
}

void sub_100102DB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void *))(**(void **)(v0 + qword_1004CAF80) + 400);
  swift_retain();
  uint64_t v3 = (void (*)(void *, void))v2(v13);
  unint64_t v5 = *v4;
  unint64_t *v4 = 2;
  sub_100103988(v5);
  v3(v13, 0);
  swift_release();
  if (qword_1004C2AF8 != -1) {
    swift_once();
  }
  v6._object = (void *)0x8000000100426260;
  v6._uint64_t countAndFlagsBits = 0xD000000000000018;
  Log.error(_:isPrivate:)(v6, 0);
  uint64_t v7 = *(void *)(v0 + qword_1004CAF88);
  LOBYTE(v13[0]) = 0;
  uint64_t v8 = *(void (**)(void *))(*(void *)v7 + 392);
  swift_retain();
  v8(v13);
  swift_release();
  if (qword_1004C2B68 != -1) {
    swift_once();
  }
  v9._uint64_t countAndFlagsBits = 0x676E6970706F7453;
  v9._object = (void *)0xE800000000000000;
  Log.default(_:isPrivate:)(v9, 0);
  uint64_t v10 = qword_1004CAFD8;
  id v11 = *(void **)(v1 + qword_1004CAFD8);
  if (v11)
  {
    [v11 invalidate:v13[0]];
    id v12 = *(void **)(v1 + v10);
  }
  else
  {
    id v12 = 0;
  }
  *(void *)(v1 + v10) = 0;
}

void sub_100102FA8()
{
  uint64_t v1 = *(uint64_t (**)(unsigned char *))(**(void **)(v0 + qword_1004CAF80) + 400);
  swift_retain();
  uint64_t v2 = (void (*)(unsigned char *, void))v1(v6);
  unint64_t v4 = *v3;
  unint64_t *v3 = 1;
  sub_100103988(v4);
  v2(v6, 0);
  swift_release();
  if (qword_1004C2AF8 != -1) {
    swift_once();
  }
  v5._object = (void *)0x80000001004261B0;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  Log.default(_:isPrivate:)(v5, 0);
  sub_10010068C();
}

uint64_t sub_1001030C0(void *a1, Swift::OpaquePointer a2)
{
  ariadne_trace(_:_:_:_:_:)();
  id v4 = [a1 currentFrame];
  if (v4)
  {
    Swift::String v5 = v4;
    id v6 = [v4 worldTrackingState];
    if (v6)
    {
      uint64_t v7 = v6;
      if (([v6 majorRelocalization] & 1) != 0
        || [v7 minorRelocalization])
      {
        type metadata accessor for WorldAnchor();
        static WorldAnchor.resetPlanesConfidence()();
        uint64_t v8 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        Swift::String v5 = v7;
      }
    }
  }
  MeasureCore.shared.unsafeMutableAddressor();
  swift_retain();
  MeasureCore.didUpdate(anchors:)(a2);
  swift_release();
  id v9 = [a1 currentFrame];
  uint64_t v10 = v9;
  if (v9)
  {
    id v11 = [v9 camera];

    [v11 transform];
  }
  type metadata accessor for WorldAnchor();
  static WorldAnchor.didUpdate(anchors:camera:forceUpdate:)();

  return ariadne_trace(_:_:_:_:_:)();
}

uint64_t sub_1001032B0(unint64_t a1)
{
  uint64_t v38 = type metadata accessor for ARPlaneAnchor.Classification();
  uint64_t v2 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MeasureCore.shared.unsafeMutableAddressor();
  swift_retain();
  MeasureCore.didAdd(anchors:)((Swift::OpaquePointer)a1);
  swift_release();
  type metadata accessor for WorldAnchor();
  static WorldAnchor.didAdd(anchors:)();
  if (qword_1004C2C10 != -1) {
    swift_once();
  }
  sub_100142924(a1);
  unint64_t v39 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_21;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    return result;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      self;
      if (swift_dynamicCastObjCClass())
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    for (uint64_t j = 0; j != v4; ++j)
    {
      uint64_t v8 = *(void **)(a1 + 8 * j + 32);
      self;
      if (swift_dynamicCastObjCClass())
      {
        id v9 = v8;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
LABEL_21:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v10 = v39;
  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_23:
      if (v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v33 = qword_1004CAF90;
        unint64_t v36 = v10 & 0xC000000000000001;
        Swift::String v13 = (uint64_t (**)(char *, uint64_t))(v2 + 88);
        int v14 = enum case for ARPlaneAnchor.Classification.floor(_:);
        int v32 = enum case for ARPlaneAnchor.Classification.ceiling(_:);
        uint64_t v31 = (void (**)(char *, uint64_t))(v2 + 8);
        unint64_t v34 = v10;
        while (1)
        {
          if (v36) {
            id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v21 = *(id *)(v10 + 8 * v12 + 32);
          }
          uint64_t v22 = v21;
          uint64_t v23 = v37;
          ARPlaneAnchor.classification.getter();
          int v24 = (*v13)(v23, v38);
          if (v24 == v14)
          {
            int v15 = *(uint64_t (**)(uint64_t))(**(void **)(v35 + v33) + 200);
            uint64_t v16 = swift_retain();
            uint64_t v17 = v15(v16);
            swift_release();
            uint64_t v18 = swift_allocObject();
            *(void *)(v18 + 16) = v22;
            uint64_t v19 = *(void (**)(id (*)(uint64_t), uint64_t))(*(void *)v17 + 280);
            id v20 = v22;
            v19(sub_1001038E8, v18);
            unint64_t v10 = v34;
            swift_release();
          }
          else
          {
            if (v24 != v32)
            {

              (*v31)(v37, v38);
              goto LABEL_27;
            }
            uint64_t v25 = *(uint64_t (**)(uint64_t))(**(void **)(v35 + v33) + 200);
            uint64_t v26 = swift_retain();
            uint64_t v27 = v25(v26);
            swift_release();
            uint64_t v28 = swift_allocObject();
            *(void *)(v28 + 16) = v22;
            Swift::String v29 = *(void (**)(id (*)(uint64_t), uint64_t))(*(void *)v27 + 280);
            id v20 = v22;
            v29(sub_1001038AC, v28);
            unint64_t v10 = v34;
            swift_release();
          }
          swift_release();

LABEL_27:
          if (v11 == ++v12) {
            return swift_bridgeObjectRelease();
          }
        }
      }
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11) {
      goto LABEL_23;
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100103874()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1001038AC(uint64_t a1)
{
  id result = [*(id *)(v1 + 16) transform];
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v7;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

id sub_1001038E8(uint64_t a1)
{
  id result = [*(id *)(v1 + 16) transform];
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_100103924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ARCamera.TrackingState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_100103988(unint64_t result)
{
  if (result >= 4) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100103998()
{
  swift_unknownObjectUnownedDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001039D0()
{
  id Strong = (id)swift_unknownObjectUnownedLoadStrong();
  sub_100102378();
}

uint64_t sub_100103A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100103A2C()
{
  return swift_release();
}

uint64_t sub_100103A38()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100103A70()
{
}

uint64_t sub_100103A78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100103ADC(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  long long v2 = *(_OWORD *)(a1 + 112);
  void v7[6] = *(_OWORD *)(a1 + 96);
  v7[7] = v2;
  v7[8] = *(_OWORD *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 144);
  long long v3 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  v7[4] = *(_OWORD *)(a1 + 64);
  v7[5] = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  return a2(v7);
}

uint64_t sub_100103B40()
{
  id v9 = sub_100105E04;
  uint64_t v10 = v0;
  swift_retain();
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 96) + 200);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  long long v7 = sub_100105E3C;
  uint64_t v8 = v0;
  long long v4 = *(void (**)(uint64_t (*)(uint64_t), unsigned char *))(*(void *)v3 + 296);
  swift_retain();
  v4(sub_100105E40, v6);
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  return swift_release();
}

void sub_100103CDC(uint64_t a1)
{
  void (*v26)(void *__return_ptr, uint64_t);
  uint64_t v27;
  void (*v28)(void *__return_ptr, uint64_t);
  uint64_t v29;
  float32x2_t v30;
  void (*v31)(void *__return_ptr, uint64_t);
  uint64_t v32;
  void (*v33)(void *__return_ptr, uint64_t);
  uint64_t v34;
  float32x2_t v35;
  float32x2_t v36;
  void *v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  void *v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  unsigned __int8 v45;
  void *v46;
  __n128 v47;
  void (*v48)(__n128, __n128);
  void *v49;
  id v50;
  float32x2_t v51;
  id v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x2_t v55;
  __int32 v56;
  int8x16_t v57;
  __n128 v58;
  __n128 v59;
  void __src[64];
  _OWORD __dst[32];
  void v62[64];
  _OWORD v63[32];
  void v64[64];
  id v65[18];
  id v66[18];
  uint64_t v67[2];
  int8x16_t v68;
  __n128 v69;
  char v70;

  uint64_t v2 = v1;
  sub_100016FEC(a1, (uint64_t)v66, (uint64_t *)&unk_1004CEA30);
  sub_100016FEC((uint64_t)v66, (uint64_t)v67, (uint64_t *)&unk_1004CEA30);
  if (sub_100016B28(v67) != 1)
  {
    if (v70)
    {
      sub_100016FEC((uint64_t)v66, (uint64_t)v64, (uint64_t *)&unk_1004CEA30);
      long long v6 = (void *)v64[0];
      long long v7 = *(void **)(v1 + 120);
    }
    else
    {
      unsigned __int32 v8 = v69.n128_u32[0];
      id v9 = (void *)v67[0];
      __n128 v56 = v68.i32[1];
      __int32 v10 = v68.i32[0];
      __n128 v57 = v68;
      int64_t v59 = v69;
      uint64_t v11 = *(void (**)(void))((swift_isaMask & *(void *)v67[0]) + 0x2A0);
      sub_100016FEC((uint64_t)v66, (uint64_t)v65, (uint64_t *)&unk_1004CEA30);
      id v12 = v65[0];
      v11();
      simd_float4x4.position.getter();
      Swift::String v13 = *(void (**)(void))((swift_isaMask & *v9) + 0x2A8);
      id v14 = v12;
      v13();
      sub_100016B6C(v66);
      simd_float4x4.position.getter();
      closestPointOnLine(lineP1:lineP2:point:)();
      float32x4_t v16 = vsubq_f32(v15, (float32x4_t)v57);
      __n128 v55 = (float32x2_t)__PAIR64__(v56, v10);
      *(float32x2_t *)v15.f32 = vsub_f32(*(float32x2_t *)v15.f32, v55);
      float v17 = COERCE_FLOAT(vmulq_f32(v16, v16).i32[2])
          + vaddv_f32(vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32));
      uint64_t v18 = v9;
      v11();
      sub_100016B6C(v66);
      simd_float4x4.position.getter();
      uint64_t v19 = v18;
      v13();
      sub_100016B6C(v66);
      simd_float4x4.position.getter();
      closestPointOnLine(lineP1:lineP2:point:)();
      float32x2_t v21 = vsub_f32(*(float32x2_t *)v20.f32, (float32x2_t)__PAIR64__(v59.n128_u32[1], v8));
      float32x4_t v22 = vsubq_f32(v20, (float32x4_t)v59);
      float v23 = COERCE_FLOAT(vmulq_f32(v22, v22).i32[2]) + vaddv_f32(vmul_f32(v21, v21));
      if (v17 >= 0.0001 || v23 >= 0.0001)
      {
        sub_100016B6C(v66);
        long long v7 = *(void **)(v2 + 120);
        *(void *)(v2 + 120) = v14;
        id v25 = v14;
LABEL_19:

        return;
      }
      id v51 = (float32x2_t)__PAIR64__(v59.n128_u32[1], v8);
      uint64_t v52 = v14;
      type metadata accessor for MeasureCamera();
      uint64_t v26 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v2 + 80) + 144);
      uint64_t v27 = swift_retain();
      v26(__src, v27);
      swift_release();
      memcpy(__dst, __src, sizeof(__dst));
      sub_100016F7C((uint64_t)__dst);
      uint64_t v28 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v2 + 80) + 144);
      Swift::String v29 = swift_retain();
      v28(__src, v29);
      swift_release();
      memcpy(v62, __src, sizeof(v62));
      sub_100016F7C((uint64_t)v62);
      static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
      uint64_t v53 = v30;
      uint64_t v31 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v2 + 80) + 144);
      int v32 = swift_retain();
      v31(__src, v32);
      swift_release();
      memcpy(v63, __src, sizeof(v63));
      sub_100016F7C((uint64_t)v63);
      uint64_t v33 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v2 + 80) + 144);
      unint64_t v34 = swift_retain();
      v33(__src, v34);
      swift_release();
      memcpy(v64, __src, sizeof(v64));
      sub_100016F7C((uint64_t)v64);
      static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
      unint64_t v36 = vsub_f32(v53, v35);
      if (vaddv_f32(vmul_f32(v36, v36)) > 900.0)
      {
        uint64_t v37 = v19;
        v13();
        sub_100016B6C(v66);
        simd_float4x4.position.getter();
        *(float32x2_t *)v39.f32 = vsub_f32(v51, *(float32x2_t *)v38.i8);
        *(float32x2_t *)&v39.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
        id v40 = vmulq_f32(v39, v39);
        __n128 v54 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1)));
        uint64_t v41 = v37;
        v13();
        sub_100016B6C(v66);
        simd_float4x4.position.getter();
        *(float32x2_t *)v43.f32 = vsub_f32(v55, *(float32x2_t *)v42.i8);
        *(float32x2_t *)&v43.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
        uint64_t v44 = vmulq_f32(v43, v43);
        objc_super v45 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))), v54)).u8[0];
        uint64_t v46 = v41;
        if (v45) {
          v13();
        }
        else {
          v11();
        }
        sub_100016B6C(v66);
        simd_float4x4.position.getter();
        uint64_t v58 = v47;
        id v48 = *(void (**)(__n128, __n128))((swift_isaMask & *v46) + 0x2E0);
        __n128 v49 = v46;
        v48(v59, v58);
        sub_100016B6C(v66);
      }
      sub_100016B6C(v66);
      long long v7 = *(void **)(v2 + 120);
      long long v6 = v52;
    }
    *(void *)(v2 + 120) = v6;
    id v50 = v6;
    goto LABEL_19;
  }
  uint64_t v3 = *(void **)(v1 + 120);
  if (v3)
  {
    long long v4 = *(void (**)(__n128, __n128))((swift_isaMask & *v3) + 0x2E0);
    long long v5 = v3;
    v4((__n128)0, (__n128)0);

    uint64_t v3 = *(void **)(v2 + 120);
  }
  *(void *)(v2 + 120) = 0;
}

void sub_100104390(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xC000000000000010)
  {
    swift_retain();
    StateValue.wrappedValue.getter();
    swift_release();
    id v3 = v8;

    if (v9)
    {
      (*(void (**)(void))((swift_isaMask & *v9) + 0x2B0))();

      simd_float4x4.position.getter();
    }
    else
    {
      long long v4 = 0uLL;
    }
    BOOL v5 = v9 == 0;
    *(_OWORD *)(a2 + 128) = v4;
  }
  else
  {
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    BOOL v5 = 1;
  }
  *(unsigned char *)(a2 + 144) = v5;
}

uint64_t sub_100104490()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = sub_100012894(&qword_1004C3F10);
  uint64_t v4 = qword_1004C2E30;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1004F8630;
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 272);
  swift_retain();
  *(void *)(v1 + 80) = v6(KeyPath, v5);
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = sub_100012894(&qword_1004CB4A0);
  uint64_t v9 = qword_1004F8630;
  __int32 v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 272);
  swift_retain();
  *(void *)(v1 + 88) = v10(v7, v9);
  sub_100012894(&qword_1004CB4A8);
  swift_getKeyPath();
  *(void *)(v1 + 96) = MutableStateBinding.__allocating_init(_:_:)();
  uint64_t v11 = sub_100012894(&qword_1004C58E8);
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = qword_1004F8630;
  id v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 272);
  swift_retain();
  *(void *)(v1 + 104) = v14(v12, v13);
  uint64_t v15 = sub_100012894(&qword_1004C3EE8);
  uint64_t v16 = swift_getKeyPath();
  uint64_t v17 = qword_1004F8630;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 272);
  swift_retain();
  *(void *)(v1 + 112) = v18(v16, v17);
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 136) = 0;
  *(unsigned char *)(v1 + 144) = 1;
  swift_release();
  uint64_t v19 = StateObserver.init(configuration:)();
  type metadata accessor for EdgeGuidesInstrument();
  swift_allocObject();
  swift_retain();
  sub_1000132C4();
  *(void *)(v19 + 64) = v20;
  swift_release();
  type metadata accessor for VerticalGuidesInstrument();
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = sub_100105EAC(v21);
  swift_release();
  *(void *)(v19 + 72) = v22;
  swift_release();
  return v19;
}

void sub_100104738()
{
}

void sub_100104760()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = sub_100012894(&qword_1004C3F10);
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1004F8630;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 272);
  swift_retain();
  *(void *)(v1 + 80) = v5(KeyPath, v4);
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = sub_100012894(&qword_1004CB4A0);
  uint64_t v8 = qword_1004F8630;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 272);
  swift_retain();
  *(void *)(v1 + 88) = v9(v6, v8);
  sub_100012894(&qword_1004CB4A8);
  swift_getKeyPath();
  *(void *)(v1 + 96) = MutableStateBinding.__allocating_init(_:_:)();
  uint64_t v10 = sub_100012894(&qword_1004C58E8);
  uint64_t v11 = swift_getKeyPath();
  uint64_t v12 = qword_1004F8630;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 272);
  swift_retain();
  *(void *)(v1 + 104) = v13(v11, v12);
  uint64_t v14 = sub_100012894(&qword_1004C3EE8);
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = qword_1004F8630;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 272);
  swift_retain();
  *(void *)(v1 + 112) = v17(v15, v16);
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 136) = 0;
  *(unsigned char *)(v1 + 144) = 1;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1001049A0()
{
  void (*v2)(unsigned char *__return_ptr, uint64_t);
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int32x2_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int32x2_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  uint64_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  uint64_t v33;
  void (*v34)(void);
  uint64_t v35;
  long long v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  float32x4_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  uint64_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float v49;
  uint64_t v50;
  float32x4_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  void (*v66)(uint64_t);
  uint64_t v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  uint64_t v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  int32x2_t v77;
  __n128 v78;
  int8x16_t v79;
  __n128 v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  __n128 v86;
  int32x2_t v87;
  int8x16_t v88;
  long long v89;
  float32x4_t v90;
  __n128 v91;
  unsigned char v92[152];
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  unsigned char v102[152];
  uint64_t v103[18];
  void v104[12];
  unsigned char v105[48];
  _OWORD v106[2];
  char v107;

  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  uint64_t v1 = *(void **)&v102[8];

  if (*(void *)&v102[8])
  {
    uint64_t v2 = *(void (**)(unsigned char *__return_ptr, uint64_t))(**(void **)(v0 + 96) + 144);
    uint64_t v3 = swift_retain();
    v2(v92, v3);
    swift_release();
    *(_OWORD *)&v102[96] = *(_OWORD *)&v92[96];
    *(_OWORD *)&v102[112] = *(_OWORD *)&v92[112];
    *(_OWORD *)&v102[32] = *(_OWORD *)&v92[32];
    *(_OWORD *)&v102[48] = *(_OWORD *)&v92[48];
    *(_OWORD *)&v102[128] = *(_OWORD *)&v92[128];
    *(void *)&v102[144] = *(void *)&v92[144];
    *(_OWORD *)&v102[64] = *(_OWORD *)&v92[64];
    *(_OWORD *)&v102[80] = *(_OWORD *)&v92[80];
    *(_OWORD *)UIContentSizeCategory v102 = *(_OWORD *)v92;
    *(_OWORD *)&v102[16] = *(_OWORD *)&v92[16];
    uint64_t v4 = *(void **)v92;
    double v99 = *(_OWORD *)&v102[104];
    id v100 = *(_OWORD *)&v102[120];
    id v101 = *(_OWORD *)&v102[136];
    char v95 = *(_OWORD *)&v102[40];
    id v96 = *(_OWORD *)&v102[56];
    id v97 = *(_OWORD *)&v102[72];
    id v98 = *(_OWORD *)&v102[88];
    id v93 = *(_OWORD *)&v102[8];
    char v94 = *(_OWORD *)&v102[24];
    sub_100016FEC((uint64_t)v102, (uint64_t)v103, (uint64_t *)&unk_1004CEA30);
    if (sub_100016B28(v103) == 1)
    {

      sub_100016F3C((uint64_t)v102);
      return;
    }
    *(_OWORD *)&v92[88] = v98;
    *(_OWORD *)&v92[104] = v99;
    *(_OWORD *)&v92[120] = v100;
    *(_OWORD *)&v92[136] = v101;
    *(_OWORD *)&v92[24] = v94;
    *(_OWORD *)&v92[40] = v95;
    *(_OWORD *)&v92[56] = v96;
    *(_OWORD *)&v92[72] = v97;
    *(void *)Class v92 = v4;
    *(_OWORD *)&v92[8] = v93;
    uint64_t v5 = v4;
    uint64_t v6 = sub_100016F3C((uint64_t)v92);
    if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *v5) + 0x240))(v6))
    {
      unint64_t v34 = *(void (**)(void))((swift_isaMask & *v5) + 0x2A0);
      v34();
      uint64_t v35 = simd_float4x4.position.getter();
      id v89 = v36;
      uint64_t v37 = *(void (**)(uint64_t))((swift_isaMask & *v5) + 0x2A8);
      v37(v35);
      uint64_t v38 = simd_float4x4.position.getter();
      char v83 = v39;
      ((void (*)(uint64_t))v34)(v38);
      id v40 = simd_float4x4.position.getter();
      id v42 = vsubq_f32(v83, v41);
      id v43 = (int32x4_t)vmulq_f32(v42, v42);
      v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
      uint64_t v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
      objc_super v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
      __n128 v84 = vmulq_n_f32(v42, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).f32[0]);
      (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x2B0))(v40);
      uint64_t v46 = simd_float4x4.position.getter();
      *(float32x2_t *)v48.f32 = vsub_f32(v47, vadd_f32(*(float32x2_t *)&v89, vmul_f32(*(float32x2_t *)v84.f32, (float32x2_t)vdup_n_s32(0x3E99999Au))));
      v48.f32[2] = v49 - (float)(*((float *)&v89 + 2) + vmuls_lane_f32(0.3, v84, 2));
      id v90 = v48;
      v37(v46);
      id v50 = simd_float4x4.position.getter();
      char v85 = v51;
      ((void (*)(uint64_t))v34)(v50);
      uint64_t v52 = simd_float4x4.position.getter();
      __n128 v54 = vsubq_f32(v85, v53);
      __n128 v55 = (int32x4_t)vmulq_f32(v54, v54);
      v55.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v55, 2), vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1))).u32[0];
      __n128 v56 = vrsqrte_f32((float32x2_t)v55.u32[0]);
      __n128 v57 = vmul_f32(v56, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v56, v56)));
      uint64_t v58 = vmulq_f32(v90, vmulq_n_f32(v54, vmul_f32(v57, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v57, v57))).f32[0]));
      v58.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0];
      if (v58.f32[0] >= 0.0)
      {
        ((void (*)(uint64_t))v34)(v52);
        int64_t v59 = simd_float4x4.position.getter();
        v37(v59);
        char v60 = simd_float4x4.position.getter();
        ((void (*)(uint64_t))v34)(v60);
        char v61 = simd_float4x4.position.getter();
        v62.n128_f64[0] = ((double (*)(uint64_t))v34)(v61);
        __n128 v86 = v63;
        id v91 = v62;
        __n128 v78 = v65;
        __n128 v80 = v64;
        v34();
LABEL_20:
        uint64_t v72 = simd_float4x4.translated(to:)();
        (*(void (**)(uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))((swift_isaMask & *v5) + 0x2D0))(v72, v91, v86, v80, v78, v73, v74, v75, v76);

        return;
      }
    }
    else
    {
      (*(void (**)(void *__return_ptr))((swift_isaMask & *v5) + 0x2B0))(v104);
      sub_100016FEC((uint64_t)v104, (uint64_t)v105, &qword_1004CAAC8);
      uint64_t v7 = sub_100016FEC((uint64_t)v105, (uint64_t)v106, &qword_1004CAAC8);
      if ((v107 & 1) == 0)
      {
        __n128 v79 = (int8x16_t)v106[1];
        __n128 v81 = (int8x16_t)v106[0];
        uint64_t v8 = *(void (**)(uint64_t))((swift_isaMask & *v1) + 0x2B0);
        v8(v7);
        uint64_t v9 = simd_float4x4.position.getter();
        id v87 = *(int32x2_t *)v10.f32;
        uint64_t v11 = vsubq_f32(v10, (float32x4_t)v81);
        uint64_t v12 = (int8x16_t)vmulq_f32(v11, v11);
        v13.i32[0] = vextq_s8(v12, v12, 8uLL).u32[0];
        v13.i32[1] = v12.i32[0];
        __n128 v77 = v13;
        v8(v9);
        uint64_t v14 = simd_float4x4.position.getter();
        uint64_t v16 = vsubq_f32(v15, (float32x4_t)v79);
        uint64_t v17 = (int8x16_t)vmulq_f32(v16, v16);
        v18.i32[0] = vextq_s8(v17, v17, 8uLL).u32[0];
        v18.i32[1] = v17.i32[0];
        *(float32x2_t *)v15.f32 = vsub_f32((float32x2_t)vzip2_s32(v87, *(int32x2_t *)v15.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v81.i8, *(int32x2_t *)v79.i8));
        *(float32x2_t *)v15.f32 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v77, v18), vadd_f32((float32x2_t)vzip2_s32(v77, v18), vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32))));
        uint64_t v19 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1), *(float32x2_t *)v15.f32).u8[0];
        if (v19) {
          uint64_t v20 = -1;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v88 = vbslq_s8((int8x16_t)vdupq_n_s32(v20), v81, v79);
        uint64_t v21 = vsubq_f32((float32x4_t)v79, (float32x4_t)v81);
        uint64_t v22 = (int32x4_t)vmulq_f32(v21, v21);
        v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
        float v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
        int v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
        id v25 = vmulq_n_f32(v21, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
        if (v19)
        {
          *(float32x2_t *)v26.f32 = vsub_f32(0, *(float32x2_t *)v25.f32);
          v26.f32[2] = 0.0 - v25.f32[2];
          v26.i32[3] = 0;
          id v25 = v26;
        }
        __n128 v82 = v25;
        uint64_t v27 = *(float *)&v88.i32[2] + vmuls_lane_f32(0.3, v25, 2);
        v8(v14);
        uint64_t v28 = simd_float4x4.position.getter();
        *(float32x2_t *)v30.f32 = vsub_f32(v29, vadd_f32(*(float32x2_t *)v88.i8, vmul_f32(*(float32x2_t *)v82.f32, (float32x2_t)vdup_n_s32(0x3E99999Au))));
        v30.f32[2] = v31 - v27;
        int v32 = vmulq_f32(v82, v30);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0] <= 0.0)
        {
          if ((v19 & 1) == 0) {
            goto LABEL_13;
          }
        }
        else if ((v19 & 1) == 0)
        {
LABEL_13:
          (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0x2A0))(v28);
          uint64_t v33 = simd_float4x4.position.getter();
LABEL_19:
          int64_t v66 = *(void (**)(uint64_t))((swift_isaMask & *v5) + 0x2A0);
          v66(v33);
          id v67 = simd_float4x4.translated(to:)();
          __n128 v86 = v69;
          id v91 = v68;
          __n128 v78 = v71;
          __n128 v80 = v70;
          v66(v67);
          goto LABEL_20;
        }
        (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0x2A8))(v28);
        uint64_t v33 = simd_float4x4.position.getter();
        goto LABEL_19;
      }
    }
  }
}

uint64_t sub_1001052CC()
{
  void (*v5)(_OWORD *__return_ptr, uint64_t);
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(_OWORD *);
  void (*v9)(_OWORD *, void);
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  float32x4_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  void (*v23)(void *__return_ptr, uint64_t);
  uint64_t v24;
  void *v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  id v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  long long v52;
  const double *v53;
  uint64_t v54;
  float64x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  long long v60;
  long long v61;
  long long v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  long long v67;
  long long v68;
  uint64_t (*v69)(void *);
  void (*v70)(void *, void);
  uint64_t v71;
  uint64_t (*v72)(void *);
  uint64_t v73;
  void (*v74)(void *, void);
  uint64_t v75;
  uint64_t v76;
  void (**v77)(char *, uint64_t);
  id v78;
  id v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  long long v85;
  long long v86;
  long long v87;
  float32x4_t v88;
  int v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  char *v93;
  uint64_t v94;
  float32x4_t v95;
  void v96[64];
  void *v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  long long v109;
  long long v110;
  long long v111;
  long long v112;
  long long v113;
  long long v114;
  long long v115;
  unsigned char v116[152];
  uint64_t v117[18];
  _OWORD v118[33];

  uint64_t v1 = v0;
  char v94 = type metadata accessor for ARPlaneAnchor.Classification();
  uint64_t v2 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  id v93 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  long long v4 = v118[0];

  if (!*((void *)&v4 + 1)) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)(v0 + 96) + 144);
  uint64_t v6 = swift_retain();
  v5(v118, v6);
  swift_release();
  *(_OWORD *)&v116[112] = v118[7];
  *(_OWORD *)&v116[96] = v118[6];
  *(_OWORD *)&v116[48] = v118[3];
  *(_OWORD *)&v116[32] = v118[2];
  *(_OWORD *)&v116[128] = v118[8];
  *(void *)&v116[144] = *(void *)&v118[9];
  *(_OWORD *)&v116[64] = v118[4];
  *(_OWORD *)&v116[80] = v118[5];
  *(_OWORD *)float32x4_t v116 = v118[0];
  *(_OWORD *)&v116[16] = v118[1];
  uint64_t v7 = *(void **)&v118[0];
  float v113 = *(_OWORD *)&v116[104];
  float v114 = *(_OWORD *)&v116[120];
  char v115 = *(_OWORD *)&v116[136];
  float v109 = *(_OWORD *)&v116[40];
  id v110 = *(_OWORD *)&v116[56];
  char v111 = *(_OWORD *)&v116[72];
  char v112 = *(_OWORD *)&v116[88];
  float v107 = *(_OWORD *)&v116[8];
  char v108 = *(_OWORD *)&v116[24];
  sub_100016FEC((uint64_t)v116, (uint64_t)v117, (uint64_t *)&unk_1004CEA30);
  if (sub_100016B28(v117) == 1)
  {
    sub_100016F3C((uint64_t)v116);
LABEL_4:
    uint64_t v8 = *(uint64_t (**)(_OWORD *))(**(void **)(v1 + 96) + 400);
    swift_retain();
    uint64_t v9 = (void (*)(_OWORD *, void))v8(v118);
    *(void *)(v10 + 144) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v9(v118, 0);
    return swift_release();
  }
  id v103 = v112;
  id v104 = v113;
  char v105 = v114;
  float v106 = v115;
  double v99 = v108;
  id v100 = v109;
  id v101 = v110;
  UIContentSizeCategory v102 = v111;
  id v97 = v7;
  id v98 = v107;
  uint64_t v12 = v7;
  uint64_t v13 = sub_100016F3C((uint64_t)&v97);
  uint64_t v14 = *(void (**)(uint64_t))((swift_isaMask & *v12) + 0x2A8);
  v14(v13);
  uint64_t v15 = simd_float4x4.position.getter();
  char v95 = v16;
  uint64_t v17 = *(void (**)(uint64_t))((swift_isaMask & *v12) + 0x2A0);
  v17(v15);
  uint64_t v18 = simd_float4x4.position.getter();
  id v91 = v19;
  v17(v18);
  uint64_t v20 = simd_float4x4.position.getter();
  Class v92 = v21;
  v14(v20);
  simd_float4x4.position.getter();
  id v90 = v22;
  float v23 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v1 + 80) + 144);
  int v24 = swift_retain();
  v23(v96, v24);
  swift_release();
  memcpy(v118, v96, 0x200uLL);
  id v25 = (void *)sub_1000A3850();
  sub_100016F7C((uint64_t)v118);
  if (!v25)
  {

    uint64_t v69 = *(uint64_t (**)(void *))(**(void **)(v1 + 96) + 400);
    swift_retain();
    uint64_t v70 = (void (*)(void *, void))v69(v96);
    *(void *)(v71 + 144) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v70(v96, 0);
    return swift_release();
  }
  __n128 v79 = v12;
  uint64_t v26 = vsubq_f32(v95, v91);
  uint64_t v27 = (int32x4_t)vmulq_f32(v26, v26);
  v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
  uint64_t v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
  Swift::String v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
  id v91 = vmulq_n_f32(v26, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
  uint64_t v30 = vaddq_f32(v92, v90);
  *(float32x2_t *)v31.f32 = vmul_f32(*(float32x2_t *)v30.f32, (float32x2_t)0x3F0000003F000000);
  v31.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, v30, 2));
  char v95 = v31;
  int v32 = [v25 _hitTestFromOrigin:32 withDirection:*(double *)v31.i64 types:*(double *)v91.i64];
  sub_1001067E8();
  uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v34 = [v25 _hitTestFromOrigin:32 withDirection:COERCE_DOUBLE(vsub_f32(0, *(float32x2_t *)v91.f32)) types:*(double *)v95.i64];
  uint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v96[0] = v33;
  uint64_t result = sub_100122610(v35);
  unint64_t v36 = v96[0];
  if (!(v96[0] >> 62))
  {
    uint64_t v37 = *(void *)((v96[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    __n128 v78 = v25;
    if (v37) {
      goto LABEL_9;
    }
LABEL_38:
    v92.i64[0] = (uint64_t)_swiftEmptyArrayStorage;
LABEL_39:

    swift_bridgeObjectRelease();
    uint64_t v72 = *(uint64_t (**)(void *))(**(void **)(v1 + 96) + 400);
    __n128 v73 = v92.i64[0];
    swift_bridgeObjectRetain();
    swift_retain();
    __n128 v74 = (void (*)(void *, void))v72(v96);
    *(void *)(v75 + 144) = v73;
    swift_bridgeObjectRelease();
    v74(v96, 0);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  __n128 v78 = v25;
  if (!v37) {
    goto LABEL_38;
  }
LABEL_9:
  if (v37 >= 1)
  {
    uint64_t v38 = v2;
    unint64_t v39 = 0;
    id v40 = v36 & 0xC000000000000001;
    v90.i64[0] = v38 + 88;
    id v89 = enum case for ARPlaneAnchor.Classification.wall(_:);
    __n128 v84 = enum case for ARPlaneAnchor.Classification.floor(_:);
    __n128 v82 = enum case for ARPlaneAnchor.Classification.table(_:);
    char v83 = enum case for ARPlaneAnchor.Classification.ceiling(_:);
    v92.i64[0] = (uint64_t)_swiftEmptyArrayStorage;
    __n128 v77 = (void (**)(char *, uint64_t))(v38 + 8);
    __n128 v80 = enum case for ARPlaneAnchor.Classification.door(_:);
    __n128 v81 = v1;
    while (1)
    {
      if (v40) {
        uint64_t v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v41 = *(id *)(v36 + 8 * v39 + 32);
      }
      id v42 = v41;
      id v43 = [v41 anchor];
      if (!v43) {
        goto LABEL_12;
      }
      uint64_t v44 = v43;
      self;
      if (!swift_dynamicCastObjCClass()) {
        break;
      }
      v95.i64[0] = (uint64_t)v44;
      objc_super v45 = v36;
      uint64_t v46 = v37;
      char v47 = v40;
      id v48 = v1;
      __n128 v49 = v93;
      ARPlaneAnchor.classification.getter();
      id v50 = v49;
      uint64_t v1 = v48;
      id v40 = v47;
      uint64_t v37 = v46;
      unint64_t v36 = v45;
      id v51 = (*(uint64_t (**)(char *, uint64_t))v90.i64[0])(v50, v94);
      if (v51 == v89) {
        goto LABEL_20;
      }
      if (v51 == v84 || v51 == v83 || v51 == v82)
      {
        if (SIMD3<>.isAlmostVertical(withinDegrees:)())
        {
LABEL_28:
          if (*(unsigned char *)(v1 + 144)) {
            goto LABEL_31;
          }
          uint64_t v53 = (const double *)(v1 + 136);
          __n128 v54 = *(void *)(v1 + 128);
          *(void *)&uint64_t v52 = v54;
          id v87 = v52;
          __n128 v55 = vld1q_dup_f64(v53);
          uint64_t v88 = (float32x4_t)v55;
          [v42 worldTransform];
          simd_float4x4.position.getter();
          *(float32x2_t *)v57.f32 = vsub_f32((float32x2_t)__PAIR64__(DWORD1(v87), v54), *(float32x2_t *)v56.f32);
          v57.i64[1] = vsubq_f32(v88, v56).u32[2];
          uint64_t v58 = vmulq_f32(v57, v57);
          if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]) >= 0.0001)
          {
LABEL_31:
            [v42 worldTransform];
            id v87 = v60;
            uint64_t v88 = v59;
            char v85 = v62;
            __n128 v86 = v61;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v92.i64[0] = (uint64_t)sub_10006DE78(0, *(void *)(v92.i64[0] + 16) + 1, 1, (char *)v92.i64[0]);
            }
            uint64_t v64 = *(void *)(v92.i64[0] + 16);
            double v63 = *(void *)(v92.i64[0] + 24);
            if (v64 >= v63 >> 1) {
              v92.i64[0] = (uint64_t)sub_10006DE78((char *)(v63 > 1), v64 + 1, 1, (char *)v92.i64[0]);
            }
            id v65 = v92.i64[0];
            *(void *)(v92.i64[0] + 16) = v64 + 1;
            int64_t v66 = v65 + (v64 << 6);
            id v67 = v87;
            *(float32x4_t *)(v66 + 32) = v88;
            *(_OWORD *)(v66 + 48) = v67;
            uint64_t v68 = v85;
            *(_OWORD *)(v66 + 64) = v86;
            *(_OWORD *)(v66 + 80) = v68;

            uint64_t v1 = v81;
            goto LABEL_13;
          }
        }
LABEL_30:

        goto LABEL_13;
      }
      if (v51 == v80)
      {
LABEL_20:
        if (SIMD3<>.isAlmostHorizontal(withinDegrees:)()) {
          goto LABEL_28;
        }
        goto LABEL_30;
      }

      (*v77)(v93, v94);
LABEL_13:
      if (v37 == ++v39) {
        goto LABEL_39;
      }
    }

LABEL_12:
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_100105C44()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 120);
}

uint64_t sub_100105CA4()
{
  uint64_t v0 = StateObserver.deinit();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_100105D0C()
{
  sub_100105CA4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GuidesCoordinator()
{
  uint64_t result = qword_1004CB358;
  if (!qword_1004CB358) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100105D88()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100105E08(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(v1 + 16))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_100105E40(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return v2(v8);
}

void sub_100105EA4(uint64_t a1)
{
  sub_100104390(a1, v1);
}

uint64_t sub_100105EAC(uint64_t a1)
{
  int v32 = &type metadata for Configurations.Default;
  uint64_t v33 = &protocol witness table for Configurations.Default;
  *(void *)(a1 + 64) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(unsigned char *)(a1 + 144) = 1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = sub_100012894(&qword_1004C3EE0);
  uint64_t v4 = qword_1004C2E30;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1004F8630;
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 272);
  swift_retain();
  *(void *)(a1 + 152) = v6(KeyPath, v5);
  uint64_t v7 = sub_100012894(&qword_1004C3EE8);
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = qword_1004F8630;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 272);
  swift_retain();
  *(void *)(a1 + 160) = v10(v8, v9);
  sub_100012894(&qword_1004CB4B8);
  swift_getKeyPath();
  *(void *)(a1 + 168) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v11 = sub_100012894(&qword_1004CB4C0);
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = qword_1004F8630;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 272);
  swift_retain();
  *(void *)(a1 + 176) = v14(v12, v13);
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = sub_100012894(&qword_1004C3F08);
  uint64_t v17 = qword_1004F8630;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 272);
  swift_retain();
  *(void *)(a1 + 184) = v18(v15, v17);
  uint64_t v19 = swift_getKeyPath();
  uint64_t v20 = sub_100012894(&qword_1004C3F10);
  uint64_t v21 = qword_1004F8630;
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 272);
  swift_retain();
  *(void *)(a1 + 192) = v22(v19, v21);
  *(_DWORD *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 204) = 1;
  __asm { FMOV            V0.2S, #10.0 }
  *(void *)(a1 + 208) = _D0;
  swift_release();
  sub_10002B8B4((uint64_t)v31, (uint64_t)&v30);
  uint64_t v28 = StateObserver.init(configuration:)();
  sub_100013218((uint64_t)v31);
  return v28;
}

uint64_t sub_10010617C(void *a1)
{
  void (*v7)(_OWORD *__return_ptr, uint64_t);
  uint64_t v8;
  void (*v9)(_OWORD *__return_ptr, uint64_t);
  uint64_t v10;
  float32x2_t v11;
  void (*v12)(_OWORD *__return_ptr, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_OWORD *__return_ptr, uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  __n128 v27;
  void *v28;
  void *v29;
  void (*v30)(unsigned char *__return_ptr, uint64_t);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t (*v35)(void);
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  float32x2_t v50;
  __n128 v51;
  unsigned char v52[152];
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  uint64_t v62[18];
  _OWORD __src[32];
  _OWORD __dst[32];
  void v65[66];

  uint64_t v2 = v1;
  sub_1001049A0();
  uint64_t result = sub_1001052CC();
  if (!a1) {
    return result;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x200))(result);
  if (*(unsigned char *)(v1 + 144)) {
    return result;
  }
  float32x2_t v6 = v5;
  type metadata accessor for MeasureCamera();
  uint64_t v7 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)(v1 + 80) + 144);
  uint64_t v8 = swift_retain();
  v7(__src, v8);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  sub_100016F7C((uint64_t)__dst);
  uint64_t v9 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)(v1 + 80) + 144);
  uint64_t v10 = swift_retain();
  v9(__src, v10);
  swift_release();
  memcpy(v65, __src, 0x200uLL);
  sub_100016F7C((uint64_t)v65);
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
  id v50 = v11;
  uint64_t v12 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)(v1 + 88) + 144);
  uint64_t v13 = swift_retain();
  v12(__src, v13);
  swift_release();
  uint64_t v14 = *(void *)&__src[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)(v1 + 88) + 144);
  uint64_t v16 = swift_retain();
  v15(__src, v16);
  swift_release();
  uint64_t v17 = *(void *)&__src[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&__src[0] = v14;
  uint64_t result = sub_1001222D0(v17);
  uint64_t v18 = *(void *)&__src[0];
  if (*(void *)&__src[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_5;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = *(void *)((*(void *)&__src[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v19) {
    return swift_bridgeObjectRelease();
  }
LABEL_5:
  if (v19 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = vsub_f32(v50, v6);
    uint64_t v22 = vaddv_f32(vmul_f32(v21, v21));
    float v23 = v18 & 0xC000000000000001;
    id v48 = v1;
    __n128 v49 = v18 & 0xC000000000000001;
    char v47 = v18;
    uint64_t v46 = v19;
    while (1)
    {
      uint64_t v28 = v23
          ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v18 + 8 * v20 + 32);
      Swift::String v29 = v28;
      if (v22 > 900.0) {
        break;
      }
      (*(void (**)(void))((swift_isaMask & *v28) + 0x2A0))();
      int v24 = simd_float4x4.position.getter();
      id v51 = v25;
      (*(void (**)(uint64_t))((swift_isaMask & *v29) + 0x2A8))(v24);
      uint64_t v26 = simd_float4x4.position.getter();
      (*(void (**)(uint64_t, __n128, __n128))((swift_isaMask & *v29) + 0x2E0))(v26, v51, v27);

LABEL_8:
      if (v19 == ++v20) {
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v30 = *(void (**)(unsigned char *__return_ptr, uint64_t))(**(void **)(v2 + 96) + 144);
    uint64_t v31 = swift_retain();
    v30(v52, v31);
    swift_release();
    __src[6] = *(_OWORD *)&v52[96];
    __src[7] = *(_OWORD *)&v52[112];
    __src[8] = *(_OWORD *)&v52[128];
    *(void *)&__src[9] = *(void *)&v52[144];
    __src[2] = *(_OWORD *)&v52[32];
    __src[3] = *(_OWORD *)&v52[48];
    __src[4] = *(_OWORD *)&v52[64];
    __src[5] = *(_OWORD *)&v52[80];
    __src[0] = *(_OWORD *)v52;
    __src[1] = *(_OWORD *)&v52[16];
    int v32 = *(void **)v52;
    int64_t v59 = *(_OWORD *)((char *)&__src[6] + 8);
    char v60 = *(_OWORD *)((char *)&__src[7] + 8);
    char v61 = *(_OWORD *)((char *)&__src[8] + 8);
    __n128 v55 = *(_OWORD *)((char *)&__src[2] + 8);
    __n128 v56 = *(_OWORD *)((char *)&__src[3] + 8);
    __n128 v57 = *(_OWORD *)((char *)&__src[4] + 8);
    uint64_t v58 = *(_OWORD *)((char *)&__src[5] + 8);
    uint64_t v53 = *(_OWORD *)((char *)__src + 8);
    __n128 v54 = *(_OWORD *)((char *)&__src[1] + 8);
    sub_100016FEC((uint64_t)__src, (uint64_t)v62, (uint64_t *)&unk_1004CEA30);
    if (sub_100016B28(v62) == 1)
    {
      uint64_t v33 = sub_100016F3C((uint64_t)__src);
LABEL_15:
      (*(void (**)(uint64_t, __n128, __n128))((swift_isaMask & *v29) + 0x2E0))(v33, (__n128)0, (__n128)0);

LABEL_22:
      float v23 = v49;
      goto LABEL_8;
    }
    *(void *)uint64_t v52 = v32;
    *(_OWORD *)&v52[104] = v59;
    *(_OWORD *)&v52[120] = v60;
    *(_OWORD *)&v52[136] = v61;
    *(_OWORD *)&v52[40] = v55;
    *(_OWORD *)&v52[56] = v56;
    *(_OWORD *)&v52[72] = v57;
    *(_OWORD *)&v52[88] = v58;
    *(_OWORD *)&v52[8] = v53;
    *(_OWORD *)&v52[24] = v54;
    unint64_t v34 = v32;
    sub_100016F3C((uint64_t)v52);
    uint64_t v35 = *(uint64_t (**)(void))((swift_isaMask & *v34) + 0xB8);
    unint64_t v36 = v34;
    uint64_t v37 = v35();
    unint64_t v39 = v38;

    id v40 = *(uint64_t (**)(void))((swift_isaMask & *v29) + 0xB8);
    uint64_t v41 = v29;
    id v42 = v40();
    uint64_t v44 = v43;

    if (v37 == v42 && v39 == v44)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      objc_super v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if ((v45 & 1) == 0)
      {
        uint64_t v2 = v48;
        uint64_t v18 = v47;
        uint64_t v19 = v46;
        goto LABEL_15;
      }
    }
    uint64_t v2 = v48;
    uint64_t v18 = v47;
    uint64_t v19 = v46;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001067E8()
{
  unint64_t result = qword_1004CB4B0;
  if (!qword_1004CB4B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1004CB4B0);
  }
  return result;
}

void sub_100106830()
{
  qword_1004CB4C8 = 0x4044000000000000;
}

void sub_100106840()
{
  qword_1004CB4D0 = 0x4034000000000000;
}

void sub_100106850(uint64_t a1)
{
  uint64_t v2 = *(void **)&v1[qword_1004C7A68];
  if (v2)
  {
    uint64_t v3 = *(void **)&v1[qword_1004C7A48];
    if (v3)
    {
      uint64_t v4 = *(void **)&v1[qword_1004C7A50];
      if (v4)
      {
        float32x2_t v5 = *(void **)&v1[qword_1004C7A60];
        if (v5)
        {
          switch(a1)
          {
            case 2:
              id v11 = v2;
              id v12 = v3;
              id v13 = v4;
              id v14 = v5;
              double v10 = 3.14159265;
              double v62 = 3.14159265;
              break;
            case 4:
              id v15 = v2;
              id v16 = v3;
              id v17 = v4;
              id v18 = v5;
              double v62 = -*(double *)CGFloat.piDiv2.unsafeMutableAddressor();
              double v10 = -*(double *)CGFloat.piDiv2.unsafeMutableAddressor();
              break;
            case 3:
              id v6 = v2;
              id v7 = v3;
              id v8 = v4;
              id v9 = v5;
              double v62 = *(double *)CGFloat.piDiv2.unsafeMutableAddressor();
              double v10 = *(double *)CGFloat.piDiv2.unsafeMutableAddressor();
              break;
            default:
              id v19 = v2;
              id v20 = v3;
              id v21 = v4;
              id v22 = v5;
              double v10 = 0.0;
              double v62 = 0.0;
              break;
          }
          CGAffineTransformMakeRotation((CGAffineTransform *)&aBlock, v10);
          *(_OWORD *)&m.CGFloat a = *(_OWORD *)&aBlock.m11;
          *(_OWORD *)&m.CGFloat c = *(_OWORD *)&aBlock.m13;
          *(_OWORD *)&m.CGFloat tx = *(_OWORD *)&aBlock.m21;
          CATransform3DMakeAffineTransform(&aBlock, &m);
          long long v60 = *(_OWORD *)&aBlock.m13;
          long long v61 = *(_OWORD *)&aBlock.m11;
          long long v58 = *(_OWORD *)&aBlock.m23;
          long long v59 = *(_OWORD *)&aBlock.m21;
          long long v56 = *(_OWORD *)&aBlock.m33;
          long long v57 = *(_OWORD *)&aBlock.m31;
          long long v55 = *(_OWORD *)&aBlock.m41;
          CGFloat m43 = aBlock.m43;
          CGFloat m44 = aBlock.m44;
          double v25 = sub_100106BE8();
          uint64_t v26 = &v1[qword_1004CB4D8];
          *(double *)uint64_t v26 = v25;
          *((void *)v26 + 1) = v27;
          double v28 = sub_100106F10();
          CATransform3DMakeTranslation(&aBlock, v28, v29, 0.0);
          long long v53 = *(_OWORD *)&aBlock.m13;
          long long v54 = *(_OWORD *)&aBlock.m11;
          long long v51 = *(_OWORD *)&aBlock.m23;
          long long v52 = *(_OWORD *)&aBlock.m21;
          long long v49 = *(_OWORD *)&aBlock.m33;
          long long v50 = *(_OWORD *)&aBlock.m31;
          long long v48 = *(_OWORD *)&aBlock.m41;
          CGFloat v31 = aBlock.m43;
          CGFloat v30 = aBlock.m44;
          sub_1001071D4();
          uint64_t v33 = v32;
          uint64_t v35 = v34;
          sub_1001074D4();
          uint64_t v37 = v36;
          uint64_t v39 = v38;
          id v40 = self;
          uint64_t v41 = swift_allocObject();
          *(void *)(v41 + 16) = v2;
          *(_OWORD *)(v41 + 24) = v54;
          *(_OWORD *)(v41 + 40) = v53;
          *(_OWORD *)(v41 + 56) = v52;
          *(_OWORD *)(v41 + 72) = v51;
          *(_OWORD *)(v41 + 88) = v50;
          *(_OWORD *)(v41 + 104) = v49;
          *(_OWORD *)(v41 + 120) = v48;
          *(CGFloat *)(v41 + 136) = v31;
          *(CGFloat *)(v41 + 144) = v30;
          *(void *)(v41 + 152) = v3;
          *(void *)(v41 + 160) = v1;
          *(void *)(v41 + 168) = v4;
          *(void *)(v41 + 176) = v33;
          *(void *)(v41 + 184) = v35;
          *(_OWORD *)(v41 + 192) = v61;
          *(_OWORD *)(v41 + 208) = v60;
          *(_OWORD *)(v41 + 224) = v59;
          *(_OWORD *)(v41 + 240) = v58;
          *(_OWORD *)(v41 + 256) = v57;
          *(_OWORD *)(v41 + 272) = v56;
          *(_OWORD *)(v41 + 288) = v55;
          *(CGFloat *)(v41 + 304) = m43;
          *(CGFloat *)(v41 + 312) = m44;
          *(void *)(v41 + 320) = v5;
          *(void *)(v41 + 328) = v37;
          *(void *)(v41 + 336) = v39;
          *(double *)(v41 + 344) = v62;
          *(void *)&aBlock.m21 = sub_100108D74;
          *(void *)&aBlock.m22 = v41;
          *(void *)&aBlock.m11 = _NSConcreteStackBlock;
          *(void *)&aBlock.m12 = 1107296256;
          *(void *)&aBlock.m13 = sub_100049AB4;
          *(void *)&aBlock.m14 = &unk_10048E7B0;
          id v42 = _Block_copy(&aBlock);
          id v43 = v2;
          id v44 = v3;
          id v45 = v4;
          id v46 = v5;
          char v47 = v1;
          swift_release();
          [v40 animateWithDuration:0 delay:v42 options:0 animations:0.25 completion:0.25];
          _Block_release(v42);
        }
      }
    }
  }
}

double sub_100106BE8()
{
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  if (v9 == 2)
  {
    if (qword_1004C2E70 != -1) {
      swift_once();
    }
    double v4 = *(double *)&qword_1004F8650;
    if (qword_1004C2E78 == -1) {
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (v9 != 4)
  {
    if (v9 == 3)
    {
      [v0 bounds];
      double Width = CGRectGetWidth(v10);
      if (qword_1004C2E78 != -1) {
        swift_once();
      }
      double v2 = Width - *(double *)&qword_1004F8658;
      [v0 bounds];
      CGRectGetHeight(v11);
      if (qword_1004C2E70 != -1) {
        swift_once();
      }
      return v2 * 0.5;
    }
    [v0 bounds];
    double v7 = CGRectGetWidth(v13);
    if (qword_1004C2E70 != -1) {
      swift_once();
    }
    double v4 = v7 - *(double *)&qword_1004F8650;
    if (qword_1004C2E78 == -1)
    {
LABEL_21:
      double v3 = v4 - *(double *)&qword_1004F8658 * 0.5;
      [v0 bounds];
      CGRectGetHeight(v14);
      return v3;
    }
LABEL_23:
    swift_once();
    goto LABEL_21;
  }
  [v0 bounds];
  double v5 = CGRectGetWidth(v12);
  if (qword_1004C2E78 != -1) {
    swift_once();
  }
  double v6 = v5 - *(double *)&qword_1004F8658;
  if (qword_1004C2E70 != -1) {
    swift_once();
  }
  return v6 * 0.5;
}

double sub_100106F10()
{
  uint64_t v1 = *(void **)(v0 + qword_1004C7A68);
  if (!v1) {
    return 0.0;
  }
  double v2 = (double *)(v0 + qword_1004CB4D8);
  double v3 = *(double *)(v0 + qword_1004CB4D8);
  uint64_t v4 = qword_1004C2E78;
  id v5 = v1;
  if (v4 != -1) {
    swift_once();
  }
  double v6 = v3 + *(double *)&qword_1004F8658 * 0.5;
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  switch(v18)
  {
    case 2:
      [v5 frame];
      double v13 = CGRectGetWidth(v19) * -0.5;
      if (qword_1004C2B70 != -1) {
        swift_once();
      }
      double v8 = v6 + v13;

      break;
    case 4:
      double v14 = *v2;
      if (qword_1004C2B70 != -1) {
        swift_once();
      }
      double v15 = v14 - *(double *)&qword_1004CB4C8;
      [v5 frame];
      double v8 = v15 - CGRectGetHeight(v20);
      [v5 frame];
      goto LABEL_17;
    case 3:
      double v7 = *v2;
      if (qword_1004C2B70 != -1) {
        swift_once();
      }
      double v8 = v7 + *(double *)&qword_1004CB4C8 + *(double *)&qword_1004F8658;
      [v5 frame];
LABEL_17:
      CGRectGetHeight(*(CGRect *)&v9);

      return v8;
    default:
      [v5 frame];
      double v16 = CGRectGetWidth(v21) * -0.5;
      if (qword_1004C2B70 != -1) {
        swift_once();
      }
      double v8 = v6 + v16;
      [v5 frame];
      CGRectGetHeight(v22);

      break;
  }
  return v8;
}

uint64_t sub_1001071D4()
{
  if (qword_1004C2E78 != -1) {
    swift_once();
  }
  swift_retain();
  StateValue.wrappedValue.getter();
  uint64_t result = swift_release();
  switch(v1)
  {
    case 2:
      if (qword_1004C2E98 != -1) {
        uint64_t result = swift_once();
      }
      if (qword_1004C2B70 != -1) {
        return swift_once();
      }
      break;
    case 4:
      if (qword_1004C2B70 != -1) {
        uint64_t result = swift_once();
      }
      if (qword_1004C2E98 != -1) {
        return swift_once();
      }
      break;
    case 3:
      if (qword_1004C2E98 != -1) {
        uint64_t result = swift_once();
      }
      if (qword_1004C2B70 == -1) {
        return result;
      }
      return swift_once();
    default:
      if (qword_1004C2E98 != -1) {
        uint64_t result = swift_once();
      }
      if (qword_1004C2B70 != -1) {
        return swift_once();
      }
      break;
  }
  return result;
}

uint64_t sub_1001074D4()
{
  sub_1001071D4();
  if (qword_1004C2E98 != -1) {
    swift_once();
  }
  swift_retain();
  StateValue.wrappedValue.getter();
  uint64_t result = swift_release();
  if (v1 == 2)
  {
    if (qword_1004C2B78 != -1) {
      return swift_once();
    }
  }
  else
  {
    if (v1 != 4)
    {
      if (v1 == 3)
      {
        if (qword_1004C2B78 == -1) {
          return result;
        }
      }
      else if (qword_1004C2B78 == -1)
      {
        return result;
      }
      return swift_once();
    }
    if (qword_1004C2B78 != -1) {
      return swift_once();
    }
  }
  return result;
}

id sub_1001076E0(void *a1, long long *a2, void *a3, uint64_t a4, void *a5, long long *a6, void *a7, double a8, double a9, double a10, double a11, CGFloat a12)
{
  long long v53 = a6[1];
  long long v55 = *a6;
  long long v51 = a6[3];
  long long v52 = a6[2];
  long long v49 = a6[5];
  long long v50 = a6[4];
  uint64_t v21 = *((void *)a6 + 14);
  uint64_t v20 = *((void *)a6 + 15);
  long long v47 = *a2;
  long long v48 = a6[6];
  long long v45 = a2[2];
  long long v46 = a2[1];
  long long v43 = a2[4];
  long long v44 = a2[3];
  long long v41 = a2[6];
  long long v42 = a2[5];
  uint64_t v22 = *((void *)a2 + 14);
  uint64_t v23 = *((void *)a2 + 15);
  id v24 = [a1 layer];
  *(_OWORD *)&t1.CGFloat a = v47;
  *(_OWORD *)&t1.CGFloat c = v46;
  *(_OWORD *)&t1.CGFloat tx = v45;
  long long v63 = v44;
  long long v64 = v43;
  long long v65 = v42;
  long long v66 = v41;
  uint64_t v67 = v22;
  uint64_t v68 = v23;
  [v24 setTransform:&t1];

  double v25 = *(double *)(a4 + qword_1004CB4D8);
  double v26 = *(double *)(a4 + qword_1004CB4D8 + 8);
  [a3 frame];
  [a3 setFrame:v25, v26];
  [a5 frame];
  [a5 setFrame:a8, a9];
  id v27 = [a5 layer];
  *(_OWORD *)&t1.CGFloat a = v55;
  *(_OWORD *)&t1.CGFloat c = v53;
  *(_OWORD *)&t1.CGFloat tx = v52;
  long long v63 = v51;
  long long v64 = v50;
  long long v65 = v49;
  long long v66 = v48;
  uint64_t v67 = v21;
  uint64_t v68 = v20;
  [v27 setTransform:&t1];

  [a7 frame];
  [a7 setFrame:a10, a11];
  [a7 transform];
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  CGAffineTransformMakeScale(&t1, t1.a / fabs(t1.a) * sqrt(t1.a * t1.a + t1.c * t1.c), t1.a / fabs(t1.d) * sqrt(t1.b * t1.b + t1.d * t1.d));
  long long v54 = *(_OWORD *)&t1.c;
  long long v56 = *(_OWORD *)&t1.a;
  CGFloat v30 = t1.tx;
  CGFloat v31 = t1.ty;
  CGAffineTransformMakeRotation(&t1, a12);
  long long v32 = *(_OWORD *)&t1.a;
  long long v33 = *(_OWORD *)&t1.c;
  long long v34 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v56;
  *(_OWORD *)&t1.CGFloat c = v54;
  t1.CGFloat tx = v30;
  t1.CGFloat ty = v31;
  *(_OWORD *)&t2.CGFloat a = v32;
  *(_OWORD *)&t2.CGFloat c = v33;
  *(_OWORD *)&t2.CGFloat tx = v34;
  CGAffineTransformConcat(&v60, &t1, &t2);
  long long v57 = *(_OWORD *)&v60.c;
  *(_OWORD *)angleCGFloat a = *(_OWORD *)&v60.a;
  CGFloat v35 = v60.tx;
  CGFloat v36 = v60.ty;
  CGAffineTransformMakeTranslation(&t1, tx, ty);
  long long v37 = *(_OWORD *)&t1.a;
  long long v38 = *(_OWORD *)&t1.c;
  long long v39 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = *(_OWORD *)anglea;
  *(_OWORD *)&t1.CGFloat c = v57;
  t1.CGFloat tx = v35;
  t1.CGFloat ty = v36;
  *(_OWORD *)&t2.CGFloat a = v37;
  *(_OWORD *)&t2.CGFloat c = v38;
  *(_OWORD *)&t2.CGFloat tx = v39;
  CGAffineTransformConcat(&v60, &t1, &t2);
  CGAffineTransform t1 = v60;
  return [a7 setTransform:&t1];
}

uint64_t sub_100107A04()
{
  double v1 = sub_100106BE8();
  double v3 = v2;
  if (qword_1004C2E78 != -1) {
    swift_once();
  }
  double v4 = *(double *)&qword_1004F8658;
  id v5 = objc_allocWithZone((Class)type metadata accessor for EditButton());
  double v6 = sub_10008D480(1u, v1, v3, v4, v4);
  uint64_t v7 = *(void *)(v0 + qword_1004C7A48);
  *(void *)(v0 + qword_1004C7A48) = v6;

  return _objc_release_x1(v6, v7);
}

uint64_t sub_100107AC4()
{
  sub_1001071D4();
  double v2 = v1;
  double v4 = v3;
  if (qword_1004C2E98 != -1) {
    swift_once();
  }
  double v5 = *(double *)&qword_1004F8678;
  id v6 = objc_allocWithZone((Class)type metadata accessor for UndoButton());
  sub_100203858(1, v2, v4, v5, v5);
  uint64_t v8 = *(void *)(v0 + qword_1004C7A50);
  *(void *)(v0 + qword_1004C7A50) = v7;

  return _objc_release_x1(v7, v8);
}

uint64_t sub_100107B84()
{
  sub_1001074D4();
  double v2 = v1;
  double v4 = v3;
  if (qword_1004C2E98 != -1) {
    swift_once();
  }
  double v5 = *(double *)&qword_1004F8678;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v0;
  id v7 = objc_allocWithZone((Class)type metadata accessor for HistoryButton());
  uint64_t v8 = v0;
  uint64_t v9 = sub_1000949E0(1, (uint64_t)sub_100108CB8, v6, v2, v4, v5, v5);
  uint64_t v10 = *(void *)&v8[qword_1004C7A60];
  *(void *)&v8[qword_1004C7A60] = v9;

  return _objc_release_x1(v9, v10);
}

uint64_t sub_100107C88()
{
  return Subject<>.send()();
}

void sub_100107CD0(char a1)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  void *v9;
  void *v10;
  objc_class *v11;
  void *v12;
  objc_super v13;
  uint64_t v14;

  double v2 = *(void **)(v1 + qword_1004C7A60);
  if (v2)
  {
    double v4 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v1 + qword_1004CB4E8) + 144);
    double v5 = v2;
    uint64_t v6 = swift_retain();
    v4(&v14, v6);
    swift_release();
    if (v14 < 1)
    {
      uint64_t v8 = 0;
      if (a1)
      {
LABEL_4:
        uint64_t v9 = *(void **)&v5[OBJC_IVAR____TtC7Measure13HistoryButton_button];
        if (v9) {
          [v9 setEnabled:v8];
        }
LABEL_11:

        return;
      }
    }
    else
    {
      swift_retain();
      StateValue.wrappedValue.getter();
      swift_release();
      id v7 = *(void *)(v14 + 16);
      swift_bridgeObjectRelease();
      uint64_t v8 = v7 == 0;
      if (a1) {
        goto LABEL_4;
      }
    }
    uint64_t v10 = *(void **)&v5[OBJC_IVAR____TtC7Measure13HistoryButton_button];
    if (v10
      && (CGRect v11 = (objc_class *)type metadata accessor for AnimatingUIControl(),
          (CGRect v12 = (void *)swift_dynamicCastClass()) != 0))
    {
      v13.receiver = v12;
      v13.super_class = v11;
      [super setEnabled:v8];
    }
    else
    {
      [v10 setEnabled:v8];
    }
    goto LABEL_11;
  }
}

uint64_t sub_100107E40()
{
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t result;
  uint64_t Strong;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void (*)(), uint64_t);
  uint64_t (*v11)(uint64_t *);
  void (*v12)(uint64_t *, void);
  uint64_t v13;
  uint64_t v14;
  char v15;

  uint64_t v1 = qword_1004CB4E8;
  double v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v0 + qword_1004CB4E8) + 144);
  double v3 = swift_retain();
  v2(&v14, v3);
  uint64_t result = swift_release();
  if (v15 == 1)
  {
    id Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = Strong;
      id v7 = *(uint64_t (**)(uint64_t))(**(void **)(Strong + 80) + 200);
      uint64_t v8 = swift_retain();
      uint64_t v9 = v7(v8);
      swift_release();
      uint64_t v10 = *(void (**)(void (*)(), uint64_t))(*(void *)v9 + 280);
      swift_retain();
      v10(sub_10009384C, v6);
      swift_release();
      swift_release_n();
    }
    CGRect v11 = *(uint64_t (**)(uint64_t *))(**(void **)(v0 + v1) + 400);
    swift_retain();
    CGRect v12 = (void (*)(uint64_t *, void))v11(&v14);
    *(unsigned char *)(v13 + 8) = 0;
    v12(&v14, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100107FFC()
{
  uint64_t v9 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  uint64_t v8 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  uint64_t v7 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + qword_1004CB4E8) + 200);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  uint64_t v6 = v0;
  (*(void (**)(uint64_t (*)(), unsigned char *))(*(void *)v3 + 296))(sub_100108BCC, v5);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)();
  return swift_release();
}

unsigned __int8 *sub_100108240(unsigned __int8 *result, void *a2)
{
  unsigned int v2 = *result - 1;
  if (*((unsigned char *)a2 + qword_1004CB518) != v2 < 3)
  {
    uint64_t v3 = a2;
    *((unsigned char *)a2 + qword_1004CB518) = v2 < 3;
    double v4 = self;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_100108C88;
    *(void *)(v6 + 24) = v5;
    v9[4] = sub_100039980;
    v9[5] = v6;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_1000FA194;
    v9[3] = &unk_10048E738;
    uint64_t v7 = _Block_copy(v9);
    id v8 = v3;
    swift_retain();
    swift_release();
    [v4 performWithoutAnimation:v7];
    _Block_release(v7);
    LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = (unsigned __int8 *)swift_release();
    if (v3) {
      __break(1u);
    }
  }
  return result;
}

void sub_1001083D4()
{
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  sub_100106850(v0);
}

id sub_10010842C(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = &v4[qword_1004CB4D8];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  CGRect v11 = &v4[qword_1004CB4E0];
  *(void *)CGRect v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = qword_1004CB4E8;
  sub_100012894(&qword_1004CB968);
  swift_getKeyPath();
  double v13 = v4;
  *(void *)&v4[v12] = MutableStateBinding.__allocating_init(_:_:)();
  uint64_t v14 = qword_1004CB4F0;
  uint64_t v15 = sub_100012894(&qword_1004C5908);
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1004F8630;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 272);
  swift_retain();
  *(void *)&v13[v14] = v18(KeyPath, v17);
  uint64_t v19 = qword_1004CB4F8;
  uint64_t v20 = sub_100012894(&qword_1004C6AA0);
  uint64_t v21 = swift_getKeyPath();
  uint64_t v22 = qword_1004F8630;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 272);
  swift_retain();
  *(void *)&v13[v19] = v23(v21, v22);
  uint64_t v24 = qword_1004CB500;
  uint64_t v25 = sub_100012894(&qword_1004CB970);
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = qword_1004F8630;
  double v28 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 272);
  swift_retain();
  *(void *)&v13[v24] = v28(v26, v27);
  uint64_t v29 = qword_1004CB508;
  sub_100012894(&qword_1004CB958);
  swift_allocObject();
  *(void *)&v13[v29] = PassthroughSubject.init()();
  uint64_t v30 = qword_1004CB510;
  uint64_t v31 = sub_100012894(&qword_1004CB978);
  uint64_t v32 = swift_getKeyPath();
  uint64_t v33 = qword_1004F8630;
  long long v34 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 272);
  swift_retain();
  *(void *)&v13[v30] = v34(v32, v33);
  v13[qword_1004CB518] = 1;

  v36.receiver = v13;
  v36.super_class = ObjectType;
  return [super initWithFrame:a1, a2, a3, a4];
}

id sub_1001086E8(double a1, double a2, double a3, double a4)
{
  return sub_10010842C(a1, a2, a3, a4);
}

id sub_10010870C(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  double v4 = &v1[qword_1004CB4D8];
  *(void *)double v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = &v1[qword_1004CB4E0];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  uint64_t v6 = qword_1004CB4E8;
  sub_100012894(&qword_1004CB968);
  swift_getKeyPath();
  uint64_t v7 = v1;
  *(void *)&v1[v6] = MutableStateBinding.__allocating_init(_:_:)();
  uint64_t v8 = qword_1004CB4F0;
  uint64_t v9 = sub_100012894(&qword_1004C5908);
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1004F8630;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 272);
  swift_retain();
  *(void *)&v7[v8] = v12(KeyPath, v11);
  uint64_t v13 = qword_1004CB4F8;
  uint64_t v14 = sub_100012894(&qword_1004C6AA0);
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = qword_1004F8630;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 272);
  swift_retain();
  *(void *)&v7[v13] = v17(v15, v16);
  uint64_t v18 = qword_1004CB500;
  uint64_t v19 = sub_100012894(&qword_1004CB970);
  uint64_t v20 = swift_getKeyPath();
  uint64_t v21 = qword_1004F8630;
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 272);
  swift_retain();
  *(void *)&v7[v18] = v22(v20, v21);
  uint64_t v23 = qword_1004CB508;
  sub_100012894(&qword_1004CB958);
  swift_allocObject();
  *(void *)&v7[v23] = PassthroughSubject.init()();
  uint64_t v24 = qword_1004CB510;
  uint64_t v25 = sub_100012894(&qword_1004CB978);
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = qword_1004F8630;
  double v28 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 272);
  swift_retain();
  *(void *)&v7[v24] = v28(v26, v27);
  v7[qword_1004CB518] = 1;

  v31.receiver = v7;
  v31.super_class = ObjectType;
  [super initWithCoder:a1];

  return v29;
}

id sub_1001089AC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10010870C(a3);
}

uint64_t sub_1001089D4()
{
  sub_100028914(*(void *)(v0 + qword_1004CB4E0));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100108A68(uint64_t a1)
{
  sub_100028914(*(void *)(a1 + qword_1004CB4E0));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for EditViewSpatial()
{
  uint64_t result = qword_1004CB548;
  if (!qword_1004CB548) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100108B54()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100108BC4()
{
  return type metadata accessor for EditViewSpatial();
}

uint64_t sub_100108BCC()
{
  return sub_100107E40();
}

void sub_100108BF8()
{
}

void sub_100108C20()
{
}

unsigned __int8 *sub_100108C48(unsigned __int8 *a1)
{
  return sub_100108240(a1, *(void **)(v1 + 16));
}

uint64_t sub_100108C50()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100108C88()
{
}

uint64_t sub_100108C90()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100108CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100108CB0()
{
  return swift_release();
}

uint64_t sub_100108CB8()
{
  return sub_100107C88();
}

unint64_t sub_100108CC0()
{
  unint64_t result = qword_1004CB960;
  if (!qword_1004CB960)
  {
    sub_100016EF4(&qword_1004CB958);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CB960);
  }
  return result;
}

uint64_t sub_100108D1C()
{
  return _swift_deallocObject(v0, 352, 7);
}

id sub_100108D74()
{
  return sub_1001076E0(*(void **)(v0 + 16), (long long *)(v0 + 24), *(void **)(v0 + 152), *(void *)(v0 + 160), *(void **)(v0 + 168), (long long *)(v0 + 192), *(void **)(v0 + 320), *(double *)(v0 + 176), *(double *)(v0 + 184), *(double *)(v0 + 328), *(double *)(v0 + 336), *(CGFloat *)(v0 + 344));
}

void sub_100108E3C()
{
  v15.receiver = v0;
  v15.super_class = (Class)swift_getObjectType();
  [super viewDidLoad];
  id v1 = [v0 tableView];
  if (v1)
  {
    uint64_t v2 = v1;
    [v1 setAllowsSelection:0];

    id v3 = [v0 tableView];
    if (v3)
    {
      double v4 = v3;
      type metadata accessor for SwitchCell();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v4 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v6];

      id v7 = [v0 tableView];
      if (v7)
      {
        uint64_t v8 = v7;
        type metadata accessor for SliderCell();
        uint64_t v9 = swift_getObjCClassFromMetadata();
        NSString v10 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v8 registerClass:v9 forCellReuseIdentifier:v10];

        id v11 = [v0 tableView];
        if (v11)
        {
          uint64_t v12 = v11;
          type metadata accessor for ColorCell();
          uint64_t v13 = swift_getObjCClassFromMetadata();
          NSString v14 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v12 registerClass:v13 forCellReuseIdentifier:v14];

          return;
        }
      }
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for DefaultsViewController()
{
  return self;
}

unint64_t sub_100109268(void *a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7Measure22DefaultsViewController_groups);
  unint64_t result = IndexPath.section.getter();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (result >= *(void *)(v3 + 16))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(v3 + 24 * result + 48);
  swift_bridgeObjectRetain();
  unint64_t result = IndexPath.row.getter();
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < *(void *)(v5 + 16))
  {
    uint64_t v6 = v5 + 48 * result;
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v7 = *(void *)(v6 + 40);
    uint64_t v10 = *(void *)(v6 + 48);
    uint64_t v9 = *(void *)(v6 + 56);
    uint64_t v11 = *(void *)(v6 + 64);
    char v12 = *(unsigned char *)(v6 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v15 = [a1 dequeueReusableCellWithIdentifier:v13 forIndexPath:isa];

    type metadata accessor for DefaultCell();
    uint64_t v16 = (void *)swift_dynamicCastClassUnconditional();
    uint64_t v17 = (char *)v16 + OBJC_IVAR____TtC7Measure11DefaultCell_def;
    uint64_t v18 = *(void *)((char *)v16 + OBJC_IVAR____TtC7Measure11DefaultCell_def);
    uint64_t v19 = *(void *)((char *)v16 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8);
    *(void *)uint64_t v17 = v8;
    *((void *)v17 + 1) = v7;
    *((void *)v17 + 2) = v10;
    *((void *)v17 + 3) = v9;
    *((void *)v17 + 4) = v11;
    v17[40] = v12;
    uint64_t v20 = sub_10004ED48(v18, v19);
    (*(void (**)(uint64_t))((swift_isaMask & *v16) + 0x110))(v20);
    return (unint64_t)v16;
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_1001097A0()
{
  uint64_t v1 = OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator);
  if (v2)
  {
    id v3 = v2;
    [v3 stopAnimation:1];
    double v4 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback);
  if (v5)
  {
    uint64_t v6 = swift_retain();
    v5(v6);
    sub_100028914((uint64_t)v5);
  }
  else
  {
    __break(1u);
  }
}

void sub_100109840()
{
  uint64_t v1 = self;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  NSString v14 = sub_100109CB4;
  uint64_t v15 = v2;
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 1107296256;
  char v12 = sub_100049AB4;
  NSString v13 = &unk_10048E800;
  id v3 = _Block_copy(&v10);
  id v4 = v0;
  swift_release();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  NSString v14 = sub_100109CD4;
  uint64_t v15 = v5;
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 1107296256;
  char v12 = sub_100036C40;
  NSString v13 = &unk_10048E850;
  uint64_t v6 = _Block_copy(&v10);
  uint64_t v7 = (char *)v4;
  swift_release();
  id v8 = [v1 runningPropertyAnimatorWithDuration:0x20000 delay:v3 options:v6 animations:0.2 completion:0.0];
  _Block_release(v6);
  _Block_release(v3);
  uint64_t v9 = *(void **)&v7[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator];
  *(void *)&v7[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator] = v8;
}

uint64_t sub_100109AE8(uint64_t result)
{
  uint64_t v1 = *(void (**)(uint64_t))(result + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback);
  if (v1)
  {
    uint64_t v2 = swift_retain();
    v1(v2);
    return sub_100028914((uint64_t)v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100109BC0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpatialPlatterTitleButton();
  return [super dealloc];
}

uint64_t type metadata accessor for SpatialPlatterTitleButton()
{
  return self;
}

uint64_t sub_100109C7C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100109CB4()
{
  return sub_100109AE8(*(void *)(v0 + 16));
}

uint64_t sub_100109CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100109CCC()
{
  return swift_release();
}

void sub_100109CD4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator);
  *(void *)(v1 + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator) = 0;
}

uint64_t destroy for PersonHeightState()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PersonHeightState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  long long v4 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v4;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  long long v6 = *(_OWORD *)(a2 + 208);
  long long v7 = *(_OWORD *)(a2 + 224);
  long long v8 = *(_OWORD *)(a2 + 240);
  long long v9 = *(_OWORD *)(a2 + 256);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v8;
  *(_OWORD *)(a1 + 256) = v9;
  *(_OWORD *)(a1 + 208) = v6;
  *(_OWORD *)(a1 + 224) = v7;
  long long v10 = *(_OWORD *)(a2 + 288);
  long long v11 = *(_OWORD *)(a2 + 304);
  long long v12 = *(_OWORD *)(a2 + 320);
  long long v13 = *(_OWORD *)(a2 + 336);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(_OWORD *)(a1 + 320) = v12;
  *(_OWORD *)(a1 + 336) = v13;
  *(_OWORD *)(a1 + 288) = v10;
  *(_OWORD *)(a1 + 304) = v11;
  long long v14 = *(_OWORD *)(a2 + 360);
  long long v15 = *(_OWORD *)(a2 + 376);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(_OWORD *)(a1 + 360) = v14;
  *(_OWORD *)(a1 + 376) = v15;
  long long v16 = *(_OWORD *)(a2 + 400);
  long long v17 = *(_OWORD *)(a2 + 416);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v16;
  *(_OWORD *)(a1 + 416) = v17;
  int v18 = *(_DWORD *)(a2 + 436);
  *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
  *(_DWORD *)(a1 + 436) = v18;
  int v19 = *(_DWORD *)(a2 + 444);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(_DWORD *)(a1 + 444) = v19;
  int v20 = *(_DWORD *)(a2 + 452);
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  *(_DWORD *)(a1 + 452) = v20;
  long long v21 = *(_OWORD *)(a2 + 464);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v21;
  uint64_t v22 = *(void *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = v22;
  long long v23 = *(_OWORD *)(a2 + 512);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = v23;
  *(unsigned char *)(a1 + 529) = *(unsigned char *)(a2 + 529);
  *(unsigned char *)(a1 + 530) = *(unsigned char *)(a2 + 530);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PersonHeightState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  long long v4 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v7;
  long long v8 = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v8;
  long long v10 = *(_OWORD *)(a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  long long v12 = *(_OWORD *)(a2 + 224);
  long long v13 = *(_OWORD *)(a2 + 240);
  long long v14 = *(_OWORD *)(a2 + 256);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  long long v15 = *(_OWORD *)(a2 + 304);
  long long v16 = *(_OWORD *)(a2 + 320);
  long long v17 = *(_OWORD *)(a2 + 336);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(_OWORD *)(a1 + 320) = v16;
  *(_OWORD *)(a1 + 336) = v17;
  *(_OWORD *)(a1 + 304) = v15;
  long long v18 = *(_OWORD *)(a2 + 360);
  long long v19 = *(_OWORD *)(a2 + 376);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(_OWORD *)(a1 + 360) = v18;
  *(_OWORD *)(a1 + 376) = v19;
  long long v20 = *(_OWORD *)(a2 + 400);
  long long v21 = *(_OWORD *)(a2 + 416);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v20;
  *(_OWORD *)(a1 + 416) = v21;
  int v22 = *(_DWORD *)(a2 + 436);
  *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
  *(_DWORD *)(a1 + 436) = v22;
  int v23 = *(_DWORD *)(a2 + 444);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(_DWORD *)(a1 + 444) = v23;
  int v24 = *(_DWORD *)(a2 + 452);
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  *(_DWORD *)(a1 + 452) = v24;
  long long v25 = *(_OWORD *)(a2 + 464);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v25;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v26 = *(_OWORD *)(a2 + 512);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = v26;
  *(unsigned char *)(a1 + 529) = *(unsigned char *)(a2 + 529);
  *(unsigned char *)(a1 + 530) = *(unsigned char *)(a2 + 530);
  return a1;
}

void *initializeWithTake for PersonHeightState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x213uLL);
}

uint64_t assignWithTake for PersonHeightState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  long long v4 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v4;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  long long v6 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v6;
  long long v7 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v7;
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  long long v8 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v8;
  long long v9 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v9;
  long long v10 = *(_OWORD *)(a2 + 360);
  long long v11 = *(_OWORD *)(a2 + 376);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(_OWORD *)(a1 + 360) = v10;
  *(_OWORD *)(a1 + 376) = v11;
  long long v12 = *(_OWORD *)(a2 + 400);
  long long v13 = *(_OWORD *)(a2 + 416);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v12;
  *(_OWORD *)(a1 + 416) = v13;
  int v14 = *(_DWORD *)(a2 + 436);
  *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
  *(_DWORD *)(a1 + 436) = v14;
  int v15 = *(_DWORD *)(a2 + 444);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(_DWORD *)(a1 + 444) = v15;
  int v16 = *(_DWORD *)(a2 + 452);
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  *(_DWORD *)(a1 + 452) = v16;
  long long v17 = *(_OWORD *)(a2 + 464);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v17;
  uint64_t v18 = *(void *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = v18;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_WORD *)(a1 + 528) = *(_WORD *)(a2 + 528);
  *(unsigned char *)(a1 + 530) = *(unsigned char *)(a2 + 530);
  return a1;
}

uint64_t getEnumTagSinglePayload for PersonHeightState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 531)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 496);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PersonHeightState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 520) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 530) = 0;
    *(_WORD *)(result + 528) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 531) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 531) = 0;
    }
    if (a2) {
      *(void *)(result + 496) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PersonHeightState()
{
  return &type metadata for PersonHeightState;
}

id sub_10010A2C0()
{
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  id result = (id)*((void *)&xmmword_1004F8000 + 1);
  if (*((void *)&xmmword_1004F8000 + 1))
  {
    id v1 = (id)*((void *)&xmmword_1004F8000 + 1);
    qword_1004F83D0 = Contexts.PrivateQueue.init(_:)();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10010A340(void *__src, const void *a2)
{
  memcpy(v4, __src, 0x213uLL);
  memcpy(__dst, a2, 0x213uLL);
  return sub_10010A414(v4, __dst) & 1;
}

unint64_t sub_10010A398(uint64_t a1)
{
  unint64_t result = sub_10010A3C0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10010A3C0()
{
  unint64_t result = qword_1004CBA28;
  if (!qword_1004CBA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CBA28);
  }
  return result;
}

uint64_t sub_10010A414(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if ((*a1 ^ *a2) & 1) != 0 || ((a1[1] ^ a2[1]) & 1) != 0 || ((a1[2] ^ a2[2])) {
    goto LABEL_108;
  }
  char v2 = a2[24];
  if (a1[24])
  {
    if (!a2[24]) {
      return v2 & 1;
    }
  }
  else
  {
    if (a2[24]) {
      goto LABEL_108;
    }
    BOOL v3 = *((double *)a1 + 1) == *((double *)a2 + 1) && *((double *)a1 + 2) == *((double *)a2 + 2);
    if (!v3) {
      goto LABEL_108;
    }
  }
  char v2 = a2[48];
  if (a1[48])
  {
    if (!a2[48]) {
      return v2 & 1;
    }
  }
  else
  {
    if (a2[48]) {
      goto LABEL_108;
    }
    char v2 = 0;
    if (*((double *)a1 + 4) != *((double *)a2 + 4) || *((double *)a1 + 5) != *((double *)a2 + 5)) {
      return v2 & 1;
    }
  }
  char v2 = a2[72];
  if (a1[72])
  {
    if (!a2[72]) {
      return v2 & 1;
    }
  }
  else
  {
    if (a2[72]) {
      goto LABEL_108;
    }
    char v2 = 0;
    if (*((double *)a1 + 7) != *((double *)a2 + 7) || *((double *)a1 + 8) != *((double *)a2 + 8)) {
      return v2 & 1;
    }
  }
  char v2 = a2[96];
  if (a1[96])
  {
    if (!a2[96]) {
      return v2 & 1;
    }
  }
  else
  {
    if (a2[96]) {
      goto LABEL_108;
    }
    char v2 = 0;
    if (*((double *)a1 + 10) != *((double *)a2 + 10) || *((double *)a1 + 11) != *((double *)a2 + 11)) {
      return v2 & 1;
    }
  }
  char v2 = a2[120];
  if (a1[120])
  {
    if (!a2[120]) {
      return v2 & 1;
    }
  }
  else
  {
    if (a2[120]) {
      goto LABEL_108;
    }
    char v2 = 0;
    if (*((double *)a1 + 13) != *((double *)a2 + 13) || *((double *)a1 + 14) != *((double *)a2 + 14)) {
      return v2 & 1;
    }
  }
  char v2 = a2[192];
  if (a1[192])
  {
    if (!a2[192]) {
      return v2 & 1;
    }
  }
  else if ((a2[192] & 1) != 0 {
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 10), *((float32x4_t *)a2 + 10)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 11), *((float32x4_t *)a2 + 11))), vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 9), *((float32x4_t *)a2 + 9)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 8), *((float32x4_t *)a2 + 8))))) & 0x80000000) == 0)
  }
  {
    goto LABEL_108;
  }
  if (a1[272])
  {
    if (!a2[272]) {
      goto LABEL_108;
    }
  }
  else if ((a2[272] & 1) != 0 {
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 15), *((float32x4_t *)a2 + 15)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 16), *((float32x4_t *)a2 + 16))), vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 14), *((float32x4_t *)a2 + 14)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 13), *((float32x4_t *)a2 + 13))))) & 0x80000000) == 0)
  }
  {
    goto LABEL_108;
  }
  double v28 = a1 + 272;
  id v29 = a2 + 272;
  char v2 = a2[352];
  if (a1[352])
  {
    if (!a2[352]) {
      return v2 & 1;
    }
  }
  else if ((a2[352] & 1) != 0 {
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 20), *((float32x4_t *)a2 + 20)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 21), *((float32x4_t *)a2 + 21))), vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 19), *((float32x4_t *)a2 + 19)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 18), *((float32x4_t *)a2 + 18))))) & 0x80000000) == 0)
  }
  {
    goto LABEL_108;
  }
  char v2 = a2[392];
  if (a1[392])
  {
    if (!a2[392]) {
      return v2 & 1;
    }
  }
  else if ((a2[392] & 1) != 0 || !CGRectEqualToRect(*(CGRect *)(a1 + 360), *(CGRect *)(a2 + 360)))
  {
    goto LABEL_108;
  }
  char v2 = v29[160];
  if (v28[160])
  {
    if (!v29[160]) {
      return v2 & 1;
    }
  }
  else if ((v29[160] & 1) != 0 || !CGRectEqualToRect(*(CGRect *)(a1 + 400), *(CGRect *)(a2 + 400)))
  {
    goto LABEL_108;
  }
  char v2 = v29[168];
  if (v28[168])
  {
    if (!v29[168]) {
      return v2 & 1;
    }
  }
  else
  {
    if (*((float *)a1 + 109) != *((float *)a2 + 109)) {
      char v2 = 1;
    }
    if (v2) {
      goto LABEL_108;
    }
  }
  char v2 = v29[176];
  if (v28[176])
  {
    if (!v29[176]) {
      return v2 & 1;
    }
  }
  else
  {
    if (*((float *)a1 + 111) != *((float *)a2 + 111)) {
      char v2 = 1;
    }
    if (v2) {
      goto LABEL_108;
    }
  }
  char v2 = v29[184];
  if (v28[184])
  {
    if (!v29[184]) {
      return v2 & 1;
    }
  }
  else
  {
    if (*((float *)a1 + 113) != *((float *)a2 + 113)) {
      char v2 = 1;
    }
    if (v2) {
      goto LABEL_108;
    }
  }
  if (v28[208])
  {
    if ((v29[208] & 1) == 0) {
      goto LABEL_108;
    }
  }
  else
  {
    if (v29[208]) {
      goto LABEL_108;
    }
    uint64_t v4 = 0;
    long long v5 = *((_OWORD *)a1 + 29);
    long long v6 = *((_OWORD *)a2 + 29);
    while (1)
    {
      long long v32 = v5;
      float v8 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
      long long v33 = v6;
      float v9 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
      BOOL v7 = v8 == v9;
      if (v4 == 2) {
        break;
      }
      while (1)
      {
        ++v4;
        if (v7) {
          break;
        }
        BOOL v7 = 0;
        char v2 = 0;
        if (v4 == 2) {
          return v2 & 1;
        }
      }
    }
    if (v8 != v9) {
      goto LABEL_108;
    }
  }
  uint64_t v10 = *((void *)a1 + 62);
  uint64_t v11 = *((void *)a2 + 62);
  if (!v10)
  {
    if (!v11)
    {
      sub_10010AA90((uint64_t)a2);
      goto LABEL_97;
    }
LABEL_108:
    char v2 = 0;
    return v2 & 1;
  }
  if (!v11) {
    goto LABEL_108;
  }
  if (*((void *)a1 + 61) == *((void *)a2 + 61) && v10 == v11
    || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), v2 = 0, (v12 & 1) != 0))
  {
LABEL_97:
    if (v28[256])
    {
      if ((v29[256] & 1) == 0) {
        goto LABEL_108;
      }
    }
    else
    {
      if (v29[256]) {
        goto LABEL_108;
      }
      uint64_t v13 = 0;
      long long v14 = *((_OWORD *)a1 + 32);
      long long v15 = *((_OWORD *)a2 + 32);
      while (1)
      {
        long long v30 = v14;
        float v17 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
        long long v31 = v15;
        float v18 = *(float *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
        BOOL v16 = v17 == v18;
        if (v13 == 2) {
          break;
        }
        while (1)
        {
          ++v13;
          if (v16) {
            break;
          }
          BOOL v16 = 0;
          char v2 = 0;
          if (v13 == 2) {
            return v2 & 1;
          }
        }
      }
      if (v17 != v18) {
        goto LABEL_108;
      }
    }
    int v19 = a1[529];
    int v20 = a2[529];
    if (v19 == 2)
    {
      BOOL v3 = v20 == 2;
      int v22 = a1;
      long long v21 = a2;
      if (!v3) {
        goto LABEL_108;
      }
    }
    else
    {
      char v2 = 0;
      BOOL v24 = (v19 & 1) == 0;
      if (v20 == 2) {
        return v2 & 1;
      }
      char v25 = v24 ^ v20;
      int v22 = a1;
      long long v21 = a2;
      if ((v25 & 1) == 0) {
        return v2 & 1;
      }
    }
    char v2 = ((v22[530] & 1) == 0) ^ v21[530];
  }
  return v2 & 1;
}

uint64_t sub_10010AA90(uint64_t a1)
{
  return a1;
}

uint64_t sub_10010AABC()
{
  swift_bridgeObjectRelease();
  sub_10002F0C4(v0 + 24);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MainLoopLocksteppedStateObserver()
{
  return self;
}

uint64_t sub_10010AB28@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_10002EFD0(v1 + 24, a1);
}

uint64_t sub_10010AB74(uint64_t a1)
{
  swift_beginAccess();
  sub_10002EF68(a1, v1 + 24);
  return swift_endAccess();
}

uint64_t (*sub_10010ABC8())()
{
  return j__swift_endAccess;
}

uint64_t sub_10010AC1C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10010AC54(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10010AC9C())()
{
  return j_j__swift_endAccess;
}

void sub_10010ACF0()
{
}

uint64_t initializeBufferWithCopyOfBuffer for MeasureAppState(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MeasureAppState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MeasureAppState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeasureAppState()
{
  return &type metadata for MeasureAppState;
}

uint64_t sub_10010ADF8()
{
  uint64_t result = Contexts.UIKit.init()();
  qword_1004F83D8 = result;
  return result;
}

id sub_10010AE18@<X0>(void *a1@<X8>)
{
  if (qword_1004C2B88 != -1) {
    swift_once();
  }
  int v2 = (void *)qword_1004F83D8;
  *a1 = qword_1004F83D8;

  return v2;
}

uint64_t sub_10010AE84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  int v4 = a1[2];
  int v5 = a1[3];
  uint64_t v6 = *a2;
  int v7 = a2[1];
  int v8 = a2[2];
  int v9 = a2[3];
  int v10 = a2[4];
  if (a1[4]) {
    uint64_t v11 = &_mh_execute_header;
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v12 = v5 == 0;
  uint64_t v13 = 0x1000000;
  if (v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = 0x1000000;
  }
  BOOL v12 = v4 == 0;
  uint64_t v15 = 0x10000;
  if (v12) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = 0x10000;
  }
  BOOL v12 = v3 == 0;
  uint64_t v17 = 256;
  if (v12) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = 256;
  }
  unint64_t v19 = v18 | v2 | v16 | v14 | (unint64_t)v11;
  if (v10) {
    int v20 = &_mh_execute_header;
  }
  else {
    int v20 = 0;
  }
  if (!v9) {
    uint64_t v13 = 0;
  }
  if (!v8) {
    uint64_t v15 = 0;
  }
  if (!v7) {
    uint64_t v17 = 0;
  }
  return sub_10010AF9C(v19, v17 | v6 | v15 | v13 | (unint64_t)v20);
}

unint64_t sub_10010AF20(uint64_t a1)
{
  unint64_t result = sub_10010AF48();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10010AF48()
{
  unint64_t result = qword_1004CBBC8;
  if (!qword_1004CBBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CBBC8);
  }
  return result;
}

uint64_t sub_10010AF9C(unint64_t a1, unint64_t a2)
{
  if (a2 != a1) {
    return 0;
  }
  if ((a1 & 0x100) != 0) {
    uint64_t v5 = 0x6C6576656CLL;
  }
  else {
    uint64_t v5 = 0x6572757361656DLL;
  }
  if ((a1 & 0x100) != 0) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v7 = 0x6C6576656CLL;
  }
  else {
    uint64_t v7 = 0x6572757361656DLL;
  }
  if ((a2 & 0x100) != 0) {
    unint64_t v8 = 0xE500000000000000;
  }
  else {
    unint64_t v8 = 0xE700000000000000;
  }
  if (v5 == v7 && v6 == v8)
  {
    uint64_t v9 = (a2 >> 16) & 1;
    swift_bridgeObjectRelease_n();
    uint64_t result = 0;
    if (((a1 >> 16) & 1) != v9) {
      return result;
    }
    goto LABEL_21;
  }
  uint64_t v10 = (a2 >> 16) & 1;
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if ((a1 >> 16) & 1) == v10 && (v11)
  {
LABEL_21:
    if (((a1 >> 24) & 1) == ((a2 >> 24) & 1)) {
      return ((a1 & (unint64_t)&_mh_execute_header) == 0) ^ BYTE4(a2) & 1u;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MeasureAppState.SpringboardState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010B184);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeasureAppState.SpringboardState()
{
  return &type metadata for MeasureAppState.SpringboardState;
}

unint64_t sub_10010B1C0()
{
  unint64_t result = qword_1004CBBD0;
  if (!qword_1004CBBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004CBBD0);
  }
  return result;
}

char *sub_10010B214(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label;
  type metadata accessor for InteractiveLabel();
  id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  char v11 = v4;
  *(void *)&v4[v9] = [v10 initWithFrame:0.0, 0.0, 0.0, 0.0];

  v16.receiver = v11;
  v16.super_class = (Class)type metadata accessor for ViewWithInteractiveLabel();
  BOOL v12 = (char *)objc_msgSendSuper2(&v16, "initWithFrame:", a1, a2, a3, a4);
  uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label];
  uint64_t v14 = v12;
  [v13 setUserInteractionEnabled:1];
  [v14 addSubview:v13];
  [v13 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_10010B484();

  return v14;
}

char *sub_10010B354(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label;
  type metadata accessor for InteractiveLabel();
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 initWithFrame:0.0, 0.0, 0.0, 0.0];

  v11.receiver = v5;
  v11.super_class = (Class)type metadata accessor for ViewWithInteractiveLabel();
  unsigned int v6 = (char *)[super initWithCoder:a1];
  uint64_t v7 = v6;
  if (v6)
  {
    unint64_t v8 = *(void **)&v6[OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label];
    uint64_t v9 = v6;
    [v8 setUserInteractionEnabled:1];
    [v9 addSubview:v8];
    [v8 setTranslatesAutoresizingMaskIntoConstraints:0];
    sub_10010B484();
  }
  return v7;
}

void sub_10010B484()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  sub_100012894((uint64_t *)&unk_1004CEA00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003FD540;
  id v4 = *(void **)&v1[OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label];
  id v5 = [v4 bottomAnchor];
  id v6 = [v1 bottomAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v3 + 32) = v7;
  id v8 = [v4 leadingAnchor];
  id v9 = [v1 leadingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v3 + 40) = v10;
  id v11 = [v4 trailingAnchor];
  id v12 = [v1 trailingAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  *(void *)(v3 + 48) = v13;
  specialized Array._endMutation()();
  sub_100029878();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

id sub_10010B678()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ViewWithInteractiveLabel();
  return [super dealloc];
}

uint64_t type metadata accessor for ViewWithInteractiveLabel()
{
  return self;
}

id sub_10010B7B0(void *a1)
{
  v12.receiver = v1;
  v12.super_class = (Class)swift_getObjectType();
  [super initWithCoder:a1];
  id v4 = v3;
  if (v3)
  {
    id v5 = (char *)v3;
    sub_10010B8BC();
    id v7 = v6;
    id v9 = v8;
    id v10 = *(void **)&v5[OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label];
    [v10 setFont:v6];
    [v10 setTextColor:v9];

    a1 = v7;
  }

  return v4;
}

uint64_t type metadata accessor for SecondaryLabelStackLabel()
{
  return self;
}

void sub_10010B8BC()
{
  uint64_t v0 = self;
  id v1 = [v0 preferredFontForTextStyle:UIFontTextStyleSubheadline];
  id v2 = [v1 fontDescriptor];

  id v3 = [v2 fontDescriptorWithSymbolicTraits:2];
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  [v3 pointSize];

  id v4 = [v0 preferredFontForTextStyle:UIFontTextStyleTitle3];
  id v5 = [v4 fontDescriptor];

  id v6 = [v5 fontDescriptorWithSymbolicTraits:2];
  if (!v6)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  id v7 = [v0 fontWithDescriptor:v6 size:0.0];

  [v7 pointSize];
  id v8 = [v0 preferredFontForTextStyle:UIFontTextStyleTitle3];
  id v9 = [v8 fontDescriptor];

  id v10 = [v9 fontDescriptorWithSymbolicTraits:2];
  if (v10)
  {
    [v0 fontWithDescriptor:v10 size:0.0];

    id v11 = [self secondaryLabelColor];
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_10010BAF0()
{
  uint64_t v1 = v0;
  static PlaneSelector.DebuggerClass[0] = type metadata accessor for SCNPlaneSelectionDebugger();
  static PlaneSelector.DebuggerClass[1] = &off_100491CA0;
  static LocalPlaneDetector.DebuggerClass[0] = type metadata accessor for SCNLocalPlaneDebugger();
  static LocalPlaneDetector.DebuggerClass[1] = &off_100489280;
  static SegmentationProcessor.DebuggerClass[0] = type metadata accessor for SCNSegmentationDebugger();
  static SegmentationProcessor.DebuggerClass[1] = &protocol witness table for SCNSegmentationDebugger;
  static PatchTracker.DebuggerClass[0] = type metadata accessor for SCNPatchDebugger();
  static PatchTracker.DebuggerClass[1] = &protocol witness table for SCNPatchDebugger;
  id v2 = [self sharedApplication];
  [v2 setIdleTimerDisabled:1];

  sub_100111974();
  if (qword_1004C2B18 != -1) {
    swift_once();
  }
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  id v3 = [self standardUserDefaults];
  id v4 = [v3 dictionaryRepresentation];

  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v5._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x6665442072657355;
  v6._object = (void *)0xEF0A3A73746C7561;
  Log.debug(_:isPrivate:)(v6, 0);
  swift_bridgeObjectRelease();
  type metadata accessor for LinesRenderer();
  uint64_t v7 = swift_allocObject();
  *(void *)(v1 + 224) = sub_100111360(v7);
  swift_release();
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  qword_1004F7FF0 = *(void *)(v1 + 224);
  swift_retain();
  swift_release();
  sub_10010C23C();
  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  if (static UIDevice.isIPhone()())
  {
    sub_10010C530();
    sub_10010C7B8();
    id v8 = *(void **)(v1 + 104);
    if (!v8)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    sub_100012894((uint64_t *)&unk_1004CEA00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1003F94A0;
    id v10 = *(void **)(v1 + 88);
    if (!v10)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    *(void *)(v9 + 32) = v10;
    id v11 = *(void **)(v1 + 96);
    if (!v11)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    *(void *)(v9 + 40) = v11;
    uint64_t v29 = v9;
    specialized Array._endMutation()();
    sub_10001C99C(0, &qword_1004CBEA0);
    id v12 = v8;
    id v13 = v10;
    id v14 = v11;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v12 setViewControllers:isa, v29];
  }
  sub_10010CA04();
  id v16 = [self currentDevice];
  id v17 = [v16 userInterfaceIdiom];

  if (v17 == (id)1) {
    goto LABEL_13;
  }
  uint64_t v18 = *(void **)(v1 + 104);
  if (!v18)
  {
LABEL_28:
    __break(1u);
    return;
  }
  if ([v18 selectedIndex] == (id)1)
  {
LABEL_13:
    *(unsigned char *)(v1 + 80) = 1;
    unint64_t v19 = *(void **)(v1 + 112);
    if (!v19)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    id v20 = [v19 view];
    if (!v20)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    long long v21 = v20;
    [v20 setAlpha:0.0];
  }
  int v22 = (void *)xmmword_1004F8000;
  *(void *)&xmmword_1004F8000 = *(void *)(v1 + 112);
  id v23 = (id)xmmword_1004F8000;

  BOOL v24 = *(void **)(v1 + 64);
  [v24 setRootViewController:*(void *)(v1 + 112)];
  [v24 makeKeyAndVisible];
  char v25 = *(void **)(v1 + 112);
  if (!v25)
  {
    __break(1u);
    goto LABEL_22;
  }
  id v26 = [v25 view];
  if (!v26)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v27 = v26;
  id v28 = [objc_allocWithZone((Class)type metadata accessor for UserInterfaceStyleObserverView()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v27 addSubview:v28];

  sub_10010CC90();
}

uint64_t sub_10010C00C()
{
  uint64_t v1 = qword_1004CBC50;
  if (*(void *)((char *)v0 + qword_1004CBC50))
  {
    uint64_t v2 = *(void *)((char *)v0 + qword_1004CBC50);
  }
  else
  {
    uint64_t v2 = sub_10010C074(v0);
    *(void *)((char *)v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10010C074(void *a1)
{
  sub_100012894(&qword_1004CBEE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003F8B70;
  *(unsigned char *)(inited + 32) = 0;
  sub_100012894(&qword_1004CBEF0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003F8720;
  id v4 = (void *)a1[23];
  Swift::String v5 = &off_10048A4F0;
  if (!v4) {
    Swift::String v5 = 0;
  }
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v5;
  uint64_t v6 = a1[25];
  if (v6) {
    uint64_t v7 = &off_10048F148;
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(v3 + 48) = v6;
  *(void *)(v3 + 56) = v7;
  id v10 = a1 + 20;
  uint64_t v9 = a1[20];
  uint64_t v8 = v10[1];
  if (v8) {
    id v11 = &off_10048FAB8;
  }
  else {
    id v11 = 0;
  }
  *(void *)(v3 + 64) = v8;
  *(void *)(v3 + 72) = v11;
  id v12 = &off_10048ECF8;
  if (!v9) {
    id v12 = 0;
  }
  *(void *)(v3 + 80) = v9;
  *(void *)(v3 + 88) = v12;
  *(void *)(inited + 40) = v3;
  *(unsigned char *)(inited + 48) = 1;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1003F87F0;
  *(void *)(v13 + 32) = v6;
  *(void *)(v13 + 40) = v7;
  *(void *)(inited + 56) = v13;
  *(unsigned char *)(inited + 64) = 2;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1003F87F0;
  *(void *)(v14 + 32) = v8;
  *(void *)(v14 + 40) = v11;
  *(void *)(inited + 72) = v14;
  unint64_t v15 = sub_1000E3454(inited);
  swift_setDeallocating();
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  id v16 = v4;
  sub_100012894(&qword_1004CBEF8);
  swift_arrayDestroy();
  type metadata accessor for InstrumentationCoordinator();
  swift_allocObject();
  return sub_1000C1518(v15);
}

void sub_10010C23C()
{
  if (qword_1004C2B18 != -1) {
    swift_once();
  }
  v1._object = (void *)0x8000000100426AD0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000018;
  Log.debug(_:isPrivate:)(v1, 0);
  uint64_t v2 = (char *)objc_allocWithZone((Class)type metadata accessor for ViewController());
  id v3 = sub_100110954(v2);
  id v4 = *(void **)(v0 + 88);
  *(void *)(v0 + 88) = v3;

  Swift::String v5 = *(void **)(v0 + 88);
  if (!v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  id v6 = [v5 tabBarItem];
  if (!v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = v6;
  id v8 = [self mainBundle];
  v26._object = (void *)0xE000000000000000;
  v9._uint64_t countAndFlagsBits = 0x4552555341454DLL;
  v9._object = (void *)0xE700000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v26._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v26);

  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setTitle:v11];

  id v12 = *(void **)(v0 + 88);
  if (!v12)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v13 = [v12 tabBarItem];
  if (!v13)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = self;
  id v17 = [v16 systemImageNamed:v15];

  [v14 setImage:v17];
  uint64_t v18 = *(void **)(v0 + 88);
  if (!v18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v19 = [v18 tabBarItem];
  if (!v19)
  {
LABEL_19:
    __break(1u);
    return;
  }
  id v20 = v19;
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v16 systemImageNamed:v21];

  [v20 setLandscapeImagePhone:v22];
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  id v24 = (id)*((void *)&xmmword_1004F7FD0 + 1);
  *((void *)&xmmword_1004F7FD0 + 1) = *(void *)(v0 + 88);
  id v23 = *((id *)&xmmword_1004F7FD0 + 1);
}

void sub_10010C530()
{
  id v1 = [objc_allocWithZone((Class)UITabBarController) init];
  uint64_t v2 = *(void **)(v0 + 104);
  *(void *)(v0 + 104) = v1;

  id v3 = *(void **)(v0 + 104);
  if (!v3)
  {
    __break(1u);
    goto LABEL_15;
  }
  [v3 setDelegate:*(void *)(v0 + 72)];
  id v4 = *(void **)(v0 + 104);
  if (!v4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v5 = [v4 view];
  if (!v5)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v6 = v5;
  [v5 setAccessibilityIgnoresInvertColors:1];

  uint64_t v7 = *(void **)(v0 + 104);
  if (!v7)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v8 = [v7 view];
  if (!v8)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  Swift::String v9 = v8;
  Swift::String v10 = self;
  id v11 = [v10 clearColor];
  [v9 setBackgroundColor:v11];

  id v12 = *(void **)(v0 + 104);
  if (!v12)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v13 = [v12 tabBar];
  id v14 = [v10 whiteColor];
  [v13 setTintColor:v14];

  NSString v15 = *(void **)(v0 + 104);
  if (!v15)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v16 = [v15 tabBar];
  [v16 setTranslucent:[self jasperAvailable]];

  id v17 = *(void **)(v0 + 104);
  if (!v17)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v18 = [v17 tabBar];
  id v19 = *(void **)(v0 + 104);
  if (!v19)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v20 = [v19 tabBar];
  id v21 = [v20 standardAppearance];

  [v18 setScrollEdgeAppearance:v21];
  id v22 = *(void **)(v0 + 104);
  if (!v22)
  {
LABEL_23:
    __break(1u);
    return;
  }
  id v23 = [v22 tabBar];
  [v23 setOverrideUserInterfaceStyle:2];
}

void sub_10010C7B8()
{
  id v1 = [objc_allocWithZone((Class)LevelPageViewController) init];
  uint64_t v2 = *(void **)(v0 + 96);
  *(void *)(v0 + 96) = v1;

  id v3 = *(void **)(v0 + 96);
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  id v4 = [v3 tabBarItem];
  if (!v4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  id v5 = v4;
  id v6 = [self mainBundle];
  v22._object = (void *)0xE000000000000000;
  v7._uint64_t countAndFlagsBits = 0x4C4556454CLL;
  v7._object = (void *)0xE500000000000000;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v22);

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setTitle:v9];

  Swift::String v10 = *(void **)(v0 + 96);
  if (!v10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v11 = [v10 tabBarItem];
  if (!v11)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  id v12 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = self;
  id v15 = [v14 systemImageNamed:v13];

  [v12 setImage:v15];
  id v16 = *(void **)(v0 + 96);
  if (!v16)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id v17 = [v16 tabBarItem];
  if (!v17)
  {
LABEL_15:
    __break(1u);
    return;
  }
  id v18 = v17;
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v14 systemImageNamed:v19];

  [v18 setLandscapeImagePhone:v20];
}

void sub_10010CA04()
{
  id v1 = v0;
  id v2 = [objc_allocWithZone((Class)OrientationLockedViewController) init];
  id v3 = (void *)v0[14];
  v0[14] = v2;

  id v4 = (void *)v0[14];
  if (!v4)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  v18[4] = sub_1001121AC;
  v18[5] = v5;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  void v18[2] = sub_10010ECBC;
  v18[3] = &unk_10048ECD0;
  id v6 = _Block_copy(v18);
  id v7 = v4;
  swift_release();
  [v7 setIsAutorotationEnabled:v6];
  _Block_release(v6);

  Swift::String v8 = (void *)v1[14];
  if (!v8)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = qword_1004C29D8;
  id v10 = v8;
  if (v9 != -1) {
    swift_once();
  }
  [v10 setOrientationToLockTo:qword_1004F7FF8];

  sub_10001C99C(0, (unint64_t *)&qword_1004C6A10);
  char v11 = static UIDevice.isIPhone()();
  id v12 = (void *)v1[14];
  if ((v11 & 1) == 0) {
    goto LABEL_9;
  }
  if (!v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100012894((uint64_t *)&unk_1004CEA00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1003F8B20;
  id v14 = (void *)v1[13];
  if (v14)
  {
LABEL_11:
    *(void *)(v13 + 32) = v14;
    v18[0] = v13;
    specialized Array._endMutation()();
    sub_10001C99C(0, &qword_1004CBEA0);
    id v15 = v12;
    id v16 = v14;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v15 setViewControllers:isa];

    return;
  }
  __break(1u);
LABEL_9:
  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_100012894((uint64_t *)&unk_1004CEA00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1003F8B20;
  id v14 = (void *)v1[11];
  if (v14) {
    goto LABEL_11;
  }
LABEL_16:
  __break(1u);
}

void sub_10010CC90()
{
  id v1 = v0;
  uint64_t v2 = sub_100012894(&qword_1004C9B20);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100012894(&qword_1004CBEA8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100012894(&qword_1004CBEB0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)v1[11];
  if (!v13)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  float v106 = v8;
  id v14 = v13;
  id v15 = sub_1002053D0();

  if (qword_1004C3238 != -1) {
    swift_once();
  }
  uint64_t v107 = v6;
  uint64_t v16 = qword_1004F8AA8;
  [v15 center];
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  [v15 frame];
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  [v15 bounds];
  uint64_t v29 = v16 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
  *(void *)uint64_t v29 = v18;
  *(void *)(v29 + 8) = v20;
  *(void *)(v29 + 16) = v22;
  *(void *)(v29 + 24) = v24;
  *(void *)(v29 + 32) = v26;
  *(void *)(v29 + 40) = v28;
  *(void *)(v29 + 48) = v30;
  *(void *)(v29 + 56) = v31;
  *(void *)(v29 + 64) = v32;
  *(void *)(v29 + 72) = v33;
  *(unsigned char *)(v29 + 80) = 0;
  type metadata accessor for CVController();
  swift_allocObject();
  id v34 = v15;
  uint64_t v35 = sub_100053098(v34);

  v1[27] = v35;
  swift_release();
  type metadata accessor for MotionObserver();
  uint64_t v36 = swift_allocObject();
  v1[15] = sub_1002099F4(v36);
  swift_release();
  uint64_t v37 = v1[27];
  if (!v37) {
    goto LABEL_31;
  }
  uint64_t v38 = v1[28];
  if (!v38)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v104 = v5;
  type metadata accessor for LinesInstrument();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v39 = sub_1001216E4(v37, v38);
  swift_release();
  swift_release();
  v1[20] = v39;
  swift_release();
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  char v105 = v4;
  qword_1004F8020 = v1[20];
  swift_retain();
  swift_release();
  type metadata accessor for MeasurementsStateReducer();
  uint64_t v40 = swift_allocObject();
  v1[19] = sub_100110DC4(v40);
  swift_release();
  uint64_t v41 = MeasureCore.shared.unsafeMutableAddressor();
  if (!v1[15]) {
    goto LABEL_33;
  }
  long long v42 = (uint64_t *)v41;
  id v43 = v34;
  swift_retain();
  swift_retain();
  MeasureCore.initialize(sceneView:motion:)();
  swift_release();

  swift_release();
  type metadata accessor for RectangleInstrument();
  swift_allocObject();
  id v44 = v43;
  v1[21] = sub_100160B14(v44);
  swift_release();
  long long v45 = self;
  if (![v45 jasperAvailable]) {
    goto LABEL_18;
  }
  type metadata accessor for HistoryTracker();
  long long v46 = (void *)swift_allocObject();
  v1[24] = sub_100111158(v46);
  swift_release();
  uint64_t v47 = v1[28];
  if (!v47)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (!v1[24])
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  swift_retain();
  uint64_t v48 = swift_retain();
  sub_100209B3C(v48, v47);
  swift_release();
  swift_release();
  type metadata accessor for GuidesCoordinator();
  swift_allocObject();
  v1[22] = sub_100104490();
  swift_release();
  uint64_t v49 = *v42;
  swift_beginAccess();
  if (!*(void *)(v49 + 112))
  {
LABEL_15:
    id v55 = [self standardUserDefaults];
    unsigned int v56 = [v55 kPersonHeightEnabled];

    if (v56)
    {
      sub_10001C99C(0, &qword_1004CBEE0);
      if ([(id)swift_getObjCClassFromMetadata() supportsFrameSemantics:1])
      {
        id v57 = objc_allocWithZone((Class)type metadata accessor for PersonHeightInstrument());
        uint64_t v58 = sub_10005D168((uint64_t)v44);
        long long v59 = (void *)v1[23];
        v1[23] = v58;
      }
    }
LABEL_18:
    UIContentSizeCategory v102 = v12;
    uint64_t v103 = v10;
    type metadata accessor for Session();
    uint64_t v60 = swift_allocObject();
    *(unsigned char *)(v60 + 24) = 0;
    *(void *)(v60 + 32) = v44;
    id v61 = v44;
    id v62 = [v61 session];
    *(void *)(v60 + 16) = v62;
    long long v63 = (void **)WorldAnchor.arSession.unsafeMutableAddressor();
    swift_beginAccess();
    long long v64 = *v63;
    *long long v63 = v62;
    id v65 = v62;

    v1[18] = v60;
    swift_release();
    uint64_t v66 = v1[20];
    if (v66)
    {
      uint64_t v67 = v1[28];
      if (v67)
      {
        objc_allocWithZone((Class)type metadata accessor for RenderLoop());
        id v68 = v61;
        swift_retain();
        swift_retain();
        id v69 = sub_100194C60(v68, v66, v67);
        uint64_t v70 = (void *)v1[17];
        v1[17] = v69;

        uint64_t v71 = v1[18];
        if (v71)
        {
          uint64_t v101 = v9;
          uint64_t v72 = (void *)v1[17];
          if (v72)
          {
            swift_retain();
            id v73 = v72;
            __n128 v74 = sub_100194A74();
            uint64_t v76 = v75;

            uint64_t v77 = v1[20];
            if (v77)
            {
              uint64_t v78 = v1[27];
              if (v78)
              {
                uint64_t v79 = v1[28];
                if (v79)
                {
                  id v80 = objc_allocWithZone((Class)type metadata accessor for MainLoop());
                  id v81 = v68;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  __n128 v82 = sub_1000FFF88(v71, v81, (uint64_t)v74, v76, v77, v78, v79);
                  char v83 = (void *)v1[16];
                  v1[16] = v82;

                  if ([v45 jasperAvailable])
                  {
                    id v84 = [self standardUserDefaults];
                    swift_getKeyPath();
                    swift_allocObject();
                    swift_weakInit();
                    sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
                    char v85 = (void *)static OS_dispatch_queue.main.getter();
                    NSUserDefaults.performOnChange<A>(to:on:action:)();

                    swift_release();
                    swift_release();
                  }
                  uint64_t v86 = sub_10010C00C();
                  uint64_t v108 = *(void *)(v86 + 64);
                  uint64_t v87 = swift_allocObject();
                  *(void *)(v87 + 16) = sub_100111FE8;
                  *(void *)(v87 + 24) = v86;
                  swift_retain();
                  swift_retain();
                  sub_100012894(&qword_1004C9BA8);
                  sub_10002179C(&qword_1004CBEB8, &qword_1004C9BA8);
                  uint64_t v88 = v106;
                  Publisher.map<A>(_:)();
                  swift_release();
                  swift_release();
                  sub_10002179C(&qword_1004CBEC0, &qword_1004CBEA8);
                  uint64_t v89 = v104;
                  uint64_t v90 = Publisher.eraseToAnyPublisher()();
                  (*(void (**)(char *, uint64_t))(v107 + 8))(v88, v89);
                  swift_release();
                  uint64_t v108 = v90;
                  sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
                  id v109 = (id)static OS_dispatch_queue.main.getter();
                  uint64_t v91 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
                  uint64_t v92 = (uint64_t)v105;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v105, 1, 1, v91);
                  sub_100012894(&qword_1004CBEC8);
                  sub_10002179C(&qword_1004CBED0, &qword_1004CBEC8);
                  sub_10011206C();
                  id v93 = v102;
                  Publisher.receive<A>(on:options:)();
                  sub_10002B9C0(v92, &qword_1004C9B20);

                  swift_release();
                  sub_10002179C(&qword_1004CBED8, &qword_1004CBEB0);
                  swift_retain();
                  uint64_t v94 = v101;
                  Publisher<>.sink(receiveValue:)();
                  swift_release();
                  (*(void (**)(char *, uint64_t))(v103 + 8))(v93, v94);
                  swift_beginAccess();
                  sub_100012894(&qword_1004C5E50);
                  sub_10002179C(&qword_1004C5E58, &qword_1004C5E50);
                  AnyCancellable.store<A>(in:)();
                  swift_endAccess();
                  swift_release();
                  char v95 = (void *)v1[11];
                  if (v95)
                  {
                    id v96 = v95;
                    id v97 = sub_1002053D0();

                    id v98 = (void *)v1[11];
                    if (v98)
                    {
                      objc_allocWithZone((Class)type metadata accessor for DebugSessionCoordinator(0));
                      swift_retain();
                      double v99 = sub_1001A8640(v97, (char *)v98, sub_100112108, (uint64_t)v1);
                      id v100 = (void *)qword_1004F7FE8;
                      qword_1004F7FE8 = (uint64_t)v99;

                      return;
                    }
                    goto LABEL_42;
                  }
LABEL_41:
                  __break(1u);
LABEL_42:
                  __break(1u);
                  goto LABEL_43;
                }
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  long long v50 = (void *)v1[11];
  if (v50)
  {
    swift_retain();
    id v51 = v50;
    id v52 = sub_100205358();

    OverlayMetalView.populateScene(depthProcessor:)();
    type metadata accessor for EdgeInstrument();
    swift_allocObject();
    sub_100133960();
    uint64_t v54 = v53;
    swift_release();
    v1[25] = v54;
    swift_release();
    goto LABEL_15;
  }
LABEL_45:
  __break(1u);
}

void sub_10010D8E4()
{
}

void sub_10010D90C()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 72) = [objc_allocWithZone((Class)type metadata accessor for TabBarControllerDelegate()) init];
  *(unsigned char *)(v0 + 80) = 0;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(void *)(v0 + 200) = 0;
  uint64_t v2 = sub_100012894(&qword_1004CBE98);
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1004F8630;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 272);
  swift_retain();
  *(void *)(v1 + 208) = v5(KeyPath, v4);
  *(void *)(v1 + 216) = 0;
  *(void *)(v1 + 224) = 0;
  *(void *)(v1 + 232) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v1 + 240) = 0;
  *(void *)(v1 + 248) = 0;
  uint64_t v6 = sub_100012894(&qword_1004C7170);
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = qword_1004F8630;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 272);
  swift_retain();
  *(void *)(v1 + 256) = v9(v7, v8);
  uint64_t v10 = sub_100012894(&qword_1004C6AA0);
  uint64_t v11 = swift_getKeyPath();
  uint64_t v12 = qword_1004F8630;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 272);
  swift_retain();
  *(void *)(v1 + 264) = v13(v11, v12);
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = sub_100012894((uint64_t *)&unk_1004C6A80);
  uint64_t v16 = qword_1004F8630;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 272);
  swift_retain();
  *(void *)(v1 + 272) = v17(v14, v16);
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = sub_100012894((uint64_t *)&unk_1004CF6F0);
  uint64_t v20 = qword_1004F8630;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 272);
  swift_retain();
  *(void *)(v1 + 280) = v21(v18, v20);
  uint64_t v22 = v1 + qword_1004CBC30;
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  uint64_t v24 = qword_1004CBC38;
  uint64_t v25 = sub_100012894((uint64_t *)&unk_1004C7F30);
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = qword_1004F8630;
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 272);
  swift_retain();
  *(void *)(v1 + v24) = v28(v26, v27);
  uint64_t v29 = qword_1004CBC40;
  uint64_t v30 = swift_getKeyPath();
  uint64_t v31 = sub_100012894((uint64_t *)&unk_1004CEA40);
  uint64_t v32 = qword_1004F8630;
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 272);
  swift_retain();
  *(void *)(v1 + v29) = v33(v30, v32);
  *(_WORD *)(v1 + qword_1004CBC48) = 0;
  *(void *)(v1 + qword_1004CBC50) = 0;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_10010DCA0()
{
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  id result = [self jasperAvailable];
  if (result)
  {
    swift_retain();
    StateValue.ifUpdated(_:)();
    return (id)swift_release();
  }
  return result;
}

void sub_10010DD8C(unsigned __int8 *a1, unsigned char *a2)
{
  char v3 = a1[1];
  unsigned __int8 v4 = a1[2];
  unsigned __int8 v5 = a1[3];
  unsigned __int8 v6 = a1[4];
  unsigned __int8 v7 = *a1;
  sub_10010F084(*a1);
  sub_10010FCEC(v3);
  a2[288] = v7;
  a2[289] = v3;
  a2[290] = v4;
  a2[291] = v5;
  a2[292] = v6;
}

void sub_10010DDF4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (v2 != 5)
  {
    if (qword_1004C2AF8 != -1) {
      swift_once();
    }
    _StringGuts.grow(_:)(48);
    v4._object = (void *)0x80000001004269C0;
    v4._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    v5._uint64_t countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    Log.default(_:isPrivate:)(v5, 0);
    swift_bridgeObjectRelease();
    switch(v2)
    {
      case 1:
        uint64_t v8 = *(char **)(a2 + 88);
        if (!v8)
        {
          __break(1u);
LABEL_18:
          __break(1u);
          JUMPOUT(0x10010E084);
        }
        if (!*(void *)&v8[qword_1004D26A8]) {
          return;
        }
        uint64_t v9 = swift_allocObject();
        *(void *)(v9 + 16) = v8;
        uint64_t v10 = v8;
        swift_retain();
        sub_10015979C(0, 1, (uint64_t)sub_100111B20, v9);

        swift_release();
        break;
      case 2:
        return;
      case 3:
        sub_10011035C(0, 0);
        sub_100110070(1);
        return;
      case 4:
        v11._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
        v11._object = (void *)0x80000001004269F0;
        Log.default(_:isPrivate:)(v11, 0);
        sub_10010E098(0, 0x3FF0000000000000, 0);
        return;
      default:
        unsigned __int8 v6 = *(void **)(a2 + 88);
        if (!v6) {
          goto LABEL_18;
        }
        id v7 = v6;
        sub_1002055F0();

        if (qword_1004C29D8 != -1) {
          swift_once();
        }
        if (!qword_1004F8010) {
          return;
        }
        swift_retain();
        sub_1000DC86C(0);
        break;
    }
    swift_release();
  }
}

uint64_t sub_10010E098(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v24 - v18;
  sub_10011035C((a1 & 1) == 0, 0);
  if ((a3 & 1) != 0 || *(double *)&a2 <= 0.0)
  {
    return sub_100110070(1);
  }
  else
  {
    sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
    uint64_t v24 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v14 + 8);
    v25(v17, v13);
    aBlock[4] = sub_100111B6C;
    aBlock[5] = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100049AB4;
    aBlock[3] = &unk_10048EAF0;
    uint64_t v20 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100039B94();
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
    uint64_t v21 = v26;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v22 = (void *)v24;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v21);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
    return ((uint64_t (*)(char *, uint64_t))v25)(v19, v13);
  }
}

void sub_10010E490(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DebugSessionCoordinator.RecordReplayState(0);
  uint64_t v4 = __chkstk_darwin(v3);
  unsigned __int8 v6 = (void **)&v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = (id *)&v21[-v7];
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)qword_1004F7FE8;
  if (qword_1004F7FE8)
  {
    uint64_t v10 = qword_1004F7FE8 + qword_1004CF758;
    swift_beginAccess();
    sub_100090C7C(v10, (uint64_t)v8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        id v11 = *v8;
        id v12 = v9;

        goto LABEL_9;
      case 3u:

        return;
      case 4u:
        id v16 = v9;
        goto LABEL_9;
      default:
        uint64_t v13 = *(uint64_t *)((char *)v8 + *(int *)(sub_100012894(&qword_1004CBE90) + 64));
        id v14 = v9;
        sub_100028914(v13);
        uint64_t v15 = type metadata accessor for URL();
        (*(void (**)(id *, uint64_t))(*(void *)(v15 - 8) + 8))(v8, v15);
LABEL_9:
        sub_100090C7C(v10, (uint64_t)v6);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
          case 2u:
            uint64_t v17 = *v6;

            return;
          case 3u:
            uint64_t v20 = *v6;

            uint64_t v9 = v20;
            goto LABEL_13;
          case 4u:
LABEL_13:

            goto LABEL_14;
          default:
            uint64_t v18 = sub_100012894(&qword_1004CBE90);
            sub_100028914(*(uint64_t *)((char *)v6 + *(int *)(v18 + 64)));
            uint64_t v19 = type metadata accessor for URL();
            (*(void (**)(void **, uint64_t))(*(void *)(v19 - 8) + 8))(v6, v19);

            return;
        }
    }
  }
LABEL_14:
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  memcpy(v23, v22, 0x213uLL);
  sub_1000732CC((uint64_t)v23);
  if (v23[2])
  {
    if (v23[1]) {
      return;
    }
  }
  else if ((v23[1] & 1) == 0)
  {
    return;
  }
  if (*(unsigned char *)(a2 + 240) == 1) {
    sub_100110840(0);
  }
}

uint64_t sub_10010E7A8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10002B9C0((uint64_t)v0 + qword_1004CBC30, (uint64_t *)&unk_1004C68F0);
  swift_release();
  swift_release();

  return swift_release();
}

id *sub_10010E8E0()
{
  uint64_t v0 = (id *)StateObserver.deinit();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10002B9C0((uint64_t)v0 + qword_1004CBC30, (uint64_t *)&unk_1004C68F0);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10010EA20()
{
  sub_10010E8E0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MeasureCoordinator()
{
  uint64_t result = qword_1004CBC80;
  if (!qword_1004CBC80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10010EAC0()
{
  sub_10006B9DC();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

void sub_10010EBDC(unsigned __int8 *a1)
{
  sub_10010DD8C(a1, v1);
}

void sub_10010EBE4(unsigned __int8 *a1)
{
  sub_10010DDF4(a1, v1);
}

void sub_10010EBEC(uint64_t a1)
{
  sub_10010E490(a1, v1);
}

uint64_t sub_10010EBF4()
{
  void (*v1)(unint64_t *__return_ptr, uint64_t);
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v6;

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 1;
  }
  uint64_t v1 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(Strong + qword_1004CBC40) + 144);
  uint64_t v2 = swift_retain();
  v1(&v6, v2);
  swift_release();
  uint64_t v3 = v6;
  swift_release();
  uint64_t v4 = v3 != 0xC000000000000018;
  sub_10001F780(v3);
  return v4;
}

uint64_t sub_10010ECBC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  return v1 & 1;
}

void sub_10010ECFC(char *a1)
{
  char v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = *(void **)(Strong + 184);
    if (!v3)
    {
      swift_release();
      return;
    }
    if (v1)
    {
      uint64_t v4 = qword_1004C29D8;
      id v5 = v3;
      if (v4 != -1) {
        swift_once();
      }
      if (!qword_1004F7FE0)
      {
        __break(1u);
        return;
      }
      if (!*(void *)(qword_1004F7FE0 + 24))
      {
        sub_10006A118();
        goto LABEL_12;
      }
      char v6 = 0;
    }
    else
    {
      id v5 = v3;
      char v6 = 1;
    }
    sub_10006A76C(v6);
LABEL_12:
    swift_release();
  }
}

uint64_t sub_10010EDE8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
  uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_10011217C;
  aBlock[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100049AB4;
  aBlock[3] = &unk_10048ECA8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100039B94();
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v13);
}

void sub_10010F084(unsigned __int8 a1)
{
  int v2 = a1;
  uint64_t v3 = sub_100012894((uint64_t *)&unk_1004C68F0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  id v81 = (char *)v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v80 = (uint64_t)v74 - v6;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v83 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v77 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v11 = (char *)v74 - v10;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v79 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v14 = (char *)v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v78 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchTime();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v24 = (char *)v74 - v23;
  uint64_t v84 = v1;
  int v25 = *(unsigned __int8 *)(v1 + 288);
  if (v25 == v2) {
    return;
  }
  if ((v2 - 2) < 2)
  {
    unsigned int v26 = [self jasperAvailable];
    uint64_t v27 = v84;
    if (v2 == 2)
    {
      if (v26)
      {
        uint64_t v28 = (uint64_t)v81;
        Date.init()();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56))(v28, 0, 1, v83);
        uint64_t v29 = v27 + qword_1004CBC30;
        swift_beginAccess();
        sub_100073BD8(v28, v29, (uint64_t *)&unk_1004C68F0);
        swift_endAccess();
      }
    }
    sub_10011035C(1, v2 == 3);
    return;
  }
  if (v2)
  {
    uint64_t v35 = v84;
    uint64_t v39 = *(void *)(v84 + 160);
    if (!v39)
    {
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (*(unsigned char *)(v39 + 208))
    {
LABEL_47:
      uint64_t v72 = *(void **)(v35 + 88);
      if (v72)
      {
        id v73 = v72;
        sub_1002055F0();

        return;
      }
      goto LABEL_54;
    }
    uint64_t v40 = *(void *)(v39 + 72);
    swift_beginAccess();
    unint64_t v41 = *(void *)(v40 + 64);
    if (v41 >> 62)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      if (v42) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v42)
      {
LABEL_18:
        if (v42 < 1)
        {
          __break(1u);
LABEL_51:
          swift_once();
LABEL_41:
          v62._object = (void *)0x8000000100426A60;
          v62._uint64_t countAndFlagsBits = 0xD000000000000020;
          Log.default(_:isPrivate:)(v62, 0);
          long long v63 = *(char **)(v35 + 88);
          if (!v63)
          {
LABEL_56:
            __break(1u);
            return;
          }
          long long v64 = *(void **)&v63[qword_1004D2650];
          if (!v64) {
            goto LABEL_44;
          }
          uint64_t v65 = self;
          uint64_t v66 = swift_allocObject();
          *(void *)(v66 + 16) = v64;
          uint64_t v67 = swift_allocObject();
          *(void *)(v67 + 16) = sub_100111FAC;
          *(void *)(v67 + 24) = v66;
          uint64_t v89 = sub_100039980;
          uint64_t v90 = v67;
          CATransform3D aBlock = _NSConcreteStackBlock;
          uint64_t v86 = 1107296256;
          uint64_t v87 = sub_1000FA194;
          uint64_t v88 = &unk_10048EC08;
          id v68 = _Block_copy(&aBlock);
          id v69 = v64;
          uint64_t v70 = v63;
          swift_retain();
          swift_release();
          [(id)v65 performWithoutAnimation:v68];
          _Block_release(v68);
          LOBYTE(v65) = swift_isEscapingClosureAtFileLocation();

          swift_release();
          swift_release();
          if ((v65 & 1) == 0)
          {
LABEL_44:
            sub_10011035C(1, 0);
            sub_100110070(1);
            uint64_t v71 = (uint64_t)v81;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v81, 1, 1, v83);
            swift_beginAccess();
            sub_100073BD8(v71, v12, (uint64_t *)&unk_1004C68F0);
            swift_endAccess();
            goto LABEL_35;
          }
          __break(1u);
          goto LABEL_53;
        }
        for (uint64_t i = 0; i != v42; ++i)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            uint64_t v44 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v44 = *(void *)(v41 + 8 * i + 32);
            swift_retain();
          }
          if (swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v45 = *(void *)(v44 + 24);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 120))(1, ObjectType, v45);
            swift_release();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    *(unsigned char *)(v39 + 208) = 1;
    swift_release();
    goto LABEL_47;
  }
  if ((v25 - 2) >= 2)
  {
    if (!*(unsigned char *)(v1 + 288)) {
      return;
    }
    uint64_t v47 = *(char **)(v84 + 88);
    if (v47)
    {
      if (*(void *)&v47[qword_1004D26A8])
      {
        uint64_t v48 = swift_allocObject();
        *(void *)(v48 + 16) = v47;
        uint64_t v49 = v47;
        swift_retain();
        sub_10015979C(0, 0, (uint64_t)sub_1001121F4, v48);

        swift_release();
        swift_release();
      }
      return;
    }
    goto LABEL_55;
  }
  if (*(unsigned char *)(v84 + 80) == 1)
  {
    *(unsigned char *)(v84 + 80) = 0;
    uint64_t v30 = v22;
    sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
    uint64_t v75 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v30 + 8);
    v74[1] = v30 + 8;
    uint64_t v76 = v31;
    v31(v21, v18);
    uint64_t v89 = sub_100111FC4;
    uint64_t v90 = v84;
    CATransform3D aBlock = _NSConcreteStackBlock;
    uint64_t v86 = 1107296256;
    uint64_t v87 = sub_100049AB4;
    uint64_t v88 = &unk_10048EC30;
    uint64_t v32 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    CATransform3D aBlock = (void **)_swiftEmptyArrayStorage;
    v74[0] = sub_100039B94();
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v33 = (void *)v75;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v79 + 8))(v14, v12);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v17, v15);
    v76(v24, v18);
  }
  unsigned int v34 = [self jasperAvailable];
  uint64_t v35 = v84;
  if (!v34) {
    goto LABEL_34;
  }
  uint64_t v12 = v84 + qword_1004CBC30;
  swift_beginAccess();
  uint64_t v36 = v80;
  sub_1000DB36C(v12, v80);
  uint64_t v37 = v82;
  uint64_t v38 = v83;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v36, 1, v83) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v11, v36, v38);
    long long v50 = v77;
    Date.init()();
    Date.distance(to:)();
    double v52 = v51;
    uint64_t v53 = *(void (**)(char *, uint64_t))(v37 + 8);
    v53(v50, v38);
    v53(v11, v38);
    if (v52 < 600.0) {
      goto LABEL_34;
    }
    if (qword_1004C2AF8 == -1) {
      goto LABEL_41;
    }
    goto LABEL_51;
  }
  sub_10002B9C0(v36, (uint64_t *)&unk_1004C68F0);
LABEL_34:
  char v54 = sub_100111C38();
  sub_100110070(v54 & 1);
LABEL_35:
  swift_retain();
  StateValue.wrappedValue.getter();
  swift_release();
  if (BYTE1(aBlock) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v55 & 1) == 0) {
      return;
    }
  }
  if (!*(void *)(v84 + 248))
  {
    unsigned int v56 = self;
    uint64_t v57 = swift_allocObject();
    uint64_t v58 = v84;
    swift_weakInit();
    uint64_t v89 = sub_100111BC4;
    uint64_t v90 = v57;
    CATransform3D aBlock = _NSConcreteStackBlock;
    uint64_t v86 = 1107296256;
    uint64_t v87 = sub_100058CEC;
    uint64_t v88 = &unk_10048EB90;
    long long v59 = _Block_copy(&aBlock);
    swift_release();
    id v60 = [v56 scheduledTimerWithTimeInterval:0 repeats:v59 block:5.0];
    _Block_release(v59);
    id v61 = *(void **)(v58 + 248);
    *(void *)(v58 + 248) = v60;
  }
}

void sub_10010FCEC(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SessionState();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (void *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1) {
    uint64_t v7 = 0x6C6576656CLL;
  }
  else {
    uint64_t v7 = 0x6572757361656DLL;
  }
  if (a1) {
    unint64_t v8 = 0xE500000000000000;
  }
  else {
    unint64_t v8 = 0xE700000000000000;
  }
  if (*(unsigned char *)(v2 + 289)) {
    uint64_t v9 = 0x6C6576656CLL;
  }
  else {
    uint64_t v9 = 0x6572757361656DLL;
  }
  if (*(unsigned char *)(v2 + 289)) {
    unint64_t v10 = 0xE500000000000000;
  }
  else {
    unint64_t v10 = 0xE700000000000000;
  }
  if (v7 == v9 && v8 == v10)
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12) {
    return;
  }
  uint64_t v13 = *(void **)(v2 + 248);
  if ((a1 & 1) == 0)
  {
    if (v13)
    {
      [v13 invalidate];
      id v14 = *(void **)(v2 + 248);
    }
    else
    {
      id v14 = 0;
    }
    *(void *)(v2 + 248) = 0;

    uint64_t v20 = *(void (**)(uint64_t))(**(void **)(v2 + 272) + 144);
    uint64_t v21 = swift_retain();
    v20(v21);
    swift_release();
    unint64_t v22 = *v6;
    sub_100111BCC(*v6);
    sub_100111BDC((uint64_t)v6);
    if (v22 - 2 >= 2 && v22 != 0)
    {
      if (v22 == 1) {
        goto LABEL_33;
      }
      sub_100103988(v22);
    }
    char v24 = sub_100111C38();
    sub_100110070(v24 & 1);
LABEL_33:
    int v25 = *(char **)(v2 + 88);
    if (v25)
    {
      if (*(void *)&v25[qword_1004D26A8])
      {
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v25;
        uint64_t v27 = v25;
        swift_retain();
        sub_10015979C(0, 1, (uint64_t)sub_1001121F4, v26);

        swift_release();
        swift_release();
      }
    }
    else
    {
      __break(1u);
    }
    return;
  }
  if (!v13)
  {
    uint64_t v15 = self;
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_100111BC4;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100058CEC;
    aBlock[3] = &unk_10048EB40;
    uint64_t v17 = _Block_copy(aBlock);
    swift_release();
    id v18 = [v15 scheduledTimerWithTimeInterval:0 repeats:v17 block:5.0];
    _Block_release(v17);
    uint64_t v19 = *(void **)(v2 + 248);
    *(void *)(v2 + 248) = v18;
  }
}

void sub_100110004(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 112);
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v2 = [v1 view];
  if (!v2)
  {
LABEL_7:
    __break(1u);
    return;
  }
  id v3 = v2;
  [v2 setAlpha:1.0];
}

uint64_t sub_100110070(uint64_t result)
{
  if ((*(unsigned char *)(v1 + 240) & 1) == 0)
  {
    uint64_t v2 = v1;
    char v3 = result;
    if (result)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + 280) + 200);
      uint64_t v5 = swift_retain();
      uint64_t v6 = v4(v5);
      swift_release();
      (*(void (**)(unint64_t (*)(), void))(*(void *)v6 + 280))(sub_100110818, 0);
      swift_release();
    }
    sub_100110840(v3 & 1);
    if (*(void *)(v1 + 120))
    {
      swift_retain();
      sub_10014D1E0();
      swift_release();
      uint64_t v7 = *(void *)(v1 + 168);
      if (v7)
      {
        unint64_t v8 = self;
        swift_retain();
        id v9 = [v8 processInfo];
        unint64_t v10 = (unint64_t)[v9 thermalState];

        if (v10 < 4)
        {
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 16) = v7;
          *(unsigned char *)(v11 + 24) = 0x20303u >> (8 * v10);
          sub_100012894((uint64_t *)&unk_1004C68D0);
          swift_allocObject();
          Future.init(_:)();
          sub_10002179C(&qword_1004C9B60, (uint64_t *)&unk_1004C68D0);
          Publisher<>.sink(receiveValue:)();
          swift_release();
          swift_beginAccess();
          sub_100012894(&qword_1004C5E50);
          sub_10002179C(&qword_1004C5E58, &qword_1004C5E50);
          AnyCancellable.store<A>(in:)();
          swift_endAccess();
          uint64_t result = swift_release();
          *(unsigned char *)(v2 + 240) = 1;
          return result;
        }
LABEL_11:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

void sub_10011035C(char a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v3 + 240) == 1)
  {
    if (a1)
    {
      unint64_t v10 = *(void **)(v3 + 88);
      if (!v10)
      {
LABEL_24:
        __break(1u);
        return;
      }
      id v11 = v10;
      sub_1002055F0();
    }
    uint64_t v12 = *(void *)(v3 + 216);
    if (v12)
    {
      int v13 = *(unsigned __int8 *)(v12 + 248);
      uint64_t v14 = qword_1004C2AE8;
      swift_retain();
      if (v13 == 1)
      {
        if (v14 != -1) {
          swift_once();
        }
        v15._object = (void *)0x8000000100421700;
        v15._uint64_t countAndFlagsBits = 0xD000000000000021;
        Log.debug(_:isPrivate:)(v15, 0);
        *(void *)(v12 + 48) = 0;
        swift_release();
        *(unsigned char *)(v12 + 248) = 0;
      }
      else
      {
        if (v14 != -1) {
          swift_once();
        }
        v16._uint64_t countAndFlagsBits = 0xD000000000000037;
        v16._object = (void *)0x80000001004216C0;
        Log.debug(_:isPrivate:)(v16, 0);
      }
      swift_release();
      uint64_t v17 = *(void *)(v3 + 168);
      if (v17)
      {
        uint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = v17;
        *(unsigned char *)(v18 + 24) = 0;
        sub_100012894((uint64_t *)&unk_1004C68D0);
        swift_allocObject();
        swift_retain();
        v23[1] = Future.init(_:)();
        sub_10002179C(&qword_1004C9B60, (uint64_t *)&unk_1004C68D0);
        Publisher<>.sink(receiveValue:)();
        swift_release();
        swift_beginAccess();
        sub_100012894(&qword_1004C5E50);
        sub_10002179C(&qword_1004C5E58, &qword_1004C5E50);
        AnyCancellable.store<A>(in:)();
        swift_endAccess();
        swift_release();
        if (qword_1004C29E0 != -1) {
          swift_once();
        }
        sub_100096880();
        uint64_t v19 = *(void *)(v3 + 120);
        if (v19)
        {
          [*(id *)(v19 + 80) stopDeviceMotionUpdates];
          if (*(void *)(v3 + 144))
          {
            swift_retain();
            sub_1001AD420(a2 & 1);
            swift_release();
            id v20 = [self standardUserDefaults];
            Date.init()();
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
            Defaults.dateLastUse.unsafeMutableAddressor();
            swift_bridgeObjectRetain();
            NSString v22 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v20 setObject:isa forKey:v22];

            *(unsigned char *)(v3 + 240) = 0;
            return;
          }
          goto LABEL_23;
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
}

void sub_1001107AC()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    sub_10011035C(1, 1);
    uint64_t v2 = *(void **)(v1 + 248);
    *(void *)(v1 + 248) = 0;
    swift_release();
  }
}

unint64_t sub_100110818()
{
  return sub_1000A4FD8(9uLL);
}

void sub_100110840(char a1)
{
  if ([self jasperAvailable])
  {
    swift_retain();
    StateValue.wrappedValue.getter();
    swift_release();
    memcpy(__dst, __src, 0x213uLL);
    sub_1000732CC((uint64_t)__dst);
    if (*(void *)(v1 + 144))
    {
      if (__dst[1]) {
        __int16 v3 = 256;
      }
      else {
        __int16 v3 = 0;
      }
      swift_retain();
      sub_1001AD5D8(v3 & 0xFFFE | a1 & 1);
      swift_release();
      return;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if (!*(void *)(v1 + 144)) {
    goto LABEL_12;
  }
  swift_retain();
  sub_1001ADEBC();
  id v5 = v4;
  sub_1001AD708(a1 & 1, v4);
  swift_release();
}

id sub_100110954(char *a1)
{
  swift_getObjectType();
  *(void *)&a1[qword_1004D2640] = 0;
  *(void *)&a1[qword_1004D2648] = 0;
  *(void *)&a1[qword_1004D2650] = 0;
  uint64_t v2 = qword_1004D2658;
  uint64_t v3 = sub_100012894((uint64_t *)&unk_1004D2920);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = qword_1004C2E30;
  uint64_t v6 = a1;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1004F8630;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 272);
  swift_retain();
  *(void *)&v6[v2] = v8(KeyPath, v7);
  uint64_t v9 = qword_1004D2660;
  sub_100012894(&qword_1004CBF30);
  swift_getKeyPath();
  type metadata accessor for MainLoop();
  *(void *)&v6[v9] = MutableStateValue.__allocating_init(_:_:)();
  *(void *)&v6[qword_1004D2668] = 0;
  *(void *)&v6[qword_1004D2670] = 0;
  *(void *)&v6[qword_1004D2678] = 0;
  *(void *)&v6[qword_1004D2680] = 0;
  *(void *)&v6[qword_1004D2688] = 0;
  *(void *)&v6[qword_1004D2690] = 0;
  *(void *)&v6[qword_1004D2698] = 0;
  *(void *)&v6[qword_1004D26A0] = 0;
  *(void *)&v6[qword_1004D26A8] = 0;
  *(void *)&v6[qword_1004D26B0] = 0;
  *(void *)&v6[qword_1004D26B8] = 0;
  *(void *)&v6[qword_1004D26C0] = 0;
  *(void *)&v6[qword_1004D26C8] = 0;
  *(void *)&v6[qword_1004D26D0] = 0;
  *(void *)&v6[qword_1004D26D8] = 0;
  *(void *)&v6[qword_1004D26E0] = 0;
  uint64_t v10 = qword_1004D26E8;
  type metadata accessor for MotionObserver();
  uint64_t v11 = swift_allocObject();
  *(void *)&v6[v10] = sub_1002099F4(v11);
  v6[qword_1004D26F0] = 0;
  *(void *)&v6[qword_1004D26F8] = 0;
  uint64_t v12 = qword_1004D2700;
  sub_100012894((uint64_t *)&unk_1004D2930);
  swift_getKeyPath();
  *(void *)&v6[v12] = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v13 = qword_1004D2708;
  sub_100012894(&qword_1004CBF38);
  swift_getKeyPath();
  *(void *)&v6[v13] = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v14 = qword_1004D2710;
  sub_100012894((uint64_t *)&unk_1004D2940);
  swift_getKeyPath();
  *(void *)&v6[v14] = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v15 = qword_1004D2718;
  uint64_t v16 = sub_100012894(&qword_1004C6F48);
  uint64_t v17 = swift_getKeyPath();
  uint64_t v18 = qword_1004F8630;
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 272);
  swift_retain();
  *(void *)&v6[v15] = v19(v17, v18);

  return sub_100110C8C(v6);
}

id sub_100110C8C(char *a1)
{
  uint64_t v9 = &type metadata for Configurations.Default;
  uint64_t v10 = &protocol witness table for Configurations.Default;
  *(void *)&a1[qword_1004D0640] = _swiftEmptyArrayStorage;
  uint64_t v1 = &a1[qword_1004D0648];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;
  v7.receiver = a1;
  v7.super_class = (Class)sub_100012894(&qword_1004CBF40);
  [super initWithNibName:0 bundle:0];
  sub_10002B8B4((uint64_t)v8, (uint64_t)v6);
  uint64_t v3 = (uint64_t)v2 + qword_1004D0648;
  swift_beginAccess();
  id v4 = v2;
  sub_100073BD8((uint64_t)v6, v3, &qword_1004C49A0);
  swift_endAccess();
  sub_10002179C(&qword_1004CBF48, &qword_1004CBF40);
  StateObserving.setup()();

  sub_100013218((uint64_t)v8);
  return v4;
}

uint64_t sub_100110DC4(uint64_t a1)
{
  uint64_t v31 = &type metadata for Configurations.Default;
  uint64_t v32 = &protocol witness table for Configurations.Default;
  uint64_t v2 = sub_100012894(&qword_1004C54B8);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = qword_1004C2E30;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1004F8630;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 272);
  swift_retain();
  *(void *)(a1 + 64) = v6(KeyPath, v5);
  uint64_t v7 = sub_100012894(&qword_1004C7170);
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = qword_1004F8630;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 272);
  swift_retain();
  *(void *)(a1 + 72) = v10(v8, v9);
  uint64_t v11 = sub_100012894(&qword_1004C6F48);
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = qword_1004F8630;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 272);
  swift_retain();
  *(void *)(a1 + 80) = v14(v12, v13);
  sub_100012894(&qword_1004CBF00);
  swift_getKeyPath();
  *(void *)(a1 + 88) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = sub_100012894(&qword_1004C3EE0);
  uint64_t v17 = qword_1004F8630;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 272);
  swift_retain();
  *(void *)(a1 + 96) = v18(v15, v17);
  uint64_t v19 = swift_getKeyPath();
  uint64_t v20 = sub_100012894((uint64_t *)&unk_1004CF6F0);
  uint64_t v21 = qword_1004F8630;
  NSString v22 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 272);
  swift_retain();
  *(void *)(a1 + 104) = v22(v19, v21);
  sub_100012894(&qword_1004CBF08);
  swift_getKeyPath();
  *(void *)(a1 + 112) = MutableStateValue.__allocating_init(_:_:)();
  sub_100012894(&qword_1004CBF10);
  swift_getKeyPath();
  *(void *)(a1 + 120) = MutableStateValue.__allocating_init(_:_:)();
  sub_100012894(&qword_1004CBF18);
  swift_getKeyPath();
  *(void *)(a1 + 128) = MutableStateValue.__allocating_init(_:_:)();
  sub_100012894(&qword_1004CBF20);
  swift_getKeyPath();
  *(void *)(a1 + 136) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v23 = sub_100012894(&qword_1004CBF28);
  uint64_t v24 = swift_getKeyPath();
  uint64_t v25 = qword_1004F8630;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 272);
  swift_retain();
  *(void *)(a1 + 144) = v26(v24, v25);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  swift_release();
  sub_10002B8B4((uint64_t)v30, (uint64_t)&v29);
  uint64_t v27 = StateObserver.init(configuration:)();
  sub_100013218((uint64_t)v30);
  return v27;
}

uint64_t sub_100111158(void *a1)
{
  uint64_t v18 = &type metadata for Configurations.Default;
  uint64_t v19 = &protocol witness table for Configurations.Default;
  sub_100012894(&qword_1004C96B8);
  swift_getKeyPath();
  swift_retain();
  a1[8] = MutableStateBinding.__allocating_init(_:_:)();
  uint64_t v2 = sub_100012894(&qword_1004C96C0);
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1004F8630;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 272);
  swift_retain();
  a1[9] = v5(KeyPath, v4);
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = sub_100012894(&qword_1004CB2C0);
  uint64_t v8 = qword_1004F8630;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 272);
  swift_retain();
  a1[10] = v9(v6, v8);
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = sub_100012894(&qword_1004C96C8);
  uint64_t v12 = qword_1004F8630;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 272);
  swift_retain();
  a1[11] = v13(v10, v12);
  swift_release();
  sub_10002B8B4((uint64_t)v17, (uint64_t)&v16);
  uint64_t v14 = StateObserver.init(configuration:)();
  sub_100013218((uint64_t)v17);
  return v14;
}

uint64_t sub_100111360(uint64_t a1)
{
  uint64_t v16 = &type metadata for Configurations.Default;
  uint64_t v17 = &protocol witness table for Configurations.Default;
  *(void *)(a1 + 64) = _swiftEmptyArrayStorage;
  sub_100012894(&qword_1004CBF50);
  swift_getKeyPath();
  swift_retain();
  *(void *)(a1 + 72) = MutableStateValue.__allocating_init(_:_:)();
  *(void *)(a1 + 80) = _swiftEmptyDictionarySingleton;
  type metadata accessor for WorldLine();
  *(void *)(a1 + 88) = OrderedDictionary.init()();
  *(void *)(a1 + 96) = v2;
  *(void *)(a1 + 104) = v3;
  uint64_t v14 = _swiftEmptyDictionarySingleton;
  sub_100012894(&qword_1004CBF58);
  swift_allocObject();
  *(void *)(a1 + 112) = Synchronized.init(wrappedValue:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = sub_100012894(&qword_1004CB4A0);
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1004F8630;
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 272);
  swift_retain();
  *(void *)(a1 + 120) = v7(KeyPath, v6);
  *(void *)(a1 + 128) = _swiftEmptyArrayStorage;
  sub_100012894(&qword_1004CBF60);
  swift_getKeyPath();
  *(void *)(a1 + 136) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = sub_100012894(&qword_1004C3F10);
  uint64_t v10 = qword_1004F8630;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 272);
  swift_retain();
  *(void *)(a1 + 144) = v11(v8, v10);
  *(unsigned char *)(a1 + 152) = 1;
  swift_release();
  sub_10002B8B4((uint64_t)v15, (uint64_t)&v14);
  uint64_t v12 = StateObserver.init(configuration:)();
  sub_100013218((uint64_t)v15);
  return v12;
}

uint64_t sub_1001115B8(void *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone((Class)type metadata accessor for TabBarControllerDelegate());
  swift_retain();
  *(void *)(v2 + 72) = [v4 init];
  *(unsigned char *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(void *)(v2 + 200) = 0;
  uint64_t v5 = sub_100012894(&qword_1004CBE98);
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1004F8630;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 272);
  swift_retain();
  *(void *)(v2 + 208) = v8(KeyPath, v7);
  *(void *)(v2 + 216) = 0;
  *(void *)(v2 + 224) = 0;
  *(void *)(v2 + 232) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v2 + 240) = 0;
  *(void *)(v2 + 248) = 0;
  uint64_t v9 = sub_100012894(&qword_1004C7170);
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = qword_1004F8630;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 272);
  swift_retain();
  *(void *)(v2 + 256) = v12(v10, v11);
  uint64_t v13 = sub_100012894(&qword_1004C6AA0);
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = qword_1004F8630;
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 272);
  swift_retain();
  *(void *)(v2 + 264) = v16(v14, v15);
  uint64_t v17 = swift_getKeyPath();
  uint64_t v18 = sub_100012894((uint64_t *)&unk_1004C6A80);
  uint64_t v19 = qword_1004F8630;
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 272);
  swift_retain();
  *(void *)(v2 + 272) = v20(v17, v19);
  uint64_t v21 = swift_getKeyPath();
  uint64_t v22 = sub_100012894((uint64_t *)&unk_1004CF6F0);
  uint64_t v23 = qword_1004F8630;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 272);
  swift_retain();
  *(void *)(v2 + 280) = v24(v21, v23);
  uint64_t v25 = v2 + qword_1004CBC30;
  uint64_t v26 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = qword_1004CBC38;
  uint64_t v28 = sub_100012894((uint64_t *)&unk_1004C7F30);
  uint64_t v29 = swift_getKeyPath();
  uint64_t v30 = qword_1004F8630;
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 272);
  swift_retain();
  *(void *)(v2 + v27) = v31(v29, v30);
  uint64_t v32 = qword_1004CBC40;
  uint64_t v33 = swift_getKeyPath();
  uint64_t v34 = sub_100012894((uint64_t *)&unk_1004CEA40);
  uint64_t v35 = qword_1004F8630;
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 272);
  swift_retain();
  *(void *)(v2 + v32) = v36(v33, v35);
  *(_WORD *)(v2 + qword_1004CBC48) = 0;
  *(void *)(v2 + qword_1004CBC50) = 0;
  *(void *)(v2 + 64) = a1;
  *(unsigned char *)(v2 + 288) = 2;
  *(_DWORD *)(v2 + 289) = 0;
  id v37 = a1;
  swift_release();
  return StateObserver.init(configuration:)();
}

void sub_100111974()
{
  static DefaultsManager.registerDefaults()();
  unint64_t v0 = self;
  id v1 = [v0 standardUserDefaults];
  Defaults.resetDefaultSettingsOnStart.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v3 = [v1 BOOLForKey:v2];

  if (v3) {
    static DefaultsManager.reset()();
  }
  id v4 = [v0 standardUserDefaults];
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setBool:1 forKey:v5];

  id v6 = [v0 standardUserDefaults];
  swift_bridgeObjectRetain();
  id v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 setBool:0 forKey:v7];
}

uint64_t sub_100111AE8()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100111B20()
{
  return sub_10020899C(*(void *)(v0 + 16));
}

uint64_t sub_100111B28()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100111B60(void (*a1)(char *), uint64_t a2)
{
  return sub_100162950(a1, a2, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24));
}

uint64_t sub_100111B6C()
{
  return sub_100110070(1);
}

uint64_t sub_100111B74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100111B84()
{
  return swift_release();
}

uint64_t sub_100111B8C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100111BC4()
{
}

unint64_t sub_100111BCC(unint64_t result)
{
  if (result >= 4) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_100111BDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100111C38()
{
  uint64_t v0 = sub_100012894((uint64_t *)&unk_1004C68F0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v17 - v8;
  id v10 = [self standardUserDefaults];
  Defaults.dateLastUse.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v10 objectForKey:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_10007CF44((uint64_t)v17, (uint64_t)v18);
  if (!v19)
  {
    sub_10002B9C0((uint64_t)v18, (uint64_t *)&unk_1004C7180);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_10;
  }
  int v13 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, v13 ^ 1u, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_10:
    sub_10002B9C0((uint64_t)v2, (uint64_t *)&unk_1004C68F0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v7, v3);
  if (qword_1004C2AF8 != -1) {
    swift_once();
  }
  v15._object = (void *)0x8000000100426A30;
  v15._uint64_t countAndFlagsBits = 0xD000000000000023;
  Log.default(_:isPrivate:)(v15, 0);
  v14(v9, v3);
  return 1;
}

uint64_t sub_100111FAC()
{
  return sub_100176530();
}

uint64_t sub_100111FB4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100111FC4()
{
  sub_100110004(v0);
}

uint64_t sub_100111FE8(uint64_t a1, uint64_t a2)
{
  return sub_1000C1488(a1, a2, v2);
}

uint64_t sub_100111FF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100112028@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *((void *)a1 + 1));
  *a2 = result & 1;
  a2[1] = BYTE1(result) & 1;
  return result;
}

unint64_t sub_10011206C()
{
  unint64_t result = qword_1004C9B50;
  if (!qword_1004C9B50)
  {
    sub_10001C99C(255, (unint64_t *)&qword_1004C7F10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004C9B50);
  }
  return result;
}

void sub_1001120D4(unsigned char *a1)
{
  char v2 = a1[1];
  uint64_t v3 = (unsigned char *)(v1 + qword_1004CBC48);
  unsigned char *v3 = *a1;
  v3[1] = v2;
  if (*(unsigned char *)(v1 + 240) == 1) {
    sub_100110840(0);
  }
}

uint64_t sub_100112108()
{
  return sub_10010EDE8(v0);
}

const char *sub_100112110()
{
  return "kPersonHeightDebugViewEnabled";
}

id sub_10011211C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 kPersonHeightDebugViewEnabled];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100112150(unsigned __int8 *a1, id *a2)
{
  return [*a2 setKPersonHeightDebugViewEnabled:*a1];
}

void sub_100112164(char *a1)
{
}

void sub_10011217C()
{
  if (*(unsigned char *)(v0 + 240) == 1) {
    sub_100110840(0);
  }
}

uint64_t sub_1001121AC()
{
  return sub_10010EBF4();
}

uint64_t sub_100112210(unsigned __int8 *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t sub_10011223C(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = sub_1000BEC00(a1, v3);
  __chkstk_darwin(v5);
  id v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = sub_100112F64((uint64_t)v7, v2, v3, v4);
  sub_100013218(a1);
  return v9;
}

uint64_t sub_100112340()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 184) + 200);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  id v7 = sub_10011327C;
  uint64_t v8 = v0;
  uint64_t v4 = *(void (**)(uint64_t (*)(unsigned __int8 *), unsigned char *))(*(void *)v3 + 296);
  swift_retain();
  v4(sub_100113284, v6);
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  StateValue.ifUpdated(_:)();
  swift_release();
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)();
  return swift_release();
}

uint64_t sub_1001124B8(uint64_t result, uint64_t a2)
{
  if (result >= 2u)
  {
    v7[8] = v2;
    _OWORD v7[9] = v3;
    uint64_t v4 = *(uint64_t (**)(void *))(**(void **)(a2 + 168) + 400);
    swift_retain();
    uint64_t v5 = (void (*)(void *, void))v4(v7);
    *(void *)(v6 + 16) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v5(v7, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100112568(uint64_t a1)
{
  void (*v3)(void *__return_ptr, uint64_t);
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t (*v19)(void *);
  void (*v20)(void *, void);
  uint64_t v21;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  void v27[4];

  uint64_t v2 = v1;
  if (a1 == 0xC000000000000010)
  {
    uint64_t v3 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v1 + 152) + 144);
    uint64_t v4 = swift_retain();
    v3(v27, v4);
    swift_release();
    uint64_t v5 = (void *)v27[0];
    uint64_t v6 = (void *)v27[1];

    if (v6)
    {
      id v7 = *(uint64_t (**)(void))((swift_isaMask & *v6) + 0x2C0);
      uint64_t v8 = *(void *)v7();
      (*(void (**)(void))(v8 + 368))();
      swift_release();
      if (!simd_float4x4.isAlmostHorizontal(marginInDegrees:)(10.0)) {
        goto LABEL_10;
      }
      if ((unint64_t)(*(uint64_t (**)(void))((swift_isaMask & *v6) + 0x2F0))() >= 3) {
        goto LABEL_10;
      }
      uint64_t v9 = v7();
      *(double *)&id v10 = (*(double (**)(uint64_t))(*(void *)v9 + 368))(v9);
      uint64_t v25 = v11;
      uint64_t v26 = v10;
      uint64_t v23 = v13;
      uint64_t v24 = v12;
      swift_release();
      *(_OWORD *)(v2 + 80) = v26;
      *(_OWORD *)(v2 + 96) = v25;
      *(_OWORD *)(v2 + 112) = v24;
      *(_OWORD *)(v2 + 128) = v23;
      *(unsigned char *)(v2 + 144) = 0;
      uint64_t v14 = sub_100112B60();
      Swift::String v15 = (void *)(v2 + 64);
      if (v14)
      {
        uint64_t v16 = v14;
        swift_beginAccess();
        void *v15 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v17 = v16;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
      }
      else
      {
LABEL_10:
      }
    }
  }
  else
  {
    swift_beginAccess();
    *(void *)(v1 + 64) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v18 = *(void *)(v2 + 64);
  uint64_t v19 = *(uint64_t (**)(void *))(**(void **)(v2 + 168) + 400);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v20 = (void (*)(void *, void))v19(v27);
  *(void *)(v21 + 16) = v18;
  swift_bridgeObjectRelease();
  v20(v27, 0);
  return swift_release();
}

uint64_t sub_1001128E0(uint64_t a1)
{
  uint64_t v2 = v1;
  float v3 = *(float *)(v1 + 200);
  char v4 = *(unsigned char *)(v1 + 204);
  sub_100113308(a1 + 80, (uint64_t)v20);
  uint64_t result = sub_100113308((uint64_t)v20, (uint64_t)v23);
  if (v23[64] == 1)
  {
    if (v4) {
      return result;
    }
  }
  else
  {
    uint64_t result = simd_float4x4.position.getter();
    if ((v4 & 1) == 0 && vabds_f32(v3, v6) <= 0.00000011921) {
      return result;
    }
  }
  sub_100113308((uint64_t)v20, (uint64_t)v21);
  char v7 = v22;
  if (v22)
  {
    int v8 = 0;
  }
  else
  {
    simd_float4x4.position.getter();
    int v8 = v9;
  }
  *(_DWORD *)(v1 + 200) = v8;
  *(unsigned char *)(v1 + 204) = v7;
  id v10 = (void *)(v1 + 64);
  uint64_t result = swift_beginAccess();
  unint64_t v11 = *(void *)(v1 + 64);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v18 < 1) {
      return result;
    }
  }
  else if (*(uint64_t *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1)
  {
    return result;
  }
  if ((*(unsigned char *)(v2 + 144) & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100112B60();
    if (result)
    {
      id v12 = (void *)result;
      *id v10 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      id v13 = v12;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      uint64_t v14 = *(void *)(v2 + 64);
      Swift::String v15 = *(uint64_t (**)(unsigned char *))(**(void **)(v2 + 168) + 400);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v16 = (void (*)(unsigned char *, void))v15(v19);
      *(void *)(v17 + 16) = v14;
      swift_bridgeObjectRelease();
      v16(v19, 0);

      return swift_release();
    }
  }
  return result;
}

void *sub_100112B60()
{
  void (*v6)(void *__return_ptr, uint64_t);
  uint64_t v7;
  void *v8;
  id v9;
  __n128 v10;
  __n128 v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __n128 v18;
  __n128 v19;
  void __src[64];
  unsigned char __dst[512];

  if (*(unsigned char *)(v0 + 144)) {
    return 0;
  }
  float v2 = 10.0;
  if ((*(unsigned char *)(v0 + 204) & 1) == 0)
  {
    float v3 = *(float *)(v0 + 200);
    simd_float4x4.position.getter();
    float v2 = v3 - v4;
  }
  *(float *)(v0 + 212) = v2;
  simd_float4x4.position.getter();
  SIMD3<>.up.unsafeMutableAddressor();
  simd_float4x4.translated(to:)();
  id v5 = objc_allocWithZone((Class)type metadata accessor for WorldLineGuide());
  LOBYTE(v15) = 1;
  uint64_t v1 = (void *)WorldLineGuide.init(guideType:end1:end2:primarySegmentEnd1:primarySegmentEnd2:backingPlanes:anchorState:)();
  float v6 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v0 + 192) + 144);
  char v7 = swift_retain();
  v6(__src, v7);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  int v8 = (void *)sub_1000A3850();
  sub_100016F7C((uint64_t)__dst);
  if (v8)
  {
    int v9 = [v8 camera];

    [v9 transform];
    uint64_t v18 = v11;
    uint64_t v19 = v10;
    uint64_t v16 = v13;
    uint64_t v17 = v12;

    if (qword_1004C2C10 != -1) {
      swift_once();
    }
    sub_100142A9C(v1, v19, v18, v17, v16);
  }
  return v1;
}

uint64_t sub_100112DAC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100112E04()
{
  uint64_t v0 = StateObserver.deinit();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100112E64()
{
  sub_100112E04();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VerticalGuidesInstrument()
{
  uint64_t result = qword_1004CBF90;
  if (!qword_1004CBF90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100112EE0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100112F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v37[3] = a3;
  v37[4] = a4;
  char v7 = sub_100078D1C(v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(v7, a1, a3);
  *(void *)(a2 + 64) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(unsigned char *)(a2 + 144) = 1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = sub_100012894(&qword_1004C3EE0);
  uint64_t v10 = qword_1004C2E30;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1004F8630;
  id v12 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 272);
  swift_retain();
  *(void *)(a2 + 152) = v12(KeyPath, v11);
  uint64_t v13 = sub_100012894(&qword_1004C3EE8);
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = qword_1004F8630;
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 272);
  swift_retain();
  *(void *)(a2 + 160) = v16(v14, v15);
  sub_100012894(&qword_1004CB4B8);
  swift_getKeyPath();
  *(void *)(a2 + 168) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v17 = sub_100012894(&qword_1004CB4C0);
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = qword_1004F8630;
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 272);
  swift_retain();
  *(void *)(a2 + 176) = v20(v18, v19);
  uint64_t v21 = swift_getKeyPath();
  uint64_t v22 = sub_100012894(&qword_1004C3F08);
  uint64_t v23 = qword_1004F8630;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 272);
  swift_retain();
  *(void *)(a2 + 184) = v24(v21, v23);
  uint64_t v25 = swift_getKeyPath();
  uint64_t v26 = sub_100012894(&qword_1004C3F10);
  uint64_t v27 = qword_1004F8630;
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 272);
  swift_retain();
  *(void *)(a2 + 192) = v28(v25, v27);
  *(_DWORD *)(a2 + 200) = 0;
  *(unsigned char *)(a2 + 204) = 1;
  __asm { FMOV            V0.2S, #10.0 }
  *(void *)(a2 + 208) = _D0;
  swift_release();
  sub_10002B8B4((uint64_t)v37, (uint64_t)&v36);
  uint64_t v34 = StateObserver.init(configuration:)();
  sub_100013218((uint64_t)v37);
  return v34;
}

uint64_t sub_10011327C(uint64_t a1)
{
  return sub_1001124B8(a1, v1);
}

uint64_t sub_100113284(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1001132B4(_OWORD *a1)
{
  long long v1 = a1[7];
  v6[6] = a1[6];
  v6[7] = v1;
  v7[0] = a1[8];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 137);
  long long v2 = a1[3];
  v6[2] = a1[2];
  v6[3] = v2;
  long long v3 = a1[5];
  v6[4] = a1[4];
  v6[5] = v3;
  long long v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return sub_1001128E0((uint64_t)v6);
}

uint64_t sub_100113308(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894(&qword_1004C3F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100113370(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6D69547472617473;
    }
    else {
      uint64_t v3 = 0x656D6954646E65;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE900000000000065;
    }
    else {
      unint64_t v4 = 0xE700000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6D69547472617473;
      }
      else {
        uint64_t v6 = 0x656D6954646E65;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE900000000000065;
      }
      else {
        unint64_t v7 = 0xE700000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x73746E657665;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x73746E657665)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100113490(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x72656E726F63;
  }
  else {
    uint64_t v3 = 1701274725;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x72656E726F63;
  }
  else {
    uint64_t v5 = 1701274725;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10011352C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEC00000074686769;
  unint64_t v3 = 0x65486E6F73726550;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000010;
    }
    else {
      unint64_t v5 = 0xD000000000000011;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x800000010041DAC0;
    }
    else {
      unint64_t v6 = 0x800000010041DAE0;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x65486E6F73726550;
  unint64_t v6 = 0xEC00000074686769;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0xD000000000000010;
    }
    else {
      unint64_t v3 = 0xD000000000000011;
    }
    if (v7 == 1) {
      unint64_t v2 = 0x800000010041DAC0;
    }
    else {
      unint64_t v2 = 0x800000010041DAE0;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

BOOL sub_100113638(char a1, char a2)
{
  return dbl_1003FF610[a1] == dbl_1003FF610[a2];
}

uint64_t sub_10011365C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6C6576656CLL;
  }
  else {
    uint64_t v3 = 0x6572757361656DLL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6C6576656CLL;
  }
  else {
    uint64_t v5 = 0x6572757361656DLL;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100113700(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      unint64_t v6 = v5;
      sub_10001C99C(0, &qword_1004C4028);
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100113888(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      unint64_t v6 = v5;
      type metadata accessor for WorldLineGuide();
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100113A00(uint64_t a1, uint64_t a2)
{
  return sub_100113A28(a1, a2, &qword_1004CC360, &qword_1004CC368);
}

uint64_t sub_100113A28(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  return dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
}

id sub_100113AC8(ARFrame a1)
{
  void (*v18)(void ***__return_ptr, uint64_t);
  uint64_t v19;
  void **v20;
  void *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t (*v29)(void);
  void *v30;
  void *v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  id v34;
  id v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void (*)(void **), uint64_t);
  void *v41;
  void *v42;
  void *v43;
  void **v44;
  void *v45;
  id v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  void *v61;
  void **v62;
  char *v63;
  uint64_t v64;
  double *v65;
  void **aBlock;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  void *v69;
  uint64_t (*v70)(void);
  void *v71;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  long long v64 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v63 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (uint64_t *)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
  *id v13 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    id result = (id)swift_once();
    goto LABEL_4;
  }
  MeasureCore.shared.unsafeMutableAddressor();
  swift_retain();
  MeasureCore.didUpdate(with:)(a1);
  swift_release();
  id result = [self jasperAvailable];
  if (!result) {
    goto LABEL_6;
  }
  if (qword_1004C29D8 != -1) {
    goto LABEL_16;
  }
LABEL_4:
  if (!*((void *)&xmmword_1004F7FD0 + 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  id v16 = *((id *)&xmmword_1004F7FD0 + 1);
  id v17 = sub_100205358();

  OverlayMetalView.didUpdate(frame:)(a1);
LABEL_6:
  swift_retain();
  Synchronized.wrappedValue.getter();
  id result = (id)swift_release();
  if (aBlock != 1) {
    return result;
  }
  char v55 = v7;
  unsigned int v56 = v8;
  uint64_t v57 = v5;
  uint64_t v58 = v4;
  uint64_t v18 = *(void (**)(void ***__return_ptr, uint64_t))(**(void **)(v2 + 128) + 144);
  uint64_t v19 = swift_retain();
  v18(&aBlock, v19);
  swift_release();
  uint64_t v20 = aBlock;
  uint64_t v21 = (void *)v67;
  uint64_t v22 = v68;
  uint64_t v23 = v69;
  Swift::String v62 = aBlock;
  id v61 = v21;

  uint64_t v24 = 0;
  id v60 = v20;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (v20 && v21)
  {
    uint64_t v28 = v61;
    uint64_t v29 = *(uint64_t (**)(void))((swift_isaMask & *v61) + 0x2C0);
    uint64_t v30 = v62;
    uint64_t v31 = v28;
    uint64_t v24 = v29();
    type metadata accessor for WorldAnchor();
    swift_retain();
    uint64_t v25 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
    uint64_t v32 = *(void (**)(uint64_t))((swift_isaMask & *v30) + 0x200);
    uint64_t v33 = swift_retain();
    v32(v33);
    uint64_t v34 = objc_allocWithZone((Class)type metadata accessor for ScreenPoint());
    uint64_t v27 = (void *)ScreenPoint.init(_:)();
    (*(void (**)(void))((swift_isaMask & *v31) + 0x2F0))();
    (*(void (**)(void))((swift_isaMask & *v31) + 0xD0))();
    uint64_t v35 = objc_allocWithZone((Class)type metadata accessor for WorldPoint());
    uint64_t v26 = (void *)WorldPoint.init(anchor:type:state:)();
  }
  long long v59 = v2;
  uint64_t v36 = *(uint64_t (**)(uint64_t))(**(void **)(v2 + 128) + 200);
  id v37 = swift_retain();
  uint64_t v38 = v36(v37);
  swift_release();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v27;
  *(void *)(v39 + 24) = v26;
  uint64_t v40 = *(void (**)(void (*)(void **), uint64_t))(*(void *)v38 + 280);
  char v54 = v26;
  uint64_t v53 = v27;
  v40(sub_10012225C, v39);
  swift_release();
  id result = (id)swift_release();
  if (qword_1004C29D8 != -1) {
    id result = (id)swift_once();
  }
  unint64_t v41 = (void *)*((void *)&xmmword_1004F8000 + 1);
  if (!*((void *)&xmmword_1004F8000 + 1))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  double v52 = Contexts.PrivateQueue.init(_:)();
  uint64_t v42 = (void *)swift_allocObject();
  void v42[2] = v60;
  v42[3] = v21;
  v42[4] = v25;
  v42[5] = v24;
  uint64_t v70 = nullsub_1;
  uint64_t v71 = v42;
  CATransform3D aBlock = _NSConcreteStackBlock;
  uint64_t v67 = 1107296256;
  id v68 = sub_100049AB4;
  id v69 = &unk_10048EF68;
  id v43 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v44 = v62;
  uint64_t v45 = v61;
  long long v46 = v41;
  swift_retain();
  uint64_t v47 = v63;
  static DispatchQoS.unspecified.getter();
  uint64_t v65 = _swiftEmptyArrayStorage;
  sub_100121318((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100012894((uint64_t *)&unk_1004C68E0);
  sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
  uint64_t v48 = v55;
  uint64_t v49 = v58;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  long long v50 = (void *)v52;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v43);
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v57 + 8))(v48, v49);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v56);
  swift_release();
  LOBYTE(aBlock) = 0;
  swift_retain();
  Synchronized.wrappedValue.setter();
  return (id)swift_release();
}

uint64_t sub_100114320()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_100021818(v0, qword_1004F83E0);
  sub_1000217E0(v0, (uint64_t)qword_1004F83E0);
  return UUID.init()();
}

void sub_10011436C()
{
}

void sub_100114394()
{
  uint64_t v1 = v0;
  sub_100012894(&qword_1004C6AF8);
  swift_allocObject();
  *(void *)(v0 + 64) = Synchronized.init(wrappedValue:)();
  sub_100012894(&qword_1004CC370);
  swift_getKeyPath();
  *(void *)(v0 + 88) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = sub_100012894(&qword_1004CA010);
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1004F8630;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 272);
  swift_retain();
  *(void *)(v1 + 96) = v5(KeyPath, v4);
  sub_100012894(&qword_1004CC378);
  swift_getKeyPath();
  *(void *)(v1 + 104) = MutableStateValue.__allocating_init(_:_:)();
  sub_100012894(&qword_1004CC380);
  swift_getKeyPath();
  *(void *)(v1 + 112) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = sub_100012894((uint64_t *)&unk_1004CF6F0);
  uint64_t v8 = qword_1004F8630;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 272);
  swift_retain();
  *(void *)(v1 + 120) = v9(v6, v8);
  sub_100012894(&qword_1004CC388);
  swift_getKeyPath();
  *(void *)(v1 + 128) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = sub_100012894((uint64_t *)&unk_1004C6A80);
  uint64_t v12 = qword_1004F8630;
  id v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 272);
  swift_retain();
  *(void *)(v1 + 136) = v13(v10, v12);
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = sub_100012894(&qword_1004C3F10);
  uint64_t v16 = qword_1004F8630;
  id v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 272);
  swift_retain();
  *(void *)(v1 + 144) = v17(v14, v16);
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = sub_100012894((uint64_t *)&unk_1004C6A90);
  uint64_t v20 = qword_1004F8630;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 272);
  swift_retain();
  *(void *)(v1 + 152) = v21(v18, v20);
  uint64_t v22 = sub_100012894(&qword_1004C6AA0);
  uint64_t v23 = swift_getKeyPath();
  uint64_t v24 = qword_1004F8630;
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 272);
  swift_retain();
  *(void *)(v1 + 160) = v25(v23, v24);
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = sub_100012894((uint64_t *)&unk_1004CF330);
  uint64_t v28 = qword_1004F8630;
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 272);
  swift_retain();
  *(void *)(v1 + 168) = v29(v26, v28);
  uint64_t v30 = swift_getKeyPath();
  uint64_t v31 = sub_100012894(&qword_1004CB4A0);
  uint64_t v32 = qword_1004F8630;
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 272);
  swift_retain();
  *(void *)(v1 + 176) = v33(v30, v32);
  uint64_t v34 = sub_100012894(&qword_1004CBF28);
  uint64_t v35 = swift_getKeyPath();
  uint64_t v36 = qword_1004F8630;
  id v37 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 272);
  swift_retain();
  *(void *)(v1 + 184) = v37(v35, v36);
  uint64_t v38 = swift_getKeyPath();
  uint64_t v39 = sub_100012894(&qword_1004CA908);
  uint64_t v40 = qword_1004F8630;
  unint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 272);
  swift_retain();
  *(void *)(v1 + 192) = v41(v38, v40);
  sub_100012894(&qword_1004CC390);
  swift_getKeyPath();
  *(void *)(v1 + 200) = MutableStateValue.__allocating_init(_:_:)();
  *(unsigned char *)(v1 + 208) = 0;
  *(_OWORD *)(v1 + 216) = 0u;
  simd_float4 v42 = matrix_identity_float4x4.columns[1];
  simd_float4 v43 = matrix_identity_float4x4.columns[2];
  simd_float4 v44 = matrix_identity_float4x4.columns[3];
  *(simd_float4 *)(v1 + 240) = matrix_identity_float4x4.columns[0];
  *(simd_float4 *)(v1 + 256) = v42;
  *(simd_float4 *)(v1 + 272) = v43;
  *(simd_float4 *)(v1 + 288) = v44;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_DWORD *)(v1 + 319) = 0;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_DWORD *)(v1 + 448) = 0;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_DWORD *)(v1 + 472) = 1106247680;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = xmmword_1003FB9B0;
  id v45 = [self standardUserDefaults];
  Defaults.snapReticleToEdges.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  NSString v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v39) = [v45 BOOLForKey:v46];

  *(unsigned char *)(v1 + 528) = v39;
  *(void *)(v1 + 536) = 0xC000000000000000;
  *(unsigned char *)(v1 + 544) = 3;
  sub_100012894(&qword_1004C6920);
  swift_allocObject();
  *(void *)(v1 + 552) = PassthroughSubject.init()();
  *(_OWORD *)(v1 + 560) = 0u;
  *(unsigned char *)(v1 + 576) = 1;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100114988(void (*a1)(void), uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v4) = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4 >= 2u)
  {
    swift_retain();
    goto LABEL_7;
  }
  uint64_t v22 = v13;
  int v24 = (int)v4;
  uint64_t v16 = qword_1004C29D8;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v23 = v8;
  uint64_t v25 = a1;
  id v17 = (void *)*((void *)&xmmword_1004F8000 + 1);
  if (*((void *)&xmmword_1004F8000 + 1))
  {
    uint64_t v21 = Contexts.PrivateQueue.init(_:)();
    aBlock[4] = sub_10011B0FC;
    aBlock[5] = a3;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100049AB4;
    aBlock[3] = &unk_10048ED60;
    uint64_t v18 = _Block_copy(aBlock);
    id v19 = v17;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = _swiftEmptyArrayStorage;
    sub_100121318((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v4 = (void *)v21;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v22);
    swift_release();
    a1 = v25;
    LOBYTE(v4) = v24;
LABEL_7:
    *(unsigned char *)(a3 + 544) = (_BYTE)v4;
    LOBYTE(aBlock[0]) = 0;
    a1(aBlock);
    return swift_release();
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100114CE8(uint64_t a1)
{
  void (*v1)(void *__return_ptr, uint64_t);
  uint64_t v2;
  void v4[64];
  uint64_t __dst[64];

  uint64_t v1 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(a1 + 144) + 144);
  uint64_t v2 = swift_retain();
  v1(v4, v2);
  swift_release();
  memcpy(__dst, v4, sizeof(__dst));
  sub_100114D88((uint64_t)&off_100485870, __dst);
  return sub_100016F7C((uint64_t)__dst);
}

uint64_t sub_100114D88(uint64_t a1, uint64_t *a2)
{
  void (*v11)(unint64_t *__return_ptr, uint64_t);
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(double (*)(uint64_t), uint64_t);
  void (*v23)(unint64_t *__return_ptr, uint64_t);
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*v27)(unint64_t *__return_ptr, uint64_t);
  uint64_t v28;
  unint64_t v29;
  void **v30;
  void (*v31)(unint64_t *__return_ptr, uint64_t);
  uint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(void);
  uint64_t (*v35)(void);
  uint64_t (*v36)(void);
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t (*v43)(void);
  uint64_t (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t (*v51)(unint64_t *);
  void (*v52)(unint64_t *, void);
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void (*v57)(unint64_t *);
  void *v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  char v63;
  void (*v64)(unint64_t *__return_ptr, uint64_t);
  uint64_t v65;
  void (*v66)(unint64_t *__return_ptr, uint64_t);
  uint64_t v67;
  unint64_t v68;
  double *v69;
  uint64_t v70;
  void (*v71)(unint64_t *);
  uint64_t v72;
  uint64_t *v73;
  void (*v74)(unint64_t *__return_ptr, uint64_t);
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  void (*v81)(double (*)(uint64_t), uint64_t);
  void (*v82)(unint64_t *__return_ptr, uint64_t);
  uint64_t v83;
  unint64_t v84;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v86;
  void (*v87)(unint64_t *);
  void (*v88)(unint64_t *__return_ptr, uint64_t);
  uint64_t v89;
  unint64_t v90;
  void (*v91)(unint64_t *__return_ptr, uint64_t);
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void **v96;
  uint64_t (*v97)(void);
  uint64_t (*v98)(void);
  uint64_t v99;
  uint64_t (*v100)(void);
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t (*v106)(void);
  uint64_t (*v107)(void);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void (*v113)(unint64_t *);
  void *v114;
  uint64_t v115;
  uint64_t v116;
  void **v117;
  void *v118;
  id v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void **v123;
  void *v124;
  id v125;
  id v126;
  uint64_t v127;
  void **v128;
  void **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135[4];
  int v136;

  uint64_t v3 = v2;
  uint64_t v130 = a2;
  int8x16_t v133 = type metadata accessor for DebugSessionCoordinator.RecordReplayState(0);
  uint64_t v5 = __chkstk_darwin(v133);
  uint64_t v7 = (void **)((char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v5);
  double v129 = (void **)((char *)&v127 - v9);
  __chkstk_darwin(v8);
  int8x16_t v128 = (void **)((char *)&v127 - v10);
  uint64_t v11 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v2 + 120) + 144);
  uint64_t v12 = swift_retain();
  v11(v135, v12);
  swift_release();
  uint64_t v13 = v135[3];
  uint64_t v14 = v136;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 464) = v13;
  *(_DWORD *)(v2 + 472) = v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    id v17 = 0;
    int8x16_t v132 = v16;
    uint64_t v131 = a1;
    while (1)
    {
      if (*(unsigned __int8 *)(v3 + 544) > 1u)
      {
        switch(*(unsigned char *)(a1 + v17 + 32))
        {
          case 4:
            long long v64 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v3 + 88) + 144);
            uint64_t v65 = swift_retain();
            v64(v135, v65);
            swift_release();
            if (v135[0] == 0xC000000000000018) {
              break;
            }
            sub_10001F780(v135[0]);
            uint64_t v66 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v3 + 88) + 144);
            uint64_t v67 = swift_retain();
            v66(v135, v67);
            swift_release();
            id v68 = v135[0];
            if (v135[0] == 0xC000000000000000 || v135[0] == 0xC000000000000008)
            {
              sub_10011F230(v130);
              char v112 = *(void *)(v3 + 104);
              LOBYTE(v135[0]) = 3;
              float v113 = *(void (**)(unint64_t *))(*(void *)v112 + 392);
              swift_retain();
              v113(v135);
              sub_10001F780(v68);
LABEL_76:
              swift_release();
              goto LABEL_85;
            }
            if (v135[0] == 0xC000000000000010)
            {
              sub_10011E158((double *)v130);
              if (qword_1004C2C10 != -1) {
                swift_once();
              }
              id v69 = (double *)(qword_1004F8458 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState);
              swift_beginAccess();
              *id v69 = *v69 + 1.0;
              uint64_t v70 = *(void *)(v3 + 104);
              LOBYTE(v135[0]) = 3;
              uint64_t v71 = *(void (**)(unint64_t *))(*(void *)v70 + 392);
              swift_retain();
              v71(v135);
              goto LABEL_76;
            }
            sub_10001F780(v135[0]);
LABEL_85:
            if (qword_1004C29D8 != -1) {
              swift_once();
            }
            float32x4_t v120 = (void *)qword_1004F7FE8;
            if (!qword_1004F7FE8) {
              goto LABEL_108;
            }
            int8x16_t v121 = qword_1004F7FE8 + qword_1004CF758;
            swift_beginAccess();
            int8x16_t v122 = v121;
            float32x4_t v123 = v128;
            sub_100121CF8(v122, (uint64_t)v128, type metadata accessor for DebugSessionCoordinator.RecordReplayState);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              float32x4_t v124 = *v123;
              int8x16_t v125 = v120;
              float32x4_t v126 = sub_1000FE9C0();

              sub_100079908(1, 0, 0, 1);
            }
            else
            {
              sub_100121D60((uint64_t)v123, type metadata accessor for DebugSessionCoordinator.RecordReplayState);
            }
            break;
          case 6:
            if (qword_1004C29E0 != -1) {
              swift_once();
            }
            LOBYTE(v135[0]) = 1;
            swift_retain();
            Synchronized.wrappedValue.setter();
            swift_release();
            id v73 = (uint64_t *)SnapType.standard.unsafeMutableAddressor();
            sub_1001160F0(*v73, v130);
            sub_100119100();
            sub_100119B74();
            __n128 v74 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v3 + 88) + 144);
            uint64_t v75 = swift_retain();
            v74(v135, v75);
            swift_release();
            uint64_t v76 = v135[0];
            sub_10001F780(v135[0]);
            if (v76 == 0xC000000000000018) {
              goto LABEL_5;
            }
            if (qword_1004C3238 != -1) {
              swift_once();
            }
            if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
              goto LABEL_107;
            }
            SIMD2<>.init(_:)();
            *(void *)(v3 + 464) = v18;
            *(_DWORD *)(v3 + 472) = 1106247680;
            id v19 = *(uint64_t (**)(uint64_t))(**(void **)(v3 + 120) + 200);
            uint64_t v20 = swift_retain();
            uint64_t v21 = v19(v20);
            swift_release();
            uint64_t v22 = *(void (**)(double (*)(uint64_t), uint64_t))(*(void *)v21 + 280);
            swift_retain();
            v22(sub_1001222C0, v3);
            swift_release();
            swift_release();
LABEL_5:
            LOBYTE(v135[0]) = 0;
            swift_retain();
            Synchronized.wrappedValue.setter();
            swift_release();
            break;
          case 7:
            sub_10011B3D0(1, (uint64_t)v130);
            if (qword_1004C3238 != -1) {
              swift_once();
            }
            if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80)) {
              goto LABEL_106;
            }
            SIMD2<>.init(_:)();
            *(void *)(v3 + 464) = v77;
            *(_DWORD *)(v3 + 472) = 1106247680;
            uint64_t v78 = *(uint64_t (**)(uint64_t))(**(void **)(v3 + 120) + 200);
            uint64_t v79 = swift_retain();
            uint64_t v80 = v78(v79);
            swift_release();
            id v81 = *(void (**)(double (*)(uint64_t), uint64_t))(*(void *)v80 + 280);
            swift_retain();
            v81(sub_100121304, v3);
            swift_release();
            swift_release();
            break;
          case 8:
            uint64_t v82 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v3 + 88) + 144);
            uint64_t v83 = swift_retain();
            v82(v135, v83);
            swift_release();
            uint64_t v84 = v135[0];
            sub_10001F780(v135[0]);
            if (v84 == 0xC000000000000010)
            {
              if (qword_1004C29E0 != -1) {
                swift_once();
              }
              swift_retain();
              Synchronized.wrappedValue.getter();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              float32x4_t v134 = v135[0];
              v135[0] = 0x8000000000000000;
              sub_1000D4F9C(1, 7, isUniquelyReferenced_nonNull_native);
              v135[0] = v134;
              swift_bridgeObjectRelease();
              float32x4_t v134 = v135[0];
              Synchronized.wrappedValue.setter();
              swift_release();
              uint64_t v86 = *(void *)(v3 + 88);
              v135[0] = 0xC000000000000008;
              uint64_t v87 = *(void (**)(unint64_t *))(*(void *)v86 + 392);
              swift_retain();
              v87(v135);
              swift_release();
            }
            uint64_t v88 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v3 + 88) + 144);
            uint64_t v89 = swift_retain();
            v88(v135, v89);
            swift_release();
            uint64_t v90 = v135[0];
            if (v135[0] >> 62
              && (v135[0] >> 62 != 3 || v135[0] != 0xC000000000000010 && v135[0] != 0xC000000000000008))
            {
              goto LABEL_78;
            }
            float32x4_t v127 = *(void *)(v3 + 72);
            uint64_t v91 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v127 + 72) + 144);
            uint64_t v92 = swift_retain();
            v91(v135, v92);
            swift_release();
            float32x4_t v134 = v135[0];
            swift_bridgeObjectRetain();
            sub_100012894(&qword_1004C4358);
            sub_100012894(&qword_1004C4360);
            swift_dynamicCast();
            id v93 = v135[0];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v93 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v94 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            if (v94)
            {
              char v95 = v94 - 1;
              if (__OFSUB__(v94, 1)) {
                goto LABEL_101;
              }
              if ((v93 & 0xC000000000000001) != 0)
              {
                id v96 = v7;
                id v97 = (uint64_t (*)(void))specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if ((v95 & 0x8000000000000000) != 0) {
                  goto LABEL_102;
                }
                if (v95 >= *(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_103;
                }
                id v96 = v7;
                id v97 = (uint64_t (*)(void))*(id *)(v93 + 8 * v95 + 32);
              }
              id v98 = v97;
              double v99 = swift_bridgeObjectRelease();
              id v100 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v98) + 0x250);
              uint64_t v101 = ((uint64_t (*)(uint64_t))v100)(v99);
              if ((v101 & 0xC000000000000001) != 0)
              {
                UIContentSizeCategory v102 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (!*(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_104;
                }
                UIContentSizeCategory v102 = *(id *)(v101 + 32);
              }
              uint64_t v103 = v102;
              swift_bridgeObjectRelease();
              sub_100120A98(v98, v103);

              uint64_t v104 = v100();
              if ((v104 & 0xC000000000000001) != 0)
              {
                char v105 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                uint64_t v7 = v96;
              }
              else
              {
                if (*(void *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                  goto LABEL_105;
                }
                uint64_t v7 = v96;
                char v105 = *(id *)(v104 + 40);
              }
              swift_bridgeObjectRelease();
              sub_100120A98(v98, v105);

              float v106 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v98) + 0xB8);
              uint64_t v107 = v98;
              uint64_t v108 = v106();
              id v110 = v109;

              sub_1001236F8(v108, v110);
              swift_bridgeObjectRelease();
              char v111 = *(void **)(v3 + 312);
              *(void *)(v3 + 312) = 0;

              sub_100124874();
              a1 = v131;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
LABEL_78:
            sub_10001F780(v90);
            if (qword_1004C29D8 != -1) {
              swift_once();
            }
            float v114 = (void *)qword_1004F7FE8;
            uint64_t v16 = v132;
            if (!qword_1004F7FE8) {
              break;
            }
            char v115 = qword_1004F7FE8 + qword_1004CF758;
            swift_beginAccess();
            float32x4_t v116 = v115;
            int8x16_t v117 = v129;
            sub_100121CF8(v116, (uint64_t)v129, type metadata accessor for DebugSessionCoordinator.RecordReplayState);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              char v118 = *v117;
              int8x16_t v119 = v114;
              Swift::String v62 = sub_1000FE9C0();

              long long v63 = 4;
              goto LABEL_32;
            }
            uint64_t v72 = (uint64_t)v117;
            goto LABEL_42;
          case 9:
            goto LABEL_9;
          default:
            break;
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + v17 + 32) != 9) {
          return swift_bridgeObjectRelease();
        }
LABEL_9:
        uint64_t v23 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v3 + 88) + 144);
        int v24 = swift_retain();
        v23(v135, v24);
        swift_release();
        uint64_t v25 = v135[0];
        sub_10001F780(v135[0]);
        if (v25 == 0xC000000000000010)
        {
          if (qword_1004C29E0 != -1) {
            swift_once();
          }
          swift_retain();
          Synchronized.wrappedValue.getter();
          uint64_t v26 = swift_isUniquelyReferenced_nonNull_native();
          float32x4_t v134 = v135[0];
          v135[0] = 0x8000000000000000;
          sub_1000D4F9C(1, 7, v26);
          v135[0] = v134;
          swift_bridgeObjectRelease();
          float32x4_t v134 = v135[0];
          Synchronized.wrappedValue.setter();
          swift_release();
        }
        uint64_t v27 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v3 + 88) + 144);
        uint64_t v28 = swift_retain();
        v27(v135, v28);
        swift_release();
        uint64_t v29 = v135[0];
        sub_10001F780(v135[0]);
        if (v29 == 0xC000000000000010)
        {
          uint64_t v30 = v7;
          uint64_t v31 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v3 + 88) + 144);
          uint64_t v32 = swift_retain();
          v31(v135, v32);
          swift_release();
          uint64_t v33 = v135[0];
          if (!(v135[0] >> 62)
            || v135[0] >> 62 == 3 && (v135[0] == 0xC000000000000010 || v135[0] == 0xC000000000000008))
          {
            uint64_t v34 = (uint64_t (*)(void))sub_10012470C();
            if (v34)
            {
              uint64_t v35 = v34;
              uint64_t v36 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v34) + 0x250);
              id v37 = v36();
              if ((v37 & 0xC000000000000001) != 0)
              {
                uint64_t v38 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (!*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_100:
                  __break(1u);
LABEL_101:
                  __break(1u);
LABEL_102:
                  __break(1u);
LABEL_103:
                  __break(1u);
LABEL_104:
                  __break(1u);
LABEL_105:
                  __break(1u);
LABEL_106:
                  __break(1u);
LABEL_107:
                  __break(1u);
LABEL_108:
                  __break(1u);
                  JUMPOUT(0x10011608CLL);
                }
                uint64_t v38 = *(id *)(v37 + 32);
              }
              uint64_t v39 = v38;
              swift_bridgeObjectRelease();
              sub_100120A98(v35, v39);

              uint64_t v40 = v36();
              if ((v40 & 0xC000000000000001) != 0)
              {
                unint64_t v41 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                  goto LABEL_100;
                }
                unint64_t v41 = *(id *)(v40 + 40);
              }
              simd_float4 v42 = v41;
              swift_bridgeObjectRelease();
              sub_100120A98(v35, v42);

              simd_float4 v43 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v35) + 0xB8);
              simd_float4 v44 = v35;
              id v45 = v43();
              uint64_t v47 = v46;

              sub_1001236F8(v45, v47);
              swift_bridgeObjectRelease();
              uint64_t v48 = *(void **)(v3 + 312);
              *(void *)(v3 + 312) = 0;

              sub_100124874();
            }
          }
          sub_10001F780(v33);
          uint64_t v7 = v30;
          a1 = v131;
          uint64_t v16 = v132;
        }
        uint64_t v49 = *(void **)(v3 + 224);
        *(void *)(v3 + 224) = 0;

        long long v50 = *(void **)(v3 + 312);
        *(void *)(v3 + 312) = 0;

        sub_100122F20();
        double v51 = *(uint64_t (**)(unint64_t *))(**(void **)(v3 + 128) + 400);
        swift_retain();
        double v52 = (void (*)(unint64_t *, void))v51(v135);
        char v54 = *(void **)(v53 + 16);
        char v55 = *(void **)(v53 + 24);
        *(void *)(v53 + 16) = 0;
        *(void *)(v53 + 24) = 0;

        v52(v135, 0);
        swift_release();
        unsigned int v56 = *(void *)(v3 + 88);
        v135[0] = 0xC000000000000000;
        uint64_t v57 = *(void (**)(unint64_t *))(*(void *)v56 + 392);
        swift_retain();
        v57(v135);
        swift_release();
        if (qword_1004C29D8 != -1) {
          swift_once();
        }
        uint64_t v58 = (void *)qword_1004F7FE8;
        if (qword_1004F7FE8)
        {
          long long v59 = qword_1004F7FE8 + qword_1004CF758;
          swift_beginAccess();
          sub_100121CF8(v59, (uint64_t)v7, type metadata accessor for DebugSessionCoordinator.RecordReplayState);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            id v60 = *v7;
            id v61 = v58;
            Swift::String v62 = sub_1000FE9C0();

            long long v63 = 3;
LABEL_32:
            sub_100079908(v63, 0, 0, 1);
          }
          else
          {
            uint64_t v72 = (uint64_t)v7;
LABEL_42:
            sub_100121D60(v72, type metadata accessor for DebugSessionCoordinator.RecordReplayState);
          }
        }
      }
      if (v16 == ++v17) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

void sub_1001160A4(void **a1, void *a2, void *a3)
{
  uint64_t v6 = *a1;
  id v7 = a2;
  id v8 = a3;

  *a1 = a2;
  a1[1] = a3;
}

void sub_1001160F0(uint64_t a1, _OWORD *a2)
{
  void (*v37)(id *__return_ptr, uint64_t);
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  void (*v42)(unsigned char *__return_ptr, uint64_t);
  uint64_t v43;
  BOOL v44;
  char **v45;
  void (*v46)(unsigned char *__return_ptr, uint64_t);
  uint64_t v47;
  unsigned long long v48;
  unsigned long long v49;
  long long v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  float32x2_t *v54;
  void (*v55)(unsigned char *__return_ptr, uint64_t);
  uint64_t v56;
  void *v57;
  void (*v58)(unsigned char *__return_ptr, uint64_t);
  uint64_t v59;
  void *v60;
  char v61;
  void (*v62)(unsigned char *__return_ptr, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void (*v65)(unsigned char *__return_ptr, uint64_t);
  uint64_t v66;
  unint64_t v67;
  unsigned char *v68;
  void (*v69)(unsigned char *__return_ptr, uint64_t);
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  id v74;
  void (*v75)(unsigned char *__return_ptr, uint64_t);
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned char *v81;
  void (*v82)(unsigned char *__return_ptr, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void (*v94)(void);
  void *v95;
  void (*v96)(void);
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t (*v102)(unsigned char *);
  void (*v103)(unsigned char *, void);
  uint64_t v104;
  void *v105;
  void *v106;
  void (*v107)(unsigned char *__return_ptr, uint64_t);
  uint64_t v108;
  void (*v109)(unsigned char *__return_ptr, uint64_t);
  uint64_t v110;
  unint64_t v111;
  id v112;
  void (*v113)(unsigned char *__return_ptr, uint64_t);
  uint64_t v114;
  id v115;
  void (*v116)(unsigned char *__return_ptr, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  float32x4_t v122;
  uint64_t v123;
  float v124;
  char v125;
  float32x4_t *v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  uint64_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float v133;
  float v134;
  BOOL v136;
  void *v137;
  char v138;
  float32x2_t *v139;
  int v140;
  float32x2_t v141;
  float32x4_t v142;
  __n128 v143;
  float32x4_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 v158;
  int v159;
  uint64_t v160;
  void (*v161)(long long *__return_ptr, uint64_t);
  uint64_t v162;
  void *v163;
  uint64_t v164;
  float32x2_t v165;
  float v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  double v171;
  uint64_t v172;
  id v173;
  double v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  unsigned char *v179;
  uint64_t v180;
  id v181;
  id v182;
  void (*v183)(unsigned char *__return_ptr, uint64_t);
  uint64_t v184;
  uint64_t v185;
  void (*v186)(unsigned char *__return_ptr, uint64_t);
  uint64_t v187;
  uint64_t v188;
  void (*v189)(unsigned char *__return_ptr, uint64_t);
  uint64_t v190;
  void *v191;
  void *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  double v197;
  double v198;
  double v199;
  uint64_t v200;
  id v201;
  void (*v202)(unsigned char *__return_ptr, uint64_t);
  uint64_t v203;
  void *v204;
  void *v205;
  void *v206;
  uint64_t v207;
  void (*v208)(unsigned char *__return_ptr, uint64_t);
  uint64_t v209;
  uint64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  void *v218;
  float32x4_t v219;
  void (*v220)(void);
  void *v221;
  float32x4_t v222;
  float32x4_t v223;
  long long v224;
  long long v225;
  long long v226;
  long long v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  __n128 v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  int32x4_t v245;
  float32x2_t v246;
  float32x2_t v247;
  float32x4_t v248;
  __n128 v249;
  uint64_t v250;
  void *v251;
  void (*v252)(uint64_t);
  void *v253;
  float32x4_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  id v260;
  long long v261;
  uint64_t v262;
  float32x2_t v263;
  uint64_t v264;
  unint64_t v265;
  unsigned char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  char *v273;
  void *v274;
  id v275;
  char *v276;
  double v277;
  uint64_t v278;
  uint64_t v279;
  __int8 v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  Swift::String v285;
  Swift::String v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  double v294;
  float32x4_t v295;
  uint64_t v296;
  unsigned char *v297;
  char v298;
  void *v299;
  id v300;
  void *v301;
  uint64_t (*v302)(unsigned char *);
  unint64_t v303;
  uint64_t v304;
  void *v305;
  void *v306;
  void (*v307)(uint64_t);
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  id v312;
  double v313;
  uint64_t v314;
  long long v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  id v321[3];
  void *v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  __n128 v328;
  id v329[3];
  uint64_t v330;
  _OWORD *v331;
  void *v332;
  __n128 v333;
  uint64_t v334;
  float32x4_t v335;
  __n128 v336;
  long long v337;
  long long v338;
  long long v339;
  long long v340;
  long long v341;
  long long v342;
  long long v343;
  void v344[2];
  unint64_t v345;
  unsigned char *v346;
  uint64_t v347;
  uint64_t v348;
  __int8 v349;
  long long v350;
  long long v351;
  long long v352;
  long long v353;
  char v354;
  id v355[18];
  unsigned char v356[152];
  unsigned char v357[152];
  long long v358;
  __n128 v359;
  float32x4_t v360;
  __n128 v361;
  float32x4_t v362;
  double v363;
  uint64_t v364;
  float32x4_t v365;
  uint64_t v366;
  uint64_t v367;
  char v368;
  long long v369;
  __n128 v370;
  float32x4_t v371;
  __n128 v372;
  float32x4_t v373;
  long long v374;
  long long v375;
  long long v376;
  long long v377;
  char v378;
  unsigned char v379[152];
  unsigned char v380[152];
  _OWORD v381[9];
  double *v382;
  unint64_t v383;
  id v384[20];
  unint64_t v385;
  unsigned char *v386;
  uint64_t v387;
  uint64_t v388;
  unsigned __int8 v389;
  long long v390;
  long long v391;
  long long v392;
  long long v393;
  long long v394;
  long long v395;
  long long v396;
  long long v397;
  long long v398;
  unint64_t v399;
  unsigned char *v400;
  uint64_t v401;
  unint64_t v402;
  unsigned __int8 v403;
  uint64_t v404;
  _OWORD v405[2];
  uint64_t v406;
  unsigned char v407[32];
  unsigned char v408[104];
  unsigned char v409[48];
  unsigned char v410[48];
  unsigned char v411[48];
  long long v412;
  long long v413;
  long long v414;
  long long v415;
  char v416;
  long long v417;
  long long v418;
  long long v419;
  long long v420;
  char v421;
  long long v422;
  long long v423;
  long long v424;
  long long v425;
  long long v426;
  long long v427;
  long long v428;
  char v429;
  void v430[2];
  char v431;

  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for ARCamera.TrackingState.Reason();
  uint64_t v9 = *(unint64_t **)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v309 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v333.n128_u64[0] = (unint64_t)&v309 - v13;
  uint64_t v14 = type metadata accessor for ARCamera.TrackingState();
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (_OWORD *)((char *)&v309 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for SessionState();
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t)&v309 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (void *)sub_1000A3850();
  if (v20)
  {
    v330 = a1;
    v331 = a2;
    v332 = v20;

    v334 = v5;
    uint64_t v21 = *(void *)(v5 + 136);
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)v21 + 144);
    uint64_t v23 = *(void *)v21 + 144;
    uint64_t v24 = swift_retain();
    ((void (*)(uint64_t))v22)(v24);
    swift_release();
    sub_100121CF8(v19 + *(int *)(v17 + 20), (uint64_t)v16, (uint64_t (*)(void))&type metadata accessor for ARCamera.TrackingState);
    sub_100121D60(v19, (uint64_t (*)(void))type metadata accessor for SessionState);
    int v25 = ((uint64_t (*)(_OWORD *, uint64_t, uint64_t))v9[6])(v16, 2, v8);
    if (v25)
    {
      if (v25 == 1)
      {
        sub_10011B11C();
        sub_100121D60((uint64_t)v16, (uint64_t (*)(void))&type metadata accessor for ARCamera.TrackingState);
        return;
      }
      uint64_t v23 = v334;
      swift_retain();
      StateValue.wrappedValue.getter();
      swift_release();
      if ((BYTE3(v384[0]) & 1) != 0 || *(unsigned char *)(v23 + 208) != 1)
      {
LABEL_38:
        uint64_t v19 = (uint64_t)v380;
        uint64_t v16 = v379;
        v383 = 0;
        id v37 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 128) + 144);
        uint64_t v38 = swift_retain();
        v37(v384, v38);
        swift_release();
        uint64_t v39 = v384[1];
        uint64_t v40 = v384[2];
        uint64_t v12 = v384[3];

        unint64_t v41 = self;
        if ([v41 jasperAvailable])
        {
          sub_100053058((uint64_t)v379);
          sub_100016FEC((uint64_t)v379, (uint64_t)v380, (uint64_t *)&unk_1004CEA30);
          *(void *)&v380[136] = 0;
          *(void *)&v380[144] = _swiftEmptyArrayStorage;
          v382 = _swiftEmptyArrayStorage;
          v381[6] = *(_OWORD *)&v380[96];
          v381[7] = *(_OWORD *)&v380[112];
          v381[2] = *(_OWORD *)&v380[32];
          v381[3] = *(_OWORD *)&v380[48];
          v381[4] = *(_OWORD *)&v380[64];
          v381[5] = *(_OWORD *)&v380[80];
          v381[0] = *(_OWORD *)v380;
          v381[1] = *(_OWORD *)&v380[16];
          v381[8] = *(unint64_t *)&v380[128];
          nullsub_1(v381);
        }
        else
        {
          sub_100121DC0((uint64_t)v381);
        }
        sub_100016FEC((uint64_t)v381, (uint64_t)v384, &qword_1004CC330);
        sub_100016FEC((uint64_t)v384, (uint64_t)v381, &qword_1004CC330);
        simd_float4 v42 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 152) + 144);
        simd_float4 v43 = swift_retain();
        v42(v380, v43);
        swift_release();
        v426 = *(_OWORD *)&v380[64];
        v427 = *(_OWORD *)&v380[80];
        v428 = *(_OWORD *)&v380[96];
        v429 = v380[112];
        v422 = *(_OWORD *)v380;
        v423 = *(_OWORD *)&v380[16];
        v424 = *(_OWORD *)&v380[32];
        v425 = *(_OWORD *)&v380[48];
        simd_float4 v44 = sub_100081594();
        char v322 = v12;
        v320.i32[0] = v44;
        v321[0] = v41;
        if (v44) {
          goto LABEL_52;
        }
        id v45 = &selRef_replaySensorDidFinishReplayingData;
        if (![v41 jasperAvailable]) {
          goto LABEL_49;
        }
        NSString v46 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 200) + 144);
        uint64_t v47 = swift_retain();
        v46(v379, v47);
        swift_release();
        *(_OWORD *)&v380[96] = *(_OWORD *)&v379[96];
        *(_OWORD *)&v380[112] = *(_OWORD *)&v379[112];
        *(_OWORD *)&v380[128] = *(_OWORD *)&v379[128];
        *(void *)&v380[144] = *(void *)&v379[144];
        *(_OWORD *)&v380[32] = *(_OWORD *)&v379[32];
        *(_OWORD *)&v380[48] = *(_OWORD *)&v379[48];
        *(_OWORD *)&v380[64] = *(_OWORD *)&v379[64];
        *(_OWORD *)&v380[80] = *(_OWORD *)&v379[80];
        *(_OWORD *)v380 = *(_OWORD *)v379;
        *(_OWORD *)&v380[16] = *(_OWORD *)&v379[16];
        v412 = *(_OWORD *)v379;
        v413 = *(_OWORD *)&v379[16];
        v414 = *(_OWORD *)&v379[32];
        v415 = *(_OWORD *)&v379[48];
        uint64_t v48 = *(_OWORD *)&v379[64];
        uint64_t v49 = *(_OWORD *)&v379[80];
        v333.n128_u64[0] = *(void *)&v379[96];
        v329[0] = *(id *)&v379[104];
        long long v50 = *(_OWORD *)&v379[112];
        double v51 = v379[128];
        *(void *)&v408[39] = *(void *)&v379[144];
        *(_OWORD *)&v408[24] = *(_OWORD *)&v380[129];
        sub_100016FEC((uint64_t)v380, (uint64_t)&v369, (uint64_t *)&unk_1004CEA30);
        if (sub_100016B28((uint64_t *)&v369) == 1)
        {
          sub_100016F3C((uint64_t)v380);
        }
        else
        {
          *(_OWORD *)v379 = v412;
          *(_OWORD *)&v379[16] = v413;
          *(_OWORD *)&v379[32] = v414;
          *(_OWORD *)&v379[48] = v415;
          v325.i64[0] = v48 >> 64;
          v328.n128_u64[0] = v48;
          *(_OWORD *)&v379[64] = v48;
          v327.i64[0] = v49 >> 64;
          v326.i64[0] = v49;
          *(_OWORD *)&v379[80] = v49;
          double v52 = v333.n128_u64[0];
          *(void *)&v379[96] = v333.n128_u64[0];
          uint64_t v53 = (uint64_t)v329[0];
          *(id *)&v379[104] = v329[0];
          *(_OWORD *)&v379[112] = v50;
          v379[128] = v51;
          *(void *)&v379[144] = *(void *)&v408[39];
          *(_OWORD *)&v379[129] = *(_OWORD *)&v408[24];
          sub_100016F3C((uint64_t)v379);
          if ((v51 & 1) == 0)
          {
            v324.i64[0] = *((void *)&v50 + 1);
            char v54 = (float32x2_t *)v334;
            char v55 = *(void (**)(void *__return_ptr, void))(**(void **)(v334 + 200) + 144);
            unsigned int v56 = swift_retain();
            v55(v356, v56);
            swift_release();
            *(_OWORD *)&v357[96] = *(_OWORD *)&v356[96];
            *(_OWORD *)&v357[112] = *(_OWORD *)&v356[112];
            *(_OWORD *)&v357[32] = *(_OWORD *)&v356[32];
            *(_OWORD *)&v357[48] = *(_OWORD *)&v356[48];
            *(_OWORD *)&v357[128] = *(_OWORD *)&v356[128];
            *(void *)&v357[144] = *(void *)&v356[144];
            *(_OWORD *)&v357[64] = *(_OWORD *)&v356[64];
            *(_OWORD *)&v357[80] = *(_OWORD *)&v356[80];
            *(_OWORD *)v357 = *(_OWORD *)v356;
            *(_OWORD *)&v357[16] = *(_OWORD *)&v356[16];
            uint64_t v57 = *(void **)v356;
            uint64_t v19 = (uint64_t)v380;
            v396 = *(_OWORD *)&v357[104];
            v397 = *(_OWORD *)&v357[120];
            v398 = *(_OWORD *)&v357[136];
            v392 = *(_OWORD *)&v357[40];
            v393 = *(_OWORD *)&v357[56];
            v394 = *(_OWORD *)&v357[72];
            v395 = *(_OWORD *)&v357[88];
            v390 = *(_OWORD *)&v357[8];
            v391 = *(_OWORD *)&v357[24];
            sub_100016FEC((uint64_t)v357, (uint64_t)&v358, (uint64_t *)&unk_1004CEA30);
            if (sub_100016B28((uint64_t *)&v358) == 1)
            {
              sub_100016F3C((uint64_t)v357);
              uint64_t v23 = (uint64_t)v54;
              uint64_t v12 = v322;
              unint64_t v41 = v321[0];
              id v45 = &selRef_replaySensorDidFinishReplayingData;
              uint64_t v16 = v379;
            }
            else
            {
              v254.i64[0] = v328.n128_u64[0];
              int v255 = v53;
              unsigned __int8 v256 = v325.i64[0];
              v254.i64[1] = v325.i64[0];
              v323 = v254;
              *(_OWORD *)&v356[88] = v395;
              *(_OWORD *)&v356[104] = v396;
              *(_OWORD *)&v356[120] = v397;
              *(_OWORD *)&v356[136] = v398;
              *(_OWORD *)&v356[24] = v391;
              *(_OWORD *)&v356[40] = v392;
              unsigned __int8 v257 = v52;
              long long v258 = v326.i64[0];
              v254.i64[0] = v326.i64[0];
              v259 = v327.i64[0];
              v254.i64[1] = v327.i64[0];
              char v319 = v254;
              *(_OWORD *)&v356[56] = v393;
              v254.i64[0] = v257;
              v254.i64[1] = v255;
              int v318 = v254;
              *(_OWORD *)&v356[72] = v394;
              v316.i64[1] = v50;
              v254.i64[0] = v50;
              v254.i64[1] = v324.i64[0];
              v317 = v254;
              *(void *)v356 = v57;
              *(_OWORD *)&v356[8] = v390;
              uint64_t v260 = v57;
              sub_100016F3C((uint64_t)v356);
              type metadata accessor for MeasureCamera();
              simd_float4x4.position.getter();
              static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
              uint64_t v262 = (uint64_t)v54;
              uint64_t v263 = vsub_f32(*(float32x2_t *)&v261, v54[58]);
              uint64_t v16 = v379;
              if (vaddv_f32(vmul_f32(v263, v263)) < 900.0)
              {
                v316.i64[0] = (uint64_t)v260;
                v417 = 0u;
                v418 = 0u;
                v419 = 0u;
                v420 = 0u;
                v421 = 1;
                v315 = v261;
                type metadata accessor for WorldAnchor();
                swift_allocObject();
                int v264 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)();
                sub_10011CA48(*(double *)&v315, v264, 8, 3);
                sub_10011C81C(v262, (uint64_t)&v385);
                unsigned __int8 v265 = v385;
                unsigned __int8 v266 = v386;
                uint64_t v267 = v387;
                v323.i64[0] = v388;
                v319.i32[0] = v389;
                swift_release();
                sub_100016FEC((uint64_t)v384, (uint64_t)&v335, &qword_1004CC330);
                if (sub_100121EA8((uint64_t)&v335) == 1)
                {
                }
                else
                {
                  v344[0] = v316.i64[0];
                  v345 = v265;
                  v346 = v266;
                  v347 = v267;
                  v348 = v323.i64[0];
                  v349 = v319.i8[0];
                  *(void *)&v350 = v328.n128_u64[0];
                  *((void *)&v350 + 1) = v256;
                  *(void *)&v351 = v258;
                  *((void *)&v351 + 1) = v259;
                  *(void *)&v352 = v333.n128_u64[0];
                  *((id *)&v352 + 1) = v329[0];
                  *(void *)&v353 = v316.i64[1];
                  *((void *)&v353 + 1) = v324.i64[0];
                  v354 = 0;
                  nullsub_1(v344);
                  sub_100016FEC((uint64_t)v381, (uint64_t)v355, (uint64_t *)&unk_1004CEA30);
                  sub_100016B6C(v355);
                  sub_100016FEC((uint64_t)v344, (uint64_t)v381, (uint64_t *)&unk_1004CEA30);
                }
                id v61 = 1;
                uint64_t v23 = v334;
                uint64_t v12 = v322;
                goto LABEL_53;
              }

              uint64_t v23 = v262;
              uint64_t v12 = v322;
              unint64_t v41 = v321[0];
              id v45 = &selRef_replaySensorDidFinishReplayingData;
            }
LABEL_49:
            if (![v41 v45[55]])
            {
LABEL_52:
              id v61 = 0;
              goto LABEL_53;
            }
            uint64_t v58 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 200) + 144);
            long long v59 = swift_retain();
            v58(v379, v59);
            swift_release();
            *(_OWORD *)&v380[96] = *(_OWORD *)&v379[96];
            *(_OWORD *)&v380[112] = *(_OWORD *)&v379[112];
            *(_OWORD *)&v380[32] = *(_OWORD *)&v379[32];
            *(_OWORD *)&v380[48] = *(_OWORD *)&v379[48];
            *(_OWORD *)&v380[128] = *(_OWORD *)&v379[128];
            *(void *)&v380[144] = *(void *)&v379[144];
            *(_OWORD *)&v380[64] = *(_OWORD *)&v379[64];
            *(_OWORD *)&v380[80] = *(_OWORD *)&v379[80];
            *(_OWORD *)v380 = *(_OWORD *)v379;
            *(_OWORD *)&v380[16] = *(_OWORD *)&v379[16];
            id v60 = *(void **)v379;
            v340 = *(_OWORD *)&v380[88];
            v341 = *(_OWORD *)&v380[104];
            v342 = *(_OWORD *)&v380[120];
            v343 = *(_OWORD *)&v380[136];
            v337 = *(_OWORD *)&v380[40];
            v338 = *(_OWORD *)&v380[56];
            v339 = *(_OWORD *)&v380[72];
            v335 = *(float32x4_t *)&v380[8];
            v336 = *(__n128 *)&v380[24];
            sub_100016FEC((uint64_t)v380, (uint64_t)&v390, (uint64_t *)&unk_1004CEA30);
            if (sub_100016B28((uint64_t *)&v390) == 1)
            {
              sub_100016F3C((uint64_t)v380);
              goto LABEL_52;
            }
            *(_OWORD *)&v357[88] = v340;
            *(_OWORD *)&v357[104] = v341;
            *(_OWORD *)&v357[120] = v342;
            *(_OWORD *)&v357[136] = v343;
            *(__n128 *)&v357[24] = v336;
            *(_OWORD *)&v357[40] = v337;
            *(_OWORD *)&v357[56] = v338;
            *(_OWORD *)&v357[72] = v339;
            *(void *)v357 = v60;
            *(float32x4_t *)&v357[8] = v335;
            char v115 = v60;
            sub_100016F3C((uint64_t)v357);
            v417 = 0u;
            v418 = 0u;
            v419 = 0u;
            v420 = 0u;
            v421 = 1;
            float32x4_t v116 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 200) + 144);
            int8x16_t v117 = swift_retain();
            v116(v356, v117);
            swift_release();
            *(_OWORD *)&v379[96] = *(_OWORD *)&v356[96];
            *(_OWORD *)&v379[112] = *(_OWORD *)&v356[112];
            *(_OWORD *)&v379[128] = *(_OWORD *)&v356[128];
            *(void *)&v379[144] = *(void *)&v356[144];
            *(_OWORD *)&v379[32] = *(_OWORD *)&v356[32];
            *(_OWORD *)&v379[48] = *(_OWORD *)&v356[48];
            *(_OWORD *)&v379[64] = *(_OWORD *)&v356[64];
            *(_OWORD *)&v379[80] = *(_OWORD *)&v356[80];
            *(_OWORD *)v379 = *(_OWORD *)v356;
            *(_OWORD *)&v379[16] = *(_OWORD *)&v356[16];
            char v118 = *(void *)&v356[144];
            swift_bridgeObjectRetain();
            sub_100016F3C((uint64_t)v379);
            int8x16_t v119 = *(void *)(v118 + 16);
            if (v119)
            {
              char v312 = v115;
              type metadata accessor for MeasureCamera();
              v319.i64[0] = 0;
              long long v314 = 0;
              *(void *)&v315 = 0;
              v317.i64[0] = 0;
              v318.i64[0] = 0;
              char v316 = 0uLL;
              float32x4_t v120 = 0;
              v313 = 0.0;
              int8x16_t v121 = 0;
              v333 = *((__n128 *)v331 + 11);
              int8x16_t v122 = *((float32x4_t *)v331 + 12);
              v328 = *((__n128 *)v331 + 13);
              *(float32x4_t *)v329 = v122;
              v327 = *((float32x4_t *)v331 + 14);
              float32x4_t v123 = v118 + 80;
              float32x4_t v124 = 900.0;
              int8x16_t v125 = 1;
              long long v310 = v118 + 80;
              v311 = v119 - 1;
LABEL_95:
              float32x4_t v126 = (float32x4_t *)(v123 + (v121 << 6));
              do
              {
                float32x4_t v127 = v126[-2];
                int8x16_t v128 = v126[-1];
                double v129 = *v126;
                uint64_t v130 = v121 + 1;
                v323 = v126[-3];
                Swift::String v324 = v127;
                v325 = v128;
                v326 = v129;
                simd_float4x4.position.getter();
                static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
                int8x16_t v132 = vsub_f32(v131, *(float32x2_t *)(v334 + 464));
                int8x16_t v133 = vaddv_f32(vmul_f32(v132, v132));
                if (v134 < 1.0 && v133 < v124)
                {
                  int8x16_t v125 = 0;
                  v313 = *(double *)&v131;
                  v319.i64[0] = v323.i64[0];
                  v318.i64[0] = v324.i64[1];
                  v317.i64[0] = v324.i64[0];
                  char v316 = v325;
                  float32x4_t v120 = v326.i64[0];
                  long long v314 = v323.i64[1];
                  *(void *)&v315 = v326.i64[1];
                  float32x4_t v124 = v133;
                  float32x4_t v123 = v310;
                  int8x16_t v136 = v311 == v121++;
                  if (!v136) {
                    goto LABEL_95;
                  }
                  swift_bridgeObjectRelease();
                  goto LABEL_116;
                }
                v126 += 4;
                ++v121;
              }
              while (v119 != v130);
              swift_bridgeObjectRelease();
              if (v125)
              {

                id v61 = 0;
                uint64_t v23 = v334;
                uint64_t v12 = v322;
                uint64_t v19 = (uint64_t)v380;
                goto LABEL_53;
              }
LABEL_116:
              v326.i64[0] = v120;
              v149.n128_u64[0] = v120;
              Class v150 = v314;
              v149.n128_u64[1] = v315;
              v333 = v149;
              *(float32x4_t *)v329 = v316;
              v149.n128_u64[0] = v317.i64[0];
              v149.n128_u64[1] = v318.i64[0];
              v328 = v149;
              v149.n128_u64[0] = v319.i64[0];
              v149.n128_u64[1] = v314;
              v327 = (float32x4_t)v149;
              NSString v151 = v313;
              type metadata accessor for WorldAnchor();
              swift_allocObject();
              id v152 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)();
              int8x16_t v153 = v334;
              sub_10011CA48(v151, v152, 8, 3);
              sub_10011C81C(v153, (uint64_t)&v385);
              NSString v154 = v385;
              Class v155 = (unint64_t)v386;
              id v156 = v387;
              id v157 = v388;
              uint64_t v158 = v389;
              swift_release();
              sub_100016FEC((uint64_t)v384, (uint64_t)v356, &qword_1004CC330);
              unint64_t v159 = sub_100121EA8((uint64_t)v356);
              uint64_t v12 = v322;
              if (v159 == 1)
              {
              }
              else
              {
                *(void *)&v358 = v312;
                v359.n128_u64[0] = v154;
                v359.n128_u64[1] = v155;
                v360.i64[0] = v156;
                v360.i64[1] = v157;
                v361.n128_u8[0] = v158;
                v362.i64[0] = v319.i64[0];
                v362.i64[1] = v150;
                v363 = *(double *)v317.i64;
                v364 = v318.i64[0];
                v365 = v316;
                v366 = v326.i64[0];
                v367 = v315;
                v368 = 0;
                nullsub_1(&v358);
                sub_100016FEC((uint64_t)v381, (uint64_t)&v369, (uint64_t *)&unk_1004CEA30);
                sub_100016B6C((id *)&v369);
                sub_100016FEC((uint64_t)&v358, (uint64_t)v381, (uint64_t *)&unk_1004CEA30);
              }
              id v61 = 1;
            }
            else
            {

              swift_bridgeObjectRelease();
              id v61 = 0;
            }
            uint64_t v23 = v334;
            uint64_t v19 = (uint64_t)v380;
LABEL_53:
            Swift::String v62 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 176) + 144);
            long long v63 = swift_retain();
            v62(v380, v63);
            swift_release();
            swift_bridgeObjectRelease();
            long long v64 = *(void *)&v380[8];
            swift_bridgeObjectRelease();
            uint64_t v65 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 176) + 144);
            uint64_t v66 = swift_retain();
            v65(v380, v66);
            swift_release();
            uint64_t v67 = *(void *)v380;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(void *)v380 = v64;
            sub_1001222D0(v67);
            id v68 = *(unsigned char **)v380;
            id v69 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 176) + 144);
            uint64_t v70 = swift_retain();
            v69(v380, v70);
            swift_release();
            uint64_t v71 = *(void *)&v380[16];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(void *)v380 = v68;
            sub_1001222D0(v71);
            uint64_t v72 = *(void *)v380;
            if (v61)
            {
              swift_bridgeObjectRelease();
              v329[0] = 0;
              uint64_t v12 = 0;
              v333.n128_u64[0] = 0;
              LOBYTE(v73) = 1;
              goto LABEL_139;
            }
            if (v320.i8[0])
            {
              swift_bridgeObjectRelease();
              __n128 v74 = v321[0];
              goto LABEL_80;
            }
            if ([v321[0] jasperAvailable])
            {
              uint64_t v75 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 200) + 144);
              uint64_t v76 = swift_retain();
              v75(v379, v76);
              swift_release();
              *(_OWORD *)&v380[96] = *(_OWORD *)&v379[96];
              *(_OWORD *)&v380[112] = *(_OWORD *)&v379[112];
              *(_OWORD *)&v380[32] = *(_OWORD *)&v379[32];
              *(_OWORD *)&v380[48] = *(_OWORD *)&v379[48];
              *(_OWORD *)&v380[128] = *(_OWORD *)&v379[128];
              *(void *)&v380[144] = *(void *)&v379[144];
              *(_OWORD *)&v380[64] = *(_OWORD *)&v379[64];
              *(_OWORD *)&v380[80] = *(_OWORD *)&v379[80];
              *(_OWORD *)v380 = *(_OWORD *)v379;
              *(_OWORD *)&v380[16] = *(_OWORD *)&v379[16];
              uint64_t v77 = *(void **)v379;
              v375 = *(_OWORD *)&v380[104];
              v376 = *(_OWORD *)&v380[120];
              v377 = *(_OWORD *)&v380[136];
              v371 = *(float32x4_t *)&v380[40];
              v372 = *(__n128 *)&v380[56];
              v373 = *(float32x4_t *)&v380[72];
              v374 = *(_OWORD *)&v380[88];
              v369 = *(_OWORD *)&v380[8];
              v370 = *(__n128 *)&v380[24];
              sub_100016FEC((uint64_t)v380, (uint64_t)&v358, (uint64_t *)&unk_1004CEA30);
              if (sub_100016B28((uint64_t *)&v358) == 1)
              {
                swift_bridgeObjectRelease();
                sub_100016F3C((uint64_t)v380);
              }
              else
              {
                *(_OWORD *)&v379[88] = v374;
                *(_OWORD *)&v379[104] = v375;
                *(_OWORD *)&v379[120] = v376;
                *(_OWORD *)&v379[136] = v377;
                *(__n128 *)&v379[24] = v370;
                *(float32x4_t *)&v379[40] = v371;
                *(__n128 *)&v379[56] = v372;
                *(float32x4_t *)&v379[72] = v373;
                *(void *)v379 = v77;
                *(_OWORD *)&v379[8] = v369;
                float32x4_t v137 = v77;
                sub_100016F3C((uint64_t)v379);
                float32x4_t v138 = sub_100113888((uint64_t)v137, v72);
                swift_bridgeObjectRelease();
                if (v138)
                {
                  id v139 = (float32x2_t *)v334;
                  sub_10011CDB0(v137, (uint64_t)&v390);
                  sub_100016FEC((uint64_t)&v390, (uint64_t)&v335, &qword_1004CC348);
                  id v140 = sub_100121EC0((uint64_t)&v335);
                  __n128 v74 = v321[0];
                  if (v140 != 1)
                  {
                    Class v141 = vsub_f32(v139[58], *(float32x2_t *)v335.f32);
                    if (vaddv_f32(vmul_f32(v141, v141)) < 900.0)
                    {
                      v326 = v335;
                      v333 = sub_100121EDC(*(double *)v335.i64, v336);
                      v328 = v143;
                      *(float32x4_t *)v329 = v142;
                      v327 = v144;
                      v412 = 0u;
                      v413 = 0u;
                      v414 = 0u;
                      v415 = 0u;
                      LOBYTE(v73) = 1;
                      v416 = 1;
                      type metadata accessor for WorldAnchor();
                      swift_allocObject();
                      id v145 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)();
                      if ((*(unsigned __int8 (**)(void))((swift_isaMask & *v137) + 0x258))() == 3) {
                        Class v146 = 6;
                      }
                      else {
                        Class v146 = 5;
                      }
                      sub_10011CA48(*(double *)v326.i64, v145, v146, 3);
                      sub_10011C81C((uint64_t)v139, (uint64_t)&v399);
                      NSString v147 = v399;
                      id v68 = v400;
                      NSNumber v148 = v401;
                      v333.n128_u64[0] = v402;
                      LODWORD(v329[0]) = v403;
                      swift_release();
                      sub_100016FEC((uint64_t)v381, (uint64_t)v356, &qword_1004CC330);
                      sub_100016FEC((uint64_t)v356, (uint64_t)v357, &qword_1004CC330);
                      if (sub_100121EA8((uint64_t)v357) == 1)
                      {

LABEL_239:
                        v329[0] = 0;
                        uint64_t v12 = 0;
                        v333.n128_u64[0] = 0;
                        uint64_t v23 = v334;
                        goto LABEL_139;
                      }
                      v344[0] = v137;
                      v345 = v147;
                      v346 = v68;
                      v347 = v148;
                      v348 = v333.n128_u64[0];
                      v349 = (__int8)v329[0];
                      v350 = 0u;
                      v351 = 0u;
                      v352 = 0u;
                      v353 = 0u;
                      v354 = 1;
                      nullsub_1(v344);
                      sub_100016FEC((uint64_t)v381, (uint64_t)v355, (uint64_t *)&unk_1004CEA30);
                      sub_100016B6C(v355);
                      unsigned __int8 v297 = v344;
LABEL_238:
                      sub_100016FEC((uint64_t)v297, (uint64_t)v381, (uint64_t *)&unk_1004CEA30);
                      goto LABEL_239;
                    }
                  }

LABEL_62:
                  if ((*(void *)SnapType.userPoint.unsafeMutableAddressor() & ~v330) != 0) {
                    goto LABEL_80;
                  }
                  double v3 = *(double *)(v334 + 464);
                  LODWORD(v4) = *(_DWORD *)(v334 + 472);
                  uint64_t v23 = *(void *)(v334 + 72);
                  swift_beginAccess();
                  uint64_t v78 = swift_bridgeObjectRetain();
                  sub_1000A6410(v78, *(float32x2_t *)&v3, *(float *)&v4);
                  uint64_t v80 = v79;
                  id v68 = v81;
                  swift_bridgeObjectRelease();
                  v328.n128_u64[0] = v80;
                  if (!v80)
                  {
LABEL_80:
                    uint64_t v23 = v334;
                    if (v12)
                    {
                      uint64_t v94 = *(void (**)(void))((swift_isaMask & *v12) + 0x2F0);
                      id v68 = (unsigned char *)((swift_isaMask & *v12) + 752);
                      char v95 = v12;
                      v94();

                      if (!WorldPointType.isSnap()())
                      {
                        id v96 = *(void (**)(void))((swift_isaMask & *v95) + 0xD8);
                        id v97 = v95;
                        v96(0);

                        id v98 = *(void **)(v23 + 312);
                        if (v98)
                        {
                          double v99 = v98;
                          sub_100122D4C(v99);

                          id v100 = *(void **)(v23 + 312);
                          if (!v100)
                          {
                            __break(1u);
LABEL_266:

                            __break(1u);
                            return;
                          }
                          uint64_t v101 = v100;
                          sub_1001231B8(v101);
                        }
                        UIContentSizeCategory v102 = *(uint64_t (**)(void))(**(void **)(v23 + 128) + 400);
                        swift_retain();
                        id v68 = v380;
                        uint64_t v103 = (void (*)(void, void))v102(v380);
                        char v105 = *(void **)(v104 + 16);
                        float v106 = *(void **)(v104 + 24);
                        *(void *)(v104 + 16) = 0;
                        *(void *)(v104 + 24) = 0;

                        v103(v380, 0);
                        swift_release();
                      }
                    }
                    if (qword_1004C2D00 != -1) {
                      swift_once();
                    }
                    if (byte_1004F8530 == 1)
                    {
                      uint64_t v107 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 192) + 144);
                      uint64_t v108 = swift_retain();
                      v107(v379, v108);
                      swift_release();
                      *(_OWORD *)&v380[96] = *(_OWORD *)&v379[96];
                      *(_OWORD *)&v380[112] = *(_OWORD *)&v379[112];
                      *(_OWORD *)&v380[128] = *(_OWORD *)&v379[128];
                      v380[144] = v379[144];
                      *(_OWORD *)&v380[32] = *(_OWORD *)&v379[32];
                      *(_OWORD *)&v380[48] = *(_OWORD *)&v379[48];
                      *(_OWORD *)&v380[64] = *(_OWORD *)&v379[64];
                      *(_OWORD *)&v380[80] = *(_OWORD *)&v379[80];
                      *(_OWORD *)v380 = *(_OWORD *)v379;
                      *(_OWORD *)&v380[16] = *(_OWORD *)&v379[16];
                      sub_1000ED828((uint64_t)v380);
                      if (v380[1] == 1)
                      {
                        id v109 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 192) + 144);
                        id v110 = swift_retain();
                        v109(v357, v110);
                        swift_release();
                        id v68 = v357;
                        *(_OWORD *)&v379[96] = *(_OWORD *)&v357[96];
                        *(_OWORD *)&v379[112] = *(_OWORD *)&v357[112];
                        *(_OWORD *)&v379[128] = *(_OWORD *)&v357[128];
                        v379[144] = v357[144];
                        *(_OWORD *)&v379[32] = *(_OWORD *)&v357[32];
                        *(_OWORD *)&v379[48] = *(_OWORD *)&v357[48];
                        *(_OWORD *)&v379[64] = *(_OWORD *)&v357[64];
                        *(_OWORD *)&v379[80] = *(_OWORD *)&v357[80];
                        *(_OWORD *)v379 = *(_OWORD *)v357;
                        *(_OWORD *)&v379[16] = *(_OWORD *)&v357[16];
                        char v111 = *(void *)&v357[48];
                        char v112 = *(id *)&v357[48];
                        sub_1000ED828((uint64_t)v379);
                        if (v111)
                        {
                          v333.n128_u64[0] = v111;
                          float v113 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 192) + 144);
                          float v114 = swift_retain();
                          v113(v356, v114);
                          swift_release();
                          *(_OWORD *)&v357[96] = *(_OWORD *)&v356[96];
                          *(_OWORD *)&v357[112] = *(_OWORD *)&v356[112];
                          *(_OWORD *)&v357[128] = *(_OWORD *)&v356[128];
                          v357[144] = v356[144];
                          *(_OWORD *)&v357[32] = *(_OWORD *)&v356[32];
                          *(_OWORD *)&v357[48] = *(_OWORD *)&v356[48];
                          *(_OWORD *)&v357[64] = *(_OWORD *)&v356[64];
                          *(_OWORD *)&v357[80] = *(_OWORD *)&v356[80];
                          *(_OWORD *)v357 = *(_OWORD *)v356;
                          *(_OWORD *)&v357[16] = *(_OWORD *)&v356[16];
                          sub_1000ED828((uint64_t)v357);
                          if (v357[128])
                          {
                          }
                          else
                          {
                            v326.i64[0] = *(void *)&v357[120];
                            uint64_t v160 = *(void *)&v357[112];
                            v327.i64[0] = *(void *)&v357[104];
                            v323.i64[0] = *(void *)&v357[96];
                            v328.n128_u64[0] = *(void *)&v357[88];
                            v324.i64[0] = *(void *)&v357[80];
                            v329[0] = *(id *)&v357[72];
                            v325.i64[0] = *(void *)&v357[64];
                            id v161 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 192) + 144);
                            __n128 v162 = swift_retain();
                            v161(&v369, v162);
                            swift_release();
                            *(_OWORD *)&v356[96] = v375;
                            *(_OWORD *)&v356[112] = v376;
                            *(_OWORD *)&v356[128] = v377;
                            v356[144] = v378;
                            *(float32x4_t *)&v356[32] = v371;
                            *(__n128 *)&v356[48] = v372;
                            *(float32x4_t *)&v356[64] = v373;
                            *(_OWORD *)&v356[80] = v374;
                            *(_OWORD *)v356 = v369;
                            *(__n128 *)&v356[16] = v370;
                            sub_1000ED828((uint64_t)v356);
                            if ((v356[144] & 1) == 0)
                            {
                              uint64_t v294 = *(double *)&v356[136];
                              v295.i64[0] = v160;
                              v295.i64[1] = v326.i64[0];
                              v326 = v295;
                              v295.i64[0] = v323.i64[0];
                              v295.i64[1] = v327.i64[0];
                              v327 = v295;
                              v295.i64[0] = v324.i64[0];
                              v295.i64[1] = v328.n128_u64[0];
                              v328 = (__n128)v295;
                              v295.i64[0] = v325.i64[0];
                              v295.i64[1] = (uint64_t)v329[0];
                              *(float32x4_t *)v329 = v295;
                              v369 = 0u;
                              v370 = 0u;
                              v371 = 0u;
                              v372 = 0u;
                              LOBYTE(v73) = 1;
                              v373.i8[0] = 1;
                              type metadata accessor for WorldAnchor();
                              swift_allocObject();
                              char v296 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)();
                              uint64_t v23 = v334;
                              sub_10011CA48(v294, v296, 7, 3);
                              swift_release();
                              v383 = v333.n128_u64[0];
                              [v321[0] jasperAvailable];
                              v329[0] = 0;
                              uint64_t v12 = 0;
                              goto LABEL_139;
                            }

                            uint64_t v23 = v334;
                          }
                        }
                        __n128 v74 = v321[0];
                      }
                    }
                    if ([v74 jasperAvailable])
                    {
                      if (v320.i8[0])
                      {
LABEL_137:
                        LOBYTE(v73) = 0;
                        goto LABEL_138;
                      }
                      __n128 v163 = (void *)SnapType.guideLine.unsafeMutableAddressor();
                      int8x16_t v164 = v330;
                      id v73 = (*v163 & ~v330) == 0;
                    }
                    else
                    {
                      id v73 = 0;
                      if (v320.i8[0]) {
                        goto LABEL_138;
                      }
                      int8x16_t v164 = v330;
                    }
                    if ((*(void *)SnapType.userLine.unsafeMutableAddressor() & ~v164) == 0)
                    {
                      float32x2_t v165 = *(float32x2_t *)(v23 + 464);
                      unsigned int v166 = *(float *)(v23 + 472);
                      float32x2_t v167 = *(void **)(v23 + 72);
                      swift_beginAccess();
                      long long v168 = v167[11];
                      int8x16_t v169 = v167[12];
                      id v68 = (unsigned char *)v167[13];
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_1000A6768(v168, v169, (uint64_t)v344, v165, v166);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_100016FEC((uint64_t)v344, (uint64_t)&v369, &qword_1004CC340);
                      int8x16_t v170 = v369;
                      if ((void)v369)
                      {
                        v333 = v370;
                        v328 = v372;
                        *(float32x4_t *)v329 = v371;
                        v327 = v373;
                        int8x16_t v171 = *(double *)&v374;
                        v358 = 0u;
                        v359 = 0u;
                        v360 = 0u;
                        v361 = 0u;
                        LOBYTE(v73) = 1;
                        v362.i8[0] = 1;
                        type metadata accessor for WorldAnchor();
                        swift_allocObject();
                        id v172 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)();
                        sub_10011CA48(v171, v172, 0, 3);
                        swift_release();
                        v329[0] = 0;
                        uint64_t v12 = 0;
                        v333.n128_u64[0] = v170;
                        v383 = v170;
                        goto LABEL_139;
                      }
                    }
                    if (v73)
                    {
                      if ([v321[0] jasperAvailable])
                      {
                        sub_10011D1C8((uint64_t)v355);
                        id v173 = v355[0];
                        sub_100016FEC((uint64_t)v355, (uint64_t)&v358, &qword_1004CC338);
                        id v68 = (unsigned char *)v358;
                        if ((void)v358)
                        {
                          v333 = v359;
                          v328 = v361;
                          *(float32x4_t *)v329 = v360;
                          v327 = v362;
                          uint64_t v174 = v363;
                          v412 = 0u;
                          v413 = 0u;
                          v414 = 0u;
                          v415 = 0u;
                          LOBYTE(v73) = 1;
                          v416 = 1;
                          type metadata accessor for WorldAnchor();
                          swift_allocObject();
                          v326.i64[0] = (uint64_t)v173;
                          int8x16_t v175 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)();
                          int8x16_t v176 = (*(unsigned __int8 (**)(id))((swift_isaMask & *(void *)v68) + 0x258))((id)v326.i64[0]);
                          sub_100016B6C(v355);
                          if (v176 == 3) {
                            float32x4_t v177 = 6;
                          }
                          else {
                            float32x4_t v177 = 5;
                          }
                          sub_10011CA48(v174, v175, v177, 3);
                          sub_10011C81C(v23, (uint64_t)&v399);
                          int8x16_t v178 = v399;
                          int32x4_t v179 = v400;
                          int8x16_t v180 = v401;
                          v333.n128_u64[0] = v402;
                          LODWORD(v329[0]) = v403;
                          swift_release();
                          sub_100016FEC((uint64_t)v381, (uint64_t)v379, &qword_1004CC330);
                          sub_100016FEC((uint64_t)v379, (uint64_t)v380, &qword_1004CC330);
                          if (sub_100121EA8((uint64_t)v380) == 1)
                          {
                            sub_100016B6C(v355);
                            goto LABEL_239;
                          }
                          *(void *)v356 = v68;
                          *(void *)&v356[16] = v178;
                          *(void *)&v356[24] = v179;
                          *(void *)&v356[32] = v180;
                          *(void *)&v356[40] = v333.n128_u64[0];
                          v356[48] = v329[0];
                          memset(&v356[64], 0, 64);
                          v356[128] = 1;
                          nullsub_1(v356);
                          sub_100016FEC((uint64_t)v381, (uint64_t)v357, (uint64_t *)&unk_1004CEA30);
                          sub_100016B6C((id *)v357);
                          unsigned __int8 v297 = v356;
                          goto LABEL_238;
                        }
                      }
                      goto LABEL_137;
                    }
LABEL_138:
                    v329[0] = 0;
                    uint64_t v12 = 0;
                    v333.n128_u64[0] = 0;
                    goto LABEL_139;
                  }
                  if (v12 && v12 == (void *)v328.n128_u64[0]) {
                    goto LABEL_258;
                  }
                  uint64_t v82 = *(void (**)(void *__return_ptr, void))(**(void **)(v334 + 88) + 144);
                  uint64_t v83 = swift_retain();
                  v82(v380, v83);
                  swift_release();
                  uint64_t v84 = *(void *)v380;
                  sub_10001F780(*(unint64_t *)v380);
                  if (v84 == 0xC000000000000010) {
                    sub_100122D4C(v328.n128_u64[0]);
                  }
                  sub_1001231B8(v328.n128_u64[0]);
                  char v85 = *(void **)(v334 + 312);
                  if (!v85)
                  {
LABEL_258:
                    uint64_t v300 = objc_allocWithZone((Class)type metadata accessor for ScreenPoint());
                    int v301 = (void *)ScreenPoint.init(_:)();
                    char v302 = *(uint64_t (**)(void))(**(void **)(v334 + 128) + 400);
                    unsigned __int8 v303 = v328.n128_u64[0];
                    v333.n128_u64[0] = (unint64_t)(id)v328.n128_u64[0];
                    v329[0] = v301;
                    swift_retain();
                    id v68 = (unsigned char *)v302(v380);
                    uint64_t v305 = *(void **)(v304 + 16);
                    uint64_t v306 = *(void **)(v304 + 24);
                    *(void *)(v304 + 16) = v301;
                    *(void *)(v304 + 24) = v303;

                    ((void (*)(unsigned char *, void))v68)(v380, 0);
                    swift_release();
                    if (v12)
                    {
                      int v307 = *(void (**)(void))((swift_isaMask & *v12) + 0xD8);
                      char v308 = v12;
                      v307(2);
                    }
                    v333.n128_u64[0] = 0;
                    LOBYTE(v73) = 1;
                    uint64_t v23 = v334;
                    uint64_t v12 = (void *)v328.n128_u64[0];
LABEL_139:
                    swift_retain();
                    StateValue.wrappedValue.getter();
                    swift_release();
                    if ((v380[3] & 1) == 0 && *(unsigned char *)(v23 + 544) == 3)
                    {
                      int8x16_t v181 = [self processInfo];
                      float32x4_t v182 = [v181 thermalState];

                      if ((unint64_t)v182 >= 3)
                      {
                        uint64_t v23 = v334;
                        if (v182 == (id)3) {
                          goto LABEL_150;
                        }
                        _assertionFailure(_:_:file:line:flags:)();
                        __break(1u);
                        goto LABEL_148;
                      }
                      uint64_t v23 = v334;
                      char v183 = *(void (**)(void *__return_ptr, void))(**(void **)(v334 + 88) + 144);
                      char v184 = swift_retain();
                      v183(v380, v184);
                      swift_release();
                      uint64_t v185 = *(void *)v380;
                      sub_10001F780(*(unint64_t *)v380);
                      if (v185 == 0xC000000000000008
                        || (uint64_t v186 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 88) + 144),
                            uint64_t v187 = swift_retain(),
                            v186(v380, v187),
                            swift_release(),
                            uint64_t v188 = *(void *)v380,
                            sub_10001F780(*(unint64_t *)v380),
                            v188 == 0xC000000000000010))
                      {
                        int v189 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 128) + 144);
                        char v190 = swift_retain();
                        v189(v380, v190);
                        swift_release();
                        char v191 = *(void **)v380;
                        uint64_t v192 = *(void **)&v380[8];
                        id v68 = *(unsigned char **)&v380[16];

                        if (v68)
                        {
                          (*(void (**)(void))((swift_isaMask & *(void *)v68) + 0x200))();

                          CGPoint.init(_:)();
                          v328.n128_u64[0] = v193;
                          uint64_t v195 = v194;
                          goto LABEL_149;
                        }
LABEL_148:
                        v328.n128_u64[0] = 0;
                        uint64_t v195 = 0;
LABEL_149:
                        uint64_t v23 = v334;
                        CGPoint.init(_:)();
                        char v197 = v196;
                        uint64_t v199 = v198;
                        uint64_t v200 = *(void *)(v23 + 80);
                        swift_retain();
                        v327.i64[0] = v200;
                        sub_1000522D0((uint64_t)v356);
                        swift_release();
                        sub_100016FEC((uint64_t)v356, (uint64_t)v357, &qword_1004C5FD0);
                        if (sub_100016B28((uint64_t *)v357) == 1) {
                          goto LABEL_150;
                        }
                        long long v224 = *(_OWORD *)&v357[112];
                        v16[6] = *(_OWORD *)&v357[96];
                        v16[7] = v224;
                        v379[128] = v357[128];
                        uint64_t v225 = *(_OWORD *)&v357[48];
                        void v16[2] = *(_OWORD *)&v357[32];
                        v16[3] = v225;
                        uint64_t v226 = *(_OWORD *)&v357[80];
                        void v16[4] = *(_OWORD *)&v357[64];
                        v16[5] = v226;
                        int v227 = *(_OWORD *)&v357[16];
                        *uint64_t v16 = *(_OWORD *)v357;
                        v16[1] = v227;
                        char v228 = v23 + 480;
                        v325.i64[0] = *(void *)(v23 + 512);
                        char v229 = (void *)SnapType.worldCorner.unsafeMutableAddressor();
                        long long v230 = v330;
                        int8x16_t v136 = (*v229 & ~v330) == 0;
                        v326.i64[0] = v228;
                        if (v136)
                        {
                          sub_100016FEC(v228, (uint64_t)v411, &qword_1004C74D8);
                          uint64_t v16 = (_OWORD *)sub_100081F5C(v328.n128_i64[0], v195, v68 == 0, (uint64_t)v411);
                          int v233 = v231;
                          LODWORD(v22) = v232;
                          v324.i64[0] = 3;
                        }
                        else
                        {
                          v324.i64[0] = 0;
                          uint64_t v16 = 0;
                          int v233 = 0;
                          LODWORD(v22) = 2;
                        }
                        if ((*(void *)SnapType.worldEdge.unsafeMutableAddressor() & ~v230) != 0)
                        {
                          char v234 = v233;
                        }
                        else
                        {
                          char v234 = v233;
                          if (v22 == 2)
                          {
                            sub_100016FEC(v326.i64[0], (uint64_t)v410, &qword_1004C74D8);
                            uint64_t v16 = (_OWORD *)sub_1000823C4(v197, v199, v328.n128_i64[0], v195, v68 == 0, (uint64_t)v410);
                            char v234 = v235;
                            LODWORD(v22) = v236;
                            v324.i64[0] = 4;
                          }
                        }
                        sub_100016FEC(v326.i64[0], (uint64_t)v409, &qword_1004C74D8);
                        uint64_t v91 = v234;
                        sub_100082728((uint64_t)v409, (uint64_t)&v404);
                        uint64_t v268 = LODWORD(v405[0]);
                        uint64_t v269 = BYTE8(v405[1]);
                        uint64_t v270 = v406;
                        uint64_t v23 = v334;
                        *(void *)(v334 + 480) = v404;
                        *(void *)(v23 + 488) = v268;
                        *(_OWORD *)(v23 + 496) = *(_OWORD *)(v19 + 752);
                        *(void *)(v23 + 512) = v269;
                        *(void *)(v23 + 520) = v270;
                        if (v320.i8[0])
                        {
                          if (!v73) {
                            goto LABEL_189;
                          }
LABEL_178:
                          v328.n128_u32[0] = 1;
                          int v271 = (char)v22;
                          unsigned __int8 v272 = v91;
                          goto LABEL_190;
                        }
                        if (v73) {
                          goto LABEL_178;
                        }
                        if (*(unsigned char *)(v23 + 528) != 1) {
                          goto LABEL_189;
                        }
                        *(_OWORD *)(v19 + 784) = v405[0];
                        *(_OWORD *)&v407[1] = *(_OWORD *)((char *)v405 + 9);
                        sub_100016FEC((uint64_t)v407, (uint64_t)v408, &qword_1004C74E0);
                        sub_100016FEC((uint64_t)v408, (uint64_t)v430, &qword_1004C74E0);
                        if (v431 == 2) {
                          goto LABEL_189;
                        }
                        double v3 = *(double *)v430;
                        double v4 = *(double *)&v430[1];
                        if (qword_1004C29D8 == -1)
                        {
LABEL_182:
                          if (*((void *)&xmmword_1004F7FD0 + 1))
                          {
                            unsigned __int8 v273 = *(char **)(*((void *)&xmmword_1004F7FD0 + 1) + qword_1004D26B0);
                            if (!v273) {
                              goto LABEL_189;
                            }
                            long long v274 = *(void **)&v273[OBJC_IVAR____TtC7Measure11ReticleView_reticleBoundsLayer];
                            v323.i32[0] = (int)v22;
                            uint64_t v275 = *((id *)&xmmword_1004F7FD0 + 1);
                            uint64_t v276 = v273;
                            [v274 convertPoint:0 fromLayer:v3, v4];
                            LODWORD(v274) = [v274 containsPoint:];

                            if (!v274) {
                              goto LABEL_189;
                            }
                            SIMD2<>.init(_:)();
                            sub_10011D754((uint64_t)v331, (uint64_t)v380, v277);
                            if ((v380[8] & 1) == 0)
                            {
                              if (!*(void *)&v380[16])
                              {
LABEL_189:
                                uint64_t v16 = 0;
                                unsigned __int8 v272 = 0;
                                v328.n128_u32[0] = 0;
                                char v278 = v326.i64[0];
                                *(_OWORD *)v326.i64[0] = 0u;
                                *(_OWORD *)(v278 + 16) = 0u;
                                *(_OWORD *)(v23 + 512) = xmmword_1003FB9B0;
                                int v271 = 2;
                                goto LABEL_190;
                              }
                              if (!v380[32])
                              {
                                sub_10011CA48(*(double *)v380, *(uint64_t *)&v380[16], v324.i64[0], *(uint64_t *)&v380[24]);
                                swift_release();
                                v328.n128_u32[0] = 1;
                                int v271 = v323.i8[0];
                                unsigned __int8 v272 = v91;
LABEL_190:
                                unsigned __int8 v279 = v325.i8[0] & 0xFE;
                                long long v280 = v325.i8[0];
                                uint64_t v281 = *(void *)(v23 + 216);
                                swift_retain();
                                v327.i64[0] = (uint64_t)v16;
                                sub_100052968((uint64_t)v16, v272, v271, v331, v281);
                                swift_release();
                                if (v271 == 2)
                                {
                                  uint64_t v201 = v329[0];
                                  if (v279 == 2)
                                  {
                                    sub_100121E44((uint64_t)v356);
                                  }
                                  else
                                  {
                                    if (qword_1004C2B48 != -1) {
                                      swift_once();
                                    }
                                    strcpy(v380, "Unsnapped ");
                                    v380[11] = 0;
                                    *(_DWORD *)&v380[12] = -369098752;
                                    if (v280) {
                                      uint64_t v287 = 0x72656E726F63;
                                    }
                                    else {
                                      uint64_t v287 = 1701274725;
                                    }
                                    if (v280) {
                                      uint64_t v288 = 0xE600000000000000;
                                    }
                                    else {
                                      uint64_t v288 = 0xE400000000000000;
                                    }
                                    int v289 = v288;
                                    String.append(_:)(*(Swift::String *)&v287);
                                    swift_bridgeObjectRelease();
                                    Log.default(_:isPrivate:)(*(Swift::String *)v380, 0);
                                    sub_100121E44((uint64_t)v356);
                                    swift_bridgeObjectRelease();
                                    uint64_t v23 = v334;
                                  }
LABEL_233:
                                  if ((v328.n128_u8[0] & 1) == 0) {
                                    goto LABEL_151;
                                  }
                                  goto LABEL_234;
                                }
                                if (v279 == 2) {
                                  goto LABEL_194;
                                }
                                if (v271) {
                                  char v290 = 0x72656E726F63;
                                }
                                else {
                                  char v290 = 1701274725;
                                }
                                if (v271) {
                                  unsigned __int8 v291 = 0xE600000000000000;
                                }
                                else {
                                  unsigned __int8 v291 = 0xE400000000000000;
                                }
                                if (v280) {
                                  long long v292 = 0x72656E726F63;
                                }
                                else {
                                  long long v292 = 1701274725;
                                }
                                if (v280) {
                                  uint64_t v293 = 0xE600000000000000;
                                }
                                else {
                                  uint64_t v293 = 0xE400000000000000;
                                }
                                if (v290 == v292 && v291 == v293)
                                {
                                  swift_bridgeObjectRelease_n();
                                }
                                else
                                {
                                  long long v298 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  if ((v298 & 1) == 0)
                                  {
LABEL_194:
                                    if (qword_1004C2B48 != -1) {
                                      swift_once();
                                    }
                                    *(void *)v380 = 0;
                                    *(void *)&v380[8] = 0xE000000000000000;
                                    _StringGuts.grow(_:)(25);
                                    swift_bridgeObjectRelease();
                                    strcpy(v380, "Snapped to ");
                                    *(_DWORD *)&v380[12] = -352321536;
                                    if (v271) {
                                      uint64_t v282 = 0x72656E726F63;
                                    }
                                    else {
                                      uint64_t v282 = 1701274725;
                                    }
                                    if (v271) {
                                      int v283 = 0xE600000000000000;
                                    }
                                    else {
                                      int v283 = 0xE400000000000000;
                                    }
                                    char v284 = v283;
                                    String.append(_:)(*(Swift::String *)&v282);
                                    swift_bridgeObjectRelease();
                                    v285._object = (void *)0xEA00000000002074;
                                    v285._uint64_t countAndFlagsBits = 0x6120746E696F7020;
                                    String.append(_:)(v285);
                                    v286._uint64_t countAndFlagsBits = CGPoint.debugDescription.getter();
                                    String.append(_:)(v286);
                                    swift_bridgeObjectRelease();
                                    Log.default(_:isPrivate:)(*(Swift::String *)v380, 0);
                                    sub_100121E44((uint64_t)v356);
                                    swift_bridgeObjectRelease();
                                    uint64_t v23 = v334;
                                    goto LABEL_232;
                                  }
                                }
                                sub_100121E44((uint64_t)v356);
LABEL_232:
                                uint64_t v201 = v329[0];
                                goto LABEL_233;
                              }
                            }
                            swift_release();
                            goto LABEL_189;
                          }
                          goto LABEL_266;
                        }
LABEL_264:
                        swift_once();
                        goto LABEL_182;
                      }
                    }
LABEL_150:
                    uint64_t v201 = v329[0];
                    if (!v73)
                    {
LABEL_151:
                      sub_10011DF9C((uint64_t)v331);
                      uint64_t v202 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 128) + 144);
                      int v203 = swift_retain();
                      v202(v380, v203);
                      swift_release();
                      char v204 = *(void **)v380;
                      char v205 = *(void **)&v380[8];
                      long long v206 = *(void **)&v380[16];
                      uint64_t v207 = *(void *)&v380[24];

                      if (!v207)
                      {
                        uint64_t v208 = *(void (**)(void *__return_ptr, void))(**(void **)(v23 + 88) + 144);
                        int v209 = swift_retain();
                        v208(v380, v209);
                        swift_release();
                        char v210 = *(void *)v380;
                        sub_10001F780(*(unint64_t *)v380);
                        if (v210 == 0xC000000000000010)
                        {
                          v211.i64[0] = *(void *)(v23 + 464);
                          *(float32x4_t *)v329 = v211;
                          Float.piDiv2.unsafeMutableAddressor();
                          static simd_float4x4.makeRotation(_:_:_:_:)();
                          int v215 = v212;
                          char v216 = v213;
                          char v217 = v214;
                          long long v218 = *(void **)(v23 + 304);
                          if (v218)
                          {
                            v327 = v213;
                            v328 = (__n128)v214;
                            v326 = v212;
                            simd_float4x4.position.getter();
                            v325 = v219;
                            uint64_t v220 = *(void (**)(void))((swift_isaMask & *v218) + 0x2B0);
                            int v221 = v218;
                            v220();
                            simd_float4x4.position.getter();
                            Swift::String v324 = v222;

                            int v215 = v326;
                            char v216 = v327;
                            char v217 = (float32x4_t)v328;
                            char v223 = vsubq_f32(v325, v324);
                            long long v212 = vmulq_f32(v223, v223);
                            v212.f32[0] = sqrtf(v212.f32[2] + vaddv_f32(*(float32x2_t *)v212.f32));
                          }
                          else
                          {
                            v212.i32[0] = 1050253722;
                          }
                          char v319 = v212;
                          uint64_t v237 = *((__n128 *)v331 + 15);
                          v327 = *((float32x4_t *)v331 + 16);
                          v328 = v237;
                          uint64_t v238 = *((float32x4_t *)v331 + 17);
                          v325 = *((float32x4_t *)v331 + 18);
                          v326 = v238;
                          int v239 = *((float32x4_t *)v331 + 21);
                          BOOL v240 = *((float32x4_t *)v331 + 22);
                          char v241 = *((float32x4_t *)v331 + 23);
                          Swift::String v324 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v239, v215.f32[0]), v240, *(float32x2_t *)v215.f32, 1), v241, v215, 2), (float32x4_t)xmmword_1003FF1B0, v215, 3);
                          v323 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v239, v216.f32[0]), v240, *(float32x2_t *)v216.f32, 1), v241, v216, 2), (float32x4_t)xmmword_1003FF1B0, v216, 3);
                          *(float32x4_t *)int v321 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v239, v217.f32[0]), v240, *(float32x2_t *)v217.f32, 1), v241, v217, 2), (float32x4_t)xmmword_1003FF1B0, v217, 3);
                          type metadata accessor for MeasureCamera();
                          static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)();
                          unsigned __int8 v320 = v242;
                          static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)();
                          uint64_t v244 = vsubq_f32(v243, v320);
                          uint64_t v245 = (int32x4_t)vmulq_f32(v244, v244);
                          v245.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v245, 2), vadd_f32(*(float32x2_t *)v245.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v245.i8, 1))).u32[0];
                          uint64_t v246 = vrsqrte_f32((float32x2_t)v245.u32[0]);
                          uint64_t v247 = vmul_f32(v246, vrsqrts_f32((float32x2_t)v245.u32[0], vmul_f32(v246, v246)));
                          int v248 = vmulq_n_f32(v244, vmul_f32(v247, vrsqrts_f32((float32x2_t)v245.u32[0], vmul_f32(v247, v247))).f32[0]);
                          v249.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)v320.f32, vmul_n_f32(*(float32x2_t *)v248.f32, v319.f32[0]));
                          v249.n128_f32[2] = v320.f32[2] + vmuls_lane_f32(v319.f32[0], v248, 2);
                          v249.n128_u32[3] = 1.0;
                          v328 = v249;
                          memset(&v408[24], 0, 64);
                          v408[88] = 1;
                          type metadata accessor for WorldAnchor();
                          swift_allocObject();
                          unsigned __int8 v250 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)();
                          sub_10011CA48(*(double *)v329, v250, 0, 4);
                          uint64_t v251 = *(void **)(v23 + 312);
                          if (v251)
                          {
                            uint64_t v252 = *(void (**)(void))((swift_isaMask & *v251) + 0xD8);
                            uint64_t v253 = v251;
                            v252(4);
                          }
                          swift_release();
                        }
                      }
                    }
LABEL_234:
                    uint64_t v299 = v322;
                    sub_10011C1E0(v23, (void **)&v383, v322, (uint64_t)v331, v330, (uint64_t)v381);

                    sub_100016FEC((uint64_t)v381, (uint64_t)v380, &qword_1004CC330);
                    sub_1001220B8(v380, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100121DE0);
                    return;
                  }
                  v333.n128_u64[0] = (unint64_t)v68;
                  uint64_t v9 = (unint64_t *)&swift_isaMask;
                  uint64_t v22 = *(uint64_t (**)(void))((swift_isaMask & *v85) + 0x238);
                  uint64_t v8 = v85;
                  uint64_t v86 = v22();
                  uint64_t v27 = v86;
                  if (!(v86 >> 62))
                  {
                    if (!*(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                      goto LABEL_257;
                    }
                    goto LABEL_71;
                  }
LABEL_250:
                  if (!_CocoaArrayWrapper.endIndex.getter()) {
                    goto LABEL_257;
                  }
LABEL_71:
                  if ((v27 & 0xC000000000000001) != 0)
                  {
                    uint64_t v87 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else
                  {
                    if (!*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
                    {
                      __break(1u);
                      goto LABEL_262;
                    }
                    uint64_t v87 = *(id *)(v27 + 32);
                  }
                  uint64_t v88 = v87;
                  uint64_t v89 = swift_bridgeObjectRelease();
                  uint64_t v90 = (*(uint64_t (**)(uint64_t))((*v9 & *v88) + 0x250))(v89);

                  if ((unint64_t)v90 >> 62)
                  {
                    if (v90 < 0) {
                      LODWORD(v22) = v90;
                    }
                    else {
                      LODWORD(v22) = v90 & 0xFFFFFFF8;
                    }
                    swift_bridgeObjectRetain();
                    uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (v91)
                    {
LABEL_76:
                      if ((v90 & 0xC000000000000001) == 0)
                      {
                        if (!*(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10))
                        {
                          __break(1u);
                          goto LABEL_264;
                        }
                        uint64_t v92 = *(id *)(v90 + 32);
                        goto LABEL_79;
                      }
LABEL_262:
                      uint64_t v92 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_79:
                      id v93 = v92;
                      swift_bridgeObjectRelease();
                      sub_1001231B8(v93);

                      goto LABEL_258;
                    }
                  }
                  else
                  {
                    uint64_t v91 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    if (v91) {
                      goto LABEL_76;
                    }
                  }
LABEL_257:

                  swift_bridgeObjectRelease();
                  goto LABEL_258;
                }
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            __n128 v74 = v321[0];
            goto LABEL_62;
          }
        }
        uint64_t v23 = v334;
        unint64_t v41 = v321[0];
        id v45 = &selRef_replaySensorDidFinishReplayingData;
        uint64_t v12 = v322;
        uint64_t v16 = v379;
        uint64_t v19 = (uint64_t)v380;
        goto LABEL_49;
      }
      uint64_t v27 = *(void *)(v23 + 72);
      swift_beginAccess();
      uint64_t v8 = *(void *)(v27 + 64);
      if ((unint64_t)v8 >> 62)
      {
        if (v8 < 0) {
          uint64_t v27 = *(void *)(v27 + 64);
        }
        else {
          uint64_t v27 = v8 & 0xFFFFFFFFFFFFFF8;
        }
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        if (v23) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v23 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v23)
        {
LABEL_12:
          if (v23 >= 1)
          {
            for (uint64_t i = 0; i != v23; ++i)
            {
              if ((v8 & 0xC000000000000001) != 0)
              {
                uint64_t v31 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                uint64_t v31 = *(void *)(v8 + 8 * i + 32);
                swift_retain();
              }
              if (swift_unknownObjectWeakLoadStrong())
              {
                uint64_t v29 = *(void *)(v31 + 24);
                uint64_t ObjectType = swift_getObjectType();
                (*(void (**)(void, uint64_t, uint64_t))(v29 + 120))(0, ObjectType, v29);
                swift_release();
                swift_unknownObjectRelease();
              }
              else
              {
                swift_release();
              }
            }
            goto LABEL_37;
          }
          __break(1u);
LABEL_249:
          __break(1u);
          goto LABEL_250;
        }
      }
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t v23 = v334;
      *(unsigned char *)(v334 + 208) = 0;
      goto LABEL_38;
    }
    uint64_t v22 = (uint64_t (*)(void))v333.n128_u64[0];
    ((void (*)(unint64_t, _OWORD *, uint64_t))v9[4])(v333.n128_u64[0], v16, v8);
    ((void (*)(void *, uint64_t (*)(void), uint64_t))v9[2])(v12, v22, v8);
    int v26 = ((uint64_t (*)(void *, uint64_t))v9[11])(v12, v8);
    if (v26 != enum case for ARCamera.TrackingState.Reason.initializing(_:)
      && v26 != enum case for ARCamera.TrackingState.Reason.relocalizing(_:))
    {
      ((void (*)(void *, uint64_t))v9[1])(v12, v8);
LABEL_246:
      sub_10011B11C();
      ((void (*)(uint64_t (*)(void), uint64_t))v9[1])(v22, v8);
      return;
    }
    if (*(unsigned char *)(v334 + 208)) {
      goto LABEL_246;
    }
    uint64_t v27 = *(void *)(v334 + 72);
    swift_beginAccess();
    uint64_t v32 = *(void *)(v27 + 64);
    if ((unint64_t)v32 >> 62)
    {
      if (v32 < 0) {
        uint64_t v27 = *(void *)(v27 + 64);
      }
      else {
        uint64_t v27 = v32 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      if (v19) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v19 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v19)
      {
LABEL_24:
        if (v19 < 1) {
          goto LABEL_249;
        }
        for (uint64_t j = 0; j != v19; ++j)
        {
          if ((v32 & 0xC000000000000001) != 0)
          {
            uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v34 = *(void *)(v32 + 8 * j + 32);
            swift_retain();
          }
          if (swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v35 = *(void *)(v34 + 24);
            uint64_t v36 = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 120))(1, v36, v35);
            swift_release();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    *(unsigned char *)(v334 + 208) = 1;
    uint64_t v22 = (uint64_t (*)(void))v333.n128_u64[0];
    goto LABEL_246;
  }
}

void sub_100119100()
{
  void (*v1)(id *__return_ptr, uint64_t);
  uint64_t v2;
  void *v3;
  void *v4;
  void (*v5)(id *__return_ptr);
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t (*v41)(void);
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void (*v77)(id *__return_ptr, uint64_t);
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(void);
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(void);
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t (*v99)(void);
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t (*v110)(void);
  id v111[5];

  uint64_t v1 = *(void (**)(id *__return_ptr, uint64_t))(**(void **)(v0 + 128) + 144);
  uint64_t v2 = swift_retain();
  v1(v111, v2);
  swift_release();

  double v3 = v111[1];
  if (v3)
  {
    double v4 = *(void **)(v0 + 312);
    if (!v4)
    {
      uint64_t v75 = v3;
LABEL_98:

      return;
    }
    uint64_t v5 = *(void (**)(id *__return_ptr))(**(void **)(v0 + 88) + 144);
    swift_retain();
    uint64_t v6 = v0;
    id v7 = v4;
    v5(v111);
    swift_release();
    uint64_t v8 = v111[0];
    sub_10001F780((unint64_t)v111[0]);
    uint64_t v9 = (uint64_t *)&swift_isaMask;
    if (v8 == (id)0xC000000000000018)
    {
      char v105 = v0;
      uint64_t v103 = v4;
      uint64_t v104 = v7;
      uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & *v7) + 0x238))();
      uint64_t v11 = v10;
      uint64_t v91 = v10;
      if (v10 >> 62) {
        goto LABEL_86;
      }
      uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v12)
      {
LABEL_6:
        uint64_t v13 = 0;
        uint64_t v92 = v11 & 0xC000000000000001;
        uint64_t v88 = v11 + 32;
        uint64_t v89 = v11 & 0xFFFFFFFFFFFFFF8;
        uint64_t v90 = v12;
        id v97 = v3;
        do
        {
          if (v92)
          {
            uint64_t v14 = v13;
            uint64_t v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v16 = __OFADD__(v14, 1);
            uint64_t v17 = v14 + 1;
            if (v16) {
              goto LABEL_85;
            }
          }
          else
          {
            if (v13 >= *(void *)(v89 + 16))
            {
              __break(1u);
              return;
            }
            uint64_t v18 = v13;
            uint64_t v15 = *(id *)(v88 + 8 * v13);
            uint64_t v16 = __OFADD__(v18, 1);
            uint64_t v17 = v18 + 1;
            if (v16) {
              goto LABEL_85;
            }
          }
          uint64_t v94 = v17;
          id v93 = v15;
          uint64_t v19 = (*(uint64_t (**)(void))((*v9 & *v15) + 0x280))();
          uint64_t v20 = v19;
          uint64_t v101 = v19;
          if (v19 >> 62)
          {
            uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t v20 = v101;
            if (!v21) {
              goto LABEL_7;
            }
LABEL_16:
            uint64_t v22 = 0;
            double v99 = *(uint64_t (**)(void))((*v9 & *v3) + 0xB8);
            id v100 = v20 & 0xC000000000000001;
            char v95 = v20 + 32;
            id v96 = v20 & 0xFFFFFFFFFFFFFF8;
            id v98 = v21;
            while (2)
            {
              if (v100)
              {
                uint64_t v23 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (v22 >= *(void *)(v96 + 16)) {
                  goto LABEL_84;
                }
                uint64_t v23 = *(id *)(v95 + 8 * v22);
              }
              id v109 = v23;
              uint64_t v16 = __OFADD__(v22, 1);
              uint64_t v24 = v22 + 1;
              if (v16) {
                goto LABEL_82;
              }
              UIContentSizeCategory v102 = v24;
              id v110 = *(uint64_t (**)(void))((*v9 & *v23) + 0xB8);
              int v25 = v110();
              uint64_t v27 = v26;
              uint64_t v28 = v3;
              uint64_t v29 = v99();
              uint64_t v31 = v30;

              if (v25 == v29 && v27 == v31)
              {
                uint64_t v34 = swift_bridgeObjectRelease_n();
              }
              else
              {
                uint64_t v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                uint64_t v34 = swift_bridgeObjectRelease();
                if ((v33 & 1) == 0)
                {

LABEL_72:
                  uint64_t v22 = v102;
LABEL_18:
                  if (v22 == v98) {
                    goto LABEL_7;
                  }
                  continue;
                }
              }
              break;
            }
            uint64_t v35 = (*(uint64_t (**)(uint64_t))((*v9 & *v109) + 0x238))(v34);
            uint64_t v36 = v35;
            uint64_t v22 = v102;
            if (v35 >> 62)
            {
              id v37 = _CocoaArrayWrapper.endIndex.getter();
              if (v37)
              {
LABEL_33:
                if (v37 < 1) {
                  goto LABEL_83;
                }
                uint64_t v38 = 0;
                uint64_t v108 = v36 & 0xC000000000000001;
                float v106 = v37;
                uint64_t v107 = v36;
                while (2)
                {
                  if (v108) {
                    uint64_t v39 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    uint64_t v39 = (uint64_t *)*(id *)(v36 + 8 * v38 + 32);
                  }
                  uint64_t v40 = v39;
                  unint64_t v41 = *(uint64_t (**)(void))((*v9 & *v39) + 0x250);
                  simd_float4 v42 = v41();
                  if ((v42 & 0xC000000000000001) != 0)
                  {
                    simd_float4 v43 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_41:
                    simd_float4 v44 = v43;
                    id v45 = swift_bridgeObjectRelease();
                    NSString v46 = (*(uint64_t (**)(uint64_t))((*v9 & *v44) + 0xB8))(v45);
                    uint64_t v48 = v47;

                    double v3 = v109;
                    uint64_t v49 = v110();
                    double v51 = v50;

                    if (v46 == v49 && v48 == v51)
                    {
                      swift_bridgeObjectRelease_n();
                    }
                    else
                    {
                      uint64_t v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      char v54 = swift_bridgeObjectRelease();
                      if ((v53 & 1) == 0)
                      {
                        char v55 = ((uint64_t (*)(uint64_t))v41)(v54);
                        if ((v55 & 0xC000000000000001) != 0)
                        {
                          unsigned int v56 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                        }
                        else
                        {
                          if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                            goto LABEL_80;
                          }
                          unsigned int v56 = *(id *)(v55 + 40);
                        }
                        uint64_t v57 = v56;
                        uint64_t v58 = swift_bridgeObjectRelease();
                        long long v59 = (*(uint64_t (**)(uint64_t))((*v9 & *v57) + 0xB8))(v58);
                        id v61 = v60;

                        Swift::String v62 = v3;
                        long long v63 = v110();
                        uint64_t v65 = v64;

                        if (v59 == v63 && v61 == v65)
                        {
                          id v68 = swift_bridgeObjectRelease_n();
                        }
                        else
                        {
                          uint64_t v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          id v68 = swift_bridgeObjectRelease();
                          if ((v67 & 1) == 0)
                          {
                            uint64_t v9 = (uint64_t *)&swift_isaMask;
                            goto LABEL_61;
                          }
                        }
                        id v73 = ((uint64_t (*)(uint64_t))v41)(v68);
                        uint64_t v9 = (uint64_t *)&swift_isaMask;
                        if ((v73 & 0xC000000000000001) != 0)
                        {
                          __n128 v74 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                        }
                        else
                        {
                          if (!*(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                            goto LABEL_81;
                          }
                          __n128 v74 = *(id *)(v73 + 32);
                        }
                        uint64_t v71 = v74;
                        swift_bridgeObjectRelease();
                        uint64_t v72 = v104;
                        sub_100123D44((uint64_t)v40, v71, v103, 1);
LABEL_60:

LABEL_61:
                        uint64_t v36 = v107;
                        ++v38;

                        if (v106 == v38)
                        {

                          swift_bridgeObjectRelease();
                          double v3 = v97;
                          goto LABEL_72;
                        }
                        continue;
                      }
                    }
                    uint64_t v9 = v104;
                    id v69 = v41();
                    if ((v69 & 0xC000000000000001) != 0)
                    {
                      uint64_t v70 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                    }
                    else
                    {
                      if (*(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                        goto LABEL_79;
                      }
                      uint64_t v70 = *(id *)(v69 + 40);
                    }
                    uint64_t v71 = v70;
                    swift_bridgeObjectRelease();
                    sub_100123D44((uint64_t)v40, v103, v71, 1);
                    uint64_t v72 = v40;
                    uint64_t v40 = v9;
                    uint64_t v9 = (uint64_t *)&swift_isaMask;
                    goto LABEL_60;
                  }
                  break;
                }
                if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  simd_float4 v43 = *(id *)(v42 + 32);
                  goto LABEL_41;
                }
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                __break(1u);
LABEL_81:
                __break(1u);
LABEL_82:
                __break(1u);
LABEL_83:
                __break(1u);
LABEL_84:
                __break(1u);
LABEL_85:
                __break(1u);
LABEL_86:
                uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
                uint64_t v11 = v91;
                if (!v12) {
                  break;
                }
                goto LABEL_6;
              }
            }
            else
            {
              id v37 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v37) {
                goto LABEL_33;
              }
            }

            swift_bridgeObjectRelease();
            goto LABEL_18;
          }
          uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v21) {
            goto LABEL_16;
          }
LABEL_7:

          swift_bridgeObjectRelease();
          uint64_t v13 = v94;
        }
        while (v94 != v90);
      }
      swift_bridgeObjectRelease();
      id v7 = v104;
      uint64_t v6 = v105;
    }
    type metadata accessor for WorldAnchor();
    (*(void (**)(void))((*v9 & *v3) + 0x2C0))();
    uint64_t v76 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
    (*(void (**)(uint64_t))((*v9 & *v7) + 0x2C8))(v76);
    uint64_t v77 = *(void (**)(id *__return_ptr, uint64_t))(**(void **)(v6 + 88) + 144);
    uint64_t v78 = swift_retain();
    v77(v111, v78);
    swift_release();
    uint64_t v79 = v111[0];
    sub_10001F780((unint64_t)v111[0]);
    uint64_t v80 = *v9 & *v7;
    if (v79 == (id)0xC000000000000018)
    {
      id v81 = 7;
    }
    else
    {
      uint64_t v82 = *(uint64_t (**)(void))((*v9 & *v7) + 0xD0);
      uint64_t v83 = v7;
      uint64_t v84 = v82();
      char v85 = *v9;
      if ((unint64_t)(v84 - 3) > 1)
      {
        id v81 = 3;
      }
      else
      {
        uint64_t v86 = *(uint64_t (**)(void))((v85 & *v3) + 0xD0);
        if ((unint64_t)(v86() - 3) > 1 || (uint64_t v87 = v82(), v87 == v86()))
        {
          uint64_t v75 = v83;
LABEL_97:

          goto LABEL_98;
        }
        id v81 = v86();
        char v85 = *v9;
      }
      id v7 = v83;
      uint64_t v80 = v85 & *v83;
    }
    uint64_t v75 = v3;
    (*(void (**)(uint64_t))(v80 + 216))(v81);
    double v3 = v7;
    goto LABEL_97;
  }
}

void sub_100119B74()
{
  void (*v2)(Swift::String *__return_ptr, uint64_t);
  uint64_t v3;
  unint64_t countAndFlagsBits;
  void (*v5)(Swift::String *__return_ptr, uint64_t);
  uint64_t v6;
  void *object;
  void *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(Swift::String *);
  void *v12;
  void *v13;
  uint64_t (*v14)(void);
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  void (*v24)(uint64_t);
  void *v25;
  void *v26;
  uint64_t (*v27)(void);
  void *v28;
  void *v29;
  void *v30;
  uint64_t (*v31)(Swift::String *);
  void (*v32)(Swift::String *, void);
  uint64_t v33;
  void *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(Swift::String *);
  void *v39;
  Swift::String v40;
  void *v41;
  void *v42;

  uint64_t v1 = v0;
  uint64_t v2 = *(void (**)(Swift::String *__return_ptr, uint64_t))(**(void **)(v0 + 88) + 144);
  double v3 = swift_retain();
  v2(&v40, v3);
  swift_release();
  uint64_t countAndFlagsBits = v40._countAndFlagsBits;
  if ((v40._countAndFlagsBits | 8) == 0xC000000000000018) {
    return;
  }
  uint64_t v5 = *(void (**)(Swift::String *__return_ptr, uint64_t))(**(void **)(v0 + 128) + 144);
  uint64_t v6 = swift_retain();
  v5(&v40, v6);
  swift_release();
  object = v40._object;
  uint64_t v9 = v41;
  uint64_t v8 = v42;

  if (!v8)
  {
    sub_10001F780(countAndFlagsBits);
    return;
  }
  if ((*(uint64_t (**)(void))((swift_isaMask & *v8) + 0x2F0))() != 1
    || ((*(void (**)(void))((swift_isaMask & *v8) + 0xD0))(), !MeasureObjectState.isMovable()()))
  {
    sub_10001F780(countAndFlagsBits);

    return;
  }
  uint64_t v10 = *(void *)(v1 + 104);
  LOBYTE(v40._countAndFlagsBits) = 4;
  uint64_t v11 = *(void (**)(Swift::String *))(*(void *)v10 + 392);
  swift_retain();
  v11(&v40);
  swift_release();
  uint64_t v12 = *(void **)(v1 + 312);
  *(void *)(v1 + 312) = v8;
  uint64_t v39 = v8;

  if (qword_1004C2B20 != -1) {
    swift_once();
  }
  v40._uint64_t countAndFlagsBits = 0;
  v40._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 0xD000000000000016;
  v40._object = (void *)0x8000000100426DE0;
  uint64_t v13 = *(void **)(v1 + 312);
  if (!v13)
  {
LABEL_18:
    __break(1u);
    return;
  }
  uint64_t v14 = *(uint64_t (**)(void))((swift_isaMask & *v13) + 0xB8);
  uint64_t v15 = v13;
  uint64_t v16 = v14();
  uint64_t v18 = v17;

  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x6D61726620746120;
  v20._object = (void *)0xEB00000000203A65;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  Log.default(_:isPrivate:)(v40, 0);
  swift_bridgeObjectRelease();
  if (qword_1004C2C10 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_1004F8458 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
  swift_beginAccess();
  *(double *)(v22 + 16) = *(double *)(v22 + 16) + 1.0;
  uint64_t v23 = *(void **)(v1 + 312);
  if (!v23
    || (uint64_t v24 = *(void (**)(uint64_t))((swift_isaMask & *v23) + 0xD8),
        int v25 = v23,
        v24(7),
        v25,
        (int v26 = *(void **)(v1 + 312)) == 0))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v27 = *(uint64_t (**)(void))((swift_isaMask & *v26) + 0x268);
  uint64_t v28 = v26;
  uint64_t v29 = (void *)v27();
  if (v29)
  {
    uint64_t v30 = v29;
    (*(void (**)(void *))((swift_isaMask & *v29) + 0x338))(v28);

    uint64_t v28 = v30;
  }

  sub_100122D4C(v39);
  sub_1001231B8(v39);
  uint64_t v31 = *(uint64_t (**)(Swift::String *))(**(void **)(v1 + 128) + 400);
  swift_retain();
  uint64_t v32 = (void (*)(Swift::String *, void))v31(&v40);
  uint64_t v34 = *(void **)(v33 + 16);
  uint64_t v35 = *(void **)(v33 + 24);
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = 0;

  v32(&v40, 0);
  swift_release();
  uint64_t v36 = *(void *)(v1 + 536);
  *(void *)(v1 + 536) = countAndFlagsBits;
  sub_100078CF8(countAndFlagsBits);
  sub_10001F780(v36);
  id v37 = *(void *)(v1 + 88);
  v40._uint64_t countAndFlagsBits = 0xC000000000000018;
  uint64_t v38 = *(void (**)(Swift::String *))(*(void *)v37 + 392);
  swift_retain();
  v38(&v40);
  sub_10001F780(countAndFlagsBits);
  swift_release();
}

uint64_t sub_10011A118()
{
  void (*v2)(id *__return_ptr, uint64_t);
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t (*v7)(void);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  id v15[4];

  uint64_t v1 = v0;
  uint64_t v2 = *(void (**)(id *__return_ptr, uint64_t))(**(void **)(v0 + 128) + 144);
  double v3 = swift_retain();
  v2(v15, v3);
  swift_release();
  double v4 = v15[1];
  uint64_t v6 = v15[2];
  uint64_t v5 = v15[3];

  if (!v5) {
    goto LABEL_7;
  }
  id v7 = *(uint64_t (**)(void))((swift_isaMask & *v5) + 0x2C0);
  uint64_t v8 = v5;
  uint64_t v9 = v7();

  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v9 + 216))();
  swift_release();
  if (!v10)
  {

LABEL_7:
    *(void *)(v1 + 216) = 0;
    return swift_release();
  }
  uint64_t v11 = *(void *)(v1 + 216);
  if (v11)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 280);
    swift_retain();
    uint64_t v13 = swift_retain();
    LOBYTE(v12) = v12(v13);
    swift_release();
    swift_release();

    if (v12) {
      return swift_release();
    }
  }
  else
  {
  }
  *(void *)(v1 + 216) = v10;
  return swift_release();
}

void sub_10011A2B0()
{
  if (*(unsigned char *)(v0 + 544) == 3)
  {
    swift_retain();
    StateValue.ifUpdated(_:)();
    uint64_t v1 = swift_release();
    __chkstk_darwin(v1);
    swift_retain();
    swift_retain();
    StateValue.ifUpdated(_:)();
    swift_release();
    swift_release();
  }
}

uint64_t sub_10011A394(unsigned __int8 *a1, uint64_t a2)
{
  void (*v5)(void *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  void v15[64];
  unsigned char __dst[512];

  int v3 = a1[3];
  char v4 = *a1 - 1 < 3;
  uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(a2 + 144) + 144);
  uint64_t v6 = swift_retain();
  v5(v15, v6);
  swift_release();
  memcpy(__dst, v15, sizeof(__dst));
  sub_10011A570(v4, (uint64_t)__dst);
  uint64_t result = sub_100016F7C((uint64_t)__dst);
  if (v3 == 1 && (*(unsigned char *)(a2 + 208) & 1) == 0)
  {
    uint64_t v8 = *(void *)(a2 + 72);
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 64);
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v10 = result;
      if (result) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v10)
      {
LABEL_5:
        if (v10 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v10; ++i)
        {
          if ((v9 & 0xC000000000000001) != 0)
          {
            uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v12 = *(void *)(v9 + 8 * i + 32);
            swift_retain();
          }
          if (swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v13 = *(void *)(v12 + 24);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 120))(1, ObjectType, v13);
            swift_release();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();
          }
        }
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)(a2 + 208) = 1;
  }
  return result;
}

void sub_10011A570(char a1, uint64_t a2)
{
  void (*v5)(unint64_t *__return_ptr, uint64_t);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(double (*)(uint64_t), uint64_t);
  unint64_t v13;

  if (a1)
  {
    uint64_t v3 = v2;
    uint64_t v5 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v2 + 88) + 144);
    uint64_t v6 = swift_retain();
    v5(&v13, v6);
    swift_release();
    id v7 = v13;
    sub_10001F780(v13);
    if (v7 == 0xC000000000000018)
    {
      sub_10011B3D0(1, a2);
      if (qword_1004C3238 != -1) {
        swift_once();
      }
      if (*(unsigned char *)(qword_1004F8AA8 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80))
      {
        __break(1u);
      }
      else
      {
        SIMD2<>.init(_:)();
        *(void *)(v3 + 464) = v8;
        *(_DWORD *)(v3 + 472) = 1106247680;
        uint64_t v9 = *(uint64_t (**)(uint64_t))(**(void **)(v3 + 120) + 200);
        uint64_t v10 = swift_retain();
        uint64_t v11 = v9(v10);
        swift_release();
        uint64_t v12 = *(void (**)(double (*)(uint64_t), uint64_t))(*(void *)v11 + 280);
        swift_retain();
        v12(sub_1001222C0, v3);
        swift_release();
        swift_release();
      }
    }
  }
}

void sub_10011A728(uint64_t a1)
{
  uint64_t v4 = a1;
  int64_t v5 = 0;
  uint64_t v32 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v33 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    do
    {
LABEL_4:
      if (v8)
      {
        unint64_t v9 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v10 = v9 | (v5 << 6);
      }
      else
      {
        int64_t v11 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_56;
        }
        if (v11 >= v33) {
          return;
        }
        unint64_t v12 = *(void *)(v32 + 8 * v11);
        ++v5;
        if (!v12)
        {
          int64_t v5 = v11 + 1;
          if (v11 + 1 >= v33) {
            return;
          }
          unint64_t v12 = *(void *)(v32 + 8 * v5);
          if (!v12)
          {
            int64_t v5 = v11 + 2;
            if (v11 + 2 >= v33) {
              return;
            }
            unint64_t v12 = *(void *)(v32 + 8 * v5);
            if (!v12)
            {
              int64_t v13 = v11 + 3;
              if (v13 >= v33) {
                return;
              }
              unint64_t v12 = *(void *)(v32 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  int64_t v5 = v13 + 1;
                  if (__OFADD__(v13, 1)) {
                    goto LABEL_57;
                  }
                  if (v5 >= v33) {
                    return;
                  }
                  unint64_t v12 = *(void *)(v32 + 8 * v5);
                  ++v13;
                  if (v12) {
                    goto LABEL_19;
                  }
                }
              }
              int64_t v5 = v13;
            }
          }
        }
LABEL_19:
        unint64_t v8 = (v12 - 1) & v12;
        unint64_t v10 = __clz(__rbit64(v12)) + (v5 << 6);
      }
      uint64_t v14 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v10);
      uint64_t v15 = *v14;
      unint64_t v2 = v14[1];
      uint64_t v16 = *(void *)(v34 + 72);
      swift_beginAccess();
      uint64_t v3 = *(void **)(v16 + 88);
      uint64_t v17 = (void *)v3[2];
    }
    while (!v17);
    uint64_t v18 = v4;
    BOOL v19 = v3[4] == v15 && v3[5] == v2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_42:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001236F8(v15, v2);
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void **)(v34 + 312);
      if (v23)
      {
        uint64_t v3 = &swift_isaMask;
        uint64_t v24 = *(uint64_t (**)(void))((swift_isaMask & *v23) + 0x238);
        uint64_t v1 = v23;
        unint64_t v25 = v24();
        unint64_t v2 = v25;
        if (v25 >> 62) {
          goto LABEL_58;
        }
        if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_45;
        }
LABEL_63:
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      return;
    }
    if (v17 != (void *)1)
    {
      BOOL v20 = v3[6] == v15 && v3[7] == v2;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_42;
      }
      if (v17 != (void *)2) {
        break;
      }
    }
  }
  v3 += 9;
  uint64_t v21 = 2;
  while (1)
  {
    uint64_t v1 = (void *)(v21 + 1);
    if (__OFADD__(v21, 1)) {
      break;
    }
    BOOL v22 = *(v3 - 1) == v15 && *v3 == v2;
    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_42;
    }
    v3 += 2;
    ++v21;
    if (v1 == v17)
    {
      uint64_t v4 = v18;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_63;
  }
LABEL_45:
  if ((v2 & 0xC000000000000001) != 0)
  {
    int v26 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_48:
    uint64_t v27 = v26;
    uint64_t v28 = swift_bridgeObjectRelease();
    unint64_t v2 = (*(uint64_t (**)(uint64_t))((*v3 & *v27) + 0x250))(v28);

    if (v2 >> 62) {
      goto LABEL_62;
    }
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_63;
    }
  }
  else
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      int v26 = *(id *)(v2 + 32);
      goto LABEL_48;
    }
    __break(1u);
LABEL_62:
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v31) {
      goto LABEL_63;
    }
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v29 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_53;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v29 = *(id *)(v2 + 32);
LABEL_53:
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    sub_100122D4C(v30);
    swift_release();

    return;
  }
  __break(1u);
}

uint64_t sub_10011AB54()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  long long v1 = *(_OWORD *)(v0 + 432);
  v6[6] = *(_OWORD *)(v0 + 416);
  v6[7] = v1;
  _OWORD v6[8] = *(_OWORD *)(v0 + 448);
  long long v2 = *(_OWORD *)(v0 + 368);
  v6[2] = *(_OWORD *)(v0 + 352);
  v6[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 400);
  v6[4] = *(_OWORD *)(v0 + 384);
  v6[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 336);
  v6[0] = *(_OWORD *)(v0 + 320);
  v6[1] = v4;
  sub_100122068((uint64_t)v6);
  sub_10001F780(*(void *)(v0 + 536));
  return swift_release();
}

uint64_t sub_10011AC60()
{
  uint64_t v0 = StateObserver.deinit();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  long long v1 = *(_OWORD *)(v0 + 432);
  v6[6] = *(_OWORD *)(v0 + 416);
  v6[7] = v1;
  _OWORD v6[8] = *(_OWORD *)(v0 + 448);
  long long v2 = *(_OWORD *)(v0 + 368);
  v6[2] = *(_OWORD *)(v0 + 352);
  v6[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 400);
  v6[4] = *(_OWORD *)(v0 + 384);
  v6[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 336);
  v6[0] = *(_OWORD *)(v0 + 320);
  v6[1] = v4;
  sub_100122068((uint64_t)v6);
  sub_10001F780(*(void *)(v0 + 536));
  swift_release();
  return v0;
}

uint64_t sub_10011AD80()
{
  sub_10011AC60();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LinesInstrument()
{
  uint64_t result = qword_1004CC108;
  if (!qword_1004CC108) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10011ADFC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10011AED0@<X0>(uint64_t a1@<X8>)
{
  if (qword_1004C2B90 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = sub_1000217E0(v2, (uint64_t)qword_1004F83E0);
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_10011AF78()
{
  return *(unsigned __int8 *)(v0 + 544);
}

uint64_t sub_10011AF80()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t sub_10011AFFC(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(unsigned char *)(v4 + 24) = a1;
  *(void *)(v4 + 32) = v3;
  sub_100012894((uint64_t *)&unk_1004C68D0);
  swift_allocObject();
  swift_retain();
  return Future.init(_:)();
}

uint64_t sub_10011B0B4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10011B0EC(void (*a1)(void), uint64_t a2)
{
  return sub_100114988(a1, a2, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_10011B0FC()
{
  return sub_100114CE8(v0);
}

uint64_t sub_10011B104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10011B114()
{
  return swift_release();
}

void sub_10011B11C()
{
  void (*v5)(unint64_t *__return_ptr, uint64_t);
  uint64_t v6;
  unint64_t v7;
  void (*v8)(void *__return_ptr, uint64_t);
  uint64_t v9;
  void (*v10)(unint64_t *__return_ptr, uint64_t);
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void (*v14)(uint64_t);
  void *v15;
  uint64_t v16;
  void v17[64];
  unint64_t __dst[64];

  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 128) + 200);
  uint64_t v3 = swift_retain();
  uint64_t v4 = v2(v3);
  swift_release();
  (*(void (**)(void (*)(id *), void))(*(void *)v4 + 280))(sub_10011B388, 0);
  swift_release();
  int64_t v5 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v0 + 88) + 144);
  uint64_t v6 = swift_retain();
  v5(__dst, v6);
  swift_release();
  uint64_t v7 = __dst[0];
  sub_10001F780(__dst[0]);
  if (v7 == 0xC000000000000018)
  {
    unint64_t v8 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v1 + 144) + 144);
    unint64_t v9 = swift_retain();
    v8(v17, v9);
    swift_release();
    memcpy(__dst, v17, sizeof(__dst));
    sub_10011B3D0(0, (uint64_t)__dst);
    sub_100016F7C((uint64_t)__dst);
    return;
  }
  unint64_t v10 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v1 + 88) + 144);
  int64_t v11 = swift_retain();
  v10(__dst, v11);
  swift_release();
  unint64_t v12 = __dst[0];
  sub_10001F780(__dst[0]);
  int64_t v13 = *(void **)(v1 + 312);
  if (v12 == 0xC000000000000010)
  {
    if (!v13) {
      return;
    }
    uint64_t v14 = *(void (**)(uint64_t))((swift_isaMask & *v13) + 0xD8);
    uint64_t v15 = v13;
    uint64_t v16 = 3;
  }
  else
  {
    if (!v13) {
      return;
    }
    uint64_t v14 = *(void (**)(uint64_t))((swift_isaMask & *v13) + 0xD8);
    uint64_t v15 = v13;
    uint64_t v16 = 1;
  }
  v14(v16);
}

void sub_10011B388(id *a1)
{
  a1[2] = 0;
  a1[3] = 0;

  *a1 = 0;
  a1[1] = 0;
}

void sub_10011B3D0(char a1, uint64_t a2)
{
  void (*v6)(Swift::String *__return_ptr, uint64_t);
  uint64_t v7;
  uint64_t countAndFlagsBits;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  void *v24;
  unint64_t v25;
  BOOL v26;
  void *v27;
  uint64_t (*v28)(void);
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t (*v45)(void);
  unint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  char v69;
  void *v70;
  void *v71;
  uint64_t (*v72)(void);
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  void *v80;
  unint64_t v81;
  void *v82;
  void (*v83)(Swift::String *);
  void *v84;
  void *v85;
  uint64_t v86;
  id v87;
  id v88;
  void *v89;
  void *v90;
  void (*v91)(uint64_t);
  void *v92;
  uint64_t v93;
  void (*v94)(Swift::String *);
  unint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v120;
  void *v121;
  char v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t (*v126)(void);
  uint64_t v127;
  void *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(void);
  unint64_t v133;
  void *v134;
  uint64_t (*v135)(void);
  Swift::String v136;

  uint64_t v3 = v2;
  uint64_t v6 = *(void (**)(Swift::String *__return_ptr, uint64_t))(**(void **)(v2 + 88) + 144);
  uint64_t v7 = swift_retain();
  v6(&v136, v7);
  swift_release();
  uint64_t countAndFlagsBits = v136._countAndFlagsBits;
  sub_10001F780(v136._countAndFlagsBits);
  if (countAndFlagsBits != 0xC000000000000018) {
    return;
  }
  if (a1)
  {
    unint64_t v9 = (void *)SnapType.all.unsafeMutableAddressor();
    sub_1001160F0(*v9, a2);
  }
  sub_100119100();
  unint64_t v10 = *(void **)(v2 + 304);
  if (!v10) {
    return;
  }
  int64_t v11 = *(void **)(v2 + 312);
  if (!v11) {
    return;
  }
  unint64_t v12 = (unint64_t)&swift_isaMask;
  int64_t v13 = *(uint64_t (**)(void))((swift_isaMask & *v10) + 0x2C0);
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  uint64_t v16 = *(void *)v13();
  (*(void (**)(void))(v16 + 376))();
  uint64_t v18 = v17;
  BOOL v19 = swift_release();
  if ((v18 & 1) == 0)
  {
    BOOL v20 = ((uint64_t (*)(uint64_t))v13)(v19);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 216))(v20);
    swift_release();
    swift_release();
    if (v21)
    {
      type metadata accessor for WorldAnchor();
      v13();
      BOOL v22 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
      (*(void (**)(uint64_t))((swift_isaMask & *v15) + 0x2E0))(v22);
    }
  }
  uint64_t v23 = *(uint64_t (**)(void))((swift_isaMask & *v14) + 0x2F0);
  uint64_t v24 = v15;
  unint64_t v25 = v23();
  int v26 = v25 > 8 || ((1 << v25) & 0x1E9) == 0;
  float32x4_t v123 = v24;
  float32x4_t v124 = v24;
  float32x4_t v127 = v2;
  int8x16_t v128 = v14;
  if (!v26)
  {
LABEL_13:
    (*(void (**)(void))((*(void *)v12 & *v24) + 0xD8))(0);
    uint64_t v27 = *(void **)(v3 + 224);
    if (!v27) {
      goto LABEL_64;
    }
    uint64_t v28 = *(uint64_t (**)(void))((*(void *)v12 & *v24) + 0x238);
    float32x4_t v134 = v27;
    uint64_t v29 = v28();
    uint64_t v30 = v29;
    if (v29 >> 62)
    {
LABEL_61:
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      if (v31) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v31 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v31)
      {
LABEL_16:
        int8x16_t v122 = 0;
        uint64_t v24 = 0;
        int8x16_t v132 = *(uint64_t (**)(void))((*(void *)v12 & *v134) + 0xB8);
        int8x16_t v133 = v30 & 0xC000000000000001;
        int8x16_t v125 = v30 & 0xFFFFFFFFFFFFFF8;
        double v129 = v30;
        unint64_t v12 = 0;
        while (1)
        {
          while (1)
          {
            if (v133)
            {
              uint64_t v32 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v12 >= *(void *)(v125 + 16)) {
                goto LABEL_59;
              }
              uint64_t v32 = *(id *)(v30 + 8 * v12 + 32);
            }
            int64_t v33 = v32;
            uint64_t v24 = (void *)(v12 + 1);
            if (__OFADD__(v12, 1))
            {
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
              goto LABEL_61;
            }
            uint64_t v34 = v134;
            uint64_t v35 = v132();
            id v37 = v36;

            uint64_t v38 = *(uint64_t (**)(void))((swift_isaMask & *v33) + 0xB8);
            uint64_t v3 = (swift_isaMask & *v33) + 184;
            uint64_t v39 = v33;
            uint64_t v40 = v38();
            simd_float4 v42 = v41;

            if (v35 != v40 || v37 != v42) {
              break;
            }
            swift_bridgeObjectRelease_n();

LABEL_30:
            int8x16_t v122 = 1;
            uint64_t v30 = v129;
            if (v24 == (void *)v31)
            {

              swift_bridgeObjectRelease();
              uint64_t v3 = v127;
              unint64_t v12 = (unint64_t)&swift_isaMask;
              goto LABEL_64;
            }
            ++v12;
          }
          simd_float4 v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (v44) {
            goto LABEL_30;
          }
          ++v12;
          uint64_t v30 = v129;
          if (v24 == (void *)v31)
          {
            swift_bridgeObjectRelease();
            uint64_t v3 = v127;
            unint64_t v12 = (unint64_t)&swift_isaMask;
            uint64_t v24 = v124;
            if (v122)
            {

              goto LABEL_64;
            }
LABEL_63:
            (*(void (**)(void *))((*(void *)v12 & *v134) + 0x330))(v24);

LABEL_64:
            if (qword_1004C2B20 != -1) {
              swift_once();
            }
            uint64_t v24 = (void *)qword_1004F82F0;
            v136._uint64_t countAndFlagsBits = 0;
            v136._object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(35);
            swift_bridgeObjectRelease();
            v136._uint64_t countAndFlagsBits = 0xD000000000000014;
            v136._object = (void *)0x8000000100426E00;
            uint64_t v71 = *(void **)(v3 + 312);
            if (!v71) {
              goto LABEL_107;
            }
            uint64_t v72 = *(uint64_t (**)(void))((*(void *)v12 & *v71) + 0xB8);
            id v73 = v71;
            __n128 v74 = v72();
            uint64_t v76 = v75;

            v77._uint64_t countAndFlagsBits = v74;
            v77._object = v76;
            String.append(_:)(v77);
            swift_bridgeObjectRelease();
            v78._uint64_t countAndFlagsBits = 0x6D61726620746120;
            v78._object = (void *)0xEB00000000203A65;
            String.append(_:)(v78);
            v79._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v79);
            swift_bridgeObjectRelease();
            Log.default(_:isPrivate:)(v136, 0);
            swift_bridgeObjectRelease();
            unint64_t v10 = v123;
            sub_1001231B8(v123);
            sub_100124540(v123);
            uint64_t v80 = *(void **)(v3 + 312);
            *(void *)(v3 + 312) = 0;

            uint64_t v82 = *(void **)(v3 + 88);
            v136._uint64_t countAndFlagsBits = *(void *)(v3 + 536);
            id v81 = v136._countAndFlagsBits;
            id v45 = (uint64_t (*)(void))(*v82 + 392);
            uint64_t v83 = *(void (**)(Swift::String *))v45;
            sub_100078CF8(v136._countAndFlagsBits);
            sub_100078CF8(v81);
            swift_retain();
            v83(&v136);
            sub_10001F780(v81);
            swift_release();
            uint64_t v14 = v124;
            if (*(void *)(v3 + 536) == 0xC000000000000010)
            {
              uint64_t v84 = (void *)sub_10012470C();
              if (v84)
              {
                char v85 = v84;
                uint64_t v86 = (*(uint64_t (**)(void))((*(void *)v12 & *v84) + 0x250))();
                if ((v86 & 0xC000000000000001) == 0)
                {
                  if (*(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
                  {
                    uint64_t v87 = *(id *)(v86 + 40);
                    goto LABEL_72;
                  }
                  __break(1u);
LABEL_79:
                  uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
                  goto LABEL_36;
                }
                uint64_t v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_72:
                uint64_t v88 = v87;
                swift_bridgeObjectRelease();
                uint64_t v89 = *(void **)(v3 + 312);
                *(void *)(v3 + 312) = v88;

                uint64_t v90 = *(void **)(v3 + 312);
                if (v90)
                {
                  uint64_t v91 = *(void (**)(uint64_t))((*(void *)v12 & *v90) + 0xD8);
                  uint64_t v92 = v90;
                  v91(3);
                }
              }
            }
            id v93 = *(void *)(v3 + 104);
            LOBYTE(v136._countAndFlagsBits) = 5;
            uint64_t v94 = *(void (**)(Swift::String *))(*(void *)v93 + 392);
            swift_retain();
            v94(&v136);
            swift_release();

            return;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
  id v45 = *(uint64_t (**)(void))((swift_isaMask & *v14) + 0x238);
  NSString v46 = v45();
  if (v46 >> 62) {
    goto LABEL_79;
  }
  uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_36:
  uint64_t v48 = (void *)swift_bridgeObjectRelease();
  float32x4_t v123 = v24;
  if (!v47)
  {
    uint64_t v49 = (*(uint64_t (**)(void *))((*(void *)v12 & *v24) + 0x238))(v48);
    long long v50 = v49;
    float32x4_t v126 = v45;
    if (v49 >> 62)
    {
      double v51 = _CocoaArrayWrapper.endIndex.getter();
      if (v51) {
        goto LABEL_39;
      }
    }
    else
    {
      double v51 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v51)
      {
LABEL_39:
        float32x4_t v134 = *(void **)((swift_isaMask & *v24) + 0xB8);
        if (v51 < 1) {
          goto LABEL_106;
        }
        uint64_t v3 = 0;
        uint64_t v130 = v51;
        do
        {
          if ((v50 & 0xC000000000000001) != 0) {
            uint64_t v57 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t v57 = *(id *)(v50 + 8 * v3 + 32);
          }
          unint64_t v12 = (unint64_t)v57;
          uint64_t v58 = v24;
          long long v59 = ((uint64_t (*)(void))v134)();
          uint64_t v24 = v60;

          uint64_t v30 = v12;
          id v61 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v12) + 0x250))();
          if ((v61 & 0xC000000000000001) != 0)
          {
            Swift::String v62 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_60;
            }
            Swift::String v62 = *(id *)(v61 + 32);
          }
          long long v63 = v62;
          long long v64 = swift_bridgeObjectRelease();
          uint64_t v65 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v63) + 0xB8))(v64);
          uint64_t v67 = v66;

          if (v59 == v65 && v24 == v67)
          {
            swift_bridgeObjectRelease_n();
            double v52 = v130;
          }
          else
          {
            id v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            double v52 = v130;
            if ((v69 & 1) == 0)
            {
              uint64_t v14 = v128;
              uint64_t v70 = v128;
              char v54 = v12;
              char v55 = 0;
              unsigned int v56 = v10;
              goto LABEL_43;
            }
          }
          uint64_t v14 = v128;
          uint64_t v53 = v128;
          char v54 = v12;
          char v55 = v10;
          unsigned int v56 = 0;
LABEL_43:
          sub_100123D44(v54, v55, v56, 1);
          uint64_t v24 = v124;
          ++v3;
        }
        while (v52 != v3);
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v48 = v14;
    float32x4_t v123 = v48;
    unint64_t v12 = (unint64_t)&swift_isaMask;
    id v45 = v126;
  }
  char v95 = ((uint64_t (*)(void *))v45)(v48);
  id v96 = v95;
  id v97 = (void *)v12;
  if (v95 >> 62) {
    goto LABEL_103;
  }
  id v98 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v98)
  {
LABEL_104:
    swift_bridgeObjectRelease();
    uint64_t v3 = v127;
    unint64_t v12 = (unint64_t)v97;
    uint64_t v24 = v124;
    goto LABEL_13;
  }
LABEL_84:
  float32x4_t v135 = *(uint64_t (**)(void))((*v97 & *v128) + 0xB8);
  if (v98 >= 1)
  {
    double v99 = 0;
    uint64_t v131 = v98;
    while (1)
    {
      if ((v96 & 0xC000000000000001) != 0) {
        float v106 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        float v106 = *(id *)(v96 + 8 * v99 + 32);
      }
      uint64_t v107 = v106;
      uint64_t v108 = v128;
      id v109 = v135();
      char v111 = v110;

      char v112 = (*(uint64_t (**)(void))((*v97 & *v107) + 0x250))();
      if ((v112 & 0xC000000000000001) != 0)
      {
        float v113 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_103:
          id v98 = _CocoaArrayWrapper.endIndex.getter();
          if (!v98) {
            goto LABEL_104;
          }
          goto LABEL_84;
        }
        float v113 = *(id *)(v112 + 32);
      }
      float v114 = v113;
      char v115 = swift_bridgeObjectRelease();
      float32x4_t v116 = (*(uint64_t (**)(uint64_t))((*v97 & *v114) + 0xB8))(v115);
      char v118 = v117;

      if (v109 == v116 && v111 == v118)
      {
        swift_bridgeObjectRelease_n();
        id v100 = v131;
      }
      else
      {
        float32x4_t v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v100 = v131;
        if ((v120 & 1) == 0)
        {
          int8x16_t v121 = *(void **)(v127 + 312);
          UIContentSizeCategory v102 = v121;
          uint64_t v103 = (uint64_t)v107;
          uint64_t v104 = 0;
          char v105 = v121;
          goto LABEL_88;
        }
      }
      uint64_t v101 = *(void **)(v127 + 312);
      UIContentSizeCategory v102 = v101;
      uint64_t v103 = (uint64_t)v107;
      uint64_t v104 = v101;
      char v105 = 0;
LABEL_88:
      sub_100123D44(v103, v104, v105, 1);
      ++v99;

      if (v100 == v99) {
        goto LABEL_104;
      }
    }
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
}

void *sub_10011C1E0(uint64_t a1, void **a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v18)(id *__return_ptr, uint64_t);
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t (*v24)(id *);
  void (*v25)(id *, void);
  uint64_t v26;
  void *v27;
  void *v28;
  double v29;
  char v30;
  id v31;
  char v32;
  void (*v33)(id *__return_ptr, uint64_t);
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  void (*v40)(id *__return_ptr, uint64_t);
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t (*v44)(id *);
  id v45;
  id v46;
  void (*v47)(id *, void);
  uint64_t v48;
  void *v49;
  void *v50;
  void *result;
  void (*v52)(long long *__return_ptr, uint64_t);
  uint64_t v53;
  uint64_t v54;
  id v55;
  void (*v56)(long long *__return_ptr, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_OWORD *);
  void (*v61)(uint64_t, double);
  uint64_t v62;
  id v63;
  id v64;
  _OWORD v65[9];
  uint64_t v66;
  _OWORD v67[9];
  uint64_t v68;
  _OWORD v69[9];
  uint64_t v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  uint64_t v80;
  void v81[20];
  id v82;
  void *v83;
  id v84;
  id v85;
  char v86;
  _OWORD __dst[30];

  int64_t v11 = *a2;
  unint64_t v12 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = *a2;
  id v13 = v11;

  if (a3)
  {
    uint64_t v14 = *(void **)(a1 + 304);
    *(void *)(a1 + 304) = a3;
    id v15 = a3;

    memcpy(__dst, (const void *)(a4 + 32), sizeof(__dst));
    long long v16 = __dst[20];
    *(_OWORD *)(a1 + 240) = __dst[19];
    *(_OWORD *)(a1 + 256) = v16;
    long long v17 = __dst[22];
    *(_OWORD *)(a1 + 272) = __dst[21];
    *(_OWORD *)(a1 + 288) = v17;
  }
  if (a5)
  {
    uint64_t v18 = *(void (**)(id *__return_ptr, uint64_t))(**(void **)(a1 + 128) + 144);
    BOOL v19 = swift_retain();
    v18(&v82, v19);
    swift_release();
    BOOL v20 = v82;
    uint64_t v21 = v83;
    BOOL v22 = v84;
    uint64_t v23 = v85;

    uint64_t v24 = *(uint64_t (**)(id *))(**(void **)(a1 + 128) + 400);
    swift_retain();
    unint64_t v25 = (void (*)(id *, void))v24(&v82);
    uint64_t v27 = *(void **)v26;
    uint64_t v28 = *(void **)(v26 + 8);
    *(void *)int v26 = v22;
    *(void *)(v26 + 8) = v23;

    v25(&v82, 0);
    swift_release();
  }
  else
  {
    sub_10011D754(a4, (uint64_t)&v82, *(double *)(a1 + 464));
    uint64_t v29 = *(double *)&v82;
    uint64_t v30 = (char)v83;
    uint64_t v31 = v84;
    uint64_t v32 = v86;
    int64_t v33 = *(void (**)(id *__return_ptr, uint64_t))(**(void **)(a1 + 128) + 144);
    uint64_t v34 = swift_retain();
    v33(&v82, v34);
    swift_release();
    uint64_t v35 = v82;
    uint64_t v36 = v83;
    id v37 = v84;
    uint64_t v38 = v85;
    uint64_t v39 = v82;

    uint64_t v40 = *(void (**)(id *__return_ptr, uint64_t))(**(void **)(a1 + 128) + 144);
    unint64_t v41 = swift_retain();
    v40(&v82, v41);
    swift_release();

    simd_float4 v42 = v83;
    if (v30 & 1) != 0 || !v31 || (v32)
    {

      simd_float4 v43 = 0;
      uint64_t v35 = 0;
    }
    else
    {
      if (v35)
      {
        id v61 = *(void (**)(uint64_t, double))((swift_isaMask & *v39) + 0x208);
        Swift::String v62 = swift_retain();
        v61(v62, v29);
      }
      else
      {
        long long v63 = objc_allocWithZone((Class)type metadata accessor for ScreenPoint());
        swift_retain();
        uint64_t v35 = (id)ScreenPoint.init(_:)();
      }
      type metadata accessor for WorldAnchor();
      swift_retain();
      WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
      long long v64 = objc_allocWithZone((Class)type metadata accessor for WorldPoint());
      simd_float4 v43 = (void *)WorldPoint.init(anchor:type:state:)();
      swift_release();
    }
    simd_float4 v44 = *(uint64_t (**)(id *))(**(void **)(a1 + 128) + 400);
    id v45 = v43;
    swift_retain();
    NSString v46 = v35;
    uint64_t v47 = (void (*)(id *, void))v44(&v82);
    uint64_t v49 = *(void **)v48;
    long long v50 = *(void **)(v48 + 8);
    *(void *)uint64_t v48 = v35;
    *(void *)(v48 + 8) = v43;

    v47(&v82, 0);
    swift_release();

    swift_release();
  }
  uint64_t result = [self jasperAvailable];
  if (result)
  {
    sub_100016FEC(a6, (uint64_t)v81, &qword_1004CC330);
    sub_100016FEC((uint64_t)v81, (uint64_t)&v82, &qword_1004CC330);
    uint64_t result = (void *)sub_100121EA8((uint64_t)&v82);
    if (result != 1)
    {
      double v52 = *(void (**)(long long *__return_ptr, uint64_t))(**(void **)(a1 + 200) + 144);
      sub_1001220B8(v81, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100122124);
      sub_100016B40(&v82);
      uint64_t v53 = swift_retain();
      v52(&v71, v53);
      swift_release();
      v67[6] = v77;
      v67[7] = v78;
      v67[8] = v79;
      id v68 = v80;
      v67[2] = v73;
      v67[3] = v74;
      v67[4] = v75;
      v67[5] = v76;
      v67[0] = v71;
      v67[1] = v72;
      char v54 = *((void *)&v79 + 1);
      char v55 = *((id *)&v79 + 1);
      sub_100016F3C((uint64_t)v67);
      unsigned int v56 = *(void (**)(long long *__return_ptr, uint64_t))(**(void **)(a1 + 200) + 144);
      uint64_t v57 = swift_retain();
      v56(&v71, v57);
      swift_release();
      v69[6] = v77;
      v69[7] = v78;
      v69[8] = v79;
      uint64_t v70 = v80;
      v69[2] = v73;
      v69[3] = v74;
      v69[4] = v75;
      v69[5] = v76;
      v69[0] = v71;
      v69[1] = v72;
      uint64_t v58 = v80;
      swift_bridgeObjectRetain();
      sub_100016F3C((uint64_t)v69);
      sub_100016FEC((uint64_t)&v82, (uint64_t)&v71, (uint64_t *)&unk_1004CEA30);
      *((void *)&v79 + 1) = v54;
      uint64_t v80 = v58;
      long long v59 = *(void *)(a1 + 200);
      v65[0] = v71;
      v65[1] = v72;
      v65[4] = v75;
      v65[5] = v76;
      v65[2] = v73;
      v65[3] = v74;
      uint64_t v66 = v58;
      v65[7] = v78;
      v65[8] = v79;
      v65[6] = v77;
      id v60 = *(void (**)(_OWORD *))(*(void *)v59 + 392);
      swift_retain();
      sub_100122188((void **)&v71);
      v60(v65);
      sub_100016F3C((uint64_t)&v71);
      swift_release();
      return sub_1001220B8(v81, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100121DE0);
    }
  }
  return result;
}

void sub_10011C81C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v4)(unint64_t *__return_ptr, uint64_t);
  uint64_t v5;
  unint64_t v6;
  long long v7;
  void *v8;
  uint64_t (*v9)(void);
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  long long v19;
  long long v20;
  char v21;
  long long v22;
  unint64_t v23;

  uint64_t v4 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(a1 + 88) + 144);
  int64_t v5 = swift_retain();
  v4(&v23, v5);
  swift_release();
  uint64_t v6 = v23;
  sub_10001F780(v23);
  uint64_t v7 = 0uLL;
  if (v6 != 0xC000000000000010 || (unint64_t v8 = *(void **)(a1 + 312)) == 0)
  {
    uint64_t v21 = 1;
    BOOL v20 = 0uLL;
    goto LABEL_11;
  }
  unint64_t v9 = *(uint64_t (**)(void))((swift_isaMask & *v8) + 0x238);
  unint64_t v10 = v8;
  int64_t v11 = v9();

  if ((v11 & 0xC000000000000001) != 0)
  {
    unint64_t v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_14;
    }
    unint64_t v12 = *(id *)(v11 + 32);
  }
  id v13 = v12;
  uint64_t v14 = swift_bridgeObjectRelease();
  id v15 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v13) + 0x250))(v14);

  if ((v15 & 0xC000000000000001) != 0)
  {
LABEL_14:
    long long v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    long long v16 = *(id *)(v15 + 32);
LABEL_9:
    long long v17 = v16;
    uint64_t v18 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((swift_isaMask & *v17) + 0x2B0))(v18);

    simd_float4x4.position.getter();
    BOOL v22 = v19;
    simd_float4x4.position.getter();
    uint64_t v7 = v22;
    uint64_t v21 = 0;
LABEL_11:
    *(_OWORD *)a2 = v7;
    *(_OWORD *)(a2 + 16) = v20;
    *(unsigned char *)(a2 + 32) = v21;
    return;
  }
  __break(1u);
}

void sub_10011CA48(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(void **__return_ptr, uint64_t);
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void (*v14)(void **__return_ptr, uint64_t);
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void (*v21)(void **__return_ptr, uint64_t);
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  void *v31;
  id v32;
  id v33;
  uint64_t (*v34)(void **);
  id v35;
  void *v36;
  void (*v37)(void **, void);
  uint64_t v38;
  void *v39;
  void *v40;
  void *v43;
  void *v44;
  id v45;
  id v46;

  uint64_t v5 = v4;
  uint64_t v7 = *(void (**)(void **__return_ptr, uint64_t))(**(void **)(v4 + 128) + 144);
  unint64_t v8 = swift_retain();
  v7(&v43, v8);
  swift_release();
  unint64_t v9 = v43;
  unint64_t v10 = v44;
  int64_t v11 = v45;
  unint64_t v12 = v46;
  id v13 = v45;

  uint64_t v14 = *(void (**)(void **__return_ptr, uint64_t))(**(void **)(v5 + 128) + 144);
  id v15 = swift_retain();
  v14(&v43, v15);
  swift_release();
  long long v16 = v43;
  long long v17 = v44;
  uint64_t v18 = v45;
  BOOL v19 = v46;
  BOOL v20 = v46;

  uint64_t v21 = *(void (**)(void **__return_ptr, uint64_t))(**(void **)(v5 + 128) + 144);
  BOOL v22 = swift_retain();
  v21(&v43, v22);
  swift_release();
  uint64_t v23 = v43;
  uint64_t v24 = v44;
  unint64_t v25 = v45;
  int v26 = v46;

  if (!v25)
  {

    uint64_t v32 = objc_allocWithZone((Class)type metadata accessor for ScreenPoint());
    int64_t v11 = (id)ScreenPoint.init(_:)();

    if (v19) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    (*(void (**)(double))((swift_isaMask & *v13) + 0x208))(a1);

    if (v19)
    {
LABEL_4:
      uint64_t v27 = *(void (**)(uint64_t))((swift_isaMask & *v20) + 0x2C8);
      uint64_t v28 = v20;
      uint64_t v29 = swift_retain();
      v27(v29);

      uint64_t v30 = *(void (**)(uint64_t))((swift_isaMask & *v28) + 0x2F8);
      uint64_t v31 = v28;
      v30(a3);

      (*(void (**)(uint64_t))((swift_isaMask & *v31) + 0xD8))(a4);
LABEL_7:
      uint64_t v34 = *(uint64_t (**)(void **))(**(void **)(v5 + 128) + 400);
      uint64_t v35 = v11;
      uint64_t v36 = v31;
      swift_retain();
      id v37 = (void (*)(void **, void))v34(&v43);
      uint64_t v39 = *(void **)(v38 + 16);
      uint64_t v40 = *(void **)(v38 + 24);
      *(void *)(v38 + 16) = v11;
      *(void *)(v38 + 24) = v19;

      v37(&v43, 0);
      swift_release();

      return;
    }
LABEL_6:
    int64_t v33 = objc_allocWithZone((Class)type metadata accessor for WorldPoint());
    swift_retain();
    uint64_t v31 = (void *)WorldPoint.init(anchor:type:state:)();
    BOOL v19 = v31;
    goto LABEL_7;
  }

  __break(1u);
}

void *sub_10011CDB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (void *)sub_1000A3850();
  if (result)
  {
    uint64_t v5 = result;
    id v6 = [result camera];

    [v6 transform];
    simd_float4x4.forward.getter();
    float v44 = 0.0 - *(float *)v7.i32;
    v7.i32[0] = vextq_s8(v7, v7, 8uLL).u32[0];
    float32x2_t v43 = vsub_f32(0, *(float32x2_t *)v7.i8);
    uint64_t v8 = simd_float4x4.position.getter();
    float v12 = (float)((float)(v11 + (float)(0.1 * v43.f32[0])) * v43.f32[0])
        + (float)((float)(v44 * (float)(v9 + (float)(v44 * 0.1)))
                + vmuls_lane_f32(v10 + vmuls_lane_f32(0.1, v43, 1), v43, 1));
    *(double *)&long long v13 = (*(double (**)(uint64_t))((swift_isaMask & *a1) + 0x2A0))(v8);
    long long v51 = v14;
    long long v52 = v13;
    long long v50 = v15;
    long long v46 = v16;
    *(double *)&long long v17 = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A8))();
    long long v48 = v18;
    long long v49 = v17;
    long long v47 = v19;
    long long v45 = v20;
    type metadata accessor for MeasureCamera();
    simd_float4x4.position.getter();
    int8x16_t v41 = v21;
    static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    float v42 = v22;
    simd_float4x4.position.getter();
    int8x16_t v40 = v23;
    static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    float32x2_t v25 = vsub_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v41.i8);
    float v26 = *(float *)&v40.i32[2] - *(float *)&v41.i32[2];
    if (v42 <= 1.0)
    {
      if (v24 > 1.0)
      {
        int32x2_t v27 = (int32x2_t)vmul_f32(v43, (float32x2_t)__PAIR64__(v41.u32[1], vextq_s8(v41, v41, 8uLL).u32[0]));
        v28.i32[1] = v25.i32[1];
        v28.f32[0] = *(float *)&v40.i32[2] - *(float *)&v41.i32[2];
        int32x2_t v29 = (int32x2_t)vmul_f32(v43, v28);
        float32x2_t v30 = vadd_f32((float32x2_t)vzip1_s32(v27, v29), vadd_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v41.i8, (int32x2_t)v25), v44), (float32x2_t)vzip2_s32(v27, v29)));
        v30.f32[0] = (float)(v12 - v30.f32[0]) / v30.f32[1];
        *(float32x2_t *)&long long v31 = vadd_f32(*(float32x2_t *)v41.i8, vmul_n_f32(v25, v30.f32[0]));
        *((void *)&v31 + 1) = __PAIR64__(1.0, *(float *)&v41.i32[2] + (float)(v26 * v30.f32[0]));
        long long v45 = v31;
        simd_float4x4.position.getter();
        static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
      }
    }
    else
    {
      if (v24 > 1.0)
      {
        sub_10012200C((uint64_t)v53);
LABEL_10:
        sub_100016FEC((uint64_t)v53, (uint64_t)v54, &qword_1004CC348);
        return (void *)sub_100016FEC((uint64_t)v54, a2, &qword_1004CC348);
      }
      v32.i32[1] = v40.i32[1];
      v32.i32[0] = vextq_s8(v40, v40, 8uLL).u32[0];
      int32x2_t v33 = (int32x2_t)vmul_f32(v43, v32);
      v34.i32[0] = v40.i32[0];
      v34.f32[1] = 0.0 - v25.f32[0];
      int32x2_t v35 = (int32x2_t)vmul_f32(v43, vsub_f32(0, (float32x2_t)__PAIR64__(v25.u32[1], LODWORD(v26))));
      float32x2_t v36 = vadd_f32((float32x2_t)vzip1_s32(v33, v35), vadd_f32(vmul_n_f32(v34, v44), (float32x2_t)vzip2_s32(v33, v35)));
      v36.f32[0] = (float)(v12 - v36.f32[0]) / v36.f32[1];
      float v37 = v26 * v36.f32[0];
      *(float32x2_t *)&long long v38 = vsub_f32(*(float32x2_t *)v40.i8, vmul_n_f32(v25, v36.f32[0]));
      *((void *)&v38 + 1) = __PAIR64__(1.0, *(float *)&v40.i32[2] - v37);
      long long v46 = v38;
      simd_float4x4.position.getter();
      static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
    }
    closestPointOnLine(lineP1:lineP2:point:)();
    v53[0] = v39;
    v53[1] = v52;
    v53[2] = v51;
    v53[3] = v50;
    v53[4] = v46;
    v53[5] = v49;
    v53[6] = v48;
    v53[7] = v47;
    v53[8] = v45;
    sub_100122004((uint64_t)v53);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_10011D1C8(uint64_t a1@<X8>)
{
  void (*v5)(float32x2_t *__return_ptr, uint64_t);
  uint64_t v6;
  float32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  void *v12;
  void *v13;
  float32x2_t v14;
  void *v15;
  void *v16;
  float32x2_t v17;
  long long v18;
  long long v19;
  long long v20;
  void (*v21)(float32x2_t *__return_ptr, uint64_t);
  uint64_t v22;
  float32x2_t v23;
  void (*v24)(float32x2_t *__return_ptr, uint64_t);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  void *v30;
  float32x2_t v31;
  float v32;
  void *v33;
  uint64_t v35;
  __n128 v36;
  float32x2_t v37;
  char v38;
  void *v39;
  void *v40;
  simd_float4 v41;
  void *v42;
  unsigned char v43[160];
  unsigned char v44[160];
  float32x2_t v45;
  long long v46;
  float32x2_t v47[2];
  __n128 v48;

  unsigned int v3 = [self jasperAvailable];
  __n128 v4 = 0uLL;
  if (!v3)
  {
    long long v16 = 0;
    long long v17 = 0;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
    long long v20 = 0uLL;
LABEL_41:
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = 0;
    *(__n128 *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v18;
    *(_OWORD *)(a1 + 48) = v19;
    *(_OWORD *)(a1 + 64) = v20;
    *(float32x2_t *)(a1 + 80) = v17;
    return;
  }
  int32x2_t v35 = a1;
  float v42 = 0;
  uint64_t v5 = *(void (**)(float32x2_t *__return_ptr, uint64_t))(**(void **)(v1 + 176) + 144);
  id v6 = swift_retain();
  v5(v47, v6);
  swift_release();
  swift_bridgeObjectRelease();
  int8x16_t v7 = v47[1];
  swift_bridgeObjectRelease();
  if (*(void *)&v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((*(void *)&v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int8x16_t v41 = matrix_identity_float4x4.columns[0];
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
      goto LABEL_37;
    }
    long long v38 = 1;
    swift_beginAccess();
    float v9 = 0;
    float v37 = 0;
    long long v39 = 0;
    float v10 = 900.0;
    float32x2_t v36 = (__n128)v41;
    do
    {
      if ((*(void *)&v7 & 0xC000000000000001) != 0) {
        float v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        float v12 = *(id *)(*(void *)&v7 + 8 * v9 + 32);
      }
      long long v13 = v12;
      sub_10011CDB0(v12, (uint64_t)v43);
      sub_100016FEC((uint64_t)v43, (uint64_t)v47, &qword_1004CC348);
      if (sub_100121EC0((uint64_t)v47) == 1
        || (long long v14 = vsub_f32(*(float32x2_t *)(v1 + 464), v47[0]), v11 = vaddv_f32(vmul_f32(v14, v14)), v11 >= v10))
      {
        float v11 = v10;
      }
      else
      {
        float32x2_t v36 = v48;
        float v37 = v47[0];
        long long v38 = 0;
        long long v39 = v13;
        long long v15 = v42;
        float v42 = v13;
        long long v13 = v15;
      }
      ++v9;

      float v10 = v11;
    }
    while (v8 != v9);
    swift_bridgeObjectRelease();
    long long v16 = v39;
    if (v39)
    {
LABEL_39:
      a1 = v35;
      if ((v38 & 1) == 0) {
        goto LABEL_33;
      }
LABEL_40:

      long long v16 = 0;
      long long v17 = 0;
      long long v18 = 0uLL;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      __n128 v4 = 0uLL;
      goto LABEL_41;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    float v37 = 0;
    long long v38 = 1;
    float32x2_t v36 = (__n128)v41;
  }
  int8x16_t v21 = *(void (**)(float32x2_t *__return_ptr, uint64_t))(**(void **)(v1 + 176) + 144);
  float v22 = swift_retain();
  v21(&v45, v22);
  swift_release();
  int8x16_t v23 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  float v24 = *(void (**)(float32x2_t *__return_ptr, uint64_t))(**(void **)(v1 + 176) + 144);
  float32x2_t v25 = swift_retain();
  v24(&v45, v25);
  swift_release();
  float v26 = v46;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v45 = v23;
  sub_1001222D0(v26);
  int8x16_t v7 = v45;
  if (!(*(void *)&v45 >> 62))
  {
    int32x2_t v27 = *(void *)((*(void *)&v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v27) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  swift_bridgeObjectRetain();
  int32x2_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    long long v16 = 0;
    goto LABEL_39;
  }
LABEL_21:
  if (v27 < 1)
  {
    __break(1u);
    goto LABEL_43;
  }
  swift_beginAccess();
  float32x2_t v28 = 0;
  int8x16_t v40 = 0;
  int32x2_t v29 = 900.0;
  do
  {
    while (1)
    {
      float32x2_t v30 = (*(void *)&v7 & 0xC000000000000001) != 0
          ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(*(void *)&v7 + 32 + 8 * v28);
      long long v16 = v30;
      sub_10011CDB0(v30, (uint64_t)v44);
      sub_100016FEC((uint64_t)v44, (uint64_t)&v45, &qword_1004CC348);
      if (sub_100121EC0((uint64_t)&v45) == 1) {
        break;
      }
      long long v31 = vsub_f32(*(float32x2_t *)(v1 + 464), v45);
      float32x2_t v32 = vaddv_f32(vmul_f32(v31, v31));
      if (v32 >= v29) {
        break;
      }
      float32x2_t v36 = (__n128)v46;
      float v37 = v45;
      int32x2_t v33 = v42;
      float v42 = v16;

      long long v38 = 0;
      int8x16_t v40 = v16;
      int32x2_t v29 = v32;
      if (v27 - 1 == v28++)
      {
        swift_bridgeObjectRelease();
        a1 = v35;
        goto LABEL_33;
      }
    }
    ++v28;
  }
  while (v27 != v28);
  swift_bridgeObjectRelease();
  a1 = v35;
  long long v16 = v40;
  if (v38) {
    goto LABEL_40;
  }
LABEL_33:
  __n128 v4 = sub_100121EDC(*(double *)&v37, v36);
  if (v16)
  {
    long long v17 = v37;
    goto LABEL_41;
  }
LABEL_43:
  __break(1u);
}

void sub_10011D754(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  void (*v38)(unint64_t *__return_ptr, uint64_t);
  uint64_t v39;
  BOOL v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  uint64_t v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  int v58;
  uint64_t v59;
  long long v60;
  long long v61;
  long long v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  char v68;
  void v69[2];
  long long v70;
  long long v71;
  long long v72;
  uint64_t v73;
  long long v74;
  _OWORD v75[4];
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  _OWORD v81[9];
  uint64_t v82;
  unsigned char v83[128];
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  unsigned __int8 v90;
  uint64_t v91;
  int v92;
  _OWORD v93[4];
  char v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  char v109;
  unint64_t aBlock[20];

  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  float v11 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  long long v15 = (char *)v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&__n128 v74 = sub_1000A3850();
  if (!(void)v74) {
    goto LABEL_29;
  }
  *(void *)&uint64_t v72 = v13;
  id v73 = a1;
  id v16 = [self standardUserDefaults];
  unsigned int v17 = [v16 kPEShowStats];

  if (v17)
  {
    MeasureCore.shared.unsafeMutableAddressor();
    swift_retain();
    MeasureCore.planeSelectionStats.getter();
    swift_release();
    sub_100016FEC((uint64_t)&v82, (uint64_t)v93, &qword_1004CC358);
    if ((v94 & 1) == 0)
    {
      char v95 = v93[0];
      id v96 = v93[1];
      id v97 = v93[2];
      id v98 = v93[3];
      sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
      *(void *)&uint64_t v71 = static OS_dispatch_queue.main.getter();
      long long v18 = (_OWORD *)swift_allocObject();
      long long v19 = v96;
      v18[1] = v95;
      void v18[2] = v19;
      long long v20 = v98;
      v18[3] = v97;
      v18[4] = v20;
      aBlock[4] = (unint64_t)sub_1001220B0;
      aBlock[5] = (unint64_t)v18;
      aBlock[0] = (unint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = (unint64_t)sub_100049AB4;
      aBlock[3] = (unint64_t)&unk_10048EEF0;
      *(void *)&uint64_t v70 = _Block_copy(aBlock);
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = (unint64_t)_swiftEmptyArrayStorage;
      v69[1] = sub_100121318((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100012894((uint64_t *)&unk_1004C68E0);
      sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      int8x16_t v21 = (const void *)v70;
      float v22 = (void *)v71;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v21);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v15, v12);
    }
  }
  int8x16_t v23 = *(void **)(v4 + 312);
  if (!v23)
  {
    uint64_t v35 = 0;
    int32x2_t v27 = (void *)v74;
    goto LABEL_24;
  }
  float v24 = *(uint64_t (**)(void))((swift_isaMask & *v23) + 0x238);
  float32x2_t v25 = v23;
  unint64_t v26 = v24();

  int32x2_t v27 = (void *)v74;
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v36) {
      goto LABEL_23;
    }
  }
  else if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_23;
  }
  if ((v26 & 0xC000000000000001) != 0)
  {
    float32x2_t v28 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    float32x2_t v28 = *(id *)(v26 + 32);
  }
  int32x2_t v29 = v28;
  uint64_t v30 = swift_bridgeObjectRelease();
  unint64_t v26 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v29) + 0x250))(v30);

  if (!(v26 >> 62))
  {
    if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_13;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v35 = 0;
    goto LABEL_24;
  }
LABEL_22:
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v37) {
    goto LABEL_23;
  }
LABEL_13:
  if ((v26 & 0xC000000000000001) != 0)
  {
    long long v31 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_16;
  }
  if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    long long v31 = *(id *)(v26 + 32);
LABEL_16:
    float32x2_t v32 = v31;
    uint64_t v33 = swift_bridgeObjectRelease();
    uint64_t v34 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v32) + 0x2C0))(v33);

    uint64_t v35 = (*(uint64_t (**)(void))(*(void *)v34 + 216))();
    swift_release();
LABEL_24:
    *(unsigned char *)(v4 + 321) = *(void *)(v4 + 312) == 0;
    long long v38 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v4 + 88) + 144);
    long long v39 = swift_retain();
    v38(aBlock, v39);
    swift_release();
    int8x16_t v40 = aBlock[0] == 0xC000000000000018;
    sub_10001F780(aBlock[0]);
    *(unsigned char *)(v4 + 322) = v40;
    *(void *)(v4 + 456) = v35;
    swift_retain();
    swift_release();
    MeasureCore.shared.unsafeMutableAddressor();
    int8x16_t v41 = *(_OWORD *)(v4 + 320);
    float v42 = *(_OWORD *)(v4 + 336);
    float32x2_t v43 = *(_OWORD *)(v4 + 368);
    v75[2] = *(_OWORD *)(v4 + 352);
    v75[3] = v43;
    float v44 = *(_OWORD *)(v4 + 336);
    long long v45 = *(_OWORD *)(v4 + 352);
    long long v46 = *(_OWORD *)(v4 + 320);
    v75[0] = v41;
    v75[1] = v44;
    long long v47 = *(_OWORD *)(v4 + 432);
    uint64_t v80 = *(_OWORD *)(v4 + 448);
    long long v48 = *(_OWORD *)(v4 + 400);
    long long v49 = *(_OWORD *)(v4 + 432);
    uint64_t v78 = *(_OWORD *)(v4 + 416);
    uint64_t v79 = v49;
    long long v50 = *(_OWORD *)(v4 + 368);
    long long v51 = *(_OWORD *)(v4 + 400);
    uint64_t v76 = *(_OWORD *)(v4 + 384);
    uint64_t v77 = v51;
    v81[6] = v78;
    v81[7] = v47;
    v81[8] = *(_OWORD *)(v4 + 448);
    v81[2] = v45;
    v81[3] = v50;
    v81[4] = v76;
    v81[5] = v48;
    v81[0] = v46;
    v81[1] = v42;
    nullsub_1(v81);
    sub_100016FEC((uint64_t)v81, (uint64_t)aBlock, &qword_1004CC350);
    swift_retain();
    sub_100122030((uint64_t)v75);
    MeasureCore.hitTest(screenPoint:frame:orientation:context:planeTypes:)();
    sub_100122068((uint64_t)v75);
    swift_release();
    sub_100016FEC((uint64_t)v83, (uint64_t)&v84, &qword_1004CEA20);
    long long v52 = v91;
    if (v91)
    {
      uint64_t v53 = v85;
      char v54 = v86;
      char v55 = v87;
      unsigned int v56 = v88;
      uint64_t v57 = v92;
      uint64_t v58 = *(unsigned __int8 *)(v91 + 48);
      __n128 v74 = v88;
      uint64_t v71 = v86;
      uint64_t v72 = v85;
      uint64_t v70 = v87;
      if (v58 != 4)
      {
        long long v59 = v90;
        id v60 = v89;
        *(_OWORD *)(v4 + 336) = v84;
        *(_OWORD *)(v4 + 352) = v53;
        *(_OWORD *)(v4 + 368) = v54;
        *(_OWORD *)(v4 + 384) = v55;
        *(_OWORD *)(v4 + 400) = v56;
        *(_OWORD *)(v4 + 416) = v60;
        *(void *)(v4 + 432) = v59;
        *(void *)(v4 + 440) = v52;
        *(_DWORD *)(v4 + 448) = v57;
        swift_retain();
        swift_release();
      }
      id v61 = *(_OWORD *)(v73 + 352);
      Swift::String v62 = *(_OWORD *)(v73 + 368);
      long long v64 = *(void *)(v73 + 384);
      long long v63 = *(void *)(v73 + 392);
      double v99 = *(_OWORD *)(v73 + 336);
      id v100 = v61;
      uint64_t v101 = v62;
      UIContentSizeCategory v102 = v64;
      uint64_t v103 = v63;
      uint64_t v104 = 0;
      char v105 = 0u;
      float v106 = 0u;
      uint64_t v107 = 0u;
      uint64_t v108 = 0u;
      id v109 = 1;
      type metadata accessor for WorldAnchor();
      swift_allocObject();
      swift_retain();
      uint64_t v65 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)();
      uint64_t v66 = a3;
      uint64_t v67 = static MeasureObjectState.default;
      sub_10005302C((uint64_t)v83);

      swift_release();
      id v68 = 0;
      goto LABEL_30;
    }

    swift_release();
LABEL_29:
    uint64_t v66 = 0.0;
    uint64_t v65 = 0;
    uint64_t v67 = 0;
    id v68 = 1;
LABEL_30:
    *(double *)a2 = v66;
    *(unsigned char *)(a2 + 8) = v68;
    *(void *)(a2 + 16) = v65;
    *(void *)(a2 + 24) = v67;
    *(unsigned char *)(a2 + 32) = v68;
    return;
  }
  __break(1u);
}

uint64_t sub_10011DF9C(uint64_t a1)
{
  sub_10011D754(a1, (uint64_t)&v8, *(double *)(v1 + 464));
  if (v9 & 1) != 0 || !v10 || (v12)
  {
    uint64_t v3 = *(uint64_t (**)(double *))(**(void **)(v1 + 128) + 400);
    swift_retain();
    uint64_t v4 = (void (*)(double *, void))v3(&v8);
    id v6 = *(void **)(v5 + 16);
    int8x16_t v7 = *(void **)(v5 + 24);
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;

    v4(&v8, 0);
    swift_release();
    return swift_release();
  }
  else
  {
    sub_10011CA48(v8, v10, 0, v11);
    return swift_release();
  }
}

void sub_10011E0AC(uint64_t *a1)
{
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  if (qword_1004F7FE0)
  {
    uint64_t v2 = *(void **)(qword_1004F7FE0 + 104);
    if (v2)
    {
      id v3 = v2;
      sub_1001FB714(a1);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10011E158(double *a1)
{
  void (*v47)(_OWORD *__return_ptr, uint64_t);
  uint64_t v48;
  unsigned __int8 (*v49)(void);
  void *v50;
  void *v51;
  uint64_t (*v52)(void);
  void *v53;
  uint64_t v54;
  void (**v55)(void);
  uint64_t (*v56)(void);
  void *v57;
  uint64_t v58;
  void (**v59)(void);
  void (**v60)(void);
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  double *v67;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v69;
  unint64_t v70;
  double *v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void (*v79)(long long *);
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  unsigned int v91;
  void *v92;
  uint64_t v93;
  void *v94;
  char *v95;
  void *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t (*v107)(void);
  char *v108;
  char *v109;
  void (**v110)(void);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(void);
  uint64_t v116;
  _OWORD v117[9];
  uint64_t v118;
  long long v119;
  long long v120;
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  long long v125;
  long long v126;
  long long v127;
  uint64_t v128;
  id v129[18];

  uint64_t v2 = (void *)v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v109 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v108 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100012894(&qword_1004CC308);
  char v111 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  char v112 = v12;
  float v113 = (uint64_t)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  float32x4_t v116 = (uint64_t)&v99 - v13;
  uint64_t v14 = (uint64_t *)SnapType.all.unsafeMutableAddressor();
  sub_1001160F0(*v14, a1);
  sub_100119100();
  long long v15 = *(void (***)(void))(v1 + 304);
  if (!v15) {
    return;
  }
  id v16 = *(void **)(v1 + 312);
  if (!v16) {
    return;
  }
  uint64_t v101 = v7;
  UIContentSizeCategory v102 = v5;
  uint64_t v103 = v4;
  unsigned int v17 = *(uint64_t (**)(void))((swift_isaMask & *v16) + 0x238);
  long long v18 = (void *)((swift_isaMask & *v16) + 568);
  id v110 = v15;
  long long v19 = v16;
  uint64_t v20 = v17();
  if ((v20 & 0xC000000000000001) != 0)
  {
    int8x16_t v21 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_64;
    }
    int8x16_t v21 = *(id *)(v20 + 32);
  }
  long long v18 = v21;
  uint64_t v22 = swift_bridgeObjectRelease();
  unsigned int v17 = (uint64_t (*)(void))&swift_isaMask;
  int8x16_t v23 = *(uint64_t (**)(void))((swift_isaMask & *v18) + 0x250);
  float v114 = (swift_isaMask & *v18) + 592;
  char v115 = v23;
  uint64_t v24 = ((uint64_t (*)(uint64_t))v23)(v22);
  id v100 = v8;
  if ((v24 & 0xC000000000000001) != 0)
  {
LABEL_64:
    float32x2_t v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if (!*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_66;
  }
  float32x2_t v25 = *(id *)(v24 + 32);
LABEL_9:
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  (*(void (**)(void))((*(void *)v17 & *v26) + 0xD8))(0);

  uint64_t v27 = v115();
  if ((v27 & 0xC000000000000001) != 0)
  {
LABEL_66:
    float32x2_t v28 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_12;
  }
  if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_68;
  }
  float32x2_t v28 = *(id *)(v27 + 40);
LABEL_12:
  int32x2_t v29 = v28;
  swift_bridgeObjectRelease();
  (*(void (**)(void))((*(void *)v17 & *v29) + 0xD8))(0);

  unint64_t v26 = v110;
  if ((*(unsigned char *)(v1 + 576) & 1) == 0)
  {
    unint64_t v31 = *(void *)(v1 + 560);
    BOOL v32 = *(void *)a1 >= v31;
    unint64_t v33 = *(void *)a1 - v31;
    if (!v32)
    {
      __break(1u);
LABEL_77:
      swift_once();
LABEL_24:
      sub_1001437CC(a1, v19);
LABEL_32:
      sub_100016B6C((id *)&v119);
      sub_100016B6C((id *)&v119);
      goto LABEL_33;
    }
    uint64_t v30 = (*(uint64_t (**)(double))((*(void *)v17 & *v18) + 0x2E8))((double)v33 / (a1[1]
                                                                                               - *(double *)(v1 + 568)));
  }
  uint64_t v34 = *(uint64_t (**)(void))((*(void *)v17 & *v26) + 0x2F0);
  float v106 = (*(void *)v17 & *v26) + 752;
  uint64_t v107 = v34;
  unint64_t v35 = ((uint64_t (*)(uint64_t))v34)(v30);
  char v105 = v19;
  if (v35 > 8 || ((1 << v35) & 0x1E9) == 0)
  {
    long long v50 = v26;
    sub_100123D44((uint64_t)v18, 0, v15, 1);

    goto LABEL_41;
  }
  type metadata accessor for WorldAnchor();
  uint64_t v36 = (void (**)(void))(*(void *)v17 & *v26);
  uint64_t v104 = v18;
  uint64_t v37 = v17;
  v36 += 88;
  long long v38 = *v36;
  long long v15 = v36;
  (*v36)();
  uint64_t v39 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
  uint64_t v40 = (*(uint64_t (**)(uint64_t))((*(void *)v37 & *v19) + 0x2C8))(v39);
  ((void (*)(uint64_t))v38)(v40);
  uint64_t v41 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
  uint64_t v42 = *(void *)v37;
  long long v18 = v104;
  (*(void (**)(uint64_t))((v42 & *v19) + 0x2E0))(v41);
  if ([self jasperAvailable])
  {
    float32x2_t v43 = v107;
    BOOL v44 = v107() == 6;
    uint64_t v45 = (*(uint64_t (**)(BOOL))((swift_isaMask & *v18) + 0x2A0))(v44);
    unint64_t v46 = ((uint64_t (*)(uint64_t))v43)(v45);
    if (v46 <= 8 && ((1 << v46) & 0x160) != 0)
    {
      long long v47 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)(v1 + 200) + 144);
      long long v48 = swift_retain();
      v47(v117, v48);
      swift_release();
      int8x16_t v125 = v117[6];
      float32x4_t v126 = v117[7];
      float32x4_t v127 = v117[8];
      int8x16_t v128 = v118;
      int8x16_t v121 = v117[2];
      int8x16_t v122 = v117[3];
      float32x4_t v123 = v117[4];
      float32x4_t v124 = v117[5];
      int8x16_t v119 = v117[0];
      float32x4_t v120 = v117[1];
      sub_100016B40((id *)&v119);
      sub_100016F3C((uint64_t)&v119);
      sub_100016FEC((uint64_t)&v119, (uint64_t)v129, (uint64_t *)&unk_1004CEA30);
      if (sub_100016B28((uint64_t *)v129) != 1)
      {
        long long v49 = *(unsigned __int8 (**)(void))((swift_isaMask & *(void *)v129[0]) + 0x258);
        a1 = (double *)v129[0];
        switch(v49())
        {
          case 1u:
            if (qword_1004C2C10 != -1) {
              swift_once();
            }
            sub_100143BD8(a1, v19);
            break;
          case 2u:
            goto LABEL_32;
          case 3u:
            if (qword_1004C2C10 != -1) {
              swift_once();
            }
            sub_100143318(a1, v19);
            break;
          default:
            if (qword_1004C2C10 == -1) {
              goto LABEL_24;
            }
            goto LABEL_77;
        }
        goto LABEL_32;
      }
    }
  }
LABEL_33:
  long long v51 = *(void **)(v1 + 224);
  if (!v51) {
    goto LABEL_41;
  }
  long long v52 = *(uint64_t (**)(void))((swift_isaMask & *v51) + 0xB8);
  uint64_t v53 = v51;
  char v54 = v52();
  long long v15 = v55;
  unsigned int v56 = *(uint64_t (**)(void))((swift_isaMask & *v18) + 0xB8);
  uint64_t v57 = v18;
  uint64_t v58 = v56();
  id v60 = v59;

  if (v54 == v58 && v15 == v60)
  {

    swift_bridgeObjectRelease_n();
LABEL_39:
    unint64_t v26 = v110;
    long long v19 = v105;
    goto LABEL_41;
  }
  id v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v61)
  {

    goto LABEL_39;
  }
  long long v19 = v105;
  (*(void (**)(void *))((swift_isaMask & *v53) + 0x330))(v105);

  unint64_t v26 = v110;
LABEL_41:
  sub_100012894((uint64_t *)&unk_1004CEA00);
  Swift::String v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_1003F8B20;
  *(void *)(v62 + 32) = v18;
  *(void *)&int8x16_t v119 = v62;
  specialized Array._endMutation()();
  type metadata accessor for WorldLine();
  sub_100121318(&qword_1004CC310, (void (*)(uint64_t))&type metadata accessor for WorldLine);
  long long v18 = v18;
  MeasurementEvent.init(name:results:)();
  if (qword_1004C29D8 != -1) {
LABEL_68:
  }
    swift_once();
  if (!qword_1004F7FE8)
  {
    __break(1u);
    JUMPOUT(0x10011F220);
  }
  long long v63 = *(void *)(qword_1004F7FE8 + qword_1004F84C0);
  if (!v63) {
    goto LABEL_48;
  }
  long long v64 = v113;
  sub_100121400(v116, v113);
  uint64_t v65 = (*(unsigned __int8 *)(v111 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80);
  uint64_t v66 = swift_allocObject();
  sub_100016FEC(v64, v66 + v65, &qword_1004CC308);
  long long v15 = (void (**)(void))(v63 + OBJC_IVAR____TtC7Measure15ResultsReporter_report);
  long long v19 = (void *)*(int *)(type metadata accessor for Report(0) + 20);
  uint64_t v67 = *(double **)((char *)v19 + (void)v15);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)((char *)v19 + (void)v15) = v67;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_76;
  }
  while (1)
  {
    uint64_t v70 = *((void *)v67 + 2);
    id v69 = *((void *)v67 + 3);
    if (v70 >= v69 >> 1)
    {
      uint64_t v67 = sub_10006ED78((double *)(v69 > 1), v70 + 1, 1, v67);
      *(void *)((char *)v19 + (void)v15) = v67;
    }
    long long v19 = v105;
    *((void *)v67 + 2) = v70 + 1;
    uint64_t v71 = &v67[2 * v70];
    *((void *)v71 + 4) = sub_1001215AC;
    *((void *)v71 + 5) = v66;
    sub_1000E8A7C();
    swift_release();
    unint64_t v26 = v110;
LABEL_48:
    uint64_t v72 = v115();
    if ((v72 & 0xC000000000000001) != 0)
    {
      id v73 = (double *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
        __break(1u);
LABEL_71:
        uint64_t v75 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_54:
        uint64_t v76 = v75;
        swift_bridgeObjectRelease();
        sub_100124540(v76);

        uint64_t v77 = (void *)v2[39];
        v2[39] = 0;

        uint64_t v78 = v2[11];
        *(void *)&int8x16_t v119 = 0xC000000000000008;
        uint64_t v79 = *(void (**)(long long *))(*(void *)v78 + 392);
        swift_retain();
        v79(&v119);
        swift_release();
        uint64_t v80 = v2[21];
        id v81 = *(uint64_t (**)(uint64_t))(*(void *)v80 + 200);
        uint64_t v67 = (double *)(*(void *)v80 + 200);
        uint64_t v82 = swift_retain();
        uint64_t v83 = v81(v82);
        swift_release();
        (*(void (**)(unsigned char *(*)(unsigned char *), void))(*(void *)v83 + 280))(sub_100029EB0, 0);
        swift_release();
        if (qword_1004C2C10 == -1) {
          goto LABEL_55;
        }
        goto LABEL_73;
      }
      id v73 = (double *)*(id *)(v72 + 40);
    }
    uint64_t v67 = v73;
    swift_bridgeObjectRelease();
    sub_1001231B8(v67);

    __n128 v74 = v115();
    if ((v74 & 0xC000000000000001) != 0) {
      goto LABEL_71;
    }
    if (*(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      uint64_t v75 = *(id *)(v74 + 40);
      goto LABEL_54;
    }
    __break(1u);
LABEL_73:
    swift_once();
LABEL_55:
    uint64_t v66 = qword_1004F8458;
    uint64_t v84 = sub_100143FE4(v18, v19);
    char v85 = ((uint64_t (*)(uint64_t))v115)(v84);
    if ((v85 & 0xC000000000000001) != 0) {
      break;
    }
    if (*(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      uint64_t v86 = *(id *)(v85 + 40);
      goto LABEL_58;
    }
    __break(1u);
LABEL_76:
    uint64_t v67 = sub_10006ED78(0, *((void *)v67 + 2) + 1, 1, v67);
    *(void *)((char *)v19 + (void)v15) = v67;
  }
  uint64_t v86 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_58:
  uint64_t v87 = v86;
  uint64_t v88 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t))v107)(v88);
  uint64_t v89 = v66 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
  swift_beginAccess();
  *(double *)(v89 + 64) = *(double *)(v89 + 64) + 1.0;

  uint64_t v90 = [self standardUserDefaults];
  uint64_t v91 = [v90 kPEShowAccuracy];

  if (v91)
  {
    sub_10001C99C(0, (unint64_t *)&qword_1004C7F10);
    uint64_t v92 = (void *)static OS_dispatch_queue.main.getter();
    id v93 = swift_allocObject();
    *(void *)(v93 + 16) = v18;
    *(void *)&int8x16_t v121 = sub_1001213F8;
    *((void *)&v121 + 1) = v93;
    *(void *)&int8x16_t v119 = _NSConcreteStackBlock;
    *((void *)&v119 + 1) = 1107296256;
    *(void *)&float32x4_t v120 = sub_100049AB4;
    *((void *)&v120 + 1) = &unk_10048EDB0;
    uint64_t v94 = _Block_copy(&v119);
    char v115 = v18;
    swift_release();
    char v95 = v108;
    static DispatchQoS.unspecified.getter();
    *(void *)&int8x16_t v119 = _swiftEmptyArrayStorage;
    sub_100121318((unint64_t *)&qword_1004C5CA0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
    id v96 = v26;
    id v97 = v109;
    id v98 = v103;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v94);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v97, v98);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v95, v101);
    sub_100121360(v116);
  }
  else
  {
    sub_100121360(v116);
  }
}

void sub_10011F230(uint64_t *a1)
{
  void (*v7)(Swift::String *__return_ptr, uint64_t);
  uint64_t v8;
  void *object;
  long long v10;
  void (*v11)(void);
  objc_class *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t (*)(), uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t (*)(), uint64_t);
  void *v27;
  void (*v28)(uint64_t);
  void *v29;
  void (*v30)(uint64_t (*)(void), void);
  void *v31;
  void (*v32)(uint64_t (*)(), void);
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(BOOL (*)(), uint64_t);
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t (*)(), uint64_t);
  void *v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t (*v44)(void);
  void *v45;
  unint64_t v46;
  Swift::String v47;
  char v48;
  uint64_t (*v49)(Swift::String *);
  void (*v50)(Swift::String *, void);
  uint64_t v51;
  void *v52;
  void *v53;
  unint64_t v54;
  Swift::String v55;
  char v56;
  void *v57;
  void *v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t (*v62)(void);
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  unint64_t v69;
  void (*v70)(_OWORD *__return_ptr, uint64_t);
  uint64_t v71;
  void *v72;
  unsigned __int8 (*v73)(id);
  uint64_t (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t (*v84)(void);
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  Swift::String v92;
  uint64_t v93;
  void (*v94)(Swift::String *);
  void *v95;
  uint64_t v96;
  void (*v97)(void);
  id v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t (*v102)(Swift::String *);
  void (*v103)(Swift::String *, void);
  uint64_t v104;
  void *v105;
  void *v106;
  uint64_t *v107;
  id v108;
  void *v109;
  void *v110;
  void *v111;
  _OWORD v112[9];
  uint64_t v113;
  Swift::String v114;
  long long v115;
  long long v116;
  long long v117;
  long long v118;
  long long v119;
  long long v120;
  long long v121;
  long long v122;
  uint64_t v123;
  uint64_t v124[18];

  uint64_t v2 = v1;
  uint64_t v4 = *(void **)(v1 + 304);
  id v5 = v4;
  uint64_t v6 = (uint64_t *)SnapType.all.unsafeMutableAddressor();
  sub_1001160F0(*v6, a1);
  sub_100119100();
  uint64_t v7 = *(void (**)(Swift::String *__return_ptr, uint64_t))(**(void **)(v1 + 128) + 144);
  uint64_t v8 = swift_retain();
  v7(&v114, v8);
  swift_release();
  object = v114._object;
  uint64_t v10 = v115;

  if (!*((void *)&v10 + 1))
  {

    return;
  }
  char v111 = v5;
  uint64_t v107 = a1;
  type metadata accessor for WorldAnchor();
  id v110 = v4;
  uint64_t v11 = *(void (**)(void))((swift_isaMask & **((void **)&v10 + 1)) + 0x2C0);
  v11();
  WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
  uint64_t v12 = (objc_class *)type metadata accessor for WorldPoint();
  uint64_t v13 = objc_allocWithZone(v12);
  uint64_t v14 = (void *)WorldPoint.init(anchor:type:state:)();
  v11();
  WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
  long long v15 = objc_allocWithZone(v12);
  id v16 = (void *)WorldPoint.init(anchor:type:state:)();
  unsigned int v17 = objc_allocWithZone((Class)type metadata accessor for WorldLine());
  long long v18 = v14;
  uint64_t v108 = v16;
  id v109 = v18;
  long long v19 = (void *)WorldLine.init(end1:end2:initialState:)();
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  int8x16_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  *(void *)(v21 + 24) = v20;
  uint64_t v22 = *(void (**)(uint64_t (*)(), uint64_t))((swift_isaMask & *v19) + 0x150);
  int8x16_t v23 = v19;
  swift_retain();
  v22(sub_100121678, v21);

  swift_release();
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  float32x2_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v23;
  *(void *)(v25 + 24) = v24;
  unint64_t v26 = *(void (**)(uint64_t (*)(), uint64_t))((swift_isaMask & *v23) + 0x168);
  uint64_t v27 = v23;
  swift_retain();
  v26(sub_1001216C4, v25);
  swift_release();
  float32x2_t v28 = *(void (**)(uint64_t))((swift_isaMask & *v27) + 0xD8);
  int32x2_t v29 = v27;
  v28(3);

  uint64_t v30 = *(void (**)(uint64_t (*)(void), void))((swift_isaMask & *v29) + 0x138);
  unint64_t v31 = v29;
  v30(nullsub_1, 0);

  BOOL v32 = *(void (**)(uint64_t (*)(), void))((swift_isaMask & *v31) + 0x108);
  unint64_t v33 = v31;
  v32(variable initialization expression of SCNPatchDebugger.SKDebugRenderer.renderEmboss, 0);

  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  unint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v34;
  *(void *)(v35 + 24) = v33;
  uint64_t v36 = *(void (**)(BOOL (*)(), uint64_t))((swift_isaMask & *v33) + 0x120);
  uint64_t v37 = v33;
  swift_retain();
  v36(sub_1001216D0, v35);
  swift_release();
  long long v38 = swift_allocObject();
  swift_weakInit();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v38;
  *(void *)(v39 + 24) = v37;
  uint64_t v40 = *(void (**)(uint64_t (*)(), uint64_t))((swift_isaMask & *v37) + 0x180);
  uint64_t v41 = v37;
  swift_retain();
  v40(sub_1001216DC, v39);
  uint64_t v42 = (uint64_t (*)(void))&swift_isaMask;

  float32x2_t v43 = swift_release();
  if (v110)
  {
    BOOL v44 = *(uint64_t (**)(void))((swift_isaMask & *v111) + 0x2F0);
    uint64_t v45 = v111;
    if (v44() == 1 || v44() == 2)
    {
      unint64_t v46 = (*(uint64_t (**)(void))((swift_isaMask & **((void **)&v10 + 1)) + 0x2F0))();
      if (v46 <= 8 && ((1 << v46) & 0x1E9) != 0)
      {
        if (qword_1004C2B20 != -1) {
          swift_once();
        }
        v47._uint64_t countAndFlagsBits = 0xD000000000000020;
        v47._object = (void *)0x8000000100426DB0;
        Log.default(_:isPrivate:)(v47, 0);
        (*(void (**)(void))((swift_isaMask & **((void **)&v10 + 1)) + 0xD8))(0);
        (*(void (**)(uint64_t))((swift_isaMask & *v41) + 0x2D0))(1);
        (*(void (**)(void *))((swift_isaMask & *v41) + 0x318))(v45);
        long long v48 = sub_1001238E0(v41, 1);
        long long v49 = *(uint64_t (**)(Swift::String *))(**(void **)(v2 + 128) + 400);
        swift_retain();
        long long v50 = (void (*)(Swift::String *, void))v49(&v114);
        long long v52 = *(void **)(v51 + 16);
        uint64_t v53 = *(void **)(v51 + 24);
        *(void *)(v51 + 16) = 0;
        *(void *)(v51 + 24) = 0;

        uint64_t v42 = (uint64_t (*)(void))&swift_isaMask;
        v50(&v114, 0);

        goto LABEL_10;
      }
    }
  }
  char v54 = (*(uint64_t (**)(uint64_t))((swift_isaMask & **((void **)&v10 + 1)) + 0x2F0))(v43);
  if (v54 <= 8 && ((1 << v54) & 0x1E9) != 0)
  {
    if (*(unsigned char *)(*(void *)(v2 + 72) + 152)) {
      goto LABEL_19;
    }
    if (qword_1004C2B20 != -1) {
      goto LABEL_61;
    }
    while (1)
    {
      v55._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v55._object = (void *)0x8000000100426D90;
      Log.default(_:isPrivate:)(v55, 0);
LABEL_19:
      (*(void (**)(uint64_t))((*(void *)v42 & *v41) + 0x2D0))(1);
      unsigned int v56 = sub_1001238E0(v41, 1);
      uint64_t v57 = *(void **)(v2 + 224);
      if (!v57) {
        break;
      }
      uint64_t v42 = *(uint64_t (**)(void))((*(void *)v42 & *v41) + 0x250);
      uint64_t v58 = v57;
      long long v59 = v42();
      if ((v59 & 0xC000000000000001) != 0)
      {
        id v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_23;
      }
      if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v60 = *(id *)(v59 + 32);
LABEL_23:
        id v61 = v60;
        uint64_t v42 = (uint64_t (*)(void))&swift_isaMask;
        swift_bridgeObjectRelease();
        (*(void (**)(void *))((swift_isaMask & *v58) + 0x330))(v61);

        break;
      }
      __break(1u);
LABEL_61:
      swift_once();
    }
    Swift::String v62 = *(uint64_t (**)(void))((*(void *)v42 & *v41) + 0x250);
    long long v63 = v62();
    if ((v63 & 0xC000000000000001) != 0)
    {
      long long v64 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_54;
      }
      long long v64 = *(id *)(v63 + 32);
    }
    uint64_t v65 = v64;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((*(void *)v42 & *v65) + 0xD8))(6);

    uint64_t v66 = v62();
    if ((v66 & 0xC000000000000001) == 0)
    {
      if (*(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
        __break(1u);
LABEL_56:
        uint64_t v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_43;
      }
      uint64_t v67 = *(id *)(v66 + 40);
      goto LABEL_30;
    }
LABEL_54:
    uint64_t v67 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_30:
    id v68 = v67;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((*(void *)v42 & *v68) + 0xD8))(3);

    if ((v56 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
  if (qword_1004C2B20 != -1) {
    swift_once();
  }
  v101._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v101._object = (void *)0x8000000100426D50;
  Log.default(_:isPrivate:)(v101, 0);
  (*(void (**)(void))((swift_isaMask & **((void **)&v10 + 1)) + 0xD8))(0);
  (*(void (**)(uint64_t))((swift_isaMask & *v41) + 0x2D0))(1);
  (*(void (**)(void))((swift_isaMask & *v41) + 0x318))(*((void *)&v10 + 1));
  long long v48 = sub_1001238E0(v41, 1);
  UIContentSizeCategory v102 = *(uint64_t (**)(Swift::String *))(**(void **)(v2 + 128) + 400);
  swift_retain();
  uint64_t v103 = (void (*)(Swift::String *, void))v102(&v114);
  char v105 = *(void **)(v104 + 16);
  float v106 = *(void **)(v104 + 24);
  *(void *)(v104 + 16) = 0;
  *(void *)(v104 + 24) = 0;

  uint64_t v42 = (uint64_t (*)(void))&swift_isaMask;
  v103(&v114, 0);
LABEL_10:
  swift_release();
  if ((v48 & 1) == 0)
  {
LABEL_11:

    return;
  }
LABEL_31:
  if ([self jasperAvailable])
  {
    id v69 = (*(uint64_t (**)(void))((*(void *)v42 & **((void **)&v10 + 1)) + 0x2F0))();
    if (v69 <= 8 && ((1 << v69) & 0x160) != 0)
    {
      uint64_t v70 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)(v2 + 200) + 144);
      uint64_t v71 = swift_retain();
      v70(v112, v71);
      swift_release();
      float32x4_t v120 = v112[6];
      int8x16_t v121 = v112[7];
      int8x16_t v122 = v112[8];
      float32x4_t v123 = v113;
      float32x4_t v116 = v112[2];
      int8x16_t v117 = v112[3];
      char v118 = v112[4];
      int8x16_t v119 = v112[5];
      float v114 = (Swift::String)v112[0];
      char v115 = v112[1];
      sub_100016B40((id *)&v114);
      sub_100016F3C((uint64_t)&v114);
      sub_100016FEC((uint64_t)&v114, (uint64_t)v124, (uint64_t *)&unk_1004CEA30);
      if (sub_100016B28(v124) != 1)
      {
        uint64_t v72 = (void *)v124[0];
        id v73 = *(unsigned __int8 (**)(id))((swift_isaMask & *(void *)v124[0]) + 0x258);
        sub_100016FEC((uint64_t)&v114, (uint64_t)v112, (uint64_t *)&unk_1004CEA30);
        if (!v73(*(id *)&v112[0]))
        {
          if (qword_1004C2C10 != -1) {
            swift_once();
          }
          sub_100142E78(v72, *((uint64_t *)&v10 + 1));
        }
        sub_100016B6C((id *)&v114);
        sub_100016B6C((id *)&v114);
      }
    }
  }
  __n128 v74 = *(uint64_t (**)(uint64_t))(**(void **)(v2 + 168) + 200);
  uint64_t v75 = swift_retain();
  uint64_t v42 = (uint64_t (*)(void))&swift_isaMask;
  uint64_t v76 = v74(v75);
  swift_release();
  (*(void (**)(unsigned char *(*)(unsigned char *), void))(*(void *)v76 + 280))(sub_10002BA20, 0);
  uint64_t v77 = swift_release();
  uint64_t v78 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v41) + 0x250))(v77);
  if ((v78 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
LABEL_58:
    swift_once();
    goto LABEL_45;
  }
  uint64_t v79 = *(id *)(v78 + 40);
LABEL_43:
  uint64_t v80 = v79;
  swift_bridgeObjectRelease();
  id v81 = *(void **)(v2 + 312);
  *(void *)(v2 + 312) = v80;

  uint64_t v82 = *(void **)(v2 + 312);
  if (!v82)
  {
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v83 = v82;
  sub_100122D4C(v83);

  if (qword_1004C2B20 != -1) {
    goto LABEL_58;
  }
LABEL_45:
  v114._uint64_t countAndFlagsBits = 0;
  v114._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v114._uint64_t countAndFlagsBits = 0xD000000000000010;
  v114._object = (void *)0x8000000100426D70;
  uint64_t v84 = *(uint64_t (**)(void))((*(void *)v42 & *v41) + 0xB8);
  char v85 = v41;
  uint64_t v86 = v84();
  uint64_t v88 = v87;

  v89._uint64_t countAndFlagsBits = v86;
  v89._object = v88;
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._uint64_t countAndFlagsBits = 0x6D61726620746120;
  v90._object = (void *)0xEB00000000203A65;
  String.append(_:)(v90);
  uint64_t v91 = *v107;
  *(void *)&v112[0] = *v107;
  v92._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  Log.default(_:isPrivate:)(v114, 0);
  swift_bridgeObjectRelease();
  id v93 = *(void *)(v2 + 88);
  v114._uint64_t countAndFlagsBits = 0xC000000000000010;
  uint64_t v94 = *(void (**)(Swift::String *))(*(void *)v93 + 392);
  swift_retain();
  v94(&v114);
  swift_release();
  if (qword_1004C2C10 != -1) {
    swift_once();
  }
  char v95 = *(void **)(v2 + 312);
  if (v95)
  {
    id v96 = qword_1004F8458;
    id v97 = *(void (**)(void))((swift_isaMask & **((void **)&v10 + 1)) + 0x2F0);
    id v98 = v95;
    v97();

    double v99 = v96 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
    swift_beginAccess();
    *(double *)(v99 + 64) = *(double *)(v99 + 64) + 1.0;

    id v100 = v107[1];
    *(void *)(v2 + 560) = v91;
    *(void *)(v2 + 568) = v100;
    *(unsigned char *)(v2 + 576) = 0;
    return;
  }
LABEL_63:
  __break(1u);
}

uint64_t sub_100120554(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
  if (!v1() || (uint64_t result = v1(), result == 2))
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_retain();
      swift_release();
      sub_100123378();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10012061C(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
  if (result == 9)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_retain();
      swift_release();
      sub_100123380();
      return swift_release();
    }
  }
  return result;
}

BOOL sub_1001206CC(uint64_t a1, void *a2)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    BOOL v3 = sub_100120754(a2);
    swift_release();
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL sub_100120754(void *a1)
{
  void (*v11)(void *__return_ptr, uint64_t);
  uint64_t v12;
  void *v13;
  void *v14;
  void v16[64];
  void __dst[64];

  uint64_t v2 = v1;
  uint64_t v4 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
  if (v4() != 5 && v4()) {
    return 0;
  }
  float v6 = *(float *)(v2 + 472);
  uint64_t v7 = CGPoint.floats.getter();
  float32x2_t v9 = v8;
  __dst[0] = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x250))(v7);
  sub_100012894(&qword_1004CC320);
  sub_10002179C(&qword_1004CC328, &qword_1004CC320);
  uint64_t v10 = RangeReplaceableCollection<>.idToObjectMap.getter();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v2 + 144) + 144);
  uint64_t v12 = swift_retain();
  v11(v16, v12);
  swift_release();
  memcpy(__dst, v16, sizeof(__dst));
  sub_1000A6410(v10, v9, v6);
  uint64_t v14 = v13;
  sub_100016F7C((uint64_t)__dst);
  swift_bridgeObjectRelease();
  BOOL v5 = v14 != 0;

  return v5;
}

uint64_t sub_100120930(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    uint64_t v4 = swift_release();
    uint64_t v5 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0xB8))(v4);
    sub_1001236F8(v5, v6);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1001209EC(void *a1)
{
  if (qword_1004C29D8 != -1) {
    swift_once();
  }
  if (qword_1004F7FE0)
  {
    uint64_t v2 = *(void **)(qword_1004F7FE0 + 112);
    if (v2)
    {
      id v3 = v2;
      sub_100057B20(a1);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100120A98(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = &swift_isaMask;
  uint64_t v6 = *(uint64_t (**)(void))((swift_isaMask & *a2) + 0x238);
  unint64_t v7 = v6();
  if (v7 >> 62) {
LABEL_58:
  }
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  else {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v8 <= 1)
  {
    float32x2_t v9 = (void *)(*(uint64_t (**)(void))((*v5 & *a2) + 0x250))();

    if (!v9)
    {
LABEL_62:
      unsigned int v56 = *(void **)(v3 + 312);
      *(void *)(v3 + 312) = a2;

      uint64_t v57 = a2;
      return;
    }
  }
  type metadata accessor for WorldAnchor();
  (*(void (**)(void))((*v5 & *a2) + 0x2C0))();
  WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
  (*(void (**)(void))((*v5 & *a2) + 0x2F0))();
  uint64_t v10 = v5;
  (*(void (**)(void))((*v5 & *a2) + 0xD0))();
  id v11 = objc_allocWithZone((Class)type metadata accessor for WorldPoint());
  long long v63 = (void *)WorldPoint.init(anchor:type:state:)();
  if (sub_100124ABC(v63, 1))
  {
    uint64_t v12 = (void *)(*(uint64_t (**)(void))((*v5 & *a2) + 0x250))();
    uint64_t v58 = v3;
    if (!v12)
    {
LABEL_19:
      unint64_t v21 = v6();
      unint64_t v22 = v21;
      if (v21 >> 62) {
        goto LABEL_60;
      }
      uint64_t v23 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      for (uint64_t i = v63; v23; uint64_t i = v63)
      {
        float32x2_t v25 = *(uint64_t (**)(void))((*v5 & *(void *)a1) + 0xB8);
        if (v23 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v3 = 0;
        id v61 = a1;
        long long v59 = *(uint64_t (**)(void))((*v5 & *(void *)a1) + 0xB8);
        uint64_t v60 = v23;
        while (1)
        {
          if ((v22 & 0xC000000000000001) != 0) {
            unint64_t v26 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            unint64_t v26 = *(id *)(v22 + 8 * v3 + 32);
          }
          uint64_t v27 = v26;
          uint64_t v28 = (*(uint64_t (**)(void))((*v5 & *v26) + 0xB8))();
          uint64_t v30 = v29;
          if (v28 == v25() && v30 == v31)
          {

            swift_bridgeObjectRelease_n();
            goto LABEL_24;
          }
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v34 = swift_bridgeObjectRelease();
          if (v33)
          {

            goto LABEL_24;
          }
          uint64_t v6 = *(uint64_t (**)(void))((*v5 & *v27) + 0x250);
          uint64_t v35 = ((uint64_t (*)(uint64_t))v6)(v34);
          if ((v35 & 0xC000000000000001) != 0)
          {
            uint64_t v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_58;
            }
            uint64_t v36 = *(id *)(v35 + 32);
          }
          uint64_t v37 = v36;
          uint64_t v38 = swift_bridgeObjectRelease();
          uint64_t v39 = (*(uint64_t (**)(uint64_t))((*v5 & *v37) + 0xB8))(v38);
          uint64_t v41 = v40;

          a1 = *(uint64_t (**)(void))((*v5 & *a2) + 0xB8);
          uint64_t v5 = (void *)((*v5 & *a2) + 184);
          if (v39 == a1() && v41 == v42)
          {
            swift_bridgeObjectRelease_n();
LABEL_52:
            uint64_t v5 = &swift_isaMask;
            (*(void (**)(void *))((swift_isaMask & *v27) + 0x318))(v63);

            uint64_t v23 = v60;
            a1 = v61;
            float32x2_t v25 = v59;
            goto LABEL_24;
          }
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v45 = swift_bridgeObjectRelease();
          if (v44) {
            goto LABEL_52;
          }
          uint64_t v46 = ((uint64_t (*)(uint64_t))v6)(v45);
          if ((v46 & 0xC000000000000001) != 0)
          {
            long long v47 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_45;
          }
          if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
            break;
          }
          long long v47 = *(id *)(v46 + 40);
LABEL_45:
          long long v48 = v47;
          uint64_t v49 = swift_bridgeObjectRelease();
          uint64_t v50 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v48) + 0xB8))(v49);
          uint64_t v52 = v51;

          BOOL v54 = v50 == a1() && v52 == v53;
          float32x2_t v25 = v59;
          uint64_t v23 = v60;
          if (v54)
          {
            swift_bridgeObjectRelease_n();
            a1 = v61;
LABEL_54:
            uint64_t v5 = &swift_isaMask;
            (*(void (**)(void *))((swift_isaMask & *v27) + 0x320))(v63);

            goto LABEL_24;
          }
          char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v61;
          if (v55) {
            goto LABEL_54;
          }

          uint64_t v5 = &swift_isaMask;
LABEL_24:
          ++v3;
          uint64_t i = v63;
          if (v23 == v3) {
            goto LABEL_61;
          }
        }
        __break(1u);
LABEL_60:
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      }
LABEL_61:

      swift_bridgeObjectRelease();
      uint64_t v3 = v58;
      goto LABEL_62;
    }
    uint64_t v13 = v12;
    uint64_t v14 = (void *)(*(uint64_t (**)(void))((*v5 & *v12) + 0x268))();
    uint64_t v15 = (*(uint64_t (**)(void))((*v5 & *v14) + 0xB8))();
    uint64_t v17 = v16;

    if (v15 == (*(uint64_t (**)(void))((*v10 & *a2) + 0xB8))() && v17 == v18)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v5 = &swift_isaMask;
    }
    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = &swift_isaMask;
      if ((v20 & 1) == 0) {
        goto LABEL_18;
      }
    }
    (*(void (**)(void *))((swift_isaMask & *v13) + 0x328))(v63);
LABEL_18:

    goto LABEL_19;
  }
}

double sub_100121304(uint64_t a1)
{
  double result = *(double *)(v1 + 464);
  int v3 = *(_DWORD *)(v1 + 472);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_100121318(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100121360(uint64_t a1)
{
  uint64_t v2 = sub_100012894(&qword_1004CC308);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001213C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001213F8()
{
  sub_1001209EC(*(void **)(v0 + 16));
}

uint64_t sub_100121400(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012894(&qword_1004CC308);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100121468()
{
  uint64_t v1 = (int *)(sub_100012894(&qword_1004CC308) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + v1[11];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1001215AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100012894(&qword_1004CC308) - 8);
  return sub_100113A28(a1, v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), &qword_1004CC308, &qword_1004CC318);
}

uint64_t sub_10012163C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100121678()
{
  return sub_100120554(*(void **)(v0 + 16));
}

uint64_t sub_100121684()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001216C4()
{
  return sub_10012061C(*(void **)(v0 + 16));
}

BOOL sub_1001216D0()
{
  return sub_1001206CC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001216DC()
{
  return sub_100120930(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001216E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100012894(&qword_1004C6AF8);
  swift_allocObject();
  swift_retain();
  *(void *)(v2 + 64) = Synchronized.init(wrappedValue:)();
  sub_100012894(&qword_1004CC370);
  swift_getKeyPath();
  *(void *)(v2 + 88) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = sub_100012894(&qword_1004CA010);
  if (qword_1004C2E30 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1004F8630;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 272);
  swift_retain();
  *(void *)(v3 + 96) = v9(KeyPath, v8);
  sub_100012894(&qword_1004CC378);
  swift_getKeyPath();
  *(void *)(v3 + 104) = MutableStateValue.__allocating_init(_:_:)();
  sub_100012894(&qword_1004CC380);
  swift_getKeyPath();
  *(void *)(v3 + 112) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = sub_100012894((uint64_t *)&unk_1004CF6F0);
  uint64_t v12 = qword_1004F8630;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 272);
  swift_retain();
  *(void *)(v3 + 120) = v13(v10, v12);
  sub_100012894(&qword_1004CC388);
  swift_getKeyPath();
  *(void *)(v3 + 128) = MutableStateValue.__allocating_init(_:_:)();
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = sub_100012894((uint64_t *)&unk_1004C6A80);
  uint64_t v16 = qword_1004F8630;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 272);
  swift_retain();
  *(void *)(v3 + 136) = v17(v14, v16);
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = sub_100012894(&qword_1004C3F10);
  uint64_t v20 = qword_1004F8630;
  unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 272);
  swift_retain();
  *(void *)(v3 + 144) = v21(v18, v20);
  uint64_t v22 = swift_getKeyPath();
  uint64_t v23 = sub_100012894((uint64_t *)&unk_1004C6A90);
  uint64_t v24 = qword_1004F8630;
  float32x2_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 272);
  swift_retain();
  *(void *)(v3 + 152) = v25(v22, v24);
  uint64_t v26 = sub_100012894(&qword_1004C6AA0);
  uint64_t v27 = swift_getKeyPath();
  uint64_t v28 = qword_1004F8630;
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 272);
  swift_retain();
  *(void *)(v3 + 160) = v29(v27, v28);
  uint64_t v30 = swift_getKeyPath();
  uint64_t v31 = sub_100012894((uint64_t *)&unk_1004CF330);
  uint64_t v32 = qword_1004F8630;
  char v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 272);
  swift_retain();
  *(void *)(v3 + 168) = v33(v30, v32);
  uint64_t v34 = swift_getKeyPath();
  uint64_t v35 = sub_100012894(&qword_1004CB4A0);
  uint64_t v36 = qword_1004F8630;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 272);
  swift_retain();
  *(void *)(v3 + 176) = v37(v34, v36);
  uint64_t v38 = sub_100012894(&qword_1004CBF28);
  uint64_t v39 = swift_getKeyPath();
  uint64_t v40 = qword_1004F8630;
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 272);
  swift_retain();
  *(void *)(v3 + 184) = v41(v39, v40);
  uint64_t v42 = swift_getKeyPath();
  uint64_t v43 = sub_100012894(&qword_1004CA908);
  uint64_t v44 = qword_1004F8630;
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 272);
  swift_retain();
  *(void *)(v3 + 192) = v45(v42, v44);
  sub_100012894(&qword_1004CC390);
  swift_getKeyPath();
  *(void *)(v3 + 200) = MutableStateValue.__allocating_init(_:_:)();
  *(unsigned char *)(v3 + 208) = 0;
  *(_OWORD *)(v3 + 216) = 0u;
  simd_float4 v46 = matrix_identity_float4x4.columns[1];
  simd_float4 v47 = matrix_identity_float4x4.columns[2];
  simd_float4 v48 = matrix_identity_float4x4.columns[3];
  *(simd_float4 *)(v3 + 240) = matrix_identity_float4x4.columns[0];
  *(simd_float4 *)(v3 + 256) = v46;
  *(simd_float4 *)(v3 + 272) = v47;
  *(simd_float4 *)(v3 + 288) = v48;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_DWORD *)(v3 + 319) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_DWORD *)(v3 + 448) = 0;
  *(_OWORD *)(v3 + 456) = 0u;
  *(_DWORD *)(v3 + 472) = 1106247680;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 512) = xmmword_1003FB9B0;
  id v49 = [self standardUserDefaults];
  Defaults.snapReticleToEdges.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  NSString v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v43) = [v49 BOOLForKey:v50];

  *(unsigned char *)(v3 + 528) = v43;
  *(void *)(v3 + 536) = 0xC000000000000000;
  *(unsigned char *)(v3 + 544) = 3;
  sub_100012894(&qword_1004C6920);
  swift_allocObject();
  *(void *)(v3 + 552) = PassthroughSubject.init()();
  *(_OWORD *)(v3 + 560) = 0u;
  *(unsigned char *)(v3 + 576) = 1;
  *(void *)(v3 + 72) = a2;
  *(void *)(v3 + 80) = a1;
  swift_retain();
  swift_retain();
  swift_release();
  return StateObserver.init(configuration:)();
}

uint64_t sub_100121CF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100121D60(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double sub_100121DC0(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void sub_100121DE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (a19)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100121E44(uint64_t a1)
{
  return a1;
}

uint64_t sub_100121EA8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 144);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_100121EC0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

__n128 sub_100121EDC(double a1, __n128 a2)
{
  return a2;
}

uint64_t sub_100122004(uint64_t result)
{
  *(unsigned char *)(result + 144) = 0;
  return result;
}

double sub_10012200C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

uint64_t sub_100122030(uint64_t a1)
{
  return a1;
}

uint64_t sub_100122068(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001220A0()
{
  return _swift_deallocObject(v0, 80, 7);
}

void sub_1001220B0()
{
  sub_10011E0AC((uint64_t *)(v0 + 16));
}

void *sub_1001220B8(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

id sub_100122124(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (a19)
  {
    id v20 = result;
    id v19 = a18;
    swift_bridgeObjectRetain();
    return v20;
  }
  return result;
}

void **sub_100122188(void **a1)
{
  uint64_t v2 = *a1;
  id v3 = a1[17];
  swift_bridgeObjectRetain();
  id v4 = v2;
  return a1;
}

uint64_t sub_1001221CC(unsigned __int8 *a1)
{
  return sub_10011A394(a1, v1);
}

uint64_t sub_1001221D8(void *a1)
{
  return sub_1001D758C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10012221C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10012225C(void **a1)
{
  sub_1001160A4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100122264()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001222D0(unint64_t a1)
{
  return sub_100122754(a1, (unint64_t *)&type metadata accessor for WorldLineGuide, &qword_1004CC520, &qword_1004CC518, (uint64_t *)sub_10015C998);
}

void *sub_10012230C(void *result)
{
  uint64_t v2 = result[2];
  id v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  double result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  double result = sub_10006E398(result, v10, 1, v3);
  id v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_100012894(&qword_1004C69F8);
  double result = (void *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    double result = (void *)swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = v3[2];
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100122408(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10012A858(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1001225D4(unint64_t a1)
{
  return sub_100122754(a1, (unint64_t *)&type metadata accessor for MeasureObject, &qword_1004CC558, &qword_1004C4358, (uint64_t *)sub_10015CA04);
}

uint64_t sub_100122610(unint64_t a1)
{
  return sub_100122A74(a1, sub_10012ABFC);
}

uint64_t sub_100122628(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_10006F3E4((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100122718(unint64_t a1)
{
  return sub_100122754(a1, (unint64_t *)type metadata accessor for SpatialGenericPlatter, &qword_1004CC540, &qword_1004CC538, (uint64_t *)sub_10015C998);
}

uint64_t sub_100122754(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v5 >> 62))
  {
    uint64_t v12 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = v12 + v11;
    if (!__OFADD__(v12, v11)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v13 = v23 + v11;
  if (__OFADD__(v23, v11)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v14 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v5 = v14;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v14 & 0x8000000000000000) == 0 && (v14 & 0x4000000000000000) == 0)
    {
      uint64_t v16 = v14 & 0xFFFFFFFFFFFFFF8;
      if (v13 <= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v24 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v14 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v5 = v17;
    uint64_t v16 = v17 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    uint64_t v11 = v24;
LABEL_11:
    uint64_t result = sub_10012AA28(v16 + 8 * *(void *)(v16 + 16) + 32, (*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16), a1, (void (*)(void))a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 >= 1)
  {
    uint64_t v20 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100122978(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)sub_10006F648((double *)result, v11, 1, v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100122A5C(unint64_t a1)
{
  return sub_100122A74(a1, sub_10012ADCC);
}

uint64_t sub_100122A74(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100122C48(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = sub_1000BEC00(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = sub_10012AFBC((uint64_t)v7, v2, v3, v4);
  sub_100013218(a1);
  return v9;
}

unint64_t sub_100122D4C(void *a1)
{
  unint64_t result = (unint64_t)sub_10012657C(0, a1);
  unint64_t v2 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_15;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v5 = *(id *)(v2 + 8 * i + 32);
    }
    uint64_t v6 = v5;
    (*(void (**)(void))((swift_isaMask & *v5) + 0x280))();
    uint64_t v8 = v7;
    uint64_t v9 = swift_bridgeObjectRelease();
    if (!v8 && (*(uint64_t (**)(uint64_t))((swift_isaMask & *v6) + 0x2F0))(v9) == 1)
    {
      uint64_t v10 = *(uint64_t (**)(void))((swift_isaMask & *v6) + 0xD0);
      if (v10() != 1 && v10() != 6) {
        (*(void (**)(uint64_t))((swift_isaMask & *v6) + 0xD8))(9);
      }
    }
  }
LABEL_15:

  return swift_bridgeObjectRelease();
}

uint64_t sub_100122F20()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t *)(v3 + 40);
    while (*(void *)(v5 + 16))
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_1000E20D4(v7, v8);
      if ((v10 & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v11 = *(void **)(*(void *)(v5 + 56) + 8 * v9);
      uint64_t v12 = *(void (**)(void))((swift_isaMask & *v11) + 0x308);
      unint64_t v1 = (swift_isaMask & *v11) + 776;
      uint64_t v13 = v11;
      v12();

      swift_bridgeObjectRelease();
      v6 += 2;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (!result) {
      goto LABEL_21;
    }
    goto LABEL_9;
  }
LABEL_7:
  swift_beginAccess();
  sub_100012894(&qword_1004CC508);
  OrderedDictionary.removeAll()();
  swift_endAccess();
  swift_beginAccess();
  *(void *)(v2 + 80) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v1 = *(void *)(v2 + 64);
  if (v1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v14)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    return sub_100128720();
  }
LABEL_9:
  if (v14 >= 1)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v19 = *(void *)(v1 + 8 * i + 32);
        swift_retain();
      }
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v17 = *(void *)(v19 + 24);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v17 + 112))(ObjectType, v17);
        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001231B8(void *a1)
{
  unint64_t result = (unint64_t)sub_10012657C(1, a1);
  unint64_t v2 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (!result) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_14;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v5 = *(id *)(v2 + 8 * i + 32);
    }
    uint64_t v6 = v5;
    (*(void (**)(void))((swift_isaMask & *v5) + 0x280))();
    uint64_t v8 = v7;
    uint64_t v9 = swift_bridgeObjectRelease();
    if (!v8
      && (*(uint64_t (**)(uint64_t))((swift_isaMask & *v6) + 0x2F0))(v9) == 1
      && (*(uint64_t (**)(void))((swift_isaMask & *v6) + 0xD0))() != 6)
    {
      (*(void (**)(void))((swift_isaMask & *v6) + 0xD8))(0);
    }
  }
LABEL_14:

  return swift_bridgeObjectRelease();
}

uint64_t sub_100123378()
{
  return sub_100123388(9);
}

uint64_t sub_100123380()
{
  return sub_100123388(0);
}

uint64_t sub_100123388(uint64_t a1)
{
  swift_beginAccess();
  type metadata accessor for WorldLine();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v2 = OrderedDictionary.values.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  if (v3)
  {
    if (v3 < 1)
    {
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v6 = *(id *)(v2 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      ++v5;
      unint64_t v8 = (*(uint64_t (**)(void))((swift_isaMask & *v6) + 0x250))();
      sub_100122754(v8, (unint64_t *)&type metadata accessor for WorldPoint, &qword_1004CC510, &qword_1004CC320, (uint64_t *)sub_10015C998);
    }
    while (v3 != v5);
  }
  swift_bridgeObjectRelease_n();
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    uint64_t v9 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_12;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_12:
  if (v9 >= 1)
  {
    char v10 = (id *)&_swiftEmptyArrayStorage[4];
    do
    {
      uint64_t v11 = *(void (**)(void))((swift_isaMask & *(void *)*v10) + 0x280);
      uint64_t v12 = *v10;
      v11();
      uint64_t v14 = v13;
      uint64_t v15 = swift_bridgeObjectRelease();
      if (!v14 && (*(uint64_t (**)(uint64_t))((swift_isaMask & *v12) + 0x2F0))(v15) == 1)
      {
        uint64_t v16 = *(uint64_t (**)(void))((swift_isaMask & *v12) + 0xD0);
        if (v16() != 1 && v16() != 6) {
          (*(void (**)(uint64_t))((swift_isaMask & *v12) + 0xD8))(a1);
        }
      }

      ++v10;
      --v9;
    }
    while (v9);
    return swift_bridgeObjectRelease_n();
  }
LABEL_24:
  __break(1u);
  return result;
}

void sub_1001236F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 96);
  if (!*(void *)(v6 + 16)) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_1000E20D4(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_endAccess();
    return;
  }
  uint64_t v9 = *(void **)(*(void *)(v6 + 56) + 8 * v7);
  swift_endAccess();
  char v10 = v9;
  swift_bridgeObjectRelease();
  sub_1001257A8(v10, 0, 1uLL);
  if (([self jasperAvailable] & 1) == 0) {
    goto LABEL_11;
  }
  if (qword_1004C2D00 != -1) {
    swift_once();
  }
  if (byte_1004F8530 == 1 && ((*(uint64_t (**)(void))((swift_isaMask & *v10) + 0x2C8))() & 1) != 0)
  {
    uint64_t v11 = *(uint64_t (**)(unsigned char *))(**(void **)(v3 + 136) + 400);
    swift_retain();
    uint64_t v12 = (void (*)(unsigned char *, void))v11(v13);
    sub_1000A8984(a1, a2);
    v12(v13, 0);

    swift_release();
  }
  else
  {
LABEL_11:
  }
}

uint64_t sub_1001238E0(void *a1, char a2)
{
  uint64_t v5 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8);
  uint64_t v6 = v5();
  uint64_t v8 = v7;
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 96) + 16))
  {
    sub_1000E20D4(v6, v8);
    if (v9)
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v11 = (uint64_t)[self jasperAvailable];
  if (!v11) {
    goto LABEL_9;
  }
  if (qword_1004C2D00 != -1) {
    goto LABEL_31;
  }
  while (1)
  {
    if (byte_1004F8530 == 1)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *a1) + 0x2C8))(v11, v12, v13);
      if (v11) {
        uint64_t v11 = sub_100128248(a1);
      }
    }
LABEL_9:
    ((void (*)(uint64_t))v5)(v11);
    swift_beginAccess();
    uint64_t v14 = a1;
    sub_100012894(&qword_1004CC508);
    OrderedDictionary.subscript.setter();
    swift_endAccess();
    uint64_t v15 = sub_100128560(v14);
    uint64_t v5 = *(uint64_t (**)(void))((swift_isaMask & *v14) + 0x250);
    uint64_t v16 = ((uint64_t (*)(uint64_t))v5)(v15);
    if ((v16 & 0xC000000000000001) == 0) {
      break;
    }
    uint64_t v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_12:
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    sub_100124ABC(v18, a2 & 1);

    uint64_t v22 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v19, v20, v21);
    if ((v22 & 0xC000000000000001) != 0) {
      goto LABEL_29;
    }
    if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      uint64_t v23 = *(id *)(v22 + 40);
      goto LABEL_15;
    }
    __break(1u);
LABEL_31:
    uint64_t v11 = swift_once();
  }
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v17 = *(id *)(v16 + 32);
    goto LABEL_12;
  }
  __break(1u);
LABEL_29:
  uint64_t v23 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_15:
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  sub_100124ABC(v24, a2 & 1);

  uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v14) + 0x268))(v25, v26, v27);
  sub_100124ABC(v28, a2 & 1);

  if ((a2 & 1) == 0) {
    goto LABEL_34;
  }
  swift_beginAccess();
  unint64_t v29 = *(void *)(v2 + 64);
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v30 = result;
    if (!result) {
      goto LABEL_33;
    }
LABEL_18:
    if (v30 >= 1)
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if ((v29 & 0xC000000000000001) != 0)
        {
          uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v34 = *(void *)(v29 + 8 * i + 32);
          swift_retain();
        }
        if (swift_unknownObjectWeakLoadStrong())
        {
          uint64_t v32 = *(void *)(v34 + 24);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(void *, uint64_t, uint64_t))(v32 + 32))(v14, ObjectType, v32);
          swift_release();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_release();
        }
      }
      goto LABEL_33;
    }
    __break(1u);
  }
  else
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v30) {
      goto LABEL_18;
    }
LABEL_33:
    swift_bridgeObjectRelease();
LABEL_34:
    sub_100128720();
    return 1;
  }
  return result;
}

void sub_100123D44(uint64_t a1, void *a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = (void *)a1;
  char v9 = &swift_isaMask;
  if (a2)
  {
    uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0xB8))();
    uint64_t v12 = v11;
    swift_beginAccess();
    uint64_t v13 = *(void *)(v4 + 80);
    if (*(void *)(v13 + 16) && (unint64_t v14 = sub_1000E20D4(v10, v12), (v15 & 1) != 0))
    {
      uint64_t v16 = *(void **)(*(void *)(v13 + 56) + 8 * v14);
      uint64_t v17 = v16;
    }
    else
    {
      uint64_t v16 = 0;
    }
    swift_bridgeObjectRelease();
    a1 = swift_endAccess();
    if (a3) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v24 = 0;
    goto LABEL_14;
  }
  uint64_t v16 = 0;
  if (!a3) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v18 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB8))(a1);
  uint64_t v20 = v19;
  swift_beginAccess();
  uint64_t v21 = *(void *)(v5 + 80);
  if (*(void *)(v21 + 16) && (unint64_t v22 = sub_1000E20D4(v18, v20), (v23 & 1) != 0))
  {
    uint64_t v24 = *(void **)(*(void *)(v21 + 56) + 8 * v22);
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v24 = 0;
  }
  swift_bridgeObjectRelease();
  a1 = swift_endAccess();
LABEL_14:
  uint64_t v26 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v8) + 0x250);
  uint64_t v27 = v26(a1);
  if ((v27 & 0xC000000000000001) != 0)
  {
    uint64_t v28 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_62;
    }
    uint64_t v28 = *(id *)(v27 + 32);
  }
  uint64_t v87 = v28;
  uint64_t v29 = swift_bridgeObjectRelease();
  uint64_t v30 = v26(v29);
  if ((v30 & 0xC000000000000001) != 0)
  {
LABEL_62:
    uint64_t v31 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_20;
  }
  if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v31 = *(id *)(v30 + 40);
LABEL_20:
  char v9 = v31;
  uint64_t v32 = swift_bridgeObjectRelease();
  uint64_t v85 = v5;
  uint64_t v86 = v24;
  char v84 = a4;
  if (!v16) {
    goto LABEL_29;
  }
  char v33 = *(uint64_t (**)(void))((swift_isaMask & *v16) + 0xB8);
  uint64_t v34 = v16;
  uint64_t v35 = v33();
  uint64_t v37 = v36;

  uint64_t v38 = *(uint64_t (**)(void))((swift_isaMask & *v9) + 0xB8);
  uint64_t v39 = v9;
  uint64_t v40 = v38();
  uint64_t v42 = v41;

  if (v35 == v40 && v37 == v42)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0)
    {
      uint64_t v45 = *(void (**)(void))((swift_isaMask & *v8) + 0x318);
      simd_float4 v46 = v34;
      v45();

      uint64_t v5 = v85;
      uint64_t v24 = v86;
      a4 = v84;
      goto LABEL_29;
    }
  }
  a4 = v84;
  uint64_t v5 = v85;
  uint64_t v32 = sub_1001257A8(v8, v16, v84 & 1);
  uint64_t v24 = v86;
LABEL_29:
  simd_float4 v47 = v87;
  if (!v24) {
    goto LABEL_39;
  }
  simd_float4 v48 = *(uint64_t (**)(void))((swift_isaMask & *v24) + 0xB8);
  id v49 = v24;
  uint64_t v50 = v48();
  uint64_t v52 = v51;

  uint64_t v53 = *(uint64_t (**)(void))((swift_isaMask & *v87) + 0xB8);
  BOOL v54 = v87;
  uint64_t v55 = v53();
  uint64_t v57 = v56;

  if (v50 == v55 && v52 == v57)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v59)
  {
LABEL_37:
    a4 = v84;
    uint64_t v5 = v85;
    uint64_t v24 = v86;
    uint64_t v32 = sub_1001257A8(v8, v86, v84 & 1);
    goto LABEL_38;
  }
  uint64_t v60 = *(void (**)(void))((swift_isaMask & *v8) + 0x320);
  id v61 = v49;
  v60();

  uint64_t v5 = v85;
  uint64_t v24 = v86;
  a4 = v84;
LABEL_38:
  simd_float4 v47 = v87;
LABEL_39:
  unint64_t v62 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v47) + 0x238))(v32);
  if (!(v62 >> 62))
  {
    uint64_t v63 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_41;
  }
LABEL_64:
  uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
LABEL_41:
  uint64_t v64 = swift_bridgeObjectRelease();
  if (!v63)
  {
    uint64_t v65 = *(uint64_t (**)(void))((swift_isaMask & *v87) + 0xB8);
    uint64_t v66 = v87;
    uint64_t v67 = v65();
    uint64_t v69 = v68;

    sub_1001253B0(v67, v69, a4 & 1);
    uint64_t v64 = swift_bridgeObjectRelease();
  }
  unint64_t v70 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v9) + 0x238))(v64);
  if (v70 >> 62) {
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v71)
  {
    if (a4) {
      goto LABEL_47;
    }
LABEL_59:

    char v9 = v16;
LABEL_68:

    return;
  }
  uint64_t v79 = *(uint64_t (**)(void))((swift_isaMask & *v9) + 0xB8);
  uint64_t v80 = v9;
  uint64_t v81 = v79();
  uint64_t v83 = v82;

  sub_1001253B0(v81, v83, a4 & 1);
  swift_bridgeObjectRelease();
  if ((a4 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_47:
  uint64_t v72 = v16;
  swift_beginAccess();
  unint64_t v73 = *(void *)(v5 + 64);
  if (!(v73 >> 62))
  {
    uint64_t v74 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v74) {
      goto LABEL_49;
    }
LABEL_67:
    swift_bridgeObjectRelease();

    uint64_t v24 = v86;
    goto LABEL_68;
  }
  swift_bridgeObjectRetain();
  uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
  if (!v74) {
    goto LABEL_67;
  }
LABEL_49:
  if (v74 >= 1)
  {
    for (uint64_t i = 0; i != v74; ++i)
    {
      if ((v73 & 0xC000000000000001) != 0)
      {
        uint64_t v78 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v78 = *(void *)(v73 + 8 * i + 32);
        swift_retain();
      }
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v76 = *(void *)(v78 + 24);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v76 + 48))(v8, ObjectType, v76);
        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    goto LABEL_67;
  }
  __break(1u);
}

unint64_t sub_100124540(void *a1)
{
  unint64_t result = (unint64_t)sub_10012657C(0, a1);
  unint64_t v2 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (!result) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_13;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v5 = *(id *)(v2 + 8 * i + 32);
    }
    uint64_t v6 = v5;
    (*(void (**)(void))((swift_isaMask & *v5) + 0x280))();
    uint64_t v8 = v7;
    uint64_t v9 = swift_bridgeObjectRelease();
    if (!v8 && (*(uint64_t (**)(uint64_t))((swift_isaMask & *v6) + 0x2F0))(v9) == 1)
    {
      uint64_t v10 = *(uint64_t (**)(void))((swift_isaMask & *v6) + 0xB8);
      uint64_t v11 = v6;
      uint64_t v12 = v10();
      uint64_t v14 = v13;

      sub_1001253B0(v12, v14, 1);
      swift_bridgeObjectRelease();
    }
  }
LABEL_13:

  return swift_bridgeObjectRelease();
}

unint64_t sub_10012470C()
{
  void (*v1)(unint64_t *__return_ptr, uint64_t);
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t result;
  id v6;
  unint64_t v7;

  unint64_t v1 = *(void (**)(unint64_t *__return_ptr, uint64_t))(**(void **)(v0 + 72) + 144);
  unint64_t v2 = swift_retain();
  v1(&v7, v2);
  swift_release();
  swift_bridgeObjectRetain();
  sub_100012894(&qword_1004C4358);
  sub_100012894(&qword_1004C4360);
  swift_dynamicCast();
  uint64_t v3 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_9:
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  unint64_t result = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
LABEL_13:
    uint64_t v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = *(id *)(v3 + 8 * result + 32);
LABEL_8:
    uint64_t v4 = (uint64_t)v6;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100124874()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v19 = v1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(v1 + 64);
  int64_t v20 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_21;
    }
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v20) {
      return swift_release();
    }
    unint64_t v10 = *(void *)(v19 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v20) {
        return swift_release();
      }
      unint64_t v10 = *(void *)(v19 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v20) {
          return swift_release();
        }
        unint64_t v10 = *(void *)(v19 + 8 * v6);
        if (!v10) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_21:
    uint64_t v12 = *(void **)(*(void *)(v1 + 56) + 8 * v8);
    uint64_t v13 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v12) + 0x2F0);
    uint64_t v14 = v12;
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v16 = v13(v15);

    if (v16 == 1)
    {
      uint64_t v17 = *(void (**)(void))((swift_isaMask & *v14) + 0xD8);
      uint64_t v18 = v14;
      v17(0);
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v11 = v9 + 3;
  if (v11 >= v20) {
    return swift_release();
  }
  unint64_t v10 = *(void *)(v19 + 8 * v11);
  if (v10)
  {
    int64_t v6 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v20) {
      return swift_release();
    }
    unint64_t v10 = *(void *)(v19 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100124ABC(void *a1, char a2)
{
  uint64_t v5 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8);
  uint64_t v6 = v5();
  uint64_t v8 = v7;
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 80) + 16))
  {
    sub_1000E20D4(v6, v8);
    if (v9)
    {
      swift_endAccess();
      uint64_t v10 = 0;
LABEL_19:
      swift_bridgeObjectRelease();
      return v10;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_endAccess();
  uint64_t v12 = ((uint64_t (*)(uint64_t))v5)(v11);
  uint64_t v14 = v13;
  swift_beginAccess();
  uint64_t v15 = a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v26 = *(void *)(v2 + 80);
  *(void *)(v2 + 80) = 0x8000000000000000;
  sub_1000D56EC((uint64_t)v15, v12, v14, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 80) = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v17 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v15) + 0x2A0);
  uint64_t v18 = swift_unknownObjectRetain();
  v17(v18, &off_10048EF90);
  if ((a2 & 1) == 0) {
    return 1;
  }
  swift_beginAccess();
  unint64_t v19 = *(void *)(v2 + 64);
  if (!(v19 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_7;
    }
LABEL_18:
    uint64_t v10 = 1;
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_7:
  if (v20 >= 1)
  {
    for (uint64_t i = 0; i != v20; ++i)
    {
      if ((v19 & 0xC000000000000001) != 0)
      {
        uint64_t v25 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v25 = *(void *)(v19 + 8 * i + 32);
        swift_retain();
      }
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v23 = *(void *)(v25 + 24);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v23 + 8))(v15, ObjectType, v23);
        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

unint64_t sub_100124D90(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  uint64_t v4 = v3;
  uint64_t v5 = a1;
  swift_retain();
  Synchronized.wrappedValue.getter();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1000D5A50((uint64_t)v5, v2, v4, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Synchronized.wrappedValue.setter();
  uint64_t v7 = swift_release();
  uint64_t v24 = v5;
  unint64_t result = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v5) + 0x238))(v7);
  unint64_t v9 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = result;
    if (result) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v10 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  uint64_t v11 = *(uint64_t (**)(void))((swift_isaMask & *v24) + 0xD0);
  if (v10 >= 1)
  {
    uint64_t v12 = 0;
    unint64_t v22 = v9 & 0xC000000000000001;
    unint64_t v23 = v9;
    while (1)
    {
      uint64_t v15 = v22 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v9 + 8 * v12 + 32);
      uint64_t v16 = v15;
      uint64_t v14 = v11();
      uint64_t v17 = *(uint64_t (**)(void))((swift_isaMask & *v16) + 0xD0);
      uint64_t v18 = v16;
      uint64_t v19 = v17();

      if ((unint64_t)(v19 - 3) > 1 || v11() != 2) {
        break;
      }
      uint64_t v20 = v18;
      uint64_t v21 = v17();

      if (v21 == 3)
      {
        if ((unint64_t)(v14 - 3) < 2) {
          break;
        }
      }
      else if (v14 == 3)
      {
        if (v21 == 4) {
          break;
        }
      }
      else if ((v14 != 4) != (v21 == 4))
      {
        break;
      }
LABEL_5:
      uint64_t v13 = v18;
      uint64_t v14 = v17();

LABEL_6:
      ++v12;
      sub_1001250DC(v18, v14);

      unint64_t v9 = v23;
      if (v10 == v12) {
        return swift_bridgeObjectRelease();
      }
    }
    if (v11() != 6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001250DC(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xD8))(a2);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x268))(v4);
  (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0xD8))(a2);

  uint64_t v6 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x310))();
  unint64_t result = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x280))(v6);
  unint64_t v8 = result;
  if (!(result >> 62))
  {
    uint64_t v9 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v13 = swift_bridgeObjectRelease();
    uint64_t v14 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8))(v13);
    uint64_t v16 = v15;
    uint64_t v17 = a1;
    swift_retain();
    Synchronized.wrappedValue.getter();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1000D5A50((uint64_t)v17, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Synchronized.wrappedValue.setter();
    swift_release();
    return sub_100128720();
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if ((v8 & 0xC000000000000001) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(v8 + 8 * i + 32);
      }
      uint64_t v12 = v11;
      sub_100124D90();
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_1001253B0(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 80);
  if (!*(void *)(v8 + 16)) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_1000E20D4(a1, a2);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    swift_endAccess();
    return;
  }
  id v11 = *(void **)(*(void *)(v8 + 56) + 8 * v9);
  swift_endAccess();
  uint64_t v12 = v11;
  uint64_t v13 = swift_bridgeObjectRelease();
  uint64_t v14 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v12) + 0x238);
  unint64_t v15 = v14(v13);
  if (v15 >> 62) {
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v17 = swift_bridgeObjectRelease();
  if (v16 > 0)
  {
    unint64_t v18 = v14(v17);
    unint64_t v19 = v18;
    if (v18 >> 62)
    {
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      if (!v20) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v20) {
        goto LABEL_34;
      }
    }
    if (v20 >= 1)
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if ((v19 & 0xC000000000000001) != 0) {
          id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v22 = *(id *)(v19 + 8 * i + 32);
        }
        unint64_t v23 = v22;
        sub_1001257A8(v22, 0, a3 & 1);
      }
      goto LABEL_34;
    }
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    if (!v25) {
      goto LABEL_34;
    }
    goto LABEL_19;
  }
  (*(void (**)(void, void))((swift_isaMask & *v12) + 0x2A0))(0, 0);
  swift_beginAccess();
  uint64_t v24 = (void *)sub_1000A8918(a1, a2);
  swift_endAccess();

  if ((a3 & 1) == 0)
  {

    return;
  }
  swift_beginAccess();
  unint64_t v4 = *(void *)(v4 + 64);
  if (v4 >> 62) {
    goto LABEL_33;
  }
  uint64_t v25 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v25)
  {
LABEL_34:

    swift_bridgeObjectRelease();
    return;
  }
LABEL_19:
  if (v25 >= 1)
  {
    uint64_t v26 = 0;
    unint64_t v38 = v4;
    unint64_t v39 = v4 & 0xC000000000000001;
    do
    {
      if (v39)
      {
        uint64_t v37 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v37 = *(void *)(v4 + 8 * v26 + 32);
        swift_retain();
      }
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v27 = *(void *)(v37 + 24);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v29 = *(uint64_t (**)(void))((swift_isaMask & *v12) + 0xB8);
        uint64_t v30 = v12;
        uint64_t v31 = v12;
        uint64_t v32 = v25;
        id v33 = v30;
        uint64_t v34 = v29();
        uint64_t v36 = v35;

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16))(v34, v36, ObjectType, v27);
        uint64_t v25 = v32;
        uint64_t v12 = v31;
        unint64_t v4 = v38;
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
      }
      ++v26;
    }
    while (v25 != v26);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_1001257A8(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v8 = &swift_isaMask;
  uint64_t v9 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x308))();
  double v99 = *(uint64_t (**)(void))((swift_isaMask & *v7) + 0xB8);
  ((void (*)(uint64_t))v99)(v9);
  swift_beginAccess();
  sub_100012894(&qword_1004CC508);
  OrderedDictionary.removeValue(forKey:)();
  swift_endAccess();
  swift_bridgeObjectRelease();

  uint64_t v101 = v3;
  uint64_t v10 = sub_1001289E0(v7);
  char v96 = a3;
  id v100 = v7;
  if (a3)
  {
    swift_beginAccess();
    unint64_t v4 = *(void *)(v3 + 64);
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v11)
      {
LABEL_4:
        if (v11 < 1) {
          goto LABEL_75;
        }
        for (uint64_t i = 0; i != v11; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
          {
            uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v15 = *(void *)(v4 + 8 * i + 32);
            swift_retain();
          }
          if (swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v13 = *(void *)(v15 + 24);
            swift_getObjectType();
            uint64_t v14 = v99();
            uint64_t v8 = &swift_isaMask;
            (*(void (**)(uint64_t))(v13 + 40))(v14);
            uint64_t v7 = v100;
            swift_bridgeObjectRelease();
            swift_release();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();
          }
        }
      }
    }
    uint64_t v10 = swift_bridgeObjectRelease();
  }
  double v99 = *(uint64_t (**)(void))((swift_isaMask & *v7) + 0x268);
  uint64_t v16 = (void *)((uint64_t (*)(uint64_t))v99)(v10);
  unint64_t v17 = (*(uint64_t (**)(void))((swift_isaMask & *v16) + 0x238))();

  if (v17 >> 62) {
    goto LABEL_71;
  }
  uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  uint64_t v19 = swift_bridgeObjectRelease();
  if (!v18)
  {
    uint64_t v32 = (void *)((uint64_t (*)(uint64_t))v99)(v19);
    (*(void (**)(void, void))((*v8 & *v32) + 0x2A0))(0, 0);

    id v33 = (void *)v99();
    uint64_t v34 = (*(uint64_t (**)(void))((*v8 & *v33) + 0xB8))();
    uint64_t v36 = v35;

    swift_beginAccess();
    uint64_t v37 = (void *)sub_1000A8918(v34, v36);
    swift_endAccess();
    swift_bridgeObjectRelease();

    if ((v96 & 1) == 0) {
      goto LABEL_80;
    }
    swift_beginAccess();
    unint64_t v4 = *(void *)(v101 + 64);
    if (!(v4 >> 62))
    {
      a2 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!a2)
      {
LABEL_79:
        uint64_t v38 = swift_bridgeObjectRelease();
        goto LABEL_80;
      }
LABEL_30:
      if (a2 < 1) {
        goto LABEL_98;
      }
      uint64_t v39 = 0;
      do
      {
        if ((v4 & 0xC000000000000001) != 0)
        {
          uint64_t v47 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v47 = *(void *)(v4 + 8 * v39 + 32);
          swift_retain();
        }
        if (swift_unknownObjectWeakLoadStrong())
        {
          uint64_t v40 = *(void *)(v47 + 24);
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v42 = (void *)v99();
          uint64_t v43 = (*(uint64_t (**)(void))((*v8 & *v42) + 0xB8))();
          uint64_t v45 = v44;

          uint64_t v46 = v43;
          uint64_t v8 = &swift_isaMask;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 16))(v46, v45, ObjectType, v40);
          uint64_t v7 = v100;
          swift_bridgeObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_release();
        }
        ++v39;
      }
      while (a2 != v39);
      goto LABEL_79;
    }
LABEL_78:
    swift_bridgeObjectRetain();
    a2 = _CocoaArrayWrapper.endIndex.getter();
    if (!a2) {
      goto LABEL_79;
    }
    goto LABEL_30;
  }
  uint64_t v20 = (void *)a2;
  if (!a2)
  {
    a3 = *(void *)((*v8 & *v7) + 0x250);
    uint64_t v21 = ((uint64_t (*)(uint64_t))a3)(v19);
    if ((v21 & 0xC000000000000001) != 0) {
      goto LABEL_76;
    }
    if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v22 = *(id *)(v21 + 32);
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_78;
  }
  while (1)
  {
    id v60 = v20;
    id v61 = (void *)((uint64_t (*)(id))v99)((id)a2);
    a3 = (*(uint64_t (**)(void))((*v8 & *v61) + 0x238))();

    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v62)
      {
LABEL_73:

        swift_bridgeObjectRelease();
        uint64_t v8 = &swift_isaMask;
        uint64_t v7 = v100;
        goto LABEL_80;
      }
    }
    else
    {
      uint64_t v62 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v62) {
        goto LABEL_73;
      }
    }
    if (v62 >= 1)
    {
      uint64_t v8 = 0;
      id v97 = v20;
      unint64_t v98 = a3 & 0xC000000000000001;
      a2 = a3;
      while (1)
      {
        if (v98) {
          uint64_t v67 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v67 = *(id *)(a3 + 8 * (void)v8 + 32);
        }
        uint64_t v7 = v67;
        uint64_t v68 = (void *)v99();
        uint64_t v69 = (*(uint64_t (**)(void))((swift_isaMask & *v68) + 0xB8))();
        uint64_t v71 = v70;

        uint64_t v72 = (*(uint64_t (**)(void))((swift_isaMask & *v7) + 0x250))();
        if ((v72 & 0xC000000000000001) != 0)
        {
          unint64_t v73 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_71:
            swift_bridgeObjectRetain();
            uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
          unint64_t v73 = *(id *)(v72 + 32);
        }
        uint64_t v74 = v73;
        uint64_t v75 = swift_bridgeObjectRelease();
        unint64_t v4 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v74) + 0xB8))(v75);
        uint64_t v77 = v76;

        if (v69 == v4 && v71 == v77)
        {
          swift_bridgeObjectRelease_n();
          a3 = a2;
        }
        else
        {
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 = a2;
          if ((v79 & 1) == 0)
          {
            id v80 = v60;
            uint64_t v64 = (uint64_t)v7;
            uint64_t v65 = 0;
            uint64_t v66 = v97;
            goto LABEL_55;
          }
        }
        id v63 = v60;
        uint64_t v64 = (uint64_t)v7;
        uint64_t v65 = v97;
        uint64_t v66 = 0;
LABEL_55:
        sub_100123D44(v64, v65, v66, 1);
        uint64_t v8 = (void *)((char *)v8 + 1);

        if ((void *)v62 == v8) {
          goto LABEL_73;
        }
      }
    }
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    id v22 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    unint64_t v23 = v22;
    uint64_t v24 = swift_bridgeObjectRelease();
    uint64_t v25 = (*(uint64_t (**)(uint64_t))((*v8 & *v23) + 0xB8))(v24);
    uint64_t v27 = v26;

    unint64_t v4 = v101 + 80;
    swift_beginAccess();
    if (!*(void *)(*(void *)(v101 + 80) + 16)) {
      break;
    }
    sub_1000E20D4(v25, v27);
    if ((v28 & 1) == 0) {
      break;
    }
    swift_endAccess();
    uint64_t v29 = swift_bridgeObjectRelease();
    uint64_t v30 = ((uint64_t (*)(uint64_t))a3)(v29);
    if ((v30 & 0xC000000000000001) != 0) {
      goto LABEL_101;
    }
    if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_101:
      id v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_48;
    }
    uint64_t v31 = *(void **)(v30 + 32);
LABEL_47:
    id v59 = v31;
LABEL_48:
    uint64_t v20 = v59;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v48 = swift_endAccess();
  uint64_t v49 = ((uint64_t (*)(uint64_t))a3)(v48);
  if ((v49 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      uint64_t v50 = *(id *)(v49 + 40);
      goto LABEL_42;
    }
    __break(1u);
LABEL_98:
    __break(1u);
    goto LABEL_101;
  }
  while (1)
  {
    uint64_t v50 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_42:
    uint64_t v51 = v50;
    uint64_t v52 = swift_bridgeObjectRelease();
    uint64_t v53 = (*(uint64_t (**)(uint64_t))((*v8 & *v51) + 0xB8))(v52);
    uint64_t v55 = v54;

    swift_beginAccess();
    if (*(void *)(*(void *)v4 + 16))
    {
      sub_1000E20D4(v53, v55);
      if (v56)
      {
        swift_endAccess();
        uint64_t v57 = swift_bridgeObjectRelease();
        uint64_t result = ((uint64_t (*)(uint64_t))a3)(v57);
        if ((result & 0xC000000000000001) != 0) {
          goto LABEL_101;
        }
        if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        {
          __break(1u);
          return result;
        }
        uint64_t v31 = *(void **)(result + 40);
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v81 = swift_endAccess();
    uint64_t v82 = (void *)((uint64_t (*)(uint64_t))v99)(v81);
    (*(void (**)(uint64_t))((*v8 & *v82) + 0x2F8))(1);

    uint64_t v83 = (void *)v99();
    (*(void (**)(void))((*v8 & *v83) + 0xD8))(0);

    char v84 = (void *)v99();
    (*(void (**)(void))((*v8 & *v84) + 0x330))();

LABEL_80:
    unint64_t v85 = (*(uint64_t (**)(uint64_t))((*v8 & *v7) + 0x250))(v38);
    a3 = v85;
    if (v85 >> 62)
    {
      a2 = _CocoaArrayWrapper.endIndex.getter();
      if (!a2) {
        goto LABEL_94;
      }
    }
    else
    {
      a2 = *(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!a2) {
        goto LABEL_94;
      }
    }
    if (a2 >= 1) {
      break;
    }
    __break(1u);
  }
  uint64_t v86 = 0;
  do
  {
    if ((a3 & 0xC000000000000001) != 0) {
      uint64_t v87 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v87 = *(id *)(a3 + 8 * v86 + 32);
    }
    uint64_t v88 = v87;
    unint64_t v89 = (*(uint64_t (**)(void))((*v8 & *v87) + 0x238))();
    if (v89 >> 62) {
      uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v90 = *(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v90)
    {
      (*(void (**)(void, void))((*v8 & *v88) + 0x2A0))(0, 0);
      uint64_t v91 = *(uint64_t (**)(void))((*v8 & *v88) + 0xB8);
      uint64_t v92 = v88;
      uint64_t v93 = v91();
      uint64_t v95 = v94;

      sub_1001253B0(v93, v95, v96 & 1);
      swift_bridgeObjectRelease();
    }
    ++v86;
  }
  while (a2 != v86);
LABEL_94:
  swift_bridgeObjectRelease();
  return sub_100128720();
}

void *sub_10012657C(char a1, void *a2)
{
  int8x16_t v164 = (uint64_t *)(v2 + 80);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t v5 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0xB8);
  uint64_t v6 = swift_bridgeObjectRetain();
  unsigned int v166 = v5;
  uint64_t v7 = v5(v6);
  if (!*(void *)(v4 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  sub_1000E20D4(v7, v8);
  char v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = _swiftEmptyArrayStorage;
  if (v10)
  {
    unint64_t v177 = (unint64_t)_swiftEmptyArrayStorage;
    unint64_t v12 = a2;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_130;
    }
    while (1)
    {
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t v13 = specialized Array._endMutation()();
      uint64_t v14 = v166(v13);
      uint64_t v16 = v15;
      id v17 = (id)v12;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1000D56EC((uint64_t)v17, v14, v16, isUniquelyReferenced_nonNull_native);
      int8x16_t v176 = _swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v12 = v177;
      if (!(v177 >> 62))
      {
        if (*(uint64_t *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1) {
          goto LABEL_6;
        }
LABEL_132:
        uint64_t v127 = swift_bridgeObjectRelease();
        if (a1)
        {
          uint64_t v128 = v166(v127);
          uint64_t v130 = (void *)sub_1000A8918(v128, v129);
          swift_bridgeObjectRelease();

          uint64_t v131 = v176 + 8;
          uint64_t v132 = 1 << *((unsigned char *)v176 + 32);
          uint64_t v133 = -1;
          if (v132 < 64) {
            uint64_t v133 = ~(-1 << v132);
          }
          unint64_t v134 = v133 & v176[8];
          int64_t v135 = (unint64_t)(v132 + 63) >> 6;
          swift_bridgeObjectRetain();
          int64_t v136 = 0;
          if (!v134) {
            goto LABEL_137;
          }
LABEL_136:
          unint64_t v137 = __clz(__rbit64(v134));
          v134 &= v134 - 1;
          for (unint64_t i = v137 | (v136 << 6); ; unint64_t i = __clz(__rbit64(v140)) + (v136 << 6))
          {
            id v142 = *(id *)(v176[7] + 8 * i);
            swift_bridgeObjectRetain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            swift_bridgeObjectRelease();
            if (v134) {
              goto LABEL_136;
            }
LABEL_137:
            int64_t v139 = v136 + 1;
            if (__OFADD__(v136, 1))
            {
              __break(1u);
              goto LABEL_184;
            }
            if (v139 >= v135) {
              goto LABEL_181;
            }
            unint64_t v140 = v131[v139];
            ++v136;
            if (!v140)
            {
              int64_t v136 = v139 + 1;
              if (v139 + 1 >= v135) {
                goto LABEL_181;
              }
              unint64_t v140 = v131[v136];
              if (!v140)
              {
                int64_t v136 = v139 + 2;
                if (v139 + 2 >= v135) {
                  goto LABEL_181;
                }
                unint64_t v140 = v131[v136];
                if (!v140)
                {
                  int64_t v141 = v139 + 3;
                  if (v141 >= v135) {
                    goto LABEL_181;
                  }
                  unint64_t v140 = v131[v141];
                  if (!v140)
                  {
                    while (1)
                    {
                      int64_t v136 = v141 + 1;
                      if (__OFADD__(v141, 1)) {
                        break;
                      }
                      if (v136 >= v135) {
                        goto LABEL_181;
                      }
                      unint64_t v140 = v131[v136];
                      ++v141;
                      if (v140) {
                        goto LABEL_150;
                      }
                    }
LABEL_185:
                    __break(1u);
LABEL_186:
                    __break(1u);
LABEL_187:
                    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                    return result;
                  }
                  int64_t v136 = v141;
                }
              }
            }
LABEL_150:
            unint64_t v134 = (v140 - 1) & v140;
          }
        }
        uint64_t v143 = *v164;
        uint64_t v144 = *v164 + 64;
        uint64_t v145 = 1 << *(unsigned char *)(*v164 + 32);
        uint64_t v146 = -1;
        if (v145 < 64) {
          uint64_t v146 = ~(-1 << v145);
        }
        unint64_t v147 = v146 & *(void *)(*v164 + 64);
        int64_t v148 = (unint64_t)(v145 + 63) >> 6;
        swift_bridgeObjectRetain();
        int64_t v149 = 0;
        while (1)
        {
          if (v147)
          {
            unint64_t v150 = __clz(__rbit64(v147));
            v147 &= v147 - 1;
            unint64_t v151 = v150 | (v149 << 6);
          }
          else
          {
            int64_t v152 = v149 + 1;
            if (__OFADD__(v149, 1))
            {
LABEL_184:
              __break(1u);
              goto LABEL_185;
            }
            if (v152 >= v148) {
              goto LABEL_181;
            }
            unint64_t v153 = *(void *)(v144 + 8 * v152);
            ++v149;
            if (!v153)
            {
              int64_t v149 = v152 + 1;
              if (v152 + 1 >= v148) {
                goto LABEL_181;
              }
              unint64_t v153 = *(void *)(v144 + 8 * v149);
              if (!v153)
              {
                int64_t v149 = v152 + 2;
                if (v152 + 2 >= v148) {
                  goto LABEL_181;
                }
                unint64_t v153 = *(void *)(v144 + 8 * v149);
                if (!v153)
                {
                  int64_t v154 = v152 + 3;
                  if (v154 >= v148) {
                    goto LABEL_181;
                  }
                  unint64_t v153 = *(void *)(v144 + 8 * v154);
                  if (!v153)
                  {
                    while (1)
                    {
                      int64_t v149 = v154 + 1;
                      if (__OFADD__(v154, 1)) {
                        goto LABEL_186;
                      }
                      if (v149 >= v148) {
                        break;
                      }
                      unint64_t v153 = *(void *)(v144 + 8 * v149);
                      ++v154;
                      if (v153) {
                        goto LABEL_175;
                      }
                    }
LABEL_181:
                    swift_release();
                    swift_bridgeObjectRelease();
                    return _swiftEmptyArrayStorage;
                  }
                  int64_t v149 = v154;
                }
              }
            }
LABEL_175:
            unint64_t v147 = (v153 - 1) & v153;
            unint64_t v151 = __clz(__rbit64(v153)) + (v149 << 6);
          }
          Class v155 = *(void **)(*(void *)(v143 + 56) + 8 * v151);
          id v156 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v155) + 0xB8);
          id v157 = v155;
          uint64_t v158 = swift_bridgeObjectRetain();
          uint64_t v159 = v156(v158);
          uint64_t v161 = v160;

          if (v176[2] && (sub_1000E20D4(v159, v161), (v162 & 1) != 0))
          {

            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            __n128 v163 = v157;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v126 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v126 < 1) {
        goto LABEL_132;
      }
      while (1)
      {
LABEL_6:
        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v124 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v124) {
            goto LABEL_128;
          }
        }
        else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_128;
        }
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v12 & 0x8000000000000000) != 0
          || (v12 & 0x4000000000000000) != 0)
        {
          unint64_t v12 = sub_100030BAC(v12);
          unint64_t v177 = v12;
        }
        uint64_t v19 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v19) {
          break;
        }
        uint64_t v20 = v19 - 1;
        uint64_t v21 = *(void **)((v12 & 0xFFFFFFFFFFFFFF8) + 8 * v20 + 0x20);
        *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
        uint64_t v22 = specialized Array._endMutation()();
        unint64_t v12 = (unint64_t)&swift_isaMask;
        uint64_t v175 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v21) + 0x238))(v22);
        int8x16_t v169 = v21;
        unint64_t v23 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v21) + 0x250))();
        if (v23)
        {
          unint64_t v12 = v23;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        uint64_t v24 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v21) + 0x268))();
        if (v24)
        {
          unint64_t v12 = v24;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (!((unint64_t)v175 >> 62))
        {
          uint64_t v25 = *(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v25) {
            goto LABEL_23;
          }
          goto LABEL_112;
        }
        if (v175 < 0) {
          unint64_t v12 = v175;
        }
        else {
          unint64_t v12 = v175 & 0xFFFFFFFFFFFFFF8;
        }
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v25)
        {
LABEL_23:
          unint64_t v26 = 0;
          long long v168 = *(uint64_t (**)(void))((swift_isaMask & *v21) + 0xB8);
          uint64_t v167 = v25;
          do
          {
            if ((v175 & 0xC000000000000001) != 0)
            {
              uint64_t v27 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v26 >= *(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_125;
              }
              uint64_t v27 = *(id *)(v175 + 32 + 8 * v26);
            }
            char v28 = v27;
            BOOL v29 = __OFADD__(v26, 1);
            unint64_t v30 = v26 + 1;
            if (v29) {
              goto LABEL_121;
            }
            uint64_t v31 = *(uint64_t (**)(void))((swift_isaMask & *v27) + 0x250);
            uint64_t v32 = v31();
            unint64_t v12 = v32;
            id v172 = v28;
            if ((v32 & 0xC000000000000001) != 0)
            {
              id v33 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_122;
              }
              id v33 = *(id *)(v32 + 32);
            }
            uint64_t v34 = v33;
            uint64_t v35 = swift_bridgeObjectRelease();
            uint64_t v36 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v34) + 0xB8))(v35);
            uint64_t v38 = v37;

            id v39 = v169;
            uint64_t v40 = v168();
            uint64_t v42 = v41;

            if (v36 == v40 && v38 == v42)
            {
              uint64_t v45 = swift_bridgeObjectRelease_n();
            }
            else
            {
              char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              uint64_t v45 = swift_bridgeObjectRelease();
              if ((v44 & 1) == 0)
              {
                uint64_t v46 = ((uint64_t (*)(uint64_t))v31)(v45);
                unint64_t v12 = v46;
                if ((v46 & 0xC000000000000001) == 0)
                {
                  if (!*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                    goto LABEL_127;
                  }
                  uint64_t v47 = *(void **)(v46 + 32);
                  goto LABEL_45;
                }
                goto LABEL_105;
              }
            }
            uint64_t v48 = ((uint64_t (*)(uint64_t))v31)(v45);
            unint64_t v12 = v48;
            if ((v48 & 0xC000000000000001) == 0)
            {
              if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                goto LABEL_123;
              }
              uint64_t v47 = *(void **)(v48 + 40);
LABEL_45:
              uint64_t v49 = v47;
              goto LABEL_46;
            }
LABEL_105:
            uint64_t v49 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_46:
            uint64_t v50 = v49;
            swift_bridgeObjectRelease();
            uint64_t v51 = *(uint64_t (**)(void))((swift_isaMask & *v50) + 0xB8);
            uint64_t v52 = v50;
            uint64_t v53 = v51();
            uint64_t v55 = v54;
            int8x16_t v171 = v52;

            if (!v176[2])
            {
              swift_bridgeObjectRelease();
LABEL_50:
              id v59 = v171;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              id v60 = v59;
              uint64_t v61 = v51();
              unint64_t v12 = v62;
              char v63 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v65 = sub_1000E20D4(v61, v12);
              uint64_t v66 = v176[2];
              BOOL v67 = (v64 & 1) == 0;
              uint64_t v68 = v66 + v67;
              if (__OFADD__(v66, v67)) {
                goto LABEL_124;
              }
              char v69 = v64;
              if (v176[3] >= v68)
              {
                if (v63)
                {
                  uint64_t v72 = v176;
                  if ((v64 & 1) == 0) {
                    goto LABEL_56;
                  }
                }
                else
                {
                  sub_1000D8290();
                  uint64_t v72 = v176;
                  if ((v69 & 1) == 0) {
                    goto LABEL_56;
                  }
                }
              }
              else
              {
                sub_1000D171C(v68, v63);
                unint64_t v70 = sub_1000E20D4(v61, v12);
                if ((v69 & 1) != (v71 & 1)) {
                  goto LABEL_187;
                }
                unint64_t v65 = v70;
                uint64_t v72 = v176;
                if ((v69 & 1) == 0)
                {
LABEL_56:
                  v72[(v65 >> 6) + 8] |= 1 << v65;
                  unint64_t v73 = (uint64_t *)(v72[6] + 16 * v65);
                  *unint64_t v73 = v61;
                  v73[1] = v12;
                  *(void *)(v72[7] + 8 * v65) = v60;
                  uint64_t v74 = v72[2];
                  BOOL v29 = __OFADD__(v74, 1);
                  uint64_t v75 = v74 + 1;
                  if (v29) {
                    goto LABEL_126;
                  }
                  v72[2] = v75;
                  swift_bridgeObjectRetain();
                  goto LABEL_61;
                }
              }
              uint64_t v76 = v72[7];

              *(void *)(v76 + 8 * v65) = v60;
LABEL_61:
              int8x16_t v176 = v72;
              swift_bridgeObjectRelease();
              uint64_t v58 = swift_bridgeObjectRelease();
              goto LABEL_62;
            }
            sub_1000E20D4(v53, v55);
            char v57 = v56;
            uint64_t v58 = swift_bridgeObjectRelease();
            if ((v57 & 1) == 0) {
              goto LABEL_50;
            }
LABEL_62:
            uint64_t v77 = *(uint64_t (**)(void))((swift_isaMask & *v172) + 0x268);
            uint64_t v78 = (void *)((uint64_t (*)(uint64_t))v77)(v58);
            uint64_t v79 = (*(uint64_t (**)(void))((swift_isaMask & *v78) + 0xB8))();
            unint64_t v12 = v80;

            if (v176[2])
            {
              sub_1000E20D4(v79, v12);
              char v82 = v81;
              uint64_t v83 = swift_bridgeObjectRelease();
              char v84 = v172;
              if (v82) {
                goto LABEL_69;
              }
            }
            else
            {
              uint64_t v83 = swift_bridgeObjectRelease();
              char v84 = v172;
            }
            ((void (*)(uint64_t))v77)(v83);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            uint64_t v85 = specialized Array._endMutation()();
            uint64_t v86 = (void *)((uint64_t (*)(uint64_t))v77)(v85);
            uint64_t v87 = (*(uint64_t (**)(void))((swift_isaMask & *v86) + 0xB8))();
            uint64_t v89 = v88;

            uint64_t v90 = v77();
            char v91 = swift_isUniquelyReferenced_nonNull_native();
            sub_1000D56EC(v90, v87, v89, v91);
            unint64_t v12 = 0x8000000000000000;
            swift_bridgeObjectRelease();
            uint64_t v83 = swift_bridgeObjectRelease();
LABEL_69:
            unint64_t v170 = v30;
            uint64_t v92 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v84) + 0x280))(v83);
            uint64_t v93 = v92;
            if ((unint64_t)v92 >> 62)
            {
              if (v92 < 0) {
                unint64_t v12 = v92;
              }
              else {
                unint64_t v12 = v92 & 0xFFFFFFFFFFFFFF8;
              }
              swift_bridgeObjectRetain();
              uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v94) {
                goto LABEL_24;
              }
LABEL_71:
              uint64_t v173 = v93;
              unint64_t v174 = v93 & 0xC000000000000001;
              uint64_t v95 = 4;
              while (2)
              {
                uint64_t v97 = v95 - 4;
                if (v174)
                {
                  unint64_t v98 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  unint64_t v12 = v95 - 3;
                  if (__OFADD__(v97, 1)) {
                    goto LABEL_118;
                  }
                }
                else
                {
                  unint64_t v98 = *(id *)(v93 + 8 * v95);
                  unint64_t v12 = v95 - 3;
                  if (__OFADD__(v97, 1))
                  {
LABEL_118:
                    __break(1u);
LABEL_119:
                    __break(1u);
LABEL_120:
                    __break(1u);
LABEL_121:
                    __break(1u);
LABEL_122:
                    __break(1u);
LABEL_123:
                    __break(1u);
LABEL_124:
                    __break(1u);
LABEL_125:
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
                    goto LABEL_129;
                  }
                }
                double v99 = *(uint64_t (**)(void))((swift_isaMask & *v98) + 0xB8);
                id v100 = v98;
                uint64_t v101 = v99();
                uint64_t v103 = v102;

                if (v176[2])
                {
                  sub_1000E20D4(v101, v103);
                  if (v104)
                  {

                    swift_bridgeObjectRelease();
LABEL_74:
                    ++v95;
                    if (v12 == v94) {
                      goto LABEL_24;
                    }
                    continue;
                  }
                }
                break;
              }
              uint64_t v105 = v94;
              swift_bridgeObjectRelease();
              float v106 = v100;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              uint64_t v107 = v106;
              uint64_t v108 = v99();
              uint64_t v110 = v109;
              char v111 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v113 = sub_1000E20D4(v108, v110);
              uint64_t v114 = v176[2];
              BOOL v115 = (v112 & 1) == 0;
              uint64_t v116 = v114 + v115;
              if (__OFADD__(v114, v115)) {
                goto LABEL_119;
              }
              char v117 = v112;
              if (v176[3] >= v116)
              {
                if (v111)
                {
                  float32x4_t v120 = v176;
                  if ((v112 & 1) == 0) {
                    goto LABEL_92;
                  }
                }
                else
                {
                  sub_1000D8290();
                  float32x4_t v120 = v176;
                  if ((v117 & 1) == 0) {
                    goto LABEL_92;
                  }
                }
              }
              else
              {
                sub_1000D171C(v116, v111);
                unint64_t v118 = sub_1000E20D4(v108, v110);
                if ((v117 & 1) != (v119 & 1)) {
                  goto LABEL_187;
                }
                unint64_t v113 = v118;
                float32x4_t v120 = v176;
                if ((v117 & 1) == 0)
                {
LABEL_92:
                  v120[(v113 >> 6) + 8] |= 1 << v113;
                  int8x16_t v121 = (uint64_t *)(v120[6] + 16 * v113);
                  *int8x16_t v121 = v108;
                  v121[1] = v110;
                  *(void *)(v120[7] + 8 * v113) = v107;
                  uint64_t v122 = v120[2];
                  BOOL v29 = __OFADD__(v122, 1);
                  uint64_t v123 = v122 + 1;
                  if (v29) {
                    goto LABEL_120;
                  }
                  v120[2] = v123;
                  swift_bridgeObjectRetain();
                  goto LABEL_73;
                }
              }
              uint64_t v96 = v120[7];

              *(void *)(v96 + 8 * v113) = v107;
LABEL_73:
              int8x16_t v176 = v120;

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v94 = v105;
              uint64_t v93 = v173;
              goto LABEL_74;
            }
            uint64_t v94 = *(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v94) {
              goto LABEL_71;
            }
LABEL_24:

            swift_bridgeObjectRelease();
            unint64_t v26 = v170;
          }
          while (v170 != v167);
        }
LABEL_112:

        swift_bridgeObjectRelease();
        unint64_t v12 = v177;
        if (v177 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v125 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v125 <= 0) {
            goto LABEL_132;
          }
        }
        else if (*(uint64_t *)((v177 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 0)
        {
          goto LABEL_132;
        }
      }
LABEL_129:
      __break(1u);
LABEL_130:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
  }
  return result;
}

id sub_100127778()
{
  void (*v2)(void *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void *__return_ptr, uint64_t);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(void *__return_ptr, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  BOOL v18;
  unint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t (*v30)(void);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  char v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t k;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t j;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t *v89;
  unint64_t v90;
  void v91[4];

  id result = [self jasperAvailable];
  if (result)
  {
    uint64_t v2 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v0 + 120) + 144);
    uint64_t v3 = swift_retain();
    v2(v91, v3);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = v91[1];
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v0 + 120) + 144);
    uint64_t v6 = swift_retain();
    v5(v91, v6);
    swift_release();
    uint64_t v7 = v91[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v91[0] = v4;
    sub_100122754(v7, (unint64_t *)&type metadata accessor for WorldLineGuide, &qword_1004CC520, &qword_1004CC518, (uint64_t *)sub_10015C998);
    uint64_t v8 = v91[0];
    char v9 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v0 + 120) + 144);
    char v10 = swift_retain();
    v9(v91, v10);
    swift_release();
    uint64_t v11 = v91[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v91[0] = v8;
    sub_100122754(v11, (unint64_t *)&type metadata accessor for WorldLineGuide, &qword_1004CC520, &qword_1004CC518, (uint64_t *)sub_10015C998);
    unint64_t v12 = v91[0];
    char v84 = (uint64_t *)(v0 + 128);
    swift_beginAccess();
    uint64_t v74 = v0;
    uint64_t v13 = *(void *)(v0 + 128);
    if (v13 >> 62) {
      goto LABEL_118;
    }
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
LABEL_4:
    uint64_t v85 = v12;
    unint64_t v73 = v12 >> 62;
    if (v14)
    {
      if (v12 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v86 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      char v82 = v13 & 0xC000000000000001;
      uint64_t v79 = (uint64_t *)(v74 + 64);
      swift_beginAccess();
      uint64_t v15 = 0;
      uint64_t v77 = v13 + 32;
      uint64_t v78 = v13 & 0xFFFFFFFFFFFFFF8;
      char v81 = v12 & 0xC000000000000001;
      uint64_t v75 = v14;
      uint64_t v76 = v13;
      do
      {
        if (v82)
        {
          uint64_t v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v15 >= *(void *)(v78 + 16)) {
            goto LABEL_112;
          }
          uint64_t v16 = *(id *)(v77 + 8 * v15);
        }
        id v17 = v16;
        uint64_t v18 = __OFADD__(v15++, 1);
        if (v18)
        {
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
          goto LABEL_111;
        }
        uint64_t v88 = v16;
        if (v86)
        {
          uint64_t v19 = v15;
          if (v81)
          {
            swift_bridgeObjectRetain();
            uint64_t v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v20 = *(void **)(v12 + 32);
            swift_bridgeObjectRetain();
            uint64_t v21 = v20;
          }
          uint64_t v22 = v21;
          type metadata accessor for WorldLineGuide();
          unint64_t v23 = v17;
          uint64_t v24 = static NSObject.== infix(_:_:)();

          if (v24)
          {
LABEL_19:

LABEL_20:
            swift_bridgeObjectRelease();
            uint64_t v15 = v19;
            continue;
          }
          if (v86 != 1)
          {
            if (v81)
            {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
              unint64_t v23 = v88;
              uint64_t v37 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if (v37) {
                goto LABEL_19;
              }
              if (v86 != 2)
              {
                uint64_t v38 = 2;
                while (1)
                {
                  specialized _ArrayBuffer._getElementSlowPath(_:)();
                  id v39 = v38 + 1;
                  if (__OFADD__(v38, 1)) {
                    break;
                  }
                  uint64_t v40 = static NSObject.== infix(_:_:)();
                  swift_unknownObjectRelease();
                  if (v40) {
                    goto LABEL_49;
                  }
                  ++v38;
                  if (v39 == v86) {
                    goto LABEL_22;
                  }
                }
LABEL_111:
                __break(1u);
LABEL_112:
                __break(1u);
LABEL_113:
                __break(1u);
LABEL_114:
                __break(1u);
LABEL_115:
                __break(1u);
                goto LABEL_116;
              }
            }
            else
            {
              uint64_t v41 = *(id *)(v12 + 40);
              unint64_t v23 = v88;
              uint64_t v42 = static NSObject.== infix(_:_:)();

              if (v42) {
                goto LABEL_19;
              }
              if (v86 != 2)
              {
                uint64_t v43 = 6;
                while (1)
                {
                  char v44 = v43 - 3;
                  if (__OFADD__(v43 - 4, 1)) {
                    break;
                  }
                  uint64_t v45 = *(id *)(v12 + 8 * v43);
                  uint64_t v46 = static NSObject.== infix(_:_:)();

                  if (v46)
                  {
LABEL_49:

                    goto LABEL_20;
                  }
                  ++v43;
                  id v17 = v88;
                  if (v44 == v86)
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v15 = v19;
                    goto LABEL_23;
                  }
                }
LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                swift_bridgeObjectRetain();
                uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
                goto LABEL_4;
              }
            }
          }
LABEL_22:
          swift_bridgeObjectRelease();
          uint64_t v15 = v19;
          id v17 = v88;
        }
LABEL_23:
        uint64_t v25 = *v79;
        if ((unint64_t)*v79 >> 62)
        {
          swift_bridgeObjectRetain();
          unint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
          if (!v26)
          {
LABEL_52:

            swift_bridgeObjectRelease();
            continue;
          }
        }
        else
        {
          unint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v26) {
            goto LABEL_52;
          }
        }
        if (v26 < 1) {
          goto LABEL_113;
        }
        unint64_t v80 = v15;
        for (unint64_t i = 0; i != v26; ++i)
        {
          if ((v25 & 0xC000000000000001) != 0)
          {
            uint64_t v36 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v36 = *(void *)(v25 + 8 * i + 32);
            swift_retain();
          }
          if (swift_unknownObjectWeakLoadStrong())
          {
            char v28 = *(void *)(v36 + 24);
            uint64_t ObjectType = swift_getObjectType();
            unint64_t v30 = *(uint64_t (**)(void))((swift_isaMask & *v88) + 0xB8);
            uint64_t v31 = v26;
            uint64_t v32 = v88;
            id v33 = v30();
            uint64_t v35 = v34;

            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 96))(v33, v35, ObjectType, v28);
            unint64_t v26 = v31;
            swift_bridgeObjectRelease();
            swift_release();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        unint64_t v12 = v85;
        uint64_t v14 = v75;
        uint64_t v13 = v76;
        uint64_t v15 = v80;
      }
      while (v15 != v14);
    }
    swift_bridgeObjectRelease();
    if (v73)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
      if (v47) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v47 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v47)
      {
LABEL_55:
        uint64_t v89 = (uint64_t *)(v74 + 64);
        uint64_t v90 = v12 & 0xC000000000000001;
        swift_beginAccess();
        uint64_t v13 = 0;
        uint64_t v87 = v12 & 0xFFFFFFFFFFFFFF8;
        uint64_t v83 = v12 + 32;
        do
        {
          if (v90)
          {
            uint64_t v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v13 >= *(void *)(v87 + 16)) {
              goto LABEL_115;
            }
            uint64_t v48 = *(id *)(v83 + 8 * v13);
          }
          unint64_t v12 = (unint64_t)v48;
          uint64_t v18 = __OFADD__(v13++, 1);
          if (v18) {
            goto LABEL_109;
          }
          uint64_t v49 = *v84;
          if ((unint64_t)*v84 >> 62)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
            if (!v50) {
              goto LABEL_89;
            }
          }
          else
          {
            uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain_n();
            if (!v50) {
              goto LABEL_89;
            }
          }
          if ((v49 & 0xC000000000000001) != 0) {
            uint64_t v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t v51 = *(id *)(v49 + 32);
          }
          uint64_t v52 = v51;
          type metadata accessor for WorldLineGuide();
          uint64_t v53 = static NSObject.== infix(_:_:)();

          if ((v53 & 1) == 0)
          {
            if (v50 != 1)
            {
              if ((v49 & 0xC000000000000001) != 0)
              {
                id v60 = 1;
                while (1)
                {
                  specialized _ArrayBuffer._getElementSlowPath(_:)();
                  uint64_t v61 = v60 + 1;
                  if (__OFADD__(v60, 1)) {
                    break;
                  }
                  unint64_t v62 = static NSObject.== infix(_:_:)();
                  swift_unknownObjectRelease();
                  if (v62) {
                    goto LABEL_67;
                  }
                  ++v60;
                  if (v61 == v50) {
                    goto LABEL_89;
                  }
                }
                __break(1u);
                goto LABEL_108;
              }
              char v63 = 5;
              do
              {
                char v64 = v63 - 3;
                if (__OFADD__(v63 - 4, 1)) {
                  goto LABEL_110;
                }
                unint64_t v65 = *(id *)(v49 + 8 * v63);
                uint64_t v66 = static NSObject.== infix(_:_:)();

                if (v66) {
                  goto LABEL_67;
                }
                ++v63;
              }
              while (v64 != v50);
            }
LABEL_89:
            swift_bridgeObjectRelease_n();
            BOOL v67 = *v89;
            if ((unint64_t)*v89 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
              if (!v68) {
                goto LABEL_56;
              }
            }
            else
            {
              uint64_t v68 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (!v68) {
                goto LABEL_56;
              }
            }
            if (v68 < 1) {
              goto LABEL_114;
            }
            for (uint64_t j = 0; j != v68; ++j)
            {
              if ((v67 & 0xC000000000000001) != 0)
              {
                uint64_t v72 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                uint64_t v72 = *(void *)(v67 + 8 * j + 32);
                swift_retain();
              }
              if (swift_unknownObjectWeakLoadStrong())
              {
                unint64_t v70 = *(void *)(v72 + 24);
                char v71 = swift_getObjectType();
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v70 + 88))(v12, v71, v70);
                swift_release();
                swift_unknownObjectRelease();
              }
              else
              {
                swift_release();
              }
            }
            goto LABEL_56;
          }
LABEL_67:
          swift_bridgeObjectRelease_n();
          uint64_t v54 = *v89;
          if ((unint64_t)*v89 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
            if (!v55) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v55) {
              goto LABEL_56;
            }
          }
          if (v55 < 1) {
            goto LABEL_117;
          }
          for (uint64_t k = 0; k != v55; ++k)
          {
            if ((v54 & 0xC000000000000001) != 0)
            {
              char v57 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              char v57 = *(void *)(v54 + 8 * k + 32);
              swift_retain();
            }
            if (swift_unknownObjectWeakLoadStrong())
            {
              uint64_t v58 = *(void *)(v57 + 24);
              id v59 = swift_getObjectType();
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v58 + 104))(v12, v59, v58);
              swift_release();
              swift_unknownObjectRelease();
            }
            else
            {
              swift_release();
            }
          }
LABEL_56:

          swift_bridgeObjectRelease();
          unint64_t v12 = v85;
        }
        while (v13 != v47);
      }
    }
    swift_bridgeObjectRelease();
    *char v84 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_100122754(v12, (unint64_t *)&type metadata accessor for WorldLineGuide, &qword_1004CC520, &qword_1004CC518, (uint64_t *)sub_10015C998);
    return (id)swift_endAccess();
  }
  return result;
}

uint64_t sub_100128248(void *a1)
{
  void (*v13)(void *__return_ptr, uint64_t);
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *);
  void (*v21)(void *, void);
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  void __src[64];
  unsigned char __dst[512];

  uint64_t v2 = v1;
  uint64_t v4 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250);
  uint64_t v5 = v4();
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_12;
    }
    uint64_t v6 = *(id *)(v5 + 32);
  }
  uint64_t v7 = v6;
  uint64_t v8 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((swift_isaMask & *v7) + 0x2B0))(v8);

  uint64_t result = v4();
  if ((result & 0xC000000000000001) != 0)
  {
LABEL_12:
    char v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    return result;
  }
  char v10 = *(id *)(result + 40);
LABEL_7:
  uint64_t v11 = v10;
  uint64_t v12 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((swift_isaMask & *v11) + 0x2B0))(v12);

  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v2 + 144) + 144);
  uint64_t v14 = swift_retain();
  v13(__src, v14);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v15 = sub_1000A62AC();
  uint64_t v16 = sub_100016F7C((uint64_t)__dst);
  id v17 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8))(v16);
  uint64_t v19 = v18;
  if (v15 > 1.0) {
    uint64_t v15 = 1.0;
  }
  uint64_t v20 = *(uint64_t (**)(void *))(**(void **)(v2 + 136) + 400);
  swift_retain();
  uint64_t v21 = (void (*)(void *, void))v20(__src);
  unint64_t v23 = v22;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *(void *)(v23 + 32);
  *(void *)(v23 + 32) = 0x8000000000000000;
  sub_1000D58E8(v17, v19, isUniquelyReferenced_nonNull_native, v15);
  *(void *)(v23 + 32) = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21(__src, 0);
  return swift_release();
}

uint64_t sub_100128560(void *a1)
{
  uint64_t v2 = v1;
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x2C8))();
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(unsigned char *))(**(void **)(v2 + 72) + 400);
    uint64_t v6 = a1;
    swift_retain();
    uint64_t v7 = (void (*)(unsigned char *, void))v5(v12);
    char v9 = v8;
    swift_bridgeObjectRetain();
    sub_100012894(&qword_1004C4358);
    sub_100012894(&qword_1004C4360);
    swift_dynamicCast();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_dynamicCast();
    swift_bridgeObjectRelease();
    void *v9 = v10;
    v7(v12, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100128720()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v13[0] - 8);
  uint64_t result = __chkstk_darwin(v13[0]);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004C29D8 != -1) {
    uint64_t result = swift_once();
  }
  char v9 = (void *)*((void *)&xmmword_1004F8000 + 1);
  if (*((void *)&xmmword_1004F8000 + 1))
  {
    uint64_t v10 = (void *)Contexts.PrivateQueue.init(_:)();
    aBlock[4] = sub_10012AF9C;
    aBlock[5] = v0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100049AB4;
    aBlock[3] = &unk_10048EFA0;
    uint64_t v11 = _Block_copy(aBlock);
    id v12 = v9;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v13[1] = _swiftEmptyArrayStorage;
    sub_100039B94();
    sub_100012894((uint64_t *)&unk_1004C68E0);
    sub_10002179C((unint64_t *)&qword_1004C5CB0, (uint64_t *)&unk_1004C68E0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v11);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, void))(v5 + 8))(v8, v13[0]);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001289E0(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x2C8))();
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(unsigned char *))(**(void **)(v1 + 72) + 400);
    swift_retain();
    uint64_t v5 = (void (*)(unsigned char *, void))v4(v10);
    uint64_t v7 = v6;
    swift_bridgeObjectRetain();
    sub_100012894(&qword_1004C4358);
    sub_100012894(&qword_1004C4360);
    swift_dynamicCast();
    sub_100069EF8((uint64_t)a1);

    swift_dynamicCast();
    swift_bridgeObjectRelease();
    void *v7 = v9;
    v5(v10, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100128B54(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  char v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(a1 + 72) + 144);
  uint64_t v3 = swift_retain();
  v2(&v14, v3);
  swift_release();
  uint64_t v4 = sub_100200CD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v6 = *(unsigned __int8 *)(a1 + 152);
  *(unsigned char *)(a1 + 152) = v4 & 1;
  if ((v4 & 1) != v6)
  {
    swift_beginAccess();
    uint64_t v7 = *(void *)(a1 + 64);
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      id v8 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      id v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v8)
      {
LABEL_4:
        if (v8 < 1)
        {
          __break(1u);
          return result;
        }
        for (unint64_t i = 0; i != v8; ++i)
        {
          if ((v7 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v10 = *(void *)(v7 + 8 * i + 32);
            swift_retain();
          }
          uint64_t Strong = swift_unknownObjectWeakLoadStrong();
          id v12 = *(void *)(v10 + 24);
          swift_release();
          if (Strong)
          {
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(void, uint64_t, uint64_t))(v12 + 128))(*(unsigned __int8 *)(a1 + 152), ObjectType, v12);
            swift_unknownObjectRelease();
          }
        }
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100128D14()
{
  sub_100128720();
  swift_retain();
  Synchronized.wrappedValue.getter();
  swift_release();
  swift_retain();
  Synchronized.wrappedValue.getter();
  swift_bridgeObjectRelease();
  Synchronized.wrappedValue.setter();
  swift_release();
  uint64_t v31 = v35 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(v35 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(v35 + 64);
  id v33 = (uint64_t *)(v0 + 64);
  swift_beginAccess();
  int64_t v4 = 0;
  int64_t v32 = (unint64_t)(v1 + 63) >> 6;
  while (1)
  {
    if (v3)
    {
      unint64_t v5 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v6 = v5 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_54;
    }
    if (v7 >= v32) {
      break;
    }
    unint64_t v8 = *(void *)(v31 + 8 * v7);
    ++v4;
    if (!v8)
    {
      int64_t v4 = v7 + 1;
      if (v7 + 1 >= v32) {
        break;
      }
      unint64_t v8 = *(void *)(v31 + 8 * v4);
      if (!v8)
      {
        int64_t v4 = v7 + 2;
        if (v7 + 2 >= v32) {
          break;
        }
        unint64_t v8 = *(void *)(v31 + 8 * v4);
        if (!v8)
        {
          int64_t v9 = v7 + 3;
          if (v9 >= v32) {
            break;
          }
          unint64_t v8 = *(void *)(v31 + 8 * v9);
          if (!v8)
          {
            while (1)
            {
              int64_t v4 = v9 + 1;
              if (__OFADD__(v9, 1)) {
                goto LABEL_56;
              }
              if (v4 >= v32) {
                goto LABEL_50;
              }
              unint64_t v8 = *(void *)(v31 + 8 * v4);
              ++v9;
              if (v8) {
                goto LABEL_21;
              }
            }
          }
          int64_t v4 = v9;
        }
      }
    }
LABEL_21:
    unint64_t v3 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v4 << 6);
LABEL_22:
    uint64_t v10 = *(void **)(*(void *)(v35 + 56) + 8 * v6);
    type metadata accessor for WorldPoint();
    uint64_t v11 = swift_dynamicCastClass();
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *v33;
      if (!((unint64_t)*v33 >> 62))
      {
        uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v15 = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14) {
          goto LABEL_25;
        }
        goto LABEL_5;
      }
      id v29 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      if (!v14) {
        goto LABEL_5;
      }
LABEL_25:
      if (v14 < 1)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        return;
      }
      int64_t v34 = v4;
      for (uint64_t i = 0; i != v14; ++i)
      {
        if ((v13 & 0xC000000000000001) != 0)
        {
          uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v19 = *(void *)(v13 + 8 * i + 32);
          swift_retain();
        }
        if (swift_unknownObjectWeakLoadStrong())
        {
          uint64_t v17 = *(void *)(v19 + 24);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24))(v12, ObjectType, v17);
          swift_release();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_release();
        }
      }
LABEL_4:
      int64_t v4 = v34;
      goto LABEL_5;
    }
    type metadata accessor for WorldLine();
    uint64_t v20 = swift_dynamicCastClass();
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *v33;
      if ((unint64_t)*v33 >> 62)
      {
        id v30 = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        if (!v23) {
          goto LABEL_5;
        }
LABEL_37:
        if (v23 < 1) {
          goto LABEL_55;
        }
        int64_t v34 = v4;
        for (uint64_t j = 0; j != v23; ++j)
        {
          if ((v22 & 0xC000000000000001) != 0)
          {
            uint64_t v28 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v28 = *(void *)(v22 + 8 * j + 32);
            swift_retain();
          }
          if (swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v26 = *(void *)(v28 + 24);
            uint64_t v27 = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v21, v27, v26);
            swift_release();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();
          }
        }
        goto LABEL_4;
      }
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v24 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v23) {
        goto LABEL_37;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
LABEL_50:
  swift_release();
  if ([self jasperAvailable]) {
    sub_100127778();
  }
}